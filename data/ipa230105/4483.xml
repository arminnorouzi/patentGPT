<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004484A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004484</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363854</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>36</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>23</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>3688</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>3684</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2379</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Systems and Methods for Impact-Centric Source Code Testing Based on Historical Execution Analysis</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>FMR LLC</orgname><address><city>Boston</city><state>MA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Sooji</last-name><first-name>Krishnaraj</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Arumugham</last-name><first-name>Aravind</first-name><address><city>Chennai</city><country>IN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Rajashekarappa</last-name><first-name>Ashok</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Systems and methods for implementing impact-centric source code testing based on historical execution analysis. The method includes receiving a source code file including modified classes and unmodified classes. The method also includes storing class names corresponding to the modified classes in a database. The method further includes determining impacted classes in the source code file based on the class names corresponding to the modified classes. The method also includes, for each of the impacted classes in the source code file, identifying at least one test. The method further includes, for each of the impacted classes in the source code file, initiating the at least one test for the impacted class. The method also includes generating a data log including results generated by the at least one test for each of the impacted classes.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="177.46mm" wi="158.75mm" file="US20230004484A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="234.27mm" wi="155.87mm" file="US20230004484A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="228.85mm" wi="146.90mm" file="US20230004484A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="203.96mm" wi="169.25mm" orientation="landscape" file="US20230004484A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="232.07mm" wi="169.25mm" orientation="landscape" file="US20230004484A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="231.99mm" wi="169.25mm" orientation="landscape" file="US20230004484A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="224.71mm" wi="168.57mm" file="US20230004484A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="231.14mm" wi="168.57mm" file="US20230004484A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD OF THE INVENTION</heading><p id="p-0002" num="0001">The present invention relates generally to systems and methods for testing source code, including systems and methods for testing source code based on historical execution analysis.</p><heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading><p id="p-0003" num="0002">Software applications experience frequent changes, with capabilities added, enhanced, or sometimes even removed. The source code of these software applications undergoes various tests after every change in order to ensure software validity and continued integration. Often, automated builds run unit tests, component tests, functional tests, regression tests and/or integration tests to quickly find software bugs or integration errors. However, as the software source code size increases or goes through numerous changes, the time required to run these tests increases, slowing down pipeline execution.</p><heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0004" num="0003">Accordingly, an object of the invention is to provide systems and methods for enabling faster execution of functional and unit tests through a selective set of impact centric test executions. For example, it is an object of the invention to provide systems and methods for faster execution of functional and unit tests through a selective set of impact centric test executions based on code changes and historical source code test execution analysis. It is an object of the invention to provide systems and methods for identifying high risk source code to be tested. It is an object of the invention to provide systems and methods for providing developers with feedback during coding, code commits, and code reviews. It is an object of the invention to provide systems and methods for implementing impact-centric source code testing based on historical execution analysis.</p><p id="p-0005" num="0004">In some aspects, a computerized method for implementing impact-centric source code testing based on historical execution analysis includes receiving a source code file including modified classes and unmodified classes. The method further includes storing class names corresponding to the modified classes in a database. The method also includes determining impacted classes in the source code file based on the class names corresponding to the modified classes. For example, in some embodiments, the method also includes determining impacted functions in the source code file based on the class names corresponding to the modified classes.</p><p id="p-0006" num="0005">The method further includes, for each of the impacted classes in the source code file, identifying at least one test. In some embodiments, the mapping of tests and impacted classes is performed at each modified/unmodified source code line level. Further, the method includes, for each of the impacted classes in the source code file, initiating the at least one test for the impacted class. In some embodiments, the method also includes determining whether the at least one test has been initiated for each of the impacted classes. For example, in some embodiments, the method further includes, in response to determining that the at least one test has not been initiated for each of the impacted classes, preventing a source code commit. The method also includes generating a data log including results generated by the at least one test for each of the impacted classes.</p><p id="p-0007" num="0006">In some embodiments, the method further includes determining frequently changed classes based on the class names stored in the database. For example, in some embodiments, the method also includes determining high-risk classes in the source code file based on the frequently changed classes. In some embodiments, the identification of high-risk source code is based on the frequency of executions of the source code and/or the number of tests running the same code. In some embodiments, the method further includes, for each of the high-risk classes in the source code file, identifying at least one high value test. For example, in some embodiments, the method also includes, for each of the high-risk classes in the source code file, initiating the at least one high value test for the high-risk class. In some embodiments, the method further includes generating a high-risk data log including results generated by the at least one high value test for each of the high-risk classes. For example, in some embodiments, the method also includes generating for display the data log and the high-risk data log on a user device.</p><p id="p-0008" num="0007">In some aspects, a system for implementing impact-centric source code testing based on historical execution analysis includes a server computing device communicatively coupled to a database and a user device over a network. The server computing device is configured to receive a source code file including modified classes and unmodified classes. The server computing device is also configured to store class names corresponding to the modified classes in the database. Further, the server computing device is configured to determine impacted classes in the source code file based on the class names corresponding to the modified classes. For example, in some embodiments, the server computing device is further configured to determine impacted functions in the source code file based on the class names corresponding to the modified classes.</p><p id="p-0009" num="0008">The server computing device is also configured to, for each of the impacted classes in the source code file, identify at least one test. Further, the server computing device is configured to, for each of the impacted classes in the source code file, initiate the at least one test for the impacted class. In some embodiments, the server computing device is further configured to determine whether the at least one test has been initiated for each of the impacted classes. For example, in some embodiments, the server computing device is further configured to, in response to determining that the at least one test has not been initiated for each of the impacted classes, prevent a source code commit. The server computing device is also configured to generate a data log including results generated by the at least one test for each of the impacted classes.</p><p id="p-0010" num="0009">In some embodiments, the server computing device is further configured to determine frequently changed classes based on the class names stored in the database. For example, in some embodiments, the server computing device is further configured to determine high-risk classes in the source code file based on the frequently changed classes. In some embodiments, the server computing device is further configured to, for each of the high-risk classes in the source code file, identify at least one high value test. For example, in some embodiments, the server computing device is further configured to, for each of the high-risk classes in the source code file, initiate the at least one high value test for the high-risk class. In some embodiments, the server computing device is further configured to generate a high-risk data log including results generated by the at least one high value test for each of the high-risk classes. For example, in some embodiments, the server computing device is further configured to generate for display the data log and the high-risk data log on the user device.</p><p id="p-0011" num="0010">Other aspects and advantages of the invention can become apparent from the following drawings and description, all of which illustrate the principles of the invention, by way of example only.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0012" num="0011">The advantages of the invention described above, together with further advantages, may be better understood by referring to the following description taken in conjunction with the accompanying drawings. The drawings are not necessarily to scale, emphasis instead generally being placed upon illustrating the principles of the invention.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of an exemplary data communications network, according to embodiments of the technology described herein.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram of an exemplary server computing device and an exemplary user device, according to embodiments of the technology described herein.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram of an exemplary system for implementing impact-centric source code testing based on historical execution analysis, according to embodiments of the technology described herein.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram showing an exemplary visualization of database entries with test to source code mapping, according to embodiments of the technology described herein.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a diagram showing an exemplary visualization of identified modifications to source code lines, according to embodiments of the technology described herein.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow diagram of a computer-implemented method for implementing impact-centric source code testing based on historical execution analysis, according to embodiments of the technology described herein.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow diagram of a computer-implemented method for implementing impact-centric source code testing for high-risk source code, according to embodiments of the technology described herein.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading><p id="p-0020" num="0019">The systems and methods described herein can enable faster execution of functional and unit tests through a selective set of impact centric test executions. For example, in some aspects, the systems and methods described herein can include one or more mechanisms or methods for faster execution of functional and unit tests through a selective set of impact centric test executions based on code changes and historical source code test execution analysis. The system and methods can include mechanisms or methods for identifying high risk source code to be tested. The systems and methods described herein can provide mechanisms or methods for providing developers with feedback during coding, code commits, and code reviews.</p><p id="p-0021" num="0020">The systems and methods described herein can be implemented using a data communications network, server computing devices, and mobile devices. For example, referring to <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref>, an exemplary communications system <b>100</b> includes data communications network <b>150</b>, exemplary server computing devices <b>200</b>, and exemplary user devices <b>250</b>. In some embodiments, the system <b>100</b> includes one or more server computing devices <b>200</b> and one or more user devices <b>250</b>. Each server computing device <b>200</b> can include a processor <b>202</b>, memory <b>204</b>, storage <b>206</b>, and communication circuitry <b>208</b>. Each user device <b>250</b> can include a processor <b>252</b>, memory <b>254</b>, storage <b>256</b>, and communication circuitry <b>258</b>. In some embodiments, communication circuitry <b>208</b> of the server computing devices <b>200</b> is communicatively coupled to the communication circuitry <b>258</b> of the user devices <b>250</b> via data communications network <b>150</b>. Communication circuitry <b>208</b> and communication circuitry <b>258</b> can use Bluetooth, Wi-Fi, or any comparable data transfer connection. The user devices <b>250</b> can include personal workstations, laptops, tablets, mobile devices, or any other comparable device.</p><p id="p-0022" num="0021">The systems and methods described herein can provide mechanisms or methods for implementing impact-centric source code testing based on historical execution analysis. For example, referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a system <b>300</b> for implementing impact-centric source code testing based on historical execution analysis is illustrated. System <b>300</b> includes source code repository <b>310</b>, passive data collector <b>320</b>, commit data collector <b>330</b>, mapping database <b>340</b>, and CodeCommit analyzer <b>350</b>. The elements of system <b>300</b> can be implemented using communications system <b>100</b>.</p><p id="p-0023" num="0022">Source code repository <b>310</b> is configured to receive and store source code submitted by developers for code committing. Passive data collector <b>320</b> is configured to perform a compiler scan of the source code base and generate a mapping of tests to each line of code based on historical analysis of calls made. Passive data collector <b>320</b> is also configured to continuously check for test execution and map the tests to each line based on the coverage during tests. Commit data collector <b>330</b> is configured to receive a notification every time a code commit is requested and receive the changes in the source code that the developer wants to commit. Mapping database <b>340</b> is configured to store and maintain a mapping of test cases to source code at the line level. Passive data collector <b>320</b>, commit data collector <b>330</b>, and CodeCommit analyzer <b>350</b> are configured to continuously update mapping database <b>340</b>. For example, <figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an exemplary visualization <b>400</b> of database entries with test to source code mapping stored in mapping database <b>340</b>.</p><p id="p-0024" num="0023">CodeCommit analyzer <b>350</b> is configured to then identify whether the changes to the source code included an addition of a new line of code, a modification to an existing line of code, and/or a deletion of an existing line of code. For new lines of code, CodeCommit analyzer <b>350</b> is configured to identify a new test from passive data collector <b>320</b>. For a modification to an existing line of code, CodeCommit analyzer <b>350</b> is configured to receive and/or update tests from/to mapping database <b>340</b>. For a deletion of an existing line of code, CodeCommit analyzer <b>350</b> is configured to remove a corresponding test for the deleted line or lines of code. Once all of the changes are analyzed, the tests are logged into a software management tool for execution and traceability. In some embodiments, the software management tool is Jira. For example, <figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an exemplary visualization <b>500</b> of identified modifications to source code lines and an acknowledgment by the software management tool of updated test details.</p><p id="p-0025" num="0024">During code commit, information on lines impacted with tests to be run is shared with the developer via the software management tool. In some embodiments, if a predefined threshold of source code modified does not have a corresponding test, the code commit is rejected by the software management tool. In some embodiments, system <b>300</b> is configured to identify frequently modified source code and flag it as high-risk code to the developer. For example, in some embodiments, system <b>300</b> is configured to identify high value test cases for the codebase and provide recommendations to developers to refactor and/or redesign the corresponding change.</p><p id="p-0026" num="0025">Referring to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, a process <b>600</b> for implementing impact-centric source code testing based on historical execution analysis is illustrated. The process <b>600</b> begins by receiving, by a server computing device <b>200</b>, a source code file including modified classes and unmodified classes in step <b>602</b>. Process <b>600</b> continues by storing, by the server computing device <b>200</b>, class names corresponding to the modified classes in a database <b>340</b> in step <b>604</b>. Process <b>600</b> continues by determining, by the server computing device <b>200</b>, impacted classes in the source code file based on the class names corresponding to the modified classes in step <b>606</b>. For example, in some embodiments, the server computing device <b>200</b> is further configured to determine impacted functions in the source code file based on the class names corresponding to the modified classes.</p><p id="p-0027" num="0026">Process <b>600</b> continues by, for each of the impacted classes in the source code file, identifying, by the server computing device <b>200</b>, at least one test in step <b>608</b>. In some embodiments, the mapping of tests and impacted classes is performed at each modified/unmodified source code line level. Process <b>600</b> continues by, for each of the impacted classes in the source code file, initiating, by the server computing device <b>200</b>, the at least one test for the impacted class in step <b>610</b>. In some embodiments, the server computing device <b>200</b> is further configured to determine whether the at least one test has been initiated for each of the impacted classes. For example, in some embodiments, the server computing device <b>200</b> is further configured to, in response to determining that the at least one test has not been initiated for each of the impacted classes, prevent a source code commit. Process <b>600</b> finishes by generating, by the server computing device <b>200</b>, a data log including results generated by the at least one test for each of the impacted classes in step <b>612</b>.</p><p id="p-0028" num="0027">In some embodiments, process <b>600</b> includes determining, by the server computing device <b>200</b>, frequently changed classes based on the class names stored in the database <b>340</b>. For example, in some embodiments, process <b>600</b> includes determining, by the server computing device <b>200</b>, high-risk classes in the source code file based on the frequently changed classes. In some embodiments, the identification of high-risk source code is based on the frequency of executions of the source code and/or the number of tests running the same code. In some embodiments, process <b>600</b> includes, for each of the high-risk classes in the source code file, identifying, by the server computing device <b>200</b>, at least one high value test. For example, in some embodiments, process <b>600</b> includes, for each of the high-risk classes in the source code file, initiating, by the server computing device <b>200</b>, the at least one high value test for the high-risk class. In some embodiments, process <b>600</b> includes generating, by the server computing device <b>200</b>, a high-risk data log including results generated by the at least one high value test for each of the high-risk classes. For example, in some embodiments, process <b>600</b> includes generating, by the server computing device <b>200</b>, for display the data log and the high-risk data log on a user device <b>250</b>.</p><p id="p-0029" num="0028">In some aspects, process <b>600</b> can be implemented on a system <b>300</b> for implementing impact-centric source code testing based on historical execution analysis. The system <b>300</b> includes a server computing device <b>200</b> communicatively coupled to a database <b>340</b> and a user device <b>250</b> over a network. The server computing device <b>200</b> is configured to receive a source code file including modified classes and unmodified classes. The server computing device <b>200</b> is also configured to store class names corresponding to the modified classes in the database <b>340</b>. Further, the server computing device <b>200</b> is configured to determine impacted classes in the source code file based on the class names corresponding to the modified classes. For example, in some embodiments, the server computing device <b>200</b> is further configured to determine impacted functions in the source code file based on the class names corresponding to the modified classes.</p><p id="p-0030" num="0029">The server computing device <b>200</b> is also configured to, for each of the impacted classes in the source code file, identify at least one test. Further, the server computing device <b>200</b> is configured to, for each of the impacted classes in the source code file, initiate the at least one test for the impacted class. In some embodiments, the server computing device <b>200</b> is further configured to determine whether the at least one test has been initiated for each of the impacted classes. For example, in some embodiments, the server computing device <b>200</b> is further configured to, in response to determining that the at least one test has not been initiated for each of the impacted classes, prevent a source code commit. The server computing device <b>200</b> is also configured to generate a data log including results generated by the at least one test for each of the impacted classes.</p><p id="p-0031" num="0030">In some embodiments, the server computing device <b>200</b> is further configured to determine frequently changed classes based on the class names stored in the database <b>340</b>. For example, in some embodiments, the server computing device <b>200</b> is further configured to determine high-risk classes in the source code file based on the frequently changed classes. In some embodiments, the server computing device <b>200</b> is further configured to, for each of the high-risk classes in the source code file, identify at least one high value test. For example, in some embodiments, the server computing device <b>200</b> is further configured to, for each of the high-risk classes in the source code file, initiate the at least one high value test for the high-risk class. In some embodiments, the server computing device <b>200</b> is further configured to generate a high-risk data log including results generated by the at least one high value test for each of the high-risk classes. For example, in some embodiments, the server computing device <b>200</b> is further configured to generate for display the data log and the high-risk data log on the user device <b>250</b>.</p><p id="p-0032" num="0031">Referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, a process <b>700</b> for implementing impact-centric source code testing for high-risk source code is illustrated. Process <b>700</b> begins by receiving, by a server computing device <b>200</b>, a source code file including modified classes and unmodified classes in step <b>702</b>. Process <b>700</b> continues by storing, by the server computing device <b>200</b>, class names corresponding to the modified classes in a database <b>340</b> in step <b>704</b>. Process <b>700</b> continues by determining, by the server computing device <b>200</b>, frequently changed classes based on the class names stored in the database <b>340</b> in step <b>706</b>.</p><p id="p-0033" num="0032">Process <b>700</b> continues by determining, by the server computing device <b>200</b>, high-risk classes in the source code file based on the determined frequently changed classes in step <b>708</b>. Process <b>700</b> continues by identifying, by the server computing device <b>200</b>, for each of the high-risk classes in the source code file, at least one high value test in step <b>710</b>. Process <b>700</b> continues by initiating, by the server computing device <b>200</b>, for each of the high-risk classes in the source code file, the at least one high value test for the high-risk class in step <b>712</b>. Process <b>700</b> finishes by generating, by the server computing device <b>200</b>, a high-risk data log including results generated by the at least one high value test for each of the high-risk classes in step <b>714</b>. In some embodiments, process <b>700</b> includes generating, by the server computing device <b>200</b>, for display the high-risk data log on a user device <b>250</b>.</p><p id="p-0034" num="0033">In some aspects, process <b>700</b> can be implemented a system <b>300</b> for implementing impact-centric source code testing for high-risk source code. The system <b>300</b> includes a server computing device <b>200</b> communicatively coupled to a database <b>340</b> and a user device <b>250</b> over a network. The server computing device <b>200</b> is configured to receive a source code file including modified classes and unmodified classes. The server computing device <b>200</b> is also configured to store class names corresponding to the modified classes in the database <b>340</b>. Further, the server computing device <b>200</b> is configured to determine frequently changed classes based on the class names stored in the database <b>340</b>.</p><p id="p-0035" num="0034">The server computing device <b>200</b> is also configured to determine high-risk classes in the source code file based on the determined frequently changed classes. Further, the server computing device <b>200</b> is configured to identify, for each of the high-risk classes in the source code file, at least one high value test. The server computing device <b>200</b> is also configured to initiate, for each of the high-risk classes in the source code file, the at least one high value test for the high-risk class. Further, the server computing device <b>200</b> is configured to generate a high-risk data log including results generated by the at least one high value test for each of the high-risk classes. In some embodiments, the server computing device <b>200</b> is further configured to generate for display the high-risk data log on the user device <b>250</b>.</p><p id="p-0036" num="0035">The above-described techniques can be implemented in digital and/or analog electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. The implementation can be as a computer program product, i.e., a computer program tangibly embodied in a machine-readable storage device, for execution by, or to control the operation of, a data processing apparatus, e.g., a programmable processor, a computer, and/or multiple computers. A computer program can be written in any form of computer or programming language, including source code, compiled code, interpreted code and/or machine code, and the computer program can be deployed in any form, including as a stand-alone program or as a subroutine, element, or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one or more sites. The computer program can be deployed in a cloud computing environment (e.g., Amazon&#xae; AWS, Microsoft&#xae; Azure, IBM&#xae;).</p><p id="p-0037" num="0036">Method steps can be performed by one or more processors executing a computer program to perform functions of the invention by operating on input data and/or generating output data. Method steps can also be performed by, and an apparatus can be implemented as, special purpose logic circuitry, e.g., a FPGA (field programmable gate array), a FPAA (field-programmable analog array), a CPLD (complex programmable logic device), a PSoC (Programmable System-on-Chip), ASIP (application-specific instruction-set processor), or an ASIC (application-specific integrated circuit), or the like. Subroutines can refer to portions of the stored computer program and/or the processor, and/or the special circuitry that implement one or more functions.</p><p id="p-0038" num="0037">Processors suitable for the execution of a computer program include, by way of example, special purpose microprocessors specifically programmed with instructions executable to perform the methods described herein, and any one or more processors of any kind of digital or analog computer. Generally, a processor receives instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and/or data. Memory devices, such as a cache, can be used to temporarily store data. Memory devices can also be used for long-term data storage. Generally, a computer also includes, or is operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. A computer can also be operatively coupled to a communications network in order to receive instructions and/or data from the network and/or to transfer instructions and/or data to the network. Computer-readable storage mediums suitable for embodying computer program instructions and data include all forms of volatile and non-volatile memory, including by way of example semiconductor memory devices, e.g., DRAM, SRAM, EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and optical disks, e.g., CD, DVD, HD-DVD, and Blu-ray disks. The processor and the memory can be supplemented by and/or incorporated in special purpose logic circuitry.</p><p id="p-0039" num="0038">To provide for interaction with a user, the above described techniques can be implemented on a computing device in communication with a display device, e.g., a CRT (cathode ray tube), plasma, or LCD (liquid crystal display) monitor, a mobile device display or screen, a holographic device and/or projector, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse, a trackball, a touchpad, or a motion sensor, by which the user can provide input to the computer (e.g., interact with a user interface element). Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, and/or tactile input.</p><p id="p-0040" num="0039">The above-described techniques can be implemented in a distributed computing system that includes a back-end component. The back-end component can, for example, be a data server, a middleware component, and/or an application server. The above described techniques can be implemented in a distributed computing system that includes a front-end component. The front-end component can, for example, be a client computer having a graphical user interface, a Web browser through which a user can interact with an example implementation, and/or other graphical user interfaces for a transmitting device. The above described techniques can be implemented in a distributed computing system that includes any combination of such back-end, middleware, or front-end components.</p><p id="p-0041" num="0040">The components of the computing system can be interconnected by transmission medium, which can include any form or medium of digital or analog data communication (e.g., a communication network). Transmission medium can include one or more packet-based networks and/or one or more circuit-based networks in any configuration. Packet-based networks can include, for example, the Internet, a carrier internet protocol (IP) network (e.g., local area network (LAN), wide area network (WAN), campus area network (CAN), metropolitan area network (MAN), home area network (HAN)), a private IP network, an IP private branch exchange (IPBX), a wireless network (e.g., radio access network (RAN), Bluetooth, near field communications (NFC) network, Wi-Fi, WiMAX, general packet radio service (GPRS) network, HiperLAN), and/or other packet-based networks. Circuit-based networks can include, for example, the public switched telephone network (PSTN), a legacy private branch exchange (PBX), a wireless network (e.g., RAN, code-division multiple access (CDMA) network, time division multiple access (TDMA) network, global system for mobile communications (GSM) network), and/or other circuit-based networks.</p><p id="p-0042" num="0041">Information transfer over transmission medium can be based on one or more communication protocols. Communication protocols can include, for example, Ethernet protocol, Internet Protocol (IP), Voice over IP (VOIP), a Peer-to-Peer (P2P) protocol, Hypertext Transfer Protocol (HTTP), Session Initiation Protocol (SIP), H.323, Media Gateway Control Protocol (MGCP), Signaling System #7 (SS7), a Global System for Mobile Communications (GSM) protocol, a Push-to-Talk (PTT) protocol, a PTT over Cellular (POC) protocol, Universal Mobile Telecommunications System (UMTS), 3GPP Long Term Evolution (LTE) and/or other communication protocols.</p><p id="p-0043" num="0042">Devices of the computing system can include, for example, a computer, a computer with a browser device, a telephone, an IP phone, a mobile device (e.g., cellular phone, personal digital assistant (PDA) device, smart phone, tablet, laptop computer, electronic mail device), and/or other communication devices. The browser device includes, for example, a computer (e.g., desktop computer and/or laptop computer) with a World Wide Web browser (e.g., Chrome&#x2122; from Google, Inc., Microsoft&#xae; Internet Explorer&#xae; available from Microsoft Corporation, and/or Mozilla&#xae; Firefox available from Mozilla Corporation). Mobile computing device include, for example, a Blackberry&#xae; from Research in Motion, an iPhone&#xae; from Apple Corporation, and/or an Android&#x2122;-based device. IP phones include, for example, a Cisco&#xae; Unified IP Phone 7985G and/or a Cisco&#xae; Unified Wireless Phone 7920 available from Cisco Systems, Inc.</p><p id="p-0044" num="0043">The above-described techniques can be implemented using supervised learning and/or machine learning algorithms. Supervised learning is the machine learning task of learning a function that maps an input to an output based on example input-output pairs. It infers a function from labeled training data consisting of a set of training examples. Each example is a pair consisting of an input object and a desired output value. A supervised learning algorithm or machine learning algorithm analyzes the training data and produces an inferred function, which can be used for mapping new examples.</p><p id="p-0045" num="0044">Comprise, include, and/or plural forms of each are open ended and include the listed parts and can include additional parts that are not listed. And/or is open ended and includes one or more of the listed parts and combinations of the listed parts.</p><p id="p-0046" num="0045">One skilled in the art will realize the subject matter may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. The foregoing embodiments are therefore to be considered in all respects illustrative rather than limiting of the subject matter described herein.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computerized method for implementing impact-centric source code testing based on historical execution analysis, the method comprising:<claim-text>retrieving, by a server computer, historical testing data associated with a source code base, the historical testing data comprising identification of a plurality of tests previously executed against the source code base;</claim-text><claim-text>performing, by a server computer, a compiler scan of the source code base to generate a mapping of one or more of the plurality of tests to each line of code in the source code base using the historical testing data;</claim-text><claim-text>receiving, by a server computer, a source code file comprising a plurality of modified classes and a plurality of unmodified classes, each class associated with a class name;</claim-text><claim-text>determining, by the server computer, a plurality of impacted classes in the source code file based on the class names corresponding to the plurality of modified classes;</claim-text><claim-text>for each of the plurality of impacted classes in the source code file, identifying, by the server computer, at least one test of the plurality of tests historically executed against the plurality of impacted classes using the generated mapping;</claim-text><claim-text>for each of the plurality of impacted classes in the source code file for which at least one corresponding test is identified, initiating, by the server computer, the at least one identified test for the impacted class; and</claim-text><claim-text>generating, by the server computer, a data log comprising a plurality of results generated by the at least one test for each of the plurality of impacted classes.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computerized method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the server computer further determines a plurality of impacted functions in the source code file based on the class names corresponding to the plurality of modified classes.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computerized method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the server computer further determines a plurality of frequently changed classes based on a number of code commits performed against the classes in a software management tool.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computerized method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the server computer further determines a plurality of high-risk classes in the source code file based on the number of code commits performed against the classes in a software management tool.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computerized method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the server computer further identifies, for each of the plurality of high-risk classes in the source code file, at least one test of the plurality of tests historically executed against the plurality of high-risk classes using the generated mapping.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computerized method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the server computer further initiates, for each of the plurality of high-risk classes in the source code file, the at least one identified test for the high-risk class.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computerized method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the server computer further generates a high-risk data log comprising a plurality of results generated by the at least one test for each of the plurality of high-risk classes.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The computerized method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the server computer further generates for display the data log and the high-risk data log on a user device.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. (canceled)</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computerized method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the server computer further prevent, in response to identifying that a minimum number of tests have not been historically executed against one or more of the plurality of impacted classes, a source code commit of the source code file.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A system for implementing impact-centric source code testing based on historical execution analysis, the system comprising a server computer communicatively coupled to a user computer and a database over a network, the server computer comprising a memory for storing computer-executable instructions and a processor that executes the computer-executable instructions to:<claim-text>retrieve historical testing data associated with a source code base, the historical testing data comprising identification of a plurality of tests previously executed against the source code base;</claim-text><claim-text>perform a compiler scan of the source code base to generate a mapping of one or more of the plurality of tests to each line of code in the source code base using the historical testing data;</claim-text><claim-text>receive a source code file comprising a plurality of modified classes and a plurality of unmodified classes, each class associated with a class name;</claim-text><claim-text>determine a plurality of impacted classes in the source code file based on the class names corresponding to the plurality of modified classes;</claim-text><claim-text>for each of the plurality of impacted classes in the source code file, identify at least one test of the plurality of tests historically executed against the plurality of impacted classes using the generated mapping;</claim-text><claim-text>for each of the plurality of impacted classes in the source code file for which at least one corresponding test is identified, initiate the at least one identified test for the impacted class; and</claim-text><claim-text>generate a data log comprising a plurality of results generated by the at least one test for each of the plurality of impacted classes.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the server computer further determines a plurality of impacted functions in the source code file based on the class names corresponding to the plurality of modified classes.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the server computer further determines a plurality of frequently changed classes based on a number of code commits performed against the classes in a software management tool.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the server computer further determines a plurality of high-risk classes in the source code file based on the number of code commits performed against the classes in a software management tool.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the server computer further identifies, for each of the plurality of high-risk classes in the source code file, at least one test of the plurality of tests historically executed against the plurality of high-risk classes using the generated mapping.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the server computer further initiates, for each of the plurality of high-risk classes in the source code file, the at least one identified test for the high-risk class.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the server computer further generates a high-risk data log comprising a plurality of results generated by the at least one test for each of the plurality of high-risk classes.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the server computer further generates for display the data log and the high-risk data log on a user device.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. (canceled)</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the server computer further prevent, in response to identifying that a minimum number of tests have not been historically executed against one or more of the plurality of impacted classes, a source code commit of the source code file.</claim-text></claim></claims></us-patent-application>