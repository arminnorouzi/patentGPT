<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004378A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004378</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17855954</doc-number><date>20220701</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>DE</country><doc-number>10 2021 207 046.9</doc-number><date>20210705</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>65</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>36</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>455</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>445</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>65</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>3688</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>455</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>445</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">UPGRADING OR UPDATING A SOFTWARE APPLICATION</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Siemens Healthcare GmbH</orgname><address><city>Erlangen</city><country>DE</country></address></addressbook><residence><country>DE</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>GREYER</last-name><first-name>Stephan</first-name><address><city>Erlangen</city><country>DE</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Siemens Healthcare GmbH</orgname><role>03</role><address><city>Erlangen</city><country>DE</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">In a computer-implemented method for upgrading or updating a software application installed on a host system, a first map of an operating system of the host system is generated. The operating system of the host system is started inside a virtual machine environment using the first map, and the software application is updated or upgraded in the virtual machine environment. A second map of the operating system in the current state with the updated or upgraded software application is generated in the virtual machine environment, and the second map of the operating system is loaded inside the host system.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="134.96mm" wi="80.52mm" file="US20230004378A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="228.68mm" wi="94.06mm" file="US20230004378A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="162.22mm" wi="62.91mm" file="US20230004378A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION(S)</heading><p id="p-0002" num="0001">The present application claims priority under 35 U.S.C. &#xa7; 119 to German Patent Application No. DE 10 2021 207 046.9, filed Jul. 5, 2021, the entire contents of which are incorporated herein by reference.</p><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">Embodiments of the present invention relate to a computer-implemented method for upgrading or updating a software application and to a corresponding apparatus. In particular, embodiments of the present invention relate to updating or upgrading software applications in the medical sector.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Users can be provided with software programs at least partially online without the user having to locally store all necessary data. For example, in the case of Software-as-a-Service (SaaS) a service provider provides software applications, for instance access to databases, management software and the like.</p><p id="p-0005" num="0004">Image diagnosis software can thus be provided in the medical sector, which can be also used, for instance, with mobile end devices without particular hardware requirements. A powerful, quantitative evaluation can be outsourced, so local computing power can be saved. In addition, a relatively large amount of data can also be provided without excessive demands on local storage space.</p><p id="p-0006" num="0005">The software can be provided in the framework of a virtual network, which comprises a plurality of virtual machines. The virtual network can be managed and maintained by the service provider. Updates or upgrades in particular are also necessary for this. Occasional updates or upgrades are also necessary in the case of locally installed applications in order to keep the software application up-to-date.</p><p id="p-0007" num="0006">An exemplary method for upgrading virtual machine (VM) software is known from US 2015/0339149 A1. For this purpose, a central management server creates a virtual infrastructure. A first template VM is created and cloned. If an upgrade is available a second template VM is generated. By removing and generating logical links, a virtual operating system, which includes the upgrade, is incorporated.</p><p id="p-0008" num="0007">US 2011/0208929 A1 is based on virtualized systems, wherein a virtual image is shifted to a newly created partition.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0009" num="0008">In the case of more extensive updates or upgrades, the installation can take a relatively long time, for instance several hours. In the process it must be ensured that no changes are lost in application-specific database files. During the update or upgrade the software applications are thus typically no longer available. The user frequently depends on being able to use the software application without interruption, however. For example, it is disadvantageous in the medical sector if a software application used for diagnosis is no longer available for a relatively long period, for instance one lasting several hours.</p><p id="p-0010" num="0009">It is possible to postpone the updates or upgrades, for instance until the next weekend. In particular, in the case of safety-critical updates or upgrades it is less practical, however, to postpone the update or upgrade for a relatively long time.</p><p id="p-0011" num="0010">Embodiments of the present invention therefore to make the installation process more pleasant for the user. In particular, the situation should be avoided where the software application cannot be used by the user for a relatively long time owing to the update or upgrade.</p><p id="p-0012" num="0011">Embodiments of the present invention provide a computer-implemented method for upgrading or updating a software application and to a corresponding apparatus. Embodiments of the present invention relate, moreover, to a computer program product and to a non-volatile, computer-readable storage medium.</p><p id="p-0013" num="0012">In accordance with a first aspect, embodiments of the present invention relate to a computer-implemented method for upgrading or updating a software application, wherein the software application is installed on a host system. A first map of an operating system of the host system is generated. The operating system of the host system is started inside a virtual machine, VM, environment using the first map. The software application is updated or upgraded in the VM environment. A second map of the operating system is generated in the VM environment in the current state with the updated or upgraded software application. The second map of the operating system is loaded inside the host system.</p><p id="p-0014" num="0013">In accordance with a second aspect, embodiments of the present invention relate to an apparatus with a storage facility with an operating system with data relating to a software application. The apparatus also comprises a computing facility, which is adapted to execute the software application. For upgrading or updating the software application, the computing facility is also adapted</p><p id="p-0015" num="0014">to generate a first map of the operating system;</p><p id="p-0016" num="0015">to start the operating system inside a virtual machine, VM, environment using the first map;</p><p id="p-0017" num="0016">to update or upgrade the software application in the VM environment;</p><p id="p-0018" num="0017">to generate a second map of the operating system with the updated or upgraded software application in the VM environment; and</p><p id="p-0019" num="0018">to load the second map of the operating system outside of the VM environment.</p><p id="p-0020" num="0019">Embodiments of the present invention makes it possible to carry out the majority of the installation of the updates or upgrades in the background. The user can continue to use the software application during this time. In particular, the user can also store user-specific data in a corresponding database without the progress being lost. In particular, the actual update or upgrade of the data relating to the software application is carried out inside the VM environment. Only loading of the second map is then executed on the host system, although typically requires much less time than the actual update or upgrade procedure. The time during which the software application is not available to the user can be drastically reduced thereby. In particular urgent, for instance system-critical, updates or upgrades can be loaded quickly and without great interference.</p><p id="p-0021" num="0020">Loading of the updates or upgrades can also be carried out without security problems in respect of the user-specific data. In particular, the database with user-specific data remains on the host system.</p><p id="p-0022" num="0021">The term &#x201c;update&#x201d; is taken to mean an update, which provides slight improvements or eliminates errors. An &#x201c;upgrade&#x201d; refers to more major changes, for instance about a changed or expanded range of functions. An update thus refers to a new version, whereas an upgrade relates to a new variant of the software application with technical innovations.</p><p id="p-0023" num="0022">The &#x201c;software application&#x201d; can in principle relate to any program, which is executed on the host system. For example, it can be a software application used in the medical sector, for instance for the diagnosis of patient data.</p><p id="p-0024" num="0023">The data, which relates to the software application, can comprise, for example, installation files of the software application, which are stored on a partition of the host system. The data, which relates to the software application, can also comprise database data, moreover, which is stored on the same partition or on a different partition of the host system. The database data can be user-specific, for instance patient data or diagnostic data for the example of a software application used in the medical sector.</p><p id="p-0025" num="0024">The first or second map is an image, as can also be applied for instance for backups of partitions.</p><p id="p-0026" num="0025">In accordance with one embodiment of the method for upgrading or updating the software application, generating the first map of the at least one partition of the host system comprises generating a backup of the operating system of the host system. An appropriate hard disk container file with the partition pattern of the hard disk of the host system is generated for at least one hard disk of the host system. The operating system of the host system is restored on a corresponding partition in the hard disk container file with the aid of the backup of the operating system. In the VM environment the hard disk container file can thus be mounted in such a way that when starting the VM environment a copy of the host system with corresponding hard disk and partition structure is started in the VM environment. The software application is thus updated or upgraded inside the VM environment analogously to an update or upgrade customary in the prior art directly on the host system.</p><p id="p-0027" num="0026">In accordance with one embodiment of the method for upgrading or updating the software application, further database files and/or installation files for updating or upgrading the data relating to the software application is stored in the container file. As a result, the update or upgrade mechanisms can also be tested in the VM environment with the database present on the host system in order to identify potential installation errors early and minimize the risk for the user. The database files can be, for example, patient-specific data. It can be provided, however, that the database files are not overwritten when the second map is loaded, and instead the database files that have remained on the host system and have possibly been revised in the meantime are retained.</p><p id="p-0028" num="0027">In accordance with one embodiment of the method for upgrading or updating the software application, firstly a function test of the software application is carried out inside the VM environment before generating the second map. It is consequently possible to ensure that the update or upgrade has been successfully carried out. Since the data, which is assigned to the software application, is available substantially identically inside the VM environment, it is consequently also possible to ensure that the software application can also be executed on the host system without errors following the upgrade or update when subsequently loading the second map.</p><p id="p-0029" num="0028">In accordance with one embodiment of the method for upgrading or updating the software application, the second map is only generated if the function test of the software application and the installation is successful. If the function test of the software application or the installation procedure indicates that an error occurs, an error message can be output to a user. The method for upgrading or updating the software application can also be terminated to release resources of the host system.</p><p id="p-0030" num="0029">In accordance with one embodiment of the method for upgrading or updating the software application, database data of the host system, which relates to the software application, is retained when loading the second map. The user can thus also continue to use the software application during the majority of the installation without the threat of loss of data. The time during which the software application is not available can be significantly reduced therefore.</p><p id="p-0031" num="0030">In accordance with one embodiment of the method for upgrading or updating the software application, an error message is output if the updating or upgrading of the data relating to the software application inside the VM environment takes longer than a predefined maximum duration. If the time, which has elapsed since the beginning of the update or upgrade procedure, exceeds a predefined threshold value, for instance a multiple of the typically expected time, which can be strictly specified as a function of the update or upgrade, the error message is output. The method for upgrading or updating the software application can then also be automatically terminated so the used resources of the host system are released again. It can also be provided that individual sub-steps, for instance steps preceding or following the update or upgrade, have a separate timeout.</p><p id="p-0032" num="0031">In accordance with one embodiment of the method for upgrading or updating the software application, when an error occurs it can be suggested to the user that they start the procedure or installation process anew in the VM environment with a new map following adjustment of the host system or elimination of the error on the host system.</p><p id="p-0033" num="0032">In accordance with one embodiment of the method for upgrading or updating the software application, the host system is executed in a VM environment. The VM container with the restored map is thus executed inside a nested second VM environment.</p><p id="p-0034" num="0033">In accordance with one embodiment of the method for upgrading or updating the software application, the at least one partition of the host system, from which the first map is generated, contains all data which relates to the software application. In particular, both installation files and personalized files, for instance database files, can be incorporated.</p><p id="p-0035" num="0034">In accordance with one embodiment of the method for upgrading or updating the software application, after predefined time intervals it is possible to check whether an upgrade or update is available. If an upgrade or update is available, the installation of the upgrade or update can be carried out automatically. Alternatively, the user can be informed about the upgrade or update. The user can enter or select a desired installation time.</p><p id="p-0036" num="0035">In accordance with one embodiment of the method for upgrading or updating the software application, a plurality of installations can be carried out simultaneously. Only the installations that proceed without errors are finalized, i.e., the corresponding second maps are actually loaded.</p><p id="p-0037" num="0036">In accordance with one embodiment of the apparatus, the computing facility is adapted to generate a backup of the operating system of the host system, to generate for at least one hard disk of the host system a hard disk container file with the partition pattern of the hard disk of the host system, and to restore the operating system of the host system on a corresponding partition in the hard disk container file with the aid of the backup of the operating system.</p><p id="p-0038" num="0037">In accordance with one embodiment of the apparatus, the computing facility is also adapted to store database files and/or installation files for updating or upgrading the data relating to the software application in the container file.</p><p id="p-0039" num="0038">In accordance with one embodiment of the apparatus, the computing facility is also designed to firstly carry out a function test of the software application inside the VM environment before the creation of the second map. In addition, it can be provided that a user manually carries out an extended test of the software application inside the VM environment before loading the second map on the host system.</p><p id="p-0040" num="0039">In accordance with one embodiment of the apparatus, the computing facility is also adapted to load the second map only if the function test of the software application is successful.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0041" num="0040">The above-described properties, features and advantages of the present invention and the manner in which they are achieved will become clearer and more comprehensible in connection with the following description of the exemplary embodiments, which will be explained in more detail in connection with the drawings.</p><p id="p-0042" num="0000">In the drawings:</p><p id="p-0043" num="0041"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a schematic block diagram of an apparatus in accordance with one embodiment of the present invention;</p><p id="p-0044" num="0042"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a flow diagram of a method for upgrading or updating a software application in accordance with one embodiment of the present invention;</p><p id="p-0045" num="0043"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a schematic block diagram of a computer program product in accordance with one embodiment of the present invention; and</p><p id="p-0046" num="0044"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a schematic block diagram of a non-volatile, computer-readable storage medium in accordance with one embodiment of the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0047" num="0045">Embodiments of the present invention provide a computer-implemented method for upgrading or updating a software application and to a corresponding apparatus. Embodiments of the present invention relate, moreover, to a computer program product and to a non-volatile, computer-readable storage medium.</p><p id="p-0048" num="0046">In accordance with a first aspect, embodiments of the present invention relate to a computer-implemented method for upgrading or updating a software application, wherein the software application is installed on a host system. A first map of an operating system of the host system is generated. The operating system of the host system is started inside a virtual machine, VM, environment using the first map. The software application is updated or upgraded in the VM environment. A second map of the operating system is generated in the VM environment in the current state with the updated or upgraded software application. The second map of the operating system is loaded inside the host system.</p><p id="p-0049" num="0047">In accordance with a second aspect, embodiments of the present invention relate to an apparatus with a storage facility with an operating system with data relating to a software application. The apparatus also comprises a computing facility, which is adapted to execute the software application. For upgrading or updating the software application, the computing facility is also adapted</p><p id="p-0050" num="0048">to generate a first map of the operating system;</p><p id="p-0051" num="0049">to start the operating system inside a virtual machine, VM, environment using the first map;</p><p id="p-0052" num="0050">to update or upgrade the software application in the VM environment;</p><p id="p-0053" num="0051">to generate a second map of the operating system with the updated or upgraded software application in the VM environment; and</p><p id="p-0054" num="0052">to load the second map of the operating system outside of the VM environment.</p><p id="p-0055" num="0053">Embodiments of the present invention makes it possible to carry out the majority of the installation of the updates or upgrades in the background. The user can continue to use the software application during this time. In particular, the user can also store user-specific data in a corresponding database without the progress being lost. In particular, the actual update or upgrade of the data relating to the software application is carried out inside the VM environment. Only loading of the second map is then executed on the host system, although typically requires much less time than the actual update or upgrade procedure. The time during which the software application is not available to the user can be drastically reduced thereby. In particular urgent, for instance system-critical, updates or upgrades can be loaded quickly and without great interference.</p><p id="p-0056" num="0054">Loading of the updates or upgrades can also be carried out without security problems in respect of the user-specific data. In particular, the database with user-specific data remains on the host system.</p><p id="p-0057" num="0055">The term &#x201c;update&#x201d; is taken to mean an update, which provides slight improvements or eliminates errors. An &#x201c;upgrade&#x201d; refers to more major changes, for instance about a changed or expanded range of functions. An update thus refers to a new version, whereas an upgrade relates to a new variant of the software application with technical innovations.</p><p id="p-0058" num="0056">The &#x201c;software application&#x201d; can in principle relate to any program, which is executed on the host system. For example, it can be a software application used in the medical sector, for instance for the diagnosis of patient data.</p><p id="p-0059" num="0057">The data, which relates to the software application, can comprise, for example, installation files of the software application, which are stored on a partition of the host system. The data, which relates to the software application, can also comprise database data, moreover, which is stored on the same partition or on a different partition of the host system. The database data can be user-specific, for instance patient data or diagnostic data for the example of a software application used in the medical sector.</p><p id="p-0060" num="0058">The first or second map is an image, as can also be applied for instance for backups of partitions.</p><p id="p-0061" num="0059">In accordance with one embodiment of the method for upgrading or updating the software application, generating the first map of the at least one partition of the host system comprises generating a backup of the operating system of the host system. An appropriate hard disk container file with the partition pattern of the hard disk of the host system is generated for at least one hard disk of the host system. The operating system of the host system is restored on a corresponding partition in the hard disk container file with the aid of the backup of the operating system. In the VM environment the hard disk container file can thus be mounted in such a way that when starting the VM environment a copy of the host system with corresponding hard disk and partition structure is started in the VM environment. The software application is thus updated or upgraded inside the VM environment analogously to an update or upgrade customary in the prior art directly on the host system.</p><p id="p-0062" num="0060">In accordance with one embodiment of the method for upgrading or updating the software application, further database files and/or installation files for updating or upgrading the data relating to the software application is stored in the container file. As a result, the update or upgrade mechanisms can also be tested in the VM environment with the database present on the host system in order to identify potential installation errors early and minimize the risk for the user. The database files can be, for example, patient-specific data. It can be provided, however, that the database files are not overwritten when the second map is loaded, and instead the database files that have remained on the host system and have possibly been revised in the meantime are retained.</p><p id="p-0063" num="0061">In accordance with one embodiment of the method for upgrading or updating the software application, firstly a function test of the software application is carried out inside the VM environment before generating the second map. It is consequently possible to ensure that the update or upgrade has been successfully carried out. Since the data, which is assigned to the software application, is available substantially identically inside the VM environment, it is consequently also possible to ensure that the software application can also be executed on the host system without errors following the upgrade or update when subsequently loading the second map.</p><p id="p-0064" num="0062">In accordance with one embodiment of the method for upgrading or updating the software application, the second map is only generated if the function test of the software application and the installation is successful. If the function test of the software application or the installation procedure indicates that an error occurs, an error message can be output to a user. The method for upgrading or updating the software application can also be terminated to release resources of the host system.</p><p id="p-0065" num="0063">In accordance with one embodiment of the method for upgrading or updating the software application, database data of the host system, which relates to the software application, is retained when loading the second map. The user can thus also continue to use the software application during the majority of the installation without the threat of loss of data. The time during which the software application is not available can be significantly reduced therefore.</p><p id="p-0066" num="0064">In accordance with one embodiment of the method for upgrading or updating the software application, an error message is output if the updating or upgrading of the data relating to the software application inside the VM environment takes longer than a predefined maximum duration. If the time, which has elapsed since the beginning of the update or upgrade procedure, exceeds a predefined threshold value, for instance a multiple of the typically expected time, which can be strictly specified as a function of the update or upgrade, the error message is output. The method for upgrading or updating the software application can then also be automatically terminated so the used resources of the host system are released again. It can also be provided that individual sub-steps, for instance steps preceding or following the update or upgrade, have a separate timeout.</p><p id="p-0067" num="0065">In accordance with one embodiment of the method for upgrading or updating the software application, when an error occurs it can be suggested to the user that they start the procedure or installation process anew in the VM environment with a new map following adjustment of the host system or elimination of the error on the host system.</p><p id="p-0068" num="0066">In accordance with one embodiment of the method for upgrading or updating the software application, the host system is executed in a VM environment. The VM container with the restored map is thus executed inside a nested second VM environment.</p><p id="p-0069" num="0067">In accordance with one embodiment of the method for upgrading or updating the software application, the at least one partition of the host system, from which the first map is generated, contains all data which relates to the software application. In particular, both installation files and personalized files, for instance database files, can be incorporated.</p><p id="p-0070" num="0068">In accordance with one embodiment of the method for upgrading or updating the software application, after predefined time intervals it is possible to check whether an upgrade or update is available. If an upgrade or update is available, the installation of the upgrade or update can be carried out automatically. Alternatively, the user can be informed about the upgrade or update. The user can enter or select a desired installation time.</p><p id="p-0071" num="0069">In accordance with one embodiment of the method for upgrading or updating the software application, a plurality of installations can be carried out simultaneously. Only the installations that proceed without errors are finalized, i.e., the corresponding second maps are actually loaded.</p><p id="p-0072" num="0070">In accordance with one embodiment of the apparatus, the computing facility is adapted to generate a backup of the operating system of the host system, to generate for at least one hard disk of the host system a hard disk container file with the partition pattern of the hard disk of the host system, and to restore the operating system of the host system on a corresponding partition in the hard disk container file with the aid of the backup of the operating system.</p><p id="p-0073" num="0071">In accordance with one embodiment of the apparatus, the computing facility is also adapted to store database files and/or installation files for updating or upgrading the data relating to the software application in the container file.</p><p id="p-0074" num="0072">In accordance with one embodiment of the apparatus, the computing facility is also designed to firstly carry out a function test of the software application inside the VM environment before the creation of the second map. In addition, it can be provided that a user manually carries out an extended test of the software application inside the VM environment before loading the second map on the host system.</p><p id="p-0075" num="0073">In accordance with one embodiment of the apparatus, the computing facility is also adapted to load the second map only if the function test of the software application is successful.</p><p id="p-0076" num="0074"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a schematic block diagram of an apparatus <b>1</b>. The apparatus <b>1</b> comprises a storage facility <b>2</b> with at least one hard disk, with each hard disk comprising at least one partition for storing data. Stored on the at least one hard disk is an operating system with a software application or with the data relating to the software application. The data comprises, for instance, installation files for execution of the software application. The data can also comprise database data, which the software application accesses, which can be specifically changed or expanded during running of the software application. The installation files can be stored in a first partition and the database data (application files) in a second partition.</p><p id="p-0077" num="0075">The storage facility <b>2</b> can be a volatile or non-volatile storage device, for instance a hard disk, memory card or the like.</p><p id="p-0078" num="0076">The apparatus also comprises a computing facility <b>3</b>, which is adapted to execute the software application. The computing facility <b>3</b> can comprise software and/or hardware components, for instance CPUs (central processing unit), GPUs (graphics processing unit), microcontrollers, integrated circuits, ASICs (application-specific integrated circuit), FPGAs (field programmable gate array) or the like.</p><p id="p-0079" num="0077">The apparatus <b>1</b> also comprises an interface <b>5</b>, which is coupled to an external apparatus <b>6</b>. The interface <b>5</b> can be designed for the input and output of data and can comprise, for example, WLAN, Bluetooth, Profibus, Ethernet interfaces or similar. The interface <b>5</b> can also be configured for connection to electrical or optical cables. The external apparatus <b>6</b> can be, for example, a backend server, which is run by a manufacturer of the software application. The packet with the installation files transferred from the backend server to the target system. It is subsequently possible to carry out the update or upgrade. The installation files can be received from the external apparatus <b>6</b> via the interface <b>5</b>.</p><p id="p-0080" num="0078">The apparatus <b>1</b> comprises a user interface <b>4</b>, via which it is possible to display to the user that an upgrade or update is available. The user can confirm that the upgrade or update is to be carried out. The user can also indicate or select a desired time for carrying out the update or upgrade.</p><p id="p-0081" num="0079">It can also be provided, however, that the upgrade or update is automatically carried out as soon as the upgrade or update is available. The update or upgrade can also be automatically carried out in the background. On successful installation in the VM environment the restore can also be automatically carried out at the defined instant.</p><p id="p-0082" num="0080">Finally, after predefined time intervals it is possible to check whether an upgrade or update is available.</p><p id="p-0083" num="0081">Further installation data, which is necessary for the update or upgrade, can be received from the external apparatus via the interface <b>5</b>. The installation files are stored in the storage facility <b>2</b>.</p><p id="p-0084" num="0082">For upgrading or updating the software application the computing facility <b>3</b> is also adapted to generate a first map of the operating system, with data which pertains to the software application also being stored.</p><p id="p-0085" num="0083">The computing facility <b>3</b> can be adapted to generate the first map of the operating system of the host system, to generate for at least one hard disk of the host system a hard disk container file with the partition pattern of the hard disk of the host system, and to restore the operating system of the host system on a corresponding partition in the hard disk container file with the aid of the backup of the operating system.</p><p id="p-0086" num="0084">The computing facility <b>3</b> can also store database files and/or installation files for updating or upgrading the data relating to the software application in the container file.</p><p id="p-0087" num="0085">The computing facility <b>3</b> generates a virtual machine, VM, environment and mounts the at least one created hard disk container file. The virtual machine is subsequently started.</p><p id="p-0088" num="0086">The computing facility <b>3</b> is designed to update or upgrade the software application inside the VM environment.</p><p id="p-0089" num="0087">The computing facility <b>3</b> can also carry out a function test of the software application inside the VM environment. If the function test was successful, the computing facility <b>3</b> generates a second map on the basis of the mounted first map using the updated or upgraded data relating to the software application.</p><p id="p-0090" num="0088">The computing facility <b>3</b> loads the second map in the host system <b>1</b> outside of the VM environment, with the data relating to the operating system of the host system <b>1</b> being replaced by the changed operating system with the updated or upgraded data relating to the software application. The software application is consequently brought up-to-date. The steps, which precede loading of the second map, can be carried out in the background without user input.</p><p id="p-0091" num="0089"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a flow diagram of a method for upgrading or updating a software application.</p><p id="p-0092" num="0090">The installation of the update or upgrade of the software application may be divided into a first stage S<b>10</b> and a second stage S<b>20</b>, wherein at least the first stage S<b>10</b>, and, if desired, also the second stage S<b>20</b>, manages without user inputs (silent installation). The user can continue to use the host system <b>1</b> during the first stage S<b>10</b> without having to intervene in the installation process. The first stage S<b>10</b> of the method can preferably also be carried out outside of the customary usage period, for instance during the night or during the weekend.</p><p id="p-0093" num="0091">The first stage S<b>10</b> comprises first to fourth steps S<b>1</b> to S<b>4</b>.</p><p id="p-0094" num="0092">In a first step S<b>1</b>, method steps preceding the update or upgrade (presteps) are carried out on the host system <b>1</b>. These steps comprise, for example, setting up a new script-log folder or checking whether the operating system of the host system <b>1</b> is compatible with the update or upgrade. In addition, installation files can be checked. It is possible to check whether the hardware of the host system <b>1</b> meets the requirements of the updated or upgraded version of the software application. Licenses of programs necessary for the update or upgrade can be checked. In addition, the language settings can be adjusted. The integrity of the installation files can be verified. In addition, at the end of the presteps a Schedule Task can be setup for the installation of the updates or upgrades, so the procedure for cloning and the installation can be carried out at a defined instant.</p><p id="p-0095" num="0093">Once the method steps preceding the update or upgrade have been successfully carried out, a first map is generated by the operating system of the host system <b>1</b> in a method step S<b>2</b>. The first map is restored on a partition in a hard disk container file and the hard disk container file is mounted.</p><p id="p-0096" num="0094">In a method step S<b>3</b>, the software application is updated or upgraded inside a VM environment.</p><p id="p-0097" num="0095">For this, firstly steps for the successful conclusion of a cloning procedure take place, for instance an adjustment of partition names or letters and starting of the application. Method steps preceding the update or upgrade (presteps) are subsequently carried out in the VM environment. For example, necessary programs can be updated or installed, the firewall status can be checked. In addition, the integrity of the software packets for upgrading or updating can be checked. Possible backup of configurations can be setup. Database requirements can be checked. Configurations can be adjusted.</p><p id="p-0098" num="0096">The actual update or upgrade of the software application is subsequently carried out.</p><p id="p-0099" num="0097">Finally, further method steps can be carried out, which follow the update or upgrade. For example, the version can be adjusted and a backup of the configuration can be created once again after the installation. Furthermore, it is possible to search for installation errors, or steps from the presteps can be reversed again, for instance by activating Schedule Tasks.</p><p id="p-0100" num="0098">In a method step S<b>4</b>, a second map is generated.</p><p id="p-0101" num="0099">The second stage S<b>20</b> follows with method steps S<b>5</b> to S<b>7</b>. In the second stage S<b>20</b>, the second map is loaded inside the host system <b>1</b>.</p><p id="p-0102" num="0100">For this purpose, the user can be prompted to start loading the updates or upgrades, S<b>5</b>. It can be provided that the user selects or predefines a time at which the updated or upgraded data relating to the software application should be loaded.</p><p id="p-0103" num="0101">Furthermore, it is firstly possible to wait until no user is logged on. A backup of the database files, which relate to the software application, can subsequently be carried out. In the case of a faulty installation the previous version of the database can be restored using this backup. A potential data exchange with external apparatuses <b>6</b> can be terminated or stopped or it is possible to wait until the data exchange has finished. For example, in the case of a medical application, data can be exchanged using the Digital Imaging and Communications in Medicine (DICOM) standards. In addition, particular dependencies or preconditions can be checked. In addition, information can be displayed to the user, for instance in respect of the updates or upgrades to be loaded.</p><p id="p-0104" num="0102">The second map is subsequently loaded inside the host system <b>1</b> in a method step S<b>6</b>. The operating system is replaced by the operating system with the updated or upgraded software application here.</p><p id="p-0105" num="0103">Database data of the host system <b>1</b>, which relates to the software application, can be retained when loading the second map. For example, only one partition can be loaded, which relates to the installation files of the software application. A further partition, which contains user-specific database files, can be retained. The user can thus also continue to work with the software application during the installation, with newly added changes being adopted in the database.</p><p id="p-0106" num="0104">Finally in a method step S<b>7</b>, subsequent steps (poststeps) can be carried out by updating, for example, database structures which were not part of the backed-up map.</p><p id="p-0107" num="0105"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a schematic block diagram of a computer program product P with executable program code PC. The executable program code PC, when executed on a computer, is adapted to carry out the above-described method.</p><p id="p-0108" num="0106"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a schematic block diagram of a non-volatile, computer-readable storage medium M with executable program code MC adapted to carry out the above-described method when executed on a computer.</p><p id="p-0109" num="0107">It will be understood that, although the terms first, second, etc. may be used herein to describe various elements, components, regions, layers, and/or sections, these elements, components, regions, layers, and/or sections, should not be limited by these terms. These terms are only used to distinguish one element from another. For example, a first element could be termed a second element, and, similarly, a second element could be termed a first element, without departing from the scope of example embodiments. As used herein, the term &#x201c;and/or,&#x201d; includes any and all combinations of one or more of the associated listed items. The phrase &#x201c;at least one of&#x201d; has the same meaning as &#x201c;and/or&#x201d;.</p><p id="p-0110" num="0108">Spatially relative terms, such as &#x201c;beneath,&#x201d; &#x201c;below,&#x201d; &#x201c;lower,&#x201d; &#x201c;under,&#x201d; &#x201c;above,&#x201d; &#x201c;upper,&#x201d; and the like, may be used herein for ease of description to describe one element or feature's relationship to another element(s) or feature(s) as illustrated in the figures. It will be understood that the spatially relative terms are intended to encompass different orientations of the device in use or operation in addition to the orientation depicted in the figures. For example, if the device in the figures is turned over, elements described as &#x201c;below,&#x201d; &#x201c;beneath,&#x201d; or &#x201c;under,&#x201d; other elements or features would then be oriented &#x201c;above&#x201d; the other elements or features. Thus, the example terms &#x201c;below&#x201d; and &#x201c;under&#x201d; may encompass both an orientation of above and below. The device may be otherwise oriented (rotated 90 degrees or at other orientations) and the spatially relative descriptors used herein interpreted accordingly. In addition, when an element is referred to as being &#x201c;between&#x201d; two elements, the element may be the only element between the two elements, or one or more other intervening elements may be present.</p><p id="p-0111" num="0109">Spatial and functional relationships between elements (for example, between modules) are described using various terms, including &#x201c;on,&#x201d; &#x201c;connected,&#x201d; &#x201c;engaged,&#x201d; &#x201c;interfaced,&#x201d; and &#x201c;coupled.&#x201d; Unless explicitly described as being &#x201c;direct,&#x201d; when a relationship between first and second elements is described in the disclosure, that relationship encompasses a direct relationship where no other intervening elements are present between the first and second elements, and also an indirect relationship where one or more intervening elements are present (either spatially or functionally) between the first and second elements. In contrast, when an element is referred to as being &#x201c;directly&#x201d; on, connected, engaged, interfaced, or coupled to another element, there are no intervening elements present. Other words used to describe the relationship between elements should be interpreted in a like fashion (e.g., &#x201c;between,&#x201d; versus &#x201c;directly between,&#x201d; &#x201c;adjacent,&#x201d; versus &#x201c;directly adjacent,&#x201d; etc.).</p><p id="p-0112" num="0110">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of example embodiments. As used herein, the singular forms &#x201c;a,&#x201d; &#x201c;an,&#x201d; and &#x201c;the,&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. As used herein, the terms &#x201c;and/or&#x201d; and &#x201c;at least one of&#x201d; include any and all combinations of one or more of the associated listed items. It will be further understood that the terms &#x201c;comprises,&#x201d; &#x201c;comprising,&#x201d; &#x201c;includes,&#x201d; and/or &#x201c;including,&#x201d; when used herein, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof. As used herein, the term &#x201c;and/or&#x201d; includes any and all combinations of one or more of the associated listed items. Expressions such as &#x201c;at least one of,&#x201d; when preceding a list of elements, modify the entire list of elements and do not modify the individual elements of the list. Also, the term &#x201c;example&#x201d; is intended to refer to an example or illustration.</p><p id="p-0113" num="0111">It should also be noted that in some alternative implementations, the functions/acts noted may occur out of the order noted in the figures. For example, two figures shown in succession may in fact be executed substantially concurrently or may sometimes be executed in the reverse order, depending upon the functionality/acts involved.</p><p id="p-0114" num="0112">Unless otherwise defined, all terms (including technical and scientific terms) used herein have the same meaning as commonly understood by one of ordinary skill in the art to which example embodiments belong. It will be further understood that terms, e.g., those defined in commonly used dictionaries, should be interpreted as having a meaning that is consistent with their meaning in the context of the relevant art and will not be interpreted in an idealized or overly formal sense unless expressly so defined herein.</p><p id="p-0115" num="0113">It is noted that some example embodiments may be described with reference to acts and symbolic representations of operations (e.g., in the form of flow charts, flow diagrams, data flow diagrams, structure diagrams, block diagrams, etc.) that may be implemented in conjunction with units and/or devices discussed above. Although discussed in a particularly manner, a function or operation specified in a specific block may be performed differently from the flow specified in a flowchart, flow diagram, etc. For example, functions or operations illustrated as being performed serially in two consecutive blocks may actually be performed simultaneously, or in some cases be performed in reverse order. Although the flowcharts describe the operations as sequential processes, many of the operations may be performed in parallel, concurrently or simultaneously. In addition, the order of operations may be re-arranged. The processes may be terminated when their operations are completed, but may also have additional steps not included in the figure. The processes may correspond to methods, functions, procedures, subroutines, subprograms, etc.</p><p id="p-0116" num="0114">Specific structural and functional details disclosed herein are merely representative for purposes of describing example embodiments. The present invention may, however, be embodied in many alternate forms and should not be construed as limited to only the embodiments set forth herein.</p><p id="p-0117" num="0115">In addition, or alternative, to that discussed above, units and/or devices according to one or more example embodiments may be implemented using hardware, software, and/or a combination thereof. For example, hardware devices may be implemented using processing circuitry such as, but not limited to, a processor, Central Processing Unit (CPU), a controller, an arithmetic logic unit (ALU), a digital signal processor, a microcomputer, a field programmable gate array (FPGA), a System-on-Chip (SoC), a programmable logic unit, a microprocessor, or any other device capable of responding to and executing instructions in a defined manner. Portions of the example embodiments and corresponding detailed description may be presented in terms of software, or algorithms and symbolic representations of operation on data bits within a computer memory. These descriptions and representations are the ones by which those of ordinary skill in the art effectively convey the substance of their work to others of ordinary skill in the art. An algorithm, as the term is used here, and as it is used generally, is conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of optical, electrical, or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.</p><p id="p-0118" num="0116">It should be borne in mind that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise, or as is apparent from the discussion, terms such as &#x201c;processing&#x201d; or &#x201c;computing&#x201d; or &#x201c;calculating&#x201d; or &#x201c;determining&#x201d; of &#x201c;displaying&#x201d; or the like, refer to the action and processes of a computer system, or similar electronic computing device/hardware, that manipulates and transforms data represented as physical, electronic quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.</p><p id="p-0119" num="0117">In this application, including the definitions below, the term &#x2018;module&#x2019; or the term &#x2018;controller&#x2019; may be replaced with the term &#x2018;circuit.&#x2019; The term &#x2018;module&#x2019; may refer to, be part of, or include processor hardware (shared, dedicated, or group) that executes code and memory hardware (shared, dedicated, or group) that stores code executed by the processor hardware.</p><p id="p-0120" num="0118">The module may include one or more interface circuits. In some examples, the interface circuits may include wired or wireless interfaces that are connected to a local area network (LAN), the Internet, a wide area network (WAN), or combinations thereof. The functionality of any given module of the present disclosure may be distributed among multiple modules that are connected via interface circuits. For example, multiple modules may allow load balancing. In a further example, a server (also known as remote, or cloud) module may accomplish some functionality on behalf of a client module.</p><p id="p-0121" num="0119">Software may include a computer program, program code, instructions, or some combination thereof, for independently or collectively instructing or configuring a hardware device to operate as desired. The computer program and/or program code may include program or computer-readable instructions, software components, software modules, data files, data structures, and/or the like, capable of being implemented by one or more hardware devices, such as one or more of the hardware devices mentioned above. Examples of program code include both machine code produced by a compiler and higher level program code that is executed using an interpreter.</p><p id="p-0122" num="0120">For example, when a hardware device is a computer processing device (e.g., a processor, Central Processing Unit (CPU), a controller, an arithmetic logic unit (ALU), a digital signal processor, a microcomputer, a microprocessor, etc.), the computer processing device may be configured to carry out program code by performing arithmetical, logical, and input/output operations, according to the program code. Once the program code is loaded into a computer processing device, the computer processing device may be programmed to perform the program code, thereby transforming the computer processing device into a special purpose computer processing device. In a more specific example, when the program code is loaded into a processor, the processor becomes programmed to perform the program code and operations corresponding thereto, thereby transforming the processor into a special purpose processor.</p><p id="p-0123" num="0121">Software and/or data may be embodied permanently or temporarily in any type of machine, component, physical or virtual equipment, or computer storage medium or device, capable of providing instructions or data to, or being interpreted by, a hardware device. The software also may be distributed over network coupled computer systems so that the software is stored and executed in a distributed fashion. In particular, for example, software and data may be stored by one or more computer readable recording mediums, including the tangible or non-transitory computer-readable storage media discussed herein.</p><p id="p-0124" num="0122">Even further, any of the disclosed methods may be embodied in the form of a program or software. The program or software may be stored on a non-transitory computer readable medium and is adapted to perform any one of the aforementioned methods when run on a computer device (a device including a processor). Thus, the non-transitory, tangible computer readable medium, is adapted to store information and is adapted to interact with a data processing facility or computer device to execute the program of any of the above mentioned embodiments and/or to perform the method of any of the above mentioned embodiments.</p><p id="p-0125" num="0123">Example embodiments may be described with reference to acts and symbolic representations of operations (e.g., in the form of flow charts, flow diagrams, data flow diagrams, structure diagrams, block diagrams, etc.) that may be implemented in conjunction with units and/or devices discussed in more detail below. Although discussed in a particularly manner, a function or operation specified in a specific block may be performed differently from the flow specified in a flowchart, flow diagram, etc. For example, functions or operations illustrated as being performed serially in two consecutive blocks may actually be performed simultaneously, or in some cases be performed in reverse order.</p><p id="p-0126" num="0124">According to one or more example embodiments, computer processing devices may be described as including various functional units that perform various operations and/or functions to increase the clarity of the description. However, computer processing devices are not intended to be limited to these functional units. For example, in one or more example embodiments, the various operations and/or functions of the functional units may be performed by other ones of the functional units. Further, the computer processing devices may perform the operations and/or functions of the various functional units without sub-dividing the operations and/or functions of the computer processing units into these various functional units.</p><p id="p-0127" num="0125">Units and/or devices according to one or more example embodiments may also include one or more storage devices. The one or more storage devices may be tangible or non-transitory computer-readable storage media, such as random access memory (RAM), read only memory (ROM), a permanent mass storage device (such as a disk drive), solid state (e.g., NAND flash) device, and/or any other like data storage mechanism capable of storing and recording data. The one or more storage devices may be configured to store computer programs, program code, instructions, or some combination thereof, for one or more operating systems and/or for implementing the example embodiments described herein. The computer programs, program code, instructions, or some combination thereof, may also be loaded from a separate computer readable storage medium into the one or more storage devices and/or one or more computer processing devices using a drive mechanism. Such separate computer readable storage medium may include a Universal Serial Bus (USB) flash drive, a memory stick, a Blu-ray/DVD/CD-ROM drive, a memory card, and/or other like computer readable storage media. The computer programs, program code, instructions, or some combination thereof, may be loaded into the one or more storage devices and/or the one or more computer processing devices from a remote data storage device via a network interface, rather than via a local computer readable storage medium. Additionally, the computer programs, program code, instructions, or some combination thereof, may be loaded into the one or more storage devices and/or the one or more processors from a remote computing system that is configured to transfer and/or distribute the computer programs, program code, instructions, or some combination thereof, over a network. The remote computing system may transfer and/or distribute the computer programs, program code, instructions, or some combination thereof, via a wired interface, an air interface, and/or any other like medium.</p><p id="p-0128" num="0126">The one or more hardware devices, the one or more storage devices, and/or the computer programs, program code, instructions, or some combination thereof, may be specially designed and constructed for the purposes of the example embodiments, or they may be known devices that are altered and/or modified for the purposes of example embodiments.</p><p id="p-0129" num="0127">A hardware device, such as a computer processing device, may run an operating system (OS) and one or more software applications that run on the OS. The computer processing device also may access, store, manipulate, process, and create data in response to execution of the software. For simplicity, one or more example embodiments may be exemplified as a computer processing device or processor; however, one skilled in the art will appreciate that a hardware device may include multiple processing elements or processors and multiple types of processing elements or processors. For example, a hardware device may include multiple processors or a processor and a controller. In addition, other processing configurations are possible, such as parallel processors.</p><p id="p-0130" num="0128">The computer programs include processor-executable instructions that are stored on at least one non-transitory computer-readable medium (memory). The computer programs may also include or rely on stored data. The computer programs may encompass a basic input/output system (BIOS) that interacts with hardware of the special purpose computer, device drivers that interact with particular devices of the special purpose computer, one or more operating systems, user applications, background services, background applications, etc. As such, the one or more processors may be configured to execute the processor executable instructions.</p><p id="p-0131" num="0129">The computer programs may include: (i) descriptive text to be parsed, such as HTML (hypertext markup language) or XML (extensible markup language), (ii) assembly code, (iii) object code generated from source code by a compiler, (iv) source code for execution by an interpreter, (v) source code for compilation and execution by a just-in-time compiler, etc. As examples only, source code may be written using syntax from languages including C, C++, C #, Objective-C, Haskell, Go, SQL, R, Lisp, Java&#xae;, Fortran, Perl, Pascal, Curl, OCaml, Javascript&#xae;, HTML5, Ada, ASP (active server pages), PHP, Scala, Eiffel, Smalltalk, Erlang, Ruby, Flash&#xae;, Visual Basic&#xae;, Lua, and Python&#xae;.</p><p id="p-0132" num="0130">Further, at least one example embodiment relates to the non-transitory computer-readable storage medium including electronically readable control information (processor executable instructions) stored thereon, configured in such that when the storage medium is used in a controller of a device, at least one embodiment of the method may be carried out.</p><p id="p-0133" num="0131">The computer readable medium or storage medium may be a built-in medium installed inside a computer device main body or a removable medium arranged so that it can be separated from the computer device main body. The term computer-readable medium, as used herein, does not encompass transitory electrical or electromagnetic signals propagating through a medium (such as on a carrier wave); the term computer-readable medium is therefore considered tangible and non-transitory. Non-limiting examples of the non-transitory computer-readable medium include, but are not limited to, rewriteable non-volatile memory devices (including, for example flash memory devices, erasable programmable read-only memory devices, or a mask read-only memory devices); volatile memory devices (including, for example static random access memory devices or a dynamic random access memory devices); magnetic storage media (including, for example an analog or digital magnetic tape or a hard disk drive); and optical storage media (including, for example a CD, a DVD, or a Blu-ray Disc). Examples of the media with a built-in rewriteable non-volatile memory, include but are not limited to memory cards; and media with a built-in ROM, including but not limited to ROM cassettes; etc. Furthermore, various information regarding stored images, for example, property information, may be stored in any other form, or it may be provided in other ways.</p><p id="p-0134" num="0132">The term code, as used above, may include software, firmware, and/or microcode, and may refer to programs, routines, functions, classes, data structures, and/or objects. Shared processor hardware encompasses a single microprocessor that executes some or all code from multiple modules. Group processor hardware encompasses a microprocessor that, in combination with additional microprocessors, executes some or all code from one or more modules. References to multiple microprocessors encompass multiple microprocessors on discrete dies, multiple microprocessors on a single die, multiple cores of a single microprocessor, multiple threads of a single microprocessor, or a combination of the above.</p><p id="p-0135" num="0133">Shared memory hardware encompasses a single memory device that stores some or all code from multiple modules. Group memory hardware encompasses a memory device that, in combination with other memory devices, stores some or all code from one or more modules.</p><p id="p-0136" num="0134">The term memory hardware is a subset of the term computer-readable medium. The term computer-readable medium, as used herein, does not encompass transitory electrical or electromagnetic signals propagating through a medium (such as on a carrier wave); the term computer-readable medium is therefore considered tangible and non-transitory. Non-limiting examples of the non-transitory computer-readable medium include, but are not limited to, rewriteable non-volatile memory devices (including, for example flash memory devices, erasable programmable read-only memory devices, or a mask read-only memory devices); volatile memory devices (including, for example static random access memory devices or a dynamic random access memory devices); magnetic storage media (including, for example an analog or digital magnetic tape or a hard disk drive); and optical storage media (including, for example a CD, a DVD, or a Blu-ray Disc). Examples of the media with a built-in rewriteable non-volatile memory, include but are not limited to memory cards; and media with a built-in ROM, including but not limited to ROM cassettes; etc. Furthermore, various information regarding stored images, for example, property information, may be stored in any other form, or it may be provided in other ways.</p><p id="p-0137" num="0135">The apparatuses and methods described in this application may be partially or fully implemented by a special purpose computer created by configuring a general purpose computer to execute one or more particular functions embodied in computer programs. The functional blocks and flowchart elements described above serve as software specifications, which can be translated into the computer programs by the routine work of a skilled technician or programmer.</p><p id="p-0138" num="0136">Although described with reference to specific examples and drawings, modifications, additions and substitutions of example embodiments may be variously made according to the description by those of ordinary skill in the art. For example, the described techniques may be performed in an order different with that of the methods described, and/or components such as the described system, architecture, devices, circuit, and the like, may be connected or combined to be different from the above-described methods, or results may be appropriately achieved by other components or equivalents.</p><p id="p-0139" num="0137">Although the present invention has been illustrated and described in more detail by the preferred exemplary embodiments, it is not limited by the disclosed examples and a person skilled in the art can derive other variations here from without departing from the scope of the present invention.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method for upgrading or updating a software application installed on a host system, the computer-implemented method comprising:<claim-text>generating a first map of an operating system of the host system;</claim-text><claim-text>starting the operating system of the host system inside a virtual machine environment using the first map;</claim-text><claim-text>updating or upgrading the software application in the virtual machine environment;</claim-text><claim-text>generating a second map of the operating system with the updated or upgraded software application in the virtual machine environment; and</claim-text><claim-text>loading the second map of the operating system inside the host system.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computer-implemented method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the generating a first map of an operating system of the host system comprises:<claim-text>generating a backup of the operating system of the host system;</claim-text><claim-text>generating, for at least one hard disk of the host system, a hard disk container file with a partition pattern of the at least one hard disk of the host system; and</claim-text><claim-text>restoring the operating system of the host system on a corresponding partition in the hard disk container file utilizing the backup of the operating system.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computer-implemented method as claimed in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the hard disk container file stores at least one of further database files or installation files for updating or upgrading data relating to the software application.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computer-implemented method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>performing a function test of the software application inside the operating system in the virtual machine environment before generating the second map.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computer-implemented method as claimed in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the second map is generated only in response to the function test of the software application being successful.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computer-implemented method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>retaining database data of the host system, which relates to the software application, when loading the second map.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computer-implemented method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein when the updating or upgrading the software application takes longer than a maximum threshold duration, the method further comprises at least one of (i) outputting an error message or (ii) terminating the computer-implemented method for upgrading or updating the software application.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The computer-implemented method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the host system is executed in a virtual machine environment.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. An apparatus comprising:<claim-text>a memory storing an operating system with data relating to a software application; and</claim-text><claim-text>one or more processors configured to execute the software application, and to upgrade or update the software application by<claim-text>generating a first map of the operating system,</claim-text><claim-text>starting the operating system inside a virtual machine environment using the first map,</claim-text><claim-text>updating or upgrading the software application in the virtual machine environment,</claim-text><claim-text>generating a second map of the operating system with the updated or upgraded software application in the virtual machine environment, and</claim-text><claim-text>loading the second map of the operating system outside of the virtual machine environment.</claim-text></claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The apparatus as claimed in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein for generating the first map, the one or more processors are configured to<claim-text>generate a backup of the operating system,</claim-text><claim-text>generate, for at least one hard disk of the apparatus, a hard disk container file with a partition pattern of the at least one hard disk of the apparatus, and</claim-text><claim-text>restore the operating system on a corresponding partition in the hard disk container file utilizing the backup of the operating system.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The apparatus as claimed in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the one or more processors are configured to store at least one of database files or installation files in a hard disk container file, for updating or upgrading data relating to the software application.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus as claimed in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the one or more processors are configured to perform a function test of the software application inside the operating system in the virtual machine environment before creating the second map.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The apparatus as claimed in <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the one or more processors are configured to generate the second map only in response to the function test of the software application being successful.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A non-transitory computer program product including executable program code that, when executed on a computer, causes the computer to carry out the method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer-readable storage medium storing executable program code that, when executed on a computer, causes the computer to carry out the method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer-implemented method as claimed in <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>performing a function test of the software application inside the operating system in the virtual machine environment before generating the second map.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer-implemented method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the second map is generated only in response to the function test of the software application being successful.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer-implemented method as claimed in <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>retaining database data of the host system, which relates to the software application, when loading the second map.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The apparatus as claimed in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the one or more processors are configured to store at least one of database files or installation files in the hard disk container file, for updating or upgrading data relating to the software application.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The apparatus as claimed in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the one or more processors are configured to perform a function test of the software application inside the operating system in the virtual machine environment before creating the second map.</claim-text></claim></claims></us-patent-application>