<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004642A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004642</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17845674</doc-number><date>20220621</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>IN</country><doc-number>202111029480</doc-number><date>20210630</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>55</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>56</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>57</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>554</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>568</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>577</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2221</main-group><subgroup>033</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">APPLICATION INTEGRITY VERIFICATION</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63234162</doc-number><date>20210817</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Ivanti, Inc.</orgname><address><city>South Jordan</city><state>UT</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Kongara</last-name><first-name>Sarat Chandra Chowdary</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Ayyagari</last-name><first-name>Nagesh</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Pankaj Kumar</last-name><first-name>Fnu</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Stanley</last-name><first-name>Vinoj Ebenezer</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Kalla</last-name><first-name>Praveen</first-name><address><city>Austin</city><state>TX</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Ivanti, Inc.</orgname><role>02</role><address><city>South Jordan</city><state>UT</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method of application integrity verification and remediation includes scanning an appliance to identify installed program files associated with an application under analysis deployed at the appliance. The method includes computing a hash value of a first installed file of the installed program files. The method includes determining whether the first installed file exists in vendor program files of the application that are maintained separate from the installed program files. The method includes fetching a hash value of a first vendor file of the vendor program files. The first vendor file corresponds to the first installed file. Responsive to the fetched hash value differing from the computed hash value, the method includes classifying the first installed program file as a compromised file and remediating the compromised file at the network appliance.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="229.11mm" wi="157.82mm" file="US20230004642A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="212.51mm" wi="134.03mm" orientation="landscape" file="US20230004642A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="211.67mm" wi="162.64mm" orientation="landscape" file="US20230004642A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="206.76mm" wi="155.62mm" orientation="landscape" file="US20230004642A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="238.08mm" wi="164.17mm" orientation="landscape" file="US20230004642A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="231.31mm" wi="159.85mm" file="US20230004642A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="214.80mm" wi="114.98mm" file="US20230004642A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="227.50mm" wi="160.70mm" file="US20230004642A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="213.44mm" wi="155.79mm" file="US20230004642A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application claims the benefit of and priority to U.S. Prov. Pat. No. 63/234,162, filed Aug. 17, 2021, and Indian Prov. Pat. No. 202111029480, filed Jun. 30, 2021. This application incorporates the disclosures of these applications by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">The embodiments described in this disclosure are related to application integrity verification on network appliances.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Software applications are generally associated with program files. The program files may be supplied by a vendor to one or more client devices via network download or via another transfer such as sales of storage medium on which the program files are stored. The program files might include multiple files (e.g., hundreds of program files) of different types that work together to enable the functionality of the software application. The vendor develops the program files and may periodically update one or more of the program files enable additional functions and/or to remove deficiencies.</p><p id="p-0005" num="0004">The program files may be stored locally on the client devices. For instance, the program files may be loaded onto a smart phone of a client where they are maintained separately. For instance, in most circumstances, the program files installed on the client device are retained at the client device. Conventionally, the vendor may not interface or review the program files except to perform the periodic updates.</p><p id="p-0006" num="0005">In some instances, the program files may introduce a vulnerability. The vulnerability may pose a threat to security of the client device and also to a network in which the client device is included. For instance, a malicious actor may gain access to one of the program files on the client devices and modify the accessed program file. A modification to the accessed program files may alter a function of the software application. For example, the malicious action may disable a security feature, which may allow the malicious actor to assume a role of an authorized client, enable access to files on a protected network of the client device, add an additional program file, etc.</p><p id="p-0007" num="0006">Accordingly, a need exists for a solution that verifies integrity of the program files. Specifically, there is a need to ensure that the program files at the client device have not been accessed, modified, appended, or deleted. Additionally, to effectively perform a verification, there is a need to perform an analysis of the program files at the client device without a malicious actor becoming aware of the analysis.</p><p id="p-0008" num="0007">The subject matter claimed herein is not limited to embodiments that solve any disadvantages or that operate only in environments such as those described. Rather, this background is only provided to illustrate one example technology area where some embodiments described herein may be practiced.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0009" num="0008">According to an aspect of the invention, an embodiment includes a method of software application integrity verification and vulnerability remediation. The method may be performed under various out-of-band operating conditions such as during a secured boot operation, responsive to a clock signal, while the software application is running on a network appliance, or combinations thereof. The method may include reading an integrity file. The integrity file may include vendor program files for a software application under analysis. The method may include populating a first hash map. The method may include scanning a network appliance to identify installed program files on the network appliance that are associated with the application under analysis. The method may include computing a hash value of one or more of the installed program files. It may be determined whether a first installed program file of the installed program files exists in the first hash map. The method may include classifying the first file as an unauthorized file responsive to the first installed program file not existing in the first hash map. The method may include remediating the unauthorized file at the network appliance. The method may include adding the unauthorized file to an archive and the archive may be encrypted. Responsive to the first installed program file existing in the first hash map, the method may include fetching a hash value from the first hash map. It may be determined whether the fetched hash value matches the computed hash value. The method may include classifying the first file as a compromised file when the computed hash value differs from the fetched hash value. The method may include remediating the compromised file. For instance, complaint program files may replace the installed program files or may be used to perform a factory reset of the application under analysis. Installation of the compliant program files reduces or removes the vulnerability introduced by the compromised file. The method may include classifying the first file as an uncompromised or verified program file when the computed hash value is the same as the fetched hash value. For instance, when the computed hash value matches the fetched hash value, it may indicate that the contents of program files are equivalent and unmodified by a malicious actor. Thus, these program files may pose little risk at introducing a security threat to the system.</p><p id="p-0010" num="0009">An additional aspect of an embodiment includes a non-transitory computer-readable medium having encoded therein programming code executable by one or more processors to perform or control performance at least a portion of the method described above.</p><p id="p-0011" num="0010">Yet another aspect of an embodiment includes a network appliance. The network appliance may include one or more processors and a non-transitory computer-readable medium. The non-transitory computer-readable medium has encoded therein programming code executable by the one or more processors to perform or control performance of one or more of the operations of the methods described above.</p><p id="p-0012" num="0011">The object and advantages of the embodiments will be realized and achieved at least by the elements, features, and combinations particularly pointed out in the claims. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are not restrictive of the invention, as claimed.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0013" num="0012">Example embodiments will be described and explained with additional specificity and detail through the use of the accompanying drawings in which:</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a block diagram of an example operating environment in which some embodiments described in the present disclosure may be implemented;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a block diagram of an example integrity analysis process (hereinafter, &#x201c;integrity process&#x201d;) that may be implemented in the operating environment of <figref idref="DRAWINGS">FIG. <b>1</b></figref>;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts an example map generation process that may be implemented in the integrity process of <figref idref="DRAWINGS">FIG. <b>2</b></figref>;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts an example program file existence process that may be implemented in the integrity process of <figref idref="DRAWINGS">FIG. <b>2</b></figref>;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts an example hash comparison process that may be implemented in the integrity process of <figref idref="DRAWINGS">FIG. <b>2</b></figref>;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example computer system configured for software application integrity verification; and</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIGS. <b>7</b>A and <b>7</b>B</figref> are a flow chart of an example method of software application integrity verification,</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0021" num="0020">all according to at least one embodiment described in the present disclosure.</p><heading id="h-0006" level="1">DESCRIPTION OF SOME EXAMPLE EMBODIMENTS</heading><p id="p-0022" num="0021">The embodiments described in this disclosure are related to systems and methods of verifying integrity of software applications in computer networks and remediating any identified vulnerabilities. Some embodiments are directed to performance of an integrity analysis of program files on network appliance. The integrity analysis is configured to detect unauthorized program files on the network appliance and compromised or modified program files on the network appliance. In these embodiments, detected unauthorized program files or compromised program files are remediated at the network appliance.</p><p id="p-0023" num="0022">In some embodiments, the integrity analysis is based on a comparison between program files of a software application that are installed at the network appliance and corresponding program files that are maintained separately from the network appliance. The program files installed at the network appliance are referred to as &#x201c;installed program files.&#x201d; The program files maintained separately from the network appliance are referred to as &#x201c;vendor program files.&#x201d;</p><p id="p-0024" num="0023">Each of the installed program files of an application under analysis is checked. For instance, some embodiments of the present disclosure check to ensure that each of the installed program files are not unauthorized program files (e.g., additional, non-vendor program files) and to ensure that the installed program files are not compromised program files (e.g., modified by an unauthorized party). The verification of the installed program files verify that the operational application has not be compromised and is likely not introducing a security vulnerability into the network appliance of a network including the network appliance.</p><p id="p-0025" num="0024">Additionally, in some embodiments the integrity analysis is conducted out-of-band. As used herein, the term out-of-band indicates that performance of the integrity analysis does not interfere with operation of the application and may be conducted without a malicious party being able to detect it.</p><p id="p-0026" num="0025">The systems and methods described in the present disclosure may provide an improvement to conventional network security processes. In particular, the verification of applications in conventional system generally includes verification of cryptographic signatures on program files. However, many of the program files (e.g., data files and libraries) may not include cryptographic signatures, leaving these program files open to unauthorized access and modifications. Moreover, verification of cryptographic signatures may involve exchange of keys and an allocation of time.</p><p id="p-0027" num="0026">In contrast, some embodiments described herein verify that each of the installed program files is appropriately included in the installed program files and that each of the installed program files has not been modified. To verify that the each of the installed program files is appropriately included in the installed program files, some embodiments may confirm that each installed program file exists in list or map of vendor program files. If any of the installed program files do not exist in the list or map of the vendor program files, then it is classified as an unauthorized program file. The unauthorized program file may introduce a security threat to the network appliance by enabling additional/unauthorized functions of the application under analysis.</p><p id="p-0028" num="0027">Some embodiments also perform a second check of the authorized program files (e.g., those installed program files that do exist in the vendor program files). For example, in some embodiments, hash values of each of the installed program files are compared to hash values of a corresponding file of the vendor program files. If the hash values for a particular installed vendor file differs from the hash value for a corresponding vendor program file, then the particular installed vendor file is classified as a compromised program file. Such differences are indicative of a modification to the installed program files, which is likely unauthorized. In these embodiments, the unauthorized program files and the compromised program files may be remediated by preforming a factory reset of the application under analysis or otherwise replace or removing the unauthorized program files or the compromised program files.</p><p id="p-0029" num="0028">These and other embodiments are described with reference to the appended Figures in which like item numbers indicate like function and structure unless described otherwise. The configurations of the present systems and methods, as generally described and illustrated in the Figures herein, may be arranged and designed in different configurations. Thus, the following detailed description of the Figures, is not intended to limit the scope of the systems and methods, as claimed, but is merely representative of example configurations of the systems and methods.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a block diagram of an example operating environment <b>100</b> in which one or more embodiments of software application integrity assurance systems and methods may be implemented. In the operating environment <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a vendor server <b>102</b> may be communicative coupled to a network appliance <b>108</b> via a network <b>119</b>. The network appliance <b>108</b> has one or more applications <b>110</b> installed locally. The vendor server <b>102</b> may be configured to provide and/or support one or more of the applications <b>110</b>. Associated with the applications <b>110</b> may be one or more installed program files <b>106</b>. The installed program files <b>106</b> are either present on the network appliance <b>108</b> or locally available to the network appliance <b>108</b>.</p><p id="p-0031" num="0030">The installed program files <b>106</b> may be subject to unauthorized access and/or modification. For instance, a malicious actor may have access to source code and/or update schedules which may enable access to one or more of the installed program files <b>106</b> at the network appliance <b>108</b>. After the malicious actor accesses the installed program files <b>106</b>, the malicious actor may modify them, which may change the function of the applications <b>110</b>. For example, the malicious actor may make modifications to the installed program files <b>106</b> to access network resources <b>138</b> on a network server <b>136</b>, to write files to the network server <b>136</b>, to enable execution of arbitrary scripts and commands, to disable one or more security features, and the like.</p><p id="p-0032" num="0031">In the operating environment <b>100</b>, an appliance integrity module <b>116</b> and/or a vendor integrity module <b>104</b> (collectively or alternatively, integrity modules <b>104</b>/<b>116</b>) may be implemented to reduce or eliminate the security vulnerability introduced by the installed program files <b>106</b>. In particular, the integrity modules <b>104</b>/<b>116</b> may be configured to perform an integrity analysis of the installed program files <b>106</b>. The integrity analysis enables identification of inconsistencies and differences in the installed program files <b>106</b> that are indicative of program files that have been accessed, created, deleted, modified, or otherwise compromised.</p><p id="p-0033" num="0032">In addition, in at least some embodiments, the integrity modules <b>104</b>/<b>106</b> may perform the integrity analysis out-of-band. Accordingly, in these and other embodiments, a user of the network appliance <b>108</b> and/or a malicious actor may be unaware of the integrity analysis, which may prevent escalation of a security breach.</p><p id="p-0034" num="0033">In the depicted embodiment, the integrity modules <b>104</b>/<b>116</b> may base the integrity analysis on a comparison between the installed program files <b>106</b> and vendor program files <b>101</b> or representations or derivatives thereof In these embodiments, the vendor program files <b>101</b> are versions of the installed program files <b>106</b> that are maintained separate from the network appliance <b>108</b>. For instance, the vendor program files <b>101</b> may be maintained at the vendor server <b>102</b> or on the appliance integrity module <b>116</b>. Accordingly, the vendor program files <b>101</b> are not subject to unauthorized access and modification described above. Thus, in these and other embodiments, identification of a security threat in the installed program files <b>106</b> includes identifying one or more of the installed program files <b>106</b> that differ from a corresponding file of the vendor program files <b>101</b>, identification of one of the installed program files <b>106</b> that do not appear in the vendor program files <b>101</b>, identification of one of the vendor program files <b>101</b> that is missing from the installed program files <b>106</b>, or combinations thereof.</p><p id="p-0035" num="0034">In some embodiments, the integrity analysis is at least partially based on hash values of content of the installed program files <b>106</b> and the vendor program files <b>101</b>. In these embodiments, the integrity modules <b>104</b>/<b>116</b> may be configured to perform a hash operation on the vendor program files <b>101</b> and the installed program files <b>106</b>. The hash values of each of the vendor program files <b>101</b> is compared to a hash value of a corresponding program file of the installed program files <b>106</b>. Differences in the hash values are indicative of a difference in the content of the installed program files <b>106</b>, which may further indicate that the installed program file <b>106</b> is compromised.</p><p id="p-0036" num="0035">Additionally, in some embodiments, one or more hash maps <b>114</b> may be generated. The hash maps <b>114</b> may include a list of the vendor program files <b>101</b> and/or hash values of the vendor program files <b>101</b>. In these and other embodiments, the integrity modules <b>104</b>/<b>116</b> may also verify that each of the installed program files <b>106</b> is included in the hash map <b>114</b> for the application <b>110</b> and that all of the vendor program files <b>101</b> for the application <b>110</b> are included in the installed program files <b>106</b>. Any differences between the files listed in the hash maps <b>114</b> and the files of the installed program files <b>106</b> may be indicative of security issue at the network appliance <b>108</b>.</p><p id="p-0037" num="0036">The integrity modules <b>104</b>/<b>116</b> may be configured to mitigate any compromised program files identified during the integrity analysis and to report such program files. Thus, the embodiments of the present disclosure provide a technical solution to a security vulnerability introduced by the installed program files <b>106</b> at the network appliance <b>108</b>. As will be described more elsewhere herein, the integrity module <b>104</b>/<b>116</b> are configured to perform the integrity analysis of the installed program files <b>106</b>, which enables detection of any unauthorized program files, any compromised program files, and any deleted program files. These unauthorized, compromised, and deleted program files may be mitigated and the network appliance <b>108</b> may be restored to normal operation.</p><p id="p-0038" num="0037">Moreover, the integrity analysis may be conducted out-of-band, which limits knowledge of the analysis by a malicious actor. Thus, any exploited security vulnerability or a security breach may be identified and resolved before the malicious actor is aware or takes actions to escalate the situation.</p><p id="p-0039" num="0038">As introduced above, the operating environment <b>100</b> may include the network appliance <b>108</b>, the network server <b>136</b>, and the vendor server <b>102</b> that are configured to communicate data and information via the network <b>119</b>. In the following paragraphs, some additional details of these components (<b>102</b>, <b>108</b>, and <b>136</b>) are provided.</p><p id="p-0040" num="0039">The network <b>119</b> may include any communication network configured for communication of signals between the components (e.g., <b>108</b>, <b>136</b>, and <b>102</b>) of the operating environment <b>100</b>. The network <b>119</b> may be wired or wireless. The network <b>119</b> may have configurations including a star configuration, a token ring configuration, or another suitable configuration. Furthermore, the network <b>119</b> may include a local area network (LAN), a wide area network (WAN) (e.g., the Internet), and/or other interconnected data paths across which multiple devices may communicate. In some embodiments, the network <b>119</b> may include a peer-to-peer network. The network <b>119</b> may also be coupled to or include portions of a telecommunications network that may enable communication of data in a variety of different communication protocols.</p><p id="p-0041" num="0040">In some embodiments, the network <b>119</b> includes or is configured to include a BLUETOOTH&#xae; communication network, a Z-Wave&#xae; communication network, an Insteon&#xae; communication network, an EnOcean&#xae; communication network, a Wi-Fi communication network, a ZigBee communication network, a representative state transfer application protocol interface (REST API) communication network, an extensible messaging and presence protocol (XMPP) communication network, a cellular communications network, any similar communication networks, or any combination thereof for sending and receiving data. The data communicated in the network <b>119</b> may include data communicated via short messaging service (SMS), multimedia messaging service (MMS), hypertext transfer protocol (HTTP), direct data connection, wireless application protocol (WAP), or any other protocol that may be implemented in the components of the operating environment <b>100</b>.</p><p id="p-0042" num="0041">The network server <b>136</b> may include a hardware-based computer system that may be communicatively connected to the network appliance <b>108</b> via the network <b>119</b>. The network server <b>136</b> may be included in a managed network such as an enterprise network with the network appliance <b>108</b>. For instance, the application <b>110</b> may be configured to provide secured access to the network resources <b>138</b> hosted on the network server <b>136</b>. The network resources <b>138</b> might include data files with sensitive information, an enterprise-specific application (e.g., an email system or financial system), etc. Accordingly, in these and other embodiments, a compromised program file in the installed program files <b>106</b> may enable a malicious actor to access the network resources <b>138</b> on the network server <b>136</b>. Implementation of the integrity analysis of the installed program files <b>106</b> may therefore eliminate the compromised program file and help secure the network resources <b>138</b> of the managed network or the enterprise network.</p><p id="p-0043" num="0042">Although not depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a managed network including the network server <b>136</b> and the network appliance <b>108</b> may also include additional network appliances <b>108</b> and/or additional network servers <b>136</b>. For instance, the managed network might include thousands of additional network appliances which may each include the applications <b>110</b>, the installed program files <b>106</b>, the appliance integrity module <b>116</b> (or access the vendor integrity module <b>104</b>), or combinations thereof. In these embodiments, one or more or all of the additional network appliances <b>108</b> may perform an integrity analysis of their installed program files <b>106</b>.</p><p id="p-0044" num="0043">Performance of the integrity analysis may occur responsive to a clock signal. For instance, the performance of the integrity analysis may be performed according to a schedule (e.g., every day, every week, every time one or more of the applications <b>110</b> are launched, or another suitable schedule).</p><p id="p-0045" num="0044">Additionally, the network server <b>136</b> may include an instance of the installed program files <b>106</b>, the applications <b>110</b>, and the appliance integrity module <b>116</b>. The appliance integrity module <b>116</b> at the network server <b>136</b> may perform an integrity analysis as described in the present disclosure. Some embodiments of the operating environment <b>100</b> may omit the network server <b>136</b> or may include multiple network servers <b>136</b>, one or more of which may have network resources <b>138</b>.</p><p id="p-0046" num="0045">The vendor server <b>102</b> includes a hardware-based computer system configured to communicate data and information with the network appliance <b>108</b> via the network <b>119</b>. In general, the vendor server <b>102</b> may be associated with a vendor or a proprietor that provides or maintains one or more of the applications <b>110</b>. In addition, the vendor may generate and provide the installed program files <b>106</b>, the appliance integrity module <b>116</b>, the vendor program files <b>101</b>, the vendor integrity module <b>104</b>, integrity files <b>118</b>, the hash maps <b>114</b>, or any combination thereof.</p><p id="p-0047" num="0046">In some embodiments, a vendor associated with the vendor server <b>102</b> might sell the applications <b>110</b> to a user of the network appliance <b>108</b>. For the applications <b>110</b> to function, the vendor server <b>102</b> may communicate or make available program files to the network appliance <b>108</b>. When the program files leave the vendor server <b>102</b>, these program files may be characterized as the vendor program files <b>101</b>. After the program files are loaded on the network appliance <b>108</b>, the program files may be characterized as the installed program files <b>106</b>.</p><p id="p-0048" num="0047">The vendor server <b>102</b> may include the vendor integrity module <b>104</b>. The vendor integrity module <b>104</b> may be configured to generate integrity files <b>118</b> and the hash maps <b>114</b> in addition to performance of the integrity analysis and remediation described below. The integrity files <b>118</b> and the hash maps <b>114</b> may each be based on the vendor program files <b>101</b> or some portion thereof. For instance, the integrity files <b>118</b> may include one or more of the vendor program files <b>101</b>. The integrity files <b>118</b> that may be communicated to or made available to the network appliance <b>108</b> to populate the hash map <b>114</b> and/or to remediate identification of a compromised file at the network appliance <b>108</b>. The integrity files <b>118</b> may include uncompromised versions of the identified compromised file(s) or information related thereto. In some embodiments, the integrity files <b>118</b> may include all of vendor program files <b>101</b> and/or hash values of all of the vendor program files <b>101</b>.</p><p id="p-0049" num="0048">The hash maps <b>114</b>, which may be generated from the integrity files <b>118</b>, may include one or more lists of information related to the vendor program files <b>101</b> and the installed program files <b>106</b>. For instance, the hash maps <b>114</b> may include a list of each and every program files included in the vendor program files <b>101</b>. Additionally, the hash maps <b>114</b> may include a hash value of the vendor program files <b>101</b>. For instance, a hash value of each of the vendor program files <b>101</b> may be computed using an SHA-256 hash function or another suitable hash function. The hash values of each of the vendor program files <b>101</b> may be listed in the hash maps <b>114</b>. The hash values may be combined and correlated to the list of the program files of the vendor program files <b>101</b>. For instance, the hash values may be listed with (e.g., in an associated row or column) a name or an identifier of each of the vendor program files <b>101</b>.</p><p id="p-0050" num="0049">The hash maps <b>114</b> generated by the vendor server <b>102</b> may provide a controlled or verified listing of what should and should not be included in the installed program files <b>106</b>. In particular, the hash maps <b>114</b> may include a list of each program file that should be included in the installed program files <b>106</b>. Additionally, the hash values are computed based on the content of the vendor program files <b>101</b>. Thus, the hash values represent the proper content of installed program files <b>106</b>.</p><p id="p-0051" num="0050">The hash maps <b>114</b> may be communicated to the network appliance <b>108</b>, may be included in the appliance integrity module <b>116</b>, may be accessible on the vendor server <b>102</b>, or any combination thereof. For instance, the network appliance <b>108</b> may have the hash maps <b>114</b> for the applications <b>110</b> stored on a local memory which may be accessed during an integrity analysis. Additionally or alternatively, the appliance integrity module <b>116</b> may be a self-contained tool that is downloaded to the network appliance <b>108</b>. The appliance integrity module <b>116</b> may have stored on it the hash map(s) <b>114</b> for the application(s) <b>110</b>. Additionally still, the appliance integrity module <b>116</b> or the vendor integrity module <b>104</b> may perform an integrity analysis of the installed program files <b>106</b>. During the analysis, the hash map <b>114</b> may be accessed remotely. In some embodiments, the hash maps <b>114</b> may be formatted according to a bill of materials (BOM) file format. The BOM file format enables a listing of information and data related to one another. Some examples of a BOM file are provided elsewhere in the present disclosure.</p><p id="p-0052" num="0051">The network appliance <b>108</b> includes a hardware-based computer device. The network appliance <b>108</b> is configured to interface with one or more other computer devices such as the network server <b>136</b> via the network <b>119</b>. In general, the network appliance <b>108</b> may include any computing device that runs the applications <b>110</b> and stores or can enable access to the installed program files <b>106</b>. In some embodiments, the network appliance <b>108</b> includes a device associated with a user for regular use (e.g., a mobile device associated with an employee). In other embodiments, the network appliance <b>108</b> may be a network component (e.g., a printer, router, hub, gateway, etc.) or a computer storage component.</p><p id="p-0053" num="0052">The network appliance <b>108</b> may be included in a customer or a client environment. In these and other embodiments, the customer or client environment may include a particular system of hardware, software, network, and data structures that are developed and implemented for a particular entity such as an enterprise. Inclusion of the network appliance <b>108</b> in the customer environment may indicate that the network appliance <b>108</b> has a particular set of applications <b>110</b>, communicates via particular network communication protocols, operates according to a standard or set security policy, etc.</p><p id="p-0054" num="0053">The network appliance <b>108</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes the applications <b>110</b> and the installed program files <b>106</b>. The installed program files <b>106</b> are associated with the applications <b>110</b>. In particular, the installed program files <b>106</b> (and the vendor program files <b>101</b>) may operate to enable the functionality of the applications <b>110</b> on the network appliance <b>108</b>. The installed program files <b>106</b> may include executable files which may store code associated with the applications <b>110</b>.</p><p id="p-0055" num="0054">In some instance, the installed program files <b>106</b> may include thousands of files (e.g., <b>20</b> thousand) associated with one of the applications <b>110</b>. The integrity analysis may be conducted for one of the applications <b>110</b> at a time. In these embodiments, all of the installed program files <b>106</b> associated with the application <b>110</b> under analysis may be reviewed.</p><p id="p-0056" num="0055">As described above, the applications <b>110</b> are vendor-supplied software applications that may run in a customer or client environment such as a managed network or an enterprise network. The applications <b>110</b> may be encrypted application. The applications <b>110</b> may be configured to interface with any operating systems such as Linux&#xae;, Microsoft&#xae;, macOS&#xae;, etc.</p><p id="p-0057" num="0056">The network appliance <b>108</b> may also include the appliance integrity module <b>116</b>. As discussed above, the integrity module <b>104</b>/<b>116</b> may be configured to perform an integrity analysis of the installed program files <b>106</b>. The integrity analysis of the installed program files <b>106</b> is implemented to identify compromised files and unauthorized files among the installed program files <b>106</b>. For instance, the integrity analysis may be performed to identify program files that have been modified without authorization, program files that have been added by an unauthorized actor, a deleted program file, or any combination thereof. Additionally, the integrity modules <b>104</b>/<b>116</b> may be configured to mitigate or remediate any identified compromised and unauthorized program files and to report such program files such that these program files may be further analyzed.</p><p id="p-0058" num="0057">In some embodiments, the integrity module <b>104</b>/<b>116</b> may access the integrity files <b>118</b> or a hash map <b>114</b>. To access the integrity files <b>118</b> or a hash map <b>114</b> the integrity module <b>104</b>/<b>116</b> may communicate a request to a vendor server requesting the existing catalog file; or receive at the network appliance <b>108</b>, a validation package from the vendor server <b>102</b>, that includes programming instructions to execute some or all of the integrity analysis as well as the integrity files <b>118</b> and/or a hash map <b>114</b>.</p><p id="p-0059" num="0058">The integrity module <b>104</b>/<b>116</b> can either populate a vendor hash map using the integrity files <b>118</b> or use the hash map <b>114</b> for the integrity analysis. For instance, the vendor hash map and/or integrity files <b>118</b> may include a directory of vendor program files <b>101</b> associated with the application <b>110</b> under analysis and computed hash values of each of the vendor program files <b>101</b>. The computed hash values of each of the vendor program files <b>101</b> are representative of content of the vendor program files <b>101</b>.</p><p id="p-0060" num="0059">The integrity module <b>104</b>/<b>116</b> is configured to identify the installed program files <b>106</b> associated with one or more of the applications <b>110</b> under analysis stored on the network appliance <b>108</b>. The integrity module <b>104</b>/<b>116</b> may then scan the installed program files <b>106</b>. In some instance, the integrity module <b>104</b>/<b>116</b> may scan the installed program files <b>106</b> out-of-band such that operation of the applications <b>110</b> is not interrupted or during a secured boot sequence as the applications <b>110</b> are launched.</p><p id="p-0061" num="0060">The integrity module <b>104</b>/<b>116</b> may compute a hash value of each of the installed program files <b>106</b>. In some embodiments, the hash values may be computed responsive to a check that one of the installed program files <b>106</b> exist in the vendor hash map. The hash values of each installed program file <b>106</b> are representative of the content of each of the installed program files <b>106</b>. In other embodiments, after the installed program files <b>106</b> are identified, the integrity module <b>104</b>/<b>116</b> may compute the hash values. In these and other embodiments, the integrity module <b>104</b>/<b>116</b> may compute an installed hash map of the installed program files <b>106</b>. The installed hash map includes a directory of the installed program files <b>106</b> and corresponding computed hash values of each of the installed program files <b>106</b>.</p><p id="p-0062" num="0061">As mentioned above, the integrity module <b>104</b>/<b>116</b> may determine whether there are unauthorized program files among the installed program files <b>106</b> (e.g., a program file included in the installed program files <b>106</b> and not found in the vendor hash map.). Moreover, the integrity module <b>104</b>/<b>116</b> may determine whether one of the vendor program files <b>101</b> have been removed (e.g., a program file included in the vendor hash map and not in the installed program files <b>106</b>).</p><p id="p-0063" num="0062">The integrity module <b>104</b>/<b>116</b> may individually compare the computed hash values of the installed program files <b>106</b> to the computed hash values of the vendor program files <b>101</b>. The integrity module <b>104</b>/<b>116</b> may identify any compromised program file of the installed program files <b>106</b> based on a difference between computed hash values of the installed program files <b>106</b> and the computed hash values of a corresponding vendor program files <b>101</b>. The identified difference indicates a difference in content, which may further indicate an unauthorized modification by a malicious actor.</p><p id="p-0064" num="0063">The integrity module <b>104</b>/<b>116</b> may be configured to remediate the installed program files <b>106</b>. The remediation of the installed program files <b>106</b> may include replacing at least the compromised program files with a corresponding one of the integrity files <b>118</b>. In some embodiments, the remediation may include replacing two or more or all of the installed program files <b>106</b> with the integrity files <b>118</b>. For instance, in these embodiments, the presence of one compromised program file might be indicative of a larger problem. Accordingly, all of the installed program files <b>106</b> or all of the installed program files <b>106</b> of a type, etc. may be replaced. The replacement of all the installed program files <b>106</b> may be tantamount to a factory reset, which may return the application(s) <b>110</b> to a known complaint version of thereof.</p><p id="p-0065" num="0064">The integrity module <b>104</b>/<b>116</b> may also be configured to collect data related to the compromised program file or to generate an artifact of the compromised program file. Th integrity modules <b>104</b>/<b>116</b> may then preserve the data related to the compromised program file and the compromised program file for further analysis. The integrity module <b>104</b>/<b>116</b> may also communicate information related to the compromised program file to the vendor server <b>102</b> or another entity that may track or investigate the security threat.</p><p id="p-0066" num="0065">The integrity modules <b>104</b>/<b>116</b> are described together in the foregoing paragraphs. It may be understood with the benefit of this disclosure that the appliance integrity module <b>116</b>, the vendor integrity module <b>104</b>, or a combination of the appliance integrity module <b>116</b> and the vendor integrity module <b>104</b> may perform some or all of the operations of the integrity analysis.</p><p id="p-0067" num="0066">In the operating environment <b>100</b>, the integrity analysis may be performed while the applications <b>110</b> are running. Accordingly, the integrity analysis may be performed without interfering with normal operation of the applications <b>110</b>. Performance of the integrity analysis while the applications <b>110</b> are running enables an analysis without letting a malicious actor know that the integrity analysis or remediation operations are underway.</p><p id="p-0068" num="0067">Additionally, in some embodiments, the integrity modules <b>104</b>/<b>116</b> may be implemented in whole or in part relative to one or more of the applications <b>110</b> during a secure boot. In conventional secure boots, the network appliance <b>108</b> may verify signatures of the applications <b>110</b> involved in the system boot (e.g., bootloaders, utilities, etc.). In these conventional systems, a firmware may verify the signature on the applications <b>110</b> prior to the OS launching. If the signatures cannot be verified, the secure boot firmware prohibits execution of the applications <b>110</b>. Similarly, in embodiments of the integrity modules <b>104</b>/<b>116</b> executed during a secure boot, the integrity analysis may be run during the OS launching. The integrity analysis may identify compromised or unauthorized program files and prohibit launch of the applications <b>110</b> associated therewith. Additionally or alternatively, the integrity modules <b>104</b>/<b>116</b> may remediate the compromised and unauthorized program files during the secure boot and implement the factory reset of the compromised application <b>110</b>. Following the factory reset, the integrity modules <b>104</b>/<b>116</b> may allow completion of the boot sequence. In these embodiments, the integrity modules <b>104</b>/<b>116</b> may perform the integrity analysis and any necessary remediations without the user being aware of an issue.</p><p id="p-0069" num="0068">The applications <b>110</b>, the installed program files <b>106</b>, the appliance integrity module <b>116</b>, the vendor program files <b>101</b>, the vendor integrity module <b>104</b>, and the integrity files <b>118</b> (collectively, modules), and components thereof may be implemented using hardware including a processor, a microprocessor (e.g., to perform or control performance of one or more operations), a field-programmable gate array (FPGA), or an application-specific integrated circuit (ASIC). In some other instances, the modules and components thereof may be implemented using a combination of hardware and software. Implementation in software may include rapid activation and deactivation of one or more transistors or transistor elements such as may be included in hardware of a computing system (e.g., the network appliance <b>108</b>, the network server <b>136</b>, or the vendor server <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). Additionally, software defined instructions may operate on information within transistor elements. Implementation of software instructions may at least temporarily reconfigure electronic pathways and transform computing hardware.</p><p id="p-0070" num="0069">Modifications, additions, or omissions may be made to the operating environment <b>100</b> without departing from the scope of the present disclosure. For example, the operating environment <b>100</b> may include one or more network appliances <b>108</b>, one or more network servers <b>136</b>, one or more vendor servers, one or more networks <b>119</b>, or any combination thereof. Moreover, the separation of various components and devices in the embodiments described herein is not meant to indicate that the separation occurs in all embodiments. Moreover, it may be understood with the benefit of this disclosure that the described components and servers may generally be integrated together in a single component or server or separated into multiple components or servers.</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a block diagram of an example integrity analysis process (hereinafter, &#x201c;integrity process&#x201d;) <b>200</b> that may be implemented in the operating environment <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the integrity process <b>200</b> is shown relative to some of the components (<b>108</b>, <b>102</b>, <b>116</b>, <b>110</b>, <b>106</b>, etc.) of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The description of these components is not repeated with reference to <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The network <b>119</b> is not depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. However, it may be understood with the benefit of this disclosure that communicate in the integrity process <b>200</b> may be via a communication network such as the network <b>119</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0072" num="0071">The integrity process <b>200</b> is depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref> as being implemented by the network appliance <b>108</b> by the appliance integrity module <b>116</b>. However, one or more operations of the integrity process <b>200</b> may be implemented at the vendor server <b>102</b> by the vendor integrity module <b>104</b>. Additionally, the integrity process <b>200</b> is depicted with some operations being performed by the vendor server <b>102</b>. In some embodiments, the integrity process <b>200</b> may be fully or substantially (e.g., all but reporting steps) implemented on the network appliance <b>108</b> without communicating or otherwise interacting with the vendor server <b>102</b>.</p><p id="p-0073" num="0072">In <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the appliance integrity module <b>116</b> may include a scan module <b>201</b>, a hash compute module <b>202</b>, a file existence module <b>204</b>, a hash comparison module <b>206</b>, a read module <b>218</b>, and an archive <b>212</b>. The integrity process <b>200</b> may begin with the read module <b>218</b> reading the integrity files <b>118</b>. In some instances or for some applications <b>110</b>, the integrity files <b>118</b> are stored locally such as in the appliance integrity module <b>116</b> or elsewhere on the network appliance <b>108</b>. Additionally, in some instances or for some applications <b>110</b> the read module <b>218</b> may communicate with the vendor server <b>102</b> to remotely access the integrity files <b>118</b>.</p><p id="p-0074" num="0073">The read module <b>218</b> may populate a vendor hash map <b>220</b> based on the contents of the integrity files <b>118</b>. In some embodiments, the integrity files <b>118</b> include a list of the vendor program files <b>101</b> and hash values computed based on the vendor program files <b>101</b>. In these and other embodiments, the vendor hash map <b>220</b> may be populated with the list of the vendor program files <b>101</b> and the hash values associated with each of the vendor program files <b>101</b>.</p><p id="p-0075" num="0074">In other embodiments, the integrity files <b>118</b> may not include the hash values and may instead include the vendor program files <b>101</b>. In these and other embodiments, the read module <b>218</b> may compute hash values of the vendor program files <b>101</b>. For instance, the read module <b>218</b> may execute a hash function on the content of the vendor program files <b>101</b>. The read module <b>218</b> may then populate the vendor hash map <b>220</b> with the computed hash values along with a list of the vendor program files <b>101</b>, which may be identified by a filename or another suitable file identifier. Some additional details of the operations of the read module <b>218</b> are described with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0076" num="0075">The scan module <b>201</b> may be configured to scan the network appliance <b>108</b>. The scan may be directed to a repository where program files for the applications <b>110</b> are stored on the network appliance <b>108</b>. The scan module <b>201</b> may then identify all of the installed program files <b>106</b> associated with one or more of the applications <b>110</b>.</p><p id="p-0077" num="0076">In some embodiments, the scan module <b>201</b> may generate an installed hash map <b>208</b> in some embodiments. Some additional details of an example process of generating the installed hash map <b>208</b> are provided with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The installed hash map <b>208</b> may include a list of the installed program files <b>106</b>. For instance, the scan module <b>201</b> may access the installed program files <b>106</b> to pull an identifier of each of the installed program files <b>106</b>. The identifiers may be included in the installed hash map <b>208</b>. The scan module <b>201</b> may then communicate the installed program files <b>106</b> to the hash compute module <b>202</b>. The hash compute module <b>202</b> may then compute a hash value of each of the installed program files <b>106</b>, which may be added to the installed hash map <b>208</b>.</p><p id="p-0078" num="0077">In some embodiments, the installed program files <b>106</b> may be evaluated one at a time. For instance, a first installed program file <b>106</b>A may be analyzed, followed by a second installed program file, etc. In these and other embodiments, the installed hash map <b>208</b> may not be generated or may only include a list or directory of the installed program files <b>106</b>. In the following paragraphs, the analysis of each of the installed program files <b>106</b> is described, the information for the analysis may be stored in the installed hash map <b>208</b> or may be generated on the fly during the analysis.</p><p id="p-0079" num="0078">The file existence module <b>204</b> may be configured to determine whether the installed program files <b>106</b> exists in the vendor hash map <b>220</b>. This step checks the installed program files <b>106</b> against the directory of vendor program files <b>101</b>. The file existence module <b>204</b> may perform the operation file-by-file such that the first installed program file <b>106</b>A is evaluated followed by each of the installed program files <b>106</b>.</p><p id="p-0080" num="0079">Responsive to the first installed program file <b>106</b>A not existing in the vendor hash map <b>220</b>, the file existence module <b>204</b> may classify the first installed program file <b>106</b>A as an unauthorized program file <b>210</b>. The appliance integrity module <b>116</b> may remediate the security threat introduced by the unauthorized program file <b>210</b>. For instance, responsive to detection of the unauthorized program file <b>210</b>, the vendor server <b>102</b> may communicate compliant program files <b>216</b> to the network appliance <b>108</b>. The compliant program files <b>216</b> may replace the installed program files <b>106</b> on the network appliance <b>108</b>, which removes the vulnerability introduced by the unauthorized program file <b>210</b>. The unauthorized program file <b>210</b> or an artifact thereof may be communicated to the archive <b>212</b>, where it may be encrypted. Additionally, the appliance integrity module <b>116</b> may communicate an integrity report <b>222</b> to the vendor server <b>102</b> to provide information regarding the potential vulnerability.</p><p id="p-0081" num="0080">Responsive to the first installed program file <b>106</b>A existing in the vendor hash map <b>220</b>, the file existence module <b>204</b> may communicate the first installed program file <b>106</b>A to the hash comparison module <b>206</b>. The hash comparison module <b>206</b> may determine which of the vendor program files <b>101</b> corresponds to the first installed program file <b>106</b>A. The hash comparison module may then compare a hash value of the first installed program file <b>106</b>A to a hash value of the vendor program file <b>101</b> that corresponds to the first installed program file <b>106</b>A. The hash value of the vendor program file <b>101</b> that corresponds to the first installed program file <b>106</b>A may be fetched from the vendor hash map <b>220</b>. The hash value of the first installed program file <b>106</b>A is computed by the hash compute module <b>202</b> and may be stored in the installed hash map <b>208</b>.</p><p id="p-0082" num="0081">The hash comparison module <b>206</b> may determine whether the fetched hash value matches the computed hash value. Responsive to the computed hash value being the same as the fetched hash value, the first installed program file <b>106</b>A may be verified as being trustworthy. The appliance integrity module <b>116</b> may communicate the integrity report <b>222</b> to the vendor server <b>102</b> that reflects the verified program files.</p><p id="p-0083" num="0082">Alternatively, when the computed hash value differs from the fetched hash value, it indicates that the contents of first installed program file <b>106</b>A has been modified. Modification to the first installed program file <b>106</b>A may indicate that a malicious actor has exploited a vulnerability on the network appliance <b>108</b>, which may further indicate security breach. The hash comparison module <b>206</b> may then classify the first installed program file <b>106</b>A as a compromised program file <b>210</b>.</p><p id="p-0084" num="0083">The hash comparison module <b>206</b> may remediate the security threat introduced by the compromised program file <b>210</b>. For instance, responsive to detection of the compromised program file <b>210</b>, the vendor server <b>102</b> may communicate the compliant program files <b>216</b> to the network appliance <b>108</b> to replace the installed program files <b>106</b> on the network appliance <b>108</b>. Installation of the compliant program files <b>216</b> reduces or removes the vulnerability introduced by the compromised program file <b>210</b>. The compromised program file <b>210</b> or an artifact thereof may be communicated to the archive <b>212</b>, where it may be encrypted. Additionally, the appliance integrity module <b>116</b> may communicate the integrity report <b>222</b> to the vendor server <b>102</b> to provide information regarding the potential vulnerability.</p><p id="p-0085" num="0084">In some embodiments, the appliance integrity module <b>116</b> may also perform an operation that ensures each of the vendor program files <b>101</b> in the vendor hash map <b>220</b> are included in the installed program files <b>106</b> of the network appliance <b>108</b>. In these and other embodiments, as the installed program files <b>106</b> are evaluated, the corresponding vendor program file <b>101</b> may be noted. After all the installed program files <b>106</b> are evaluated, the appliance integrity module <b>116</b> may determine whether there are any vendor program files <b>101</b> left of in the vendor hash map <b>220</b>. Responsive to one of the installed program files <b>106</b> being missing from the system, the appliance integrity module <b>116</b> may include remediating the system by performing a factory reset or adding the missing program file to the system.</p><p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts an example map generation process (hereinafter, &#x201c;map process&#x201d;) <b>300</b> that may be implemented in the integrity process <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The map process <b>300</b> is configured to generate the installed hash map <b>208</b> from the installed program files <b>106</b> and/or the vendor hash map <b>220</b> from the integrity files <b>118</b>. The map process <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be implemented by the scan module <b>201</b>, the hash compute module <b>202</b>, and the read module <b>218</b> described with reference to <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0087" num="0086">In the embodiment of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the map process <b>300</b> includes a population process <b>301</b> to create the vendor hash map <b>220</b> and a generation process <b>303</b> to create the installed hash map <b>208</b>. In other embodiments, the map process <b>300</b> may include the population process <b>301</b> or the generation process <b>303</b>. For instance, an alternative map process may include only the population process <b>301</b>. In these and other embodiments, the installed hash map <b>208</b> may not be expressly created. Instead, one or more of the items in the installed hash map <b>208</b> may be computed on the fly with necessarily being aggregated into the installed hash map <b>208</b>. Additionally or alternatively, in some embodiments of the integrity process, the vendor hash map <b>220</b> may be generated by a vendor server and communicated throughout a system implementing an integrity analysis.</p><p id="p-0088" num="0087">The population process <b>301</b> generally includes population of the vendor hash map <b>220</b>. In some embodiments, the read module <b>218</b> may receive the integrity files <b>118</b>. The integrity files <b>118</b> may include the vendor program files (e.g., the vendor program files <b>101</b> of <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref>) and computed hash values for the vendor program files. The read module <b>218</b> may be configured open the integrity files <b>118</b> and generate one or more directories of the information included therein. For instance, in the vendor hash map <b>220</b>, a first list or directory may include file names of the vendor program files of the integrity files <b>118</b>. Specifically, in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the vendor hash map <b>220</b> may include a first column (on the left of <figref idref="DRAWINGS">FIG. <b>3</b></figref>). The first column includes a list of vendor program files <b>306</b> from the integrity files <b>118</b>, which are identified by their file name. For example, the vendor program files <b>306</b> include a first vendor program file <b>306</b>A, a second vendor program file <b>306</b>B, and a third vendor program file <b>306</b>C. The vendor program files <b>306</b> are substantially equivalent to and may correspond to the vendor program files <b>101</b> of <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref>.</p><p id="p-0089" num="0088">Additionally, in the population process <b>301</b>, vendor hash values <b>308</b> may be populated to the vendor hash map <b>220</b>. For instance, the integrity files <b>118</b> may include the vendor hash values <b>308</b>. Thus, the read module <b>218</b> may then simply add the vendor hash values <b>308</b> to the vendor hash map <b>220</b>. Alternatively, the read module <b>218</b> may implement a hash operation to compute the vendor hash values <b>308</b> based on the vendor program files <b>306</b>. In the example of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the vendor hash values <b>308</b> include a first vendor hash value <b>308</b>A, a second vendor hash value <b>308</b>B, and a third vendor hash value <b>308</b>C. In other embodiments, a number of vendor program files <b>306</b> and vendor hash values <b>308</b> may correspond to a number of program files associated with an application. In most applications the number of vendor program files <b>306</b> and vendor hash values <b>308</b> will be more than three.</p><p id="p-0090" num="0089">The generation process <b>303</b> includes generation of the installed hash map <b>208</b>. In some embodiments, the scan module <b>201</b> conducts a scan of a system such as the network appliance <b>108</b> to identify the installed program files <b>106</b>. The scan module <b>201</b> may be configured access information related to the installed program files <b>106</b> and generate a directory or list of the information based on the accessed information. For instance, in the installed hash map <b>208</b>, a first list or directory may include file names of the installed program files <b>106</b> on the network appliance. Specifically, in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the installed hash map <b>208</b> may include a first column (on the left of <figref idref="DRAWINGS">FIG. <b>3</b></figref>). The first column includes a list of installed program files <b>302</b> (which correspond to the installed program files <b>106</b>) from the network appliance <b>108</b>. The installed program files <b>302</b> are identified in the installed hash map <b>208</b> by their file name. For example, the installed program files <b>302</b> include a first installed program file <b>302</b>A, a second installed program file <b>302</b>B, and a third installed program file <b>302</b>C. In addition, the scan module <b>201</b> may communicate the installed program files <b>106</b> to the hash compute module <b>202</b>.</p><p id="p-0091" num="0090">Additionally, in the generation process <b>303</b>, installed hash values <b>304</b> may be computed by the hash compute module <b>202</b>. For instance, the hash compute module <b>202</b> may implement a hash operation (e.g., SHA-256 or another suitable hash function) to compute the installed hash values <b>304</b> based on the installed program files <b>302</b>. In the example of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the installed hash values <b>304</b> include a first installed hash value <b>304</b>A, a second installed hash value <b>304</b>B, and a third installed hash value <b>304</b>C. In other embodiments, a number of installed program files <b>302</b> and installed hash values <b>304</b> may correspond to a number of installed program files associated with an application and stored on the network appliance. In most applications the number of installed program files <b>302</b> and installed hash values <b>304</b> will be more than three.</p><p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts an example program file existence process (hereinafter, &#x201c;existence process&#x201d;) <b>400</b> that may be implemented in the integrity process <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The existence process <b>400</b> may be configured to determine whether one or more of the program files in the installed hash map <b>208</b> are included in the vendor hash map <b>220</b>. The existence process <b>400</b> may be performed following implementation of operations of the map process <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> or a similar process.</p><p id="p-0093" num="0092">In the example of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the installed hash map <b>208</b> and the vendor hash map <b>220</b> may be accessed by the file existence module <b>204</b>. In particular, the file existence module <b>204</b> may read each of the installed program files <b>302</b> from the installed hash map <b>208</b>. The file existence module <b>204</b> may then determine whether the installed program files <b>302</b> are included in the vendor program files <b>306</b> in the vendor hash map <b>220</b>. For instance, the file existence module <b>204</b> may perform a membership operation, which is represented in <figref idref="DRAWINGS">FIG. <b>4</b></figref> by and membership operator, E with a question mark positioned over it <b>406</b>.</p><p id="p-0094" num="0093">Responsive to one of the installed program files <b>302</b> not existing in the vendor hash map <b>220</b>, the file existence module <b>204</b> may classify the installed program file <b>302</b> as an unauthorized program file <b>210</b>. The unauthorized program files <b>210</b> may be communicated to the archive <b>212</b>. Additionally, the unauthorized program files <b>210</b> may be encrypted and communicated to a vendor server such as the vendor server <b>102</b>.</p><p id="p-0095" num="0094">Responsive to the installed program files <b>302</b> existing in the vendor hash map <b>220</b>, the file existence module <b>204</b> may communicate a signal <b>402</b> to the hash comparison module <b>206</b>. The hash comparison module <b>206</b> may be configured to perform a hash comparison process. An example of the hash comparison process is provided with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>. For instance, in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the second installed program file <b>302</b>B and the third installed program file <b>302</b>C are members of the vendor hash map <b>220</b>. Accordingly, the signal <b>402</b> sent to the hash comparison module <b>206</b> may indicate that the second installed program file <b>302</b>B and the third installed program file <b>302</b>C exist in the vendor hash map <b>220</b>.</p><p id="p-0096" num="0095"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts an example hash comparison process (hereinafter, &#x201c;hash process&#x201d;) <b>500</b> that may be implemented in the integrity process <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> or another similar process. The hash process <b>500</b> may be configured to compare hash values <b>304</b> of program files that have been determined to exist in the vendor hash map <b>220</b>. For instance, the hash process <b>500</b> may be performed following the existence process <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> or another similar process.</p><p id="p-0097" num="0096">The hash process <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref> is performed by the hash comparison module <b>206</b>. In these and other embodiments, the hash process <b>500</b> may include three operations <b>502</b>, <b>504</b>, and <b>506</b>. A first operation <b>502</b> may include receiving signals indicative of one or more installed program files that were determined to exist in the vendor hash map <b>220</b>. In <figref idref="DRAWINGS">FIG. <b>5</b></figref>, for example, the second installed program file <b>302</b>B and the third installed program file <b>302</b>C were determined to exist in the vendor hash map <b>220</b>. The hash comparison module <b>206</b> may accordingly receive a signal indicative of their existence in the vendor hash map <b>220</b>.</p><p id="p-0098" num="0097">Additionally, in the first operation <b>502</b>, a corresponding vendor program file may be identified for the installed program files that exist in the vendor hash map <b>220</b>. In <figref idref="DRAWINGS">FIG. <b>5</b></figref>, for example, the second vendor program file <b>306</b>B may be identified as corresponding to the second installed program file <b>302</b>B. Also, in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the third vendor program file <b>306</b>C may be identified as corresponding to the third installed program file <b>302</b>C.</p><p id="p-0099" num="0098">In the second operation <b>504</b>, computed hash values representative of the installed program files <b>302</b> and the vendor program files <b>306</b> may be identified. In <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the second installed hash value <b>304</b>B is representative of the second installed program file <b>302</b>B, the third installed hash value <b>304</b>C is representative of the third installed program file <b>302</b>C, the second vendor hash value <b>308</b>B is representative of the second vendor program file <b>306</b>B, and the third vendor hash value <b>308</b>C is representative of the third vendor program file <b>306</b>C.</p><p id="p-0100" num="0099">In the third operation, the computed hash values of the corresponding program files are compared. Comparison of the hash values provides insight into the content of the program files represented by the hash values. For example, when the computed hash values are equivalent, contents of the program files are also equivalent. Similarly, when the computed hash values are mismatched, the contents of the program files are not equivalent, which indicates the installed program files have been modified. In <figref idref="DRAWINGS">FIG. <b>5</b></figref>, for example, the second installed hash value <b>304</b>B is compared to the second vendor hash value <b>308</b>B. Also, the third installed hash value <b>304</b>C is compared to the third vendor hash value <b>308</b>C.</p><p id="p-0101" num="0100">Responsive to the hash values being equivalent, the hash process <b>500</b> may proceed to either verify the installed program file <b>302</b> or classify the installed program file <b>302</b> as a compromised program file <b>210</b>. The compromised program files <b>210</b> may be archived and encrypted. Additionally, the compromised program files <b>210</b> may also be communicated to a vendor server for analysis.</p><p id="p-0102" num="0101">In <figref idref="DRAWINGS">FIG. <b>5</b></figref>, for example, the third installed hash value <b>304</b>C may be equivalent to the third vendor hash value <b>308</b>C. Accordingly, the third installed program file <b>302</b>C may be verified (as shown in block <b>508</b>). In contrast, the second installed hash value <b>304</b>B may differ from the third vendor hash value <b>308</b>C. Accordingly, the second installed program file <b>302</b>B is classified as a compromised program file <b>210</b> and communicated to the archive <b>212</b>.</p><p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example computer system <b>600</b> configured for software application integrity verification, according to at least one embodiment of the present disclosure. The computer system <b>600</b> may be implemented in the operating environment <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, for instance. Examples of the computer system <b>600</b> may include the network appliance <b>108</b>, the vendor server <b>102</b>, the network server <b>136</b>, or some combination thereof. The computer system <b>600</b> may include one or more processors <b>610</b>, a memory <b>612</b>, a communication unit <b>614</b>, a user interface device <b>616</b>, and a data storage <b>604</b> that includes the applications <b>110</b>, the installed program files <b>106</b>, the appliance integrity module <b>116</b>, the vendor program files <b>101</b>, the vendor integrity module <b>104</b>, and the integrity files <b>118</b> (collectively, modules <b>611</b>).</p><p id="p-0104" num="0103">The processor <b>610</b> may include any suitable special-purpose or general-purpose computer, computing entity, or processing device including various computer hardware or software modules and may be configured to execute instructions stored on any applicable computer-readable storage media. For example, the processor <b>610</b> may include a microprocessor, a microcontroller, a digital signal processor (DSP), an ASIC, an FPGA, or any other digital or analog circuitry configured to interpret and/or to execute program instructions and/or to process data. Although illustrated as a single processor in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the processor <b>610</b> may more generally include two or more processors configured to perform individually or collectively any number of operations described in the present disclosure. Additionally, one or more of the processors <b>610</b> may be present on one or more different electronic devices or computing systems. In some embodiments, the processor <b>610</b> may interpret and/or execute program instructions and/or process data stored in the memory <b>612</b>, the data storage <b>604</b>, or the memory <b>612</b> and the data storage <b>604</b>. In some embodiments, the processor <b>610</b> may fetch program instructions from the data storage <b>604</b> and load the program instructions in the memory <b>612</b>. After the program instructions are loaded into the memory <b>612</b>, the processor <b>610</b> may execute the program instructions.</p><p id="p-0105" num="0104">The memory <b>612</b> and the data storage <b>604</b> may include computer-readable storage media for carrying or having computer-executable instructions or data structures stored thereon. Such computer-readable storage media may include any available media that may be accessed by a general-purpose or special-purpose computer, such as the processor <b>610</b>. By way of example, and not limitation, such computer-readable storage media may include tangible or non-transitory computer-readable storage media including RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, flash memory devices (e.g., solid state memory devices), or any other storage medium which may be used to carry or store desired program code in the form of computer-executable instructions or data structures and that may be accessed by a general-purpose or special-purpose computer. Combinations of the above may also be included within the scope of computer-readable storage media. Computer-executable instructions may include, for example, instructions and data configured to cause the processor <b>610</b> to perform a certain operation or group of operations.</p><p id="p-0106" num="0105">The communication unit <b>614</b> may include one or more pieces of hardware configured to receive and send communications. In some embodiments, the communication unit <b>614</b> may include one or more of an antenna, a wired port, and modulation/demodulation hardware, among other communication hardware devices. In particular, the communication unit <b>614</b> may be configured to receive a communication from outside the computer system <b>600</b> and to present the communication to the processor <b>610</b> or to send a communication from the processor <b>610</b> to another device or network (e.g., the network <b>119</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>).</p><p id="p-0107" num="0106">The user interface device <b>616</b> may include one or more pieces of hardware configured to receive input from and/or provide output to a user. In some embodiments, the user interface device <b>616</b> may include one or more of a speaker, a microphone, a display, a keyboard, a touch screen, or a holographic projection, among other hardware devices.</p><p id="p-0108" num="0107">The modules <b>611</b> may include program instructions stored in the data storage <b>604</b>. The processor <b>610</b> may be configured to load the modules <b>611</b> into the memory <b>612</b> and execute the modules <b>611</b>. Alternatively, the processor <b>610</b> may execute the modules <b>611</b> line-by-line from the data storage <b>604</b> without loading them into the memory <b>612</b>. When executing the modules <b>611</b>, the processor <b>610</b> may be configured to perform one or more processes or operations described elsewhere in this disclosure.</p><p id="p-0109" num="0108">Modifications, additions, or omissions may be made to the computer system <b>600</b> without departing from the scope of the present disclosure. For example, in some embodiments, the computer system <b>600</b> may not include the user interface device <b>616</b>. In some embodiments, the different components of the computer system <b>600</b> may be physically separate and may be communicatively coupled via any suitable mechanism. For example, the data storage <b>604</b> may be part of a storage device that is separate from a device, which includes the processor <b>610</b>, the memory <b>612</b>, and the communication unit <b>614</b>, that is communicatively coupled to the storage device. The embodiments described herein may include the use of a special-purpose or general-purpose computer including various computer hardware or software modules, as discussed in greater detail below.</p><p id="p-0110" num="0109"><figref idref="DRAWINGS">FIGS. <b>7</b>A and <b>7</b>B</figref> are a flow chart of an example method <b>700</b> of software application integrity verification, according to at least one embodiment described in the present disclosure. The method <b>700</b> may be performed in a suitable operating environment such as the operating environment <b>100</b>. The method <b>700</b> may be performed by the network appliance <b>108</b> or the vendor server <b>102</b> described elsewhere in the present disclosure or by another suitable computing system, such as the computing system <b>600</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. The network appliance <b>108</b> or the vendor server <b>102</b> implementing or controlling operation of the method <b>700</b> may be included in a cloud-based networked system, a managed network, managed subnetwork, or another suitable network computing environment. Although illustrated as discrete blocks, one or more blocks in <figref idref="DRAWINGS">FIGS. <b>7</b>A and <b>7</b>B</figref> may be divided into additional blocks, combined into fewer blocks, or eliminated, depending on the desired implementation.</p><p id="p-0111" num="0110">Referring to <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>, the method <b>700</b> may begin at block <b>702</b> in which an integrity file may be read. The integrity file may include vendor program files for an application under analysis. At block <b>704</b>, a first hash map may be populated. For instance, the first hash map may be a vendor hash map that includes information such as a list or directory of each of the files of the vendor program files. Additionally, the first hash map may include hash values of each of the vendor program files.</p><p id="p-0112" num="0111">At block <b>706</b>, a system may be scanned. The system is scanned to identify installed program files on the system that are associated with the application under analysis. In some embodiments the system may include a network appliance or another computing device on which the application under analysis is located. At block <b>708</b>, a hash value may be computed. For instance, the hash value of one or more of the installed program files may be computed.</p><p id="p-0113" num="0112">At block <b>710</b>, it may be determined whether a first file exists in the first hash map. For instance, it may be determined whether a first installed program file identified on the system during the scan operation exists in the first hash map. Responsive to the file existing in the first hash (&#x201c;YES&#x201d; at block <b>710</b>), the method <b>700</b> may proceed to block <b>716</b>. Responsive to the file not existing in the first hash (&#x201c;NO&#x201d; at block <b>710</b>), the method <b>700</b> may proceed to block <b>712</b>.</p><p id="p-0114" num="0113">At block <b>712</b>, the first file may be classified as an unauthorized file. For instance, the first hash map includes all of the files that should be present in installed program files. Thus, if the first file of the installed program files does not exist in the first hash map, which indicates that the first file may have been added to the system by a malicious actor.</p><p id="p-0115" num="0114">At block <b>713</b>, the unauthorized file may be remediated. For instance, responsive to detection of the unauthorized file, the vendor server may communicate the complaint program files to the system to replace the installed program files or to perform a factory reset of the application. Installation of the compliant program files reduces or removes the vulnerability introduced by the unauthorized file.</p><p id="p-0116" num="0115">At block <b>714</b>, the unauthorized file may be added to an archive. In some embodiments, an artifact of the unauthorized file may be created, which may be added to the archive. The method <b>700</b> may proceed from block <b>714</b> to block <b>726</b> of <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>. At block <b>726</b>, the archive may be encrypted, which may enable specific analysis as to the source, threat level, origin, etc. of the content of the archive (including the unauthorized file and compromised file).</p><p id="p-0117" num="0116">At block <b>728</b>, a report may be communicated. For instance, responsive to an unauthorized file being present on the system or presence of a compromised file on the system, a report may be generated and communicated to a supervisory or management entity. The report may include information from the archive as well as information related to the system, for example.</p><p id="p-0118" num="0117">With continued reference to <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, at block <b>716</b> a hash value may be fetched from the first hash map. Accordingly, if the first file exists in the first hash map, an operation is performed to fetch a hash value of a corresponding program file of the first hash map. For instance, if it is determined that a first installed program file exists in the first hash map, then the hash value of the first vendor program file is fetched. That is, the first installed program file corresponds to the first vendor program file in the first hash map, then the hash value of the first vendor program file is fetched.</p><p id="p-0119" num="0118">At block <b>718</b>, it may be determined whether the fetched hash value matches the computed hash value. For instance, it may be determined whether the fetched hash value for a first vendor program file matches the computed hash value for the first installed program file that corresponds to the first vendor program file. Responsive to the fetched hash value matching the computed hash value, (&#x201c;YES&#x201d; at block <b>718</b>), the method <b>700</b> may proceed to block <b>720</b>. Responsive to the fetched hash value differing from the computed hash value (&#x201c;NO&#x201d; at block <b>718</b>), the method <b>700</b> may proceed to block <b>722</b>.</p><p id="p-0120" num="0119">At block <b>722</b>, the first file may be classified as a compromised file. For instance, when the computed hash value differs from the fetched hash value, it indicates that the contents of installed program file (e.g., the first file) has been modified. Modification to the installed program file may indicate that a malicious actor has exploited a vulnerability on the system, which may indicate security breach in the system or a network including the system.</p><p id="p-0121" num="0120">At block <b>723</b>, the compromised file may be remediated. For instance, responsive to detection of the compromised file, the vendor server may communicate the complaint program files to the system to replace the installed program files or to perform a factory reset of the application. Installation of the compliant program files reduces or removes the vulnerability introduced by the compromised file. At block <b>724</b>, the compromised file may be added to the archive. As discussed above, the archive may be encrypted at block <b>726</b> and a report may be communicated in block <b>728</b>.</p><p id="p-0122" num="0121">At block <b>720</b>, the first file may be classified as an uncompromised or verified file. For instance, when the computed hash value matches the fetched hash value, it indicates that the contents of program files are equivalent and unmodified by a malicious actor. Thus, these program files may pose little risk at introducing a security vulnerability to the system. Classification of the first file as the uncompromised or verified file may indicate that the trustworthiness and authenticity of the first file may be verified. The method <b>700</b> may proceed to block <b>728</b> described above. The report regarding the uncompromised file may indicate a verification of the first file. Additionally, in some embodiments, the method <b>700</b> may proceed to block <b>710</b> where one or more additional files from the installed program files are evaluated using one or more of blocks <b>712</b>, <b>714</b>, <b>716</b>, <b>718</b>, <b>720</b>, <b>722</b>, <b>724</b>, <b>726</b>, <b>728</b>, or some combination thereof.</p><p id="p-0123" num="0122">In some embodiments, the method <b>700</b> may also include an operation that ensures each of the program files in the first hash map are included in the installed program files of the system. In these and other embodiments, as the installed program files are evaluated, the corresponding vendor program file may be noted. After all the installed program files on the system are evaluated, the method <b>700</b> may include an operation that determines whether there is any left of vendor program files in the first hash map. Responsive to one of the installed program files being missing from the system, the method <b>700</b> may include remediating the system by performing a factory reset or adding the missing program file to the system.</p><p id="p-0124" num="0123">Additionally, in some embodiments, the method <b>700</b> may be performed during a secured boot or while the application under analysis is operational.</p><p id="p-0125" num="0124">Further, modifications, additions, or omissions may be made to the method <b>700</b> without departing from the scope of the present disclosure. For example, the operations of method <b>700</b> may be implemented in differing order. Furthermore, the outlined operations and actions are only provided as examples, and some of the operations and actions may be optional, combined into fewer operations and actions, or expanded into additional operations and actions without detracting from the disclosed embodiments.</p><p id="p-0126" num="0125">The embodiments described herein may include the use of a special purpose or general-purpose computer including various computer hardware or software modules, as discussed in greater detail below.</p><p id="p-0127" num="0126">Embodiments described herein may be implemented using computer-readable media for carrying or having computer-executable instructions or data structures stored thereon. Such computer-readable media may be any available media that may be accessed by a general purpose or special purpose computer. By way of example, and not limitation, such computer-readable media may include non-transitory computer-readable storage media including Random Access Memory (RAM), Read-Only Memory (ROM), Electrically Erasable Programmable Read-Only Memory (EEPROM), Compact Disc Read-Only Memory (CD-ROM) or other optical disk storage, magnetic disk storage or other magnetic storage devices, flash memory devices (e.g., solid state memory devices), or any other storage medium which may be used to carry or store desired program code in the form of computer-executable instructions or data structures and which may be accessed by a general purpose or special purpose computer. Combinations of the above may also be included within the scope of computer-readable media.</p><p id="p-0128" num="0127">Computer-executable instructions may include, for example, instructions and data, which cause a general-purpose computer, special purpose computer, or special purpose processing device (e.g., one or more processors) to perform a certain function or group of functions. Although the subject matter has been described in language specific to structural features and/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.</p><p id="p-0129" num="0128">As used herein, the terms &#x201c;module&#x201d; or &#x201c;component&#x201d; may refer to specific hardware implementations configured to perform the operations of the module or component and/or software objects or software routines that may be stored on and/or executed by general purpose hardware (e.g., computer-readable media, processing devices, etc.) of the computing system. In some embodiments, the different components, modules, engines, and services described herein may be implemented as objects or processes that execute on the computing system (e.g., as separate threads). While some of the system and methods described herein are generally described as being implemented in software (stored on and/or executed by general purpose hardware), specific hardware implementations or a combination of software and specific hardware implementations are also possible and contemplated. In this description, a &#x201c;computing entity&#x201d; may be any computing system as previously defined herein, or any module or combination of modulates running on a computing system.</p><p id="p-0130" num="0129">The various features illustrated in the drawings may not be drawn to scale. The illustrations presented in the present disclosure are not meant to be actual views of any particular apparatus (e.g., device, system, etc.) or method, but are representations employed to describe embodiments of the disclosure. Accordingly, the dimensions of the features may be expanded or reduced for clarity. In addition, some of the drawings may be simplified for clarity. Thus, the drawings may not depict all of the components of a given apparatus (e.g., device) or all operations of a particular method.</p><p id="p-0131" num="0130">Terms used in the present disclosure and the claims (e.g., bodies of the appended claims) are intended as &#x201c;open&#x201d; terms (e.g., the term &#x201c;including&#x201d; should be interpreted as &#x201c;including, but not limited to,&#x201d; the term &#x201c;having&#x201d; should be interpreted as &#x201c;having at least,&#x201d; the term &#x201c;includes&#x201d; should be interpreted as &#x201c;includes, but is not limited to,&#x201d; among others). Additionally, if a specific number of an introduced claim recitation is intended, such an intent will be explicitly recited in the claim, and in the absence of such recitation no such intent is present. For example, as an aid to understanding, the following appended claims may contain usage of the introductory phrases &#x201c;at least one&#x201d; and &#x201c;one or more&#x201d; to introduce claim recitations.</p><p id="p-0132" num="0131">In addition, even if a specific number of an introduced claim recitation is explicitly recited, those skilled in the art will recognize that such recitation should be interpreted to mean at least the recited number (e.g., the bare recitation of &#x201c;two recitations,&#x201d; without other modifiers, means at least two recitations, or two or more recitations). Furthermore, in instances in which a convention analogous to &#x201c;at least one of A, B, and C, etc.&#x201d; or &#x201c;one or more of A, B, and C, etc.&#x201d; is used, in general such a construction is intended to include A alone, B alone, C alone, A and B together, A and C together, B and C together, or A, B, and C together, etc. Further, any disjunctive word or phrase presenting two or more alternative terms should be understood to contemplate the possibilities of including one of the terms, either of the terms, or both terms. For example, the phrase &#x201c;A or B&#x201d; should be understood to include the possibilities of &#x201c;A&#x201d; or &#x201c;B&#x201d; or &#x201c;A and B.&#x201d;</p><p id="p-0133" num="0132">However, the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles &#x201c;a&#x201d; or &#x201c;an&#x201d; limits any particular claim containing such introduced claim recitation to embodiments containing only one such recitation, even when the same claim includes the introductory phrases &#x201c;one or more&#x201d; or &#x201c;at least one&#x201d; and indefinite articles such as &#x201c;a&#x201d; or &#x201c;an&#x201d; (e.g., &#x201c;a&#x201d; and/or &#x201c;an&#x201d; should be interpreted to mean &#x201c;at least one&#x201d; or &#x201c;one or more&#x201d;); the same holds true for the use of definite articles used to introduce claim recitations.</p><p id="p-0134" num="0133">The terms &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; etc., are not necessarily used to connote a specific order or number of elements. Generally, the terms &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; etc., are used to distinguish between different elements as generic identifiers. Absence a showing that the terms &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; etc., connote a specific order, these terms should not be understood to connote a specific order. Furthermore, absence a showing that the terms &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; etc., connote a specific number of elements, these terms should not be understood to connote a specific number of elements. For example, a first widget may be described as having a first side and a second widget may be described as having a second side. The use of the term &#x201c;second side&#x201d; with respect to the second widget may be to distinguish such side of the second widget from the &#x201c;first side&#x201d; of the first widget and not to connote that the second widget has two sides.</p><p id="p-0135" num="0134">All examples and conditional language recited herein are intended for pedagogical objects to aid the reader in understanding the invention and the concepts contributed by the inventor to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions. Although embodiments of the present inventions have been described in detail, it should be understood that the various changes, substitutions, and alterations could be made hereto without departing from the scope of the invention.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of software application integrity verification and remediation, the method comprising:<claim-text>scanning a network appliance to identify installed program files at the network appliance that are associated with a vendor-supplied software application under analysis that is deployed at the network appliance;</claim-text><claim-text>computing a hash value of a first installed program file of the installed program files, wherein the computed hash value is a representation of content of the first installed program file;</claim-text><claim-text>determining whether the first installed program file exists in vendor program files of the vendor-supplied software application under analysis, the vendor program files being maintained separate from the installed program files;</claim-text><claim-text>responsive to a determination that the first installed program file exists in the vendor program files:<claim-text>fetching a hash value of a first vendor program file of the vendor program files, wherein the first vendor program file corresponds to the first installed program file, and the fetched hash value is a representation of content of the first vendor program file;</claim-text><claim-text>determining whether the fetched hash value matches the computed hash value, wherein a difference between the fetched hash value and the computed hash value is an indication of an unauthorized modification to the first installed program file; and</claim-text><claim-text>responsive to the fetched hash value differing from the computed hash value, classifying the first installed program file as a compromised file, and remediating the compromised file at the network appliance.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising responsive to a determination that the first installed program file does not exist in the vendor program files:<claim-text>classifying the first installed program file as an unauthorized file; and</claim-text><claim-text>remediating the unauthorized file at the network appliance.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising responsive to the fetched hash value matching the computed hash value, classifying the first installed program file as a verified program file at the network appliance.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>reading an integrity file that includes the vendor program files associated with the vendor-supplied software application; and</claim-text><claim-text>populating a first hash map based on the integrity file, the first hash map including a list of the vendor program files and hash values of the vendor program files.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein:<claim-text>the determining whether the first installed program file exists in vendor program files includes determining whether the first installed program file exists in the first hash map;</claim-text><claim-text>the hash value is fetched from the first hash map; and</claim-text><claim-text>the first hash map is formatted according to a bill of materials (BOM) file format.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising initiating a secure boot operation involving the vendor-supplied software application under analysis, wherein at least the scanning the network appliance and the remediating the compromised file at the network appliance occur prior to completion of the secure boot operation.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the vendor-supplied software application under analysis is running at the network appliance during at least the scanning of the network appliance and the remediating the compromised file at the network appliance.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the remediating the compromised file includes:<claim-text>performing a factory reset of the vendor-supplied software application under analysis;</claim-text><claim-text>generating an artifact of the first installed program file;</claim-text><claim-text>adding the artifact of the first installed program file to an archive; and</claim-text><claim-text>encrypting the archive to prevent further access to the first installed program file to preserve the first installed program file such that a difference in content of the first installed program file relative to the first vendor program file is able to be analyzed.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the scanning the network appliance is performed responsive to a clock signal.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the vendor-supplied software application under analysis includes:<claim-text>an encrypted application running in a client environment; or</claim-text><claim-text>a Linux-based application.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A non-transitory computer-readable medium having encoded therein programming code executable by one or more processors to perform or control performance of operations of software application integrity verification and remediation, the operations comprising:<claim-text>scanning a network appliance to identify installed program files at the network appliance that are associated with a vendor-supplied software application under analysis that is deployed at the network appliance;</claim-text><claim-text>computing a hash value of a first installed program file of the installed program files, wherein the computed hash value is a representation of content of the first installed program file;</claim-text><claim-text>determining whether the first installed program file exists in vendor program files of the vendor-supplied software application under analysis, the vendor program files being maintained separate from the installed program files;</claim-text><claim-text>responsive to a determination that the first installed program file exists in the vendor program files:<claim-text>fetching a hash value of a first vendor program file of the vendor program files, wherein the first vendor program file corresponds to the first installed program file, and the fetched hash value is a representation of content of the first vendor program file;</claim-text><claim-text>determining whether the fetched hash value matches the computed hash value, wherein a difference between the fetched hash value and the computed hash value is an indication of an unauthorized modification to the first installed program file; and</claim-text><claim-text>responsive to the fetched hash value differing from the computed hash value, classifying the first installed program file as a compromised file, and remediating the compromised file at the network appliance.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the operations further comprise responsive to a determination that the first installed program file does not exist in the vendor program files:<claim-text>classifying the first installed program file as an unauthorized file; and</claim-text><claim-text>remediating the unauthorized file at the network appliance.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the operations further comprise responsive to the fetched hash value matching the computed hash value, classifying the first installed program file as a verified program file at the network appliance.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the operations further comprise:<claim-text>reading an integrity file that includes the vendor program files associated with the vendor-supplied software application; and</claim-text><claim-text>populating a first hash map based on the integrity file, the first hash map including a list of the vendor program files and hash values of the vendor program files.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein:<claim-text>the determining whether the first installed program file exists in vendor program files includes determining whether the first installed program file exists in the first hash map;</claim-text><claim-text>the hash value is fetched from the first hash map; and</claim-text><claim-text>the first hash map is formatted according to a bill of materials (BOM) file format.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein:<claim-text>the operations further comprise initiating a secure boot operation involving the vendor-supplied software application under analysis; and</claim-text><claim-text>at least the scanning the network appliance and the remediating the compromised file at the network appliance occur prior to completion of the secure boot operation.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the vendor-supplied software application under analysis is running at the network appliance during at least the scanning of the network appliance and the remediating the compromised file at the network appliance.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the remediating the compromised file includes:<claim-text>performing a factory reset of the vendor-supplied software application under analysis;</claim-text><claim-text>generating an artifact of the first installed program file;</claim-text><claim-text>adding the artifact of the first installed program file to an archive; and</claim-text><claim-text>encrypting the archive to prevent further access to the first installed program file to preserve the first installed program file such that a difference in content of the first installed program file relative to the first vendor program file is able to be analyzed.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the scanning the network appliance is performed responsive to a clock signal.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the vendor-supplied software application under analysis includes:<claim-text>an encrypted application running in a client environment; or</claim-text><claim-text>a Linux-based application.</claim-text></claim-text></claim></claims></us-patent-application>