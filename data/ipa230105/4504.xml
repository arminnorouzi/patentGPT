<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004505A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004505</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17930521</doc-number><date>20220908</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>13</main-group><subgroup>16</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>182</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>32</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>62</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>78</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>13</main-group><subgroup>1626</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>182</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0608</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>065</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3236</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>067</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>101</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>13</main-group><subgroup>1663</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0825</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>0607</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0641</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>6209</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0611</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1076</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>78</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2211</main-group><subgroup>1028</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1097</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Generating Messages with Priorities in a Storage Network</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16780310</doc-number><date>20200203</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11474958</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17930521</doc-number></document-id></child-doc></relation></continuation><continuation-in-part><relation><parent-doc><document-id><country>US</country><doc-number>16288848</doc-number><date>20190228</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10558592</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16780310</doc-number></document-id></child-doc></relation></continuation-in-part><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15255540</doc-number><date>20160902</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10318445</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16288848</doc-number></document-id></child-doc></relation></continuation><continuation-in-part><relation><parent-doc><document-id><country>US</country><doc-number>13683951</doc-number><date>20121121</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10469578</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>15255540</doc-number></document-id></child-doc></relation></continuation-in-part><us-provisional-application><document-id><country>US</country><doc-number>61564185</doc-number><date>20111128</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Pure Storage, Inc.</orgname><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Dhuse</last-name><first-name>Greg R.</first-name><address><city>Chicago</city><state>IL</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Pure Storage, Inc.</orgname><role>02</role><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A storage system operates by generating system messages, in accordance with the system-level message processing parameters, the system messages including status information, performance information and alarms, each having one of a plurality of priorities. The generating includes: generating a first message of the system messages corresponding to a first of the storage nodes based on the system-level message processing parameters, the first message including a first alarm of the alarms having a first message priority of the plurality of priorities; and generating a second message of the system messages corresponding to a second of the storage nodes based on the system-level message processing parameters, the second message including a second alarm of the alarms having a second message priority of the plurality of priorities. Wherein the system further operates by sending the first message of the system messages in accordance with the first message priority; and ending the second message of the system messages in accordance with the second message priority.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="118.19mm" wi="158.75mm" file="US20230004505A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="226.14mm" wi="168.99mm" orientation="landscape" file="US20230004505A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="200.74mm" wi="156.46mm" orientation="landscape" file="US20230004505A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="232.49mm" wi="165.78mm" orientation="landscape" file="US20230004505A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="232.49mm" wi="139.02mm" orientation="landscape" file="US20230004505A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="209.80mm" wi="173.40mm" orientation="landscape" file="US20230004505A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="227.33mm" wi="174.33mm" orientation="landscape" file="US20230004505A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="132.33mm" wi="169.84mm" orientation="landscape" file="US20230004505A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="129.62mm" wi="176.78mm" orientation="landscape" file="US20230004505A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">The present U.S. Utility patent application claims priority pursuant to 35 U.S.C. &#xa7; 120 as a continuation of U.S. Utility application Ser. No. 16/780,310, entitled &#x201c;GENERATING AND QUEUING SYSTEM MESSAGES WITH PRIORITIES IN A STORAGE NETWORK&#x201d;, filed Feb. 3, 2020, which is a continuation-in-part of U.S. Utility application Ser. No. 16/288,848, entitled &#x201c;PRIORITY LEVEL ADAPTATION IN A DISPERSED STORAGE NETWORK&#x201d;, filed Feb. 28, 2019, issued as U.S. Pat. No. 10,558,592 on Feb. 11, 2020, which is a continuation of U.S. Utility application Ser. No. 15/255,540, entitled &#x201c;PRIORITY LEVEL ADAPTATION IN A DISPERSED STORAGE NETWORK&#x201d;, filed Sep. 2, 2016, issued as U.S. Pat. No. 10,318,445 on Jun. 11, 2019, which is a continuation-in-part of U.S. Utility application Ser. No. 13/683,951, entitled &#x201c;PRIORITIZATION OF MESSAGES OF A DISPERSED STORAGE NETWORK&#x201d;, filed Nov. 21, 2012, issued as U.S. Pat. No. 10,469,578 on Nov. 5, 2019, which claims priority pursuant to 35 U.S.C. &#xa7; 119(e) to U.S. Provisional Application No. 61/564,185, entitled &#x201c;OPTIMIZING PERFORMANCE OF DISPERSED STORAGE NETWORK&#x201d;, filed Nov. 28, 2011, all of which are hereby incorporated herein by reference in their entirety and made part of the present U.S. Utility patent application for all purposes.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT</heading><p id="p-0003" num="0002">Not applicable.</p><heading id="h-0003" level="1">INCORPORATION-BY-REFERENCE OF MATERIAL SUBMITTED ON A COMPACT DISC</heading><p id="p-0004" num="0003">Not applicable.</p><heading id="h-0004" level="1">BACKGROUND OF THE INVENTION</heading><heading id="h-0005" level="1">Technical Field of the Invention</heading><p id="p-0005" num="0004">This invention relates generally to computer networks and more particularly to dispersing error encoded data.</p><heading id="h-0006" level="1">Description of Related Art</heading><p id="p-0006" num="0005">Computing devices are known to communicate data, process data, and/or store data. Such computing devices range from wireless smart phones, laptops, tablets, personal computers (PC), work stations, and video game devices, to data centers that support millions of web searches, stock trades, or on-line purchases every day. In general, a computing device includes a central processing unit (CPU), a memory system, user input/output interfaces, peripheral device interfaces, and an interconnecting bus structure.</p><p id="p-0007" num="0006">As is further known, a computer may effectively extend its CPU by using &#x201c;cloud computing&#x201d; to perform one or more computing functions (e.g., a service, an application, an algorithm, an arithmetic logic function, etc.) on behalf of the computer. Further, for large services, applications, and/or functions, cloud computing may be performed by multiple cloud computing resources in a distributed manner to improve the response time for completion of the service, application, and/or function. For example, Hadoop is an open source software framework that supports distributed applications enabling application execution by thousands of computers.</p><p id="p-0008" num="0007">In addition to cloud computing, a computer may use &#x201c;cloud storage&#x201d; as part of its memory system. As is known, cloud storage enables a user, via its computer, to store files, applications, etc. on an Internet storage system. The Internet storage system may include a RAID (redundant array of independent disks) system and/or a dispersed storage system that uses an error correction scheme to encode data for storage.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0007" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWING(S)</heading><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic block diagram of an embodiment of a dispersed or distributed storage network (DSN) in accordance with the present invention;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic block diagram of an embodiment of a computing core in accordance with the present invention;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic block diagram of an example of dispersed storage error encoding of data in accordance with the present invention;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic block diagram of a generic example of an error encoding function in accordance with the present invention;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic block diagram of a specific example of an error encoding function in accordance with the present invention;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic block diagram of an example of a slice name of an encoded data slice (EDS) in accordance with the present invention;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic block diagram of an example of dispersed storage error decoding of data in accordance with the present invention;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a schematic block diagram of a generic example of an error decoding function in accordance with the present invention;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>9</b>A</figref> is a schematic block diagram of an embodiment of storage module in accordance with the present invention;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>9</b>B</figref> is a schematic block diagram of an embodiment of computing system in accordance with the present invention; and</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a logic diagram of an example of a method of in accordance with the present invention.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a logic diagram of an example of a method of in accordance with the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0008" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic block diagram of an embodiment of a dispersed, or distributed, storage network (DSN) <b>10</b> that includes a plurality of computing devices <b>12</b>-<b>16</b>, a managing unit <b>18</b>, an integrity processing unit <b>20</b>, and a DSN memory <b>22</b>. The components of the DSN <b>10</b> are coupled to a network <b>24</b>, which may include one or more wireless and/or wire lined communication systems; one or more non-public intranet systems and/or public internet systems; and/or one or more local area networks (LAN) and/or wide area networks (WAN).</p><p id="p-0022" num="0021">The DSN memory <b>22</b> includes a plurality of storage units <b>36</b> that may be located at geographically different sites (e.g., one in Chicago, one in Milwaukee, etc.), at a common site, or a combination thereof. For example, if the DSN memory <b>22</b> includes eight storage units <b>36</b>, each storage unit is located at a different site. As another example, if the DSN memory <b>22</b> includes eight storage units <b>36</b>, all eight storage units are located at the same site. As yet another example, if the DSN memory <b>22</b> includes eight storage units <b>36</b>, a first pair of storage units are at a first common site, a second pair of storage units are at a second common site, a third pair of storage units are at a third common site, and a fourth pair of storage units are at a fourth common site. Note that a DSN memory <b>22</b> may include more or less than eight storage units <b>36</b>. Further note that each storage unit <b>36</b> includes a computing core (as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, or components thereof) and a plurality of memory devices for storing dispersed error encoded data.</p><p id="p-0023" num="0022">In various embodiments, each of the storage units operates as a distributed storage and task (DST) execution unit, and is operable to store dispersed error encoded data and/or to execute, in a distributed manner, one or more tasks on data. The tasks may be a simple function (e.g., a mathematical function, a logic function, an identify function, a find function, a search engine function, a replace function, etc.), a complex function (e.g., compression, human and/or computer language translation, text-to-voice conversion, voice-to-text conversion, etc.), multiple simple and/or complex functions, one or more algorithms, one or more applications, etc. Hereafter, a storage unit may be interchangeably referred to as a DST execution unit and a set of storage units may be interchangeably referred to as a set of DST execution units.</p><p id="p-0024" num="0023">Each of the computing devices <b>12</b>-<b>16</b>, the managing unit <b>18</b>, and the integrity processing unit <b>20</b> include a computing core <b>26</b>, which includes network interfaces <b>30</b>-<b>33</b>. Computing devices <b>12</b>-<b>16</b> may each be a portable computing device and/or a fixed computing device. A portable computing device may be a social networking device, a gaming device, a cell phone, a smart phone, a digital assistant, a digital music player, a digital video player, a laptop computer, a handheld computer, a tablet, a video game controller, and/or any other portable device that includes a computing core. A fixed computing device may be a computer (PC), a computer server, a cable set-top box, a satellite receiver, a television set, a printer, a fax machine, home entertainment equipment, a video game console, and/or any type of home or office computing equipment. Note that each of the managing unit <b>18</b> and the integrity processing unit <b>20</b> may be separate computing devices, may be a common computing device, and/or may be integrated into one or more of the computing devices <b>12</b>-<b>16</b> and/or into one or more of the storage units <b>36</b>.</p><p id="p-0025" num="0024">Each interface <b>30</b>, <b>32</b>, and <b>33</b> includes software and hardware to support one or more communication links via the network <b>24</b> indirectly and/or directly. For example, interface <b>30</b> supports a communication link (e.g., wired, wireless, direct, via a LAN, via the network <b>24</b>, etc.) between computing devices <b>14</b> and <b>16</b>. As another example, interface <b>32</b> supports communication links (e.g., a wired connection, a wireless connection, a LAN connection, and/or any other type of connection to/from the network <b>24</b>) between computing devices <b>12</b> &#x26; <b>16</b> and the DSN memory <b>22</b>. As yet another example, interface <b>33</b> supports a communication link for each of the managing unit <b>18</b> and the integrity processing unit <b>20</b> to the network <b>24</b>.</p><p id="p-0026" num="0025">Computing devices <b>12</b> and <b>16</b> include a dispersed storage (DS) client module <b>34</b>, which enables the computing device to dispersed storage error encode and decode data as subsequently described with reference to one or more of <figref idref="DRAWINGS">FIGS. <b>3</b>-<b>8</b></figref>. In this example embodiment, computing device <b>16</b> functions as a dispersed storage processing agent for computing device <b>14</b>. In this role, computing device <b>16</b> dispersed storage error encodes and decodes data on behalf of computing device <b>14</b>. With the use of dispersed storage error encoding and decoding, the DSN <b>10</b> is tolerant of a significant number of storage unit failures (the number of failures is based on parameters of the dispersed storage error encoding function) without loss of data and without the need for a redundant or backup copies of the data. Further, the DSN <b>10</b> stores data for an indefinite period of time without data loss and in a secure manner (e.g., the system is very resistant to unauthorized attempts at accessing the data).</p><p id="p-0027" num="0026">In operation, the managing unit <b>18</b> performs DS management services. For example, the managing unit <b>18</b> establishes distributed data storage parameters (e.g., vault creation, distributed storage parameters, security parameters, billing information, user profile information, etc.) for computing devices <b>12</b>-<b>14</b> individually or as part of a group of user devices. As a specific example, the managing unit <b>18</b> coordinates creation of a vault (e.g., a virtual memory block associated with a portion of an overall namespace of the DSN) within the DSN memory <b>22</b> for a user device, a group of devices, or for public access and establishes per vault dispersed storage (DS) error encoding parameters for a vault. The managing unit <b>18</b> facilitates storage of DS error encoding parameters for each vault by updating registry information of the DSN <b>10</b>, where the registry information may be stored in the DSN memory <b>22</b>, a computing device <b>12</b>-<b>16</b>, the managing unit <b>18</b>, and/or the integrity processing unit <b>20</b>.</p><p id="p-0028" num="0027">The DSN managing unit <b>18</b> creates and stores user profile information (e.g., an access control list (ACL)) in local memory and/or within memory of the DSN memory <b>22</b>. The user profile information includes authentication information, permissions, and/or the security parameters. The security parameters may include encryption/decryption scheme, one or more encryption keys, key generation scheme, and/or data encoding/decoding scheme.</p><p id="p-0029" num="0028">The DSN managing unit <b>18</b> creates billing information for a particular user, a user group, a vault access, public vault access, etc. For instance, the DSN managing unit <b>18</b> tracks the number of times a user accesses a non-public vault and/or public vaults, which can be used to generate a per-access billing information. In another instance, the DSN managing unit <b>18</b> tracks the amount of data stored and/or retrieved by a user device and/or a user group, which can be used to generate a per-data-amount billing information.</p><p id="p-0030" num="0029">As another example, the managing unit <b>18</b> performs network operations, network administration, and/or network maintenance. Network operations includes authenticating user data allocation requests (e.g., read and/or write requests), managing creation of vaults, establishing authentication credentials for user devices, adding/deleting components (e.g., user devices, storage units, and/or computing devices with a DS client module <b>34</b>) to/from the DSN <b>10</b>, and/or establishing authentication credentials for the storage units <b>36</b>. Network administration includes monitoring devices and/or units for failures, maintaining vault information, determining device and/or unit activation status, determining device and/or unit loading, and/or determining any other system level operation that affects the performance level of the DSN <b>10</b>. Network maintenance includes facilitating replacing, upgrading, repairing, and/or expanding a device and/or unit of the DSN <b>10</b>.</p><p id="p-0031" num="0030">The integrity processing unit <b>20</b> performs rebuilding of &#x2018;bad&#x2019; or missing encoded data slices. At a high level, the integrity processing unit <b>20</b> performs rebuilding by periodically attempting to retrieve/list encoded data slices, and/or slice names of the encoded data slices, from the DSN memory <b>22</b>. For retrieved encoded slices, they are checked for errors due to data corruption, outdated version, etc. If a slice includes an error, it is flagged as a &#x2018;bad&#x2019; slice. For encoded data slices that were not received and/or not listed, they are flagged as missing slices. Bad and/or missing slices are subsequently rebuilt using other retrieved encoded data slices that are deemed to be good slices to produce rebuilt slices. The rebuilt slices are stored in the DSN memory <b>22</b>.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic block diagram of an embodiment of a computing core <b>26</b> that includes a processing module <b>50</b>, a memory controller <b>52</b>, main memory <b>54</b>, a video graphics processing unit <b>55</b>, an input/output (IO) controller <b>56</b>, a peripheral component interconnect (PCI) interface <b>58</b>, an <b>10</b> interface module <b>60</b>, at least one IO device interface module <b>62</b>, a read only memory (ROM) basic input output system (BIOS) <b>64</b>, and one or more memory interface modules. The one or more memory interface module(s) includes one or more of a universal serial bus (USB) interface module <b>66</b>, a host bus adapter (HBA) interface module <b>68</b>, a network interface module <b>70</b>, a flash interface module <b>72</b>, a hard drive interface module <b>74</b>, and a DSN interface module <b>76</b>.</p><p id="p-0033" num="0032">The DSN interface module <b>76</b> functions to mimic a conventional operating system (OS) file system interface (e.g., network file system (NFS), flash file system (FFS), disk file system (DFS), file transfer protocol (FTP), web-based distributed authoring and versioning (WebDAV), etc.) and/or a block memory interface (e.g., small computer system interface (SCSI), internet small computer system interface (iSCSI), etc.). The DSN interface module <b>76</b> and/or the network interface module <b>70</b> may function as one or more of the interface <b>30</b>-<b>33</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Note that the IO device interface module <b>62</b> and/or the memory interface modules <b>66</b>-<b>76</b> may be collectively or individually referred to as IO ports.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic block diagram of an example of dispersed storage error encoding of data. When a computing device <b>12</b> or <b>16</b> has data to store it disperse storage error encodes the data in accordance with a dispersed storage error encoding process based on dispersed storage error encoding parameters. Here, the computing device stores data object <b>40</b>, which can include a file (e.g., text, video, audio, etc.), or other data arrangement. The dispersed storage error encoding parameters include an encoding function (e.g., information dispersal algorithm, Reed-Solomon, Cauchy Reed-Solomon, systematic encoding, non-systematic encoding, on-line codes, etc.), a data segmenting protocol (e.g., data segment size, fixed, variable, etc.), and per data segment encoding values. The per data segment encoding values include a total, or pillar width, number (T) of encoded data slices per encoding of a data segment i.e., in a set of encoded data slices); a decode threshold number (D) of encoded data slices of a set of encoded data slices that are needed to recover the data segment; a read threshold number (R) of encoded data slices to indicate a number of encoded data slices per set to be read from storage for decoding of the data segment; and/or a write threshold number (W) to indicate a number of encoded data slices per set that must be accurately stored before the encoded data segment is deemed to have been properly stored. The dispersed storage error encoding parameters may further include slicing information (e.g., the number of encoded data slices that will be created for each data segment) and/or slice security information (e.g., per encoded data slice encryption, compression, integrity checksum, etc.).</p><p id="p-0035" num="0034">In the present example, Cauchy Reed-Solomon has been selected as the encoding function (a generic example is shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> and a specific example is shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>); the data segmenting protocol is to divide the data object into fixed sized data segments; and the per data segment encoding values include: a pillar width of 5, a decode threshold of 3, a read threshold of 4, and a write threshold of 4. In accordance with the data segmenting protocol, the computing device <b>12</b> or <b>16</b> divides data object <b>40</b> into a plurality of fixed sized data segments (e.g., <b>1</b> through Y of a fixed size in range of Kilo-bytes to Tera-bytes or more). The number of data segments created is dependent of the size of the data and the data segmenting protocol.</p><p id="p-0036" num="0035">The computing device <b>12</b> or <b>16</b> then disperse storage error encodes a data segment using the selected encoding function (e.g., Cauchy Reed-Solomon) to produce a set of encoded data slices. <figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a generic Cauchy Reed-Solomon encoding function, which includes an encoding matrix (EM), a data matrix (DM), and a coded matrix (CM). The size of the encoding matrix (EM) is dependent on the pillar width number (T) and the decode threshold number (D) of selected per data segment encoding values. To produce the data matrix (DM), the data segment is divided into a plurality of data blocks and the data blocks are arranged into D number of rows with Z data blocks per row. Note that Z is a function of the number of data blocks created from the data segment and the decode threshold number (D). The coded matrix is produced by matrix multiplying the data matrix by the encoding matrix.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a specific example of Cauchy Reed-Solomon encoding with a pillar number (T) of five and decode threshold number of three. In this example, a first data segment is divided into twelve data blocks (D<b>1</b>-D<b>12</b>). The coded matrix includes five rows of coded data blocks, where the first row of X<b>11</b>-X<b>14</b> corresponds to a first encoded data slice (EDS <b>1</b>_<b>1</b>), the second row of X<b>21</b>-X<b>24</b> corresponds to a second encoded data slice (EDS <b>2</b>_<b>1</b>), the third row of X<b>31</b>-X<b>34</b> corresponds to a third encoded data slice (EDS <b>3</b>_<b>1</b>), the fourth row of X<b>41</b>-X<b>44</b> corresponds to a fourth encoded data slice (EDS <b>4</b>_<b>1</b>), and the fifth row of X<b>51</b>-X<b>54</b> corresponds to a fifth encoded data slice (EDS <b>5</b>_<b>1</b>). Note that the second number of the EDS designation corresponds to the data segment number.</p><p id="p-0038" num="0037">Returning to the discussion of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the computing device also creates a slice name (SN) for each encoded data slice (EDS) in the set of encoded data slices. A typical format for a slice name <b>80</b> is shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. As shown, the slice name (SN) <b>80</b> includes a pillar number of the encoded data slice (e.g., one of 1-T), a data segment number (e.g., one of 1-Y), a vault identifier (ID), a data object identifier (ID), and may further include revision level information of the encoded data slices. The slice name functions as, at least part of, a DSN address for the encoded data slice for storage and retrieval from the DSN memory <b>22</b>.</p><p id="p-0039" num="0038">As a result of encoding, the computing device <b>12</b> or <b>16</b> produces a plurality of sets of encoded data slices, which are provided with their respective slice names to the storage units for storage. As shown, the first set of encoded data slices includes EDS <b>1</b>_<b>1</b> through EDS <b>5</b>_<b>1</b> and the first set of slice names includes SN <b>1</b>_<b>1</b> through SN <b>5</b>_<b>1</b> and the last set of encoded data slices includes EDS <b>1</b>_Y through EDS <b>5</b>_Y and the last set of slice names includes SN <b>1</b>_Y through SN <b>5</b>_Y.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic block diagram of an example of dispersed storage error decoding of a data object that was dispersed storage error encoded and stored in the example of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In this example, the computing device <b>12</b> or <b>16</b> retrieves from the storage units at least the decode threshold number of encoded data slices per data segment. As a specific example, the computing device retrieves a read threshold number of encoded data slices.</p><p id="p-0041" num="0040">To recover a data segment from a decode threshold number of encoded data slices, the computing device uses a decoding function as shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>. As shown, the decoding function is essentially an inverse of the encoding function of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The coded matrix includes a decode threshold number of rows (e.g., three in this example) and the decoding matrix in an inversion of the encoding matrix that includes the corresponding rows of the coded matrix. For example, if the coded matrix includes rows <b>1</b>, <b>2</b>, and <b>4</b>, the encoding matrix is reduced to rows <b>1</b>, <b>2</b>, and <b>4</b>, and then inverted to produce the decoding matrix.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>9</b>A</figref> is a schematic block diagram of an embodiment of a storage module <b>84</b> that includes a writer <b>102</b>, a reader <b>104</b>, and queues <b>1</b>-<b>5</b>. The storage module <b>84</b> can be implemented via a computing device <b>16</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the network <b>24</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The computing device <b>16</b> can function as a dispersed storage processing agent for computing device <b>14</b> as described previously, and may hereafter be referred to as a distributed storage and task (DST) processing unit. Each dispersed storage (DS) unit <b>1</b>-<b>5</b> may be implemented utilizing the storage unit <b>36</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. While the DST processing unit is described below in conjunction with the operation of computing unit <b>16</b>, the operates may likewise be performed by other DST processing units, including integrity processing unit <b>20</b> and/or managing unit <b>18</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0043" num="0042">The writer <b>102</b> generates messages for transmission to one or more DS units of DS units <b>1</b>-<b>5</b>. The reader <b>104</b> interprets messages received from the one or more DS units of DS units <b>1</b>-<b>5</b>. The messages include request messages and response messages. Messages transmitted from the storage module <b>84</b> to DS units <b>1</b>-<b>5</b> include requests <b>1</b>-<b>5</b>. Messages that the storage module <b>84</b> receives from DS units <b>1</b>-<b>5</b> include responses <b>1</b>-<b>5</b>.</p><p id="p-0044" num="0043">Each queue of queues <b>1</b>-<b>5</b> may be implemented as one or more of a physical memory device, a plurality of memory devices, and a virtual allocation of storage capacity of one or more memory devices. Each queue may be associated with a fixed storage capacity. Each queue of queues <b>1</b>-<b>5</b> temporarily stores messages received from a DS unit waiting to be processed by the reader <b>104</b> or messages from the writer <b>102</b> to be transmitted to a DS unit. For example, the writer <b>102</b> stores message <b>3</b>-<b>5</b> in queue <b>3</b> for transmission to DS unit <b>3</b>. Message <b>3</b>-<b>5</b> are sent to DS unit <b>3</b> via a network when message <b>3</b>-<b>5</b> are to be transmitted in accordance with a queue prioritization scheme.</p><p id="p-0045" num="0044">The queue prioritization scheme may be based on one or more of a number of messages associated with the queue (e.g., pending messages), a prioritization approach (e.g., first in first out (FIFO), last in last out (LIFO)), a prioritization level associated with each of the messages associated with the queue, a network performance level, a DS unit performance level, and an order of message receipt by the queue. For instance, queue <b>3</b> outputs message <b>3</b>-<b>5</b> to DS unit <b>3</b> when messages <b>3</b>-<b>1</b> through <b>3</b>-<b>4</b> have been successfully sent in accordance with a FIFO prioritization approach of the queue prioritization scheme. As another instance, queue <b>3</b> outputs message <b>3</b>-<b>5</b> to DS unit <b>3</b> when message <b>3</b>-<b>1</b> has been successfully sent and prior to sending of messages <b>3</b>-<b>2</b> through <b>3</b>-<b>4</b> when a prioritization level associated with message <b>3</b>-<b>5</b> is greater than a privatization level associated with messages <b>3</b>-<b>2</b> through <b>3</b>-<b>4</b> and the prioritization level associated with message <b>3</b>-<b>5</b> is lower than a privatization level associated with message <b>3</b>-<b>1</b>. As another example, queue <b>4</b> receives message <b>4</b>-<b>0</b> from DS unit <b>4</b> to be read by the reader <b>104</b>. Queue <b>4</b> outputs message <b>4</b>-<b>0</b> to the reader <b>104</b> in accordance with the queue prioritization scheme.</p><p id="p-0046" num="0045">The storage module <b>84</b> may delete a message stored in a queue when the message is outputted and is no longer required. The storage module <b>84</b> may change a message priority level of the message after message has been stored in a queue to affect a modified message transmission order. The storage module <b>84</b> may delete the message stored in the queue when the message is no longer required. The method to determine whether the message is no longer required, to delete the message, and to change the message priority is discussed in greater detail with reference to <figref idref="DRAWINGS">FIGS. <b>6</b>B-<b>10</b></figref>.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>9</b>B</figref> is a schematic block diagram of another embodiment of a computing system that includes a computing device <b>110</b> and a dispersed storage network (DSN) memory <b>22</b> of a dispersed storage network. The DSN memory <b>22</b> includes a plurality of storage nodes <b>112</b>-<b>116</b>. The computing device <b>110</b> includes a dispersed storage (DS) processing <b>118</b>. The computing device <b>110</b> may be implemented as at least one of a user device, a DS processing unit, and a DS unit. The DS processing <b>118</b> includes a generate messages module <b>120</b>, a processing information module <b>122</b>, a prioritization module <b>124</b>, and a messaging module <b>126</b>. The system functions to access the DSN memory <b>22</b> with regards to a set of encoded data slices. The accessing includes at least one of reading the set of encoded data slices from the DSN memory <b>22</b> and writing the set of encoded data slices to the DSN memory <b>22</b>. A data segment <b>128</b> of data is encoded using a dispersed storage error coding function to produce the set of encoded data slices. The generate messages module <b>120</b> receives the data segment <b>128</b> when the accessing includes writing the set of encoded data slices to the DSN memory <b>22</b>. For example, the generate messages module <b>120</b> receives the data segment <b>128</b> and encodes the data segment <b>128</b> to produce the set of encoded data slices when the accessing includes writing the set of encoded data slices to the DSN memory <b>22</b>. As another example, the DS processing <b>118</b> generates the data segment <b>128</b> and encodes the data segment <b>128</b> to produce the set of encoded data slices when the accessing includes writing the set of encoded data slices to the DSN memory <b>22</b>. Alternatively, the generate messages module <b>120</b> receives the set of encoded data slices.</p><p id="p-0048" num="0047">The generate messages module <b>120</b> generates a set of messages <b>130</b> regarding the set of encoded data slices. The set of messages <b>130</b> includes a set of read messages to read the set of encoded data slices from the DSN memory <b>22</b> when the accessing includes reading the set of encoded data slices from the DSN memory <b>22</b>. A read message of the set of read messages includes a read slice request. For example, the generate messages module <b>120</b> generates a set of read slice requests that includes a set of slice names corresponding to the set of encoded data slices. The set of messages <b>130</b> includes a set of write messages to write the set of encoded data slices to the DSN memory <b>22</b> when the accessing includes writing the set of encoded data slices to the DSN memory <b>22</b>. A write message of the set of write messages includes a write slice request. For example, the generate messages module <b>120</b> generates a set of write slice requests that includes the set of encoded data slices and the set of slice names corresponding to the set of encoded data slices.</p><p id="p-0049" num="0048">The processing information module <b>122</b> determines system-level message processing information <b>132</b> based on status of processing a plurality of sets of messages regarding a plurality of sets of encoded data slices. The plurality of sets of messages regarding the plurality of sets of encoded data slices may include numerous other write and read accesses of other encoded data slices within at least one storage node of the plurality of storage nodes <b>112</b>-<b>116</b>. The processing information module <b>122</b> determines the system-level message processing information <b>132</b> by a series of steps. A first step includes, for a first set of messages of the plurality of sets of messages, determining at least one of: a current status of sending the first set of messages (e.g., the first set of messages have been sent to the DSN memory <b>22</b>), and a current status of successfully processing the first set of messages. The determining includes at least one of initiating a query, performing a lookup, executing a test, accessing historical records, and accessing the messaging module <b>126</b>. The processing of the first set of messages includes at least one of retrieving and writing the set of encoded data slices. For example, a current status of sending the first set of messages indicates that 5 messages of a set of 16 messages have been sent. Successfully processing the first set of messages may include at least one of retrieving at least a decode threshold number of encoded data slices of the set of encoded data slices and writing at least a write threshold number of encoded data slices of the set of encoded data slices. For example, a current status of successfully processing the first set of messages indicates successful processing when 11 encoded data slices have been retrieved when a decode threshold number is 10. As another example, a current status of successfully processing the first set of messages indicates unsuccessful processing when 12 encoded data slices have been sent when a write threshold number is 13.</p><p id="p-0050" num="0049">A second step of determining the system-level message processing information includes, for a second set of messages of the plurality of sets of messages, determining at least one of: a current status of sending the second set of messages, and a current status of successfully processing the second set of messages. Alternatively, or in addition to, more steps may be included in the series of steps including determining status with regards to further sets of messages of the plurality of sets of messages. A third step includes, determining the status of processing the plurality of sets of messages regarding the plurality of sets of encoded data slices based on the at least one of the current status of sending the first set of messages and the current status of successfully processing of the first set of messages, and the at least one of the current status of sending the second set of messages, and the current status of successfully processing of the second set of messages. The determining includes at least one of aggregating status, selecting status, and confirming status. For example, the processing information module <b>122</b> determines the status of processing the plurality sets of messages regarding the plurality of sets of encoded data slices by aggregating current status associated with 10 sets of messages when the plurality of sets of messages includes 10 sets of messages.</p><p id="p-0051" num="0050">For a first message <b>136</b> of the set of messages <b>130</b>, the prioritization module <b>124</b> determines a first message priority <b>134</b> based on the system-level message processing information <b>132</b> and message processing status of a first storage node <b>112</b> of the plurality of storage nodes <b>112</b>-<b>116</b>. The prioritization module <b>124</b> determines the message processing status of the first storage node <b>112</b> by a series of steps. A first step includes determining a number of sets of the plurality of sets of messages that involves the first storage node (e.g., messages to be sent to the first storage node <b>112</b>). A second step includes determining status of sending messages of the number of sets of the plurality of sets of messages to the first storage node <b>112</b>. A third step includes determining status of successfully processed messages of the number of sets of the plurality of sets of messages by the first storage node <b>112</b>. A fourth step includes determining the message processing status of the first storage node <b>112</b> based on the status of sending messages and the status of successfully processed messages.</p><p id="p-0052" num="0051">The prioritization module <b>124</b> determines the first message priority <b>134</b> by a series of steps. A first step includes determining the number of sets of the plurality of sets of messages that involves the first storage node <b>112</b>. A second step includes interpreting the system-level message processing information <b>132</b> regarding the number of sets that involve the first storage node <b>112</b> to produce interpreted system-level message processing information. A third step includes interpreting the message processing status of the first storage node <b>112</b> regarding the number of sets that involve the first storage node <b>112</b> to produce interpreted message processing status. A fourth step includes applying a load balancing function in accordance the interpreted system-level message processing information and the interpreted message processing status to produce the first message priority <b>134</b>. The load balancing function includes at least one of a first in first out function, a last in first out function, a time-based function, and a threshold-based function. For example, the prioritization module <b>124</b> produces the first message priority <b>134</b> to include a lower than average priority level when the interpreted system-level message processing information indicates that a plurality of other messages are pending to be sent to the first storage node <b>112</b> where the plurality of other messages are associated with sets of encoded data slices that have not achieved processing of a threshold number of each set of the sets of encoded data slices. The messaging module <b>126</b> sends the first message <b>136</b> of the set of messages <b>130</b> to the first storage node <b>112</b> in accordance with the first message priority <b>134</b>. For example, the messaging module <b>126</b> sends the first message <b>136</b> to the first storage node <b>112</b> subsequent to sending another message to the first storage node <b>112</b> when a message priority of the other message has greater priority than priority of the first message priority <b>134</b>.</p><p id="p-0053" num="0052">For a second message <b>140</b> of the set of messages <b>130</b>, the prioritization module <b>124</b> determines a second message priority <b>138</b> based on the system-level message processing information <b>132</b> and message processing status of a second storage node <b>114</b> of the plurality of storage nodes <b>112</b>-<b>116</b>. The messaging module <b>126</b> sends the second message <b>140</b> of the set of messages <b>130</b> to the second storage node <b>114</b> in accordance with the second message priority <b>138</b>. For example, the messaging module <b>126</b> sends the second message <b>140</b> to the second storage node <b>114</b> prior to sending a different message to the second storage node <b>114</b> when a message priority of the different message has less priority than priority of the second message priority <b>138</b>.</p><p id="p-0054" num="0053">The system further functions to update message priorities. The prioritization module <b>124</b> updates the first message priority <b>134</b> based on status of processing the set of messages <b>130</b>. The prioritization module <b>124</b> updates the second message priority <b>138</b> based on status of processing the set of messages <b>130</b>. The updating of message priority includes updating message priority associated with writing the set of encoded data slices to the DSN memory <b>22</b> and reading the set of encoded data slices from the DSN memory <b>22</b>. The status of processing the sets of messages <b>130</b> includes status with regards to at least one of a number of messages of the set of messages that have been sent and/or processed and a number of messages of the set of messages that have been sent and/or processed within a given time period.</p><p id="p-0055" num="0054">When the set of messages <b>130</b> includes the set of write messages to write the set of encoded data slices to the DSN memory <b>22</b>, the messaging module <b>126</b> determines when a write threshold number of the set of write messages have been sent to the DSN memory <b>22</b>. When the write threshold number of the set of write messages have been sent and the first message <b>136</b> has not yet been sent to the first storage node <b>112</b>, the prioritization module <b>124</b> reduces the first message priority <b>134</b>. Alternatively, the messaging module <b>126</b> determines when a write threshold number of the set of write messages have been successfully processed by the DSN memory <b>22</b>. When the write threshold number of the set of write messages have been successfully processed and the first message <b>136</b> has not yet been sent to the first storage node <b>112</b>, the prioritization module <b>124</b> reduces the first message priority <b>134</b>.</p><p id="p-0056" num="0055">When the set of messages <b>130</b> includes the set of read messages to read the set of encoded data slices from the DSN memory <b>22</b>, the messaging module <b>126</b> determines when a decode threshold number of the set of read messages have been sent to the DSN memory <b>22</b>. When the decode threshold number of the set of read messages have been sent and the first message <b>136</b> has not yet been sent to the first storage node <b>112</b>, the prioritization module <b>124</b> reduces the first message priority <b>134</b>. Alternatively, the messaging module <b>126</b> determines when a decode threshold number of the set of read messages have been successfully processed by the DSN memory <b>22</b>. When the decode threshold number of the set of read messages have been successfully processed and the first message <b>136</b> has not yet been sent to the first storage node <b>112</b>, the prioritization module <b>124</b> reduces the first message priority <b>134</b>.</p><p id="p-0057" num="0056">When the set of messages <b>130</b> includes the set of write messages to write the set of encoded data slices to the DSN memory <b>22</b>, the messaging module <b>126</b> determines that a write threshold number of the set of write messages have not been sent to DSN memory <b>22</b> within a given time frame. When the write threshold number of the set of write messages have not been sent in the given time period and the first message <b>136</b> has not yet been sent to the first storage node <b>112</b> within the given time period, the prioritization module <b>124</b> increases the first message priority <b>134</b>.</p><p id="p-0058" num="0057">Alternatively, when the set of messages <b>130</b> includes the set of write messages to write the set of encoded data slices to the DSN memory <b>22</b>, the messaging module <b>126</b> determines when a write threshold number of the set of write messages have not been successfully processed by the DSN memory <b>22</b> within a given time period. When the write threshold number of the set of write messages have not been successfully processed within the given time period and the first message <b>136</b> has not yet been sent to the first storage node <b>112</b>, the prioritization module <b>124</b> increases the first message priority <b>134</b>.</p><p id="p-0059" num="0058">When the set of messages includes a set of read messages to read the set of encoded data slices from the DSN memory <b>22</b>, the messaging module <b>126</b> determines when a decode threshold number of the set of read messages have not been sent to the DSN memory <b>22</b> within a given time period. When the decode threshold number of the set of read messages have not been sent within the given time period and the first message <b>136</b> has not yet been sent to the first storage node <b>112</b> in the given time period, the prioritization module <b>124</b> increases the first message priority <b>134</b>.</p><p id="p-0060" num="0059">Alternatively, when the set of messages <b>130</b> includes the set of read messages to read the set of encoded data slices from the DSN memory <b>22</b>, the messaging module <b>126</b> determines when a decode threshold number of the set of read messages have not been successfully processed by the DSN memory <b>22</b> within a given time period. When the decode threshold number of the set of read messages have not been successfully processed within the given time period and the first message <b>136</b> has not yet been sent to the first storage node <b>112</b>, the prioritization module <b>124</b> increases the first message priority <b>134</b>.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a flowchart illustrating another example of modifying a write sequence. In particular, a method is presented for use with one or more functions and features described in conjunction with <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b> and <b>9</b>A and <b>9</b>B</figref>. In step <b>180</b>, a processing module (e.g., of a dispersed storage (DS) processing module) accesses write sequence information. The write sequence information includes one or more of a queue depth, a priority level of a pending request, age of a pending request, number of favorable write responses received so far, and a write threshold number. The accessing may be based on one or more of retrieving a message queue, lookup, receiving a request, a query, and an error message.</p><p id="p-0062" num="0061">The method continues at step <b>182</b> where the processing module determines whether to elevate a priority level of a write sequence. The priority level of the write sequence may be utilized in determining a transmission order of two or more pending write request messages of a common queue such that a write request associated with a higher priority level is transmitted prior to a write request associated with a lower priority level. The determining may be based on of the access write sequence information. For example, the processing module determines to elevate the priority level of the write sequence when the write sequence is associated with an oldest write sequence of a plurality of write sequences that has not received a write threshold number of favorable write responses. Each write sequence of the plurality of write sequences may be associated with a different write threshold number. As another example, the processing module determines to elevate the priority level of the write sequence when the write sequence is associated with a highest priority write sequence of the plurality of write sequences that has not received the write threshold number of favorable write responses.</p><p id="p-0063" num="0062">The method branches to step <b>186</b> when the processing module determines not to elevate the priority level of the write sequence. The method continues to step <b>184</b> when the processing module determines to elevate the priority level of the write sequence. The method continues at step <b>184</b> where the processing module elevates the priority level of the write sequence. The elevating of the priority level includes at least one of modifying a priority level indicator of an associated write request in a message queue to include a higher priority level number and reordering pending write requests in the queue such that highest priority requests will be transmitted next. The method continues to step <b>186</b>.</p><p id="p-0064" num="0063">The method continues at step <b>186</b> where the processing module determines whether to lower the priority level of the write sequence. The determining may be based on write sequence information. For example, the processing module determines to lower the priority level of the write sequence when the write sequence is associated with a write sequence of a plurality of write sequences that has received a write threshold number of favorable write responses. As another example, the processing module determines to lower the priority level of the write sequence when the write sequence is associated with a highest priority write sequence of the plurality of write sequences that has received the write threshold number of favorable write responses.</p><p id="p-0065" num="0064">The method branches to step <b>190</b> when the processing module determines not to lower the priority level of the write sequence. The method continues to step <b>188</b> when the processing module determines to lower the priority level of the write sequence. The method continues at step <b>188</b> where the processing module lowers the priority level of the write sequence. The lowering of the priority level includes at least one of modifying a priority level indicator of an associated write request in a message queue to include a lower priority level number and reordering pending write requests in the queue such that highest priority requests will be transmitted next. The method continues to step <b>190</b>. The method continues at step <b>190</b> where the method can be repeated as required.</p><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a logic diagram of an example of a method of in accordance with the present invention. In particular, a method is presented for use with one or more functions and features described in conjunction with <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b>, <b>9</b>A, <b>9</b>B and <b>10</b></figref>. A flowchart is shown illustrating an example of prioritizing messages. The method begins at step <b>150</b> where a processing module (e.g., of a dispersed storage (DS) processing) generates a set of messages regarding a set of encoded data slices. The set of messages may be utilized to access a dispersed storage network (DSN) including writing the set of encoded data slices to the DSN and reading the set of encoded data slices from the DSN. A data segment of data is encoded using a dispersed storage error coding function to produce the set of encoded data slices.</p><p id="p-0067" num="0066">The method continues at step <b>152</b> where the processing module determines system-level message processing information based on status of processing a plurality of sets of messages regarding a plurality of sets of encoded data slices. The determining system-level message processing information includes a series of steps. A first step includes, for a first set of messages of the plurality of sets of messages, determining at least one of: a current status of sending the first set of messages, and a current status of successfully processing of the first set of messages. A second step includes, for a second set of messages of the plurality of sets of messages, determining at least one of: a current status of sending the second set of messages, and a current status of successfully processing of the second set of messages. A third step includes determining the status of processing the plurality of sets of messages regarding the plurality of sets of encoded data slices based on the at least one of the current status of sending the first set of messages and the current status of successfully processing of the first set of messages, and the at least one of the current status of sending the second set of messages, and the current status of successfully processing of the second set of messages.</p><p id="p-0068" num="0067">For a first message of the set of messages, the method continues at step <b>154</b> where the processing module determines a first message priority based on the system-level message processing information and message processing status of a first storage node of the DSN. The processing module determines the message processing status of the first storage node by a series of steps. A first step includes determining a number of sets of the plurality of sets of messages that involves the first storage node. A second step includes determining status of sending messages of the number of sets of the plurality of sets of messages to the first storage node. A third step includes determining status of successfully processed messages of the number of sets of the plurality of sets of messages by the first storage node. A fourth step includes determining the message processing status of the first storage node based on the status of sending messages and the status of successfully processed messages.</p><p id="p-0069" num="0068">The processing module determines the first message priority by a series of steps. A first step includes determining a number of sets of the plurality of sets of messages that involves the first storage node. A second step includes interpreting the system-level message processing information regarding the number of sets that involve the first storage node to produce interpreted system-level message processing information. A third step includes interpreting the message processing status of the first storage node regarding the number of sets that involve the first storage node to produce interpreted message processing status. A fourth step includes applying a load balancing function in accordance the interpreted system-level message processing information and the interpreted message processing status to produce the first message priority.</p><p id="p-0070" num="0069">For a second message of the set of messages, the method continues at step <b>156</b> where the processing module determines a second message priority based on the system-level message processing information and message processing status of a second storage node. The method continues at step <b>158</b> where the processing module sends the first message of the set of messages to the first storage node in accordance with the first message priority. The method continues at step <b>160</b> where the processing module sends the second message of the set of messages to the second storage node in accordance with the second message priority.</p><p id="p-0071" num="0070">The method continues at step <b>162</b> where the processing module updates the first message priority based on status of processing the set of messages by a variety of approaches. A first approach includes, when the set of messages includes a set of write messages to write the set of encoded data slices to the DSN, the processing module determines when a write threshold number of the set of write messages have been sent to the dispersed storage network. When the write threshold number of the set of write messages have been sent and the first message has not yet been sent to the first storage node, the processing module updates the first message priority by reducing the first message priority. A second approach includes the processing module determining when a write threshold number of the set of write messages have been successfully processed by the dispersed storage network. When the write threshold number of the set of write messages have been successfully processed and the first message has not yet been sent to the first storage node, the processing module updates the first message priority by further reducing the first message priority.</p><p id="p-0072" num="0071">A third approach includes, when the set of messages includes a set of read messages to read the set of encoded data slices from the DSN, the processing module determines when a decode threshold number of the set of read messages have been sent to the DSN. When the decode threshold number of the set of read messages have been sent and the first message has not yet been sent to the first storage node, the processing module updates the first message priority by reducing the first message priority. A fourth approach includes the processing module determining when a decode threshold number of the set of read messages have been successfully processed by the dispersed storage network. When the decode threshold number of the set of read messages have been successfully processed and the first message has not yet been sent to the first storage node, the processing module updates the first message priority by further reducing the first message priority.</p><p id="p-0073" num="0072">A fifth approach includes, when the set of messages includes a set of write messages to write the set of encoded data slices to the DSN, the processing module determines that a write threshold number of the set of write messages have not been sent to the dispersed storage network within a given time frame. When the write threshold number of the set of write messages have not been sent in the given time period and the first message has not yet been sent to the first storage node within the given time period, the processing module updates the first message priority by increasing the first message priority. A sixth approach includes, when the set of messages includes the set of write messages to write the set of encoded data slices to the DSN, the processing module determines when a write threshold number of the set of write messages have not been successfully processed by the dispersed storage network within a given time period. When the write threshold number of the set of write messages have not been successfully processed within the given time period and the first message has not yet been sent to the first storage node, the processing module updates the first message priority by increasing the first message priority.</p><p id="p-0074" num="0073">A seventh approach includes, when the set of messages includes the set of read messages to read the set of encoded data slices from the DSN, the processing module determines when a decode threshold number of the set of read messages have not been sent to a dispersed storage network within a given time period. When the decode threshold number of the set of read messages have not been sent within the given time period and the first message has not yet been sent to the first storage node in the given time period, the processing module updates the first message priority by increasing the first message priority.</p><p id="p-0075" num="0074">An eighth approach includes, when the set of messages including the set of read messages to read the set of encoded data slices from the DSN, the processing module determines when a decode threshold number of the set of read messages have not been successfully processed by the dispersed storage network within a given time period. When the decode threshold number of the set of read messages have not been successfully processed within the given time period and the first message has not yet been sent to the first storage node, the processing module updates the first message priority by increasing the first message priority. The method continues at step <b>164</b> where the processing module updates the second message priority based on the status of processing the set of messages.</p><p id="p-0076" num="0075">In various embodiments, a non-transitory computer readable storage medium includes at least one memory section that stores operational instructions that, when executed by a processing system of a dispersed storage network (DSN) that includes a processor and a memory, causes the processing system to access write sequence information corresponding to a write sequence; determine whether to elevate a priority level of the write sequence; when the processing system determines to elevate the priority level of the write sequence, elevate the priority level of the write sequence; determine whether to lower the priority level of the write sequence; and when the processing system determines to lower the priority level of the write sequence, lower the priority level of the write sequence.</p><p id="p-0077" num="0076">In various embodiments, a method for use with one or more functions and features described in conjunction with the Figures and description herein includes: receiving security parameters, the security parameters including user authentication data, and a data encryption type; receiving a data segment; encoding the data segment into a set of encoded data slices using erasure coding, wherein the data segment is reconstructable from a decode threshold number of encoded data slices of the set of encoded data slices; storing, in storage nodes of a storage network, the set of encoded data slices, in accordance with the data encryption type determined based on the security parameters; receiving system-level message processing parameters regarding system messages corresponding to the storage nodes; generating system messages, in accordance with the system-level message processing parameters, the system messages including status information, performance information and alarms, each having one of a plurality of priorities, wherein the generating includes: generating a first message of the system messages corresponding to a first of the storage nodes based on the system-level message processing parameters, the first message including a first alarm of the alarms having a first message priority of the plurality of priorities; and generating a second message of the system messages corresponding to a second of the storage nodes based on the system-level message processing parameters, the second message including a second alarm of the alarms having a second message priority of the plurality of priorities. The method also includes queuing the system messages in a system message queue; sending the first message of the system messages in accordance with the first message priority; and sending the second message of the system messages in accordance with the second message priority.</p><p id="p-0078" num="0077">It is noted that terminologies as may be used herein such as bit stream, stream, signal sequence, etc. (or their equivalents) have been used interchangeably to describe digital information whose content corresponds to any of a number of desired types (e.g., data, video, speech, audio, etc. any of which may generally be referred to as &#x2018;data&#x2019;).</p><p id="p-0079" num="0078">As may be used herein, the terms &#x201c;substantially&#x201d; and &#x201c;approximately&#x201d; provides an industry-accepted tolerance for its corresponding term and/or relativity between items. Such an industry-accepted tolerance ranges from less than one percent to fifty percent and corresponds to, but is not limited to, component values, integrated circuit process variations, temperature variations, rise and fall times, and/or thermal noise. Such relativity between items ranges from a difference of a few percent to magnitude differences. As may also be used herein, the term(s) &#x201c;configured to&#x201d;, &#x201c;operably coupled to&#x201d;, &#x201c;coupled to&#x201d;, and/or &#x201c;coupling&#x201d; includes direct coupling between items and/or indirect coupling between items via an intervening item (e.g., an item includes, but is not limited to, a component, an element, a circuit, and/or a module) where, for an example of indirect coupling, the intervening item does not modify the information of a signal but may adjust its current level, voltage level, and/or power level. As may further be used herein, inferred coupling (i.e., where one element is coupled to another element by inference) includes direct and indirect coupling between two items in the same manner as &#x201c;coupled to&#x201d;. As may even further be used herein, the term &#x201c;configured to&#x201d;, &#x201c;operable to&#x201d;, &#x201c;coupled to&#x201d;, or &#x201c;operably coupled to&#x201d; indicates that an item includes one or more of power connections, input(s), output(s), etc., to perform, when activated, one or more its corresponding functions and may further include inferred coupling to one or more other items. As may still further be used herein, the term &#x201c;associated with&#x201d;, includes direct and/or indirect coupling of separate items and/or one item being embedded within another item.</p><p id="p-0080" num="0079">As may be used herein, the term &#x201c;compares favorably&#x201d;, indicates that a comparison between two or more items, signals, etc., provides a desired relationship. For example, when the desired relationship is that signal <b>1</b> has a greater magnitude than signal <b>2</b>, a favorable comparison may be achieved when the magnitude of signal <b>1</b> is greater than that of signal <b>2</b> or when the magnitude of signal <b>2</b> is less than that of signal <b>1</b>. As may be used herein, the term &#x201c;compares unfavorably&#x201d;, indicates that a comparison between two or more items, signals, etc., fails to provide the desired relationship.</p><p id="p-0081" num="0080">As may also be used herein, the terms &#x201c;processing module&#x201d;, &#x201c;processing circuit&#x201d;, &#x201c;processor&#x201d;, and/or &#x201c;processing unit&#x201d; may be a single processing device or a plurality of processing devices. Such a processing device may be a microprocessor, micro-controller, digital signal processor, microcomputer, central processing unit, field programmable gate array, programmable logic device, state machine, logic circuitry, analog circuitry, digital circuitry, and/or any device that manipulates signals (analog and/or digital) based on hard coding of the circuitry and/or operational instructions. The processing module, module, processing circuit, and/or processing unit may be, or further include, memory and/or an integrated memory element, which may be a single memory device, a plurality of memory devices, and/or embedded circuitry of another processing module, module, processing circuit, and/or processing unit. Such a memory device may be a read-only memory, random access memory, volatile memory, non-volatile memory, static memory, dynamic memory, flash memory, cache memory, and/or any device that stores digital information. Note that if the processing module, module, processing circuit, and/or processing unit includes more than one processing device, the processing devices may be centrally located (e.g., directly coupled together via a wired and/or wireless bus structure) or may be distributedly located (e.g., cloud computing via indirect coupling via a local area network and/or a wide area network). Further note that if the processing module, module, processing circuit, and/or processing unit implements one or more of its functions via a state machine, analog circuitry, digital circuitry, and/or logic circuitry, the memory and/or memory element storing the corresponding operational instructions may be embedded within, or external to, the circuitry comprising the state machine, analog circuitry, digital circuitry, and/or logic circuitry. Still further note that, the memory element may store, and the processing module, module, processing circuit, and/or processing unit executes, hard coded and/or operational instructions corresponding to at least some of the steps and/or functions illustrated in one or more of the Figures. Such a memory device or memory element can be included in an article of manufacture.</p><p id="p-0082" num="0081">One or more embodiments have been described above with the aid of method steps illustrating the performance of specified functions and relationships thereof. The boundaries and sequence of these functional building blocks and method steps have been arbitrarily defined herein for convenience of description. Alternate boundaries and sequences can be defined so long as the specified functions and relationships are appropriately performed. Any such alternate boundaries or sequences are thus within the scope and spirit of the claims. Further, the boundaries of these functional building blocks have been arbitrarily defined for convenience of description. Alternate boundaries could be defined as long as the certain significant functions are appropriately performed. Similarly, flow diagram blocks may also have been arbitrarily defined herein to illustrate certain significant functionality.</p><p id="p-0083" num="0082">To the extent used, the flow diagram block boundaries and sequence could have been defined otherwise and still perform the certain significant functionality. Such alternate definitions of both functional building blocks and flow diagram blocks and sequences are thus within the scope and spirit of the claims. One of average skill in the art will also recognize that the functional building blocks, and other illustrative blocks, modules and components herein, can be implemented as illustrated or by discrete components, application specific integrated circuits, processors executing appropriate software and the like or any combination thereof.</p><p id="p-0084" num="0083">In addition, a flow diagram may include a &#x201c;start&#x201d; and/or &#x201c;continue&#x201d; indication. The &#x201c;start&#x201d; and &#x201c;continue&#x201d; indications reflect that the steps presented can optionally be incorporated in or otherwise used in conjunction with other routines. In this context, &#x201c;start&#x201d; indicates the beginning of the first step presented and may be preceded by other activities not specifically shown. Further, the &#x201c;continue&#x201d; indication reflects that the steps presented may be performed multiple times and/or may be succeeded by other activities not specifically shown. Further, while a flow diagram indicates a particular ordering of steps, other orderings are likewise possible provided that the principles of causality are maintained.</p><p id="p-0085" num="0084">The one or more embodiments are used herein to illustrate one or more aspects, one or more features, one or more concepts, and/or one or more examples. A physical embodiment of an apparatus, an article of manufacture, a machine, and/or of a process may include one or more of the aspects, features, concepts, examples, etc. described with reference to one or more of the embodiments discussed herein. Further, from figure to figure, the embodiments may incorporate the same or similarly named functions, steps, modules, etc. that may use the same or different reference numbers and, as such, the functions, steps, modules, etc. may be the same or similar functions, steps, modules, etc. or different ones.</p><p id="p-0086" num="0085">Unless specifically stated to the contra, signals to, from, and/or between elements in a figure of any of the figures presented herein may be analog or digital, continuous time or discrete time, and single-ended or differential. For instance, if a signal path is shown as a single-ended path, it also represents a differential signal path. Similarly, if a signal path is shown as a differential path, it also represents a single-ended signal path. While one or more particular architectures are described herein, other architectures can likewise be implemented that use one or more data buses not expressly shown, direct connectivity between elements, and/or indirect coupling between other elements as recognized by one of average skill in the art.</p><p id="p-0087" num="0086">The term &#x201c;module&#x201d; is used in the description of one or more of the embodiments. A module implements one or more functions via a device such as a processor or other processing device or other hardware that may include or operate in association with a memory that stores operational instructions. A module may operate independently and/or in conjunction with software and/or firmware. As also used herein, a module may contain one or more sub-modules, each of which may be one or more modules.</p><p id="p-0088" num="0087">As may further be used herein, a computer readable memory includes one or more memory elements. A memory element may be a separate memory device, multiple memory devices, or a set of memory locations within a memory device. Such a memory device may be a read-only memory, random access memory, volatile memory, non-volatile memory, static memory, dynamic memory, flash memory, cache memory, and/or any device that stores digital information. The memory device may be in a form a solid state memory, a hard drive memory, cloud memory, thumb drive, server memory, computing device memory, and/or other physical medium for storing digital information.</p><p id="p-0089" num="0088">While particular combinations of various functions and features of the one or more embodiments have been expressly described herein, other combinations of these features and functions are likewise possible. The present disclosure is not limited by the particular examples disclosed herein and expressly incorporates these other combinations.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprises:<claim-text>receiving a data segment;</claim-text><claim-text>encoding the data segment into a set of encoded data slices via a dispersed error encoding, wherein the data segment is reconstructable from a decode threshold number of encoded data slices of the set of encoded data slices;</claim-text><claim-text>storing, in storage nodes of a storage network, the set of encoded data slices;</claim-text><claim-text>receiving system-level message processing parameters regarding system messages corresponding to the storage nodes;</claim-text><claim-text>generating system messages, in accordance with the system-level message processing parameters, the system messages including status information, performance information and alarms, each having one of a plurality of priorities, wherein the generating includes:<claim-text>generating a first message of the system messages corresponding to a first of the storage nodes based on the system-level message processing parameters, the first message including a first alarm of the alarms having a first message priority of the plurality of priorities; and</claim-text><claim-text>generating a second message of the system messages corresponding to a second of the storage nodes based on the system-level message processing parameters, the second message including a second alarm of the alarms having a second message priority of the plurality of priorities;</claim-text></claim-text><claim-text>sending the first message of the system messages in accordance with the first message priority; and</claim-text><claim-text>sending the second message of the system messages in accordance with the second message priority.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>updating the first message priority based on status of processing the system messages.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>updating the second message priority based on the status of processing the system messages.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein system messages further include write messages to write the set of encoded data slices to the storage network.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:<claim-text>determining when a write threshold number of the write messages have been sent to the storage network; and</claim-text><claim-text>when the write threshold number of the write messages have been sent and the first message has not yet been sent, reducing the first message priority.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising:<claim-text>determining when the write threshold number of the write messages have been successfully processed by the storage network; and</claim-text><claim-text>when the write threshold number of the write messages have been successfully processed and the first message has not yet been sent, further reducing the first message priority.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:<claim-text>determining that a write threshold number of the write messages have not been sent to the storage network within a given time period; and</claim-text><claim-text>when the write threshold number of the write messages have not been sent in the given time period and the first message has not yet been sent within the given time period, increasing the first message priority.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:<claim-text>determining when a write threshold number of the write messages have not been successfully processed by the storage network within a given time period; and</claim-text><claim-text>when the write threshold number of the write messages have not been successfully processed within the given time period and the first message has not yet been sent, increasing the first message priority.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the system messages further include read messages to read the set of encoded data slices from the storage network.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>determining when the decode threshold number of the read messages have been sent to the storage network; and</claim-text><claim-text>when the decode threshold number of the read messages have been sent and the first message has not yet been sent, reducing the first message priority.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:<claim-text>determining when the decode threshold number of the read messages have been successfully processed by the storage network; and</claim-text><claim-text>when the decode threshold number of the read messages have been successfully processed and the first message has not yet been sent, further reducing the first message priority.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>determining when the decode threshold number of the read messages have not been sent to the storage network within a given time period; and</claim-text><claim-text>when the decode threshold number of the read messages have not been sent within the given time period and the first message has not yet been sent in the given time period, increasing the first message priority.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>determining when the decode threshold number of the read messages have not been successfully processed by the storage network within a given time period; and</claim-text><claim-text>when the decode threshold number of the read messages have not been successfully processed within the given time period and the first message has not yet been sent, increasing the first message priority.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the system-level message processing parameters are determined by:<claim-text>for a first set of messages of the system messages, determining at least one of: a current status of sending the first set of messages, and a current status of successfully processing the first set of messages; and</claim-text><claim-text>for a second set of messages of the system messages, determining at least one of: a current status of sending the second set of messages, and a current status of successfully processing the second set of messages.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining a number of sets of the system messages that involve the first of the storage nodes;</claim-text><claim-text>determining status of sending messages of the number of sets of the system messages to the first of the storage nodes;</claim-text><claim-text>determining status of successfully processed messages of the number of sets of the system messages by the the first of the storage nodes; and</claim-text><claim-text>determining message processing status of the first of the storage nodes based on the status of sending messages and the status of successfully processed messages.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first message priority is determined by:<claim-text>determining a number of sets of the system messages that involves the first of the storage nodes;</claim-text><claim-text>interpreting the system-level message processing parameters regarding the number of sets that involve the first of the storage nodes to produce interpreted system-level message processing parameters;</claim-text><claim-text>interpreting the message processing status of the first of the storage nodes regarding the number of sets that involve the first of the storage nodes to produce interpreted message processing status; and</claim-text><claim-text>applying a load balancing function in accordance the interpreted system-level message processing parameters and the interpreted message processing status to produce the first message priority.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A system comprising:<claim-text>a communications interface;</claim-text><claim-text>a memory; and</claim-text><claim-text>a computer processor;</claim-text><claim-text>wherein the memory includes instructions for causing the computer processor to perform operations that include:</claim-text><claim-text>receiving a data segment;</claim-text><claim-text>encoding the data segment into a set of encoded data slices via a dispersed error encoding, wherein the data segment is reconstructable from a decode threshold number of encoded data slices of the set of encoded data slices;</claim-text><claim-text>storing, in storage nodes of a storage network, the set of encoded data slices;</claim-text><claim-text>receiving system-level message processing parameters regarding system messages corresponding to the storage nodes;</claim-text><claim-text>generating system messages, in accordance with the system-level message processing parameters, the system messages including status information, performance information and alarms, each having one of a plurality of priorities, wherein the generating includes:<claim-text>generating a first message of the system messages corresponding to a first of the storage nodes based on the system-level message processing parameters, the first message including a first alarm of the alarms having a first message priority of the plurality of priorities; and</claim-text><claim-text>generating a second message of the system messages corresponding to a second of the storage nodes based on the system-level message processing parameters, the second message including a second alarm of the alarms having a second message priority of the plurality of priorities;</claim-text></claim-text><claim-text>sending the first message of the system messages in accordance with the first message priority; and</claim-text><claim-text>sending the second message of the system messages in accordance with the second message priority.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein system messages further include write messages to write the set of encoded data slices to the storage network.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein system messages further include read messages to read the set of encoded data slices from the storage network.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the operations further include:<claim-text>updating the first message priority based on status of processing the system messages.</claim-text></claim-text></claim></claims></us-patent-application>