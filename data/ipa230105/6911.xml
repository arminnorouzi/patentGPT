<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006912A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006912</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17368439</doc-number><date>20210706</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>RO</country><doc-number>A 2021 10035</doc-number><date>20210702</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>12</main-group><subgroup>26</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>50</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>0427</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">METHODS, SYSTEMS, AND COMPUTER READABLE MEDIA FOR NETWORK TRAFFIC GENERATION USING MACHINE LEARNING</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Keysight Technologies, Inc.</orgname><address><city>Santa Rosa</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant><us-applicant sequence="01" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>KEYSIGHT TECHNOLOGIES RO SRL</orgname><address><city>BUCHAREST</city><country>RO</country></address></addressbook><residence><country>RO</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Liu</last-name><first-name>Winston Wencheng</first-name><address><city>Woodland Hills</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Mihailescu</last-name><first-name>Dan</first-name><address><city>Mogosoaia</city><country>RO</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Stan</last-name><first-name>Razvan Ionut</first-name><address><city>Agoura Hills</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Ameling</last-name><first-name>Thomas</first-name><address><city>Woodland Hills</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Methods, systems, and computer readable media for network traffic generation using machine learning. An example method includes collecting first traffic from a production data center environment. At least a portion of the first traffic comprises live computer network traffic transiting the production data center environment. The method includes collecting second traffic from an emulated data center testbed device. At least a portion of the second traffic comprises testbed traffic that transits an emulated data center switching fabric of the emulated data center testbed device. The method includes training a traffic generation inference engine using the first traffic and the second traffic.</p><p id="p-0002" num="0000">The method includes generating, using the traffic generation inference engine, test traffic to test or stimulate a network system under test (SUT).</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="101.01mm" wi="158.75mm" file="US20230006912A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="172.47mm" wi="169.25mm" orientation="landscape" file="US20230006912A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="226.65mm" wi="172.80mm" orientation="landscape" file="US20230006912A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="207.26mm" wi="171.03mm" orientation="landscape" file="US20230006912A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="183.56mm" wi="171.03mm" orientation="landscape" file="US20230006912A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="212.43mm" wi="140.12mm" orientation="landscape" file="US20230006912A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="181.86mm" wi="138.01mm" orientation="landscape" file="US20230006912A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="175.43mm" wi="51.14mm" orientation="landscape" file="US20230006912A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="181.86mm" wi="138.01mm" orientation="landscape" file="US20230006912A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="196.34mm" wi="145.54mm" file="US20230006912A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">PRIORITY CLAIM</heading><p id="p-0003" num="0001">This application claims the priority benefit of Romanian Patent Application Serial Number a 2021 10035, filed Jul. 2, 2021, the disclosure of which is incorporated herein by reference in its entirety.</p><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0004" num="0002">The subject matter described herein relates to network testing. More specifically, the subject matter relates to methods, systems, and computer readable media for network traffic generation using machine learning.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0005" num="0003">Data center environments typically provide high reliability and security and typically include networked resources (e.g., virtual or physical servers connected via network switches) sharable by multiple clients of the data center operator. Large data centers are industrial scale operations using as much electricity as a small town. Various data centers may utilize virtualization.</p><p id="p-0006" num="0004">When testing data center equipment, it is important to make sure that testing mimics real world scenarios and conditions. For example, when testing a data center server or related applications, it may be necessary to mimic or emulate resources in the data center. For example, when testing a data center server or related applications, it may be necessary to mimic or emulate a switching fabric or other resources in the data center and to emulate or approximate various equipment or system related states, e.g., by using various test system configurations or settings and/or effecting various impairments.</p><p id="p-0007" num="0005">Accordingly, a need exists for methods, systems, and computer readable media for network traffic generation for stimulating or testing network systems.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0008" num="0006">Methods, systems, and computer readable media for network traffic generation using machine learning. An example method includes collecting first traffic from a production data center environment. At least a portion of the first traffic comprises live computer network traffic transiting the production data center environment. The method includes collecting second traffic from an emulated data center testbed device. At least a portion of the second traffic comprises testbed traffic that transits an emulated data center switching fabric of the emulated data center testbed device. The method includes training a traffic generation inference engine using the first traffic and the second traffic. The method includes generating, using the traffic generation inference engine, test traffic to test or stimulate a network system under test (SUT).</p><p id="p-0009" num="0007">An example system includes at least one processor, memory storing executable instructions for the at least one processor, and a machine learning network traffic generator implemented on the at least one processor. The machine learning network traffic generator is configured for: collecting first traffic from a production data center environment, wherein at least a portion of the first traffic comprises live computer network traffic transiting the production data center environment; collecting second traffic from an emulated data center testbed device, wherein at least a portion of the second traffic comprises testbed traffic that transits an emulated data center switching fabric of the emulated data center testbed device; training a traffic generation inference engine using the first traffic and the second traffic; and generating, using the traffic generation inference engine, test traffic to test or stimulate a network system under test (SUT).</p><p id="p-0010" num="0008">The subject matter described herein may be implemented in software in combination with hardware and/or firmware. For example, the subject matter described herein may be implemented in software executed by a processor. In one example implementation, the subject matter described herein may be implemented using a non-transitory computer readable medium having stored therein computer executable instructions that when executed by the processor of a computer control the computer to perform steps. Example computer readable media suitable for implementing the subject matter described herein include non-transitory devices, such as disk memory devices, chip memory devices, programmable logic devices, field-programmable gate arrays, and application specific integrated circuits. In addition, a computer readable medium that implements the subject matter described herein may be located on a single device or computer platform or may be distributed across multiple devices or computer platforms.</p><p id="p-0011" num="0009">As used herein, the term &#x2018;node&#x2019; refers to a physical computer platform including one or more processors, network interfaces, and memory.</p><p id="p-0012" num="0010">As used herein, each of the terms &#x2018;function&#x2019;, &#x2018;engine&#x2019;, and &#x2018;module&#x2019; refers to hardware, which may also include software and/or firmware, for implementing the feature(s) being described.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0013" num="0011">The subject matter described herein will now be explained with reference to the accompanying drawings of which:</p><p id="p-0014" num="0012"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram illustrating an environment for impairment testing using an impairment device;</p><p id="p-0015" num="0013"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram illustrating an example emulated switching fabric environment usable for network testing;</p><p id="p-0016" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram illustrating example switching topology configuration information;</p><p id="p-0017" num="0015"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram illustrating example port mapping data for mapping emulated switch ports to physical switch ports;</p><p id="p-0018" num="0016"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating an example network environment <b>500</b> for network traffic generation using machine learning;</p><p id="p-0019" num="0017"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates the monitoring of the emulated data center switching fabric environment;</p><p id="p-0020" num="0018"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates machine learning-driven traffic generation;</p><p id="p-0021" num="0019"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is an example deployment &#x26; use case of an emulated switching fabric device; and</p><p id="p-0022" num="0020"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flow diagram of an example method for network traffic generation using machine learning.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0023" num="0021">The subject matter described herein includes methods, systems, and computer readable media for network traffic generation using machine learning. In accordance with some aspects of the subject matter described herein, a test system (e.g., one or more computing platforms, devices, or nodes) may be configured to emulate a switching fabric environment, such as virtual networking resources and/or other data center related resources, by using a switch ASIC resource and/or one or more physical switches. Some embodiments include one or more emulated switches, where an emulated switch is a logically allocated portion of a physical switch ASIC that is made to look like an independent logical switch device to the environment (e.g., a device under test (DUT), a system under test (SUT), or a controller) by using a switch ASIC resource allocator. In some embodiments, the resource allocator is adapted to facilitate collection and reporting of emulated logical switch performance metric information (e.g., emulated logical switch queue depth, emulated logical switch latency, etc.) during a test run or session by a visibility module.</p><p id="p-0024" num="0022"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram illustrating a computing environment <b>100</b> for impairment testing using an impairment device. Computing environment <b>100</b> may include one or more networks and/or one or more computer platforms, nodes, or devices. Computing environment <b>100</b> may include a test system <b>102</b> and/or a SUT <b>118</b>.</p><p id="p-0025" num="0023">Test system <b>102</b> may represent any suitable entity or entities (e.g., one or more computing platforms, nodes, or devices) associated with testing SUT <b>118</b> (e.g., one or more application servers, a network controller, or a NMS). For example, test system <b>102</b> may generate and send traffic to SUT <b>118</b> and/or receive traffic from SUT <b>118</b> and may analyze one or more performance aspects associated with SUT <b>118</b>. SUT <b>118</b> may be any suitable entity or entities (e.g., devices, systems, or platforms) for receiving, processing, forwarding, and/or sending one or more messages (e.g., packets).</p><p id="p-0026" num="0024">In some embodiments, test system <b>102</b> may include a stand-alone tool, a testing device, a network equipment test device or platform, or software executing on one or more processor(s). In some embodiments, test system <b>102</b> may be a single device or node or may be distributed across multiple devices or nodes. In some embodiments, test system <b>102</b> may include one or more modules for performing various test related functions. For example, test system <b>102</b> may include a traffic (e.g., packet) generator for generating test traffic and/or testing related applications (e.g., a test analyzer or test configuration manager) for testing SUT <b>118</b>.</p><p id="p-0027" num="0025">Test system <b>102</b> may include a test controller (TC) <b>104</b>, resource allocator (RA) <b>106</b>, physical ASIC switch(es) <b>108</b>, ports <b>110</b>, testing applications <b>114</b>, and data storage <b>116</b>. TC <b>104</b> may be any suitable entity or entities (e.g., software executing on a processor, a field-programmable gateway array (FPGA), and/or an ASIC, or a combination of software, an FPGA, and/or an ASIC) for performing one or more aspects associated with testing SUT <b>118</b> and/or various aspects thereof. In some embodiments, TC <b>104</b> may be implemented using one or more processors and/or memory. For example, TC <b>104</b> may utilize one or more processors (e.g., executing software stored in memory) to generate traffic patterns or scenarios for various message streams (e.g., flows or sessions). In another example, TC <b>104</b> may also utilize one or more processors to perform or initiate various tests and/or analyses involving test packets and/or related responses from SUT <b>118</b>. In this example, TC <b>104</b> may send instructions to various modules or entities, e.g., testing applications <b>114</b>, in test system <b>102</b> for controlling (e.g., to pause, (re)start, or stop) a test session.</p><p id="p-0028" num="0026">In some embodiments, TC <b>104</b> may utilize out-of-band and/or in-band ports and/or interfaces for communicating with entities of test system <b>102</b>. For example, in embodiments where TC <b>104</b> is external to RA <b>106</b>, TC <b>104</b> may communicate with RA <b>106</b> via a management port or related interface.</p><p id="p-0029" num="0027">In some embodiments, TC <b>104</b> may interact with one or more testing applications <b>114</b>. Testing applications <b>114</b> may represent software for configuring test system <b>102</b> or portions thereof. In some embodiments, testing applications <b>114</b> can include, but are not limited to, visibility applications, SDN controller applications, GUI and CLI applications, and test traffic generation applications for communicating with SUT <b>118</b> and/or an emulated switching fabric environment implemented using ASIC switch(es) <b>108</b>.</p><p id="p-0030" num="0028">In some embodiments, test system <b>102</b> or aspects thereof may be controlled or defined using one or more user-definable data models. For example, test system <b>102</b> may provide a GUI to allow a user to configure or modify a switch ASIC resource allocator model, a switching model, a data center emulation or switching topology model, a traffic generator model, a network visibility model, etc. In this example, high-level or user-definable data models may be converted into lower-level data models or into computer readable instructions for implementing the user-definable data models, e.g., implementing a data center emulation model on ASIC switch(es) <b>108</b>.</p><p id="p-0031" num="0029">In some embodiments, testing applications <b>114</b> may include or utilize one or more user interfaces for receiving settings and/or configuration information for setting up a testing scenario or a related test session. For example, a user interface may include any interface usable by one or more types of user (e.g., a human or another entity like an application, a machine, or a device) to interact with test system <b>102</b> or related entities. In some embodiments, one or more user interfaces may support automation e.g., via one or more programming languages (e.g., python), a representation state transfer (REST) API, a remote procedure call API (e.g., gRPC API), a command line interface (CLI), a machine-to-machine (M2M) automation interface, and/or a web based GUI. For example, a test operator may use a web browser to interact with a web based GUI associated with TC <b>104</b> and/or testing applications <b>114</b> for programming or configuring one or more aspects for testing SUT <b>118</b>. In another example, a network controller may utilize a M2M automation interface for programming or configuring one or more aspects for testing SUT <b>118</b>.</p><p id="p-0032" num="0030">In some embodiments, testing applications <b>114</b> may include or utilize a GUI or other user interface for selecting and/or configuring emulated switching fabric environments and/or other related settings (e.g., test reporting and/or network visibility settings). For example, testing applications <b>114</b> may include a web based GUI for obtaining a test operator or another entity's intent for setting up or configuring testing scenarios and/or related emulated switching fabric environments. In this example, the GUI can be used to visually describe a topology comprising one or more emulated switches and/or to indicate particular physical resources to allocate to each emulated switch. In another example, the GUI can be used to gather test session settings and/or other information.</p><p id="p-0033" num="0031">In some embodiments, from an end user perspective, a test system related user interface may provide and/or receive configuration settings for emulated switches associated with an emulated data center environment. In such embodiments, a user can use the user interface to configure a specific data center environment in which SUT <b>118</b> will operate or interact with and can monitor performance of both SUT <b>118</b> and the performance of the emulated switches that comprise the emulated data center environment.</p><p id="p-0034" num="0032">In some embodiments, testing applications <b>114</b> may include or utilize a traffic generator. For example, a traffic generator may be any suitable entity or entities (e.g., software executing on a processor, an ASIC, an FPGA, or a combination of software, an ASIC, or an FPGA) for performing one or more aspects associated with generating or synthesizing test sessions, test cases, or related test packets. In this example, the traffic generator may be configured to utilize user input and predefined test case templates or related data to generate one or more test cases and/or test sessions.</p><p id="p-0035" num="0033">In some embodiments, testing applications <b>114</b> may include or utilize a reporting module and may be configurable by TC <b>104</b>. For example, a reporting module may be any suitable entity or entities (e.g., software executing on a processor, an ASIC, an FPGA, or a combination of software, an ASIC, or an FPGA) for reporting various information about testing using network visibility functions and/or components(e.g., using virtual or physical probes or network taps). In this example, virtual taps or software may be configured to generate and/or provide switch metrics or other information (e.g., network telemetry, switch and/or link status information, etc.) associated with one or more virtualized switching fabric elements (e.g., emulated switches) of an emulated switching fabric environment. Continuing with this example, the reporting module may generate performance reports or test analysis reports associated with SUT <b>118</b>, e.g., by utilizing the switch metrics or other information associated with packets that pass through or are generated by SUT <b>118</b>.</p><p id="p-0036" num="0034">ASIC switch(es) <b>108</b> may be any suitable entity or entities comprising one or more ASICs (and hardware, firmware, and/or software) for performing one or more functions associated with network switching. For example, ASIC switch(es) <b>108</b> may utilize an ASIC pipeline for performing frame or packet forwarding, e.g., sending a packet received from one port out another port of the switch. In some embodiments, various resources (e.g., lookup tables or match-action tables used for forwarding decisions, traffic manager buffer memory, traffic manager logical queues, etc.) of ASIC switch(es) <b>108</b> may managed and/or allocated to provide virtualized or emulated switches by RA <b>106</b>.</p><p id="p-0037" num="0035">Ports <b>110</b> may include or utilize any suitable entity or entities (e.g., one or more network interface cards (NICs), pluggable jacks, physical processors, transceiver modules, direct-attach cables (DACs) and/or other hardware) for sending or receiving communications. For example, test system <b>102</b> may use one or more multiple ports <b>110</b> (e.g., physical connection ports) for receiving and sending various types of test packets or related data units; such as IP messages, Ethernet frames, Ethernet messages, packet data units (PDUs), datagrams, user datagram protocol (UDP) messages, TCP messages, IP version 4 (v4) messages, IP version 6 (v6) messages, stream control transmission protocol (SCTP) messages, real-time transport protocol (RTP) messages, or reliable data protocol (RDP) messages, messages using a tunneling protocol, and/or other data units.</p><p id="p-0038" num="0036">In some embodiments, ports <b>110</b> may include user traffic ports and management ports. For example, user traffic ports may be associated with processing, sending, and/or receiving test traffic, non-test traffic, and/or in-band management related communications and management ports may be associated with processing, sending, and/or receiving out-of-band management related communications.</p><p id="p-0039" num="0037">In some embodiments, ports <b>110</b> may include multiple port modules or groups of ports for interacting with SUT <b>118</b>. For example, depending on a test operator's configuration settings or a particular test session setup, RA <b>106</b> may allocate a portion of physical resources to each switch that is emulated, where the emulated switches are collectively used to mimic a data center switching fabric. In some embodiments, each emulated switch may be allocated or associated with one or more of ports <b>110</b> and the port association may be static or semi-static (e.g., particular ports may be assigned to an emulated switch for a given test session).</p><p id="p-0040" num="0038">RA <b>106</b> may be any suitable entity or entities (e.g., software executing on a processor, an FPGA, an ASIC, or a combination of software, an FPGA, and/or an ASIC) for performing one or more aspects associated with allocating and managing emulated switches. In some embodiments, RA <b>106</b> may allocate and manage resources of ASIC switch(es) <b>108</b> for providing emulated switches without requiring a custom ASIC pipeline. In some embodiments, RA <b>106</b> can be external or internal to ASIC switch(es) <b>108</b>.</p><p id="p-0041" num="0039">In some embodiments, RA <b>106</b> may utilize one or more management ports or related interfaces for communicating with a controller or related applications (e.g., TC <b>104</b> and/or testing applications <b>114</b>) and/or for communicating with ASIC switch(es) <b>108</b>. For example, TC <b>104</b> or a related application may communicate with RA <b>106</b> via an out-of-band management port or related interface. In this example, RA <b>106</b> may send instructions or other communications to ASIC switch(es) <b>108</b> via another management port or related interface.</p><p id="p-0042" num="0040">In some embodiments, RA <b>106</b> may include a virtual to physical adapter <b>112</b>. Virtual to physical adapter <b>112</b> may be any suitable entity or entities (e.g., software executing on a processor, an FPGA, a ASIC, or a combination of software, an FPGA, and/or an ASIC) for converting and/or translating communications to refer to virtual or physical resources depending on the destination. For example, when requesting information about available switching resources via RA <b>106</b>, testing applications <b>114</b> and/or SUT <b>118</b> may &#x201c;see&#x201d; a set of emulated switches each with a subset of resources instead of ASIC switch(es) <b>108</b>. In this example, virtual to physical adapter <b>112</b> may translate information about virtual resources into information physical resources of a single ASIC switch (e.g., Tomahawk 3) and vice versa so that interacting nodes may remain unaware of the underlying ASIC switch(es) <b>108</b> or related switch resources.</p><p id="p-0043" num="0041">In some embodiments, RA <b>106</b> and/or virtual to physical adapter <b>112</b> may reside between a native device interface and interacting entities (e.g., SUT <b>118</b>, testing applications <b>114</b>, or external devices) and may act as a communications proxy or agent using a virtual interface. For example, SUT <b>118</b> may include a network switch controller that configures switching resources by sending, via a virtual interface associated with RA <b>106</b>, configuration requests for requesting and/or configuring one or more switches. In this example, RA <b>106</b> and/or virtual to physical adapter <b>112</b> may translate the configuration requests received via the virtual interface into one or more corresponding requests for transmission via a native switch interface, where the corresponding requests include commands for configuring appropriate physical resources of underlying ASIC switch(es) <b>108</b>. Further, RA <b>106</b> and/or virtual to physical adapter <b>112</b> may translate switch performance results coming from a native switch interface into virtualized results (e.g., link status or counter values for a physical port &#x2018;60&#x2019; may be changed to values for a virtual port &#x2018;v1&#x2019; on an emulated switch &#x2018;TORSW1&#x2019;) before sending the virtualized results to the network switch controller via the virtual interface.</p><p id="p-0044" num="0042">In some embodiments, RA <b>106</b> and/or virtual to physical adapter <b>112</b> may create, store, and/or use switching fabric emulation data (e.g., physical to virtual port mapping, physical buffers to virtual buffers mapping and resource allocation, etc.) and related policies (e.g., virtual and real port speed, virtual and real throughput, topologies, forwarding rules, classes of service, etc.) for sharing physical switch resources amongst the emulated switches. For example, by using port mapping data and policies stored in data storage <b>116</b>, virtual ports &#x2018;v1&#x2019;, &#x2018;v2&#x2019;, &#x2018;v3&#x2019; on an emulated switch &#x2018;TORSW1&#x2019; may be translated into physical ports &#x2018;60&#x2019;, &#x2018;61&#x2019;, &#x2018;62&#x2019;, respectively. In this example, configuration commands for setting speed of port &#x2018;v1&#x2019; can be translated so that the speed of corresponding physical port &#x2018;60&#x2019; is set. Continuing with this example, to query the statistical counters for virtual port &#x2018;v1&#x2019;, the statistical counters for physical port &#x2018;60&#x2019; may be queried.</p><p id="p-0045" num="0043">In some embodiments, RA <b>106</b> and/or virtual to physical adapter <b>112</b> may utilize a modified proprietary (e.g., vendor) API (e.g., a vendor's software development kit (SDK) or by utilizing a wrapper API that interacts with a vendor API. For example, by using a wrapper API, RA <b>106</b> can manage a virtualized or emulated fleet of switches using off-the-shelf or commodity ASICs with NOSes that utilize a proprietary or vendor API.</p><p id="p-0046" num="0044">In some embodiments, RA <b>106</b> and/or virtual to physical adapter <b>112</b> may utilize a custom adaptor that handles certain applications or functions which may involve a subset of resource management and mapping requirements than a standard switching API. For example, by using a custom adaptor, RA <b>106</b> can manage a virtualized or emulated fleet of switches for certain use cases using off-the-shelf or commodity ASICs.</p><p id="p-0047" num="0045">In some embodiments, test system <b>102</b> or entities thereof (e.g., TC <b>104</b>, testing applications <b>114</b>, and/or RA <b>106</b>) may include functionality for accessing data storage <b>116</b>. Data storage <b>116</b> may be any suitable entity or entities (e.g., a storage device, a non-transitory computer readable medium, or a storage system) for maintaining or storing information related to switching fabric emulation, network testing, or related test analysis. For example, data storage <b>116</b> may include switching fabric emulation data (e.g., physical to virtual port mapping, physical buffers to virtual buffers mapping, etc.) and related policies (e.g., virtual and real port speed, virtual and real throughput, topologies, forwarding rules, classes of service, etc.) for sharing physical switch resources amongst the emulated switches. Data storage <b>116</b> may also include test traffic models, test cases, test session data, topology information for emulated switching fabric environments and/or for SUT <b>118</b>, and/or other information usable for generating performance metrics (e.g., statistics) associated with one or more aspects of SUT <b>118</b>. In some embodiments, data storage <b>116</b> may be located at test system <b>102</b>, another node, or distributed across multiple platforms or devices.</p><p id="p-0048" num="0046"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is for illustrative purposes and that various depicted entities, their locations, and/or their functions described above in relation to <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be changed, altered, added, or removed. For example, a device (e.g., a computer including at least one processor coupled to a memory) may include functionality of TC <b>104</b>, RA <b>106</b>, and testing applications <b>114</b>.</p><p id="p-0049" num="0047"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram illustrating an example emulated switching fabric environment <b>200</b> usable for network testing. Emulated switching fabric environment <b>200</b> may represent an emulated data center environment comprising virtualized switching fabric elements (e.g., emulated switches) for forwarding packets from or to SUT <b>118</b> or other entities. For example, emulated switching fabric environment <b>200</b> may be based on user input and/or predetermined environment templates or data models, e.g., stored in data storage <b>116</b>.</p><p id="p-0050" num="0048">Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, emulated switching fabric environment <b>200</b> may represent a 3-stage Clos switching network comprising different stages of emulated switches, e.g., stage one may include top of rack (TOR) switches (TORSWs) <b>202</b>-<b>208</b>, stage two may include cluster or pod switches (PODSWs) <b>210</b>-<b>212</b>, and stage three may include a spine switch (SPSW) <b>214</b> and may be implemented using RA <b>106</b> and physical resources of one or more ASIC switch(es) <b>108</b>. For example, TORSWs <b>202</b>-<b>208</b> may represent or emulate switches that are connected to multiple servers (e.g., located within a rack or nearby rack), PODSWs <b>210</b>-<b>212</b> may represent or emulate aggregation switches that are connected to multiple TORSWs, and SPSW <b>214</b> may represent or emulate a higher-level aggregation switch that is connected to multiple PODSWs.</p><p id="p-0051" num="0049">In some embodiments, some physical ports of ASIC switch(es) <b>108</b> may be associated with different emulated switches and may utilize loopback interfaces or internal interfaces for emulating communications between some emulated switches, while other emulated switches (e.g., TORSWs <b>202</b>-<b>208</b>) may utilize physical interfaces and/or physical cabling to communicate with SUT <b>118</b> or portions thereof.</p><p id="p-0052" num="0050">In some embodiments, SUT <b>118</b> may represent or include a set of application server groups <b>216</b>-<b>222</b>, each representing one or more servers and/or applications. For example, application server group 1 <b>216</b> may include multiple servers (e.g., 16 or more servers in a single rack), each having one or more connections to a TOR switch. In some examples, a server of application server groups <b>216</b>-<b>222</b> may includes multiple applications or perform different services (e.g., machine learning (M/L), storage offload, search engines, webpages, video streaming, email, etc.) for users or may perform similar services for different sets of users. In some examples, a server of application server groups <b>216</b>-<b>222</b> may act as a client to another server.</p><p id="p-0053" num="0051">In some embodiments, each of application server groups <b>216</b>-<b>222</b> may be connected (e.g., physically cabled) to a different set of physical ports <b>110</b> of test system <b>102</b>, where each set of physical ports <b>110</b> is assigned or allocated to a particular emulated switch. For example, RA <b>106</b> may assign physical ports &#x2018;60&#x2019;, &#x2018;61&#x2019;, and 62&#x2032; to an emulated switch &#x2018;TORSW1&#x2019; and may virtualize those physical ports as &#x2018;v1&#x2019;, &#x2018;v2&#x2019;, and &#x2018;v3&#x2019;, respectively. In this example, applications and/or servers in application server group 1 <b>216</b> may be communicatively coupled to one or more of the virtual ports of the emulated switch &#x2018;TORSW1&#x2019;.</p><p id="p-0054" num="0052"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is for illustrative purposes and that various depicted entities, their locations, and/or their functions described above in relation to <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be changed, altered, added, or removed.</p><p id="p-0055" num="0053"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram illustrating example switching configuration information <b>300</b>. In some embodiments, configuration information <b>300</b> may be accessed and/or stored by TC <b>104</b> and/or RA <b>106</b> using one or more data structures. In some embodiments, configuration information <b>300</b> may include any suitable information for mapping virtual ports associated with emulated switching fabric environment <b>200</b> to physical ports of physical ASIC switch(es) <b>108</b>. In some embodiments, configuration information <b>300</b> may be stored or maintained in data storage <b>116</b> and may be usable for translating port information or related information in switch configuration commands, performance metrics, and/or other communications.</p><p id="p-0056" num="0054">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, configuration information <b>300</b> may be depicted using a table representing associations between a topology identifier (TID) and a corresponding topology description. In some embodiments, a TID may include any suitable identifier, such as one or more numbers or values, usable for identifying a switching topology or emulated switching fabric environment. For example, each switching topology or emulated switching fabric environment provided by a test operator or stored for testing may have a different, unique TID, e.g., 1, 2, 3, and 4, respectively.</p><p id="p-0057" num="0055">In some embodiments, a topology description may include information for describing or defining an emulated switching fabric environment, e.g., emulated switching fabric environment <b>200</b>. For example, a topology description may indicate the type of switching environment including the number of stages, the types and number of emulated switches and ports at each stage, along with various characteristics (e.g., port speeds, link speeds, forwarding rules, throughput limits, etc.) that can be used to emulate or virtualize the switching environment described.</p><p id="p-0058" num="0056">Configuration information <b>300</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref> is for illustrative purposes and that different and/or additional information may also be stored or maintained. Further, configuration information <b>300</b> may be stored in various data structures, memories, media, and/or in one or more locations.</p><p id="p-0059" num="0057"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram illustrating example port mapping data <b>400</b> for mapping virtual ports of emulated switches (e.g., TORSWs <b>202</b>-<b>208</b>) to physical ports of physical ASIC switch(es) <b>108</b>. In some embodiments, port mapping data <b>400</b> may be accessed and/or stored by TC <b>104</b> and/or RA <b>106</b> using one or more data structures. In some embodiments, port mapping data <b>400</b> may include any suitable information for mapping virtual ports associated with emulated switching fabric environment <b>200</b> to physical ports of physical ASIC switch(es) <b>108</b>. In some embodiments, port mapping data <b>400</b> may be stored or maintained in data storage <b>116</b> and may be usable for translating port information or related information in switch configuration commands, performance metrics, and/or other communications.</p><p id="p-0060" num="0058">Referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, port mapping data <b>400</b> may be depicted using a table representing associations between virtual port information and physical port information. For example, each row or association may include a TID, an emulated switch identifier (ESID), a virtual port number, and a corresponding physical switch identifier (PSID) and a physical port number.</p><p id="p-0061" num="0059">In some embodiments, a TID may include any suitable identifier, such as one or more numbers or values, usable for identifying a switching topology or emulated switching fabric environment. For example, a test operator may select a 3-stage Clos network environment with particular characteristics to emulate for a first test session, a 3-stage Clos network environment with different characteristics to emulate for a second test session, a 5-stage Clos network environment with particular characteristics to emulate for a third test session, and a 7-stage Clos network environment with particular characteristics to emulate for a fourth test session. In this example, each switching topology or emulated switching fabric environment may have a different, unique TID, e.g., 1, 2, 3, and 4, respectively.</p><p id="p-0062" num="0060">In some embodiments, an ESID may include any suitable identifier, such as one or more numbers or values, usable for identifying an emulated switch. For example, emulated switching fabric environment <b>200</b> may have seven emulated switches, each switch having a unique name and/or number, e.g., &#x2018;TORSW1&#x2019;, &#x2018;A&#x2019;, &#x2018;234553242&#x2019;, etc. In some embodiments, ESIDs may be unique within a topology or an emulated switching fabric environment. In some embodiments, ESID may be unique amongst multiple (or even all) defined topologies or emulated switching fabric environments.</p><p id="p-0063" num="0061">In some embodiments, a virtual port number may include any suitable identifier, such as one or more numbers or values, usable for identifying a port of an emulated switch. For example, an emulated switch &#x2018;PODSW1&#x2019; of emulated switching fabric environment <b>200</b> may have multiple virtual ports, each having a unique name and/or number at least within that emulated switch, e.g., &#x2018;v1&#x2019;, &#x2018;v2&#x2019;, &#x2018;v3&#x2019;, etc. In some embodiments, virtual port numbers may be unique within a topology or an emulated switching fabric environment. In some embodiments, virtual port numbers may be unique amongst multiple (or even all) defined topologies or emulated switching fabric environments. In some embodiments, an ESID may include any suitable identifier, such as one or more numbers or values, usable for identifying a physical switch, e.g., physical ASIC switch(es) <b>108</b>. For example, test system <b>102</b> may have one or two physical ASIC switch(es) <b>108</b>, each switch having a unique name and/or number, e.g., &#x2018;SW1, &#x2018;A&#x2019;, &#x2018;234553242&#x2019;, etc. In some embodiments, PSIDs may be unique within a test system or network. In some embodiments, ESID may be unique amongst multiple (or even all) networks controlled by an operator or service provider.</p><p id="p-0064" num="0062">In some embodiments, a physical port number may include any suitable identifier, such as one or more numbers or values, usable for identifying a port of physical ASIC switch(es) <b>108</b>. For example, physical ASIC switch(es) <b>108</b> may have multiple physical traffic ports, each having a unique name and/or number at least within each physical switch, e.g., &#x2018;60&#x2019;, &#x2018;61&#x2019;, &#x2018;62&#x2019;, etc. In some embodiments, physical port numbers may be unique within each of physical ASIC switch(es) <b>108</b>. In some embodiments, physical port numbers may be unique amongst multiple (or even all) physical ASIC switch(es) <b>108</b>.</p><p id="p-0065" num="0063">In some embodiments, e.g., where multiple emulated switching fabric environments (e.g., for different test sessions or network configurations) are stored, a TID, an ESID, and a virtual port number may be used as a combination key or value for identifying a corresponding physical switch and port. In some embodiments, e.g., where one emulated switching fabric environment <b>200</b> is stored, an ESID and a virtual port number may be used as a combination key or value for identifying a corresponding physical switch and port. In some embodiments, e.g., where each virtual port number is unique in emulated switching fabric environment <b>200</b>, a virtual port number may be used as a combination key or value for identifying a corresponding physical switch and port.</p><p id="p-0066" num="0064">Port mapping data <b>400</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref> is for illustrative purposes and that different and/or additional information may also be stored or maintained. Further, it will be appreciated that port mapping data <b>400</b> may be stored in various data structures, memories, media, and/or in one or more locations.</p><p id="p-0067" num="0065"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating an example network environment <b>500</b> for network traffic generation using machine learning. A machine learning traffic generator <b>502</b> is implemented on at least one processor <b>504</b> and memory <b>506</b> storing instructions for the processor <b>504</b>. Machine learning traffic generator <b>502</b> includes a traffic collector <b>508</b>, a data set <b>510</b>, an inference engine, and a traffic engine controller <b>514</b>.</p><p id="p-0068" num="0066">In operation, a live production data center <b>516</b> is monitored (e.g., via port mirroring, taps, probes, etc.) to obtain production network traffic information about packets flowing through the production data center environment (e.g., north-south traffic, east-west traffic, etc.). This production traffic information may be comprised of copies of packets flowing within the production data center network and/or flow information (e.g., Netflow records, flow summary records, etc.). Flow information may be generated by constituent components of the monitored production data center network or by external visibility system components (e.g., network packet broker, etc.) deployed within/adjacent to the production data center <b>516</b>.</p><p id="p-0069" num="0067">A SUT <b>518</b> in a lab/testbed setting is adapted to communicate with an emulated data center switching fabric environment <b>520</b>, which is monitored (e.g., via port mirroring, taps, probes, etc.) to obtain testbed network traffic information about packets flowing through the testbed's emulated data center environment (e.g., north-south traffic, east-west traffic, etc.). This testbed information may be comprised of copies of packets flowing within the emulated data center switching fabric and/or flow information (e.g., Netflow records, flow summary records, etc.). Flow information may be generated by components of the emulated data center network (e.g., hardware/software monitoring agents configured within the switching fabric emulator) or by external visibility system components (e.g., network packet broker, etc.) deployed in conjunction with the switching fabric emulation device(s).</p><p id="p-0070" num="0068"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates the monitoring of the emulated data center switching fabric environment. <figref idref="DRAWINGS">FIG. <b>6</b></figref> shows an example emulated switching fabric device <b>600</b>, which is a computing platform (e.g., a stand-alone device or appliance comprising hardware, software, and firmware) configured to emulate one or more switching fabrics. Emulated switching fabric device <b>600</b> may also be configured to perform related functions associated with configuring, controlling, and/or interacting with an emulated switching fabric. For example, emulated switching fabric device <b>600</b> may be configured to emulate a data center switching fabric (e.g., environment <b>200</b>) comprising virtualized switching fabric elements implemented using physical ASIC resources. In this example, emulated switching fabric device <b>600</b> may also include modules and/or software for emulating the data center switching fabric, for performing testing associated with the emulated data center switching fabric, and for monitoring traffic or related test performance associated with the emulated data center switching fabric.</p><p id="p-0071" num="0069">As shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, experimental foreground traffic (A) <b>604</b> flows back and forth between a SUT <b>518</b> and the device <b>600</b> by way of experiment front panel ports <b>602</b>. The traffic is mirrored on experiment mirror ports <b>606</b> to a trainer <b>608</b> for training an inference engine to generate test traffic consisted with the experimental foreground traffic (A). The functions of the trainer <b>608</b> are described further below with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0072" num="0070">The device <b>600</b> may include test traffic generation functionality, which enables the emulation device(s) to source and sink test packets within the emulated switching fabric (e.g., generate/terminate background traffic during execution of a test case). In some embodiments, the device <b>600</b> includes one or more test traffic generator agents, which are adapted to generate test packets/flows associated with the execution of a test case. In some embodiments, a test generator agent may be comprised of hardware/software/firmware located within the device <b>600</b>. In other embodiments, a test generator agent may be deployed/hosted in a cloud environment (e.g., a cloud-hosted native traffic generation agent or app component of the test system, a cloud-hosted 3rd party traffic generation agent or app, etc.).</p><p id="p-0073" num="0071">Referring back to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the monitored data from the production and the testbed environments is sent to traffic collector <b>508</b>. The traffic collector may process the received traffic information to change the format of the traffic information. In one embodiment, the traffic collector may receive copies of packets associated with a flow and in turn generate an associated flow record (e.g., Netflow, etc.). In one embodiment, the traffic collector may implement one or more filters to selectively process subsets of the total traffic which it receives.</p><p id="p-0074" num="0072">For example, traffic collector <b>508</b> may implement a filter that identifies flows associated with a particular type of communication session (e.g., Streaming Video, Voice Call, Web Browsing, etc.) and selectively append this information to a particular/associated data set. Such filters may be used to groom ingress traffic information received at the collector, such that different traffic subsets are tagged and/or stored in different data sets. In some embodiments, a filter may identify and select ingress traffic that is to be discarded.</p><p id="p-0075" num="0073">In another example, traffic collector <b>508</b> may implement sampling functionality, such that only a fraction of the ingress traffic is processed and ultimately stored in a data set(s). In some examples, traffic collector <b>508</b> may be implemented by a suitably configured network packet broker (NPB), or similar network visibility device.</p><p id="p-0076" num="0074">Traffic information received by traffic collector <b>508</b> is stored in one or more data sets <b>510</b>. Data sets <b>510</b> may, for example, be configured to include traffic information (e.g., packet copies, flow records, temporal characteristics, etc.) for certain subsets of traffic (e.g., packets or flow records associated with only a certain end user application, message type, protocol type, etc.). Data sets <b>510</b> may be stored in a cloud storage network or local data store.</p><p id="p-0077" num="0075">At least a portion of the data in data set <b>510</b> may be used to train an inference engine <b>512</b>, such as a neural network or a generative adversarial network (GAN), which is then used to drive test system traffic generators by traffic engine controller <b>514</b>. ML-driven traffic generators associated with the test system can, for example, be used to synthesize/generate background workload traffic in a subsequent test. Such ML-generated background workload test traffic may be used to test/stimulate a DUT/SUT in testbed setting or alternatively to test/stimulate network elements in a live/production environment.</p><p id="p-0078" num="0076"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates machine learning-driven traffic generation. A trained inference engine for experimental foreground traffic (A) <b>702</b> is used to generate an experimental foreground traffic profile (A) <b>704</b>.</p><p id="p-0079" num="0077"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is an example deployment &#x26; use case of an emulated switching fabric device <b>800</b>. As shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, a previously learned (machine learned), first traffic workload profile (A) is used in the creation of a second traffic workload profile (B). Experimental foreground traffic (B) <b>804</b> flows into the device <b>800</b> by way of experiment front panel ports. An instance of traffic (A) profile as background is used to provide traffic to background front panel ports <b>806</b>. Experiment mirror ports <b>810</b> are used to mirror traffic to a machine learning trainer <b>812</b> for experimental foreground traffic (B) observed.</p><p id="p-0080" num="0078">In this case, a ML-driven traffic generator is adapted to direct test traffic into a testbed environment. Additional traffic generated by either a testbed environment-based DUT/SUT or a production environment-based DUT/SUT is simultaneously fed into the emulated switching fabric. Monitored traffic is then collected and used to train/construct/refine another GAN traffic generation profile/model.</p><p id="p-0081" num="0079"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flow diagram of an example method <b>900</b> for network traffic generation using machine learning. The method <b>900</b> may be performed by the machine learning traffic generator <b>502</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref> or by any appropriate network computing device.</p><p id="p-0082" num="0080">The method <b>900</b> includes collecting first traffic from a production data center environment. At least a portion of the first traffic comprises live computer network traffic transiting the production data center environment. Collecting first traffic from the production data center environment can include, e.g., collecting copies of packets flowing within the production data center environment, collecting flow information of network flows within the production data center environment, or both.</p><p id="p-0083" num="0081">The method <b>900</b> includes collecting second traffic from an emulated data center testbed device. At least a portion of the second traffic comprises testbed traffic that transits an emulated data center switching fabric of the emulated data center testbed device. The emulated data center testbed device can include physical application-specific integrated circuit (ASIC) switching resources, and the emulated data center switching fabric can include virtualized data center switching fabric elements.</p><p id="p-0084" num="0082">Collecting second traffic from the emulated data center testbed device can include, e.g., collecting copies of a plurality of packets flowing within the emulated data center testbed device, collecting flow information of a plurality of network flows within the emulated data center testbed device, or both. Collecting second traffic from the emulated data center testbed device can include generating, by the emulated data center testbed device, synthetic traffic to source and sink a plurality of test packets within the emulated data center testbed device.</p><p id="p-0085" num="0083">Collecting the first traffic and collecting the second traffic comprises identifying one or more flows associated with a type of communication session and storing the type of communication session with one or more flow records for the one or more flows.</p><p id="p-0086" num="0084">The method <b>900</b> includes training a traffic generation inference engine using the first traffic and the second traffic. Training the traffic generation inference engine using the first traffic and the second traffic can include training a neural network or a generative adversarial network (GAN). Training does not necessarily require both traffic inputs from real and emulated data centers. Training can be carried out with real data center traffic or traffic injected by the user in the emulated data center or both.</p><p id="p-0087" num="0085">The method <b>900</b> includes generating, using the traffic generation inference engine, test traffic to test or stimulate a network system under test (SUT). Generating test traffic to test or stimulate the SUT can include transmitting the test traffic to the SUT in a testbed setting or to the SUT in a live production environment.</p><p id="p-0088" num="0086">It will be understood that various details of the subject matter described herein may be changed without departing from the scope of the subject matter described herein. Furthermore, the foregoing description is for the purpose of illustration only, and not for the purpose of limitation, as the subject matter described herein is defined by the claims as set forth hereinafter.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for network traffic generation using machine learning, the method comprising:<claim-text>collecting first traffic from a production data center environment, wherein at least a portion of the first traffic comprises live computer network traffic transiting the production data center environment;</claim-text><claim-text>collecting second traffic from an emulated data center testbed device, wherein at least a portion of the second traffic comprises testbed traffic that transits an emulated data center switching fabric of the emulated data center testbed device;</claim-text><claim-text>training a traffic generation inference engine using the first traffic and the second traffic; and</claim-text><claim-text>generating, using the traffic generation inference engine, test traffic to test or stimulate a network system under test (SUT).</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the emulated data center testbed device comprises physical application-specific integrated circuit (ASIC) switching resources, and wherein the emulated data center switching fabric comprises virtualized data center switching fabric elements.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein collecting first traffic from the production data center environment comprises collecting copies of a plurality of packets flowing within the production data center environment.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein collecting first traffic from the production data center environment comprises collecting flow information of a plurality of network flows within the production data center environment.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein collecting second traffic from the emulated data center testbed device comprises collecting copies of a plurality of packets flowing within the emulated data center testbed device.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein collecting second traffic from the emulated data center testbed device comprises collecting flow information of a plurality of network flows within the emulated data center testbed device.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein collecting second traffic from the emulated data center testbed device comprises generating, by the emulated data center testbed device, synthetic traffic to source and sink a plurality of test packets within the emulated data center testbed device.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein collecting the first traffic and collecting the second traffic comprises identifying one or more flows associated with a type of communication session and storing the type of communication session with one or more flow records for the one or more flows.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein training a traffic generation inference engine using the first traffic and the second traffic comprises training a neural network or a generative adversarial network (GAN).</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating test traffic to test or stimulate the SUT comprises transmitting the test traffic to the SUT in a testbed setting or to the SUT in a live production environment.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A system for network traffic generation using machine learning, the system comprising:<claim-text>at least one processor and memory storing executable instructions for the at least one processor; and</claim-text><claim-text>a machine learning network traffic generator implemented on the at least one processor and configured for:<claim-text>collecting first traffic from a production data center environment, wherein at least a portion of the first traffic comprises live computer network traffic transiting the production data center environment;</claim-text><claim-text>collecting second traffic from an emulated data center testbed device, wherein at least a portion of the second traffic comprises testbed traffic that transits an emulated data center switching fabric of the emulated data center testbed device;</claim-text><claim-text>training a traffic generation inference engine using the first traffic and the second traffic; and</claim-text><claim-text>generating, using the traffic generation inference engine, test traffic to test or stimulate a network system under test (SUT).</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the emulated data center testbed device comprises physical application-specific integrated circuit (ASIC) switching resources, and wherein the emulated data center switching fabric comprises virtualized data center switching fabric elements.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein collecting first traffic from the production data center environment comprises collecting copies of a plurality of packets flowing within the production data center environment.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein collecting first traffic from the production data center environment comprises collecting flow information of a plurality of network flows within the production data center environment.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein collecting second traffic from the emulated data center testbed device comprises collecting copies of a plurality of packets flowing within the emulated data center testbed device.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein collecting second traffic from the emulated data center testbed device comprises collecting flow information of a plurality of network flows within the emulated data center testbed device.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein collecting second traffic from the emulated data center testbed device comprises generating, by the emulated data center testbed device, synthetic traffic to source and sink a plurality of test packets within the emulated data center testbed device.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein collecting the first traffic and collecting the second traffic comprises identifying one or more flows associated with a type of communication session and storing the type of communication session with one or more flow records for the one or more flows.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein training a traffic generation inference engine using the first traffic and the second traffic comprises training a neural network or a generative adversarial network (GAN).</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein generating test traffic to test or stimulate the SUT comprises transmitting the test traffic to the SUT in a testbed setting or to the SUT in a live production environment.</claim-text></claim></claims></us-patent-application>