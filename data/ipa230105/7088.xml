<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007089A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007089</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17722677</doc-number><date>20220418</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>142</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>70</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>0806</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>141</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20200101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>16</class><subclass>Y</subclass><main-group>10</main-group><subgroup>75</subgroup><symbol-position>L</symbol-position><classification-value>N</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>142</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>82</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>0806</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>141</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>16</class><subclass>Y</subclass><main-group>10</main-group><subgroup>75</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">DEVICE MANAGEMENT SERVICES BASED ON RESTFUL MESSAGING</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16637650</doc-number><date>20200207</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11316932</doc-number></document-id></parent-grant-document><parent-pct-document><document-id><country>WO</country><doc-number>PCT/US2018/052265</doc-number><date>20180921</date></document-id></parent-pct-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17722677</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62562201</doc-number><date>20170922</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62569326</doc-number><date>20171006</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62571657</doc-number><date>20171012</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Intel Corporation</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Smith</last-name><first-name>Ned M.</first-name><address><city>Beaverton</city><state>OR</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Various systems and methods of establishing and utilizing device management (DM) services in Internet of Things (IoT) networks and similar distributed network architectures, are described. In an example, RESTful messaging within IoT operational and resource models are used to establish, instantiate, and operate DM services having various roles within an IoT framework abstraction.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="140.72mm" wi="150.88mm" file="US20230007089A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="204.72mm" wi="152.91mm" file="US20230007089A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="221.15mm" wi="148.17mm" orientation="landscape" file="US20230007089A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="195.83mm" wi="152.74mm" file="US20230007089A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="206.42mm" wi="134.96mm" orientation="landscape" file="US20230007089A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="218.95mm" wi="162.31mm" file="US20230007089A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="229.70mm" wi="155.19mm" file="US20230007089A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="236.14mm" wi="141.65mm" file="US20230007089A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="236.98mm" wi="144.95mm" file="US20230007089A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="217.34mm" wi="149.78mm" file="US20230007089A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="240.88mm" wi="142.75mm" orientation="landscape" file="US20230007089A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="238.68mm" wi="148.34mm" orientation="landscape" file="US20230007089A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="235.12mm" wi="154.69mm" orientation="landscape" file="US20230007089A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="242.15mm" wi="151.81mm" orientation="landscape" file="US20230007089A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="217.34mm" wi="152.15mm" file="US20230007089A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="170.43mm" wi="162.14mm" file="US20230007089A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="203.71mm" wi="152.15mm" file="US20230007089A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">PRIORITY CLAIM</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 16/637,650, filed Feb. 7, 2020, which is a U.S. National Stage Application under 35 U.S.C. 371 from International Application No. PCT/US2018/052265, filed Sep. 21, 2018, published as WO 2019/060758, which claims the benefit of priority to United States Provisional Patent Application Ser. No. 62/571,657, filed Oct. 12, 2017 and titled &#x201c;DEVICE MANAGEMENT SERVICES BASED ON RESTFUL MESSAGING&#x201d;, 62/569,326, filed Oct. 6, 2017, and titled &#x201c;REPRESENTATIONS AND INTERACTIONS WITH ARRAYS OF INTERNET OF THINGS (IOT) RESOURCES&#x201d;, and 62/562,201, filed Sep. 22, 2017, and titled &#x201c;REPRESENTATIONS AND INTERACTIONS WITH ARRAYS OF INTERNET OF THINGS (IOT) RESOURCES&#x201d;; the above-identified applications are incorporated herein by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">Embodiments described herein generally relate to interconnected device networks, and in particular, to techniques for establishing connections and implementing functionality among internet of things (IoT) devices and device networks.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">IoT devices are physical or virtualized objects that may communicate on a network, and may include sensors, actuators, and other input/output components, such as to collect data or perform actions from a real-world environment. For example, IoT devices may include low-powered devices that are embedded or attached to everyday things, such as buildings, vehicles, packages, etc., to provide an additional level of artificial sensory perception of those things. Recently, IoT devices have become more popular and thus applications using these devices have proliferated.</p><p id="p-0005" num="0004">Various standards have been proposed to more effectively interconnect and operate IoT devices and IoT network use cases. These include the specialization of communication standards distributed by groups such as Institute of Electrical and Electronics Engineers (IEEE), and the specialization of application interaction architecture and configuration standards distributed by groups such as the Open Connectivity Foundation (OCF).</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0006" num="0005">In the drawings, which are not necessarily drawn to scale, like numerals may describe similar components in different views. Like numerals having different letter suffixes may represent different instances of similar components. Some embodiments are illustrated by way of example, and not limitation, in the figures of the accompanying drawings in which:</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a domain topology for respective internet-of-things (IoT) networks coupled through links to respective gateways, according to an example;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a cloud computing network in communication with a mesh network of IoT devices operating as a fog device or platform connected with a cloud computing network, according to an example;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a flowchart of an example method for device management (DM) service instantiation, according to an example;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a deployment of a device management service instantiation model, according to an example;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIGS. <b>5</b>A-<b>5</b>D</figref> illustrates a listing of resources and companion resources for onboarding, credential management, and access management service operations, according to an example;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a flowchart of a method for establishing a device management (DM) service configuration in a device network, according to an example;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an overview use of a client-server architecture configured for representing an array of resources, according to an example;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a management use of a client-server architecture configured for representing an array of resources, according to an example;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIGS. <b>9</b>A and <b>9</b>B</figref> illustrate processing flows of client commands used with an array of resources, according to an example;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates a flowchart of a method for device resource management, usable with implementations of an array of resources, according to an example;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a block diagram of a network illustrating communications among a number of IoT devices, according to an example; and</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a block diagram for an example IoT processing system architecture upon which any one or more of the techniques (e.g., operations, processes, methods, and methodologies) discussed herein may be performed.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0019" num="0018">In the following description, methods, configurations, and related apparatuses are disclosed for establishing and utilizing a resource model to define device management (DM) services within an IoT framework. The approaches discussed herein establish improvements to IoT resource model abstraction, such as to allow definition and use of such DM services based on RESTful messaging and similar stateless operations. The approaches discussed herein also enable IoT device management through use of an IoT DM services data model that utilizes core device definition building blocks. As discussed herein, DM services may be operated in the fashion of another IoT device that additionally may be dynamically provisioned with device management services; with the provisioning of DM services itself being operable as a DM service.</p><p id="p-0020" num="0019">As discussed herein, the present techniques and configurations provide improvements for a variety of IoT device management and network operation use cases. This results in a number of technical benefits, including the clear definition of the behavior, duties, and capabilities for DM services such as in an implementation of an onboarding, access management, or credential management service. Further, the service abstraction discussed herein may be utilized for building and instantiating multiple DM services and types of DM services.</p><p id="p-0021" num="0020">In the examples provided with reference to an OCF network implementation, a DM service abstraction allows multiple services in a domain to be built, instantiated, and controlled, in the same manner as a OCF device. The deployment of a DM service in a resource model abstraction also provides a life cycle wrapped around the DM service, to allow an instance of the DM service to be dynamically brought into operation, used for useful operations, and transitioned to another instance of the DM service if the instance fails. With use of this resource model abstraction, a variety of DM services may be launched and operated with CRUD RESTful commands such as CREATE, UPDATE, or DELETE.</p><p id="p-0022" num="0021">As discussed herein, device management that is both specific and generic (stereotyped) to a device may be dynamically created or removed, with the same ease of use and flexibility that an IoT device may be instantiated/de-instantiated according to an IoT framework data model (such as a conventional OCF data model). Various approaches are also disclosed for establishing a &#x201c;subordinate&#x201d; type of DM service, and utilizing a &#x201c;superior&#x201d; DM service, as defined in an IoT framework data model (e.g., the OCF Resource model) where the service function is abstracted from a set of resources and actions.</p><p id="p-0023" num="0022">Additionally, methods, configurations, and related apparatuses are disclosed for establishing and utilizing groups of resources through the dynamic instantiation of resources within an IoT framework. The approaches discussed herein establish improvements to IoT resource model abstraction, to create sets or arrays of devices, device resources, or other objects programmatically, even though the corresponding physical device may be in a different network or may not exist at all. The approaches discussed herein also enable the representation of a service or a service action, including a specific DM service or service action, through a collection of device actions. This allows complex sequences of actions or transactions to accomplish a particular task among such sets or arrays of devices.</p><p id="p-0024" num="0023">As discussed herein, the resource grouping techniques provide improvements for a variety of IoT resource management and network operation use cases. This provides a number of benefits, including greater flexibility for cloud, gateway, data center, and IoT device management entities to utilize networks of IoT devices, aggregations of IoT devices, resources and proxy resources, and even &#x201c;ghost&#x201d; resources, which are hosted away from the native or physical device. As discussed herein, this approach may be implemented while allowing object model interface definitions to behave as expected. As a result, network interface access may be multiplexed across the sub-resources of the set or array object as if these resources were directly connected to the IoT network.</p><p id="p-0025" num="0024">Further, various operational models are disclosed to establish arrays (e.g., sets, groups, collections) of devices within an IoT framework abstraction. In these operational models, the parent resource of the child resources in the array may be established yet remain hidden from the IoT object abstraction. Hence, there need not be object model interface definitions&#x2014;normally a required element of device definition. As a result, abstract devices may be more easily created to assemble device data from among sets of similar resources aggregated over many physical devices and resources. Utilization of such devices assists with improved IoT analytics, replication, availability and continuity, among other operational benefits.</p><p id="p-0026" num="0025">These and other benefits of the presently disclosed approaches within standardized network implementations and similar IoT network settings will be apparent from the following disclosure.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example domain topology for respective IoT networks coupled through links to respective gateways. The IoT supports deployments in which a large number of computing devices are interconnected to each other (and to the Internet) to provide functionality and data acquisition at very low levels. Thus, as used herein, an IoT device may include a semiautonomous device performing a function, such as sensing or control, among others, in communication with other IoT devices and a wider network, such as the Internet.</p><p id="p-0028" num="0027">Often, IoT devices are limited in memory, size, or functionality, allowing larger numbers to be deployed for a similar cost to smaller numbers of larger devices. However, an IoT device may be a smart phone, laptop, tablet, or PC, or other larger device. Further, an IoT device may be a virtual device, such as an application on a smart phone or other computing device. IoT devices may include IoT gateways, used to couple IoT devices to other IoT devices and to cloud applications, for data storage, process control, and the like.</p><p id="p-0029" num="0028">Networks of IoT devices may include commercial and home automation devices, such as water distribution systems, electric power distribution systems, pipeline control systems, plant control systems, light switches, thermostats, locks, cameras, alarms, motion sensors, and the like. The IoT devices may be accessible through remote computers, servers, and other systems, for example, to control systems or access data.</p><p id="p-0030" num="0029">The future growth of the Internet and like networks may involve very large numbers of IoT devices. Accordingly, in the context of the techniques discussed herein, a number of innovations for such future networking will address the need for all these layers to grow unhindered, to discover and make accessible connected resources, and to support the ability to hide and compartmentalize connected resources. Any number of network protocols and communications standards may be used, wherein each protocol and standard is designed to address specific objectives. Further, the protocols are part of the fabric supporting human accessible services that operate regardless of location, time or space. The innovations include service delivery and associated infrastructure, such as hardware and software; security enhancements; and the provision of services based on Quality of Service (QoS) terms specified in service level and service delivery agreements. As will be understood, the use of IoT devices and networks, such as those introduced in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref>, present a number of new challenges in a heterogeneous network of connectivity comprising a combination of wired and wireless technologies.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>1</b></figref> specifically provides a simplified drawing of a domain topology that may be used for a number of IoT networks comprising IoT devices <b>104</b>, with the IoT networks <b>156</b>, <b>158</b>, <b>160</b>, <b>162</b>, coupled through backbone links <b>102</b> to respective gateways <b>154</b>. For example, a number of IoT devices <b>104</b> may communicate with a gateway <b>154</b>, and with each other through the gateway <b>154</b>. To simplify the drawing, not every IoT device <b>104</b>, or communications link (e.g., link <b>116</b>, <b>122</b>, <b>128</b>, or <b>132</b>) is labeled. The backbone links <b>102</b> may include any number of wired or wireless technologies, including optical networks, and may be part of a local area network (LAN), a wide area network (WAN), or the Internet. Additionally, such communication links facilitate optical signal paths among both IoT devices <b>104</b> and gateways <b>154</b>, including the use of MUXing/deMUXing components that facilitate interconnection of the various devices.</p><p id="p-0032" num="0031">The network topology may include any number of types of IoT networks, such as a mesh network provided with the network <b>156</b> using Bluetooth low energy (BLE) links <b>122</b>. Other types of IoT networks that may be present include a wireless local area network (WLAN) network <b>158</b> used to communicate with IoT devices <b>104</b> through IEEE 802.11 (Wi-Fi&#xae;) links <b>128</b>, a cellular network <b>160</b> used to communicate with IoT devices <b>104</b> through an LTE/LTE-A (4G) or 5G cellular network, and a low-power wide area (LPWA) network <b>162</b>, for example, a LPWA network compatible with the LoRaWan specification promulgated by the LoRa alliance, or a IPv6 over Low Power Wide-Area Networks (LPWAN) network compatible with a specification promulgated by the Internet Engineering Task Force (IETF). Further, the respective IoT networks may communicate with an outside network provider (e.g., a tier 2 or tier 3 provider) using any number of communications links, such as an LTE cellular link, an LPWA link, or a link based on the IEEE 802.15.4 standard, such as Zigbee&#xae;. The respective IoT networks may also operate with use of a variety of network and internet application protocols such as Constrained Application Protocol (CoAP). The respective IoT networks may also be integrated with coordinator devices that provide a chain of links that forms cluster tree of linked devices and networks.</p><p id="p-0033" num="0032">Each of these IoT networks may provide opportunities for new technical features, such as those as described herein. The improved technologies and networks may enable the exponential growth of devices and networks, including the use of IoT networks into &#x201c;fog&#x201d; devices or systems. As the use of such improved technologies grows, the IoT networks may be developed for self-management, functional evolution, and collaboration, without needing direct human intervention. The improved technologies may even enable IoT networks to function without centralized controlled systems. Accordingly, the improved technologies described herein may be used to automate and enhance network management and operation functions far beyond current implementations.</p><p id="p-0034" num="0033">In an example, communications between IoT devices <b>104</b>, such as over the backbone links <b>102</b>, may be protected by a decentralized system for authentication, authorization, and accounting (AAA). In a decentralized AAA system, distributed payment, credit, audit, authorization, and authentication systems may be implemented across interconnected heterogeneous network infrastructure. This allows systems and networks to move towards autonomous operations. In these types of autonomous operations, machines may even contract for human resources and negotiate partnerships with other machine networks. This may allow the achievement of mutual objectives and balanced service delivery against outlined, planned service level agreements as well as achieve solutions that provide metering, measurements, traceability and trackability. The creation of new supply chain structures and methods may enable a multitude of services to be created, mined for value, and collapsed without any human involvement.</p><p id="p-0035" num="0034">Such IoT networks may be further enhanced by the integration of sensing technologies, such as sound, light, electronic traffic, facial and pattern recognition, smell, or vibration into the autonomous organizations among the IoT devices. The integration of sensory systems may allow systematic and autonomous communication and coordination of service delivery against contractual service objectives, orchestration and QoS-based swarming and fusion of resources. Individual examples of network-based resource processing include the following.</p><p id="p-0036" num="0035">The mesh network <b>156</b>, for instance, may be enhanced by systems that perform inline data-to-information transforms. For example, self-forming chains of processing resources comprising a multi-link network may distribute the transformation of raw data to information in an efficient manner, and the ability to differentiate between assets and resources and the associated management of each. Furthermore, the proper components of infrastructure and resource based trust and service indices may be inserted to improve the data integrity, quality, assurance and deliver a metric of data confidence.</p><p id="p-0037" num="0036">The WLAN network <b>158</b>, for instance, may use systems that perform standards conversion to provide multi-standard connectivity, enabling IoT devices <b>104</b> using different protocols to communicate. Further systems may provide seamless interconnectivity across a multi-standard infrastructure comprising visible Internet resources and hidden Internet resources.</p><p id="p-0038" num="0037">Communications in the cellular network <b>160</b>, for instance, may be enhanced by systems that offload data, extend communications to more remote devices, or both. The LPWA network <b>162</b> may include systems that perform non-Internet protocol (IP) to IP interconnections, addressing, and routing. Further, each of the IoT devices <b>104</b> may include the appropriate transceiver for wide area communications with that device. Further, each IoT device <b>104</b> may include other transceivers for communications using additional protocols and frequencies. This is discussed further with respect to the communication environment and hardware of an IoT processing device depicted in <figref idref="DRAWINGS">FIGS. <b>11</b> and <b>12</b></figref>.</p><p id="p-0039" num="0038">Finally, clusters of IoT devices may be equipped to communicate with other IoT devices as well as with a cloud network. This may allow the IoT devices to form an ad-hoc network between the devices, allowing them to function as a single device, which may be termed a fog device, fog platform, or fog network. This configuration is discussed further with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref> below.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a cloud computing network in communication with a mesh network of IoT devices (devices <b>202</b>) operating as a fog platform in a networked scenario. The mesh network of IoT devices may be termed a fog network <b>220</b>, established from a network of devices operating at the edge of the cloud <b>200</b>. To simplify the diagram, not every IoT device <b>202</b> is labeled.</p><p id="p-0041" num="0040">The fog network <b>220</b> may be considered to be a massively interconnected network wherein a number of IoT devices <b>202</b> are in communications with each other, for example, by radio links <b>222</b>. The fog network <b>220</b> may establish a horizontal, physical, or virtual resource platform that can be considered to reside between IoT edge devices and cloud or data centers. A fog network, in some examples, may support vertically-isolated, latency-sensitive applications through layered, federated, or distributed computing, storage, and network connectivity operations. However, a fog network may also be used to distribute resources and services at and among the edge and the cloud. Thus, references in the present document to the &#x201c;edge&#x201d;, &#x201c;fog&#x201d;, and &#x201c;cloud&#x201d; are not necessarily discrete or exclusive of one another.</p><p id="p-0042" num="0041">As an example, the fog network <b>220</b> may be facilitated using an interconnect specification released by the Open Connectivity Foundation&#x2122; (OCF). This standard allows devices to discover each other and establish communications for interconnects. Other interconnection protocols may also be used, including, for example, the optimized link state routing (OLSR) Protocol, the better approach to mobile ad-hoc networking (B.A.T.M.A.N.) routing protocol, or the OMA Lightweight M2M (LWM2M) protocol, among others.</p><p id="p-0043" num="0042">Three types of IoT devices <b>202</b> are shown in this example, gateways <b>204</b>, data aggregators <b>226</b>, and sensors <b>228</b>, although any combinations of IoT devices <b>202</b> and functionality may be used. The gateways <b>204</b> may be edge devices that provide communications between the cloud <b>200</b> and the fog network <b>220</b>, and may also provide the backend process function for data obtained from sensors <b>228</b>, such as motion data, flow data, temperature data, and the like. The data aggregators <b>226</b> may collect data from any number of the sensors <b>228</b>, and perform the back end processing function for the analysis. The results, raw data, or both may be passed along to the cloud <b>200</b> through the gateways <b>204</b>. The sensors <b>228</b> may be full IoT devices <b>202</b>, for example, capable of both collecting data and processing the data. In some cases, the sensors <b>228</b> may be more limited in functionality, for example, collecting the data and allowing the data aggregators <b>226</b> or gateways <b>204</b> to process the data.</p><p id="p-0044" num="0043">Communications from any IoT device <b>202</b> may be passed along a convenient path (e.g., a most convenient path) between any of the IoT devices <b>202</b> to reach the gateways <b>204</b>. In these networks, the number of interconnections provide substantial redundancy, allowing communications to be maintained, even with the loss of a number of IoT devices <b>202</b>. Further, the use of a mesh network may allow IoT devices <b>202</b> that are very low power or located at a distance from infrastructure to be used, as the range to connect to another IoT device <b>202</b> may be much less than the range to connect to the gateways <b>204</b>.</p><p id="p-0045" num="0044">The fog network <b>220</b> provided from these IoT devices <b>202</b> may be presented to devices in the cloud <b>200</b>, such as a server <b>206</b>, as a single device located at the edge of the cloud <b>200</b>, e.g., a fog network operating as a device or platform. In this example, the alerts coming from the fog platform may be sent without being identified as coming from a specific IoT device <b>202</b> within the fog network <b>220</b>. In this fashion, the fog network <b>220</b> may be considered a distributed platform that provides computing and storage resources to perform processing or data-intensive tasks such as data analytics, data aggregation, and machine-learning, among others.</p><p id="p-0046" num="0045">In some examples, the IoT devices <b>202</b> may be configured using an imperative programming style, e.g., with each IoT device <b>202</b> having a specific function and communication partners. However, the IoT devices <b>202</b> forming the fog device may be configured in a declarative programming style, allowing the IoT devices <b>202</b> to reconfigure their operations and communications, such as to determine needed resources in response to conditions, queries, and device failures. As an example, a query from a user located at a server <b>206</b> about the operations of a subset of equipment monitored by the IoT devices <b>202</b> may result in the fog network <b>220</b> device selecting the IoT devices <b>202</b>, such as particular sensors <b>228</b>, needed to answer the query. The data from these sensors <b>228</b> may then be aggregated and analyzed by any combination of the sensors <b>228</b>, data aggregators <b>226</b>, or gateways <b>204</b>, before being sent on by the fog network <b>220</b> device to the server <b>206</b> to answer the query. In this example, IoT devices <b>202</b> in the fog network <b>220</b> may select the sensors <b>228</b> used based on the query, such as adding data from flow sensors or temperature sensors. Further, if some of the IoT devices <b>202</b> are not operational, other IoT devices <b>202</b> in the fog network <b>220</b> may provide analogous data, if available.</p><p id="p-0047" num="0046">Within these and like network settings, instances of IoT devices may be deployed in a physical or logical instantiation. A physical instantiation may exist as part of device manufacturing, whereas a logical instantiation may be dynamically instantiated by an &#x2018;intermediary&#x2019; server that wishes to &#x2018;front-end&#x2019; or &#x2018;back-end&#x2019; a device-to-device, service-to-device or, device-to-service interaction. Instantiation of logical device instances is typically performed by the intermediary based on a standard interface/data model definition specification or by obtaining a template device definition file from a repository. For example, limited approaches for establishing device description repository requirements have attempted to be standardized in a W3C standard.</p><p id="p-0048" num="0047">Device management (DM) consoles and services, however, must refer to human-readable specifications and machine-readable device descriptions in order to produce useful DM implementations. Such implementations often require use of software, firmware, and hardware developers and custom design and development work to realize a device management solution. This is costly and labor intensive, and does not leverage the automation tools available to IoT device design and implementation. Additionally, although various efforts such as the Distributed Management Task Force (DMTF) have attempted to define standards, tools and data models for management of PCs over a network, such approaches do not define solutions suitable for IoT networks and do not define DM services as a dynamically applied capability to a general-purpose device (as a building block technology).</p><p id="p-0049" num="0048">The techniques and configurations discussed herein address these and other common technical issues with IoT device management, through the definition and use of an IoT DM services data model using core device definition building blocks. The definition and use of such data model may provide various approaches for configuring and using DM services, including in the form of a superior or subordinate DM service (and multiple peers or instances of such services).</p><p id="p-0050" num="0049">In an example, a &#x201c;subordinate&#x201d; type of DM service may be dynamically instantiated/de-instantiated by a &#x201c;superior&#x201d; DM service (as needed). In such cases, device/service management instantiation is recursive. For example, superior DM services may securely delegate authorization to perform a subordinate DM service, using &#x201c;role&#x201d; credentials such as certificates, tickets, or by directly provisioning to a device's secure storage resource. Also for example, subordinate services may be defined using an IoT framework data model (e.g., the OCF Resource model) where the service function is abstracted in the form of a set of resources and actions. In such a scenario, resources defined on the superior service are the data objects that a managed device or subordinate service may use to update or otherwise synchronize with a local representation that is specific to the device or subordinate instance.</p><p id="p-0051" num="0050">A superior service may be configured within this approach to implement actions, with such actions providing the steps used to perform a specific DM objective. In an example, actions may take the form of a resource containing a RESTful command structure that is &#x201c;executed&#x201d; or &#x201c;evaluated&#x201d; or &#x201c;performed&#x201d; by the DM service. In another example, actions may be embedded software, firmware, FPGA bitstreams, or other instructions or logic that implements discrete &#x201c;steps&#x201d; of DM service operations. Further, the provisioning of resources, actions (as resources), actions (as SW/FW/FPGA bitstreams) may increasingly apply steps that manage both actions and resources of the device or subordinate being serviced.</p><p id="p-0052" num="0051">Additionally, in an example, a first superior service may form a first domain (where IoT DM operations are performed) that becomes the domain wherein subordinate services and devices are &#x201c;owned&#x201d; and otherwise regarded as belonging to the superior DM service. A peer superior DM service also may be instantiated by a first DM service that later transfers ownership and responsibility to manage its current set of subordinates. For example, this approach may be utilized to achieve workload balancing, failover, or other strategies for highly available DM services.</p><p id="p-0053" num="0052">As discussed herein, references are made to example &#x201c;DOTS&#x201d;, &#x201c;AMS&#x201d;, &#x201c;CMS&#x201d;, &#x201c;DC&#x201d;, and &#x201c;ZC&#x201d; DM services in OCF network implementations. In an example, DOTS (Device Owner Transfer Service, which may also be termed &#x201c;DOXS&#x201d;) is a transfer and device onboarding service that supports the introduction of devices into a domain and onto a local network. Also in an example, CMS (Credential Management Service) is a service that handles the responsibility of device credential provisioning and management in a network. Also in an example, AMS (Access Management Service) is a service that implements an access management capability for maintenance of resources for access control entries (ACEs) and access control operations. Also in an example, DC (Domain Controller) is a service that implements and manages a domain management or organizational capability in a network. Also in an example, ZC (Zone Controller) is a service that implements and manages a zone management or organizational capability in a network (with one or multiple zones within a domain). Further, in some examples, DC performs service delegation steps, which enables DOTS to operate as a subordinate service at an equal level as CMS and AMS. It will be understood that other terminology and roles may be utilized for equivalent DM services in other implementations. Further, in one example, all of the above service types are OCF resources that may be instantiated on an OCF device in addition to regular device resources.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a flowchart <b>300</b> of an example method for DM service instantiation. As shown, the operations of the flowchart <b>300</b> commence with the instantiation of a superior DM service on a device (e.g., Device <b>0</b>) (operation <b>310</b>), and the onboarding of respective devices (e.g., Devices <b>1</b>-<b>3</b>) used to serve as additional DM services (operation <b>320</b>). The onboarding of these additional respective device instances is established as a pre-requisite prior to instantiating DM services on these respective devices.</p><p id="p-0055" num="0054">The operations of the flowchart <b>300</b> continue with the instantiation of a &#x201c;peer&#x201d; superior service (operation <b>330</b>) on an onboarded device, which may provide an instance of the same service as operating with the superior service (e.g., a second instance of the same type of DM service). This is followed by instantiating a first subordinate service (operation <b>340</b>) and a second subordinate service (operation <b>350</b>) in respective roles, and operating the respective DM services to conduct interactions with foreign instances of devices and other services (operation <b>360</b>). An example of this sequence, as applied to a DM service in an OCF framework, is further illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, as discussed below.</p><p id="p-0056" num="0055">In an example, the initial DM service instantiation for an OCF Device that is &#x201c;self-onboarded&#x201d; (e.g., oxmsel=oic.sec.oxm.self) may be provisioned with service(s) by its host application, and may include authentication of a domain user and established physical presence. Further, an initial service instantiation may involve issuing &#x2018;role&#x2019; credentials, such as self-signed certificates. Also an example, the peer DM service instances may be established as the self-onboarded service instantiates the peer service on a device. Such service resources may be embedded or are caused with CREATE, and service actions may be embedded or are provisioned (e.g., with a SW update or Action Resource operation).</p><p id="p-0057" num="0056">In an example, subordinate DM service instances may be established as a superior service obtains authorization to instantiate a subordinate service, and the superior service instantiates the subordinate service by creating or provisioning service resources and actions (e.g., as is performed with peer service instantiation). For example, in a DOTS DM service, DOTS instantiates CMS and AMS.</p><p id="p-0058" num="0057">In still a further example, foreign instances of a DM service may be coordinated. For example, DOTS from Domain A may utilize a Domain Introduction Method (DIM) with DOTS from Domain B, and DIM may be used to exchange credentials authorizing Service-to-Service interactions.</p><p id="p-0059" num="0058">In an example, service operations with the DM service instantiation approach discussed above, as used in an OCF network implementation, may include aspects of discovery, authorization, and device resource instantiation operations. As a first example, discovery operations may include configuration of a service resource(s), such that the service resource(s) are made Discoverable when instantiated, and Non-discoverable when de-instantiated on the device hosting the service. As a second example, authorization to perform a service may include use of a sequence of operations, such as: (1) DOTS issues a role credential naming service&#x2014;(e.g., ocf.role.-service_type_name-); (2) AMS (Access Management Service) creates ACE entries on devices requiring the service; and (3) CMS (Credential Management Service) creates credentials for devices requiring the service. As a third example, device resource instantiation may be performed as the DM service utilizes CRUD commands to CREATEs companion Resource(s) on a Device, and DELETEs/CREATEs/UPDATEs companion Resource(s) if previously instantiated.</p><p id="p-0060" num="0059">As a specific example of a DM service in an OCF network implementation, a DOTS onboarding service may be instantiated and operated. For instance, the initial (first instance) DOTS instantiation may include issuing self-signed role certificate(s) for all DM services available at this domain, and creating a domain identifier (UUID). The peer (second instance) DOTS instantiation may include the initial DOTS service performing service instantiation and delegation actions for a peer DOTS service. The subordinate service instantiation may include the DOTS service performing a service instantiation and delegation actions for a CMS, AMS, Mediator, or other DM services.</p><p id="p-0061" num="0060">In a specific OCF network implementation, a DM service abstraction may be defined with the following properties:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0061">Is a OCF Device</li>        <li id="ul0002-0002" num="0062">Has a Bundle/Collection (or Constrained Collection) of Resources unique to the Service</li>        <li id="ul0002-0003" num="0063">Has a Set of Actions that it performs</li>        <li id="ul0002-0004" num="0064">Has a Role Credential authorizing it to perform the Service</li>        <li id="ul0002-0005" num="0065">Has a Peer OCF Service of the same type as its collaborator (optional)</li>        <li id="ul0002-0006" num="0066">Has a Subordinate OCF Service that it can delegate to (if service_type permits) (optional)<br/>In an OCF implementation, before a specific device becomes operational in an OCF environment and is able to interact with other devices (and affect services operating on such devices), the subject device needs to be appropriately onboarded. The first step in onboarding a Device is to configure the ownership with an onboarding tool (OBT) and use one of the Owner Transfer Methods (OTMs) in the OBT to establish ownership. Once ownership is established, the OBT becomes the mechanism through which the subject device can then be provisioned; and ultimately, the subject device becomes operational and is able to interact with other devices in an OCF environment. The results of this scenario, which can be further used to launch DM services from a subject device, is further detailed in the following illustration.</li>    </ul>    </li></ul></p><p id="p-0062" num="0067"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example deployment of a DM service instantiation model with a DOTS DM service, for instantiating and operation of multiple DM services. As shown, a series of operations are launched, commenced with a first DOTS instance <b>402</b> instantiating itself, and establishing its role as a DOTS service, as device DO. This satisfies a first DM objective of onboarding a first Device, as a pre-requisite to instantiating a DM service and other devices. In this example, the first DOTS instance <b>402</b> (device <b>0</b>) is established as a superior DM service. Additionally, the first DOTS instance may issue a self-signed role certificate(s) for all services available at this domain and create a domain identifier (UUID) used for identification and management operations.</p><p id="p-0063" num="0068">Additional operations are initiated from the first DOTS instance <b>402</b> (the superior DM service) for configuration of other devices. This includes onboarding other device instances <b>404</b> (Devices D<b>1</b>, D<b>2</b>, D<b>3</b>) which are launched to operate as other DM subordinate and peer DM services. The operations launched from the device instances <b>404</b> also result in achieving a second DM objective of instantiating a first &#x201c;peer&#x201d; superior DM service instance <b>406</b>, also operating as a DOTS service. In a further example, a DM service may de-instantiate a peer or subordinate DM service by some combination of expiring a role authorization, or removing a DM service-specific set of resources and actions.</p><p id="p-0064" num="0069">Further, a DM objective to perform a subordinate service to a managed device may include lifecycle management of credentials, access lists, device onboarding, and the like. Other DM functions may exist related to management of subordinate or peer services and devices. As shown, a first subordinate service instance <b>408</b>A may be instantiated, such as to take on the role of a CMS (credential management service); a second subordinate service instance <b>408</b>B may also be instantiated, such as to take on a role of an AMS (access management service). The instantiation of the instances <b>408</b>A, <b>408</b>B, achieves a third DM objective of instantiating a subordinate DM services. Thus, in the example of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, DOTS performs service instantiation and delegation actions for CMS, AMS, Mediator, or other forms of services.</p><p id="p-0065" num="0070">In a scenario involving DC and/or ZC resources, the device hosting the DC may also have a self-signed and self-issued role. In this example, the DOTS is likely to operate as a subordinate service that is delegated along the same lines as is described for CMS and AMS. Further, the example shown in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> and discussed below shows the /oic/svc/domain resource which is a resource that logically belongs with a DC service abstraction in a scenario where the DC and/or ZC are de-conflated (separated) from the described DOTS service. Similarly, resources such as /oic/svc/dots/mytrusteddevices and mydelegations may be associated with a DC or ZC service (e.g., /oic/svc/dc/mytrusteddevices)</p><p id="p-0066" num="0071">In a further example, DM services that are defined in terms of an OCF Resource model may inherit other properties of the resource model useful for management of resources, such as the aspects of an &#x201c;array&#x201d;, &#x201c;collection&#x201d;, or &#x201c;bundle&#x201d; of a defined group of a plurality of resources. For instance, a DM service resource may inherit properties from a bundle resource (as one of its building blocks) to experience more reliable and safe operation. With use of a bundle resource, referential integrity violations may be minimized, resulting in fewer aborted or partially applied device management operations.</p><p id="p-0067" num="0072">For instance, an OCF service bundle may be represented as a bundle (e.g., array, collection, or group) of resources that facilitates a prescribed interaction between a managed device and its service. This bundle may include two sets of resources: a service side and the managed device side. An OCF service bundle may include: (a) service-side resources that contain data and actions this service implements; (b) an identification of Device-side Resources to be managed; (c) properties controlling the service's scope (e.g. peers, subordinates, and the like); and (d) role and service type (e.g., &#x201c;oic.role.svc.name&#x201d;, &#x201c;oic.svc.name&#x201d;). Further, an OCF service bundle may include actions as code (e.g., functions the service implements) or as a Resource (e.g., with a definition of the action resource type and name, such as an array of &#x201c;&#x3c;Seq_#&#x3e; &#x3c;CRUDN_Action&#x3e; &#x3c;Role&#x3e; &#x3c;Target_Device&#x3e; &#x3c;Interface&#x3e; &#x3c;Resource&#x3e; &#x3c;Predicate&#x3e; &#x3c;Next_Action&#x3e;&#x201d;, where the Sequence of Actions achieves an expected objective (e.g., &#x201c;onboarding&#x201d;), the final &#x3c;CRUDN_Action&#x3e;&#x201c;commits&#x201d; the sequence of actions as complete, and failure to &#x201c;commit&#x201d; the sequence results in replacement of the pre-sequence resource replacing the affected resource). Other examples of OCF service bundles and collections may allow variations to these properties.</p><p id="p-0068" num="0073"><figref idref="DRAWINGS">FIGS. <b>5</b>A-<b>5</b>D</figref> illustrates an example listing of resources and companion resources for onboarding, credential management, and access management DM services, for use in an OCF network implementation. Companion resources are resources provided by the managed device with which the particular DM Service interacts.</p><p id="p-0069" num="0074">Specifically, <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> illustrates a set of DOTS resources <b>502</b> and DOTS companion resources (resources <b>504</b> on a peer DOTS service and resources <b>506</b> on a trusted device). In an example, these resources may be used to support the following DOTS actions:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0075">Owner transfer methods (onboarding) and offboarding</li>        <li id="ul0004-0002" num="0076">Provisioning of Security Virtual Resources (SVRs) at onboarding</li>        <li id="ul0004-0003" num="0077">Soft Reset (SRESET) processing</li>        <li id="ul0004-0004" num="0078">Issue Role creds for OCF-defined services (e.g., ocf.role.svc.dots, ocfrole.svc.cms, . . . )</li>        <li id="ul0004-0005" num="0079">Local CRUDN operations on DOTS Resources</li>        <li id="ul0004-0006" num="0080">CRUDN operations on /doxm and /pstat Resources</li>        <li id="ul0004-0007" num="0081">CRUDN operations on Delegate Services</li>        <li id="ul0004-0008" num="0082">CRUDN operations on Peer Services</li>        <li id="ul0004-0009" num="0083">CRUDN operations on Foreign DOTS Services</li>    </ul>    </li></ul></p><p id="p-0070" num="0084"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> illustrates a set of DOTS resource model resources (resources <b>512</b>) and child resources (resources <b>514</b>). As noted above, such resources themselves may be represented by a bundle (e.g., array, collection, or group) with respective properties and values.</p><p id="p-0071" num="0085"><figref idref="DRAWINGS">FIG. <b>5</b>C</figref> illustrates a set of CMS resources (resources <b>522</b>), resource model resources (resources <b>524</b>) and child resources (resources <b>526</b>), and CMS companion resources (resources <b>528</b>). In an example, these resources may be used to support the following actions:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0086">Local CRUDN operations on CMS Resources</li>        <li id="ul0006-0002" num="0087">Credential life cycle</li>        <li id="ul0006-0003" num="0088">Create, Delete, Update, Notify, Issue, Revoke, Refresh, Expire</li>    </ul>    </li></ul></p><p id="p-0072" num="0089"><figref idref="DRAWINGS">FIG. <b>5</b>D</figref> illustrates a set of AMS resources (resources <b>532</b>, <b>534</b>, <b>538</b>) and AMS child resources (resources <b>536</b>). In an example, these resources may be used to support the following actions:<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0090">Local CRUDN operations on AMS Resources</li>        <li id="ul0008-0002" num="0091">ACE lifecycle management</li>        <li id="ul0008-0003" num="0092">Create, Delete, Update (Subscribe), Notify (Publish), Sign, Expire etc. . . . .</li>    </ul>    </li></ul></p><p id="p-0073" num="0093">It will be understood that the listing of these resources and actions are provided for purposes of illustrating how various DM services may be implemented and used, and other types and forms of actions and resources (including in non-OCF network settings) may be implemented with use of the present approaches.</p><p id="p-0074" num="0094"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a flowchart <b>600</b> of an example method for establishing a device management (DM) service configuration in a device network, such as an IoT network configuration operated according to an OCF specification. In an example, the operations of the flowchart <b>600</b> may be implemented by a single device, distributed operations among multiple devices or systems, or other functional implementations.</p><p id="p-0075" num="0095">The flowchart <b>600</b> commences at <b>610</b> with operations of receiving the RESTful message at a subject device (also referred to as a first device), such as in an example where the RESTful message comprises a CREATE message. Based on this message, resources are created (or updated) on or for the subject device. Additionally, in some examples, resources are created or updated for or on a second subject device, such as based on the CREATE message, which allows instantiation and operation of a service instance as discussed in the following examples. In further examples, such resources are expressed in an array, collection, or bundle of resources, such as may be managed with the operational examples of <figref idref="DRAWINGS">FIGS. <b>7</b> to <b>10</b></figref>. Also in further examples, the second device is a member of a trusted device collection, and still further, the trusted device collection may include an array of resource model properties that is used to define properties of operation for a first DM service instance (as instantiated in the following operations).</p><p id="p-0076" num="0096">The flowchart <b>600</b> continues at <b>620</b> with onboarding and provisioning the subject device onto a device network, as an initial step in response to the receiving of the RESTful message by the device. As a result, the following operations of instantiating the first DM service instance occur after the onboarding and provisioning. In some examples, after the operation <b>610</b>, other operations may include receiving a second RESTful message, such as with the use of an UPDATE or DELETE message, which involves modifying the operation of the second DM service instance (instantiated in the following examples based on the second RESTful message).</p><p id="p-0077" num="0097">Instantiation of a DM service on the first and second device may occur with one of the following variations. In the flowchart <b>600</b>, the operations at <b>630</b> and <b>640</b> involve instantiating, at the subject device and in response to receiving a RESTful message by the subject device, a first device management (DM) service instance, and then operating this first DM service instance. This is followed at <b>650</b>, with instantiating, at a second device and in response to the receiving of the RESTful message, a second DM service instance, based on a request provided from the device to the second device. This is followed by causing the operation of the second DM service instance at <b>660</b>, based on the request provided from the device to the second device.</p><p id="p-0078" num="0098">In some examples, the first DM service instance and the second DM service instance operate in a same DM service role, such that the second DM service instance is established as a peer service instance of the first DM service instance. In other examples, the first DM service instance and the second DM service instance operate in different DM service roles, such that the second DM service instance is established as a subordinate service instance of the superior first DM service instance. For instance, a subordinate service instance may be one of a group of subordinate services instances defined in a domain, with such subordinate service instances and associated devices being controlled or established by the superior first DM service instance.</p><p id="p-0079" num="0099">Additionally, in some examples, operational control of the first DM service instance may extend to configurations involving domains and zones. This may occur in a setting where DC and ZC have essentially the same properties as the &#x201c;first DM&#x201d; service instance but where the roles of DC, ZC, and DOTS are separate and where all the various DM service functions and roles can be dynamically and flexibly in different configurations. This enables a deployed OCF device to perform ancillary service functions while continuing to perform a primary function envisioned by a device manufacturer. (For instance, a refrigerator could be configured by its user to be a domain controller, onboarding service or other service). Moreover, such first/second service instance configurations may occur in settings where services functions are flexibly configured by the user (post device manufacture).</p><p id="p-0080" num="0100">IoT frameworks such as OMA LWM2M and OCF IoTivity define a data model abstraction for representing, accessing and interaction with IoT devices. An assumption of such frameworks is that IoT devices are physically instantiated by a &#x201c;device manufacturer&#x201d; and therefore the device abstraction is defined and known apriori. Cloud services, IoT network gateways and virtual machine environments that host IoT frameworks must instantiate the device model using an application, object management tool or console that is outside the IoT framework. Interoperability, security, and device lifecycle are more difficult as a result. For example, a vendor of IoT network management tools typically cannot perform object management operations without first collaborating with the original device manufacturer (ODM).</p><p id="p-0081" num="0101">ODMs typically provide network management and device lifecycle management tools that are informed by the ODM's shipping devices. Because the ODM knows which devices it manufactures, the ODM typically is best able to produce device lifecycle applications and tools. As a result, independent vendors of IoT lifecycle management tools, gateway vendors, and cloud service providers are often unable to supply solutions that provide improved solutions and user experiences. For example, such vendors are unable to easily dynamically instantiate virtual devices for uses such as network isolation, edge services, load balancing, and optimization.</p><p id="p-0082" num="0102">In addition, in some approaches of existing IoT network implementations, an unsuitable data structure may be used to define sets and groupings of resources. For example, in OCF specification networks, a list or array of resources (e.g., HREFs) to other resources is defined as a &#x201c;collection&#x201d;. A collection data structure is useful for creating a mesh of connected devices; however, because an HREF may refer to some other device, outside the intended device, this presents a security challenge. Further, extensive application code is often deployed to in an effort to create virtual (e.g., logical or shadow) devices and the collections of such devices.</p><p id="p-0083" num="0103">The following techniques may be applicable to address these and other limitations of conventional IoT network configurations. In an example, techniques are discussed for the creation and instantiation of collections (arrays) of objects within a network abstraction, without the overhead required for HREF references to external resources. In an example, objects (e.g., Devices and Resources) may be dynamically instantiated based on the use of object interaction interface, such as a CRUDN (create, read, update, delete, notify) or CRUDPS (create, read, update, delete, publish, subscribe) object interface. In a further example, new objects may be instantiated using a type reference, but without requiring the specification of a name; instead a parent object (which is hidden) may generate/assign a name. As a result, a client may be provided with the ability to refer to one of a set of child resources that are on the local device, without having to establish a reference through a parent resource.</p><p id="p-0084" num="0104">In a further example, objects of a mixed type may be elements of the same array or set. However, the parent object may restrict which mixture of objects is permitted using a meta-property that may be hidden from the calling client (but may be visible to an administrative client). In still a further example, meta-properties associated with the parent object may specify additional constraints such as whether or not member resources may have local properties rather than being remotely linked. This may allow improved control of resource caching and load balancing.</p><p id="p-0085" num="0105">For purposes of understanding the presently disclosed techniques, the following resource management techniques provide reference to certain interfaces within an example OCF network implementation. It will be understood that variations to the following network implementation and components, and the use of additional or alternate network components, within other standardized or non-standardized deployments, are within the scope of the present examples.</p><p id="p-0086" num="0106">Specifically, in an OCF network implementation, the following techniques may be implemented as an improvement to a Collection resource, in the form of a &#x201c;constrained collection&#x201d;. In an example, such a constrained collection is a modified form of a Collection resource that includes the following limitations and capabilities: Only local (child) resources can exist (e.g., no off-device hrefs); the parent resource is protected; an Iterator resource is a default member of the Collection; and &#x201c;Child&#x201d; member resource(s) are directly addressable. In an example, the parent resource is protected because the collection resource is visible only to clients with special rights (e.g. &#x2018;admin&#x2019;); the collection resource does not support the &#x2018;ba&#x2019; (batch) interface; and parent resource properties (other than its child resources) are accessed through the parent resource, whereas CREATE, DELETE of a child resource are processed by the parent resource (with proper rights). Also in an example, the Iterator resource walks the parent resource, revealing metadata about child resources; further, a collection may have multiple Iterator resources as appropriate to satisfy various use cases. In a further example, an Iterator also may be used to obtain an href to child resources.</p><p id="p-0087" num="0107"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an overview use of an example client-server architecture <b>700</b> configured for representing an array of resources. In an example, an array of resources may be managed through a CRUDN or CRUDPS message(s) by using a hidden parent resource <b>718</b> that maintains the linkage to the child resources <b>720</b>. Such CRUDN or CRUDPS message(s) may be provided from a server <b>704</b> in response to a resource request <b>706</b> from a client <b>702</b>.</p><p id="p-0088" num="0108">In operation of the client-server architecture <b>700</b>, CREATE and DELETE messages <b>712</b> are vectored by CRUDN/CRUDPS processing <b>710</b> to the parent resource <b>718</b> that links or unlinks the child container resource as appropriate. For instance, a CREATE command <b>714</b> may also result in the parent resource <b>718</b> generating a resource name that may be used externally to refer directly to the created resource. Additionally, the parent resource <b>718</b> may register the name with a directory resource or may return an Iterator resource (not shown, but further discussed below) that may be used to access child resources by their position. In a similar manner, RETRIEVE, UPDATE, NOTIFY (Publish) and SUBSCRIBE messages <b>716</b> are directed to the named child resource <b>720</b> where the interface definition semantics normally defined are applied.</p><p id="p-0089" num="0109">Based on the usage of the architecture <b>700</b>, a resource may be created and instantiated using a CREATE or DELETE message <b>714</b>, while applying appropriate action(s) to the hidden resource parent <b>718</b> (e.g., the parent that is maintaining the reference to the child resources). In a further example, the parent may be responsible for creating the name, such that a parent may use a naming algorithm to generate a reference <b>722</b> in response to a request to create a resource of a particular resource type. For instance, a parent may generate a UUID value as the name of the resource; this value may be returned to the client <b>702</b> and returned to the server <b>704</b>. In still another example, the use of a self-sovereign identity may be employed, such as with the parent resource <b>718</b> generating a self-sovereign identifier of a particular device. In still a further example, the use of a blockchain record may be involved for the generation and use of an identifier.</p><p id="p-0090" num="0110"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a management use of an example client-server architecture <b>800</b> configured for representing an array of resources. In the example of <figref idref="DRAWINGS">FIG. <b>8</b></figref>, IoT devices may be treated as a &#x201c;device&#x201d; resource where devices are manufactured programmatically according to IoT CRUD messages. Cloud servers, gateways and virtual machine environments have need of managing &#x201c;soft&#x201d; IoT devices that may perform proxy operations on behalf of a physical device in another network or to perform computational or control operations where optionally no sensing or actuation using physical sensors/actuators is necessary.</p><p id="p-0091" num="0111">In an example, a parent resource <b>816</b> maintains a list of &#x201c;device&#x201d; (child device) resources <b>820</b> where all the resources comprising an IoT &#x201c;server&#x201d; device may be maintained. A client request (e.g., a command <b>806</b>, from client <b>802</b> via management client <b>804</b>) to an edge device (e.g., a Parent Server <b>808</b>) intended for a child server (e.g., one of the child servers <b>820</b> C<b>1</b>-C<b>3</b>) may be routed or forwarded by the device lifecycle processing <b>810</b> to the &#x201c;child&#x201d; for processing as a command <b>818</b>. Normally, a messaging protocol such as COAP may be used to perform CRUD, CRUDN or CRUDPS operations. These are normally routed to the endpoint server directly. However, in the case of an edge, cloud, or gateway environment, the edge, cloud, or gateway device may be the named entity in the IoT message. The cloud, gateway, or edge device (e.g., parent server <b>808</b>) may re-route the message to the child device as appropriate. The originating client (e.g., client <b>802</b>) may be aware of the child device and construct a command including the child device name in the command construction. For example, the command structure may include both the routing device and the endpoint device authority structures:</p><p id="p-0092" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;&#x2003;CMD &#x3c;Parent_routing_device_ID&#x3e; &#x3c;Child_target_device_ID&#x3e;</entry></row><row><entry>&#x3c;command_suffix&#x3e;</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0093" num="0112">Alternatively, the originating client (client device) <b>802</b> may establish a dedicated communication path to the Parent/routing device (parent server <b>808</b>) where commands arriving over the channel are expressed in terms of the target child device. In this way, the command syntax need not be modified.</p><p id="p-0094" num="0113">The device lifecycle processing <b>810</b> may also handle a CREATE or DELETE command <b>814</b> to respectively create or delete a device with the parent resource <b>816</b>. In an example, the CREATE command <b>812</b> may be interpreted by the device lifecycle processing <b>810</b> as a request to create a device, whereas conventionally only ODMs would create devices. The parent device (parent server <b>808</b>) consequently may take on the role of device manufacturer (logically) and generate a device name (e.g. UUID, href, network IP address) as appropriate and register the new device in a parent resource (parent resource <b>816</b>) containing references to the generated devices (a new device to add to devices <b>820</b>). Further, the parent device <b>816</b> may include an attestation of the physical platform/parent device to accompany the created device.</p><p id="p-0095" num="0114">The presently described creation, definition, and use of an array resource in such ways provides a different approach when considering manageability operations. A conventional approach for management often involves use of a management console at a dedicated PC, establishing a connection over a protocol dedicated for management (e.g., SNMP), and using a dedicated management engine and baseband management controller. Through such configuration, a console may be utilized to perform trusted or necessary operations on the server (e.g., to launch a set of manageability agents that are tied to management capabilities, to perform operations and application control through a management console).</p><p id="p-0096" num="0115">The present techniques enable an IOT framework to be used for such management operations, in lieu of a complex management architecture. A management client (e.g., client <b>804</b> depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref>) used with the present techniques operates in a similar manner as a management console; however, instead of connecting to a management engine, the management client connects to the server in the same way that the server connects to a client for a CRUD operation. This means that IOT commands may also be issued in the same way as a client&#x2014;using the same abstraction&#x2014;and appropriate management functions up to and including the creation of resources to be executed.</p><p id="p-0097" num="0116"><figref idref="DRAWINGS">FIGS. <b>9</b>A and <b>9</b>B</figref> illustrate example processing flows <b>900</b>A, <b>900</b>B of client commands used with an array of resources. Specifically, processing flow <b>900</b>A illustrates processing for CREATE, DELETE, and RETRIEVE commands, whereas processing flow <b>900</b>B illustrates respective processing for UPDATE, SUBSCRIBE, or RETRIEVE with NOTIFY commands. As shown, such processing actions may be performed by either a parent or a child, depending on the command type and actions to be performed.</p><p id="p-0098" num="0117">The CRUDNS command processing flows <b>900</b>A, <b>900</b>B illustrate respective operations where, for each command, an appropriate action is taken to maintain the list of devices using a hidden parent resource. In particular, the CREATE and DELETE commands are vectored to the parent as appropriate to instantiate/de-instantiate the entry while the other commands are vectored to the specific child resource for processing.</p><p id="p-0099" num="0118">In an example, IoT object models may define interface semantics that describe how clients may interact with the resource. Typically, this involves definition of CRUD, CRUDN or CRUDPS behaviors. The resource name and command disambiguates which interface semantic to apply. In the case of CREATE, the name does not yet exist, and therefore a hidden parent resource is used implicitly. The client issuing the CREATE command may specify a resource type parameter, which instructs the parent to generate a resource name. Optionally, the client may supply a resource name.</p><p id="p-0100" num="0119">In a further example, an Iterator resource may be defined to provide a flexible way to interact with an array or collection of resources. An Iterator resource may be utilized with an array defined with the techniques above, to allow serial access (e.g., to access a next data value in the list, and each time to get a request to return the next one).</p><p id="p-0101" num="0120">In an example, the Iterator object may be defined to return a &#x201c;Next&#x201d; resource in the array of child resources. As an example invocation of an Iterator, the following example commands may be defined as:</p><p id="p-0102" num="0121">GET&#x3c;Server_ID&#x3e;:/Iterator Next (where the returned value is the resource name and type); or</p><p id="p-0103" num="0122">GET&#x3c;Server_ID&#x3e;:/Iterator [0, 1, 2, 3 . . . n] (where the index value corresponds to the position of the Child resource in an array).</p><p id="p-0104" num="0123">The use of an Iterator resource has flexibility beyond that of a named Parent resource, because multiple Iterators may be defined having specialized semantics. For example, an Iterator may present a serialization abstraction for processing arrays of certain resources or types of resources. Another Iterator may present a binary tree abstraction. Other Iterators may provide resource type filtering such as all resources of type (e.g., &#x201c;temperature&#x201d;).</p><p id="p-0105" num="0124">Iterator resources may be used in connection with device resources to enable cloud server, gateway, and edge devices more flexibility and security in interactions with clients. For example, a gateway device may define an iterator for revealing &#x201c;water pump&#x201d; devices but not &#x201c;centrifuge&#x201d; devices. The querying entity is not required to know about &#x201c;water pump&#x201d; device types in order to receive a listing that contains water pumps. If the cloud, gateway, or edge device no longer wishes to expose water pump devices externally, it may simply remove the Iterator that reveals water pump devices. When a client interacts with the gateway next, it obtains Iterator resources, but does not find the &#x201c;water pump&#x201d; device iterator. This approach is more flexible and secure over existing directory resources that normally provide an exhaustive list of all resources and present a single structural abstraction (e.g. array) for representing the resources.</p><p id="p-0106" num="0125">In an example, an Iterator may be structured as a tree or in other formats appropriate to a network. Thus, in contrast to techniques which involve going to a directory (e.g., /RES) that serializes everything and provides an entire array (a huge data structure that has everything in it), an Iterator may provide a limited data set. Thus, an Iterator may be particularly appropriate for use in constrained devices, with the use of a query to define and appropriately restrict data set results.</p><p id="p-0107" num="0126">As discussed in the examples above, a device may be expressed as a collection resource, and this collection resource may be described as an &#x201c;array&#x201d; of references (e.g., hrefs) to the local mandatory and optional resources that every IoT device may include. Thus, a device may be established with a parent collection, which serves as a constrained collection because this collection does not refer to resources instantiated remotely. In an OCF implementation, an OCF Device may implicitly have a constrained collection resource for the resources that the device hosts, or may explicitly use a constrained collection structure to represent an OCF Device. Device management would also recognize the parent (collection) resource by its device name, such as from the device ID.</p><p id="p-0108" num="0127">Further in an OCF implementation, a constrained collection may be defined to include at least the following mandatory resources:<ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0000">    <ul id="ul0010" list-style="none">        <li id="ul0010-0001" num="0128">/itr&#x2014;an Iterator resource that is read-only</li>        <li id="ul0010-0002" num="0129">/links&#x2014;an array containing child resources that is not directly accessible</li>        <li id="ul0010-0003" num="0130">All resources mandatory for an OCF Device (e.g., /d, which is a resource that exposes device properties such as device names, aliases, or identities).</li>    </ul>    </li></ul></p><p id="p-0109" num="0131">In an example, an OCF Device may have an implicit constrained collection where the parent collection is hidden and where a first iterator resource (/itr) may be hidden and a second iterator resource (/res) may be accessible according to an existing definition of said resource.</p><p id="p-0110" num="0132">The use of the/res Iterator resource differs from revealing the parent collection, since there is no name construction that performs this action in existing OCF approaches. Further, the use of the/itr Iterator resource or a similar Iterator construction may apply to any number of device management, routing, gatewaying, bridging, or proxying use cases, where special permission is required to access the parent collection directly.</p><p id="p-0111" num="0133">In an example, the properties of a constrained collection in an OCF implementation may include the following properties:</p><p id="p-0112" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="7pt" align="left"/><colspec colname="2" colwidth="21pt" align="left"/><colspec colname="3" colwidth="238pt" align="left"/><thead><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2022;</entry><entry>href</entry><entry>(e.g., &#x3c;authority_x&#x3e;/&#x3c;cc_name&#x3e;)</entry></row><row><entry>&#x2022;</entry><entry>rt</entry><entry>(e.g., cc_type)</entry></row><row><entry>&#x2022;</entry><entry>rts</entry><entry>(e.g., &#x201c;rt_A&#x201d;, &#x201c;rt_B&#x201d; etc...)</entry></row><row><entry>&#x2022;</entry><entry>if</entry><entry>(e.g., &#x2018;oic.if.c (create a child resource in the parent collection resource); &#x2018;oic.if.d&#x2019;</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="7pt" align="left"/><colspec colname="1" colwidth="259pt" align="left"/><tbody valign="top"><row><entry/><entry>(delete a child resource in the parent collection resource); &#x2018;oic.if.itr&#x2019; (retrieve a listing of</entry></row><row><entry/><entry>the child resources maintained by the parent collection resource) and where other</entry></row><row><entry/><entry>interface semantics do not apply to the array of child resources including Read &#x2018;oic.if.r&#x2019;,</entry></row><row><entry/><entry>Write &#x2018;oic.if.rw&#x2019;, Batch &#x2018;oic.if.b&#x2019;; and the like)</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="7pt" align="left"/><colspec colname="2" colwidth="21pt" align="left"/><colspec colname="3" colwidth="238pt" align="left"/><tbody valign="top"><row><entry>&#x2022;</entry><entry>Itr</entry><entry>(i.e. iterator resource reference)</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0113" num="0134">In an example, the values of a constrained collection in an OCF implementation may be defined as an array-of-child-resources, where each has a directly accessible href, for example:</p><p id="p-0114" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="63pt" align="left"/><colspec colname="1" colwidth="154pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>[1] href = &#x201d;&#x3c;authority_x&#x3e;/r1&#x201d;</entry></row><row><entry/><entry>[2] href = &#x201c;&#x3c;authority_x&#x3e;/r2&#x201d;</entry></row><row><entry/><entry>[3] etc...</entry></row><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0115" num="0135">In an example, the values of the access control entries (ACEs) for a constrained collection resource may utilize properties similar to the following:</p><p id="p-0116" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="91pt" align="left"/><colspec colname="2" colwidth="105pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2022; [1] &#x201c;&#x3c;/cc_name&#x3e;</entry><entry>: CRUDN : &#x3c;client_A&#x3e;</entry></row><row><entry/><entry>&#x2022; [2] &#x201d;/r1&#x201d;</entry><entry>: CRUDN : &#x3c;client_B&#x3e;</entry></row><row><entry/><entry>&#x2022; [3] &#x201c;/r2&#x201d;</entry><entry>: CRUDN : &#x3c;client_C&#x3e;</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="196pt" align="left"/><tbody valign="top"><row><entry/><entry>&#x2022; [4] etc...</entry></row><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0117" num="0136">In a further example, security resources (e.g., mandatory resources) of a constrained collection may include:<ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0000">    <ul id="ul0012" list-style="none">        <li id="ul0012-0001" num="0137">/doxm&#x2014;security properties of the device including device ID</li>        <li id="ul0012-0002" num="0138">/pstat&#x2014;device status properties</li>        <li id="ul0012-0003" num="0139">/cred&#x2014;Collection or list of credentials maintained by the device</li>        <li id="ul0012-0004" num="0140">/acl&#x2014;Collection or list of access control policies maintained by the device</li>        <li id="ul0012-0005" num="0141">/roles&#x2014;Collection or list of roles supported by the device and enforced on a current connection</li>    </ul>    </li></ul></p><p id="p-0118" num="0142">In an example, the supported/cred resource may support different types of credentials (role, asymmetric, symmetric, etc.), and credential type-specific interfaces; as a result, each entry may have its own ACL, and credentials need not be disclosed to clients without a need-to-know. Also in an example, the supported/acl resource may have each entry as observable; further, /acl resource entries pertaining to a particular class or location may be partitioned for more scalable management.</p><p id="p-0119" num="0143">In a further example, optional resources of a Collection may include:<ul id="ul0013" list-style="none">    <li id="ul0013-0001" num="0000">    <ul id="ul0014" list-style="none">        <li id="ul0014-0001" num="0144">/mnt&#x2014;A resource that exposes &#x2018;maintenance&#x2019; properties.</li>        <li id="ul0014-0002" num="0145">/rts&#x2014;An iterator resource that lists the various resource types implemented by this device.</li>        <li id="ul0014-0003" num="0146">/ifs&#x2014;An iterator resource that lists the various resource interfaces implemented by this device.</li>        <li id="ul0014-0004" num="0147">/mon&#x2014;A resource that exposes &#x2018;monitored&#x2019; properties (those that support Notify behavior).</li>        <li id="ul0014-0005" num="0148">Other security resources such as revocation lists.</li>        <li id="ul0014-0006" num="0149">Any number of &#x201c;vertical resources&#x2019; that implements a particular function of a sensor or actuator or controller such as a light switch or thermostat.</li>    </ul>    </li></ul></p><p id="p-0120" num="0150">In an example, an Iterator resource may have a read-only interface &#x201c;oic.if.r&#x201d; that also has an ACL that grants read-only access to the Iterator resource. With this setting, no update interface is defined and no ACL policy can grant Update access.</p><p id="p-0121" num="0151">Also in an example, if the iterator resource is not well known and is not discoverable, then the Parent resource may be used to access the iterator using an iterator interface type aka &#x2018;oic.ifitr&#x2019;. This approach only applies to the iterator child resource and only supports read.</p><p id="p-0122" num="0152">Also in an example, create and delete of child resources is accomplished using CREATE and DELETE commands delivered to the Parent resource where a &#x2018;create&#x2019; interface is used (e.g., &#x2018;oic.if.c&#x2019;) where the action to create a child resource applies to the Parent's Array structure containing a list of Child resources. For instance, CREATE via &#x2018;oic.if.c&#x2019; adds a new Resource to the array of child resources. Internally, this results in an update to the array of Resources&#x2014;DELETE is the reverse operation and uses a &#x2018;oic.if.d&#x2019; interface. The iterator may reflect the effects of CREATE and DELETE operations when subsequently queried. (Note: These are special cases of a batch interface semantic (e.g., &#x2018;oic.ifb&#x2019;) but do not apply to the child resources themselves, nor do they apply to the parent resource). Additionally, the parent resource may be created and deleted by applying the above method to a grandparent collection resource that contains the parent resource as its child.</p><p id="p-0123" num="0153">Also in an example, an OCF Device may use the Device UUID as the name of the grandparent collection resource. A traditional Collection may be used to refer to a grandparent Resource on a peer node/Device using an existing URI reference of the form &#x3c;DeviceID&#x3e;/&#x3c;DeviceID&#x3e; where the second DeviceID instance names the Grandparent collection explicitly and where &#x3c;DeviceID&#x3e;/&#x3c;DeviceID&#x3e;/res names an iterator resource of the grandparent resource. An implicit reference to a grandparent collection on an OCF Device may also follow an existing naming convention of &#x3c;DeviceID&#x3e;/res where /res resource is a well-known resource name.</p><p id="p-0124" num="0154">In a further example, services of a constrained collection may be defined. A service is a resource that contains a set of actions or scripts containing restful (e.g., CRUDN/CRUDPS) commands that achieves a prescribed outcome. A collection may also provide a resource that the device receiving services uses to interact with the service, such as how to locate the service (e.g., call setup, etc.). (A further discussion of an action resource for use with a service is discussed below). In an example, services of a collection may include:<ul id="ul0015" list-style="none">    <li id="ul0015-0001" num="0000">    <ul id="ul0016" list-style="none">        <li id="ul0016-0001" num="0155">/rd (update_only)&#x2014;Note that updating/rd does not result in the creation of new resources, and /rd actually supports a device &#x201c;service&#x201d; which is a concept supported by UPnP. Update-only may also include off-device references to resources on other devices</li>        <li id="ul0016-0002" num="0156">/obt&#x2014;Onboarding service&#x2014;properties for identifying how to connect to the onboarding service</li>        <li id="ul0016-0003" num="0157">/obts&#x2014;Script resource containing various onboarding operations</li>        <li id="ul0016-0004" num="0158">/cm&#x2014;Credential management service connection establishment</li>        <li id="ul0016-0005" num="0159">/cms&#x2014;Script resource containing various credential management operations</li>        <li id="ul0016-0006" num="0160">/am&#x2014;Access management service connection establishment</li>        <li id="ul0016-0007" num="0161">/ams&#x2014;Script resource containing various access management operations</li>        <li id="ul0016-0008" num="0162">/cloudconf&#x2014;Cloud service connection establishment</li>        <li id="ul0016-0009" num="0163">/cloud&#x2014;Script resource containing various cloud services operations</li>    </ul>    </li></ul></p><p id="p-0125" num="0164">In a further example, other &#x201c;intermediary&#x201d; functions may be performed in an end-to-end exchange between endpoint devices. These may include:<ul id="ul0017" list-style="none">    <li id="ul0017-0001" num="0000">    <ul id="ul0018" list-style="none">        <li id="ul0018-0001" num="0165">Caching proxy&#x2014;an intermediary that is a &#x201c;device&#x201d; and may maintain state such as whether a switch is on or off, but is not a physical device. Rather, a caching proxy maintains a connection to a backend physical device and synchronizes state with the device (eventually) as connectivity permits. For example, the caching proxy could be a roaming platform that cannot always be connected to the backend device. The caching proxy may be expressed as a Collection resource with local resources and a synchronizing backend.</li>        <li id="ul0018-0002" num="0166">Proxy&#x2014;an intermediary that does not maintain state. A proxy requires a connection to the backend device. In an example, there is a 1-to-1 mapping of front-end resources to backend device resources.</li>        <li id="ul0018-0003" num="0167">Bridge&#x2014;A collection of Proxy or Caching Proxy devices.</li>        <li id="ul0018-0004" num="0168">Gateway&#x2014;A collection of Proxy or Caching Proxy devices where the backend performs data model translations, for example, from OCF to LWM2M/Alljoyn/OneM2M, etc.</li>    </ul>    </li></ul></p><p id="p-0126" num="0169">With the techniques discussed herein, Gateway, Bridge, Proxy, or Caching Proxy device types may be established as collections to be hosted on OCF Devices, meaning that the host itself may appear as an endpoint device. In addition, such Gateway, Bridge, Proxy, Caching Proxy device types may also operate as &#x201c;services&#x201d;. Restated, each of these logical devices may be explicitly expressed as Collection resources and collections of Collection resources. This configuration allows a formal data model expression to be evaluated for correctness. This configuration also allows an access control capability (such as an/acl resource) to be used to enforce access control policies on the devices discussed above. Further, access control would apply to even new forms of devices. This enables a scalable, yet flexible, security capability for IoT networks and network permutations.</p><p id="p-0127" num="0170">Based on the examples discussed above, the parent collection resource created with the present techniques may be &#x201c;hidden&#x201d;, although there may be various device/service/intermediary management scenarios where a privileged caller (aka admin console/client) may wish to use a RESTful CRUD, CRUDN, CRUDPS command to perform device management. In these scenarios, OCF specification approaches may be modified to allow a href pointing to the parent to also refer to the child. In the case where the child resource is a &#x201c;device&#x201d; there needs to be a way for the device ID to become the resource name. This may be achieved by allowing resource names that are UUIDs.</p><p id="p-0128" num="0171">As an example, consider the command: Coap: GET&#x3c;Parent_Device_ID&#x3e;/&#x3c;Child_device_ID&#x3e;/&#x3c;resource_name&#x3e; &#x3c;optional_query_command&#x3e;. A benefit of allowing Child_Device_ID as a resource name, allows a href that traverses the various layers of network topology to reference the specific resource endpoint. For example, given a network topology that is structured as Bridge&#x2192;Caching Proxy&#x2192;Device&#x2192;Lightbulb, the href construction may be established as: Coap: GET&#x3c;Bridge_UUID&#x3e;/&#x3c;Caching Proxy UUID&#x3e;/&#x3c;Device UUID&#x3e;/&#x3c;Lightbulb&#x3e;</p><p id="p-0129" num="0172">The Security model could follow the href by specifying ACLs for each resource referenced in the path. For example, an ACL could be configured on each of the Bridge, Proxy, Device and Lightbulb resources that names the Coap Client (caller). If the secure channel/message authenticates the caller to any of Bridge, Proxy, Device, then the href may be used to match the caller to the appropriate intermediate node (which becomes the enforcement point for access). This is important because security goals of end-to-end security may tunnel through intermediaries until an appropriate secure channel endpoint is identified. Thus, an ACL may exist that appropriately identifies the caller as the entity that has traversed the network topology path outlined in the href (identified above). It also means that if a hop-by-hop security is in use where data are in the clear at each hop may rely on the href to identify the expected network topology path and verify that path was followed by referencing audit logs that each intermediary is keeping. (For example, gateways that perform data structure mapping must be a secure channel endpoint). Audit log files also may be made available through the RESTful interface such that a subsequent intermediary could query the previous intermediaries audit log resource to verify the hop-by-hop path was followed.</p><p id="p-0130" num="0173">In a further example, a collection of resources may be extended to allow a definition of a sequence of commands that achieves a goal. This collection of resources, further defined as a &#x201c;service&#x201d;, or &#x201c;controller&#x201d; resource, may allow the performance of a collection of actions (a plurality of actions) to achieve some expected objective (such as &#x201c;onboarding&#x201d;).</p><p id="p-0131" num="0174">In the OCF resource model, resources and data from such resources are commonly utilized to represent actions with data. For example, to turn on a light bulb, a value representing &#x201c;on&#x201d; may be assigned to a &#x201c;light bulb&#x201d; resource. Within this resource model, an implication is that an appropriate action is conducted in response to the change of the data value. Accordingly, because everything in the OCF data model is representable as a resource and treated as a resource, a collection of resource and a set of commands that achieves a goal are also designed and used within this the resource model. The use of a service resource, within an array of actions, provides a data structure to manage of sequencing of actions while making sure that the entire state of the collection of actions is being executed in a proper order. Further, the use of a service resource allows a mechanism to roll back an action if an order of certain actions is not followed or is unsuccessful.</p><p id="p-0132" num="0175">In an example, a service resource is defined from a collection of resources that facilitates a scripted interaction between a Device and a Controller (aka, a Service Provider). In an OCF implementation, some of the services that may be provided through this collection may include services for a DOTS, CMS, AMS, or Mediator. In an example, a service resource may be established as a Controller-side Collection of resources or a Device-side Collection of resources. For instance, the Controller-side Collection of resources may describe service data and actions, whereas the Device-side Collection of resources may describe device data and actions.</p><p id="p-0133" num="0176">Also in an example, the service resource may be composed of a plurality of action resources, which are structured from respective action resource information (e.g., information to identify a type and name). The plurality of action resources may be defined from an array of actions, such as in the definition:</p><p id="p-0134" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="259pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x3c;Seq_#&#x3e;&#x3c;CRUDN_Action&#x3e;&#x3c;Role&#x3e;&#x3c;Target_Device&#x3e;&#x3c;Interface&#x3e;&#x3c;Resource&#x3e;&#x3c;Predi</entry></row><row><entry>&#x2003;cate&#x3e;&#x3c;Next_Action&#x3e;</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0135" num="0177">The Sequence of Actions achieves an expected objective (e.g., &#x201c;onboarding&#x201d;) for the service. The final &#x3c;CRUDN_Action&#x3e;&#x201c;commits&#x201d; the sequence of actions as complete. Failure to &#x201c;commit&#x201d; the sequence results in the pre-sequence resource replacing the affected resource.</p><p id="p-0136" num="0178">The position of individual &#x3c; &#x3e; elements within an action definition may be arbitrary, as each element simply indicates one of the set of elements. Further, in an exchange between a device and server, each side of the conversation may share the resource. (In other words, peer_A may RETRIEVE the Action resource from peer_B at the start of the interaction so both peers have a copy). Additionally, &#x3c;Next_Action&#x3e; determines the expected next &#x3c;Seq_#&#x3e;, the &#x3c;interface&#x3e; defines the expected return results according to RESTful semantics, and &#x3c;Role&#x3e; determines authorizations needed to perform the Action. In further examples, each CRUDN_Action may require different authorization.</p><p id="p-0137" num="0179">Additionally, the service resource may be tied to a service role through the use of identification information. For instance, such identification information may be provided from role identifiers naming the service type with controller-side or device-side qualifiers (e.g., &#x201c;XyzService_Controller&#x201d;, &#x201c;XyzService_Device&#x201d;).</p><p id="p-0138" num="0180">The following table illustrates an example format of a service resource defined with an array of action resources.</p><p id="p-0139" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="266pt" align="left"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>/MyAction : on Peer_A</entry></row><row><entry>&#x3c;0&#x3e; &#x3c;&#x201d;User&#x201d;&#x3e; &#x3c;RETRIEVE&#x3e; &#x3c;UUID_Peer_A&#x3e; &#x3c;&#x201d;read-only&#x201d;&#x3e; &#x3c;/MyAction&#x3e; &#x3c;1&#x3e;</entry></row><row><entry>&#x3c;0&#x3e; &#x3c;&#x201d;User&#x201d;&#x3e; &#x3c;UPDATE&#x3e; &#x3c;UUID_Peer_B&#x3e; &#x3c;&#x201d;write-only&#x201d;&#x3e; &#x3c;/MyAction-###&#x3e; &#x3c;1&#x3e;</entry></row><row><entry>&#x3c;1&#x3e; &#x3c;&#x201d;User&#x201d;&#x3e; &#x3c;RETRIEVE&#x3e; &#x3c;UUID_Peer_B&#x3e; &#x3c;&#x201d;read-only&#x201d;&#x3e; &#x3c;/mylight&#x3e; &#x3c;&#x201d;?on=false&#x201d;&#x3e;</entry></row><row><entry>&#x3c;2&#x3e;</entry></row><row><entry>&#x3c;2&#x3e; &#x3c;&#x201d;Admin&#x201d;&#x3e; &#x3c;UPDATE&#x3e; &#x3c;UUID_Peer_B&#x3e; &#x3c;&#x201d;actuator&#x201d;&#x3e; &#x3c;/mylight&#x3e; &#x3c;&#x201d;on=true&#x201d;&#x3e;</entry></row><row><entry>&#x3c;3&#x3e;</entry></row><row><entry>&#x3c;3&#x3e; &#x3c;&#x201d;Current_Session&#x201d;&#x3e; &#x3c;UPDATE&#x3e; &#x3c;UUID_Peer_B&#x3e; &#x3c;&#x201d;write&#x201d;&#x3e; &#x3c;/MyAction-###&#x3e;</entry></row><row><entry>&#x3c;&#x201d;CommitAction=true&#x201d;&#x3e; &#x3c;4&#x3e;</entry></row><row><entry>&#x3c;4&#x3e; &#x3c;&#x201d;Current_Session&#x201d;&#x3e; &#x3c;UPDATE&#x3e; &#x3c;UUID_Peer_A&#x3e; &#x3c;&#x201d;write&#x201d;&#x3e; &#x3c;/MyAction&#x3e;</entry></row><row><entry>&#x3c;&#x201d;CommitAction=true&#x201d;&#x3e; &#x3c;FFFF&#x3e;</entry></row><row><entry>&#x3c;FFFF&#x3e; -done-</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0140" num="0181">As provided in the example of Table 1, the array defines a sequence of commands to achieve a goal. The structure includes a sequence number, the command, and then some additional context. This context may indicate a role that is asserted to perform the action with proper authorization, the target device, what interface to use with the command, the resource that is affected, and predicate information that is the content of what is supposed to be updated.</p><p id="p-0141" num="0182">As also provided in the example of Table 1, the array of action resource includes an action script (&#x201c;/MyAction&#x201d;), with a sequence of actions. For instance, the action script begins with Peer_B pulling Peer_A's/MyAction resource, followed by the action script having Peer_A pushing Peer A's/MyAction resource. In the depicted example, Peer_B relies on an auto-numbering scheme that disambiguates the/MyAction instances as &#x2212;###. The existence of two Step-&#x201c;&#x3c;0&#x3e;&#x201d; elements in the array means one or the other starts the Action script. As discussed above, the sequence of actions are committed if all actions are complete; if the actions are unable to be performed, then the pre-sequence resource may replace the affected resource.</p><p id="p-0142" num="0183"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates a flowchart <b>1000</b> of an example method for device resource management, usable with implementations of an array of resources. In an example, the operations of the flowchart <b>1000</b> may be implemented by a single device, distributed operations among multiple devices or systems, or other functional implementations.</p><p id="p-0143" num="0184">The flowchart <b>1000</b> commences at <b>1010</b> with the receiving of one or more RESTful CRUDNS commands (e.g., a create, read/retrieve, update, delete, notify, subscribe). This message may be a resource request command (e.g., resource request <b>706</b> received at the server <b>704</b>) or a management command (e.g., one of the device management commands <b>806</b> received by a parent server). The subsequent operations of processing for the command may be specific to the type of command, as indicated in <figref idref="DRAWINGS">FIGS. <b>9</b>A and <b>9</b>B</figref>.</p><p id="p-0144" num="0185">The flowchart <b>1000</b> continues at <b>1020</b> with operations to dispatch the command to a resource management feature, such as may be performed with parent or child resources (e.g., via CRUDNS processing <b>710</b> or device lifecycle processing <b>810</b>). This resource management feature may operate at <b>1030</b> to identify an appropriate resource change to the array of resources, and then implement this resource change at <b>1040</b> to the array of resources. For instance, based on the type of command and the state of the resource, various operations may be performed to create, delete, update, or otherwise affect the state of the resource in the resource array. This resource change accordingly may utilize any of the type of operations depicted with respective commands in <figref idref="DRAWINGS">FIGS. <b>9</b>A and <b>9</b>B</figref>.</p><p id="p-0145" num="0186">Finally, the flowchart <b>1000</b> concludes at <b>1050</b> with an operation to provide the command response to the CRUDNS command, based on the resource change and affected resource state. For instance, the state of the resource change, or values of the resource itself, may be returned in response to the RESTful CRUDNS command. Further, it will be understood that additional operations may occur based on the state of the array of resources, other types of RESTful commands, or as part of error/condition handling.</p><p id="p-0146" num="0187">In an example, the operations and functionality described above with reference to <figref idref="DRAWINGS">FIGS. <b>3</b> to <b>10</b></figref> may be embodied by an IoT device machine in the example form of an electronic processing system, within which a set or sequence of instructions may be executed to cause the electronic processing system to perform any one of the methodologies discussed herein, according to an example embodiment. The machine may be an IoT device or an IoT gateway, including a machine embodied by aspects of a personal computer (PC), a tablet PC, a personal digital assistant (PDA), a mobile telephone or smartphone, or any machine capable of executing instructions (sequential or otherwise) that specify actions to be taken by that machine.</p><p id="p-0147" num="0188">Further, while only a single machine may be depicted and referenced in the examples above, such machine shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein. Further, these and like examples to a processor-based system shall be taken to include any set of one or more machines that are controlled by or operated by a processor, set of processors, or processing circuitry (e.g., a machine in the form of a computer, IoT processing device, etc.) to individually or jointly execute instructions to perform any one or more of the methodologies discussed herein. Accordingly, in various examples, applicable means for processing (e.g., processing, controlling, generating, evaluating, etc.) may be embodied by such processing circuitry.</p><p id="p-0148" num="0189"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a drawing of a cloud computing network, or cloud <b>1100</b>, in communication with a number of Internet of Things (IoT) devices. The cloud <b>1100</b> may represent the Internet, or may be a local area network (LAN), or a wide area network (WAN), such as a proprietary network for a company. The IoT devices may include any number of different types of devices, grouped in various combinations. For example, a traffic control group <b>1106</b> may include IoT devices along streets in a city. These IoT devices may include stoplights, traffic flow monitors, cameras, weather sensors, and the like. The traffic control group <b>1106</b>, or other subgroups, may be in communication with the cloud <b>1100</b> through wired or wireless links <b>1108</b>, such as LPWA links, optical links, and the like. Further, a wired or wireless sub-network <b>1112</b> may allow the IoT devices to communicate with each other, such as through a local area network, a wireless local area network, and the like. The IoT devices may use another device, such as a gateway <b>1110</b> or <b>1128</b> to communicate with remote locations such as the cloud <b>1100</b>; the IoT devices may also use one or more servers <b>1130</b> to facilitate communication with the cloud <b>1100</b> or with the gateway <b>1110</b>. For example, the one or more servers <b>1130</b> may operate as an intermediate network node to support a local edge cloud or fog implementation among a local area network. Further, the gateway <b>1128</b> that is depicted may operate in a cloud-to-gateway-to-many edge devices configuration, such as with the various IoT devices <b>1114</b>, <b>1120</b>, <b>1124</b> being constrained or dynamic to an assignment and use of resources in the cloud <b>1100</b>.</p><p id="p-0149" num="0190">Other example groups of IoT devices may include remote weather stations <b>1114</b>, local information terminals <b>1116</b>, alarm systems <b>1118</b>, automated teller machines <b>1120</b>, alarm panels <b>1122</b>, or moving vehicles, such as emergency vehicles <b>1124</b> or other vehicles <b>1126</b>, among many others. Each of these IoT devices may be in communication with other IoT devices, with servers <b>1104</b>, with another IoT fog platform or system (not shown, but depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref>), or a combination therein. The groups of IoT devices may be deployed in various residential, commercial, and industrial settings (including in both private or public environments).</p><p id="p-0150" num="0191">As may be seen from <figref idref="DRAWINGS">FIG. <b>11</b></figref>, a large number of IoT devices may be communicating through the cloud <b>1100</b>. This may allow different IoT devices to request or provide information to other devices autonomously. For example, a group of IoT devices (e.g., the traffic control group <b>1106</b>) may request a current weather forecast from a group of remote weather stations <b>1114</b>, which may provide the forecast without human intervention. Further, an emergency vehicle <b>1124</b> may be alerted by an automated teller machine <b>1120</b> that a burglary is in progress. As the emergency vehicle <b>1124</b> proceeds towards the automated teller machine <b>1120</b>, it may access the traffic control group <b>1106</b> to request clearance to the location, for example, by lights turning red to block cross traffic at an intersection in sufficient time for the emergency vehicle <b>1124</b> to have unimpeded access to the intersection.</p><p id="p-0151" num="0192">Clusters of IoT devices, such as the remote weather stations <b>1114</b> or the traffic control group <b>1106</b>, may be equipped to communicate with other IoT devices as well as with the cloud <b>1100</b>. This may allow the IoT devices to form an ad-hoc network between the devices, allowing them to function as a single device, which may be termed a fog platform or system (e.g., as described above with reference to <figref idref="DRAWINGS">FIG. <b>2</b></figref>).</p><p id="p-0152" num="0193"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a block diagram of an example of components that may be present in an IoT device <b>1250</b> for implementing the techniques described herein. The IoT device <b>1250</b> may include any combinations of the components shown in the example or referenced in the disclosure above. The components may be implemented as ICs, portions thereof, discrete electronic devices, or other modules, logic, hardware, software, firmware, or a combination thereof adapted in the IoT device <b>1250</b>, or as components otherwise incorporated within a chassis of a larger system. Additionally, the block diagram of <figref idref="DRAWINGS">FIG. <b>12</b></figref> is intended to depict a high-level view of components of the IoT device <b>1250</b>. However, some of the components shown may be omitted, additional components may be present, and different arrangement of the components shown may occur in other implementations.</p><p id="p-0153" num="0194">The IoT device <b>1250</b> may include processing circuitry in the form of a processor <b>1252</b>, which may be a microprocessor, a multi-core processor, a multithreaded processor, an ultra-low voltage processor, an embedded processor, or other known processing elements. The processor <b>1252</b> may be a part of a system on a chip (SoC) in which the processor <b>1252</b> and other components are formed into a single integrated circuit, or a single package, such as the Edison&#x2122; or Galileo&#x2122; SoC boards from Intel. As an example, the processor <b>1252</b> may include an Intel&#xae; Architecture Core&#x2122; based processor, such as a Quark&#x2122;, an Atom&#x2122; an i3, an i5, an i7, or an MCU-class processor, or another such processor available from Intel&#xae; Corporation, Santa Clara, Calif. However, any number other processors may be used, such as available from Advanced Micro Devices, Inc. (AMD) of Sunnyvale, Calif., a MIPS-based design from MIPS Technologies, Inc. of Sunnyvale, Calif., an ARM-based design licensed from ARM Holdings, Ltd. or customer thereof, or their licensees or adopters. The processors may include units such as an A5-A7 processor from Apple&#xae; Inc., a Snapdragon&#x2122; processor from Qualcomm&#xae; Technologies, Inc., or an OMAP&#x2122; processor from Texas Instruments, Inc.</p><p id="p-0154" num="0195">The processor <b>1252</b> may communicate with a system memory <b>1254</b> over an interconnect <b>1256</b> (e.g., a bus). Any number of memory devices may be used to provide for a given amount of system memory. As examples, the memory may be random access memory (RAM) in accordance with a Joint Electron Devices Engineering Council (JEDEC) design such as the DDR or mobile DDR standards (e.g., LPDDR, LPDDR2, LPDDR3, or LPDDR4). In various implementations the individual memory devices may be of any number of different package types such as single die package (SDP), dual die package (DDP) or quad die package (Q17P). These devices, in some examples, may be directly soldered onto a motherboard to provide a lower profile solution, while in other examples the devices are configured as one or more memory modules that in turn couple to the motherboard by a given connector. Any number of other memory implementations may be used, such as other types of memory modules, e.g., dual inline memory modules (DIMMs) of different varieties including but not limited to microDIMMs or MiniDIMNs.</p><p id="p-0155" num="0196">To provide for persistent storage of information such as data, applications, operating systems and so forth, a storage <b>1258</b> may also couple to the processor <b>1252</b> via the interconnect <b>1256</b>. In an example the storage <b>1258</b> may be implemented via a solid state disk drive (SSDD). Other devices that may be used for the storage <b>1258</b> include flash memory cards, such as SD cards, microSD cards, xD picture cards, and the like, and USB flash drives. In low power implementations, the storage <b>1258</b> may be on-die memory or registers associated with the processor <b>1252</b>. However, in some examples, the storage <b>1258</b> may be implemented using a micro hard disk drive (HDD). Further, any number of new technologies may be used for the storage <b>1258</b> in addition to, or instead of, the technologies described, such resistance change memories, phase change memories, holographic memories, or chemical memories, among others.</p><p id="p-0156" num="0197">The components may communicate over the interconnect <b>1256</b>. The interconnect <b>1256</b> may include any number of technologies, including industry standard architecture (ISA), extended ISA (EISA), peripheral component interconnect (PCI), peripheral component interconnect extended (PCIx), PCI express (PCIe), or any number of other technologies. The interconnect <b>1256</b> may be a proprietary bus, for example, used in a SoC based system. Other bus systems may be included, such as an I2C interface, an SPI interface, point to point interfaces, and a power bus, among others.</p><p id="p-0157" num="0198">The interconnect <b>1256</b> may couple the processor <b>1252</b> to a mesh transceiver <b>1262</b>, for communications with other mesh devices <b>1264</b>. The mesh transceiver <b>1262</b> may use any number of frequencies and protocols, such as 2.4 Gigahertz (GHz) transmissions under the IEEE 802.15.4 standard, using the Bluetooth&#xae; low energy (BLE) standard, as defined by the Bluetooth&#xae; Special Interest Group, or the ZigBee&#xae; standard, among others. Any number of radios, configured for a particular wireless communication protocol, may be used for the connections to the mesh devices <b>1264</b>. For example, a WLAN unit may be used to implement Wi-Fi&#x2122; communications in accordance with the Institute of Electrical and Electronics Engineers (IEEE) 802.11 standard. In addition, wireless wide area communications, e.g., according to a cellular or other wireless wide area protocol, may occur via a WWAN unit.</p><p id="p-0158" num="0199">The mesh transceiver <b>1262</b> may communicate using multiple standards or radios for communications at different range. For example, the IoT device <b>1250</b> may communicate with close devices, e.g., within about 10 meters, using a local transceiver based on BLE, or another low power radio, to save power. More distant mesh devices <b>1264</b>, e.g., within about 50 meters, may be reached over ZigBee or other intermediate power radios. Both communications techniques may take place over a single radio at different power levels, or may take place over separate transceivers, for example, a local transceiver using BLE and a separate mesh transceiver using ZigBee.</p><p id="p-0159" num="0200">A wireless network transceiver <b>1266</b> may be included to communicate with devices or services in the cloud <b>1200</b> via local or wide area network protocols. The wireless network transceiver <b>1266</b> may be a LPWA transceiver that follows the IEEE 802.15.4, or IEEE 802.15.4g standards, among others. The IoT device <b>1250</b> may communicate over a wide area using LoRaWAN&#x2122; (Long Range Wide Area Network) developed by Semtech and the LoRa Alliance. The techniques described herein are not limited to these technologies, but may be used with any number of other cloud transceivers that implement long range, low bandwidth communications, such as Sigfox, and other technologies. Further, other communications techniques, such as time-slotted channel hopping, described in the IEEE 802.15.4e specification may be used.</p><p id="p-0160" num="0201">Any number of other radio communications and protocols may be used in addition to the systems mentioned for the mesh transceiver <b>1262</b> and wireless network transceiver <b>1266</b>, as described herein. For example, the radio transceivers <b>1262</b> and <b>1266</b> may include an LTE or other cellular transceiver that uses spread spectrum (SPA/SAS) communications for implementing high speed communications. Further, any number of other protocols may be used, such as Wi-Fi&#xae; networks for medium speed communications and provision of network communications.</p><p id="p-0161" num="0202">The radio transceivers <b>1262</b> and <b>1266</b> may include radios that are compatible with any number of 3GPP (Third Generation Partnership Project) specifications, notably Long Term Evolution (LTE), Long Term Evolution-Advanced (LTE-A), and Long Term Evolution-Advanced Pro (LTE-A Pro). It may be noted that radios compatible with any number of other fixed, mobile, or satellite communication technologies and standards may be selected. These may include, for example, any Cellular Wide Area radio communication technology, which may include e.g. a 5th Generation (5G) communication systems, a Global System for Mobile Communications (GSM) radio communication technology, a General Packet Radio Service (GPRS) radio communication technology, or an Enhanced Data Rates for GSM Evolution (EDGE) radio communication technology, a UMTS (Universal Mobile Telecommunications System) communication technology, In addition to the standards listed above, any number of satellite uplink technologies may be used for the wireless network transceiver <b>1266</b>, including, for example, radios compliant with standards issued by the ITU (International Telecommunication Union), or the ETSI (European Telecommunications Standards Institute), among others. The examples provided herein are thus understood as being applicable to various other communication technologies, both existing and not yet formulated.</p><p id="p-0162" num="0203">A network interface controller (NIC) <b>1268</b> may be included to provide a wired communication to the cloud <b>1200</b> or to other devices, such as the mesh devices <b>1264</b>. The wired communication may provide an Ethernet connection, or may be based on other types of networks, such as Controller Area Network (CAN), Local Interconnect Network (LIN), DeviceNet, ControlNet, Data Highway+, PROFIBUS, or PROFINET, among many others. An additional NIC <b>1268</b> may be included to allow connect to a second network, for example, a NIC <b>1268</b> providing communications to the cloud over Ethernet, and a second NIC <b>1268</b> providing communications to other devices over another type of network.</p><p id="p-0163" num="0204">Given the variety of types of applicable communications from the device to another component or network, applicable communications circuitry used by the device may include or be embodied by any one or more of components <b>1262</b>, <b>1266</b>, <b>1268</b>, or <b>1270</b>. Accordingly, in various examples, applicable means for communicating (e.g., receiving, transmitting, etc.) may be embodied by such communications circuitry.</p><p id="p-0164" num="0205">The interconnect <b>1256</b> may couple the processor <b>1252</b> to an external interface <b>1270</b> that is used to connect external devices or subsystems. The external devices may include sensors <b>1272</b>, such as accelerometers, level sensors, flow sensors, optical light sensors, camera sensors, temperature sensors, a global positioning system (GPS) sensors, pressure sensors, barometric pressure sensors, and the like. The external interface <b>1270</b> further may be used to connect the IoT device <b>1250</b> to actuators <b>1274</b>, such as power switches, valve actuators, an audible sound generator, a visual warning device, and the like.</p><p id="p-0165" num="0206">In some optional examples, various input/output (I/O) devices may be present within, or connected to, the IoT device <b>1250</b>. For example, a display or other output device <b>1284</b> may be included to show information, such as sensor readings or actuator position. An input device <b>1286</b>, such as a touch screen or keypad may be included to accept input. An output device <b>1284</b> may include any number of forms of audio or visual display, including simple visual outputs such as binary status indicators (e.g., LEDs) and multi-character visual outputs, or more complex outputs such as display screens (e.g., LCD screens), with the output of characters, graphics, multimedia objects, and the like being generated or produced from the operation of the IoT device <b>1250</b>.</p><p id="p-0166" num="0207">A battery <b>1276</b> may power the IoT device <b>1250</b>, although in examples in which the IoT device <b>1250</b> is mounted in a fixed location, it may have a power supply coupled to an electrical grid. The battery <b>1276</b> may be a lithium ion battery, or a metal-air battery, such as a zinc-air battery, an aluminum-air battery, a lithium-air battery, and the like.</p><p id="p-0167" num="0208">A battery monitor/charger <b>1278</b> may be included in the IoT device <b>1250</b> to track the state of charge (SoCh) of the battery <b>1276</b>. The battery monitor/charger <b>1278</b> may be used to monitor other parameters of the battery <b>1276</b> to provide failure predictions, such as the state of health (SoH) and the state of function (SoF) of the battery <b>1276</b>. The battery monitor/charger <b>1278</b> may include a battery monitoring integrated circuit, such as an LTC4020 or an LTC2990 from Linear Technologies, an ADT7488A from ON Semiconductor of Phoenix Ariz., or an IC from the UCD90xxx family from Texas Instruments of Dallas, Tex. The battery monitor/charger <b>1278</b> may communicate the information on the battery <b>1276</b> to the processor <b>1252</b> over the interconnect <b>1256</b>. The battery monitor/charger <b>1278</b> may also include an analog-to-digital (ADC) convertor that allows the processor <b>1252</b> to directly monitor the voltage of the battery <b>1276</b> or the current flow from the battery <b>1276</b>. The battery parameters may be used to determine actions that the IoT device <b>1250</b> may perform, such as transmission frequency, mesh network operation, sensing frequency, and the like.</p><p id="p-0168" num="0209">A power block <b>1280</b>, or other power supply coupled to a grid, may be coupled with the battery monitor/charger <b>1278</b> to charge the battery <b>1276</b>. In some examples, the power block <b>1280</b> may be replaced with a wireless power receiver to obtain the power wirelessly, for example, through a loop antenna in the IoT device <b>1250</b>. A wireless battery charging circuit, such as an LTC4020 chip from Linear Technologies of Milpitas, Calif., among others, may be included in the battery monitor/charger <b>1278</b>. The specific charging circuits chosen depend on the size of the battery <b>1276</b>, and thus, the current required. The charging may be performed using the Airfuel standard promulgated by the Airfuel Alliance, the Qi wireless charging standard promulgated by the Wireless Power Consortium, or the Rezence charging standard, promulgated by the Alliance for Wireless Power, among others.</p><p id="p-0169" num="0210">The storage <b>1258</b> may include instructions <b>1282</b> in the form of software, firmware, or hardware commands to implement the techniques described herein. Although such instructions <b>1282</b> are shown as code blocks included in the memory <b>1254</b> and the storage <b>1258</b>, it may be understood that any of the code blocks may be replaced with hardwired circuits, for example, built into an application specific integrated circuit (ASIC).</p><p id="p-0170" num="0211">In an example, the instructions <b>1282</b> provided via the memory <b>1254</b>, the storage <b>1258</b>, or the processor <b>1252</b> may be embodied as a non-transitory, machine readable medium <b>1260</b> including code to direct the processor <b>1252</b> to perform electronic operations in the IoT device <b>1250</b>. The processor <b>1252</b> may access the non-transitory, machine readable medium <b>1260</b> over the interconnect <b>1256</b>. For instance, the non-transitory, machine readable medium <b>1260</b> may be embodied by devices described for the storage <b>1258</b> of <figref idref="DRAWINGS">FIG. <b>12</b></figref> or may include specific storage units such as optical disks, flash drives, or any number of other hardware devices. The non-transitory, machine readable medium <b>1260</b> may include instructions to direct the processor <b>1252</b> to perform a specific sequence or flow of actions, for example, as described with respect to the flowchart(s) and block diagram(s) of operations and functionality depicted above.</p><p id="p-0171" num="0212">In still a specific example, the instructions <b>1288</b> on the processor <b>1252</b> (separately, or in combination with the instructions <b>1288</b> of the machine readable medium <b>1260</b>) may configure execution or operation of a trusted execution environment (TEE) <b>1290</b>. In an example, the TEE <b>1290</b> operates as a protected area accessible to the processor <b>1252</b> for secure execution of instructions and secure access to data. Various implementations of the TEE <b>1290</b>, and an accompanying secure area in the processor <b>1252</b> or the memory <b>1254</b> may be provided, for instance, through use of Intel&#xae; Software Guard Extensions (SGX) or ARM&#xae; TrustZone&#xae; hardware security extensions, Intel&#xae; Management Engine (ME), or Intel&#xae; Converged Security Manageability Engine (CSME). Other aspects of security hardening, hardware roots-of-trust, and trusted or protected operations may be implemented in the device <b>1250</b> through the TEE <b>1290</b> and the processor <b>1252</b>.</p><p id="p-0172" num="0213">In further examples, a machine-readable medium also includes any tangible medium that is capable of storing, encoding or carrying instructions for execution by a machine and that cause the machine to perform any one or more of the methodologies of the present disclosure or that is capable of storing, encoding or carrying data structures utilized by or associated with such instructions. A &#x201c;machine-readable medium&#x201d; thus may include, but is not limited to, solid-state memories, and optical and magnetic media. Specific examples of machine-readable media include non-volatile memory, including but not limited to, by way of example, semiconductor memory devices (e.g., electrically programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM)) and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The instructions embodied by a machine-readable medium may further be transmitted or received over a communications network using a transmission medium via a network interface device utilizing any one of a number of transfer protocols (e.g., HTTP).</p><p id="p-0173" num="0214">It should be understood that the functional units or capabilities described in this specification may have been referred to or labeled as components or modules, in order to more particularly emphasize their implementation independence. Such components may be embodied by any number of software or hardware forms. For example, a component or module may be implemented as a hardware circuit comprising custom very-large-scale integration (VLSI) circuits or gate arrays, off-the-shelf semiconductors such as logic chips, transistors, or other discrete components. A component or module may also be implemented in programmable hardware devices such as field programmable gate arrays, programmable array logic, programmable logic devices, or the like. Components or modules may also be implemented in software for execution by various types of processors. An identified component or module of executable code may, for instance, comprise one or more physical or logical blocks of computer instructions, which may, for instance, be organized as an object, procedure, or function. Nevertheless, the executables of an identified component or module need not be physically located together, but may comprise disparate instructions stored in different locations which, when joined logically together, comprise the component or module and achieve the stated purpose for the component or module.</p><p id="p-0174" num="0215">Indeed, a component or module of executable code may be a single instruction, or many instructions, and may even be distributed over several different code segments, among different programs, and across several memory devices or processing systems. In particular, some aspects of the described process (such as code rewriting and code analysis) may take place on a different processing system (e.g., in a computer in a data center), than that in which the code is deployed (e.g., in a computer embedded in a sensor or robot). Similarly, operational data may be identified and illustrated herein within components or modules, and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set, or may be distributed over different locations including over different storage devices, and may exist, at least partially, merely as electronic signals on a system or network. The components or modules may be passive or active, including agents operable to perform desired functions.</p><p id="p-0175" num="0216">Additional examples of the presently described method, system, and device embodiments include the following, non-limiting configurations. Each of the following non-limiting examples may stand on its own, or may be combined in any permutation or combination with any one or more of the other examples provided below or throughout the present disclosure.</p><p id="p-0176" num="0217">Example 1 is a device, comprising: communications circuitry; processing circuitry; and a memory device including instructions embodied thereon, wherein the instructions, which when executed by the processing circuitry, configure the processing circuitry to perform operations comprising: instantiating, at the device and in response to receiving a RESTful message by the device, a first device management (DM) service instance; operating the first DM service instance; instantiating, at a second device and in response to the receiving of the RESTful message, a second DM service instance, based on a request provided from the device to the second device; and causing the operation of the second DM service instance, based on the request provided from the device to the second device.</p><p id="p-0177" num="0218">In Example 2, the subject matter of Example 1 includes, the first DM service instance and the second DM service instance operating in a same DM service role, and wherein the second DM service instance is established as a peer service instance of the first DM service instance.</p><p id="p-0178" num="0219">In Example 3, the subject matter of Examples 1-2 includes, the first DM service instance and the second DM service instance operating in different DM service roles, and wherein the second DM service instance is established as a subordinate service instance of the first DM service instance operating as a superior service instance.</p><p id="p-0179" num="0220">In Example 4, the subject matter of Example 3 includes, the subordinate service instance being one of a plurality of subordinate services instances defined in a domain, and wherein the plurality of subordinate service instances and associated devices belong to the superior first DM service instance.</p><p id="p-0180" num="0221">In Example 5, the subject matter of Examples 1-4 includes, the first DM service instance operating in a DM service role as a device owner transfer service (DOTS), and wherein the second DM service instance operates in a DM service role as a DOTS, an access management service (AMS), a credential management service (CMS), a domain controller (DC), or a zone controller (ZC).</p><p id="p-0181" num="0222">In Example 6, the subject matter of Examples 1-5 includes: onboarding and provisioning the device onto a device network, as an initial step in response to the receiving of the RESTful message by the device, wherein the operations of instantiating the first DM service instance occur after the onboarding and provisioning.</p><p id="p-0182" num="0223">In Example 7, the subject matter of Examples 1-6 includes: receiving the RESTful message at the device, wherein the RESTful message comprises a CREATE message; creating one or more resources on the device, in a first array of resources, based on the CREATE message; and creating one or more resources on the second device, in a second array of resources, based on the CREATE message.</p><p id="p-0183" num="0224">In Example 8, the subject matter of Examples 1-7 includes: receiving a second RESTful message, wherein the second RESTful message comprises an UPDATE or DELETE message; and modifying the operation of the second DM service instance based on the second RESTful message.</p><p id="p-0184" num="0225">In Example 9, the subject matter of Examples 1-8 includes: instantiating, at a third device and in response to the receiving of the RESTful message, a third DM service instance, based on a second request provided from the device to the third device; and causing the operation of the third DM service instance.</p><p id="p-0185" num="0226">In Example 10, the subject matter of Example 9 includes, the second DM service instance being established as a peer service instance of the first DM service instance, and wherein the third DM service instance is established as a subordinate service instance of the first DM service instance, the first DM service instance being established as superior to the subordinate service instance.</p><p id="p-0186" num="0227">In Example 11, the subject matter of Examples 1-10 includes, the second device being a member of a trusted device collection.</p><p id="p-0187" num="0228">In Example 12, the subject matter of Example 11 includes, the trusted device collection including an array of resource model properties, wherein the array of resource model properties is used to define properties of operation for the first DM service instance.</p><p id="p-0188" num="0229">In Example 13, the subject matter of Examples 1-12 includes, functions of the first DM service instance and the second DM service instance being represented in respective sets of resource data sets available to the device and the second device.</p><p id="p-0189" num="0230">In Example 14, the subject matter of Examples 1-13 includes, the device operating the first device management (DM) service instance as a service of an onboarding tool, and wherein the onboarding tool operates according to an Open Connectivity Foundation (OCF) specification.</p><p id="p-0190" num="0231">Example 15 is a method for establishing a device management (DM) service configuration in a device network, using operations performed by a device comprising: instantiating, at the device and in response to receiving a RESTful message by the device, a first device management (DM) service instance; operating the first DM service instance; instantiating, at a second device and in response to the receiving of the RESTful message, a second DM service instance, based on a request provided from the device to the second device; and causing the operation of the second DM service instance, based on the request provided from the device to the second device.</p><p id="p-0191" num="0232">In Example 16, the subject matter of Example 15 includes, the first DM service instance and the second DM service instance operating in a same DM service role, and wherein the second DM service instance is established as a peer service instance of the first DM service instance.</p><p id="p-0192" num="0233">In Example 17, the subject matter of Examples 15-16 includes, the first DM service instance and the second DM service instance operating in different DM service roles, and wherein the second DM service instance is established as a subordinate service instance of the first DM service instance operating as a superior service instance.</p><p id="p-0193" num="0234">In Example 18, the subject matter of Example 17 includes, the subordinate service instance being one of a plurality of subordinate services instances defined in a domain, and wherein the plurality of subordinate services and associated devices belong to the superior first DM service instance.</p><p id="p-0194" num="0235">In Example 19, the subject matter of Examples 15-18 includes, the first DM service instance operating in a DM service role as a device owner transfer service (DOTS), and wherein the second DM service instance operates in a DM service role as a DOTS, an access management service (AMS), a credential management service (CMS), a domain controller (DC), or a zone controller (ZC).</p><p id="p-0195" num="0236">In Example 20, the subject matter of Examples 15-19 includes: onboarding and provisioning the device onto a device network, as an initial step in response to the receiving of the RESTful message by the device, wherein the operations of instantiating the first DM service instance occur after the onboarding and provisioning.</p><p id="p-0196" num="0237">In Example 21, the subject matter of Examples 15-20 includes: receiving the RESTful message at the device, wherein the RESTful message comprises a CREATE message; creating one or more resources on the device, in a first array of resources, based on the CREATE message; and creating one or more resources on the second device, in a second array of resources, based on the CREATE message.</p><p id="p-0197" num="0238">In Example 22, the subject matter of Examples 15-21 includes: receiving a second RESTful message, wherein the second RESTful message comprises an UPDATE or DELETE message; and modifying the operation of the second DM service instance based on the second RESTful message.</p><p id="p-0198" num="0239">In Example 23, the subject matter of Examples 15-22 includes: instantiating, at a third device and in response to the receiving of the RESTful message, a third DM service instance, based on a second request provided from the device to the third device; and causing the operation of the third DM service instance.</p><p id="p-0199" num="0240">In Example 24, the subject matter of Example 23 includes, the second DM service instance being established as a peer service instance of the first DM service instance, and wherein the third DM service instance is established as a subordinate service instance of the first DM service instance, the first DM service instance being established as superior to the subordinate service instance.</p><p id="p-0200" num="0241">In Example 25, the subject matter of Examples 15-24 includes, the second device being a member of a trusted device collection.</p><p id="p-0201" num="0242">In Example 26, the subject matter of Example 25 includes, the trusted device collection including an array of resource model properties, wherein the array of resource model properties is used to define properties of operation for the first DM service instance.</p><p id="p-0202" num="0243">In Example 27, the subject matter of Examples 15-26 includes, functions of the first DM service instance and the second DM service instance being represented in respective sets of resource data sets available to the device and the second device.</p><p id="p-0203" num="0244">In Example 28, the subject matter of Examples 15-27 includes, the device operating the first device management (DM) service instance as a service of an onboarding tool, and wherein the onboarding tool operates according to an Open Connectivity Foundation (OCF) specification.</p><p id="p-0204" num="0245">Example 29 is a machine-readable storage medium including instructions, wherein the instructions, when executed by a processing circuitry of a device, cause the processing circuitry to perform operations of any of Examples 15 to 28.</p><p id="p-0205" num="0246">Example 30 is a system, comprising: a first device, comprising communications circuitry and processing circuitry, the communications circuitry operable to receive and transmit messages that manage a superior device management (DM) service, and the processing circuitry configured to perform operations that: instantiate, at the first device and in response to receiving a RESTful message with the communications circuitry, a first device management (DM) service instance; and operate the first DM service instance; a second device, comprising communications circuitry and processing circuitry, the communications circuitry operable to receive and transmit messages that manage a subordinate DM service, and the processing circuitry configured to perform operations that: instantiate, at the second device and in response to the receiving of the RESTful message at the first device, a second DM service instance that is a subordinate service to the first DM service instance, based on a request provided from the first device to the second device; and operate the second DM service instance, based on the request provided from the first device to the second device.</p><p id="p-0206" num="0247">In Example 31, the subject matter of Example 30 includes, a third device, comprising communications circuitry and processing circuitry, the communications circuitry operable to receive and transmit messages that manage a subordinate DM service, and the processing circuitry configured to perform operations that: instantiate, at the second device and in response to the receiving of the RESTful message, a third DM service instance that is a peer service to the first DM service instance, based on a request provided from the first device to the third device; and operate the third DM service instance, based on the request provided from the first device to the second device.</p><p id="p-0207" num="0248">Example 32 is an apparatus, comprising: means for instantiating, in response to receiving a RESTful message, a first device management (DM) service instance; means for operating the first DM service instance; means for instantiating, at a second device and in response to the receiving of the RESTful message, a second DM service instance, based on a request to the second device; and means for causing the operation of the second DM service instance, based on the request to the second device.</p><p id="p-0208" num="0249">In Example 33, the subject matter of Example 32 includes, the first DM service instance and the second DM service instance operating in a same DM service role, and wherein the second DM service instance is established as a peer service instance of the first DM service instance.</p><p id="p-0209" num="0250">In Example 34, the subject matter of Examples 32-32 includes, the first DM service instance and the second DM service instance operating in different DM service roles, and wherein the second DM service instance is established as a subordinate service instance of the first DM service instance operating as a superior service instance.</p><p id="p-0210" num="0251">In Example 35, the subject matter of Example 34 includes, the subordinate service instance being one of a plurality of subordinate services instances defined in a domain, and wherein the plurality of subordinate services and associated devices belong to the superior first DM service instance.</p><p id="p-0211" num="0252">In Example 36, the subject matter of Examples 32-35 includes, the first DM service instance operating in a DM service role as a device owner transfer service (DOTS), wherein the second DM service instance operates in a DM service role as a DOTS, an access management service (AMS), a credential management service (CMS), a domain controller (DC), or a zone controller (ZC).</p><p id="p-0212" num="0253">In Example 37, the subject matter of Examples 32-36 includes, means for onboarding and provisioning onto a device network, as an initial step in response to the receiving of the RESTful message, wherein the operations of instantiating the first DM service instance occur after the onboarding and provisioning.</p><p id="p-0213" num="0254">In Example 38, the subject matter of Examples 32-37 includes: means for receiving the RESTful message, wherein the RESTful message comprises a CREATE message; means for creating resources, in a first array of resources, based on the CREATE message; and means for creating resources on the second device, in a second array of resources, based on the CREATE message.</p><p id="p-0214" num="0255">In Example 39, the subject matter of Examples 32-38 includes: means for receiving a second RESTful message, wherein the second RESTful message comprises an UPDATE or DELETE message; and means for modifying the operation of the second DM service instance based on the second RESTful message.</p><p id="p-0215" num="0256">In Example 40, the subject matter of Examples 32-39 includes, means for instantiating, at a third device and in response to the receiving of the RESTful message, a third DM service instance, based on a second request to the third device; and means for causing the operation of the third DM service instance.</p><p id="p-0216" num="0257">In Example 41, the subject matter of Example 40 includes, the second DM service instance being established as a peer service instance of the first DM service instance, and wherein the third DM service instance is established as a subordinate service instance of the first DM service instance, the first DM service instance being established as superior to the subordinate service instance.</p><p id="p-0217" num="0258">In Example 42, the subject matter of Examples 32-41 includes, means for managing the second device as member of a trusted device collection.</p><p id="p-0218" num="0259">In Example 43, the subject matter of Example 42 includes, means for updating the trusted device collection, wherein the trusted device collection includes an array of resource model properties, and wherein the array of resource model properties is used to define properties of operation for the first DM service instance.</p><p id="p-0219" num="0260">In Example 44, the subject matter of Examples 32-43 includes, means for representing and managing functions of the first DM service instance and the second DM service instance in respective sets of resource data sets available for devices.</p><p id="p-0220" num="0261">Example 45 is an IoT services platform adapted to perform the operations of any of Examples 1 to 44.</p><p id="p-0221" num="0262">Example 46 is a fog platform adapted to perform the operations of any of Examples 1 to 44.</p><p id="p-0222" num="0263">Example 47 is an Open Connectivity Foundation (OCF) device, configured as a server, client, or intermediary according to an OCF specification, comprising means to implement the operations of any of Examples 1 to 44.</p><p id="p-0223" num="0264">Example 48 is a device owner transfer service management service adapted to perform the operations invoked by any of Examples 1 to 44.</p><p id="p-0224" num="0265">Example 49 is an access management service adapted to perform the operations invoked by any of Examples 1 to 44.</p><p id="p-0225" num="0266">Example 50 is a credential management service adapted to perform the operations invoked by any of Examples 1 to 44.</p><p id="p-0226" num="0267">Example 51 is an Internet of Things (IoT) network topology, the IoT network topology comprising respective communication links adapted to perform communications for the operations of any of Examples 1 to 44.</p><p id="p-0227" num="0268">Example 52 is a network comprising respective devices and device communication mediums for performing any of the operations of Examples 1 to 44.</p><p id="p-0228" num="0269">Example 53 is an edge cloud computing device implementation comprising processing nodes and computing units adapted for performing any of the operations of Examples 1 to 44.</p><p id="p-0229" num="0270">Example 54 is an edge cloud network platform comprising physical and logical computing resources adapted for performing any of the operations of Examples 1 to 44.</p><p id="p-0230" num="0271">Example 55 is an apparatus comprising means for performing any of the operations of Examples 1 to 44.</p><p id="p-0231" num="0272">Example 56 is a system to perform the operations of any of Examples 1 to 44.</p><p id="p-0232" num="0273">The operations and functionality described above in these examples, and in the specific embodiments described with reference to <figref idref="DRAWINGS">FIGS. <b>3</b> to <b>10</b></figref>, may apply in a variety of network settings such as IoT networking, edge networking, fog networking, cloud networking, and all hybrids thereof. The operations and functionality of these examples and configurations may occur in a distributed fashion, including in distributed networked settings where one aspect of the functionality is performed by a first IoT edge device or edge network, another aspect of the functionality is performed by a fog network or platform, and yet another aspect of the functionality is performed by a cloud device or system. Further combinations which follow these shared, distributed, or grouping principles, as suggested in the examples and configurations above, can be employed. Accordingly, it will be evident that the functionality described herein may be operable to work within many permutations of the examples and configurations above, and like variations.</p><p id="p-0233" num="0274">In the above Detailed Description, various features may be grouped together to streamline the disclosure. However, the claims may not set forth every feature disclosed herein as embodiments may feature a subset of said features. Further, embodiments may include fewer features than those disclosed in a particular example. Thus, the following claims are hereby incorporated into the Detailed Description, with a claim standing on its own as a separate embodiment.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. (canceled)</claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. A device, comprising:<claim-text>communications circuitry to communicate with a network of devices;</claim-text><claim-text>processing circuitry; and</claim-text><claim-text>a memory device including instructions stored thereon, which, when executed by the processing circuitry cause the processing circuitry to perform operations, the operations to:<claim-text>instantiate, at the device and in response to receiving a RESTful message by the device, a first instance of a device management (DM) service, wherein the first DM service instance is used to dynamically provide a requested onboarding, on demand, to other devices in the network;</claim-text><claim-text>operate the first instance of the DM service;</claim-text><claim-text>verify that a second device has been onboarded to the network of devices by operation of the first instance of the DM service;</claim-text><claim-text>cause, at the second device and in response to receiving of the RESTful message, instantiation of a second instance of the DM service, based on a request provided from the device to the second device, wherein the second instance of the DM service is used to dynamically provide another requested onboarding, on demand, to the other devices of the network of devices, and</claim-text><claim-text>cause the operation of the second instance of the DM service at the second device.</claim-text></claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the requested onboarding includes operations to at least one of:<claim-text>introduce the second device into a domain, configure ownership of the second device with an onboarding tool and use an owner transfer method in the onboarding tool to establish ownership of the second device, or provision the second device; and</claim-text><claim-text>wherein success of the requested onboarding causes the second device to join the network of devices.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The device of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the second instance of the DM service is established as a subordinate service instance of the first instance of the DM service operating as a superior service instance, and wherein the subordinate service instance is one of a plurality of subordinate service instances defined in the domain, and wherein the plurality of subordinate service instances and associated devices belong to the superior first instance of the DM instance.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The device of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the another requested onboarding includes operations to at least one of:<claim-text>introduce a third device of the other network devices into the domain, configure ownership of the third device with an onboarding tool and use an owner transfer method in the onboarding tool to establish ownership of the third device, or provision the third device; and</claim-text><claim-text>wherein success of the another requested onboarding causes the third device to join the network of devices.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein to provision at least one of the second device or the third device includes to provision a security resource on the second device or the third device.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, the operations to:<claim-text>verify that the third device has been onboarded to the network of devices by operation of the second instance of the DM service;</claim-text><claim-text>instantiate at the third device and in response to the receiving of the RESTful message, a third instance of the DM service, based on a second request provided from the device to the third device, wherein the third instance of the DM service is used to dynamically provide another subsequent requested onboarding, access management, and credential management service, on demand, to the other devices in the network of devices, and wherein the onboarding of the third device is a prerequisite to instantiating the third instance of the DM service; and</claim-text><claim-text>cause the operation of the third instance of the DM service.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the first instance of the DM service is used to dynamically provide a first access management and a first credential management service, on demand, to other devices in the network of devices.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the second instance of the DM service is used to dynamically provide a second access management and a second credential management service, on demand, to other devices in the network of devices, and wherein the onboarding of the second device is a prerequisite to instantiating the second instance of the DM service.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the second instance of the DM service is established as a peer service instance to the first instance of the DM service.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, the operations to:<claim-text>onboard and provision the device onto the network of devices, as an initial step in response to the receiving of the RESTful message by the device, wherein the operations of the instantiating the first instance of the DM service occur after the onboarding and provisioning of the device onto the network of devices.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, the operations comprise:<claim-text>receive the RESTful message at the device, the RESTful message including a CREATE message;</claim-text><claim-text>create one or more resources on the device, in a first array of resources, based on the CREATE message; and</claim-text><claim-text>create one or more resources in the second device, in a second array of resources, based on the CREATE message.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, the operations further to:<claim-text>receive a second RESTful message, wherein the second RESTful message includes an UPDATE message or a DELETE message; and</claim-text><claim-text>modify the operation of the second DM service instance based on the second RESTful message.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A method for establishing a device management (DM) service configuration in a device network, the method comprising:<claim-text>instantiating, at the device and in response to receiving a RESTful message by the device, a first instance of a device management (DM) service, wherein the first DM service instance is used to dynamically provide a requested onboarding, on demand, to other devices in the network;</claim-text><claim-text>causing the operation of the first instance of the DM service;</claim-text><claim-text>verifying that a second device has been onboarded to the network of devices by operation of the first instance of the DM service;</claim-text><claim-text>causing, at the second device and in response to receiving of the RESTful message, instantiation of a second instance of the DM service, based on a request provided from the device to the second device, wherein the second instance of the DM service is used to dynamically provide another requested onboarding, on demand, to the other devices of the network of devices, and</claim-text><claim-text>causing the operation of the second instance of the DM service at the second device.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the requested onboarding includes at least one of:<claim-text>introducing the second device into a domain, configuring ownership of the second device with an onboarding tool and using an owner transfer method in the onboarding tool to establish ownership of the second device, or provisioning the second device; and</claim-text><claim-text>wherein success of the requested onboarding causes the second device to join the network of devices.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the second instance of the DM service is established as a subordinate service instance of the first instance of the DM service operating as a superior service instance, and wherein the subordinate service instance is one of a plurality of subordinate service instances defined in the domain, and wherein the plurality of subordinate service instances and associated devices belong to the superior first instance of the DM instance.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the another requested onboarding includes at least one of:<claim-text>introducing a third device of the other network devices into the domain, configuring ownership of the third device with an onboarding tool and using an owner transfer method in the onboarding tool to establish ownership of the third device, or provisioning the third device; and</claim-text><claim-text>wherein success of the another requested onboarding causes the third device to join the network of devices.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein provisioning at least one of the second device or the third device includes provisioning of a security resource on the second device or the third device.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, comprising:<claim-text>verifying that the third device has been onboarded to the network of devices by operation of the second instance of the DM service;</claim-text><claim-text>instantiating at the third device and in response to the receiving of the RESTful message, a third instance of the DM service, based on a second request provided from the device to the third device, wherein the third instance of the DM service is used to dynamically provide another subsequent requested onboarding, access management, and credential management service, on demand, to the other devices in the network of devices, and wherein the onboarding of the third device is a prerequisite to instantiating the third instance of the DM service; and</claim-text><claim-text>causing the operation of the third instance of the DM service.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising:<claim-text>onboarding and provisioning the device onto the network of devices, as an initial step in response to the receiving of the RESTful message by the device, wherein the operations of the instantiating the first instance of the DM service occur after the onboarding and provisioning of the device onto the network of devices.</claim-text></claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. A system for establishing a device management (DM) service configuration in a device network, the system comprising:<claim-text>means for instantiating, at the device and in response to receiving a RESTful message by the device, a first instance of a device management (DM) service, wherein the first DM service instance is used to dynamically provide a requested onboarding, on demand, to other devices in the network;</claim-text><claim-text>means for operating the first instance of the DM service;</claim-text><claim-text>means for verifying that a second device has been onboarded to the network of devices by operation of the first instance of the DM service;</claim-text><claim-text>means for causing, at the second device and in response to receiving of the RESTful message, instantiation of a second instance of the DM service, based on a request provided from the device to the second device, wherein the second instance of the DM service is used to dynamically provide another requested onboarding, on demand, to the other devices of the network of devices, and</claim-text><claim-text>means for causing the operation of the second instance of the DM service at the second device.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the requested onboarding includes at least one of:<claim-text>introducing the second device into a domain, configuring ownership of the second device with an onboarding tool and using an owner transfer method in the onboarding tool to establish ownership of the second device, or provisioning the second device; and</claim-text><claim-text>wherein success of the requested onboarding causes the second device to join the network of devices.</claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The system of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the another requested onboarding includes at least one of:<claim-text>introducing a third device of the other network devices into the domain, configuring ownership of the third device with an onboarding tool and using an owner transfer method in the onboarding tool to establish ownership of the third device, or provisioning the third device; and</claim-text><claim-text>wherein success of the another requested onboarding causes the third device to join the network of devices.</claim-text></claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the first instance of the DM service is used to dynamically provide a first access management and a first credential management service, on demand, to other devices in the network of devices.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the second instance of the DM service is used to dynamically provide a second access management and a second credential management service, on demand, to other devices in the network of devices, and wherein the onboarding of the second device is a prerequisite to instantiating the second instance of the DM service.</claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, comprising:<claim-text>means for receiving the RESTful message at the device, the RESTful message including a CREATE message;</claim-text><claim-text>means for creating one or more resources on the device, in a first array of resources, based on the CREATE message;</claim-text><claim-text>means for creating one or more resources in the second device, in a second array of resources, based on the CREATE message;</claim-text><claim-text>means for receiving a second RESTful message, wherein the second RESTful message includes an UPDATE message or a DELETE message; and</claim-text><claim-text>means for modifying the operation of the second DM service instance based on the second RESTful message.</claim-text></claim-text></claim></claims></us-patent-application>