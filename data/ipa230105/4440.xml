<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004441A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004441</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17941974</doc-number><date>20220909</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>41</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>901</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>5055</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>5038</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>433</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9024</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHODS AND APPARATUS TO HANDLE DEPENDENCIES ASSOCIATED WITH RESOURCE DEPLOYMENT REQUESTS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16932521</doc-number><date>20200717</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11442784</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17941974</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>VMware, Inc.</orgname><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Sanchez</last-name><first-name>Sergio</first-name><address><city>Sofia</city><country>BG</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Muleshkov</last-name><first-name>Georgi</first-name><address><city>Sofia</city><country>BG</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Hadjiiski</last-name><first-name>Stanislav Asenov</first-name><address><city>Sofia</city><country>BG</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Shipkovenski</last-name><first-name>Miroslav</first-name><address><city>Sofia</city><country>BG</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Georgiev</last-name><first-name>Radostin</first-name><address><city>Sofia</city><country>BG</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An example apparatus includes a dependency graph generator to generate a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on a second resource, a verification controller to generate a status indicator after a determination that a time-based ordering of a first request relative to a second request satisfies the dependency graph, and a resource controller to cause transmission of the first request and the second request to the resource-based service based on the dependency graph, and, after determining that the time-based ordering of the first request relative to the second request satisfies the dependency graph, cause transmission of the status indicator to a user device.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="213.44mm" wi="135.21mm" file="US20230004441A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="207.26mm" wi="127.59mm" file="US20230004441A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="222.76mm" wi="173.23mm" file="US20230004441A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="122.26mm" wi="149.94mm" file="US20230004441A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="243.08mm" wi="146.73mm" file="US20230004441A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="167.56mm" wi="167.47mm" file="US20230004441A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="172.80mm" wi="146.73mm" file="US20230004441A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="213.19mm" wi="146.81mm" file="US20230004441A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="127.59mm" wi="146.81mm" file="US20230004441A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="173.48mm" wi="167.39mm" file="US20230004441A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="230.21mm" wi="146.73mm" file="US20230004441A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="167.56mm" wi="163.83mm" file="US20230004441A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="129.46mm" wi="178.48mm" file="US20230004441A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="189.40mm" wi="147.66mm" file="US20230004441A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="230.04mm" wi="137.24mm" file="US20230004441A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="211.41mm" wi="143.59mm" file="US20230004441A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="233.93mm" wi="137.41mm" file="US20230004441A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="200.49mm" wi="159.00mm" file="US20230004441A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="142.83mm" wi="63.84mm" file="US20230004441A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="99.31mm" wi="111.00mm" file="US20230004441A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="108.80mm" wi="148.67mm" file="US20230004441A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATION</heading><p id="p-0002" num="0001">This patent arises from a continuation of U.S. patent application Ser. No. 16/932,521, which was filed on Jul. 17, 2020. U.S. patent application Ser. No. 16/932,521 is hereby incorporated herein by reference in its entirety. Priority to U.S. patent application Ser. No. 16/932,521 is hereby claimed.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD OF THE DISCLOSURE</heading><p id="p-0003" num="0002">This disclosure relates generally to computer systems, and, more particularly, to methods and apparatus to handle dependencies associated with resource deployment requests.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">A software-defined data center (SDDC) is a data center implemented by software in which hardware is virtualized and provided to users as services. SDDCs allow for dynamically configuring and deploying applications and resources per customer requests and per customer-defined specifications and performance.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic illustration of an example SDDC environment.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram representative of an example resource dependency manager of the example SDDC environment of <figref idref="DRAWINGS">FIG. <b>1</b></figref></p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts an example dependency graph.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an example Yet Another Markup Language (Yaml) file that represents resources of the dependency graph of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts an example dependency graph of an example WordPress and database application.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIGS. <b>6</b>A-<b>6</b>C</figref> is an example Yaml file that represents resources of the dependency graph of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts an example dependency graph of an example banking application.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is an example Yaml file that represents resources of the dependency graph of <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>9</b>A</figref> depicts an example model of an example voting application.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>9</b>B</figref> depicts an example dependency graph of the example voting application of <figref idref="DRAWINGS">FIG. <b>9</b>A</figref>.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is an example Yaml file that represents resources of the dependency graph of <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flowchart representative of example machine readable instructions which may be executed to implement the example resource dependency manager of <figref idref="DRAWINGS">FIG. <b>2</b></figref> to manage resource deployments in accordance with teachings of this disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart representative of example machine readable instructions which may be executed to implement the example dependency graph generator of <figref idref="DRAWINGS">FIG. <b>2</b></figref> to generate a dependency graph.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart representative of example machine readable instructions which may be executed to implement the example verification controller of <figref idref="DRAWINGS">FIG. <b>2</b></figref> to handle a resource error.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a block diagram of an example processing platform structured to execute the instructions of <figref idref="DRAWINGS">FIGS. <b>11</b>, <b>12</b></figref>, and/or <b>13</b> to implement the example resource based manager of <figref idref="DRAWINGS">FIG. <b>1</b></figref> to manage resource request deployments in accordance with teachings of this disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a block diagram of an example software distribution platform to distribute software (e.g., software corresponding to the example computer readable instructions of <figref idref="DRAWINGS">FIGS. <b>11</b>-<b>13</b></figref>) to client devices such as consumers (e.g., for license, sale and/or use), retailers (e.g., for sale, re-sale, license, and/or sub-license), and/or original equipment manufacturers (OEMs) (e.g., for inclusion in products to be distributed to, for example, retailers and/or to direct buy customers).</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a block diagram of a prior technique to handle dependencies associated with resource deployment requests.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a block diagram of example techniques disclosed herein to handle dependencies associated with resource deployment requests using the example resource dependency manager of <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref>.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0023" num="0022">The figures are not to scale. Instead, the thickness of the layers or regions may be enlarged in the drawings. In general, the same reference numbers will be used throughout the drawing(s) and accompanying written description to refer to the same or like parts.</p><p id="p-0024" num="0023">Descriptors &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; etc. are used herein when identifying multiple elements or components which may be referred to separately. Unless otherwise specified or understood based on their context of use, such descriptors are not intended to impute any meaning of priority, physical order or arrangement in a list, or ordering in time but are merely used as labels for referring to multiple elements or components separately for ease of understanding the disclosed examples. In some examples, the descriptor &#x201c;first&#x201d; may be used to refer to an element in the detailed description, while the same element may be referred to in a claim with a different descriptor such as &#x201c;second&#x201d; or &#x201c;third.&#x201d; In such instances, it should be understood that such descriptors are used merely for ease of referencing multiple elements or components.</p><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0025" num="0024">An SDDC environment typically requires deployment of compute resources, network resources, storage resources, and security protocols. Deployment errors may occur and the system state may be inconsistent if these configurations are not done properly. In recent years, complex resource-based services are increasingly popular. As used herein, a resource-based service is a service in which resources are created and/or managed declaratively rather than procedurally. For example, the resource-based service can be KUBERNETES&#xae;, which allows users to define and/or use one or more different types of resources and define their own resource types. In some examples, a resource is created and/or managed declaratively via Yaml definitions and a representational state transfer (REST) application programming interface (API). In examples disclosed herein, an SDDC receives one or more resource requests and deploys the resource requests via a resource-based service. The resources can be virtual compute resources, virtual storage resources, and virtual network resources. In prior techniques, the problem comes when a user wants to build or define something complex based on multiple resources and/or resource types.</p><p id="p-0026" num="0025">Resource deployments can be structured to comply with one or more resource dependencies. As used herein, a resource dependency is a relationship between two or more resources, wherein a first resource must be deployed and fulfilled before the second resource is deployed. In prior techniques, resource dependencies of a resource deployment are not determined before deployment. This creates a potential for an error in creating structures in an RBS. That is, the resources may be deployed in an order regardless of potential dependencies between resources. As such, even if a first resource is dependent on a second resource, the first and second resources may be deployed in parallel (e.g., concurrently) and result in a failed deployment, generating an error message. Some prior techniques include a user manually checking the error message and making updates to the resource deployments. However, checking and updating a resource deployment relies on a user's knowledge of all dependencies, deployment timings, etc. between all resources to be used. Although this may be manageable by a user for a small number of resources, it is unlikely for a user to know all possible resource dependencies when the number of resources grows and/or new resource types are introduced. In some prior techniques, the RBS handles knowledge of resource dependencies. However, if the RBS is not well designed, the resource types cannot be easily extended because those extensions could break dependencies between existing resource types and/or introduce new dependencies with new resource types.</p><p id="p-0027" num="0026">Unlike prior techniques of managing resource dependencies, examples disclosed herein provide a resource dependency manager to handle the dependency management responsibility. As such, the dependency management responsibility can be shifted away from users and resource-based services. Examples disclosed herein compare one or more resources of a resource deployment to a dependency graph to determine if the resource deployment is feasible with resource dependencies. This comparison is used to determine a resource deployment order, which represents a time-based ordering and/or timing schedule of deploying the one or more resources of a resource request from a user. After the initial resource deployment order is determined, the order is verified in real-time to further determine whether the order satisfies the resource dependencies. If the deployment order does not satisfy a resource dependency, a resource deployment can be delayed, a time interval between resource deployments can be increased, and/or the dependency graph can be updated. When the resource deployment satisfies the corresponding resource dependencies, an indicator that the resource requests have been fulfilled can be generated.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic illustration of an example SDDC environment. The example SDDC environment of <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes an example user device <b>100</b>, an example network <b>102</b>, and an example SDDC <b>104</b>. The example SDDC <b>104</b> includes an example resource dependency manager <b>106</b>, an example resource-based service <b>108</b>, and example virtual resources <b>110</b>. The example user device <b>100</b> and the example SDDC <b>104</b> communicate via the example network <b>102</b>.</p><p id="p-0029" num="0028">The user device <b>100</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref> receives resource requests from a user. For example, the user device <b>100</b> receives one or more resource requests from a user to build a structure (e.g., a high-level service, a component, etc.). The user device <b>100</b> sends the one or more resource requests to the SDDC <b>104</b> via the network <b>102</b>. For example, the user device <b>100</b> may be a workstation, computer, a server host running one or more virtual machines and/or containers, a computing tablet, a smartphone, etc.</p><p id="p-0030" num="0029">The SDDC <b>104</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref> virtualizes the network resources and storage resources allocated for resource-based services and/or applications. In examples disclosed herein, the SDDC <b>104</b> provides the resources to be managed by the resource dependency manager <b>106</b> for use in the resource-based service <b>108</b>.</p><p id="p-0031" num="0030">The resource dependency manager <b>106</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref> determines an ordering of resource deployments by comparing resource requests from the user device <b>100</b> to a resource dependency database. The example resource dependency manager <b>106</b> determines whether there are resource dependencies between one or more resources in the resource request based on a resource dependency database. The example resource dependency manager <b>106</b> generates a dependency graph based on the one or more dependencies between one or more resources of the resource request. That is, the example resource dependency manager <b>106</b> determines a deployment order of the resources of the resource requests based on resource dependencies. The example resource dependency manager <b>106</b> verifies the order of the resource deployments. For example, the resource dependency manager <b>106</b> tracks whether the resource-based service <b>108</b> generates an error message. In response to an error message, the example resource dependency manager <b>106</b> may redeploy the resource request, introduce a time delay between resource deployments, and/or update the resource dependency database and/or dependency graph.</p><p id="p-0032" num="0031">In examples disclosed herein, the resource dependency manager <b>106</b> is a standalone component or service. In such examples, the resource dependency manager <b>106</b> can be modified independently of the user (e.g., a technician, administrator, etc.) and the resource-based service <b>108</b>. For example, a new dependency rule can be added to a dependency database in the resource dependency manager <b>106</b>. However, examples disclosed herein are not limited thereto. For example, the resource dependency manager <b>106</b> can be a user-side component (e.g., in a client library, in a command line interface (CLI), in a proxy, etc.). In other examples, the resource dependency manager <b>106</b> can be part of the resource-based service <b>108</b>. However, as described above, in such examples the resource types may not be easily extended. The example resource dependency manager <b>106</b> is described below in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0033" num="0032">The resource-based service <b>108</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref> receives and fulfills the resource requests of the user device <b>100</b> from the resource dependency manager <b>106</b>. In examples disclosed herein, the resource-based service <b>108</b> enables users to define and/or use a plurality of different types of resources, define new resources, etc. For example, the resource-based service <b>108</b> may be KUBERNETES&#xae;. The example resource-based service <b>108</b> generates an error message in response to a resource deployment that is out of order. For example, if a dependent resource is deployed in parallel with and/or before the resource it is dependent on, the resource-based service <b>108</b> generates an error.</p><p id="p-0034" num="0033">The virtual resources <b>110</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref> are logical representations of underlying physical resources and are provided to perform the functions of those physical resources for the user device <b>100</b>. For example, a physical network interface card (pNIC) may be virtualized to provide one or more virtual network interface cards (vNIC). In this manner, a single physical resource can be used in multiple deployments through its virtualized representations. In examples disclosed herein, the virtual resources <b>110</b> include virtualized compute resource(s), virtualized storage resource(s), and/or virtualized networking resource(s). However, any other virtual resources may additionally or alternatively be used.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram representative of the example resource dependency manager <b>106</b> of the example SDDC environment of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The resource dependency manager <b>106</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes an example network interface <b>202</b>, an example dependency database generator <b>204</b>, an example dependency graph generator <b>206</b>, an example dependency graph buffer <b>208</b>, an example resource controller <b>210</b>, an example dependency database <b>212</b>, an example resource-based service interface <b>214</b>, and an example verification controller <b>216</b>.</p><p id="p-0036" num="0035">The network interface <b>202</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>2</b></figref> is provided to allow the resource dependency manager <b>106</b> to receive resource requests from the example network <b>102</b>. In some examples, the network interface <b>202</b> can be continuously connected to the network <b>102</b> and/or the user device <b>100</b> for communication with the network <b>102</b> and/or the user device <b>100</b>. In other examples, the network interface <b>202</b> can be periodically or aperiodically connected for periodic or aperiodic communication with the network <b>102</b> and/or the user device <b>100</b>. In some examples, the network interface <b>202</b> can be absent.</p><p id="p-0037" num="0036">The dependency database generator <b>204</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>2</b></figref> identifies and stores resource dependencies in the dependency database <b>212</b>. In some examples, the dependency database <b>212</b> models dependencies specified by the resource-based service <b>108</b>. In examples disclosed herein, the dependency database generator <b>204</b> determines whether a resource specified in a resource request is stored in the dependency database <b>212</b>. In some instances, a resource of a resource request may not be stored in the dependency database <b>212</b>. For example, the resource may be a new resource (e.g., a recently released resource, etc.). In response to determining the resource is not stored in the dependency database <b>212</b>, the dependency database generator <b>204</b> adds the resource to the dependency database <b>212</b>. In response to determining the resource is stored in the dependency database <b>212</b>, the dependency database generator <b>204</b> determines whether the resource has dependencies. If the resource does have dependencies, the dependency database generator <b>204</b> stores the dependency in the dependency database <b>212</b>. For example, the resource may be dependent on one or more other resources, one or more other resources may be dependent on the resource, etc.</p><p id="p-0038" num="0037">In examples disclosed herein, the dependency database generator <b>204</b> stores a time delay indication in association with the dependent resource of a resource dependency. For example, the time delay indication determines the time delay between the resource deployments of the independent and dependent resources. That is, the resource controller <b>210</b> deploys the resource request of the dependent resource at a relatively later time than the resource request of the corresponding independent resource based on the time delay indication. In some examples, the dependency database generator <b>204</b> determines the time delay indication based on the amount of time it takes the independent resource to initialize. For example, the time delay indication can be 1 millisecond, 5 milliseconds, etc. Additionally or alternatively, the dependency database generator <b>204</b> determines the time delay indication based on confirmation that the resource request of the independent resource is successfully deployed. For example, if the resource controller <b>210</b> receives an indication from the resource-based service <b>108</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) that the resource request of the independent resource was successfully deployed before the time delay indication has lapsed, the resource controller <b>210</b> can deploy the resource request of the dependent resource regardless of the time delay indication.</p><p id="p-0039" num="0038">In some examples, the dependency database generator <b>204</b> is a user interface responsive to user input to store the resource dependency in the dependency database <b>212</b>. For example, the user input may be provided by an administrator, technician, or other user in response to an indication that the resource dependency is not previously stored. In some examples, the dependency database generator <b>204</b> uses machine learning to store a resource in the dependency database <b>212</b>. Additionally or alternatively, the dependency database generator <b>204</b> may update a resource dependency indication in the dependency database <b>212</b> in response to a number of error indications (e.g., resource request failures) exceeding an error threshold. For example, if the number of error indications exceeds the error threshold, it may be because the dependency graph generator <b>206</b> generated an incorrect dependency graph due to a dependency error. For example, the error threshold can be three. In such an example, the dependency database generator <b>204</b> may determine, in response to the number of error indications exceeding three (e.g., more than three failed attempts of requesting a resource), that there is an unaccounted resource dependency. In other examples, the error threshold may be any other suitable number selected based on, for example, desired performance and/or any other desired criteria.</p><p id="p-0040" num="0039">The dependency graph generator <b>206</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>2</b></figref> generates a dependency graph of the resources included in the resource request. The dependency graph generator <b>206</b> is provided to determine an ordering of resource deployments to the resource-based service <b>108</b> of the SDDC environment of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. For example, the dependency graph generator <b>206</b> accesses the dependency database <b>212</b> to determine whether the resources in the resource request have resource dependencies. The dependency graph generator <b>206</b> generates a dependency graph based on the resource dependencies. In examples disclosed herein, the resource dependency manager <b>106</b> determines the ordering of resource deployments to the resource-based service <b>108</b> based on the dependency graph. For example, the dependency graph may indicate two resources are not dependent on each other. Thus, the example resource dependency manager <b>106</b> deploys the two resources in parallel to optimize computing time. In some examples, the dependency graph may indicate a first resource is dependent on a second resource. Thus, the example resource dependency manager <b>106</b> deploys first resource to the resource-based service <b>108</b> at a later time than the deployment of the second resource. Example dependency graphs are described below in connection with <figref idref="DRAWINGS">FIGS. <b>3</b>, <b>5</b>, <b>7</b>, and <b>9</b></figref>. The example dependency graph generator <b>206</b> stores the dependency graph of the resource request in the dependency graph buffer <b>208</b>.</p><p id="p-0041" num="0040">The example dependency graph buffer <b>208</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>2</b></figref> stores dependency graphs generated by the dependency graph generator <b>206</b>. In examples disclosed herein, when the resource dependency manager <b>106</b> is to deploy resource requests (e.g., based on resource requests from the user device <b>100</b>), the dependency graphs stored in the dependency graph buffer <b>208</b> can be used by the resource controller <b>210</b> to determine an ordering of resource deployments to the resource-based service <b>108</b>. The example dependency graph buffer <b>208</b> may be implemented by any suitable type of memory, storage device, and/or storage disk to store a data file that stores the dependency graphs to be used by the resource dependency manager <b>106</b> under analysis for resource deployment in a resource-based service <b>108</b>. The example dependency graph buffer <b>208</b> can be implemented as any data file such as, for example, a JSON file, a text file, or any other data file type.</p><p id="p-0042" num="0041">The example resource controller <b>210</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>2</b></figref> sends the resource deployments of the resource request to the resource-based service <b>108</b> based on the dependency graph stored in the dependency graph buffer <b>208</b>. For example, the resource controller <b>210</b> accesses the dependency graph buffer <b>208</b>. The example resource controller <b>210</b> deploys one or more resource requests of the resource request to the resource-based service <b>108</b> via the resource-based service interface <b>214</b>. In examples disclosed herein, the resource controller <b>210</b> deploys independent resources of the resource request to the resource-based service <b>108</b> in parallel (e.g., simultaneously). In some examples, in response to the second resource being dependent on the first resource, the resource controller <b>210</b> determines a time delay that is to elapse between deployments of first and second resources. The resource controller <b>210</b> determines the time delay based on the time delay indication associated with the resource dependency in the dependency database <b>212</b>. Thus, the example resource controller <b>210</b> deploys the second resource to the resource-based service <b>108</b> at a later time (e.g., based on the time delay) than the deployment of the first resource of the resource request. In examples disclosed herein, the resource controller <b>210</b> may determine to retry a resource deployment in response to an error message (e.g., the resource request failed).</p><p id="p-0043" num="0042">The dependency database <b>212</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>2</b></figref> stores resource dependencies. However, other data may additionally and/or alternatively be stored by the dependency database <b>212</b>. The dependency database <b>212</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>2</b></figref> is implemented by any memory, storage device, and/or storage disc for storing data such as, for example, flash memory, magnetic media, optical media, solid state memory, hard drive(s), thumb drive(s), etc. Furthermore, the data stored in the example dependency database <b>212</b> may be in any format such as, for example, binary data, comma delimited data, tab delimitated data, structured query language (SQL) structures, etc. While, in the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the dependency database <b>212</b> is illustrated as a single device, the dependency database <b>212</b> and/or any other data storage devices described herein may be implemented by any number and/or type(s) of storage devices.</p><p id="p-0044" num="0043">The resource-based service interface <b>214</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>2</b></figref> is provided to allow the resource dependency manager <b>106</b> to communicate resource deployments to the resource-based service <b>108</b>. For example, the resource dependency manager <b>106</b> can send a resource deployment to the resource-based service <b>108</b> via the resource-based service interface <b>214</b>. The example resource dependency manager <b>106</b> can receive an indication from the resource-based service <b>108</b> (e.g., the resource status, an error message, etc.) via the resource-based service interface <b>214</b>. For example, the resource-based service interface <b>214</b> can collect the resource statuses of the resource request deployments from the resource-based service <b>108</b> and display and/or otherwise alert the user that the resource requests were fulfilled. In some examples, the resource-based service interface <b>214</b> can be in continuously connected to the resource-based service <b>108</b> for communication with the resource-based service <b>108</b>. In other examples, the resource-based service interface <b>214</b> can be periodically or aperiodically connected for periodic or aperiodic communication with the resource-based service <b>108</b>. In some examples, the resource-based service interface <b>214</b> is absent. For example, the resource controller <b>210</b> may interact with the resource-based service <b>108</b> directly (e.g., send a resource deployment without the resource-based service interface <b>214</b>).</p><p id="p-0045" num="0044">The verification controller <b>216</b> of the illustrated example of <figref idref="DRAWINGS">FIG. <b>2</b></figref> verifies the resource deployments. That is, the example verification controller <b>216</b> verifies the order of the resource deployments (e.g., the dependencies defined in the dependency graph generated by the dependency graph generator <b>206</b>) and/or the timing of the resource deployments. For example, the dependency graph stored in the dependency graph buffer <b>208</b> may define an incorrect resource dependency and, thus, result in an error message when the resource controller <b>210</b> deploys the resource(s) in that specified order. Additionally or alternatively, the resource controller <b>210</b> may use an incorrect time delay. For example, the resource controller <b>210</b> may send a resource deployment of a dependent resource too early (e.g., the resource request of the corresponding independent resource is not yet fulfilled). In some examples, in response to the verification controller <b>216</b> determining the order of the resource deployments was correct, the resource controller <b>210</b> generates and displays a status indicator to the user device <b>100</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>).</p><p id="p-0046" num="0045">In examples disclosed herein, the network interface <b>202</b> may implement means for receiving resource requests. The example dependency database generator <b>204</b> may implement means for generating a dependency database. The example dependency graph generator <b>206</b> may implement means for generating a dependency graph. The example dependency buffer <b>208</b> may implement means for storing dependency graphs. The example resource controller <b>210</b> may implement means for controlling resource deployment requests. The example dependency database <b>212</b> may implement means for modeling dependencies. The example resource-based service interface <b>214</b> may implement means for communicating resource deployments. The example verification controller <b>216</b> may implement means for verifying a time-based ordering.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts an example dependency graph <b>300</b>. The dependency graph <b>300</b> includes an example namespace resource <b>302</b>, an example service account resource <b>304</b>, an example role resource <b>306</b>, and an example role binding resource <b>308</b>. In the illustrated example of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the resources <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> are KUBERNETES&#xae; resources. The example namespace resource <b>302</b> is an independent resource. That is, the example namespace resource <b>302</b> is not dependent on any other resources. The example namespace resource <b>302</b> can be used to divide compute resources between multiple users in a KUBERNETES&#xae; cluster. The example service account resource <b>304</b> and the example role resource <b>306</b> are both independent and dependent resources. That is, the example service account resource <b>304</b> and the example role resource <b>306</b> can be created in parallel in the namespace but the example service account resource <b>304</b> and the example role resource <b>306</b> depend on the example namespace resource <b>302</b>. The example role binding resource <b>308</b> depends on the example service account resource <b>304</b> and the example role resource <b>306</b>. The example service account resource <b>304</b> manages one or more user accounts. The example role resource <b>306</b> is a set of permissions. The example role binding resource <b>308</b> is a dependent resource. That is, the example role binding resource <b>308</b> depends on at least one other resource (e.g., the service account resource <b>304</b> and the role resource <b>306</b>). The example role binding resource <b>308</b> associates the service account resource <b>304</b> with the role resource <b>306</b>. In this manner, the service account resource <b>304</b> gains the privileges of the role resource <b>306</b> within the namespace.</p><p id="p-0048" num="0047">When a resource request specifies the namespace resource <b>302</b>, the example resource controller <b>210</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> deploys the namespace resource <b>302</b> of the resource request to the resource-based service <b>108</b>. In the illustrated example, there is no dependency between the service account resource <b>304</b> and the role resource <b>306</b>. Thus, the example resource controller <b>210</b> can deploy the service account resource <b>304</b> and the role resource <b>306</b> to the resource-based service <b>108</b> in parallel. The example resource controller <b>210</b> deploys the role binding resource <b>308</b> after the namespace resource <b>302</b>, the service account resource <b>304</b>, and the role resource <b>306</b> are deployed.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an example Yet Another Markup Language (Yaml) file <b>400</b> that represents resources of the dependency graph <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The example Yaml file <b>400</b> is represented as programming language pseudocode of machine-readable instructions that may be executed to determine resource deployment order of the resources in the dependency graph <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. That is, the example Yaml file <b>400</b> is a resource request file. In some examples, the Yaml file <b>400</b> is stored in the dependency graph buffer <b>208</b>. The example Yaml file <b>400</b> includes example service account resource lines of code <b>402</b>, example role resource lines of code <b>404</b>, example role binding resource lines of code <b>406</b>, and example namespace resource lines of code <b>408</b>. In the illustrated example, the service account resource lines of code <b>402</b> correspond to the service account resource <b>304</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the role resource lines of code <b>404</b> correspond to the role resource <b>306</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the role binding resource lines of code <b>406</b> correspond to the role binding resource <b>308</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and the namespace resource lines of code <b>408</b> correspond to the namespace resource <b>302</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0050" num="0049">The example Yaml file <b>400</b> corresponds to KUBERNETES&#xae; resources (e.g., the resources <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> (<figref idref="DRAWINGS">FIG. <b>3</b></figref>)). In such an example, the dependency database <b>212</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) may include the dependencies of the KUBERNETES&#xae; resources. For example, the role binding resource lines of code <b>406</b> corresponding to the role binding resource <b>308</b> includes example role binding resource lines of code <b>410</b>. The example role binding resource lines of code <b>410</b> includes &#x201c;roleRef,&#x201d; which refers to the resource dependency (e.g., the example role resource <b>306</b>, &#x201c;name: mynamespace-user-full-access&#x201d;). In examples disclosed herein, the resource dependency either already exists in KUBERNETES&#xae; or is created to satisfy the resource dependency.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts an example dependency graph <b>500</b> of an example WordPress and database application. The dependency graph <b>500</b> includes KUBERNETES&#xae; resources for a WordPress and database application. In the illustrated example of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the dependency graph <b>500</b> includes an example Service resource <b>502</b>, an example PersistentVolumeClaim resource <b>504</b>, an example Deployment resource <b>506</b>, an example Secret resource <b>508</b>, and an example Secret resource <b>510</b>. The example Service resource <b>502</b> exposes an application running as a network service (e.g., wordpress-svc). The example PersistentVolumeClaim resource <b>504</b> is a request for storage by a user (e.g., mysql). The example Deployment resource <b>506</b> provides declarative updates (e.g., desired state) for where an application runs inside KUBERNETES&#xae; (e.g., wordpress). The example Secret resource <b>508</b> stores and manages sensitive information (e.g., passwords, OAuth tokens, and SSH keys) (e.g., admin-password). The example Secret resource <b>510</b> stores and manages sensitive information (e.g., database-password).</p><p id="p-0052" num="0051">The example Service resource <b>502</b> is an independent resource. In the example of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the example PersistentVolumeClaim resource <b>504</b>, the example Deployment resource <b>506</b>, the example Secret resource <b>508</b>, and the example Secret resource <b>510</b> are dependent resources. For example, the Deployment resource <b>506</b> depends on the Service resource <b>502</b>. In the illustrated example of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the arrow between the Deployment resource <b>506</b> and the Service resource <b>502</b> is a dashed arrow with the caption &#x201c;exposes to public network.&#x201d; In examples disclosed herein, the dashed arrow indicates the Service resource <b>502</b> exposes the Deployment resource <b>506</b> as a network endpoint. Additionally or alternatively, the arrow between the Deployment resource <b>506</b> and the Service resource <b>502</b> is a solid arrow with the caption &#x201c;depends on.&#x201d; Also in the illustrated example, the example PersistentVolumeClaim resource <b>504</b>, the example Secret resource <b>508</b>, and the example Secret resource <b>510</b> depend on the example Deployment resource <b>506</b>. Thus, the example resource controller <b>210</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) can deploy the example PersistentVolumeClaim resource <b>504</b> and the example Secret resource <b>508</b> in parallel after deploying the example Deployment resource <b>506</b>. Based on the example dependency graph <b>500</b>, the resource controller <b>210</b> does not deploy the example Secret resource <b>510</b> in parallel with the example PersistentVolumeClaim resource <b>504</b> and the example Secret resource <b>508</b> because the dependency graph <b>500</b> indicates the example Secret resource <b>510</b> is also dependent on the example PersistentVolumeClaim resource <b>504</b>. That is, the example Secret resource <b>510</b> depends on both the example PersistentVolumeClaim resource <b>504</b> and the example Deployment resource <b>506</b>.</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIGS. <b>6</b>A, <b>6</b>B, and <b>6</b>C</figref> are an example Yaml file <b>600</b> that represents resources of the dependency graph <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The example Yaml file <b>600</b> is represented as programming language pseudocode of machine-readable instructions that may be executed to determine resource deployment order of the resources in the dependency graph <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>. That is, the example Yaml file <b>600</b> is a resource request file. In some examples, the Yaml file <b>600</b> is stored in the dependency graph buffer <b>208</b>. The example Yaml file <b>600</b> includes example Service resource lines of code <b>602</b>, example PersistentVolumeClaim resource lines of code <b>604</b>, example Deployment resource lines of code <b>606</b>, example Secret resource lines of code <b>608</b>, and example Secret resource lines of code <b>610</b>. In the illustrated example of <figref idref="DRAWINGS">FIGS. <b>6</b>A, <b>6</b>B, <b>6</b>C</figref>, the example Service resource lines of code <b>602</b> correspond to the example Service resource <b>502</b>, the example PersistentVolumeClaim resource lines of code <b>604</b> correspond to the example PersistentVolumeClaim resource <b>504</b>, the example Deployment resource lines of code <b>606</b> correspond to the example Deployment resource <b>506</b>, the example Secret resource lines of code <b>608</b> correspond to the example Secret resource <b>510</b>, and the example Secret resource lines of code <b>610</b> correspond to the example Secret resource <b>508</b>.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts an example dependency graph <b>700</b> of an example banking application. The dependency graph <b>700</b> includes an example db resource <b>702</b>, an example ad resource <b>704</b>, an example backend<b>1</b> resource <b>706</b>, an example backend<b>2</b> resource <b>708</b>, an example paygate resource <b>710</b>, an example checker resource <b>712</b>, an example backendLb resource <b>714</b>, an example ui<b>1</b> resource <b>716</b>, an example ui<b>2</b> resource <b>718</b>, and an example frontendLb resource <b>720</b>. The example resources <b>702</b>, <b>704</b>, <b>706</b>, <b>708</b>, <b>710</b>, <b>712</b>, <b>714</b>, <b>716</b>, <b>718</b>, <b>720</b> may be deployed in four phases based on their dependencies as described below. In the illustrated example of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the resources <b>702</b>, <b>704</b>, <b>706</b>, <b>708</b>, <b>710</b>, <b>712</b>, <b>714</b>, <b>716</b>, <b>718</b>, <b>720</b> are not KUBERNETES&#xae; resources. The example db resource <b>702</b> is a virtual memory resource (e.g., a database) and the example ad resource <b>704</b> is a virtual memory resource (e.g., an active directory). The example backend<b>1</b> resource <b>706</b> and the example backend<b>2</b> resource <b>708</b> are application backend services. The example paygate resource <b>710</b> is a payment gateway, and the example checker resource <b>712</b> is a payment device. In some examples, the resources <b>702</b>, <b>704</b>, <b>710</b>, <b>712</b> are external components, while the resources <b>706</b>, <b>708</b>, <b>714</b>, <b>716</b>, <b>718</b>, <b>720</b> are application components. The resources <b>702</b>, <b>704</b>, <b>706</b>, <b>708</b>, <b>710</b>, <b>712</b> are independent resources. Thus, the example resource controller <b>210</b> deploys the resource requests of the resources <b>702</b>, <b>704</b>, <b>706</b>, <b>708</b>, <b>710</b>, <b>712</b> to the resource-based service <b>108</b> in parallel during a first phase.</p><p id="p-0055" num="0054">The example backendLb resource <b>714</b> is a backend load balancer resource. In the illustrated example, the backendLb resource <b>714</b> is dependent on the both the example backend<b>1</b> resource <b>706</b> and the example backend<b>2</b> resource <b>708</b>. Thus, the example resource controller <b>210</b> may deploy the resource request of the example backendLb resource <b>714</b> to the example resource-based service <b>108</b> during a second phase after the resource requests of the example backend<b>1</b> resource <b>706</b> and the example backend<b>2</b> resource <b>708</b> have been deployed. The example ui<b>1</b> resource <b>716</b> is a first user interface resource and the example ui<b>2</b> resource <b>718</b> is a second user interface resource. The example resource controller <b>210</b> may deploy the resource requests of the example ui<b>1</b> resource <b>716</b> and the example ui<b>2</b> resource <b>718</b> to the example resource-based service <b>108</b> in parallel during a third phase. The example frontendLb resource <b>720</b> is a frontend load balancer resource. The example resource controller <b>210</b> may deploy the resource request of the example frontendLb resource <b>720</b> to the example resource-based service <b>108</b> at a later time during a fourth phase than the resource requests of the resources <b>702</b>, <b>704</b>, <b>706</b>, <b>708</b>, <b>710</b>, <b>712</b>, <b>714</b>, <b>716</b>, <b>718</b>.</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is an example Yaml file <b>800</b> that represents resources of the dependency graph <b>700</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. The example Yaml file <b>800</b> is represented as programming language pseudocode of machine-readable instructions that may be executed to determine resource deployment order of the resources in the dependency graph <b>700</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. That is, the example Yaml file <b>800</b> is a resource request file. In some examples, the Yaml file <b>800</b> is stored in the dependency graph buffer <b>208</b>. The example Yaml file <b>800</b> includes the example db resource lines of code <b>802</b>, example ad resource lines of code <b>804</b>, example backend<b>1</b> resource lines of code <b>806</b>, example backend<b>2</b> resource lines of code <b>808</b>, example backendLb resource lines of code <b>810</b>, example ui<b>1</b> resource lines of code <b>812</b>, example ui<b>2</b> resource lines of code <b>814</b>, example frontendLb resource lines of code <b>816</b>, example paygate resource lines of code <b>818</b>, and example checker resource lines of code <b>820</b>. In the illustrated example, the db resource lines of code <b>802</b> correspond to the db resource <b>702</b>, the ad resource lines of code <b>804</b> correspond to the ad resource <b>704</b>, the backend<b>1</b> resource lines of code <b>806</b> correspond to the backend<b>1</b> resource <b>706</b>, the backend<b>2</b> resource lines of code <b>808</b> correspond to the backend<b>2</b> resource <b>708</b>, the backendLb resource lines of code <b>810</b> correspond to the backendLb resource <b>714</b>, the ui<b>1</b> resource lines of code <b>812</b> correspond to the ui<b>1</b> resource <b>716</b>, the ui<b>2</b> resource lines of code <b>814</b> correspond to the ui<b>2</b> resource <b>718</b>, the frontendLb resource lines of code <b>816</b> correspond to the frontendLb resource <b>720</b>, the paygate resource lines of code <b>818</b> correspond to the paygate resource <b>710</b>, and the checker resource lines of code <b>820</b> correspond to the checker resource <b>712</b>.</p><p id="p-0057" num="0056">In the illustrated example of <figref idref="DRAWINGS">FIG. <b>8</b></figref>, an example db resource line of code <b>822</b> of the Yaml file <b>800</b> includes an independent resource indicator &#x201c;dependsOn: { }.&#x201d; For example, the resources <b>702</b>, <b>704</b>, <b>706</b>, <b>708</b>, <b>710</b>, <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref> are independent resources and, thus, include the independent resource indicator &#x201c;dependsOn: { }.&#x201d; In the illustrated example of <figref idref="DRAWINGS">FIG. <b>8</b></figref>, example ui<b>1</b> resource lines of code <b>824</b> of the Yaml file <b>800</b> indicate the example ui<b>1</b> resource <b>716</b> is dependent on the example backendLb resource <b>714</b> (e.g., &#x201c;dependsOn:&#x2014;backendLb&#x201d;). Similarly, example ui<b>2</b> resource lines of code <b>826</b> of the Yaml file <b>800</b> indicate the example ui<b>2</b> resource <b>718</b> is also dependent on the example backendLb resource <b>714</b> (e.g., &#x201c;dependsOn:&#x2014;backendLb&#x201d;). If the example resource controller <b>210</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) deploys the resource requests of the resources <b>702</b>, <b>704</b>, <b>706</b>, <b>708</b>, <b>710</b>, <b>712</b>, <b>714</b>, <b>716</b>, <b>718</b>, <b>720</b> based on the dependency graph <b>700</b>, the example verification controller <b>216</b> can indicate the resources were successfully requested. That is, the example dependency graph <b>700</b> maintains the correct resource dependencies. For example, the example ui<b>2</b> resource <b>718</b> is dependent on the seventh resource <b>714</b>, which in turn is dependent on the example backend<b>1</b> resource <b>706</b> and the example backend<b>2</b> resource <b>708</b>. Thus, the example ui<b>2</b> resource <b>718</b> is indirectly dependent on the example backend<b>1</b> resource <b>706</b> and the example backend<b>2</b> resource <b>708</b>, matching the dependencies defined in the ui<b>2</b> resource lines of code <b>826</b> of the example Yaml file <b>800</b>.</p><p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. <b>9</b>A</figref> depicts an example model <b>900</b> of an example voting application with a UI service, a backend service, a database (DB), and a key value (KV) store. Example resources for the voting application represented in the model <b>900</b> include an example voting-app resource <b>902</b>, an example redis resource <b>904</b>, an example worker resource <b>906</b>, an example db resource <b>908</b>, and an example result-app resource <b>910</b>. The example voting-app resource <b>902</b> is a front-end web app which allows a user to vote between two options. In some examples, the voting-app resource <b>902</b> is implemented in Python&#xae; or ASP.NET Core. In the example of <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, the example voting-app resource <b>902</b> can be implemented using voting-app-pod.yml and voting-app-service.yml files. The example redis resource <b>904</b> is a Redis or NATS&#x2122; queue to collect new votes. In the illustrated example of <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, the example redis resource <b>904</b> can be implemented using redis-pod.yml and redis-service.yml files. The example worker resource <b>906</b> consumes votes and stores them in memory (e.g., the db resource <b>908</b>). In some examples, the worker resource <b>906</b> is a .NET Core worker, a Java&#xae; worker, or a .NET Core 2.1 worker. In the example of <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, the worker resource <b>906</b> can be implemented using a worker-pod.yml file. The example db resource <b>908</b> stores votes. In some examples, the db resource <b>908</b> is a Postgres&#xae; or TiDB database backed by a Docker volume. The example db resource <b>908</b> can be implemented by db-pod.yml and db-service.yml files. The example result-app resource <b>910</b> is a web app to show the results of the votes in real time. In some examples, the result-app resource <b>910</b> is implemented in Node.js or ASP.NET Core SignalR. The example result-app resource <b>910</b> can be implemented using result-app-pod.yml and result-app-service.yml files.</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>9</b>B</figref> depicts an example dependency graph <b>950</b> of the example voting application of <figref idref="DRAWINGS">FIG. <b>9</b>A</figref>. Example resources for the voting application represented in the dependency graph <b>950</b> include an example voting resource <b>952</b>, an example worker resource <b>954</b>, an example result resource <b>956</b>, an example redis resource <b>958</b>, and an example db resource <b>960</b>. The example voting resource <b>952</b> is a front-end web app to present two or more options. The example worker resource <b>954</b> consumes and stores votes. The example result resource <b>956</b> is a web-app which shows the results of the voting in real time. The example redis resource <b>958</b> is a queue which collects new votes. The example db resource <b>960</b> stores the votes. In the illustrated example of <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, the voting resource <b>952</b> corresponds to the voting-app resource <b>902</b>, the worker resource <b>954</b> corresponds to the worker resource <b>906</b>, the result resource <b>956</b> corresponds to the result-app resource <b>910</b>, the redis resource <b>958</b> corresponds to the redis resource <b>904</b>, and the db resource <b>960</b> corresponds to the db resource <b>908</b>.</p><p id="p-0060" num="0059">In the illustrated example of <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, the arrow direction of a first resource pointing to a second resource indicates the first resource is dependent on the second resource (e.g., the opposite of <figref idref="DRAWINGS">FIGS. <b>3</b>, <b>5</b>, <b>7</b></figref>). For example, the example voting resource <b>952</b> and the example worker resource <b>954</b> are dependent on the example redis resource <b>958</b>. Additionally, the example worker resource <b>954</b> and the example result resource <b>956</b> are dependent on the example db resource <b>960</b>. In the illustrated example, the example redis resource <b>958</b> and the example db resource <b>960</b> are independent resources.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is an example Yaml file <b>1000</b> that represents resources of the dependency graph <b>950</b> of <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>. The example Yaml file <b>1000</b> is represented as programming language pseudocode of machine-readable instructions that may be executed to determine resource deployment order of the resources in the dependency graph <b>950</b> of <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>. That is, the example Yaml file <b>1000</b> is a resource request file. In some examples, the Yaml file <b>1000</b> is stored in the dependency graph buffer <b>208</b>. The example Yaml file <b>1000</b> includes example voting resource lines of code <b>1002</b>, example redis resource lines of code <b>1004</b>, example worker resource lines of code <b>1006</b>, example db resource lines of code <b>1008</b>, and example result resource lines of code <b>1010</b>. In the illustrated example, the voting resource lines of code <b>1002</b> correspond to the voting resource <b>952</b>, the redis resource lines of code <b>1004</b> correspond to the redis resource <b>958</b>, the worker resource lines of code <b>1006</b> correspond to the worker resource <b>954</b>, the db resource lines of code <b>1008</b> correspond to the db resource <b>960</b>, and the result resource lines of code <b>1010</b> correspond to the result resource <b>956</b>.</p><p id="p-0062" num="0061">While an example manner of implementing the resource dependency manager <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> is illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, one or more of the elements, processes and/or devices illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be combined, divided, re-arranged, omitted, eliminated and/or implemented in any other way. Further, the example network interface <b>202</b>, the example dependency database generator <b>204</b>, the example dependency graph generator <b>206</b>, the example dependency graph buffer <b>208</b>, the example resource controller <b>210</b>, the example dependency database <b>212</b>, the example resource-based service interface <b>214</b>, the example verification controller <b>216</b> and/or, more generally, the example resource dependency manager <b>106</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be implemented by hardware, software, firmware and/or any combination of hardware, software and/or firmware. Thus, for example, any of the example network interface <b>202</b>, the example dependency database generator <b>204</b>, the example dependency graph generator <b>206</b>, the example dependency graph buffer <b>208</b>, the example resource controller <b>210</b>, the example dependency database <b>212</b>, the example resource-based service interface <b>214</b>, the example verification controller <b>216</b> and/or, more generally, the example resource dependency manager <b>106</b> could be implemented by one or more analog or digital circuit(s), logic circuits, programmable processor(s), programmable controller(s), graphics processing unit(s) (GPU(s)), digital signal processor(s) (DSP(s)), application specific integrated circuit(s) (ASIC(s)), programmable logic device(s) (PLD(s)) and/or field programmable logic device(s) (FPLD(s)). When reading any of the apparatus or system claims of this patent to cover a purely software and/or firmware implementation, at least one of the example network interface <b>202</b>, the example dependency database generator <b>204</b>, the example dependency graph generator <b>206</b>, the example dependency graph buffer <b>208</b>, the example resource controller <b>210</b>, the example dependency database <b>212</b>, the example resource-based service interface <b>214</b>, the example verification controller <b>216</b> is/are hereby expressly defined to include a non-transitory computer readable storage device or storage disk such as a memory, a digital versatile disk (DVD), a compact disk (CD), a Blu-ray disk, etc. including the software and/or firmware. Further still, the example resource dependency manager <b>106</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> may include one or more elements, processes and/or devices in addition to, or instead of, those illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and/or may include more than one of any or all of the illustrated elements, processes and devices. As used herein, the phrase &#x201c;in communication,&#x201d; including variations thereof, encompasses direct communication and/or indirect communication through one or more intermediary components, and does not require direct physical (e.g., wired) communication and/or constant communication, but rather additionally includes selective communication at periodic intervals, scheduled intervals, aperiodic intervals, and/or one-time events.</p><p id="p-0063" num="0062">Flowcharts representative of example hardware logic, machine readable instructions, hardware implemented state machines, and/or any combination thereof for implementing the resource dependency manager <b>106</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> is shown in <figref idref="DRAWINGS">FIGS. <b>11</b>-<b>13</b></figref>. The machine readable instructions may be one or more executable programs or portion(s) of an executable program for execution by a computer processor such as the processor <b>1412</b> shown in the example processor platform <b>1400</b> discussed below in connection with <figref idref="DRAWINGS">FIG. <b>14</b></figref>. The program may be embodied in software stored on a non-transitory computer readable storage medium such as a CD-ROM, a floppy disk, a hard drive, a DVD, a Blu-ray disk, or a memory associated with the processor <b>1412</b>, but the entire program and/or parts thereof could alternatively be executed by a device other than the processor <b>1412</b> and/or embodied in firmware or dedicated hardware. Further, although the example program is described with reference to the flowcharts illustrated in <figref idref="DRAWINGS">FIGS. <b>11</b>-<b>13</b></figref>, many other methods of implementing the example resource dependency manager <b>106</b> may alternatively be used. For example, the order of execution of the blocks may be changed, and/or some of the blocks described may be changed, eliminated, or combined. Additionally or alternatively, any or all of the blocks may be implemented by one or more hardware circuits (e.g., discrete and/or integrated analog and/or digital circuitry, an FPGA, an ASIC, a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware.</p><p id="p-0064" num="0063">The machine readable instructions described herein may be stored in one or more of a compressed format, an encrypted format, a fragmented format, a compiled format, an executable format, a packaged format, etc. Machine readable instructions as described herein may be stored as data (e.g., portions of instructions, code, representations of code, etc.) that may be utilized to create, manufacture, and/or produce machine executable instructions. For example, the machine readable instructions may be fragmented and stored on one or more storage devices and/or computing devices (e.g., servers). The machine readable instructions may require one or more of installation, modification, adaptation, updating, combining, supplementing, configuring, decryption, decompression, unpacking, distribution, reassignment, compilation, etc. in order to make them directly readable, interpretable, and/or executable by a computing device and/or other machine. For example, the machine readable instructions may be stored in multiple parts, which are individually compressed, encrypted, and stored on separate computing devices, wherein the parts when decrypted, decompressed, and combined form a set of executable instructions that implement a program such as that described herein.</p><p id="p-0065" num="0064">In another example, the machine readable instructions may be stored in a state in which they may be read by a computer, but require addition of a library (e.g., a dynamic link library (DLL)), a software development kit (SDK), an application programming interface (API), etc. in order to execute the instructions on a particular computing device or other device. In another example, the machine readable instructions may need to be configured (e.g., settings stored, data input, network addresses recorded, etc.) before the machine readable instructions and/or the corresponding program(s) can be executed in whole or in part. Thus, the disclosed machine readable instructions and/or corresponding program(s) are intended to encompass such machine readable instructions and/or program(s) regardless of the particular format or state of the machine readable instructions and/or program(s) when stored or otherwise at rest or in transit.</p><p id="p-0066" num="0065">The machine readable instructions described herein can be represented by any past, present, or future instruction language, scripting language, programming language, etc. For example, the machine readable instructions may be represented using any of the following languages: C, C++, Java, C#, Perl, Python, JavaScript, HyperText Markup Language (HTML), Structured Query Language (SQL), Swift, etc.</p><p id="p-0067" num="0066">As mentioned above, the example processes of <figref idref="DRAWINGS">FIGS. <b>11</b>-<b>13</b></figref> may be implemented using executable instructions (e.g., computer and/or machine readable instructions) stored on a non-transitory computer and/or machine readable medium such as a hard disk drive, a flash memory, a read-only memory, a compact disk, a digital versatile disk, a cache, a random-access memory and/or any other storage device or storage disk in which information is stored for any duration (e.g., for extended time periods, permanently, for brief instances, for temporarily buffering, and/or for caching of the information). As used herein, the term non-transitory computer readable medium is expressly defined to include any type of computer readable storage device and/or storage disk and to exclude propagating signals and to exclude transmission media.</p><p id="p-0068" num="0067">&#x201c;Including&#x201d; and &#x201c;comprising&#x201d; (and all forms and tenses thereof) are used herein to be open ended terms. Thus, whenever a claim employs any form of &#x201c;include&#x201d; or &#x201c;comprise&#x201d; (e.g., comprises, includes, comprising, including, having, etc.) as a preamble or within a claim recitation of any kind, it is to be understood that additional elements, terms, etc. may be present without falling outside the scope of the corresponding claim or recitation. As used herein, when the phrase &#x201c;at least&#x201d; is used as the transition term in, for example, a preamble of a claim, it is open-ended in the same manner as the term &#x201c;comprising&#x201d; and &#x201c;including&#x201d; are open ended. The term &#x201c;and/or&#x201d; when used, for example, in a form such as A, B, and/or C refers to any combination or subset of A, B, C such as (1) A alone, (2) B alone, (3) C alone, (4) A with B, (5) A with C, (6) B with C, and (7) A with B and with C. As used herein in the context of describing structures, components, items, objects and/or things, the phrase &#x201c;at least one of A and B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, and (3) at least one A and at least one B. Similarly, as used herein in the context of describing structures, components, items, objects and/or things, the phrase &#x201c;at least one of A or B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, and (3) at least one A and at least one B. As used herein in the context of describing the performance or execution of processes, instructions, actions, activities and/or steps, the phrase &#x201c;at least one of A and B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, and (3) at least one A and at least one B. Similarly, as used herein in the context of describing the performance or execution of processes, instructions, actions, activities and/or steps, the phrase &#x201c;at least one of A or B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, and (3) at least one A and at least one B.</p><p id="p-0069" num="0068">As used herein, singular references (e.g., &#x201c;a&#x201d;, &#x201c;an&#x201d;, &#x201c;first&#x201d;, &#x201c;second&#x201d;, etc.) do not exclude a plurality. The term &#x201c;a&#x201d; or &#x201c;an&#x201d; entity, as used herein, refers to one or more of that entity. The terms &#x201c;a&#x201d; (or &#x201c;an&#x201d;), &#x201c;one or more&#x201d;, and &#x201c;at least one&#x201d; can be used interchangeably herein. Furthermore, although individually listed, a plurality of means, elements or method actions may be implemented by, e.g., a single unit or processor. Additionally, although individual features may be included in different examples or claims, these may possibly be combined, and the inclusion in different examples or claims does not imply that a combination of features is not feasible and/or advantageous.</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flowchart representative of example machine-readable instructions which may be executed to implement the example resource dependency manager <b>106</b> of <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref> to manage resource deployments. The example program <b>1100</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref> begins at block <b>1102</b> at which the network interface <b>202</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) obtains one or more resource request(s). For example, the network interface <b>202</b> obtains a resource request specifying one or more resources from the user device <b>100</b> via the network <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0071" num="0070">At block <b>1104</b>, the example dependency graph generator <b>206</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) generates a dependency graph. For example, the dependency graph generator <b>206</b> determines whether a resource of the resource request is a dependent resource based on the dependency database <b>212</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) and generates a dependency graph indicating dependencies between the resources of the resource request based on the dependency database <b>212</b>. In the illustrated example, the dependency graph generator <b>206</b> can store the dependency graph in the dependency graph buffer <b>208</b>. Example instructions that may be used to implement block <b>1104</b> to generate a dependency graph are described in more detail below in connection with <figref idref="DRAWINGS">FIG. <b>12</b></figref>.</p><p id="p-0072" num="0071">At block <b>1106</b>, the example resource controller <b>210</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) transmits the resource requests to the resource-based service <b>108</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) based on the dependency graph. For example, the resource controller <b>210</b> deploys the resource requests to the resource-based service <b>108</b> in an order according to the dependency graph. In some examples, the resource controller <b>210</b> deploys resource requests in parallel. In some examples, the resource controller <b>210</b> deploys a dependent resource at a relatively later time than an independent resource (e.g., based on a time delay). In the illustrated example, the resource controller <b>210</b> transmits resource deployments to the resource-based service <b>108</b> via the resource-based service interface <b>214</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>).</p><p id="p-0073" num="0072">At block <b>1108</b>, the example resource-based service interface <b>214</b> obtains the status of the resource requests from the resource-based service <b>108</b>. Examples of status indicators that may be obtained include the status is an error message, a success indication, etc.</p><p id="p-0074" num="0073">At block <b>1110</b>, the example verification controller <b>216</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) determines whether the resource was successfully requested. For example, the verification controller <b>216</b> receives a status indicator from the resource-based service <b>108</b> via the resource-based service interface <b>214</b> (e.g., at block <b>1108</b>) indicating whether the resource(s) was/were requested successfully. In some examples, the verification controller <b>216</b> determines whether the time-based ordering of the resource(s) satisfies the dependency graph. If the example verification controller <b>216</b> determines the resources were requested successfully, the program <b>1100</b> continues to block <b>1114</b>. If the example verification controller <b>216</b> determines the resources were not requested successfully, the program <b>1100</b> continues to block <b>1112</b>, where the example verification controller <b>216</b> handles a resource error.</p><p id="p-0075" num="0074">At block <b>1112</b>, the example verification controller <b>216</b> handles a resource error. In examples disclosed herein, the verification controller <b>216</b> can determine the cause of the resource error as: the resource-based service <b>108</b> being overloaded, an inadequate time delay between resource requests of dependent resources, an error in the dependency database <b>212</b>, etc. Example instructions that may be used to implement block <b>1112</b> to handle a resource error are described in more detail below in connection with <figref idref="DRAWINGS">FIG. <b>13</b></figref>. The program <b>1100</b> then returns to block <b>1106</b>.</p><p id="p-0076" num="0075">At block <b>1114</b>, the example resource controller <b>210</b> transmits the resource(s) of the resource request and/or the status of the resource requests to the user device <b>100</b> via the example network interface <b>202</b>. For example, the resource controller <b>210</b> may receive the status indicator of the resource request from the resource-based service <b>108</b> via the resource-based service interface <b>214</b>. In some examples, the resource controller <b>210</b> transmits the status of the resource requests in real-time.</p><p id="p-0077" num="0076">At block <b>1116</b>, the example resource controller <b>210</b> determines whether to analyze additional resources. For example, the resource controller <b>210</b> determines to continue analyzing resources in response to an additional resource request. In some examples, the resource controller <b>210</b> determines to not continue analyzing resources in response to the resource request appending duration being greater than a threshold duration (e.g., a resource request, or number of retries, has been pending for a duration exceeding the threshold duration). If the example resource controller <b>210</b> determines to analyze additional resources, the program <b>1100</b> returns to block <b>1102</b>. If the example resource controller <b>210</b> determines not to analyze additional resources, the program <b>1100</b> ends.</p><p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart representative of example machine-readable instructions which may be executed to implement the example resource dependency manager <b>106</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> to generate a dependency graph. The example instructions represented in <figref idref="DRAWINGS">FIG. <b>12</b></figref> may be used to implement block <b>1104</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref>. The example program of <figref idref="DRAWINGS">FIG. <b>12</b></figref> begins at block <b>1202</b> at which the dependency database generator <b>204</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) determines if a resource is in the dependency database <b>212</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>). For example, the dependency database generator <b>204</b> selects a first resource of the resource request and searches the dependency database <b>212</b> for the first resource. The example dependency database generator <b>204</b> can use any suitable searching technique. If the example dependency database generator <b>204</b> determines the resource is in the dependency database <b>212</b>, the program <b>1104</b> continues to block <b>1206</b>. If the example dependency database generator <b>204</b> determines the resource is not in the dependency database <b>212</b>, the program <b>1104</b> continues to block <b>1204</b> to add the resource to the dependency database <b>212</b>.</p><p id="p-0079" num="0078">At block <b>1204</b>, the example dependency database generator <b>204</b> adds the resource to the dependency database <b>212</b>. That is, the example dependency database generator <b>204</b> stores the resource in the dependency database <b>212</b> indicating whether the resource is an independent resource, a dependent resource, or both. In some examples, the dependency database generator <b>204</b> adds the resource to the dependency database <b>212</b> by executing a dependency model trained using machine learning. In some examples, the dependency database generator <b>204</b> adds the resource to the dependency database <b>212</b> in response to user input (e.g., input from an administrator, technician, etc.).</p><p id="p-0080" num="0079">At block <b>1206</b>, the example dependency graph generator <b>206</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) determines whether the resource is a dependent resource. For example, the dependency graph generator <b>206</b> accesses the dependency database <b>212</b> to determine whether the resource is a dependent resource. If the example dependency graph generator <b>206</b> determines the resource is not a dependent resource, the program <b>1104</b> continues to block <b>1210</b>. If the example dependency graph generator <b>206</b> determines the resource is a dependent resource, the program <b>1104</b> continues to block <b>1208</b> to build a dependency in the dependency graph.</p><p id="p-0081" num="0080">At block <b>1208</b>, the example dependency graph generator <b>206</b> builds a dependency in the dependency graph. For example, the dependency graph generator <b>206</b> determines which resource the selected resource is dependent on. The dependency graph generator <b>206</b> can also determine a time delay indication associated with the resource dependency. The example dependency graph generator <b>206</b> can store the resource dependency and/or the time delay indication in the dependency graph buffer <b>208</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>). For example, the dependency graph generator <b>206</b> may generate and store the section <b>804</b> of the Yaml file <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0082" num="0081">At block <b>1210</b>, the example dependency graph generator <b>206</b> determines whether to analyze another resource of the resource request. For example, the dependency graph generator <b>206</b> may determine to analyze another resource if every resource of the resource request has not yet been analyzed. If the example dependency graph generator <b>206</b> determines to analyze another resource, the program <b>1104</b> returns to block <b>1202</b>. If the example dependency graph generator <b>206</b> determines to not analyze another resource, the resource dependency manager <b>106</b> returns to block <b>1106</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref>.</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart representative of example machine-readable instructions which may be executed to implement the example resource dependency manager <b>106</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> to handle a resource error. The example instructions represented in <figref idref="DRAWINGS">FIG. <b>13</b></figref> may be used to implement block <b>1112</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref>. The example program of <figref idref="DRAWINGS">FIG. <b>13</b></figref> begins at block <b>1302</b> at which the verification controller <b>216</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) determines whether the resource-based service <b>108</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) is overloaded. For example, the resource-based service <b>108</b> may send an indicator that the number of resource requests exceeds a request threshold. That is, resource dependency manager <b>106</b> detects an error message due to the resource-based service <b>108</b> not being able to fulfill the resource request due to it being overloaded (e.g., too many resource requests, etc.). Thus, the error indicator is not due to an error in the dependency graph. If the example verification controller <b>216</b> determines the service is not overloaded, the program <b>1112</b> continues to block <b>1306</b>. If the example verification controller <b>216</b> determines the service is overloaded, the program <b>1112</b> continues to block <b>1304</b>.</p><p id="p-0084" num="0083">At block <b>1304</b>, the example resource controller <b>210</b> sleeps for a time period. That is, the example resource controller <b>210</b> pauses, delays, etc. before retrying the resource request deployment. For example, the resource controller <b>210</b> may determine to sleep for 5 milliseconds, 10 milliseconds, etc.</p><p id="p-0085" num="0084">At block <b>1306</b>, the example resource controller <b>210</b> determines whether to retry the resource request deployment. For example, the resource controller <b>210</b> may determine to not retry the resource request deployment in response to the number of retries exceeding a redeployment threshold. For example, the redeployment threshold can be five, and five error results may indicate that there is an error with: the time delay, the dependency graph stored in the dependency graph buffer <b>208</b>, etc. If the example resource controller <b>210</b> determines to not retry the resource request deployment, the program <b>1112</b> continues to block <b>1312</b>. If the example resource controller <b>210</b> determines to retry the resource request deployment, the program <b>1112</b> continues to block <b>1308</b>.</p><p id="p-0086" num="0085">At block <b>1308</b>, the example resource controller <b>210</b> determines whether to increase the time delay between resource request deployments. For example, the resource controller <b>210</b> may deploy resource requests based on a default time delay. In some examples, the default time delay between resource deployments is 5 milliseconds. In some examples, the time delay is configurable. In response to an error indication, the example resource controller <b>210</b> may determine to increase the time delay between resource deployments. For example, the resource dependency stored in the dependency graph of the dependency graph buffer <b>208</b> may be correct, but the resource controller <b>210</b> may have deployed the resource request of the dependent resource before the resource request of the corresponding independent resource was fulfilled (e.g., the time delay is not adequately long). If the example resource controller <b>210</b> determines to not increase the time delay, the program <b>1112</b> continues to block <b>1312</b>. For example, in response to the time delay exceeding a time delay threshold, the resource controller <b>210</b> may determine to not increase the time delay. That is, a time delay exceeding the time delay threshold may be noticeable to the user (e.g., the user is able to perceive the time delay between resource requests). This may decrease the quality of user experience. If the example resource controller <b>210</b> determines to increase the time delay, the program <b>1112</b> continues to block <b>1310</b> to increase the time delay.</p><p id="p-0087" num="0086">At block <b>1310</b>, the example resource controller <b>210</b> increases the time delay indication in the dependency graph. For example, the resource controller <b>210</b> may increase the time delay indication from 5 milliseconds (e.g., the default time delay) to 10 milliseconds. However, in other examples the resource controller <b>210</b> may increase the time delay indication 2 milliseconds, 4 milliseconds, etc. The program <b>1112</b> then returns to block <b>1106</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref>.</p><p id="p-0088" num="0087">At block <b>1312</b>, the example verification controller <b>216</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) indicates the dependency graph contains an error. For example, the verification controller <b>216</b> indicates the dependency graph contains an error in response to the number of resource redeployment retrials being greater than the redeployment threshold, the time delay exceeding a time delay threshold, etc. For example, if the dependency graph does not include the correct resource dependency, increasing the time delay will still result in an error indication. The error notification may be generated by setting a flag that indicates the dependency graph contains an error after being checked by the verification controller <b>216</b>. However, other methods of generating the notification may additionally or alternatively be used.</p><p id="p-0089" num="0088">At block <b>1314</b>, the dependency graph generator <b>206</b> updates the dependency graph stored in the dependency graph buffer <b>208</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) and/or the dependency database <b>212</b>. For example, the dependency graph generator <b>206</b> may retrain the resource dependency model and execute the new resource dependency model to update the dependency graph. The example instructions of <figref idref="DRAWINGS">FIG. <b>13</b></figref> end, and control returns to block <b>1106</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref>.</p><p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a block diagram of an example processor platform <b>1400</b> structured to execute the instructions of <figref idref="DRAWINGS">FIGS. <b>11</b>-<b>13</b></figref> to implement the resource dependency manager <b>106</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The processor platform <b>1400</b> can be, for example, a server, a personal computer, a workstation, a self-learning machine (e.g., a neural network), a mobile device (e.g., a cell phone, a smart phone, a tablet such as an iPad&#x2122;), a personal digital assistant (PDA), an Internet appliance, a gaming console, or any other type of computing device.</p><p id="p-0091" num="0090">The processor platform <b>1400</b> of the illustrated example includes a processor <b>1412</b>. The processor <b>1412</b> of the illustrated example is hardware. For example, the processor <b>1412</b> can be implemented by one or more integrated circuits, logic circuits, microprocessors, GPUs, DSPs, or controllers from any desired family or manufacturer. The hardware processor may be a semiconductor based (e.g., silicon based) device. In this example, the processor implements the example dependency database generator <b>204</b>, the example dependency graph generator <b>206</b>, the example resource controller <b>210</b>, and the example verification controller <b>216</b>.</p><p id="p-0092" num="0091">The processor <b>1412</b> of the illustrated example includes a local memory <b>1413</b> (e.g., a cache). The processor <b>1412</b> of the illustrated example is in communication with a main memory including a volatile memory <b>1414</b> and a non-volatile memory <b>1416</b> via a bus <b>1418</b>. The volatile memory <b>1414</b> may be implemented by Synchronous Dynamic Random Access Memory (SDRAM), Dynamic Random Access Memory (DRAM), RAMBUS&#xae; Dynamic Random Access Memory (RDRAM&#xae;) and/or any other type of random access memory device. The non-volatile memory <b>1416</b> may be implemented by flash memory and/or any other desired type of memory device. Access to the main memory <b>1414</b>, <b>1416</b> is controlled by a memory controller.</p><p id="p-0093" num="0092">The processor platform <b>1400</b> of the illustrated example also includes an interface circuit <b>1420</b>. The interface circuit <b>1420</b> may be implemented by any type of interface standard, such as an Ethernet interface, a universal serial bus (USB), a Bluetooth&#xae; interface, a near field communication (NFC) interface, and/or a PCI express interface.</p><p id="p-0094" num="0093">In the illustrated example, one or more input devices <b>1422</b> are connected to the interface circuit <b>1420</b>. The input device(s) <b>1422</b> permit(s) a user to enter data and/or commands into the processor <b>1012</b>. The input device(s) can be implemented by, for example, an audio sensor, a microphone, a keyboard, a button, a mouse, a touchscreen, a track-pad, a trackball, isopoint and/or a voice recognition system.</p><p id="p-0095" num="0094">One or more output devices <b>1424</b> are also connected to the interface circuit <b>1420</b> of the illustrated example. The output devices <b>1424</b> can be implemented, for example, by display devices (e.g., a light emitting diode (LED), an organic light emitting diode (OLED), a liquid crystal display (LCD), a cathode ray tube display (CRT), an in-place switching (IPS) display, a touchscreen, etc.), a tactile output device, a printer and/or speaker. The interface circuit <b>1420</b> of the illustrated example, thus, typically includes a graphics driver card, a graphics driver chip and/or a graphics driver processor. In the illustrated example, the interface <b>1420</b> implements the network interface <b>202</b> and the resource-based service interface <b>214</b>.</p><p id="p-0096" num="0095">The interface circuit <b>1420</b> of the illustrated example also includes a communication device such as a transmitter, a receiver, a transceiver, a modem, a residential gateway, a wireless access point, and/or a network interface to facilitate exchange of data with external machines (e.g., computing devices of any kind) via a network <b>1426</b>. The communication can be via, for example, an Ethernet connection, a digital subscriber line (DSL) connection, a telephone line connection, a coaxial cable system, a satellite system, a line-of-site wireless system, a cellular telephone system, etc.</p><p id="p-0097" num="0096">The processor platform <b>1400</b> of the illustrated example also includes one or more mass storage devices <b>1428</b> for storing software and/or data. Examples of such mass storage devices <b>1428</b> include floppy disk drives, hard drive disks, compact disk drives, Blu-ray disk drives, redundant array of independent disks (RAID) systems, and digital versatile disk (DVD) drives. In the illustrated example, the mass storage <b>1428</b> implements the dependency graph buffer <b>208</b> and the dependency database <b>212</b>.</p><p id="p-0098" num="0097">The machine executable instructions <b>1432</b> of <figref idref="DRAWINGS">FIGS. <b>11</b>-<b>13</b></figref> may be stored in the mass storage device <b>1428</b>, in the volatile memory <b>1414</b>, in the non-volatile memory <b>1416</b>, and/or on a removable non-transitory computer readable storage medium such as a CD or DVD.</p><p id="p-0099" num="0098">A block diagram illustrating an example software distribution platform <b>1505</b> to distribute software such as the example computer readable instructions <b>1432</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref> to third parties is illustrated in <figref idref="DRAWINGS">FIG. <b>15</b></figref>. The example software distribution platform <b>1505</b> may be implemented by any computer server, data facility, cloud service, etc., capable of storing and transmitting software to other computing devices. The third parties may be customers of the entity owning and/or operating the software distribution platform. For example, the entity that owns and/or operates the software distribution platform may be a developer, a seller, and/or a licensor of software such as the example computer readable instructions <b>1432</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref>. The third parties may be consumers, users, retailers, OEMs, etc., who purchase and/or license the software for use and/or re-sale and/or sub-licensing. In the illustrated example, the software distribution platform <b>1505</b> includes one or more servers and one or more storage devices. The storage devices store the computer readable instructions <b>1432</b>, which may correspond to the example computer readable instructions <b>1432</b> of <figref idref="DRAWINGS">FIGS. <b>11</b>-<b>13</b></figref>, as described above. The one or more servers of the example software distribution platform <b>1505</b> are in communication with a network <b>1510</b>, which may correspond to any one or more of the Internet and/or any of the example networks <b>102</b>, <b>1426</b> described above. In some examples, the one or more servers are responsive to requests to transmit the software to a requesting party as part of a commercial transaction. Payment for the delivery, sale and/or license of the software may be handled by the one or more servers of the software distribution platform and/or via a third party payment entity. The servers enable purchasers and/or licensors to download the computer readable instructions <b>1432</b> from the software distribution platform <b>1505</b>. For example, the software, which may correspond to the example computer readable instructions <b>1432</b> of <figref idref="DRAWINGS">FIGS. <b>11</b>-<b>13</b></figref>, may be downloaded to the example processor platform <b>1400</b>, which is to execute the computer readable instructions <b>1432</b> to implement the resource dependency manager <b>106</b>. In some example, one or more servers of the software distribution platform <b>1505</b> periodically offer, transmit, and/or force updates to the software (e.g., the example computer readable instructions <b>1432</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref>) to ensure improvements, patches, updates, etc. are distributed and applied to the software at the end user devices.</p><p id="p-0100" num="0099">From the foregoing, it will be appreciated that example methods, apparatus and articles of manufacture have been disclosed that manage resource request deployments. The disclosed methods, apparatus and articles of manufacture improve computing efficiency of a computing device by determining an order of resource deployments based on resource dependencies before the deployment of resource requests to a resource-based service. The disclosed methods, apparatus and articles of manufacture substantially reduce or eliminate the processor cycles for of troubleshooting resource requests by determining resource dependencies. The disclosed methods, apparatus and articles of manufacture are accordingly directed to one or more improvement(s) in the functioning of a computer.</p><p id="p-0101" num="0100">Examples disclosed herein are useful to overcome problems of prior techniques to handle dependencies associated with resource deployment requests. Such a prior technique is shown in <figref idref="DRAWINGS">FIG. <b>16</b></figref>. For example, when a user <b>1602</b> wants to create a complex structure (e.g., a high-level service, a component, etc.) in a given resource-based service <b>1604</b>. In prior techniques, the user <b>1602</b> must deploy N number of Yaml files <b>1606</b> to the resource-based service <b>1604</b>. In a first attempt, the user <b>1602</b> may decide to deploy all of the Yaml files <b>1606</b> in parallel. If the resource-based service <b>1604</b> is not clever enough, the resource-based service <b>1604</b> will start processing all of the deployments in parallel. For example, the deployment may include a resource I and a resource J. In prior techniques, as soon as resource I and resource J are deployed, the overall deployment will fail if there's a dependency between resource I and resource J (e.g., resource I is dependent on resource J, resource J is dependent on resource I).</p><p id="p-0102" num="0101">As described above, in prior techniques the user <b>1602</b> checks and interprets the error message to determine the dependency between the resource I and the resource J. The user <b>1602</b> then retries the deployment. In some examples, it is possible that the resources I, J are sent in the proper order, but resource I takes more time to be deployed than the user <b>1602</b> expected. Thus, resource J starts to be deployed too early and the overall deployment fails again. In prior techniques, the user <b>1602</b> will again check and interpret the error message, repeating the deployment and interpretation process until much time, effort, and computing resources have been used for a successful deployment.</p><p id="p-0103" num="0102">Unlike prior techniques, examples disclosed herein provide a resource dependency manager <b>1702</b> (e.g., the resource dependency manager <b>106</b> of <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref>) between the user <b>1602</b> and the resource-based service <b>1604</b> as shown in <figref idref="DRAWINGS">FIG. <b>17</b></figref>. For example, when the user <b>1602</b> wants to create the same complex structure (e.g., a high-level service, a component, etc.) in the same resource-based service <b>1604</b>, the user <b>1602</b> deploys the N number of Yaml files <b>1606</b>. In accordance with teachings of this disclosure, the N number of Yaml files <b>1606</b> are deployed into the resource dependency manager <b>1702</b>. As described above, the resource dependency manager <b>1702</b> analyzes the content in the N number of Yaml files <b>1606</b>, checks the dependencies database (e.g., the dependency database <b>212</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>), and creates a dependency graph of the resources that the user <b>1602</b> requested. Then, following the dependency graph, the resource dependency manager <b>1702</b> (e.g., the resource controller <b>210</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> as described above) sends the proper requests for the resources to the resource-based service <b>1604</b>. In examples disclosed herein, the requests may include extra logic such as retries in case of an error, waiting for previous resources to be reading, sleeping for a given amount of time to not overload the resource-based service <b>1604</b>, etc. As described above, the resource dependency manager <b>1702</b> can collect the responses and/or statuses sent back by the resource-based service <b>1604</b> and send them back in substantially real time to the user <b>1602</b> once the original request is fulfilled.</p><p id="p-0104" num="0103">In the example described above in connection with <figref idref="DRAWINGS">FIG. <b>16</b></figref>, if the resource I and the resource J are sent at the same time to the resource dependency manager <b>1702</b>, the resource dependency manager <b>1702</b> will see the dependency between the resources I, J and act accordingly as described above. For example, the resource dependency manager <b>1702</b> can send the request for the resource I, wait until it's fulfilled (e.g., based on a time delay indication), and then send the request for the resource J. In this manner, examples disclosed herein can be used to deploy the complex structure successfully at the first attempt.</p><p id="p-0105" num="0104">In examples disclosed herein, the resource dependency manager <b>1702</b> can be a standalone component or service that can be modified independently of the user <b>1602</b> and the resource-based service <b>1604</b> components (e.g., adding new dependency rules to the dependency database). The example resource dependency manager <b>1702</b> can also be a component moved to the user side via, for example, a client library, a CLI, and/or a proxy. In some examples, the resource dependency manager <b>1702</b> is a component integrated inside the resource-based service <b>1604</b>.</p><p id="p-0106" num="0105">Examples disclosed herein may be used with one or more different types of virtualization environments. Three example types of virtualization environments are: full virtualization, paravirtualization, and OS virtualization. Full virtualization, as used herein, is a virtualization environment in which hardware resources are managed by a hypervisor to provide virtual hardware resources to a virtual machine (VM). In a full virtualization environment, the VMs do not have access to the underlying hardware resources. In a typical full virtualization, a host OS with embedded hypervisor (e.g., a VMWARE&#xae; ESXI&#xae; hypervisor) is installed on the server hardware. VMs including virtual hardware resources are then deployed on the hypervisor. A guest OS is installed in the VM. The hypervisor manages the association between the hardware resources of the server hardware and the virtual resources allocated to the VMs (e.g., associating physical RAM with virtual RAM). Typically, in full virtualization, the VM and the guest OS have no visibility and/or access to the hardware resources of the underlying server. Additionally, in full virtualization, a full guest OS is typically installed in the VM while a host OS is installed on the server hardware. Example virtualization environments include VMWARE&#xae; ESX&#xae; hypervisor, Microsoft HYPER-V&#xae; hypervisor, and Kernel Based Virtual Machine (KVM).</p><p id="p-0107" num="0106">Paravirtualization, as used herein, is a virtualization environment in which hardware resources are managed by a hypervisor to provide virtual hardware resources to a VM, and guest OSs are also allowed to access some or all the underlying hardware resources of the server (e.g., without accessing an intermediate virtual hardware resource). In a typical paravirtualization system, a host OS (e.g., a Linux-based OS) is installed on the server hardware. A hypervisor (e.g., the XEN&#xae; hypervisor) executes on the host OS. VMs including virtual hardware resources are then deployed on the hypervisor. The hypervisor manages the association between the hardware resources of the server hardware and the virtual resources allocated to the VMs (e.g., associating RAM with virtual RAM). In paravirtualization, the guest OS installed in the VM is configured also to have direct access to some or all of the hardware resources of the server. For example, the guest OS may be precompiled with special drivers that allow the guest OS to access the hardware resources without passing through a virtual hardware layer. For example, a guest OS may be precompiled with drivers that allow the guest OS to access a sound card installed in the server hardware. Directly accessing the hardware (e.g., without accessing the virtual hardware resources of the VM) may be more efficient, may allow for performance of operations that are not supported by the VM and/or the hypervisor, etc.</p><p id="p-0108" num="0107">OS virtualization is also referred to herein as container virtualization. As used herein, OS virtualization refers to a system in which processes are isolated in an OS. In a typical OS virtualization system, a host OS is installed on the server hardware. Alternatively, the host OS may be installed in a VM of a full virtualization environment or a paravirtualization environment. The host OS of an OS virtualization system is configured (e.g., utilizing a customized kernel) to provide isolation and resource management for processes that execute within the host OS (e.g., applications that execute on the host OS). Thus, a process executes within a container that isolates the process from other processes executing on the host OS. Thus, OS virtualization provides isolation and resource management capabilities without the resource overhead utilized by a full virtualization environment or a paravirtualization environment. Example OS virtualization environments include Linux Containers LXC and LXD, the DOCKER&#x2122; container platform, the OPENVZ&#x2122; container platform, etc.</p><p id="p-0109" num="0108">In some examples, a data center (or pool of linked data centers) may include multiple different virtualization environments. For example, a data center may include hardware resources that are managed by a full virtualization environment, a paravirtualization environment, and/or an OS virtualization environment. In such a data center, a workload domain may be deployed to any of the virtualization environments. Examples disclosed herein may analyze workload domains for any such virtualization environment to identify instances of non-compliance, and update workload domain configurations to deploy compliant workload domains.</p><p id="p-0110" num="0109">Example methods, apparatus, systems, and articles of manufacture to handle dependencies associated with resource deployment requests are disclosed herein. Further examples and combinations thereof include the following:</p><p id="p-0111" num="0110">Example 1 includes an apparatus to handle dependencies associated with resource deployment requests, the apparatus comprising a dependency graph generator to generate a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on a second resource, a resource controller to send a first request and a second request to the resource-based service based on the dependency graph, and in response to a verification controller determining that a time-based ordering of the first request relative to the second request satisfies the dependency graph, send the first request and the second request to a user device.</p><p id="p-0112" num="0111">Example 2 includes the apparatus of example 1, wherein the resource controller is to request the first resource before the second resource.</p><p id="p-0113" num="0112">Example 3 includes the apparatus of example 2, wherein the dependency graph generator is to store a time delay indication in association with the second resource in the dependency graph for deploying the second resource relative to the first resource, and the resource controller is to use the time delay indication to generate a time delay between requesting the first resource and the second resource.</p><p id="p-0114" num="0113">Example 4 includes the apparatus of example 1, wherein the resource controller is to request the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</p><p id="p-0115" num="0114">Example 5 includes the apparatus of example 1, wherein the verification controller is to generate a status indicator in response to the verification controller determining an order of requests for resources by the resource controller satisfies the dependency graph.</p><p id="p-0116" num="0115">Example 6 includes the apparatus of example 1, wherein the resource controller is to sleep for a time period in response to the verification controller determining that the resource-based service is overloaded, and send the first and second requests to the resource-based service after the time period.</p><p id="p-0117" num="0116">Example 7 includes the apparatus of example 1, wherein the resource controller is to indicate the dependency graph includes an error in response to the verification controller detecting a threshold number of requests for resources that do not satisfy the dependency graph.</p><p id="p-0118" num="0117">Example 8 includes the apparatus of example 7, further including a dependency database generator to change at least one dependency in a dependency database in response to the resource controller indicating the dependency graph includes the error.</p><p id="p-0119" num="0118">Example 9 includes the apparatus of example 1, wherein the resource controller is to increase a time delay in response to the verification controller determining that the order of requests for resources does not satisfy the dependency graph.</p><p id="p-0120" num="0119">Example 10 includes at least one non-transitory computer readable medium comprising instructions that, when executed, cause at least one processor to at least generate a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on a second resource, send a first request and a second request to the resource-based service based on the dependency graph, and in response to determining that a time-based ordering of the first request relative to the second request satisfies the dependency graph, send the first request and the second request to a user device.</p><p id="p-0121" num="0120">Example 11 includes the at least one non-transitory computer readable medium of example 10, wherein the instructions, when executed, cause the at least one processor to request the first resource before the second resource.</p><p id="p-0122" num="0121">Example 12 includes the at least one non-transitory computer readable medium of example 11, wherein the instructions, when executed, cause the at least one processor to store a time delay indication in association with the second resource in the dependency graph for deploying the second resource relative to the first resource, and use the time delay indication to generate a time delay between requesting the first resource and the second resource.</p><p id="p-0123" num="0122">Example 13 includes the at least one non-transitory computer readable medium of example 10, wherein the instructions, when executed, cause the at least one processor to request the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</p><p id="p-0124" num="0123">Example 14 includes the at least one non-transitory computer readable medium of example 10, wherein the instructions, when executed, cause the at least one processor to generate a status indicator in response to determining an order of requests for resources satisfies the dependency graph.</p><p id="p-0125" num="0124">Example 15 includes the at least one non-transitory computer readable medium of example 10, wherein the instructions, when executed, cause the at least one processor to sleep for a time period in response to determining that the resource-based service is overloaded, and send the first and second requests to the resource-based service after the time period.</p><p id="p-0126" num="0125">Example 16 includes the at least one non-transitory computer readable medium of example 10, wherein the instructions, when executed, cause the at least one processor to indicate the dependency graph includes an error in response to detecting a threshold number of requests for resources that do not satisfy the dependency graph.</p><p id="p-0127" num="0126">Example 17 includes the at least one non-transitory computer readable medium of example 16, wherein the instructions, when executed, cause the at least one processor to change at least one dependency in a dependency database in response to the resource controller indicating the dependency graph includes the error.</p><p id="p-0128" num="0127">Example 18 includes the at least one non-transitory computer readable medium of example 10, wherein the instructions, when executed, cause the at least one processor to increase a time delay in response to determining that the order of requests for resources does not satisfy the dependency graph.</p><p id="p-0129" num="0128">Example 19 includes a method to handle dependencies associated with resource deployment requests, the method comprising generating a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on a second resource, sending a first request and a second request to the resource-based service based on the dependency graph, and in response to determining that a time-based ordering of the first request relative to the second request satisfies the dependency graph, sending the first request and the second request to a user device.</p><p id="p-0130" num="0129">Example 20 includes the method of example 19, further including requesting the first resource before the second resource.</p><p id="p-0131" num="0130">Example 21 includes the method of example 20, further including storing a time delay indication in association with the second resource in the dependency graph for deploying the second resource relative to the first resource, and using the time delay indication to generate a time delay between requesting the first resource and the second resource.</p><p id="p-0132" num="0131">Example 22 includes the method of example 19, further including requesting the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</p><p id="p-0133" num="0132">Example 23 includes the method of example 19, further including generating a status indicator in response to determining an order of requests for resources by the resource controller satisfies the dependency graph.</p><p id="p-0134" num="0133">Example 24 includes the method of example 19, further including sleeping for a time period in response to determining that the resource-based service is overloaded, and sending the first and second requests to the resource-based service after the time period.</p><p id="p-0135" num="0134">Example 25 includes the method of example 19, further including indicating the dependency graph includes an error in response to detecting a threshold number of requests for resources that do not satisfy the dependency graph.</p><p id="p-0136" num="0135">Example 26 includes the method of example 25, further including changing at least one dependency in a dependency database in response to an indication that the dependency graph includes the error.</p><p id="p-0137" num="0136">Example 27 includes the method of example 19, further including increasing a time delay in response to determining that the order of requests for resources does not satisfy the dependency graph.</p><p id="p-0138" num="0137">Example 28 includes an apparatus to handle dependencies associated with resource deployment requests, the apparatus comprising means for generating a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on a second resource, means for controlling resource deployment requests to send a first request and a second request to the resource-based service based on the dependency graph, and send the first request and the second request to a user device in response to a time-based ordering of the first request relative to the second request satisfying the dependency graph.</p><p id="p-0139" num="0138">Example 29 includes the apparatus of example 28, wherein the means for controlling is to request the first resource before the second resource.</p><p id="p-0140" num="0139">Example 30 includes the apparatus of example 29, wherein the means for generating the dependency graph is to store a time delay indication in association with the second resource in the dependency graph for deploying the second resource relative to the first resource, and the means for controlling the resource deployment requests is to use the time delay indication to generate a time delay between requesting the first resource and the second resource.</p><p id="p-0141" num="0140">Example 31 includes the apparatus of example 28, wherein the means for controlling the resource deployment request is to request the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</p><p id="p-0142" num="0141">Example 32 includes the apparatus of example 28, wherein the means for verifying is to generate a status indicator in response to the means for verifying determining an order of requests for resources by the means for controlling the resource deployment requests satisfies the dependency graph.</p><p id="p-0143" num="0142">Example 33 includes the apparatus of example 28, wherein the means for controlling the resource deployment requests is to sleep for a time period in response to the means for controlling the resource deployment requests determining that the resource-based service is overloaded, and send the first and second requests to the resource-based service after the time period.</p><p id="p-0144" num="0143">Example 34 includes the apparatus of example 28, wherein the means for controlling the resource deployment requests is to indicate the dependency graph includes an error in response to the means for verifying detecting a threshold number of requests for resources that do not satisfy the dependency graph.</p><p id="p-0145" num="0144">Example 35 includes the apparatus of example 34, further including means for generating a dependency database to change at least one dependency in a dependency database in response to the means for controlling indicating the dependency graph includes the error.</p><p id="p-0146" num="0145">Example 36 includes the apparatus of example 28, wherein the means for controlling the resource deployment requests is to increase a time delay in response to the means for verifying determining that the order of requests for resources does not satisfy the dependency graph.</p><p id="p-0147" num="0146">Although certain example methods, apparatus and articles of manufacture have been disclosed herein, the scope of coverage of this patent is not limited thereto. On the contrary, this patent covers all methods, apparatus and articles of manufacture fairly falling within the scope of the claims of this patent.</p><p id="p-0148" num="0147">The following claims are hereby incorporated into this Detailed Description by this reference, with each claim standing on its own as a separate embodiment of the present disclosure.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. At least one non-transitory computer readable medium comprising instructions that, when executed, cause at least one processor to at least:<claim-text>generate a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on the second resource;</claim-text><claim-text>cause transmission of a first request and a second request to the resource-based service based on the dependency graph;</claim-text><claim-text>generate a status indicator after determining a time-based ordering of the first request relative to the second request satisfies the dependency graph; and</claim-text><claim-text>after determining that the time-based ordering of the first request relative to the second request satisfies the dependency graph, cause transmission of the status indicator to a user device.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The at least one non-transitory computer readable medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instructions are to cause the at least one processor to request the first resource before the second resource.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The at least one non-transitory computer readable medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instructions are to cause the at least one processor to request the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. At least one non-transitory computer readable medium comprising instructions that, when executed, cause at least one processor to at least:<claim-text>generate a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on the second resource;</claim-text><claim-text>sleep for a time period after determining that the resource-based service is overloaded;</claim-text><claim-text>provide a first request and a second request to the resource-based service based on the dependency graph after the time period; and</claim-text><claim-text>after determining that a time-based ordering of the first request relative to the second request satisfies the dependency graph, cause transmission of at least one status of the first request and the second request to a user device.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The at least one non-transitory computer readable medium of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the instructions are to cause the at least one processor to request the first resource before the second resource.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The at least one non-transitory computer readable medium of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the instructions are to cause the at least one processor to request the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. At least one non-transitory computer readable medium comprising instructions that, when executed, cause at least one processor to at least:<claim-text>generate a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on the second resource;</claim-text><claim-text>provide a first request and a second request to the resource-based service based on the dependency graph;</claim-text><claim-text>increase a time delay after determining that a time-based ordering of the first request relative to the second request does not satisfy the dependency graph; and</claim-text><claim-text>after determining that the time-based ordering of the first request relative to the second request satisfies the dependency graph, cause transmission of at least one status of the first request and the second request to a user device.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The at least one non-transitory computer readable medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the instructions are to cause the at least one processor to request the first resource before the second resource.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The at least one non-transitory computer readable medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the instructions are to cause the at least one processor to request the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A method to handle dependencies associated with resource deployment requests, the method comprising:<claim-text>generating a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on the second resource;</claim-text><claim-text>storing a time delay indication in association with the second resource in the dependency graph, the time delay indication to deploy the second resource relative to the first resource;</claim-text><claim-text>using the time delay indication to generate a time delay between requesting the first resource and the second resource;</claim-text><claim-text>providing a first request and a second request to the resource-based service based on the dependency graph; and</claim-text><claim-text>after determining that a time-based ordering of the first request relative to the second request satisfies the dependency graph, causing transmission of at least one status of the first request and the second request to a user device.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method <claim-ref idref="CLM-00010">claim 10</claim-ref>, further including request the first resource before the second resource.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method <claim-ref idref="CLM-00010">claim 10</claim-ref>, further including requesting the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A method to handle dependencies associated with resource deployment requests, the method comprising:<claim-text>generating a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on the second resource;</claim-text><claim-text>sending a first request and a second request to the resource-based service based on the dependency graph;</claim-text><claim-text>generating a status indicator after determining a time-based ordering of the first request relative to the second request satisfies the dependency graph; and</claim-text><claim-text>after determining the time-based ordering of the first request relative to the second request satisfies the dependency graph, causing transmission of the status indicator to a user device.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method <claim-ref idref="CLM-00013">claim 13</claim-ref>, further including request the first resource before the second resource.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method <claim-ref idref="CLM-00013">claim 13</claim-ref>, further including requesting the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A method to handle dependencies associated with resource deployment requests, the method comprising:<claim-text>generating a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on the second resource;</claim-text><claim-text>sleeping for a time period after determining that the resource-based service is overloaded;</claim-text><claim-text>transmitting a first request and a second request to the resource-based service based on the dependency graph after the time period; and</claim-text><claim-text>after determining that a time-based ordering of the first request relative to the second request satisfies the dependency graph, transmitting at least one status of the first request and the second request to a user device.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method <claim-ref idref="CLM-00016">claim 16</claim-ref>, further including request the first resource before the second resource.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method <claim-ref idref="CLM-00016">claim 16</claim-ref>, further including requesting the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A method to handle dependencies associated with resource deployment requests, the method comprising:<claim-text>generating a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on the second resource;</claim-text><claim-text>causing transmission of a first request and a second request to the resource-based service based on the dependency graph;</claim-text><claim-text>after determining that a time-based ordering of the first request relative to the second request satisfies the dependency graph, transmitting at least one status of the first request and the second request to a user device; and</claim-text><claim-text>indicating the dependency graph includes an error after detecting a threshold number of requests for resources that do not satisfy the dependency graph.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method <claim-ref idref="CLM-00019">claim 19</claim-ref>, further including request the first resource before the second resource.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The method <claim-ref idref="CLM-00019">claim 19</claim-ref>, further including requesting the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, further including changing at least one dependency in a dependency database after indicating the dependency graph includes the error.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. A method to handle dependencies associated with resource deployment requests, the method comprising:<claim-text>generating a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on the second resource;</claim-text><claim-text>sending a first request and a second request to the resource-based service based on the dependency graph;</claim-text><claim-text>increasing a time delay after determining that a time-based ordering of the first request relative to the second request does not satisfy the dependency graph; and</claim-text><claim-text>after determining that the time-based ordering of the first request relative to the second request satisfies the dependency graph, transmitting at least one status of the first request and the second request to a user device.</claim-text></claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The method <claim-ref idref="CLM-00023">claim 23</claim-ref>, further including request the first resource before the second resource.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The method <claim-ref idref="CLM-00023">claim 23</claim-ref>, further including requesting the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. An apparatus to handle dependencies associated with resource deployment requests, the apparatus comprising:<claim-text>means for generating a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on the second resource;</claim-text><claim-text>means for verifying to generate a status indicator after a determination that a time-based ordering of a first request relative to a second request satisfies the dependency graph; and</claim-text><claim-text>means for controlling resource deployment requests to:<claim-text>cause transmission of the first request and the second request to the resource-based service based on the dependency graph; and</claim-text><claim-text>after determining that the time-based ordering of the first request relative to the second request satisfies the dependency graph, cause transmission of the status indicator to a user device.</claim-text></claim-text></claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The apparatus of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the means for controlling the resource deployment requests is to request the first resource before the second resource.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The apparatus of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the means for controlling the resource deployment requests is to request the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. An apparatus to handle dependencies associated with resource deployment requests, the apparatus comprising:<claim-text>means for generating a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on the second resource; and</claim-text><claim-text>means for controlling resource deployment requests to:<claim-text>sleep for a time period after a determination that the resource-based service is overloaded;</claim-text><claim-text>cause transmission of a first request and a second request to the resource-based service based on the dependency graph after the time period; and</claim-text><claim-text>after determining that a time-based ordering of the first request relative to the second request satisfies the dependency graph, cause transmission of at least one status of the first request and the second request to a user device.</claim-text></claim-text></claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The apparatus of <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein the means for controlling the resource deployment requests is to request the first resource before the second resource.</claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. The apparatus of <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein the means for controlling the resource deployment requests is to request the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. An apparatus to handle dependencies associated with resource deployment requests, the apparatus comprising:<claim-text>means for generating a dependency graph based on a resource request file specifying a first resource and a second resource to deploy to a resource-based service, the dependency graph representative of the first resource being dependent on the second resource; and</claim-text><claim-text>means for controlling resource deployment requests to:<claim-text>cause transmission of a first request and a second request to the resource-based service based on the dependency graph;</claim-text><claim-text>increase a time delay after a determination that a time-based ordering of the first request relative to the second request does not satisfy the dependency graph; and</claim-text><claim-text>after determining that the time-based ordering of the first request relative to the second request satisfies the dependency graph, cause transmission of at least one status of the first request and the second request to a user device.</claim-text></claim-text></claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The apparatus of <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the means for controlling the resource deployment requests is to request the first resource before the second resource.</claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The apparatus of <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the means for controlling the resource deployment requests is to request the first resource and a third resource concurrently, the third resource not dependent on the first resource or the second resource.</claim-text></claim></claims></us-patent-application>