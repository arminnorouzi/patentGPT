<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007273A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007273</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17897216</doc-number><date>20220828</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="regional"><country>EP</country><doc-number>PCT/EP2019/065540</doc-number><date>20190613</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>159</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>105</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>139</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>96</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>159</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>105</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>139</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>96</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">ENCODER, A DECODER AND CORRESPONDING METHODS USING INTRA BLOCK COPY (IBC) DEDICATED BUFFER AND DEFAULT VALUE REFRESHING FOR LUMA AND CHROMA COMPONENT</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17141147</doc-number><date>20210104</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11463709</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17897216</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>PCT/CN2020/090053</doc-number><date>20200513</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17141147</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>HUAWEI TECHNOLOGIES CO., LTD.</orgname><address><city>Shenzhen</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>GAO</last-name><first-name>Han</first-name><address><city>Munich</city><country>DE</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>ESENLIK</last-name><first-name>Semih</first-name><address><city>Munich</city><country>DE</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>WANG</last-name><first-name>Biao</first-name><address><city>Munich</city><country>DE</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>KOTRA</last-name><first-name>Anand Meher</first-name><address><city>Munich</city><country>DE</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>CHEN</last-name><first-name>Jianle</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>HUAWEI TECHNOLOGIES CO., LTD.</orgname><role>03</role><address><city>Shenzhen</city><country>CN</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method of coding implemented by a decoding device, comprising initializing a dedicated buffer for intra block copy (IBC) referencing, when a current coding tree unit (CTU) to be decoded is a first CTU of a CTU row, determining whether a current block in the current CTU is predicted using IBC mode, obtaining an IBC block vector for the current block when the current block is predicted using IBC mode, and obtaining predicted sample values for the current block, based on reference samples from the dedicated buffer and the IBC block vector for the current block.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="108.20mm" wi="128.86mm" file="US20230007273A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="216.58mm" wi="160.10mm" orientation="landscape" file="US20230007273A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="134.96mm" wi="125.98mm" orientation="landscape" file="US20230007273A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="254.85mm" wi="157.99mm" orientation="landscape" file="US20230007273A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="248.24mm" wi="168.91mm" orientation="landscape" file="US20230007273A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="204.64mm" wi="160.70mm" orientation="landscape" file="US20230007273A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="206.42mm" wi="132.76mm" orientation="landscape" file="US20230007273A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="197.44mm" wi="161.46mm" orientation="landscape" file="US20230007273A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="236.64mm" wi="153.42mm" orientation="landscape" file="US20230007273A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="242.65mm" wi="85.51mm" orientation="landscape" file="US20230007273A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="143.85mm" wi="74.08mm" orientation="landscape" file="US20230007273A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="123.87mm" wi="143.34mm" orientation="landscape" file="US20230007273A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="233.09mm" wi="163.41mm" orientation="landscape" file="US20230007273A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="211.92mm" wi="162.22mm" orientation="landscape" file="US20230007273A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="206.76mm" wi="146.39mm" orientation="landscape" file="US20230007273A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="211.92mm" wi="162.22mm" orientation="landscape" file="US20230007273A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="206.93mm" wi="146.39mm" orientation="landscape" file="US20230007273A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="224.20mm" wi="166.29mm" orientation="landscape" file="US20230007273A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="224.20mm" wi="166.29mm" orientation="landscape" file="US20230007273A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="211.16mm" wi="166.79mm" orientation="landscape" file="US20230007273A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="218.52mm" wi="117.77mm" orientation="landscape" file="US20230007273A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 17/141,147, filed on Jan. 4, 2021, which is a continuation of International Application No. PCT/CN2020/090053, filed on May 13, 2020, The International Application claims priority to U.S. provisional Patent Application No. 62/849,119, filed on May 16, 2019, and International Patent Application No. PCT/EP2019/065540, filed on Jun. 13, 2019. All of the afore-mentioned patent applications are hereby incorporated by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">Embodiments of the present application generally relate to the field of picture processing and more particularly to an encoder, a decoder, and corresponding methods using IBC dedicated buffer.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Video coding (video encoding and decoding) is used in a wide range of digital video applications, for example, broadcast digital TV, video transmission over the internet and mobile networks, real-time conversational applications such as video chat, video conferencing, DVD and Blu-ray discs, video content acquisition and editing systems, and camcorders of security applications.</p><p id="p-0005" num="0004">The amount of video data needed to depict even a relatively short video can be substantial, which may result in difficulties when the data is to be streamed or otherwise communicated across a communications network with limited bandwidth capacity. Thus, video data is generally compressed before being communicated across modern day telecommunications networks. The size of a video could also be an issue when the video is stored on a storage device because memory resources may be limited. Video compression devices often use software and/or hardware at the source to code the video data prior to transmission or storage, thereby decreasing the quantity of data needed to represent digital video images. The compressed data is then received at the destination by a video decompression device that decodes the video data. With limited network resources and ever increasing demands of higher video quality, improved compression and decompression techniques that improve compression ratio with little to no sacrifice in picture quality are desirable.</p><heading id="h-0004" level="1">SUMMARY OF THE DISCLOSURE</heading><p id="p-0006" num="0005">Embodiments of the present application provide apparatuses and methods for encoding and decoding according to the independent claims.</p><p id="p-0007" num="0006">The foregoing and other objects are achieved by the subject matter of the independent claims. Further implementation forms are apparent from the dependent claims, the description and the figures.</p><p id="p-0008" num="0007">A first embodiment of the present disclosure provides a method of coding, implemented by a decoding device, comprising: initializing a dedicated buffer for intra block copy (IBC) referencing, when a current coding tree unit (CTU) to be decoded is a first CTU of a CTU row, determining whether a current block in the current CTU is predicted using IBC mode, obtaining an IBC block vector for the current block when the current block is predicted using IBC mode, and obtaining predicted sample values for the current block, based on reference samples from the dedicated buffer and the IBC block vector for the current block.</p><p id="p-0009" num="0008">The reference samples from the dedicated buffer may be initialized to a default value. The default value may be &#x2212;1.</p><p id="p-0010" num="0009">The method according to the present embodiment removes all block vector validation bitstream conformance constraints. This increases robustness of the coded bitstream. Besides, the dedicated IBC buffer is initialized. Undefined samples are therefore avoided.</p><p id="p-0011" num="0010">Consequently, no bitstream conformance for IBC block vector validation is required. In addition, no samples from the last CTU row are used in IBC referencing. In this case, no additional line memory is needed for IBC prediction.</p><p id="p-0012" num="0011">According to an aspect of the first embodiment, a decoder is provided comprising processing circuitry for carrying out any one of the methods according to the first embodiment. The decoder may further comprise a dedicated buffer for storing IBC reference samples.</p><p id="p-0013" num="0012">According to a further aspect of the first embodiment, a computer program product is provided comprising instructions which, when the program is executed by a computer, cause the computer to carry out any one of the methods according to the first embodiment.</p><p id="p-0014" num="0013">According to a further aspect of the first embodiment, a decoder is provided comprising one or more processors and a non-transitory computer-readable storage medium coupled to the one or more processors and storing instructions for execution by the one or more processors, wherein the instructions, when executed by the one or more processors, configure the decoder to carry out any one of the methods according to the first embodiment.</p><p id="p-0015" num="0014">A second embodiment of the present disclosure provides a method of coding, implemented by an encoding device, comprising initializing a dedicated buffer for intra block copy (IBC) referencing, when a current coding tree unit (CTU) to be encoded is a first CTU of a CTU row, obtaining predicted sample values for a current block in the current CTU, based on reference samples from the dedicated buffer, and encoding an IBC block vector for the current block, based on the predicted sample values for the current block.</p><p id="p-0016" num="0015">The reference samples from the dedicated buffer may be initialized to a default value. The default value may be &#x2212;1.</p><p id="p-0017" num="0016">The method according to the present embodiment removes all block vector validation bitstream conformance constraints. This increases robustness of the coded bitstream. Besides, the dedicated IBC buffer is initialized. Undefined samples are therefore avoided.</p><p id="p-0018" num="0017">Consequently, no bitstream conformance for IBC block vector validation is required. In addition, no samples from the last CTU row are used in IBC referencing. In this case, no additional line memory is needed for IBC prediction.</p><p id="p-0019" num="0018">According to an aspect of the second embodiment, an encoder is provided comprising processing circuitry for carrying out any one of the methods of the second embodiment. The encoder may further comprise a dedicated buffer for storing IBC reference samples.</p><p id="p-0020" num="0019">According to a further aspect of the second embodiment, a computer program product is provided comprising instructions which, when the program is executed by a computer, cause the computer to carry out any one of the methods according to the second embodiment.</p><p id="p-0021" num="0020">According to a further aspect of the second embodiment, an encoder is provided comprising one or more processors and a non-transitory computer-readable storage medium coupled to the one or more processors and storing instructions for execution by the one or more processors, wherein the instructions, when executed by the one or more processors, configure the encoder to carry out any one of the methods according to the second embodiment.</p><p id="p-0022" num="0021">A third embodiment of the present disclosure provides a method of coding, implemented by a decoding device, comprising initializing a dedicated buffer for intra block copy (IBC) referencing for an area of a coding tree unit (CTU), when a current coding block to be decoded is a first coding block in the area of the CTU, determining whether the current block in the current CTU is predicted using IBC mode, obtaining an IBC block vector for the current block when the current block is predicted using IBC mode, and obtaining predicted sample values for the current block, based on reference samples from the dedicated buffer and the IBC block vector for the current block.</p><p id="p-0023" num="0022">The reference samples from the dedicated buffer may be initialized to a default value. The default value may be &#x2212;1.</p><p id="p-0024" num="0023">The area of the CTU may be a fixed size, non-overlapped area. The area may be a virtual pipeline processing unit, VPDU. A size of the area may be 64&#xd7;64.</p><p id="p-0025" num="0024">No bitstream conformance for IBC block vector validation is required. No samples from the last CTU row are used in IBC referencing. In this case, no additional line memory is used for IBC prediction. In addition, the IBC referencing memory size is the same as in the current VVC design, i.e. no additional memory is required for implementing the embodiment. For the current VPDU referencing, there is no need to access the dedicated IBC buffer.</p><p id="p-0026" num="0025">According to an aspect of the third embodiment, a decoder is provided comprising processing circuitry for carrying out any one of the methods according to the third embodiment. The decoder may further comprise a dedicated buffer for storing IBC reference samples.</p><p id="p-0027" num="0026">According to a further aspect of the third embodiment, a computer program product is provided comprising instructions which, when the program is executed by a computer, cause the computer to carry out any one of the methods according to the third embodiment.</p><p id="p-0028" num="0027">According to a further aspect of the third embodiment, a decoder is provided comprising one or more processors and a non-transitory computer-readable storage medium coupled to the one or more processors and storing instructions for execution by the one or more processors, wherein the instructions, when executed by the one or more processors, configure the decoder to carry out any one of the methods according to the third embodiment.</p><p id="p-0029" num="0028">A fourth embodiment of the present disclosure provides a method of coding, implemented by a decoding device, comprising initializing a dedicated buffer for intra block copy (IBC) referencing, when a current coding tree unit (CTU) to be decoded is a first CTU of a picture, determining whether a current block in the current CTU is predicted using IBC mode, obtaining an IBC block vector for the current block when the current block is predicted using IBC mode, and obtaining predicted sample values for the current block, based on reference samples from the dedicated buffer and the IBC block vector for the current block.</p><p id="p-0030" num="0029">The reference samples from the dedicated buffer may be initialized to a default value. The default value may be &#x2212;1.</p><p id="p-0031" num="0030">The method according to the present embodiment removes all block vector validation bitstream conformance constraints. This increases robustness of the coded bitstream. Besides, the dedicated IBC buffer is initialized. Undefined samples are therefore avoided.</p><p id="p-0032" num="0031">According to an aspect of the fourth embodiment, a decoder is provided comprising processing circuitry for carrying out any one of the methods according to the fourth embodiment. The decoder may further comprise a dedicated buffer for storing IBC reference samples.</p><p id="p-0033" num="0032">According to a further aspect of the fourth embodiment, a computer program product is provided comprising instructions which, when the program is executed by a computer, cause the computer to carry out any one of the methods according to the fourth embodiment.</p><p id="p-0034" num="0033">According to a further aspect of the fourth embodiment, a decoder is provided comprising one or more processors and a non-transitory computer-readable storage medium coupled to the one or more processors and storing instructions for execution by the one or more processors, wherein the instructions, when executed by the one or more processors, configure the decoder to carry out any one of the methods according to the fourth embodiment.</p><p id="p-0035" num="0034">A fifth embodiment of the present disclosure provides a method of coding, implemented by a decoding device, comprising initializing a dedicated buffer for intra block copy (IBC) referencing, when a current block is a first coding block in a current coding tree unit (CTU), wherein the CTU is a first CTU of a CTU row, determining whether a current block in the current CTU is predicted using IBC mode, obtaining an IBC block vector for the current block when the current block is predicted using IBC mode, and obtaining predicted sample values for the current block, based on reference samples from the dedicated buffer and the IBC block vector for the current block.</p><p id="p-0036" num="0035">The reference samples from the dedicated buffer may be initialized to a default value. The default value may be &#x2212;1.</p><p id="p-0037" num="0036">Consequently, no bitstream conformance for IBC block vector validation is required. In addition, no samples from the last CTU row are used in IBC referencing. In this case, no additional line memory is needed for IBC prediction.</p><p id="p-0038" num="0037">According to an aspect of the fifth embodiment, a decoder is provided comprising processing circuitry for carrying out any one of the methods according to the fifth embodiment. The decoder may further comprise a dedicated buffer for storing IBC reference samples.</p><p id="p-0039" num="0038">According to a further aspect of the fifth embodiment, a computer program product is provided comprising instructions which, when the program is executed by a computer, cause the computer to carry out any one of the methods according to the fifth embodiment.</p><p id="p-0040" num="0039">According to a further aspect of the fifth embodiment, a decoder is provided comprising one or more processors and a non-transitory computer-readable storage medium coupled to the one or more processors and storing instructions for execution by the one or more processors, wherein the instructions, when executed by the one or more processors, configure the decoder to carry out any one of the methods according to the fifth embodiment.</p><p id="p-0041" num="0040">A sixth embodiment of the present disclosure provides a method of coding, implemented by a decoding device, comprising: providing a dedicated buffer for intra block copy (IBC) referencing; determining whether a current block to be decoded is predicted using IBC mode;</p><p id="p-0042" num="0041">obtaining an IBC block vector for the current block when the current block is predicted using IBC mode; and obtaining predicted sample values for the current block, based on reference samples from the dedicated buffer and the IBC block vector for the current block; wherein the dedicated buffer is initialized to a default value, when the current block is a first coding block of a first coding tree unit (CTU) in a current frame.</p><p id="p-0043" num="0042">The method according to the present embodiment removes all block vector validation bitstream conformance constraints. This increases robustness of the coded bitstream. Besides, the dedicated IBC buffer is initialized. Undefined samples are therefore avoided.</p><p id="p-0044" num="0043">The method may further comprise initializing the dedicated buffer to the default value, when the current block is a first coding block of a CTU row in the current frame.</p><p id="p-0045" num="0044">Consequently, no bitstream conformance for IBC block vector validation is required. In addition, no samples from the last CTU row are used in IBC referencing. In this case, no additional line memory is needed for IBC prediction.</p><p id="p-0046" num="0045">The method may further comprise initializing the dedicated buffer for an area of a CTU to the default value, when the current block is a first coding block in the area of the CTU. The area of the CTU may be a fixed size, non-overlapped area. The area may in particular, be a virtual pipeline processing unit (VPDU).</p><p id="p-0047" num="0046">No bitstream conformance for IBC block vector validation is required. No samples from the last CTU row are used in IBC referencing. In this case, no additional line memory is used for IBC prediction. In addition, the IBC referencing memory size is the same as in the current VVC design, i.e. no additional memory is required for implementing the embodiment. For the current VPDU referencing, there is no need to access the dedicated IBC buffer.</p><p id="p-0048" num="0047">The default value may be &#x2212;1.</p><p id="p-0049" num="0048">The default value may be obtained based on an internal bit depth for a sequence of frames, wherein the current block is a block of the sequence.</p><p id="p-0050" num="0049">When chroma components of the current block are predicted using IBC mode and co-located luma components of the current block are predicted not using IBC mode, the IBC block vector for the chroma components of the current block may be set to a default block vector.</p><p id="p-0051" num="0050">The current block may comprise at least two sub-blocks, wherein, when chroma components of a sub-block are predicted using IBC mode and co-located luma components of the sub-block are predicted not using IBC mode, the IBC block vector for the chroma components of the sub-block may be set to a default block vector.</p><p id="p-0052" num="0051">The default block vector may be (0, 0). The default vector may be the IBC block vector of a co-located central luma sample for the current block, when the co-located central luma sample for the current block is predicted by using IBC mode.</p><p id="p-0053" num="0052">Consequently, additional bitstream conformance checks may be avoided for the chroma component in the separated tree case.</p><p id="p-0054" num="0053">The dedicated buffer may be referenced based on ((x+BVx) % W, (y+BVy) % H), wherein for x&#x3c;0, x % L<img id="CUSTOM-CHARACTER-00001" he="3.56mm" wi="3.22mm" file="US20230007273A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>L&#x2212;(&#x2212;x % L), where W and H represent the dedicated buffer size, x and y represent a predicted sample of the current block, and (BVx, BVy) represents the IBC block vector of the current block.</p><p id="p-0055" num="0054">According to an aspect of the sixth embodiment, a decoder is provided comprising processing circuitry for carrying out any one of the methods according to the sixth embodiment. The decoder may further comprise a dedicated buffer for storing IBC reference samples.</p><p id="p-0056" num="0055">According to a further aspect of the sixth embodiment, a computer program product is provided comprising instructions which, when the program is executed by a computer, cause the computer to carry out any one of the methods according to the sixth embodiment.</p><p id="p-0057" num="0056">According to a further aspect of the sixth embodiment, a decoder is provided comprising one or more processors and a non-transitory computer-readable storage medium coupled to the one or more processors and storing instructions for execution by the one or more processors, wherein the instructions, when executed by the one or more processors, configure the decoder to carry out any one of the methods according to the sixth embodiment.</p><p id="p-0058" num="0057">According to a further aspect of the sixth embodiment, a decoder is provided comprising a dedicated buffer for intra block copy (IBC) referencing; a determining module configured to determine whether a current block to be decoded is predicted using IBC mode; a first obtaining module configured to obtain an IBC block vector for the current block when the current block is predicted using IBC mode; a second obtaining module configured to obtain predicted sample values for the current block, based on reference samples from the dedicated buffer and the IBC block vector for the current block; and an initializing module configured to initialize the dedicated buffer to a default value, when the current block is a first coding block of a first coding tree unit (CTU) in a current frame.</p><p id="p-0059" num="0058">A seventh embodiment of the present disclosure provides a method of coding, implemented by an encoding device, comprising providing a dedicated buffer for intra block copy (IBC) referencing; obtaining predicted sample values for a current block to be encoded, based on reference samples from the dedicated buffer; and obtaining an IBC block vector for the current block, based on the predicted sample values for the current block; wherein the dedicated buffer is initialized to a default value, when the current block is a first coding block of a first coding tree unit (CTU) in a current frame.</p><p id="p-0060" num="0059">The method according to the present embodiment removes all block vector validation bitstream conformance constraints. This increases robustness of the coded bitstream. Besides, the dedicated IBC buffer is initialized. Undefined samples are therefore avoided.</p><p id="p-0061" num="0060">The method may further comprise initializing the dedicated buffer to the default value, when the current block is a first coding block of a CTU row in the current frame.</p><p id="p-0062" num="0061">Consequently, no bitstream conformance for IBC block vector validation is required. In addition, no samples from the last CTU row are used in IBC referencing. In this case, no additional line memory is needed for IBC prediction.</p><p id="p-0063" num="0062">The method may further comprise initializing the dedicated buffer for an area of a CTU to the default value, when the current block is a first coding block in the area of the CTU. The area of the CTU may be a fixed size, non-overlapped area. The area may in particular, be a virtual pipeline processing unit (VPDU).</p><p id="p-0064" num="0063">No bitstream conformance for IBC block vector validation is required. No samples from the last CTU row are used in IBC referencing. In this case, no additional line memory is used for IBC prediction. In addition, the IBC referencing memory size is the same as in the current VVC design, i.e. no additional memory is required for implementing the embodiment. For the current VPDU referencing, there is no need to access the dedicated IBC buffer.</p><p id="p-0065" num="0064">The default value may be &#x2212;1.</p><p id="p-0066" num="0065">The default value may be obtained based on an internal bit depth for a sequence of frames, wherein the current block is a block of the sequence.</p><p id="p-0067" num="0066">When chroma components of the current block are predicted using IBC mode and co-located luma components of the current block are predicted not using IBC mode, the IBC block vector for the chroma components of the current block may be set to a default block vector.</p><p id="p-0068" num="0067">The current block may comprise at least two sub-blocks, wherein, when chroma components of a sub-block are predicted using IBC mode and co-located luma components of the sub-block are predicted not using IBC mode, the IBC block vector for the chroma components of the sub-block may be set to a default block vector.</p><p id="p-0069" num="0068">The default block vector may be (0, 0). The default vector may be the IBC block vector of a co-located central luma sample for the current block, when the co-located central luma sample for the current block is predicted by using IBC mode.</p><p id="p-0070" num="0069">Consequently, additional bitstream conformance checks may be avoided for the chroma component in the separated tree case.</p><p id="p-0071" num="0070">The dedicated buffer may be referenced based on ((x+BVx) % W, (y+BVy) % H), wherein for x&#x3c;0, x % L<img id="CUSTOM-CHARACTER-00002" he="2.46mm" wi="1.78mm" file="US20230007273A1-20230105-P00002.TIF" alt="custom-character" img-content="character" img-format="tif"/>L&#x2212;(&#x2212;x % L), where W and H represent the dedicated buffer size, x and y represent a predicted sample of the current block, and (BVx, BVy) represents the IBC block vector of the current block.</p><p id="p-0072" num="0071">According to an aspect of the seventh embodiment, an encoder is provided comprising processing circuitry for carrying out any one of the methods according to the seventh embodiment. The encoder may further comprise a dedicated buffer for storing IBC reference samples.</p><p id="p-0073" num="0072">According to a further aspect of the seventh embodiment, a computer program product is provided comprising instructions which, when the program is executed by a computer, cause the computer to carry out any one of the methods according to the seventh embodiment.</p><p id="p-0074" num="0073">According to a further aspect of the seventh embodiment, an encoder is provided comprising one or more processors and a non-transitory computer-readable storage medium coupled to the one or more processors and storing instructions for execution by the one or more processors, wherein the instructions, when executed by the one or more processors, configure the encoder to carry out any one of the methods according to the seventh embodiment.</p><p id="p-0075" num="0074">According to a further aspect of the seventh embodiment, an encoder is provided comprising a dedicated buffer for intra block copy (IBC) referencing; a first obtaining module configured to obtain predicted sample values for a current block to be encoded, based on reference samples from the dedicated buffer; a second obtaining module configured to obtain an IBC block vector for the current block, based on the predicted sample values for the current block; and an initializing module configured to initialize the dedicated buffer to a default value, when the current block is a first coding block of a first coding tree unit (CTU) in a current frame.</p><p id="p-0076" num="0075">An eighth embodiment of the present disclosure provides a method of coding implemented by a decoding device, comprising initializing a dedicated buffer based on a default value, when the current block is the first coding block of the first coding tree unit (CTU) in a current frame (or picture), the dedicated buffer being used for intra block copy (IBC) referencing, determining whether the current block is predicted using IBC mode or not, obtaining an IBC block vector for the current block when the current block is predicted using IBC mode, and obtaining predicted sample values for the current block, based on the dedicated buffer and the IBC block vector for the current block.</p><p id="p-0077" num="0076">A ninth embodiment of the present disclosure provides a method of coding implemented by an encoding device, comprising initializing a dedicated buffer based on a default value, when the current block is the first coding block of the first coding tree unit (CTU) in a current frame (or picture), the dedicated buffer being used for intra block copy (IBC) referencing, obtaining predicted sample values for the current block, based on the dedicated buffer, and obtaining an IBC block vector for the current block, based on the predicted sample values for the current block.</p><p id="p-0078" num="0077">In a tenth embodiment, a method of coding implemented by a decoding device is disclosed, the method comprising:</p><p id="p-0079" num="0078">initializing a dedicated buffer based on a default value, when the current block is the first coding block of the first coding tree unit (CTU) in a current frame (or picture), the dedicated buffer is used for intra block copy (IBC) referencing;</p><p id="p-0080" num="0079">determining whether the current block is predicted using IBC mode or not;</p><p id="p-0081" num="0080">obtaining an IBC block vector for the current block when the current block is predicted using IBC mode; and</p><p id="p-0082" num="0081">obtaining predicted sample values for the current block, based on the dedicated buffer and the IBC block vector for the current block.</p><p id="p-0083" num="0082">In one implementation, the method further comprises:</p><p id="p-0084" num="0083">initializing the dedicated buffer based on the default value, when the current block is the first coding block of a CTU row in the current frame (or picture).</p><p id="p-0085" num="0084">In one implementation, the method further comprises:</p><p id="p-0086" num="0085">initializing a dedicated buffer for an area of a CTU based on the default value, when the current block is the first coding block in the area of the CTU.</p><p id="p-0087" num="0086">In one implementation, the area in a CTU is a fixed size non-overlapped area.</p><p id="p-0088" num="0087">In one implementation, the default value is obtained based on an internal bit depth for a sequence, wherein the current block is a block of the sequence.</p><p id="p-0089" num="0088">In one implementation, when chroma components of the current block are predicted using IBC mode and co-located luma components of the current block are predicted not using IBC mode, the IBC block vector for chroma components of the current block is a default block vector.</p><p id="p-0090" num="0089">In one implementation, the current block comprises at least two sub-blocks, and when chroma components of a sub-block are predicted using IBC mode and co-located luma components of the sub-block are predicted not using IBC mode, the IBC block vector for chroma components of the sub-block is a default block vector.</p><p id="p-0091" num="0090">In one implementation, the default block vector is (0, 0).</p><p id="p-0092" num="0091">In one implementation, the default vector is the block vector of the co-located central luma sample for the current block, when the co-located central luma sample for the current block is predicted by using IBC mode.</p><p id="p-0093" num="0092">In an eleventh embodiment, a method of coding implemented by an encoding device is disclosed, the method comprising:</p><p id="p-0094" num="0093">initializing a dedicated buffer based on a default value, when the current block is the first coding block of the first coding tree unit (CTU) in a current frame (or picture), the dedicated buffer is used for intra block copy (IBC) referencing;</p><p id="p-0095" num="0094">obtaining predicted sample values for the current block, based on the dedicated buffer;</p><p id="p-0096" num="0095">obtaining an IBC block vector for the current block, based on the predicted sample values for the current block.</p><p id="p-0097" num="0096">In one implementation, the method further comprises:</p><p id="p-0098" num="0097">initializing the dedicated buffer based on the default value, when the current block is the first coding block of a CTU row in the current frame (or picture).</p><p id="p-0099" num="0098">In one implementation, the method further comprises:</p><p id="p-0100" num="0099">initializing a dedicated buffer for an area of a CTU based on the default value, when the current block is the first coding block in the area of the CTU.</p><p id="p-0101" num="0100">In one implementation, the area in a CTU is a fixed size non-overlapped area.</p><p id="p-0102" num="0101">In one implementation, the default value is obtained based on an internal bit depth for a sequence, wherein the current block is a block of the sequence.</p><p id="p-0103" num="0102">In one implementation, when chroma components of the current block are predicted using IBC mode and co-located luma components of the current block are predicted not using IBC mode, the IBC block vector for chroma components of the current block is a default block vector.</p><p id="p-0104" num="0103">In one implementation, the current block comprises at least two sub-blocks, and when chroma components of a sub-block are predicted using IBC mode and co-located luma components of the sub-block are predicted not using IBC mode, the IBC block vector for chroma components of the sub-block is a default block vector.</p><p id="p-0105" num="0104">In one implementation, the default block vector is (0, 0).</p><p id="p-0106" num="0105">In one implementation, the default vector is the block vector of the co-located central luma sample for the current block, when the co-located central luma sample for the current block is predicted by using IBC mode.</p><p id="p-0107" num="0106">In one embodiment, an encoder comprising processing circuitry for carrying out the method according to any one of the above embodiments or implementations is disclosed.</p><p id="p-0108" num="0107">In one embodiment, a decoder comprising processing circuitry for carrying out the method according to any one of the above embodiments or implementations is disclosed.</p><p id="p-0109" num="0108">In one embodiment, a computer program product comprising a program code for performing the method according to any one of the above embodiments or implementations is disclosed.</p><p id="p-0110" num="0109">In one embodiment, a decoder is disclosed, the decoder comprising:</p><p id="p-0111" num="0110">one or more processors; and</p><p id="p-0112" num="0111">a non-transitory computer-readable storage medium coupled to the processors and storing programming for execution by the processors, wherein the programming, when executed by the processors, configures the decoder to carry out the method according to any one of the above embodiments or implementations.</p><p id="p-0113" num="0112">In one embodiment, an encoder is disclosed, the encoder comprising:</p><p id="p-0114" num="0113">one or more processors; and</p><p id="p-0115" num="0114">a non-transitory computer-readable storage medium coupled to the processors and storing programming for execution by the processors, wherein the programming, when executed by the processors, configures the encoder to carry out the method according to any one of the above embodiments or implementations.</p><p id="p-0116" num="0115">Details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description, drawings, and claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0117" num="0116">In the following, embodiments of the disclosure are described in more detail with reference to the attached figures and drawings, in which:</p><p id="p-0118" num="0117"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> is a block diagram showing an example of a video coding system configured to implement embodiments of the disclosure;</p><p id="p-0119" num="0118"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> is a block diagram showing another example of a video coding system configured to implement embodiments of the disclosure;</p><p id="p-0120" num="0119"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram showing an example of a video encoder configured to implement embodiments disclosed herein;</p><p id="p-0121" num="0120"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram showing an example structure of a video decoder configured to implement embodiments of the disclosure;</p><p id="p-0122" num="0121"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram illustrating an example of an encoding apparatus or a decoding apparatus;</p><p id="p-0123" num="0122"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating another example of an encoding apparatus or a decoding apparatus;</p><p id="p-0124" num="0123"><figref idref="DRAWINGS">FIG. <b>6</b> (<i>a</i>)-(<i>d</i>)</figref> show examples about the relationship between reference samples and location of a current coding block;</p><p id="p-0125" num="0124"><figref idref="DRAWINGS">FIG. <b>7</b> (<i>a</i>)-(<i>c</i>)</figref> show further examples about the relationship between reference samples and IBC buffer;</p><p id="p-0126" num="0125"><figref idref="DRAWINGS">FIG. <b>8</b> (<i>a</i>)-(<i>c</i>)</figref> show further examples about the relationship between reference samples and IBC buffer;</p><p id="p-0127" num="0126"><figref idref="DRAWINGS">FIG. <b>9</b> (<i>a</i>)-(<i>b</i>)</figref> show further examples about the relationship between block vectors and IBC buffer;</p><p id="p-0128" num="0127"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows an example of an IBC buffer for a CTU;</p><p id="p-0129" num="0128"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows an example of dividing a picture into CTUs;</p><p id="p-0130" num="0129"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows a flowchart for a method of video decoding according to an embodiment of the disclosure;</p><p id="p-0131" num="0130"><figref idref="DRAWINGS">FIG. <b>13</b></figref> shows a flowchart for a method of video decoding according to a further embodiment of the disclosure;</p><p id="p-0132" num="0131"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows a flowchart for a method of video encoding according to an embodiment of the disclosure;</p><p id="p-0133" num="0132"><figref idref="DRAWINGS">FIG. <b>15</b></figref> shows a flowchart for a method of video encoding according to a further embodiment of the disclosure;</p><p id="p-0134" num="0133"><figref idref="DRAWINGS">FIG. <b>16</b></figref> shows a block diagram illustrating an example of a decoding apparatus according to an embodiment of the disclosure;</p><p id="p-0135" num="0134"><figref idref="DRAWINGS">FIG. <b>17</b></figref> shows a block diagram illustrating an example of an encoding apparatus according to an embodiment of the disclosure.</p><p id="p-0136" num="0135"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a block diagram showing an example structure of a content supply system which realizes a content delivery service.</p><p id="p-0137" num="0136"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a block diagram showing a structure of an example of a terminal device.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0138" num="0137">In the following identical reference signs refer to identical or at least functionally equivalent features if not explicitly specified otherwise.</p><heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE EMBODIMENTS</heading><p id="p-0139" num="0138">In the following description, reference is made to the accompanying figures, which form part of the disclosure, and which show, by way of illustration, aspects of embodiments of the disclosure. It is understood that embodiments of the disclosure may be used in other aspects and comprise structural or logical changes not depicted in the figures. The following detailed description, therefore, is not to be taken in a limiting sense, and the scope of the present disclosure is defined by the appended claims.</p><p id="p-0140" num="0139">For instance, it is understood that a disclosure in connection with a described method may also hold true for a corresponding device or system configured to perform the method and vice versa. For example, if one or a plurality of method steps are described, a corresponding device may include one or a plurality of units, e.g. functional units, to perform the described one or plurality of method steps (e.g. one unit performing the one or plurality of steps, or a plurality of units each performing one or more of the plurality of steps), even if such one or more units are not explicitly described or illustrated in the figures. On the other hand, for example, if an apparatus is described based on one or a plurality of units, e.g. functional units, a corresponding method may include one step to perform the functionality of the one or plurality of units (e.g. one step performing the functionality of the one or plurality of units, or a plurality of steps each performing the functionality of one or more of the plurality of units), even if such one or plurality of steps are not explicitly described or illustrated in the figures. Further, it is understood that the features of the various exemplary embodiments and/or aspects described herein may be combined with each other, unless noted otherwise.</p><p id="p-0141" num="0140">Video coding typically refers to the processing of a sequence of pictures, which form the video or video sequence. Instead of the term &#x201c;picture&#x201d;, the term &#x201c;frame&#x201d; or &#x201c;image&#x201d; may be used as synonyms in the field of video coding. Video coding (or coding in general) comprises two parts: video encoding and video decoding. Video encoding is performed at the source side, typically comprising processing (e.g. by compression) the original video pictures to reduce the amount of data required for representing the video pictures (for more efficient storage and/or transmission). Video decoding is performed at the destination side and typically comprises the inverse processing compared to the encoder to reconstruct the video pictures. Embodiments referring to &#x201c;coding&#x201d; of video pictures (or pictures in general) shall be understood to relate to &#x201c;encoding&#x201d; or &#x201c;decoding&#x201d; of video pictures or respective video sequences. The combination of the encoding part and the decoding part is also referred to as CODEC (Coding and Decoding).</p><p id="p-0142" num="0141">In case of lossless video coding, the original video pictures can be reconstructed, i.e. the reconstructed video pictures have the same quality as the original video pictures (assuming no transmission loss or other data loss occurs during storage or transmission). In case of lossy video coding, further compression, e.g. by quantization, is performed, to reduce the amount of data representing the video pictures, which cannot be completely reconstructed at the decoder, i.e. the quality of the reconstructed video pictures is lower or worse compared to the quality of the original video pictures.</p><p id="p-0143" num="0142">Several video coding standards belong to the group of &#x201c;lossy hybrid video codecs&#x201d; (i.e. combine spatial and temporal prediction in the sample domain and 2D transform coding for applying quantization in the transform domain). Each picture of a video sequence is typically partitioned into a set of non-overlapping blocks and the coding is typically performed on a block level. In other words, at the encoder the video is typically processed, i.e. encoded, on a block (video block) level, e.g. by using spatial (intra picture) prediction and/or temporal (inter picture) prediction to generate a prediction block, subtracting the prediction block from the current block (block currently processed/to be processed) to obtain a residual block, transforming the residual block and quantizing the residual block in the transform domain to reduce the amount of data to be transmitted (compression), whereas at the decoder the inverse processing compared to the encoder is applied to the encoded or compressed block to reconstruct the current block for representation. Furthermore, the encoder duplicates the decoder processing loop such that both will generate identical predictions (e.g. intra- and inter predictions) and/or re-constructions for processing, i.e. coding, the subsequent blocks.</p><p id="p-0144" num="0143">In the following embodiments of a video coding system <b>10</b>, a video encoder <b>20</b> and a video decoder <b>30</b> are described based on <figref idref="DRAWINGS">FIGS. <b>1</b> to <b>3</b></figref>.</p><p id="p-0145" num="0144"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> is a block diagram illustrating an example coding system <b>10</b>, e.g. a video coding system <b>10</b> (or short coding system <b>10</b>) that may utilize techniques of this present application. Video encoder <b>20</b> (or short encoder <b>20</b>) and video decoder <b>30</b> (or short decoder <b>30</b>) of video coding system <b>10</b> represent examples of devices that may be configured to perform techniques in accordance with various examples described in the present application.</p><p id="p-0146" num="0145">As shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, the coding system <b>10</b> comprises a source device <b>12</b> configured to provide encoded picture data <b>21</b> e.g. to a destination device <b>14</b> for decoding the encoded picture data <b>13</b>.</p><p id="p-0147" num="0146">The source device <b>12</b> comprises an encoder <b>20</b>, and may additionally, i.e. optionally, comprise a picture source <b>16</b>, a pre-processor (or pre-processing unit) <b>18</b>, e.g. a picture pre-processor <b>18</b>, and a communication interface or communication unit <b>22</b>.</p><p id="p-0148" num="0147">The picture source <b>16</b> may comprise or be any kind of picture capturing device, for example a camera for capturing a real-world picture, and/or any kind of a picture generating device, for example a computer-graphics processor for generating a computer animated picture, or any kind of other device for obtaining and/or providing a real-world picture, a computer generated picture (e.g. a screen content, a virtual reality (VR) picture) and/or any combination thereof (e.g. an augmented reality (AR) picture). The picture source may be any kind of memory or storage storing any of the aforementioned pictures.</p><p id="p-0149" num="0148">In distinction to the pre-processor <b>18</b> and the processing performed by the pre-processing unit <b>18</b>, the picture or picture data <b>17</b> may also be referred to as raw picture or raw picture data <b>17</b>.</p><p id="p-0150" num="0149">Pre-processor <b>18</b> may be configured to receive the (raw) picture data <b>17</b> and to perform pre-processing on the picture data <b>17</b> to obtain a pre-processed picture <b>19</b> or pre-processed picture data <b>19</b>. Pre-processing performed by the pre-processor <b>18</b> may, e.g., comprise trimming, color format conversion (e.g. from RGB to YCbCr), color correction, or de-noising. It can be understood that the pre-processing unit <b>18</b> may be an optional component.</p><p id="p-0151" num="0150">The video encoder <b>20</b> may be configured to receive the pre-processed picture data <b>19</b> and provide encoded picture data <b>21</b> (further details will be described below, e.g., based on <figref idref="DRAWINGS">FIG. <b>2</b></figref>).</p><p id="p-0152" num="0151">Communication interface <b>22</b> of the source device <b>12</b> may be configured to receive the encoded picture data <b>21</b> and to transmit the encoded picture data <b>21</b> (or any further processed version thereof) over communication channel <b>13</b> to another device, e.g. the destination device <b>14</b> or any other device, for storage or direct reconstruction.</p><p id="p-0153" num="0152">The destination device <b>14</b> comprises a decoder <b>30</b> (e.g. a video decoder <b>30</b>), and may additionally, i.e. optionally, comprise a communication interface or communication unit <b>28</b>, a post-processor <b>32</b> (or post-processing unit <b>32</b>) and a display device <b>34</b>.</p><p id="p-0154" num="0153">The communication interface <b>28</b> of the destination device <b>14</b> may be configured to receive the encoded picture data <b>21</b> (or any further processed version thereof), e.g. directly from the source device <b>12</b> or from any other source, e.g. a storage device, such as an encoded picture data storage device, and provide the encoded picture data <b>21</b> to the decoder <b>30</b>.</p><p id="p-0155" num="0154">The communication interface <b>22</b> and the communication interface <b>28</b> may be configured to transmit or receive the encoded picture data <b>21</b> or encoded data <b>13</b> via a direct communication link between the source device <b>12</b> and the destination device <b>14</b>, e.g. a direct wired or wireless connection, or via any kind of network, e.g. a wired or wireless network or any combination thereof, or any kind of private and public network, or any kind of combination thereof.</p><p id="p-0156" num="0155">The communication interface <b>22</b> may be configured to package the encoded picture data <b>21</b> into an appropriate format, e.g. packets, and/or process the encoded picture data using any kind of transmission encoding or processing for transmission over a communication link or communication network.</p><p id="p-0157" num="0156">The communication interface <b>28</b>, forming the counterpart of the communication interface <b>22</b>, may be configured to receive the transmitted data and process the transmission data using any kind of corresponding transmission decoding or processing and/or de-packaging to obtain the encoded picture data <b>21</b>.</p><p id="p-0158" num="0157">Both, communication interface <b>22</b> and communication interface <b>28</b> may be configured as unidirectional communication interfaces as indicated by the arrow for the communication channel <b>13</b> in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> pointing from the source device <b>12</b> to the destination device <b>14</b>, or as bi-directional communication interfaces, and may be configured to send and receive messages, e.g. to set up a connection, to acknowledge and exchange any other information related to the communication link and/or data transmission, such as encoded picture data transmission.</p><p id="p-0159" num="0158">The decoder <b>30</b> may be configured to receive the encoded picture data <b>21</b> and provide decoded picture data <b>31</b> or a decoded picture <b>31</b> (further details will be described below, e.g., based on <figref idref="DRAWINGS">FIG. <b>3</b></figref> or <figref idref="DRAWINGS">FIG. <b>5</b></figref>). The post-processor <b>32</b> of destination device <b>14</b> may be configured to post-process the decoded picture data <b>31</b> (also called reconstructed picture data), e.g. the decoded picture <b>31</b>, to obtain post-processed picture data <b>33</b>, such as a post-processed picture <b>33</b>. The post-processing performed by the post-processing unit <b>32</b> may comprise any one or more of color format conversion (e.g. from YCbCr to RGB), color correction, trimming, or re-sampling, or any other processing, e.g. for preparing the decoded picture data <b>31</b> for display, e.g. by display device <b>34</b>.</p><p id="p-0160" num="0159">The display device <b>34</b> of the destination device <b>14</b> may be configured to receive the post-processed picture data <b>33</b> for displaying the picture, e.g. to a user or viewer. The display device <b>34</b> may be or comprise any kind of display for representing the reconstructed picture, such as an integrated or external display or monitor. The display may be a liquid crystal displays (LCD), an organic light emitting diodes (OLED) display, a plasma display, a projector, a micro LED display, a liquid crystal on silicon (LCoS), a digital light processor (DLP) or any kind of other display.</p><p id="p-0161" num="0160">Although <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> depicts the source device <b>12</b> and the destination device <b>14</b> as separate devices, embodiments of devices may also comprise both devices or both functionalities, i.e. the source device <b>12</b> or corresponding functionality and the destination device <b>14</b> or corresponding functionality. In such embodiments the source device <b>12</b> or corresponding functionality and the destination device <b>14</b> or corresponding functionality may be implemented using the same hardware and/or software or by separate hardware and/or software or any combination thereof.</p><p id="p-0162" num="0161">As will be apparent for the skilled person based on the description, the existence and (exact) split of functionalities of the different units or functionalities within the source device <b>12</b> and/or destination device <b>14</b> as shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> may vary depending on the actual device and application.</p><p id="p-0163" num="0162">The encoder <b>20</b> (e.g. a video encoder <b>20</b>) or the decoder <b>30</b> (e.g. a video decoder <b>30</b>) or both, encoder <b>20</b> and decoder <b>30</b> may be implemented via processing circuitry as shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>, such as one or more microprocessors, digital signal processors (DSPs), application-specific integrated circuits (ASICs), field-programmable gate arrays (FPGAs), discrete logic, hardware, video coding dedicated or any combinations thereof. The encoder <b>20</b> may be implemented via processing circuitry <b>46</b> to embody the various modules as discussed with respect to encoder <b>20</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> and/or any other encoder system or subsystem described herein. The decoder <b>30</b> may be implemented via processing circuitry <b>46</b> to embody the various modules as discussed with respect to decoder <b>30</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> and/or any other decoder system or subsystem described herein. The processing circuitry may be configured to perform the various operations as discussed later. As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, if the techniques are implemented partially in software, a device may store instructions for the software in a suitable, non-transitory computer-readable storage medium and may execute the instructions in hardware using one or more processors to perform the techniques of this disclosure. Video encoder <b>20</b> and video decoder <b>30</b> may be integrated as part of a combined encoder/decoder (CODEC) in a single device, for example, as shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>.</p><p id="p-0164" num="0163">The video coding system <b>40</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref> comprises a processing circuitry implementing both a video encoder <b>20</b> and a video decoder <b>30</b>. In addition, one or more imaging devices <b>41</b>, such as a camera for capturing real-world pictures, an antenna <b>42</b>, one or more memory stores <b>44</b>, one or more processors <b>43</b> and/or a display device <b>45</b>, such the display device <b>34</b> described above, may be provided as part of the video coding system <b>40</b>.</p><p id="p-0165" num="0164">Source device <b>12</b> and destination device <b>14</b> may comprise any of a wide range of devices, including any kind of handheld or stationary devices, e.g. notebook or laptop computers, mobile phones, smart phones, tablets or tablet computers, cameras, desktop computers, set-top boxes, televisions, display devices, digital media players, video gaming consoles, video streaming devices (such as content services servers or content delivery servers), broadcast receiver devices, broadcast transmitter devices, or the like and may use no or any kind of operating system. In some cases, the source device <b>12</b> and the destination device <b>14</b> may be equipped for wireless communication. Thus, the source device <b>12</b> and the destination device <b>14</b> may be wireless communication devices.</p><p id="p-0166" num="0165">In some cases, video coding system <b>10</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> is merely an example and the techniques of the present application may apply to video coding systems (e.g., video encoding or video decoding) that do not necessarily include any data communication between the encoding and decoding devices. In other examples, data is retrieved from a local memory, streamed over a network, or the like. A video encoding device may encode and store data in memory, and/or a video decoding device may retrieve and decode data from memory. In some examples, the encoding and decoding is performed by devices that do not communicate with one another, but simply encode data to memory and/or retrieve and decode data from memory.</p><p id="p-0167" num="0166">For convenience of description, embodiments of the disclosure are described herein, for example, by reference to High-Efficiency Video Coding (HEVC) or to the reference software of Versatile Video coding (VVC), the next generation video coding standard developed by the Joint Collaboration Team on Video Coding (JCT-VC) of ITU-T Video Coding Experts Group (VCEG) and ISO/IEC Motion Picture Experts Group (MPEG). One of ordinary skill in the art will understand that embodiments of the disclosure are not limited to HEVC or VVC.</p><p id="p-0168" num="0167">Encoder and Encoding Method</p><p id="p-0169" num="0168"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a block diagram of an example video encoder <b>20</b> that is configured to implement the techniques of the present application. In the example of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the video encoder <b>20</b> comprises an input <b>201</b> (or input interface <b>201</b>), a residual calculation unit <b>204</b>, a transform processing unit <b>206</b>, a quantization unit <b>208</b>, an inverse quantization unit <b>210</b>, and an inverse transform processing unit <b>212</b>, a reconstruction unit <b>214</b>, a loop filter unit <b>220</b>, a decoded picture buffer (DPB) <b>230</b>, a mode selection unit <b>260</b>, an entropy encoding unit <b>270</b> and an output <b>272</b> (or output interface <b>272</b>). The mode selection unit <b>260</b> may include an inter prediction unit <b>244</b>, an intra prediction unit <b>254</b> and a partitioning unit <b>262</b>. The inter prediction unit <b>244</b> may include a motion estimation unit and a motion compensation unit (not shown). A video encoder <b>20</b> as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may also be referred to as a hybrid video encoder or a video encoder according to a hybrid video codec.</p><p id="p-0170" num="0169">The residual calculation unit <b>204</b>, the transform processing unit <b>206</b>, the quantization unit <b>208</b>, and the mode selection unit <b>260</b> may be referred to as forming a forward signal path of the encoder <b>20</b>, whereas the inverse quantization unit <b>210</b>, the inverse transform processing unit <b>212</b>, the reconstruction unit <b>214</b>, the loop filter <b>220</b>, the decoded picture buffer (DPB) <b>230</b>, the inter prediction unit <b>244</b> and the intra-prediction unit <b>254</b> may be referred to as forming a backward signal path of the video encoder <b>20</b>, wherein the backward signal path of the video encoder <b>20</b> corresponds to the signal path of the decoder (see video decoder <b>30</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>). The inverse quantization unit <b>210</b>, the inverse transform processing unit <b>212</b>, the reconstruction unit <b>214</b>, the loop filter <b>220</b>, the decoded picture buffer (DPB) <b>230</b>, the inter prediction unit <b>244</b> and the intra-prediction unit <b>254</b> are also referred to forming the &#x201c;built-in decoder&#x201d; of video encoder <b>20</b>.</p><p id="p-0171" num="0170">Pictures &#x26; Picture Partitioning (Pictures &#x26; Blocks)</p><p id="p-0172" num="0171">The encoder <b>20</b> may be configured to receive, e.g. via input <b>201</b>, a picture <b>17</b> (or picture data <b>17</b>), e.g. a picture of a sequence of pictures forming a video or video sequence. The received picture or picture data may also be a pre-processed picture <b>19</b> (or pre-processed picture data <b>19</b>). For the sake of simplicity the following description refers to the picture <b>17</b>. The picture <b>17</b> may also be referred to as a current picture or a picture to be coded (in particular, in video coding to distinguish the current picture from other pictures, e.g. previously encoded and/or decoded pictures of the same video sequence, i.e. the video sequence which also comprises the current picture).</p><p id="p-0173" num="0172">A (digital) picture is or can be regarded as a two-dimensional array or matrix of samples with intensity values. A sample in the array may also be referred to as pixel (short form of picture element) or a pel. The number of samples in the horizontal and vertical direction (or axis) of the array or picture defines the size and/or resolution of the picture. For representation of color, typically three color components are employed, i.e. the picture may be represented as or include three sample arrays. In RBG format or color space, a picture comprises a corresponding red, green and blue sample array. However, in video coding each pixel is typically represented in a luminance and chrominance format or color space, e.g. YCbCr, which comprises a luminance component indicated by Y (sometimes also L is used instead) and two chrominance components indicated by Cb and Cr. The luminance (or short luma) component Y represents the brightness or grey level intensity (e.g. like in a grey-scale picture), while the two chrominance (or short chroma) components Cb and Cr represent the chromaticity or color information components. Accordingly, a picture in YCbCr format comprises a luminance sample array of luminance sample values (Y), and two chrominance sample arrays of chrominance values (Cb and Cr). Pictures in RGB format may be converted or transformed into YCbCr format and vice versa. The process is also known as color transformation or conversion. If a picture is monochrome, the picture may comprise only a luminance sample array. Accordingly, a picture may be, for example, an array of luma samples in monochrome format or an array of luma samples and two corresponding arrays of chroma samples in 4:2:0, 4:2:2, and 4:4:4 colour format.</p><p id="p-0174" num="0173">Embodiments of the video encoder <b>20</b> may comprise a picture partitioning unit (not depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref>) configured to partition the picture <b>17</b> into a plurality of (typically non-overlapping) picture blocks <b>203</b>. These blocks may also be referred to as root blocks, macro blocks (H.264/AVC) or coding tree blocks (CTB) or coding tree units (CTU) (according to H.265/HEVC and VVC). The picture partitioning unit may be configured to use the same block size for all pictures of a video sequence and the corresponding grid defining the block size, or to change the block size between pictures or subsets or groups of pictures, and partition each picture into the corresponding blocks.</p><p id="p-0175" num="0174">In further embodiments, the video encoder may be configured to receive directly a block <b>203</b> of the picture <b>17</b>, e.g. one, several or all blocks forming the picture <b>17</b>. The picture block <b>203</b> may also be referred to as current picture block or picture block to be coded.</p><p id="p-0176" num="0175">Like the picture <b>17</b>, the picture block <b>203</b> is or can be regarded as a two-dimensional array or matrix of samples with intensity values (sample values), although of smaller dimension than the picture <b>17</b>. In other words, the block <b>203</b> may comprise, e.g., one sample array (e.g. a luma array in case of a monochrome picture <b>17</b>, or a luma or chroma array in case of a color picture) or three sample arrays (e.g. a luma and two chroma arrays in case of a color picture <b>17</b>) or any other number and/or kind of arrays depending on the color format applied. The number of samples in the horizontal and vertical direction (or axis) of the block <b>203</b> defines the size of the block <b>203</b>. Accordingly, a block may, for example, comprise an M&#xd7;N (M-column by N-row) array of samples, or an M&#xd7;N array of transform coefficients.</p><p id="p-0177" num="0176">Embodiments of the video encoder <b>20</b> as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be configured to encode the picture <b>17</b> block by block, e.g. the encoding and prediction is performed per block <b>203</b>.</p><p id="p-0178" num="0177">Embodiments of the video encoder <b>20</b> as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be further configured to partition and/or encode the picture by using slices (also referred to as video slices), wherein a picture may be partitioned into or encoded using one or more slices (typically non-overlapping), and each slice may comprise one or more blocks (e.g. CTUs).</p><p id="p-0179" num="0178">Embodiments of the video encoder <b>20</b> as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be further configured to partition and/or encode the picture by using tile groups (also referred to as video tile groups) and/or tiles (also referred to as video tiles), wherein a picture may be partitioned into or encoded using one or more tile groups (typically non-overlapping), and each tile group may comprise one or more blocks (e.g. CTUs) or one or more tiles, wherein each tile may be of rectangular shape and may comprise one or more blocks (e.g. CTUs), e.g. complete or fractional blocks.</p><p id="p-0180" num="0179">Residual Calculation</p><p id="p-0181" num="0180">The residual calculation unit <b>204</b> may be configured to calculate a residual block <b>205</b> (also referred to as residual <b>205</b>) based on the picture block <b>203</b> and a prediction block <b>265</b> (further details about the prediction block <b>265</b> are provided later), e.g. by subtracting sample values of the prediction block <b>265</b> from sample values of the picture block <b>203</b>, sample by sample (pixel by pixel) to obtain the residual block <b>205</b> in the sample domain.</p><p id="p-0182" num="0181">Transform</p><p id="p-0183" num="0182">The transform processing unit <b>206</b> may be configured to apply a transform, such as a discrete cosine transform (DCT) or discrete sine transform (DST), on the sample values of the residual block <b>205</b> to obtain transform coefficients <b>207</b> in a transform domain. The transform coefficients <b>207</b> may also be referred to as transform residual coefficients and represent the residual block <b>205</b> in the transform domain.</p><p id="p-0184" num="0183">The transform processing unit <b>206</b> may be configured to apply integer approximations of DCT/DST, such as the transforms specified for H.265/HEVC. Compared to an orthogonal DCT transform, such integer approximations are typically scaled by a certain factor. In order to preserve the norm of the residual block which is processed by forward and inverse transforms, additional scaling factors are applied as part of the transform process. The scaling factors are typically chosen based on certain constraints like scaling factors being a power of two for shift operations, bit depth of the transform coefficients, tradeoff between accuracy and implementation costs, etc. The scaling factors are, for example, specified for the inverse transform, e.g. by inverse transform processing unit <b>212</b> (and the corresponding inverse transform, e.g. by inverse transform processing unit <b>312</b> at video decoder <b>30</b>) and corresponding scaling factors for the forward transform, e.g. by transform processing unit <b>206</b>, at an encoder <b>20</b> may be specified accordingly.</p><p id="p-0185" num="0184">Embodiments of the video encoder <b>20</b> (respectively, the transform processing unit <b>206</b>) may be configured to output transform parameters, e.g. a type of transform or transforms, e.g. directly or encoded or compressed via the entropy encoding unit <b>270</b>, so that, e.g., the video decoder <b>30</b> may receive and use the transform parameters for decoding.</p><p id="p-0186" num="0185">Quantization</p><p id="p-0187" num="0186">The quantization unit <b>208</b> may be configured to quantize the transform coefficients <b>207</b> to obtain quantized coefficients <b>209</b>, e.g. by applying scalar quantization or vector quantization. The quantized coefficients <b>209</b> may also be referred to as quantized transform coefficients <b>209</b> or quantized residual coefficients <b>209</b>.</p><p id="p-0188" num="0187">The quantization process may reduce the bit depth associated with some or all of the transform coefficients <b>207</b>. For example, an n-bit transform coefficient may be rounded down to an m-bit transform coefficient during quantization, where n is greater than m. The degree of quantization may be modified by adjusting a quantization parameter (QP). For example for scalar quantization, different scalings may be applied to achieve finer or coarser quantization. Smaller quantization step sizes correspond to finer quantization, whereas larger quantization step sizes correspond to coarser quantization. The applicable quantization step size may be indicated by a quantization parameter (QP). The quantization parameter may, for example, be an index of a predefined set of applicable quantization step sizes. For example, small quantization parameters may correspond to fine quantization (small quantization step sizes) and large quantization parameters may correspond to coarse quantization (large quantization step sizes) or vice versa. The quantization may include division by a quantization step size and a corresponding and/or the inverse dequantization, e.g. by inverse quantization unit <b>210</b>, may include multiplication by the quantization step size. Embodiments according to some standards, e.g. HEVC, may be configured to use a quantization parameter to determine the quantization step size. Generally, the quantization step size may be calculated based on a quantization parameter using a fixed point approximation of an equation including division. Additional scaling factors may be introduced for quantization and dequantization to restore the norm of the residual block, which might get modified because of the scaling used in the fixed point approximation of the equation for quantization step size and quantization parameter. In one exemplary implementation, the scaling of the inverse transform and dequantization might be combined. Alternatively, customized quantization tables may be used and signaled from an encoder to a decoder, e.g. in a bitstream. The quantization is a lossy operation, wherein the loss increases with increasing quantization step sizes.</p><p id="p-0189" num="0188">Embodiments of the video encoder <b>20</b> (respectively, the quantization unit <b>208</b>) may be configured to output quantization parameters (QPs), e.g. directly or encoded via the entropy encoding unit <b>270</b>, so that, e.g., the video decoder <b>30</b> may receive and apply the quantization parameters for decoding.</p><p id="p-0190" num="0189">Inverse Quantization</p><p id="p-0191" num="0190">The inverse quantization unit <b>210</b> is configured to apply the inverse quantization of the quantization unit <b>208</b> on the quantized coefficients to obtain dequantized coefficients <b>211</b>, e.g. by applying the inverse of the quantization scheme applied by the quantization unit <b>208</b> based on or using the same quantization step size as the quantization unit <b>208</b>. The dequantized coefficients <b>211</b> may also be referred to as dequantized residual coefficients <b>211</b> and correspond&#x2014;although typically not identical to the transform coefficients due to the loss by quantization&#x2014;to the transform coefficients <b>207</b>.</p><p id="p-0192" num="0191">Inverse Transform</p><p id="p-0193" num="0192">The inverse transform processing unit <b>212</b> is configured to apply the inverse transform of the transform applied by the transform processing unit <b>206</b>, e.g. an inverse discrete cosine transform (DCT) or inverse discrete sine transform (DST) or other inverse transforms, to obtain a reconstructed residual block <b>213</b> (or corresponding dequantized coefficients <b>213</b>) in the sample domain. The reconstructed residual block <b>213</b> may also be referred to as a transform block <b>213</b>.</p><p id="p-0194" num="0193">Reconstruction</p><p id="p-0195" num="0194">The reconstruction unit <b>214</b> (e.g. adder or summer <b>214</b>) is configured to add the transform block <b>213</b> (i.e. reconstructed residual block <b>213</b>) to the prediction block <b>265</b> to obtain a reconstructed block <b>215</b> in the sample domain, e.g. by adding&#x2014;sample by sample&#x2014;the sample values of the reconstructed residual block <b>213</b> and the sample values of the prediction block <b>265</b>.</p><p id="p-0196" num="0195">Filtering</p><p id="p-0197" num="0196">The loop filter unit <b>220</b> (or short &#x201c;loop filter&#x201d; <b>220</b>), is configured to filter the reconstructed block <b>215</b> to obtain a filtered block <b>221</b>, or in general, to filter reconstructed samples to obtain filtered samples. The loop filter unit may be configured to smooth pixel transitions, or otherwise improve the video quality. The loop filter unit <b>220</b> may comprise one or more loop filters such as a de-blocking filter, a sample-adaptive offset (SAO) filter or one or more other filters, such as a bilateral filter, an adaptive loop filter (ALF), a sharpening, a smoothing filter or a collaborative filter, or any combination thereof. Although the loop filter unit <b>220</b> is shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> as being an in-loop filter, in other configurations, the loop filter unit <b>220</b> may be implemented as a post loop filter. The filtered block <b>221</b> may also be referred to as a filtered reconstructed block <b>221</b>.</p><p id="p-0198" num="0197">Embodiments of the video encoder <b>20</b> (respectively, the loop filter unit <b>220</b>) may be configured to output loop filter parameters (such as sample adaptive offset information), e.g. directly or encoded via the entropy encoding unit <b>270</b>, so that, e.g., a decoder <b>30</b> may receive and apply the same loop filter parameters or respective loop filters for decoding.</p><p id="p-0199" num="0198">Decoded Picture Buffer</p><p id="p-0200" num="0199">The decoded picture buffer (DPB) <b>230</b> may be a memory that stores reference pictures, or in general reference picture data, for encoding video data by video encoder <b>20</b>. The DPB <b>230</b> may be formed by any of a variety of memory devices, such as dynamic random access memory (DRAM), including synchronous DRAM (SDRAM), magnetoresistive RAM (MRAM), resistive RAM (RRAM), or other types of memory devices. The decoded picture buffer (DPB) <b>230</b> may be configured to store one or more filtered blocks <b>221</b>. The decoded picture buffer <b>230</b> may be further configured to store other previously filtered blocks, e.g. previously reconstructed and filtered blocks <b>221</b>, of the same current picture or of different pictures, e.g. previously reconstructed pictures, and may provide complete previously reconstructed, i.e. decoded, pictures (and corresponding reference blocks and samples) and/or a partially reconstructed current picture (and corresponding reference blocks and samples), for example for inter prediction. The decoded picture buffer (DPB) <b>230</b> may also be configured to store one or more unfiltered reconstructed blocks <b>215</b>, or in general unfiltered reconstructed samples, e.g. if the reconstructed block <b>215</b> is not filtered by loop filter unit <b>220</b>, or any other further processed version of the reconstructed blocks or samples.</p><p id="p-0201" num="0200">Mode Selection (Partitioning &#x26; Prediction)</p><p id="p-0202" num="0201">The mode selection unit <b>260</b> comprises partitioning unit <b>262</b>, inter-prediction unit <b>244</b> and intra-prediction unit <b>254</b>, and is configured to receive or obtain original picture data, such as an original block <b>203</b> (current block <b>203</b> of the current picture <b>17</b>), and reconstructed picture data, such as filtered and/or unfiltered reconstructed samples or blocks of the same (current) picture and/or from one or a plurality of previously decoded pictures, e.g. from decoded picture buffer <b>230</b> or other buffers (e.g. line buffer, not shown). The reconstructed picture data is used as reference picture data for prediction, e.g. inter-prediction or intra-prediction, to obtain a prediction block <b>265</b> or predictor <b>265</b>.</p><p id="p-0203" num="0202">Mode selection unit <b>260</b> may be configured to determine or select a partitioning for a current block prediction mode (including no partitioning) and a prediction mode (e.g. an intra- or inter-prediction mode) and generate a corresponding prediction block <b>265</b>, which is used for the calculation of the residual block <b>205</b> and for the reconstruction of the reconstructed block <b>215</b>.</p><p id="p-0204" num="0203">Embodiments of the mode selection unit <b>260</b> may be configured to select the partitioning and the prediction mode (e.g. from those supported by or available for mode selection unit <b>260</b>), which provide the best match or in other words the minimum residual (minimum residual means better compression for transmission or storage), or a minimum signaling overhead (minimum signaling overhead means better compression for transmission or storage), or which considers or balances both. The mode selection unit <b>260</b> may be configured to determine the partitioning and prediction mode based on rate distortion optimization (RDO), i.e. select the prediction mode which provides a minimum rate distortion. Terms like &#x201c;best&#x201d;, &#x201c;minimum&#x201d;, &#x201c;optimum&#x201d; etc. in this context do not necessarily refer to an overall &#x201c;best&#x201d;, &#x201c;minimum&#x201d;, &#x201c;optimum&#x201d;, etc. but may also refer to the fulfillment of a termination or selection criterion like a value exceeding or falling below a threshold or other constraints leading potentially to a &#x201c;sub-optimum selection&#x201d; but reducing complexity and processing time.</p><p id="p-0205" num="0204">In other words, the partitioning unit <b>262</b> may be configured to partition the block <b>203</b> into smaller block partitions or sub-blocks (which again form blocks), e.g. iteratively using quad-tree-partitioning (QT), binary-tree partitioning (BT) or triple-tree-partitioning (TT) or any combination thereof, and to perform the prediction for each of the block partitions or sub-blocks, wherein the mode selection comprises the selection of the tree-structure of the partitioned block <b>203</b> and the prediction modes are applied to each of the block partitions or sub-blocks.</p><p id="p-0206" num="0205">In the following, the partitioning (e.g. by partitioning unit <b>262</b>) and prediction processing (by inter-prediction unit <b>244</b> and intra-prediction unit <b>254</b>) performed by an example video encoder <b>20</b> will be explained in more detail.</p><p id="p-0207" num="0206">Partitioning</p><p id="p-0208" num="0207">The partitioning unit <b>262</b> may partition (or split) a current block <b>203</b> into smaller partitions, e.g. smaller blocks of square or rectangular size. These smaller blocks (which may also be referred to as sub-blocks) may be further partitioned into even smaller partitions. This is also referred to as tree-partitioning or hierarchical tree-partitioning, wherein a root block, e.g. at root tree-level 0 (hierarchy-level 0, depth 0), may be recursively partitioned, e.g. partitioned into two or more blocks of a next lower tree-level, e.g. nodes at tree-level 1 (hierarchy-level 1, depth 1), wherein these blocks may be again partitioned into two or more blocks of a next lower level, e.g. tree-level 2 (hierarchy-level 2, depth 2), etc. until the partitioning is terminated, e.g. because a termination criterion is fulfilled, e.g. a maximum tree depth or minimum block size is reached. Blocks which are not further partitioned are also referred to as leaf-blocks or leaf nodes of the tree. A tree using partitioning into two partitions is referred to as a binary-tree (BT), a tree using partitioning into three partitions is referred to as a ternary-tree (TT), and a tree using partitioning into four partitions is referred to as a quad-tree (QT).</p><p id="p-0209" num="0208">As mentioned before, the term &#x201c;block&#x201d; as used herein may be a portion, in particular a square or rectangular portion, of a picture. With reference, for example, to HEVC and VVC, the block may be or correspond to a coding tree unit (CTU), a coding unit (CU), a prediction unit (PU), or a transform unit (TU) and/or to the corresponding blocks, e.g. a coding tree block (CTB), a coding block (CB), a transform block (TB) or a prediction block (PB).</p><p id="p-0210" num="0209">For example, a coding tree unit (CTU) may be or comprise a CTB of luma samples and two corresponding CTBs of chroma samples of a picture that has three sample arrays, or a CTB of samples of a monochrome picture or a picture that is coded using three separate colour planes and syntax structures used to code the samples. Correspondingly, a coding tree block (CTB) may be an N&#xd7;N block of samples for some value of N such that the division of a component into CTBs is a partitioning. A coding unit (CU) may be or comprise a coding block of luma samples and two corresponding coding blocks of chroma samples of a picture that has three sample arrays, or a coding block of samples of a monochrome picture or a picture that is coded using three separate colour planes and syntax structures used to code the samples. Correspondingly, a coding block (CB) may be an M&#xd7;N block of samples for some values of M and N such that the division of a CTB into coding blocks is a partitioning.</p><p id="p-0211" num="0210">In some embodiments, e.g., according to HEVC, a coding tree unit (CTU) may be split into CUs by using a quad-tree structure denoted as a coding tree. The decision whether to code a picture area using inter-picture (temporal) or intra-picture (spatial) prediction is made at the CU level. Each CU can be further split into one, two or four PUs according to the PU splitting type. Inside one PU, the same prediction process is applied and the relevant information is transmitted to the decoder on a PU basis. After obtaining the residual block by applying the prediction process based on the PU splitting type, a CU can be partitioned into transform units (TUs) according to another quad-tree structure similar to the coding tree for the CU.</p><p id="p-0212" num="0211">In embodiments, e.g., according to the latest video coding standard currently in development, which is referred to as Versatile Video Coding (VVC), a combined quad-tree and binary-tree (QTBT) partitioning is for example used to partition a coding block. In the QTBT block structure, a CU can have either a square or rectangular shape. For example, a coding tree unit (CTU) is first partitioned by a quad-tree structure. The quad-tree leaf nodes are further partitioned by a binary-tree or ternary (or triple)-tree structure. The partitioning tree leaf nodes are called coding units (CUs), and that partition is used for prediction and transform processing without any further partitioning. This means that the CU, PU and TU have the same block size in the QTBT coding block structure. In parallel, multiple partitions, for example, triple-tree partition may be used together with the QTBT block structure.</p><p id="p-0213" num="0212">In one example, the mode selection unit <b>260</b> of video encoder <b>20</b> may be configured to perform any combination of the partitioning techniques described herein.</p><p id="p-0214" num="0213">As described above, the video encoder <b>20</b> is configured to determine or select the best or an optimum prediction mode from a set of (e.g. pre-determined) prediction modes. The set of prediction modes may comprise intra-prediction modes and/or inter-prediction modes.</p><p id="p-0215" num="0214">Intra-Prediction</p><p id="p-0216" num="0215">The set of intra-prediction modes may comprise 35 different intra-prediction modes, such as non-directional modes like DC (or mean) mode and planar mode, or directional modes, e.g. as defined in HEVC, or may comprise 67 different intra-prediction modes, such as non-directional modes like DC (or mean) mode and planar mode, or directional modes, e.g. as defined for VVC.</p><p id="p-0217" num="0216">The intra-prediction unit <b>254</b> is configured to use reconstructed samples of neighboring blocks of the same current picture to generate an (intra-)prediction block <b>265</b> according to an intra-prediction mode from the set of intra-prediction modes.</p><p id="p-0218" num="0217">The intra-prediction unit <b>254</b> (or in general the mode selection unit <b>260</b>) may be further configured to output intra-prediction parameters (or in general information indicative of the selected intra-prediction mode for the block) to the entropy encoding unit <b>270</b> in the form of syntax elements <b>266</b> for inclusion into the encoded picture data <b>21</b>, so that, e.g., the video decoder <b>30</b> may receive and use the prediction parameters for decoding.</p><p id="p-0219" num="0218">Inter-Prediction</p><p id="p-0220" num="0219">The set of (or possible) inter-prediction modes depends on the available reference pictures (i.e. previous, at least partially decoded pictures, e.g. stored in DBP <b>230</b>) and other inter-prediction parameters, e.g. whether the whole reference picture or only a part, e.g. a search window area around the area of the current block, of the reference picture is used for searching for a best matching reference block, and/or e.g. whether pixel interpolation is applied, such as half/semi-pel and/or quarter-pel interpolation, or not.</p><p id="p-0221" num="0220">In addition to the above prediction modes, skip mode and/or direct mode may be applied.</p><p id="p-0222" num="0221">The inter-prediction unit <b>244</b> may include a motion estimation (ME) unit and a motion compensation (MC) unit (both not shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>). The motion estimation unit may be configured to receive or obtain the picture block <b>203</b> (current picture block <b>203</b> of the current picture <b>17</b>) and a decoded picture <b>231</b>, or at least one or a plurality of previously reconstructed blocks, such as reconstructed blocks of one or a plurality of previously decoded pictures <b>231</b>, for motion estimation. By way of example, a video sequence may comprise the current picture and the previously decoded pictures <b>231</b>, or in other words, the current picture and the previously decoded pictures <b>231</b> may be part of or form a sequence of pictures forming a video sequence.</p><p id="p-0223" num="0222">The encoder <b>20</b> may be configured to select a reference block from a plurality of reference blocks of the same or different pictures of the plurality of previously decoded pictures and provide a reference picture (or reference picture index) and/or an offset (spatial offset) between the position (x, y coordinates) of the reference block and the position of the current block as inter-prediction parameters to the motion estimation unit. This offset is also called motion vector (MV).</p><p id="p-0224" num="0223">The motion compensation unit may be configured to obtain, e.g. receive, an inter-prediction parameter and to perform inter-prediction based on or using the inter-prediction parameter to obtain an (inter-)prediction block <b>265</b>. Motion compensation, performed by the motion compensation unit, may involve fetching or generating the prediction block based on the motion/block vector determined by motion estimation, possibly performing interpolations to sub-pixel precision. Interpolation filtering may generate additional pixel samples from known pixel samples, thus potentially increasing the number of candidate prediction blocks that may be used to code a picture block. Upon receiving the motion vector for the PU of the current picture block, the motion compensation unit may locate the prediction block to which the motion vector points in one of the reference picture lists.</p><p id="p-0225" num="0224">The motion compensation unit may also generate syntax elements associated with the blocks and video slices for use by video decoder <b>30</b> in decoding the picture blocks of the video slice. In addition or as an alternative to slices and respective syntax elements, tile groups and/or tiles and respective syntax elements may be generated or used.</p><p id="p-0226" num="0225">Entropy Coding</p><p id="p-0227" num="0226">The entropy encoding unit <b>270</b> is configured to apply, for example, an entropy encoding algorithm or scheme (e.g. a variable length coding (VLC) scheme, a context adaptive VLC scheme (CAVLC), an arithmetic coding scheme, a binarization, a context adaptive binary arithmetic coding (CABAC), syntax-based context-adaptive binary arithmetic coding (SBAC), probability interval partitioning entropy (PIPE) coding or another entropy encoding methodology or technique) or bypass (no compression) on the quantized coefficients <b>209</b>, inter-prediction parameters, intra-prediction parameters, loop filter parameters and/or other syntax elements to obtain encoded picture data <b>21</b> which can be output via the output <b>272</b>, e.g. in the form of an encoded bitstream <b>21</b>, so that, e.g., the video decoder <b>30</b> may receive and use the parameters for decoding. The encoded bitstream <b>21</b> may be transmitted to video decoder <b>30</b>, or stored in a memory for later transmission or retrieval by video decoder <b>30</b>.</p><p id="p-0228" num="0227">Other structural variations of the video encoder <b>20</b> can be used to encode the video stream. For example, a non-transform based encoder <b>20</b> can quantize the residual signal directly without the transform processing unit <b>206</b> for certain blocks or frames. In another implementation, an encoder <b>20</b> can have the quantization unit <b>208</b> and the inverse quantization unit <b>210</b> combined into a single unit.</p><p id="p-0229" num="0228">Decoder and Decoding Method</p><p id="p-0230" num="0229"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example of a video decoder <b>30</b> that is configured to implement the techniques of the present application. The video decoder <b>30</b> is configured to receive encoded picture data <b>21</b> (e.g. encoded bitstream <b>21</b>), e.g. encoded by encoder <b>20</b>, to obtain a decoded picture <b>331</b>. The encoded picture data or bitstream comprises information for decoding the encoded picture data, e.g. data that represents picture blocks of an encoded video slice (and/or tile group or tile) and associated syntax elements.</p><p id="p-0231" num="0230">In the example of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the decoder <b>30</b> comprises an entropy decoding unit <b>304</b>, an inverse quantization unit <b>310</b>, an inverse transform processing unit <b>312</b>, a reconstruction unit <b>314</b> (e.g. a summer <b>314</b>), a loop filter <b>320</b>, a decoded picture buffer (DBP) <b>330</b>, a mode application unit <b>360</b>, an inter-prediction unit <b>344</b> and an intra-prediction unit <b>354</b>. Inter-prediction unit <b>344</b> may be or include a motion compensation unit. Video decoder <b>30</b> may, in some examples, perform a decoding pass generally reciprocal to the encoding pass described with respect to video encoder <b>20</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0232" num="0231">As explained with regard to the encoder <b>20</b>, the inverse quantization unit <b>210</b>, the inverse transform processing unit <b>212</b>, the reconstruction unit <b>214</b>, the loop filter <b>220</b>, the decoded picture buffer (DPB) <b>230</b>, the inter-prediction unit <b>244</b> and the intra-prediction unit <b>254</b> are also referred to as forming the &#x201c;built-in decoder&#x201d; of video encoder <b>20</b>. Accordingly, the inverse quantization unit <b>310</b> may be identical in function to the inverse quantization unit <b>210</b>, the inverse transform processing unit <b>312</b> may be identical in function to the inverse transform processing unit <b>212</b>, the reconstruction unit <b>314</b> may be identical in function to reconstruction unit <b>214</b>, the loop filter <b>320</b> may be identical in function to the loop filter <b>220</b>, and the decoded picture buffer <b>330</b> may be identical in function to the decoded picture buffer <b>230</b>. Therefore, the explanations provided for the respective units and functions of the video <b>20</b> encoder apply correspondingly to the respective units and functions of the video decoder <b>30</b>.</p><p id="p-0233" num="0232">Entropy Decoding</p><p id="p-0234" num="0233">The entropy decoding unit <b>304</b> is configured to parse the bitstream <b>21</b> (or in general encoded picture data <b>21</b>) and perform, for example, entropy decoding to the encoded picture data <b>21</b> to obtain, e.g., quantized coefficients <b>309</b> and/or decoded coding parameters <b>366</b>, such as any or all of inter-prediction parameters (e.g. reference picture index and motion vector), intra-prediction parameters (e.g. intra-prediction mode or index), transform parameters, quantization parameters, loop filter parameters, and/or other syntax elements. Entropy decoding unit <b>304</b> may be configured to apply the decoding algorithms or schemes corresponding to the encoding schemes as described with regard to the entropy encoding unit <b>270</b> of the encoder <b>20</b>. Entropy decoding unit <b>304</b> may be further configured to provide inter-prediction parameters, intra-prediction parameters and/or other syntax elements to the mode application unit <b>360</b> and other parameters to other units of the decoder <b>30</b>. Video decoder <b>30</b> may receive the syntax elements at the video slice level and/or the video block level. In addition or as an alternative to slices and respective syntax elements, tile groups and/or tiles and respective syntax elements may be received and/or used.</p><p id="p-0235" num="0234">Inverse Quantization</p><p id="p-0236" num="0235">The inverse quantization unit <b>310</b> may be configured to receive quantization parameters (QP) (or in general, information related to the inverse quantization) and quantized coefficients from the encoded picture data <b>21</b> (e.g. by parsing and/or decoding, e.g. by entropy decoding unit <b>304</b>) and to apply, based on the quantization parameters, an inverse quantization to the decoded quantized coefficients <b>309</b> to obtain dequantized coefficients <b>311</b>, which may also be referred to as transform coefficients <b>311</b>. The inverse quantization process may include use of a quantization parameter determined by video encoder <b>20</b> for each video block in the video slice (or tile or tile group) to determine a degree of quantization and, likewise, a degree of inverse quantization that should be applied.</p><p id="p-0237" num="0236">Inverse Transform</p><p id="p-0238" num="0237">Inverse transform processing unit <b>312</b> may be configured to receive dequantized coefficients <b>311</b>, also referred to as transform coefficients <b>311</b>, and to apply a transform to the dequantized coefficients <b>311</b> in order to obtain reconstructed residual blocks <b>313</b> in the sample domain. The reconstructed residual blocks <b>313</b> may also be referred to as transform blocks <b>313</b>. The transform may be an inverse transform, e.g., an inverse DCT, an inverse DST, an inverse integer transform, or a conceptually similar inverse transform process. The inverse transform processing unit <b>312</b> may be further configured to receive transform parameters or corresponding information from the encoded picture data <b>21</b> (e.g. by parsing and/or decoding, e.g. by entropy decoding unit <b>304</b>) to determine the transform to be applied to the dequantized coefficients <b>311</b>.</p><p id="p-0239" num="0238">Reconstruction</p><p id="p-0240" num="0239">The reconstruction unit <b>314</b> (e.g. adder or summer <b>314</b>) may be configured to add the reconstructed residual block <b>313</b>, to the prediction block <b>365</b> to obtain a reconstructed block <b>315</b> in the sample domain, e.g. by adding the sample values of the reconstructed residual block <b>313</b> and the sample values of the prediction block <b>365</b>.</p><p id="p-0241" num="0240">Filtering</p><p id="p-0242" num="0241">The loop filter unit <b>320</b> (either in the coding loop or after the coding loop) is configured to filter the reconstructed block <b>315</b> to obtain a filtered block <b>321</b>, e.g. to smooth pixel transitions, or otherwise improve the video quality. The loop filter unit <b>320</b> may comprise one or more loop filters such as a de-blocking filter, a sample-adaptive offset (SAO) filter or one or more other filters, e.g. a bilateral filter, an adaptive loop filter (ALF), a sharpening, a smoothing filter or a collaborative filter, or any combination thereof. Although the loop filter unit <b>320</b> is shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> as being an in-loop filter, in other configurations, the loop filter unit <b>320</b> may be implemented as a post loop filter.</p><p id="p-0243" num="0242">Decoded Picture Buffer</p><p id="p-0244" num="0243">The decoded video blocks <b>321</b> of a picture are then stored in the decoded picture buffer <b>330</b>, which stores the decoded pictures <b>331</b> as reference pictures for subsequent motion compensation for other pictures and/or for output or respectively display.</p><p id="p-0245" num="0244">The decoder <b>30</b> is configured to output the decoded picture <b>311</b>, e.g. via output <b>312</b>, for presentation or viewing to a user.</p><p id="p-0246" num="0245">Prediction</p><p id="p-0247" num="0246">The inter-prediction unit <b>344</b> may be identical to the inter-prediction unit <b>244</b> (in particular, to the motion compensation unit) and the intra-prediction unit <b>354</b> may be identical to the intra-prediction unit <b>254</b> in function, and performs split or partitioning decisions and prediction based on the partitioning and/or prediction parameters or respective information received from the encoded picture data <b>21</b> (e.g. by parsing and/or decoding, e.g. by entropy decoding unit <b>304</b>). Mode application unit <b>360</b> may be configured to perform the prediction (intra- or inter-prediction) per block based on reconstructed pictures, blocks or respective samples (filtered or unfiltered) to obtain the prediction block <b>365</b>.</p><p id="p-0248" num="0247">When the video slice or picture is coded as an intra-coded (I) slice, intra-prediction unit <b>354</b> of mode application unit <b>360</b> is configured to generate prediction block <b>365</b> for a picture block of the current video slice based on a signaled intra-prediction mode and data from previously decoded blocks of the current picture. When the video slice or picture is coded as an inter-coded (i.e., B, or P) slice, inter-prediction unit <b>344</b> (e.g. motion compensation unit) of mode application unit <b>360</b> is configured to produce prediction block <b>365</b> for a video block of the current video slice based on the motion vectors and other syntax elements received from entropy decoding unit <b>304</b>. For inter-prediction, the prediction blocks may be produced from one of the reference pictures within one of the reference picture lists. Video decoder <b>30</b> may construct the reference picture lists, List 0 and List 1, using default construction techniques based on reference pictures stored in DPB <b>330</b>. The same or similar approach may be applied for or by embodiments using tile groups (e.g. video tile groups) and/or tiles (e.g. video tiles) in addition or alternatively to slices (e.g. video slices), e.g. a video may be coded using I, P or B tile groups and/or tiles.</p><p id="p-0249" num="0248">Mode application unit <b>360</b> is configured to determine the prediction information for a video/picture block of the current video slice by parsing the motion vectors or related information and other syntax elements, and use the prediction information to produce the prediction blocks for the current video block being decoded. For example, the mode application unit <b>360</b> uses some of the received syntax elements to determine a prediction mode (e.g., intra- or inter-prediction) used to code the video blocks of the video slice, an inter-prediction slice type (e.g., B slice, P slice, or GPB slice), construction information for one or more of the reference picture lists for the slice, motion vectors for each inter-coded video block of the slice, inter-prediction status for each inter-coded video block of the slice, and other information to decode the video blocks in the current video slice. The same or similar approach may be applied for or by embodiments using tile groups (e.g. video tile groups) and/or tiles (e.g. video tiles) in addition or alternatively to slices (e.g. video slices), e.g. a video may be coded using I, P or B tile groups and/or tiles.</p><p id="p-0250" num="0249">Embodiments of the video decoder <b>30</b> as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be configured to partition and/or decode the picture by using slices (also referred to as video slices), wherein a picture may be partitioned into or decoded using one or more slices (typically non-overlapping), and each slice may comprise one or more blocks (e.g. CTUs).</p><p id="p-0251" num="0250">Embodiments of the video decoder <b>30</b> as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be configured to partition and/or decode the picture by using tile groups (also referred to as video tile groups) and/or tiles (also referred to as video tiles), wherein a picture may be partitioned into or decoded using one or more tile groups (typically non-overlapping), and each tile group may comprise one or more blocks (e.g. CTUs) or one or more tiles, wherein each tile may be of rectangular shape and may comprise one or more blocks (e.g. CTUs), e.g. complete or fractional blocks.</p><p id="p-0252" num="0251">Other variations of the video decoder <b>30</b> can be used to decode the encoded picture data <b>21</b>. For example, the decoder <b>30</b> can produce the output video stream without the loop filtering unit <b>320</b>. For example, a non-transform based decoder <b>30</b> can inverse-quantize the residual signal directly without the inverse-transform processing unit <b>312</b> for certain blocks or frames. In another implementation, the video decoder <b>30</b> can have the inverse-quantization unit <b>310</b> and the inverse-transform processing unit <b>312</b> combined into a single unit.</p><p id="p-0253" num="0252">It should be understood that, in the encoder <b>20</b> and the decoder <b>30</b>, a processing result of a current step may be further processed and then output to the next step. For example, after interpolation filtering, motion vector derivation or loop filtering, a further operation, such as Clip or shift, may be performed on the processing result of the interpolation filtering, motion vector derivation or loop filtering.</p><p id="p-0254" num="0253">It should be noted that further operations may be applied to the derived motion vectors of the current block (including but not limited to control point motion vectors of affine mode, sub-block motion vectors in affine, planar, ATMVP modes, temporal motion vectors, and so on). For example, the value of a motion vector is constrained to a predefined range according to its representing bit number. If the representing bit number of the motion vector is bitDepth, then the range is &#x2212;2{circumflex over (&#x2003;)}(bitDepth&#x2212;1)&#x2dc;2{circumflex over (&#x2003;)}(bitDepth&#x2212;1)&#x2212;1, where &#x201c;{circumflex over (&#x2003;)}&#x201d; means exponentiation. For example, if bitDepth is set equal to 16, the range is &#x2212;32768&#x2dc;32767; if bitDepth is set equal to 18, the range is &#x2212;131072&#x2dc;131071. For example, the value of the derived motion vector (e.g. the MVs of four 4&#xd7;4 sub-blocks within one 8&#xd7;8 block) is constrained such that the maximum difference between integer parts of the four 4&#xd7;4 sub-block MVs is no more than N pixels, such as no more than 1 pixel. The following description provides two methods for constraining the motion vector according to the bitDepth.</p><p id="p-0255" num="0254">Method 1: remove the overflow MSB (most significant bit) by the following operations:</p><p id="p-0256" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>ux</i>=(mv<i>x</i>+2<sup>bitDepth</sup>)%2<sup>bitDepth</sup>&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0257" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>mv<i>x</i>=(<i>ux&#x3e;=</i>2<sup>bitDepth-1</sup>)?(<i>ux&#x2212;</i>2<sup>bitDepth</sup>):<i>ux</i>&#x2003;&#x2003;(2)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0258" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>uy</i>=(mv<i>y</i>+2<sup>bitDepth</sup>)%2<sup>bitDepth</sup>&#x2003;&#x2003;(3)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0259" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>mv<i>y</i>=(<i>uy&#x3e;=</i>2<sup>bitDepth-1</sup>)?(<i>uy&#x2212;</i>2<sup>bitDepth</sup>):<i>uy</i>&#x2003;&#x2003;(4)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0260" num="0255">where mvx is a horizontal component of a motion vector of an image block or a sub-block, mvy is a vertical component of a motion vector of an image block or a sub-block, and ux and uy indicate respective intermediate values.</p><p id="p-0261" num="0256">For example, if the value of mvx is &#x2212;32769, after applying formulae (1) and (2), the resulting value is 32767. In a computer system, decimal numbers are stored as two's complements. The two's complement of &#x2212;32769 is 1,0111,1111,1111,1111 (17 bits). Then, the MSB is discarded, so the resulting two's complement is 0111,1111,1111,1111 (decimal number is 32767), which is the same as the output by applying formulae (1) and (2).</p><p id="p-0262" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>ux</i>=(mvp<i>x</i>+mvd<i>x</i>+2<sup>bitDepth</sup>)%2<sup>bitDepth</sup>&#x2003;&#x2003;(5)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0263" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>mv<i>x</i>=(<i>ux</i>&#x3e;=2<sup>bitDepth-1</sup>)?(<i>ux</i>&#x2212;2<sup>bitDepth</sup>)<i>ux</i>&#x2003;&#x2003;(6)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0264" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>uy</i>=(mvp<i>y</i>+mvd<i>y</i>+2<sup>bitDepth</sup>)%2<sup>bitDepth</sup>&#x2003;&#x2003;(7)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0265" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>mv<i>y</i>=(<i>uy</i>&#x3e;=2<sup>bitDepth-1</sup>)?(<i>uy</i>&#x2212;2<sup>bitDepth</sup>)<i>uy</i>&#x2003;&#x2003;(8)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0266" num="0257">The operations may be applied during the sum of the motion vector predictor mvp and the motion vector difference mvd, as shown in formulae (5) to (8).</p><p id="p-0267" num="0258">Method 2: remove the overflow MSB by clipping the value:</p><p id="p-0268" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>vx</i>=Clip3(&#x2212;2<sup>bitDepth-1</sup>,2<sup>bitDepth-1</sup>&#x2212;1,<i>vx</i>)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0269" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>vy</i>=Clip3(&#x2212;2<sup>bitDepth-1</sup>,2<sup>bitDepth-1</sup>&#x2212;1,<i>vy</i>)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0270" num="0259">where vx is a horizontal component of a motion vector of an image block or a sub-block, vy is a vertical component of a motion vector of an image block or a sub-block; x, y and z respectively correspond to three input values of the MV clipping process, and the definition of the function Clip3 is as follows:</p><p id="p-0271" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mrow>   <mi>Clip</mi>   <mo>&#x2062;</mo>   <mn>3</mn>   <mo>&#x2062;</mo>   <mrow>    <mo>(</mo>    <mrow>     <mi>x</mi>     <mo>,</mo>     <mi>y</mi>     <mo>,</mo>     <mi>z</mi>    </mrow>    <mo>)</mo>   </mrow>  </mrow>  <mo>=</mo>  <mrow>   <mo>{</mo>   <mtable>    <mtr>     <mtd>      <mrow>       <mi>x</mi>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mi>z</mi>       <mo>&#x3c;</mo>       <mi>x</mi>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mi>y</mi>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mi>z</mi>       <mo>&#x3e;</mo>       <mi>y</mi>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mi>z</mi>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mi>otherwise</mi>     </mtd>    </mtr>   </mtable>  </mrow> </mrow></math></maths></p><p id="p-0272" num="0260"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram of a video coding device <b>400</b> according to an embodiment of the present disclosure. The video coding device <b>400</b> is suitable for implementing the disclosed embodiments as described below. In an embodiment, the video coding device <b>400</b> may be a decoder such as video decoder <b>30</b> of <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> or an encoder such as video encoder <b>20</b> of <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>.</p><p id="p-0273" num="0261">The video coding device <b>400</b> may comprise ingress ports <b>410</b> (or input ports <b>410</b>) and one or more receiver units (Rx) <b>420</b> for receiving data; a processor, logic unit, or central processing unit (CPU) <b>430</b> to process the data; one or more transmitter units (Tx) <b>440</b> and egress ports <b>450</b> (or output ports <b>450</b>) for transmitting the data; and a memory <b>460</b> for storing the data. The video coding device <b>400</b> may also comprise optical-to-electrical (OE) components and electrical-to-optical (EO) components coupled to the ingress ports <b>410</b>, the receiver units <b>420</b>, the transmitter units <b>440</b>, and the egress ports <b>450</b> for egress or ingress of optical or electrical signals.</p><p id="p-0274" num="0262">The processor <b>430</b> may be implemented by hardware and software. The processor <b>430</b> may be implemented as one or more CPU chips, cores (e.g., as a multi-core processor), FPGAs, ASICs, and DSPs. The processor <b>430</b> may be in communication with the ingress ports <b>410</b>, the receiver units <b>420</b>, the transmitter units <b>440</b>, egress ports <b>450</b>, and the memory <b>460</b>. The processor <b>430</b> may comprise a coding module <b>470</b>. The coding module <b>470</b> implements the disclosed embodiments described above and below. For instance, the coding module <b>470</b> may implement, process, prepare, or provide the various coding operations. The inclusion of the coding module <b>470</b> therefore provides a substantial improvement to the functionality of the video coding device <b>400</b> and effects a transformation of the video coding device <b>400</b> to a different state. Alternatively, the coding module <b>470</b> may be implemented as instructions stored in the memory <b>460</b> and executed by the processor <b>430</b>.</p><p id="p-0275" num="0263">The memory <b>460</b> may comprise one or more disks, tape drives, and solid-state drives and may be used as an over-flow data storage device, to store programs when such programs are selected for execution, and to store instructions and data that are read during program execution. The memory <b>460</b> may be, for example, volatile and/or non-volatile and may be a read-only memory (ROM), random access memory (RAM), ternary content-addressable memory (TCAM), and/or static random-access memory (SRAM).</p><p id="p-0276" num="0264"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a simplified block diagram of an apparatus <b>500</b> that may be used as either or both of the source device <b>12</b> and the destination device <b>14</b> from <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> according to an exemplary embodiment.</p><p id="p-0277" num="0265">A processor <b>502</b> in the apparatus <b>500</b> can be a central processing unit. Alternatively, the processor <b>502</b> can be any other type of device, or multiple devices, capable of manipulating or processing information now-existing or hereafter developed. Although the disclosed implementations can be practiced with a single processor as shown, e.g., the processor <b>502</b>, advantages in speed and efficiency can be achieved using more than one processor.</p><p id="p-0278" num="0266">A memory <b>504</b> in the apparatus <b>500</b> can be a read only memory (ROM) device or a random access memory (RAM) device in an implementation. Any other suitable type of storage device can be used as the memory <b>504</b>. The memory <b>504</b> can include code and data <b>506</b> that is accessed by the processor <b>502</b> using a bus <b>512</b>. The memory <b>504</b> can further include an operating system <b>508</b> and application programs <b>510</b>, the application programs <b>510</b> including at least one program that permits the processor <b>502</b> to perform the methods described herein. For example, the application programs <b>510</b> can include applications 1 through N, which further include a video coding application that performs the methods described herein.</p><p id="p-0279" num="0267">The apparatus <b>500</b> can also include one or more output devices, such as a display <b>518</b>. The display <b>518</b> may be, in one example, a touch sensitive display that combines a display with a touch sensitive element that is operable to sense touch inputs. The display <b>518</b> can be coupled to the processor <b>502</b> via the bus <b>512</b>.</p><p id="p-0280" num="0268">Although depicted here as a single bus, the bus <b>512</b> of the apparatus <b>500</b> can be composed of multiple buses. Further, a secondary storage (not shown) can be directly coupled to the other components of the apparatus <b>500</b> or can be accessed via a network and can comprise a single integrated unit such as a memory card or multiple units such as multiple memory cards. The apparatus <b>500</b> can thus be implemented in a wide variety of configurations.</p><p id="p-0281" num="0269">Intra block copy (IBC), also known as Current Picture Referencing (CPR) mode, is a tool adopted in HEVC extensions on Screen Content Coding (SCC). IBC significantly improves the coding efficiency of screen content materials. Since IBC mode is implemented as a block level coding mode, block matching (BM) is performed at the encoder to find the optimal block vector (or also called motion vector) for each CU. Here, a motion vector is used to indicate the displacement from the current block to a reference block, which is already reconstructed in the current picture. A luma motion vector of an IBC-coded CU is in integer precision. A chroma motion vector is clipped to integer precision as well. When combined with adaptive motion vector resolution (AMVR), the IBC mode can switch between 1-pel and 4-pel motion vector precisions. An IBC-coded CU may be treated as a third prediction mode other than intra prediction mode or inter prediction mode.</p><p id="p-0282" num="0270">To reduce memory consumption and decoder complexity, the IBC in VVC Test Model 4 (VTM4) allows only the reconstructed portion of the predefined area including the current CTU to be used. This restriction allows the IBC mode to be implemented using local on-chip memory for hardware implementations.</p><p id="p-0283" num="0271">At the encoder side, hash-based motion estimation is performed for IBC. The encoder performs rate distortion (RD) checks for blocks with either width or height no larger than 16 luma samples. For non-merge mode, the block vector search is performed using hash-based search first. If hash-based search does not return a valid candidate, a local search based on block matching will be performed.</p><p id="p-0284" num="0272">At CU level, IBC mode is signaled with a flag, and the flag can be signaled as IBC Advanced Motion Vector Prediction (AMVP) mode or IBC skip/merge mode as follows:</p><p id="p-0285" num="0273">IBC skip/merge mode: A merge candidate index which is used to indicate the block vector in the list from neighboring candidate IBC coded blocks, wherein the block vector is used to predict the current block. The merge candidate list comprises spatial candidates, History-based Motion Vector Prediction (HMVP) candidates, and pairwise candidates.</p><p id="p-0286" num="0274">IBC AMVP mode: A block vector difference is coded in the same way as a motion vector difference. The block vector prediction method uses two candidates as predictors, one from the left neighbor block and one from the above neighbor block (if IBC mode is used to code the neighbor block). When a neighbor block is not available, a default block vector will be used as a predictor. A flag is signaled to indicate the block vector predictor index.</p><p id="p-0287" num="0275">In VVC Draft 4.0, the search range of the IBC block vector is optimized by adopting JVET-M0407 which can be found under the link http://phenix.it-sudparis.eu/jvet/index.php.</p><p id="p-0288" num="0276">In JVET-M0407, the IBC block size is not allowed to be larger than 64&#xd7;64 luma samples.</p><p id="p-0289" num="0277">The method described below utilizes the reference memory buffer more efficiently such that the effective search range for IBC mode can be extended beyond the current CTU.</p><p id="p-0290" num="0278">This means that as soon as any of the 64&#xd7;64 blocks in the reference memory buffer begins to update with the reconstructed samples from the current CTU, the previous stored reference samples (from the left CTU) in the whole 64&#xd7;64 block become unavailable for IBC reference purpose.</p><p id="p-0291" num="0279">As each of the 64&#xd7;64 blocks in the reference memory buffer is considered as a whole, when part of the 64&#xd7;64 block has been updated with reconstructed samples from the current CTU, the reference samples from the left CTU in this 64&#xd7;64 block cannot be used anymore.</p><p id="p-0292" num="0280">Depending on the location of the current coding block relative to the current CTU, the following applies:</p><p id="p-0293" num="0281">If a current block is predicted using IBC mode and the current block falls into the top-left 64&#xd7;64 block of the current CTU, then in addition to the already reconstructed samples in the current CTU, the current block can also refer to the reference samples in the bottom-right 64&#xd7;64 block of the left CTU. In addition, the current block can refer to the reference samples in the bottom-left 64&#xd7;64 block of the left CTU, and refer to the reference samples in the top-right 64&#xd7;64 block of the left CTU (as shown in <figref idref="DRAWINGS">FIG. <b>6</b><i>a</i></figref>).</p><p id="p-0294" num="0282">If a current block is predicted using IBC mode and the current block falls into the top-right 64&#xd7;64 block of the current CTU, then in addition to the already reconstructed samples in the current CTU, if the luma samples in location (0, 64) relative to the current CTU have not yet been reconstructed, the current block can refer to the reference samples in the bottom-left 64&#xd7;64 block, and refer to the reference samples in the bottom-right 64&#xd7;64 block of the left CTU (as shown in <figref idref="DRAWINGS">FIG. <b>6</b><i>b</i></figref>). If the luma samples in location (0, 64) relative to the current CTU have already been reconstructed, the current block can refer to reference samples in the bottom-right 64&#xd7;64 block of the left CTU, but not the bottom-left 64&#xd7;64 block of the left CTU.</p><p id="p-0295" num="0283">If a current block is predicted using IBC mode and the current block falls into the bottom-left 64&#xd7;64 block of the current CTU, then in addition to the already reconstructed samples in the current CTU, if luma samples in location (64, 0) relative to the current CTU have not yet been reconstructed, the current block can refer to the reference samples in the top-right 64&#xd7;64 block, and refer to the reference samples in the bottom-right 64&#xd7;64 block of the left CTU, using IBC mode. If the luma samples in location (64, 0) relative to the current CTU have already been reconstructed, the current block can refer to the reference samples in the bottom-right 64&#xd7;64 block of the left CTU (as shown in <figref idref="DRAWINGS">FIG. <b>6</b><i>c</i></figref>).</p><p id="p-0296" num="0284">If a current block is predicted using IBC mode and the current block falls into the bottom-right 64&#xd7;64 block of the current CTU, the current block can only refer to the already reconstructed samples in the current CTU (as shown in <figref idref="DRAWINGS">FIG. <b>6</b><i>d</i></figref>).</p><p id="p-0297" num="0285">A bitstream is a series of one or more coded video sequences. In order for a bitstream to conform to the VVC specification, requirements and restrictions in the VVC specification must be fulfilled. Syntax restrictions must be met. Data that does not conform to the VVC specification can be simply rejected by decoders; the standard does not specify what a decoder should do if such data is encountered. Non-conforming data may be the result of problems in a communication system, such as the loss of some of the data packets that contain bitstream data. A decoder may or may not attempt to continue decoding when non-conforming data is encountered. Nevertheless, the output of a VVC encoder shall always fully conform to the VVC specification.</p><p id="p-0298" num="0286">For example, in VVC specification Draft 5.0 (JVET-N1001), a (0, 0) block vector for IBC predicted blocks is invalid as defined in the VVC specification requirements. A VVC decoder needs to conform that a bitstream does not include a (0, 0) block vector of an IBC predicted block.</p><p id="p-0299" num="0287">In VVC Draft 5.0, the IBC reference memory buffer is combined with the decoder buffer. In order to reduce the hardware pipeline memory size for IBC reference samples, the above-mentioned variant size reference memory buffer is designed (JVET-M0407). In the variant size buffer design, lots for bitstream conformation is necessary. A VVC decoder checks whether the received bitstream is a valid VVC decodable bitstream. This check is generally called bitstream conformance check. To reduce the number of bitstream conformation, in JVET-N0472, a dedicated IBC reference memory buffer is designed instead of mixing IBC reference memory buffer and decoder buffer.</p><p id="p-0300" num="0288">For a 128&#xd7;128 CTU, the dedicated IBC buffer is defined as 128&#xd7;128. When a CU (x, y) with size W&#xd7;H has been decoded, the reconstructed samples in the CU are written to the W&#xd7;H block area, starting from position (x %128, y %128), before loop-filtering. Here the modulo operator % always returns a positive number, i.e. for x&#x3c;0, x % L<img id="CUSTOM-CHARACTER-00003" he="3.56mm" wi="3.22mm" file="US20230007273A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>L&#x2212;(&#x2212;x % L), e.g. &#x2212;3%128=125. This process writes the reconstructed samples into the dedicated IBC buffer, which is used for further referencing.</p><p id="p-0301" num="0289">When a block is predicted by using IBC mode, the predicted samples are obtained from the reference samples stored in the IBC dedicated memory. Assume that a sample (x, y) (or also called pixel (x, y)) is coded in IBC mode with block vector BV=(BVx, BVy), the pixel's prediction sample in the IBC reference buffer is located at ((x+BVx) %128, (y+BVy) %128).</p><p id="p-0302" num="0290">When the buffer is considered as an area with a width equal to W and a height equal to H, after decoding a CTU or CU starting from (x, y), the reconstructed pixels will be stored before loop-filtering in the buffer starting from (x % W, y % H). Thus, after decoding a CTU, the corresponding IBC reference buffer will be updated accordingly. Such a setting may also happen when the CTU size is not 128&#xd7;128. For example, for a 64&#xd7;64 CTU, with the current buffer size, the IBC reference buffer can be considered as a 256&#xd7;64 buffer.</p><p id="p-0303" num="0291"><figref idref="DRAWINGS">FIG. <b>7</b><i>a </i></figref>shows a current CTU, a current CU, and the left CTU. <figref idref="DRAWINGS">FIG. <b>7</b><i>b </i></figref>shows the dedicated IBC buffer before the current block of the current CU is decoded. And <figref idref="DRAWINGS">FIG. <b>7</b><i>c </i></figref>shows the dedicated IBC buffer after the current block is decoded.</p><p id="p-0304" num="0292">Compared with the variable size IBC buffer used in VVC daft 5.0, the JVET-N0472 designed dedicated IBC buffer reduced the number of bitstream conformance constraints. However, the design still has drawbacks. For example, bitstream conformance is still needed for the block vector validation check. Furthermore, the dedicated IBC reference buffer increases the hardware pipeline memory size.</p><p id="p-0305" num="0293">According to the present disclosure, the following embodiments are provided to solve the above-mentioned problems.</p><heading id="h-0007" level="1">Embodiment 1</heading><p id="p-0306" num="0294">According to IBC reference samples design which is disclosed in VVC draft 5, the following bitstream conformance is required for IBC block vector validation checks.</p><p id="p-0307" num="0295">For luma blocks or single tree case:</p><p id="p-0308" num="0296">The reference samples must be available.</p><p id="p-0309" num="0297">The reference samples must be from the same CTU row.</p><p id="p-0310" num="0298">The reference samples must be from the current CTU or the left CTU of the current CTU.</p><p id="p-0311" num="0299">The reference samples must be in the defined IBC reference area as shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0312" num="0300">These conformance constraints are described in chapter 8.6.2.1 of JVET-N1001, which can be found under the link http://phenix.it-sudparis.eu/jvet/index.php, as:</p><p id="p-0313" num="0301">It is a requirement of bitstream conformance that the luma motion vector mvL shall obey the following constraints:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0302">When the derivation process for block availability as specified in clause 6.4.X [Ed. (BB): Neighbouring blocks availability checking process tbd] is invoked with the current luma location (xCurr, yCurr) set equal to (xCb, yCb) and the neighbouring luma location (xCb+(mvL[0]&#x3e;&#x3e;4), yCb+(mvL[1]&#x3e;&#x3e;4)) as inputs, the output shall be equal to TRUE.</li>        <li id="ul0002-0002" num="0303">When the derivation process for block availability as specified in clause 6.4.X [Ed. (BB): Neighbouring blocks availability checking process tbd] is invoked with the current luma location (xCurr, yCurr) set equal to (xCb, yCb) and the neighbouring luma location (xCb+(mvL[0]&#x3e;&#x3e;4)+cbWidth&#x2212;1, yCb+(mvL[1]&#x3e;&#x3e;4)+cbHeight&#x2212;1) as inputs, the output shall be equal to TRUE.</li>        <li id="ul0002-0003" num="0304">One or both the following conditions shall be true:        <ul id="ul0003" list-style="none">            <li id="ul0003-0001" num="0305">The value of (mvL[0]&#x3e;&#x3e;4)+cbWidth is less than or equal to 0.</li>            <li id="ul0003-0002" num="0306">The value of (mvL[1]&#x3e;&#x3e;4)+cbHeight is less than or equal to 0.</li>        </ul>        </li>        <li id="ul0002-0004" num="0307">The following conditions shall be true:</li>    </ul>    </li></ul></p><p id="p-0314" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>(<i>y</i>Cb+(mv<i>L</i>[1]&#x3e;&#x3e;4))&#x3e;&#x3e;CtbLog2Size<i>Y=y</i>Cb&#x3e;&#x3e;CtbLog2Size<i>Y </i><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0315" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>(<i>y</i>Cb+(mv<i>L</i>[1]&#x3e;&#x3e;4)+cbHeight&#x2212;1)&#x3e;&#x3e;CtbLog2Size<i>Y=y</i>Cb&#x3e;&#x3e;CtbLog2Size<i>Y </i><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0316" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>(<i>x</i>Cb+(mv<i>L</i>[0]&#x3e;&#x3e;4))&#x3e;&#x3e;CtbLog2Size<i>Y</i>&#x3e;=(<i>x</i>Cb&#x3e;&#x3e;CtbLog2Size<i>Y</i>)&#x2212;1<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0317" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>(<i>x</i>Cb+(mv<i>L</i>[0]&#x3e;&#x3e;4)+cbWidth&#x2212;1)&#x3e;&#x3e;CtbLog2Size<i>Y</i>(<i>x</i>Cb&#x3e;&#x3e;CtbLog2Size<i>Y</i>)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0004" list-style="none">    <li id="ul0004-0001" num="0000">    <ul id="ul0005" list-style="none">        <li id="ul0005-0001" num="0308">When (xCb+(mvL[0]&#x3e;&#x3e;4))&#x3e;&#x3e;CtbLog2SizeY is equal to (xCb&#x3e;&#x3e;CtbLog2SizeY)&#x2212;1, the derivation process for block availability as specified in clause 6.4.X [Ed. (BB): Neighbouring blocks availability checking process tbd] is invoked with the current luma location (xCurr, yCurr) set equal to (xCb, yCb) and the neighbouring luma location (((xCb+(mvL[0]&#x3e;&#x3e;4)+CtbSizeY)&#x3e;&#x3e;(CtbLog2SizeY&#x2212;1))&#x3c;&#x3c;(CtbLog2SizeY&#x2212;1), ((yCb+(mvL[1]&#x3e;&#x3e;4))&#x3e;&#x3e;(CtbLog2SizeY&#x2212;1))&#x3c;&#x3c;(CtbLog2SizeY&#x2212;1)) as inputs, and the output shall be equal to FALSE.</li>    </ul>    </li></ul></p><p id="p-0318" num="0309">Here, (xCb, YCb) is a luma location specifying the top-left sample of the current coding block, wherein the luma location is relative to the top-left luma sample of the current picture, mvL is the luma motion vector (or block vector) in 1/16 fractional-sample accuracy, cbWidth is a variable specifying the width of the current coding block in luma samples, and cbHeight is a variable specifying the height of the current coding block in luma samples. CtbSizeY is the CTU size and CtbLog2SizeY is the CTU size in log 2 scale.</p><p id="p-0319" num="0310">For separate/dual tree case and chroma blocks:<ul id="ul0006" list-style="none">    <li id="ul0006-0001" num="0000">    <ul id="ul0007" list-style="none">        <li id="ul0007-0001" num="0311">The reference samples must be available.</li>    </ul>    </li></ul></p><p id="p-0320" num="0312">These conformance constraints are described in chapter 8.6.1 of NET-N1001 as follows:<ul id="ul0008" list-style="none">    <li id="ul0008-0001" num="0000">    <ul id="ul0009" list-style="none">        <li id="ul0009-0001" num="0313">It is a requirement of bitstream conformance that the chroma motion vector mvC[xSbIdx][ySbIdx] shall obey the following constraints:</li>        <li id="ul0009-0002" num="0314">When the derivation process for block availability as specified in clause 6.4.X [Ed. (BB): Neighbouring blocks availability checking process tbd] is invoked with the current chroma location (xCurr, yCurr) set equal to (xCb/SubWidthC, yCb/SubHeightC) and the neighbouring chroma location (xCb/SubWidthC+(mvC[xSbIdx][ySbIdx][0]&#x3e;&#x3e;5), yCb/SubHeightC+(mvC[xSbIdx][ySbIdx][1]&#x3e;&#x3e;5)) as inputs, the output shall be equal to TRUE.</li>        <li id="ul0009-0003" num="0315">When the derivation process for block availability as specified in clause 6.4.X [Ed. (BB): Neighbouring blocks availability checking process tbd] is invoked with the current chroma location (xCurr, yCurr) set equal to (xCb/SubWidthC, yCb/SubHeightC) and the neighbouring chroma location (xCb/SubWidthC+(mvC[xSbIdx][ySbIdx][0]&#x3e;&#x3e;5)+cbWidth/SubWidthC&#x2212;1, yCb/SubHeightC+(mvC[xSbIdx][ySbIdx][1]&#x3e;&#x3e;5)+cbHeight/SubHeightC&#x2212;1) as inputs, the output shall be equal to TRUE.</li>        <li id="ul0009-0004" num="0316">One or both of the following conditions shall be true:        <ul id="ul0010" list-style="none">            <li id="ul0010-0001" num="0317">(mvC[xSbIdx][ySbIdx][0]&#x3e;&#x3e;5)+xSbIdx*2+2 is less than or equal to 0.</li>            <li id="ul0010-0002" num="0318">(mvC[xSbIdx][ySbIdx][1]&#x3e;&#x3e;5)+ySbIdx*2+2 is less than or equal to 0.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0321" num="0319">Where the numbers of luma coding subblocks in the horizontal direction numSbX and in the vertical direction numSbY are derived as follows:</p><p id="p-0322" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>numSb<i>X</i>=(cbWidth&#x3e;&#x3e;2)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0323" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>numSb<i>Y</i>=(cbHeight&#x3e;&#x3e;2)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0324" num="0320">Here, xSbIdx=0 . . . numSbX&#x2212;1, ySbIdx=0 . . . numSbY&#x2212;1 and mvL is the luma motion vector (or block vector) in 1/16 fractional-sample accuracy.</p><p id="p-0325" num="0321">According to JVET-N0472, the dedicated IBC buffer is referenced based on ((x+BVx) % W, (y+BVy) % H) (for x&#x3c;0, x % L<img id="CUSTOM-CHARACTER-00004" he="3.56mm" wi="3.22mm" file="US20230007273A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>L&#x2212;(&#x2212;x % L)), where W and H represent the dedicated IBC buffer size. In one example, for a 128&#xd7;128 CTU, both W and H are equal to 128. Based on the dedicated IBC buffer referencing rule (((x+BVx) % W, (y+BVy) % H) (for x&#x3c;0, x % L<img id="CUSTOM-CHARACTER-00005" he="3.56mm" wi="3.22mm" file="US20230007273A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>L&#x2212;(&#x2212;x % L))), the reference samples will not lie beyond the dedicated IBC reference memory area. Therefore, the reference samples must be from the current CTU or the left CTU of the current CTU, and the reference samples must be in the defined IBC reference area as shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0326" num="0322">Therefore, the following bitstream conformance constraint is removed in N0472:<ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0000">    <ul id="ul0012" list-style="none">        <li id="ul0012-0001" num="0323">The reference samples must lie in the defined IBC reference area as shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</li>    </ul>    </li></ul></p><p id="p-0327" num="0324">However, the reference samples must be available for luma or chroma and the reference samples from the same CTU row must still be kept, since in some corner case, the dedicated IBC buffer is empty. For example, in the first CTU of the picture, the dedicated IBC buffer is partially empty, with no samples from the left CTU.</p><p id="p-0328" num="0325">According to embodiment 1, all bitstream conformance constraints for IBC block vector validation checks are removed for both luma and chroma components in the single tree case and the separated tree case. The predicted IBC block is referenced to samples from the dedicated IBC buffer and is referenced based on ((x+BVx) % W, (y+BVy) % H) (for x&#x3c;0, x % L<img id="CUSTOM-CHARACTER-00006" he="3.56mm" wi="3.22mm" file="US20230007273A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>L&#x2212;(&#x2212;x % L)) where x, and y are the coordinates of the top-left sample of the current block, and BVx and BVy are block vectors for the current IBC block.</p><p id="p-0329" num="0326">When the block is the first CU of the first CTU of the picture as shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the dedicated IBC buffer is initialized with a default value. For example, a value of 1&#x3c;&#x3c;(InternalBitDepth&#x2212;1) may be used as the default value. For 10 bits internal bit depth, the default value may be 512, for 8 bits internal bit depth, the default value may be 128.</p><p id="p-0330" num="0327">An example is shown in <figref idref="DRAWINGS">FIG. <b>8</b><i>a </i></figref>that is based on the method in JVET-N0472. The solid arrow is a valid block vector, which can be encoded by the encoder into the bitstream, and parsed by the decoder from the bitstream. The dashed arrows are invalid block vectors, that may be encoded into the bitstream by the encoder but the VVC decoder cannot parse them from the bitstream, due to the bitstream conformance requirement.</p><p id="p-0331" num="0328">An example is shown in <figref idref="DRAWINGS">FIG. <b>8</b><i>b </i></figref>that is based on the method in embodiment 1. As all IBC block vector validation checks bitstream conformance constraints are removed, all solid arrows are valid block vectors which can be encoded by the encoder into the bitstream and parsed by the decoder from the bitstream. Based on the form ((x+BVx) % W, (y+BVy) % H) (for x&#x3c;0, x % L<img id="CUSTOM-CHARACTER-00007" he="3.56mm" wi="3.22mm" file="US20230007273A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>L&#x2212;(&#x2212;x % L)), all block vectors in <figref idref="DRAWINGS">FIG. <b>8</b><i>b </i></figref>are referencing the reference block in the dedicated IBC buffer as shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref><i>c. </i></p><p id="p-0332" num="0329">One benefit of embodiment 1 is that it removes all block vector validation bitstream conformance constraints. This embodiment increases the robustness of the coded bitstream. Besides, the embodiment initializes the dedicated IBC buffer. Undefined samples are avoided.</p><heading id="h-0008" level="1">Embodiment 2</heading><p id="p-0333" num="0330">Independent of or combined with embodiment 1, in embodiment 2, the dedicated IBC buffer is refreshed for each CTU row.</p><p id="p-0334" num="0331">In addition to initializing the dedicated IBC buffer if a CTU is the first CTU of a picture, the first CTU of a CTU row is also initialized with the default value.</p><p id="p-0335" num="0332">In an example, when the current block is the first CU in a CTU row as shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the dedicated IBC buffer is initialized with a default value. The default value may be defined as 1&#x3c;&#x3c;(InternalBitDepth&#x2212;1). For 10 bits internal bit depth, the default value may be 512, for 8 bits internal bit depth, the default value may be 128.</p><p id="p-0336" num="0333"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows examples for the first CTU of a CTU row in the luma component of the separated tree case or the single tree case. <figref idref="DRAWINGS">FIG. <b>9</b><i>a </i></figref>illustrates the method in JVET-N0472. The dashed block vector is invalid. Because of the bitstream conformance requirement that the reference samples must be from the current CTU or the left CTU of the current CTU, the referencing area in the dedicated IBC buffer is empty. <figref idref="DRAWINGS">FIG. <b>9</b><i>b </i></figref>shows the method according to embodiment 2, where the solid block vector is valid. The reference block area is initialized with default values.</p><p id="p-0337" num="0334">In embodiment 2, no bitstream conformance for IBC block vector validation is required. In addition, no samples from the last CTU row are used in IBC referencing. In this case, no additional line memory is used for IBC prediction.</p><heading id="h-0009" level="1">Embodiment 3</heading><p id="p-0338" num="0335">Independent of or combined with embodiments 1 and/or 2, in embodiment 3, the dedicated IBC buffer is refreshed for each virtual pipeline processing unit (VPDU). For example, for a 128&#xd7;128 CTU, a VPDU is a 64&#xd7;64 non-overlapped area. A 128&#xd7;128 CTU is thus constructed from 4 VPDUs. In the hardware implementation, the VPDUs are processed sequentially.</p><p id="p-0339" num="0336">In addition to initializing the dedicated IBC buffer if a CTU is the first CTU of a picture or the first CTU of a CTU row, in each VPDU, the dedicated IBC buffer needs to be refreshed by a default value.</p><p id="p-0340" num="0337">In an example, when the current block is the first CU of a VPDU, the dedicated IBC buffer is initialized with a default value. The default value may be defined as 1&#x3c;&#x3c;(InternalBitDepth&#x2212;1). For 10 bits internal bit depth, the default value may be 512, for 8 bits internal bit depth, the default value may be 128.</p><p id="p-0341" num="0338">As shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the dedicated IBC buffer for a CTU can be constructed from samples for the current reconstructed CTU, samples from the last CTU, and samples of default values.</p><p id="p-0342" num="0339">In embodiment 3, no bitstream conformance for IBC block vector validation is required. No samples from the last CTU row are used in IBC referencing. In this case, no additional line memory is used for IBC prediction. In addition, the IBC referencing memory size is the same as in the current VVC design, i.e. no additional memory is required for implementing the embodiment. For the current VPDU referencing, there is no need to access the dedicated IBC buffer.</p><p id="p-0343" num="0340">In addition, in the VVC Draft JVET-N1001, the largest allowed size of a CU predicted with IBC mode is 128&#xd7;64 or 64&#xd7;128. In this case, the CU size is larger than a VPDU.</p><p id="p-0344" num="0341">In order to keep the IBC referencing memory size the same as in the respective VVC design for a 128&#xd7;64 or 64&#xd7;128 size CU, one of the following rules may be applied on top of the current embodiment:</p><p id="p-0345" num="0000">1.) A 64&#xd7;128 or 128&#xd7;64 size CU predicted by using IBC mode is not allowed. In an example, if one dimension of the current CU size is larger than 64, the value of an IBC mode indicator may implicitly be equal to 0 or another value which represents IBC mode may be disabled for the current CU, such that no indicator needs to be parsed from the bitstream.<br/>2.) Based on the partitioning logic in VVC JVET-N1001, a 64&#xd7;128 or 128&#xd7;64 size CU must contain 2 VPDUs. In this case, both VPDUs are refreshed by default values. In one example, the default value may be defined as 1&#x3c;&#x3c;(InternalBitDepth&#x2212;1). For each prediction, the VPDU area of the current PU may be refreshed with a default value. In an example, the top-left sample of the current CU may be the same as the top-left sample of the current CTU, and the current CU width may be 64 and height may be 128. In this case, the left half 64&#xd7;128 area in the 128&#xd7;128 dedicated IBC buffer may be refreshed with the value of 1&#x3c;&#x3c;(InternalBitDepth&#x2212;1).<br/>3.) Based on the partitioning logic in VVC JVET-N1001, a 64&#xd7;128 or 128&#xd7;64 size CU must contain 2 VPDUs. If a 64&#xd7;128 or 128&#xd7;64 size CU is predicted by using IBC mode, the two contained VPDU areas of the 64&#xd7;128 or 128&#xd7;64 size current CU may be considered as two separated prediction units (PUs) with the same block vector, and the prediction may be performed separately. For each prediction, the VPDU area of the current PU may be refreshed with a default value. In an example, if a CU is predicted by using IBC mode, the top-left sample of the current CU may be the same as the top-left sample of the current CTU, and the current CU width may be 64 and the height may be 128. In this case, the top-left 64&#xd7;64 area of the 128&#xd7;128 dedicated IBC buffer may be refreshed during predicting the first (top) PU of the current 64&#xd7;128 CU. The bottom-left 64&#xd7;64 area of the 128&#xd7;128 dedicated IBC buffer may be refreshed during predicting the second (bottom) PU of the current 64&#xd7;128 CU.</p><heading id="h-0010" level="1">Embodiment 4</heading><p id="p-0346" num="0342">In the current VVC draft (JVET-N1001) IBC reference buffer design, or in the JVET-N0472 IBC reference buffer design, in the separated tree case, the chroma component can be predicted by IBC prediction mode. However, the IBC prediction mode for a chroma block requires bitstream conformance as follows:</p><p id="p-0347" num="0343">A current chroma block in the separated tree case is divided into 2&#xd7;2 sub-blocks, wherein each sub-block has a co-located luma component sub-block. When the chroma block is predicted by using IBC mode, the block vectors of each 2&#xd7;2 chroma sub-block are inherited from the co-located luma component sub-block, when the co-located luma sub-block is predicted by IBC mode. When any co-located luma sub-block is not predicted by IBC mode, or the inherited BV is invalid based on the bitstream conformance in VVC Draft 5.0 or JVET-N0472 for chroma block, the current chroma block cannot be predicted by IBC mode.</p><p id="p-0348" num="0344">Independent of or combined with embodiment 1, 2 or 3, in embodiment 4, the IBC prediction mode for chroma block bitstream conformance checks are not needed. In one example, a chroma block in the separated tree case is divided into 2&#xd7;2 sub-blocks, wherein each sub-block has a co-located luma component sub-block. When the current block is predicted by using IBC mode, the block vectors of each 2&#xd7;2 chroma sub-block are inherited from the co-located luma component sub-block, when the co-located luma sub-block is predicted by IBC mode. When the co-located luma sub-block is not predicted by using IBC mode, a default block vector may be set for the corresponding 2&#xd7;2 chroma sub-block. The default vector in one example may be (0,0). In another example, the default vector may be the block vector of a central sample of an IBC predicted luma co-located block of the current chroma block.</p><p id="p-0349" num="0345">Based on embodiment 4, additional bitstream conformance checks may be avoided for the chroma component in the separated tree case.</p><p id="p-0350" num="0346"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows a flowchart for a method of video decoding according to an embodiment of the disclosure. In step <b>1010</b>, a dedicated buffer for intra block copy (IBC) referencing is provided. In step <b>1020</b>, it is determined whether a current coding block (CB) is a first coding block of a first coding tree unit (CTU) in a current frame. If this is the case, the dedicated buffer is initialized to a default value in step <b>1040</b>. If not, it is determined in step <b>1030</b> whether the current coding block is a first coding block of a CTU row in the current frame. In this case, the dedicated buffer is initialized to a default value in step <b>1040</b>.</p><p id="p-0351" num="0347">Subsequently, it is determined in step <b>1050</b> whether the current block to be decoded is predicted using the IBC mode. When the current block is predicted using the IBC mode, an IBC block vector is obtained for the current block in step <b>1060</b>. Finally, predicted sample values are obtained for the current block in step <b>1070</b>, based on reference samples from the dedicated buffer and the IBC block vector for the current block.</p><p id="p-0352" num="0348"><figref idref="DRAWINGS">FIG. <b>13</b></figref> shows a flowchart for a method of video decoding according to a further embodiment of the disclosure. A dedicated buffer for intra block copy (IBC) referencing is provided. In step <b>1510</b>, it is determined whether a current coding tree unit (CTU) is the first CTU of a CTU row. If this is the case, the dedicated buffer is initialized to a default value in step <b>1520</b>.</p><p id="p-0353" num="0349">Subsequently, it is determined in step <b>1530</b> whether the current block to be decoded is predicted using the IBC mode. When the current block is predicted using IBC mode, an IBC block vector is obtained for the current block in step <b>1540</b>. Finally, predicted sample values are obtained for the current block in step <b>1550</b>, based on reference samples from the dedicated buffer and the IBC block vector for the current block.</p><p id="p-0354" num="0350"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows a flowchart for a method of video encoding according to an embodiment of the disclosure. In step <b>1110</b>, a dedicated buffer for intra block copy (IBC) referencing is provided. In step <b>1120</b>, it is determined whether a current coding block (CB) is the first coding block of the first coding tree unit (CTU) in a current frame. If this is the case, the dedicated buffer is initialized to a default value in step <b>1140</b>. If not, it is determined in step <b>1130</b> whether the current coding block is the first coding block of a CTU row in the current frame. If so, the dedicated buffer is initialized to a default value in step <b>1040</b>.</p><p id="p-0355" num="0351">Subsequently, predicted sample values are obtained for the current block to be encoded in step <b>1150</b>, based on reference samples from the dedicated buffer. Finally, an IBC block vector is obtained for the current block in step <b>1160</b>, based on the predicted sample values for the current block.</p><p id="p-0356" num="0352"><figref idref="DRAWINGS">FIG. <b>15</b></figref> shows a flowchart for a method of video encoding according to a further embodiment of the disclosure. A dedicated buffer for intra block copy (IBC) referencing is provided. In step <b>1610</b>, it is determined whether a current coding tree unit (CTU) is the first CTU of a CTU row. If this is the case, the dedicated buffer is initialized to a default value in step <b>1620</b>.</p><p id="p-0357" num="0353">Subsequently, predicted sample values are obtained for the current block to be encoded in step <b>1630</b>, based on reference samples from the dedicated buffer. Finally, an IBC block vector is obtained and encoded for the current block in step <b>1640</b>, based on the predicted sample values for the current block.</p><p id="p-0358" num="0354"><figref idref="DRAWINGS">FIG. <b>16</b></figref> shows a block diagram illustrating an example of a decoding apparatus according to an embodiment of the disclosure. The decoding apparatus (<b>30</b>) comprises a dedicated buffer (<b>1350</b>) for intra block copy (IBC) referencing, an initializing module (<b>1310</b>) configured to initialize the dedicated buffer to a default value, a determining module (<b>1320</b>) configured to determine whether the current block is predicted using IBC mode, a first obtaining module (<b>1330</b>) configured to obtain an IBC block vector for the current block when the current block is predicted using IBC mode, and a second obtaining module (<b>1340</b>) configured to obtain predicted sample values for the current block, based on reference samples from the dedicated buffer and the IBC block vector for the current block. The initializing module (<b>1310</b>) may be configured to initialize the dedicated buffer when a current coding tree unit (CTU) is the first CTU in a CTU row. Alternatively or additionally, the dedicated buffer may be initialized when the current CTU is the first CTU in a picture. Alternatively or additionally, the dedicated buffer may be initialized when a current block to be decoded is a first coding block of a first coding tree unit (CTU) in a CTU row and/or in the current frame. Alternatively or additionally, the initializing module (<b>1310</b>) may be configured to initialize the dedicated buffer for an area of a CTU, when a current coding block to be decoded is a first coding block in the area of the CTU.</p><p id="p-0359" num="0355"><figref idref="DRAWINGS">FIG. <b>17</b></figref> shows a block diagram illustrating an example of an encoding apparatus according to an embodiment of the disclosure. The encoding apparatus (<b>20</b>) comprises a dedicated buffer (<b>1450</b>) for intra block copy (IBC) referencing, an initializing module (<b>1410</b>) configured to initialize the dedicated buffer to a default value, a first obtaining module (<b>1420</b>) configured to obtain predicted sample values for the current block, based on reference samples from the dedicated buffer, and a second obtaining module (<b>1430</b>) configured to obtain an IBC block vector for the current block, based on the predicted sample values for the current block. The initializing module (<b>1410</b>) may be configured to initialize the dedicated buffer when a current coding tree unit (CTU) is the first CTU in a CTU row. Alternatively or additionally, the dedicated buffer may be initialized when the current CTU is the first CTU in a picture. Alternatively or additionally, the dedicated buffer may be initialized when a current block to be encoded is a first coding block of a first coding tree unit (CTU) in a CTU row and/or in the current frame. Alternatively or additionally, the initializing module (<b>1410</b>) may be configured to initialize the dedicated buffer for an area of a CTU, when a current coding block to be encoded is a first coding block in the area of the CTU.</p><p id="p-0360" num="0356">The initializing modules <b>1310</b> and <b>1410</b>, the determining module <b>1320</b>, the first obtaining modules <b>1330</b> and <b>1420</b>, and the second obtaining modules <b>1340</b> and <b>1430</b> may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the functions may be stored on a computer-readable medium or transmitted over communication media as one or more instructions or code and executed by a hardware-based processing unit. Instructions may be executed by one or more processors, such as one or more digital signal processors (DSPs), general purpose microprocessors, application specific integrated circuits (ASICs), field programmable logic arrays (FPGAs), or other equivalent integrated or discrete logic circuitry. Accordingly, the term &#x201c;processor,&#x201d; as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition, in some aspects, the functionality described herein may be provided within dedicated hardware and/or software modules configured for encoding and decoding, or incorporated in a combined codec. Also, the techniques could be fully implemented in one or more circuits or logic elements.</p><p id="p-0361" num="0357">The dedicated buffers <b>1350</b> and <b>1450</b> may be implemented in any computer-readable storage media such as RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage, or other magnetic storage devices, flash memory, or any other medium that can be used to store desired data structures and that can be accessed by a computer. The dedicated buffers may be provided as a separate memory devices and/or as part of processing circuitry such as a CPU, a GPU or a DSP. The dedicated buffers may be formed by any of a variety of memory devices, such as dynamic random access memory (DRAM), including synchronous DRAM (SDRAM), magnetoresistive RAM (MRAM), resistive RAM (RRAM), or other types of memory devices.</p><p id="p-0362" num="0358"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a block diagram showing a content supply system <b>3100</b> for realizing a content distribution service. This content supply system <b>3100</b> includes a capture device <b>3102</b>, a terminal device <b>3106</b>, and optionally includes a display <b>3126</b>. The capture device <b>3102</b> communicates with the terminal device <b>3106</b> over communication link <b>3104</b>. The communication link may include the communication channel <b>13</b> described above. The communication link <b>3104</b> includes but is not limited to WIFI, Ethernet, Cable, wireless (3G/4G/5G), USB, or any kind of combination thereof, or the like.</p><p id="p-0363" num="0359">The capture device <b>3102</b> generates data, and may encode the data by the encoding method as shown in the above embodiments. Alternatively, the capture device <b>3102</b> may distribute the data to a streaming server (not shown in the Figures), and the server encodes the data and transmits the encoded data to the terminal device <b>3106</b>. The capture device <b>3102</b> includes but is not limited to camera, smart phone or Pad, computer or laptop, video conference system, PDA, vehicle mounted device, or a combination of any of them, or the like. For example, the capture device <b>3102</b> may include the source device <b>12</b> as described above. When the data includes video, the video encoder <b>20</b> included in the capture device <b>3102</b> may actually perform video encoding processing. When the data includes audio (i.e., voice), an audio encoder included in the capture device <b>3102</b> may actually perform audio encoding processing. For some practical scenarios, the capture device <b>3102</b> distributes the encoded video and audio data by multiplexing them together. For other practical scenarios, for example in the video conference system, the encoded audio data and the encoded video data are not multiplexed. Capture device <b>3102</b> may distribute the encoded audio data and the encoded video data to the terminal device <b>3106</b> separately.</p><p id="p-0364" num="0360">In the content supply system <b>3100</b>, the terminal device <b>3106</b> receives and reproduces the encoded data. The terminal device <b>3106</b> may be a device with data receiving and recovering capability, such as a smart phone or Pad <b>3108</b>, a computer or laptop <b>3110</b>, a network video recorder (NVR)/digital video recorder (DVR) <b>3112</b>, a TV <b>3114</b>, a set top box (STB) <b>3116</b>, a video conference system <b>3118</b>, a video surveillance system <b>3120</b>, a personal digital assistant (PDA) <b>3122</b>, a vehicle mounted device <b>3124</b>, or a combination of any of them, or the like capable of decoding the above-mentioned encoded data. For example, the terminal device <b>3106</b> may include the destination device <b>14</b> as described above. When the encoded data includes video, the video decoder <b>30</b> included in the terminal device is prioritized to perform video decoding. When the encoded data includes audio, an audio decoder included in the terminal device is prioritized to perform audio decoding processing.</p><p id="p-0365" num="0361">For a terminal device with its display, for example, a smart phone or Pad <b>3108</b>, a computer or laptop <b>3110</b>, a network video recorder (NVR)/digital video recorder (DVR) <b>3112</b>, a TV <b>3114</b>, a personal digital assistant (PDA) <b>3122</b>, or a vehicle mounted device <b>3124</b>, the terminal device can feed the decoded data to its display. For a terminal device equipped with no display, for example, an STB <b>3116</b>, a video conference system <b>3118</b>, or a video surveillance system <b>3120</b>, an external display <b>3126</b> may be contacted therein to receive and show the decoded data.</p><p id="p-0366" num="0362">When each device in this system performs encoding or decoding, the picture encoding device or the picture decoding device, as shown in the above-mentioned embodiments, can be used.</p><p id="p-0367" num="0363"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a diagram showing a structure of an example of the terminal device <b>3106</b>. After the terminal device <b>3106</b> receives a stream from the capture device <b>3102</b>, the protocol proceeding unit <b>3202</b> analyzes the transmission protocol of the stream. The protocol includes but is not limited to Real Time Streaming Protocol (RTSP), Hyper Text Transfer Protocol (HTTP), HTTP Live streaming protocol (HLS), MPEG-DASH, Real-time Transport protocol (RTP), Real Time Messaging Protocol (RTMP), or any kind of combination thereof, or the like.</p><p id="p-0368" num="0364">After the protocol proceeding unit <b>3202</b> processes the stream, a stream file is generated. The file is outputted to a demultiplexing unit <b>3204</b>. The demultiplexing unit <b>3204</b> can separate the multiplexed data into the encoded audio data and the encoded video data. As described above, for some practical scenarios, for example in the video conference system, the encoded audio data and the encoded video data are not multiplexed. In this situation, the encoded data is transmitted to video decoder <b>3206</b> and audio decoder <b>3208</b> without passing through the demultiplexing unit <b>3204</b>.</p><p id="p-0369" num="0365">Via the demultiplexing processing, a video elementary stream (ES), an audio ES, and optionally a subtitle are generated. The video decoder <b>3206</b>, which includes the video decoder <b>30</b> as explained in the above mentioned embodiments, decodes the video ES by the decoding method as shown in the above-mentioned embodiments to generate a video frame, and feeds this data to the synchronous unit <b>3212</b>. The audio decoder <b>3208</b>, decodes the audio ES to generate an audio frame, and feeds this data to the synchronous unit <b>3212</b>. Alternatively, the video frame may be stored in a buffer (not shown in <figref idref="DRAWINGS">FIG. <b>19</b></figref>) before feeding it to the synchronous unit <b>3212</b>. Similarly, the audio frame may be stored in a buffer (not shown in <figref idref="DRAWINGS">FIG. <b>19</b></figref>) before feeding it to the synchronous unit <b>3212</b>.</p><p id="p-0370" num="0366">The synchronous unit <b>3212</b> synchronizes the video frame and the audio frame, and supplies the video/audio to a video/audio display <b>3214</b>. For example, the synchronous unit <b>3212</b> synchronizes the presentation of the video and audio information. Information may code in the syntax using time stamps concerning the presentation of coded audio and visual data and time stamps concerning the delivery of the data stream itself.</p><p id="p-0371" num="0367">If subtitle is included in the stream, the subtitle decoder <b>3210</b> decodes the subtitle, and synchronizes it with the video frame and the audio frame, and supplies the video/audio/subtitle to a video/audio/subtitle display <b>3216</b>.</p><p id="p-0372" num="0368">Embodiments disclosed herein are not limited to the above-mentioned system, and either the picture encoding device or the picture decoding device in the above-mentioned embodiments can be incorporated into other system, for example, a car system.</p><p id="p-0373" num="0369">Mathematical Operators</p><p id="p-0374" num="0370">The mathematical operators used in this application are similar to those used in the C programming language. However, the results of integer division and arithmetic shift operations are defined more precisely, and additional operations are defined, such as exponentiation and real-valued division. Numbering and counting conventions generally begin from 0, i.e. &#x201c;the first&#x201d; is equivalent to the 0-th, &#x201c;the second&#x201d; is equivalent to the 1st, etc.</p><p id="p-0375" num="0371">Arithmetic Operators</p><p id="p-0376" num="0372">The following arithmetic operators are defined as follows:</p><p id="p-0377" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="28pt" align="center"/><colspec colname="2" colwidth="245pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>+</entry><entry>Addition</entry></row><row><entry>&#x2212;</entry><entry>Subtraction (as a two-argument operator) or negation (as a unary prefix operator)</entry></row><row><entry>*</entry><entry>Multiplication, including matrix multiplication</entry></row><row><entry>x<sup>y</sup></entry><entry>Exponentiation. Specifies x to the power of y. In other contexts, such notation is</entry></row><row><entry/><entry>used for superscripting not intended for interpretation as exponentiation.</entry></row><row><entry>/</entry><entry>Integer division with truncation of the result toward zero. For example, 7/4 and &#x2212;7/</entry></row><row><entry/><entry>&#x2212;4 are truncated to 1 and &#x2212;7/4 and 7/&#x2212;4 are truncated to &#x2212;1.</entry></row><row><entry>&#xf7;</entry><entry>Used to denote division in mathematical equations where no truncation or rounding</entry></row><row><entry/><entry>is intended.</entry></row><row><entry> </entry></row><row><entry><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mfrac>  <mi>x</mi>  <mi>y</mi> </mfrac></math></maths></entry><entry>Used to denote division in mathematical equations where no truncation or rounding is intended.</entry></row><row><entry> </entry></row><row><entry><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mrow>  <mover>   <munder>    <mo>&#x2211;</mo>    <mrow>     <mi>i</mi>     <mo>=</mo>     <mi>x</mi>    </mrow>   </munder>   <mi>y</mi>  </mover>  <mrow>   <mi>f</mi>   <mo>(</mo>   <mi>i</mi>   <mo>)</mo>  </mrow> </mrow></math></maths></entry><entry>The summation of f(i) with i taking all integer values from x up to and including y.</entry></row><row><entry> </entry></row><row><entry>x % y</entry><entry>Modulus. Remainder of x divided by y, defined only for integers x and y with</entry></row><row><entry/><entry>x &#x3e;= 0 and y &#x3e; 0.</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0378" num="0373">Logical Operators</p><p id="p-0379" num="0374">The following logical operators are defined as follows:<ul id="ul0013" list-style="none">    <li id="ul0013-0001" num="0000">    <ul id="ul0014" list-style="none">        <li id="ul0014-0001" num="0375">x &#x26;&#x26; y Boolean logical &#x201c;and&#x201d; of x and y</li>        <li id="ul0014-0002" num="0376">x&#x2225;y Boolean logical &#x201c;or&#x201d; of x and y</li>        <li id="ul0014-0003" num="0377">! Boolean logical &#x201c;not&#x201d;</li>        <li id="ul0014-0004" num="0378">x?y:z If x is TRUE or not equal to 0, evaluates to the value of y; otherwise, evaluates to the value of z.</li>    </ul>    </li></ul></p><p id="p-0380" num="0379">Relational Operators</p><p id="p-0381" num="0380">The following relational operators are defined as follows:<ul id="ul0015" list-style="none">    <li id="ul0015-0001" num="0000">    <ul id="ul0016" list-style="none">        <li id="ul0016-0001" num="0381">&#x3e; Greater than</li>        <li id="ul0016-0002" num="0382">&#x3e;= Greater than or equal to</li>        <li id="ul0016-0003" num="0383">&#x3c; Less than</li>        <li id="ul0016-0004" num="0384">&#x3c;= Less than or equal to</li>        <li id="ul0016-0005" num="0385">== Equal to</li>        <li id="ul0016-0006" num="0386">!= Not equal to</li>        <li id="ul0016-0007" num="0387"><img id="CUSTOM-CHARACTER-00008" he="2.46mm" wi="1.78mm" file="US20230007273A1-20230105-P00003.TIF" alt="custom-character" img-content="character" img-format="tif"/> defined as</li>    </ul>    </li></ul></p><p id="p-0382" num="0388">When a relational operator is applied to a syntax element or variable that has been assigned the value &#x201c;na&#x201d; (not applicable), the value &#x201c;na&#x201d; is treated as a distinct value for the syntax element or variable. The value &#x201c;na&#x201d; is considered not to be equal to any other value.</p><p id="p-0383" num="0389">Bit-Wise Operators</p><p id="p-0384" num="0390">The following bit-wise operators are defined as follows:<ul id="ul0017" list-style="none">    <li id="ul0017-0001" num="0000">    <ul id="ul0018" list-style="none">        <li id="ul0018-0001" num="0391">&#x26; Bit-wise &#x201c;and&#x201d;. When operating on integer arguments, operates on a two's complement representation of the integer value. When operating on a binary argument that contains fewer bits than another argument, the shorter argument is extended by adding more significant bits equal to 0.</li>        <li id="ul0018-0002" num="0392">| Bit-wise &#x201c;or&#x201d;. When operating on integer arguments, operates on a two's complement representation of the integer value. When operating on a binary argument that contains fewer bits than another argument, the shorter argument is extended by adding more significant bits equal to 0.</li>        <li id="ul0018-0003" num="0393">{circumflex over (&#x2003;)} A Bit-wise &#x201c;exclusive or&#x201d;. When operating on integer arguments, operates on a two's complement representation of the integer value. When operating on a binary argument that contains fewer bits than another argument, the shorter argument is extended by adding more significant bits equal to 0.</li>        <li id="ul0018-0004" num="0394">x&#x3e;&#x3e;y Arithmetic right shift of a two's complement integer representation of x by y binary digits. This function is defined only for non-negative integer values of y. Bits shifted into the most significant bits (MSBs) as a result of the right shift have a value equal to the MSB of x prior to the shift operation.</li>        <li id="ul0018-0005" num="0395">x&#x3c;&#x3c;y Arithmetic left shift of a two's complement integer representation of x by y binary digits. This function is defined only for non-negative integer values of y. Bits shifted into the least significant bits (LSBs) as a result of the left shift have a value equal to 0.</li>    </ul>    </li></ul></p><p id="p-0385" num="0396">Assignment Operators</p><p id="p-0386" num="0397">The following arithmetic operators are defined as follows:<ul id="ul0019" list-style="none">    <li id="ul0019-0001" num="0000">    <ul id="ul0020" list-style="none">        <li id="ul0020-0001" num="0398">= Assignment operator</li>        <li id="ul0020-0002" num="0399">++ Increment, i.e., x++ is equivalent to x=x+1; when used in an array index, evaluates to the value of the variable prior to the increment operation.</li>        <li id="ul0020-0003" num="0400">&#x2014;&#x2014; Decrement, i.e., x&#x2014;&#x2014; is equivalent to x=x&#x2212;1; when used in an array index, evaluates to the value of the variable prior to the decrement operation.</li>        <li id="ul0020-0004" num="0401">+= Increment by amount specified, i.e., x+=3 is equivalent to x=x+3, and x+=(&#x2212;3) is equivalent to x=x+(&#x2212;3).</li>        <li id="ul0020-0005" num="0402">&#x2212;= Decrement by amount specified, i.e., x&#x2212;=3 is equivalent to x=x&#x2212;3, and x&#x2212;=(&#x2212;3) is equivalent to x=x&#x2212;(&#x2212;3).</li>    </ul>    </li></ul></p><p id="p-0387" num="0403">Range Notation</p><p id="p-0388" num="0404">The following notation is used to specify a range of values:<ul id="ul0021" list-style="none">    <li id="ul0021-0001" num="0000">    <ul id="ul0022" list-style="none">        <li id="ul0022-0001" num="0405">x=y . . . z x takes on integer values starting from y to z, inclusive, with x, y, and z being integer numbers and z being greater than y.</li>    </ul>    </li></ul></p><p id="p-0389" num="0406">Mathematical Functions</p><p id="p-0390" num="0407">The following mathematical functions are defined:</p><p id="p-0391" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mrow>  <mrow>   <mi>Abs</mi>   <mo>(</mo>   <mi>s</mi>   <mo>)</mo>  </mrow>  <mo>=</mo>  <mrow>   <mo>{</mo>   <mtable>    <mtr>     <mtd>      <mrow>       <mi>x</mi>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mi>x</mi>       <mo>&#x3e;=</mo>       <mn>0</mn>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mrow>        <mo>-</mo>        <mi>x</mi>       </mrow>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mi>x</mi>       <mo>&#x3c;</mo>       <mn>0</mn>      </mrow>     </mtd>    </mtr>   </mtable>  </mrow> </mrow></math></maths><ul id="ul0023" list-style="none">    <li id="ul0023-0001" num="0000">    <ul id="ul0024" list-style="none">        <li id="ul0024-0001" num="0408">Asin(x) the trigonometric inverse sine function, operating on an argument x that is in the range of &#x2212;1.0 to 1.0, inclusive, with an output value in the range of &#x2212;&#x3c0;&#xf7;2 to &#x3c0;&#xf7;2, inclusive, in units of radians.</li>        <li id="ul0024-0002" num="0409">Atan(x) the trigonometric inverse tangent function, operating on an argument x, with an output value in the range of &#x2212;&#x3c0;&#xf7;2 to &#x3c0;&#xf7;2, inclusive, in units of radians.</li>    </ul>    </li></ul></p><p id="p-0392" num="0000"><maths id="MATH-US-00005" num="00005"><math overflow="scroll"> <mrow>  <mrow>   <mi>Atan</mi>   <mo>&#x2062;</mo>   <mn>2</mn>   <mo>&#x2062;</mo>   <mrow>    <mo>(</mo>    <mrow>     <mi>y</mi>     <mo>,</mo>     <mi>x</mi>    </mrow>    <mo>)</mo>   </mrow>  </mrow>  <mo>=</mo>  <mrow>   <mo>{</mo>   <mtable>    <mtr>     <mtd>      <mrow>       <mrow>        <mi>A</mi>        <mo>&#x2062;</mo>        <mrow>         <mi>tan</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <mfrac>          <mi>y</mi>          <mi>x</mi>         </mfrac>         <mo>)</mo>        </mrow>       </mrow>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mi>x</mi>       <mo>&#x3e;</mo>       <mn>0</mn>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mrow>        <mrow>         <mi>A</mi>         <mo>&#x2062;</mo>         <mrow>          <mi>tan</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <mfrac>           <mi>y</mi>           <mi>x</mi>          </mfrac>          <mo>)</mo>         </mrow>        </mrow>        <mo>+</mo>        <mi>&#x3c0;</mi>       </mrow>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mrow>        <mi>x</mi>        <mo>&#x3c;</mo>        <mn>0</mn>       </mrow>       <mtext>   </mtext>       <mo>&#x26;&#x26;</mo>       <mtext>   </mtext>       <mrow>        <mi>y</mi>        <mo>&#x3e;=</mo>        <mn>0</mn>       </mrow>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mrow>        <mrow>         <mi>A</mi>         <mo>&#x2062;</mo>         <mrow>          <mi>tan</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <mfrac>           <mi>y</mi>           <mi>x</mi>          </mfrac>          <mo>)</mo>         </mrow>        </mrow>        <mo>-</mo>        <mi>&#x3c0;</mi>       </mrow>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mrow>        <mi>x</mi>        <mo>&#x3c;</mo>        <mn>0</mn>       </mrow>       <mtext>   </mtext>       <mo>&#x26;&#x26;</mo>       <mtext>   </mtext>       <mrow>        <mi>y</mi>        <mo>&#x3c;</mo>        <mn>0</mn>       </mrow>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mrow>        <mo>+</mo>        <mfrac>         <mi>&#x3c0;</mi>         <mn>2</mn>        </mfrac>       </mrow>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mrow>        <mi>x</mi>        <mtext> </mtext>        <mo>==</mo>        <mtext>  </mtext>        <mn>0</mn>       </mrow>       <mtext> </mtext>       <mo>&#x26;&#x26;</mo>       <mtext>   </mtext>       <mrow>        <mi>y</mi>        <mtext> </mtext>        <mo>&#x3e;=</mo>        <mn>0</mn>       </mrow>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mrow>        <mo>-</mo>        <mfrac>         <mi>&#x3c0;</mi>         <mn>2</mn>        </mfrac>       </mrow>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mi>otherwise</mi>     </mtd>    </mtr>   </mtable>  </mrow> </mrow></math></maths><ul id="ul0025" list-style="none">    <li id="ul0025-0001" num="0000">    <ul id="ul0026" list-style="none">        <li id="ul0026-0001" num="0410">Ceil(x) the smallest integer greater than or equal to x.</li>        <li id="ul0026-0002" num="0411">Clip1<sub>Y</sub>(x)=Clip3(0, (1&#x3c;&#x3c;BitDepth<sub>Y</sub>)&#x2212;1, x)</li>        <li id="ul0026-0003" num="0412">Clip1<sub>C</sub>(x)=Clip3(0, (1&#x3c;&#x3c;BitDepth<sub>C</sub>)&#x2212;1, x)</li>    </ul>    </li></ul></p><p id="p-0393" num="0000"><maths id="MATH-US-00006" num="00006"><math overflow="scroll"> <mrow>  <mrow>   <mi>Clip</mi>   <mo>&#x2062;</mo>   <mn>3</mn>   <mo>&#x2062;</mo>   <mrow>    <mo>(</mo>    <mrow>     <mi>x</mi>     <mo>,</mo>     <mi>y</mi>     <mo>,</mo>     <mi>z</mi>    </mrow>    <mo>)</mo>   </mrow>  </mrow>  <mo>=</mo>  <mrow>   <mo>{</mo>   <mtable>    <mtr>     <mtd>      <mrow>       <mi>x</mi>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mi>z</mi>       <mo>&#x3c;</mo>       <mi>x</mi>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mi>y</mi>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mi>z</mi>       <mo>&#x3e;</mo>       <mi>y</mi>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mi>z</mi>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mi>otherwise</mi>     </mtd>    </mtr>   </mtable>  </mrow> </mrow></math></maths><ul id="ul0027" list-style="none">    <li id="ul0027-0001" num="0000">    <ul id="ul0028" list-style="none">        <li id="ul0028-0001" num="0413">Cos(x) the trigonometric cosine function operating on an argument x in units of radians.</li>        <li id="ul0028-0002" num="0414">Floor(x) the largest integer less than or equal to x.</li>    </ul>    </li></ul></p><p id="p-0394" num="0000"><maths id="MATH-US-00007" num="00007"><math overflow="scroll"> <mrow>  <mrow>   <mi>GetCurrMsb</mi>   <mo>&#x2061;</mo>   <mo>(</mo>   <mrow>    <mi>b</mi>    <mo>,</mo>    <mi>c</mi>    <mo>,</mo>    <mi>d</mi>   </mrow>   <mo>)</mo>  </mrow>  <mo>=</mo>  <mrow>   <mo>{</mo>   <mtable>    <mtr>     <mtd>      <mrow>       <mrow>        <mi>c</mi>        <mo>+</mo>        <mi>d</mi>       </mrow>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mi>b</mi>       <mo>-</mo>       <mrow>        <mi>a</mi>        <mtext>&#x205f;</mtext>        <mo>&#x3e;=</mo>        <mi>d</mi>        <mo>/</mo>        <mn>2</mn>       </mrow>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mrow>        <mi>c</mi>        <mo>-</mo>        <mi>d</mi>       </mrow>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mrow>        <mi>a</mi>        <mo>-</mo>        <mi>b</mi>       </mrow>       <mtext>&#x205f;</mtext>       <mo>&#x3e;</mo>       <mrow>        <mi>d</mi>        <mo>/</mo>        <mn>2</mn>       </mrow>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mi>c</mi>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mi>otherwise</mi>     </mtd>    </mtr>   </mtable>  </mrow> </mrow></math></maths><ul id="ul0029" list-style="none">    <li id="ul0029-0001" num="0000">    <ul id="ul0030" list-style="none">        <li id="ul0030-0001" num="0415">Ln(x) the natural logarithm of x (the base-e logarithm, where e is the natural logarithm base constant 2.718 281 828 . . . ).</li>        <li id="ul0030-0002" num="0416">Log 2(x) the base-2 logarithm of x.</li>        <li id="ul0030-0003" num="0417">Log 10(x) the base-10 logarithm of x.</li>    </ul>    </li></ul></p><p id="p-0395" num="0000"><maths id="MATH-US-00008" num="00008"><math overflow="scroll"> <mrow>  <mrow>   <mi>Min</mi>   <mo>(</mo>   <mrow>    <mi>x</mi>    <mo>,</mo>    <mi>y</mi>   </mrow>   <mo>)</mo>  </mrow>  <mo>=</mo>  <mrow>   <mo>{</mo>   <mrow>    <mrow>     <mtable>      <mtr>       <mtd>        <mrow>         <mi>x</mi>         <mo>;</mo>        </mrow>       </mtd>       <mtd>        <mrow>         <mi>x</mi>         <mo>&#x3c;=</mo>         <mi>y</mi>        </mrow>       </mtd>      </mtr>      <mtr>       <mtd>        <mrow>         <mi>y</mi>         <mo>;</mo>        </mrow>       </mtd>       <mtd>        <mrow>         <mi>x</mi>         <mo>&#x3e;</mo>         <mi>y</mi>        </mrow>       </mtd>      </mtr>     </mtable>     <mo>&#x2062;</mo>     <mspace linebreak="newline"/>     <mrow>      <mi>Max</mi>      <mo>(</mo>      <mrow>       <mi>x</mi>       <mo>,</mo>       <mi>y</mi>      </mrow>      <mo>)</mo>     </mrow>    </mrow>    <mo>=</mo>    <mrow>     <mo>{</mo>     <mtable>      <mtr>       <mtd>        <mrow>         <mi>x</mi>         <mo>;</mo>        </mrow>       </mtd>       <mtd>        <mrow>         <mi>x</mi>         <mo>&#x3e;=</mo>         <mi>y</mi>        </mrow>       </mtd>      </mtr>      <mtr>       <mtd>        <mrow>         <mi>y</mi>         <mo>;</mo>        </mrow>       </mtd>       <mtd>        <mrow>         <mi>x</mi>         <mo>&#x3c;</mo>         <mi>y</mi>        </mrow>       </mtd>      </mtr>     </mtable>    </mrow>   </mrow>  </mrow> </mrow></math></maths><ul id="ul0031" list-style="none">    <li id="ul0031-0001" num="0000">    <ul id="ul0032" list-style="none">        <li id="ul0032-0001" num="0418">Round(x)=Sign(x)*Floor(Abs(x)+0.5)</li>    </ul>    </li></ul></p><p id="p-0396" num="0000"><maths id="MATH-US-00009" num="00009"><math overflow="scroll"> <mrow>  <mrow>   <mi>Sign</mi>   <mo>&#x2061;</mo>   <mo>(</mo>   <mi>x</mi>   <mo>)</mo>  </mrow>  <mo>=</mo>  <mrow>   <mo>{</mo>   <mtable>    <mtr>     <mtd>      <mrow>       <mn>1</mn>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mi>x</mi>       <mo>&#x3e;</mo>       <mn>0</mn>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mn>0</mn>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mi>x</mi>       <mo>==</mo>       <mn>0</mn>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mrow>        <mo>-</mo>        <mn>1</mn>       </mrow>       <mo>;</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mi>x</mi>       <mo>&#x3c;</mo>       <mn>0</mn>      </mrow>     </mtd>    </mtr>   </mtable>  </mrow> </mrow></math></maths><ul id="ul0033" list-style="none">    <li id="ul0033-0001" num="0000">    <ul id="ul0034" list-style="none">        <li id="ul0034-0001" num="0419">Sin(x) the trigonometric sine function operating on an argument x in units of radians</li>        <li id="ul0034-0002" num="0420">Sqrt(x)=&#x221a;{square root over (x)}</li>        <li id="ul0034-0003" num="0421">Swap(x, y)=(y, x)</li>        <li id="ul0034-0004" num="0422">Tan(x) the trigonometric tangent function operating on an argument x in units of radians</li>    </ul>    </li></ul></p><p id="p-0397" num="0423">Order of Operation Precedence</p><p id="p-0398" num="0424">When an order of precedence in an expression is not indicated explicitly by use of parentheses, the following rules apply:<ul id="ul0035" list-style="none">    <li id="ul0035-0001" num="0000">    <ul id="ul0036" list-style="none">        <li id="ul0036-0001" num="0425">Operations of a higher precedence are evaluated before any operation of a lower precedence.</li>        <li id="ul0036-0002" num="0426">Operations of the same precedence are evaluated sequentially from left to right.</li>    </ul>    </li></ul></p><p id="p-0399" num="0427">The table below specifies the precedence of operations from highest to lowest; a higher position in the table indicates a higher precedence.</p><p id="p-0400" num="0428">For those operators that are also used in the C programming language, the order of precedence used in this Specification is the same as used in the C programming language.</p><p id="p-0401" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Operation precedence from highest (at top of table) to lowest</entry></row><row><entry>(at bottom of table) operations (with operands x, y, and z)</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2033;x++&#x2033;, &#x2033;x&#x2212; &#x2212;&#x2033;</entry></row><row><entry>&#x2033;!x&#x2033;, &#x2033;&#x2212;x&#x2033; (as a unary prefix operator)</entry></row><row><entry>x<sup>y</sup></entry></row><row><entry> </entry></row><row><entry><maths id="MATH-US-00010" num="00010"><math overflow="scroll"> <mrow>  <mrow>   <msup>    <mpadded width="-0.230769em" lspace="0.230769em" depth="0ex" height="0ex">     <mo>&#x2033;</mo>    </mpadded>   </msup>   <mi>x</mi>   <mo>*</mo>   <msup>    <mi>y</mi>    <mo>&#x2033;</mo>   </msup>  </mrow>  <msup>   <mo>,</mo>   <mpadded width="-0.692308em" lspace="0.692308em" depth="0ex" height="0ex">    <mo>&#x2033;</mo>   </mpadded>  </msup>  <mrow>   <mi>x</mi>   <mo>/</mo>   <msup>    <mi>y</mi>    <mo>&#x2033;</mo>   </msup>  </mrow>  <msup>   <mo>,</mo>   <mpadded width="-0.692308em" lspace="0.692308em" depth="0ex" height="0ex">    <mo>&#x2033;</mo>   </mpadded>  </msup>  <mrow>   <mi>x</mi>   <mo>&#xf7;</mo>   <msup>    <mi>y</mi>    <mo>&#x2033;</mo>   </msup>  </mrow>  <msup>   <mo>,</mo>   <mpadded width="-0.538462em" lspace="0.538462em" depth="0ex" height="0ex">    <mo>&#x2033;</mo>   </mpadded>  </msup>  <msup>   <mfrac>    <mi>x</mi>    <mi>y</mi>   </mfrac>   <mpadded width="0em" lspace="0em" depth="-1.28571ex" height="1.28571ex">    <mo>&#x2033;</mo>   </mpadded>  </msup>  <msup>   <mo>,</mo>   <mpadded width="-0.692308em" lspace="0.692308em" depth="0ex" height="0ex">    <mo>&#x2033;</mo>   </mpadded>  </msup>  <mrow>   <mi>x</mi>   <mo>&#x2062;</mo>   <mrow>    <mtext> </mtext>    <mtext>  </mtext>   </mrow>   <mo>&#x2062;</mo>   <mi>%</mi>   <mo>&#x2062;</mo>   <mtext>   </mtext>   <msup>    <mi>y</mi>    <mo>&#x2033;</mo>   </msup>  </mrow> </mrow></math></maths></entry></row><row><entry> </entry></row><row><entry>&#x2033;x + y&#x2033;, &#x2033;x &#x2212; y&#x2033; (as a two-argument operator),</entry></row><row><entry> </entry></row><row><entry><maths id="MATH-US-00011" num="00011"><math overflow="scroll"> <mrow>  <msup>   <mo>&#x2033;</mo>  </msup>  <mrow>   <munderover>    <mo>&#x2211;</mo>    <mrow>     <mi>i</mi>     <mo>=</mo>     <mi>x</mi>    </mrow>    <mi>y</mi>   </munderover>   <msup>    <mrow>     <mi>f</mi>     <mo>(</mo>     <mi>i</mi>     <mo>)</mo>    </mrow>    <mo>&#x2033;</mo>   </msup>  </mrow> </mrow></math></maths></entry></row><row><entry> </entry></row><row><entry>&#x2033;x &#x3c;&#x3c; y&#x2033;, &#x2033;x &#x3e;&#x3e; y&#x2033;</entry></row><row><entry>&#x2033;x &#x3c; y&#x2033;, &#x2033;x &#x3c;= y&#x2033;, &#x2033;x &#x3e; y&#x2033;, &#x2033;x &#x3e;= y&#x2033;</entry></row><row><entry>&#x2033;x = = y&#x2033;, &#x2033;x != y&#x2033;</entry></row><row><entry>&#x2033;x &#x26; y&#x2033;</entry></row><row><entry>&#x2033;x | y&#x2033;</entry></row><row><entry>&#x2033;x &#x26;&#x26; y&#x2033;</entry></row><row><entry>&#x2033;x | | y&#x2033;</entry></row><row><entry>&#x2033;x ? y : z&#x2033;</entry></row><row><entry>&#x2033;x . . . y&#x2033;</entry></row><row><entry>&#x2033;x = y&#x2033;, &#x2033;x += y&#x2033;, &#x2033;x &#x2212;= y&#x2033;</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0402" num="0429">Text Description of Logical Operations</p><p id="p-0403" num="0430">In the text, a statement of logical operations as would be described mathematically in the following form:</p><p id="p-0404" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>if( condition 0 )</entry></row><row><entry>&#x2003;statement 0</entry></row><row><entry>else if( condition 1 )</entry></row><row><entry>&#x2003;statement 1</entry></row><row><entry>...</entry></row><row><entry>else /* informative remark on remaining condition */</entry></row><row><entry>&#x2003;statement n</entry></row><row><entry>may be described in the following manner:</entry></row><row><entry>... as follows /... the following applies:</entry></row><row><entry>- If condition 0, statement 0</entry></row><row><entry>- Otherwise, if condition 1, statement 1</entry></row><row><entry>- ...</entry></row><row><entry>- Otherwise (informative remark on remaining condition), statement n</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0405" num="0431">Each &#x201c;If . . . Otherwise, if . . . Otherwise, . . . &#x201d; statement in the text is introduced with &#x201c; . . . as follows&#x201d; or &#x201c; . . . the following applies&#x201d; immediately followed by &#x201c;If . . . &#x201d;. The last condition of the &#x201c;If . . . Otherwise, if . . . Otherwise, . . . &#x201d; may always be an &#x201c;Otherwise, . . . &#x201d;. Interleaved &#x201c;If . . . Otherwise, if . . . Otherwise, . . . &#x201d; statements can be identified by matching &#x201c; . . . as follows&#x201d; or &#x201c; . . . the following applies&#x201d; with the ending &#x201c;Otherwise, . . . &#x201d;.</p><p id="p-0406" num="0432">In the text, a statement of logical operations as would be described mathematically in the following form:</p><p id="p-0407" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="21pt" align="left"/><colspec colname="2" colwidth="175pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry/><entry>if( condition 0a &#x26;&#x26; condition 0b )</entry></row><row><entry/><entry/><entry>&#x2003;statement 0</entry></row><row><entry/><entry/><entry>else if( condition 1a &#x2225; condition 1b)</entry></row><row><entry/><entry/><entry>&#x2003;statement 1</entry></row><row><entry/><entry/><entry>...</entry></row><row><entry/><entry/><entry>else</entry></row><row><entry/><entry/><entry>&#x2003;statement n</entry></row><row><entry/><entry/><entry>may be described in the following manner:</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;... as follows /... the following applies:</entry></row><row><entry/><entry/><entry>- If all of the following conditions are true, statement 0:</entry></row><row><entry/><entry/><entry>- condition 0a</entry></row><row><entry/><entry/><entry>- condition 0b</entry></row><row><entry/><entry/><entry>- Otherwise, if one or more of the following </entry></row><row><entry/><entry/><entry>conditions are true, statement 1:</entry></row><row><entry/><entry/><entry>- condition 1a</entry></row><row><entry/><entry/><entry>- condition 1b</entry></row><row><entry/><entry/><entry>- ...</entry></row><row><entry/><entry/><entry>- Otherwise, statement n</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0408" num="0433">In the text, a statement of logical operations as would be described mathematically in the following form:</p><p id="p-0409" num="0434">if(condition 0)<ul id="ul0037" list-style="none">    <li id="ul0037-0001" num="0000">    <ul id="ul0038" list-style="none">        <li id="ul0038-0001" num="0435">statement 0</li>    </ul>    </li></ul></p><p id="p-0410" num="0436">if(condition 1)<ul id="ul0039" list-style="none">    <li id="ul0039-0001" num="0000">    <ul id="ul0040" list-style="none">        <li id="ul0040-0001" num="0437">statement 1</li>    </ul>    </li></ul></p><p id="p-0411" num="0438">may be described in the following manner:</p><p id="p-0412" num="0439">When condition 0, statement 0</p><p id="p-0413" num="0440">When condition 1, statement 1</p><p id="p-0414" num="0441">Although embodiments of the disclosure have been primarily described based on video coding, it should be noted that embodiments of the coding system <b>10</b>, encoder <b>20</b> and decoder <b>30</b> (and correspondingly the system <b>10</b>) and the other embodiments described herein may also be configured for still picture processing or coding, i.e. the processing or coding of an individual picture independent of any preceding or consecutive picture as in video coding. In general only inter-prediction units <b>244</b> (encoder) and <b>344</b> (decoder) may not be available in case the picture processing coding is limited to a single picture <b>17</b>. All other functionalities (also referred to as tools or technologies) of the video encoder <b>20</b> and the video decoder <b>30</b> may equally be used for still picture processing, e.g. residual calculation <b>204</b>/<b>304</b>, transform <b>206</b>, quantization <b>208</b>, inverse quantization <b>210</b>/<b>310</b>, (inverse) transform <b>212</b>/<b>312</b>, partitioning <b>262</b>, intra-prediction <b>254</b>/<b>354</b>, and/or loop filtering <b>220</b>, <b>320</b>, and entropy coding <b>270</b> and entropy decoding <b>304</b>.</p><p id="p-0415" num="0442">Embodiments, e.g. of the encoder <b>20</b> and the decoder <b>30</b>, and functions described herein, e.g. with reference to the encoder <b>20</b> and the decoder <b>30</b>, may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the functions may be stored on a computer-readable medium or transmitted over communication media as one or more instructions or code and executed by a hardware-based processing unit. Computer-readable media may include computer-readable storage media, which correspond to tangible media such as data storage media, or communication media including any medium that facilitates transfer of a computer program from one place to another, e.g., according to a communication protocol. In this manner, computer-readable media generally may correspond to (1) tangible computer-readable storage media which are non-transitory or (2) a communication medium such as a signal or carrier wave. Data storage media may be any available media that can be accessed by one or more computers or one or more processors to retrieve instructions, code and/or data structures for implementation of the techniques described in this disclosure. A computer program product may include a computer-readable medium.</p><p id="p-0416" num="0443">By way of example, and not limiting, such computer-readable storage media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage, or other magnetic storage devices, flash memory, or any other medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also, any connection is properly termed a computer-readable medium. For example, if instructions are transmitted from a website, server, or other remote source using a coaxial cable, fiber optic cable, twisted pair, digital subscriber line (DSL), or wireless technologies such as infrared, radio, and microwave, then the coaxial cable, fiber optic cable, twisted pair, DSL, or wireless technologies such as infrared, radio, and microwave are included in the definition of medium. It should be understood, however, that computer-readable storage media and data storage media do not include connections, carrier waves, signals, or other transitory media, but are instead directed to non-transitory, tangible storage media. Disk and disc, as used herein, include compact disc (CD), laser disc, optical disc, digital versatile disc (DVD), floppy disk and Blu-ray disc, where disks usually reproduce data magnetically, while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer-readable media.</p><p id="p-0417" num="0444">Instructions may be executed by one or more processors, such as one or more digital signal processors (DSPs), general purpose microprocessors, application specific integrated circuits (ASICs), field programmable logic arrays (FPGAs), or other equivalent integrated or discrete logic circuitry. Accordingly, the term &#x201c;processor,&#x201d; as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition, in some aspects, the functionality described herein may be provided within dedicated hardware and/or software modules configured for encoding and decoding, or incorporated in a combined codec. Also, the techniques could be fully implemented in one or more circuits or logic elements.</p><p id="p-0418" num="0445">The techniques of this disclosure may be implemented in a wide variety of devices or apparatuses, including a wireless handset, an integrated circuit (IC) or a set of ICs (e.g., a chip set). Various components, modules, or units are described in this disclosure to emphasize functional aspects of devices configured to perform the disclosed techniques, but do not necessarily require realization by different hardware units. Rather, as described above, various units may be combined in a codec hardware unit or provided by a collection of interoperative hardware units, including one or more processors as described above, in conjunction with suitable software and/or firmware.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230007273A1-20230105-M00001.NB"><img id="EMI-M00001" he="8.81mm" wi="76.20mm" file="US20230007273A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230007273A1-20230105-M00002.NB"><img id="EMI-M00002" he="5.25mm" wi="2.12mm" file="US20230007273A1-20230105-M00002.TIF" alt="embedded image " img-content="table" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230007273A1-20230105-M00003.NB"><img id="EMI-M00003" he="7.79mm" wi="6.69mm" file="US20230007273A1-20230105-M00003.TIF" alt="embedded image " img-content="table" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004" nb-file="US20230007273A1-20230105-M00004.NB"><img id="EMI-M00004" he="6.35mm" wi="76.20mm" file="US20230007273A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00005" nb-file="US20230007273A1-20230105-M00005.NB"><img id="EMI-M00005" he="27.52mm" wi="76.20mm" file="US20230007273A1-20230105-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00006" nb-file="US20230007273A1-20230105-M00006.NB"><img id="EMI-M00006" he="8.81mm" wi="76.20mm" file="US20230007273A1-20230105-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00007" nb-file="US20230007273A1-20230105-M00007.NB"><img id="EMI-M00007" he="9.91mm" wi="76.20mm" file="US20230007273A1-20230105-M00007.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00008" nb-file="US20230007273A1-20230105-M00008.NB"><img id="EMI-M00008" he="13.72mm" wi="76.20mm" file="US20230007273A1-20230105-M00008.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00009" nb-file="US20230007273A1-20230105-M00009.NB"><img id="EMI-M00009" he="9.48mm" wi="76.20mm" file="US20230007273A1-20230105-M00009.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00010" nb-file="US20230007273A1-20230105-M00010.NB"><img id="EMI-M00010" he="5.25mm" wi="38.10mm" file="US20230007273A1-20230105-M00010.TIF" alt="embedded image " img-content="table" img-format="tif"/></us-math><us-math idrefs="MATH-US-00011" nb-file="US20230007273A1-20230105-M00011.NB"><img id="EMI-M00011" he="7.79mm" wi="9.14mm" file="US20230007273A1-20230105-M00011.TIF" alt="embedded image " img-content="table" img-format="tif"/></us-math><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of video coding, implemented by an encoding device, comprising:<claim-text>initializing a dedicated buffer for intra block copy (IBC) referencing when a current coding tree unit (CTU) to be encoded is the first CTU of a CTU row;</claim-text><claim-text>determining that a current block in the current CTU is predicted using an IBC mode;</claim-text><claim-text>when the current block is predicted using the IBC mode, obtaining an IBC block vector for the current block; and</claim-text><claim-text>generating predicted sample values for the current block based on reference samples obtained from the dedicated buffer and the IBC block vector for the current block.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein initializing the dedicated buffer comprises initializing the reference samples in the dedicated buffer to a default value.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the default value is &#x2212;1.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. A method of video coding, implemented by an encoding device, comprising:<claim-text>initializing a dedicated buffer for an area of a coding tree unit (CTU) when a current coding block to be encoded is a first coding block in the area of the CTU;</claim-text><claim-text>determining that the current coding block in a current CTU is predicted using an intra block copy (IBC) mode;</claim-text><claim-text>when the current coding block in the current CTU is predicted using the IBC mode, obtaining an IBC block vector for the current coding block; and</claim-text><claim-text>generating predicted sample values for the current coding block based on reference samples from the dedicated buffer and the IBC block vector for the current coding block.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the area of the CTU is a fixed size area.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the area of the CTU is a virtual pipeline processing unit (VPDU).</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein a size of the area is 64&#xd7;64.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein initializing the dedicated buffer comprises initializing the reference samples in the dedicated buffer to a default value.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the default value is &#x2212;1.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A method of video coding, implemented by an encoding device, comprising:<claim-text>initializing a dedicated buffer for intra block copy (IBC) referencing, when a current coding tree unit (CTU) to be encoded is a first CTU or when a current coding block is a first coding block in the current CTU;</claim-text><claim-text>determining that the current coding block in the current CTU is predicted using an IBC mode;</claim-text><claim-text>when the current coding block is predicted using the IBC mode, obtaining an IBC block vector for the current coding block; and</claim-text><claim-text>generating predicted sample values for the current coding block based on reference samples from the dedicated buffer and the IBC block vector for the current coding block.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein initializing the dedicated buffer comprises initializing the reference samples in the dedicated buffer to a default value.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the default value is &#x2212;1.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A non-transitory computer-readable media storing computer instructions that configure at least one processor, upon execution of the instructions, to perform the following steps:<claim-text>initializing a dedicated buffer for intra block copy (IBC) referencing when a current coding tree unit (CTU) is a first CTU of a CTU row;</claim-text><claim-text>determining that a current block in the current CTU is predicted using an IBC mode;</claim-text><claim-text>when the current block is predicted using the IBC mode, obtaining an IBC block vector for the current block; and</claim-text><claim-text>generating predicted sample values for the current block based on reference samples from the dedicated buffer and the IBC block vector for the current block.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-transitory computer-readable media of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein initializing the dedicated buffer comprises initializing the reference samples in the dedicated buffer to a default value.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The non-transitory computer-readable media of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the default value is &#x2212;1.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A video encoder, comprising:<claim-text>a memory storing instructions; and</claim-text><claim-text>at least one processor in communication with the memory, the at least one processor configured, upon execution of the instructions, to perform the following steps:</claim-text><claim-text>initializing a dedicated buffer for intra block copy (IBC) referencing, when a current coding tree unit (CTU) is a first CTU of a CTU row;</claim-text><claim-text>determining that a current block in the current CTU is predicted using an IBC mode;</claim-text><claim-text>when the current block is predicted using the IBC mode, obtaining an IBC block vector for the current block; and</claim-text><claim-text>generating predicted sample values for the current block based on reference samples from the dedicated buffer and the IBC block vector for the current block.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The encoder of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein initializing the dedicated buffer comprises initializing the reference samples in the dedicated buffer to a default value.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The encoder of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the default value is &#x2212;1.</claim-text></claim></claims></us-patent-application>