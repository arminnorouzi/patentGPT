<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007291A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007291</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17778557</doc-number><date>20201130</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>46</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>70</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>187</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>46</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>70</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>187</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEMS AND METHODS FOR SIGNALING TEMPORAL SUBLAYER INFORMATION IN VIDEO CODING</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>62944547</doc-number><date>20191206</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>SHARP KABUSHIKI KAISHA</orgname><address><city>Sakai City, Osaka</city><country>JP</country></address></addressbook><residence><country>JP</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SAMUELSSON</last-name><first-name>Jonatan</first-name><address><city>Vancouver</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>DESHPANDE</last-name><first-name>SACHIN G.</first-name><address><city>Vancouver</city><state>WA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/JP2020/044508</doc-number><date>20201130</date></document-id><us-371c12-date><date>20220520</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">This disclosure relates to video coding and more particularly to techniques for signaling temporal sublayer information for coded video. According to an aspect of an invention, a flag indicating whether a syntax element specifying a maximum number of temporal sublayers that are present in each coded layer video sequence referring to a sequence parameter set is present in the sequence parameter set is signaled; and the syntax element specifying a maximum number of temporal sublayers is conditionally signaled based on the value of the flag.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="122.17mm" wi="158.75mm" file="US20230007291A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="222.76mm" wi="163.91mm" orientation="landscape" file="US20230007291A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="232.66mm" wi="162.05mm" orientation="landscape" file="US20230007291A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="244.26mm" wi="162.81mm" orientation="landscape" file="US20230007291A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="246.13mm" wi="165.02mm" orientation="landscape" file="US20230007291A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="247.90mm" wi="165.27mm" orientation="landscape" file="US20230007291A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="239.78mm" wi="161.63mm" orientation="landscape" file="US20230007291A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="248.84mm" wi="161.63mm" file="US20230007291A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="242.82mm" wi="160.95mm" orientation="landscape" file="US20230007291A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="244.01mm" wi="164.51mm" orientation="landscape" file="US20230007291A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="243.92mm" wi="160.27mm" orientation="landscape" file="US20230007291A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">This disclosure relates to video coding and more particularly to techniques for signaling temporal sublayer information for coded video.</p><heading id="h-0002" level="1">BACKGROUND ART</heading><p id="p-0003" num="0002">Digital video capabilities can be incorporated into a wide range of devices, including digital televisions, laptop or desktop computers, tablet computers, digital recording devices, digital media players, video gaming devices, cellular telephones, including so-called smartphones, medical imaging devices, and the like. Digital video may be coded according to a video coding standard. Video coding standards define the format of a compliant bitstream encapsulating coded video data. A compliant bitstream is a data structure that may be received and decoded by a video decoding device to generate reconstructed video data. Video coding standards may incorporate video compression techniques. Examples of video coding standards include ISO/IEC MPEG-4 Visual and ITU-T H.264 (also known as ISO/IEC MPEG-4 AVC) and High-Efficiency Video Coding (HEVC). HEVC is described in High Efficiency Video Coding (HEVC), Rec. ITU-T H.265, December 2016, which is incorporated by reference, and referred to herein as ITU-T H.265. Extensions and improvements for ITU-T H.265 are currently being considered for the development of next generation video coding standards. For example, the ITU-T Video Coding Experts Group (VCEG) and ISO/IEC (Moving Picture Experts Group (MPEG) (collectively referred to as the Joint Video Exploration Team (JVET)) are working to standardized video coding technology with a compression capability that significantly exceeds that of the current HEVC standard. The Joint Exploration Model 7 (JEM 7), Algorithm Description of Joint Exploration Test Model 7 (JEM 7), ISO/IEC JTC1/SC29/WG11 Document: JVET-G1001, July 2017, Torino, IT, which is incorporated by reference herein, describes the coding features that were under coordinated test model study by the JVET as potentially enhancing video coding technology beyond the capabilities of ITU-T H.265. It should be noted that the coding features of JEM 7 are implemented in JEM reference software. As used herein, the term JEM may collectively refer to algorithms included in JEM 7 and implementations of JEM reference software. Further, in response to a &#x201c;Joint Call for Proposals on Video Compression with Capabilities beyond HEVC,&#x201d; jointly issued by VCEG and MPEG, multiple descriptions of video coding tools were proposed by various groups at the 10th Meeting of ISO/IEC JTC1/SC29/WG11 16-20 Apr. 2018, San Diego, Calif. From the multiple descriptions of video coding tools, a resulting initial draft text of a video coding specification is described in &#x201c;Versatile Video Coding (Draft 1),&#x201d; 10th Meeting of ISO/IEC JTC1/SC29/WG11 16-20 Apr. 2018, San Diego, Calif., document JVET-J1001-v2, which is incorporated by reference herein, and referred to as JVET-J1001. The current development of a next generation video coding standard by the VCEG and MPEG is referred to as the Versatile Video Coding (VVC) project. &#x201c;Versatile Video Coding (Draft 7),&#x201d; 16th Meeting of ISO/IEC JTC1/SC29/WG11 1-11 Oct. 2019, Geneva, CH, document JVET-P2001-vE, which is incorporated by reference herein, and referred to as JVET-P2001, represents the current iteration of the draft text of a video coding specification corresponding to the VVC project.</p><p id="p-0004" num="0003">Video compression techniques enable data requirements for storing and transmitting video data to be reduced. Video compression techniques may reduce data requirements by exploiting the inherent redundancies in a video sequence. Video compression techniques may sub-divide a video sequence into successively smaller portions (i.e., groups of pictures within a video sequence, a picture within a group of pictures, regions within a picture, sub-regions within regions, etc.). Intra prediction coding techniques (e.g., spatial prediction techniques within a picture) and inter prediction techniques (i.e., inter-picture techniques (temporal)) may be used to generate difference values between a unit of video data to be coded and a reference unit of video data. The difference values may be referred to as residual data. Residual data may be coded as quantized transform coefficients. Syntax elements may relate residual data and a reference coding unit (e.g., intra-prediction mode indices, and motion information). Residual data and syntax elements may be entropy coded. Entropy encoded residual data and syntax elements may be included in data structures forming a compliant bitstream.</p><heading id="h-0003" level="1">SUMMARY OF INVENTION</heading><p id="p-0005" num="0004">In one example, a method of signaling a temporal sublayer information for video data comprises signaling a flag indicating whether a syntax element specifying a maximum number of temporal sublayers that are present in each coded layer video sequence referring to a sequence parameter set is present in the sequence parameter set and conditionally signaling the syntax element specifying a maximum number of temporal sublayers based on the value of the flag.</p><p id="p-0006" num="0005">In one example, a method of decoding video data comprises parsing a flag indicating whether a syntax element specifying a maximum number of temporal sublayers that are present in each coded layer video sequence referring to a sequence parameter set is present in the sequence parameter set and conditionally parsing the syntax element specifying a maximum number of temporal sublayers based on the value of the flag.</p><p id="p-0007" num="0006">In one example, a device, conforming to a profile at a specific level of a specific tier, comprising one or more processors configured to: decode a bitstream for which the following condition applies: the bitstream is indicated conform to the profile, the bitstream is indicated to conform to a level that is lower than or equal to the specified level, where SublayerRepTemporalId is the highest TemporalId of all VCL Nal units in the bitstream, and the bitstream is indicated to conform to a tier that is lower than or equal to the specified tier.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an example of a system that may be configured to encode and decode video data according to one or more techniques of this disclosure.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a conceptual diagram illustrating coded video data and corresponding data structures according to one or more techniques of this disclosure.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a conceptual diagram illustrating a data structure encapsulating coded video data and corresponding metadata according to one or more techniques of this disclosure.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a conceptual diagram illustrating an example of sub-bitstream extraction in accordance with one or more techniques of this disclosure.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a conceptual diagram illustrating an example of sub-bitstream extraction in accordance with one or more techniques of this disclosure.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a conceptual drawing illustrating an example of components that may be included in an implementation of a system that may be configured to encode and decode video data according to one or more techniques of this disclosure.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram illustrating an example of a video encoder that may be configured to encode video data according to one or more techniques of this disclosure.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a conceptual diagram illustrating an example of sub-bitstream extraction according to one or more techniques of this disclosure.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a conceptual diagram illustrating an example of sub-bitstream extraction according to one or more techniques of this disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram illustrating an example of a video decoder that may be configured to decode video data according to one or more techniques of this disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DESCRIPTION OF EMBODIMENTS</heading><p id="p-0018" num="0017">In general, this disclosure describes various techniques for coding video data. In particular, this disclosure describes techniques for signaling temporal sublayer information for coded video data. It should be noted that although techniques of this disclosure are described with respect to ITU-T H.264, ITU-T H.265, JEM, and JVETP2001, the techniques of this disclosure are generally applicable to video coding. For example, the coding techniques described herein may be incorporated into video coding systems, (including video coding systems based on future video coding standards) including video block structures, intra prediction techniques, inter prediction techniques, transform techniques, filtering techniques, and/or entropy coding techniques other than those included in ITU-T H.265, JEM, and JVET-P2001. Thus, reference to ITU-T H.264, ITU-T H.265, JEM, and/or JVET-P2001 is for descriptive purposes and should not be construed to limit the scope of the techniques described herein. Further, it should be noted that incorporation by reference of documents herein is for descriptive purposes and should not be construed to limit or create ambiguity with respect to terms used herein. For example, in the case where an incorporated reference provides a different definition of a term than another incorporated reference and/or as the term is used herein, the term should be interpreted in a manner that broadly includes each respective definition and/or in a manner that includes each of the particular definitions in the alternative.</p><p id="p-0019" num="0018">In one example, a device comprises one or more processors configured to signal a temporal sublayer information for video data comprises signaling a flag indicating whether a syntax element specifying a maximum number of temporal sublayers that are present in each coded layer video sequence referring to a sequence parameter set is present in the sequence parameter set and conditionally signal the syntax element specifying a maximum number of temporal sublayers based on the value of the flag.</p><p id="p-0020" num="0019">In one example, a non-transitory computer-readable storage medium comprises instructions stored thereon that, when executed, cause one or more processors of a device to signal a temporal sublayer information for video data comprises signaling a flag indicating whether a syntax element specifying a maximum number of temporal sublayers that are present in each coded layer video sequence referring to a sequence parameter set is present in the sequence parameter set and conditionally signal the syntax element specifying a maximum number of temporal sublayers based on the value of the flag.</p><p id="p-0021" num="0020">In one example, an apparatus comprises means for signaling a flag indicating whether a syntax element specifying a maximum number of temporal sublayers that are present in each coded layer video sequence referring to a sequence parameter set is present in the sequence parameter set and means for conditionally signaling the syntax element specifying a maximum number of temporal sublayers based on the value of the flag.</p><p id="p-0022" num="0021">In one example, a device comprises one or more processors configured to parse a flag indicating whether a syntax element specifying a maximum number of temporal sublayers that are present in each coded layer video sequence referring to a sequence parameter set is present in the sequence parameter set and conditionally parse the syntax element specifying a maximum number of temporal sublayers based on the value of the flag.</p><p id="p-0023" num="0022">In one example, a non-transitory computer-readable storage medium comprises instructions stored thereon that, when executed, cause one or more processors of a device to parse a flag indicating whether a syntax element specifying a maximum number of temporal sublayers that are present in each coded layer video sequence referring to a sequence parameter set is present in the sequence parameter set and conditionally parse the syntax element specifying a maximum number of temporal sublayers based on the value of the flag.</p><p id="p-0024" num="0023">In one example, an apparatus comprises means for parsing a flag indicating whether a syntax element specifying a maximum number of temporal sublayers that are present in each coded layer video sequence referring to a sequence parameter set is present in the sequence parameter set and means for conditionally parsing the syntax element specifying a maximum number of temporal sublayers based on the value of the flag.</p><p id="p-0025" num="0024">The details of one or more examples are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.</p><p id="p-0026" num="0025">Video content includes video sequences comprised of a series of frames (or pictures). A series of frames may also be referred to as a group of pictures (GOP). Each video frame or picture may divided into one or more regions. Regions may be defined according to a base unit (e.g., a video block) and sets of rules defining a region. For example, a rule defining a region may be that a region must be an integer number of video blocks arranged in a rectangle. Further, video blocks in a region may be ordered according to a scan pattern (e.g., a raster scan). As used herein, the term video block may generally refer to an area of a picture or may more specifically refer to the largest array of sample values that may be predictively coded, sub-divisions thereof, and/or corresponding structures. Further, the term current video block may refer to an area of a picture being encoded or decoded. A video block may be defined as an array of sample values. It should be noted that in some cases pixel values may be described as including sample values for respective components of video data, which may also be referred to as color components, (e.g., luma (Y) and chroma (Cb and Cr) components or red, green, and blue components). It should be noted that in some cases, the terms pixel value and sample value are used interchangeably. Further, in some cases, a pixel or sample may be referred to as a pel. A video sampling format, which may also be referred to as a chroma format, may define the number of chroma samples included in a video block with respect to the number of luma samples included in a video block. For example, for the 4:2:0 sampling format, the sampling rate for the luma component is twice that of the chroma components for both the horizontal and vertical directions.</p><p id="p-0027" num="0026">A video encoder may perform predictive encoding on video blocks and sub-divisions thereof. Video blocks and sub-divisions thereof may be referred to as nodes. ITU-T H.264 specifies a macroblock including 16&#xd7;16 luma samples. That is, in ITU-T H.264, a picture is segmented into macroblocks. ITU-T H.265 specifies an analogous Coding Tree Unit (CTU) structure (which may be referred to as a largest coding unit (LCU)). In ITU-T H.265, pictures are segmented into CTUs. In ITU-T H.265, for a picture, a CTU size may be set as including 16&#xd7;16, 32&#xd7;32, or 64&#xd7;64 luma samples. In ITU-T H.265, a CTU is composed of respective Coding Tree Blocks (CTB) for each component of video data (e.g., luma (Y) and chroma (Cb and Cr). It should be noted that video having one luma component and the two corresponding chroma components may be described as having two channels, i.e., a luma channel and a chroma channel. Further, in ITU-T H.265, a CTU may be partitioned according to a quadtree (QT) partitioning structure, which results in the CTBs of the CTU being partitioned into Coding Blocks (CB). That is, in ITU-T H.265, a CTU may be partitioned into quadtree leaf nodes. According to ITU-T H.265, one luma CB together with two corresponding chroma CBs and associated syntax elements are referred to as a coding unit (CU). In ITU-T H.265, a minimum allowed size of a CB may be signaled. In ITU-T H.265, the smallest minimum allowed size of a luma CB is 8&#xd7;8 luma samples. In ITU-T H.265, the decision to code a picture area using intra prediction or inter prediction is made at the CU level.</p><p id="p-0028" num="0027">In ITU-T H.265, a CU is associated with a prediction unit structure having its root at the CU. In ITU-T H.265, prediction unit structures allow luma and chroma CBs to be split for purposes of generating corresponding reference samples. That is, in ITU-T H.265, luma and chroma CBs may be split into respective luma and chroma prediction blocks (PBs), where a PB includes a block of sample values for which the same prediction is applied. In ITU-T H.265, a CB may be partitioned into 1, 2, or 4 PBs. ITU-T H.265 supports PB sizes from 64&#xd7;64 samples down to 4&#xd7;4 samples. In ITU-T H.265, square PBs are supported for intra prediction, where a CB may form the PB or the CB may be split into four square PBs. In ITU-T H.265, in addition to the square PBs, rectangular PBs are supported for inter prediction, where a CB may by halved vertically or horizontally to form PBs. Further, it should be noted that in ITU-T H.265, for inter prediction, four asymmetric PB partitions are supported, where the CB is partitioned into two PBs at one quarter of the height (at the top or the bottom) or width (at the left or the right) of the CB. Intra prediction data (e.g., intra prediction mode syntax elements) or inter prediction data (e.g., motion data syntax elements) corresponding to a PB is used to produce reference and/or predicted sample values for the PB.</p><p id="p-0029" num="0028">JEM specifies a CTU having a maximum size of 256&#xd7;256 luma samples. JEM specifies a quadtree plus binary tree (QTBT) block structure. In JEM, the QTBT structure enables quadtree leaf nodes to be further partitioned by a binary tree (BT) structure. That is, in JEM, the binary tree structure enables quadtree leaf nodes to be recursively divided vertically or horizontally. In JVET-P2001, CTUs are partitioned according a quadtree plus multi-type tree (QTMT or QT+MTT) structure. The QTMT in JVET-P2001 is similar to the QTBT in JEM. However, in JVET-P2001, in addition to indicating binary splits, the multi-type tree may indicate so-called ternary (or triple tree (TT)) splits. A ternary split divides a block vertically or horizontally into three blocks. In the case of a vertical TT split, a block is divided at one quarter of its width from the left edge and at one quarter its width from the right edge and in the case of a horizontal TT split a block is at one quarter of its height from the top edge and at one quarter of its height from the bottom edge.</p><p id="p-0030" num="0029">As described above, each video frame or picture may be divided into one or more regions. For example, according to ITU-T H.265, each video frame or picture may be partitioned to include one or more slices and further partitioned to include one or more tiles, where each slice includes a sequence of CTUs (e.g., in raster scan order) and where a tile is a sequence of CTUs corresponding to a rectangular area of a picture. It should be noted that a slice, in ITU-T H.265, is a sequence of one or more slice segments starting with an independent slice segment and containing all subsequent dependent slice segments (if any) that precede the next independent slice segment (if any). A slice segment, like a slice, is a sequence of CTUs. Thus, in some cases, the terms slice and slice segment may be used interchangeably to indicate a sequence of CTUs arranged in a raster scan order. Further, it should be noted that in ITU-T H.265, a tile may consist of CTUs contained in more than one slice and a slice may consist of CTUs contained in more than one tile. However, ITU-T H.265 provides that one or both of the following conditions shall be fulfilled: (1) All CTUs in a slice belong to the same tile; and (2) All CTUs in a tile belong to the same slice.</p><p id="p-0031" num="0030">With respect to JVET-P2001, slices are required to consist of an integer number of complete tiles or an integer number of consecutive complete CTU rows within a tile, instead of only being required to consist of an integer number of CTUs. It should be noted that in JVET-P2001, the slice design does not include slice segments (i.e., no independent/dependent slice segments). Thus, in JVET-P2001, a picture may include a single tile, where the single tile is contained within a single slice or a picture may include multiple tiles where the multiple tiles (or CTU rows thereof) may be contained within one or more slices. In JVET-P2001, the partitioning of a picture into tiles is specified by specifying respective heights for tile rows and respective widths for tile columns. Thus, in JVET-P2001 a tile is a rectangular region of CTUs within a particular tile row and a particular tile column position. Further, it should be noted that JVET-P2001 provides where a picture may be partitioned into subpictures, where a subpicture is a rectangular region of a CTUs within a picture. The top-left CTU of a subpicture may be located at any CTU position within a picture with subpictures being constrained to include one or more slices Thus, unlike a tile, a subpicture is not necessarily limited to a particular row and column position. It should be noted that subpictures may be useful for encapsulating regions of interest within a picture and a sub-bitstream extraction process may be used to only decode and display a particular region of interest. That is, as described in further detail below, a bitstream of coded video data includes a sequence of network abstraction layer (NAL) units, where a NAL unit encapsulates coded video data, (i.e., video data corresponding to a slice of picture) or a NAL unit encapsulates metadata used for decoding video data (e.g., a parameter set) and a sub-bitstream extraction process forms a new bitstream by removing one or more NAL units from a bitstream.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a conceptual diagram illustrating an example of a picture within a group of pictures partitioned according to tiles, slices, and subpictures. It should be noted that the techniques described herein may be applicable to tiles, slices, subpictures, sub-divisions thereof and/or equivalent structures thereto. That is, the techniques described herein may be generally applicable regardless of how a picture is partitioned into regions. For example, in some cases, the techniques described herein may be applicable in cases where a tile may be partitioned into so-called bricks, where a brick is a rectangular region of CTU rows within a particular tile. Further, for example, in some cases, the techniques described herein may be applicable in cases where one or more tiles may be included in so-called tile groups, where a tile group includes an integer number of adjacent tiles. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, Pic<sub>3 </sub>is illustrated as including 16 tiles (i.e., Tile<sub>0 </sub>to Tile<sub>15</sub>) and three slices (i.e., Slice<sub>0 </sub>to Slice<sub>2</sub>). In the example illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, Slice<sub>0 </sub>includes four tiles (i.e., Tile<sub>0 </sub>to Tile<sub>3</sub>), Slice<sub>1 </sub>includes eight tiles (i.e., Tile<sub>4 </sub>to Tile<sub>11</sub>), and Slice<sub>2 </sub>includes four tiles (i.e., Tile<sub>12 </sub>to Tile<sub>15</sub>). Further, as illustrated in the example of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, Pic<sub>3 </sub>is illustrated as including two subpictures (i.e., Subpicture<sub>0 </sub>and Subpicture<sub>1</sub>), where Subpicture<sub>0 </sub>includes Slice<sub>0 </sub>and Slice<sub>1 </sub>and where Subpicture<sub>1 </sub>includes Slice<sub>2</sub>. As described above, subpictures may be useful for encapsulating regions of interest within a picture and a sub-bitstream extraction process may be used in order to selectively decode (and display) a region interest. For example, referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, Subpicture<sub>0 </sub>may corresponding to an action portion of a sporting event presentation (e.g., a view of the field) and Subpicture<sub>1 </sub>may corresponding to a scrolling banner displayed during the sporting event presentation. By using organizing a picture into subpictures in this manner, a viewer may be able to disable the display of the scrolling banner. That is, through a sub-bitstream extraction process Slice<sub>2 </sub>NAL unit may be removed from a bitstream (and thus not decoded and/or displayed) and Slice<sub>0 </sub>NAL unit and Slice<sub>1 </sub>NAL unit may be decoded and displayed. The encapsulation of slices of a picture into respective NAL unit data structures and sub-bitstream extraction are described in further detail below.</p><p id="p-0033" num="0032">For intra prediction coding, an intra prediction mode may specify the location of reference samples within a picture. In ITU-T H.265, defined possible intra prediction modes include a planar (i.e., surface fitting) prediction mode, a DC (i.e., flat overall averaging) prediction mode, and 33 angular prediction modes (predMode: 2-34). In JEM, defined possible intra-prediction modes include a planar prediction mode, a DC prediction mode, and 65 angular prediction modes. It should be noted that planar and DC prediction modes may be referred to as non-directional prediction modes and that angular prediction modes may be referred to as directional prediction modes. It should be noted that the techniques described herein may be generally applicable regardless of the number of defined possible prediction modes.</p><p id="p-0034" num="0033">For inter prediction coding, a reference picture is determined and a motion vector (MV) identifies samples in the reference picture that are used to generate a prediction for a current video block. For example, a current video block may be predicted using reference sample values located in one or more previously coded picture(s) and a motion vector is used to indicate the location of the reference block relative to the current video block. A motion vector may describe, for example, a horizontal displacement component of the motion vector (i.e., MV<sub>x</sub>), a vertical displacement component of the motion vector (i.e., MV<sub>y</sub>), and a resolution for the motion vector (e.g., one-quarter pixel precision, one-half pixel precision, one-pixel precision, two-pixel precision, four-pixel precision). Previously decoded pictures, which may include pictures output before or after a current picture, may be organized into one or more to reference pictures lists and identified using a reference picture index value. Further, in inter prediction coding, uni-prediction refers to generating a prediction using sample values from a single reference picture and bi-prediction refers to generating a prediction using respective sample values from two reference pictures. That is, in uni-prediction, a single reference picture and corresponding motion vector are used to generate a prediction for a current video block and in bi-prediction, a first reference picture and corresponding first motion vector and a second reference picture and corresponding second motion vector are used to generate a prediction for a current video block. In bi-prediction, respective sample values are combined (e.g., added, rounded, and clipped, or averaged according to weights) to generate a prediction. Pictures and regions thereof may be classified based on which types of prediction modes may be utilized for encoding video blocks thereof. That is, for regions having a B type (e.g., a B slice), bi-prediction, uni-prediction, and intra prediction modes may be utilized, for regions having a P type (e.g., a P slice), uni-prediction, and intra prediction modes may be utilized, and for regions having an I type (e.g., an I slice), only intra prediction modes may be utilized. As described above, reference pictures are identified through reference indices. For example, for a P slice, there may be a single reference picture list, RefPicList0 and for a B slice, there may be a second independent reference picture list, RefPicList1, in addition to RefPicList0. It should be noted that for uni-prediction in a B slice, one of RefPicList0 or RefPicList1 may be used to generate a prediction. Further, it should be noted that during the decoding process, at the onset of decoding a picture, reference picture list(s) are generated from previously decoded pictures stored in a decoded picture buffer (DPB).</p><p id="p-0035" num="0034">Further, a coding standard may support various modes of motion vector prediction. Motion vector prediction enables the value of a motion vector for a current video block to be derived based on another motion vector. For example, a set of candidate blocks having associated motion information may be derived from spatial neighboring blocks and temporal neighboring blocks to the current video block. Further, generated (or default) motion information may be used for motion vector prediction. Examples of motion vector prediction include advanced motion vector prediction (AMVP), temporal motion vector prediction (TMVP), so-called &#x201c;merge&#x201d; mode, and &#x201c;skip&#x201d; and &#x201c;direct&#x201d; motion inference. Further, other examples of motion vector prediction include advanced temporal motion vector prediction (ATMVP) and Spatial-temporal motion vector prediction (STMVP). For motion vector prediction, both a video encoder and video decoder perform the same process to derive a set of candidates. Thus, for a current video block, the same set of candidates is generated during encoding and decoding.</p><p id="p-0036" num="0035">As described above, for inter prediction coding, reference samples in a previously coded picture are used for coding video blocks in a current picture. Previously coded pictures which are available for use as reference when coding a current picture are referred as reference pictures. It should be noted that the decoding order does not necessary correspond with the picture output order, i.e., the temporal order of pictures in a video sequence. In ITU-T H.265, when a picture is decoded it is stored to a decoded picture buffer (DPB) (which may be referred to as frame buffer, a reference buffer, a reference picture buffer, or the like). In ITU-T H.265, pictures stored to the DPB are removed from the DPB when they been output and are no longer needed for coding subsequent pictures. In ITU-T H.265, a determination of whether pictures should be removed from the DPB is invoked once per picture, after decoding a slice header, i.e., at the onset of decoding a picture. For example, referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, Pic<sub>2 </sub>is illustrated as referencing Pic<sub>1</sub>. Similarly, Pic<sub>3 </sub>is illustrated as referencing Pic<sub>0</sub>. With respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, assuming the picture number corresponds to the decoding order, the DPB would be populated as follows: after decoding Pic<sub>0</sub>, the DPB would include {Pic<sub>0</sub>}; at the onset of decoding Pic<sub>1</sub>, the DPB would include {Pic<sub>0</sub>}; after decoding Pic<sub>1</sub>, the DPB would include {Pic<sub>0</sub>, Pic<sub>1</sub>}; at the onset of decoding Pic<sub>2</sub>, the DPB would include {Pic<sub>0</sub>, Pic<sub>1</sub>}. Pic<sub>2 </sub>would then be decoded with reference to Pic<sub>1 </sub>and after decoding Pic<sub>2</sub>, the DPB would include {Pic<sub>0</sub>, Pic<sub>1</sub>, Pic<sub>2</sub>}. At the onset of decoding Pic<sub>3</sub>, pictures Pic<sub>0 </sub>and Pic<sub>1 </sub>would be marked for removal from the DPB, as they are not needed for decoding Pic<sub>3 </sub>(or any subsequent pictures, not shown) and assuming Pic<sub>1 </sub>and Pic<sub>2 </sub>have been output, the DPB would be updated to include {Pic<sub>0</sub>}. Pic<sub>3 </sub>would then be decoded by referencing Pic<sub>0</sub>. The process of marking pictures for removal from a DPB may be referred to as reference picture set (RPS) management.</p><p id="p-0037" num="0036">As described above, intra prediction data or inter prediction data is used to produce reference sample values for a block of sample values. The difference between sample values included in a current PB, or another type of picture area structure, and associated reference samples (e.g., those generated using a prediction) may be referred to as residual data. Residual data may include respective arrays of difference values corresponding to each component of video data. Residual data may be in the pixel domain. A transform, such as, a discrete cosine transform (DCT), a discrete sine transform (DST), an integer transform, a wavelet transform, or a conceptually similar transform, may be applied to an array of difference values to generate transform coefficients. It should be noted that in ITU-T H.265 and JVET-P2001, a CU is associated with a transform tree structure having its root at the CU level. The transform tree is partitioned into one or more transform units (TUs). That is, an array of difference values may be partitioned for purposes of generating transform coefficients (e.g., four 8&#xd7;8 transforms may be applied to a 16&#xd7;16 array of residual values). For each component of video data, such sub-divisions of difference values may be referred to as Transform Blocks (TBs). It should be noted that in some cases, a core transform and a subsequent secondary transforms may be applied (in the video encoder) to generate transform coefficients. For a video decoder, the order of transforms is reversed.</p><p id="p-0038" num="0037">A quantization process may be performed on transform coefficients or residual sample values directly (e.g., in the case, of palette coding quantization). Quantization approximates transform coefficients by amplitudes restricted to a set of specified values. Quantization essentially scales transform coefficients in order to vary the amount of data required to represent a group of transform coefficients. Quantization may include division of transform coefficients (or values resulting from the addition of an offset value to transform coefficients) by a quantization scaling factor and any associated rounding functions (e.g., rounding to the nearest integer). Quantized transform coefficients may be referred to as coefficient level values. Inverse quantization (or &#x201c;dequantization&#x201d;) may include multiplication of coefficient level values by the quantization scaling factor, and any reciprocal rounding or offset addition operations. It should be noted that as used herein the term quantization process in some instances may refer to division by a scaling factor to generate level values and multiplication by a scaling factor to recover transform coefficients in some instances. That is, a quantization process may refer to quantization in some cases and inverse quantization in some cases. Further, it should be noted that although in some of the examples below quantization processes are described with respect to arithmetic operations associated with decimal notation, such descriptions are for illustrative purposes and should not be construed as limiting. For example, the techniques described herein may be implemented in a device using binary operations and the like. For example, multiplication and division operations described herein may be implemented using bit shifting operations and the like.</p><p id="p-0039" num="0038">Quantized transform coefficients and syntax elements (e.g., syntax elements indicating a coding structure for a video block) may be entropy coded according to an entropy coding technique. An entropy coding process includes coding values of syntax elements using lossless data compression algorithms. Examples of entropy coding techniques include content adaptive variable length coding (CAVLC), context adaptive binary arithmetic coding (CABAC), probability interval partitioning entropy coding (PIPE), and the like. Entropy encoded quantized transform coefficients and corresponding entropy encoded syntax elements may form a compliant bitstream that can be used to reproduce video data at a video decoder. An entropy coding process, for example, CABAC, may include performing a binarization on syntax elements. Binarization refers to the process of converting a value of a syntax element into a series of one or more bits. These bits may be referred to as &#x201c;bins.&#x201d; Binarization may include one or a combination of the following coding techniques: fixed length coding, unary coding, truncated unary coding, truncated Rice coding, Golomb coding, k-th order exponential Golomb coding, and Golomb-Rice coding. For example, binarization may include representing the integer value of 5 for a syntax element as 00000101 using an 8-bit fixed length binarization technique or representing the integer value of 5 as 11110 using a unary coding binarization technique. As used herein each of the terms fixed length coding, unary coding, truncated unary coding, truncated Rice coding, Golomb coding, k-th order exponential Golomb coding, and Golomb-Rice coding may refer to general implementations of these techniques and/or more specific implementations of these coding techniques. For example, a Golomb-Rice coding implementation may be specifically defined according to a video coding standard. In the example of CABAC, for a particular bin, a context provides a most probable state (MPS) value for the bin (i.e., an MPS for a bin is one of 0 or 1) and a probability value of the bin being the MPS or the least probably state (LPS). For example, a context may indicate, that the MPS of a bin is 0 and the probability of the bin being 1 is 0.3. It should be noted that a context may be determined based on values of previously coded bins including bins in the current syntax element and previously coded syntax elements. For example, values of syntax elements associated with neighboring video blocks may be used to determine a context for a current bin.</p><p id="p-0040" num="0039">With respect to the equations used herein, the following arithmetic operators may be used:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0040">+ Addition</li>        <li id="ul0002-0002" num="0041">&#x2212; Subtraction</li>        <li id="ul0002-0003" num="0042">Multiplication, including matrix multiplication</li>        <li id="ul0002-0004" num="0043">x<sup>y </sup>Exponentiation. Specifies x to the power of y. In other contexts, such notation is used for superscripting not intended for interpretation as exponentiation.</li>        <li id="ul0002-0005" num="0044">/ Integer division with truncation of the result toward zero. For example, 7/4 and &#x2212;7/&#x2212;4 are truncated to 1 and &#x2212;7/4 and 7/&#x2212;4 are truncated to &#x2212;1.</li>        <li id="ul0002-0006" num="0045">&#xf7; Used to denote division in mathematical equations where no truncation or rounding is intended.</li>    </ul>    </li></ul></p><p id="p-0041" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mrow>   <mi>Min</mi>   <mo>(</mo>   <mrow>    <mi>x</mi>    <mo>,</mo>    <mi>y</mi>   </mrow>   <mo>)</mo>  </mrow>  <mo>=</mo>  <mrow>   <mo>{</mo>   <mrow>    <mtable>     <mtr>      <mtd>       <mi>x</mi>      </mtd>      <mtd>       <mo>;</mo>      </mtd>      <mtd>       <mrow>        <mi>x</mi>        <mo>&#x3c;=</mo>        <mi>y</mi>       </mrow>      </mtd>     </mtr>     <mtr>      <mtd>       <mi>y</mi>      </mtd>      <mtd>       <mo>;</mo>      </mtd>      <mtd>       <mrow>        <mi>x</mi>        <mo>&#x3e;</mo>        <mi>y</mi>       </mrow>      </mtd>     </mtr>    </mtable>    <mo>;</mo>    <mtext></mtext>    <mrow>     <mrow>      <mi>Max</mi>      <mo>(</mo>      <mrow>       <mi>x</mi>       <mo>,</mo>       <mi>y</mi>      </mrow>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mo>{</mo>      <mtable>       <mtr>        <mtd>         <mi>x</mi>        </mtd>        <mtd>         <mo>;</mo>        </mtd>        <mtd>         <mrow>          <mi>x</mi>          <mo>&#x3e;=</mo>          <mi>y</mi>         </mrow>        </mtd>       </mtr>       <mtr>        <mtd>         <mi>y</mi>        </mtd>        <mtd>         <mo>;</mo>        </mtd>        <mtd>         <mrow>          <mi>x</mi>          <mo>&#x3c;</mo>          <mi>y</mi>         </mrow>        </mtd>       </mtr>      </mtable>     </mrow>    </mrow>   </mrow>  </mrow> </mrow></math></maths><ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0046">Used to denote division in mathematical equations where no truncation or rounding is intended.</li>    </ul>    </li></ul></p><p id="p-0042" num="0047">Further, the following mathematical functions may be used:</p><p id="p-0043" num="0048">Log2(x) the base-2 logarithm of x;</p><p id="p-0044" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mfrac>  <mi>x</mi>  <mi>y</mi> </mfrac></math></maths></p><p id="p-0045" num="0049">Ceil(x) the smallest integer greater than or equal to x.<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0050">With respect to the example syntax used herein, the following definitions of logical operators may be applied:        <ul id="ul0007" list-style="none">            <li id="ul0007-0001" num="0051">x &#x26;&#x26; y Boolean logical &#x201c;and&#x201d; of x and y</li>            <li id="ul0007-0002" num="0052">x&#x2225;y Boolean logical &#x201c;or&#x201d; of x and y</li>            <li id="ul0007-0003" num="0053">! Boolean logical &#x201c;not&#x201d;</li>            <li id="ul0007-0004" num="0054">x ? y z If x is TRUE or not equal to 0, evaluates to the value of y; otherwise, evaluates to the value of z.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0046" num="0055">Further, the following relational operators may be applied:<ul id="ul0008" list-style="none">    <li id="ul0008-0001" num="0000">    <ul id="ul0009" list-style="none">        <li id="ul0009-0001" num="0056">&#x3e; Greater than</li>        <li id="ul0009-0002" num="0057">&#x3e;= Greater than or equal to</li>        <li id="ul0009-0003" num="0058">&#x3c; Less than</li>        <li id="ul0009-0004" num="0059">&#x3c;= Less than or equal to</li>        <li id="ul0009-0005" num="0060">== Equal to</li>        <li id="ul0009-0006" num="0061">!= Not equal to</li>        <li id="ul0009-0007" num="0062">Further, it should be noted that in the syntax descriptors used herein, the following descriptors may be applied:        <ul id="ul0010" list-style="none">            <li id="ul0010-0001" num="0063">b(8): byte having any pattern of bit string (8 bits). The parsing process for this descriptor is specified by the return value of the function read_bits(8).</li>            <li id="ul0010-0002" num="0064">f(n): fixed-pattern bit string using n bits written (from left to right) with the left bit first. The parsing process for this descriptor is specified by the return value of the function read_bits(n).</li>            <li id="ul0010-0003" num="0065">se(v): signed integer 0-th order Exp-Golomb-coded syntax element with the left bit first.</li>            <li id="ul0010-0004" num="0066">tb(v): truncated binary using up to maxVal bits with maxVal defined in the semantics of the symtax element.</li>            <li id="ul0010-0005" num="0067">tu(v): truncated unary using up to maxVal bits with maxVal defined in the semantics of the symtax element.</li>            <li id="ul0010-0006" num="0068">u(n): unsigned integer using n bits. When n is &#x201c;v&#x201d; in the syntax table, the number of bits varies in a manner dependent on the value of other syntax elements. The parsing process for this descriptor is specified by the return value of the function read_bits(n) interpreted as a binary representation of an unsigned integer with most significant bit written first.</li>            <li id="ul0010-0007" num="0069">ue(v): unsigned integer 0-th order Exp-Golomb-coded syntax element with the left bit first.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0047" num="0070">As described above, video content includes video sequences comprised of a series of pictures and each picture may be divided into one or more regions. In JVET-P2001, a coded representation of a picture is referred to as a coded picture and all CTUs of the coded picture are encapsulated in one or more coded slice NAL units. That is, one or more corresponding coded slice NAL units encapsulate a coded representation of a picture. For example, referring again to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the coded representation of Pic<sub>3 </sub>is encapsulated in three coded slice NAL units (i.e., Slice<sub>0 </sub>NAL unit, Slice<sub>1 </sub>NAL unit, and Slice<sub>2 </sub>NAL unit). It should be noted that the term video coding layer (VCL) NAL unit is used as a collective term for coded slice NAL units, i.e., VCL NAL is a collective term which includes all types of slice NAL units. As described above, and in further detail below, a NAL unit may encapsulate metadata used for decoding video data. A NAL unit encapsulating metadata used for decoding a video sequence is generally referred to as a non-VCL NAL unit. Thus, in JVET-P2001, a NAL unit may be a VCL NAL unit or a non-VCL NAL unit. It should be noted that a VCL NAL unit includes slice header data, which provides information used for decoding the particular slice. Thus, in JVET-P2001, information used for decoding video data, which may be referred to as metadata in some cases, is not limited to being included in non-VCL NAL units. JVET-P2001 provides where a picture unit (PU) is a set of NAL units that contain all VCL NAL units of a coded picture and their associated non-VCL NAL units and where an access unit (AU) is a set of NAL units that are associated with each other according to a specified classification rule, are consecutive in decoding order, and contain exactly one coded picture for each present picture unit. A PU consists of one picture header NAL unit, one coded picture, which comprises of one or more VCL NAL units, and zero or more non-VCL NAL units. Thus, in JVET-P2001 an access unit includes one or more coded pictures. In some cases, an access unit may include pictures included in different layers of video. Layers of video are described in further detail below. Further, in JVET-P2001, a coded video sequence (CVS) is a sequence of AUs that consists, in decoding order, of a CVSS AU, followed by zero or more AUs that are not CVSS AUs, including all subsequent AUs up to but not including any subsequent AU that is a CVSS AU, where a coded video sequence start (CVSS) AU is an AU in which there is a picture unit for each layer in the CVS and the coded picture in each present picture unit is a coded layer video sequence start (CLVSS) picture. In JVET-P2001, a coded layer video sequence (CLVS) is a sequence of PUs within the same layer that consists, in decoding order, of a CLVSS PU, followed by zero or more PUs that are not CLVSS PUs, including all subsequent PUs up to but not including any subsequent PU that is a CLVSS PU. This is, in JVET-P2001, a bitstream may be described as including a sequence of NAL units forming a CVS, where a CVS includes AUs and each AU may include respective pictures for each of a plurality of layers for coded video.</p><p id="p-0048" num="0071">Multi-layer video coding enables a video presentation to be decoded/displayed as a presentation corresponding to a base layer of video data and decoded/displayed one or more additional presentations corresponding to enhancement layers of video data. For example, a base layer may enable a video presentation having a basic level of quality (e.g., a High Definition rendering and/or a 30 Hz frame rate) to be presented and an enhancement layer may enable a video presentation having an enhanced level of quality (e.g., an Ultra High Definition rendering and/or a 60 Hz frame rate) to be presented. An enhancement layer may be coded by referencing a base layer. That is, for example, a picture in an enhancement layer may be coded (e.g., using inter-layer prediction techniques) by referencing one or more pictures (including scaled versions thereof) in a base layer. It should be noted that layers may also be coded independent of each other. In this case, there may not be inter-layer prediction between two layers. Each NAL unit may include an identifier indicating a layer of video data the NAL unit is associated with. As described above, a sub-bitstream extraction process may be used to only decode and display a particular region of interest of a picture. Further, a sub-bitstream extraction process may be used to only decode and display a particular layer of video. Sub-bitstream extraction may refer to a process where a device receiving a compliant or conforming bitstream forms a new compliant or conforming bitstream by discarding and/or modifying data in the received bitstream. For example, sub-bitstream extraction may be used to form a new compliant or conforming bitstream corresponding to a particular representation of video (e.g., a high quality representation).</p><p id="p-0049" num="0072">In JVET-P2001, each of a video sequence, a GOP, a picture, a slice, and CTU may be associated with metadata that describes video coding properties and some types of metadata an encapsulated in non-VCL NAL units. JVET-P2001 defines parameter sets that may be used to describe video data and/or video coding properties. In particular, JVET-P2001 includes the following five types of parameter sets: decoding parameter set (DPS), video parameter set (VPS), sequence parameter set (SPS), picture parameter set (PPS), and adaption parameter set (APS), where an SPS applies to apply to zero or more entire CVSs, a PPS applies to zero or more entire coded pictures, an APS applies to zero or more slices, and a DPS and a VPS may be optionally referenced by an SPS. A PPS applies to an individual coded picture that refers to it. In JVET-P2001, parameter sets may be encapsulated as a non-VCL NAL unit and/or may be signaled as a message. JVET-P2001 also includes a picture header (PH) which is encapsulated as a non-VCL NAL unit. In JVET-P2001, a picture header applies to all slices of a coded picture. JVET-P2001 further enables supplemental enhancement information (SEI) messages to be signaled. In JVET-P2001, SEI messages assist in processes related to decoding, display or other purposes, however, SEI messages may not be required for constructing the luma or chroma samples according to a decoding process. In JVETP2001, SEI messages may be signaled in a bitstream using non-VCL NAL units. Further, SEI messages may be conveyed by some mechanism other than by being present in the bitstream (i.e., signaled out-of-band).</p><p id="p-0050" num="0073"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example of a bitstream including multiple CVSs, where a CVS includes AUs, and AUs include picture units. The example illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref> corresponds to an example of encapsulating the slice NAL units illustrated in the example of <figref idref="DRAWINGS">FIG. <b>2</b></figref> in a bitstream. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the corresponding picture unit for Pic<sub>3 </sub>includes the three VCL NAL units, i.e., Slice<sub>0 </sub>NAL unit, Slice<sub>1 </sub>NAL unit, and Slice<sub>2 </sub>NAL unit and two non-VCL NAL units, i.e., a PPS NAL Unit and a PH NAL unit. It should be noted that in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, HEADER is a NAL unit header (i.e., not to be confused with a slice header). Further, it should be noted that in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, other non-VCL NAL units, which are not illustrated may be included in the CVSs, e.g., SPS NAL units, VPS NAL units, SEI message NAL units, etc. Further, it should be noted that in other examples, a PPS NAL Unit used for decoding Pic<sub>3 </sub>may be included elsewhere in the bitstream, e.g., in the picture unit corresponding to Pic<sub>0 </sub>or may be provided by an external mechanism. However, it should be noted that in JVET-P2001, the picture header for each picture is required to be in the picture unit corresponding to the picture.<ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0000">    <ul id="ul0012" list-style="none">        <li id="ul0012-0001" num="0074">JVET-P2001 defines NAL unit header semantics that specify the type of Raw Byte Sequence Payload (RBSP) data structure included in the NAL unit. Table 1 illustrates the syntax of the NAL unit header provided in JVET-P2001.</li>    </ul>    </li></ul></p><p id="p-0051" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="35pt" align="left"/><colspec colname="1" colwidth="77pt" align="left"/><colspec colname="2" colwidth="105pt" align="center"/><thead><row><entry/><entry namest="offset" nameend="2" rowsep="1">TABLE 1</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>nal_unit_header( ) {</entry><entry>Descriptor</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;forbidden_zero_bit </entry><entry>f(1) </entry></row><row><entry/><entry>&#x2003;nuh_reserved_zero_bit </entry><entry>u(1) </entry></row><row><entry/><entry>&#x2003;nuh_layer_id </entry><entry>u(6) </entry></row><row><entry/><entry>&#x2003;nal_unit_type </entry><entry>u(5) </entry></row><row><entry/><entry>&#x2003;nuh_temporal_id_plus1 </entry><entry>u(3) </entry></row><row><entry/><entry>}</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><ul id="ul0013" list-style="none">    <li id="ul0013-0001" num="0000">    <ul id="ul0014" list-style="none">        <li id="ul0014-0001" num="0075">JVET-P2001 provides the following definitions for the respective syntax elements illustrated in Table 1.</li>        <li id="ul0014-0002" num="0076">forbidden_zero_bit shall be equal to 0.</li>        <li id="ul0014-0003" num="0077">nuh_reserved_zero_bit shall be equal to &#x2018;0&#x2019;. The value 1 of nuh_reserved_zero_bit may be specified in the future by ITU-T ISO/IEC. Decoders shall ignore (i.e. remove from the bitstream and discard) NAL units with nuh_reserved_zero_bit equal to &#x2018;1&#x2019;.</li>        <li id="ul0014-0004" num="0078">nuh_layer_id specifies the identifier of the layer to which a VCL NAL unit belongs or the identifier of a layer to which a non-VCL NAL unit applies. The value of nuh_layer_id shall be in the range of 0 to 55, inclusive. Other values for nuh_layer_id are reserved for future use by ITU-T ISO/IEC.</li>        <li id="ul0014-0005" num="0079">The value of nuh_layer_id shall be the same for all VCL NAL units of a coded picture.</li>        <li id="ul0014-0006" num="0080">The value of nuh_layer_id of a coded picture or a PU is the value of the nuh_layer_id of the VCL NAL units of the coded picture or the PU.</li>        <li id="ul0014-0007" num="0081">The value of nuh_layer_id for non-VCL NAL units is constrained as follows:        <ul id="ul0015" list-style="none">            <li id="ul0015-0001" num="0082">If nal_unit_type is equal to PPS_NUT, PREFIX_APS_NUT, or SUFFIX_APS_NUT, nuh_layer_id shall be equal to the lowest nuh_layer_id value of the coded slice NAL units that refer to the NAL unit.</li>            <li id="ul0015-0002" num="0083">Otherwise, if nal_unit_type is equal to SPS_NUT, nuh_layer_id shall be equal to the lowest nuh_layer_id value of the PPS NAL units that refer to the SPS NAL unit.</li>            <li id="ul0015-0003" num="0084">Otherwise, if nal_unit_type is equal to AUD_NUT, nuh_layer_id shall be equal to vps_layer_id[0].</li>            <li id="ul0015-0004" num="0085">Otherwise, when nal_unit_type is equal to PH_NUT, EOS_NUT, or FD_NUT, nuh_layer_id shall be equal to the nuh_layer_id of associated VCL NAL unit.</li>        </ul>        </li>        <li id="ul0014-0008" num="0086">NOTE&#x2014;The value of nuh_layer_id of DPS, VPS, and EOB NAL units is not constrained.</li>        <li id="ul0014-0009" num="0087">The value of nal_unit_type shall be the same for all pictures of a CVSS AU.</li>        <li id="ul0014-0010" num="0088">nuh_temporal_id_plus1 minus 1 specifies a temporal identifier for the NAL unit. The value of nuh_temporal_id_plus1 shall not be equal to 0.</li>        <li id="ul0014-0011" num="0089">The variable TemporalId is derived as follows:</li>    </ul>    </li></ul></p><p id="p-0052" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>TemporalId=nuh_temporal_id_plus1&#x2212;1<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0016" list-style="none">    <li id="ul0016-0001" num="0000">    <ul id="ul0017" list-style="none">        <li id="ul0017-0001" num="0090">When nal_unit_type is in the range of IDR_W_RADL to RSV_IRAP_12, inclusive, TemporalId shall be equal to 0.</li>        <li id="ul0017-0002" num="0091">When nal_unit_type is equal to STSA_NUT, TemporalId shall not be equal to 0.</li>        <li id="ul0017-0003" num="0092">The value of TemporalId shall be the same for all VCL NAL units of an AU. The value of TemporalId of a coded picture, a PU, or an AU is the value of the TemporalId of the VCL NAL units of the coded picture, PU, or AU. The value of TemporalId of a sublayer representation is the greatest value of TemporalId of all VCL NAL units in the sublayer representation.</li>        <li id="ul0017-0004" num="0093">The value of TemporalId for non-VCL NAL units is constrained as follows:        <ul id="ul0018" list-style="none">            <li id="ul0018-0001" num="0094">If nal_unit_type is equal to DPS_NUT, VPS_NUT, or SPS_NUT, TemporalId shall be equal to 0 and the TemporalId of the AU containing the NAL unit shall be equal to 0.</li>            <li id="ul0018-0002" num="0095">Otherwise, if nal_unit_type is equal to PH_NUT, TemporalId shall be equal to the TemporalId of the PU containing the NAL unit.</li>            <li id="ul0018-0003" num="0096">Otherwise, if nal_unit_type is equal to EOS_NUT or EUB_NUT, TemporalId shall be equal to 0.</li>            <li id="ul0018-0004" num="0097">Otherwise, if nal_unit_type is equal to AUD_NUT, FD_NUT, PREFIX_SEI_NUT, or SUFFIX_SEI_NUT, TemporalId shall be equal to the TemporalId of the AU containing the NAL unit.</li>            <li id="ul0018-0005" num="0098">Otherwise, when nal_unit_type is equal to PPS_NUT, PREFIX_APS_NUT, or SUFFIX_APS_NUT, TemporalId shall be greater than or equal to the TemporalId of the PU containing the NAL unit.</li>        </ul>        </li>        <li id="ul0017-0005" num="0099">NOTE&#x2014;When the NAL unit is a non-VCL NAL unit, the value of TemporalId is equal to the minimum value of the TemporalId values of all AUs to which the non-VCL NAL unit applies. When nal_unit_type is equal to PPS_NUT, PREFIX_APS_NUT, or SUFFIX_APS_NUT, TemporalId may be greater than or equal to the TemporalId of the containing AU, as all PPSs and APSs may be included in the beginning of the bitstream (e.g., when they are transported out-of-band, and the receiver places them at the beginning of the bitstream), wherein the first coded picture has TemporalId equal to 0.</li>        <li id="ul0017-0006" num="0100">nal_unit_type specifies the NAL unit type, i.e., the type of RESP data structure contained in the NAL unit as specified in Table 2.</li>    </ul>    </li></ul></p><p id="p-0053" num="0101">NAL units that have nal_unit_type in the range of UNSPEC28 . . . . UNSPEC31, inclusive, for which semantics are not specified, shall not affect the decoding process specified in this Specification.<ul id="ul0019" list-style="none">    <li id="ul0019-0001" num="0000">    <ul id="ul0020" list-style="none">        <li id="ul0020-0001" num="0102">NOTE&#x2014;NAL unit types in the range of UNSPEC_28 . . . . UNSPEC_31 may be used as determined by the application. No decoding process for these values of nal_unit_type is specified in this Specification. Since different applications might use these NAL unit types for different purposes, particular care must be exercised in the design of encoders that generate NAL units with these nal_unit_type values, and in the design of decoders that interpret the content of NAL units with these nal_unit_type values. This Specification does not define any management for these values. These nal_unit_type values might only be suitable for use in contexts in which &#x201c;collisions&#x201d; of usage (i.e., different definitions of the meaning of the NAL unit content for the same nal_unit_type value) are unimportant, or not possible, or are managed&#x2014;e.g., defined or managed in the controlling application or transport specification, or by controlling the environment in which bitstreams are distributed.</li>        <li id="ul0020-0002" num="0103">For purposes other than determining the amount of data in the decoding units of the bitstream, decoders shall ignore (remove from the bitstream and discard) the contents of all NAL units that use reserved values of nal_unit_type.</li>        <li id="ul0020-0003" num="0104">NOTE&#x2014;This requirement allows future definition of compatible extensions to this Specification.</li>    </ul>    </li></ul></p><p id="p-0054" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="49pt" align="center"/><colspec colname="2" colwidth="63pt" align="left"/><colspec colname="3" colwidth="126pt" align="left"/><colspec colname="4" colwidth="35pt" align="left"/><thead><row><entry namest="1" nameend="4" rowsep="1">TABLE 2</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry/><entry>Name of </entry><entry>Content of NAL unit and RBSP </entry><entry>NAL unit </entry></row><row><entry>nal_unit_type </entry><entry>nal_unit_type </entry><entry>syntax structure </entry><entry>type class</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="49pt" align="char" char="."/><colspec colname="2" colwidth="63pt" align="left"/><colspec colname="3" colwidth="126pt" align="left"/><colspec colname="4" colwidth="35pt" align="left"/><tbody valign="top"><row><entry>0 </entry><entry>TRAIL_NUT </entry><entry>Coded slice of a trailing picture </entry><entry>VCL </entry></row><row><entry/><entry/><entry>slice_layer_rbsp( ) </entry><entry/></row><row><entry>1 </entry><entry>STSA_NUT </entry><entry>Coded slice of an STSA picture </entry><entry>VCL </entry></row><row><entry/><entry/><entry>slice_layer_rbsp( ) </entry><entry/></row><row><entry>2 </entry><entry>RADL_NUT </entry><entry>Coded slice of a RADL picture </entry><entry>VCL </entry></row><row><entry/><entry/><entry>slice_layer_rbsp( ) </entry><entry/></row><row><entry>3 </entry><entry>RASL_NUT </entry><entry>Coded slice of a RASL picture </entry><entry>VCL </entry></row><row><entry/><entry/><entry>slice_layer_rbsp( ) </entry><entry/></row><row><entry>4 . . . 6 </entry><entry>RSV_VCL_4 . . . </entry><entry>Reserved non-IRAP VCL NAL unit types </entry><entry>VCL </entry></row><row><entry/><entry>RSV_VCL_6 </entry><entry/><entry/></row><row><entry>7 </entry><entry>IDR_W_RADL </entry><entry>Coded slice of an IDR picture </entry><entry>VCL </entry></row><row><entry>8 </entry><entry>IDR_N_LP </entry><entry>slice_layer_rbsp( ) </entry><entry/></row><row><entry>9 </entry><entry>CRA_NUT </entry><entry>Coded slice of a CRA picture </entry><entry>VCL </entry></row><row><entry/><entry/><entry>silce_layer_rbsp( ) </entry><entry/></row><row><entry>10 </entry><entry>GDR_NUT </entry><entry>Coded slice of a GDR picture </entry><entry>VCL </entry></row><row><entry/><entry/><entry>slice_layer_rbsp( ) </entry><entry/></row><row><entry>11 </entry><entry>RSV_IRAP_11 </entry><entry>Reserved IRAP VCL NAL unit types </entry><entry>VCL </entry></row><row><entry>12 </entry><entry>RSV_IRAP_12 </entry><entry/><entry/></row><row><entry>13 </entry><entry>DPS_NUT </entry><entry>Decoding parameter set </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>decoding_parameter_set_rbsp( ) </entry><entry/></row><row><entry>14 </entry><entry>VPS_NUT </entry><entry>Video parameter set </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>video_parameter_set_rbsp( ) </entry><entry/></row><row><entry>15 </entry><entry>SPS_NUT </entry><entry>Sequence parameter set </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>seq_parameter_set_rbsp( ) </entry><entry/></row><row><entry>16 </entry><entry>PPS_NUT </entry><entry>Picture parameter set </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>pic_parameter_set_rbsp( ) </entry><entry/></row><row><entry>17 </entry><entry>PREFIX_APS_NUT </entry><entry>Adaptation parameter set </entry><entry>non-VCL </entry></row><row><entry>18 </entry><entry>SUFFIX_APS_NUT </entry><entry>adaptation_parameter_set_rbsp( ) </entry><entry/></row><row><entry>19 </entry><entry>PH_NUT </entry><entry>Picture header </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>picture_header_rbsp( ) </entry><entry/></row><row><entry>20 </entry><entry>AUD_NUT </entry><entry>AU delimiter </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>access_unit_delimiter_rbsp( ) </entry><entry/></row><row><entry>21 </entry><entry>EOS_NUT </entry><entry>End of sequence </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>end_of_seq_rbsp( ) </entry><entry/></row><row><entry>22 </entry><entry>EOB_NUT </entry><entry>End of bitstream </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>end_of_bitstream_rbsp( ) </entry><entry/></row><row><entry>23 </entry><entry>PREFIX_SEI_NUT </entry><entry>Supplemental enhancement information </entry><entry>non-VCL </entry></row><row><entry>24 </entry><entry>SUFFIX_SEI_NUT </entry><entry>sei_rbsp( ) </entry><entry/></row><row><entry>25 </entry><entry>FD_NUT </entry><entry>Filler data </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>filler_data_rbsp( ) </entry><entry/></row><row><entry>26 </entry><entry>RSV_NVCL_26 </entry><entry>Reserved non-VCL NAL unit types </entry><entry>non-VCL </entry></row><row><entry>27 </entry><entry>RSV_NVCL_27 </entry><entry/><entry/></row><row><entry>28 . . . 31 </entry><entry>UNSPEC_28 . . . </entry><entry>Unspecified non-VCL NAL unit types </entry><entry>non-VCL </entry></row><row><entry/><entry>UNSPEC_31</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><ul id="ul0021" list-style="none">    <li id="ul0021-0001" num="0000">    <ul id="ul0022" list-style="none">        <li id="ul0022-0001" num="0000">        <ul id="ul0023" list-style="none">            <li id="ul0023-0001" num="0105">NOTE&#x2014;A clean random access (CRA) picture may have associated RASL or RADL pictures present in the bitstream.</li>            <li id="ul0023-0002" num="0106">NOTE&#x2014;An instantaneous decoding refresh (IDR) picture having nal_unit_type equal to IDR_N_LP does not have associated leading pictures present in the bitstream. An IDR picture having nal_unit_type equal to IDR_W_RADL does not have associated RASL pictures present in the bitstream, but may have associated RADL pictures in the bitstream.</li>            <li id="ul0023-0003" num="0107">For VCL NAL units of any particular picture, the following applies:            <ul id="ul0024" list-style="none">                <li id="ul0024-0001" num="0108">If mixed_nalu_types_in_pic_flag is equal to 0, the value of nal_unit_type shall be the same for all coded slice NAL units of a picture. A picture or a PU is referred to as having the same NAL unit type as the coded slice NAL units of the picture or PU.</li>            </ul>            </li>            <li id="ul0023-0004" num="0109">Otherwise (mixed_nalu_types_in_pic_flag equal to 1), one or more of the VCL NAL units shall all have a particular value of nal_unit_type in the range of IDR_W_RADL to CRA_NUT, inclusive, and the other VCL NAL units shall all have a particular value of nal_unit_type in the range of TRAIL_NUT to RSV_VCL_6, inclusive, or equal to GRA_NUT.</li>        </ul>        </li>        <li id="ul0022-0002" num="0110">For a single-layer bitstream, the following constraints apply:        <ul id="ul0025" list-style="none">            <li id="ul0025-0001" num="0111">Each picture, other than the first picture in the bitstream in decoding order, is considered to be associated with the previous IRAP picture in decoding order.</li>            <li id="ul0025-0002" num="0112">When a picture is a leading picture of an IRAP picture, it shall be a RADL or RASL picture.</li>            <li id="ul0025-0003" num="0113">When a picture is a trailing picture of an IRAP picture, it shall not be a RADL or RASL picture.</li>            <li id="ul0025-0004" num="0114">No RASL pictures shall be present in the bitstream that are associated with an IDR picture.</li>            <li id="ul0025-0005" num="0115">No RADL pictures shall be present in the bitstream that are associated with an IDR picture having nal_unit_type equal to IDR_N_LP.</li>            <li id="ul0025-0006" num="0116">NOTE&#x2014;It is possible to perform random access at the position of an IRAP PU by discarding all PUs before the IRAP PU (and to correctly decode the IRAP picture and all the subsequent non-RASL pictures in decoding order), provided each parameter set is available (either in the bitstream or by external means not specified in this Specification) when it is referenced.</li>            <li id="ul0025-0007" num="0117">Any picture that precedes an TRAP picture in decoding order shall precede the IRAP picture in output order and shall precede any RADL picture associated with the IRAP picture in output order.</li>            <li id="ul0025-0008" num="0118">Any RASL picture associated with a CRA picture shall precede any RADL picture associated with the CRA picture in output order.</li>            <li id="ul0025-0009" num="0119">Any RASL picture associated with a CRA picture shall follow, in output order, any IRAP picture that precedes the CRA picture in decoding order.</li>            <li id="ul0025-0010" num="0120">If field_seq_flag is equal to 0 and the current picture is a leading picture associated with an IRAP picture, it shall precede, in decoding order, all non-leading pictures that are associated with the same IRAP picture. Otherwise, let picA and picB be the first and the last leading pictures, in decoding order, associated with an IRAP picture, respectively, there shall be at most one non-leading picture preceding picA in decoding order, and there shall be no non-leading picture between picA and picB in decoding order.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0055" num="0121">It should be noted that generally, an Intra Random Access Point (IRAP) picture is a picture that does not refer to any pictures other than itself for prediction in its decoding process. In JVET-P2001, an IRAP picture may be a clean random access (CRA) picture or an instantaneous decoder refresh (IDR) picture. In JVET-P2001, the first picture in the bitstream in decoding order must be an IRAP or a gradual decoding refresh (GDR) picture. JVET-P2001 describes the concept of a leading picture, which is a picture that precedes the associated IRAP picture in output order. JVET-P2001 further describes the concept of a trailing picture which is a non-IRAP picture that follows the associated IRAP picture in output order. Trailing pictures associated with an IRAP picture also follow the TRAP picture in decoding order. For IDR pictures, there are no trailing pictures that require reference to a picture decoded prior to the IDR picture. JVET-P2001 provides where a CRA picture may have leading pictures that follow the CRA picture in decoding order and contain inter picture prediction references to pictures decoded prior to the CRA picture. Thus, when the CRA picture is used as a random access point these leading pictures may not be decodable and are identified as random access skipped leading (RASL) pictures. The other type of picture that can follow an IRAP picture in decoding order and precede it in output order is the random access decodable leading (RADL) picture, which cannot contain references to any pictures that precede the IRAP picture in decoding order. A GDR picture, is a picture for which each VCL NAL unit has nal_unit_type equal to GDR_NUT. If the current picture is a GDR picture that is associated with a picture header which signals a syntax element receovery_poc_cnt and there is a picture picA that follows the current GDR picture in decoding order in the CLVS and that has PicOrderCntVal equal to the PicOrderCntVal of the current GDR picture plus the value of recovery_poc_cnt, the picture picA is referred to as the recovery point picture.</p><p id="p-0056" num="0122">As provided in Table 2, a NAL unit may include a sequence parameter set syntax structure. Table 3 illustrates the syntax structure of the SPS provided in JVET-P2001.</p><p id="p-0057" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="273pt" align="left"/><colspec colname="2" colwidth="35pt" align="left"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 3</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>seq_parameter_set_rbsp( ) {</entry><entry>Descriptor</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;sps_decoding_parameter_set_id </entry><entry>u(4) </entry></row><row><entry>&#x2003;sps_video_parameter_set_id </entry><entry>u(4) </entry></row><row><entry>&#x2003;sps_max_sublayers_minus1 </entry><entry>u(3) </entry></row><row><entry>&#x2003;sps_reserved_zero_4bits </entry><entry>u(4) </entry></row><row><entry>&#x2003;sps_ptl_dpb_hrd_params_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_ptl_dpb_hrd_params_present_flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;profile_tier_level( 1, sps_max_sublayers_minus1 ) </entry><entry/></row><row><entry>&#x2003;gdr_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_seq_parameter_set_id </entry><entry>u(4) </entry></row><row><entry>&#x2003;chroma_format_idc </entry><entry>u(2) </entry></row><row><entry>&#x2003;if( chroma_format_idc&#x2003;= =&#x2003; 3 ) </entry><entry/></row><row><entry>&#x2003;&#x2003;separate_colour_plane_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;ref_pic_resampling_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;pic_width_max_in_luma_samples </entry><entry>ue(v) </entry></row><row><entry>&#x2003;pic_height_max_in_luma_samples </entry><entry>ue(v) </entry></row><row><entry>&#x2003;sps_log2_ctu_size_minus5 </entry><entry>u(2) </entry></row><row><entry>&#x2003;subpics_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( subpics_present_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_num_subpics_minus1 </entry><entry>u(8) </entry></row><row><entry>&#x2003;&#x2003;for( i = 0; i&#x2003;&#x3c;=&#x2003;sps_num_subpics_minus1; i++ ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;subpic_ctu_top_left_x[ i ]</entry><entry>u(v) </entry></row><row><entry>&#x2003;&#x2003;&#x2003;subpic_ctu_top_left_y[ i ]</entry><entry>u(v) </entry></row><row><entry>&#x2003;&#x2003;&#x2003;subpic_width_minus1[ i ]</entry><entry>u(v) </entry></row><row><entry>&#x2003;&#x2003;&#x2003;subpic_height_minus1[ i ]</entry><entry>u(v) </entry></row><row><entry>&#x2003;&#x2003;&#x2003;subpic_treated_as_pic_flag[ i ]</entry><entry>u(1) </entry></row><row><entry>&#x2003;&#x2003;&#x2003;loop_filter_across_subpic_enabled_flag[ i ]</entry><entry>u(1) </entry></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;sps_subpic_id_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_subpics_id_present_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_subpic_id_signalling_present flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;&#x2003;if( sps_subpics_id_signalling_present_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;sps_subpic_id_len_minus1 </entry><entry>ue(v) </entry></row><row><entry>&#x2003;&#x2003;&#x2003;for( i = 0; i&#x2003;&#x3c;=&#x2003;sps_num_subpics_minus1; i++ ) </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;sps_subpic_id[ i ]</entry><entry>u(v) </entry></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;bit_depth_minus8 </entry><entry>ue(v) </entry></row><row><entry>&#x2003;min_qp_prime_ts_minus4 </entry><entry>ue(v) </entry></row><row><entry>&#x2003;sps_weighted_pred_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_weighted_bipred_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;log2_max_pic_order_cnt_lsb_minus4 </entry><entry>u(4) </entry></row><row><entry>&#x2003;sps_poc_msb_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_poc_msb_flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;poc_msb_len_minus1 </entry><entry>ue(v) </entry></row><row><entry>&#x2003;if( sps_max_sublayers_minus1 &#x3e; 0 ) </entry><entry/></row><row><entry>&#x2003;&#x2003;sps_sublayer_dpb_params_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_ptl_dpb_hrd_params_present_flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;dpb_parameters( 0, sps_max_sublayers_minus1, sps_sublayer_dpb_params_flag ) </entry><entry/></row><row><entry>&#x2003;long_term_ref_pics_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;inter_layer_ref_pics_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_idr_rpl_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;rpl1_same_as_rpl0_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;for( i = 0; i &#x3c; !rpl1_same_as_rpl0_flag ? 2 : 1; i++ ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;num_ref_pic_lists_in_sps[ i ]</entry><entry>ue(v) </entry></row><row><entry>&#x2003;&#x2003;for( j = 0; j &#x3c; num_ref_pic_lists_in_sps[ i ]; j++) </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;ref_pic_list_struct( i, j ) </entry><entry/></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;if( ChromaArrayType != 0 ) </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;qtbtt_dual_tree_intra_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;log2_min_luma_coding_block_size_minus2 </entry><entry>ue(v) </entry></row><row><entry>&#x2003;partition_constraints_override_enable_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_log2_diff_min_qt_min_cb_intra_slice_luma </entry><entry>ue(v) </entry></row><row><entry>&#x2003;sps_log2_diff_min_qt_min_cb_inter_slice </entry><entry>ue(v) </entry></row><row><entry>&#x2003;sps_max_mtt_hierarchy_depth_inter_slice </entry><entry>ue(v) </entry></row><row><entry>&#x2003;sps_max_mtt_hierarchy_depth_intra_slice_luma </entry><entry>ue(v) </entry></row><row><entry>&#x2003;if( sps_max_mtt_hierarchy_depth_intra_slice_luma&#x2003;!=&#x2003;0 ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_log2_diff_max_bt_min_qt_intra_slice_luma </entry><entry>ue(v) </entry></row><row><entry>&#x2003;&#x2003;sps_log2_diff_max_tt_min_qt_intra_slice_luma </entry><entry>ue(v) </entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;if( sps_max_mtt_hierarchy_depth_inter_slice&#x2003;!=&#x2003;0 ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_log2_diff_max_bt_min_qt_inter_slice </entry><entry>ue(v) </entry></row><row><entry>&#x2003;&#x2003;sps_log2_diff_max_tt_min_qt_inter_slice </entry><entry>ue(v) </entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;if( qtbtt_dual_tree_intra_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_log2_diff_min_qt_min_cb_intra_slice_chroma </entry><entry>ue(v) </entry></row><row><entry>&#x2003;&#x2003;sps_max_mtt_hierarchy_depth_intra_slice_chroma </entry><entry>ue(v) </entry></row><row><entry>&#x2003;&#x2003;if( sps_max_mtt_hierarchy_depth_intra_slice_chroma&#x2003;!=&#x2003;0 ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;sps_log2_diff_max_bt_min_qt_intra_slice_chroma </entry><entry>ue(v) </entry></row><row><entry>&#x2003;&#x2003;&#x2003;sps_log2_diff_max_tt_min_qt_intra_slice_chroma </entry><entry>ue(v) </entry></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;sps_max_luma_transform_size_64_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_joint_cbcr_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( ChromaArrayType != 0 ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;same_qp_table_for_chroma </entry><entry>u(1) </entry></row><row><entry>&#x2003;&#x2003;numQpTables = same_qp_table_for_chroma ? 1 : ( sps_joint_cbcr_enabled_flag ? 3 : 2 ) </entry><entry/></row><row><entry>&#x2003;&#x2003;for( i = 0; i &#x3c; numQpTables; i++ ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;qp_table_start_minus26[ i ]</entry><entry>se(v) </entry></row><row><entry>&#x2003;&#x2003;&#x2003;num_points_in_qp_table_minus1[ i ]</entry><entry>ue(v) </entry></row><row><entry>&#x2003;&#x2003;&#x2003;for( j = 0; j &#x3c;= num_points_in qp_table_minus1[ i ]; j++ ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;delta_qp_in_val_minus1[ i ][ j ]</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;delta_qp_diff_val[ i ][ j ]</entry><entry>ue(v) </entry></row><row><entry>&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;sps_sao_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_alf_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_transform_skip_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_transform_skip_enabled_flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;sps_bdpcm_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_bdpcm_enabled_flag&#x2003;&#x26;&#x26;&#x2003;chroma_format_idc = = 3 ) </entry><entry/></row><row><entry>&#x2003;&#x2003;sps_bdpcm_chroma_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_ref_wraparound_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_ref_wraparound_enabled flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;sps_ref_wraparound_offset_minus1 </entry><entry>ue(v) </entry></row><row><entry>&#x2003;sps_temporal_mvp_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_temporal_mvp_enabled_flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;sps_sbtmvp_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_amvr_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_bdof_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_bdof_enabled_flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;sps_bdof_pic_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_smvd_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_dmvr_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_dmvr_enabled_flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;sps_dmvr_pic_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_mmvd_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_isp_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_mrl_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_mip_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( ChromaArrayType != 0 ) </entry><entry/></row><row><entry>&#x2003;&#x2003;sps_cclm_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( chroma_format_idc&#x2003;= =&#x2003;1 ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_chroma_horizontal_collocated_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;&#x2003;sps_chroma_vertical_collocated_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;sps_mts_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_mts_enabled_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_explicit_mts_intra_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;&#x2003;sps_explicit_mts_inter_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;sps_sbt_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_affine_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_affine_enabled_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_affine_type_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;&#x2003;sps_affine_amvr_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;&#x2003;sps_affine_prof_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;&#x2003;if( sps_affine_prof_enabled_flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;sps_prof_pic_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;if( chroma_format_idc&#x2003;= =&#x2003;3 ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_palette_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;&#x2003;sps_act_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;sps_bcw_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_ibc_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_ciip_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_mmvd_enabled_flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;sps_fpel_mmvd_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_triangle_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_lmcs_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_lfnst_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_ladf_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_ladf_enabled_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_num_ladf_intervals_minus2 </entry><entry>u(2) </entry></row><row><entry>&#x2003;&#x2003;sps_ladf_lowest_interval_qp_offset </entry><entry>se(v) </entry></row><row><entry>&#x2003;&#x2003;for( i = 0; i &#x3c; sps_num_ladf_intervals_minus2 + 1; i++ ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;sps_ladf_qp_offset[ i ]</entry><entry>se(v) </entry></row><row><entry>&#x2003;&#x2003;&#x2003;sps_ladf_delta_threshold_minus1[ i ]</entry><entry>ue(v) </entry></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;sps_scaling_list_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_loop_filter_across_virtual_boundaries_disabled_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_loop_filter_across_virtual_boundaries_disabled_present flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_num_ver_virtual_boundaries </entry><entry>u(2) </entry></row><row><entry>&#x2003;&#x2003;for( i = 0; i &#x3c; sps_num_ver_virtual_boundaries; i++ ) </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;sps_virtual_boundaries_pos_x[ i ]</entry><entry>u(13) </entry></row><row><entry>&#x2003;&#x2003;sps_num_hor_virtual_boundaries </entry><entry>u(2) </entry></row><row><entry>&#x2003;&#x2003;for( i = 0; i &#x3c; sps_num_hor_virtual_boundaries: i++ ) </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;sps_virtual_boundaries_pos_y[ i ]</entry><entry>u(13) </entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;if( sps_ptl_dpb_hrd_params_present_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_general_hrd_params_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;&#x2003;if( sps_general_hrd_params_present_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;general_hrd_parameters( ) </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;if( sps_max_sublayers_minus1 &#x3e; 0 ) </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;sps_sublayer_cpb_params_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;&#x2003;&#x2003;firstSubLayer = sps_sublayer_cpb_params_present flag ? 0 : </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;sps_max_sublayers_minus1 </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;ols_hrd_parameters( firstSubLayer, sps_max_sublayers_minus1 ) </entry><entry/></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;field_seq_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;vui_parameters_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( vui_parameters_present_flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;vui_parameters( ) /* Specified in ITU-T H.SEI | ISO/IEC 23002-7 */ </entry><entry/></row><row><entry>&#x2003;sps_extension_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_extension_flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;while( more_rbsp_data( ) ) </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;sps_extension_data_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;rbsp_trailing_bits( ) </entry><entry/></row><row><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><ul id="ul0026" list-style="none">    <li id="ul0026-0001" num="0000">    <ul id="ul0027" list-style="none">        <li id="ul0027-0001" num="0123">With respect to Table 3, JVET-P2001 provides the following semantics:</li>        <li id="ul0027-0002" num="0124">An SPS RBSP shall be available to the decoding process prior to it being referenced, included in at least one AU with TemporalId equal to 0 or provided through external means.</li>        <li id="ul0027-0003" num="0125">All SPS NAL units with a particular value of sps_seq_parameter_set_id in a CVS shall have the same content.</li>        <li id="ul0027-0004" num="0126">sps_decoding_parameter_set_id, when greater than 0, specifies the value of dps_decoding_parameter_set_id for the DPS referred to by the SPS. When sps_decoding_parameter_set_id is equal to 0, the SPS does not refer to a DPS and no DPS is referred to when decoding each CLVS referring to the SPS. The value of sps_decoding_parameter_set_id shall be the same in all SPSs that are referred to by coded pictures in a bitstream.</li>        <li id="ul0027-0005" num="0127">sps_video_parameter_set_id, when greater than 0, specifies the value of vps-video_parameter_set_id for the VPS referred to by the SPS.</li>        <li id="ul0027-0006" num="0128">When sps_video_parameter_set_id is equal to 0, the following applies:        <ul id="ul0028" list-style="none">            <li id="ul0028-0001" num="0129">The SPS does not refer to a VPS.</li>            <li id="ul0028-0002" num="0130">No VPS is referred to when decoding each CLVS referring to the SPS.</li>            <li id="ul0028-0003" num="0131">The value of vps_max_layers_minus1 is inferred to be equal to 0.</li>            <li id="ul0028-0004" num="0132">The CVS shall contain only one layer (i.e., all VCL NAL unit in the CVS shall have the same value of nuh_layer_id).</li>            <li id="ul0028-0005" num="0133">The value of GeneralLayerIdx[nuh_layer_id] is inferred to be equal to 0.</li>            <li id="ul0028-0006" num="0134">The value of vps_independent_layer_flag[GeneralLayerIdx[nuh_layer_id] ] is inferred to be equal to 1.</li>        </ul>        </li>        <li id="ul0027-0007" num="0135">When vps_independent_layer_flag[GeneralLayerIdx[nuh_layer_id] ] is equal to 1, the SPS referred to by a CLVS with a particular nuh_layer_id value nuhLayerId shall have nuh_layer_id equal to nuhLayerId.</li>        <li id="ul0027-0008" num="0136">sps_max_sublayers_minus1 plus 1 specifies the maximum number of temporal sublayers that may be present in each CLVS referring to the SPS. The value of sps_max_sublayers_minus1 shall be in the range of 0 to vps_max_sublayers_minus1, inclusive.</li>        <li id="ul0027-0009" num="0137">sps_reserved_zero_4 bits shall be equal to 0 in bitstreams conforming to this version of this Specification. Other values for sps_reserved_zero_4 bits are reserved for future use by ITU-T ISO/IEC.</li>        <li id="ul0027-0010" num="0138">sps_ptl_dpb_hrd_params_present_flag equal to 1 specifies that a profile_tier_level( ) syntax structure and a dpb_parameters( ) syntax structure are present in the SPS, and a general_hrd_parameters( ) syntax structure and an ols_hrd_parameters( ) syntax structure may also be present in the SPS. sps_ptl_dpb_hrd_params_present_flag equal to 0 specifies that none of these syntax structures is present in the SPS. The value of sps_ptl_dpb_hrd_params_present_flag shall be equal to vps_independent_layer_flag[nuh_layer_id].</li>    </ul>    </li></ul></p><p id="p-0058" num="0139">If vps_independent_layer_flag[GeneralLayerIdx[nuh_layer_id] ] is equal equal to 1, the variable MaxDecPicBuffMinus1 is set equal to max-dec_ic-buffering_minus1[sps_max_sublayers_minus1] in the dpb_parameters( ) syntax structure in the SPS. Otherwise, MaxDeePicBuffMinus1 is set equal to max_dec_pic_buffering_minus1[sps_max_sublayers_minus1] in the layer_nonoutput_dpb_params_idx[GeneralLayerIdx[nuh_layer_id]]-th dpb_parameters( ) syntax structure in the VPS.<ul id="ul0029" list-style="none">    <li id="ul0029-0001" num="0000">    <ul id="ul0030" list-style="none">        <li id="ul0030-0001" num="0140">gdr_enabled_flag equal to 1 specifies that GDR pictures may be present in CLVSs referring to the SPS. gdr_enabled_flag equal to 0 specifies that GDR pictures are not present in CLVSs referring to the SPS.</li>        <li id="ul0030-0002" num="0141">sps_seq_parameter_set_id provides an identifier for the SPS for reference by other syntax elements.</li>        <li id="ul0030-0003" num="0142">SPS NAL units, regardless of the nuh_layer_id values, share the same value space of sps_seq_parameter_set_id.</li>        <li id="ul0030-0004" num="0143">chroma_format_idc specifies the chroma sampling relative to the luma sampling as specified.</li>        <li id="ul0030-0005" num="0144">separate_colour_plane_flag equal to 1 specifies that the three colour components of the 4:4:4 chroma format are coded separately. separate_colourplane_flag equal to 0 specifies that the colour components are not coded separately. When separate_colour_plane_flag is not present, it is inferred to be equal to 0. When separate_colour_plane_flag is equal to 1, the coded picture consists of three separate components, each of which consists of coded samples of one colour plane (Y, Cb, or Cr) and uses the monochrome coding syntax. In this case, each colour plane is associated with a specific colour_plane_id value.        <ul id="ul0031" list-style="none">            <li id="ul0031-0001" num="0145">NOTE&#x2014;There is no dependency in decoding processes between the colour planes having different colour_plane_id values. For example, the decoding process of a monochrome picture with one value of colour_plane_id does not use any data from monochrome pictures having different values of colour_plane_id for inter prediction.</li>        </ul>        </li>        <li id="ul0030-0006" num="0146">Depending on the value of separate_colour_plane_flag, the value of the variable ChromaArrayType is assigned as follows:        <ul id="ul0032" list-style="none">            <li id="ul0032-0001" num="0147">If separate_colour_plane_flag is equal to 0, ChromaArrayType is set equal to chroma format ide.</li>            <li id="ul0032-0002" num="0148">Otherwise (separate colour_plane_flag is equal to 1), ChromaArrayType is set equal to 0.</li>        </ul>        </li>        <li id="ul0030-0007" num="0149">ref_pic_resampling_enabled_flag equal to 1 specifies that reference picture resampling may be applied when decoding coded pictures in the CLVSs referring to the SPS. ref_pic_resampling_enabled_flag equal to 0 specifies that reference picture resampling is not applied when decoding pictures in CLVSs referring to the SPS.</li>        <li id="ul0030-0008" num="0150">pic_width-max_in_luma_samples specifies the maximum width, in units of luma samples, of each decoded picture referring to the SPS.</li>        <li id="ul0030-0009" num="0151">pic_width_max_in_luma_samples shall not be equal to 0 and shall be an integer multiple of Max(8, MinCbSizeY).</li>        <li id="ul0030-0010" num="0152">pic_height_max_in_luma_samples specifies the maximum height, in units of luma samples, of each decoded picture referring to the SPS. pic_height_max_in_luma_samples shall not be equal to 0 and shall be an integer multiple of Max(8, MinCbSizeY).</li>        <li id="ul0030-0011" num="0153">sps_log2_ctu_size_minus5 plus 5 specifies the luma coding tree block size of each CTU. It is a requirement of bitstream conformance that the value of sps_log2_ctu_size_minus5 be less than or equal to 2.</li>        <li id="ul0030-0012" num="0154">The variables CtbLog2SizeY and CtbSizeY are derived as follows:</li>    </ul>    </li></ul></p><p id="p-0059" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>CtbLog2SizeY=sps_log2_ctu_size_minus5+5<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0060" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>CtbSizeY=1&#x3c;&#x3c;CtbLog2SizeY<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0033" list-style="none">    <li id="ul0033-0001" num="0000">    <ul id="ul0034" list-style="none">        <li id="ul0034-0001" num="0155">subpics_present_flag equal to 1 specifies that subpicture parameters are present in in the SPS RBSP syntax. subpics_present_flag equal to 0 specifies that subpicture parameters are not present in the SPS RBSP syntax.        <ul id="ul0035" list-style="none">            <li id="ul0035-0001" num="0156">NOTE&#x2014;When a bitstream is the result of a sub-bitstream extraction process and contains only a subset of the subpictures of the input bitstream to the sub-bitstream extraction process, it might be required to set the value of subpics_present_flag equal to 1 in the RBSP of the SPSs.</li>        </ul>        </li>        <li id="ul0034-0002" num="0157">sps_num_subpics_minus1 plus 1 specifies the number of subpictures. sps_num_subpics_minus1 shall be in the range of 0 to 254. When not present, the value of sps_num_subpics_minus1 is inferred to be equal to 0.</li>        <li id="ul0034-0003" num="0158">subpic_etu_top_left_x[i] specifies horizontal position of top left CTU of i-th subpicture in unit of CtbSizeY. The length of the syntax element is Ceil(Log2(pic_width_max_in_luma_samples/CtbSizeY)) bits. When not present, the value of subpic_ctu_top_left_x[i] is inferred to be equal to 0.</li>        <li id="ul0034-0004" num="0159">subpic_ctu_top_left_y[i] specifies vertical position of top left CTU of i-th subpicture in unit of CtbSizeY. The length of the syntax element is Ceil(Log2(pic_height_max_in_luma_samples/CtbSizeY)) bits. When not present, the value of subpic_etu_topjleft_y[i] is inferred to be equal to 0.</li>        <li id="ul0034-0005" num="0160">subpic_width_minus1[i] plus 1 specifies the width of the i-th subpicture in units of CtbSizeY. The length of the syntax element is Ceil(Log2(pic_width_max_in_luma_samples/CtbSizeY)) bits. When not present, the value of subpic_width_minus1[i] is inferred to be equal to Ceil(pic_width_max_in_luma_samples/CtbSizeY)&#x2212;1.</li>        <li id="ul0034-0006" num="0161">subpic_height_minus1[i] plus 1 specifies the height of the i-th subpicture in units of CtbSizeY. The length of the syntax element is Ceil(Log2(pic_height_max_in_luma_samples/CtbSizeY)) bits. When not present, the value of subpic_height_minus1[i] is inferred to be equal to Ceil(pic_height_max_in_luma_samples/CtbSizeY)&#x2212;1.</li>        <li id="ul0034-0007" num="0162">subpic_treated_as_pic_flag[i] equal to 1 specifies that the i-th subpicture of each coded picture in the CLVS is treated as a picture in the decoding process excluding in-loop filtering operations. subpic_treated_as_pic_flag[i] equal to 0 specifies that the i-th subpicture of each coded picture in the CLVS is not treated as a picture in the decoding process excluding in-loop filtering operations. When not present, the value of subpic_treated_as_pic_flag[i] is inferred to be equal to 0.</li>        <li id="ul0034-0008" num="0163">loop_filter_across_subpic_enabled_flag[i] equal to 1 specifies that in-loop filtering operations may be performed across the boundaries of the i-th subpicture in each coded picture in the CLVS. loop_filter_across_subpic_enabled_flag[i] equal to 0 specifies that in-loop filtering operations are not performed across the boundaries of the i-th subpicture in each coded picture in the CLVS. When not present, the value of loop filter_across_subpic_enabled_pic_flag[i] is inferred to be equal to 1. It is a requirement of bitstream conformance that the following constraints apply:        <ul id="ul0036" list-style="none">            <li id="ul0036-0001" num="0164">For any two subpictures subpicA and subpicB, when the subpicture index of subpicA is less than that of subpicB, any coded slice NAL unit of subPicA shall precede any coded slice NAL unit of subPicB in decoding order.</li>            <li id="ul0036-0002" num="0165">The shapes of the subpictures shall be such that each subpicture, when decoded, shall have its entire left boundary and entire top boundary consisting of picture boundaries or consisting of boundaries of previously decoded subpictures.</li>        </ul>        </li>        <li id="ul0034-0009" num="0166">sps_subpic_id_present_flag equal to 1 specifies that subpicture ID mapping is present in the SPS. sps_subpic_id_present_flag equal to 0 specifies that subpicture ID mapping is not present in the SPS.</li>        <li id="ul0034-0010" num="0167">sps-subpic_id_signalling_present_flag equal to 1 specifies that subpicture ID mapping is signalled in the SPS. sps_subpic_id_signalling_present flag equal to 0 specifies that subpicture ID mapping is not signalled in the SPS. When not present, the value of sps_subpic_id_signalling_present_flag is inferred to be equal to 0.</li>        <li id="ul0034-0011" num="0168">sps_subpic_id_len_minus1 plus 1 specifies the number of bits used to represent the syntax element sps_subpic_d[i]. The value of sps_subpic_id_len_minus1 shall be in the range of 0 to 15, inclusive.</li>        <li id="ul0034-0012" num="0169">sps_subpic_id[i] specifies that subpicture ID of the i-th subpicture. The length of the sps_subpic_id[i] syntax element is sps_subpic_id_len_minus1+1 bits. When not present, and when sps_subpic_id_present_flag equal to 0, the value of sps_subpic_id[i] is inferred to be equal to i, for each i in the range of 0 to sps_num subpics_minus1, inclusive</li>        <li id="ul0034-0013" num="0170">bit_depth_minus8 specifies the bit depth of the samples of the luma and chroma arrays, BitDepth, and the value of the luma and chroma quantization parameter range offset, QpBdOffset, as follows:</li>    </ul>    </li></ul></p><p id="p-0061" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>BitDepth=8+bit_depth_minus8<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0062" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>QpBdOffset=6*bit_depth_minus8<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0037" list-style="none">    <li id="ul0037-0001" num="0000">    <ul id="ul0038" list-style="none">        <li id="ul0038-0001" num="0171">bit_depth_minus8 shall be in the range of 0 to 8, inclusive.</li>        <li id="ul0038-0002" num="0172">min_qp_rime_ts_minus4 specifies the minimum allowed quantization parameter for transform skip mode as follows:</li>    </ul>    </li></ul></p><p id="p-0063" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>QpPrimeTsMin=4+min_qp_prime_ts_minus4<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0039" list-style="none">    <li id="ul0039-0001" num="0000">    <ul id="ul0040" list-style="none">        <li id="ul0040-0001" num="0173">The value of min_qp_prime_ts_minus4 shall be in the range of 0 to 48, inclusive.</li>        <li id="ul0040-0002" num="0174">sps_weightedpred-flag equal to 1 specifies that weighted prediction may be applied to P slices referring to the SPS. sps_weighted_pred_flag equal to 0 specifies that weighted prediction is not applied to P slices referring to the SPS.</li>        <li id="ul0040-0003" num="0175">sps_weighted_bipred_flag equal to 1 specifies that explicit weighted prediction may be applied to B slices referring to the SPS. sps_weighted bipred_flag equal to 0 specifies that explicit weighted prediction is not applied to B slices referring to the SPS.</li>        <li id="ul0040-0004" num="0176">log2_max_pic_order_cnt_lsb_minus4 specifies the value of the variable MaxPicOrderCntLsb that is used in the decoding process for picture order count as follows:</li>    </ul>    </li></ul></p><p id="p-0064" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MaxPicOrderCntLsb=2<sup>(log2_max_ric_order_cnt_isb_minus4+4) </sup><?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0041" list-style="none">    <li id="ul0041-0001" num="0000">    <ul id="ul0042" list-style="none">        <li id="ul0042-0001" num="0177">The value of log2_max_pic_order_cnt_lsb_minus4 shall be in the range of 0 to 12, inclusive.</li>        <li id="ul0042-0002" num="0178">sps_poc_msb_flag equal to 1 specifies that the ph_poc_msb_cycle_present_flag syntax element is present in PHs referring to the SPS. sps_poc_msb_flag equal to 0 specifies that the ph_poc_msb_cycle_present_flag syntax element is not present in PHs referring to the SPS.</li>        <li id="ul0042-0003" num="0179">poc_msb_len_minus1 plus 1 specifies the length, in bits, of the poc_msb_val syntax elements, when present in the PHs referring to the SPS. The value of poc_msb_len_minus1 shall be in the range of 0 to 32&#x2212;log2_max_pic_order_ent_lsb_minus4&#x2212;5, inclusive.</li>        <li id="ul0042-0004" num="0180">sps_sublayer_dpb_params_flag is used to control the presence of max_dec_pic_buffering_minus1[i], max_num_reorder_pics[i], and max_latency_increase_plus1[i] syntax elements in the dpb_parameters( ) syntax strucure in the SPS. When not present, the value of sps-sub_dpb_params_info_present_flag is inferred to be equal to 0.</li>        <li id="ul0042-0005" num="0181">long_term_ref_pics_flag equal to 0 specifies that no LTRP is used for inter prediction of any coded picture in the CLVS. long_term_ref_pics_flag equal to 1 specifies that LTRPs may be used for inter prediction of one or more coded pictures in the CLVS.</li>        <li id="ul0042-0006" num="0182">inter_layer_ref_pics_present_flag equal to 0 specifies that no ILRP is used for inter prediction of any coded picture in the CLVS. inter_layer_ref pics_flag equal to 1 specifies that ILRPs may be used for inter prediction of one or more coded pictures in the CLVS. When sps_video_parameter_set_id is equal to 0, the value of inter_layer_ref pics_present_flag is inferred to be equal to 0. When vps_independent_layer_flag[GeneralLayerIdx[nuh_layer_id] ] is equal to 1, the value of inter-layer-ref_pics_present_flag shall be equal to 0.</li>        <li id="ul0042-0007" num="0183">sps_idr_rpl_present_flag equal to 1 specifies that reference picture list syntax elements are present in slice headers of IDR pictures. sps_idr_rpl_present_flag equal to 0 specifies that reference picture list syntax elements are not present in slice headers of IDR pictures.</li>        <li id="ul0042-0008" num="0184">rpl1_same_as_rpl0_flag equal to 1 specifies that the syntax element num_ref_pic_lists_in_sps[1] and the syntax structure ref_pic_list_struct(1, rplsIdx) are not present and the following applies:        <ul id="ul0043" list-style="none">            <li id="ul0043-0001" num="0185">The value of num_ref_pic_lists_in_sps[1] is inferred to be equal to the value of num_ref_pic_lists_in_sps[0].</li>            <li id="ul0043-0002" num="0186">The value of each of syntax elements in ref_pic_list_struct(1, rplsIdx) is inferred to be equal to the value of corresponding syntax element in ref_pic_list_struct(0, rplsIdx) for rplsIdx ranging from 0 to num_ref_pic_lists in_sps[0]&#x2212;1.</li>        </ul>        </li>        <li id="ul0042-0009" num="0187">num_ref_pic-lists_in_sps[i] specifies the number of the ref_pic_list_struct(listIdx, rplsIdx) syntax structures with listIdx equal to i included in the SPS. The value of num_ref_pic_lists_in_sps[i] shall be in the range of 0 to 64, inclusive.        <ul id="ul0044" list-style="none">            <li id="ul0044-0001" num="0188">NOTE&#x2014;For each value of listIdx (equal to 0 or 1), a decoder should allocate memory for a total number of num_ref_pic_lists_in_sps[i]+1 ref_pic_list_struct(listIdx, rplsIdx) syntax structures since there may be one ref_pic_list_struct(listIdx, rplsIdx) syntax structure directly signalled in the slice headers of a current picture.</li>        </ul>        </li>        <li id="ul0042-0010" num="0189">qtbtt_dual_tree_intra_flag equal to 1 specifies that for I slices, each CTU is split into coding units with 64&#xd7;64 luma samples using an implicit quadtree split and that these coding units are the root of two separate coding_tree syntax structure for luma and chroma. qtbtt_dual_tree_intra_flag equal to 0 specifies separate coding_tree syntax structure is not used for I slices. When qtbtt-dual_tree_intra_flag is not present, it is inferred to be equal to 0.</li>        <li id="ul0042-0011" num="0190">log2_min_luma_coding_block_size_minus2 plus 2 specifies the minimum luma coding block size. The value range of log2_min_luma_coding_block_size_minus2 shalll be in the range of 0 to log2_ctu_size_minus5+3, inclusive.</li>        <li id="ul0042-0012" num="0191">The variables MinCbLog2SizeY, MinCbSizeY, IbcBufWidthY, IbcBufWidthC and Vsize are derived as follows:</li>    </ul>    </li></ul></p><p id="p-0065" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MinCbLog2SizeY=log2_min_luma_coding block_size_minus2+2<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0066" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MinCbSizeY=1&#x3e;&#x3e;MinCbLog2SizeY<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0067" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>IbcBufWidthY=256*128/CtbSizeY<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0068" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>IbcBufWidthC=IbcBufWidthY/SubWidthC<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0069" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>VSize=Min(64,CtbSizeY)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0045" list-style="none">    <li id="ul0045-0001" num="0000">    <ul id="ul0046" list-style="none">        <li id="ul0046-0001" num="0192">The value of MinCbSizeY shall less than or equal to VSize.</li>        <li id="ul0046-0002" num="0193">The variables CtbWidthC and CtbHeightC, which specify the width and height, respectively, of the array for each chroma CTB, are derived as follows:        <ul id="ul0047" list-style="none">            <li id="ul0047-0001" num="0194">If chroma_format_idc is equal to 0 (monochrome) or separate colour_plane flag is equal to 1, CtbWidthC and CtbHeightC are both equal to 0.</li>            <li id="ul0047-0002" num="0195">Otherwise, CtbWidthC and CtbHeightC are derived as follows:</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0070" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>CtbWidthC=CtbSizeY/SubWidthC<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0071" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>CtbHeightC=CtbSizeY/SubHeightC<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0048" list-style="none">    <li id="ul0048-0001" num="0000">    <ul id="ul0049" list-style="none">        <li id="ul0049-0001" num="0196">For log2BlockWidth ranging from 0 to 4 and for log2BlockHeight ranging from 0 to 4, inclusive, the up-right diagonal and raster scan order array initialization process as specified is invoked with 1&#x3c;&#x3c;log2BlockWidth and 1&#x3c;&#x3c;log2BlockHeight as inputs, and the output is assigned to DiagScanOrder[log2BlockWidth][log2BlockHeight]. For log2BlockWidth ranging from 0 to 6 and for log2BlockHeight ranging from 0 to 6, inclusive, the horizontal and vertical traverse scan order array initialization process as specified is invoked with 1&#x3c;&#x3c;log2BlockWidth and 1&#x3c;&#x3c;log2BlockHeight as inputs, and the output is assigned to HorTravScanOrder[log2BlockWidth][log2BlockHeight] and VerTravScanOrder[log2BlockWidth][log2BlockHeight].</li>        <li id="ul0049-0002" num="0197">partition_constraints_override_enabled_flag equal to 1 specifies the presence of partition_constraints_override_flag in PHs referring to the SPS. partition_constraints_override_enabled_flag equal to 0 specifies the absence of partition_constraints_override_flag in PHs referring to the SPS.</li>        <li id="ul0049-0003" num="0198">sps_log2_dif_min_qt_min_cb_intra_slice_luma specifies the default difference between the base 2 logarithm of the minimum size in luma samples of a luma leaf block resulting from quadtree splitting of a CTU and the base 2 logarithm of the minimum coding block size in luma samples for luma CUs in slices with slice_type equal to 2 (I) referring to the SPS. When partition constraints_override_enabled_flag is equal to 1, the default difference can be overridden by pic_log2_diff_min_qt_min_cb_luma present in PHs referring to the SPS. The value of sps_log2_diff_min_qt_min_cb_intra_slice_luma shall be in the range of 0 to CtbLog2SizeY&#x2212;MinCbLog2SizeY, inclusive. The base 2 logarithm of the minimum size in luma samples of a luma leaf block resulting from quadtree splitting of a CTU is derived as follows:</li>    </ul>    </li></ul></p><p id="p-0072" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MinQtLog2SizeIntraY=sps_log2_diff_min_qt_min_cb_intra_slice_luma+MinCbLog2SizeY<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0050" list-style="none">    <li id="ul0050-0001" num="0000">    <ul id="ul0051" list-style="none">        <li id="ul0051-0001" num="0199">sps_log2_dif_min_qt_min_cb_inter_slice specifies the default difference between the base 2 logarithm of the minimum size in luma samples of a luma leaf block resulting from quadtree splitting of a CTU and the base 2 logarithm of the minimum luma coding block size in luma samples for luma CUs in slices with slice_type equal to 0 (B) or 1 (P) referring to the SPS. When partition_constraints_override_enabled_flag is equal to 1, the default difference can be overridden by pic_log2_diff_min_qt_min_cb-luma present in PHs referring to the SPS. The value of sps_log2_diff_min_qt_min_cb_inter-slice shall be in the range of 0 to CtbLog2SizeY&#x2212;MinCbLog2SizeY, inclusive. The base 2 logarithm of the minimum size in luma samples of a luma leaf block resulting from quadtree splitting of a CTU is derived as follows:</li>    </ul>    </li></ul></p><p id="p-0073" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MinQtLog2SizeInterY=sps log2_diff_min_qt_min_cb_inter_slice+MinCbLog2SizeY<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0052" list-style="none">    <li id="ul0052-0001" num="0000">    <ul id="ul0053" list-style="none">        <li id="ul0053-0001" num="0200">sps_max_mtt_hierarchy_depth_inter_slice specifies the default maximum hierarchy depth for coding units resulting from multi-type tree splitting of a quadtree leaf in slices with slice_type equal to 0 (B) or 1 (P) referring to the SPS. When partition_constraints_override_enabled_flag is equal to 1, the default maximum hierarchy depth can be overridden by pic_max_mtt_hierarchy_depth_inter_slice present in PHs referring to the SPS. The value of sps_max_mtt_hierarchy_depth_inter_slice shall be in the range of 0 to 2*(CtbLog2SizeY&#x2212;MinCbLog2SizeY), inclusive.</li>        <li id="ul0053-0002" num="0201">sps_max_mtt_hierarchy-depth_intra_slice_luma specifies the default maximum hierarchy depth for coding units resulting from multi-type tree splitting of a quadtree leaf in slices with slice_type equal to 2 (I) referring to the SPS. When partition_constraints_override_enabled_flag is equal to 1, the default maximum hierarchy depth can be overridden by pic_max_mtt_hierarchy_depth_intra_slice_luma present in PHs referring to the SPS. The value of sps_max_mtt_hierarchy_depth_intra_slice_luma shall be in the range of 0 to 2*(CtbLog2SizeY&#x2212;MinCbLog2SizeY), inclusive.</li>        <li id="ul0053-0003" num="0202">sps_log2-diffmax_bt_min_qt_intra_slice_luma specifies the default difference between the base 2 logarithm of the maximum size (width or height) in luma samples of a luma coding block that can be split using a binary split and the minimum size (width or height) in luma samples of a luma leaf block resulting from quadtree splitting of a CTU in slices with slice-type equal to 2 (I) referring to the SPS. When partition_constraints_override_enabled_flag is equal to 1, the default difference can be overridden by pic_log2_diff_max_bt_min_qt_luma present in PHs referring to the SPS. The value of sps_log2_diff_max_bt_min_qt_intra slice_luma shall be in the range of 0 to CtbLog2SizeY&#x2212;MinQtLog2SizeIntraY, inclusive. When sps_log2_diff_max_bt_min_qt_intra_slice_luma is not present, the value of sps_log2_diff_max bt_min_qt_intra_slice_luma is inferred to be equal to 0.</li>        <li id="ul0053-0004" num="0203">sps_log2_diff_max_tt_min_qt_intra_slice_luma specifies the default difference between the base 2 logarithm of the maximum size (width or height) in luma samples of a luma coding block that can be split using a ternary split and the minimum size (width or height) in luma samples of a luma leaf block resulting from quadtree splitting of a CTU in slices with slice_type equal to 2 (I) referring to the SPS. When partition_constraints_override_enabled_flag is equal to 1, the default difference can be overridden by pic_log2_diff_max_tt_min_qt_luma present in PHs referring to the SPS. The value of sps_log2_diff_max_tt_min_qt_intra_slice_luma shall be in the range of 0 to CtbLog2SizeY&#x2212;MinQtLog2SizeIntraY, inclusive. When sps_log2_diff_max_tt_mi_qt_intraslice_luma is not present, the value of sps_log2_diff_max_tt_min qt_intra_slice_luma is inferred to be equal to 0.</li>        <li id="ul0053-0005" num="0204">sps_log2_diff_max_bt_min_qt_inter_slice specifies the default difference between the base 2 logarithm of the maximum size (width or height) in luma samples of a luma coding block that can be split using a binary split and the minimum size (width or height) in luma samples of a luma leaf block resulting from quadtree splitting of a CTU in slices with slice_type equal to 0 (B) or 1 (P) referring to the SPS. When partition_constraints_override_enabled_flag is equal to 1, the default difference can be overridden by pic_log2_diff_max_bt_min-qt_luma present in PHs referring to the SPS. The value of sps_log2 diff_max_bt_min_qt_inter_slice shall be in the range of 0 to CtbLog2SizeY&#x2212;MinQtLog2SizeInterY, inclusive. When sps_log2_diff_max_bt_min_qt_inter_slice is not present, the value of sps_log2_diff_max_bt_min_qt_inter_slice is inferred to be equal to 0.</li>        <li id="ul0053-0006" num="0205">sps_log2_diff_max_tt_min_qt_inter_slice specifies the default difference between the base 2 logarithm of the maximum size (width or height) in luma samples of a luma coding block that can be split using a ternary split and the minimum size (width or height) in luma samples of a luma leaf block resulting from quadtree splitting of a CTU in slices with slice_type equal to 0 (B) or 1 (P) referring to the SPS. When partition_constraints_override_enabled-flag is equal to 1, the default difference can be overridden by pic_log2_diff_max_tt_min_qt_luma present in PHs referring to the SPS. The value of sps_log2_diff_max_tt_min_qt_inter_slice shall be in the range of 0 to CtbLog2SizeY&#x2212;MinQtLog2SizeInterY, inclusive. When sps_log2_diff_max_tt_min_qt_inter_slice is not present, the value of sps_log2_diff_max_tt_min_qt_inter_slice is inferred to be equal to 0.</li>        <li id="ul0053-0007" num="0206">sps_log2_diff_min_qt_min_cb_intra_slice_chroma specifies the default difference between the base 2 logarithm of the minimum size in luma samples of a chroma leaf block resulting from quadtree splitting of a chroma CTU with treeType equal to DUAL_TREE_CHROMA and the base 2 logarithm of the minimum coding block size in luma samples for chroma CUs with treeType equal to DUAL_TREE_CHROMA in slices with slice_type equal to 2 (I) referring to the SPS. When partition_constraints_override_enabled_flag is equal to 1, the default difference can be overridden by pic_log2_diff_min_qtmin_cb_chroma present in PHs referring to the SPS. The value of sps_log2_dif min_qtmin_cb_intra_slice_chroma shall be in the range of 0 to CtbLog2SizeY&#x2212;MinCbLog2SizeY, inclusive. When not present, the value of sps_log2_diff_min_qt_min_cb_intra_slice_chroma is inferred to be equal to 0. The base 2 logarithm of the minimum size in luma samples of a chroma leaf block resulting from quadtree splitting of a CTU with treeType equal to DUAL_TREE_CHROMA is derived as follows:</li>    </ul>    </li></ul></p><p id="p-0074" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MinQtLog2SizeIntraC=sps log2_diff_min_qt_min_cb_intra_slice_chroma+MinCbLog2SizeY<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0054" list-style="none">    <li id="ul0054-0001" num="0000">    <ul id="ul0055" list-style="none">        <li id="ul0055-0001" num="0207">spa_max_mtt_hierarchy_depth_intra_slice_chroma specifies the default maximum hierarchy depth for chroma coding units resulting from multi-type tree splitting of a chroma quadtree leaf with treeType equal to DUAL_TREE_CHROMA in slices with slice_type equal to 2 (I) referring to the SPS. When partition_constraints_override_enabled_flag is equal to 1, the default maximum hierarchy depth can be overridden by pic_max_mtt_hierarchy_depth_chroma present in PHs referring to the SPS. The value of sps_max_mtt_hierarchy_depth_intra_slice_chroma shall be in the range of 0 to 2*(CtbLog2SizeY&#x2212;MinCbLog2SizeY), inclusive. When not present, the value of sps_max mtt_hierarchy_depth_intra_slice_chroma is inferred to be equal to 0.</li>        <li id="ul0055-0002" num="0208">sps_log2_diff_max_bt_min_qt_intra_slice_chroma specifies the default difference between the base 2 logarithm of the maximum size (width or height) in luma samples of a chroma coding block that can be split using a binary split and the minimum size (width or height) in luma samples of a chroma leaf block resulting from quadtree splitting of a chroma CTU with treeType equal to DUAL_TREE_CHROMA in slices with slice_type equal to 2 (I) referring to the SPS. When partition constraints_override_enabled_flag is equal to 1, the default difference can be overridden by pic_log2_diff_max_bt_min_qt_chroma present in PHs referring to the SPS. The value of sps_log2_diff_max_bt_min_qt_intra_slice_chroma shall be in the range of 0 to CtbLog2SizeY&#x2212;MinQtLog2SizeIntraC, inclusive. When sps_log2_diff_max_bt_min qt_intra_slice_chroma is not present, the value of sps_log2_diff_max_bt_min_qt_intra_slice_chroma is inferred to be equal to 0.</li>        <li id="ul0055-0003" num="0209">sps_log2_diff_max_tt_min_qt_intra_slice_chroma specifies the default difference between the base 2 logarithm of the maximum size (width or height) in luma samples of a chroma coding block that can be split using a ternary split and the minimum size (width or height) in luma samples of a chroma leaf block resulting from quadtree splitting of a chroma CTU with treeType equal to DUAL_TREE_CHROMA in slices with slice_type equal to 2 (I) referring to the SPS. When partition_constraints_override_enabled_flag is equal to 1, the default difference can be overridden by pic_log2_diff_max_tt_min_qt_chroma present in PHs referring to the SPS. The value of sps_log2_diff_max_tt_min_qt_intra_slice_chroma shall be in the range of 0 to CtbLog2SizeY&#x2212;MinQtLog2SizeIntraC, inclusive. When sps_log2_diff_max_tt_min_qt_intra_slice_chroma is not present, the value of sps_log2_diff_max_tt_min_qt_intra slice_chroma is inferred to be equal to 0.</li>        <li id="ul0055-0004" num="0210">sps_max_luma_transform_size_64_flag equal to 1 specifies that the maximum transform size in luma samples is equal to 64. sps_max_luma_transform_size_64_flag equal to 0 specifies that the maximum transform size in luma samples is equal to 32. When CtbSizeY is less than 64, the value of sps_max_luma_transform_size_64_flag shall be equal to 0.</li>    </ul>    </li></ul></p><p id="p-0075" num="0211">The variables MinTbLog2SizeY, MaxTbLog2SizeY, MinTbSizeY, and MaxTbSizeY are derived as follows:</p><p id="p-0076" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MinTbLog2SizeY=2<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0077" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MaxTbLog2SizeY=sps_max_luma_transfonn_size_64_flag ?6:5<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0078" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MinTbSizeY=1&#x3c;&#x3c;MinTbLog2SizeY<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0079" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MaxTbSizeY=1&#x3c;&#x3c;MaxTbLog2SizeY<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0056" list-style="none">    <li id="ul0056-0001" num="0000">    <ul id="ul0057" list-style="none">        <li id="ul0057-0001" num="0212">spsjoint_cbcr_enabled_flag equal to 0 specifies that the joint coding of chroma residuals is disabled. sps_joint_cbcr_enabled_flag equal to 1 specifies that the joint coding of chroma residuals is enabled.</li>        <li id="ul0057-0002" num="0213">same_qp_table_for_chroma equal to 1 specifies that only one chroma QP mapping table is signalled and this table applies to Cb and Cr residuals and additionally to joint Cb-Cr residuals when sps_joint_cbcr_enabled_flag is equal to 1. same_qp_table_for_chroma equal to 0 specifies that chroma QP mapping tables, two for Cb and Cr, and one additional for joint Cb-Cr when sps_joint_cbcr_enabled_flag is equal to 1, are signalled in the SPS. When same_qp_table_for_chroma is not present in the bitstream, the value of same_qp_table_for_chroma is inferred to be equal to 1.</li>        <li id="ul0057-0003" num="0214">qp_table_start_minus26[i] plus 26 specifies the starting luma and chroma QP used to describe the i-th chroma QP mapping table. The value of qp_table_start_minus26[i] shall be in the range of &#x2212;26-QpBdOffset to 36 inclusive. When qp_table_start_minus26[i] is not present in the bitstream, the value of qp_table_start_minus26[i] is inferred to be equal to 0.</li>        <li id="ul0057-0004" num="0215">numpoints_in_qp_table_minus1[i] plus 1 specifies the number of points used to describe the i-th chroma QP mapping table. The value of</li>        <li id="ul0057-0005" num="0216">num_points_in_qp_table_minus1[i] shall be in the range of 0 to 63+QpBdOffset, inclusive. When numpoints_in_qp_table_minus1[0] is not present in the bitstream, the value of num-points_in_qp_table_minus1[0] is inferred to be equal to 0.</li>        <li id="ul0057-0006" num="0217">delta_qp_in_val_minus1[i][j] specifies a delta value used to derive the input coordinate of the j-th pivot point of the i-th chroma QP mapping table. When delta_qp_in_val_minus1[0][j] is not present in the bitstream, the value of delta_qp_in_val_minus1[0][j] is inferred to be equal to 0.</li>        <li id="ul0057-0007" num="0218">delta_qp_diff_val[i][j] specifies a delta value used to derive the output coordinate of the j-th pivot point of the i-th chroma QP mapping table.</li>        <li id="ul0057-0008" num="0219">The i-th chroma QP mapping table ChromaQpTable[i] for i=0 . . . numQpTables&#x2212;1 is derived as follows:</li>        <li id="ul0057-0009" num="0220">qpInVal[i][0]=&#x2014;qp-table_start_minus26[i]+26</li>        <li id="ul0057-0010" num="0221">qpOutVal[i][0]=qpInVal[i][0]</li>    </ul>    </li></ul></p><p id="p-0080" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>for (j=0; j&#x3c;=num_points_in_qp_table_minus1[i]; j++) {qpInVal[i][j+1]=qpInVal[i][j]+delta_qp_in_val_minus1[i][j]+1 qpOutVal[i][j+1]=qpOutVal[i][j]+(delta qp_in_val_minus1[i][j]{circumflex over (&#x2003;)}delta_qp_diff_val[i][j])}<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0058" list-style="none">    <li id="ul0058-0001" num="0000">    <ul id="ul0059" list-style="none">        <li id="ul0059-0001" num="0222">ChromaQpTable[i][qpInVal[i][0] ]=qpOutVal[i][0]</li>        <li id="ul0059-0002" num="0223">for (k=qpInVal[i][0]&#x2212;1; k&#x3e;=&#x2014;QpBdOffset; k&#x2212;&#x2212;)</li>    </ul>    </li></ul></p><p id="p-0081" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>ChromaQpTable[i][k]=Clip3(&#x2212;QpBdOffset, 63, ChromaQpTable[i][k+1]&#x2212;1)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0060" list-style="none">    <li id="ul0060-0001" num="0000">    <ul id="ul0061" list-style="none">        <li id="ul0061-0001" num="0224">for (j=0; j&#x3c;+num_points in_qp_table_minus1[i]; j++) {sh=(delta_qp_in_val_minus1[i][j]+1)&#x3e;&#x3e;1</li>    </ul>    </li></ul></p><p id="p-0082" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>for (k=qpInVal[i][j]+1, m=1; k&#x3c;=qpInval[i][j+1]; k++, m++)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0083" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>ChromaQpTable[i][k]=ChromaQpTable[i][qpInVal[i][j]]+((qpOutVal[i][j+1]&#x2212;qpOutVal[i][j])*m+sh)/(delta_qp_in_val minus1[i][j]+1) }<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0062" list-style="none">    <li id="ul0062-0001" num="0000">    <ul id="ul0063" list-style="none">        <li id="ul0063-0001" num="0225">for (k=qpInVal[i][num_points_in_qp_table_minus1[i]+1]+1; k&#x3c;=63; k++) ChromaQpTable[i][k]=Clip3(&#x2212;QpBdOffset, 63, ChromaQpTable[i][k&#x2212;1]+1)</li>        <li id="ul0063-0002" num="0226">When same_qp_table_for_chroma is equal to 1, ChromaQpTable[1][k] and ChromaQpTable[2][k] are set equal to ChromaQpTable[0][k] for k=&#x2212;QpBdOffset . . . 63.</li>        <li id="ul0063-0003" num="0227">It is a requirement of bitstream conformance that the values of qpInVal[i][j] and qpOutVal[i][j] shall be in the range of&#x2212;QpBdOffset to 63, inclusive for i=0 . . . numQpTables&#x2212;1 and j=0 . . . num_points_in_qp_table_minus1[i]+1.</li>        <li id="ul0063-0004" num="0228">sps_sao_enabled_flag equal to 1 specifies that the sample adaptive offset process is applied to the reconstructed picture after the deblocking filter process. sps_sao_enabled_flag equal to 0 specifies that the sample adaptive offset process is not applied to the reconstructed picture after the deblocking filter process.</li>        <li id="ul0063-0005" num="0229">sps_alf_enabled_flag equal to 0 specifies that the adaptive loop filter is disabled. sps_alf_enabled_flag equal to 1 specifies that the adaptive loop filter is enabled.</li>        <li id="ul0063-0006" num="0230">sps_transform_skip_enabled_flag equa to 1 specifies that transform_skip_flag may be present in the transform unit syntax. sps_transform_skip_enabled_flag equal to 0 specifies that transform_skip_lag is not present in the transform unit syntax</li>        <li id="ul0063-0007" num="0231">sps_bdpcm_enabled_flag equal to 1 specifies that intra_bdpcm_luma_flag may be present in the coding unit syntax for intra coding units. sps_bdpcm_enabled_flag equal to 0 specifies that intra_bdpcm_luma_flag is not present in the coding unit syntax for intra coding units. When not present, the value of sps_bdpcm_enabled_flag is inferred to be equal to 0.</li>        <li id="ul0063-0008" num="0232">sps_bdpcm_chroma_enabled_flag equal to 1 specifies that intra_bdpcm_chroma_flag may be present in the coding unit syntax for intra coding units. sps_bdpcm_chroma_enabled_flag equal to 0 specifies that intra_bdpcm_chroma_flag is not present in the coding unit syntax for intra coding units. When not present, the value of sps_bdpcm_chroma_enabled_flag is inferred to be equal to 0.</li>        <li id="ul0063-0009" num="0233">sps_ref_wraparound_enabled_flag equal to 1 specifies that horizontal wrap-around motion compensation is applied in inter prediction. sps_ref_wraparound_enabled_flag equal to 0 specifies that horizontal wrap-around motion compensation is not applied. When the value of (CtbSizeY/MinCbSizeY+1) is less than or equal to (pic_width_in_luma_samples/MinCbSizeY&#x2212;1), where pic_width_in_luma_samples is the value of pic_width_in_luma_samples in any PPS that refers to the SPS, the value of sps_ref_wraparound_enabled_flag shall be equal to 0.</li>        <li id="ul0063-0010" num="0234">sps_ref_wraparound_offset_minus1 plus 1 specifies the offset used for computing the horizontal wrap-around position in units of MinCbSizeY luma samples. The value of ref_wraparound_offset_minus1 shall be in the range of (CtbSizeY/MinCbSizeY)+1 to (pic_width_in_luma_samples/MinCbSizeY)&#x2212;1, inclusive, where pic_width_in_luma_samples is the value of pic_width_in_luma_samples in any PPS that refers to the SPS.</li>        <li id="ul0063-0011" num="0235">sps_temporal_mvp_enabled_flag equal to 1 specifies that temporal motion vector predictors may be used in the CLVS. sps_temporal_mvp_enabled_flag equal to 0 specifies that temporal motion vector predictors are not used in the CLVS.</li>        <li id="ul0063-0012" num="0236">sps_sbtmvp_enabled_flag equal to 1 specifies that subblock-based temporal motion vector predictors may be used in decoding of pictures with all slices having slice_type not equal to I in the CLVS. sps_sbtmvp_enabled_flag equal to 0 specifies that subblock-based temporal motion vector predictors are not used in the CLVS. When sps_sbtmvp_enabled_flag is not present, it is inferred to be equal to 0.</li>        <li id="ul0063-0013" num="0237">sps_amvr_enabled_flag equal to 1 specifies that adaptive motion vector difference resolution is used in motion vector coding. amvr_enabled_flag equal to 0 specifies that adaptive motion vector difference resolution is not used in motion vector coding.</li>        <li id="ul0063-0014" num="0238">sps_bdof_enabled_flag equal to 0 specifies that the bi-directional optical flow inter prediction is disabled. sps_bdof_enabled_flag equal to 1 specifies that the bi-directional optical flow inter prediction is enabled.</li>        <li id="ul0063-0015" num="0239">sps_bdof_pic_present_flag equal to 1 specifies that pic_disable_bdof_flag is present in PHs referring to the SPS. sps_bdof_pic_present_flag equal to 0 specifies that pic_disable_bdof_flag is not present in PHs referring to the SPS. When sps_bdof_pic_present_flag is not present, the value of sps_bdof_pic_present_flag is inferred to be equal to 0.</li>        <li id="ul0063-0016" num="0240">sps_smvd_enabled_flag equal to 1 specifies that symmetric motion vector difference may be used in motion vector decoding. sps_smvd_enabled_flag equal to 0 specifies that symmetric motion vector difference is not used in motion vector coding.</li>        <li id="ul0063-0017" num="0241">sps_dmvr_enabled_flag equal to 1 specifies that decoder motion vector refinement based inter bi-prediction is enabled. sps_dmvr_enabled_flag equal to 0 specifies that decoder motion vector refinement based inter bi-prediction is disabled.</li>        <li id="ul0063-0018" num="0242">sps_dmvr_pic_present_flag equal to 1 specifies that pic_disable_dmvr_flag is present in PHs referring to the SPS. sps_dmvr_pic_present_flag equal to 0 specifies that pic_disable_dmvr_flag is not present in PHs referring to the SPS. When sps_dmvr_pic_present_flag is not present, the value of sps_dmvr_pic_present_flag is inferred to be equal to 0.</li>        <li id="ul0063-0019" num="0243">sps_mmvd_enabled_flag equal to 1 specifies that merge mode with motion vector difference is enabled. sps_mmvd_enabled_flag equal to 0 specifies that merge mode with motion vector difference is disabled.</li>        <li id="ul0063-0020" num="0244">sps_isp_enabled_flag equal to 1 specifies that intra prediction with subpartitions is enabled. sps_isp_enabled_flag equal to 0 specifies that intra prediction with subpartitions is disabled.</li>        <li id="ul0063-0021" num="0245">sps_mrl_enabled_flag equal to 1 specifies that intra prediction with multiple reference lines is enabled. sps mrl_enabled_flag equal to 0 specifies that intra prediction with multiple reference lines is disabled.</li>        <li id="ul0063-0022" num="0246">sps-mip_enabled_flag equal to 1 specifies that matrix-based intra prediction is enabled. sps_mip_enabled flag equal to 0 specifies that matrix-based intra prediction is disabled.</li>        <li id="ul0063-0023" num="0247">sps_cclm_enabled_flag equal to 0 specifies that the cross-component linear model intra prediction from luma component to chroma component is disabled. sps_cclm_enabled_flag equal to 1 specifies that the cross-component linear model intra prediction from luma component to chroma componenent is enabled. When sps_cclm_enabled_flag is not present, it is inferred to be equal to 0.</li>        <li id="ul0063-0024" num="0248">sps_chroma_horizontal_collocated_fag equal to 1 specifies that prediction processes operate in a manner designed for chroma sample positions that are not horizontally shifted relative to corresponding luma sample positions. sps_chroma_horizontal_collocated_flag equal to 0 specifies that prediction processes operate in a manner designed for chroma sample positions that are shifted to the right by 0.5 in units of luma samples relative to corresponding luma sample positions. When sps_chroma_horizontal_collocated_flag is not present, it is inferred to be equal to 1.</li>        <li id="ul0063-0025" num="0249">sps_chroma_vertical_collocated_flag equal to 1 specifies that prediction processes operate in a manner designed for chroma sample positions that are not vertically shifted relative to corresponding luma sample positions. sps_chroma_vertical_collocated_flag equal to 0 specifies that prediction processes operate in a manner designed for chroma sample positions that are shifted downward by 0.5 in units of luma samples relative to corresponding luma sample positions. When sps_chroma_vertical_collocated_flag is not present, it is inferred to be equal to 1.</li>        <li id="ul0063-0026" num="0250">sps_mts_enabled_flag equal to 1 specifies that sps_explicit_mts_intra_enabled_flag is present in the sequence parameter set RBSP syntax and that sps_explicit_mts_inter_enabled_flag is present in the sequence parameter set RBSP syntax. sps_mts_enabled_flag equal to 0 specifies that sps_explicit_mts_intra_enabled_flag is not present in the sequence parameter set RBSP syntax and that sps_explicit_mts_inter_enabled_flag is not present in the sequence parameter set RBSP syntax.</li>        <li id="ul0063-0027" num="0251">sps_explicit_mts_intra_enabled_flag equal to 1 specifies that mts_idx may be present in intra coding unit syntax. sps_explicit_mts_intra_enabled flag equal to 0 specifies that mts_idx is not present in intra coding unit syntax. When not present, the value of sps_explicit_mts_intra_enabled flag is inferred to be equal to 0.</li>        <li id="ul0063-0028" num="0252">sps_explicit_mts_inter_enabled_flag equal to 1 specifies that mts_idx may be present in inter coding unit syntax. sps_explicit_mts_inter_enabled_flag equal to 0 specifies that mts_idx is not present in inter coding unit syntax. When not present, the value of sps_explicit_mts_inter_enabled_flag is inferred to be equal to 0.</li>        <li id="ul0063-0029" num="0253">sps_sbt_enabled_flag equal to 0 specifies that subblock transform for inter-predicted CUs is disabled. sps_sbt_enabled_flag equal to 1 specifies that subblock transform for inter-predicteds CU is enabled.</li>        <li id="ul0063-0030" num="0254">sps_affine_enabled_flag specifies whether affine model based motion compensation can be used for inter prediction. If sps_affine_enabled_flag is equal to 0, the syntax shall be constrained such that no affine model based motion compensation is used in the CLVS, and inter_affine_flag and cu_affine_type_flag are not present in coding unit syntax of the CLVS. Otherwise (sps_affine_enabled_flag is equal to 1), affine model based motion compensation can be used in the CLVS.</li>        <li id="ul0063-0031" num="0255">sps_affine_type_flag specifies whether 6-parameter affine model based motion compensation can be used for inter prediction. If sps_affine_type_flag is equal to 0, the syntax shall be constrained such that no 6-parameter affine model based motion compensation is used in the CLVS, and cu_affine_type_flag is not present in coding unit syntax in the CLVS. Otherwise (sps_affine_type_flag is equal to 1), 6-parameter affine model based motion compensation can be used in the CLVS. When not present, the value of sps_affine_type_flag is inferred to be equal to 0.</li>        <li id="ul0063-0032" num="0256">sps_affine_amvr_enabled_flag equal to 1 specifies that adaptive motion vector difference resolution is used in motion vector coding of affine inter mode. sps_affine_amvr_enabled_flag equal to 0 specifies that adaptive motion vector difference resolution is not used in motion vector coding of affine inter mode. When not present, the value of sps_affine_amvr_enabled_flag is inferred to be equal to 0.</li>        <li id="ul0063-0033" num="0257">sps_affine_prof_enabled_flag specifies whether the prediction refinement with optical flow can be used for affine motion compensation. If sps_affine_prof_enabled_flag is equal to 0, the affine motion compensation shall not be refined with optical flow. Otherwise (sps_affine_prof_enabled_flag is equal to 1), the affine motion compensation can be refined with optical flow. When not present, the value of</li>        <li id="ul0063-0034" num="0258">sps_affine_prof_enabled_flag is inferred to be equal to 0. sps_prof_pic_present_flag equal to 1 specifies that pic_disable_prof_flag is present in PHs referring to the SPS. sps_prof_pic_present_flag equal to 0 specifies that pic_disable_prof_flag is not present in PHs referring to the SPS. When sps_prof_pic_present_flag is not present, the value of sps_prof_pic_present_flag is inferred to be equal to 0.</li>        <li id="ul0063-0035" num="0259">sps_palette_enabled_flag equal to 1 specifies that pred_mode_plt_flag may be present in the coding unit syntax. sps_palette_enabled_flag equal to 0 specifies that pred_mode_plt_flag is not present in the coding unit syntax. When sps_palette_enabled_flag is not present, it is inferred to be equal to 0. sps_act_enabled_flag equal to 1 specifies that adaptive colour transform may be used and the cu_act_enabled_flag may be present in the coding unit syntax. sps_act_enabled_flag equal to 0 specifies that adaptive colour transform is not used and cu_act_enabled_flag is not present in the coding unit syntax. When sps_act_enabled_flag is not present, it is inferred to be equal to 0.</li>        <li id="ul0063-0036" num="0260">sps_bcw_enabled_flag specifies whether bi-prediction with CU weights can be used for inter prediction. If sps_bcw_enabled_flag is equal to 0, the syntax shall be constrained such that no bi-prediction with CU weights is used in the CLVS, and bcw_idx is not present in coding unit syntax of the CLVS. Otherwise (sps_bcw_enabled_flag is equal to 1), bi-prediction with CU weights can be used in the CLVS.</li>        <li id="ul0063-0037" num="0261">sps_ibc_enabled_flag equal to 1 specifies that the IBC prediction mode may be used in decoding of pictures in the CLVS. sps_ibc_enabled_flag equal to 0 specifies that the IBC prediction mode is not used in the CLVS. When sps_ibc_enabled_flag is not present, it is inferred to be equal to 0.</li>        <li id="ul0063-0038" num="0262">sps_ciip_enabled_flag specifies that ciip_flag may be present in the coding unit syntax for inter coding units. sps_ciip_enabled_flag equal to 0 specifies that ciip_flag is not present in the coding unit syntax for inter coding units.</li>        <li id="ul0063-0039" num="0263">sps_fpel_mmvd_enabled_flag equal to 1 specifies that merge mode with motion vector difference is using integer sample precision. sps_fpel_mmvd_enabled_flag equal to 0 specifies that merge mode with motion vector difference can use fractional sample precision.</li>        <li id="ul0063-0040" num="0264">sps_triangle_enabled_flag specifies whether triangular shape based motion compensation can be used for inter prediction. sps_triangle_enabled_flag equal to 0 specifies that the syntax shall be constrained such that no triangular shape based motion compensation is used in the CLVS, and merge_triangle_split_dir, merge_triangle_idx0, and merge-triangle_idx1 are not present in coding unit syntax of the CLVS. sps_triangle_enabled_flag equal to 1 specifies that triangular shape based motion compensation can be used in the CLVS.</li>        <li id="ul0063-0041" num="0265">sps_lmes_enabled_flag equal to 1 specifies that luma mapping with chroma scaling is used in the CLVS. sps_lmes_enabled_flag equal to 0 specifies that luma mapping with chroma scaling is not used in the CLVS.</li>        <li id="ul0063-0042" num="0266">sps_lfnst_enabled_flag equal to 1 specifies that lfnst_idx may be present in intra coding unit syntax. sps_lfnst_enabled_flag equal to 0 specifies that lfnst_idx is not present in intra coding unit syntax.</li>        <li id="ul0063-0043" num="0267">sps_ladf enabled_flag equal to 1, specifies that sps_num_ladf_intervals_minus2, sps_ladf_lowest_interval_qp offset, sps_ladf_qp_offset[i], and sps_ladf_delta_threshold_minus1[i] are present in the SPS.</li>        <li id="ul0063-0044" num="0268">sps_num_ladf_intervals_minus2 plus 1 specifies the number of sps_ladf_delta_threshold_minus1[i] and sps_ladf_qp_offset[i] syntax elements that are present in the SPS. The value of sps_num_ladf_intervals_minus2 shall be in the range of 0 to 3, inclusive.</li>        <li id="ul0063-0045" num="0269">sps_ladf_lowest_interval_qp_offset specifies the offset used to derive the variable qP as specified. The value of sps_ladf_lowest_interval_qp_offset shall be in the range of &#x2212;63 to 63, inclusive.</li>        <li id="ul0063-0046" num="0270">sps_ladf_qp_offset[i] specifies the offset array used to derive the variable qP as specified. The value of sps_ladf_qp_offset[i] shall be in the range of &#x2212;63 to 63, inclusive.</li>        <li id="ul0063-0047" num="0271">sps_ladf_delta_threshold_minus1[i] is used to compute the values of SpsLadfIntervalLowerBound[i], which specifies the lower bound of the i-th luma intensity level interval. The value of sps_ladf_delta_threshold_minus1[i] shall be in the range of 0 to 2<sup>BitDepth</sup>&#x2212;3, inclusive.</li>        <li id="ul0063-0048" num="0272">The value of SpsLadfIntervalLowerBound[0] is set equal to 0.</li>        <li id="ul0063-0049" num="0273">For each value of i in the range of 0 to sps_num_ladf_intervals_minus2, inclusive, the variable SpsLadfIntervalLowerBound[i+1] is derived as follows:</li>    </ul>    </li></ul></p><p id="p-0084" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>SpsLadfIntervalLowerBound[i+1]=SpsLadfIntervalLowerBound[i]+sps_ladf delta_threshold_minus1[i]+1<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0064" list-style="none">    <li id="ul0064-0001" num="0000">    <ul id="ul0065" list-style="none">        <li id="ul0065-0001" num="0274">sps_scaling_list_enabled_flag equal to 1 specifies that a scaling list is used for the scaling process for transform coefficients. sps_scaling_list_enabled_flag equal to 0 specifies that scaling list is not used for the scaling process for transform coefficients. sps_loop_filter_across_virtual_boundaries_disabled_present_flag equal to 1 specifies that the in-loop filtering operations are disabled across the virtual boundaries in pictures referring to the SPS.</li>        <li id="ul0065-0002" num="0275">sps_loop_filter_across_virtual_boundaries_disabled_present_flag equal to 0 specifies that no such disabling of in-loop filtering operations is applied in pictures referring to the SPS. In-loop filtering operations include the deblocking filter, sample adaptive offset filter, and adaptive loop filter operations.</li>        <li id="ul0065-0003" num="0276">sps_num_ver_virtual_boundaries specifies the number of sps_virtual_boundaries_pos_x[i] syntax elements that are present in the SPS. When sps_num_ver_virtual_boundaries is not present, it is inferred to be equal to 0. sps_virtual_boundaries_pos_x[i] is used to compute the value of VirtualBoundariesPosX[i], which specifies the location of the i-th vertical virtual boundary in units of luma samples. The value of sps_virtual_boundaries_pos_x[i] shall be in the range of 1 to Ceil(pic_width_in-luma_samples&#xf7;8)&#x2212;1, inclusive.</li>        <li id="ul0065-0004" num="0277">sps_num_hor_virtual_boundaries specifies the number of sps_virtual_boundaries_pos_y[i] syntax elements that are present in the SPS. When sps_num_hor_virtual_boundaries is not present, it is inferred to be equal to 0.</li>        <li id="ul0065-0005" num="0278">sps_virtual_boundaries_pos_y[i] is used to compute the value of VirtualBoundariesPosY[i], which specifies the location of the i-th horizontal virtual boundary in units of luma samples. The value of sps_virtual_boundaries_pos_y[i] shall be in the range of 1 to Ceil(pic_height_in_luma_samples&#xf7;8)&#x2212;1, inclusive.</li>        <li id="ul0065-0006" num="0279">sps_general_hrd_params_present_flag equal to 1 specifies that the syntax structure general_hrd_parameters( ) is present in the SPS RBSP syntax structure. sps_general_hrd_params_present_flag equal to 0 specifies that the syntax structure general_hrd_parameters( ) is not present in the SPS RBSP syntax structure.</li>        <li id="ul0065-0007" num="0280">sps_sublayer_cpb_params_present_flag equal to 1 specifies that the syntax structure old_hrd_parameters( ) in the SPS RBSP includes HRD parameters for sublayer representations with TemporalId in the range of 0 to sps_max_sublayers_minus1, inclusive. sps_sublayer_cpb_params_present_flag equal to 0 specifies that the syntax structure ols_hrd_parameters( ) in the SPS RBSP includes HRD parameters for the sublayer representation with TemporalId equal to sps_max_sublayers_minus1 only. When sps_max_sublayers_minus1 is equal to 0, the value of sps_sublayer_cpb_params_present flag is inferred to be equal to 0.</li>        <li id="ul0065-0008" num="0281">When sps_sublayer_cpb_params_present_flag is equal to 0, the HRD parameters for the sublayer representations with TemporalId in the range of 0 to sps_max_sublayers_minus1&#x2212;1, inclusive, are inferred to be the same as that for the sublayer representation with TemporalId equal to sps_max_sublayers_minus1. These include the HRD parameters starting from the fixed_pic_rate_general_flag[i] syntax element till the sublayer_hrd_parameters(i) syntax structure immediately under the condition &#x201c;if (general_vcl_hrd_params_present_flag)&#x201d; in the ols_hrd_parameters syntax structure.</li>        <li id="ul0065-0009" num="0282">field_seq_flag equal to 1 indicates that the CLVS conveys pictures that represent fields. field_seq_flag equal to 0 indicates that the CLVS conveys pictures that represent frames. When general_frame_only_constraint_flag is equal to 1, the value of field_seq_flag shall be equal to 0.</li>        <li id="ul0065-0010" num="0283">When field_seq_flag is equal to 1, a frame-field information SEI message shall be present for every coded picture in the CLVS.        <ul id="ul0066" list-style="none">            <li id="ul0066-0001" num="0284">NOTE&#x2014;The specified decoding process does not treat pictures that represent fields or frames differently. A sequence of pictures that represent fields would therefore be coded with the picture dimensions of an individual field. For example, pictures that represent 1080i fields would commonly have cropped output dimensions of 1920&#xd7;540, while the sequence picture rate would commonly express the rate of the source fields (typically between 50 and 60 Hz), instead of the source frame rate (typically between 25 and 30 Hz).</li>        </ul>        </li>        <li id="ul0065-0011" num="0285">vui_parameters_present_flag equal to 1 specifies that the syntax structure vui_parameters( ) is present in the SPS RBSP syntax structure. vui_parameters_present_flag equal to 0 specifies that the syntax structure vui_parameters( ) is not present in the SPS RBSP syntax structure.</li>        <li id="ul0065-0012" num="0286">sps_extension_flag equal to 0 specifies that no sps_extension_data_flag syntax elements are present in the SPS RBSP syntax structure. sps_extension_flag equal to 1 specifies that there are sps_extension_data_flag syntax elements present in the SPS RBSP syntax structure.</li>        <li id="ul0065-0013" num="0287">sps_extension_data_flag may have any value. Its presence and value do not affect decoder conformance to profiles specified in this version of this Specification. Decoders conforming to this version of this Specification shall ignore all sps_extension_data_flag syntax elements.</li>    </ul>    </li></ul></p><p id="p-0085" num="0288">As provided in Table 3, an SPS may include a profile_tier_level( ) syntax structure. It should be noted that a profile_tier_level( ) syntax structure may also be included in a DPS and a VPS. Table 4 illustrates the profile_tier_level( ) syntax structure provided in JVET-P2001.</p><p id="p-0086" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="154pt" align="left"/><colspec colname="2" colwidth="49pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" rowsep="1">TABLE 4</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>profile_tier_level( profileTierPresentFlag, </entry><entry/></row><row><entry/><entry>maxNumSubLayersMinus1 ) {</entry><entry>Descriptor</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;if( profileTierPresentFlag ) {</entry><entry/></row><row><entry/><entry>&#x2003;&#x2003;general_profile_idc </entry><entry>u(7) </entry></row><row><entry/><entry>&#x2003;&#x2003;general_tier_flag </entry><entry>u(1) </entry></row><row><entry/><entry>&#x2003;&#x2003;general_constraint_info( ) </entry><entry/></row><row><entry/><entry>&#x2003;}</entry><entry/></row><row><entry/><entry>&#x2003;general_level_idc </entry><entry>u(8) </entry></row><row><entry/><entry>&#x2003;if( profileTierPresentFlag ) {</entry><entry/></row><row><entry/><entry>&#x2003;&#x2003;num_sub_profiles </entry><entry>u(8) </entry></row><row><entry/><entry>&#x2003;&#x2003;for( i = 0; i &#x3c; num_sub_profiles; i++ ) </entry><entry/></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;general_sub_profile_idc[ i ]</entry><entry>u(32) </entry></row><row><entry/><entry>&#x2003;}</entry><entry/></row><row><entry/><entry>&#x2003;for( i = 0; i &#x3c; maxNumSubLayersMinus1; i++ ) </entry><entry/></row><row><entry/><entry>&#x2003;&#x2003;sublayer_level_present_flag[ i ]</entry><entry>u(1) </entry></row><row><entry/><entry>&#x2003;while( !byte_aligned( ) ) </entry><entry/></row><row><entry/><entry>&#x2003;&#x2003;ptl_alignment_zero_bit </entry><entry>f(1) </entry></row><row><entry/><entry>&#x2003;for( i = 0; i &#x3c; maxNumSubLayersMinus1; i++ ) </entry><entry/></row><row><entry/><entry>&#x2003;&#x2003;if( sublayer_level_present_flag[ i ] ) </entry><entry/></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;sublayer_level_idc[ i ]</entry><entry>u(8) </entry></row><row><entry/><entry>}</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><ul id="ul0067" list-style="none">    <li id="ul0067-0001" num="0000">    <ul id="ul0068" list-style="none">        <li id="ul0068-0001" num="0289">With respect to Table 4, JVET-P2001 provides the following semantics</li>        <li id="ul0068-0002" num="0290">A profile_tier_level( ) syntax structure provides level information and, optionally, profile, tier, sub-profile, and general constraints information.</li>        <li id="ul0068-0003" num="0291">When the profile tier level( ) syntax structure is included in a DPS, the OlsInScope is OLS that includes all layers in the the entire bitstream that refers to the DPS. When the profile_tier_level( ) syntax structure is included in a VPS, the OlsInScope is one or more OLSs specified by the VPS. When the profile_tier_level( ) syntax structure is included in an SPS, the OlsInScope is the the OLS that includes only the layer that is the lowest layer among the layers that refer to the SPS, and this lowest layer is an independent layer.</li>        <li id="ul0068-0004" num="0292">general_profile_idc indicates a profile to which OlsInScope conforms as specified in Annex A. Bitstreams shall not contain values of general_profile_idc other than those specified in Annex A. Other values of general_profile_idc are reserved for future use by ITU-T|ISO/JEC.</li>        <li id="ul0068-0005" num="0293">general_tier_flag specifies the tier context for the interpretation of general_level_idc as specified in Annex A.</li>        <li id="ul0068-0006" num="0294">general_level_idc indicates a level to which OlsInScope conforms as specified in Annex A. Bitstreams shall not contain values of general_level_idc other than those specified in Annex A. Other values of general_level_idc are reserved for future use by ITU-T ISO/IEC.        <ul id="ul0069" list-style="none">            <li id="ul0069-0001" num="0295">NOTE 1&#x2014;A greater value of general level_idc indicates a higher level. The maximum level signalled in the DPS for OlsInScope may be higher than the level signalled in the SPS for a CVS contained within OlsInScope.</li>            <li id="ul0069-0002" num="0296">NOTE 2&#x2014;When OlsInScope conforms to multiple profiles, general_profile_idc should indicate the profile that provides the preferred decoded result or the preferred bitstream identification, as determined by the encoder (in a manner not specified in this Specification).</li>            <li id="ul0069-0003" num="0297">NOTE 3&#x2014;When the profile_tier_level( ) syntax structure is included in a DPS and CVSs of OlsInScope conform to different profiles, general_profile_idc and level_idc should indicate the profile and level for a decoder that is capable of decoding OlsInScope.</li>        </ul>        </li>        <li id="ul0068-0007" num="0298">num_sub_profiles specifies the number of the general_sub_profile_idc[i] syntax elements.</li>        <li id="ul0068-0008" num="0299">general_sub_profile_idc[i] indicates the i-th interoperability metadata registered as specified by ITU-T T.35, the contents of which are not specified in this Specification.</li>        <li id="ul0068-0009" num="0300">sublayer_level_present_flag[i] equal to 1 specifies that level information is present in the profile tier level( ) syntax structure for the sublayer representation with TemporalId equal to i. sublayer_level_present_flag[i] equal to 0 specifies that level information is not present in the profile tier level( ) syntax structure for the sublayer representation with TemporalId equal to i.</li>        <li id="ul0068-0010" num="0301">ptl_alignment_zero_bits shall be equal to 0.</li>        <li id="ul0068-0011" num="0302">The semantics of the syntax element sublayer_level_idc[i] is, apart from the specification of the inference of not present values, the same as the syntax element general_level_idc, but apply to the sublayer representation with TemporalId equal to i.</li>        <li id="ul0068-0012" num="0303">When not present, the value of sublayer_level_idc[i] is inferred as follows:        <ul id="ul0070" list-style="none">            <li id="ul0070-0001" num="0304">sublayer_level_idc[maxNumSubLayersMinus1] is inferred to be equal to general_level_idc of the same profile tier level( ) structure,</li>            <li id="ul0070-0002" num="0305">For i from maxNumSubLayersMinus1&#x2212;1 to 0 (in decreasing order of values of i), inclusive, sublayer_level_idc[i] is inferred to be equal to sublayer_level_idc[i+1].</li>        </ul>        </li>        <li id="ul0068-0013" num="0306">With respect to Profiles, Annex A of JVET-P2001 provides:</li>    </ul>    </li></ul></p><p id="p-0087" num="0307">Main 10 Profile<ul id="ul0071" list-style="none">    <li id="ul0071-0001" num="0000">    <ul id="ul0072" list-style="none">        <li id="ul0072-0001" num="0308">Bitstreams conforming to the Main 10 profile shall obey the following constraints:        <ul id="ul0073" list-style="none">            <li id="ul0073-0001" num="0309">Active SPSs for the base layer shall have chroma_format_idc equal to 0 or 1 only.</li>            <li id="ul0073-0002" num="0310">Active SPSs for the base layer shall have bit_depth_luma_minus8 in the range of 0 to 2, inclusive.</li>            <li id="ul0073-0003" num="0311">Active SPSs for the base layer shall have bit_depth_chroma_minus8 in the range of 0 to 2, inclusive.</li>            <li id="ul0073-0004" num="0312">The tier and level constraints specified for the Main 10 profile in clause A.4, as applicable, shall be fulfilled.</li>        </ul>        </li>        <li id="ul0072-0002" num="0313">Conformance of a bitstream to the Main 10 profile is indicated by generalprofile_idc being equal to 1.</li>        <li id="ul0072-0003" num="0314">Decoders conforming to the Main 10 profile at a specific level (identified by a specific value of general_level_idc) of a specific tier (identified by a specific value of general_tier_flag) shall be capable of decoding all bitstreams and sublayer representations for which all of the following conditions apply:        <ul id="ul0074" list-style="none">            <li id="ul0074-0001" num="0315">The bitstream is indicated to conform to the Main 10 profile.</li>            <li id="ul0074-0002" num="0316">The bitstream or sublayer representation is indicated to conform to a level that is not level 8.5 and is lower than or equal to the specified level.</li>            <li id="ul0074-0003" num="0317">The bitstream is indicated to conform to a tier that is lower than or equal to the specified tier.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0088" num="0318">Main 4:4:4 10 Profile<ul id="ul0075" list-style="none">    <li id="ul0075-0001" num="0000">    <ul id="ul0076" list-style="none">        <li id="ul0076-0001" num="0319">Bitstreams conforming to the Main 4:4:4 10 profile shall obey the following constraints:        <ul id="ul0077" list-style="none">            <li id="ul0077-0001" num="0320">Active SPSs for the base layer shall have chroma_format_idc in the range of 0 to 3, inclusive.</li>            <li id="ul0077-0002" num="0321">Active SPSs for the base layer shall have bit_depth_luma_minus8 in the range of 0 to 2, inclusive.</li>            <li id="ul0077-0003" num="0322">Active SPSs for the base layer shall have bit_depth_chroma_minus8 in the range of 0 to 2, inclusive.</li>            <li id="ul0077-0004" num="0323">The tier and level constraints specified for the Main 4:4:4 10 profile in clause A.4, as applicable, shall be fulfilled.</li>        </ul>        </li>        <li id="ul0076-0002" num="0324">Conformance of a bitstream to the Main 4:4:4 10 profile is indicated by general_profile_idc being equal to 2.</li>        <li id="ul0076-0003" num="0325">Decoders conforming to the Main 4:4:4 10 profile at a specific level (identified by a specific value of general_level_idc) of a specific tier (identified by a specific value of general_tier_flag) shall be capable of decoding all bitstreams and sublayer representations for which all of the following conditions apply:        <ul id="ul0078" list-style="none">            <li id="ul0078-0001" num="0326">The bitstream is indicated to conform to the Main 4:4:4 10 profile.</li>            <li id="ul0078-0002" num="0327">The bitstream or sublayer representation is indicated to conform to a level that is not level 8.5 and is lower than or equal to the specified level.</li>        </ul>        </li>        <li id="ul0076-0004" num="0328">The bitstream is indicated to conform to a tier that is lower than or equal to the specified tier.</li>        <li id="ul0076-0005" num="0329">With respect to tiers and level limits, Annex A of JVET-P2001 provides:</li>    </ul>    </li></ul></p><p id="p-0089" num="0330">General Tier and Level Limits<ul id="ul0079" list-style="none">    <li id="ul0079-0001" num="0000">    <ul id="ul0080" list-style="none">        <li id="ul0080-0001" num="0331">Table 5 specifies the limits for each level of each tier for levels other than level 8.5.</li>        <li id="ul0080-0002" num="0332">A tier and level to which a bitstream conforms are indicated by the syntax elements general_tier_flag and general_level_idc, and a level to which a sublayer representation conforms are indicated by the syntax element sublayer_level_idc[i], as follows:        <ul id="ul0081" list-style="none">            <li id="ul0081-0001" num="0333">If the specified level is not level 8.5, general_tier_flag equal to 0 indicates conformance to the Main tier, general_tier_flag equal to 1 indicates conformance to the High tier, according to the tier constraints specified in Table 5 and general_tier_flag shall be equal to 0 for levels below level 4 (corresponding to the entries in Table 5 marked with &#x201c;-&#x201d;). Otherwise (the specified level is level 8.5), it is a requirement of bitstream conformance that general_tier_flag shall be equal to 1 and the value 0 for general_tier_flag is reserved for future use by ITU-T ISO/IEC and decoders shall ignore the value of general_tier_flag.</li>            <li id="ul0081-0002" num="0334">general_level_idc and sublayer_level_idc[i] shall be set equal to a value of 30 times the level number specified in Table 5.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0090" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="49pt" align="left"/><colspec colname="3" colwidth="70pt" align="center"/><colspec colname="4" colwidth="28pt" align="center"/><colspec colname="5" colwidth="49pt" align="center"/><colspec colname="6" colwidth="35pt" align="center"/><thead><row><entry namest="1" nameend="6" rowsep="1">TABLE 5</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row><row><entry/><entry>Max luma </entry><entry>MaxCPB </entry><entry>Max</entry><entry>Max #</entry><entry/></row><row><entry/><entry>picture size </entry><entry>(CpbVelFactor</entry><entry>slices</entry><entry>of tile </entry><entry>Max #</entry></row><row><entry/><entry>MaxLumaPs </entry><entry>or CpbNalFactor)</entry><entry>per</entry><entry>rows </entry><entry>of tile </entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="7"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="49pt" align="left"/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="35pt" align="left"/><colspec colname="5" colwidth="28pt" align="center"/><colspec colname="6" colwidth="49pt" align="center"/><colspec colname="7" colwidth="35pt" align="center"/><tbody valign="top"><row><entry>Level</entry><entry>(samples)</entry><entry>Main tier</entry><entry>High tier </entry><entry>picture</entry><entry>MaxTileRows</entry><entry>columns</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="7"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="49pt" align="left"/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="35pt" align="left"/><colspec colname="5" colwidth="28pt" align="char" char="."/><colspec colname="6" colwidth="49pt" align="char" char="."/><colspec colname="7" colwidth="35pt" align="char" char="."/><tbody valign="top"><row><entry>1</entry><entry>&#x2003;&#x2002;&#x2009;36 864</entry><entry>&#x2003;&#x2002;&#x2009;350</entry><entry>&#x2014;</entry><entry>16</entry><entry>1</entry><entry>1</entry></row><row><entry>2</entry><entry>&#x2009;&#x2003;122 880</entry><entry>&#x2003;1 500</entry><entry>&#x2014;</entry><entry>16</entry><entry>1</entry><entry>1</entry></row><row><entry>2.1</entry><entry>&#x2009;&#x2003;245 760</entry><entry>&#x2003;3 000</entry><entry>&#x2014;</entry><entry>20</entry><entry>1</entry><entry>1</entry></row><row><entry>3</entry><entry>&#x2009;&#x2003;552 960</entry><entry>&#x2003;6 000</entry><entry>&#x2014;</entry><entry>30</entry><entry>2</entry><entry>2</entry></row><row><entry>3.1</entry><entry>&#x2009;&#x2003;983 040</entry><entry>&#x2002;10 000</entry><entry>&#x2014;</entry><entry>40</entry><entry>3</entry><entry>3</entry></row><row><entry>4</entry><entry>&#x2002;2 228 224</entry><entry>&#x2002;12 000</entry><entry>&#x2002;30 000</entry><entry>75</entry><entry>5</entry><entry>5</entry></row><row><entry>4.1</entry><entry>&#x2002;2 228 224</entry><entry>&#x2002;20 000</entry><entry>&#x2002;50 000</entry><entry>75</entry><entry>5</entry><entry>5</entry></row><row><entry>5</entry><entry>&#x2002;8 912 896</entry><entry>&#x2002;25 000</entry><entry>100 000</entry><entry>200</entry><entry>11</entry><entry>10</entry></row><row><entry>5.1</entry><entry>&#x2002;8 912 896</entry><entry>&#x2002;40 000</entry><entry>160 000</entry><entry>200</entry><entry>11</entry><entry>10</entry></row><row><entry>5.2</entry><entry>&#x2002;8 912 896</entry><entry>&#x2002;60 000</entry><entry>240 000</entry><entry>200</entry><entry>11</entry><entry>10</entry></row><row><entry>6</entry><entry>35 651 584</entry><entry>&#x2002;60 000</entry><entry>240 000</entry><entry>600</entry><entry>22</entry><entry>20</entry></row><row><entry>6.1</entry><entry>35 651 584</entry><entry>120 000</entry><entry>480 000</entry><entry>600</entry><entry>22</entry><entry>20</entry></row><row><entry>6.2</entry><entry>35 651 584</entry><entry>240 000</entry><entry>800 000</entry><entry>600</entry><entry>22</entry><entry>20</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0091" num="0335">As described above, sub-bitstream extraction may refer to a process where a device receiving a compliant or conforming bitstream forms a new compliant or conforming bitstream by discarding and/or modifying data in the received bitstream, e.g., to form a new compliant or conforming bitstream corresponding to a particular representation of video. <figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example of sub-bitstream extraction. In particular, <figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example of sub-bitstream extraction with respect to the data structures provided in JVET-P2001. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, Bitstream A is a 120 fps bitstream with a 60 fps sub-bitstream. In <figref idref="DRAWINGS">FIG. <b>4</b></figref>, Bitstream B illustrates the resulting bitstream created by extracting the 60 fps sub-bitstream from Bitstream A, i.e., through removing all NAL units with temporal ID higher than 0. It should be noted that in the example illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the sub-bitstream extraction does not include performing any rewriting of or creating additional NAL units. Further, it should be noted that in many applications, it is possible to discard packets (e.g., NAL units) from a bitstream, but it is not possible to rewrite or add any new packets (e.g., NAL units) to the bitstream. This, for example, could be due to content being encrypted with an encryption key that is not known to the extractor, due to the extractor not having write access to the stream, or due to a checksum being calculated over the NAL units and any rewriting would invalidate the checksum value.</p><p id="p-0092" num="0336">With respect to the example illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, it is desirable to have a decoder conformance definition that ensures that decoders conforming to level 5.1 are required to support decoding of bitstream B since bitstream B conforms to level 5.1, even though general_level_idc indicates level 5.2. However, it is also important that the decoder conformance definition does not require a decoder to extract a sub-bitstream from a larger bitstream, since that would require decoders to be able to parse through a bitstream having a much higher bitrate than what they are required to decode. As an example, if the entire Bitstream A is delivered to a level 5.1 decoder, the decoder should be allowed to reject the bitstream, and not be required to process the 5.2 bitstream and extract the level 5.1 sub-bitstream from it. JVET-P2001 does not clearly specify that decoders shall be able to support bitstreams where general_level_idc is higher than the level the decoder supports, but where sublayer_level_idc[SublayerRepTemporalId] is equal or lower to the level the decoder supports. This is less than ideal.</p><p id="p-0093" num="0337"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example of a bitstream, Bitstream C, which is a 120 fps bitstream with a 60 fps sub-bitstream. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, for the first 8 seconds of Bitstream C, it resembles Bitstream B in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, in that the first 8 seconds only contains NAL units with temporal ID equal to 0 and it appears to be a bitstream that conforms to level 5.1. However, the last two seconds of Bitstream C includes NAL units with temporal ID equal to 1. A decoder would have to support level 5.2 in order to decode the Bitstream C. The problem with Bitstream C is that there is no way for a level 5.1 decoder to determine if it has the capability to decode the bitstream or not until it has encountered a NAL unit with temporal ID equal to 1 (i.e. after 8 seconds into the bitstream). In one example, according to the techniques herein, a NAL unit type is introduced to provide information about the existence of temporal layers in the bitstream.</p><p id="p-0094" num="0338"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an example of a system that may be configured to code (i.e., encode and/or decode) video data according to one or more techniques of this disclosure. System <b>100</b> represents an example of a system that may encapsulate video data according to one or more techniques of this disclosure. As illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, system <b>100</b> includes source device <b>102</b>, communications medium <b>110</b>, and destination device <b>120</b>. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, source device <b>102</b> may include any device configured to encode video data and transmit encoded video data to communications medium <b>110</b>. Destination device <b>120</b> may include any device configured to receive encoded video data via communications medium <b>110</b> and to decode encoded video data. Source device <b>102</b> and/or destination device <b>120</b> may include computing devices equipped for wired and/or wireless communications and may include, for example, set top boxes, digital video recorders, televisions, desktop, laptop or tablet computers, gaming consoles, medical imagining devices, and mobile devices, including, for example, smartphones, cellular telephones, personal gaming devices.</p><p id="p-0095" num="0339">Communications medium <b>110</b> may include any combination of wireless and wired communication media, and/or storage devices. Communications medium <b>110</b> may include coaxial cables, fiber optic cables, twisted pair cables, wireless transmitters and receivers, routers, switches, repeaters, base stations, or any other equipment that may be useful to facilitate communications between various devices and sites. Communications medium <b>110</b> may include one or more networks. For example, communications medium <b>110</b> may include a network configured to enable access to the World Wide Web, for example, the Internet. A network may operate according to a combination of one or more telecommunication protocols. Telecommunications protocols may include proprietary aspects and/or may include standardized telecommunication protocols. Examples of standardized telecommunications protocols include Digital Video Broadcasting (DVB) standards, Advanced Television Systems Committee (ATSC) standards, Integrated Services Digital Broadcasting (ISDB) standards, Data Over Cable Service Interface Specification (DOCSIS) standards, Global System Mobile Communications (GSM) standards, code division multiple access (CDMA) standards, 3rd Generation Partnership Project (3GPP) standards, European Telecommunications Standards Institute (ETSI) standards, Internet Protocol (IP) standards, Wireless Application Protocol (WAP) standards, and Institute of Electrical and Electronics Engineers (IEEE) standards.</p><p id="p-0096" num="0340">Storage devices may include any type of device or storage medium capable of storing data. A storage medium may include a tangible or non-transitory computer-readable media. A computer readable medium may include optical discs, flash memory, magnetic memory, or any other suitable digital storage media. In some examples, a memory device or portions thereof may be described as non-volatile memory and in other examples portions of memory devices may be described as volatile memory. Examples of volatile memories may include random access memories (RAM), dynamic random access memories (DRAM), and static random access memories (SRAM). Examples of non-volatile memories may include magnetic hard discs, optical discs, floppy discs, flash memories, or forms of electrically programmable memories (EPROM) or electrically erasable and programmable (EEPROM) memories. Storage device(s) may include memory cards (e.g., a Secure Digital (SD) memory card), internal/external hard disk drives, and/or internal/external solid state drives. Data may be stored on a storage device according to a defined file format.</p><p id="p-0097" num="0341"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a conceptual drawing illustrating an example of components that may be included in an implementation of system <b>100</b>. In the example implementation illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, system <b>100</b> includes one or more computing devices <b>402</b>A-<b>402</b>N, television service network <b>404</b>, television service provider site <b>406</b>, wide area network <b>408</b>, local area network <b>410</b>, and one or more content provider sites <b>412</b>A-<b>412</b>N. The implementation illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref> represents an example of a system that may be configured to allow digital media content, such as, for example, a movie, a live sporting event, etc., and data and applications and media presentations associated therewith to be distributed to and accessed by a plurality of computing devices, such as computing devices <b>402</b>A-<b>402</b>N. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, computing devices <b>402</b>A-<b>402</b>N may include any device configured to receive data from one or more of television service network <b>404</b>, wide area network <b>408</b>, and/or local area network <b>410</b>. For example, computing devices <b>402</b>A-<b>402</b>N may be equipped for wired and/or wireless communications and may be configured to receive services through one or more data channels and may include televisions, including so-called smart televisions, set top boxes, and digital video recorders. Further, computing devices <b>402</b>A-<b>402</b>N may include desktop, laptop, or tablet computers, gaming consoles, mobile devices, including, for example, &#x201c;smart&#x201d; phones, cellular telephones, and personal gaming devices.</p><p id="p-0098" num="0342">Television service network <b>404</b> is an example of a network configured to enable digital media content, which may include television services, to be distributed. For example, television service network <b>404</b> may include public over-the-air television networks, public or subscription-based satellite television service provider networks, and public or subscription-based cable television provider networks and/or over the top or Internet service providers. It should be noted that although in some examples television service network <b>404</b> may primarily be used to enable television services to be provided, television service network <b>404</b> may also enable other types of data and services to be provided according to any combination of the telecommunication protocols described herein. Further, it should be noted that in some examples, television service network <b>404</b> may enable two-way communications between television service provider site <b>406</b> and one or more of computing devices <b>402</b>A-<b>402</b>N. Television service network <b>404</b> may comprise any combination of wireless and/or wired communication media. Television service network <b>404</b> may include coaxial cables, fiber optic cables, twisted pair cables, wireless transmitters and receivers, routers, switches, repeaters, base stations, or any other equipment that may be useful to facilitate communications between various devices and sites. Television service network <b>404</b> may operate according to a combination of one or more telecommunication protocols. Telecommunications protocols may include proprietary aspects and/or may include standardized telecommunication protocols. Examples of standardized telecommunications protocols include DVB standards, ATSC standards, ISDB standards, DTMB standards, DMB standards, Data Over Cable Service Interface Specification (DOCSIS) standards, HbbTV standards, W3C standards, and UPnP standards.</p><p id="p-0099" num="0343">Referring again to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, television service provider site <b>406</b> may be configured to distribute television service via television service network <b>404</b>. For example, television service provider site <b>406</b> may include one or more broadcast stations, a cable television provider, or a satellite television provider, or an Internet-based television provider. For example, television service provider site <b>406</b> may be configured to receive a transmission including television programming through a satellite uplink/downlink. Further, as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, television service provider site <b>406</b> may be in communication with wide area network <b>408</b> and may be configured to receive data from content provider sites <b>412</b>A-<b>412</b>N. It should be noted that in some examples, television service provider site <b>406</b> may include a television studio and content may originate therefrom.</p><p id="p-0100" num="0344">Wide area network <b>408</b> may include a packet based network and operate according to a combination of one or more telecommunication protocols. Telecommunications protocols may include proprietary aspects and/or may include standardized telecommunication protocols. Examples of standardized telecommunications protocols include Global System Mobile Communications (GSM) standards, code division multiple access (CDMA) standards, 3<sup>rd </sup>Generation Partnership Project (3GPP) standards, European Telecommunications Standards Institute (ETSI) standards, European standards (EN), IP standards, Wireless Application Protocol (WAP) standards, and Institute of Electrical and Electronics Engineers (IEEE) standards, such as, for example, one or more of the IEEE 802 standards (e.g., Wi-Fi). Wide area network <b>408</b> may comprise any combination of wireless and/or wired communication media. Wide area network <b>408</b> may include coaxial cables, fiber optic cables, twisted pair cables, Ethernet cables, wireless transmitters and receivers, routers, switches, repeaters, base stations, or any other equipment that may be useful to facilitate communications between various devices and sites. In one example, wide area network <b>408</b> may include the Internet. Local area network <b>410</b> may include a packet based network and operate according to a combination of one or more telecommunication protocols. Local area network <b>410</b> may be distinguished from wide area network <b>408</b> based on levels of access and/or physical infrastructure. For example, local area network <b>410</b> may include a secure home network.</p><p id="p-0101" num="0345">Referring again to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, content provider sites <b>412</b>A-<b>412</b>N represent examples of sites that may provide multimedia content to television service provider site <b>406</b> and/or computing devices <b>402</b>A-<b>402</b>N. For example, a content provider site may include a studio having one or more studio content servers configured to provide multimedia files and/or streams to television service provider site <b>406</b>. In one example, content provider sites <b>412</b>A-<b>412</b>N may be configured to provide multimedia content using the IP suite. For example, a content provider site may be configured to provide multimedia content to a receiver device according to Real Time Streaming Protocol (RTSP), HTTP, or the like. Further, content provider sites <b>412</b>A-<b>412</b>N may be configured to provide data, including hypertext based content, and the like, to one or more of receiver devices computing devices <b>402</b>A-<b>402</b>N and/or television service provider site <b>406</b> through wide area network <b>408</b>. Content provider sites <b>412</b>A-<b>412</b>N may include one or more web servers. Data provided by data provider site <b>412</b>A-<b>412</b>N may be defined according to data formats.</p><p id="p-0102" num="0346">Referring again to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, source device <b>102</b> includes video source <b>104</b>, video encoder <b>106</b>, data encapsulator <b>107</b>, and interface <b>108</b>. Video source <b>104</b> may include any device configured to capture and/or store video data. For example, video source <b>104</b> may include a video camera and a storage device operably coupled thereto. Video encoder <b>106</b> may include any device configured to receive video data and generate a compliant bitstream representing the video data. A compliant bitstream may refer to a bitstream that a video decoder can receive and reproduce video data therefrom. Aspects of a compliant bitstream may be defined according to a video coding standard. When generating a compliant bitstream video encoder <b>106</b> may compress video data. Compression may be lossy (discernible or indiscernible to a viewer) or lossless. <figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram illustrating an example of video encoder <b>500</b> that may implement the techniques for encoding video data described herein. It should be noted that although example video encoder <b>500</b> is illustrated as having distinct functional blocks, such an illustration is for descriptive purposes and does not limit video encoder <b>500</b> and/or sub-components thereof to a particular hardware or software architecture. Functions of video encoder <b>500</b> may be realized using any combination of hardware, firmware, and/or software implementations.</p><p id="p-0103" num="0347">Video encoder <b>500</b> may perform intra prediction coding and inter prediction coding of picture areas, and, as such, may be referred to as a hybrid video encoder. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, video encoder <b>500</b> receives source video blocks. In some examples, source video blocks may include areas of picture that has been divided according to a coding structure. For example, source video data may include macroblocks, CTUs, CBs, sub-divisions thereof, and/or another equivalent coding unit. In some examples, video encoder <b>500</b> may be configured to perform additional sub-divisions of source video blocks. It should be noted that the techniques described herein are generally applicable to video coding, regardless of how source video data is partitioned prior to and/or during encoding. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, video encoder <b>500</b> includes summer <b>502</b>, transform coefficient generator <b>504</b>, coefficient quantization unit <b>506</b>, inverse quantization and transform coefficient processing unit <b>508</b>, summer <b>510</b>, intra prediction processing unit <b>512</b>, inter prediction processing unit <b>514</b>, filter unit <b>516</b>, and entropy encoding unit <b>518</b>. As illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, video encoder <b>500</b> receives source video blocks and outputs a bitstream.</p><p id="p-0104" num="0348">In the example illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, video encoder <b>500</b> may generate residual data by subtracting a predictive video block from a source video block. The selection of a predictive video block is described in detail below. Summer <b>502</b> represents a component configured to perform this subtraction operation. In one example, the subtraction of video blocks occurs in the pixel domain. Transform coefficient generator <b>504</b> applies a transform, such as a discrete cosine transform (DCT), a discrete sine transform (DST), or a conceptually similar transform, to the residual block or sub-divisions thereof (e.g., four 8&#xd7;8 transforms may be applied to a 16&#xd7;16 array of residual values) to produce a set of residual transform coefficients. Transform coefficient generator <b>504</b> may be configured to perform any and all combinations of the transforms included in the family of discrete trigonometric transforms, including approximations thereof. Transform coefficient generator <b>504</b> may output transform coefficients to coefficient quantization unit <b>506</b>. Coefficient quantization unit <b>506</b> may be configured to perform quantization of the transform coefficients. The quantization process may reduce the bit depth associated with some or all of the coefficients. The degree of quantization may alter the rate-distortion (i.e., bit-rate vs. quality of video) of encoded video data. The degree of quantization may be modified by adjusting a quantization parameter (QP). A quantization parameter may be determined based on slice level values and/or CU level values (e.g., CU delta QP values). QP data may include any data used to determine a QP for quantizing a particular set of transform coefficients. As illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, quantized transform coefficients (which may be referred to as level values) are output to inverse quantization and transform coefficient processing unit <b>508</b>. Inverse quantization and transform coefficient processing unit <b>508</b> may be configured to apply an inverse quantization and an inverse transformation to generate reconstructed residual data. As illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, at summer <b>510</b>, reconstructed residual data may be added to a predictive video block. In this manner, an encoded video block may be reconstructed and the resulting reconstructed video block may be used to evaluate the encoding quality for a given prediction, transformation, and/or quantization. Video encoder <b>500</b> may be configured to perform multiple coding passes (e.g., perform encoding while varying one or more of a prediction, transformation parameters, and quantization parameters). The rate-distortion of a bitstream or other system parameters may be optimized based on evaluation of reconstructed video blocks. Further, reconstructed video blocks may be stored and used as reference for predicting subsequent blocks.</p><p id="p-0105" num="0349">Referring again to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, intra prediction processing unit <b>512</b> may be configured to select an intra prediction mode for a video block to be coded. Intra prediction processing unit <b>512</b> may be configured to evaluate a frame and determine an intra prediction mode to use to encode a current block. As described above, possible intra prediction modes may include planar prediction modes, DC prediction modes, and angular prediction modes. Further, it should be noted that in some examples, a prediction mode for a chroma component may be inferred from a prediction mode for a luma prediction mode. Intra prediction processing unit <b>512</b> may select an intra prediction mode after performing one or more coding passes. Further, in one example, intra prediction processing unit <b>512</b> may select a prediction mode based on a rate-distortion analysis. As illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, intra prediction processing unit <b>512</b> outputs intra prediction data (e.g., syntax elements) to entropy encoding unit <b>518</b> and transform coefficient generator <b>504</b>. As described above, a transform performed on residual data may be mode dependent (e.g., a secondary transform matrix may be determined based on a prediction mode).</p><p id="p-0106" num="0350">Referring again to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, inter prediction processing unit <b>514</b> may be configured to perform inter prediction coding for a current video block. Inter prediction processing unit <b>514</b> may be configured to receive source video blocks and calculate a motion vector for PUs of a video block. A motion vector may indicate the displacement of a prediction unit of a video block within a current video frame relative to a predictive block within a reference frame. Inter prediction coding may use one or more reference pictures. Further, motion prediction may be uni-predictive (use one motion vector) or bi-predictive (use two motion vectors). Inter prediction processing unit <b>514</b> may be configured to select a predictive block by calculating a pixel difference determined by, for example, sum of absolute difference (SAD), sum of square difference (SSD), or other difference metrics. As described above, a motion vector may be determined and specified according to motion vector prediction. Inter prediction processing unit <b>514</b> may be configured to perform motion vector prediction, as described above. Inter prediction processing unit <b>514</b> may be configured to generate a predictive block using the motion prediction data. For example, inter prediction processing unit <b>514</b> may locate a predictive video block within a frame buffer (not shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>). It should be noted that inter prediction processing unit <b>514</b> may further be configured to apply one or more interpolation filters to a reconstructed residual block to calculate sub-integer pixel values for use in motion estimation. Inter prediction processing unit <b>514</b> may output motion prediction data for a calculated motion vector to entropy encoding unit <b>518</b>.</p><p id="p-0107" num="0351">Referring again to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, filter unit <b>516</b> receives reconstructed video blocks and coding parameters and outputs modified reconstructed video data. Filter unit <b>516</b> may be configured to perform deblocking and/or Sample Adaptive Offset (SAO) filtering. SAO filtering is a non-linear amplitude mapping that may be used to improve reconstruction by adding an offset to reconstructed video data. It should be noted that as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, intra prediction processing unit <b>512</b> and inter prediction processing unit <b>514</b> may receive modified reconstructed video block via filter unit <b>216</b>. Entropy encoding unit <b>518</b> receives quantized transform coefficients and predictive syntax data (i.e., intra prediction data and motion prediction data). It should be noted that in some examples, coefficient quantization unit <b>506</b> may perform a scan of a matrix including quantized transform coefficients before the coefficients are output to entropy encoding unit <b>518</b>. In other examples, entropy encoding unit <b>518</b> may perform a scan. Entropy encoding unit <b>518</b> may be configured to perform entropy encoding according to one or more of the techniques described herein. In this manner, video encoder <b>500</b> represents an example of a device configured to generate encoded video data according to one or more techniques of this disclosure.</p><p id="p-0108" num="0352">Referring again to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, data encapsulator <b>107</b> may receive encoded video data and generate a compliant bitstream, e.g., a sequence of NAL units according to a defined data structure. A device receiving a compliant bitstream can reproduce video data therefrom. Further, as described above, sub-bitstream extraction may refer to a process where a device receiving a ITU-T H.265 compliant bitstream forms a new ITU-T H.265 compliant bitstream by discarding and/or modifying data in the received bitstream. It should be noted that the term conforming bitstream may be used in place of the term compliant bitstream. In one example, data encapsulator <b>107</b> may be configured to generate syntax according to one or more techniques described herein. It should be noted that data encapsulator <b>107</b> need not necessary be located in the same physical device as video encoder <b>106</b>. For example, functions described as being performed by video encoder <b>106</b> and data encapsulator <b>107</b> may be distributed among devices illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.<ul id="ul0082" list-style="none">    <li id="ul0082-0001" num="0000">    <ul id="ul0083" list-style="none">        <li id="ul0083-0001" num="0353">As described above, JVET-P2001 does not clearly specify that decoders shall be able to support bitstreams where general_level_idc is higher than the level the decoder supports, but where sublayer_level_idc[SublayerRepTemporalId] is equal or lower to the level the decoder supports. In one example, according to the techniques herein, the following profile definitions may be provided for a bitstream in order to specify that conforming decoders shall be able to support such bitstreams.</li>        <li id="ul0083-0002" num="0354">Bitstreams conforming to the Main 10 profile shall obey the following constraints:        <ul id="ul0084" list-style="none">            <li id="ul0084-0001" num="0355">Active SPSs for the base layer shall have chroma_format_idc equal to 0 or 1 only.</li>            <li id="ul0084-0002" num="0356">Active SPSs for the base layer shall have bit_depth_luma-minus8 in the range of 0 to 2, inclusive.</li>            <li id="ul0084-0003" num="0357">Active SPSs for the base layer shall have bit_depth_chroma_minus8 in the range of 0 to 2, inclusive.</li>            <li id="ul0084-0004" num="0358">The tier and level constraints specified for the Main 10 profile, as applicable, shall be fulfilled.</li>        </ul>        </li>        <li id="ul0083-0003" num="0359">Conformance of a bitstream to the Main 10 profile is indicated by general_profile_idc being equal to 1.</li>        <li id="ul0083-0004" num="0360">Decoders conforming to the Main 10 profile at a specific level of a specific tier shall be capable of decoding all bitstreams for which all of the following conditions apply:        <ul id="ul0085" list-style="none">            <li id="ul0085-0001" num="0361">The bitstream is indicated to conform to the Main 10 profile.</li>            <li id="ul0085-0002" num="0362">The bitstream is indicated through general_level_idc to conform to a level that is not level 8.5 and is lower than or equal to the specified level.</li>            <li id="ul0085-0003" num="0363">The bitstream is indicated to conform to a tier that is lower than or equal to the specified tier.</li>        </ul>        </li>        <li id="ul0083-0005" num="0364">Furthermore, decoders conforming to the Main 10 profile at a specific level of a specific tier shall be capable of decoding all sublayer representations for which all of the following conditions apply:        <ul id="ul0086" list-style="none">            <li id="ul0086-0001" num="0365">The bitstream is indicated to conform to the Main 10 profile.</li>            <li id="ul0086-0002" num="0366">The sublayer representation is indicated through sublayer_level_idc[SublayerRepTemporalId] to conform to a level that is not level 8.5 and is lower than or equal to the specified level, where SublayerRepTemporalId is the TemporalId of the sublayer representation.</li>            <li id="ul0086-0003" num="0367">The bitstream is indicated to conform to a tier that is lower than or equal to the specified tier.</li>            <li id="ul0086-0004" num="0368">The bitstream does not contain any NAL units with TemporalId higher than the TemporalId of the sublayer representation.</li>        </ul>        </li>        <li id="ul0083-0006" num="0369">In one example, according to the techniques herein, the following profile definitions may be provided for a bitstream in order to specify that conforming decoders shall be able to support such bitstreams.</li>        <li id="ul0083-0007" num="0370">Bitstreams conforming to the Main 10 profile shall obey the following constraints:        <ul id="ul0087" list-style="none">            <li id="ul0087-0001" num="0371">Active SPSs for the base layer shall have chroma_format_idc equal to 0 or 1 only.</li>            <li id="ul0087-0002" num="0372">Active SPSs for the base layer shall have bit_depth_luma-minus8 in the range of 0 to 2, inclusive.</li>            <li id="ul0087-0003" num="0373">Active SPSs for the base layer shall have bit_depth_chroma_minus8 in the range of 0 to 2, inclusive.</li>            <li id="ul0087-0004" num="0374">The tier and level constraints specified for the Main 10 profile, as applicable, shall be fulfilled.</li>        </ul>        </li>        <li id="ul0083-0008" num="0375">Conformance of a bitstream to the Main 10 profile is indicated by general_profile_idc being equal to 1.</li>        <li id="ul0083-0009" num="0376">Decoders conforming to the Main 10 profile at a specific level of a specific tier shall be capable of decoding all bitstreams for which all of the following conditions apply:        <ul id="ul0088" list-style="none">            <li id="ul0088-0001" num="0377">The bitstream is indicated to conform to the Main 10 profile.</li>            <li id="ul0088-0002" num="0378">The bitstream is indicated through general_level_idc to conform to a level that is not level 8.5 and is lower than or equal to the specified level, or the bitstream is indicated through sublayer_level_idc[SublayerRepTemporalId] to conform to a level that is not level 8.5 and is lower than or equal to the specified level, where SublayerRepTemporalId is the highest TemporalId of all VCL Nal units in the bitstream.</li>            <li id="ul0088-0003" num="0379">The bitstream is indicated to conform to a tier that is lower than or equal to the specified tier.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0109" num="0380">As described above, in one example, according to the techniques herein, a NAL unit type is introduced to provide information about the existence of temporal layers in the bitstream. Table 6 illustrates an example where a NAL unit type providing information about the existence of temporal layers in the bitstream may be signaled, i.e., temporal_sublayer_presence_rbsp( ) may be signaled using NAL unit type <b>26</b>.</p><p id="p-0110" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="42pt" align="center"/><colspec colname="2" colwidth="63pt" align="left"/><colspec colname="3" colwidth="119pt" align="left"/><colspec colname="4" colwidth="35pt" align="left"/><thead><row><entry namest="1" nameend="4" rowsep="1">TABLE 6</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry/><entry>Name of </entry><entry>Content of NAL unit and RBSP syntax </entry><entry>NAL unit </entry></row><row><entry>nal_unit_type </entry><entry>nal_unit_type </entry><entry>structure </entry><entry>type class</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="42pt" align="char" char="."/><colspec colname="2" colwidth="63pt" align="left"/><colspec colname="3" colwidth="119pt" align="left"/><colspec colname="4" colwidth="35pt" align="left"/><tbody valign="top"><row><entry>0 </entry><entry>TRAIL_NUT </entry><entry>Coded slice of a trailing picture </entry><entry>VCL </entry></row><row><entry/><entry/><entry>slice_layer_rbsp( ) </entry><entry/></row><row><entry>1 </entry><entry>STSA_NUT </entry><entry>Coded slice of an STSA picture </entry><entry>VCL </entry></row><row><entry/><entry/><entry>slice_layer_rbsp( ) </entry><entry/></row><row><entry>2 </entry><entry>RADL_NUT </entry><entry>Coded slice of a RADL picture </entry><entry>VCL </entry></row><row><entry/><entry/><entry>slice_layer_rbsp( ) </entry><entry/></row><row><entry>3 </entry><entry>RASL_NUT </entry><entry>Coded slice of a RASL picture </entry><entry>VCL </entry></row><row><entry/><entry/><entry>slice_layer_rbsp( ) </entry><entry/></row><row><entry>4 . . . 6 </entry><entry>RSV_VCL_4 . . . </entry><entry>Reserved non-IRAP VCL NAL unit types </entry><entry>VCL </entry></row><row><entry/><entry>RSV_VCL_6 </entry><entry/><entry/></row><row><entry>7 </entry><entry>IDR_W_RADL </entry><entry>Coded slice of an IDR picture </entry><entry>VCL </entry></row><row><entry>8 </entry><entry>IDR_N_LP </entry><entry>slice_layer_rbsp( ) </entry><entry/></row><row><entry>9 </entry><entry>CRA_NUT </entry><entry>Coded slice of a CRA picture </entry><entry>VCL </entry></row><row><entry/><entry/><entry>silce_layer_rbsp( ) </entry><entry/></row><row><entry>10 </entry><entry>GDR_NUT </entry><entry>Coded slice of a GDR picture </entry><entry>VCL </entry></row><row><entry/><entry/><entry>slice_layer_rbsp( ) </entry><entry/></row><row><entry>11 </entry><entry>RSV_IRAP_11 </entry><entry>Reserved IRAP VCL NAL unit types </entry><entry>VCL </entry></row><row><entry>12 </entry><entry>RSV_IRAP_12 </entry><entry/><entry/></row><row><entry>13 </entry><entry>DPS_NUT </entry><entry>Decoding parameter set </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>decoding_parameter_set_rbsp( ) </entry><entry/></row><row><entry>14 </entry><entry>VPS_NUT </entry><entry>Video parameter set </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>video_parameter_set_rbsp( ) </entry><entry/></row><row><entry>15 </entry><entry>SPS_NUT </entry><entry>Sequence parameter set </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>seq_parameter_ set_rbsp( ) </entry><entry/></row><row><entry>16 </entry><entry>PPS_NUT </entry><entry>Picture parameter set </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>pic_parameter_set_rbsp( ) </entry><entry/></row><row><entry>17 </entry><entry>PREFIX_APS_NUT </entry><entry>Adaptation parameter set </entry><entry>non-VCL </entry></row><row><entry>18 </entry><entry>SUFFIX_APS_NUT </entry><entry>adaptation_parameter_set_rbsp( ) </entry><entry/></row><row><entry>19 </entry><entry>PH_NUT </entry><entry>Picture header </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>picture_header_rbsp( ) </entry><entry/></row><row><entry>20 </entry><entry>AUD_NUT </entry><entry>AU delimiter </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>access_unit_delimiter_rbsp( ) </entry><entry/></row><row><entry>21 </entry><entry>EOS_NUT </entry><entry>End of sequence </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>end_of_seq_rbsp( ) </entry><entry/></row><row><entry>22 </entry><entry>EOB_NUT </entry><entry>End of bitstream </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>end_of_bitstream_rbsp( ) </entry><entry/></row><row><entry>23 </entry><entry>PREFIX_SEL_NUT </entry><entry>Supplemental enhancement information </entry><entry>non-VCL </entry></row><row><entry>24 </entry><entry>SUFFIX_SEL_NUT </entry><entry>sei_rbsp( ) </entry><entry/></row><row><entry>25 </entry><entry>FD_NUT </entry><entry>Filler data </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>filler_data_rbsp( ) </entry><entry/></row><row><entry>26 </entry><entry>TSP_NUT </entry><entry>Temporal sublayer presence </entry><entry>non-VCL </entry></row><row><entry/><entry/><entry>temporal_sublayer_presence_rbsp( ) </entry><entry/></row><row><entry>27 </entry><entry>RSV_NVCL_27 </entry><entry>Reserved non-VCL NAL unit type </entry><entry>non-VCL </entry></row><row><entry>28 . . . 31 </entry><entry>UNSPEC_28 . . . </entry><entry>Unspecified non-VCL NAL unit types </entry><entry>non-VCL </entry></row><row><entry/><entry>UNSPEC_31</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><ul id="ul0089" list-style="none">    <li id="ul0089-0001" num="0000">    <ul id="ul0090" list-style="none">        <li id="ul0090-0001" num="0381">With respect to Table 6, the following may be applicable to the TSP_NUT:</li>        <li id="ul0090-0002" num="0382">NAL units with nal_unit_type equal to TSP_NUT are required to be present before the first VCL NAL unit in the first Access Unit of a Coded Video Sequence for all temporal sub-layers that may contain one or more VCL NAL units in the CVS. When no TSP_NUT NAL unit with TemporalId equal to tidA is present before the first VCL NAL unit in the first Access Unit of the CVS it is a requirement of bitstream conformance that no VCL NAL unit with TemporaldId equal to or greater than tidA is present in the CVS, for all tidA in the range of 0 to 6, inclusive.</li>        <li id="ul0090-0003" num="0383">The variable MaxTid is set equal to the highest value of TemporalId of all TSP_NUT NAL units present before the first VCL NAL unit in the first access unit of the CVS.</li>        <li id="ul0090-0004" num="0384">Although in the Table 6 TSP_NUT uses a nal_unit_Type value of 26, some other nal_unit_type value could be used instead.</li>    </ul>    </li></ul></p><p id="p-0111" num="0385">Further, the syntax structure of temporal_sublayer_presence_rbsp( ) in one example could include some syntax element(s), but in the simplest example, there are no syntax elements in the temporal_sublayer_presence_rbsp( ), since the most important property of this NAL unit is included already in the NAL unit header: TemporalId (as derived from nuh_temporal_id_plus1).<ul id="ul0091" list-style="none">    <li id="ul0091-0001" num="0000">    <ul id="ul0092" list-style="none">        <li id="ul0092-0001" num="0386">In one example, instead of introducing a new NAL unit type, the desired functionality may be achieved with an existing NAL unit type, such as, the filler data NAL unit type (FD_NUT). The corresponding semantics, in one example, may be based on the following:</li>        <li id="ul0092-0002" num="0387">NAL units with nal_unit_type equal to FD_NUT are required to be present before the first VCL NAL unit in the first Access Unit of a Coded Video Sequence for all temporal sub-layers that may contain one or more VCL NAL units in the CVS. When no FD_NUT NAL unit with TemporalId equal to tidA is present before the first VCL NAL unit in the first Access Unit of the CVS it is a requirement of bitstream conformance that no VCL NAL unit with TemporaldId equal to or greater than tidA is present in the CVS, for all tidA in the range of 0 to 6, inclusive.</li>        <li id="ul0092-0003" num="0388">The variable MaxTid is set equal to the highest value of TemporalId of all FD_NUT NAL units present before the first VCL NAL unit in the first access unit of the CVS.</li>        <li id="ul0092-0004" num="0389">In one example, when a TSP_NUT is allowed or the FD_NUT is used to indicate TemporalId, the following profile definitions may be provided for a bitstream:</li>        <li id="ul0092-0005" num="0390">Bitstreams conforming to the Main 10 profile shall obey the following constraints:        <ul id="ul0093" list-style="none">            <li id="ul0093-0001" num="0391">Active SPSs for the base layer shall have chroma_format_idc equal to 0 or 1 only.</li>            <li id="ul0093-0002" num="0392">Active SPSs for the base layer shall have bit_depth_luma_minus8 in the range of 0 to 2, inclusive.</li>            <li id="ul0093-0003" num="0393">Active SPSs for the base layer shall have bit_depth_chroma_minus8 in the range of 0 to 2, inclusive.</li>            <li id="ul0093-0004" num="0394">The tier and level constraints specified for the Main 10 profile in clause A.4, as applicable, shall be fulfilled.</li>        </ul>        </li>        <li id="ul0092-0006" num="0395">Conformance of a bitstream to the Main 10 profile is indicated by general_profile_idc being equal to 1.</li>        <li id="ul0092-0007" num="0396">Decoders conforming to the Main 10 profile at a specific level of a specific tier shall be capable of decoding all bitstreams for which all of the following conditions apply:        <ul id="ul0094" list-style="none">            <li id="ul0094-0001" num="0397">The bitstream is indicated to conform to the Main 10 profile.</li>            <li id="ul0094-0002" num="0398">The bitstream is indicated through general_level_idc to conform to a level that is not level 8.5 and is lower than or equal to the specified level, or the bitstream is indicated through sublayer_level_idc[MaxTid] to conform to a level that is not level 8.5 and is lower than or equal to the specified level.</li>            <li id="ul0094-0003" num="0399">The bitstream is indicated to conform to a tier that is lower than or equal to the specified tier.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0112" num="0400"><figref idref="DRAWINGS">FIG. <b>8</b></figref> and <figref idref="DRAWINGS">FIG. <b>9</b></figref> respectively illustrate examples where the bitstreams in <figref idref="DRAWINGS">FIG. <b>4</b></figref> and <figref idref="DRAWINGS">FIG. <b>5</b></figref> are modified to include the TSP_NUT. It should be noted that in Bitstream C&#x2032; illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>, there is a TSP_NUT with TemporalId equal to 1 present in the first Access Unit of the CVS. Thus, a level 5.1 decoder can immediately detect that it cannot decode the bitstream. Furthermore, the conformance definition allows the level 5.1 decoder to reject the bitstream since MaxTid is equal to 1 and sublayer_level_idc[1] indicates level 5.2.<ul id="ul0095" list-style="none">    <li id="ul0095-0001" num="0000">    <ul id="ul0096" list-style="none">        <li id="ul0096-0001" num="0401">It should be noted that in the system layer, such as, in a file format, it is common to expose certain properties of bitstreams, such as, for example, the profile and level that the bitstream conforms to. It should be noted that the changes in the video specification described above does not inherently require change to system specifications, since it would still be acceptable to advertise a level 5.1 bitstream to be a level 5.2 bitstream (since all level 5.1 bitstreams are also valid level 5.2 bitstreams). However, in order for a decoder to correctly determine its ability to decode bitstreams, one of the following options may be used for the system layer:</li>        <li id="ul0096-0002" num="0402">In one example, sublayer_level_idc[ ] may be exposed for all temporal sublayers in the bitstream. In one variant, the list of subplayer_level_idc[ ] values correspond directly to the values in the parameter sets (e.g. SPS) in the bitstream. In another variant, the list only includes values for those temporal layers that are actually present in the bitstream.</li>        <li id="ul0096-0003" num="0403">Further, in one example, the MaxTid may be exposed directly in the system layer.</li>        <li id="ul0096-0004" num="0404">In one example, the level_idc exposed in the system layer may be set to be the actual level of the bitstream and not necessarily equal to the general_level_idc. In the example of Bitstream B&#x2032;, illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the system layer would take into account the highest TemporalID value of all TSP_NUT NAL units, in this case 0, and use that to determine the value of level_idc, in this case indicating level 5.1, since sublayer_level_idc[0] indicates level 5.1.</li>        <li id="ul0096-0005" num="0405">Further, in one example, NAL units with nal_unit_type equal to TSP_NUT and TemporalID equal to X are only required to be present for temporal sub-layers higher than 0 and MaxTid is inferred to be equal to 0 when no NAL units with nal_unit_type equal to TSP_NUT are present in the bitstream.</li>    </ul>    </li></ul></p><p id="p-0113" num="0406">In one example, according to the techniques herein, a syntax element which specifies the actual maximum number of temporal sub-layers present in each CLVS referring to the SPS may be optionally signaled in an SPS (and/or in video parameter set). Table 7 illustrates an example of the relevant portion of an seq_parameter_set_rbsp( ) syntax structure, where a syntax element which specifies the actual maximum number of temporal sub-layers present in each CLVS referring to the SPS may be optionally signaled.</p><p id="p-0114" num="0000"><tables id="TABLE-US-00007" num="00007"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="175pt" align="left"/><colspec colname="2" colwidth="42pt" align="left"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 7</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>seq_parareter_set_rbsp( ) {</entry><entry>Descriptor</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;sps_decoding_parameter_set_id </entry><entry>u(4) </entry></row><row><entry>&#x2003;sps_video_parameter_set_id </entry><entry>u(4) </entry></row><row><entry>&#x2003;sps_max_sublayers_minus1 </entry><entry>u(3) </entry></row><row><entry>&#x2003;&#x2003;if(sps_max_sublayers_minus1 &#x3e; 0) </entry><entry/></row><row><entry>&#x2003;&#x2003;sps_max_tid_minus1_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;&#x2003;if(sps_max_tid_minus1_present_flag) </entry><entry/></row><row><entry>&#x2003;&#x2003;sps_max_tid_minus1 </entry><entry>u(3) </entry></row><row><entry>&#x2003;sps_reserved_zero_4bits </entry><entry>u(4) </entry></row><row><entry>&#x2003;sps_ptl_dpb_hrd_params_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_ptl_dpb_hrd_params_present_flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;profile_tier_level( 1, sps_max_sublayers_minus1 ) </entry><entry/></row><row><entry>&#x2003;gdr_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_seq_parameter_set_id </entry><entry>u(4) </entry></row><row><entry>&#x2003;chroma_format_idc </entry><entry>u(2) </entry></row><row><entry>&#x2003;if( chroma_format_idc = = 3 ) </entry><entry/></row><row><entry>&#x2003;&#x2003;separate_colour_plane_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;ref_pic_resampling_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;pic_width_max_in_luma_samples </entry><entry>ue(v) </entry></row><row><entry>&#x2003;pic_height_max_in_luma_samples </entry><entry>ue(v) </entry></row><row><entry>&#x2003;sps_log2_ctu_size_minus5 </entry><entry>u(2) </entry></row><row><entry>&#x2003;subpics_present_flag </entry><entry>u(1) </entry></row><row><entry>. . .</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><ul id="ul0097" list-style="none">    <li id="ul0097-0001" num="0000">    <ul id="ul0098" list-style="none">        <li id="ul0098-0001" num="0407">With respect to Table 7, the semantics may be based on the semantics provided above with the following:</li>        <li id="ul0098-0002" num="0408">sps_max_tid_minus1_present_flag equal to 1 specifies that the syntax element sps_max_tid_minus1 is present. sps_max_tid_minus1_present flag equal to 0 specifies that the syntax element sps_max_tid_minus1 is not present. When not present, sps_max_tid_minus1_present flag is inferred to be equal to 0.</li>        <li id="ul0098-0003" num="0409">sps_max_tid_minus1 plus 1 specifies the maximum number of temporal sublayers that are present in each CLVS referring to the SPS. The value of sps_max_tid_minus1 shall be in the range of 0 to sps_max_sublayers_minus1, inclusive. When not present sps_max_tid_minus1 is inferred to be equal to sps_max_sublayers_minus1.</li>        <li id="ul0098-0004" num="0410">In one example:</li>        <li id="ul0098-0005" num="0411">When not present and when sps_max_sublayers_minus1 is equal to 0, sps_max_tid_minus1 is inferred to be equal to 0.</li>        <li id="ul0098-0006" num="0412">In another example:</li>        <li id="ul0098-0007" num="0413">When not present sps_max_tid_minus1 is inferred to be unspecified.</li>        <li id="ul0098-0008" num="0414">In another example:</li>        <li id="ul0098-0009" num="0415">When not present and when sps_max_sublayers_minus1 is equal to 0, sps_max_tid_minus1 is inferred to be equal to 0. Otherwise when not present sps_max_tid_minus1 is inferred to be unspecified.</li>        <li id="ul0098-0010" num="0416">With respect to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, for Bitstream A, the value of sps max_tid_minus1 may be set equal to 1 and for Bitstream B, the value of sps max_tid_minus1 may be set equal to 0. Furthermore, in one example with respect to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, for Bitstream A and for Bitstream B the value of sps_max_sublayers_minus1 may be set equal to 1.</li>    </ul>    </li></ul></p><p id="p-0115" num="0417">In one example, the Condition if (sps_max_sublayers_minus1&#x3e;0) may instead be written as if (!sps_max_sublayers_minus1). Further, in one example, sps_max_tid_minus1_present_flag may be signaled unconditionally (i.e. without an if condition).<ul id="ul0099" list-style="none">    <li id="ul0099-0001" num="0000">    <ul id="ul0100" list-style="none">        <li id="ul0100-0001" num="0418">With respect to Table 7, in one example, the following profile definitions may be provided for a bitstream:</li>        <li id="ul0100-0002" num="0419">Conformance of a bitstream to the Main 10 profile is indicated by general_profile_idc being equal to 1.</li>        <li id="ul0100-0003" num="0420">Decoders conforming to the Main 10 profile at a specific level (identified by a specific value of sublayer_level_idc[sps_max_tid_minus1_present_flag ?sps_max_tid_minus1:sps_max_sublayers_minus1]) of a specific tier (identified by a specific value of general_tier_flag) shall be capable of decoding all bitstreams and sublayer representations with TemporalId equal to or less than sps_max_tid_minus1_present_flag ?(sps_max_tid_minus1+1):(sps_max_sublayers_minus1+1), for which all of the following conditions apply:        <ul id="ul0101" list-style="none">            <li id="ul0101-0001" num="0421">The bitstream is indicated to conform to the Main 10 profile.</li>            <li id="ul0101-0002" num="0422">The bitstream or sublayer representation with TemporalId less than or equal to sps_max_tid_minus1_present_flag?(sps_max_tid_minus1+1):(sps_max_sublayers_minus1+1) is indicated to conform to a level that is not level 8.5 and is lower than or equal to the specified level.</li>            <li id="ul0101-0003" num="0423">The bitstream is indicated to conform to a tier that is lower than or equal to the specified tier.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0116" num="0424">In an example: &#x2014;The term &#x201c;sublayer_level_idc[sps_max_tid_minus1_present_flag ?sps_max tid-minus1:sps_max_sublayers_minus1]&#x201d; may be replaced by &#x201c;sublayer_level_idc[sps_max_tid-minus1] when present or general_level_idc otherwise&#x201d;</p><p id="p-0117" num="0425">Table 8 illustrates an example of the relevant portion of an seq_parameter_set_rbsp( ) syntax structure, where a syntax element which specifies the actual maximum number of temporal sub-layers present in each CLVS referring to the SPS may be optionally signaled. In the case of the example illustrated in Table 8, the syntax is constructed such that the value of sps_max_tid_minus1 can always be modified with a simple bit modification, without affecting (shifting) any other syntax elements. This is accomplished by making sps_max_tid_minus1 signaled with a fix-length code and unconditionally present. An additional advantage of the syntax provided in Table 8 is that the first part of the SPS can provide a fixed mapping to syntax elements and byte alignment of the profile_tier_leve syntax structure.</p><p id="p-0118" num="0000"><tables id="TABLE-US-00008" num="00008"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="175pt" align="left"/><colspec colname="2" colwidth="42pt" align="left"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 8</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>seq_parameter_set_rbsp( ) {</entry><entry>Descriptor</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;sps_decoding_parameter_set_id </entry><entry>u(4) </entry></row><row><entry>&#x2003;sps_video_parameter_set_id </entry><entry>u(4) </entry></row><row><entry>&#x2003;sps_max_sublayers_minus1 </entry><entry>u(3) </entry></row><row><entry>&#x2003;sps_max_tid_minus1 </entry><entry>u(3) </entry></row><row><entry>&#x2003;sps_reserved_zero_14bits </entry><entry>u(14) </entry></row><row><entry>&#x2003;sps_ptl_dpb_hrd_params_present_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;if( sps_ptl_dpb_hrd_params_present_flag ) </entry><entry/></row><row><entry>&#x2003;&#x2003;profile_tier_level( 1, sps_max_sublayers_minus1 ) </entry><entry/></row><row><entry>&#x2003;gdr_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;sps_seq_parameter_set_id </entry><entry>u(4) </entry></row><row><entry>&#x2003;chroma_format_idc </entry><entry>u(2) </entry></row><row><entry>&#x2003;if( chroma_format_idc&#x2003;= =&#x2003;3 ) </entry><entry/></row><row><entry>&#x2003;&#x2003;separate_colour_plane_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;ref_pic_resampling_enabled_flag </entry><entry>u(1) </entry></row><row><entry>&#x2003;pic_width_max_in_luma_samples </entry><entry>ue(v) </entry></row><row><entry>&#x2003;pic_height_max_in_luma_samples </entry><entry>ue(v) </entry></row><row><entry>&#x2003;sps_log2_ctu_size_minus5 </entry><entry>u(2) </entry></row><row><entry>&#x2003;subpics_present_flag </entry><entry>u(1) </entry></row><row><entry>. . .</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0119" num="0426">With respect to Table 8, the semantics may be based on the semantics provided above.<ul id="ul0102" list-style="none">    <li id="ul0102-0001" num="0000">    <ul id="ul0103" list-style="none">        <li id="ul0103-0001" num="0427">It should be noted that is possible to extend the techniques described above to apply not only to temporal sublayers, but also to layers (such as, e.g., spatial layers or multiview layers). For example, in one example, the following constraints may be applied:</li>        <li id="ul0103-0002" num="0428">NAL units with nal_unit_type equal to TSP_NUT are required to be present before the first VCL NAL unit in the first Access Unit of a Coded Video Sequence for all temporal sub-layers of all layers that may contain one or more VCL NAL units in the CVS. When no TSP_NUT NAL unit with TemporalId equal to tidA and nuh_layer_id equal to lidA is present before the first VCL NAL unit in the first Access Unit of the CVS it is a requirement of bitstream conformance that no VCL NAL unit with nuh_layer_id equal to lidA and TemporaldId equal to or greater than tidA is present in the CVS, for all values of lidA and tidA.</li>        <li id="ul0103-0003" num="0429">The variable MaxTid is set equal to the highest value of TemporalId of all TSP_NUT NAL units present before the first VCL NAL unit in the first access unit of the CVS.</li>    </ul>    </li></ul></p><p id="p-0120" num="0430">In this manner, source device <b>102</b> represents an example of a device configured to signal a temporal sublayer information for video data comprises signaling a flag indicating whether a syntax element specifying a maximum number of temporal sublayers that are present in each coded layer video sequence referring to a sequence parameter set is present in the sequence parameter set and conditionally signal the syntax element specifying a maximum number of temporal sublayers based on the value of the flag.</p><p id="p-0121" num="0431">Referring again to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, interface <b>108</b> may include any device configured to receive data generated by data encapsulator <b>107</b> and transmit and/or store the data to a communications medium. Interface <b>108</b> may include a network interface card, such as an Ethernet card, and may include an optical transceiver, a radio frequency transceiver, or any other type of device that can send and/or receive information. Further, interface <b>108</b> may include a computer system interface that may enable a file to be stored on a storage device. For example, interface <b>108</b> may include a chipset supporting Peripheral Component Interconnect (PCI) and Peripheral Component Interconnect Express (PCIe) bus protocols, proprietary bus protocols, Universal Serial Bus (USB) protocols, IC, or any other logical and physical structure that may be used to interconnect peer devices.</p><p id="p-0122" num="0432">Referring again to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, destination device <b>120</b> includes interface <b>122</b>, data decapsulator <b>123</b>, video decoder <b>124</b>, and display <b>126</b>. Interface <b>122</b> may include any device configured to receive data from a communications medium. Interface <b>122</b> may include a network interface card, such as an Ethernet card, and may include an optical transceiver, a radio frequency transceiver, or any other type of device that can receive and/or send information. Further, interface <b>122</b> may include a computer system interface enabling a compliant video bitstream to be retrieved from a storage device. For example, interface <b>122</b> may include a chipset supporting PCI and PCIe bus protocols, proprietary bus protocols, USB protocols, PC, or any other logical and physical structure that may be used to interconnect peer devices. Data decapsulator <b>123</b> may be configured to receive and parse any of the example syntax structures described herein.</p><p id="p-0123" num="0433">Video decoder <b>124</b> may include any device configured to receive a bitstream (e.g., a sub-bitstream extraction) and/or acceptable variations thereof and reproduce video data therefrom. Display <b>126</b> may include any device configured to display video data. Display <b>126</b> may comprise one of a variety of display devices such as a liquid crystal display (LCD), a plasma display, an organic light emitting diode (OLED) display, or another type of display. Display <b>126</b> may include a High Definition display or an Ultra High Definition display. It should be noted that although in the example illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, video decoder <b>124</b> is described as outputting data to display <b>126</b>, video decoder <b>124</b> may be configured to output video data to various types of devices and/or sub-components thereof. For example, video decoder <b>124</b> may be configured to output video data to any communication medium, as described herein.</p><p id="p-0124" num="0434"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram illustrating an example of a video decoder that may be configured to decode video data according to one or more techniques of this disclosure (e.g., the decoding process for reference-picture list construction described above). In one example, video decoder <b>600</b> may be configured to decode transform data and reconstruct residual data from transform coefficients based on decoded transform data. Video decoder <b>600</b> may be configured to perform intra prediction decoding and inter prediction decoding and, as such, may be referred to as a hybrid decoder. Video decoder <b>600</b> may be configured to parse any combination of the syntax elements described above in Tables 1-8. Video decoder <b>600</b> may decode a picture based on or according to the processes described above, and further based on parsed values in Tables 1-8.</p><p id="p-0125" num="0435">In the example illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, video decoder <b>600</b> includes an entropy decoding unit <b>602</b>, inverse quantization unit and transform coefficient processing unit <b>604</b>, intra prediction processing unit <b>606</b>, inter prediction processing unit <b>608</b>, summer <b>610</b>, post filter unit <b>612</b>, and reference buffer <b>614</b>. Video decoder <b>600</b> may be configured to decode video data in a manner consistent with a video coding system. It should be noted that although example video decoder <b>600</b> is illustrated as having distinct functional blocks, such an illustration is for descriptive purposes and does not limit video decoder <b>600</b> and/or sub-components thereof to a particular hardware or software architecture. Functions of video decoder <b>600</b> may be realized using any combination of hardware, firmware, and/or software implementations.</p><p id="p-0126" num="0436">As illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, entropy decoding unit <b>602</b> receives an entropy encoded bitstream. Entropy decoding unit <b>602</b> may be configured to decode syntax elements and quantized coefficients from the bitstream according to a process reciprocal to an entropy encoding process. Entropy decoding unit <b>602</b> may be configured to perform entropy decoding according any of the entropy coding techniques described above. Entropy decoding unit <b>602</b> may determine values for syntax elements in an encoded bitstream in a manner consistent with a video coding standard. As illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, entropy decoding unit <b>602</b> may determine a quantization parameter, quantized coefficient values, transform data, and prediction data from a bitstream. In the example, illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, inverse quantization unit and transform coefficient processing unit <b>604</b> receives a quantization parameter, quantized coefficient values, transform data, and prediction data from entropy decoding unit <b>602</b> and outputs reconstructed residual data.</p><p id="p-0127" num="0437">Referring again to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, reconstructed residual data may be provided to summer <b>610</b> Summer <b>610</b> may add reconstructed residual data to a predictive video block and generate reconstructed video data. A predictive video block may be determined according to a predictive video technique (i.e., intra prediction and inter frame prediction). Intra prediction processing unit <b>606</b> may be configured to receive intra prediction syntax elements and retrieve a predictive video block from reference buffer <b>614</b>. Reference buffer <b>614</b> may include a memory device configured to store one or more frames of video data. Intra prediction syntax elements may identify an intra prediction mode, such as the intra prediction modes described above. Inter prediction processing unit <b>608</b> may receive inter prediction syntax elements and generate motion vectors to identify a prediction block in one or more reference frames stored in reference buffer <b>616</b>. Inter prediction processing unit <b>608</b> may produce motion compensated blocks, possibly performing interpolation based on interpolation filters. Identifiers for interpolation filters to be used for motion estimation with sub-pixel precision may be included in the syntax elements. Inter prediction processing unit <b>608</b> may use interpolation filters to calculate interpolated values for sub-integer pixels of a reference block. Post filter unit <b>614</b> may be configured to perform filtering on reconstructed video data. For example, post filter unit <b>614</b> may be configured to perform deblocking and/or Sample Adaptive Offset (SAO) filtering, e.g., based on parameters specified in a bitstream. Further, it should be noted that in some examples, post filter unit <b>614</b> may be configured to perform proprietary discretionary filtering (e.g., visual enhancements, such as, mosquito noise reduction). As illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, a reconstructed video block may be output by video decoder <b>600</b>. In this manner, video decoder <b>600</b> represents an example of a device configured to parse a flag indicating whether a syntax element specifying a maximum number of temporal sublayers that are present in each coded layer video sequence referring to a sequence parameter set is present in the sequence parameter set and conditionally parse the syntax element specifying a maximum number of temporal sublayers based on the value of the flag.</p><p id="p-0128" num="0438">In one or more examples, the functions described may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the functions may be stored on or transmitted over as one or more instructions or code on a computer-readable medium and executed by a hardware-based processing unit. Computer-readable media may include computer-readable storage media, which corresponds to a tangible medium such as data storage media, or communication media including any medium that facilitates transfer of a computer program from one place to another, e.g., according to a communication protocol. In this manner, computer-readable media generally may correspond to (1) tangible computer-readable storage media which is non-transitory or (2) a communication medium such as a signal or carrier wave. Data storage media may be any available media that can be accessed by one or more computers or one or more processors to retrieve instructions, code and/or data structures for implementation of the techniques described in this disclosure. A computer program product may include a computer-readable medium.</p><p id="p-0129" num="0439">By way of example, and not limitation, such computer-readable storage media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage, or other magnetic storage devices, flash memory, or any other medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also, any connection is properly termed a computer-readable medium. For example, if instructions are transmitted from a website, server, or other remote source using a coaxial cable, fiber optic cable, twisted pair, digital subscriber line (DSL), or wireless technologies such as infrared, radio, and microwave, then the coaxial cable, fiber optic cable, twisted pair, DSL, or wireless technologies such as infrared, radio, and microwave are included in the definition of medium. It should be understood, however, that computer-readable storage media and data storage media do not include connections, carrier waves, signals, or other transitory media, but are instead directed to non-transitory, tangible storage media. Disk and disc, as used herein, includes compact disc (CD), laser disc, optical disc, digital versatile disc (DVD), floppy disk and Blu-ray disc where disks usually reproduce data magnetically, while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer-readable media.</p><p id="p-0130" num="0440">Instructions may be executed by one or more processors, such as one or more digital signal processors (DSPs), general purpose microprocessors, application specific integrated circuits (ASICs), field programmable logic arrays (FPGAs), or other equivalent integrated or discrete logic circuitry. Accordingly, the term &#x201c;processor,&#x201d; as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition, in some aspects, the functionality described herein may be provided within dedicated hardware and/or software modules configured for encoding and decoding, or incorporated in a combined codec. Also, the techniques could be fully implemented in one or more circuits or logic elements.</p><p id="p-0131" num="0441">The techniques of this disclosure may be implemented in a wide variety of devices or apparatuses, including a wireless handset, an integrated circuit (IC) or a set of ICs (e.g., a chip set). Various components, modules, or units are described in this disclosure to emphasize functional aspects of devices configured to perform the disclosed techniques, but do not necessarily require realization by different hardware units. Rather, as described above, various units may be combined in a codec hardware unit or provided by a collection of interoperative hardware units, including one or more processors as described above, in conjunction with suitable software and/or firmware.</p><p id="p-0132" num="0442">Moreover, each functional block or various features of the base station device and the terminal device used in each of the aforementioned embodiments may be implemented or executed by a circuitry, which is typically an integrated circuit or a plurality of integrated circuits. The circuitry designed to execute the functions described in the present specification may comprise a general-purpose processor, a digital signal processor (DSP), an application specific or general application integrated circuit (ASIC), a field programmable gate array (FPGA), or other programmable logic devices, discrete gates or transistor logic, or a discrete hardware component, or a combination thereof. The general-purpose processor may be a microprocessor, or alternatively, the processor may be a conventional processor, a controller, a microcontroller or a state machine. The general-purpose processor or each circuit described above may be configured by a digital circuit or may be configured by an analogue circuit. Further, when a technology of making into an integrated circuit superseding integrated circuits at the present time appears due to advancement of a semiconductor technology, the integrated circuit by this technology is also able to be used.</p><p id="p-0133" num="0443">Various examples have been described. These and other examples are within the scope of the following claims.</p><heading id="h-0006" level="1">CROSS REFERENCE</heading><p id="p-0134" num="0444">This Nonprovisional application claims priority under 35 U.S.C. &#xa7; 119 on provisional Application No. 62/944,547 on Dec. 6, 2019, the entire contents of which are hereby incorporated by reference.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230007291A1-20230105-M00001.NB"><img id="EMI-M00001" he="12.70mm" wi="76.20mm" file="US20230007291A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230007291A1-20230105-M00002.NB"><img id="EMI-M00002" he="5.25mm" wi="76.20mm" file="US20230007291A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of signaling a temporal sublayer information for video data, the method comprising:<claim-text>signaling a flag indicating whether a syntax element specifying a maximum number of temporal sublayers that are present in a coded layer video sequence is present; and</claim-text><claim-text>conditionally signaling the syntax element based on a value of the flag.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. A method of decoding video data, the method comprising:<claim-text>parsing a flag indicating whether a syntax element specifying a maximum number of temporal sublayers that are present in a coded layer video sequence is present; and</claim-text><claim-text>conditionally parsing the syntax element based on a value of the flag.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. A device comprising one or more processors configured to perform steps of <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The device of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the device includes a video encoder.</claim-text></claim><claim id="CLM-05-10" num="05-10"><claim-text><b>5</b>-<b>10</b>. (canceled)</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A device comprising one or more processors configured to perform steps of <claim-ref idref="CLM-00002">claim 2</claim-ref>.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the device includes a video decoder.</claim-text></claim></claims></us-patent-application>