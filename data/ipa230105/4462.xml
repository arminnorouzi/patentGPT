<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004463A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004463</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17366568</doc-number><date>20210702</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>14</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4401</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>455</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1448</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4401</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>45558</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2009</main-group><subgroup>45575</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">AUTOSCREENSHOT SYSTEMS AND METHODS FOR VIRTUAL OPERATING SYSTEM STATES</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>DATTO, INC.</orgname><address><city>Norwalk</city><state>CT</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Mitchell</last-name><first-name>Collin</first-name><address><city>Rochester</city><state>NY</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>DATTO, INC.</orgname><role>02</role><address><city>Norwalk</city><state>CT</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Described screenshot verification systems and methods for automatically verifying the integrity of a backup image or other process-of-interest using a screenshot verification system, as well as disaster recovery systems including said systems and performing said methods. In accordance with various aspects of the present disclosure, a virtual machine is booted and screenshots of the boot process are taken, which are used by a trained model, such as a convolutional neural network, to determine a boot state consistency. The systems and methods described deliver over 99% accuracy and do not involve regular expression analysis typical of conventional methods.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="108.37mm" wi="158.75mm" file="US20230004463A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="214.29mm" wi="152.99mm" orientation="landscape" file="US20230004463A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="221.57mm" wi="156.46mm" orientation="landscape" file="US20230004463A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="224.87mm" wi="153.75mm" file="US20230004463A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="208.20mm" wi="128.78mm" file="US20230004463A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="143.26mm" wi="147.49mm" orientation="landscape" file="US20230004463A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="154.86mm" wi="141.05mm" orientation="landscape" file="US20230004463A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="150.11mm" wi="144.36mm" orientation="landscape" file="US20230004463A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="150.11mm" wi="144.36mm" orientation="landscape" file="US20230004463A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="150.11mm" wi="144.36mm" orientation="landscape" file="US20230004463A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="203.79mm" wi="144.19mm" orientation="landscape" file="US20230004463A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="202.44mm" wi="118.96mm" orientation="landscape" file="US20230004463A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">The following innovations generally relate to automated screenshot verification systems and methods for verifying virtual operating system states. Screenshot verification technologies allow for the confirmation that a device's backups are healthy and working by building and booting virtual machines from preexisting backups and performing context-sensitive tests against the virtual machine's output to evaluate a pass or fail condition. It finds particular application in conjunction with robust disaster recovery systems and methods that require highly accurate evaluations but avoids having to extract text from the screenshots of the virtual machine boot states and matching against an ever-increasing and ever-changing list of representations of operating system bootable states.</p><heading id="h-0002" level="1">BRIEF DESCRIPTION</heading><p id="p-0003" num="0002">In accordance with a first embodiment of the present disclosure, a method of evaluating the integrity of a process-of-interest associated with a protected machine and performing a recommended action based thereon is described. The method can include: (a) initiating the process-of-interest; (b) taking a plurality of screenshots of the display output while the process-of-interest is being initiated; (c) communicating one or more of the plurality of screenshots of the display output to a prediction module; (d) using the prediction module, determining a state classification for each screenshot of the plurality of screenshots of the display output using a trained model, wherein the trained model is an artificial neural network; (e) adding each screenshot of the plurality of screenshots of the display output and the state classification associated with each screenshot to a memory array; (f) testing at least a first portion of the memory array to determine a consistency class for the process-of-interest based on the screenshots and the associated state classifications stored in at least the first portion of the memory array; (g) based on the consistency class determined based on at least the first portion of the memory array, performing at least one of the following: (g1) repeating steps (b) through (g) and testing at least a second portion of the memory array to determine a consistency class for the process-of-interest based on the screenshots and the associated state classifications stored in at least the second portion of the memory array, and wherein the second portion of the memory array includes one or more screenshots and one or more state classifications not included in the first portion of the memory array; and (g2) generating a report concerning the consistency class determined in connection with at least the first portion of the memory array, the report comprising a representative screenshot selected from the screenshots stored within the memory array and the consistency class.</p><p id="p-0004" num="0003">In accordance with a second embodiment of the present disclosure, a method of evaluating the integrity of at least a first backup image associated with a protected machine and performing a recommended action based thereon is described. The method can include: (a) booting a virtual machine based on at least the first backup image; (b) taking a plurality of samples of the display output of the virtual machine over a first duration; (c) communicating the plurality of samples to a prediction module, the prediction module comprising a trained model; (d) determining, via the trained model of the prediction module, a state classification for one or more samples of the plurality of samples, wherein the trained model is an artificial neural network trained using a plurality of training images from one or more operating systems; (e) adding each sample of the plurality of samples and each associated state classifications to a memory array; (f) testing at least a first portion of the memory array to determine a consistency class based on the samples and the state classifications stored in at least the first portion of the memory array; (g) based on the consistency class determined based on at least the first portion of the memory array, performing at least one of the following: (g1) repeating steps (b) through (g) and testing at least a second portion of the memory array to determine a consistency class based on the samples and state classifications stored in at least the second portion of the memory array, wherein the second portion of the memory array includes one or more samples and one or more state classifications not included in the first portion of the memory array; and (g2) generating a report concerning the consistency class determined in connection with at least the first portion of the memory array, the report comprising a representative screenshot selected from the screenshots stored within the memory array and the consistency class.</p><p id="p-0005" num="0004">In accordance with a third embodiment of the present disclosure, a protected machine backup system is described. The backup system can include at least a first device including at least one processor and memory storing instructions that, when executed by the at least one processor, cause the first device to perform one or more steps. These steps may include: (a) booting a virtual machine based on at least a first backup image; (b) taking a plurality of samples of the display output of the virtual machine over a first duration while the virtual machine is booting; (c) communicating the plurality of samples of the virtual machine to a prediction module comprising a trained model, wherein the trained model is an artificial neural network trained using a plurality of boot-state training images from one or more operating systems; (d) determining, via the prediction model, a state classification for each sample of the plurality of samples of the virtual machine; (e) adding each sample of the plurality of samples of the virtual machine and the state classification determined in association with each sample to a memory array; (f) testing at least a first portion of the memory array to determine a consistency class based on the samples and the state classifications stored in at least the first portion of the memory array; and (g) based on the consistency class determined based on at least the first portion of the memory array, performing at least one of the following: (g1) repeating steps (b) through (g) and testing at least a second portion of the memory array to determine a consistency class based on the samples and state classifications stored in at least the second portion of the memory array, wherein the second portion of the memory array includes one or more samples and one or more state classifications not included in the first portion of the memory array; (g2) generating a report concerning the consistency class determined in connection with at least the first portion of the memory array, the report comprising a representative screenshot selected from the screenshots stored within the memory array and the consistency class; and (g3) generating a recommended action to be taken based on the consistency class and taking the recommended action, wherein the recommended action including at least one of: reporting information regarding the consistency class; recording information regarding the consistency class; and ending the method.</p><p id="p-0006" num="0005">In accordance with a fourth embodiment of the present disclosure, a screenshot verification system for evaluating the integrity of a process-of-interest is describe. The system can include at least a first device comprising at least one processor and memory including instructions that, when executed by the at least one processor, cause the first device to perform one or more steps. (a) initializing the process-of-interest; (b) taking a plurality of screenshots of the display output associated with the process-of-interest over a first duration including the initialization of the process-of-interest; (c) communicating the plurality of screenshots of the display output associated with the process-of-interest to a prediction module, wherein the prediction comprises a trained model that is an artificial neural network trained using a plurality of process-of-interest training images from one or more operating systems; (d) determining, via the prediction module, a state classification for each screenshot of the plurality of screenshots of the display output associated with the process-of-interest; (e) adding each screenshot of the plurality of screenshots of the display output and the state classifications determined in association with each screenshot to a memory array; (f) testing at least a first portion of the memory array to determine a consistency class for the process-of-interest based on the screenshots and the associated state classifications stored in at least the first portion of the memory array; (g) based on the consistency class determined based on at least the first portion of the memory array, performing at least one of the following: (g1) repeating steps (b) through (g) and testing at least a second portion of the memory array to determine a consistency class for the process-of-interest based on the screenshots and the associated state classifications stored in at least the second portion of the memory array, and wherein the second portion of the memory array includes one or more screenshots and one or more state classifications not included in the first portion of the memory array; (g2) generating a report concerning the consistency class determined in connection with at least the first portion of the memory array, the report comprising a representative screenshot selected from the screenshots stored within the memory array and the consistency class; and (g3) generating a recommended action to be taken based on the consistency class and taking the recommended action, wherein the recommended action including at least one of: reporting information regarding the consistency class; recording information regarding the consistency class; and ending the method.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0007" num="0006">The patent or application file contains at least one drawing executed in color. Copies of this patent or patent application publication with color drawing(s) will be provided by the Office upon request and payment of the necessary fee.</p><p id="p-0008" num="0007">For a more complete understanding of the present disclosure, reference is now made to the following descriptions taken in conjunction with the accompanying drawings, in which:</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of a backup system including a screenshot verification system illustrated in accordance with one aspect of the present disclosure.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating the steps of a method for using a screenshot verification system in accordance with one aspect of the present disclosure.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart of a method for verifying the integrity of a backup image in accordance with another aspect of the present disclosure.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram illustrating the operation of a memory array used in the screenshot verification system in accordance with a further aspect of the present disclosure;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIGS. <b>5</b>-<b>9</b></figref> are screenshots in color of boot screens associated with various boot states of a protected machine running Windows&#xae; operating software.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>10</b>A-<b>10</b>B</figref> are screenshots of a backup agent associated with a backup system that includes a screenshot verification system in accordance with still another aspect of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0015" num="0014">As used herein, the terms &#x201c;screenshot&#x201d; and &#x201c;screenshot image&#x201d; are used to refer to a copy of the output displayed by a computer screen.</p><p id="p-0016" num="0015">As used herein, the term &#x201c;disk image&#x201d; is used to refer to a computer file containing the contents of a disk volume such as a hard disk, an optical disc, a USB flash drive, or other storage media. A &#x201c;backup disk image&#x201d; refers to a disk image that is a copy of a disk volume that is stored for backup purposes.</p><p id="p-0017" num="0016">The present disclosure is directed towards automated screenshot verification systems and methods for verifying operating system states. Robust disaster recovery systems and methods require accurate evaluation of backup disk images. In particular scenarios, it may be important to determine the integrity of a backup image. One method of performing such determinations is by using a device's backup image to boot a virtual machine and then take a screenshot of the boot state of the virtual machine for confirmation. In other scenarios, it may be important to determine the integrity of a process or subprocess (i.e., a process-of-interest) associated with a device and/or its backup disk image. For example, a device may be booted and instructed to perform a particular process (e.g., program, application, etc.) while screenshots of the display output are taken. However, the ways that various programs, applications, and the like are displayed by different operating systems can change with every update. As such, there is very little consistency guaranteed when attempting to check the integrity of boot states and/or process states across a wide range of platforms using conventional text extraction methods. Similarly, the ways that boot states are displayed by various operating systems are ever-increasing and ever-changing.</p><p id="p-0018" num="0017">Screenshot verification technologies allow for the confirmation of the integrity of a computer state by building and booting virtual machines from preexisting backups and performing context-sensitive tests against the virtual machine's output to evaluate a pass or fail condition. In existing processes, it is challenging to include new categories of machine states and categorization using regular expressions (also known as regex) is error prone. Categorization using regular expressions extracted from an image is reliant on two phases: a text extraction phase and a matching phase. While character recognition has improved, these systems and methods are dependent on the library correctly identifying all characters in any possible image that it encounters. In a global context, this is a much harder to guarantee and a single mistake can break the &#x201c;model&#x201d; that is being built. Other languages outside the United States and Europe also have the issue of being correctly translated, as different dialects can use different characters to mean similar ideas, which further expands the complexity of building the regex translation model. With regular expressions, the mapping needs to be built manually for every single case and regex logical errors can mean that incorrect predictions become difficult to track down; a single mistaken metacharacter could fail a subset of the &#x201c;classes&#x201d; built into the model and requires someone familiar with regex to search tens of thousands of possible matches. Thus, it would be desirable to have systems and methods for determining and/or evaluating the integrity of a device's backup image and/or a process state associated with a device or a device's backup image that avoid having to extract text from the screenshots of display output associated with the state of interest and matching against the ever-increasing and ever-changing list of representations of bootable/process states.</p><p id="p-0019" num="0018">In accordance with various embodiments of the present disclosure, systems and methods for evaluating the integrity of a backup image and/or process associated with a device or a device's backup image are described that employ an artificial intelligence model, such as a convolutional neural network (&#x201c;CNN&#x201d;), which may be trained with various classes of images produced by an operating system that indicate the boot/process state. Unlike regex, retraining using a CNN does not have the same overhead concerns. Thus, correcting failures or accounting for additional screenshot image classes can be a matter of collecting additional samples of the failures and/or additional classes, labeling them with the correct category, and then retraining. CNNs can also handle some degree of mislabeled cases and a few mislabeled cases will not fundamentally break the predictions as does regex. This also allows users to remove the Text Extraction Phase entirely and use the screenshot image data which contains more information aside from just text. This gain in information can further allow users to move towards more complex decision making.</p><p id="p-0020" num="0019">In accordance with a first embodiment of the present disclosure, described are methods of evaluating the integrity of a state of an associated device by verifying one or more screenshot images taken of the display output associated with the device's state. The associated device can be, for example and without limitation, a physical machine or a virtual machine. Examples of physical machines include, without limitation, a desktop computer, a laptop computer, a tablet, a mobile device, a cellphone, a server, and the like. In cases where the device is a virtual machine, the virtual machine can be run based on a backup disk image of a protected physical machine. As used herein, the terms &#x201c;protected physical machine&#x201d; and &#x201c;protected machine&#x201d; refer to a machine, whether virtual or physical, that is protected using a disaster recovery/backup system. In certain embodiments, the device further includes a user display, such as a monitor, screen, touchscreen, and the like, which is used by the device's operating system to display output from a program or the operating system running on the device.</p><p id="p-0021" num="0020">In a first step, the method comprises initiating a process or routine using the associated device. In some embodiments, initiating the process or routine may involve starting or running a program/application (e.g., Microsoft&#xae; Word, etc.). In other embodiments, the process or routine may be booting an operating system (e.g., Windows, Linux, MacOS, etc.) of the associated device. In either case, the associated device may be operated based on the machine's physical disk or based on a backup image of a protected machine.</p><p id="p-0022" num="0021">In a second step, the method comprises taking one or more screenshots of the display output of the associated device over a period of time. In particular embodiments, the one or more screenshots of the display output are taken when the associated device reaches a state that may be of interest. For example, if the integrity of the bootable state of the associated device is of interest, then the operating system managing the associated device is instructed, via one or more processors, to capture the display output as the associated device reaches a boot screen. In other embodiments, if the integrity of a program/application state is of interest, then the operating system managing the associated device is instructed, via one or more processors, to capture the display output as the associated device reaches, for example, a start-up screen for that program. In more specific examples, one or more screenshots may be taken for verification purposes as the program/application opens a particular reference file or visits a particular website.</p><p id="p-0023" num="0022">In accordance with certain aspects of the present disclosure, it is contemplated that at least the first and second steps of the described methods occur at the protected machine. However, it is also contemplated that at least the first and second steps of the described methods occur at a location remote to the protected machine. For example, the associated device may include a backup disk image of a protected machine that is being stored on a remote server and that is used to run a virtualization of the protected machine based on the backup disk image.</p><p id="p-0024" num="0023">In a third step, the method comprises determining a state classification for each of the screenshots based on at least one determined attribute associated with the screenshot. The determined attributes associated with each of the one or more screenshots can include information about whether the associated device reached a desirable process/bootable state. For example, and without limitation, the determined attributes may indicate whether the screenshot is primarily one color (e.g., blue, etc.) or contains a plurality of colors, whether the screenshot contains certain features associated with a landscape, animals, and/or people, whether the screenshot contains certain text, or whether the screenshot does or does not show an input text box. In further embodiments, the determined attributes do not include information about the text contained in the screenshot and/or does not involve recognizing text contained within the screenshot. In preferred embodiments, the at least one attribute associated with the screenshots is determined by communicating the screenshots to a trained model for automated analysis based on a predefined set of rules. In specific embodiments, the trained model determines a state classification for one or more of the plurality of screenshots based on at least the determined attributes. In further embodiments, other information may be used in addition to the screenshots to determine the state classifications, including but not limited to register values. As used herein, the term &#x201c;state classification&#x201d; refers to the output of a prediction module (e.g., running a trained model such as a CNN) and represents the probabilistic determination of whether the screenshot&#x2014;which shows the process-of-interest/bootable state of the associated device&#x2014;reached a certain state. As discussed herein, the state classification can be based on one or more attributes determined in association with one or more of the screenshots.</p><p id="p-0025" num="0024">In preferred embodiments, the trained model may be an artificial neural network such as a convolutional neural network. The trained model receives the one or more screenshot images and passes each screenshot through a plurality of layers to obtain an output. The output can be, for example, a state classification based on one or more determined attributes associated with the screenshot, such as a determination of whether the screenshot image shows a desirable program/boot state and/or the probability of whether the screenshot image shows a desirable program/boot state. In particular embodiments, the plurality of layers includes one or more convolutional layers, one or more rectified linear unit layers, one or more pooling (or sub-sampling) layers, and a fully-connected (or output) layer.</p><p id="p-0026" num="0025">One or more programming languages and libraries may be used in order to deploy the trained model and implement one or more of the analytical layers. For example, the trained model may be coded in at least Python and use one or more features of the PyTorch library. PyTorch is an open-source machine learning library that is optimized for applications including, among other things, computer vision.</p><p id="p-0027" num="0026">As used herein, a convolutional layer or convolution transformation refers to a linear filtering operation that involves the multiplication of a set of weights with an array of input data and a two-dimensional array of weights, called a kernel. In accordance with the present disclosure, the input data may be one or more screenshots of the display output associated with a process-of-interest and/or a boot-screen of a virtual machine. The kernel is preferably smaller than the input data and the type of multiplication applied between a kernel-sized patch of the input and the kernel is a dot product, which results in a single value. By using a kernel smaller than the input, the same kernel (i.e., set of weights) can be multiplied by the input array multiple times at different points on the input. Specifically, the kernel may be applied systematically to each overlapping part or kernel-sized patch of the input data (e.g., left to right, top to bottom). As the filter is applied repeatedly to the input array, the result is a &#x201c;feature map&#x201d;, two-dimensional array of output values that represent a filtering of the input.</p><p id="p-0028" num="0027">In certain embodiments, one or more of the convolutional layers may be a two-dimensional convolutional layer, wherein a two-dimensional convolution is applied over an input signal (i.e., one or more screenshot of the display output) of several input planes. For example, if using PyTorch, the torch.nn.Conv2d generates an output values of the layer with input size (N, C<sub>in</sub>, H<sub>in</sub>, W<sub>in</sub>) and output (N, C<sub>out</sub>, H<sub>out</sub>, W<sub>out</sub>) according to the following equation:</p><p id="p-0029" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mrow>   <mi>out</mi>   <mo>&#x2062;</mo>   <mtext>   </mtext>   <mrow>    <mo>(</mo>    <mrow>     <msub>      <mi>N</mi>      <mi>i</mi>     </msub>     <mo>,</mo>     <msub>      <mi>C</mi>      <msub>       <mi>out</mi>       <mi>j</mi>      </msub>     </msub>    </mrow>    <mo>)</mo>   </mrow>  </mrow>  <mo>=</mo>  <mrow>   <mrow>    <mi>bias</mi>    <mo>&#x2062;</mo>    <mtext>   </mtext>    <mrow>     <mo>(</mo>     <msub>      <mi>C</mi>      <msub>       <mi>out</mi>       <mi>j</mi>      </msub>     </msub>     <mo>)</mo>    </mrow>   </mrow>   <mo>+</mo>   <mrow>    <munderover>     <mo>&#x2211;</mo>     <mrow>      <mi>k</mi>      <mo>=</mo>      <mn>0</mn>     </mrow>     <msub>      <mi>C</mi>      <mrow>       <mrow>        <mi>i</mi>        <mo>&#x2062;</mo>        <mi>n</mi>       </mrow>       <mo>-</mo>       <mn>1</mn>      </mrow>     </msub>    </munderover>    <mrow>     <mrow>      <mi>weight</mi>      <mo>&#x2062;</mo>      <mtext>   </mtext>      <mrow>       <mo>(</mo>       <mrow>        <msub>         <mi>C</mi>         <msub>          <mi>out</mi>          <mi>j</mi>         </msub>        </msub>        <mo>,</mo>        <mi>k</mi>       </mrow>       <mo>)</mo>      </mrow>     </mrow>     <mo>&#x22c6;</mo>     <mrow>      <mi>input</mi>      <mo>&#x2062;</mo>      <mtext>   </mtext>      <mrow>       <mo>(</mo>       <mrow>        <msub>         <mi>N</mi>         <mi>i</mi>        </msub>        <mo>,</mo>        <mi>k</mi>       </mrow>       <mo>)</mo>      </mrow>     </mrow>    </mrow>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0030" num="0000">wherein * is a cross-correlation operation (also known as a sliding dot product or sliding inner-product), Nis a batch size (number of images), N<sub>i </sub>indexes the ith image, C<sub>in </sub>refers to the number of input image channels, C<sub>in</sub><sub><sub2>i </sub2></sub>can be used to index the ith input channel (e.g., C<sub>in </sub>may be 3 and C<sub>in</sub><sub><sub2>i </sub2></sub>may have values 1, 2, 3, for an image with red, green and blue channels such as those shown in <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>9</b></figref>), C<sub>out </sub>refers to the number of output channels and may be the same as C<sub>in </sub>or it may differ, similarly C<sub>out</sub><sub><sub2>j </sub2></sub>indexes the jth output channels), H<sub>in </sub>is the height of the input planes in pixels, and W<sub>in </sub>is the width of the input planes in pixels, H<sub>out </sub>is the height of the output planes in pixels, and W<sub>out </sub>is the width of the output planes in pixels, k is a multiplier that is a positive integer, weight is the learnable weights of a pre-determined and/or variable size, and &#x201c;bias&#x201d; is the learnable bias of a pre-determined and/or variable size.</p><p id="p-0031" num="0028">Once a feature map is created, each value in the feature map may be passed through a rectification layer, such as a ReLU, which is a piecewise linear function that outputs the input directly if it is positive, or zero otherwise. In particular embodiments, the rectification layer(s) may be a linear or a nonlinear rectification layer.</p><p id="p-0032" num="0029">An additional layer that may be implemented after applying a convolutional layer and/or ReLU includes a pooling-type layer, wherein the input data (e.g., screenshots) is down sampled in order to account for movements in the position of the features identified in the features map, movements due to cropping, rotation, shifting, and/or other changes to the input image. In particular embodiments, the pooling layer operates on each feature map separately to create a new set of the same number of pooled feature maps. More specifically, a pooling operation is applied wherein a filter that is smaller than the size of the input image is applied to the input image. For example, the pooling layer may apply a 2-pixels by 2-pixels filter with a stride of 2 pixels, which would reduce each dimension of the feature map by a factor of 2 (i.e., reducing the number of pixels in each feature map to one quarter the size). In some embodiments, an average pooling layer is applied wherein the average value for each window viewed by the filter is calculated. In other embodiments, a max pooling layer is applied wherein the maximum value for each window by the filter is calculated.</p><p id="p-0033" num="0030">Still another operation that may be applied during this process is referred to herein as a batch normalization. Batch normalization standardizes the activations of each input variable per a subset of input data. In particular embodiments, the batch normalization may be implemented by calculating the mean and the standard deviation of each input variable to a layer per subset of input data and using those statistics to perform a standardization. In other embodiments, a moving average and standard deviation may be used. In specific embodiments, the PyTorch library functions torch.nn. BatchNorm2d and/or torch.nn.BatchNorm1d may be used.</p><p id="p-0034" num="0031">In accordance with specific embodiments of the present disclosure, the third step can include performing: (i) a first set of processes on an input image or multiple input images, the processes comprising two-dimensional convolution, two-dimensional batch normalization, two-dimensional max pooling, linear rectification, or combinations thereof, to obtain a first output; (ii) a second set of processes on the first output, the processes comprising two-dimensional convolution, two-dimensional batch normalization, linear rectification, or combinations thereof, to obtain a second output; (iii) a third set of processes on the second output, the processes two-dimensional convolution, two-dimensional batch normalization, linear rectification, or combinations thereof, to obtain a third output; (iv) a fourth set of processes on the third output, the processes comprising two-dimensional convolution, two-dimensional batch normalization, linear rectification, or combinations thereof, to obtain a fourth output; (v) a fifth set of processes on the fourth output, the processes comprising two-dimensional adaptive average pooling, two-dimensional adaptive max pooling, flattening, one-dimensional batch normalization, dropout, or combinations thereof, to obtain a fifth output; (vi) a sixth set of processes on the fifth output, the processes comprising linear transformation, linear rectification, one-dimensional batch normalization, dropout, or combinations thereof to obtain a sixth output; and (vii) a seventh set of processes on the sixth output, the processes comprising at least one linear transformation to obtain a seventh output. Based on the output of one or more of the set of processes described herein, an attribute may be determined in association with the original input image(s), which can be used to identify or make a state classification.</p><p id="p-0035" num="0032">In accordance with specific embodiments of the present disclosure, a Residual Network or &#x201c;Resnet&#x201d; model may be employed, such as a Resnet34 model. In such models, a residual module is implemented that includes of a block of two convolutional layers with the same number of filters and a small filter size where the output of the second layer is added with the input to the first convolutional layer. However, the initial pre-trained weights (e.g., ImageNet weights) are not included and/or are discarded.</p><p id="p-0036" num="0033">In a fourth step, each screenshot and every state classification based on the one or more attributes determined in association with each screenshot is added to a memory array and tested for a consistency class. In other words, the screenshot and state classifications are stored in a memory and continually checked to determine whether the associated device has reached a consistent state (i.e., a steady state over a particular period of time).</p><p id="p-0037" num="0034">In particular embodiments, the consistency class can be at least one of the following: consistent positive; consistent negative; consistent neutral; or consistent informational. In some embodiments, a consistent positive classification may be determined based on one or more attributes that indicate that the program or boot state of interest was successful (i.e., the program/operating system was executed successfully). On the other hand, a consistent negative classification may be determined based on one or more attributes that indicate that the program or boot state of interest failed to execute properly. In further embodiments, other consistency class may be determined based on a variety of attributes, such as a neutral classification and/or an informational classification. As used herein, the one or more determined attributes may prompt a &#x201c;neutral&#x201d; classification, which would indicate that the program or boot process was neither definitively successful nor definitively unsuccessful. Further, one or more determined attributes may prompt an &#x201c;informational&#x201d; classification, which could indicate a state that contains information for further examination (e.g., a dialog box requesting information from a user or informing the user of a particular problem).</p><p id="p-0038" num="0035">If the consistency class indicates that a consistent state has not been reached, then the method optionally repeats steps two through four until a consistent consistency class is determined or until another predetermined exit condition is fulfilled (e.g., the process has repeated for a predetermined amount of time without reaching a consistent state). If it is determined that the associated device has reached a consistent state or another predetermined exit condition is reached, then the method may proceed to a fifth step.</p><p id="p-0039" num="0036">In a fifth step, the method comprises determining an action to be taken based on the consistency class determined in association with plurality of screenshots. In particular embodiments, the action to be taken can include: (1) reporting information regarding the consistent state; (2) recording information regarding the consistent state; (3) ending the method; and/or (4) repeating steps two through five a plurality of times.</p><p id="p-0040" num="0037">In a sixth step, the method comprises performing the action to be taken.</p><p id="p-0041" num="0038">These and other aspects of the present disclosure are described in further detail with reference to <figref idref="DRAWINGS">FIGS. <b>1</b> through <b>10</b>B</figref>.</p><p id="p-0042" num="0039">With reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a backup system <b>100</b> comprising automated screenshot verification for evaluating the integrity of a backup image is illustrated in accordance with certain aspects of the present disclosure. The backup system <b>100</b> can include at least one client site <b>102</b> wherein one or more protected machines <b>104</b>, <b>106</b> are used by one or more associated users <b>108</b>. As used herein, the term &#x201c;protected machine&#x201d; refers to any electronic device, such as a server, workstation, desktop, laptop, tablet computer, mobile device, and the like, which are capable of being backed-up. The protected machines <b>104</b>, <b>106</b> of the client site <b>102</b> may periodically transfer (depicted at <b>114</b>) a backup image <b>122</b> of the protected machine <b>104</b>, <b>106</b> to a storage server <b>112</b>A, <b>112</b>B, <b>112</b>C, <b>112</b>D in a remote cloud storage center <b>110</b>.</p><p id="p-0043" num="0040">The backup system <b>100</b> can further include a screenshot verification server <b>116</b> operatively connected with the protected machines <b>104</b>, <b>106</b> of the client site <b>102</b> (depicted as <b>118</b>), as well as the storage servers <b>112</b>A, <b>112</b>B, <b>112</b>C, <b>112</b>D of the remote storage center <b>110</b> (depicted as <b>120</b>). In particular embodiments, the screenshot verification server <b>116</b> is located remotely from the client <b>102</b> and/or the storage center <b>110</b>. In further embodiments, the screenshot verification server <b>116</b> may be located locally to the client site <b>102</b> or the remote storage center <b>110</b>. In still further embodiments, the verification server <b>116</b> may be in communication <b>118</b>, <b>120</b> with the devices <b>104</b>, <b>106</b> of more than one client site <b>102</b> and/or the devices <b>112</b>A, <b>112</b>B, <b>112</b>C, <b>112</b>D of more than one storage center <b>110</b>.</p><p id="p-0044" num="0041">In various embodiments, the verification server <b>116</b> may send and/or receive <b>118</b> information <b>124</b> associated with a backup image of a protected machine <b>104</b>, <b>106</b> to and from the client <b>102</b>, and may send and/or receive <b>120</b> information <b>126</b> associated with the backup image(s) of the protected machines <b>104</b>, <b>106</b> to and from the storage center <b>110</b>. For example, as discussed further below, the verification server <b>116</b> may receive samples <b>124</b>, <b>126</b> (e.g., screenshots) of a virtual machine booted at a protected machine <b>104</b>, <b>106</b>, and transfer information <b>128</b>, <b>130</b> associated with those samples <b>124</b> between the storage center <b>110</b> and the protected machines <b>104</b>, <b>106</b>.</p><p id="p-0045" num="0042">In particular embodiments, the protected machines <b>104</b>, <b>106</b> include at least one processor and memory including instructions that, when executed by the at least one processor, cause the protected machine <b>104</b>, <b>106</b> to perform one or more steps of the methods disclosed herein. Similarly, the screenshot verification server <b>116</b> can also include at least one processor and memory including instructions that, when executed by the at least one processor of the verification server <b>116</b>, cause the screenshot verification server to perform one or more steps of the methods disclosed herein. The protected machines <b>104</b>, <b>106</b> and the verification server <b>116</b> may further include additional components, for example and without limitation, a network interface/protocol (not shown) that facilitates the communication <b>118</b>, <b>120</b> between the various devices <b>104</b>, <b>106</b>, <b>112</b>A, <b>112</b>B, <b>112</b>C, <b>112</b>D of the client site <b>102</b> and the storage center <b>120</b>. In various embodiments, the network communication interface may include, but is not limited to, a local area network, a wide area network, a metropolitan area network, a personal area network, a virtual private network, and the like, whether wired or wireless.</p><p id="p-0046" num="0043">Turning to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, a method <b>200</b> of utilizing a screenshot verification system and/or backup system <b>100</b> in order to evaluate the integrity of a backup image and/or process-of-interest associated with a protected machine <b>202</b> is illustrated in accordance with one aspect of the present disclosure. A protected machine <b>202</b> as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be running a boot process and/or a process-of-interest, during which time an operating system managing the protected machine <b>202</b> capture one or more screenshots <b>204</b> of the display output associated with the boot process and/or process-of-interest. These screenshots <b>204</b> are then communicated to a prediction module <b>206</b>, which receives at least the one or more screenshots <b>204</b> as an input.</p><p id="p-0047" num="0044">In particular embodiments, the prediction module <b>206</b> determines a state classification for one or more of the screenshots received as input based on at least one determined attribute associated with each screenshot. For example, the prediction module <b>206</b> may apply a trained model such as a convolutional neural network to one or more of the screenshots <b>204</b>, which identifies various attributes associated with each of the screenshots <b>204</b> and then determines a state classification <b>208</b> about the state of process-of-interest/boot process running on the protected machine <b>202</b>, as discussed above. In particular, the prediction module <b>206</b> receives the one or more screenshot images <b>204</b> and passes each screenshot <b>204</b> through a plurality of layers to obtain an output, wherein the plurality of layers includes one or more convolutional layers, one or more rectified linear unit layers, one or more pooling (or sub-sampling) layers, and a fully-connected (or output) layer. The prediction module <b>206</b> may output one or more state classifications (S<sub>1</sub>, S<sub>2</sub>, S<sub>3</sub>, . . . , S<sub>t</sub>) <b>208</b>, wherein each state classification S<sub>t </sub>corresponds to one of the screenshots <b>204</b> received as input.</p><p id="p-0048" num="0045">Next, each screenshot <b>204</b> and corresponding state classification <b>208</b> are added to a memory array <b>210</b> and tested fora consistency class <b>212</b> (i.e., the screenshots <b>204</b> and state classifications <b>208</b> are stored in a memory and checked to determine whether the associated device <b>202</b> has reached a consistent state), as discussed below with respect to <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In particular embodiments, the consistency class <b>212</b> can be at least one of the following: consistent positive; consistent negative; consistent neutral; or consistent informational. In some embodiments, a consistent positive classification <b>208</b> may be determined based on one or more attributes that indicate that the program or boot state of interest was successful (i.e., the program/operating system was executed successfully). On the other hand, a consistent negative classification <b>208</b> may be determined based on one or more attributes that indicate that the program or boot state of interest failed to execute properly. In further embodiments, other consistency classes <b>212</b> may be determined based on a variety of attributes, such as a neutral state classification <b>208</b> and/or an informational state classification <b>208</b>. If the consistency class <b>212</b> indicates that a consistent state <b>208</b> has not been reached, then the process illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may collect one or more additional screenshots <b>204</b> and pass those screenshots <b>204</b> through the prediction module <b>206</b> until a unique consistency class <b>212</b> is determined or until another predetermined exit condition is fulfilled (e.g., the process has repeated for a predetermined amount of time without reaching a consistent state).</p><p id="p-0049" num="0046">If it is determined that the associated device <b>202</b> has reached a consistent state or another predetermined exit condition is reached, then the process <b>200</b> may then pass at least the consistency class <b>212</b> along to an action module <b>214</b>, which receives at least the consistency class <b>212</b> as an input. Using a set of pre-determined rules, the action module <b>214</b> then determines a recommended action/an action <b>216</b> based on at least the consistency class <b>212</b>. In particular embodiments, the action to be taken <b>216</b> may involve instructing the protected machine <b>202</b> (illustrated as <b>218</b>A) to take the recommended action <b>216</b>, and/or may involve instructing a remote device <b>220</b> (illustrated as <b>218</b>B) to take the recommended action <b>216</b>. The recommended action may then be taken by the protected machine <b>202</b> and/or the remote device <b>220</b>. In particular embodiments, the action to be taken can include: (1) reporting information regarding the consistency class <b>212</b>; (2) recording information regarding the consistency class <b>212</b>; (3) ending the method by, for example, terminating the process-of-interest/boot process and/or discontinuing the instructions to take and communicate screenshots <b>204</b> of the display output; (4) instructing the protected machine <b>202</b> to continue taking screenshots <b>204</b> and communicating those screenshots to the prediction model <b>206</b> for further analysis; (5) updating the trained model of the prediction module <b>206</b> with information regarding the consistency class <b>212</b>, one or more of the state classifications <b>208</b>, one or more of the determined attributes, and/or one or more of the screenshots <b>204</b>.</p><p id="p-0050" num="0047">In certain embodiments, the action to be taken may include producing a report concerning the integrity of the process-of-interest/boot process for subsequent review. In some embodiments, producing the report may involve selecting a screenshot from among the plurality of screenshots <b>204</b> associated with the determined consistency class <b>212</b> and storing the selected screenshot, the consistency class <b>212</b>, and/or one or more of the determined attributes in a memory (e.g., in a memory on a remote storage server). In such embodiments, this representative information (i.e., information representative of the consistency class <b>212</b>) may be saved for later review by an associated user (e.g., user <b>108</b>) and/or a third-party managing the protected machine <b>202</b>. For example, with reference to <figref idref="DRAWINGS">FIG. <b>10</b>A</figref>, a backup agent dashboard <b>1010</b> is shown that includes a screenshot verification associated with a particular backup image of a protected machine. The backup agent dashboard <b>1010</b> further offers the user and/or technician a representative screenshot associated with the determined consistency class that corresponds to that backup image and/or process-of-interest. As a result, the end-user may use the screenshot verification to determine whether to select a particular restore point (as shown in <figref idref="DRAWINGS">FIG. <b>10</b>B</figref>). However, the screenshot verification can also notify and enable technicians and image backup providers to verify the integrity of one or more backup images, automatically detect potential issues, and provide proactive recommendations and support to users of the protected machines. As described herein, the systems and methods for verifying the integrity of a backup image and/or process-of-interest are at least 99% accurate in determining the correct consistency class.</p><p id="p-0051" num="0048">In further embodiments, the action to be taken may also include performing an incremental and/or full backup of the protected machine <b>202</b>, or may include restoring the protected machine <b>202</b> using an incremental and/or full backup image of the protected machine <b>202</b>.</p><p id="p-0052" num="0049">As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, one or more aspects <b>224</b> of the present disclosure may occur at a location (e.g., server, workstation, etc.) remote from the protected machine <b>202</b>, including but not limited to, receiving the screenshots <b>204</b> at the prediction module <b>206</b>, determining one or more state classifications <b>208</b>, storing information regarding the state classifications <b>208</b> and the associated screenshots <b>204</b> in a memory array <b>210</b>, determining at least one consistency class <b>212</b>, and determining a recommended action to be taken <b>216</b> using an action module <b>214</b>. However, as discussed in more detail with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the protected machine <b>202</b> may be a virtualization of a protected machine, which may also be executed on a remote server.</p><p id="p-0053" num="0050">Turning now to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, methods <b>300</b> of utilizing such backup systems <b>100</b> and evaluating the integrity of at least a first backup image associated with a protected machine <b>104</b>, <b>106</b> are described in accordance with further aspects of the present disclosure.</p><p id="p-0054" num="0051">In a first step <b>302</b>, a virtual machine (&#x201c;VM&#x201d;) of a protected machine <b>104</b>, <b>106</b> is booted based on the first backup image. The virtualization may be performed at any location where the disk images can be mounted and treated as runnable, which can include a number of hypervisor applications. In particular embodiments, the VM may be booted at the client site <b>102</b>, at a storage center <b>110</b>, or at a verification server <b>116</b> using an operating system managing the device at the respective location. For example, hypervisors can be on or off the Datto SIRIS and include KVM, VMWare, HyperV, Citrix, and the like. In specific embodiments, the methods disclosed herein, including the virtualization, may be performed on a secure backup device, such as a Datto SIRIS device. In other embodiments, the methods may be performed on a remote device or a cluster of remote devices (e.g., remote servers).</p><p id="p-0055" num="0052">In a step <b>304</b>, the VM can optionally open a connection via any protocol supporting visual formats from VM to verification server <b>116</b>. Some example possible protocols would be VNC, SPICE, RDP, X, and the like. However, in particular embodiments, this may not be necessary if the method <b>300</b> is being performed locally (i.e., on the same network at the protected machine(s)).</p><p id="p-0056" num="0053">In a step <b>306</b>, using an operating system managing the VM, a plurality of samples of the running virtualization are taken over the duration of powering onto boot at a sample rate (r<sub>s</sub>). In particular embodiments, each sample of the plurality of samples is a screenshot of the VM during the booting process taken at the sample rate (r<sub>s</sub>). The sample rate (r<sub>s</sub>) can about 1 sample per second, but other rates are contemplated (i.e., more than 1 sample per second, less than 1 sample per second, etc.).</p><p id="p-0057" num="0054">In a step <b>308</b>, the plurality of samples taken may then be communicated, for example, to a screenshot verification server <b>116</b> for evaluation by a trained, computer vision model, where a state classification is determined based on at least one attribute associated with each sample of the plurality of samples. More specifically, the trained model can be an artificial neural network, such as a convolutional neural network, that is trained to determine at least one attribute associated with a screenshot of a virtual machine taken during the booting process. In particular embodiments, the state classification is an evaluation/prediction about whether the boot process was: (1) successful or &#x201c;positive&#x201d;; (2) unsuccessful or &#x201c;negative&#x201d;; or whether the boot process reached some other state. For example and without limitation, the state classifications associated with login screens <b>600</b>, <b>800</b>, <b>900</b> (as shown in <figref idref="DRAWINGS">FIGS. <b>6</b>, <b>8</b>, and <b>9</b></figref>) may be determined as &#x201c;positive&#x201d;, whereas the state classification associated with boot error screens <b>500</b>, <b>700</b> (as shown in <figref idref="DRAWINGS">FIGS. <b>5</b> and <b>7</b></figref>) may be determined as &#x201c;negative&#x201d;. Other boot screens may be determined as &#x201c;neutral&#x201d;, indicating neither boot success nor boot failure, such as a &#x201c;Getting Devices Ready&#x201d; screen, while still further boot screens may be recorded as &#x201c;special&#x201d;, such as a screenshot indicating updates are being performed. While <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>9</b></figref> illustrate screenshots of various boot states associated with a protected machine running Windows, the methods <b>300</b> disclosed herein are not limited to just Windows&#xae;, but may also be performed in conjunction with other operating systems, such as Unix, Linux, and the like. In such embodiments, the trained model may also be trained using boot screen images from multiple operating systems.</p><p id="p-0058" num="0055">In a step <b>310</b>, each sample of the plurality of samples of the VM and each state classification associated with the respective sample is added to a memory array <b>400</b>. As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, each state classification and image sample are added to a memory array <b>400</b> and collectively tested for consistency. The image samples <b>402</b> are held with the state classifications so they can be provided to a user for verification. The array <b>400</b> may be a queue of fixed size L, where adding an item to the front drops the last item from the array. In particular embodiments, the size of the array <b>400</b> can be pre-determined and then as the method <b>300</b> runs, additional samples and state classifications are added to the array <b>400</b>, thereby creating a running small window <b>404</b> (defined by window size m<sub>1</sub>) of the state of the VM. In specific embodiments, the window size m<sub>1</sub>may be an integer between 1 and 10, including 1, 2, 3, 4, 5, 6, 7, 8, 9, and 10. As will also be appreciated, the number of samples <b>402</b> within each window <b>404</b>, <b>406</b> also depends on the sampling rate r<sub>s</sub>, and that both the period m<sub>1 </sub>and rate r<sub>s </sub>may be adjusted to increase or decrease the testing window for boot state consistency. In other words, the sample rate r<sub>s </sub>and period m<sub>1 </sub>may be variable and may be adjusted during each attempt to evaluate the integrity of the process-of-interest and/or boot state. For example, as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the window <b>404</b> with window size m<sub>1 </sub>encompasses 3 samples stored in the memory <b>400</b> while a subsequent window <b>406</b> defined by m<sub>2 </sub>encompasses only 2 samples stored in the memory <b>400</b>. Similarly, the sample rate r<sub>s </sub>may be variably adjusted during the determination of the consistency class such that even if window sizes m<sub>1 </sub>and m<sub>2 </sub>where the same, the number of samples <b>402</b> within each window may be different depending on the sample rate r<sub>s</sub>. In particular embodiments, the sample rate r<sub>s </sub>can be about 1 sample per second, or at least 1 sample per second, or about 2 samples per second, or at least 2 samples per second, or about 5 samples per second, or at least 5 samples per second, or less than 1 sample per second, or about &#xbd; samples per second, or about &#x2153; samples per second, or about &#xbc; samples per second, or about &#x2155; samples per second, or about 1/10 samples per second, or about 1/30 samples per second.</p><p id="p-0059" num="0056">Returning to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, in a step <b>312</b>, the verification server <b>116</b> determines a consistency class based the sample images and state classifications within a certain window (e.g., the windows <b>404</b>, <b>406</b> defined by m<sub>1 </sub>and m<sub>2</sub>). More specifically, one or more portions <b>404</b>, <b>406</b> of the memory array <b>400</b> defined by periods m<sub>1</sub>, m<sub>2 </sub>are tested to determine whether the images and state classifications are consistent (i.e., unique) or different (i.e., not unique). In certain embodiments, at least a first portion and at least a second portion of the memory array <b>400</b> are tested to determine a consistency class, wherein the first portion may or may not overlap with the second portion.</p><p id="p-0060" num="0057">In specific embodiments, the consistency class may be determined by converting the relevant portion(s) of the memory array <b>400</b> into a mathematical set, removing duplicate objects, and testing if the length is 1 (i.e., unique) or greater than 1 (i.e., not unique). In further embodiments, the previously remembered state classifications over L observations/samples may be returned instead of the consistency class, wherein L is an integer between about 1 and about 1000.</p><p id="p-0061" num="0058">As illustrated by step <b>312</b>, if the consistency class of the VM indicates that the process-of-interest/boot process has not reached a consistent state, the method <b>300</b> may repeat steps <b>306</b> through <b>312</b> until a consistent consistency class is determined or until a timeout duration (as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>) is reached. For example and without limitation, the timeout duration may be between about 100 seconds and about 500 seconds, or between about 250 seconds and about 350 seconds, or about 300 seconds, or less than about 10 minutes, or about 60 minutes. In such instances, the determined consistency class may be evaluated as inconsistent or indeterminate.</p><p id="p-0062" num="0059">However, as illustrated by step <b>312</b>, if the consistency class is determined to be consistent, the method <b>300</b> may include one or more further steps <b>314</b>, <b>316</b>, <b>318</b> based on the particular consistency class. For example, a consistency class can be determined when a subset of the memory array <b>400</b> having a sample period m<sub>1</sub>, m<sub>2 </sub>has a common state classification associated with one or more samples of the plurality of samples across the entire sample period m<sub>1</sub>, m<sub>2</sub>. In specific embodiments, the consistency class may be at least one of the following: consistent positive; consistent negative; consistent neutral; or consistent informational.</p><p id="p-0063" num="0060">In particular embodiments, if the consistency class is determined to be consistent negative or consistent positive, the verification server <b>116</b> may report the boot failure <b>314</b> or the boot success <b>316</b>, respectively. In some embodiments, if the consistency class is determined to be consistent neutral, then the method <b>200</b> may repeat steps <b>306</b> through <b>312</b> until a consistent positive or consistent negative is determined, or until the timeout duration is reached. Similarly, in further embodiments, if the consistency class is determined to be consistent informational, then the method <b>300</b> may include a step <b>318</b> of recording the information associated with the boot state (e.g., the attribute(s), state classifications, and/or screenshots) before repeating steps <b>306</b> through <b>312</b>.</p><p id="p-0064" num="0061">The report steps <b>314</b>, <b>316</b>, <b>318</b> may further include updating an associated system (such as a backup system <b>100</b>) within information representative of the determined consistency class. For example, with reference to <figref idref="DRAWINGS">FIG. <b>10</b>A</figref>, a backup agent dashboard <b>1010</b> is shown that includes a screenshot verification associated with a particular backup image of a protected machine. The backup agent dashboard <b>1010</b> further offers the user and/or technician a representative screenshot associated with the determined consistency class that corresponds to that backup image. As a result, the end-user may use the screenshot verification to determine whether to select a particular restore point (as shown in dashboard screen <b>1020</b> of <figref idref="DRAWINGS">FIG. <b>10</b>B</figref>). However, the screenshot verification can also notify and enable technicians and image backup providers to verify the integrity of one or more backup images, automatically detect potential issues, and provide proactive recommendations and support to users of the protected machines. As described herein, the systems and methods for verifying the integrity of a backup image are at least 99% accurate in determining the correct consistency class.</p><p id="p-0065" num="0062">Disclosed herein are exemplary embodiments including, but not limited to, the following:</p><p id="p-0066" num="0063">[A1]. A method of evaluating the integrity of a process-of-interest associated with a protected machine, the method comprising: (a) initiating, via an operating system managing the protected machine, the process-of-interest; (b) taking, via the operating system managing the protected machine, a plurality of screenshots of the display output while the process-of-interest is being initiated; (c) communicating one or more of the plurality of screenshots of the display output to a prediction module; (d) using the prediction module, determining a state classification for each screenshot of the plurality of screenshots of the display output using a trained model, wherein the trained model is an artificial neural network; (e) adding each screenshot of the plurality of screenshots of the display output and the state classification associated with each screenshot to a memory array; (f) testing at least a first portion of the memory array to determine a consistency class for the process-of-interest based on the screenshots and the associated state classifications stored in at least the first portion of the memory array; (g) based on the consistency class determined based on at least the first portion of the memory array, performing at least one of the following: (g1) repeating steps (b) through (g) and testing at least a second portion of the memory array to determine a consistency class for the process-of-interest based on the screenshots and the associated state classifications stored in at least the second portion of the memory array, and wherein the second portion of the memory array includes one or more screenshots and one or more state classifications not included in the first portion of the memory array; and (g2) generating a report concerning the consistency class determined in connection with at least the first portion of the memory array, the report comprising a representative screenshot selected from the screenshots stored within the memory array and the consistency class.</p><p id="p-0067" num="0064">[A2]. The method [A1], wherein the method further comprises: (h) generating a recommended action to be taken based on the consistency class; and (i) taking the recommended action, wherein the recommended action is taken by at least one of: the protected machine; and a device remote from the protected machine.</p><p id="p-0068" num="0065">[A3]. The method of [A1] or [A2], wherein the one or more screenshots of the display output are communicated via a network protocol to the prediction module, the prediction module being located on a remote screenshot verification server, and one or more of steps (d) through (g) are performed by at least one processor of the screenshot verification server based on instructions for performing those steps stored in a memory of the screenshot verification server.</p><p id="p-0069" num="0066">[A4]. The method of [A3], wherein one or more of steps (c) through (g) are performed by at least one processor of the protected machine based on instructions for performing those steps stored in a memory of the protected machine.</p><p id="p-0070" num="0067">[A5]. The method of [A1], wherein the state classification determined in association with each screenshot of the plurality of screenshots is at least one of: positive; informational; neutral; and negative.</p><p id="p-0071" num="0068">[A6]. The method of [A5], wherein at least the first portion of the memory array has a sample period m<sub>1 </sub>and is tested to determine the consistency class by determining whether the first portion of the memory array has a common state classification associated with the one or more screenshots of the plurality of screenshots of the display output across the first portion of the memory array, wherein m<sub>1 </sub>is an integer between 2 and 1000.</p><p id="p-0072" num="0069">[A7]. The method of [A6], wherein the second portion of the memory array has a sample period m<sub>2 </sub>and is tested to determine the consistency class based on the second portion of the memory array by determining whether the second portion of the memory array has a common state classification associated with the one or more screenshots stored in the memory array across at least the second portion of the memory array, wherein m<sub>2 </sub>is an integer between 2 and 1000.</p><p id="p-0073" num="0070">[A8]. The method of [A7], wherein the second portion of the memory array includes one or more screenshots and one or more state classifications not included in the first portion of the memory array.</p><p id="p-0074" num="0071">[A9]. The method of [A6], wherein the consistency class is at least one of: consistent positive; consistent negative; consistent neutral; and consistent informational.</p><p id="p-0075" num="0072">[A10]. The method of [A7], wherein the method further comprises: (g3) repeating steps (b) through (g) one or more times until a timeout duration is reached.</p><p id="p-0076" num="0073">[A11]. The method of [A2], wherein the action taken includes at least one of: reporting information regarding the consistency class; recording information regarding the consistency class; and ending the method.</p><p id="p-0077" num="0074">[B1]. A method of evaluating the integrity of at least a first backup image associated with a protected machine, the method comprising: (a) booting, via an operating system managing a first device, a virtual machine based on at least the first backup image; (b) taking, via the operating system managing the first device, a plurality of samples of the display output of the virtual machine over a first duration; (c) communicating the plurality of samples to a prediction module located on a second device, the prediction module comprising a trained model; (d) determining, via the trained model of the prediction module, a state classification for one or more samples of the plurality of samples, wherein the trained model is an artificial neural network trained using a plurality of training images from one or more operating systems; (e) adding each sample of the plurality of samples and each associated state classifications to a memory array; (f) testing at least a first portion of the memory array to determine a consistency class based on the samples and the state classifications stored in at least the first portion of the memory array; (g) based on the consistency class determined based on at least the first portion of the memory array, performing at least one of the following: (g1) repeating steps (b) through (g) and testing at least a second portion of the memory array to determine a consistency class based on the samples and state classifications stored in at least the second portion of the memory array, wherein the second portion of the memory array includes one or more samples and one or more state classifications not included in the first portion of the memory array; and (g2) generating a report concerning the consistency class determined in connection with at least the first portion of the memory array, the report comprising a representative screenshot selected from the screenshots stored within the memory array and the consistency class.</p><p id="p-0078" num="0075">[B2]. The method of [B1], wherein the method further comprises: (h) generating a recommended action to be taken based on the consistency class; and (i) taking the recommended action, wherein the recommended action is taken by at least one of the first device and the second device.</p><p id="p-0079" num="0076">[B3]. The method of [B2], wherein one or more of steps (d) through (i) are performed by at least one processor of the second device based on instructions for performing those steps stored in a memory of the second device.</p><p id="p-0080" num="0077">[B4]. The method of [B2], wherein the first device is the protected machine, and the second device is a screenshot verification server located remotely from the protected machine.</p><p id="p-0081" num="0078">[B5]. The method of [B2], wherein the first device is a remote storage server that is storing the backup image associated with the protected machine, and the second device is a screenshot verification server located remotely from the protected machine and the remote storage server.</p><p id="p-0082" num="0079">[B6]. The method of [B2], wherein the first device and the second device are the same device and are located remotely from the protected machine.</p><p id="p-0083" num="0080">[B7]. The method of [B2], wherein the state classification determined for each sample of the plurality of samples is at least one of: positive; informational; neutral; and negative.</p><p id="p-0084" num="0081">[B8]. The method of [B7], wherein at least the first portion of the memory array has a sample period m<sub>1 </sub>and is tested to determine the consistency class by determining whether the first portion of the memory array has a common state classification associated with the one or more samples of the plurality of samples of the virtual machine across the first portion of the memory array, wherein m<sub>1 </sub>is an integer between 2 and 1000.</p><p id="p-0085" num="0082">[B9]. The method of [B8], wherein the second portion of the memory array has a sample period m<sub>2 </sub>and is tested to determine the consistency class based on the second portion of the memory array by determining whether the second portion of the memory array has a common state classification associated with the one or more samples of the plurality of samples of the virtual machine stored in the memory array across the sample period m<sub>2</sub>, wherein m<sub>2 </sub>is an integer between 2 and 1000.</p><p id="p-0086" num="0083">B10. The method of B9, wherein at least the second portion of the memory array includes one or more samples and one or more state classifications not included in the first portion of the memory array.</p><p id="p-0087" num="0084">B11. The method of B1, wherein the consistency class is at least one of: consistent positive; consistent negative; consistent neutral; and consistent informational.</p><p id="p-0088" num="0085">B12. The method of B1, wherein the method further comprises: (g3) repeating steps (b) through (g) one or more times until a timeout duration is reached.</p><p id="p-0089" num="0086">B13. The method of B2, wherein the recommended action includes at least one of: reporting information regarding the consistency class; recording information regarding the consistency class; and ending the method.</p><p id="p-0090" num="0087">C1. A backup system comprising: a first device including at least one processor and memory including instructions that, when executed by the at least one processor, cause the first device to perform one or more of the following steps: (a) booting a virtual machine based on at least a first backup image; (b) taking a plurality of samples of the display output of the virtual machine over a first duration while the virtual machine is booting; (c) communicating the plurality of samples of the virtual machine to a prediction module comprising a trained model, wherein the trained model is an artificial neural network trained using a plurality of boot-state training images from one or more operating systems; (d) determining, via the prediction model, a state classification for each sample of the plurality of samples of the virtual machine; (e) adding each sample of the plurality of samples of the virtual machine and the state classification determined in association with each sample to a memory array; (f) testing at least a first portion of the memory array to determine a consistency class based on the samples and the state classifications stored in at least the first portion of the memory array; and (g) based on the consistency class determined based on at least the first portion of the memory array, performing at least one of the following: (g1) repeating steps (b) through (g) and testing at least a second portion of the memory array to determine a consistency class based on the samples and state classifications stored in at least the second portion of the memory array, wherein the second portion of the memory array includes one or more samples and one or more state classifications not included in the first portion of the memory array; (g2) generating a report concerning the consistency class determined in connection with at least the first portion of the memory array, the report comprising a representative screenshot selected from the screenshots stored within the memory array and the consistency class; and (g3) generating a recommended action to be taken based on the consistency class and taking the recommended action, wherein the recommended action including at least one of: reporting information regarding the consistency class; recording information regarding the consistency class; and ending the method.</p><p id="p-0091" num="0088">[C2]. The system of [C1], wherein the system further comprises a second device including at least one processor and memory including instructions that, when executed by the at least one processor, cause the second device to perform one or more of steps (a) through (g).</p><p id="p-0092" num="0089">[C4]. The system of [C2], wherein the first device is at least one of: a protected machine; a screenshot verification server; and a remote storage server.</p><p id="p-0093" num="0090">[C5]. The system of [C4], wherein the second device is at least one of: a protected machine; a screenshot verification server; and a remote storage server.</p><p id="p-0094" num="0091">[C6]. The system of [C5], wherein the first device is a protected machine and the second device is a screenshot verification server, the screenshot verification server being located at a cloud storage center remote from the protected machine.</p><p id="p-0095" num="0092">[C7]. The system of [C1], wherein the state classification associated with each sample of the plurality of samples is at least one of: positive; informational; neutral; and negative.</p><p id="p-0096" num="0093">[C8]. The system of [C1], wherein at least the first portion of the memory array has a sample period m<sub>1 </sub>and is tested to determine the consistency class by determining whether the first portion of the memory array has a common state classification associated with the one or more samples of the plurality of samples of the virtual machine across the first portion of the memory array, wherein m<sub>1 </sub>is an integer between 2 and 1000.</p><p id="p-0097" num="0094">[C9]. The system of [C1], wherein at least the second portion of the memory array has a sample period m<sub>2 </sub>and is tested to determine the consistency class based on the second portion of the memory array by determining whether the second portion of the memory array has a common state classification associated with the one or more samples of the plurality of samples of the virtual machine stored in the memory array across the sample period m<sub>2</sub>, wherein m<sub>2 </sub>is an integer between 2 and 1000.</p><p id="p-0098" num="0095">[C10]. The system of [C8], wherein the consistency class is at least one of: consistent positive; consistent negative; consistent neutral; and consistent informational.</p><p id="p-0099" num="0096">[D1]. A screenshot verification system for evaluating the integrity of a process-of-interest, the system comprising: a first device comprising at least one processor and memory including instructions that, when executed by the at least one processor, cause the first device to perform one or more of the following steps: (a) initializing the process-of-interest; (b) taking a plurality of screenshots of the display output associated with the process-of-interest over a first duration including the initialization of the process-of-interest; (c) communicating the plurality of screenshots of the display output associated with the process-of-interest to a prediction module, wherein the prediction comprises a trained model that is an artificial neural network trained using a plurality of process-of-interest training images from one or more operating systems; (d) determining, via the prediction module, a state classification for each screenshot of the plurality of screenshots of the display output associated with the process-of-interest; (e) adding each screenshot of the plurality of screenshots of the display output and the state classifications determined in association with each screenshot to a memory array; (f) testing at least a first portion of the memory array to determine a consistency class for the process-of-interest based on the screenshots and the associated state classifications stored in at least the first portion of the memory array; (g) based on the consistency class determined based on at least the first portion of the memory array, performing at least one of the following: (g1) repeating steps (b) through (g) and testing at least a second portion of the memory array to determine a consistency class for the process-of-interest based on the screenshots and the associated state classifications stored in at least the second portion of the memory array, and wherein the second portion of the memory array includes one or more screenshots and one or more state classifications not included in the first portion of the memory array; (g2) generating a report concerning the consistency class determined in connection with at least the first portion of the memory array, the report comprising a representative screenshot selected from the screenshots stored within the memory array and the consistency class; and (g3) generating a recommended action to be taken based on the consistency class and taking the recommended action, wherein the recommended action including at least one of: reporting information regarding the consistency class; recording information regarding the consistency class; and ending the method.</p><p id="p-0100" num="0097">[D2]. The screenshot verification system of [D1], wherein the system further comprises a second device including at least one processor and memory including instructions that, when executed by the at least one processor, cause the second device to perform one or more of steps (a) through (g).</p><p id="p-0101" num="0098">[D3]. The system of [D2], wherein the first device is at least one of: a protected machine; a screenshot verification server; and a remote storage server.</p><p id="p-0102" num="0099">[D4]. The system of [D3], wherein the second device is at least one of: a protected machine; a screenshot verification server; and a remote storage server.</p><p id="p-0103" num="0100">[D5]. The system of [D2], wherein the state classification determined in association with each screenshot of the plurality of screenshots is at least one of: positive; informational; neutral; and negative.</p><p id="p-0104" num="0101">[D6]. The system of [D2], wherein at least the first portion of the memory array has a sample period m<sub>1 </sub>and is tested to determine the consistency class by determining whether the first portion of the memory array has a common state classification associated with the one or more samples of the plurality of samples of the virtual machine across the first portion of the memory array, wherein m<sub>1 </sub>is an integer between 2 and 1000.</p><p id="p-0105" num="0102">[D7]. The system of [D3], wherein at least the second portion of the memory array has a sample period m<sub>2 </sub>and is tested to determine the consistency class based on the second portion of the memory array by determining whether the second portion of the memory array has a common state classification associated with the one or more samples of the plurality of samples of the virtual machine stored in the memory array across the sample period m<sub>2</sub>, wherein m<sub>2 </sub>is an integer between 2 and 1000.</p><p id="p-0106" num="0103">[D8]. The system of [D7], wherein at least the second portion of the memory array includes one or more screenshots and one or more state classifications not included in the first portion of the memory array.</p><p id="p-0107" num="0104">[D9]. The system of [D1], wherein the consistency class is at least one of: consistent positive; consistent negative; consistent neutral; and consistent informational.</p><p id="p-0108" num="0105">[D10]. The system of [D4], wherein the first device is a protected machine and the second device is a screenshot verification server that is located at a cloud storage center remote from the protected machine.</p><p id="p-0109" num="0106">[D11]. The system of [D4], wherein the first device is a protected machine and is configured to perform each of steps (a) through (g).</p><p id="p-0110" num="0107">[D12]. The system of [D10], wherein at least steps (a) through (c) are performed via the first device, at least steps (d) through (g) are performed via the second device, and the plurality of screenshots of the display output associated with the process-of-interest is communicated via a network interface to the second device from the first device.</p><p id="p-0111" num="0108">Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulation of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.</p><p id="p-0112" num="0109">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as &#x201c;identifying&#x201d; or &#x201c;determining&#x201d; or &#x201c;encoding&#x201d; or &#x201c;performing&#x201d; or &#x201c;dividing&#x201d; or &#x201c;setting&#x201d; or &#x201c;adding&#x201d; or &#x201c;locating&#x201d; or &#x201c;copying&#x201d; or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage devices.</p><p id="p-0113" num="0110">The present disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the intended purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.</p><p id="p-0114" num="0111">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the method. The structure for a variety of these systems will appear as set forth in the description below. In addition, the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.</p><p id="p-0115" num="0112">The present disclosure may be provided as a computer program product, or software, that may include a machine-readable medium having stored thereon instructions, which may be used to program a computer system (or other electronic devices) to perform a process according to the present disclosure. A machine-readable medium includes any mechanism for storing information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium such as a read only memory (&#x201c;ROM&#x201d;), random access memory (&#x201c;RAM&#x201d;), magnetic disk storage media, optical storage media, flash memory devices, etc.</p><p id="p-0116" num="0113">In the foregoing specification, implementations of the disclosure have been described with reference to specific example implementations thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of implementations of the disclosure as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230004463A1-20230105-M00001.NB"><img id="EMI-M00001" he="8.47mm" wi="76.20mm" file="US20230004463A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of evaluating the integrity of a process-of-interest associated with a protected machine, the method comprising:<claim-text>(a) initiating, via an operating system managing the protected machine, the process-of-interest;</claim-text><claim-text>(b) taking, via the operating system managing the protected machine, a plurality of screenshots of the display output while the process-of-interest is being initiated;</claim-text><claim-text>(c) communicating one or more of the plurality of screenshots of the display output to a prediction module;</claim-text><claim-text>(d) using the prediction module, determining a state classification for each screenshot of the plurality of screenshots of the display output using a trained model, wherein the trained model is an artificial neural network;</claim-text><claim-text>(e) adding each screenshot of the plurality of screenshots of the display output and the state classification associated with each screenshot to a memory array;</claim-text><claim-text>(f) testing at least a first portion of the memory array to determine a consistency class for the process-of-interest based on the screenshots and the associated state classifications stored in at least the first portion of the memory array;</claim-text><claim-text>(g) based on the consistency class determined based on at least the first portion of the memory array, performing at least one of the following:<claim-text>(g1) repeating steps (b) through (g) and testing at least a second portion of the memory array to determine a consistency class for the process-of-interest based on the screenshots and the associated state classifications stored in at least the second portion of the memory array, and wherein the second portion of the memory array includes one or more screenshots and one or more state classifications not included in the first portion of the memory array; and</claim-text><claim-text>(g2) generating a report concerning the consistency class determined in connection with at least the first portion of the memory array, the report comprising a representative screenshot selected from the screenshots stored within the memory array and the consistency class.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the state classification determined in association with each screenshot of the plurality of screenshots is at least one of: positive; informational; neutral; and negative.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein at least the first portion of the memory array has a sample period m<sub>1 </sub>and is tested to determine the consistency class by determining whether the first portion of the memory array has a common state classification associated with the one or more screenshots of the plurality of screenshots of the display output across the first portion of the memory array, wherein m<sub>1 </sub>is an integer between 2 and 1000.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. A method of evaluating the integrity of at least a first backup image associated with a protected machine, the method comprising:<claim-text>(a) booting, via an operating system managing a first device, a virtual machine based on at least the first backup image;</claim-text><claim-text>(b) taking, via the operating system managing the first device, a plurality of samples of the display output of the virtual machine over a first duration;</claim-text><claim-text>(c) communicating the plurality of samples to a prediction module located on a second device, the prediction module comprising a trained model;</claim-text><claim-text>(d) determining, via the trained model of the prediction module, a state classification for one or more samples of the plurality of samples, wherein the trained model is an artificial neural network trained using a plurality of training images from one or more operating systems;</claim-text><claim-text>(e) adding each sample of the plurality of samples and each associated state classifications to a memory array;</claim-text><claim-text>(f) testing at least a first portion of the memory array to determine a consistency class based on the samples and the state classifications stored in at least the first portion of the memory array;</claim-text><claim-text>(g) based on the consistency class determined based on at least the first portion of the memory array, performing at least one of the following:<claim-text>(g1) repeating steps (b) through (g) and testing at least a second portion of the memory array to determine a consistency class based on the samples and state classifications stored in at least the second portion of the memory array, wherein the second portion of the memory array includes one or more samples and one or more state classifications not included in the first portion of the memory array; and</claim-text><claim-text>(g2) generating a report concerning the consistency class determined in connection with at least the first portion of the memory array, the report comprising a representative screenshot selected from the screenshots stored within the memory array and the consistency class.</claim-text></claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the method further comprises:<claim-text>(h) generating a recommended action to be taken based on the consistency class; and</claim-text><claim-text>(i) taking the recommended action, wherein the recommended action is taken by at least one of the first device and the second device.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein one or more of steps (d) through (i) are performed by at least one processor of the second device based on instructions for performing those steps stored in a memory of the second device.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the first device is the protected machine, and the second device is a screenshot verification server located remotely from the protected machine.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the first device is a remote storage server that is storing the backup image associated with the protected machine, and the second device is a screenshot verification server located remotely from the protected machine and the remote storage server.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the first device and the second device are the same device and are located remotely from the protected machine.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the state classification determined for each sample of the plurality of samples is at least one of: positive; informational; neutral; and negative.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein at least the first portion of the memory array has a sample period m<sub>1 </sub>and is tested to determine the consistency class by determining whether the first portion of the memory array has a common state classification associated with the one or more samples of the plurality of samples of the virtual machine across the first portion of the memory array, wherein m<sub>1 </sub>is an integer between 2 and 1000.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the second portion of the memory array has a sample period m<sub>2 </sub>and is tested to determine the consistency class based on the second portion of the memory array by determining whether the second portion of the memory array has a common state classification associated with the one or more samples of the plurality of samples of the virtual machine stored in the memory array across the sample period m<sub>2</sub>, wherein m<sub>2 </sub>is an integer between 2 and 1000.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein at least the second portion of the memory array includes one or more samples and one or more state classifications not included in the first portion of the memory array.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the consistency class is at least one of: consistent positive; consistent negative; consistent neutral; and consistent informational.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the method further comprises:<claim-text>(g3) repeating steps (b) through (g) one or more times until a timeout duration is reached.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the recommended action includes at least one of: reporting information regarding the consistency class; recording information regarding the consistency class; and ending the method.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A backup system comprising:<claim-text>a first device including at least one processor and memory including instructions that, when executed by the at least one processor, cause the first device to perform one or more of the following steps:<claim-text>(a) booting a virtual machine based on at least a first backup image;</claim-text><claim-text>(b) taking a plurality of samples of the display output of the virtual machine over a first duration while the virtual machine is booting;</claim-text><claim-text>(c) communicating the plurality of samples of the virtual machine to a prediction module comprising a trained model, wherein the trained model is an artificial neural network trained using a plurality of boot-state training images from one or more operating systems;</claim-text><claim-text>(d) determining, via the prediction model, a state classification for each sample of the plurality of samples of the virtual machine;</claim-text><claim-text>(e) adding each sample of the plurality of samples of the virtual machine and the state classification determined in association with each sample to a memory array;</claim-text><claim-text>(f) testing at least a first portion of the memory array to determine a consistency class based on the samples and the state classifications stored in at least the first portion of the memory array; and</claim-text><claim-text>(g) based on the consistency class determined based on at least the first portion of the memory array, performing at least one of the following:<claim-text>(g1) repeating steps (b) through (g) and testing at least a second portion of the memory array to determine a consistency class based on the samples and state classifications stored in at least the second portion of the memory array, wherein the second portion of the memory array includes one or more samples and one or more state classifications not included in the first portion of the memory array;</claim-text><claim-text>(g2) generating a report concerning the consistency class determined in connection with at least the first portion of the memory array, the report comprising a representative screenshot selected from the screenshots stored within the memory array and the consistency class; and</claim-text></claim-text><claim-text>(g3) generating a recommended action to be taken based on the consistency class and taking the recommended action, wherein the recommended action including at least one of: reporting information regarding the consistency class; recording information regarding the consistency class; and ending the method.</claim-text></claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the system further comprises a second device including at least one processor and memory including instructions that, when executed by the at least one processor, cause the second device to perform one or more of steps (a) through (g).</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the first device is at least one of: a protected machine; a screenshot verification server; and a remote storage server.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the second device is at least one of: a protected machine; a screenshot verification server; and a remote storage server.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The system of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the first device is a protected machine and the second device is a screenshot verification server, the screenshot verification server being located at a cloud storage center remote from the protected machine.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the state classification associated with each sample of the plurality of samples is at least one of: positive; informational; neutral; and negative.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein at least the first portion of the memory array has a sample period m<sub>1 </sub>and is tested to determine the consistency class by determining whether the first portion of the memory array has a common state classification associated with the one or more samples of the plurality of samples of the virtual machine across the first portion of the memory array, wherein m<sub>1 </sub>is an integer between 2 and 1000.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The system of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein at least the second portion of the memory array has a sample period m<sub>2 </sub>and is tested to determine the consistency class based on the second portion of the memory array by determining whether the second portion of the memory array has a common state classification associated with the one or more samples of the plurality of samples of the virtual machine stored in the memory array across the sample period m<sub>2</sub>, wherein m<sub>2 </sub>is an integer between 2 and 1000.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The system of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the consistency class is at least one of: consistent positive; consistent negative; consistent neutral; and consistent informational.</claim-text></claim></claims></us-patent-application>