<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004301A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004301</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363108</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0608</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0653</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0673</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SPACE-EFFICIENT STORAGE  OF SYSTEM-MONITORING DATA</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>EMC IP Holding Company LLC</orgname><address><city>Hopkinton</city><state>MA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Sanap</last-name><first-name>Abhilash</first-name><address><city>Maharashtra</city><country>IN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Gumaste</last-name><first-name>Sunil</first-name><address><city>Bengaluru</city><country>IN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Soni</last-name><first-name>Pankaj</first-name><address><city>Sikar</city><country>IN</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Sachdeva</last-name><first-name>Ravish</first-name><address><city>Jammu &#x26; Kashmir</city><country>IN</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Alshawabkeh</last-name><first-name>Malak</first-name><address><city>Franklin</city><state>MA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>EMC IP Holding Company LLC</orgname><role>02</role><address><city>Hopkinton</city><state>MA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An amount of storage space required to maintain counter information for a storage system is reduced without reducing a temporal granularity or tracking granularity of the counter information. Rather than periodically recording actual (i.e., raw) counter values for counters, difference (i.e., delta) values may be recorded. For a given counter, a difference (delta value) between a value of the counter for a given point in time (PIT) and a value of the counter for a previous PIT may be determined, and this delta value may be stored as opposed to storing the raw counter value. This delta value may be a significantly smaller value than the raw value. To further reduce the amount of storage space required, no value may be stored for a counter for a given PIT if it is determined that there is no difference between a counter value for the given PIT and a previous PIT.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="102.53mm" wi="158.75mm" file="US20230004301A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="248.33mm" wi="187.79mm" orientation="landscape" file="US20230004301A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="183.90mm" wi="134.03mm" orientation="landscape" file="US20230004301A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="237.74mm" wi="175.34mm" orientation="landscape" file="US20230004301A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="115.49mm" wi="177.80mm" orientation="landscape" file="US20230004301A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="176.45mm" wi="142.75mm" orientation="landscape" file="US20230004301A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="167.13mm" wi="177.21mm" orientation="landscape" file="US20230004301A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="250.19mm" wi="192.96mm" orientation="landscape" file="US20230004301A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="224.54mm" wi="139.02mm" orientation="landscape" file="US20230004301A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><heading id="h-0002" level="1">Technical Field</heading><p id="p-0002" num="0001">This application generally relates to data storage systems, and more particularly to storing system-monitoring data in a space-efficient manner.</p><heading id="h-0003" level="1">Description of Related Art</heading><p id="p-0003" num="0002">Data storage systems (often referred to herein simply as &#x201c;storage systems&#x201d;) may include storage resources used by one or more host systems (sometimes referred to herein as &#x201c;hosts&#x201d;), i.e., servers, to store data. One or more storage systems and one or more host systems may be interconnected by one or more network components, for example, as part of a switching fabric, to form a data storage network (often referred to herein simply as &#x201c;storage network&#x201d;). Storage systems may provide a variety of data services to host systems of the storage network.</p><p id="p-0004" num="0003">A host system may have host applications that utilize the data services provided by one or more storage systems of the storage network to store data on the physical storage devices (e.g., tape, disks or solid state devices) thereof. For a given application, to perform input/output (I/O) operations utilizing a physical storage device of the storage system, one or more components of the host system, storage system and network components therebetween may be used. The one or more combinations of components of the host, switching fabric and storage system over which I/O operations between an application and the storage system may be communicated may be considered an I/O path between the application and the storage system. It should be appreciated that other combinations of components of a storage network, for example, two or more storage systems, also may be coupled together by one or more switches of a switching fabric. Thus, more generically, the one or more combinations of components of a first network component, switching fabric and second network component over which I/O communications may be communicated may be considered an I/O path between the two network components. The collective I/O paths between components of a storage network may be considered to define a connectivity of the storage network.</p><p id="p-0005" num="0004">Host systems may not address the physical storage devices of a storage systems directly, but rather access to data may be provided to one or more host systems from what the host system(s) view as a plurality of logical storage units (LSUs) including, for example, logical blocks, logical devices (also referred to as logical volumes, LUNs and logical disks), thin devices, groups of logical devices (e.g., storage groups), NVMe namespaces, and other types of LSUs. LSUs are described in more detail elsewhere herein.</p><heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0006" num="0005">In an embodiment of the invention, a method includes: receiving counter information for a first point in time for a plurality of counters on a storage system, the counter information including a first counter value specifying a value of a first counter at the first point in time; obtaining a second counter value specifying a value of the first counter at a second point in time before the first point in time; determining whether there is a difference between the first counter value and the second counter value; if it is determined that there is a difference, persisting information associating the first counter with the difference for the first point in time; and refraining from persisting the first counter value. The method further may include, if it is determined that there is not any difference between the first counter value and the second counter value, refraining from storing any value for the first counter for the first point in time. The method may include: storing metadata reflecting that the counter information was generated for the first point in time, including counter information for the first counter; after the first point in time, determining that there was not a difference between the first counter value and the second counter value based on the metadata. The method further may include, after the first point in time, generating the first counter value based on the determination that there was not a difference between the first counter value and the second counter value. The method further may include: storing metadata reflecting that the counter information was generated for the first point in time, including counter information for the first counter; and, at a point in time after the first point in time, generating the first counter value from the metadata and the information associating the first counter with the difference for the first point in time. The metadata may be stored in at least a first relational database table, wherein difference information determined from the counter information, including the information associating the first counter with the difference for the first point in time, may be stored in at least a second relational database table, and wherein generating the first counter value may include executing an SQL join operation between the at least first relational database table and the at least second relational database table. The first counter may count occurrences of execution of a specific line of code on the storage system.</p><p id="p-0007" num="0006">In another embodiment, a storage system includes executable logic that implements a method including: receiving counter information for a first point in time for a plurality of counters on a storage system, the counter information including a first counter value specifying a value of a first counter at the first point in time; obtaining a second counter value specifying a value of the first counter at a second point in time before the first point in time; determining whether there is a difference between the first counter value and the second counter value; if it is determined that there is a difference, persisting information associating the first counter with the difference for the first point in time; and refraining from persisting the first counter value. The method further may include, if it is determined that there is not any difference between the first counter value and the second counter value, refraining from storing any value for the first counter for the first point in time. The method may include: storing metadata reflecting that the counter information was generated for the first point in time, including counter information for the first counter; after the first point in time, determining that there was not a difference between the first counter value and the second counter value based on the metadata. The method further may include, after the first point in time, generating the first counter value based on the determination that there was not a difference between the first counter value and the second counter value. The method further may include: storing metadata reflecting that the counter information was generated for the first point in time, including counter information for the first counter; and, at a point in time after the first point in time, generating the first counter value from the metadata and the information associating the first counter with the difference for the first point in time. The metadata may be stored in at least a first relational database table, wherein difference information determined from the counter information, including the information associating the first counter with the difference for the first point in time, may be stored in at least a second relational database table, and wherein generating the first counter value may include executing an SQL join operation between the at least first relational database table and the at least second relational database table. The first counter may count occurrences of execution of a specific line of code on the storage system.</p><p id="p-0008" num="0007">In another embodiment of the invention, computer-readable media has software stored thereon, the software including: executable code that controls receiving counter information for a first point in time for a plurality of counters on a storage system, the counter information including a first counter value specifying a value of a first counter at the first point in time; executable code that controls obtaining a second counter value specifying a value of the first counter at a second point in time before the first point in time; executable code that controls determining whether there is a difference between the first counter value and the second counter value; executable code that controls, if it is determined that there is a difference, persisting information associating the first counter with the difference for the first point in time; and executable code that controls refraining from persisting the first counter value. The software further may include executable code that controls, if it is determined that there is not any difference between the first counter value and the second counter value, refraining from storing any value for the first counter for the first point in time. The software further may include: executable code that controls storing metadata reflecting that the counter information was generated for the first point in time, including counter information for the first counter; and executable code that controls, after the first point in time, determining that there was not a difference between the first counter value and the second counter value based on the metadata. The software further may include executable code that controls, after the first point in time, generating the first counter value based on the determination that there was not a difference between the first counter value and the second counter value. The software further may include: executable code that controls storing metadata reflecting that the counter information was generated for the first point in time, including counter information for the first counter; and executable code that controls, at a point in time after the first point in time, generating the first counter value from the metadata and the information associating the first counter with the difference for the first point in time. The metadata may be stored in at least a first relational database table, wherein difference information determined from the counter information, including the information associating the first counter with the difference for the first point in time, may be stored in at least a second relational database table, and wherein generating the first counter value may include executing an SQL join operation between the at least first relational database table and the at least second relational database table.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008">Features and advantages of the present invention will become more apparent from the following detailed description of illustrative embodiments thereof taken in conjunction with the accompanying drawings in which:</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an example of a data storage network, according to embodiments of the invention;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a data flow diagram illustrating an example of a system for space-efficient storage of counter data, according to embodiments of the invention;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating an example of a data schema for space-efficient storage of counter data, according to embodiments of the invention;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow chart illustrating an example of a method of reducing counter data, according to embodiments of the invention;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIGS. <b>5</b>A-<b>5</b>C</figref> illustrate stages of reducing counter data, according to embodiments of the invention;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow chart illustrating an example of a method of determining an actual counter value from reduced counter data, according to embodiments of the invention;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow chart illustrating an example of a method of expanding reduced counter data, according to embodiments of the invention; and</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates reduced and expanded counter data, according to embodiments of the invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF EMBODIMENTS</heading><p id="p-0018" num="0017">Monitoring data, e.g., utilization and performance data, for a storage system may be collected, tracked, generated and analyzed over time to assess behavior of a storage system, including particular physical and functional components thereof. Assessing system behavior may include diagnosing problems, which may result in modification of one or more aspects of the storage system (e.g., through modification of parameters) to address the diagnosed problems. Monitoring data may include counter values. For example, instructions may be placed in software that runs on the storage system, including low-level code, to increment a counter each time the code is executed. For example, such instructions may be placed in microcode found in Symmetrix&#x2122;, VMAX&#x2122;, VMAX3&#x2122; or PowerMax&#x2122; systems made available from EMC Corporation of Hopkinton, Mass. (&#x201c;Dell EMC&#x201d;), where the counter values produced by such instructions on such systems from Dell EMC may become part of what is referred to as &#x201c;AI statistics.&#x201d;</p><p id="p-0019" num="0018">The values of counters may be used to analyze code path utilization, e.g., under various conditions, providing useful insights to developers. In some cases, a storage system may be configured to collect monitoring data including counter values at predefined points in time, for example, periodically in accordance with a schedule, and to send the monitoring data to an entity (e.g., a vendor or a contract professional) that supports the storage system. The entity may store the monitoring data and use it to perform any of a variety of analysis, including, for example, diagnosing problems and forecasting future system behavior. Such an entity may maintain the history of monitoring data for the storage system, as well as other storage systems.</p><p id="p-0020" num="0019">The number of counters tracked on a given system may be substantial, numbering in the thousands, ten of thousands, or even more. Further, the values of the counters (e.g., the number of times a piece of code is executed) may be substantial as well, for example, depending on how long the counter has been running and a rate at which the code that triggers the incrementing of the counter is hit. For example, piece of code may be executed millions, tens of millions, or even more, times per day, or very infrequently, perhaps only a few times a week or month, or even less. As a result, the amount of storage required to maintain counter values may be significant. In embodiments in which these counter values are periodically collected and reported to an entity, who then stores the reported counter values, the amount of storage to maintain a history of these counter values may be even more significant and growing at a significant rate.</p><p id="p-0021" num="0020">To reduce an amount of storage consumed by counter values collected over time, the number of counters tracked may be reduced and/or counter values may be collected and recorded less frequently. However, the foregoing solutions result in less granular (i.e., coarser) counter information, which results in less precise analysis and perhaps less optimal trouble-shooting, forecasting or other types of analysis.</p><p id="p-0022" num="0021">What may be desired is a way to reduce an amount of storage space required to store counter information accumulated over time for a storage system without sacrificing temporal granularity of the counter information or the number of counters tracked (&#x201c;tracking granularity&#x201d;).</p><p id="p-0023" num="0022">Described herein are techniques and mechanisms for reducing an amount of storage space required to maintain (i.e., keep stored) counter information for a storage system (e.g., for the purposed of monitoring utilization or performance) without reducing a temporal granularity or tracking granularity of the counter information. In some embodiments, rather than periodically recording the actual (i.e., raw) counter values for counters, difference (i.e., delta) values are recorded. For example, for a given counter, a difference (delta) between a value of the counter for a given (e.g., current) point in time and a value of the counter recorded for a previous (e.g., immediately preceding) point in time may be determined, and this delta value may be stored, as opposed to storing the raw counter value. That is, while the actual counter value of the given point in time may temporarily reside in memory (e.g., volatile memory) while counter values are being processed as described herein, the counter value may not be stored on a non-volatile medium (i.e., persisted) for later use Rather, the delta value for the given point in time may be persisted. The delta value may be a smaller (e.g., significantly smaller) value than the raw value for the point in time, depending on how long the counter has been counting (i.e., when it was initialized or last reset), the frequency with which the code corresponding to the counter is executed, and the amount of time between the given point in time and the previous point in time (e.g., based on the frequency of recording counter values). For example, whereas a 64-bit variable may be required to store the raw counter value, an 8-bit variable may be used to store its corresponding delta value.</p><p id="p-0024" num="0023">In some embodiments, to further reduce the amount of storage space required to maintain counter information for a storage system, no value (i.e., no actual value or delta value) may be stored for a counter for a given point in time if it is determined that there is no difference between a counter value for the given PIT and a previous PIT. That is, if it determined that the counter has not been incremented (i.e., the corresponding code has not been accessed) since the last time the counter value was collected (e.g., reported), no value may be stored rather than storing a value representing &#x201c;0.&#x201d; Not storing such null values may dramatically reduce the amount of storage space required to maintain counter information for a storage system, especially if a significant percentage of code is typically not accessed between collection points.</p><p id="p-0025" num="0024">In some embodiments, an actual counter value for a counter for a given point in time on a storage system may be determined at a time after the point in time based on: metadata including information about the counters defined for the storage system and information indicating the points in time for which counter values were collected; the delta value (or lack thereof) stored for the given point in time; an actual counter value recorded for the counter for an earlier point in time; and perhaps delta values for other previous points in time if an immediately preceding point in time is not a point in time for which an actual value was recorded, as described in more detail elsewhere herein.</p><p id="p-0026" num="0025">In some embodiments, one or more first relational database tables (or the like) are used to store metadata including information about the counters defined for the storage system and information indicating the points in time for which counter values were collected; and one or more second relational database tables are used to store delta values as described herein and at least one actual value for each counter. In such embodiments, determining an actual counter value for a counter for a given point in time on a storage system may be determined at a time later than the point in time by performing one or more SQL join operations (or the like) between the one or more first relational database tables and the one or more second relational database tables.</p><p id="p-0027" num="0026">In should be appreciated that, while embodiments of the invention are described herein primarily in relation to counters, the invention is not so limited, and may apply to other types of parameter value being monitored by a system. Further, while embodiments of the invention are described herein primarily in relation to storage systems, the invention is not so limited, and may apply to other types of systems and components thereof, which may be part of or independent of a storage network.</p><p id="p-0028" num="0027">Illustrative embodiments of the invention will now be described in more detail in relation to the figures.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of an embodiment of a data storage network <b>10</b> (often referred to herein as a &#x201c;storage network&#x201d;). The storage network <b>10</b> may include any of: host systems (i.e., &#x201c;hosts&#x201d;) <b>14</b><i>a</i>-<i>n</i>; network <b>18</b>; one or more storage systems <b>20</b><i>a</i>-<i>n</i>; other components; or any suitable combination of the foregoing. Storage systems <b>20</b><i>a</i>-<i>n</i>, connected to host systems <b>14</b><i>a</i>-<i>n </i>through network <b>18</b>, may collectively constitute a distributed storage system <b>20</b>. All of the host computers <b>14</b><i>a</i>-<i>n </i>and storage systems <b>20</b><i>a</i>-<i>n </i>may be located at the same physical site, or, alternatively, two or more host computers <b>14</b><i>a</i>-<i>n </i>and/or storage systems <b>20</b><i>a</i>-<i>n </i>may be located at different physical locations. Storage network <b>10</b> or portions thereof (e.g., one or more storage systems <b>20</b><i>a</i>-<i>n </i>in combination with network <b>18</b>) may be any of a variety of types of storage networks, such as, for example, a storage area network (SAN), e.g., of a data center. Embodiments of the invention are described herein in reference to storage system <b>20</b><i>a</i>, but it should be appreciated that such embodiments may be implemented using other discrete storage systems (e.g., storage system <b>20</b><i>n</i>), alone or in combination with storage system <b>20</b><i>a. </i></p><p id="p-0030" num="0029">The N hosts <b>14</b><i>a</i>-<i>n </i>may access the storage system <b>20</b><i>a</i>, for example, in performing input/output (I/O) operations or data requests, through network <b>18</b>. For example, each of hosts <b>14</b><i>a</i>-<i>n </i>may include one or more host bus adapters (HBAs) (not shown) that each include one or more host ports for connecting to network <b>18</b>. The network <b>18</b> may include any one or more of a variety of communication media, switches and other components known to those skilled in the art, including, for example: a repeater, a multiplexer or even a satellite. Each communication medium may be any of a variety of communication media including, but not limited to: a bus, an optical fiber, a wire and/or other type of data link, known in the art. The network <b>18</b> may include at least a portion of the Internet, or a proprietary intranet, and components of the network <b>18</b> or components connected thereto may be configured to communicate in accordance with any of a plurality of technologies, including, for example: SCSI, ESCON, Fibre Channel (FC), iSCSI, FCoE, GIGE (Gigabit Ethernet), NVMe over Fabric (NVMeoF); other technologies, or any suitable combinations of the foregoing, each of which may have one or more associated standard specifications. In some embodiments, the network <b>18</b> may be, or include, a switching fabric including one or more switches and other components. A network located externally to a storage system that connects host systems to storage system resources of the storage system, may be referred to herein as an &#x201c;external network.&#x201d;</p><p id="p-0031" num="0030">Each of the host systems <b>14</b><i>a</i>-<i>n </i>and the storage systems <b>20</b><i>a</i>-<i>n </i>included in the storage network <b>10</b> may be connected to the network <b>18</b> by any one of a variety of connections as may be provided and supported in accordance with the type of network <b>18</b>. The processors included in the host computer systems <b>14</b><i>a</i>-<i>n </i>may be any one of a variety of proprietary or commercially available single or multi-processor system, such as an Intel-based processor, or other type of commercially available processor able to support traffic in accordance with each particular embodiment and application. Each of the host computer systems may perform different types of I/O operations in accordance with different tasks and applications executing on the hosts. In the embodiment of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, any one of the host computers <b>14</b><i>a</i>-<i>n </i>may issue an I/O request to the storage system <b>20</b><i>a </i>to perform an I/O operation. For example, an application executing on one of the host computers <b>14</b><i>a</i>-<i>n </i>may perform a read or write operation resulting in one or more I/O requests being transmitted to the storage system <b>20</b><i>a. </i></p><p id="p-0032" num="0031">Each of the storage systems <b>20</b><i>a</i>-<i>n </i>may be manufactured by different vendors and inter-connected (not shown). Additionally, the storage systems <b>20</b><i>a</i>-<i>n </i>also may be connected to the host systems through any one or more communication connections <b>31</b> that may vary with each particular embodiment and device in accordance with the different protocols used in a particular embodiment. The type of communication connection used may vary with certain system parameters and requirements, such as those related to bandwidth and throughput required in accordance with a rate of I/O requests as may be issued by each of the host computer systems <b>14</b><i>a</i>-<i>n</i>, for example, to the storage systems <b>20</b><i>a</i>-<b>20</b><i>n</i>. It should be appreciated that the particulars of the hardware and software included in each of the components that may be included in the storage systems <b>20</b><i>a</i>-<i>n </i>are described herein in more detail, and may vary with each particular embodiment.</p><p id="p-0033" num="0032">Each of the storage systems, such as <b>20</b><i>a</i>, may include a plurality of physical storage devices <b>24</b> (e.g., physical non-volatile storage devices) such as, for example, disk devices, solid-state storage devices (SSDs, e.g., flash, storage class memory (SCM), NVMe SSD, NVMe SCM) or even magnetic tape, and may be enclosed within a disk array enclosure (DAE) <b>27</b>. In some embodiments, two or more of the physical storage devices <b>24</b> may be grouped or arranged together, for example, in an arrangement consisting of N rows of physical storage devices <b>24</b><i>a</i>-<i>n</i>. In some embodiments, one or more physical storage devices (e.g., one of the rows <b>24</b><i>a</i>-<i>n </i>of physical storage devices) may be connected to a back-end adapter (&#x201c;BE&#x201d;) (e.g., a director configured to serve as a BE) responsible for the backend management of operations to and from a portion of the physical storage devices <b>24</b>. A BE is sometimes referred to by those in the art as a disk adapter (&#x201c;DA&#x201d;) because of the development of such adapters during a period in which disks were the dominant type of physical storage device used in storage systems, even though such so-called DAs may be configured to manage other types of physical storage devices (e.g., SSDs). In the system <b>20</b><i>a</i>, a single BE, such as <b>23</b><i>a</i>, may be responsible for the management of one or more (e.g., a row) of physical storage devices, such as row <b>24</b><i>a</i>. That is, in some configurations, all I/O communications with one or more physical storage devices <b>24</b> may be controlled by a specific BE. BEs <b>23</b><i>a</i>-<i>n </i>may employ one or more technologies in communicating with, and transferring data to/from, physical storage devices <b>24</b>, for example, SAS, SATA or NVMe. For NVMe, to enable communication between each BE and the physical storage devices that it controls, the storage system may include a PCIe switch for each physical storage device controlled by the BE; i.e., connecting the physical storage device to the controlling BE.</p><p id="p-0034" num="0033">It should be appreciated that the physical storage devices are not limited to being arranged in rows. Further, the DAE <b>27</b> is not limited to enclosing disks, as the name may suggest, but may be constructed and arranged to enclose a plurality of any type of physical storage device, including any of those described herein, or combinations thereof.</p><p id="p-0035" num="0034">The system <b>20</b><i>a </i>also may include one or more front-end adapters (&#x201c;FAs&#x201d;) <b>21</b><i>a</i>-<i>n </i>(e.g., directors configured to serve as FAs), which also may be referred to herein as host adapters (&#x201c;HAs&#x201d;). Each of these FAs may be used to manage communications and data operations between one or more host systems and global memory (GM) <b>25</b><i>b </i>of memory <b>26</b>. The FA may be, or include, a Fibre Channel (FC) adapter if FC is a technology being used to communicate between the storage system <b>20</b><i>a </i>and the one or more host systems <b>14</b><i>a</i>-<i>n</i>, or may be another type of adapter based on the one or more technologies being used for I/O communications.</p><p id="p-0036" num="0035">Also shown in the storage system <b>20</b><i>a </i>is a remote adapter (&#x201c;RA&#x201d;) <b>40</b>. The RA may be, or include, hardware that includes a processor used to facilitate communication between storage systems (e.g., <b>20</b><i>a </i>and <b>20</b><i>n</i>), such as between two of the same or different types of storage systems, and/or may be implemented using a director.</p><p id="p-0037" num="0036">Storage system <b>20</b><i>a </i>also may include a management module <b>22</b>, which may be configured (e.g., dedicated) to perform storage management functions or services such as, for example, storage provisioning, device configuration, tier management, other services, or any combination of other services. The management module <b>22</b> also may be configured to perform, or assist in performing analysis such as, for example, performance and/or utilization analysis and/or forecasting of system behavior, the result of which may inform other management functions performed by the management module <b>22</b>. The management module <b>22</b> may be configured to be accessed by only certain personnel (e.g., storage administrators, support engineers) and may have its own dedicated hardware, firmware, software, CPU resources and OS, and may be loaded with one or more applications, tools, CLIs, APIs and the like to enable management. In some embodiments, the management module, or portions thereof, may be located external to storage system <b>20</b><i>a</i>, for example, as part of one of host systems <b>14</b><i>a</i>-<i>n</i>, as an independent management server, or as part of another separate system connected to storage system <b>20</b><i>a </i>via network <b>18</b>. In some embodiments, the management and analysis functions described herein may be performed using both resource of the management module <b>22</b> of the storage system <b>20</b><i>a </i>and one management resources located externally to the storage system, for example, on a host system, management server and/or other components.</p><p id="p-0038" num="0037">The FAs, BEs and RA may be collectively referred to herein as directors <b>37</b><i>a</i>-<i>n</i>. Each director <b>37</b><i>a</i>-<i>n </i>may be implemented (e.g., in hardware, firmware, software or a combination thereof) on a circuit board that includes memory resources (e.g., at least a segment of GM portion <b>25</b><i>b</i>) and compute resources, for example, one or more processing cores (e.g., as part of a CPU) and/or a CPU complex for processing I/O operations, and that as described in more detail elsewhere herein. There may be any number of directors <b>37</b><i>a</i>-<i>n</i>, which may be limited based on any of a number of factors, including spatial, computation and storage limitations. In an embodiment disclosed herein, there may be up to sixteen directors coupled to the memory <b>26</b>. Other embodiments may use a higher or lower maximum number of directors.</p><p id="p-0039" num="0038">System <b>20</b><i>a </i>also may include an internal switching fabric (i.e., internal fabric) <b>30</b>, which may include one or more switches, that enables internal communications between components of the storage system <b>20</b><i>a</i>, for example, directors <b>37</b><i>a</i>-<i>n </i>(FAs <b>21</b><i>a</i>-<i>n</i>, BEs <b>23</b><i>a</i>-<i>n</i>, RA <b>40</b>, management module <b>22</b>) and memory <b>26</b>, e.g., to perform I/O operations. One or more internal logical communication paths may exist between the directors and the memory <b>26</b>, for example, over the internal fabric <b>30</b>. For example, any of the directors <b>37</b><i>a</i>-<i>n </i>may use the internal fabric <b>30</b> to communicate with other directors to access any of physical storage devices <b>24</b>; i.e., without having to use memory <b>26</b>. In addition, one of the directors <b>37</b><i>a</i>-<i>n </i>may be able to broadcast a message to all of the other directors <b>37</b><i>a</i>-<i>n </i>over the internal fabric <b>30</b> at the same time. Each of the components of system <b>20</b><i>a </i>may be configured to communicate over internal fabric <b>30</b> in accordance with one or more technologies such as, for example, InfiniBand (TB), Ethernet, Gen-Z, another technology, or any suitable combination of the foregoing.</p><p id="p-0040" num="0039">The GM portion <b>25</b><i>b </i>may be used to facilitate data transfers and other communications between the directors <b>37</b><i>a</i>-<i>n </i>in a storage system. In one embodiment, the directors <b>37</b><i>a</i>-<i>n </i>(e.g., serving as FAs or BEs) may perform data operations using a cache <b>28</b> that may be included in the GM <b>25</b><i>b</i>, for example, in communications with other directors, and other components of the system <b>20</b><i>a</i>. The other portion <b>25</b><i>a </i>is that portion of memory that may be used in connection with other designations that may vary in accordance with each embodiment. Global memory <b>25</b><i>b </i>and cache <b>28</b> are described in more detail elsewhere herein. It should be appreciated that, although memory <b>26</b> is illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as being a single, discrete component of storage system <b>20</b><i>a</i>, the invention is not so limited. In some embodiments, memory <b>26</b>, or the GM <b>25</b><i>b </i>or other memory <b>25</b><i>a </i>thereof, may be distributed among a plurality of physically discrete processing nodes (e.g., circuit boards) as described in more detail elsewhere herein.</p><p id="p-0041" num="0040">In at least one embodiment, write data received at the storage system from a host or other client may be initially written to cache <b>28</b> and marked as write pending. For example, cache <b>28</b> may be partitioned into one or more portions called cache slots (which also may be referred to in the field of data storage as cache lines, cache blocks or another name), which may be a of a predefined uniform size, for example, 128 Kbytes. Write data of a write operation received at the storage system may be initially written (i.e., staged) in one or more of these cache slots and marked as write pending. Once written to cache <b>28</b>, the host (e.g., one of <b>14</b><i>a</i>-<i>n</i>) may be notified that the write operation has completed. At a later time, the write data may be de-staged from cache <b>28</b> to one or more physical storage devices <b>24</b><i>a</i>-<i>n</i>, such as by a BE.</p><p id="p-0042" num="0041">The memory <b>26</b> may include persistent memory for which data stored thereon persists after the process or program that created the data terminates. For example, at least portions of the memory <b>26</b> may be implemented using DIMM (or another type of fast RAM memory) that is battery-backed by a NAND-type memory (e.g., flash). In some embodiments, the data in such persistent memory may persist (for at least some period of time) after the storage system fails. The memory <b>26</b> (or at least a portion thereof&#x2014;e.g., the cache <b>28</b> or a portion thereof) may be configured such that each data written to the memory <b>28</b> is mirrored to provide a form of write protection. For example, each memory location within each such mirrored portion of the memory <b>26</b> may have a corresponding memory location on the storage system <b>20</b><i>a </i>to which a redundant copy of the data is stored, and which can be used in place of the mirrored memory location in the event the mirrored memory location fails. The redundant memory location should be located outside of at least the most local fault zone of the mirrored memory location. In some embodiments described in more detail herein, the memory <b>26</b> may be distributed among multiple physically discrete processing nodes (e.g., circuit boards), in which case mirroring may be configured such that a mirrored memory location and its corresponding redundant memory location are located on different physically discrete processing nodes.</p><p id="p-0043" num="0042">The storage system <b>20</b><i>a </i>may include a back-up power supply <b>41</b> (e.g., a battery) that can provide power to the storage system for a limited amount of time to after primary (AC) power fails. This limited time may allow certain tasks to be performed during a window of time beginning when the primary power fails until the earliest of: the primary power is restored; and the end of the limited lifetime (sometimes on the order of second or tens of seconds) of the back-up power supply. For example, the storage system <b>20</b><i>a </i>(e.g., the memory <b>26</b> and/or memory management module <b>32</b>) may be configured to automatically copy the contents of the memory <b>26</b> during this window of time to one or more predetermined physical storage devices, to be restored to the memory <b>26</b> after the power has been restored, e.g., as part of the storage system recovering process. Such automatic copying for restoration during recovering may referred to herein as &#x201c;vaulting.&#x201d; Vaulting may provide a form of write protection for data written to the memory <b>26</b>, for example, for dirty data in the cache <b>28</b>; i.e., data written to the storage system, which has been staged in the cache <b>28</b> but not yet de-staged to a physical storage device. More broadly, vaulting may be performed for any data written to the memory <b>26</b>.</p><p id="p-0044" num="0043">The storage system <b>20</b><i>a </i>may include a memory management module <b>32</b> configured to manage one or more aspects of the memory <b>26</b>, and the memory management module <b>32</b> may include a cache management module <b>34</b> for managing one or more aspects of the cache <b>28</b>.</p><p id="p-0045" num="0044">It should be noted that, although examples of techniques herein may be made with respect to a physical storage system and its physical components (e.g., physical hardware for each RA, BE, FA and the like), techniques herein may be performed in a physical storage system including one or more emulated or virtualized components (e.g., emulated or virtualized ports, emulated or virtualized BEs or FAs), and also a virtualized or emulated storage system including virtualized or emulated components. For example, in embodiments in which NVMe technology is used to communicate with, and transfer data between, a host system and one or more FAs, one or more of the FAs may be implemented using NVMe technology as an emulation of an FC adapter.</p><p id="p-0046" num="0045">Any of storage systems <b>20</b><i>a</i>-<i>n</i>, or one or more components thereof, described in relation to <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be implemented using one or more Symmetrix&#x2122;, VIVIAX&#x2122;, VIVIAX3&#x2122; or PowerMax&#x2122; systems made available from Dell EMC.</p><p id="p-0047" num="0046">Host systems <b>14</b><i>a</i>-<i>n </i>may provide data and control (e.g., management and access control) information to storage systems <b>20</b><i>a</i>-<i>n </i>over a plurality of I/O paths defined between the host systems and storage systems, for example, including host system components, storage system components, and network components (e.g., of network <b>18</b>), and the storage systems also may provide data to the host systems across the I/O paths. In the embodiment of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the host systems may not address the physical storage devices (e.g., disk drives or flash drives) <b>24</b> of the storage systems directly, but rather access to data may be provided to one or more host systems from what the host systems view as a plurality of LSUs including, for example, logical blocks, logical devices (also referred to as logical volumes, LUNs, logical storage units and/or logical disks), thin devices, groups of logical devices (e.g., storage groups), NVMe namespaces, and other types of LSUs. For example, a PowerMax storage system may be configured to organize available storage resources (e.g., physical storage devices) into many LUNs, each with its own addressable space defined in logical blocks addresses (LBAs). The LSUs may or may not correspond to the actual physical storage devices. For example, one or more LSUs may map to a single physical storage device; that is, the logical address space of the one or more LSU may map to physical space on a single physical storage device. Data in a single storage system may be accessed by multiple hosts allowing the hosts to share the data residing therein. The FAs may be used in connection with communications between a storage system and a host system. The RAs may be used in facilitating communications between two storage systems. The BEs may be used in connection with facilitating communications to the associated physical storage device(s) based on LSU(s) mapped thereto.</p><p id="p-0048" num="0047">In some embodiments of the storage network <b>10</b>, an amount of storage space required to maintain (i.e., keep stored) counter information for one or more of the storage systems <b>20</b><i>a</i>-<i>n </i>may be reduced without reducing a temporal granularity or tracking granularity of the counter information, for example, as will now be described.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a data flow diagram illustrating an example of a system <b>200</b> for space-efficient storage of counter data, according to embodiments of the invention. Other embodiments of a system for space-efficient storage of counter data, for example, variations of the system <b>200</b>, are possible and are intended to fall within the scope of the invention. The system <b>200</b> may be implemented using one or more components of the data storage network <b>10</b>, for example, management resources of the management module <b>22</b> and/or management resources located externally to the storage system <b>20</b><i>a</i>, for example, as part of a host system and/or management server.</p><p id="p-0050" num="0049">The system may include any of: data reduction logic <b>204</b>; data generating logic <b>210</b>; non-volatile data storage <b>207</b> including reduced counter data <b>206</b> and counter metadata <b>208</b>; other components; and any suitable combination of the foregoing. Each of the data reduction logic <b>204</b> and data generating logic <b>210</b> may be implemented using, software, firmware or hardware or any suitable combination thereof.</p><p id="p-0051" num="0050">The data reduction logic <b>204</b> may be configured to receive raw counter data <b>202</b> and generate the reduced counter data <b>206</b> and at least some of counter metadata <b>208</b>, for example, as described elsewhere herein. For example, the reduced counter data may include only determined delta values, and may not include any null delta values. The reduced counter data <b>206</b> also may include delta values determined for previous points in time, and, for each counter, at least one raw (i.e., actual) counter value from a previous point in time. As is described in more detail herein, an actual counter value may be determined for a point in time based at least in part on the actual counter value from an earlier point in time.</p><p id="p-0052" num="0051">The counter metadata <b>208</b> may include information relating to: the counters corresponding to the counter data <b>206</b>; different points in time at which counter data was collected; other information about the system <b>200</b>; and any suitable combination of the foregoing, as described in more detail elsewhere herein. At least some of the counter metadata <b>208</b> may have been generated and stored in the data storage <b>207</b> independent of the reduction of data by the data reduction logic <b>204</b>. In some embodiments, the reduced data <b>206</b> and counter metadata <b>208</b> may be stored in relational database tables, for example, in a star schema, as described in more detail elsewhere herein.</p><p id="p-0053" num="0052">The data generating logic <b>210</b> may be configured to access the reduced counter data <b>206</b> and corresponding metadata of the counter metadata and generated expanded counter data <b>212</b> therefrom, for example, as described in more details elsewhere herein. For example, if the reduced counter data <b>206</b> and counter metadata <b>208</b> are implemented as relational database tables, the data generating logic <b>210</b> may be configured to perform one or more SQL join operations or the like between the relational database tables to produce the expanded counter data <b>212</b>. The expanded counter data <b>212</b> may include, for example, the original raw counter data from which the reduced counter data <b>206</b> was created or a variation thereof.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating an example of a data schema <b>300</b> for space-efficient storage of counter data, according to embodiments of the invention. Other embodiments of a data schema for space-efficient storage of counter data, for example, variations of the data schema <b>300</b>, are possible and are intended to fall within the scope of the invention. The data schema <b>300</b> may be used to implement the reduced counter data <b>206</b> and the counter metadata <b>208</b>.</p><p id="p-0055" num="0054">In some embodiments, reduced counter data (e.g., the reduced counter data <b>206</b>) may be stored in a reduced counter data table (RCDT) <b>302</b>. The RCDT <b>302</b> may include a plurality of entries <b>316</b>, where each entry <b>316</b> represents a delta value for a counter of a storage system for raw counter data collected at a specific point in time. Each entry <b>316</b> may specify, for the delta value represented by the entry: a point in time at which the raw data was collected in a point in time column <b>304</b>; a storage system ID of the storage system of the counter in storage system column <b>306</b>; a counter ID of the counter in counter column <b>308</b>; the delta value in count delta column <b>310</b>; a difference between the point in time represented by the entry and the previous point in time from which the delta value was calculated in PTI delta column <b>312</b>; and other information in one or more columns <b>314</b>. It should be appreciated that the temporal granularity of the information stored in the point in time column <b>304</b> and the point in time delta column <b>312</b> is configurable, for example, day (i.e., date) or time of day. The one or more other information columns may specify, for example, an actual counter value for the counter and point in time specified by an entry. This field typically may be left blank, but may be predefined to be populated periodically for use in determining actual counter values of the counter for later points in time, as described in more detail elsewhere herein.</p><p id="p-0056" num="0055">The data schema <b>300</b> also may include a plurality of metadata tables <b>320</b>, <b>322</b>, <b>324</b> and <b>326</b> that store metadata corresponding to the counters for which counter data is being tracked, and may be used to implement the counter metadata <b>208</b>. The counter list metadata <b>320</b> may include information related to the counters available on a system (e.g., a data storage network <b>10</b>). The counter list metadata <b>320</b> may specify a list of counters for a given version of a codebase of a storage system or component thereof. In some embodiments, for example, when the storage system is implemented by a PowerMax system, for a particular version of a codebase and functional component thereof, counters may be organized into pages, and each counter may have a page item number within each page, and this information may be captured in the counter list metadata <b>320</b>.</p><p id="p-0057" num="0056">The storage system metadata <b>322</b> may include a plurality of entries, each entry corresponding to a storage system. For example, each entry may be keyed by a storage system ID, and additionally in some embodiments by a component thereof (e.g., director or emulator ID), and may specify information specific to the storage system (or component), including, for example, a version of the codebase (e.g., microcode) of the storage system or component.</p><p id="p-0058" num="0057">The counter collection metadata <b>324</b> may include information that specifies, for storage systems and points in time (e.g., dates), information specific to the collection of the counter data collected at the point in time, including, for example, a total number of counters for which delta values (e.g., non-zero delta values) are stored for the point in time, the previous point in time for which delta values were determined, a last point in time for which raw counter values were stored, etc. Calendar metadata <b>326</b> may store calendar information corresponding to a point in time, for example, day name, day or week, month name, timestamp, etc.</p><p id="p-0059" num="0058">It should be appreciated that in embodiments of the data schema <b>300</b> described herein, the RCDT <b>302</b> experiences a significant growth rate as counter data is collected over time relative to the rate of growth of the metadata tables <b>320</b>, <b>322</b>, <b>324</b> and <b>326</b>. This phenomenon may further conserve data storage over time compared to a schema in which the counter data and metadata are not adequately segregated so that data is redundantly stored, for example, in multiple tables, which grow at a rate commensurate with the RCDT <b>302</b> as counter data is collected. In some embodiments, the data schema <b>300</b> is implemented as a star schema in which the RCDT <b>302</b> is a fact table and the metadata tables <b>320</b>, <b>322</b>, <b>324</b> and <b>326</b> are dimension tables.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow chart illustrating an example of a method <b>400</b> of reducing counter data, according to embodiments of the invention. Other embodiments of a method of reducing counter data, for example, variations of the method <b>400</b>, are possible and are intended to fall within the scope of the invention. The method <b>400</b> may be implemented in whole or in part by the data reduction logic <b>204</b>.</p><p id="p-0061" num="0060">In a step <b>401</b>, raw counter data for a point in time may be received. The point in time may be a predefined time, for example, in accordance with a schedule, or in response to an event, for example, user input. The raw counter data may be received remotely at a management server from a storage system or received locally at a management module (e.g., the management module <b>22</b>) within the storage system (e.g., the storage system <b>20</b><i>a</i>).</p><p id="p-0062" num="0061">The raw counter data may be organized according to an extensive markup language (XML) format (or in accordance with another markup language or other format type), for example, in one or more XML files. For example, each XML file may contain a plurality of markup objects, where each object defines a counter value determined for a respective counter at the point in time. The one or more XML files may be contained in an archive file, which may be unpackaged to access the one or more XML files to process the raw counter data.</p><p id="p-0063" num="0062">In a step <b>402</b>, it may be determined whether there is a next counter value in the raw counter data to process. On a first pass through steps <b>402</b>-<b>412</b>, the answer should be affirmative, unless there are no counters defined. Determining whether there is a next counter value to process may include parsing one or more XML files unpackaged in the step <b>401</b>, including, for example, accessing a next XML object in the current XML file being processed or accessing a next XML file of counter values.</p><p id="p-0064" num="0063">If it determined in the step <b>402</b> that there is a next counter value to process, the counter value may be determined in a step <b>404</b>. For example, the next counter value may be read from an XML object extracted from an XML file.</p><p id="p-0065" num="0064">In a step <b>406</b>, a previous actual counter value for the counter&#x2014;i.e., an actual counter value for an immediately preceding point in time for which counter values were collected&#x2014;may be determined. In some embodiments, this determination may simply be made by accessing the previous counter value from data storage, for example, from the data storage <b>207</b>. For example, in some embodiments, actual counter values may be saved for each point in time until the counter data for a next point in time is processed (and differences determined), after which the actual counter values may be determined. In some embodiments, the step <b>406</b> may be performed by performance of a method <b>600</b>, described in more detail below in relation to <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0066" num="0065">In a step <b>408</b>, it may be determined whether there is a difference (delta) between the determined actual counter value for the point in time and the determined actual counter value for the previous point in time (i.e., the immediately preceding point in time for which counter values were determined). For example, the determination may be made by subtracting the actual counter value for the previous point in time from the actual counter value for the point in time.</p><p id="p-0067" num="0066">If it is determined in the step <b>408</b> that there is a difference (i.e., a non-zero value), then in a step <b>410</b>, the delta value may be stored, for example, as part of the reduced counter data <b>206</b>. Otherwise, in a step <b>412</b>, the system may refrain from storing a value for the counter. In some embodiments, if it is determined in the step <b>408</b> that there is not a difference, a null/zero value may be stored, for example, temporarily in a transitional data structure, as an intermediate step, before discarding the record of the null delta value.</p><p id="p-0068" num="0067">In some embodiments, if it is determined that the difference between the actual counter value for the point in time and the actual counter value for the previous point in time is a negative number (i.e., the actual counter value for the previous point in time is greater) this may mean that the counter was reset between points in time, in which case a delta value may not be stored in the step <b>410</b>. Rather, an indication that the delta value is invalid and/or that the counter was reset may be recorded.</p><p id="p-0069" num="0068">Following the performance of either step <b>410</b> or <b>412</b>, the method <b>400</b> may return to the step <b>402</b> to perform the steps <b>404</b>-<b>412</b> for a next counter received in the step <b>401</b> as part of the raw counter data for the point in time. If it is determined in the step <b>402</b> that there is not a next counter value in the raw counter data for the point in time, the method <b>400</b> may end.</p><p id="p-0070" num="0069">An example of the performance of the method <b>400</b> will now be described in relation to <figref idref="DRAWINGS">FIGS. <b>5</b>A-<b>5</b>C</figref>, which illustrate stages of reducing counter data, according to embodiments of the invention.</p><p id="p-0071" num="0070">Referring to <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, a table <b>500</b> includes a plurality of entries <b>501</b>, where each entry <b>501</b><i>a</i>-<i>h </i>may represent a raw counter value included in raw counter data received in the step <b>401</b>. For example, each entry <b>501</b><i>a</i>-<i>d </i>may represent a raw counter value included in raw counter data received for a first point in time, and each entry <b>501</b><i>e</i>-<i>h </i>may represent a raw counter value included in raw counter data received for a second point in time. Each entry <b>501</b><i>a</i>-<i>h </i>may specify: a point in time (e.g., date) of the counter value in column <b>502</b>, a component (e.g., emulation on a PowerMax system) of the storage system corresponding to the counter value in column <b>405</b>, a page and item number of the counter in columns <b>506</b> and <b>508</b>, respectively, and a raw counter value in column <b>510</b>. It should be appreciated that when the entries <b>501</b><i>e</i>-<i>h </i>are received, the raw data values in column <b>510</b> reflected in entries <b>501</b><i>a</i>-<i>d </i>may not be currently stored on the system according to embodiments of the invention.</p><p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> includes a table <b>520</b> illustrating an example of what delta values may result for the raw counter values in column <b>510</b> for entries <b>501</b><i>e</i>-<i>h </i>of table <b>500</b> after performance of the step <b>408</b>. The entries <b>521</b><i>e</i>-<i>h </i>of the table <b>520</b> correspond to the entries <b>501</b><i>e</i>-<i>h </i>of the table <b>500</b>. The values in column <b>529</b> of rows <b>521</b><i>e</i>-<i>h </i>are the delta values resulting from calculating the respective differences between the raw values in column <b>509</b> of entries <b>501</b><i>e</i>-<i>h </i>and entries <b>501</b><i>a</i>-<i>d</i>, respectively. Column <b>529</b> of the entry <b>521</b><i>h </i>shows the delta value for the difference between: the raw value for the counter identified by the EDS emulation, page <b>21</b>, item <b>34</b> on Jan. 8, 2021, specified in column <b>510</b> of entry <b>501</b><i>h</i>; and the raw value of such counter on Jan. 1, 2021 specified in column <b>510</b> of entry <b>501</b><i>e</i>. As shown, this delta value is a null value (=0).</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>5</b>C</figref> includes a table <b>540</b> illustrating which delta values specified in column <b>529</b> of entries <b>521</b><i>e</i>-<i>h </i>may be stored on a non-volatile medium (i.e., persisted) for later use a result of performance of the steps <b>410</b> and <b>412</b> of the method <b>400</b>. The entries <b>541</b><i>e</i>-<i>g </i>of the table <b>540</b>, each of which have a non-zero delta value specified in the column <b>529</b>, corresponding to entries <b>521</b><i>e</i>-<i>g </i>in the table <b>520</b>, respectively, and will be stored on a non-volatile medium (i.e., persisted) for later use a result of performance of the step <b>410</b>. In contrast, the entry <b>521</b><i>h </i>of the table <b>520</b> has a null delta value specified in the column <b>529</b> and will not be stored on a non-volatile medium (i.e., not persisted) for later use a result of performance of the step <b>412</b>.</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow chart illustrating an example of a method <b>600</b> of determining an actual counter value from reduced counter data for a point in time, according to embodiments of the invention. Other embodiments of a method of determining an actual counter value from reduced counter data for a point in time, for example, variations of the method <b>600</b>, are possible and are intended to fall within the scope of the invention. The method <b>600</b> may be used to execute the step <b>406</b> of the method <b>400</b>. In the context of method <b>600</b>, the point in time for which an actual counter value will be determined is referred to herein as referred to as the first point in time.</p><p id="p-0075" num="0074">In a step <b>602</b>, a next most recent point in time&#x2014;relative to the first point in time&#x2014;for which counter values were collected may be determined, for example, from counter collection metadata <b>324</b>. In a step <b>604</b>, it may be determined whether an actual counter value is specified for the counter for this next most recent point in time. This determination may be made, for example, by accessing the appropriate parameter value in counter metadata (e.g., in counter collection metadata <b>324</b>) or by accessing a value specified in a field of the entry in RCDT <b>302</b> for the counter for such point in time. For example, the RCDT <b>302</b> may have a column for specifying actual counter values, where such column typically may be left blank, but may be populated periodically (e.g., much less frequently than counter values are collected), for example, per configuration of the data reduction logic <b>204</b>. The value in such column in the RCDT <b>302</b> entry for the counter for such point in time may be accessed in the step <b>604</b>. Alternatively, the actual counter value may be stored in a location other than the RCDT <b>302</b> entry for the counter for such point in time; and the RCDT <b>302</b> entry alternatively may include a parameter value specifying whether an actual counter value exists for the counter for this point in time, and such entry may specify a reference (e.g., a pointer) to the location thereof.</p><p id="p-0076" num="0075">In some embodiments, counter metadata (e.g., counter collection metadata <b>324</b>) specifies, for each counter, a most recent point in time for which an actual counter value is stored for the counter, and the iterative performance of the steps <b>602</b> and <b>604</b> is not necessary. In some embodiments, the system may be configured so that each counter has a same most recent point in time for which an actual counter value is stored for the counter such that the determination of such most recent point in time only has to be made once for all counters.</p><p id="p-0077" num="0076">It should be appreciated that, in some cases, the last actual counter value specified for a counter may be zero (i.e., =0), for example, if an actual counter value for the counter has not been recorded since the counter was initiated or last reset.</p><p id="p-0078" num="0077">The actual counter value determined from performance of the steps <b>602</b> and <b>604</b> may be established as the running actual counter value in a step <b>606</b> and used to determine the actual counter value for the first point in time, for example, by adding the delta counter values for the counter for intervening points in time, e.g., by iterative performance of steps <b>608</b>-<b>612</b>.</p><p id="p-0079" num="0078">In a step <b>608</b>, a next point in time (from the point in time determined from steps <b>602</b> and <b>604</b>) for which counter data was collected may be determined, for example, from counter metadata. In a step <b>609</b>, it may be determined whether a delta counter value is specified for the counter for such next point in time, for example, by determining whether an RCDT <b>302</b> entry exists for the counter for such next point in time. If such delta value is specified, it is added to the running actual counter value in <b>610</b>.</p><p id="p-0080" num="0079">After performance of the step <b>610</b>, or if it is determined in the step <b>609</b> that there is not a delta counter value specified for the counter for the next point in time, it may be determined if there is a next a point in time for which counter data was collected in a step <b>612</b>. If so, the method <b>600</b> may return to the step <b>609</b>. If it is determined in the step <b>612</b> that there is not a next point in time, the tallying of the delta values of the intervening points in time may be deemed complete, and in a step <b>614</b> the running actual counter value may be established as the actual counter value for the first point in time.</p><p id="p-0081" num="0080">It may be desirable to expand reduced counter data, for example, produced from execution of the method <b>400</b>, when performing analysis on, or reporting information about, a storage system.</p><p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow chart illustrating an example of a method <b>700</b> of expanding reduced counter data for a point in time, according to embodiments of the invention. Other embodiments of a method of expanding reduced counter data for a point in time, for example, variations of the method <b>700</b>, are possible and are intended to fall within the scope of the invention. The method <b>700</b> may be performed by the data generating logic <b>210</b>.</p><p id="p-0083" num="0082">In a step <b>702</b>, the counters for a storage system, or for one or more components of a storage system for which counters are desired, may be determined. For example, a version of a codebase (e.g., microcode) for a storage system or component thereof may be determined by accessing counter metadata <b>208</b>, for example, from storage system metadata <b>322</b>, e.g., from one or more entries in a table corresponding to the ID of the storage system and/or component thereof. From the codebase version of the system and/or component, a list of counters defined for the codebase version may be determined from counter metadata <b>208</b>, for example, from counter list metadata <b>320</b>, e.g., from one or more entries in a table corresponding to the codebase version.</p><p id="p-0084" num="0083">Each counter determined in the step <b>702</b> then may be processed in steps <b>704</b>-<b>712</b>. In a step <b>704</b>, it may be determined whether there is a next counter from the list of counters to be processed, which should be affirmative for a first pass through steps <b>704</b>-<b>712</b>. If there is a next counter, then in a step <b>706</b> it may be determined whether there is a delta value specified for the counter for the point in time under consideration, for example, by accessing the RCDT <b>302</b>. If there is not such a delta value, this means that it was previously determined that there was no difference between the actual counter value for the given point in time and the actual counter value for an immediately preceding point in time, in which case a delta value may be set to 0 for the counter for the current point in time, e.g., in a data structure being used to expand the reduced counter data.</p><p id="p-0085" num="0084">In some embodiments, the performance of the steps <b>702</b>-<b>708</b> includes performing an SQL join of relational database tables of the counter data and metadata described in relation to the steps <b>702</b>-<b>708</b>, for example, an SQL join of the RCDT <b>302</b> the the counter list metadata <b>320</b>.</p><p id="p-0086" num="0085">In some embodiments, only the delta values (including zero values) for the counters for the given point in time may be desired for whatever analysis is being performed. In other embodiments, the actual values of the counters for the given point in time may be desired for analysis. In a step <b>710</b>, it may be determined whether an actual counter value is desired, which may be determined based on a parameter value set before initiating performance of the method <b>702</b>. If not, then the method <b>700</b> may return to the step <b>704</b>.</p><p id="p-0087" num="0086">If it is determined in the step <b>710</b> that an actual counter value is desired, then an actual counter value for the point in time may be determined, for example, by performance of the method <b>600</b>. After performance of the step <b>712</b>, the method <b>700</b> may return to the step <b>704</b>.</p><p id="p-0088" num="0087">If it is determined in the step <b>704</b> that there is not a next counter, then in a step <b>714</b> the counter values (delta or actual) determined by performance of the steps <b>702</b>-<b>712</b> may be used, for example, to forecast system behavior or to determine and diagnose problems.</p><p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates reduced and expanded counter data, according to embodiments of the invention. The table <b>802</b> includes a list of delta counter values that may result, for example, by determining delta values for a set of counters, but prior to removing any zero delta values. The table <b>804</b> includes a reduced list of delta values resulting from removing any zero delta values form the list in table <b>802</b>. The contents of the table <b>804</b> is an example of reduced counter data that may result from performance of the method <b>400</b> on raw counter data; whereas the table <b>802</b> may reflect a transitional state of counter data between the raw and reduced state. As can be seen by comparing tables <b>802</b> and <b>804</b>, significant savings of storage space may be realized by not persisting zero delta values.</p><p id="p-0090" num="0089">The table <b>806</b>, which has the same contents as table <b>802</b>, includes a list of delta counter values that may result, for example, by expanding the reduced counter data of table <b>804</b> in accordance with the method <b>700</b> when actual counter values are not desired.</p><p id="p-0091" num="0090">Various embodiments of the invention may be combined with each other in appropriate combinations. Additionally, in some instances, the order of steps in the flowcharts, flow diagrams and/or described flow processing may be modified, where appropriate. It should be appreciated that any of the methods described herein, including methods <b>400</b>, <b>700</b> and <b>800</b>, or parts thereof, may be implemented using one or more of the systems and/or data structures described in relation to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>3</b></figref> or components thereof. Further, various aspects of the invention may be implemented using software, firmware, hardware, any suitable combination thereof and/or other computer-implemented modules or devices having the described features and performing the described functions. Logic that when executed performs methods described herein, steps thereof or portions of such methods or steps, may be implemented as software, firmware, hardware, or any suitable combination thereof.</p><p id="p-0092" num="0091">Software implementations of embodiments of the invention may include executable code that is stored on one or more computer-readable media and executed by one or more processors. Each of the computer-readable media may be non-transitory and include a computer hard drive, ROM, RAM, flash memory, portable computer storage media such as a CD-ROM, a DVD-ROM, a flash drive, an SD card and/or other drive with, for example, a universal serial bus (USB) interface, and/or any other appropriate tangible or non-transitory computer-readable medium or computer memory on which executable code may be stored and executed by a processor. Embodiments of the invention may be used in connection with any appropriate operating system.</p><p id="p-0093" num="0092">As used herein, an element or operation recited in the singular and preceded with the word &#x201c;a&#x201d; or &#x201c;an&#x201d; should be understood as not excluding plural elements or operations, unless such exclusion is explicitly recited. References to &#x201c;one&#x201d; embodiment or implementation of the present disclosure are not intended to be interpreted as excluding the existence of additional embodiments that also incorporate the recited features. Furthermore, a description or recitation in the general form of &#x201c;at least one of [a], [b] or [c],&#x201d; or equivalent thereof, should be generally construed to include [a] alone, [b] alone, [c] alone, or any combination of [a], [b] and [c]. In addition, use of a an ordinal term, e.g., &#x201c;first,&#x201d; &#x201c;second&#x201d; or the like, to qualify a term for an item having multiple instances of the same name does not necessarily indicate a priority, precedence or temporal order between the instances unless otherwise indicated, but rather such ordinal terms may be used merely to distinguish between the separate instances.</p><p id="p-0094" num="0093">Other embodiments of the invention will be apparent to those skilled in the art from a consideration of the specification or practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only, with the true scope and spirit of the invention being indicated by the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>receiving counter information for a first point in time for a plurality of counters on a storage system, the counter information including a first counter value specifying a value of a first counter at the first point in time;</claim-text><claim-text>obtaining a second counter value specifying a value of the first counter at a second point in time before the first point in time;</claim-text><claim-text>determining whether there is a difference between the first counter value and the second counter value;</claim-text><claim-text>if it is determined that there is a difference, persisting information associating the first counter with the difference for the first point in time; and</claim-text><claim-text>refraining from persisting the first counter value.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>if it is determined that there is not any difference between the first counter value and the second counter value, refraining from storing any value for the first counter for the first point in time.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>storing metadata reflecting that the counter information was generated for the first point in time, including counter information for the first counter;</claim-text><claim-text>after the first point in time, determining that there was not a difference between the first counter value and the second counter value based on the metadata.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:<claim-text>after the first point in time, generating the first counter value based on the determination that there was not a difference between the first counter value and the second counter value.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>storing metadata reflecting that the counter information was generated for the first point in time, including counter information for the first counter; and</claim-text><claim-text>at a point in time after the first point in time, generating the first counter value from the metadata and the information associating the first counter with the difference for the first point in time.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the metadata is stored in at least a first relational database table,<claim-text>wherein difference information determined from the counter information, including the information associating the first counter with the difference for the first point in time, is stored in at least a second relational database table, and</claim-text><claim-text>wherein generating the first counter value includes executing an SQL join operation between the at least first relational database table and the at least second relational database table.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first counter counts occurrences of execution of a specific line of code on the storage system.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A storage system comprising executable logic that implements a method including:<claim-text>receiving counter information for a first point in time for a plurality of counters on a storage system, the counter information including a first counter value specifying a value of a first counter at the first point in time;</claim-text><claim-text>obtaining a second counter value specifying a value of the first counter at a second point in time before the first point in time;</claim-text><claim-text>determining whether there is a difference between the first counter value and the second counter value;</claim-text><claim-text>if it is determined that there is a difference, persisting information associating the first counter with the difference for the first point in time; and</claim-text><claim-text>refraining from persisting the first counter value.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the method further comprises:<claim-text>if it is determined that there is not any difference between the first counter value and the second counter value, refraining from storing any value for the first counter for the first point in time.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the method further comprises:<claim-text>storing metadata reflecting that the counter information was generated for the first point in time, including counter information for the first counter;</claim-text><claim-text>after the first point in time, determining that there was not a difference between the first counter value and the second counter value based on the metadata.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the method further comprises:<claim-text>after the first point in time, generating the first counter value based on the determination that there was not a difference between the first counter value and the second counter value.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the method further comprises:<claim-text>storing metadata reflecting that the counter information was generated for the first point in time, including counter information for the first counter; and</claim-text><claim-text>at a point in time after the first point in time, generating the first counter value from the metadata and the information associating the first counter with the difference for the first point in time.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the metadata is stored in at least a first relational database table,<claim-text>wherein difference information determined from the counter information, including the information associating the first counter with the difference for the first point in time, is stored in at least a second relational database table, and</claim-text><claim-text>wherein generating the first counter value includes executing an SQL join operation between the at least first relational database table and the at least second relational database table.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the first counter counts occurrences of execution of a specific line of code on the storage system.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. Computer-readable media having software stored thereon, the software comprising:<claim-text>executable code that controls receiving counter information for a first point in time for a plurality of counters on a storage system, the counter information including a first counter value specifying a value of a first counter at the first point in time;</claim-text><claim-text>executable code that controls obtaining a second counter value specifying a value of the first counter at a second point in time before the first point in time;</claim-text><claim-text>executable code that controls determining whether there is a difference between the first counter value and the second counter value;</claim-text><claim-text>executable code that controls, if it is determined that there is a difference, persisting information associating the first counter with the difference for the first point in time; and</claim-text><claim-text>executable code that controls refraining from persisting the first counter value.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer-readable media of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the software further comprises:<claim-text>executable code that controls, if it is determined that there is not any difference between the first counter value and the second counter value, refraining from storing any value for the first counter for the first point in time.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer-readable media of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the software further comprises:<claim-text>executable code that controls storing metadata reflecting that the counter information was generated for the first point in time, including counter information for the first counter;</claim-text><claim-text>executable code that controls, after the first point in time, determining that there was not a difference between the first counter value and the second counter value based on the metadata.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer-readable media of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the software further comprises:<claim-text>executable code that controls, after the first point in time, generating the first counter value based on the determination that there was not a difference between the first counter value and the second counter value.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer-readable media of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the software further comprises:<claim-text>executable code that controls storing metadata reflecting that the counter information was generated for the first point in time, including counter information for the first counter; and</claim-text><claim-text>executable code that controls, at a point in time after the first point in time, generating the first counter value from the metadata and the information associating the first counter with the difference for the first point in time.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer-readable media of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the metadata is stored in at least a first relational database table,<claim-text>wherein difference information determined from the counter information, including the information associating the first counter with the difference for the first point in time, is stored in at least a second relational database table, and</claim-text><claim-text>wherein generating the first counter value includes executing an SQL join operation between the at least first relational database table and the at least second relational database table.</claim-text></claim-text></claim></claims></us-patent-application>