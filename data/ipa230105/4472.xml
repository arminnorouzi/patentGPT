<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004473A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004473</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17780339</doc-number><date>20201126</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>GB</country><doc-number>1917654.4</doc-number><date>20191203</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>34</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>07</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>3419</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>0754</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">DETECTING ANOMALOUS LATENT COMMUNICATIONS IN AN INTEGRATED CIRCUIT CHIP</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>Siemens Industry Software Inc.</orgname><address><city>Plano</city><state>TX</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Panesar</last-name><first-name>Gajinder</first-name><address><city>Cambridge</city><country>GB</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Hlond</last-name><first-name>Marcin</first-name><address><city>Cambridge</city><country>GB</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/EP2020/083478</doc-number><date>20201126</date></document-id><us-371c12-date><date>20220526</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method of detecting anomalous latencies in communications between components on an integrated circuit (IC) chip. The method includes: (i) monitoring communications between a first component of the IC chip and other components of the IC chip, each communication comprising a command sent from the first component to another component, and a response received by the first component from that other component, the monitoring comprising: measuring the number of communications in each of a series of monitored time windows, and measuring the latency of each communication in the series of monitored time windows; (ii) calculating a maximum tolerable latency for each operational time window of the first component from the number of communications in that operational time window, an available stall time of the first component in that operational time window, and a latency penalty factor for that operational time window; and (iii) determining a measured latency to be anomalous if the measured latency is greater than the maximum tolerable latency.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="141.82mm" wi="125.48mm" file="US20230004473A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="57.66mm" wi="79.08mm" file="US20230004473A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="194.06mm" wi="144.27mm" orientation="landscape" file="US20230004473A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="155.45mm" wi="127.51mm" file="US20230004473A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="219.03mm" wi="91.44mm" orientation="landscape" file="US20230004473A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="121.75mm" wi="130.22mm" file="US20230004473A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED CASE</heading><p id="p-0002" num="0001">The present patent document is a &#xa7; 371 nationalization of PCT Application Serial Number PCT/EP2020/083478, filed Nov. 26, 2020, which claims priority to GB 1917654.4, filed Dec. 3, 2019, which are hereby incorporated by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">The present embodiments relate to analysing communications between components within a System-on-Chip (SoC) or multi-chip module (MCM).</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">In the past, an embedded system which had multiple core devices (processors, memories etc.) would have been incorporated onto a Printed Circuit Board (PCB) and connected on the PCB via buses. Traffic in the embedded system was conveyed over these buses. This arrangement was convenient for monitoring the core devices, because monitoring tools such as oscilloscopes and logic analysers could be attached to the PCB's buses allowing direct access to the core devices.</p><p id="p-0005" num="0004">Market demand for smaller products coupled with advances in semiconductor technology has led to the development of System-on-Chip (SoC) devices. In a SoC, the multiple core devices of an embedded system are integrated onto a single chip. In a SoC, the traffic in the embedded system is conveyed over internal buses, thus connection of monitoring tools directly to the system bus is no longer possible. The resulting reduced access coupled with an increasing quantity of data being transported around the chip (due to developments of SoC technology leading to integration of multiple processing cores and higher internal clocking frequencies), has reduced the ability of external monitoring tools to monitor the system for security breaches, bugs, and safety concerns within the timescales demanded by the industry. Additionally, when multiple core devices are embedded onto the same single chip, the behaviour of each individual core device differs from its behaviour in isolation due to its interaction with the other core devices as well as real time events such as triggers and alerts.</p><p id="p-0006" num="0005">Thus, the development of SoC devices required associated development in monitoring technology, which lead to the integration of some monitoring functionality onto the SoC. It is now known for monitoring circuitry within the SoC to trace the output of processors executing programs on core devices (such as CPUs). The trace data is generally output for analysis off-chip.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0007" num="0006">It would be desirable to generate more detailed analysis of the impact on the core devices of competition for shared resources, such as shared use of the communication circuitry for communicating between the core devices.</p><p id="p-0008" num="0007">According to a first aspect, there is provided a method of detecting anomalous latencies in communications between components on an integrated circuit (IC) chip, the method comprising: (i) monitoring communications between a first component of the IC chip and other components of the IC chip, each communication including a command sent from the first component to another component, and a response received by the first component from that other component, the monitoring including: measuring the number of communications in each of a series of monitored time windows, and measuring the latency of each communication in the series of monitored time windows; (ii) calculating a maximum tolerable latency for each operational time window of the first component from the number of communications in that operational time window, an available stall time of the first component in that operational time window, and a latency penalty factor for that operational time window; and (iii) determining a measured latency to be anomalous if the measured latency is greater than the maximum tolerable latency.</p><p id="p-0009" num="0008">The latency penalty factor for an operational time window may be the average minimum number of bytes that the first component can tolerate between latent responses in that operational time window.</p><p id="p-0010" num="0009">The maximum tolerable latency of an operational time window may be calculated according to: MTL<sub>i</sub>=TS<sub>i</sub>*BP<sub>i</sub>/B<sub>i</sub>, where MTL<sub>i </sub>is the maximum tolerable latency of operational time window i, TS<sub>i </sub>is the available stall time of the first component in operational time window i, BP<sub>i </sub>is the latency penalty factor in operational time window i, and B<sub>i </sub>is the number of bytes in the operational time window i.</p><p id="p-0011" num="0010">Act (iii) may include: determining the maximum latency of the measured latencies in each of the series of monitored time windows; comparing the maximum latency to the maximum tolerable latency; and determining that maximum latency to be anomalous if the maximum latency is greater than the maximum tolerable latency.</p><p id="p-0012" num="0011">The method may further include calculating the available stall time of the first component in each operational time window from the operational time window length and a reserved processing time, the reserved processing time being that used by the first component to perform computations.</p><p id="p-0013" num="0012">The available stall time of the first component in each operational time window may be calculated according to: TS<sub>i</sub>=WL<sub>i</sub>*(1&#x2212;RS<sub>i</sub>), where TS<sub>i </sub>is the available stall time of the first component in an operational time window i, WL<sub>i </sub>is the length of the operational time window i, and RS<sub>i </sub>is the proportion of time reserved for the first component to perform computations.</p><p id="p-0014" num="0013">The method may further include determining the bandwidth of each of the series of monitored time windows from the measured number of communications in that monitored time window.</p><p id="p-0015" num="0014">The method may further include determining a set of bandwidths and latencies for each of a series of operational time windows of the first component from the bandwidths and the measured latencies of the series of monitored time windows of act (i).</p><p id="p-0016" num="0015">Each operational time window may be greater than each monitored time window.</p><p id="p-0017" num="0016">The method may include aggregating the bandwidths and measured latencies of the series of monitored time windows of act (i) to form the set of bandwidths and latencies for each of the series of operational time windows of the first component.</p><p id="p-0018" num="0017">The latencies of each of the series of operational time windows of the first component may be maximum latencies of the series of monitored time windows.</p><p id="p-0019" num="0018">The method may further include correlating the bandwidth and measured latency for each of the series of operational time windows.</p><p id="p-0020" num="0019">The correlation may include correlating the bandwidth and maximum latency for each of the series of operational time windows.</p><p id="p-0021" num="0020">The method may further include monitoring communications between each component of a set of components on the IC chip and other components of the IC chip, the monitoring of each component of the set being according to act (i).</p><p id="p-0022" num="0021">The method may further include, for each component of the set, determining the bandwidth of each of the series of monitored time windows from the measured number of communications in that monitored time window.</p><p id="p-0023" num="0022">The method may further include, for each component of the set of components, correlating the bandwidth and measured latency for each of the series of operational time windows.</p><p id="p-0024" num="0023">The correlation may include correlating the bandwidth and maximum latency for each of the series of operational time windows.</p><p id="p-0025" num="0024">The correlation may include correlating the bandwidth and maximum latency of operational time windows which are shifted in time with respect to each other.</p><p id="p-0026" num="0025">The method may further include comparing the correlations of different components of the set of components.</p><p id="p-0027" num="0026">According to a second aspect, there is provided an integrated circuit (IC) chip including: system circuitry including components; monitoring circuitry configured to monitor communications between the components of the system circuitry, each communication including a command sent from a first component to another component, and a response received from the other component by the first component, the monitoring circuitry including: a counter configured to measure the number of communications in each of a series of monitored time windows; a latency timer configured to measure the time taken between a command being sent from the first component to another component, and a response being received by the first component; and a processor configured to: calculate a maximum tolerable latency for each operational time window of the first component from the number of communications in that operational time window, an available stall time of the first component in that operational time window, and a latency penalty factor for that operational time window; and determine a measured latency to be anomalous if the measured latency is greater than the maximum tolerable latency.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE FIGURES</heading><p id="p-0028" num="0027">The present invention will now be described by way of example with reference to the accompanying drawings. In the drawings:</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic drawing of an exemplary integrated circuit chip device;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic drawing of an exemplary monitoring network and system circuitry on an integrated circuit chip device;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart of a method of detecting anomalous latencies in communications between components of a SoC according to one embodiment:</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates examples of those measured latencies detected to be anomalous in the communications of three CPUs; and</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart of a method of correlating bandwidth and latency for components of the SoC according to one embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0034" num="0033">The following disclosure describes a monitoring architecture suitable for implementation on an integrated circuit chip. The integrated circuit chip may be a SoC or a multi-chip module (MCM).</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref> are schematic diagrams of exemplary system architectures, and components within the system architectures. These figures present the structures in terms of functional blocks. Some functional blocks for carrying out functions well known in the art have in places been omitted from these figures. <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>5</b></figref> are flowcharts illustrating methods of analysing statistical data measured by the monitoring circuitry. Each flowchart depicts an order in which the method of that flowchart can be performed. However, the flowcharts are not intended to restrict the described methods to being implemented in the orders depicted. The acts of the methods may be carried out in alternative orders to those depicted in the flowcharts.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates the general structure of an exemplary monitoring network for a SoC <b>100</b>. Monitoring circuitry <b>101</b> is arranged to monitor system circuitry <b>102</b>. For example, for the purposes of detecting improper operation of the core devices relating to safety or security concerns.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates exemplary system circuitry including core devices <b>201</b>, <b>202</b> connected via a SoC interconnect <b>203</b>. Core devices <b>201</b><i>a</i>, <b>201</b><i>b</i>, <b>201</b><i>c </i>are master devices. Core devices <b>202</b><i>a</i>, <b>202</b><i>b</i>, <b>202</b><i>c </i>are slave devices. Any number of core devices can be suitably integrated into the system circuitry, as indicated by the numbering of the master and slave devices as <b>1</b>, <b>2</b>, . . . N on <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The SoC interconnect <b>203</b> forms a communication backbone for the SoC, through which the master and slave devices communicate with each other. These communications are bi-directional.</p><p id="p-0038" num="0037">Master devices are those which initiate traffic, such as read/write requests in a network. Examples of master devices are processors such as a DSP (digital signal processor), video processor, applications processor, CPU (central processor unit), and GPU (graphics processor unit). Any programmable processor may be a master device. Other examples of master devices are those with DMA (direct memory access) capability, such as conventional DMAs for moving data from one location to another, autonomous coprocessors with DMA capability (such as an encryption engine), and peripherals with DMA capability (such as an Ethernet controller).</p><p id="p-0039" num="0038">Slave devices are those which respond to the commands of the master devices. Examples of slave devices are on-chip memories, memory controllers for off-chip memories (such as DRAM), and peripheral units.</p><p id="p-0040" num="0039">The topology of the SoC interconnect <b>203</b> is SoC dependent. For example, it may include any one or combination of the following types of network to transport communications around the system circuitry: a bus network, a ring network, a tree network, or a mesh network.</p><p id="p-0041" num="0040">The monitoring circuitry <b>101</b> includes monitoring units <b>204</b><i>a</i>, <b>204</b><i>b </i>connected to a communicator <b>206</b> via a monitoring interconnect <b>205</b>.</p><p id="p-0042" num="0041">Any number of monitoring units can be suitably integrated into the monitoring circuitry. Each monitoring unit is connected to a communication link between a master device and a slave device. This connection may be between a master device and the SoC interconnect, for example at the interface between the master device and the SoC interconnect. The connection may be between the SoC interconnect and a slave device, for example at the interface between the slave device and the SoC interconnect. Each monitoring unit may be connected to a single communication link. Alternatively, one or more monitoring units of the monitoring circuitry <b>101</b> may be connected to a plurality of communication links. The monitoring units <b>204</b> monitor the operation of the core devices by monitoring the communications on the monitored communication links. Optionally, the monitoring units may also be able to manipulate the operation of the core devices that they are monitoring.</p><p id="p-0043" num="0042">The communicator <b>206</b> may be an interface for communicating with entities off-chip. For example, monitoring circuitry <b>101</b> may communicate with an off-chip analyser via communicator <b>206</b>. Communicator <b>206</b> may additionally or alternatively be configured to communicate with other entities on-chip. For example, monitoring circuitry <b>101</b> may communicate with an on-chip analyser via communicator <b>206</b>. Although <figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates one communicator <b>206</b>, any number of communicators can be integrated onto the SoC. The communicators implemented are chosen in dependence on the type of connections that are to be made. Exemplary communicators include: JTAG, parallel trace input/output, and Aurora based high-speed serial interface; and reuse of system interfaces such as USB, Ethernet, RS232, PCIe and CAN.</p><p id="p-0044" num="0043">The topology of the monitoring interconnect <b>205</b> may include any one or combination of the following types of network to transport communications around the monitoring circuitry: a bus network, a ring network, a tree network, or a mesh network. The communication links between the monitoring units <b>204</b> and the communicator <b>206</b> are bi-directional.</p><p id="p-0045" num="0044">The bandwidth demands of the SoC interconnect <b>203</b> by a master device <b>201</b> and the latency expectations of responses provided to its commands by the SoC interconnect <b>203</b> vary from master device to master device. For example, the bandwidth generated from memory access by a CPU may not be high, however low latency on the read data provided in response to the CPU's requests is generally required. This is especially the case in response to cache miss accesses. Conversely, high bandwidth may be generated from DMA memory accesses, however higher latency on the read data provided in response may be tolerated.</p><p id="p-0046" num="0045">In a complex SoC, there can be hundreds or thousands of master devices and slave devices. Each master device has its own traffic profile. As a result, each master device has its own bandwidth expectations, which may be different globally as opposed to per data flow. Each master device also has its own expectations as to how much latency it will tolerate, which may be different globally as opposed to per data flow. Both the bandwidth and latency expectations of a master device may vary depending on the workload that the SoC has to support.</p><p id="p-0047" num="0046">The SoC interconnect <b>203</b> is a finite resource. Data flows originating from different master devices compete for interconnect resources, such as internal buffers. This results in complex interdependencies between traffic generated by different master devices. The greater the number of active master devices on the SoC, the greater the complexity of the interdependencies.</p><p id="p-0048" num="0047">Each master device communicates with a slave device as follows with respect to a read request: the master device issues a read request which the slave device receives, and in response the slave device issues a read result which the master device receives. The time taken between the request being issued by the master device and the response being received by the master device is the latency of the communication. Similarly, each master device communicates with a slave device as follows with respect to a write request: the master device issues a write request which the slave device receives, the slave device consumes the data (for example, by writing the data to memory), and the slave device issues a write response which the master device receives. The time taken between the write request being issued by the master device and the response being received by the master device is the latency of the write communication.</p><p id="p-0049" num="0048">The master device may be arranged such that the read results are not required by it immediately after the read request is issued. For example, the master device may be arranged to execute other instructions which are not dependent on the data in the read response in between issuing the read request and requiring the read response for an operation. Thus, a degree of latency of each communication can be tolerated by the master device. This is because that latency is effectively hidden to the master device behind other activity which does not rely on the read response of that communication. However, if the latency is long enough, then the master device will reach a point in its instruction execution where it cannot progress until it has received the read response. At this point, the master device has to wait for the read result before performing any further actions. For example, a CPU is unable to progress an instruction stream execution without receiving a read result when the next instruction to execute needs the data in that read result as an input. As another example, a CPU pipeline is unable to continue instruction execution when it is waiting for an instruction fetch. As another example, a DMA engine performing a copy is unable to continue operation without receiving a read result because it needs the data in that read result before the next write can be performed. The waiting time between the master not being able to progress any further operations and receiving the read result so that it can progress further operations is known as stall time.</p><p id="p-0050" num="0049">Ideally, a master device does not have to wait for read results at all: they are always available when needed. In other words, the stall time is zero. This can be achieved by the communications having a latency between a minimum latency value (determined by the maximum speed of the communication with the slave device and the minimum time taken by the slave device to produce the read result) and a maximum no-stall latency of the master device.</p><p id="p-0051" num="0050">However, as the latencies of the communications increase, some will be above the maximum no-stall latency. At this point, the master device will start to experience stall time. As the latencies increase, the stall time increases. The amount of stall time that the master device can tolerate depends on the task that it is performing, how fast it can perform that task, and the processing deadlines that it needs to honour. The tolerable stall time of the master device varies depending on its workload. As its workload increases, its ability to tolerate stall time decreases.</p><p id="p-0052" num="0051">As described above, the monitoring units <b>204</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> monitor the communications between the master <b>201</b> and slave <b>202</b> devices. The monitoring units may gather statistics from the communications that they monitor. The statistics gathered and the time window over which this is done is configurable. For example, each monitoring unit <b>204</b> may receive a configuration command(s) from an on-chip or off-chip analyser commanding the monitoring unit to monitor specific communication parameters. The analyser may also specify the time window over which the parameters are to be monitored. The analyser may also specify when the collected data is to be reported to the analyser. Typically, the analyser requires the collected data to be reported periodically.</p><p id="p-0053" num="0052">Thus, a monitoring unit <b>204</b> may be configured to monitor the communications of its connected component (be that a master device <b>201</b> or a slave device <b>202</b>) over a series of monitored time windows. The length of each monitored time window may be specified by the analyser as described above. The monitored time windows may be non-overlapping. For example, the monitored time windows may be contiguous. Alternatively, the monitored time windows may be overlapping. The monitoring unit <b>204</b> may measure the number of communications in each monitored time window. For example, if the monitoring unit is monitoring a master device, it may measure the number of command requests sent by the master device and the number of responses received by the master device. If on the other hand, the monitoring unit is monitoring a slave device, it may measure the number of command requests sent to the slave device, and the number of responses sent by the slave device. The monitoring unit <b>204</b> may measure the latency of each communication in the monitored time window.</p><p id="p-0054" num="0053">The bandwidth in a monitored time window may be derived from the number of communications in the monitored time window, and the length of the monitored time window. The maximum latency in the monitored time window is the highest latency of the measured latencies. The bandwidth and maximum latency of each monitored time window may be determined by the monitoring unit. The monitoring unit may then report the following to the analyser: (i) the bandwidth of the monitored time window, (ii) the maximum latency in the monitored time window, optionally (iii) the number of communications in the monitored time window, and optionally (iv) the measured latencies in the monitored time window. Alternatively, the bandwidth and/or maximum latency of each monitored time window may be determined by the analyser. If both the bandwidth and maximum latency are determined by the analyser, then the monitoring unit may report the following to the analyser: (i) the number of communications in the monitored time window, and (ii) the measured latencies in the monitored time window. If the bandwidth is determined by the analyser, and the maximum latency is determined by the monitoring unit, then the monitoring unit may report the following to the analyser: (i) the number of communications in the monitored time window, (ii) the maximum latency in the monitored time window, and optionally (iii) the measured latencies in the monitored time window.</p><p id="p-0055" num="0054">The measured data over a series of monitored time windows can then be used in combination with other parameters of the component being monitored in further statistical analysis. In the methods described below with reference to <figref idref="DRAWINGS">FIGS. <b>3</b> to <b>5</b></figref>, two parameters of each component are used.</p><p id="p-0056" num="0055">The first parameter is the operational time window of the component. Each component has a natural operational time window length. For example, for a CPU which performs periodic activity with limited time available for each iteration, the operational time window of that component would be the time of each iteration of the periodic activity. As another example, for a component which is required to communicate according to serial network slots, the operational time window of that component would be defined by the length of those network time slots. The operational time window length of a component is likely to be different to the monitored time window length(s) used by the monitoring unit(s) which is monitoring that component. Typically, the operational time window of the component is longer than the monitored time window. For example, the length of an operational time window may be between 10 ms and 100 ms. Whereas, the length of a monitored time window may be between 0.5 &#x3bc;s and 10 &#x3bc;s. The methods described below analyse data over a series of operational time windows of a component.</p><p id="p-0057" num="0056">The second parameter is the latency penalty factor for an operational time window of the component. The latency penalty factor is the average minimum number of bytes that the component can tolerate between latent responses in the operational time window. Latent responses are those which cause the component to stall (in at least the operation which is dependent on the content of the latent response). The latency penalty factor depends on the workload of the component and on the concurrency available to the component. If the component is able to concurrently process several instructions then, subject to its overall workload, it may have more capacity to tolerate latency in its communications.</p><p id="p-0058" num="0057">These two parameters of the component are predetermined. For example, they may be known from knowledge of the system architecture. For example, a CPU may be known to perform periodic operations with a known period. The parameters may be determined empirically from observing the behaviour of the component. The parameters may be determined by a process of repetitive sweeping, in which several parameter values are tested, and the analysis of known latency anomalies assessed for each of the tested parameter values. The parameter values which result in the latency anomalies being best detected are then selected for use.</p><p id="p-0059" num="0058">A method will now be described for detecting anomalous latencies in communications between components on an integrated circuit chip, such as the one shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Latencies are identified as anomalous if they are longer than a maximum tolerable latency for that operational time window of the component. The maximum tolerable latency is different to the maximum no-stall latency described above. The maximum no-stall latency is the length of latency in a communication which the component can endure without its operation being interrupted at all. In other words, the maximum no-stall latency is the maximum latency that the component can be exposed to whilst having no stall time. On the other hand, the maximum tolerable latency is the length of latency the component can endure in an operational time window whilst still getting all of its required tasks done in the required time. Thus, the maximum tolerable latency allows for some stall time of the component, as long as this stall time can be accommodated whilst also completing the operations required of the component in the operational time window.</p><p id="p-0060" num="0059">The method for detecting anomalous latencies in communications of a component on a SoC will now be described with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In an exemplary implementation, the component is a master device <b>201</b> which communicates with slave devices <b>202</b> of the SoC by sending commands to those components, and receiving a response for each command that it sends. At act <b>301</b>, a monitoring unit <b>204</b> monitors the communications of the component by measuring (i) the number of communications in each of a series of monitored time windows, and (ii) the latency of each communication in the series of monitored time windows. For example, the monitoring unit <b>204</b> may include a counter configured to increment each time a new communication is detected. The monitoring unit <b>204</b> may include a latency timer configured to measure the time between a command being sent from the component and a response to that command being received by the component.</p><p id="p-0061" num="0060">The method then proceeds to act <b>302</b>. At act <b>302</b>, a processor calculates a maximum tolerable latency for each operational time window of the component. To do this, the processor determines the number of communications in the operational time window from the number of communications measured in the series of monitored time windows at act <b>301</b>. For example, the processor may retrieve the operational time window length, determine the number of monitored time windows which fit into an operational time window. The processor then determines which set of monitored time windows maps onto each operational time window. The processor sums up the number of communications in that set of monitored time windows to yield the number of communications in the operational time window.</p><p id="p-0062" num="0061">The processor uses as inputs to the calculation of act <b>302</b>: the number of communications in the series of monitored time windows obtained at act <b>301</b>, the available stall time of the component in the operational time window, and the latency penalty factor for that operational time window. The maximum tolerable latency for an operational time window of a component may be determined by:</p><p id="p-0063" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MTL<sub>i</sub>=TS<sub>i</sub><i>*BP</i><sub>i</sub><i>/B</i><sub>i</sub>&#x2003;&#x2003;(equation 1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0064" num="0000">where MTL<sub>i </sub>is the maximum tolerable latency of operational time window i, TS<sub>i </sub>is the available stall time of the component in operational time window i, BP<sub>i </sub>is the latency penalty factor in operational time window i, and B<sub>i </sub>is the number of bytes in the operational time window i.</p><p id="p-0065" num="0062">The number of latency penalty events which can be tolerated by the component in an operational time window is given by:</p><p id="p-0066" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>PE<i>i=B</i><sub>i</sub><i>/BP</i><sub>i</sub>&#x2003;&#x2003;(equation 2)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0067" num="0063">Thus, in other words, the maximum tolerable latency of an operational time window i can be expressed as:</p><p id="p-0068" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MTL<sub>i</sub>=TS<sub>i</sub>/PE<i>i</i>&#x2003;&#x2003;(equation 3)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0069" num="0064">Prior to determining the maximum tolerable latency at act <b>302</b>, the processor may first calculate the available stall time of the component in each operational time window. This is calculated from the length of the operational time window and a reserved processing time. The reserved processing time is the time needed in each operational time window for the processor to perform computations, including processing the responses received to the commands that the component sent out. The available stall time for an operational time window of a component may be determined by:</p><p id="p-0070" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>TS<sub>i</sub>=WL<sub>i</sub>*(1&#x2212;<i>RS</i><sub>i</sub>)&#x2003;&#x2003;(equation 4)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0071" num="0000">where TS<sub>i </sub>is the available stall time of the component in an operational time window i, WL<sub>i </sub>is the length of the operational time window i, and RS<sub>i </sub>is the proportion of time reserved for the component to perform computations such as processing received responses.</p><p id="p-0072" num="0065">Having determined the maximum tolerable latency for the operational time window of the component, the processor then moves on to act <b>306</b>. At act <b>306</b>, the processor compares the measured latency to the maximum tolerable latency. If the measured latency is greater than the maximum tolerable latency, then at act <b>307</b>, the processor determines that measured latency to be anomalous. If the measured latency is less than the maximum tolerable latency, then at act <b>308</b>, the processor determines that measured latency not to be anomalous.</p><p id="p-0073" num="0066">At act <b>306</b>, the processor may compare each of the latencies measured at act <b>301</b> to the maximum tolerable latency. Alternatively, the processor may compare a subset of the measured latencies to the maximum tolerable latency at act <b>301</b>. For example, each of the series of monitored time windows, the maximum latency of the measured latencies in that monitored time window may be the only measured latency of that monitored time window which the processor compares to the maximum tolerable latency at act <b>306</b>. For each operational time window, the processor may aggregate the maximum latencies of the set of monitored time windows that maps onto that operational time window, to yield a set of maximum latencies of that operational time window. Those are then the maximum latencies that are compared to the maximum tolerable latency in act <b>306</b> for the iteration of the method of <figref idref="DRAWINGS">FIG. <b>3</b></figref> for that operational time window.</p><p id="p-0074" num="0067">Following the detection of latent communications as anomalous or not at acts <b>307</b> and <b>308</b>, the control loop returns to act <b>301</b>, where the processor performs the method of <figref idref="DRAWINGS">FIG. <b>3</b></figref> for the next operational time window. Thus, each iteration of <figref idref="DRAWINGS">FIG. <b>3</b></figref> is performed on a new operational time window. Each operational time window may be non-overlapping with the previous operational time window. For example, the operational time windows may be contiguous. Alternatively, the operational time windows may be overlapping.</p><p id="p-0075" num="0068">As mentioned above, acts <b>302</b> to <b>308</b> may be performed at the monitoring unit, at an on-chip analyser, or at an off-chip analyser. Furthermore, as mentioned above, the maximum latency of the measured latencies in a series of monitored time windows may be determined at the monitoring unit or at the analyser.</p><p id="p-0076" num="0069"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates measured latencies for each of three CPUs. The measured latencies vary between a floor level (of about 400 ns) to up to about 1000 ns. Higher latencies are caused by competition from other bus masters. Those measured latencies which are detected as anomalous by the method of <figref idref="DRAWINGS">FIG. <b>3</b></figref> are shown in grey. The measured latency profile is similar for all three CPUs. However, the number of measured latencies that are detected to be anomalous is very different, from none for CPU<b>0</b>, to some of them for CPU<b>1</b>, to most of them for CPU<b>2</b>. This is because CPU<b>0</b> has little communication activity, and thus a higher maximum tolerable latency. Whereas CPU<b>2</b> is much busier with a lot of communication activity, and thus a lower maximum tolerable latency.</p><p id="p-0077" num="0070">The method described with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref> identifies long latencies in communications when it is problematic to the component. In other words, it identifies latencies which cause the component to not be able to complete its operations in its required timeframes. In operational time windows full of traffic, even moderate latencies are problematic, and hence are flagged by this method. Conversely, in operational time windows with little traffic, occasional long latencies are not problematic to the operation of the component, and hence are not flagged by this method.</p><p id="p-0078" num="0071">A method for comparing different components of the SoC by analysing the parameters measured by the monitoring units will now be described with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0079" num="0072">At act <b>501</b>, the bandwidth of each monitored time window is determined. This bandwidth can be derived from the number of communications in the monitored time window <b>502</b>, and the length of the monitored time window.</p><p id="p-0080" num="0073">At act <b>503</b>, the processor determines a set of bandwidths and latencies <b>504</b> for each of a series of operational time windows of the component. For each operational time window, the processor may aggregate the bandwidths of the set of monitored time windows that maps onto that operational time window, to yield a set of bandwidths of that operational time window. For each operational time window, the processor may aggregate the measured latencies of the set of monitored time windows that maps onto that operational time window, to yield a set of measured latencies of that operational time window.</p><p id="p-0081" num="0074">The processor may determine the set of latencies for each series of operational time windows of a component to be a subset of the measured latencies of the corresponding monitored time windows. For example, for each operational time window, the processor may aggregate the maximum latencies of the set of monitored time windows that maps onto that operational time window, to yield a set of maximum latencies of that operational time window.</p><p id="p-0082" num="0075">The processor then moves onto act <b>505</b>. At act <b>505</b>, the processor correlates the set of bandwidths and latencies for each of the series of operational time windows of the component. The processor may correlate sets of bandwidths and latencies for operational time windows which are shifted in time with respect to each other.</p><p id="p-0083" num="0076">The method acts <b>501</b> to <b>505</b> are performed for each component to be compared. At act <b>506</b>, the processor then compares the correlations of the different components.</p><p id="p-0084" num="0077">Comparing the correlation between bandwidth and latency for all the components aids in understanding which data flows affect one another. It therefore aids understanding of how the behaviour of the SoC as a whole is affected by the communication circuitry <b>203</b>. By performing correlations on a series of operational time windows shifted with respect to each other, dependencies that are far apart in time may be detected.</p><p id="p-0085" num="0078">The characteristics of how much bandwidth a component of an SoC needs and how much latency it will tolerate are not fully known at the time of SoC design. They also vary during use. The methods described herein enable these parameters to be calculated on the fly from non-intrusive measurements taken by monitoring circuitry on the SoC. The methods described are therefore able to detect anomalous latencies and provide a measure of how the data flows of the components through the communication circuitry affect each other by means of comparing correlation data for the different components.</p><p id="p-0086" num="0079">Each component of the SoCs illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref> may be implemented in dedicated hardware. Alternatively, each component of the SoC illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref> may be implemented in software. Some components may be implemented in software, whilst other components are implemented in dedicated hardware.</p><p id="p-0087" num="0080">The SoC described is suitably incorporated within a computing-based device. The computing-based device may be an electronic device. Suitably, the computing-based device includes one or more processors for processing computer executable instructions to control operation of the device in order to implement the methods described herein. The computer executable instructions can be provided using any computer-readable media such as a memory. The methods described herein may be performed by software in machine readable form on a tangible storage medium. Software can be provided at the computing-based device to implement the methods described herein.</p><p id="p-0088" num="0081">The above description describes the system circuitry and monitoring circuitry as being included on the same SoC. In an alternative implementation, the system circuitry and monitoring circuitry are included across two or more integrated circuit chips of an MCM. In an MCM, the integrated circuit chips are typically stacked or located adjacently on an interposer substrate. Some system circuitry may be located on one integrated circuit chip and other system circuitry located on a different integrated circuit chip of the MCM. Similarly, the monitoring circuitry may be distributed across more than one integrated circuit chip of the MCM. Thus, the method and apparatus described above in the context of a SoC also apply in the context of an MCM.</p><p id="p-0089" num="0082">The applicant hereby discloses in isolation each individual feature described herein and any combination of two or more such features, to the extent that such features or combinations are capable of being carried out based on the present specification as a whole in the light of the common general knowledge of a person skilled in the art, irrespective of whether such features or combinations of features solve any problems disclosed herein, and without limitation to the scope of the claims. The applicant indicates that aspects of the present invention may consist of any such individual feature or combination of features. In view of the foregoing description it will be evident to a person skilled in the art that various modifications may be made within the scope of the invention.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of detecting anomalous latencies in communications between components on an integrated circuit (IC) chip, the method comprising:<claim-text>(i) monitoring communications between a first component of the IC chip and other components of the IC chip, each communication comprising a command sent from the first component to a second component of the other components, and a response received by the first component from that second component, the monitoring comprising:<claim-text>measuring the number of communications in each of a series of monitored time windows, and</claim-text><claim-text>measuring the latency of each communication in the series of monitored time windows;</claim-text></claim-text><claim-text>(ii) calculating a maximum tolerable latency for each operational time window of the first component from the number of communications in that operational time window, an available stall time of the first component in that operational time window, and a latency penalty factor for that operational time window; and</claim-text><claim-text>(iii) determining a measured latency to be anomalous when the measured latency is greater than the maximum tolerable latency.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the latency penalty factor for an operational time window is an average minimum number of bytes that the first component can tolerate between latent responses in that operational time window.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method as claimed in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the maximum tolerable latency of the operational time window is calculated according to:<claim-text><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MTL<sub>i</sub>=TS<sub>i</sub><i>*BP</i><sub>i</sub><i>/B</i><sub>i </sub><?in-line-formulae description="In-line Formulae" end="tail"?></claim-text><claim-text>where MTL<sub>i </sub>is the maximum tolerable latency of operational time window i, TS<sub>i </sub>is an available stall time of the first component in the operational time window i, BP<sub>i </sub>is the latency penalty factor in the operational time window i, and B<sub>i </sub>is a number of bytes in the operational time window i.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein act (iii) comprises:<claim-text>determining a maximum latency of the measured latencies in each of the series of monitored time windows;</claim-text><claim-text>comparing the maximum latency to the maximum tolerable latency; and</claim-text><claim-text>determining the maximum latency to be anomalous when the maximum latency is greater than the maximum tolerable latency.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising calculating the available stall time of the first component in each operational time window from an operational time window length and a reserved processing time, the reserved processing time being that used by the first component to perform computations.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method as claimed in <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the available stall time of the first component in each operational time window is calculated according to:<claim-text><br/><?in-line-formulae description="In-line Formulae" end="lead"?>TS<sub>i</sub>=WL<sub>i</sub>*(1<i>&#x2212;RS</i><sub>i</sub>)<?in-line-formulae description="In-line Formulae" end="tail"?></claim-text><claim-text>where TS<sub>i </sub>is the available stall time of the first component in the operational time window i, WL<sub>i </sub>is a length of the operational time window i, and RS<sub>i </sub>is a proportion of time reserved for the first component to perform computations.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising determining a bandwidth of each of the series of monitored time windows from the measured number of communications in that monitored time window.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method as claimed in <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising determining a set of bandwidths and latencies for each of a series of the operational time windows of the first component from the bandwidths and the measured latencies of the series of monitored time windows of act (i).</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method as claimed in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein each operational time window is greater than each monitored time window.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method as claimed in <claim-ref idref="CLM-00009">claim 9</claim-ref>, comprising aggregating the bandwidths and measured latencies of the series of monitored time windows of act (i) to form the set of bandwidths and latencies for each of the series of operational time windows of the first component.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method as claimed in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the latencies of each of the series of operational time windows of the first component are maximum latencies of the series of monitored time windows.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method as claimed in <claim-ref idref="CLM-00008">claim 8</claim-ref> further comprising correlating the bandwidth and measured latency for each of the series of operational time windows.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method as claimed in <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the correlation comprises correlating the bandwidth and maximum latency for each of the series of operational time windows.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising monitoring communications between each component of a set of third components on the IC chip and other fourth components of the IC chip, the monitoring of each component of the set being according to act (i).</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method as claimed in <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising, for each component of the set, determining a bandwidth of each of the series of the monitored time windows from the measured number of communications in that monitored time window.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method as claimed in <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising, for each component of the set of components, correlating the bandwidth and measured latency for each of a series of operational time windows.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the correlation comprises correlating the bandwidth and maximum latency for each of the series of the operational time windows.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the correlation comprises correlating the bandwidth and maximum latency of the operational time windows which are shifted in time with respect to each other.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising comparing the correlations of the different third components of the set of the third components.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. An integrated circuit (IC) chip comprising:<claim-text>system circuitry comprising components;</claim-text><claim-text>monitoring circuitry configured to monitor communications between the components of the system circuitry, each communication comprising a command sent from a first component of the components to a second component of the components, and a response received from the second component by the first component, the monitoring circuitry comprising:<claim-text>a counter configured to measure a number of the communications in each of a series of monitored time windows;</claim-text><claim-text>a latency timer configured to measure a time taken between a command being sent from the first component to the second component, and a response being received by the first component; and</claim-text><claim-text>a processor configured to:<claim-text>calculate a maximum tolerable latency for each operational time window of the first component from the number of communications in that operational time window, an available stall time of the first component in that operational time window, and a latency penalty factor for that operational time window; and</claim-text><claim-text>determine a measured latency to be anomalous when the measured latency is greater than the maximum tolerable latency.</claim-text></claim-text></claim-text></claim-text></claim></claims></us-patent-application>