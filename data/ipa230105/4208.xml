<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004209A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004209</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17879635</doc-number><date>20220802</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>IN</country><doc-number>5444/CHE/2012</doc-number><date>20121226</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>1</main-group><subgroup>3287</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>1</main-group><subgroup>3234</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>1</main-group><subgroup>3287</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>1</main-group><subgroup>3265</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>1</main-group><subgroup>3206</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">PLATFORM POWER CONSUMPTION REDUCTION VIA POWER STATE SWITCHING</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16741215</doc-number><date>20200113</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11422615</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17879635</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15984185</doc-number><date>20180518</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10564705</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16741215</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>14139864</doc-number><date>20131223</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10007323</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>15984185</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only"><addressbook><orgname>Intel Corporation</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Muralidhar</last-name><first-name>Rajeev D.</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Seshadri</last-name><first-name>Harinarayanan</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Rudramuni</last-name><first-name>Vishwesh M.</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Quinzio</last-name><first-name>Richard</first-name><address><city>Sophia Antipolis</city><country>FR</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>FIAT</last-name><first-name>Christophe</first-name><address><city>Nice</city><country>FR</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Zayet</last-name><first-name>Aymen</first-name><address><city>Antibes</city><country>FR</country></address></addressbook></inventor><inventor sequence="06" designation="us-only"><addressbook><last-name>Singh</last-name><first-name>Youvedeep</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="07" designation="us-only"><addressbook><last-name>Mansoor</last-name><first-name>Illyas M.</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Intel Corporation</orgname><role>02</role><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Methods and apparatus relating to platform power consumption reduction via power state switching are described. In one embodiment, control logic causes a processor to enter a first low power consumption state (e.g., S0ix) instead of a second low power consumption state (e.g., S3) based on whether a threshold time period exists between a first wake event (e.g., corresponding to a first one of one or more awake requests) and a second wake event (e.g., corresponding to a second one of the one or more awake requests). Other embodiments are also claimed and disclosed.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="193.46mm" wi="158.67mm" file="US20230004209A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="214.71mm" wi="160.70mm" file="US20230004209A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="219.54mm" wi="167.81mm" file="US20230004209A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="219.46mm" wi="165.86mm" orientation="landscape" file="US20230004209A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="225.38mm" wi="117.77mm" orientation="landscape" file="US20230004209A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="235.12mm" wi="116.16mm" orientation="landscape" file="US20230004209A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="181.95mm" wi="131.66mm" orientation="landscape" file="US20230004209A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="186.69mm" wi="148.93mm" orientation="landscape" file="US20230004209A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="231.31mm" wi="172.47mm" orientation="landscape" file="US20230004209A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="229.70mm" wi="151.13mm" file="US20230004209A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="226.23mm" wi="174.24mm" file="US20230004209A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD</heading><p id="p-0002" num="0001">The present disclosure generally relates to the field of electronics. More particularly, an embodiment of the invention relates to platform power consumption reduction via power state switching.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">To reduce power consumption, some systems include processors with the ability to perform at various low power (Cx) states. Each C state may indicate a certain level of functionality and corresponding power state. For example, C0 may indicate the processor is operating at normal levels, C1 may indicate the processor is not executing instructions but may return to an executing state quickly, C2 may indicate the processor is to maintain all software-visible information but may take longer to return to full executing state, C3 may indicate the processor is asleep but keeps its cache coherent, C6 may indicate much deeper sleep state where caches are flushed, etc.</p><p id="p-0004" num="0003">However, support for aggressive Operating System (OS) or Software (SW) driven power management is generally very minimal, especially from an OS perspective. Moreover, most current OS power management strategies tend not to scale very well with multiple core systems from a processor power management perspective, or the platform as a whole.</p><p id="p-0005" num="0004">Accordingly, how the various power consumption states are utilized may have a direct impact on performance and/or power consumption of a processor.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0006" num="0005">The detailed description is provided with reference to the accompanying figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears. The use of the same reference numbers in different figures indicates similar or identical items.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIGS. <b>1</b>, <b>9</b>, and <b>10</b></figref> illustrate block diagrams of embodiments of computing systems, which may be utilized to implement various embodiments discussed herein.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a block diagram of portions of a processor core and other components of a computing system, according to an embodiment.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a block diagram of power management architecture for an Android based system that may be used to implement one or more embodiments discussed herein.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a timing diagram according to an embodiment.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIGS. <b>5</b>, <b>6</b>, and <b>7</b></figref> illustrate various graphs according to some embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a suspend flow to dynamically choose power states, according to an embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0013" num="0012">In the following description, numerous specific details are set forth in order to provide a thorough understanding of various embodiments. However, various embodiments of the invention may be practiced without the specific details. In other instances, well-known methods, procedures, components, and circuits have not been described in detail so as not to obscure the particular embodiments of the invention. Further, various aspects of embodiments of the invention may be performed using various means, such as integrated semiconductor circuits (&#x201c;hardware&#x201d;), computer-readable instructions organized into one or more programs (&#x201c;software&#x201d;), or some combination of hardware and software. For the purposes of this disclosure reference to &#x201c;logic&#x201d; shall mean either hardware, software, firmware, or some combination thereof. Also, the use of &#x201c;instruction&#x201d; and &#x201c;micro-operation&#x201d; (uop) is interchangeable as discussed herein.</p><p id="p-0014" num="0013">Power management is crucial for mobile devices (such as phones, tablets, UMPC (Ultra-Mobile Personal Computer), laptop computers, etc.) and hence it is critical that such platforms are highly optimized from a power and performance point of view. To this end, some embodiments provide power consumption reduction (e.g., in System on Chip (SOC) platforms) via power state switching. Generally, an SOC refers to an integrated circuit chip or die that includes/integrates various components (such as one or more components discussed herein with reference to the figures, such as one or more of: processor core(s), memory, networking logic, etc.) to provide a system. For example, battery life of SOCs (e.g., running the Android&#x2122; OS or other operating systems used in mobile devices) may be increased through dynamic power state switching. In an embodiment, the power state of a device is dynamically switched between S0ix and S3 during run-time.</p><p id="p-0015" num="0014">Generally, &#x201c;S0ix&#x201d; refers to improved idle power state(s) achieved by platform-level power management that is event driven (e.g., based on OS or software application input) instead of traditional idle power state that is driven either by a user or based on a determination that a platform has been idle for too long (based on a pre-programmed time). In some embodiments, at least some of the power consumption states discussed herein may be in accordance with or similar to those defined under Advanced Configuration and Power Interface (ACPI) specification, Revision 5, December 2011. As discussed herein, &#x201c;S3&#x201d; generally refers to a power state such as standby, sleep, and/or suspend to Random Access Memory (RAM), e.g., while the RAM remains powered to maintain data correctness.</p><p id="p-0016" num="0015">In one embodiment, a processor includes logic (such as logic <b>120</b> discussed with reference to the figures herein) to control which specific processor core(s) are to change power states based, at least in part, on input from OS software and/or software application(s). Moreover, the ability to control the level of power states may be used to optimize platform power consumption in response to various determinations such as based on the workload, scenario, usage, etc. Furthermore, at least some OS operations discussed herein may be interchangeably performed by software applications, firmware, etc.</p><p id="p-0017" num="0016">The techniques discussed herein may be used in any type of a processor with performance state settings, such as the processors discussed with reference to <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>9</b>-<b>10</b></figref>. More particularly, <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a block diagram of a computing system <b>100</b>, according to an embodiment of the invention. The system 100 may include one or more processors <b>102</b>-<b>1</b> through <b>102</b>-N (generally referred to herein as &#x201c;processors <b>102</b>&#x201d; or &#x201c;processor <b>102</b>&#x201d;). The processors <b>102</b> may communicate via an interconnection network or bus <b>104</b>. Each processor may include various components some of which are only discussed with reference to processor <b>102</b>-<b>1</b> for clarity. Accordingly, each of the remaining processors <b>102</b>-<b>2</b> through <b>102</b>-N may include the same or similar components discussed with reference to the processor <b>102</b>-<b>1</b>.</p><p id="p-0018" num="0017">In an embodiment, the processor <b>102</b>-<b>1</b> may include one or more processor cores <b>106</b>-<b>1</b> through <b>106</b>-M (referred to herein as &#x201c;cores <b>106</b>&#x201d; or more generally as &#x201c;core <b>106</b>&#x201d;), a shared cache <b>108</b>, a router <b>110</b>, and/or a processor control logic or unit <b>120</b>. The processor cores <b>106</b> may be implemented on a single integrated circuit (IC) chip. Moreover, the chip may include one or more shared and/or private caches (such as cache <b>108</b>), buses or interconnections (such as a bus or interconnection network <b>112</b>), memory controllers (such as those discussed with reference to <figref idref="DRAWINGS">FIGS. <b>9</b>-<b>10</b></figref>), or other components.</p><p id="p-0019" num="0018">In one embodiment, the router <b>110</b> may be used to communicate between various components of the processor <b>102</b>-<b>1</b> and/or system <b>100</b>. Moreover, the processor <b>102</b>-<b>1</b> may include more than one router <b>110</b>. Furthermore, the multitude of routers <b>110</b> may be in communication to enable data routing between various components inside or outside of the processor <b>102</b>-<b>1</b>.</p><p id="p-0020" num="0019">The shared cache <b>108</b> may store data (e.g., including instructions) that are utilized by one or more components of the processor <b>102</b>-<b>1</b>, such as the cores <b>106</b>. For example, the shared cache <b>108</b> may locally cache data stored in a memory <b>114</b> for faster access by components of the processor <b>102</b>. In an embodiment, the cache <b>108</b> may include a mid-level cache (such as a level 2 (L2), a level 3 (L3), a level 4 (L4), or other levels of cache), a last level cache (LLC), and/or combinations thereof. Moreover, various components of the processor <b>102</b>-<b>1</b> may communicate with the shared cache <b>108</b> directly, through a bus (e.g., the bus <b>112</b>), and/or a memory controller or hub. As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in some embodiments, one or more of the cores <b>106</b> may include a level 1 (L1) cache <b>116</b>-<b>1</b> (generally referred to herein as &#x201c;L1 cache <b>116</b>&#x201d;).</p><p id="p-0021" num="0020">In one embodiment, the control unit <b>120</b> controls which specific processor core(s) are to change power states (e.g., between S3 and S0ix states) based, at least in part, on input from OS software and/or software application(s) (e.g., that may be stored in the memory <b>114</b>). Moreover, the ability to control the level of power states may be used to optimize platform power consumption in response to various determinations such as based on the workload, scenario, usage, etc. Furthermore, at least some OS operations discussed herein may be interchangeably performed by software applications, firmware, etc.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a block diagram of portions of a processor core <b>106</b> and other components of a computing system, according to an embodiment of the invention. In one embodiment, the arrows shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrate the flow direction of instructions through the core <b>106</b>. One or more processor cores (such as the processor core <b>106</b>) may be implemented on a single integrated circuit chip (or die) such as discussed with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Moreover, the chip may include one or more shared and/or private caches (e.g., cache <b>108</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), interconnections (e.g., interconnections <b>104</b> and/or <b>112</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), control units, memory controllers, or other components.</p><p id="p-0023" num="0022">As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the processor core <b>106</b> may include a fetch unit <b>202</b> to fetch instructions (including instructions with conditional branches) for execution by the core <b>106</b>. The instructions may be fetched from any storage devices such as the memory <b>114</b> and/or the memory devices discussed with reference to <figref idref="DRAWINGS">FIGS. <b>9</b>-<b>10</b></figref>. The core <b>106</b> may also include a decode unit <b>204</b> to decode the fetched instruction. For instance, the decode unit <b>204</b> may decode the fetched instruction into a plurality of uops (micro-operations).</p><p id="p-0024" num="0023">Additionally, the core <b>106</b> may include a schedule unit <b>206</b>. The schedule unit <b>206</b> may perform various operations associated with storing decoded instructions (e.g., received from the decode unit <b>204</b>) until the instructions are ready for dispatch, e.g., until all source values of a decoded instruction become available. In one embodiment, the schedule unit <b>206</b> may schedule and/or issue (or dispatch) decoded instructions to an execution unit <b>208</b> for execution. The execution unit <b>208</b> may execute the dispatched instructions after they are decoded (e.g., by the decode unit <b>204</b>) and dispatched (e.g., by the schedule unit <b>206</b>). In an embodiment, the execution unit <b>208</b> may include more than one execution unit. The execution unit <b>208</b> may also perform various arithmetic operations such as addition, subtraction, multiplication, and/or division, and may include one or more an arithmetic logic units (ALUs). In an embodiment, a co-processor (not shown) may perform various arithmetic operations in conjunction with the execution unit <b>208</b>.</p><p id="p-0025" num="0024">Further, the execution unit <b>208</b> may execute instructions out-of-order. Hence, the processor core <b>106</b> may be an out-of-order processor core in one embodiment. The core <b>106</b> may also include a retirement unit <b>210</b>. The retirement unit <b>210</b> may retire executed instructions after they are committed. In an embodiment, retirement of the executed instructions may result in processor state being committed from the execution of the instructions, physical registers used by the instructions being de-allocated, etc.</p><p id="p-0026" num="0025">The core <b>106</b> may also include a bus unit <b>214</b> to enable communication between components of the processor core <b>106</b> and other components (such as the components discussed with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>) via one or more buses (e.g., buses <b>104</b> and/or <b>112</b>). The core <b>106</b> may also include one or more registers <b>216</b> to store data accessed by various components of the core <b>106</b> (such as values related to power consumption state settings).</p><p id="p-0027" num="0026">Furthermore, even though <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates the control unit <b>120</b> to be coupled to the core <b>106</b> via interconnect <b>112</b>, in various embodiments the control unit <b>120</b> may be located elsewhere such as inside the core <b>106</b>, coupled to the core via bus <b>104</b>, etc.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a block diagram of power management architecture for an Android based system that may be used to implement one or more embodiments discussed herein. More specifically, the Android power management infrastructure is split across the User space <b>302</b> and Kernel layer <b>304</b>. Wake locks may form a critical part of the framework. A &#x201c;Wake Lock&#x201d; can be defined as request by the application(s) <b>306</b> and/or service(s) to request one or more of the platform resources (such as CPU (Central Processing Unit&#x2014;also referred to herein interchangeably as &#x201c;processor&#x201d;), display, etc.), e.g., to stay powered on or awake (hence, a &#x201c;wake lock&#x201d; may also be referred to herein interchangeably as a &#x201c;awake request&#x201d;).</p><p id="p-0029" num="0028">The Android Framework exposes power management to services and/or applications through a Power Manager class. All calls for Power Management go through the Android runtime Power Manager API (Application Programming Interface) to acquire and release wake locks. Kernel drivers may register with the Android Power Manager driver so that they are notified immediately prior to power down or after power up&#x2014;drivers can register early_suspend( )and late_resume( ) handlers, which are called when the display power state changes. The Android OS currently supports only suspend to RAM (a.k.a., S3) state (e.g., while power is supplied to RAM to maintain data correctness). This builds upon the traditional Linux&#xae; power management infrastructure and uses concepts of wake locks (i.e., application hints about platform resource usage) to achieve S3. The power management infrastructure in Android requires that applications and services request CPU resources with &#x201c;wake locks&#x201d; through the Android application framework <b>308</b> and/or native Linux libraries. If there are no active wake locks, Android will suspend the system to S3.</p><p id="p-0030" num="0029">While the current S3 implementation in Android helps reduce overall platform power, this does not satisfy applications that require always connected behavior. Applications like instant messengers, VoIP (Voice over Internet Protocol), etc. need to send &#x201c;keep alive&#x201d; messages to maintain their active sessions. Entering S3 will result in freezing these applications and therefore connections can timeout and the sessions will have to be re-established on resume. To keep these applications active and still achieve reasonable power numbers, S0ix or Active Idle states feature (also known as Connected Standby in recent Intel&#xae;-based Microsoft Windows&#xae; platforms) can be used from the platform perspective in some embodiments. As discussed herein, S0ix and Active Idle states are used interchangeably.</p><p id="p-0031" num="0030">Some embodiments use S0ix during an idle window to allow the platform to stay in the lowest power state as long as reasonably possible. In this state, all platform components are transitioned to an appropriate lower power state (e.g., CPU is in Cx state, memory is in Self Refresh, other components are clock or power gated, etc.) in accordance with an embodiment. As soon a timer or wake event occurs, the platform moves into an &#x201c;Active&#x201d; state (e.g., only the components that are needed are turned on, keeping everything else still in low power state). Hence, on true idleness, CPU C-states may be extended to devices, and the rest of the platform, e.g., pushing the platform aggressively to S0ix states.</p><p id="p-0032" num="0031">Referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a timing diagram is shown for aligning platform power states with CPU during device idleness at S0ix, according to an embodiment. As shown, various components such as memory, controllers, clocks, Voltage Regulator(s) (VRs), and other platform components are aligned during an idle window with the CPU, e.g., based on an OS timer (e.g., HPET (High Performance Event Timer)) after some active window, followed by an optional policy windows. Once the idle window ends, and after an optional warm-up window, the active state resumes.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a graph of average power versus time illustrating comparison of how S0ix states impact platform power states, according to an embodiment. More specifically, <figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates how the impact of S0ix states compares with traditional (e.g., ACPI-based) power management. As shown, even after applications acquire wake locks to prevent S3, OS Power Management (OSPM) driver may still opportunistically cause initiation of S0i3 (which may be more generally referred to herein as S0ix), which may transition afterwards to S3, e.g., when no wake locks remain.</p><p id="p-0034" num="0033">In some implementations, the OS for a smart phone or tablet may implement both S0ix and S3. S0ix may be used in very specific scenarios like low power audio playback (where the entire platform except the audio cluster can be put into a low power mode), or display self-refresh (where only the display panel can be kept on, and entire SOC can be put into lowest possible power state). S0ix has very low entry/exit latencies at about 2 ms, whereas S3 entry/exit latencies range in the order of 100s of milliseconds (since devices must be suspended, applications must be frozen, etc.). For example, in idle scenarios, when the phone is in idle standby with 3G and/or WLAN (Wireless Local Area Network) connected), the platform power can still be around 14 mW on some Android based phones.</p><p id="p-0035" num="0034">Ideally, there should be no wakes on the platform that can cause the phone to exit out of S3 state and into S0 state (where S0 refers to the operating/working state). However, in real usage scenarios, there may be a lot of wakes that happen when background data is enabled on a real network. Most of these wakes may be due to applications waking the platform (such as maps, Google&#xae; GSF (Google Services Framework), etc.) or applications performing push from network (such as Google+&#x2122;, etc.). These wakes could happen every 30 sec (e.g., as seen on real live network with WIFI (Wireless Fidelity) on).</p><p id="p-0036" num="0035">To this end, some embodiments reduce platform power consumption by aggressively invoking and maintaining S0ix state in mobile devices (such as phones, tablets, UMPC (Ultra-Mobile Personal Computer), laptop computers, etc.). Moreover, entering/exiting S3 too frequently may not always provide a net power benefit, e.g., due to the fact that S3 can have higher transition cost of doing full suspend/resume (around 2 seconds) as compared to S0i3 (around 2 ms). In fact, in some situations, entering/exiting S3 too frequently can actually hurt, leading to a higher consumption when selecting S3 if there are frequent wakes happening on the platform. In such scenarios, state S0ix is entered rather than S3 in an embodiment (even if Android power management attempts to enter S3).</p><p id="p-0037" num="0036">In some implementations, there may be periodic events due to different applications (such as Google Services, Google Sync, Maps, etc.) that cause the platform to wake up periodically from standby (or S3). For example, some phones may wake up as many as 250 times in an hour (i.e., 4 wakes a minute, or one every 15 seconds). However, as the number of wakes increases, entering S0i3 instead of S3 becomes more and more beneficial. This is illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref> which shows platform current draw (in mA) versus the number of wakes (e.g., per second) changes for S0i3/S3 threshold on a sample platform, according to some embodiments.</p><p id="p-0038" num="0037">As shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, there is a threshold point (a threshold number of wakes per second) at which S0ix becomes more beneficial than S3 for the platform in terms of power consumption. As can be seen, the higher the number of wakes on the platform, the more beneficial it is to do S0i3 instead of S3. This can sometimes allow for 50% to 60% gain in standby battery life.</p><p id="p-0039" num="0038">Referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, a graph of the average power consumption (e.g., in mA) of S0ix/S3 plotted against the frequency of wakes on the platform is illustrated, according to an embodiment. Based on the entry/exit latency values of S0ix and S3, it can be seen that there is a threshold where there is benefit in picking low-latency S0ix rather than S3.</p><p id="p-0040" num="0039">In some embodiments, the power characterization of S3 profiling is giving by the following formula:</p><p id="p-0041" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>E</i><sub>S3</sub>(<i><o ostyle="single">T</o></i><sub>th</sub>)=<i>&#x16a;&#xb7;&#x12a;</i><sub>ST</sub><i>&#xb7;<o ostyle="single">T</o></i><sub>S3</sub><i>+&#x16a;&#xb7;&#x12a;</i><sub>S3</sub>&#xb7;(<i><o ostyle="single">T</o></i><sub>th</sub><i>&#x2212;<o ostyle="single">T</o></i><sub>S3</sub>) &#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0042" num="0040">where:</p><p id="p-0043" num="0041">E<sub>S3 </sub>is defined as the average of power consumption during period <o ostyle="single">T</o><sub>th</sub>;</p><p id="p-0044" num="0042"><o ostyle="single">T</o><sub>th </sub>is defined as the cross&#x2014;point between S3 and S0i3 curves given above;</p><p id="p-0045" num="0043">&#x12a;<sub>ST </sub>is defined as the average of current consumption during a suspend/resume transition;</p><p id="p-0046" num="0044"><o ostyle="single">T</o><sub>S3 </sub>is defined as the delay required for the device to go through the whole suspend patch; and</p><p id="p-0047" num="0045">&#x12a;<sub>S3 </sub>is defined as the average of power consumption in S3.</p><p id="p-0048" num="0046">Also, the power characterization of S0i3 profiling is giving by the following formula in accordance with some embodiments:</p><p id="p-0049" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>E</i><sub>S0i3</sub>(<i>T</i><sub>th</sub>)=<i>&#x16a;&#xb7;&#x12a;</i><sub>S0i3</sub><i>&#xb7;T</i><sub>th </sub>&#x2003;&#x2003;(2)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0050" num="0047">where:</p><p id="p-0051" num="0048">E<sub>S0i3 </sub>is defined as the power consumption during <o ostyle="single">T</o><sub>th</sub>; and</p><p id="p-0052" num="0049">&#x12a;<sub>S0i3 </sub>is defined as the current consumption in S0i3.</p><p id="p-0053" num="0050">Matching the two formulae (1 and 2) given above, may be determined as:</p><p id="p-0054" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <msub>   <mi>T</mi>   <mrow>    <mi>t</mi>    <mo>&#x2062;</mo>    <mi>h</mi>   </mrow>  </msub>  <mo>=</mo>  <mrow>   <msub>    <mover>     <mi>T</mi>     <mo>_</mo>    </mover>    <mrow>     <mi>S</mi>     <mo>&#x2062;</mo>     <mn>3</mn>    </mrow>   </msub>   <mo>&#x2a2f;</mo>   <mfrac>    <mrow>     <msub>      <mover accent="true">       <mi>I</mi>       <mi>&#xaf;</mi>      </mover>      <mrow>       <mi>S</mi>       <mo>&#x2062;</mo>       <mi>T</mi>      </mrow>     </msub>     <mo>-</mo>     <msub>      <mover accent="true">       <mi>I</mi>       <mi>&#xaf;</mi>      </mover>      <mrow>       <mi>S</mi>       <mo>&#x2062;</mo>       <mn>3</mn>      </mrow>     </msub>    </mrow>    <mrow>     <msub>      <mover accent="true">       <mi>I</mi>       <mi>&#xaf;</mi>      </mover>      <mrow>       <mi>S0i</mi>       <mo>&#x2062;</mo>       <mn>3</mn>      </mrow>     </msub>     <mo>-</mo>     <msub>      <mover accent="true">       <mi>I</mi>       <mi>&#xaf;</mi>      </mover>      <mrow>       <mi>S</mi>       <mo>&#x2062;</mo>       <mn>3</mn>      </mrow>     </msub>    </mrow>   </mfrac>  </mrow> </mrow></math></maths></p><p id="p-0055" num="0051">In accordance with some embodiments, if the next wake is beyond about a 60 second window (e.g., as determined as per the calculation above), it is beneficial to enter S3 state; whereas, if the next wake is within about 60 seconds, picking S0i3 state is most beneficial from a power consumption point of view.</p><p id="p-0056" num="0052"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a sample suspend flow <b>800</b> (e.g., for an Android OS) according to an embodiment. Flow <b>800</b> is used to dynamically choose S0ix versus S3 in some embodiments. In some embodiments, various components discussed with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>7</b> and <b>9</b>-<b>10</b></figref> may be utilized to perform one or more of the operations discussed with reference to <figref idref="DRAWINGS">FIG. <b>8</b></figref>. For example, the control unit <b>120</b> may be used to control power consumption states of one or more processor cores <b>106</b> and/or perform one or more of the operations discussed with reference to flow <b>800</b>.</p><p id="p-0057" num="0053">As illustrated, whenever a wake lock is taken or released <b>802</b>, the kernel interface <b>804</b> for grabbing a wake lock is accessed at <b>806</b>. The user mode policy manager for Android will know what locks are held and when there are no full wake locks the power management service will inform the kernel to turn off the display by accessing the /sys/power/state interface, by writing &#x201c;mem&#x201d; to it. To turn on the display, the PM (Power Management) service writes &#x201c;on&#x201d; to /sys/power/state. This is illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref>. As it can be seen, there are two main kernel work queues: (1) early suspend work queue (shown on the left portion of the figure including <b>810</b>-<b>814</b>): this is invoked from the main kernel path when &#x201c;mem&#x201d; is written into /sys/power/state at <b>818</b> (this work queue is responsible for calling all drivers that have registered early_suspend notifiers); and (2) suspend work queue (shown on the right portion of the figure including <b>806</b> and <b>820</b>-<b>822</b>): when there are no wake locks held in the platform, this work queue finally freezes application processes, and invokes the pm_suspend path in the kernel.</p><p id="p-0058" num="0054">Moreover, early suspend happens when the user mode writes &#x201c;mem&#x201d; to /sys/power/state at <b>818</b>. For example, whenever the user mode turns off the screen, the registered early suspend callbacks are called at <b>812</b>. The kernel keeps a list of wake_locks held. When the wake lock list transitions from non-empty to empty pm_suspend is called at <b>822</b>. This is a Linux platform state where all applications are frozen, drivers have their suspend entry points called, and interrupts are turned off. The platform will not exit this state except on external event, e.g., GPIO (General Purpose Input/Output), interrupt generated from an RTC (Real Time Clock), or an external interrupt (an incoming call for example). All non-wake-up hardware is expected to enter its lowest power state to reduce power consumption. Hardware that can generate a wake up interrupt is expected to go into a low power mode as well, but still function enough to wake the system out of the suspend state.</p><p id="p-0059" num="0055">Some embodiments are implemented within the Android power management infrastructure, and more specifically within the Linux Kernel. For example, at operation <b>822</b>, a new embodiment is provided to extend the functionality of an alarm driver to expose information of when the next alarm is expected to be triggered. This newly added function is used by a PMU (Power Management Unit) driver, e.g., along with a programmed threshold value, to determine if the platform should enter S0ix or S3. In this way, a suspend is authorized only when the next alarm expiry is higher than the break event. The updated kernel PM suspend path (as shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>) is able to dynamically pick S0ix or S3 depending on a tunable parameter (which may be set at boot time or run time in various embodiments).</p><p id="p-0060" num="0056"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates a block diagram of a computing system <b>900</b> in accordance with an embodiment of the invention. The computing system <b>900</b> may include one or more central processing unit(s) (CPUs) <b>902</b> or processors that communicate via an interconnection network (or bus) <b>904</b>. The processors <b>902</b> may include a general purpose processor, a network processor (that processes data communicated over a computer network <b>903</b>), or other types of a processor (including a reduced instruction set computer (RISC) processor or a complex instruction set computer (CISC)). Moreover, the processors <b>902</b> may have a single or multiple core design. The processors <b>902</b> with a multiple core design may integrate different types of processor cores on the same integrated circuit (IC) die. Also, the processors <b>902</b> with a multiple core design may be implemented as symmetrical or asymmetrical multiprocessors. In an embodiment, one or more of the processors <b>902</b> may be the same or similar to the processors <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. For example, one or more of the processors <b>902</b> may include the control unit <b>120</b> discussed with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b></figref>. Also, the operations discussed with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b></figref> may be performed by one or more components of the system <b>900</b>.</p><p id="p-0061" num="0057">A chipset <b>906</b> may also communicate with the interconnection network <b>904</b>. The chipset <b>906</b> may include a memory control hub (MCH) <b>908</b>. The MCH <b>908</b> may include a memory controller <b>910</b> that communicates with a memory <b>912</b> (which may be the same or similar to the memory <b>114</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). The memory <b>912</b> may store data, including sequences of instructions, that may be executed by the CPU <b>902</b>, or any other device included in the computing system <b>900</b>. In one embodiment of the invention, the memory <b>912</b> may include one or more volatile storage (or memory) devices such as random access memory (RAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), static RAM (SRAM), or other types of storage devices. Nonvolatile memory may also be utilized such as a hard disk. Additional devices may communicate via the interconnection network <b>904</b>, such as multiple CPUs and/or multiple system memories.</p><p id="p-0062" num="0058">The MCH <b>908</b> may also include a graphics interface <b>914</b> that communicates with a display device <b>916</b>. In one embodiment of the invention, the graphics interface <b>914</b> may communicate with the display device <b>916</b> via an accelerated graphics port (AGP). In an embodiment of the invention, the display <b>916</b> (such as a flat panel display) may communicate with the graphics interface <b>914</b> through, for example, a signal converter that translates a digital representation of an image stored in a storage device such as video memory or system memory into display signals that are interpreted and displayed by the display <b>916</b>. The display signals produced by the display device may pass through various control devices before being interpreted by and subsequently displayed on the display <b>916</b>.</p><p id="p-0063" num="0059">A hub interface <b>918</b> may allow the MCH <b>908</b> and an input/output control hub (ICH) <b>920</b> to communicate. The ICH <b>920</b> may provide an interface to I/O device(s) that communicate with the computing system <b>900</b>. The ICH <b>920</b> may communicate with a bus <b>922</b> through a peripheral bridge (or controller) <b>924</b>, such as a peripheral component interconnect (PCI) bridge, a universal serial bus (USB) controller, or other types of peripheral bridges or controllers. The bridge <b>924</b> may provide a data path between the CPU <b>902</b> and peripheral devices. Other types of topologies may be utilized. Also, multiple buses may communicate with the ICH <b>920</b>, e.g., through multiple bridges or controllers. Moreover, other peripherals in communication with the ICH <b>920</b> may include, in various embodiments of the invention, integrated drive electronics (IDE) or small computer system interface (SCSI) hard drive(s), USB port(s), a keyboard, a mouse, parallel port(s), serial port(s), floppy disk drive(s), digital output support (e.g., digital video interface (DVI)), or other devices.</p><p id="p-0064" num="0060">The bus <b>922</b> may communicate with an audio device <b>926</b>, one or more disk drive(s) <b>928</b>, and a network interface device <b>930</b> (which is in communication with the computer network <b>903</b>). Other devices may communicate via the bus <b>922</b>. Also, various components (such as the network interface device <b>930</b>) may communicate with the MCH <b>908</b> in some embodiments of the invention. In addition, the processor <b>902</b> and the MCH <b>908</b> may be combined to form a single chip. Furthermore, the graphics accelerator <b>916</b> may be included within the MCH <b>908</b> in other embodiments of the invention.</p><p id="p-0065" num="0061">Furthermore, the computing system <b>900</b> may include volatile and/or nonvolatile memory (or storage). For example, nonvolatile memory may include one or more of the following: read-only memory (ROM), programmable ROM (PROM), erasable PROM (EPROM), electrically EPROM (EEPROM), a disk drive (e.g., <b>928</b>), a floppy disk, a compact disk ROM (CD-ROM), a digital versatile disk (DVD), flash memory, a magneto-optical disk, or other types of nonvolatile machine-readable media that are capable of storing electronic data (e.g., including instructions).</p><p id="p-0066" num="0062"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates a computing system <b>1000</b> that is arranged in a point-to-point (PtP) configuration, according to an embodiment of the invention. In particular, <figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a system where processors, memory, and input/output devices are interconnected by a number of point-to-point interfaces. The operations discussed with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>9</b></figref> may be performed by one or more components of the system <b>1000</b>.</p><p id="p-0067" num="0063">As illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the system <b>1000</b> may include several processors, of which only two, processors <b>1002</b> and <b>1004</b> are shown for clarity. The processors <b>1002</b> and <b>1004</b> may each include a local memory controller hub (MCH) <b>1006</b> and <b>1008</b> to enable communication with memories <b>1010</b> and <b>1012</b>. The memories <b>1010</b> and/or <b>1012</b> may store various data such as those discussed with reference to the memory <b>912</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0068" num="0064">In an embodiment, the processors <b>1002</b> and <b>1004</b> may be one of the processors <b>902</b> discussed with reference to <figref idref="DRAWINGS">FIG. <b>9</b></figref>. The processors <b>1002</b> and <b>1004</b> may exchange data via a point-to-point (PtP) interface <b>1014</b> using PtP interface circuits <b>1016</b> and <b>1018</b>, respectively. Also, the processors <b>1002</b> and <b>1004</b> may each exchange data with a chipset <b>1020</b> via individual PtP interfaces <b>1022</b> and <b>1024</b> using point-to-point interface circuits <b>1026</b>, <b>1028</b>, <b>1030</b>, and <b>1032</b>. The chipset <b>1020</b> may further exchange data with a graphics circuit <b>1034</b> via a graphics interface <b>1036</b>, e.g., using a PtP interface circuit <b>1037</b>.</p><p id="p-0069" num="0065">At least one embodiment of the invention may be provided within the processors <b>1002</b> and <b>1004</b>. For example, the control unit <b>120</b> of <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>9</b></figref> may be located within the processors <b>1002</b> and <b>1004</b>. Other embodiments of the invention, however, may exist in other circuits, logic units, or devices within the system <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>. Furthermore, other embodiments of the invention may be distributed throughout several circuits, logic units, or devices illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref>.</p><p id="p-0070" num="0066">The chipset <b>1020</b> may communicate with a bus <b>1040</b> using a PtP interface circuit <b>1041</b>. The bus <b>1040</b> may communicate with one or more devices, such as a bus bridge <b>1042</b> and I/O devices <b>1043</b>. Via a bus <b>1044</b>, the bus bridge <b>1042</b> may communicate with other devices such as a keyboard/mouse <b>1045</b>, communication devices <b>1046</b> (such as modems, network interface devices, or other communication devices that may communicate with the computer network <b>903</b>), audio I/O device <b>1047</b>, and/or a data storage device <b>1048</b>. The data storage device <b>1048</b> may store code <b>1049</b> that may be executed by the processors <b>1002</b> and/or <b>1004</b>.</p><p id="p-0071" num="0067">In various embodiments of the invention, the operations discussed herein, e.g., with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>10</b></figref>, may be implemented as hardware (e.g., logic circuitry), software, firmware, or combinations thereof, which may be provided as a computer program product, e.g., including (e.g., a non-transitory) machine-readable or computer-readable medium having stored thereon instructions (or software procedures) used to program a computer to perform a process discussed herein. The machine-readable medium may include a storage device such as those discussed with respect to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>10</b></figref>.</p><p id="p-0072" num="0068">Additionally, such computer-readable media may be downloaded as a computer program product, wherein the program may be transferred from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a bus, a modem, or a network connection).</p><p id="p-0073" num="0069">Reference in the specification to &#x201c;one embodiment,&#x201d; &#x201c;an embodiment,&#x201d; or &#x201c;some embodiments&#x201d; means that a particular feature, structure, or characteristic described in connection with the embodiment(s) may be included in at least an implementation. The appearances of the phrase &#x201c;in one embodiment&#x201d; in various places in the specification may or may not be all referring to the same embodiment.</p><p id="p-0074" num="0070">Also, in the description and claims, the terms &#x201c;coupled&#x201d; and &#x201c;connected,&#x201d; along with their derivatives, may be used. In some embodiments of the invention, &#x201c;connected&#x201d; may be used to indicate that two or more elements are in direct physical or electrical contact with each other. &#x201c;Coupled&#x201d; may mean that two or more elements are in direct physical or electrical contact. However, &#x201c;coupled&#x201d; may also mean that two or more elements may not be in direct contact with each other, but may still cooperate or interact with each other.</p><p id="p-0075" num="0071">Thus, although embodiments of the invention have been described in language specific to structural features and/or methodological acts, it is to be understood that claimed subject matter may not be limited to the specific features or acts described. Rather, the specific features and acts are disclosed as sample forms of implementing the claimed subject matter.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230004209A1-20230105-M00001.NB"><img id="EMI-M00001" he="6.69mm" wi="76.20mm" file="US20230004209A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An apparatus comprising:<claim-text>control logic, the control logic at least partially comprising hardware logic, to cause a processor to enter a first low power consumption state instead of a second low power consumption state based on a threshold time period between a first wake event and a second wake event,</claim-text><claim-text>wherein the first low power consumption state is to consume more power than the second low power consumption state, wherein the first wake event or the second wake event are to each correspond to one of a plurality of awake requests, wherein the control logic is to determine whether the processor is to enter the first low power consumption state based at least in part on a scenario and one of the plurality of awake requests, wherein at least one of the plurality of awake requests are to cause prevention of entry into the second low power consumption state by the processor for as long as the one or more awake requests are active.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the control logic is to cause the processor to enter the first low power consumption state based on a source of a wake event.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising memory to store operating system software, wherein the operating system software is to trigger a wake event.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The apparatus of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the operating system software is to trigger the wake event based on a timer.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the control logic is to determine whether the processor is to enter the first low power consumption state based on one or more of workload and usage conditions in a platform that comprises the processor.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second low power consumption state comprises an idle state or a standby state.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising memory to store application software, wherein the application software is to trigger a wake event.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The apparatus of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the application software is to trigger the wake event based on a timer.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a wake event is to indicate resumption from a platform idle state.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is to comprise a plurality of processor cores, wherein a wake event is to cause at least one of the plurality of the processor cores to wake from the first low power consumption state or second low power consumption state.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the threshold time period is about 60 seconds.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A method comprising:<claim-text>causing a processor to enter a first low power consumption state instead of a second low power consumption state based on a threshold time period between a first wake event and a second wake event, wherein the first wake event or the second wake event are to each correspond to one of a plurality of awake requests, wherein the first low power consumption state consumes more power than the second low power consumption state; and</claim-text><claim-text>determining whether the processor enters the first low power consumption state based on a scenario and one of the plurality of awake requests, wherein at least one of the plurality of awake requests causes prevention of entry into the second low power consumption state by the processor for as long as the one or more awake requests are active.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising causing the processor to enter the first low power consumption state based on a source of a wake event.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising storing operating system software in memory, wherein the operating system software triggers a wake event.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the operating system software triggers the wake event based on a timer.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising determining whether the processor enters the first low power consumption state based on one or more of workload and usage conditions in a platform that comprises the processor.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the second low power consumption state comprises an idle state or a standby state.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. One or more non-transitory computer-readable media comprising one or more instructions that when executed on a processor configure the processor to perform one or more operations to:<claim-text>cause the processor to enter a first low power consumption state instead of a second low power consumption state based on a threshold time period between a first wake event and a second wake event, wherein the first wake event or the second wake event are to each correspond to one of a plurality of awake requests, wherein the first low power consumption state consumes more power than the second low power consumption state; and</claim-text><claim-text>determine whether the processor enters the first low power consumption state based on a scenario and one of the plurality of awake requests, wherein at least one of the plurality of awake requests is to cause prevention of entry into the second low power consumption state by the processor for as long as the one or more awake requests are active.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The one or more computer-readable media of <claim-ref idref="CLM-00018">claim 18</claim-ref>, further comprising one or more instructions that when executed on the at least one processor configure the at least one processor to perform one or more operations to cause the processor to enter the first low power consumption state based on a source of a wake event.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The one or more computer-readable media of <claim-ref idref="CLM-00018">claim 18</claim-ref>, further comprising one or more instructions that when executed on the at least one processor configure the at least one processor to perform one or more operations to determine whether the processor enters the first low power consumption state based on one or more of workload and usage conditions in a platform that comprises the processor.</claim-text></claim></claims></us-patent-application>