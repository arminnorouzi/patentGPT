<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006925A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006925</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17944713</doc-number><date>20220914</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>RO</country><doc-number>A/10053/2020</doc-number><date>20200925</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>58</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1008</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>19</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>58</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0643</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1008</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>19</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">Systems for Session-Based Routing</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17032568</doc-number><date>20200925</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11469996</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17944713</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Adobe Inc.</orgname><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Ciobanu</last-name><first-name>Cosmin</first-name><address><city>Bucharest</city><country>RO</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Tanase</last-name><first-name>Adrian</first-name><address><city>Mogosoaia</city><country>RO</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Adobe Inc.</orgname><role>02</role><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">In implementations of systems for session-based routing, a computing device implements a routing system to receive session data describing a session ID as a character sequence including non-embedded characters and at least one embedded character at a pre-determined index of the character sequence. The routing system extracts the at least one embedded character and determines a processing device configuration corresponding to the at least one embedded character from ledger data describing processing device configurations. The routing system maps the session data to a particular processing device based on the processing device configuration and the non-embedded characters of the character sequence.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="234.95mm" wi="151.21mm" file="US20230006925A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="258.15mm" wi="163.07mm" file="US20230006925A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="261.70mm" wi="162.05mm" file="US20230006925A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="261.70mm" wi="157.48mm" file="US20230006925A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="261.70mm" wi="166.12mm" file="US20230006925A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="255.52mm" wi="155.87mm" file="US20230006925A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="255.52mm" wi="155.79mm" file="US20230006925A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="255.52mm" wi="161.63mm" file="US20230006925A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="255.52mm" wi="163.15mm" file="US20230006925A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="255.52mm" wi="163.49mm" file="US20230006925A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="245.03mm" wi="130.30mm" file="US20230006925A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">This application is a continuation of and claims priority to U.S. patent application Ser. No. 17/032,568, filed Sep. 25, 2020, entitled &#x201c;Systems for Session-Based Routing,&#x201d; which claims priority under 35 USC 119 or 365 to Romanian Application No. A/10053/2020, filed Sep. 25, 2020, the disclosure of which is incorporated in its entirety.</p><p id="p-0003" num="0002">A session is a stream of data between a client device and a server system which has a finite duration such as a stream of digital video data, a stream of digital audio data, and so forth. For example, the client device initiates the session by communicating session request data to a load balancing system which manages data flow between backend processing devices available the server system and endpoints such as the client device. Upon receipt of the session request data, the load balancing system routes the session request data to a particular processing device of the backend processing devices and this particular processing device typically communicates reply data back to the load balancing system. This allows the load balancing system to communicate data back to the client device such that the client device receives the stream of data (e.g., the digital video data) but the client device does not have direct access to the particular processing device. Preventing the client device from having direct access to the particular processing device secures the particular processing device from the client device and also facilitates dynamic load balancing.</p><p id="p-0004" num="0003">In dynamic load balancing implementations, the load balancing system takes into account a current state of the backend processing devices and routes the session request data to the particular processing device based on the current state of the backend processing devices. In a first state of the backend processing devices, the particular processing device has excess computational capacity while other processing devices require additional computational capacity. The availability of this computational capacity is dynamic such that in a second state of the backend processing devices, the particular processing device requires additional capacity and the other processing devices have excess computational capacity. By routing the session data based on current states of the backend processing devices in this way, the load balancing system is capable of leveraging multiple different backend processing devices during the session.</p><p id="p-0005" num="0004">In an example, the load balancing system receives session update data from the client device during the session and the load balancing system routes the session update data to a different processing device. The different processing device communicates reply data back to the load balancing system which communicates data directly to the client device. This is possible because the particular processing device and the different processing device are capable of communicating and synchronizing. For example, the different processing device communicates data to the particular processing device and the particular processing device communicates data to the different processing device. Although this communication between the backend processing devices facilitates use of multiple different processing devices as part of the session, these communications and synchronizations also increase network latency, consume computational resources, and so forth.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0006" num="0005">Techniques and systems are described for session-based routing. In an example, a computing device implements a routing system to receive session data describing a session ID for a session as a character sequence including non-embedded characters and at least one embedded character at a pre-determined index of the character sequence. In one example, the routing system extracts the at least one embedded character from the pre-determined index.</p><p id="p-0007" num="0006">The routing system determines a processing device configuration corresponding to the at least one embedded character from ledger data describing a current processing device configuration and previous processing device configurations. For example, the routing system identifies a particular processing device based on the previous processing device configuration and the non-embedded characters of the character sequence. The routing system maps the session data to the particular processing device in this example.</p><p id="p-0008" num="0007">This Summary introduces a selection of concepts in a simplified form that are further described below in the Detailed Description. As such, this Summary is not intended to identify essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008">The detailed description is described with reference to the accompanying figures. Entities represented in the figures are indicative of one or more entities and thus reference is made interchangeably to single or plural forms of the entities in the discussion.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an illustration of an environment in an example implementation that is operable to employ digital systems and techniques for session-based routing as described herein.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a system in an example implementation showing operation of a routing module for session-based routing.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIGS. <b>3</b>A and <b>3</b>B</figref> illustrate an example of embedding a version identifier of a current processing device configuration in a session ID and using a version identifier of a processing device configuration embedded in a session ID for session-based routing.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow diagram depicting a procedure in an example implementation in which session update data is received describing a session ID and the session update data is mapped to a particular processing device based on the session ID.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flow diagram depicting a procedure in an example implementation in which session request data is received describing a request for a session ID of a session and session update data is mapped to a particular processing device based on the session ID.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example representation of multiple pre-determined indices of a character sequence of a session ID.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example representation of updating ledger data by removing previous processing device configurations from the ledger data based on a maximum processing device configuration age.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example representation of session-based routing with different processing device configurations.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates an example system that includes an example computing device that is representative of one or more computing systems and/or devices for implementing the various techniques described herein.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><heading id="h-0005" level="1">Overview</heading><p id="p-0019" num="0018">Conventional dynamic load balancing systems route streams of data or sessions between client device endpoints and backend processing devices available to a server system. Because the backend processing devices of conventional systems communicate and synchronize, a single session may be associated with multiple different backend processing devices. Although this communication between the backend processing devices facilitates use of multiple different processing devices as part of the single session, these communications and synchronizations also increase consumption of network and computational resources.</p><p id="p-0020" num="0019">To overcome the limitations of conventional systems, techniques and systems are described for session-based routing. In one example, a computing device implements a routing system to receive session data of a session that describes a session ID. The session ID is a character sequence that includes non-embedded characters and at least one embedded character at a pre-determined index of the character sequence.</p><p id="p-0021" num="0020">The routing system extracts the at least one embedded character from the pre-determined index and determines a previous processing device configuration corresponding to the at least one embedded character from ledger data describing a current processing device configuration and previous processing device configurations. For example, the at least one embedded character describes a configuration version identifier and the previous processing device configuration has a same version as the version identifier. The routing system uses the previous processing device configuration and the non-embedded characters of the session ID to identify a particular processing device of a plurality of processing devices to receive the session data.</p><p id="p-0022" num="0021">In one example, the routing system performs a hashing operation on the non-embedded characters. In this example, the routing system identifies the particular processing device by performing a modulo operation on a result of the hashing operation. The routing system then maps the session data to the particular processing device.</p><p id="p-0023" num="0022">Because the routing system is capable of identifying the particular processing device using the session ID and the ledger data, the particular processing device does not need to communicate and/or synchronize with other processing devices of the plurality of processing devices. This improves conventional load balancing technology that relies on communications and synchronizations between backend processing devices for session-based routing because these additional communications consume additional network resources, create additional device dependencies, increase network latency, etc. Since the described systems are capable of mapping session data between client devices and backend processing devices through use of the session IDs and the ledger data, these systems are usable for routing in any environment including environments in which backend processing devices do not communicate with other backend processing devices.</p><p id="p-0024" num="0023">By using the session ID and the ledger data in this manner, the described systems are capable of avoiding synchronization altogether which significantly improves operation of systems that do not have synchronization capability. For example, systems that are primarily used for failover and disaster scenarios are not yet capable of such synchronization. For these systems, use of the described systems and techniques provides the benefits associated with synchronization functionality without the design and maintenance cost of adding the synchronization functionality. The described systems leverage the session IDs and the ledger data to provide additional functionality as well.</p><p id="p-0025" num="0024">For example, the routing system leverages the session IDs and the ledger data to direct a specific session to a specific processing device of a plurality of available processing devices. This is particularly useful for monitoring a canary release which is a new version of an existing application. In this example, the routing system maps some sessions to a canary processing device which has the new version of the existing application. The routing system maps other sessions to a non-canary processing device which has the existing application. Performance of the canary processing device is compared to performance of the non-canary processing device to validate the new version of the existing application before including this new version in the plurality of available processing devices.</p><p id="p-0026" num="0025">In another example, the routing system leverages the session IDs and/or the ledger data to drain a processing device before decommissioning the processing device. In this example, the routing system uses session durations along with the ledger data to ensure that all sessions mapped to the processing device are complete. Once these sessions have completed, the routing system decommissions the processing device without impacting other sessions mapped to other processing devices. In a similar manner, the routing system drains a processing device configuration by draining all of the processing devices included in the processing device configuration. The routing system then decommissions the processing device configuration and updates the ledger data to remove the decommissioned processing device configuration. Thus, the described systems facilitate scaling of processing device configurations such that capacity is increasable or decreasable in substantially real time without affecting existing sessions.</p><heading id="h-0006" level="1">Term Examples</heading><p id="p-0027" num="0026">As used herein, the term &#x201c;processing device&#x201d; refers to a defined amount of computing capacity of at least one computing device. By way of example, a processing device is a single physical server or multiple physical servers. In an example, a processing device is a defined amount of computing capacity providable by multiple different computing devices &#x201c;over the cloud.&#x201d;</p><p id="p-0028" num="0027">As used herein, the term &#x201c;processing device configuration&#x201d; refers to a specific set or group of processing devices. By way of example, a processing device configuration includes a single processing device or multiple processing devices.</p><p id="p-0029" num="0028">As used herein, the term &#x201c;session&#x201d; refers to a finite duration event during which data is communicated between at least one client device and a processing device via a network.</p><p id="p-0030" num="0029">As used herein, the term &#x201c;session ID&#x201d; refers to a character sequence having non-embedded characters and at least one embedded character at a pre-determined index of the character sequence. A length of this character sequence is fixed in one example and this length is variable in another example.</p><p id="p-0031" num="0030">In the following discussion, an example environment is first described that employs examples of techniques described herein. Example procedures are also described which are performable in the example environment as well as other environments. Consequently, performance of the example procedures is not limited to the example environment and the example environment is not limited to performance of the example procedures.</p><heading id="h-0007" level="1">Example Environment</heading><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an illustration of an environment <b>100</b> in an example implementation that is operable to employ digital systems and techniques as described herein. The illustrated environment <b>100</b> includes a computing device <b>102</b> connected to a network <b>104</b>. The computing device <b>102</b> is configurable as a desktop computer, a laptop computer, a mobile device (e.g., assuming a handheld configuration such as a tablet or mobile phone), and so forth. Thus, the computing device <b>102</b> is capable of ranging from a full resource device with substantial memory and processor resources (e.g., personal computers, game consoles) to a low-resource device with limited memory and/or processing resources (e.g., mobile devices). In some examples, the computing device <b>102</b> is representative of a plurality of different devices such as multiple servers utilized to perform operations &#x201c;over the cloud.&#x201d;</p><p id="p-0033" num="0032">As shown, the illustrated environment <b>100</b> includes a client device <b>106</b> and backend capacity <b>108</b> which are also connected to the network <b>104</b>. Although a single client device <b>106</b> is shown, it is to be understood that in some examples the client device <b>106</b> is representative of multiple client devices <b>106</b>. The backend capacity <b>108</b> is illustrated to include processing devices <b>110</b>-<b>114</b> in an example processing device configuration. For example, the backend capacity <b>108</b> is available &#x201c;over the cloud&#x201d; and the backend capacity <b>108</b> is therefore scalable based on capacity demand. In one example, the backend capacity <b>108</b> is down scalable to include only processing device <b>110</b>. This downscaled backend capacity <b>108</b> is up scalable to include the processing devices <b>110</b>-<b>114</b> and/or additional processing devices.</p><p id="p-0034" num="0033">The computing device <b>102</b> includes a storage device <b>116</b> and a routing module <b>118</b>. The storage device <b>116</b> is illustrated to include ledger data <b>120</b> which describes processing device configurations of the backend capacity <b>108</b> such as a current processing device configuration of the backend capacity <b>108</b> and previous processing device configurations of the backend capacity <b>108</b>. The ledger data <b>120</b> also describes a version identifier for each of these processing device configurations. In one example, each version identifier is unique and is usable to identify a particular processing device configuration. The computing device <b>102</b> implements the routing module <b>118</b> to process the ledger data <b>120</b> as part of session-based routing in the illustrated example.</p><p id="p-0035" num="0034">As illustrated, the client device <b>106</b> includes a communication module <b>122</b>, and the client device <b>106</b> implements the communication module <b>122</b> to transmit and/or receive data via the network <b>104</b>. In one example, the client device <b>106</b> implements the communication module <b>122</b> to transmit session data <b>124</b> to the computing device <b>102</b> via the network <b>104</b>. In some examples, the session data <b>124</b> includes session request data describing a request for a session ID and session update data describing the session ID. The session ID is character sequence that includes non-embedded characters and at least one embedded character at a pre-determined index of the character sequence.</p><p id="p-0036" num="0035">The routing module <b>118</b> receives that session data <b>124</b> and processes the session data <b>124</b> and the ledger data <b>120</b>. In an example in which the session data <b>124</b> includes session request data describing a request for a session ID of a session, the routing module <b>118</b> generates the session ID as a character sequence including non-embedded characters. In this example, the routing module <b>118</b> embeds at least one character at a pre-determined index of the character sequence. For example, the at least one character describes a version identifier of a current processing device configuration of the backend capacity <b>108</b>. The routing module <b>118</b> maps the session request data to the backend capacity <b>108</b> based on the version identifier.</p><p id="p-0037" num="0036">This is illustrated by the computing device <b>102</b> transmitting processing device data <b>126</b> to the backend capacity <b>108</b>. The processing device data <b>126</b> describes one of the processing devices <b>110</b>-<b>114</b>, and the backend capacity <b>108</b> routes the session request data to the processing device described by the processing device data <b>126</b>. In one example, the routing module <b>118</b> determines a particular processing device of the processing devices <b>110</b>-<b>114</b> using the non-embedded characters of the session ID and the current processing device configuration. The routing module <b>118</b> then generates the processing device data <b>126</b> as describing the particular processing device of the processing devices <b>110</b>-<b>114</b>.</p><p id="p-0038" num="0037">In an example in which the session data <b>124</b> includes session update data describing a session ID as a character sequence including non-embedded characters and at least one embedded character at a pre-determined index of the character sequence, the routing module <b>118</b> extracts the at least one embedded character from the pre-determined index and identifies a processing device configuration that corresponds to the at least one embedded character from the ledger data <b>120</b>. In this example, the routing module <b>118</b> maps the session update data to the backend capacity <b>108</b> based on the processing device configuration. For example, the routing module <b>118</b> determines a particular processing device of the processing devices <b>110</b>-<b>114</b> by performing a hashing operation on the non-embedded characters of the session ID and performing a modulo operation on a result of the hashing operation. The routing module <b>118</b> then generates the processing device data <b>126</b> as describing the particular processing device of the processing devices <b>110</b>-<b>114</b>.</p><p id="p-0039" num="0038">Consider an example of session-based routing in which the backend capacity <b>108</b> initially only includes the processing device <b>110</b>. In this example, the client device <b>106</b> implements the communication module <b>122</b> to transmit the session data <b>124</b> to the computing device <b>102</b> via the network <b>104</b>. The computing device <b>102</b> implements the routing module <b>118</b> to process the session data <b>124</b> which describes a session ID as a character sequence including non-embedded characters and at least one embedded character at a pre-determined index of the character sequence.</p><p id="p-0040" num="0039">The routing module <b>118</b> extracts the at least one embedded character from the pre-determined index. The routing module <b>118</b> then processes the ledger data <b>120</b> and determines a particular configuration of the processing devices <b>110</b>-<b>114</b> that corresponds to the at least one embedded character. In on example, the at least one embedded character describes a version identifier of the particular configuration of the processing devices <b>110</b>-<b>114</b>. Using this particular configuration and the non-embedded characters of the session ID, the routing module <b>118</b> identifies the processing device <b>110</b> and the routing module <b>118</b> generates the processing device data <b>126</b> as describing the processing device <b>110</b>.</p><p id="p-0041" num="0040">The session data <b>124</b> is mapped to the processing device <b>110</b>. After this mapping, the backend capacity <b>108</b> is modified to include processing device <b>112</b> and processing device <b>114</b> but the backend capacity <b>108</b> no longer includes the processing device <b>110</b>. For example, the routing module <b>118</b> removes the processing device <b>110</b> from the backend capacity <b>108</b> to decommission the processing device <b>110</b>.</p><p id="p-0042" num="0041">The client device <b>106</b> transmits another instance of the session data <b>124</b> to the computing device <b>102</b> and the routing module <b>118</b> processes the session data <b>124</b> which describes the session ID as the character sequence including the non-embedded characters and the at least one embedded character at the pre-determined index of the character sequence. The routing module <b>118</b> extracts the at least one embedded character and processes the ledger data <b>120</b> to identify the particular configuration of the processing devices <b>110</b>-<b>114</b> based on the at least one embedded character. Using the particular configuration of the processing devices <b>110</b>-<b>114</b> and the non-embedded characters of the character sequence, the routing module <b>118</b> identifies the processing device <b>110</b> for receiving the session data <b>124</b>.</p><p id="p-0043" num="0042">However, in this example the processing device <b>110</b> is no longer included in the backend capacity <b>108</b>. If the routing module <b>118</b> maps the session data <b>124</b> to the processing device <b>112</b> or the processing device <b>114</b>, then some portions of the session will be included in the processing device <b>110</b> and other portions of the session will be included in the processing device <b>112</b> and/or the processing device <b>114</b>. The routing module <b>118</b> routes the session data <b>124</b> to the processing device <b>110</b> even though the processing device <b>110</b> is no longer included in the backend capacity <b>108</b> in this example. By routing the session data <b>124</b> to the processing device <b>110</b> in this way, the routing module <b>118</b> ensures that all portions of the session will be included in the processing device <b>110</b>.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a system <b>200</b> in an example implementation showing operation of a routing module <b>118</b>. The routing module <b>118</b> is illustrated to include an embedding module <b>202</b>, an extraction module <b>204</b>, a ledger module <b>206</b>, and a processing device module <b>208</b>. The routing module <b>118</b> receives the session data <b>124</b> which is illustrated to include session request data <b>210</b> and session update data <b>212</b>. The session request data <b>210</b> describes a request for a session ID of a session. The session update data <b>212</b> describes an update to the session and the session ID.</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIGS. <b>3</b>A and <b>3</b>B</figref> illustrate an example of embedding a version identifier of a current processing device configuration in a session ID and using a version identifier of a processing device configuration embedded in a session ID for session-based routing. <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> illustrates a representation <b>300</b> of embedding a version identifier of a current processing device configuration in a session ID. <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> illustrates a representation <b>302</b> of using a version identifier of a processing device configuration embedded in a session ID.</p><p id="p-0046" num="0045">As shown in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the embedding module <b>202</b> receives the session request data <b>210</b> describing the request for the session ID and the embedding module <b>202</b> generates a character sequence <b>304</b> including non-embedded characters <b>306</b> in response to receiving the session request data <b>210</b>. The character sequence <b>304</b> also includes a pre-determined index <b>308</b> which includes two characters in the illustrated example. The embedding module <b>202</b> also receives the ledger data <b>120</b> which is illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> as a ledger <b>310</b> that includes a current processing device configuration <b>312</b> and a previous processing device configuration <b>314</b>. The previous processing device configuration <b>314</b> has a version identifier &#x201c;Version 11&#x201d; and includes the processing devices <b>110</b>-<b>114</b>. The current processing device configuration <b>312</b> has a version identifier &#x201c;Version 21&#x201d; and includes the processing device <b>114</b> as well as processing devices <b>316</b>, <b>318</b>.</p><p id="p-0047" num="0046">The embedding module <b>202</b> extracts the version identifier &#x201c;Version 21&#x201d; from the ledger <b>310</b> and generates a session ID <b>320</b> by embedding the version identifier &#x201c;Version 21&#x201d; in the character sequence <b>304</b> at the pre-determined index <b>308</b>. As shown, the embedding module <b>202</b> embeds characters <b>322</b>, <b>324</b> at the pre-determined index <b>308</b> of the session ID <b>320</b>. To do so, the embedding module <b>202</b> converts the number 21 of &#x201c;Version 21&#x201d; which is a base ten number to a hexadecimal number which is 15. The embedding module <b>202</b> embeds the version identifier in the session ID by assigning values of 1 and 5 to characters <b>322</b> and <b>324</b>, respectively.</p><p id="p-0048" num="0047">By converting the base ten number 21 of the version identifier &#x201c;Version 21&#x201d; into the hexadecimal number 15 or any base greater than ten, the embedding module <b>202</b> increases a number of unique version identifiers which can be assigned to the two characters <b>322</b>, <b>324</b>. For example, each of the two characters <b>322</b>, <b>324</b> describe 10 unique numbers in base ten but each of the two characters <b>322</b>, <b>324</b> describe 16 unique numbers in hexadecimal or base 16. In another example, the embedding module <b>202</b> could convert the base ten number 21 of the version identifier &#x201c;Version 21&#x201d; to the base 20 number of 11 and assign values of 1 and 1 to characters <b>322</b> and <b>324</b>, respectively. In this example, each of the two characters <b>322</b>, <b>324</b> are usable to describe 20 unique numbers. The embedding module generates embedded ID data <b>214</b> as describing the session ID <b>320</b>.</p><p id="p-0049" num="0048">As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the extraction module <b>204</b> receives the session update data <b>212</b> and/or the embedded ID data <b>214</b> and processes the session update data <b>212</b> and/or the embedded ID data <b>214</b> to generate version data <b>216</b>. With reference to <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, the representation <b>302</b> includes the session ID <b>320</b> which is described by the session update data <b>212</b>. As shown, the session ID <b>320</b> is a character sequence including non-embedded characters <b>306</b> and the two embedded characters <b>322</b>, <b>324</b> at the pre-determined index <b>308</b> of the character sequence. The extraction module <b>204</b> extracts the hexadecimal number 15 from the embedded characters <b>322</b>, <b>324</b> of the session ID <b>320</b> and the extraction module converts to hexadecimal number 15 to the base ten number 21 which corresponds to the version identifier &#x201c;Version 21.&#x201d; The extraction module <b>204</b> generates the version data <b>216</b> as describing &#x201c;Version 21.&#x201d;</p><p id="p-0050" num="0049">The ledger module <b>206</b> receives the version data <b>216</b> and the ledger data <b>120</b> and processes the version data <b>216</b> and/or the ledger data <b>120</b> to generate mapping data <b>218</b>. As shown in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, the ledger data <b>120</b> describes the ledger <b>310</b> which has a new current processing device configuration <b>326</b>. The processing device configuration <b>312</b> is now a previous processing device configuration along with processing device configuration <b>328</b>. The processing device configuration <b>328</b> has a version identifier &#x201c;Version 15&#x201d; and includes the processing devices <b>110</b>-<b>114</b>. The processing device configuration <b>312</b> has the version identifier &#x201c;Version 21&#x201d; and includes the processing devices <b>114</b>, <b>316</b>, <b>318</b>. The current processing device configuration <b>326</b> has a version identifier &#x201c;Version 22&#x201d; and includes processing devices <b>114</b>, <b>316</b>.</p><p id="p-0051" num="0050">The ledger module <b>206</b> processes the ledger data <b>120</b> and compares the version identifier &#x201c;Version 21&#x201d; described by the version data <b>216</b> to the version identifiers of the processing device configurations <b>326</b>, <b>312</b>, <b>328</b>. For example, the version identifier &#x201c;Version 22&#x201d; of the current processing device configuration <b>326</b> does not match the version identifier &#x201c;Version 21&#x201d; described by the version data <b>216</b>. In a similar example, the version identifier &#x201c;Version 15&#x201d; of the processing device configuration <b>328</b> does not match version identifier &#x201c;Version 21.&#x201d; However, the version identifier &#x201c;Version 21&#x201d; of the processing device configuration <b>312</b> does match the version identifier &#x201c;Version 21&#x201d; described by the version data <b>216</b>.</p><p id="p-0052" num="0051">The ledger module <b>206</b> uses the processing device configuration <b>312</b> which includes the processing devices <b>114</b>, <b>316</b>, <b>318</b> as well as a defined hashing function to generate the mapping data <b>218</b>. For example, the ledger <b>310</b> and the processing device configuration <b>312</b> indicate a hashing key and a hashing algorithm which are usable to generate the mapping data <b>218</b>. In another example, the session update ID <b>320</b> indicates the hashing key and the hashing algorithm usable to generate the mapping data <b>218</b>.</p><p id="p-0053" num="0052">The ledger module <b>206</b> performs a hashing operation using the non-embedded characters <b>306</b> according to the hashing algorithm. In one example, the ledger module <b>206</b> communicates a request for the hashing operation to the routing module <b>118</b> and the routing module <b>118</b> performs the hashing operation using the non-embedded characters <b>306</b>. The ledger module <b>206</b> performs a modulo operation on a result of the hashing operation. For example, the ledger module <b>206</b> communicates a request for the modulo operation to the routing module <b>118</b> and the routing module <b>118</b> performs the modulo operation on the result of the hashing operation. This hashing operation and subsequent modulo operation are illustrated as a hashing and modulo operation <b>330</b>. As shown in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, the ledger module <b>206</b> identifies the processing device <b>318</b> for receiving the session update data <b>212</b> based on the hashing and modulo operation <b>330</b>. The ledger module <b>206</b> generates the mapping data <b>218</b> as describing the processing device <b>318</b>.</p><p id="p-0054" num="0053">The processing device module <b>208</b> receives the mapping data <b>218</b> and processes the mapping data <b>218</b> to map the session update data <b>212</b> to the processing device <b>318</b>. For example, the processing device module <b>208</b> controls the backend capacity <b>108</b> and the processing device module <b>208</b> routes the session update data <b>212</b> to the processing device <b>318</b>. The processing device module <b>208</b> also generates configuration data <b>220</b> which describes the current processing device configuration <b>326</b> and previous processing device configurations <b>312</b>, <b>328</b>.</p><p id="p-0055" num="0054">By comparing the ledger <b>310</b> as depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> with the ledger <b>310</b> as depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, it is observable that the ledger <b>310</b> illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> is an updated version of the ledger <b>310</b> illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>. In the illustrated example, the ledger module <b>206</b> received the configuration data <b>220</b> describing the processing device configurations <b>326</b>, <b>312</b>, <b>328</b> and the ledger module <b>206</b> updated the ledger data <b>120</b> to include the new processing device configuration <b>326</b>. As shown, the ledger <b>310</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> reflects this updated ledger data <b>120</b>.</p><p id="p-0056" num="0055">Accordingly, the ledger module <b>206</b> receives the configuration data <b>220</b> and process the configuration data <b>220</b> to update the ledger data <b>120</b> with any changes to the processing device configurations <b>326</b>, <b>312</b>, <b>328</b> which includes additional processing device configurations in one example. The ledger module <b>206</b> also updates the ledger data <b>120</b> by removing processing device configurations from the ledger <b>310</b>. For example, the ledger module <b>206</b> removes processing device configurations from the ledger which are older than a maximum processing device configuration age. An example of this is described in greater detail with respect to <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0057" num="0056">In general, functionality, features, and concepts described in relation to the examples above and below are employed in the context of the example procedures described in this section. Further, functionality, features, and concepts described in relation to different figures and examples in this document are interchangeable among one another and are not limited to implementation in the context of a particular figure or procedure. Moreover, blocks associated with different representative procedures and corresponding figures herein are applicable individually, together, and/or combined in different ways. Thus, individual functionality, features, and concepts described in relation to different example environments, devices, components, figures, and procedures herein are usable in any suitable combinations and are not limited to the particular combinations represented by the enumerated examples in this description.</p><heading id="h-0008" level="1">Example Procedures</heading><p id="p-0058" num="0057">The following discussion describes techniques which are implementable utilizing the previously described systems and devices. Aspects of each of the procedures are implementable in hardware, firmware, software, or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks. In portions of the following discussion, reference is made to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>3</b></figref>. <figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow diagram depicting a procedure <b>400</b> in an example implementation in which session update data is received describing a session ID and the session update data is mapped to a particular processing device based on the session ID.</p><p id="p-0059" num="0058">Session update data is received describing a session ID for a session as a character sequence including non-embedded characters and at least one embedded character at a pre-determined index of the character sequence (block <b>402</b>). The computing device <b>102</b> implements the routing module <b>118</b> to receive the session update data in one example. The at least one embedded character is extracted from the pre-determined index (block <b>404</b>). For example, the routing module <b>118</b> extracts the at least one embedded character from the pre-determined index.</p><p id="p-0060" num="0059">A previous processing device configuration corresponding to the at least one embedded character is determined from ledger data describing a current processing device configuration and previous processing device configurations (block <b>406</b>). In one example, the computing device <b>102</b> implements the routing module <b>118</b> to determine the previous processing device configuration from the ledger data. The session update data is mapped to a particular processing device based on the previous processing device configuration and the non-embedded characters of the character sequence (block <b>408</b>). The routing module <b>118</b> maps the session update data to the particular processing device in an example.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flow diagram depicting a procedure <b>500</b> in an example implementation in which session request data is received describing a request for a session ID of a session and session update data is mapped to a particular processing device based on the session ID. Session request data is received describing a request for a session ID of a session (block <b>502</b>). For example, the routing module <b>118</b> receives the session request data. The session ID is generated (block <b>504</b>) as a character sequence including non-embedded characters. The computing device <b>102</b> implements the routing module <b>118</b> to generate the session ID in one example.</p><p id="p-0062" num="0061">A processing device configuration is determined from ledger data describing the processing device configuration and previous processing device configurations (block <b>506</b>). In an example, the routing module <b>118</b> determines the processing device configuration from the ledger data. At least one character is embedded at a pre-determined index of the character sequence (block <b>508</b>). For example, the routing module <b>118</b> embeds the at least one character at the pre-determined index of the character sequence.</p><p id="p-0063" num="0062">Session update data is received describing the session ID as the character sequence including the non-embedded characters and the at least one character embedded at the pre-determined index (block <b>510</b>). In one example, the computing device <b>102</b> implements the routing module <b>118</b> to receive the session update data. The at least one character is extracted from the pre-determined index (block <b>512</b>). For example, the routing module <b>118</b> extracts the at least one character from the pre-determined index. The session update data is mapped to a particular processing device based on the at least one character and the non-embedded characters of the character sequence (block <b>514</b>). The routing module <b>118</b> maps the session update data to the particular processing device in an example.</p><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example representation <b>600</b> of multiple pre-determined indices of a character sequence of a session ID. The representation <b>600</b> includes a session ID <b>602</b> as a character sequence including the non-embedded characters <b>306</b> and the embedded characters <b>322</b>, <b>324</b> at the pre-determined index <b>308</b> of the character sequence. As shown, embedded characters <b>322</b>, <b>324</b> have values of the hexadecimal number &#x201c;15&#x201d; which is equivalent to a base ten version identifier &#x201c;Version 21.&#x201d; The version identifier &#x201c;Version 21&#x201d; corresponds to a current processing device configuration at a time when a session associated with the session ID <b>602</b> was requested and/or initiated.</p><p id="p-0065" num="0064">In some examples, the session ID <b>602</b> includes additional pre-determined indices <b>604</b>, <b>606</b> of the character sequence. For example, additional pre-determined index <b>604</b> is usable to encode a format version that supports a variety of additional functionality. As shown, the additional pre-determined index <b>604</b> includes the hexadecimal number &#x201c;A&#x201d; which encodes the base ten number &#x201c;10&#x201d; and corresponds to &#x201c;Format Version 10.&#x201d;</p><p id="p-0066" num="0065">In one example, this format version indicates which of the characters of the character sequence are at the pre-determined index <b>308</b>. In this example, &#x201c;Format Version 10&#x201d; indicates that characters <b>322</b>, <b>324</b> are at the pre-determined index <b>308</b>. In another example, &#x201c;Format Version 10&#x201d; indicates that the additional pre-determined index <b>606</b> is included in the pre-determined index <b>308</b>. In an additional example, &#x201c;Format Version 10&#x201d; indicates that the additional pre-determined index <b>606</b> is the pre-determined index <b>308</b>.</p><p id="p-0067" num="0066">Consider an example in which the additional pre-determined index <b>604</b> is used to embed a format version of the session ID <b>602</b> within character sequence. In this example, the embedded format version indicates a number of pre-determined indices included in the session ID <b>602</b>, a length of each pre-determined index included in the session ID <b>602</b>, obfuscation data, encryption data, a duration of a session associated with the session ID <b>602</b>, a type of session associated with the session ID <b>602</b> such as whether the session is a digital audio session, a digital video session, a digital content creation session, an augmented reality session, a virtual reality session, and so forth. For example, &#x201c;Format Version 10&#x201d; indicates that the pre-determined index <b>308</b> begins at character <b>322</b> and ends at character <b>324</b>. In another example, &#x201c;Format Version 10&#x201d; indicates that the additional pre-determined index <b>606</b> includes obfuscation data. In this example, the obfuscation data describes a mask such as an XOR mask usable to deobfuscate data included in the characters <b>322</b>, <b>324</b> at the pre-determined index <b>308</b> of the character sequence.</p><p id="p-0068" num="0067">In the illustrated example, the additional predetermined index <b>606</b> includes a character having a hexadecimal number &#x201c;1&#x201d; which encodes the base ten number &#x201c;1&#x201d; and corresponds to &#x201c;Algorithm Version 1.&#x201d; For example, &#x201c;Algorithm Version 1&#x201d; indicates a particular hashing function to apply to the non-embedded characters <b>306</b> to identify a particular processing device of a particular processing device configuration version indicated by the embedded characters <b>322</b>, <b>324</b> at the pre-determined index <b>308</b> of the character sequence. In one example, &#x201c;Algorithm Version 1&#x201d; indicates a particular hashing key usable to identify the particular processing device. In another example, &#x201c;Algorithm Version 1&#x201d; indicates a location of obfuscation/deobfuscation data and/or a location of encryption/decryption data.</p><p id="p-0069" num="0068">In some examples, the additional pre-determined indices <b>604</b>, <b>606</b> are reserved for implementation of additional functionality which is being developed or will be developed. In these examples, the additional pre-determined indices <b>604</b>, <b>606</b> facilitate evolution of functionality included as part of the session ID <b>602</b>. For example, the additional pre-determined indices <b>604</b>, <b>606</b> support additional functionality as part of session-based routing and/or additional functionality for use in other applications such as other applications which leverage self-describing IDs.</p><p id="p-0070" num="0069">Consider an example in which the pre-determined index <b>308</b> is determined dynamically such as based on a length of the session ID <b>602</b>. For example, the pre-determined index <b>308</b> is not at a fixed position. In this example, the routing module <b>118</b> identifies the pre-determined index <b>308</b> using any suitable method such as extracting metadata from the session ID <b>602</b> describing the pre-determined index <b>308</b>. For example, the routing module <b>118</b> identifies the pre-determined index <b>308</b> based on a character of the session ID <b>602</b> having a unique feature regardless of where this character is disposed within the session ID <b>602</b>.</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example representation <b>700</b> of updating ledger data by removing previous processing device configurations from the ledger data based on a maximum processing device configuration age. As shown, the representation <b>710</b> includes the ledger <b>310</b> and an updated ledger <b>702</b>. For example, the routing module <b>118</b> generates the updated ledger <b>702</b> by updating the ledger data <b>120</b> based on a maximum processing device configuration age <b>704</b>. In this example, the maximum processing device configuration age <b>704</b> is illustrated as one week. Consider an example in which the routing module <b>118</b> determines the maximum device processing configuration age <b>704</b> based on a duration of a session associated with processing devices included in a processing device configuration. If multiple sessions are mapped to processing devices of the processing device configuration, then the routing module <b>118</b> determines the maximum processing device configuration age <b>704</b> based on a session having a longest duration of the sessions included in the multiple sessions.</p><p id="p-0072" num="0071">The ledger <b>310</b> includes the current processing device configuration <b>326</b>, the processing device configuration <b>312</b>, a previous processing device configuration <b>706</b>, and an additional previous processing device configuration <b>708</b>. In one example, the routing module <b>118</b> determines the maximum processing device configuration age <b>704</b> based on a longest duration session of multiple sessions associated with processing devices of the current processing device configuration <b>326</b>, the processing device configuration <b>312</b>, the previous processing device configuration <b>706</b>, and the additional previous processing device configuration <b>708</b>. Consider an example in which a duration of the longest duration session associated with the processing devices of the processing device configurations <b>312</b>, <b>326</b>, <b>706</b>, <b>708</b> is 24 hours.</p><p id="p-0073" num="0072">In this example, routing module <b>118</b> determines the maximum processing device configuration age <b>704</b> to be one week which ensures that the 24-hour duration session will be completed during the maximum processing device configuration age <b>704</b>. For example, the maximum processing device configuration age <b>704</b> has a temporal margin of six days or 144 hours of time which exceeds the duration of the 24-hour duration session. In another example in which the duration of the longest duration session associated with the processing devices of the processing device configurations <b>312</b>, <b>326</b>, <b>706</b>, <b>708</b> is 24 hours, the routing module <b>118</b> determines the maximum processing device configuration age <b>704</b> to be 36 hours.</p><p id="p-0074" num="0073">Regardless of a manner in which the routing module <b>118</b> determines the maximum processing device configuration age <b>704</b>, the routing module <b>118</b> compares the maximum processing device configuration age <b>704</b> to ages of the processing device configurations <b>312</b>, <b>326</b>, <b>706</b>, <b>708</b>. In the illustrated example, the routing module <b>118</b> determines that an age of the previous processing device configuration <b>706</b> is greater than the maximum processing device configuration age <b>704</b> and an age of the additional previous processing device configuration <b>708</b> is greater than the maximum processing device configuration age <b>704</b>. As shown, the routing module <b>118</b> also determines that an age of the current processing device configuration <b>326</b> is less than the maximum processing device configuration age <b>704</b> and an age of the processing device configuration <b>312</b> is less than the maximum processing device configuration age <b>704</b>.</p><p id="p-0075" num="0074">Based on these determinations, the routing module <b>118</b> updates the ledger data <b>120</b> by removing the previous processing device configuration <b>706</b> and the additional previous processing device configuration <b>708</b> from the ledger data <b>120</b>. In an example in which the age of the current processing device configuration <b>326</b> is greater than the maximum device configuration age <b>704</b>, the routing module <b>118</b> does not remove the current processing device configuration <b>326</b> from the ledger data <b>120</b>. This is because the routing module <b>118</b> maps new sessions to processing devices included in the current processing device configuration <b>326</b>.</p><p id="p-0076" num="0075">For example, the routing module <b>118</b> generates the updated ledger <b>702</b> based on the updated ledger data <b>120</b>. In some examples, the routing module <b>118</b> performs such updates periodically or in response to a particular event such as receiving a new current processing device indication <b>710</b>. In one example, the configuration data <b>220</b> describes the new current processing device indication <b>710</b> and the routing module <b>118</b> processes the configuration data <b>220</b> to generate the updated ledger <b>702</b> which includes a new current device configuration <b>712</b>. In response to receiving the new current processing device indication <b>710</b>, the routing module <b>118</b> updates the ledger data <b>120</b> to include the new current device configuration <b>712</b> and also updates the ledger data <b>120</b> to include the previous current processing device configuration <b>326</b> among the previous processing device configurations such as the processing device configuration <b>312</b>.</p><p id="p-0077" num="0076">Accordingly, the updated ledger <b>702</b> includes the current processing device configuration <b>712</b> and the processing device configurations <b>326</b>, <b>312</b>. By removing processing device configurations from the ledger data <b>120</b> which have ages greater than the maximum processing device configuration age <b>704</b> in this way, the routing module <b>118</b> reduces an amount of data processed in identifying a processing device configuration having a processing device which is associated with a particular session. For example, by updating the ledger data <b>120</b> in response to changes in processing device configurations such as a change to a current processing device configuration, the routing module <b>118</b> avoids maintaining a durable timer for updates to the ledger data <b>120</b>. In another example, the routing module <b>118</b> maintains the durable time for updates to the ledger data <b>120</b>.</p><p id="p-0078" num="0077">Consider an example in which the updated ledger <b>702</b> includes multiple different ledgers. In this example, rather referencing a single updated ledger <b>702</b>, the routing module <b>118</b> reference multiple different ledgers. By referencing multiple different ledgers in this way, the updated ledger <b>702</b> does not need to be updated in response to each change to the current processing device configuration. For example, each of the multiple different ledgers is updated only for changes to the current processing device configuration that are relevant to each of the multiple different ledgers.</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example representation <b>800</b> of session-based routing with different processing device configurations. The representation <b>800</b> is illustrated to include examples <b>802</b>-<b>806</b> as well as a first client device <b>808</b> and a second client device <b>810</b>. In example <b>802</b>, the first client device <b>808</b> transmits session data <b>124</b> to the computing device <b>102</b>, and the computing device <b>102</b> implements the routing module <b>118</b> to receive the session data <b>124</b>. As shown, example <b>802</b> has a first processing device configuration <b>812</b> which includes processing device <b>814</b> and processing device <b>816</b>. The routing module <b>118</b> maps the session data <b>124</b> to the processing device <b>814</b> as illustrated in the example <b>802</b>.</p><p id="p-0080" num="0079">In example <b>804</b>, the processing device configuration <b>812</b> is modified as processing device configuration <b>818</b>. The processing device configuration <b>818</b> includes the processing device <b>816</b> but no longer includes the processing device <b>814</b>. The second client device <b>810</b> transmits session data <b>124</b> to the computing device <b>102</b> and the routing module <b>118</b> maps the session data <b>124</b> to the processing device <b>816</b>.</p><p id="p-0081" num="0080">In example <b>806</b>, the first client device <b>808</b> transmits additional session data <b>124</b> to the computing device <b>102</b> but the processing device configuration <b>818</b> does not include the processing device <b>814</b> which is associated with a session described in part by the session data <b>124</b>. In this example, the routing module <b>118</b> maps the additional session data <b>124</b> to the processing device <b>814</b> even though the processing device <b>814</b> is no longer included in the processing device configuration <b>818</b>. By mapping the additional session data <b>124</b> in this way, the routing module <b>118</b> ensures that all portions of the session are included in the processing device <b>814</b>.</p><p id="p-0082" num="0081">Consider an example in which the routing module <b>118</b> encodes a version identifier of the processing device configuration <b>812</b> in embedded characters at the pre-determined index <b>308</b> of a session ID described by the session data <b>124</b> in the example <b>802</b>. In this example, the routing module <b>118</b> extracts the version identifier from the session ID in the example <b>806</b> and identifies the processing device configuration <b>812</b> from the ledger data <b>120</b>. The routing module <b>118</b> then identifies the processing device <b>814</b> based on the processing device configuration <b>812</b> and maps the additional session data <b>124</b> to the processing device <b>814</b> even though the processing device <b>814</b> is no longer included in the processing device configuration <b>818</b>.</p><heading id="h-0009" level="1">Example System and Device</heading><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates an example system <b>900</b> that includes an example computing device that is representative of one or more computing systems and/or devices that are usable to implement the various techniques described herein. This is illustrated through inclusion of the routing module <b>118</b>. The computing device <b>902</b> includes, for example, a server of a service provider, a device associated with a client (e.g., a client device), an on-chip system, and/or any other suitable computing device or computing system.</p><p id="p-0084" num="0083">The example computing device <b>902</b> as illustrated includes a processing system <b>904</b>, one or more computer-readable media <b>906</b>, and one or more I/O interfaces <b>908</b> that are communicatively coupled, one to another. Although not shown, the computing device <b>902</b> further includes a system bus or other data and command transfer system that couples the various components, one to another. For example, a system bus includes any one or combination of different bus structures, such as a memory bus or memory controller, a peripheral bus, a universal serial bus, and/or a processor or local bus that utilizes any of a variety of bus architectures. A variety of other examples are also contemplated, such as control and data lines.</p><p id="p-0085" num="0084">The processing system <b>904</b> is representative of functionality to perform one or more operations using hardware. Accordingly, the processing system <b>904</b> is illustrated as including hardware elements <b>910</b> that are be configured as processors, functional blocks, and so forth. This includes example implementations in hardware as an application specific integrated circuit or other logic device formed using one or more semiconductors. The hardware elements <b>910</b> are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example, processors are comprised of semiconductor(s) and/or transistors (e.g., electronic integrated circuits (ICs)). In such a context, processor-executable instructions are, for example, electronically-executable instructions.</p><p id="p-0086" num="0085">The computer-readable media <b>906</b> is illustrated as including memory/storage <b>912</b>. The memory/storage <b>912</b> represents memory/storage capacity associated with one or more computer-readable media. In one example, the memory/storage component <b>912</b> includes volatile media (such as random access memory (RAM)) and/or nonvolatile media (such as read only memory (ROM), Flash memory, optical disks, magnetic disks, and so forth). In another example, the memory/storage component <b>912</b> includes fixed media (e.g., RAM, ROM, a fixed hard drive, and so on) as well as removable media (e.g., Flash memory, a removable hard drive, an optical disc, and so forth). The computer-readable media <b>906</b> is configurable in a variety of other ways as further described below.</p><p id="p-0087" num="0086">Input/output interface(s) <b>908</b> are representative of functionality to allow a user to enter commands and information to computing device <b>902</b>, and also allow information to be presented to the user and/or other components or devices using various input/output devices. Examples of input devices include a keyboard, a cursor control device (e.g., a mouse), a microphone, a scanner, touch functionality (e.g., capacitive or other sensors that are configured to detect physical touch), a camera (e.g., which employs visible or non-visible wavelengths such as infrared frequencies to recognize movement as gestures that do not involve touch), and so forth. Examples of output devices include a display device (e.g., a monitor or projector), speakers, a printer, a network card, tactile-response device, and so forth. Thus, the computing device <b>902</b> is configurable in a variety of ways as further described below to support user interaction.</p><p id="p-0088" num="0087">Various techniques are described herein in the general context of software, hardware elements, or program modules. Generally, such modules include routines, programs, objects, elements, components, data structures, and so forth that perform particular tasks or implement particular abstract data types. The terms &#x201c;module,&#x201d; &#x201c;functionality,&#x201d; and &#x201c;component&#x201d; as used herein generally represent software, firmware, hardware, or a combination thereof. The features of the techniques described herein are platform-independent, meaning that the techniques are implementable on a variety of commercial computing platforms having a variety of processors.</p><p id="p-0089" num="0088">Implementations of the described modules and techniques are storable on or transmitted across some form of computer-readable media. For example, the computer-readable media includes a variety of media that that is accessible to the computing device <b>902</b>. By way of example, and not limitation, computer-readable media includes &#x201c;computer-readable storage media&#x201d; and &#x201c;computer-readable signal media.&#x201d;</p><p id="p-0090" num="0089">&#x201c;Computer-readable storage media&#x201d; refers to media and/or devices that enable persistent and/or non-transitory storage of information in contrast to mere signal transmission, carrier waves, or signals per se. Thus, computer-readable storage media refers to non-signal bearing media. The computer-readable storage media includes hardware such as volatile and non-volatile, removable and non-removable media and/or storage devices implemented in a method or technology suitable for storage of information such as computer readable instructions, data structures, program modules, logic elements/circuits, or other data. Examples of computer-readable storage media include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, hard disks, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or other storage device, tangible media, or article of manufacture suitable to store the desired information and which are accessible to a computer.</p><p id="p-0091" num="0090">&#x201c;Computer-readable signal media&#x201d; refers to a signal-bearing medium that is configured to transmit instructions to the hardware of the computing device <b>902</b>, such as via a network. Signal media typically embodies computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as carrier waves, data signals, or other transport mechanism. Signal media also include any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media.</p><p id="p-0092" num="0091">As previously described, hardware elements <b>910</b> and computer-readable media <b>906</b> are representative of modules, programmable device logic and/or fixed device logic implemented in a hardware form that is employable in some embodiments to implement at least some aspects of the techniques described herein, such as to perform one or more instructions. Hardware includes components of an integrated circuit or on-chip system, an application-specific integrated circuit (ASIC), a field-programmable gate array (FPGA), a complex programmable logic device (CPLD), and other implementations in silicon or other hardware. In this context, hardware operates as a processing device that performs program tasks defined by instructions and/or logic embodied by the hardware as well as a hardware utilized to store instructions for execution, e.g., the computer-readable storage media described previously.</p><p id="p-0093" num="0092">Combinations of the foregoing are also employable to implement various techniques described herein. Accordingly, software, hardware, or executable modules are implementable as one or more instructions and/or logic embodied on some form of computer-readable storage media and/or by one or more hardware elements <b>910</b>. For example, the computing device <b>902</b> is configured to implement particular instructions and/or functions corresponding to the software and/or hardware modules. Accordingly, implementation of a module that is executable by the computing device <b>902</b> as software is achieved at least partially in hardware, e.g., through use of computer-readable storage media and/or hardware elements <b>910</b> of the processing system <b>904</b>. The instructions and/or functions are executable/operable by one or more articles of manufacture (for example, one or more computing devices <b>902</b> and/or processing systems <b>904</b>) to implement techniques, modules, and examples described herein.</p><p id="p-0094" num="0093">The techniques described herein are supportable by various configurations of the computing device <b>902</b> and are not limited to the specific examples of the techniques described herein. This functionality is also implementable entirely or partially through use of a distributed system, such as over a &#x201c;cloud&#x201d; <b>914</b> as described below.</p><p id="p-0095" num="0094">The cloud <b>914</b> includes and/or is representative of a platform <b>916</b> for resources <b>918</b>. The platform <b>916</b> abstracts underlying functionality of hardware (e.g., servers) and software resources of the cloud <b>914</b>. For example, the resources <b>918</b> include applications and/or data that are utilized while computer processing is executed on servers that are remote from the computing device <b>902</b>. In some examples, the resources <b>918</b> also include services provided over the Internet and/or through a subscriber network, such as a cellular or Wi-Fi network.</p><p id="p-0096" num="0095">The platform <b>916</b> abstracts the resources <b>918</b> and functions to connect the computing device <b>902</b> with other computing devices. In some examples, the platform <b>916</b> also serves to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the resources that are implemented via the platform. Accordingly, in an interconnected device embodiment, implementation of functionality described herein is distributable throughout the system <b>900</b>. For example, the functionality is implementable in part on the computing device <b>902</b> as well as via the platform <b>916</b> that abstracts the functionality of the cloud <b>914</b>.</p><heading id="h-0010" level="1">Conclusion</heading><p id="p-0097" num="0096">Although implementations of systems for session-based routing have been described in language specific to structural features and/or methods, it is to be understood that the appended claims are not necessarily limited to the specific features or methods described. Rather, the specific features and methods are disclosed as example implementations of systems for session-based routing, and other equivalent features and methods are intended to be within the scope of the appended claims. Further, various different examples are described and it is to be appreciated that each described example is implementable independently or in connection with one or more other described examples.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>receiving, by a computing device via a network, session update data describing a session ID for a session as a character sequence including non-embedded characters and an embedded character;</claim-text><claim-text>mapping, by the computing device, the session update data to a processing device based on the non-embedded characters and the embedded character of the character sequence; and</claim-text><claim-text>transmitting, by the computing device via the network, the session update data to the processing device.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising determining a previous processing device configuration corresponding to the embedded character.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method as described in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the processing device is included in the previous processing device configuration and the processing device is not included in a current processing device configuration.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising deobfuscating the embedded character.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising decrypting the embedded character.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the embedded character describes at least one of a version identifier of a previous processing device configuration, an encryption algorithm version identifier, or a hashing algorithm version identifier.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising performing a hashing operation using the non-embedded characters.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method as described in <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising performing a modulo operation on a result of the hashing operation.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising accessing ledger data of a ledger describing a current processing device configuration and previous processing device configurations.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method as described in <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>determining that the session is complete; and</claim-text><claim-text>updating the ledger data based on determining that the session is complete.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A system comprising:<claim-text>a memory component; and</claim-text><claim-text>a processing device coupled to the memory component, the processing device to perform operations comprising:<claim-text>receiving session update data describing a session ID for a session as a character sequence including non-embedded characters and at least one embedded character;</claim-text><claim-text>mapping the session update data to a processing device based on the non-embedded characters and the at least one embedded character of the character sequence; and</claim-text><claim-text>transmitting the session update data to the processing device.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system as described in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the operations further comprise:<claim-text>determining that the session is complete; and</claim-text><claim-text>updating ledger data of a ledger based on determining that the session is complete.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system as described in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the operations further comprise decrypting the at least one embedded character.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system as described in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the operations further comprise deobfuscating the at least one embedded character.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system as described in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the operations further comprise performing a hashing operation using the non-embedded characters.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A non-transitory computer-readable storage medium storing executable instructions, which when executed by a processing device, cause the processing device to perform operations comprising:<claim-text>receiving session update data describing a session ID for a session as a character sequence including non-embedded characters and an embedded character;</claim-text><claim-text>mapping the session update data to a processing device based on the non-embedded characters and the embedded character of the character sequence; and</claim-text><claim-text>transmitting the session update data to the processing device.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer-readable storage medium as described in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the operations further comprise:<claim-text>determining that the session is complete; and</claim-text><claim-text>updating ledger data of a ledger based on determining that the session is complete</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer-readable storage medium as described in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the operations further comprise decrypting the embedded character.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer-readable storage medium as described in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the operations further comprise deobfuscating the embedded character.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable storage medium as described in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the operations further comprise performing a hashing operation using the non-embedded characters.</claim-text></claim></claims></us-patent-application>