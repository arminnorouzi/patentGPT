<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004349A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004349</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17697516</doc-number><date>20220317</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>KR</country><doc-number>10-2021-0086614</doc-number><date>20210701</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>487</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>485</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>556</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>72</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>487</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>485</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>556</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>726</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">OPERATING METHOD OF FLOATING POINT OPERATION CIRCUIT AND INTEGRATED CIRCUIT INCLUDING FLOATING POINT OPERATION CIRCUIT</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>SAMSUNG ELECTRONICS CO., LTD.</orgname><address><city>SUWON-SI</city><country>KR</country></address></addressbook><residence><country>KR</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Kim</last-name><first-name>Joong Baik</first-name><address><city>Seoul</city><country>KR</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Jung</last-name><first-name>Yongmin</first-name><address><city>Anyang-si</city><country>KR</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An operating method of a floating point operation circuit includes, in response to receiving a first instruction, generating a first output by performing a fused multiplication and addition operation on a first input, a second input, and a third input. The method further includes, in response to receiving a second instruction, generating a second output by inverting one input of a fourth input, a fifth input, and a sixth input. Generating the second output includes generating a transform factor and a simplified value from the one input.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="107.78mm" wi="97.28mm" file="US20230004349A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="135.21mm" wi="99.31mm" file="US20230004349A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="195.50mm" wi="135.21mm" orientation="landscape" file="US20230004349A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="191.60mm" wi="133.10mm" file="US20230004349A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="226.57mm" wi="159.51mm" orientation="landscape" file="US20230004349A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="211.58mm" wi="143.09mm" file="US20230004349A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="226.57mm" wi="159.51mm" orientation="landscape" file="US20230004349A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="118.96mm" wi="127.08mm" file="US20230004349A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="172.64mm" wi="140.12mm" file="US20230004349A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="227.75mm" wi="159.51mm" orientation="landscape" file="US20230004349A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="209.55mm" wi="142.49mm" file="US20230004349A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="226.91mm" wi="159.51mm" orientation="landscape" file="US20230004349A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="100.25mm" wi="90.34mm" file="US20230004349A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="216.49mm" wi="158.50mm" orientation="landscape" file="US20230004349A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application claims priority under 35 U.S.C. &#xa7; 119 to Korean Patent Application No. 10-2021-0086614 filed on Jul. 1, 2021, in the Korean Intellectual Property Office, the disclosure of which is incorporated by reference herein in its entirety.</p><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">Embodiments of the present disclosure relate to an electronic device, and more particularly, to an operating method of a floating point operation circuit performing a fused multiplication and addition operation and a division operation, and an integrated circuit including the floating point operation circuit.</p><heading id="h-0003" level="1">DISCUSSION OF RELATED ART</heading><p id="p-0004" num="0003">A floating point operation circuit may perform an operation on floating point values. Among various operations, the floating point operation circuit may support a fused multiplication and addition operation with high versatility. In various applications, any other operations other than the fused multiplication and addition operation may be used. For example, some applications may utilize a division operation. To implement the division operation, a floating point operation circuit dedicated for division, that is, a hardware accelerator, may be implemented.</p><p id="p-0005" num="0004">The hardware accelerator provides a fast speed, but utilizes a large area and has high costs. Accordingly, in applications in which the area and costs are limited, the implementation of the hardware accelerator may be limited. Also, the hardware accelerator has low flexibility.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">Embodiments of the present disclosure provide an operating method of a floating point operation circuit supporting a division operation at a fast speed by using the floating point operation circuit implemented to perform a fused multiplication and addition operation, and an integrated circuit including the floating point operation circuit.</p><p id="p-0007" num="0006">According to an embodiment, an operating method of a floating point operation circuit includes, in response to a first instruction being received, generating a first output by performing a fused multiplication and addition operation on a first input, a second input, and a third input, and in response to receiving a second instruction, generating a second output by inverting one input of a fourth input, a fifth input, and a sixth input. Generating the second output includes generating a transform factor and a simplified value from the one input.</p><p id="p-0008" num="0007">According to an embodiment, an operating method of a floating point operation circuit includes calculating an inverse value of a divisor of a division operation, based on a second operation mode, and performing a multiplication operation of a dividend and an inverse value of the divisor, based on a first operation mode. Calculating the inverse value of the divisor of the division operation, based on the second operation mode, includes generating a transform factor and a simplified value from the divisor, in the second operation mode.</p><p id="p-0009" num="0008">According to an embodiment, an integrated circuit includes a first register, a second register, a third register, a fourth register, a fifth register, and a floating point operation circuit. In a first operation mode, the floating point operation circuit generates a first intermediate value by multiplying a value of the first register and a value of the second register together, generates an output value by adding a value of the third register and the first intermediate value, and stores the output value in the fourth register. In a first phase of a second operation mode, the floating point operation circuit generates a simplified value and a transform factor from a value of the second register, stores the simplified value in the fourth register, and stores the transform factor in the fifth register. A value having a sign opposite to a sign of a value stored in the fourth register is transferred to the first register.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0010" num="0009">The above and other features of the present disclosure will become more apparent by describing in detail embodiments thereof with reference to the accompanying drawings, in which:</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an application processor according to an embodiment of the present disclosure.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a digital signal processing core according to an embodiment of the present disclosure.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example of an operating method of a floating point operation circuit according to an embodiment of the present disclosure.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example of a format of a floating point value processed by a floating point operation circuit.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a floating point operation circuit performing fused multiplication and addition and supporting division, according to an embodiment of the present disclosure.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example in which a floating point operation circuit of <figref idref="DRAWINGS">FIG. <b>5</b></figref> performs a fused multiplication and addition operation.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example of a process in which calculation is performed by a floating point operation circuit depending on the method of <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example in which a floating point operation circuit of <figref idref="DRAWINGS">FIG. <b>5</b></figref> performs an inverse operation.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates an example of a method in which a floating point operation circuit of <figref idref="DRAWINGS">FIG. <b>5</b></figref> performs a transform operation.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates an example of a process in which transform is performed by a floating point operation circuit depending on the method of <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates an example of a method in which a floating point operation circuit of <figref idref="DRAWINGS">FIG. <b>5</b></figref> performs an inverse transform operation.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates an example of a process in which inverse transform is performed by a floating point operation circuit depending on the method of <figref idref="DRAWINGS">FIG. <b>11</b></figref>.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates an example of performing division by using a fused multiplication and addition operation of a floating point operation circuit.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a diagram illustrating a system according to an embodiment of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0025" num="0024">Embodiments of the present disclosure will be described more fully hereinafter with reference to the accompanying drawings. Like reference numerals may refer to like elements throughout the accompanying drawings.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an application processor <b>100</b> according to an embodiment of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the application processor <b>100</b> may include a central processing core <b>110</b>, a graphic processing core <b>120</b>, a neural processing core <b>130</b>, and a digital signal processing core <b>140</b>.</p><p id="p-0027" num="0026">The central processing core <b>110</b> may execute an operating system and various applications. The central processing core <b>110</b> may assign some of various tasks to the graphic processing core <b>120</b>, the neural processing core <b>130</b>, or the digital signal processing core <b>140</b>. The application processor <b>100</b> may include two or more central processing cores. The central processing core <b>110</b> may include two or more sub-cores.</p><p id="p-0028" num="0027">The graphic processing core <b>120</b> may perform tasks assigned from the central processing core <b>110</b>, for example, graphic-related tasks. The graphic processing core <b>120</b> may send a processing result of the tasks to the central processing core <b>110</b> or to external devices. The application processor <b>100</b> may include two or more graphic processing cores. The graphic processing core <b>120</b> may include two or more sub-cores.</p><p id="p-0029" num="0028">The neural processing core <b>130</b> may perform tasks assigned from the central processing core <b>110</b>, for example, tasks associated with neural network-based inference, neural network-based classification, etc. The neural processing core <b>130</b> may send a processing result of the tasks to the central processing core <b>110</b> or to external devices. The application processor <b>100</b> may include two or more neural processing cores. The neural processing core <b>130</b> may include two or more sub-cores.</p><p id="p-0030" num="0029">The digital signal processing core <b>140</b> may perform tasks assigned from the central processing core <b>110</b>, for example, tasks associated with operations for various values. The digital signal processing core <b>140</b> may send a processing result of the tasks to the central processing core <b>110</b> or to external devices. The application processor <b>100</b> may include two or more digital signal processing cores. The digital signal processing core <b>140</b> may include two or more sub-cores.</p><p id="p-0031" num="0030">The digital signal processing core <b>140</b> may include a floating point operation circuit <b>300</b>. The floating point operation circuit <b>300</b> may perform a fused multiplication and addition (FMA) operation. The digital signal processing core <b>140</b> may support a fast division operation by using the floating point operation circuit <b>300</b> implemented to perform the fused multiplication and addition (FMA) operation. That is, the digital signal processing core <b>140</b> may support a fast division operation without a floating point operation circuit implemented to perform a division operation, that is, a hardware accelerator.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a digital signal processing core <b>200</b> according to an embodiment of the present disclosure.</p><p id="p-0033" num="0032">In an embodiment, the digital signal processing core <b>200</b> may be included in the digital signal processing core <b>140</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Referring to <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref>, the digital signal processing core <b>200</b> may include, for example, a fetch circuit <b>210</b>, a decoder <b>220</b>, register files <b>230</b>, a demultiplexer <b>240</b>, a first scalar operation circuit <b>251</b>, a second scalar operation circuit <b>252</b>, a third scalar operation circuit <b>253</b>, a first vector operation circuit <b>261</b>, a second vector operation circuit <b>262</b>, and a third vector operation circuit <b>263</b>.</p><p id="p-0034" num="0033">The fetch circuit <b>210</b> may fetch an instruction INST from a source external to the digital signal processing core <b>200</b>. For example, the fetch circuit <b>210</b> may receive the instruction INST from the central processing core <b>110</b> or may receive the instruction INST from a decoder that is placed in the digital signal processing core <b>140</b>, may receive an external instruction from the central processing core <b>110</b>, and may generate the instruction INST as an internal instruction. In an embodiment, the instruction INST may originate from any component other than the central processing core <b>110</b> such as, for example, the graphic processing core <b>120</b> or the neural processing core <b>130</b>. The fetch circuit <b>210</b> may transfer the fetched instruction INST to the decoder <b>220</b>.</p><p id="p-0035" num="0034">The decoder <b>220</b> may decode the instruction INST transferred from the fetch circuit <b>210</b>. Depending on a descriptor included in the instruction INST or the type of an operation included in the instruction INST, the decoder <b>220</b> may select one operation circuit of the first scalar operation circuit <b>251</b>, the second scalar operation circuit <b>252</b>, the third scalar operation circuit <b>253</b>, the first vector operation circuit <b>261</b>, the second vector operation circuit <b>262</b>, and the third vector operation circuit <b>263</b>, and may control the demultiplexer <b>240</b> such that the operation included in the instruction INST is requested to the selected operation circuit.</p><p id="p-0036" num="0035">When the instruction INST includes values for the operation, the decoder <b>220</b> may store the values of the operation in corresponding registers (e.g., indicated by an address included in the instruction INST) of the register files <b>230</b>. The instruction INST may control the demultiplexer <b>240</b> such that registers, which are used to store input values utilized for the operation and to store an output value of the operation, from among a plurality of registers of the register files <b>230</b>, are connected with the selected operation circuit.</p><p id="p-0037" num="0036">The register files <b>230</b> may include a plurality of registers. The register files <b>230</b> may store input values and an output value(s) of the selected operation circuit. For example, the input values may be transferred from the decoder <b>220</b>, may be transferred from the central processing core <b>110</b>, or may be transferred from the decoder that generates the instruction INST as an internal instruction. The input values may be transferred to the selected operation circuit through the demultiplexer <b>240</b>. The output value(s) may be transferred to the corresponding register(s) of the registers of the register files <b>230</b> through the demultiplexer <b>240</b>.</p><p id="p-0038" num="0037">Under control of the decoder <b>220</b>, the demultiplexer <b>240</b> may arbitrate connections between the decoder <b>220</b>, the register files <b>230</b>, the first scalar operation circuit <b>251</b>, the second scalar operation circuit <b>252</b>, the third scalar operation circuit <b>253</b>, the first vector operation circuit <b>261</b>, the second vector operation circuit <b>262</b>, and the third vector operation circuit <b>263</b>.</p><p id="p-0039" num="0038">The first scalar operation circuit <b>251</b> may be implemented with a scalar-based arithmetic logic unit SCL_ALU. The first scalar operation circuit <b>251</b> may support an arithmetic operation and a logical operation of floating point values. The second scalar operation circuit <b>252</b> may be implemented with a scalar-based multiplier SCL_MUL. The second scalar operation circuit <b>252</b> may support a multiplication operation of floating point values. The third scalar operation circuit <b>253</b> may be implemented with a scalar-based floating point unit SCL_FPU. The third scalar operation circuit <b>253</b> may support operations of floating point values.</p><p id="p-0040" num="0039">The first vector operation circuit <b>261</b> may be implemented with a vector-based arithmetic logic unit VEC_ALU. The first vector operation circuit <b>261</b> may support an arithmetic operation and a logical operation of floating point values. The second vector operation circuit <b>262</b> may be implemented with a vector-based multiplier VEC_MUL. The second vector operation circuit <b>262</b> may support a multiplication operation of floating point values. The third vector operation circuit <b>263</b> may be implemented with a vector-based floating point unit VEC_FPU. The third vector operation circuit <b>263</b> may support operations of floating point values.</p><p id="p-0041" num="0040">The third vector operation circuit <b>263</b>, that is, the vector-based floating point unit VEC_FPU, may include the floating point operation circuit <b>300</b> according to an embodiment of the present disclosure. The floating point operation circuit <b>300</b> may support the fused multiplication and addition (FMA) operation and may support the division operation. In an embodiment, the floating point operation circuit <b>300</b> is disclosed as being included in the third vector operation circuit <b>263</b>. However, embodiments of the present disclosure are not limited thereto. For example, in embodiments, the floating point operation circuit <b>300</b> may be included in the third scalar operation circuit <b>253</b>, that is, the scalar-based floating point unit SCL_FPU.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example of an operating method of the floating point operation circuit <b>300</b> according to an embodiment of the present disclosure.</p><p id="p-0043" num="0042">Referring to <figref idref="DRAWINGS">FIGS. <b>2</b> and <b>3</b></figref>, in operation S<b>110</b>, the floating point operation circuit <b>300</b> may receive a first instruction. The first instruction may be an instruction requesting fused multiplication and addition (FMA).</p><p id="p-0044" num="0043">In operation S<b>120</b>, the floating point operation circuit <b>300</b> may perform the fused multiplication and addition (FMA) operation. The floating point operation circuit <b>300</b> may receive input values A, B, and C from registers storing input values from among the registers of the register files <b>230</b>. The floating point operation circuit <b>300</b> may perform an operation, which is defined by Equation 1 below, on the input values A, B, and C.</p><p id="p-0045" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>O</i>=(<i>A&#xd7;B+C</i>)<sub>B</sub>&#x2003;&#x2003;[Equation 1]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0046" num="0044">The floating point operation circuit <b>300</b> may store an output value &#x201c;O&#x201d; in a register designated to store an output value from among the registers of the register files <b>230</b>. In an embodiment, the input values A, B, and C and the output value &#x201c;O&#x201d; may be binary values. However, the floating point operation circuit <b>300</b> is not limited to the case of performing an operation on binary values. Below, an embodiment of the present disclosure will be described with reference to examples of binary values. However, embodiments of the present disclosure are not limited thereto. For example, in embodiments, the floating point operation circuit <b>300</b> may perform an operation on various values such as an octal value, a decimal value, and a hexadecimal value.</p><p id="p-0047" num="0045">In operation S<b>130</b>, the floating point operation circuit <b>300</b> may receive a second instruction. The second instruction may be an instruction different from the first instruction or may include a descriptor different from that of the first instruction. The second instruction may request an operation supporting division.</p><p id="p-0048" num="0046">In operation S<b>140</b>, the floating point operation circuit <b>300</b> may perform an inverse operation (or inverse calculation). For example, the floating point operation circuit <b>300</b> may calculate an inverse value of one of input values. When the inverse value is obtained, the floating point operation circuit <b>300</b> may perform the same operation as the division through the fused multiplication and addition (FMA) operation.</p><p id="p-0049" num="0047">In an embodiment, operation S<b>110</b> and operation S<b>120</b> may constitute a first operation mode of the floating point operation circuit <b>300</b>, in which the fused multiplication and addition (FMA) operation is performed. Operation S<b>130</b> and operation S<b>140</b> may constitute a second operation mode of the floating point operation circuit <b>300</b>, in which the inverse operation is performed.</p><p id="p-0050" num="0048"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example of a format of a floating point value processed by the floating point operation circuit <b>300</b>.</p><p id="p-0051" num="0049">Referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a format of a floating point value may be based on the IEEE (Institute of Electrical and Electronics Engineers) 754 standard. The format may include, for example, a sign value SGN, an exponent value EXP, and a mantissa value MANT.</p><p id="p-0052" num="0050">For example, in single precision, a floating point value may include a total of 32 bits, the sign value SGN may include one bit, the exponent value EXP may include 8 bits, and the mantissa value MANT may include 23 bits. In half precision or double precision, the number of bits of the exponent value EXP and the number of bits of the mantissa value MANT may be differently determined.</p><p id="p-0053" num="0051">In an embodiment, a floating point value may be expressed by one of a value belonging to a normal range and a value belonging to a subnormal range. The subnormal range may include values that are incapable of being expressed by the normal range and have the number of digit lower than that of the normal range.</p><p id="p-0054" num="0052">Based on the format of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, when a value of &#x201c;A&#x201d; of Equation 1 belongs to the normal range, the value of &#x201c;A&#x201d; may be expressed by Equation 2 below.</p><p id="p-0055" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i>=((&#x2212;1)<sup>SGN_A</sup>2<sup>EXP_A&#x2212;BIAS</sup>&#xd7;1&#xb7;MANT_<i>A</i>)<sub>B</sub>&#x2003;&#x2003;[Equation 2]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0056" num="0053">In Equation 2, &#x201c;SGN_A&#x201d; is a sign value, &#x201c;EXP_A&#x201d; is an exponent value, and &#x201c;MANT_A&#x201d; is a mantissa value. A value of &#x201c;A&#x201d; may be a binary floating point value. &#x201c;BIAS&#x201d; may be an exponent bias value. The exponent bias value BIAS may be a value that allows a total exponent value EXP_A-BIAS of the value of &#x201c;A&#x201d; to have both a negative value and a positive value. For example, when the exponent value EXP_A is smaller than the exponent bias value BIAS, the exponent value EXP_A of the value of &#x201c;A&#x201d; may represent a negative value. When the exponent value EXP_A is greater than the exponent bias value BIAS, the exponent value EXP_A of the value of &#x201c;A&#x201d; may represent a positive value. The mantissa value MANT_A may represent a value smaller than 1.</p><p id="p-0057" num="0054">Values of &#x201c;B&#x201d; and &#x201c;C&#x201d; in Equation 1 may be represented as in the description in Equation 2. For example, the value of &#x201c;B&#x201d; may have a sign value SGN_B, an exponent value EXP_B, and a mantissa value MANT_B. The value of &#x201c;C&#x201d; may have a sign value SGN_C, an exponent value EXP_C, and a mantissa value MANT_C.</p><p id="p-0058" num="0055">Based on the format of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, when the value of &#x201c;A&#x201d; of Equation 1 belongs to the normal range, the value of &#x201c;A&#x201d; may be expressed by Equation 3 below.</p><p id="p-0059" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i>=((&#x2212;1)<sup>SGN_A</sup>2<sup>1&#x2212;BIAS</sup>&#xd7;0&#xb7;MANT_<i>A</i>)<sub>B</sub>&#x2003;&#x2003;[Equation 3]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0060" num="0056">Hereinafter, for convenience of explanation and to prevent the description from being unnecessarily complicated, embodiments of the present disclosure will be described in a state where the sign value SGN of the floating point value is omitted.</p><p id="p-0061" num="0057">In an embodiment, the digital signal processing core <b>140</b> (refer to <figref idref="DRAWINGS">FIG. <b>1</b></figref>) or the decoder <b>220</b> (refer to <figref idref="DRAWINGS">FIG. <b>2</b></figref>) may determine whether input values belong to the normal range or the subnormal range. The digital signal processing core <b>140</b> or the decoder <b>220</b> may provide the floating point operation circuit <b>300</b> with information indicating whether input values belong to the normal range or the subnormal range.</p><p id="p-0062" num="0058"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates the floating point operation circuit <b>300</b> performing fused multiplication and addition (FMA) and supporting division, according to an embodiment of the present disclosure.</p><p id="p-0063" num="0059">Referring to <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>5</b></figref>, the floating point operation circuit <b>300</b> may operate in association with a first register <b>231</b>, a second register <b>232</b>, a third register <b>233</b>, a fourth register <b>234</b>, and a fifth register <b>235</b> of the registers of the register files <b>230</b>.</p><p id="p-0064" num="0060">The first register <b>231</b>, the second register <b>232</b>, and the third register <b>233</b> may be used to store input values of the floating point operation circuit <b>300</b>. The fourth register <b>234</b> may be used to store an output value of the floating point operation circuit <b>300</b>. A value stored in the fourth register <b>234</b> may be transferred (e.g., fed back) to one of the first register <b>231</b>, the second register <b>232</b>, and the third register <b>233</b> so as to be used as an input value.</p><p id="p-0065" num="0061">The fifth register <b>235</b> may be used to store output values of the floating point operation circuit <b>300</b>, and may be used to provide (feed back) an input value to the floating point operation circuit <b>300</b> through a first relay point RP<b>1</b> and a second relay point RP<b>2</b>. In an embodiment, an additional register may be provided in the second relay point RP<b>2</b>, and a value stored in the fifth register <b>235</b> may be transferred (e.g., fed back) to the additional register so as to be used as an input value of the floating point operation circuit <b>300</b>.</p><p id="p-0066" num="0062">The floating point operation circuit <b>300</b> may include a mantissa multiplier <b>310</b>, an exponent adder <b>320</b>, an alignment shifter <b>330</b>, a mantissa adder <b>340</b>, a zero anticipator and counter <b>350</b>, an exponent overrider <b>360</b>, a normalizer <b>370</b>, a rounder <b>380</b>, and an exponent extractor <b>390</b>.</p><p id="p-0067" num="0063">The mantissa multiplier <b>310</b> may add a mantissa of the value stored in the first register <b>231</b> and a mantissa of the value stored in the second register <b>232</b>. An output of the mantissa multiplier <b>310</b> is transferred to the alignment shifter <b>330</b>.</p><p id="p-0068" num="0064">The exponent adder <b>320</b> may operate in one of two schemes. In the first scheme, the exponent adder <b>320</b> may add an exponent of the value stored in the first register <b>231</b> and an exponent of the value stored in the second register <b>232</b>. In the first scheme, the mantissa multiplier <b>310</b> and the exponent adder <b>320</b> may perform multiplication (e.g., multiplication of the fused multiplication and addition (FMA)) of the value stored in the first register <b>231</b> and the value stored in the second register <b>232</b>.</p><p id="p-0069" num="0065">In the second scheme, the exponent adder <b>320</b> may add the exponent of the value stored in the first register <b>231</b>, the exponent of the value stored in the second register <b>232</b>, and an exponent of the value stored in the fifth register <b>235</b>. The output of the exponent adder <b>320</b> is transferred to the alignment shifter <b>330</b>. In the second scheme, the mantissa multiplier <b>310</b> and the exponent adder <b>320</b> may perform multiplication of the value stored in the first register <b>231</b> and the value stored in the second register <b>232</b><i>k </i>and may add the exponent of the value stored in the fifth register <b>235</b> to an exponent of a result of the multiplication.</p><p id="p-0070" num="0066">In an embodiment, because the mantissa of the value stored in the fifth register <b>235</b> is defined as 1, the mantissa multiplier <b>310</b> and the exponent adder <b>320</b> may perform multiplication of the value stored in the first register <b>231</b>, the value stored in the second register <b>232</b>, and the value stored in the fifth register <b>235</b>. In the second scheme, the mantissa multiplier <b>310</b> and the exponent adder <b>320</b> may perform an inverse transform operation supporting multiplication and division of the fused multiplication and addition (FMA).</p><p id="p-0071" num="0067">The alignment shifter <b>330</b> may align the number of digit of the value stored in the third register <b>233</b> and the number of digit of the value calculated (or computed) by the mantissa multiplier <b>310</b> and the exponent adder <b>320</b>. For example, to efficiently perform addition of the fused multiplication and addition (FMA), the alignment shifter <b>330</b> may change an exponent value of one of the value of the third register <b>233</b> and the value calculated by the mantissa multiplier <b>310</b> and the exponent adder <b>320</b> such that a value of the exponent of the value of the third register <b>233</b> and a value of the exponent of the value calculated by the mantissa multiplier <b>310</b> and the exponent adder <b>320</b> coincides with each other. As much as the amount of change in a value of an exponent of one value, the alignment shifter <b>330</b> may change a value of a mantissa of the one value.</p><p id="p-0072" num="0068">For example, when a value of an exponent of one value increases by as much as 1, the number of digit of a value of a mantissa of the one value may decrease (e.g., downward shift) by as much as 1. When the value of the exponent of the one value decreases by as much as 1, the number of digit of the value of the mantissa of the one value may increase (e.g., upward shift) by as much as 1.</p><p id="p-0073" num="0069">For example, the alignment shifter <b>330</b> may fix a smaller value (or a greater value) of the value of the third register <b>233</b> and the value calculated by the mantissa multiplier <b>310</b> and the exponent adder <b>320</b>, for example, a value having the lower (or higher) number of digit, and may shift an exponent value and a mantissa value of a value having the higher (or lower) number of digit.</p><p id="p-0074" num="0070">After the alignment is completed, the alignment shifter <b>330</b> may output the mantissa value of the value of the third register <b>233</b> and the mantissa value of the value calculated by the mantissa multiplier <b>310</b> and the exponent adder <b>320</b> to the mantissa adder <b>340</b> and the zero anticipator and counter <b>350</b>. After the alignment of the alignment shifter <b>330</b> is completed, the exponent value of the value of the third register <b>233</b> and the exponent value of the value calculated by the mantissa multiplier <b>310</b> and the exponent adder <b>320</b> may be equal. The alignment shifter <b>330</b> may output the exponent value to the exponent overrider <b>360</b>.</p><p id="p-0075" num="0071">The mantissa adder <b>340</b> may perform addition, for example, addition of the fused multiplication and addition (FMA), on the mantissa values output from the alignment shifter <b>330</b>. The mantissa adder <b>340</b> may output a result of the addition to the normalizer <b>370</b>.</p><p id="p-0076" num="0072">The zero anticipator and counter <b>350</b> may operate in two schemes. In the first scheme, when mantissa values belong to the normal range, the zero anticipator and counter <b>350</b> may anticipate zeros generated after addition is performed by the mantissa adder <b>340</b>. In an embodiment, when a sign value of the value stored in the first register <b>231</b> is different from a sign value of the value stored in the second register <b>232</b>, the mantissa adder <b>340</b> may perform subtraction. In this case, when the first bits of the mantissa values input to the mantissa adder <b>340</b> are equal, the format of Equation 2 may not be satisfied. For example, when one mantissa value is 111001, the corresponding mantissa value may represent 1.111001. When another mantissa value is 110000, the corresponding mantissa value may represent 1.110000. A result of subtracting the another mantissa value from the one mantissa value may be 001001, which may represent 0.001001.</p><p id="p-0077" num="0073">The zero anticipator and counter <b>350</b> may determine how many bits from the first bits of two mantissa values are equal. When k-th bits (k being a positive integer) of two mantissa values are different from each other, the first to k&#x2212;1th bits of an output value of the mantissa adder <b>340</b> may have a bit value of &#x201c;0&#x201d;. The zero anticipator and counter <b>350</b> may generate an anticipated zero count (e.g., a leading zero count). The zero anticipator and counter <b>350</b> may output the anticipated zero count to the normalizer <b>370</b>.</p><p id="p-0078" num="0074">When mantissa values belong to the subnormal range, the zero anticipator and counter <b>350</b> may omit an additional operation.</p><p id="p-0079" num="0075">In the second scheme, when the value stored in the first register <b>231</b> belongs to the normal range, the zero anticipator and counter <b>350</b> may transfer an exponent value of the value stored in the first register <b>231</b> to the exponent extractor <b>390</b>. Also, the zero anticipator and counter <b>350</b> may transfer a signal to the exponent overrider <b>360</b> such that the exponent overrider <b>360</b> is activated.</p><p id="p-0080" num="0076">When the value stored in the first register <b>231</b> belongs to the subnormal range, the zero anticipator and counter <b>350</b> may generate a zero count (e.g., a leading zero count) of the value stored in the first register <b>231</b>. The zero anticipator and counter <b>350</b> may output the zero count to the exponent extractor <b>390</b>. Also, the zero anticipator and counter <b>350</b> may transfer a signal to the exponent overrider <b>360</b> such that the exponent overrider <b>360</b> is activated.</p><p id="p-0081" num="0077">The exponent overrider <b>360</b> may operate in one of two schemes. In the first scheme, in response to the signal not being received from the zero anticipator and counter <b>350</b>, the exponent overrider <b>360</b> may transfer the exponent value output from the alignment shifter <b>330</b> to the normalizer <b>370</b>. In the second scheme, in response to the signal being received from the zero anticipator and counter <b>350</b>, the exponent overrider <b>360</b> may substitute the exponent value output from the alignment shifter <b>330</b> with a specific value, for example, bits corresponding to &#x2212;1. The exponent overrider <b>360</b> may transfer the substituted exponent value to the normalizer <b>370</b>.</p><p id="p-0082" num="0078">The normalizer <b>370</b> may receive the mantissa value from the mantissa adder <b>340</b> and may receive the exponent value from the exponent overrider <b>360</b>. In response to the anticipated zero count not being received from the zero anticipator and counter <b>350</b>, the normalizer <b>370</b> may normalize the exponent value and the mantissa value so as to coincide with the format of Equation 2 or Equation 3. For example, when the mantissa value by the addition of the mantissa adder <b>340</b> represents a value of 1 or more, the normalizer <b>370</b> may change (e.g., decrease) an exponent value of the mantissa value such that the mantissa value represents a value smaller than 1 and may change (e.g., increase) the exponent value depending on the changed (e.g., decreased) exponent value of the mantissa value.</p><p id="p-0083" num="0079">In response to the anticipated zero count being received from the zero anticipator and counter <b>350</b>, the normalizer <b>370</b> may normalize the exponent value and the mantissa value so as to coincide with the format of Equation 2. For example, the normalizer <b>370</b> may make the number of digit of the mantissa value output from the mantissa adder <b>340</b> higher by as much as a number obtained by adding 1 to the anticipated zero count. Also, the normalizer <b>370</b> may decrease the exponent value output from the exponent overrider <b>360</b> by as much as the number obtained by adding 1 to the anticipated zero count.</p><p id="p-0084" num="0080">As mentioned above, when the mantissa value output from the mantissa adder <b>340</b> is &#x201c;001001&#x201d; and represents &#x201c;0.001001&#x201d;, the normalizer <b>370</b> may normalize the mantissa value to &#x201c;001000&#x201d;, which represents 1.001000. The normalizer <b>370</b> may output the normalized mantissa value and exponent value to the rounder <b>380</b>.</p><p id="p-0085" num="0081">The rounder <b>380</b> may perform rounding on the exponent value and the mantissa value received from the normalizer <b>370</b>. For example, when the number of bits of the exponent value and the number of bits of the mantissa value are more than the number of bits defined in the format as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the rounder <b>380</b> may decrease the number of bits of each of the exponent value and the mantissa value to the number of bits defined in the format illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0086" num="0082">For example, the rounder <b>380</b> may normalize the exponent value and the mantissa value output from the normalizer <b>370</b> depending on one of various rounding policies, such as, for example, round off, ceil, floor, and round down, or depending on one dynamically selected policy from various rounding policies. The output of the rounder <b>380</b> may be stored in the fourth register <b>234</b>.</p><p id="p-0087" num="0083">The exponent extractor <b>390</b> may generate a transform factor TF from the exponent value or the zero count transferred from the zero anticipator and counter <b>350</b>. The transform factor TF may be stored in the fifth register <b>235</b>.</p><p id="p-0088" num="0084"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example in which the floating point operation circuit <b>300</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref> performs the fused multiplication and addition (FMA) operation. <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example of a process in which calculation is performed by the floating point operation circuit <b>300</b> depending on the method of <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0089" num="0085">Referring to <figref idref="DRAWINGS">FIGS. <b>5</b> and <b>6</b></figref>, in operation S<b>210</b>, the floating point operation circuit <b>300</b> may receive a first instruction and input values. Values stored in the first register <b>231</b>, the second register <b>232</b>, and the third register <b>233</b> may be input to the floating point operation circuit <b>300</b> for the purpose of the fused multiplication and addition (FMA) operation. The values stored in the first register <b>231</b>, the second register <b>232</b>, and the third register <b>233</b> may have the format defined by Equation 2 or Equation 3.</p><p id="p-0090" num="0086">In operation S<b>220</b> and as indicated by operation S<b>310</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the mantissa multiplier <b>310</b> may perform mantissa multiplication. For example, the mantissa multiplier <b>310</b> may perform multiplication on a mantissa value of the value stored in the first register <b>231</b> and a mantissa value of the value stored in the second register <b>232</b>.</p><p id="p-0091" num="0087">In operation S<b>230</b> and as indicated by operation S<b>320</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the exponent adder <b>320</b> may perform exponent addition in the first scheme. For example, the exponent adder <b>320</b> may perform addition on an exponent value of the value stored in the first register <b>231</b> and an exponent value of the value stored in the second register <b>232</b>.</p><p id="p-0092" num="0088">In operation S<b>240</b> and as indicated by operation S<b>330</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the alignment shifter <b>330</b> may perform an alignment shift. For example, the alignment shifter <b>330</b> may align the number of digit of the value stored in the third register <b>233</b> and the number of digit of a value calculated by the mantissa multiplier <b>310</b> and the exponent adder <b>320</b> by shifting the number of digit of one of the value stored in the third register <b>233</b> and the value calculated by the mantissa multiplier <b>310</b> and the exponent adder <b>320</b>.</p><p id="p-0093" num="0089">In operation S<b>250</b> and as indicated by operation S<b>340</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the mantissa adder <b>340</b> may perform mantissa addition. For example, the mantissa adder <b>340</b> may perform addition of mantissa values of values aligned by the alignment shifter <b>330</b>.</p><p id="p-0094" num="0090">In parallel with operation S<b>250</b> and operation S<b>340</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, in operation S<b>260</b> and as indicated by operation S<b>350</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the zero anticipator and counter <b>350</b> may anticipate zeros coming from the addition of the mantissa adder <b>340</b> in the first scheme and may generate an anticipated zero count optionally (e.g., in the case where it is anticipated that the format of Equation 2 is not satisfied).</p><p id="p-0095" num="0091">In operation S<b>270</b> and as indicated by operation S<b>360</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the normalizer <b>370</b> may perform normalization. For example, the normalizer <b>370</b> may perform normalization based on the mantissa value calculated by the mantissa adder <b>340</b>, the exponent value transferred from the alignment shifter <b>330</b> through the exponent overrider <b>360</b> operating in the first scheme, and the zero count anticipated optionally. Because the generation of the anticipated zero count (e.g., operation S<b>260</b> and operation S<b>350</b>) is performed in parallel (or at the same time) with the mantissa addition (e.g., operation S<b>250</b> and operation S<b>340</b>), the normalizer <b>370</b> may substantially simultaneously receive the output of the mantissa adder <b>340</b> and the output of the zero anticipator and counter <b>350</b>. Accordingly, the normalizer <b>370</b> may perform normalization without a separate delay.</p><p id="p-0096" num="0092">In operation S<b>280</b> and as indicated by operation S<b>370</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the rounder <b>380</b> may perform rounding. For example, the rounder <b>380</b> may perform round off, ceil, floor, or round down on the value output from the normalizer <b>370</b>.</p><p id="p-0097" num="0093">In operation S<b>290</b> and as indicated by operation S<b>380</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the floating point operation circuit <b>300</b> may output the calculated value. The output value may be stored in the fourth register <b>234</b>.</p><p id="p-0098" num="0094"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example in which the floating point operation circuit <b>300</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref> performs an inverse operation.</p><p id="p-0099" num="0095">Referring to <figref idref="DRAWINGS">FIGS. <b>5</b> and <b>8</b></figref>, in operation S<b>410</b>, the floating point operation circuit <b>300</b> may perform an FMA-based transform on input values stored in the first register <b>231</b>, the second register <b>232</b>, and the third register <b>233</b>, and may generate a simplified value and the transform factor TF.</p><p id="p-0100" num="0096">In operation S<b>420</b>, the floating point operation circuit <b>300</b> may perform an FMA-based inverse operation on the simplified value at least twice and may generate a simplified inverse value.</p><p id="p-0101" num="0097">In operation S<b>430</b>, the floating point operation circuit <b>300</b> may perform an FMA-based inverse transform operation on the simplified inverse value by using the transform factor TF and may generate an inverse value of one of the input values stored in the first register <b>231</b>, the second register <b>232</b>, and the third register <b>233</b>.</p><p id="p-0102" num="0098">In an embodiment, the inverse operation in operation S<b>420</b> may be based on a Newton-Raphson method (or algorithm). The process of calculating an inverse value based on the Newton-Raphson method may be defined by Equation 4.</p><p id="p-0103" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>x</i><sub>n</sub><i>=x</i><sub>n&#x2212;1</sub>(2&#x2212;<i>A&#xd7;x</i><sub>n&#x2212;1</sub>)&#x2003;&#x2003;[Equation 4]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0104" num="0099">In Equation 4, &#x201c;n&#x201d; is a positive integer, and &#x201c;x<sub>0</sub>&#x201d; is an arbitrary initial value and may be selected from a lookup table depending on a range of &#x201c;A&#x201d;. For example, &#x201c;x<sub>0</sub>&#x201d; may be determined in advance by the central processing core <b>110</b> (refer to <figref idref="DRAWINGS">FIG. <b>1</b></figref>) or the digital signal processing core <b>140</b>. As the calculation of Equation 4 is performed as much as the given number of times, the inverse value of &#x201c;A&#x201d; may be calculated.</p><p id="p-0105" num="0100">In Equation 4, when &#x201c;A&#x201d; is a positive number and a value of &#x201c;A&#x201d; is equal to about 0.5 or more and about 1 or less, the inverse value of &#x201c;A&#x201d; may be efficiently calculated. For example, when the value of &#x201c;A&#x201d; is in a range from about 0.5 or more to about 1 or less, the inverse value of &#x201c;A&#x201d; may be calculated by performing the calculation of Equation 4 at least twice.</p><p id="p-0106" num="0101">The transform in operation S<b>410</b> may generate a simplified value and a transform factor from an input value, and the simplified value may belong to the range from about 0.5 or more to about 1 or less. That is, an inverse value of the simplified value may be calculated by performing the inverse operation of operation S<b>420</b> on the simplified value at least twice. The inverse transform operation in operation S<b>430</b> may inversely transform the inverse value of the simplified value to the inverse value of &#x201c;A&#x201d; by applying the transform factor again.</p><p id="p-0107" num="0102">In an embodiment, when an input value belongs to the subnormal range, an inverse value of a value of the subnormal range may exceed a range of a value of the normal range. That is, the inverse value of the input value of the subnormal range may be treated as infinite. This may cause the loss of information. To prevent the loss of information, when an input value belongs to the subnormal range, the inverse transform performed in operation S<b>430</b> may be postponed. In a state where the floating point operation circuit <b>300</b> postpones the inverse transform operation in operation S<b>430</b>, the inverse value of the simplified value may be used for calculation (e.g., multiplication) of the digital signal processing core <b>140</b>. When the inverse transform of the inverse value of the simplified value is utilized, for example, when an addition operation for the inverse value of the simplified value is utilized, the floating point operation circuit <b>300</b> may perform the inverse transform operation in operation S<b>430</b>, and thus, a loss of information may be suppressed.</p><p id="p-0108" num="0103">In an embodiment, operation S<b>410</b> may correspond to a first phase of the second operation mode of the floating point operation circuit <b>300</b>. Operation S<b>420</b> may correspond to a second phase of the second operation mode of the floating point operation circuit <b>300</b>. Operation S<b>430</b> may correspond to a third phase of the second operation mode of the floating point operation circuit <b>300</b>.</p><p id="p-0109" num="0104"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates an example of a method in which the floating point operation circuit <b>300</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref> performs a transform operation. <figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates an example of a process in which a transform operation is performed by the floating point operation circuit <b>300</b> depending on the method of <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0110" num="0105">Referring to <figref idref="DRAWINGS">FIGS. <b>9</b> and <b>10</b></figref>, in operation S<b>510</b>, the floating point operation circuit <b>300</b> may receive a second instruction and input values. For example, the input values that the floating point operation circuit <b>300</b> receives may be determined by Equation 5, Equation 6, and Equation 7.</p><p id="p-0111" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>I</i>1=(2<sup>0</sup>&#xd7;1.0)<sub>B</sub>&#x2003;&#x2003;[Equation 5]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0112" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>I</i>2=<i>A</i>=(2<sup>EXP_A&#x2212;BIAS</sup>&#xd7;1&#xb7;MANT_<i>A</i>)<sub>B</sub>&#x2003;&#x2003;[Equation 6]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0113" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>I</i>3=0<sub>B</sub>&#x2003;&#x2003;[Equation 7]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0114" num="0106">As defined in Equation 5, the input value of the first register <b>231</b>, which is a number to be multiplied in fused multiplication and addition (FMA), may be 1. That is, the input value of the first register <b>231</b> may not affect the fused multiplication and addition (FMA) operation. Accordingly, operations (or calculations) associated with the input value of the first register <b>231</b> will not be described.</p><p id="p-0115" num="0107">As defined in Equation 6, the input value of the second register <b>232</b>, which is a number to be multiplied in fused multiplication and addition (FMA), may be &#x201c;A&#x201d;. In transformation, the transform factor TF and a simplified value SB may be generated from the value of &#x201c;A&#x201d; stored in the second register <b>232</b>.</p><p id="p-0116" num="0108">As defined in Equation 7, the input value of the third register <b>233</b>, which is a number to be added in fused multiplication and addition (FMA), may be &#x201c;0&#x201d;. That is, the input value of the third register <b>233</b> may not affect the fused multiplication and addition (FMA) operation. Accordingly, operations (or calculations) associated with the input value of the third register <b>233</b> will not be described.</p><p id="p-0117" num="0109">As indicated by operation S<b>610</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the zero anticipator and counter <b>350</b> may receive an exponent value of the value of &#x201c;A&#x201d; stored in the second register <b>232</b>. The zero anticipator and counter <b>350</b> may differently operate depending on whether the value of &#x201c;A&#x201d; belongs to the normal range or belongs to the subnormal range.</p><p id="p-0118" num="0110">When it is determined in operation S<b>520</b> that the value of &#x201c;A&#x201d; belongs to the normal range, as indicated by operation S<b>610</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the zero anticipator and counter <b>350</b> may output the exponent value of the value of &#x201c;A&#x201d;. In operation S<b>530</b> and as indicated by operation S<b>620</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the exponent extractor <b>390</b> may generate a normal transform factor TF<sub>N </sub>from the transferred exponent value. The normal transform factor TF<sub>N </sub>may be defined by Equation 8.</p><p id="p-0119" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>TF<sub>N</sub>=(2<sup>&#x2212;(EXP_B&#x2212;BIAS+1)</sup>)<sub>B</sub>=(2<sup>BIAS&#x2212;EXP_B&#x2212;1</sup>)<sub>B</sub>&#x2003;&#x2003;[Equation 8]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0120" num="0111">When it is determined in operation S<b>520</b> that the value of &#x201c;A&#x201d; does not belong to the normal range, that is, belongs to the subnormal range, in operation S<b>540</b> and as indicated by operation S<b>610</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the zero anticipator and counter <b>350</b> may generate a zero count of the value of &#x201c;A&#x201d;. The zero anticipator and counter <b>350</b> may output a zero count ZC. In operation S<b>550</b> and as indicated by operation S<b>620</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the exponent extractor <b>390</b> may generate a subnormal transform factor TF<sub>SN </sub>from the transferred zero count ZC. The subnormal transform factor TF<sub>SN </sub>may be defined by Equation 9.</p><p id="p-0121" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>TF<sub>N</sub>=(2<sup>ZC+BIAS&#x2212;2</sup>)<sub>B</sub>&#x2003;&#x2003;[Equation 9]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0122" num="0112">In an embodiment, as a result of multiplying the exponent value of the value of &#x201c;A&#x201d; of Equation 2 and the normal transform factor TF<sub>N</sub>, the exponent value of the value of &#x201c;A&#x201d; may be &#x2212;1. Also, as a result of multiplying the exponent value of the value of &#x201c;A&#x201d; of Equation 3 and the subnormal transform factor TF<sub>SN</sub>, the exponent value of the value of &#x201c;A&#x201d; may be &#x2212;1. That is, when a transform operation of multiplying the transform factor TF (e.g., the normal transform factor TF<sub>N </sub>or the subnormal transform factor TF<sub>SN</sub>) with the value of &#x201c;A&#x201d; is performed, the value of &#x201c;A&#x201d; may be simplified to have an exponent value of &#x2212;1.</p><p id="p-0123" num="0113">Instead of actually multiplying the transform factor and the value of &#x201c;A&#x201d; together, in operation S<b>560</b> and as indicated by operation S<b>630</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the exponent overrider <b>360</b> may substitute the exponent value of the value of &#x201c;A&#x201d; with &#x2212;1 in response to the signal being received from the zero anticipator and counter <b>350</b>. Accordingly, in operation S<b>570</b> and as indicated by operation S<b>640</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the floating point operation circuit <b>300</b> may transform and output the value of &#x201c;A&#x201d; into the simplified value SB having the exponent value of &#x2212;1 and the mantissa value of &#x201c;A&#x201d;. The simplified value SB may be stored in the fourth register <b>234</b>.</p><p id="p-0124" num="0114">In operation S<b>580</b> and as indicated by operation S<b>650</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the floating point operation circuit <b>300</b> may output the transform factor TF generated from the value of &#x201c;A&#x201d;. The transform factor TF may be stored in the fifth register <b>235</b>. The transform factor TF may be again used in an inverse transform operation.</p><p id="p-0125" num="0115">Subsequently, the above-described inverse operation (refer to operation S<b>420</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) may be performed. The inverse operation may be used based on the simplified value SB. The inverse operation may be performed based on the fused multiplication and addition (FMA) described with reference to <figref idref="DRAWINGS">FIGS. <b>6</b> and <b>7</b></figref>. The inverse operation may include a plurality of operation cycles, and each of the plurality of operation cycles may include two or more fused multiplication and addition (FMA) operations. Each of the plurality of operation cycles may correspond to perform the calculation of Equation 4 once.</p><p id="p-0126" num="0116">Each calculation operation of each operation cycle may use the value stored in the fourth register <b>234</b> in an immediately previous calculation operation. In the first calculation operation of the first operation cycle, the fourth register <b>234</b> may store the simplified value SB. Input values of the first calculation operation may be determined by Equation 10, Equation 11, and Equation 12.</p><p id="p-0127" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>I</i>1=&#x2212;<i>SB</i>=&#x2212;(2<sup>&#x2212;1</sup>&#xd7;1&#xb7;MANT_<i>B</i>)<sub>B</sub>&#x2003;&#x2003;[Equation 10]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0128" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>I</i>2=(<i>x</i><sub>0</sub>)<sub>B</sub>&#x2003;&#x2003;[Equation 11]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0129" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>I</i>3=(2<sup>1</sup>&#xd7;1.0)<sub>B</sub>&#x2003;&#x2003;[Equation 12]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0130" num="0117">An output of the first calculation operation of the first operation cycle, that is, the value to be stored in the fourth register <b>234</b>, may be determined by Equation 13.</p><p id="p-0131" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>O</i>=(<i>I</i>3+<i>I</i>1&#xd7;<i>I</i>2)=(2<sup>1</sup><i>&#x2212;SB&#xd7;x</i><sub>0</sub>)<sub>B</sub>&#x2003;&#x2003;[Equation 13]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0132" num="0118">The second calculation operation of the first operation cycle may use a value of Equation 13 stored in the fourth register <b>234</b>. Input values of the second calculation operation of the first operation cycle may be determined by Equation 14, Equation 15, and Equation 16.</p><p id="p-0133" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>I</i>1=(2<sup>1</sup><i>&#x2212;SB&#xd7;x</i><sub>0</sub>)<sub>B</sub>&#x2003;&#x2003;[Equation 14]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0134" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>I</i>2=(<i>x</i><sub>0</sub>)<sub>B</sub>&#x2003;&#x2003;[Equation 15]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0135" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>I</i>3=0<sub>B</sub>&#x2003;&#x2003;[Equation 16]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0136" num="0119">An output of the first calculation operation of the first operation cycle, that is, the value to be stored in the fourth register <b>234</b>, may be determined by Equation 17.</p><p id="p-0137" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>O=x</i><sub>0</sub>(2<sup>1</sup><i>&#x2212;SB&#xd7;x</i><sub>0</sub>)<sub>B</sub><i>=x</i><sub>1</sub>&#x2003;&#x2003;[Equation 17]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0138" num="0120">When the first operation cycle is performed, the calculation of Equation 4 may be completed once. Subsequently, the operation cycle of Equation 10 to Equation 17 may be performed as the second operation cycle by using x<sub>1 </sub>instead of x<sub>0</sub>.</p><p id="p-0139" num="0121">When the operation cycle is performed at least twice, the value stored in the fourth register <b>234</b> may approximate to the inverse value of the simplified value SB.</p><p id="p-0140" num="0122"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates an example of a method in which the floating point operation circuit <b>300</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref> performs an inverse transform operation. <figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates an example of a process in which an inverse transform operation is performed by the floating point operation circuit <b>300</b> depending on the method of <figref idref="DRAWINGS">FIG. <b>11</b></figref>. In an embodiment, an example in which, when the operation cycle of the inverse transform operation is performed at least twice, the inverse transform operation is performed in the last calculation operation of the calculation operations will be described with reference to <figref idref="DRAWINGS">FIGS. <b>11</b> and <b>12</b></figref>. However, embodiments of the present disclosure are not limited thereto. For example, in embodiments, the inverse transform operation may be performed based on fused multiplication and addition (FMA) independently regardless of the operation cycle of the inverse operation.</p><p id="p-0141" num="0123">Operation S<b>710</b>, operation S<b>720</b>, and operation S<b>740</b> to operation S<b>790</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref> are performed in the same manner as operation S<b>210</b>, operation S<b>220</b>, and operation S<b>240</b> to operation S<b>290</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. Also, operation S<b>810</b>, and operation S<b>830</b> to operation S<b>880</b> of <figref idref="DRAWINGS">FIG. <b>12</b></figref> are performed in the same manner as operation S<b>310</b>, and operation S<b>330</b> to operation S<b>380</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. Thus, for convenience of explanation, a further description of these operations will be omitted.</p><p id="p-0142" num="0124">In operation S<b>730</b> and as indicated by operation S<b>820</b> of <figref idref="DRAWINGS">FIG. <b>12</b></figref>, when the fused multiplication and addition (FMA) operation is performed, the exponent adder <b>320</b> may add an exponent value of the value of the first register <b>231</b> and an exponent value of the value of the second register <b>232</b>. In addition, the exponent adder <b>320</b> may further add an exponent value of the transform factor TF stored in the fifth register <b>235</b>. That is, the exponent value of the output value stored in the fourth register <b>234</b> may increase by as much as the exponent value of the transform factor TF.</p><p id="p-0143" num="0125">In the transform process of operation S<b>410</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the relationship between the simplified value SB, the value of &#x201c;A&#x201d;, and the transform factor TF may be defined by Equation 18.</p><p id="p-0144" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>SB=A&#xd7;</i>TF&#x2003;&#x2003;[Equation 18]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0145" num="0126">An output before the inverse transform operation is performed, that is, a simplified output O<sub>S</sub>, may be defined by Equation 19 from Equation 18.</p><p id="p-0146" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <msub>      <mi>O</mi>      <mi>S</mi>     </msub>     <mo>=</mo>     <mrow>      <mfrac>       <mn>1</mn>       <mi>SB</mi>      </mfrac>      <mo>=</mo>      <mfrac>       <mn>1</mn>       <mrow>        <mi>A</mi>        <mo>&#xd7;</mo>        <mi>T</mi>        <mo>&#x2062;</mo>        <mi>F</mi>       </mrow>      </mfrac>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>[</mo>     <mrow>      <mi>Equation</mi>      <mo>&#x2062;</mo>      <mtext>   </mtext>      <mn>19</mn>     </mrow>     <mo>]</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0147" num="0127">In the case of multiplying the transform factor TF and the simplified output O<sub>S </sub>together, that is, increasing an exponent value of the simplified output O<sub>S </sub>by as much as the exponent value of the transform factor TF, an output may be defined by Equation 20.</p><p id="p-0148" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mi>O</mi>     <mo>=</mo>     <mrow>      <mrow>       <msub>        <mi>O</mi>        <mi>S</mi>       </msub>       <mo>&#xd7;</mo>       <mi>T</mi>       <mo>&#x2062;</mo>       <mi>F</mi>      </mrow>      <mo>=</mo>      <mrow>       <mfrac>        <mrow>         <mi>T</mi>         <mo>&#x2062;</mo>         <mi>F</mi>        </mrow>        <mi>SB</mi>       </mfrac>       <mo>=</mo>       <mrow>        <mfrac>         <mrow>          <mi>T</mi>          <mo>&#x2062;</mo>          <mi>F</mi>         </mrow>         <mrow>          <mi>A</mi>          <mo>&#xd7;</mo>          <mi>T</mi>          <mo>&#x2062;</mo>          <mi>F</mi>         </mrow>        </mfrac>        <mo>=</mo>        <mfrac>         <mn>1</mn>         <mi>A</mi>        </mfrac>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>[</mo>     <mrow>      <mi>Equation</mi>      <mo>&#x2062;</mo>      <mtext>   </mtext>      <mn>20</mn>     </mrow>     <mo>]</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0149" num="0128">Accordingly, the inverse value of the value of &#x201c;A&#x201d; may be obtained by multiplying the simplified output O<sub>S </sub>and the transform factor TF together.</p><p id="p-0150" num="0129">As described above, the floating point operation circuit <b>300</b> according to an embodiment of the present disclosure may simplify the inverse operation by applying a transform factor to a target. The number of times the inverse operation is performed may be decreased by performing the inverse operation on the simplified value SB. Also, the inverse transform operation may be included in the process of performing the inverse operation. Accordingly, an operation cycle utilized for the inverse transform operation may be omitted.</p><p id="p-0151" num="0130"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates an example of performing division by using the fused multiplication and addition (FMA) operation of the floating point operation circuit <b>300</b>.</p><p id="p-0152" num="0131">Referring to <figref idref="DRAWINGS">FIGS. <b>1</b>, <b>5</b>, and <b>13</b></figref>, in operation <b>910</b>, the digital signal processing core <b>140</b> may calculate an inverse value of a divisor by using the fused multiplication and addition (FMA) operation of the floating point operation circuit <b>300</b>.</p><p id="p-0153" num="0132">In operation S<b>920</b>, the digital signal processing core <b>140</b> may input the inverse value of the divisor and a dividend to the fused multiplication and addition (FMA) operation of the floating point operation circuit <b>300</b> and may perform a division operation.</p><p id="p-0154" num="0133">As described above, the digital signal processing core <b>140</b> according to an embodiment of the present disclosure may perform division by using the fused multiplication and addition (FMA) operation of the floating point operation circuit <b>300</b>. The division operation may be performed at a fast speed based on the transform and inverse transform. That is, a speed at which the digital signal processing core <b>140</b> performs the division operation may be increased according to embodiments. Also, because an operation time of the digital signal processing core <b>140</b> decreases, the power consumption of the digital signal processing core <b>140</b> may be reduced according to embodiments.</p><p id="p-0155" num="0134">The floating point division operation may be used in various applications. For example, the Newton-Raphson method may provide an iteration equation for calculating the square loop of a value of &#x201c;A&#x201d;, and the iteration equation may include division as in Equation 21.</p><p id="p-0156" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <msub>      <mi>x</mi>      <mi>n</mi>     </msub>     <mo>=</mo>     <mrow>      <mfrac>       <mn>1</mn>       <mn>2</mn>      </mfrac>      <mo>&#x2062;</mo>      <mrow>       <mo>(</mo>       <mrow>        <msub>         <mi>x</mi>         <mrow>          <mi>n</mi>          <mo>-</mo>          <mn>1</mn>         </mrow>        </msub>        <mo>+</mo>        <mfrac>         <mi>A</mi>         <msub>          <mi>x</mi>          <mrow>           <mi>n</mi>           <mo>-</mo>           <mn>1</mn>          </mrow>         </msub>        </mfrac>       </mrow>       <mo>)</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>[</mo>     <mrow>      <mi>Equation</mi>      <mo>&#x2062;</mo>      <mtext>   </mtext>      <mn>21</mn>     </mrow>     <mo>]</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0157" num="0135">A softmax function that is used as an activation function in a neural network module may include division as in Equation 22.</p><p id="p-0158" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <msub>      <mi>y</mi>      <mi>i</mi>     </msub>     <mo>=</mo>     <mfrac>      <msup>       <mi>e</mi>       <msub>        <mi>x</mi>        <mi>i</mi>       </msub>      </msup>      <mrow>       <msubsup>        <mo>&#x2211;</mo>        <mrow>         <mi>j</mi>         <mo>=</mo>         <mn>0</mn>        </mrow>        <mi>k</mi>       </msubsup>       <msup>        <mi>e</mi>        <msub>         <mi>x</mi>         <mi>j</mi>        </msub>       </msup>      </mrow>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>[</mo>     <mrow>      <mi>Equation</mi>      <mo>&#x2062;</mo>      <mtext>   </mtext>      <mn>22</mn>     </mrow>     <mo>]</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0159" num="0136">A sigmoid function that is used as the activation function in the neural network module may include division as in Equation 23.</p><p id="p-0160" num="0000"><maths id="MATH-US-00005" num="00005"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <msub>      <mi>y</mi>      <mi>i</mi>     </msub>     <mo>=</mo>     <mfrac>      <mn>1</mn>      <mrow>       <mn>1</mn>       <mo>+</mo>       <msup>        <mi>e</mi>        <mrow>         <mo>-</mo>         <mi>x</mi>        </mrow>       </msup>      </mrow>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>[</mo>     <mrow>      <mi>Equation</mi>      <mo>&#x2062;</mo>      <mtext>   </mtext>      <mn>23</mn>     </mrow>     <mo>]</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0161" num="0137">Calculation of an output position when performing warping in a computer vision module may include division as in Equation 24.</p><p id="p-0162" num="0000"><maths id="MATH-US-00006" num="00006"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <msub>      <mi>y</mi>      <mi>i</mi>     </msub>     <mo>=</mo>     <mfrac>      <mrow>       <mrow>        <mi>a</mi>        <mo>&#xd7;</mo>        <mi>u</mi>       </mrow>       <mo>+</mo>       <mrow>        <mi>b</mi>        <mo>&#xd7;</mo>        <mi>v</mi>       </mrow>       <mo>+</mo>       <mi>c</mi>      </mrow>      <mrow>       <mrow>        <mi>g</mi>        <mo>&#xd7;</mo>        <mi>u</mi>       </mrow>       <mo>+</mo>       <mrow>        <mi>h</mi>        <mo>&#xd7;</mo>        <mi>v</mi>       </mrow>       <mo>+</mo>       <mn>1</mn>      </mrow>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>[</mo>     <mrow>      <mi>Equation</mi>      <mo>&#x2062;</mo>      <mtext>   </mtext>      <mn>24</mn>     </mrow>     <mo>]</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0163" num="0138">In embodiments, the neural network module and the computer vision module may use floating point values for increased accuracy. The neural network module and the computer vision module may be implemented to use the digital signal processing core <b>140</b>, which may increase speed, according to an embodiment of the present disclosure.</p><p id="p-0164" num="0139"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a diagram of a system <b>1000</b> to which a storage device is applied, according to an embodiment.</p><p id="p-0165" num="0140">The system <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref> may be a mobile system, such as, for example, a portable communication terminal (e.g., a mobile phone), a smartphone, a tablet personal computer (PC), a wearable device, a healthcare device, or an Internet of Things (IOT) device. However, the system <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref> is not necessarily limited to a mobile system. For example, according to embodiments, the system <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref> may be a PC, a laptop computer, a server, a media player, or an automotive device (e.g., a navigation device).</p><p id="p-0166" num="0141">Referring to <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the system <b>1000</b> may include a main processor <b>1100</b>, memories (e.g., <b>1200</b><i>a </i>and <b>1200</b><i>b</i>), and storage devices (e.g., <b>1300</b><i>a </i>and <b>1300</b><i>b</i>). In addition, the system <b>1000</b> may include at least one of an image capturing device <b>1410</b>, a user input device <b>1420</b>, a sensor <b>1430</b>, a communication device <b>1440</b>, a display <b>1450</b>, a speaker <b>1460</b>, a power supplying device <b>1470</b>, and a connecting interface <b>1480</b>.</p><p id="p-0167" num="0142">The main processor <b>1100</b> may control all operations of the system <b>1000</b>, for example, operations of other components included in the system <b>1000</b>. The main processor <b>1100</b> may be implemented as, for example, a general-purpose processor, a dedicated processor, or an application processor.</p><p id="p-0168" num="0143">The main processor <b>1100</b> may include at least one CPU core <b>1110</b> and a controller <b>1120</b> configured to control the memories <b>1200</b><i>a </i>and <b>1200</b><i>b </i>and/or the storage devices <b>1300</b><i>a </i>and <b>1300</b><i>b</i>. In some embodiments, the main processor <b>1100</b> may further include an accelerator <b>1130</b>, which is a dedicated circuit for a high-speed data operation, such as an artificial intelligence (AI) data operation. The accelerator <b>1130</b> may include a graphics processing unit (GPU), a neural processing unit (NPU) and/or a data processing unit (DPU), and may be implemented as a chip that is physically separate from the other components of the main processor <b>1100</b>.</p><p id="p-0169" num="0144">The memories <b>1200</b><i>a </i>and <b>1200</b><i>b </i>may be used as main memory devices of the system <b>1000</b>. Each of the memories <b>1200</b><i>a </i>and <b>1200</b><i>b </i>may include a volatile memory, such as, for example, static random access memory (SRAM) and/or dynamic RAM (DRAM), or may include non-volatile memory, such as, for example, a flash memory, phase-change RAM (PRAM) and/or resistive RAM (RRAM). The memories <b>1200</b><i>a </i>and <b>1200</b><i>b </i>may be implemented in the same package as the main processor <b>1100</b>.</p><p id="p-0170" num="0145">The storage devices <b>1300</b><i>a </i>and <b>1300</b><i>b </i>may serve as non-volatile storage devices configured to store data regardless of whether power is supplied thereto, and have larger storage capacity than the memories <b>1200</b><i>a </i>and <b>1200</b><i>b</i>. The storage devices <b>1300</b><i>a </i>and <b>1300</b><i>b </i>may respectively include storage controllers (STRG CTRL) <b>1310</b><i>a </i>and <b>1310</b><i>b </i>and Non-Volatile Memories (NVMs) <b>1320</b><i>a </i>and <b>1320</b><i>b </i>configured to store data via the control of the storage controllers <b>1310</b><i>a </i>and <b>1310</b><i>b</i>. Although the NVMs <b>1320</b><i>a </i>and <b>1320</b><i>b </i>may include flash memories having a two-dimensional (2D) structure or a three-dimensional (3D) V-NAND structure, the NVMs <b>1320</b><i>a </i>and <b>1320</b><i>b </i>may include other types of NVMs, such as, for example, PRAM and/or RRAM.</p><p id="p-0171" num="0146">The storage devices <b>1300</b><i>a </i>and <b>1300</b><i>b </i>may be physically separated from the main processor <b>1100</b> and included in the system <b>1000</b> or implemented in the same package as the main processor <b>1100</b>. The type of the storage devices <b>1300</b><i>a </i>and <b>1300</b><i>b </i>may be, for example, solid-state devices (SSDs) or memory cards, and the storage devices <b>1300</b><i>a </i>and <b>1300</b><i>b </i>may be removably combined with other components of the system <b>100</b> through an interface, such as the connecting interface <b>1480</b> that will be described further below. The storage devices <b>1300</b><i>a </i>and <b>1300</b><i>b </i>may be devices to which a standard protocol, such as a universal flash storage (UFS), an embedded multi-media card (eMMC), or a non-volatile memory express (NVMe), is applied, without being limited thereto.</p><p id="p-0172" num="0147">The image capturing device <b>1410</b> may capture still images or moving images. The image capturing device <b>1410</b> may include, for example, a camera, a camcorder, and/or a webcam.</p><p id="p-0173" num="0148">The user input device <b>1420</b> may receive various types of data input by a user of the system <b>1000</b> and include, for example, a touch pad, a keypad, a keyboard, a mouse, and/or a microphone.</p><p id="p-0174" num="0149">The sensor <b>1430</b> may detect various types of physical quantities, which may be obtained from outside of the system <b>1000</b>, and convert the detected physical quantities into electric signals. The sensor <b>1430</b> may include, for example, a temperature sensor, a pressure sensor, an illuminance sensor, a position sensor, an acceleration sensor, a biosensor, and/or a gyroscope sensor.</p><p id="p-0175" num="0150">The communication device <b>1440</b> may transmit and receive signals between other devices outside the system <b>1000</b> according to various communication protocols. The communication device <b>1440</b> may include, for example, an antenna, a transceiver, and/or a modem.</p><p id="p-0176" num="0151">The display <b>1450</b> and the speaker <b>1460</b> may serve as output devices configured to respectively output visual information and auditory information to the user of the system <b>1000</b>.</p><p id="p-0177" num="0152">The power supplying device <b>1470</b> may appropriately convert power supplied from a battery embedded in the system <b>1000</b> and/or an external power source, and supply the converted power to each of components of the system <b>1000</b>.</p><p id="p-0178" num="0153">The connecting interface <b>1480</b> may provide connection between the system <b>1000</b> and an external device, which is connected to the system <b>1000</b>, and may be capable of transmitting and receiving data to and from the system <b>1000</b>. The connecting interface <b>1480</b> may be implemented by using various interface schemes, such as, for example, advanced technology attachment (ATA), serial ATA (SATA), external SATA (e-SATA), small computer small interface (SCSI), serial attached SCSI (SAS), peripheral component interconnection (PCI), PCI express (PCIe), NVMe, IEEE 1394, a universal serial bus (USB) interface, a secure digital (SD) card interface, a multi-media card (MMC) interface, an eMMC interface, a UFS interface, an embedded UFS (eUFS) interface, and a compact flash (CF) card interface.</p><p id="p-0179" num="0154">In an embodiment, the digital signal processing core <b>140</b> or <b>200</b> or the floating point operation circuit <b>300</b> described with reference to <figref idref="DRAWINGS">FIGS. <b>1</b> to <b>13</b></figref> may be included in the accelerator <b>1130</b>.</p><p id="p-0180" num="0155">In the above-described embodiments, components according to the present disclosure are described by using the terms &#x201c;first&#x201d;, &#x201c;second&#x201d;, &#x201c;third&#x201d;, etc. It will be understood that these terms &#x201c;first&#x201d;, &#x201c;second&#x201d;, &#x201c;third&#x201d;, etc. are used herein to distinguish one element from another, and the elements are not limited by these terms. Thus, a &#x201c;first&#x201d; element in an embodiment may be described as a &#x201c;second&#x201d; element in another embodiment.</p><p id="p-0181" num="0156">In the above-described embodiments, components according to embodiments of the present disclosure are referenced by using blocks. The blocks may be implemented with various hardware devices, such as, for example, an integrated circuit, an application specific IC (ASIC), a field programmable gate array (FPGA), and a complex programmable logic device (CPLD), firmware driven in hardware devices, software such as, for example, an application, or a combination of a hardware device and software. Also, the blocks may include circuits implemented with semiconductor elements in an integrated circuit, or circuits enrolled as an intellectual property (IP) block.</p><p id="p-0182" num="0157">In the above-described embodiments, when two or more elements or values are described as being substantially the same as or about equal to each other, it is to be understood that the elements or values are identical to each other, the elements or values are equal to each other within a measurement error, or if measurably unequal, are close enough in value to be functionally equal to each other as would be understood by a person having ordinary skill in the art. For example, the term &#x201c;about&#x201d; as used herein is inclusive of the stated value and means within an acceptable range of deviation for the particular value as determined by one of ordinary skill in the art, considering the measurement in question and the error associated with measurement of the particular quantity (e.g., the limitations of the measurement system). For example, &#x201c;about&#x201d; may mean within one or more standard deviations as understood by one of the ordinary skill in the art. Further, it is to be understood that while parameters may be described herein as having &#x201c;about&#x201d; a certain value, according to exemplary embodiments, the parameter may be exactly the certain value or approximately the certain value within a measurement error as would be understood by a person having ordinary skill in the art. Other uses of these terms and similar terms to describe the relationships between components should be interpreted in a like fashion.</p><p id="p-0183" num="0158">According to embodiments of the present disclosure, a floating point operation circuit generates a transform factor and a simplified value from a divisor, generates an inverse value of the simplified value from the simplified value, and calculates an inverse value of the divisor from the inverse value of the simplified value. The simplified value may have a value that increases a speed at which an inverse value is calculated. Accordingly, an operating method of a floating point operation circuit supporting a division operation at an increased speed, and an integrated circuit including the floating point operation circuit, are provided.</p><p id="p-0184" num="0159">While the present disclosure has been described with reference to embodiments thereof, it will be apparent to those of ordinary skill in the art that various changes and modifications may be made thereto without departing from the spirit and scope of the present disclosure as set forth in the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230004349A1-20230105-M00001.NB"><img id="EMI-M00001" he="5.67mm" wi="76.20mm" file="US20230004349A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230004349A1-20230105-M00002.NB"><img id="EMI-M00002" he="5.67mm" wi="76.20mm" file="US20230004349A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230004349A1-20230105-M00003.NB"><img id="EMI-M00003" he="6.01mm" wi="76.20mm" file="US20230004349A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004" nb-file="US20230004349A1-20230105-M00004.NB"><img id="EMI-M00004" he="8.47mm" wi="76.20mm" file="US20230004349A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00005" nb-file="US20230004349A1-20230105-M00005.NB"><img id="EMI-M00005" he="5.67mm" wi="76.20mm" file="US20230004349A1-20230105-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00006" nb-file="US20230004349A1-20230105-M00006.NB"><img id="EMI-M00006" he="6.01mm" wi="76.20mm" file="US20230004349A1-20230105-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An operating method of a floating point operation circuit, comprising:<claim-text>in response to receiving a first instruction, generating a first output by performing a fused multiplication and addition operation on a first input, a second input, and a third input; and</claim-text><claim-text>in response to receiving a second instruction, generating a second output by inverting one input of a fourth input, a fifth input, and a sixth input,</claim-text><claim-text>wherein generating the second output comprises:<claim-text>generating a transform factor and a simplified value from the one input.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the second output further comprises:<claim-text>generating a simplified output by performing an inverse operation, which is based on the simplified value, at least twice by using the floating point operation circuit.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein generating the second output further comprises:<claim-text>generating the second output by performing an inverse transform operation on the simplified output by using the transform factor.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the inverse transform operation comprises multiplying the simplified output and the transform factor together.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the inverse operation is based on a Newton-Raphson method.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the simplified value belongs to a range from about 0.5 to about 1.0.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein generating the simplified output by performing the inverse operation based on the simplified value at least twice comprises:<claim-text>performing the inverse operation once by performing the fused multiplication and addition operation, which is based on the first instruction, twice.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the transform factor and the simplified value from the one input comprises:<claim-text>generating the simplified value by multiplying the one input and the transform factor together.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein generating the transform factor and the simplified value from the one input is differently performed depending on whether the one input belongs to a normal range or belongs to a subnormal range.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein, when generating the transform factor and the simplified value from the one input,<claim-text>in response to the one input belonging to the normal range, the transform factor has, as an exponent value, a value obtained by subtracting an exponent value of the one input and 1 from an exponent bias value.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein, when the generating the transform factor and the simplified value from the one input,<claim-text>in response to the one input belonging to the subnormal range, the transform factor has, as an exponent value, a value obtained by adding an exponent bias value to a zero count of a mantissa value of the one input and subtracting 2 therefrom.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein an exponent value of the simplified value is fixed to &#x2212;1.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the simplified value is fixed as belonging to a normal range, regardless of whether the one input belongs to the normal range or belongs to a subnormal range.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. An operating method of a floating point operation circuit, comprising:<claim-text>calculating an inverse value of a divisor of a division operation, based on a second operation mode; and</claim-text><claim-text>performing a multiplication operation of a dividend and an inverse value of the divisor, based on a first operation mode,</claim-text><claim-text>wherein calculating the inverse value of the divisor of the division operation, based on the second operation mode comprises:</claim-text><claim-text>generating a transform factor and a simplified value from the divisor, in the second operation mode.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the first operation mode supports a fused multiplication and addition operation.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the divisor, the inverse value of the divisor, and the dividend comprise a binary sign value, a binary exponent value, and a binary mantissa value, based on an IEEE (Institute of Electrical and Electronics Engineers) 754 standard.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. An integrated circuit, comprising:<claim-text>a first register;</claim-text><claim-text>a second register;</claim-text><claim-text>a third register;</claim-text><claim-text>a fourth register;</claim-text><claim-text>a fifth register; and</claim-text><claim-text>a floating point operation circuit,</claim-text><claim-text>wherein, in a first operation mode, the floating point operation circuit generates a first intermediate value by multiplying a value of the first register and a value of the second register together, generates an output value by adding a value of the third register and the first intermediate value, and stores the output value in the fourth register,</claim-text><claim-text>wherein, in a first phase of a second operation mode, the floating point operation circuit generates a simplified value and a transform factor from a value of the second register, stores the simplified value in the fourth register, and stores the transform factor in the fifth register, and</claim-text><claim-text>wherein a value having a sign opposite to a sign of a value stored in the fourth register is transferred to the first register.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The integrated circuit of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein, in a second phase of the second operation mode, the floating point operation circuit repeats a calculation operation of adding a product of a value stored in the second register and a value stored in the first register and a value stored in the third register so as to be stored in the fourth register, at least twice, and<claim-text>wherein a specific initial value is input to the second register at a beginning of the calculation operation.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The integrated circuit of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein, in a third phase of the second operation mode, the floating point operation circuit generates a second intermediate value by adding a product of a value stored in the second register and a value stored in the first register and a value stored in the third register, and multiplies the second intermediate value and the transform factor stored in the fifth register so as to be stored in the fourth register.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The integrated circuit of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the first register, the second register, the third register, the fourth register, the fifth register, and the floating point operation circuit are implemented with a digital signal processor, a neural processor, or a computer vision processor.</claim-text></claim></claims></us-patent-application>