<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007097A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007097</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17929053</doc-number><date>20220901</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>51</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>321</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>51</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>321</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">INTERWORKING SERVICE FOR THE RESTFUL INTERNET OF THINGS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16754152</doc-number><date>20200407</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11470168</doc-number></document-id></parent-grant-document><parent-pct-document><document-id><country>WO</country><doc-number>PCT/US2018/055595</doc-number><date>20181012</date></document-id></parent-pct-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17929053</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62571493</doc-number><date>20171012</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Convida Wireless, LLC</orgname><address><city>Wilmington</city><state>DE</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>LY</last-name><first-name>Quang</first-name><address><city>North Wales</city><state>PA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>WANG</last-name><first-name>Chonggang</first-name><address><city>Princeton</city><state>NJ</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>LI</last-name><first-name>Xu</first-name><address><city>Plainsboro</city><state>NJ</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>WATFA</last-name><first-name>Mahmoud</first-name><address><city>Saint Leonard</city><country>CA</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>SEED</last-name><first-name>Dale N.</first-name><address><city>Allentown</city><state>PA</state><country>US</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>CEPEDA</last-name><first-name>Rafael A.</first-name><address><city>London</city><country>GB</country></address></addressbook></inventor><inventor sequence="06" designation="us-only"><addressbook><last-name>GRIFFIN</last-name><first-name>Owen</first-name><address><city>Reading</city><country>GB</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An interworking service entity receives server registration requests including indications of service layer protocols used by each server, maintains a repository of server information, and uses the repository for interworking requests of devices to servers of different protocols based on a server type provided in discovery requests. Other matching information may include, for example, server security protocol, supported services, service territory, availability, capacity, or loading, as device information or preferences, such a supported service, supported interface type, or a supported device type.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="114.98mm" wi="158.75mm" file="US20230007097A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="158.92mm" wi="109.39mm" orientation="landscape" file="US20230007097A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="76.62mm" wi="98.38mm" orientation="landscape" file="US20230007097A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="73.32mm" wi="76.71mm" orientation="landscape" file="US20230007097A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="200.24mm" wi="159.34mm" orientation="landscape" file="US20230007097A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="145.97mm" wi="144.02mm" orientation="landscape" file="US20230007097A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="164.68mm" wi="158.75mm" orientation="landscape" file="US20230007097A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="173.06mm" wi="145.88mm" orientation="landscape" file="US20230007097A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="186.94mm" wi="159.17mm" orientation="landscape" file="US20230007097A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="171.96mm" wi="128.61mm" orientation="landscape" file="US20230007097A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="182.20mm" wi="131.49mm" orientation="landscape" file="US20230007097A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="165.27mm" wi="181.95mm" orientation="landscape" file="US20230007097A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="226.99mm" wi="147.57mm" file="US20230007097A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="99.65mm" wi="115.57mm" orientation="landscape" file="US20230007097A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="218.78mm" wi="172.89mm" orientation="landscape" file="US20230007097A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="160.61mm" wi="124.80mm" orientation="landscape" file="US20230007097A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="169.67mm" wi="149.35mm" orientation="landscape" file="US20230007097A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="166.45mm" wi="168.06mm" orientation="landscape" file="US20230007097A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="193.55mm" wi="150.71mm" orientation="landscape" file="US20230007097A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="178.39mm" wi="144.19mm" orientation="landscape" file="US20230007097A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="162.31mm" wi="138.01mm" orientation="landscape" file="US20230007097A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="194.06mm" wi="154.43mm" orientation="landscape" file="US20230007097A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="198.71mm" wi="150.28mm" orientation="landscape" file="US20230007097A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="190.16mm" wi="173.82mm" orientation="landscape" file="US20230007097A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="200.74mm" wi="159.43mm" orientation="landscape" file="US20230007097A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="195.24mm" wi="168.32mm" orientation="landscape" file="US20230007097A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="85.34mm" wi="124.54mm" orientation="landscape" file="US20230007097A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="85.34mm" wi="118.28mm" orientation="landscape" file="US20230007097A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="217.42mm" wi="178.99mm" orientation="landscape" file="US20230007097A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="180.59mm" wi="157.65mm" orientation="landscape" file="US20230007097A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="207.43mm" wi="170.69mm" orientation="landscape" file="US20230007097A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="187.37mm" wi="161.37mm" orientation="landscape" file="US20230007097A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00032" num="00032"><img id="EMI-D00032" he="165.52mm" wi="164.42mm" orientation="landscape" file="US20230007097A1-20230105-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00033" num="00033"><img id="EMI-D00033" he="178.05mm" wi="179.49mm" orientation="landscape" file="US20230007097A1-20230105-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00034" num="00034"><img id="EMI-D00034" he="172.72mm" wi="167.47mm" orientation="landscape" file="US20230007097A1-20230105-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00035" num="00035"><img id="EMI-D00035" he="183.05mm" wi="155.28mm" orientation="landscape" file="US20230007097A1-20230105-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00036" num="00036"><img id="EMI-D00036" he="131.91mm" wi="169.93mm" orientation="landscape" file="US20230007097A1-20230105-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00037" num="00037"><img id="EMI-D00037" he="198.46mm" wi="167.05mm" orientation="landscape" file="US20230007097A1-20230105-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This Application is a continuation of U.S. patent application Ser. No. 16/754,152 filed Apr. 7, 2020, which is a National Stage Application filed under 35 U.S.C. 371 of International Application No. PCT/US2018/055595, filed Oct. 12, 218, which claims the benefit of U.S. Provisional Application No. 62/571,493 filed on Oct. 12, 2017, entitled &#x201c;Interworking Service for the RESTful Internet of Things&#x201d;, the content of which are hereby incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Machine-To-Machine (M2M), Internet-of-Things (IoT), and Web-of-Things (WoT) network deployments may employ unicast and multicast communications between nodes such as M2M/IoT/WoT servers, gateways, and devices which host M2M/IoT/WoT applications and services. Such network deployments may include, for example, constrained networks, wireless sensor networks, wireless mesh networks, mobile ad-hoc networks, and wireless sensor and actuator networks, and operate according to various standards, such as oneM2M, OCF, IETF CoRE RD, HyperCAT, W3C WoT, or OMA LWM2M.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0004" num="0003">An interworking service entity facilitates discovery, registration, and interoperability of IoT devices and servers that operate according to different protocols, thus, for example, enabling dynamic configuration of IoT networks post deployment. The interworking service entity processes registration and discovery requests, and other communications, in accordance with data repositories of server information and device information, along with mapping tables, policies, protocol units, API definitions, and the like to effect server matching, translation, and message forwarding services. Communications with devices and servers may use multiple protocol units. Mapping tables and policies, for example, may be modified by authorized users or entities via web interfaces.</p><p id="p-0005" num="0004">For example, an interworking service entity may receive server registration requests, where each request includes an indication of a service layer protocol by each server. The interworking service entity may then maintain a repository of such server information, and use the repository to match a device to a server when the device provides a discovery request that includes an indication of a server type sought by the device. Similarly, servers may provide other information, such as an indication of a security protocol, a supported service, a service territory, an availability, a capacity, or a loading, which the interworking service entity may use in finding a match between a device seeking a service and a server providing the service, albeit via a different protocol. Devices may similarly provide information such as a supported service, a supported interface type, or a supported device type to assist the interworking service entity in finding a matching server.</p><p id="p-0006" num="0005">Once a device and server are matched, the interworking service entity may further facilitate communication between the device and server by forwarding, relaying, translation, or otherwise processing messages between device and server.</p><p id="p-0007" num="0006">This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore, the claimed subject matter is not limited to limitations that solve any or all disadvantages noted in any part of this disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007">A more detailed understanding may be had from the following description, given by way of example in conjunction with the accompanying drawings.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates example high-layer components of an IoT protocol stack.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example system architecture for IoT client-server operations.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example system architecture for IoT peer-to-peer operations with a central repository.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example smart home.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example smart city.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example cellular network operator use case.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is block diagram of an example interworking service system architecture.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIGS. <b>8</b>, <b>9</b>, and <b>10</b></figref> show a call flow of an example interworking service procedure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a block diagram of an example interworking service entity architecture.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flow chart of example interworking request/response procedure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a call flow of an example interworking server registration procedure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a call flow of an example modified IoT server registration procedure for IoT server to IoT server registration.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a call flow of an example IoT server discovery procedure.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a call flow of an example IoT device discovery and registration procedure.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a call flow of an example generic IoT server discovery request in HTTP.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a call flow of an example IoT server registration procedure from RD to CSE.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>19</b></figref> and <figref idref="DRAWINGS">FIG. <b>20</b></figref> show a call flow of an example IoT server registration procedure from CSE to RD.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIGS. <b>21</b></figref> and <figref idref="DRAWINGS">FIG. <b>22</b></figref> show a call flow of an example interworking RD endpoint registration request to oneM2M CSE.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>23</b></figref> is a call flow of an example interworking oneM2M resource discovery to RD lookup interface.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>24</b></figref> is a call flow of an example oneM2M AE retrieval request with interworking service.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>25</b></figref> is a call flow of another example oneM2M AE retrieval request with interworking service.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>26</b></figref> illustrates an example data model mapping from RD to oneM2M.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>27</b></figref> illustrates another example data model mapping from RD to oneM2M.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>28</b></figref> is a call flow of an example oneM2M resource discovery interworking to HyperCAT simple search.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>29</b></figref> is a call flow of an example IoT server registration from oneM2M CSE to HyperCAT server.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>30</b></figref> is a call flow of an example interworking involving a HyperCAT client search and a oneM2M resource discovery.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>31</b></figref> is a call flow of an example interworking involving a HyperCAT catalogue items and oneM2M CSE resources.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>32</b></figref> is a call flow of an example interworking involving a oneM2M CSE resources and HyperCAT catalogue items</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>33</b></figref> shows an example graphical user interface of a data model mapping table.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>34</b></figref> is a system diagram of an example machine-to-machine (M2M), Internet of Things (IoT), or Web of Things (WoT) communication system in which one or more disclosed embodiments may be implemented.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>35</b></figref> is a system diagram of an example architecture that may be used within the M2M/IoT/WoT communications system illustrated in <figref idref="DRAWINGS">FIG. <b>34</b></figref>.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>36</b></figref> is a system diagram of an example communication network node, such as an M2M/IoT/WoT device, gateway, or server that may be used within the communications system illustrated in <figref idref="DRAWINGS">FIGS. <b>34</b> and <b>35</b></figref>.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>37</b></figref> is a block diagram of an example computing system in which a node of the communication system of <figref idref="DRAWINGS">FIGS. <b>34</b> and <b>35</b></figref> may be embodied.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS</heading><p id="p-0042" num="0041">The benefits of the Internet of Things (IoT) will be more fully realized when multiple and disparate &#x201c;connected&#x201d; devices are able to communicate with each other, and be accessible, in a seamless manner. This is proving difficult to achieve as the race to implement IoT solutions has resulted in a multitude of different, isolated IoT platforms supporting different connected sensors and devices. Initial efforts to standardize the way devices are accessed and share information has been started by Standards Developing Organizations (SDOs) such as oneM2M, ETSI, OCF, W3C, IETF, and OMA, among others. The emerging problems with these standardization activities include vendors being uncertain as to which standards to adopt, on the one hand, and limited physical and economical resources preventing the implementation of multi-standard compatibility in devices.</p><p id="p-0043" num="0042">With multiple private and standardized Service Layer (SL) platforms in the market, the key issue to solve now is how these platforms may integrate and interoperate in a seamless manner. Taking a smart city deployment as an example, city planners may be commissioned to acquire the best sensors within a price range. Currently, vendors of connected devices usually develop their own proprietary platforms, and therefore the data from their devices is only available and locked within their platforms. As a result, cities end up with many incompatible systems and disconnected datasets preventing effective and coordinated city planning. In another example, a smart home, such as the example smart home shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, may have different standard-compatible devices that cannot be controlled or accessed using a single standardized protocol. The reason being is that each device will only have connectivity to a particular standard. Consequently, users will be forced to use multiple applications to interact with their connected devices, with these devices existing in isolated groups.</p><p id="p-0044" num="0043">Current interworking developments within some SDOs are focused on interworking other IoT technology platforms to their respective frameworks. For example, there are interworking developments within oneM2M that interworks other IoT technologies such as OCF, LWM2M, etc. to oneM2M. However, the expected and currently growing market for IoT-enabled devices is becoming so large that interoperability across multiple private and standardized IoT technology platforms is crucial to enable the next generation of interworking connected devices.</p><p id="p-0045" num="0044">In addition, and due to the rapid development of devices for specific purposes, the current solutions for device configuration in SL protocols may not work for all devices. Typically, the device configuration is one of pre-provisioning information onto the IoT-enabled device. For headless devices, this may be an issue as there is no user interface to update their configuration. An alternative method is to use device management (DM), which requires certain over-head that includes communicating to a DM server to obtain configuration information. Finally, a device may discover relevant configuration data using discovery mechanisms, but constrained devices may not have enough resources to be programmed to discover relevant information from them and programmatically use it to communicate to the IoT system. When interworking is factored in, the process becomes more complex as the device configuration information of multiple SL protocols may be different, which places an extra burden to the user who is deploying the device.</p><p id="p-0046" num="0045">An interworking entity may solve the need for interoperability of IoT devices from different IoT technology platforms, facilitate access to data, and provide for a more simplified device configuration process. The interworking entity will need to support various IoT protocols and provide interworking among these different protocols. In addition, the entity may support providing device configuration services on behalf of devices to offload a crucial but sometimes difficult requirement for the devices. Finally, the interworking entity will be in position to expose data and devices, from a particular private or standardized IoT platform, for external consumption through Application Programming Interfaces (APIs), web portals, or any other technologies that may use current or future web protocols.</p><p id="p-0047" num="0046">The growing market for generic and specific IoT solutions is growing so large that multiple IoT standards are fundamental to integrate and unleash the full potential of the IoT. With many emerging applications relying on IoT, and the lack of a framework to share data across multiple systems, an interworking service may help solve the fragmentation of having devices from multiple IoT protocols communicate with each other. The service may provide interworking at the message level where information in a message is formatted from one protocol to another protocol. The IoT entities, hence, receive messages in their native protocols and may not be aware that the message originated from another protocol. The interworking service may also assist in the device configuration process to simplify the deployment of IoT devices and may expose devices and their data, originally from a single framework, to external applications.</p><p id="p-0048" num="0047">An Interworking Service such as those described herein may achieve several goals. First is defining a system architecture for an Interworking Service to interface to IoT servers and IoT devices and to offer interworking communications between different IoT standards.</p><p id="p-0049" num="0048">Second is providing a procedure for IoT servers to register to the Interworking Service to advertise their services to IoT devices. The procedure exposes an interface to the IoT server to enable interworking via the Interworking Service without needing to support alternative protocols.</p><p id="p-0050" num="0049">Third is providing a generic IoT Server Discovery procedure for IoT devices and other IoT servers to discover available IoT servers using common application protocol bindings available in all SL standards. The IoT Server Discovery procedure may also assist with device configuration of IoT devices to make deployment easier.</p><p id="p-0051" num="0050">Fourth is providing a capability for discovering IoT devices who host their own resources and registering the device to an available IoT server for advertising the resources available on the devices.</p><p id="p-0052" num="0051">Fifth is providing external web-based interfaces, or supported standard-based interfaces, that expose the IoT devices, data, and IoT servers the Interworking Service manages, and also providing for extensible updates to mapping tables that are critical for interworking.</p><p id="p-0053" num="0052">Sixth is defining interworking procedures with the Interworking Service to offer mixed SL standard communications among IoT devices. Embodiments are provided for interworking a request from one SL protocol to another, for interworking a response from one SL protocol to another, and for interworking between SL protocol systems such as oneM2M, OCF, IETF CoRE RD, HyperCAT, W3C WoT, OMALWM2M, and the like.</p><p id="p-0054" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Abbreviations</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="56pt" align="left"/><colspec colname="2" colwidth="161pt" align="left"/><tbody valign="top"><row><entry>3GPP</entry><entry>3rd Generation Partnership Project</entry></row><row><entry>AE</entry><entry>Application Entity</entry></row><row><entry>CBOR</entry><entry>Concise Binary Object Representation</entry></row><row><entry>CoAP</entry><entry>Constrained Application Protocol</entry></row><row><entry>CoRE</entry><entry>Constrained RESTful Environments</entry></row><row><entry>CSE</entry><entry>Common Services Entity</entry></row><row><entry>CSF</entry><entry>Common Services Function</entry></row><row><entry>DM</entry><entry>Device Management</entry></row><row><entry>ETSI</entry><entry>European Telecommunications Standards Institute</entry></row><row><entry>GUI</entry><entry>Graphical User Interface</entry></row><row><entry>HTTP</entry><entry>Hypertext Transfer Protocol</entry></row><row><entry>IETF</entry><entry>Internet Engineering Task Force</entry></row><row><entry>IoT</entry><entry>Internet of Things</entry></row><row><entry>IP</entry><entry>Internet Protocol</entry></row><row><entry>IPE</entry><entry>Interworking Proxy Entity</entry></row><row><entry>IPv6</entry><entry>Internet Protocol version 6</entry></row><row><entry>JSON</entry><entry>JavaScript Object Notation</entry></row><row><entry>LwM2M</entry><entry>Lightweight Machine-to-Machine</entry></row><row><entry>M2M</entry><entry>Machine-to-Machine</entry></row><row><entry>MBMS</entry><entry>Multimedia Broadcast/Multicast Service</entry></row><row><entry>MQTT</entry><entry>Message Queue Telemetry Transport</entry></row><row><entry>OCF</entry><entry>Open Connectivity Foundation</entry></row><row><entry>OIC</entry><entry>Open Interconnect Consortium</entry></row><row><entry>OMA</entry><entry>Open Mobile Alliance</entry></row><row><entry>RD</entry><entry>Resource Directory</entry></row><row><entry>SCEF</entry><entry>Service Capability Exposure Function</entry></row><row><entry>SDO</entry><entry>Standards Developing Organization</entry></row><row><entry>SL</entry><entry>Service Layer</entry></row><row><entry>TCP</entry><entry>Transmission Control Protocol</entry></row><row><entry>UDP</entry><entry>User Datagram Protocol</entry></row><row><entry>URI</entry><entry>Uniform Resource Identifier</entry></row><row><entry>W3C</entry><entry>World Wide Web Consortium</entry></row><row><entry>WoT</entry><entry>Web of Things</entry></row><row><entry>XML</entry><entry>eXtensible Markup Language</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0055" num="0053">Herein, the term &#x201c;client&#x201d; generally refers to an application that initiates a request to a server entity to obtain some information about resources hosted on the server. A client application may run on a device as a standalone application and may be referred to as a client device. In IoT, clients may also have server capabilities if they are able to accept notifications or process requests. Generally, clients do not host resources.</p><p id="p-0056" num="0054">Herein, the terms &#x201c;headless device&#x201d; and &#x201c;headless application&#x201d; generally refer to a device or an application that does not have a user interface via which configuration information may be provided. Such a device or application has to be configured using a network connection or through some hardware port such as a serial port.</p><p id="p-0057" num="0055">Herein, the term &#x201c;IoT&#x201d; refers to all Machine-To-Machine (M2M), Internet-of-Things (IoT), and Web-of-Things (WoT) network deployments, e.g., servers, gateways, and devices which host M2M/IoT/WoT applications and services, such as are used on oneM2M, OCF, IETF CoRE RD, HyperCAT, W3C WoT, and OMA LWM2M networks.</p><p id="p-0058" num="0056">Herein, the terms &#x201c;IoT server&#x201d; and &#x201c;SL server&#x201d; generally refer to a server entity that operates within an IoT system. An IoT server is generically any server in the system while a SL server is an IoT server that implements a particular SL protocol. The terms are used interchangeably herein.</p><p id="p-0059" num="0057">Herein, the term &#x201c;primitive message&#x201d; generally refers to a message formatted according to a service layer protocol in which devices that implement such a protocol may communicate with each other.</p><p id="p-0060" num="0058">Herein, the term &#x201c;server&#x201d; generally refers to an entity that hosts resources and offers services to client applications. Servers receive and process requests from client applications. Examples are web servers and service layer servers such as an oneM2M CSE. Servers may also have client capabilities if they are able to send or initiate a request to another server or device.</p><p id="p-0061" num="0059">Herein, the term &#x201c;procedure&#x201d; generally refers to methods, devices, and architectures for achieving certain functionality. The term &#x201c;procedure&#x201d; is often used in lieu of &#x201c;method&#x201d; to avoid confusion with the term &#x201c;method&#x201d; as applied to IoT protocols. The procedures described herein should be understood as being adaptable, for example, to being performed in a variety contexts and a variety ways, including altering the exact steps and sequence of steps, without departing from the spirit of the concepts disclosed.</p><p id="p-0062" num="0060">The Internet of Things (IoT) is a technology concept in which devices encompassing everyday objects may be connected to a network for communicating to other objects, exchange data and make this data available to derive insight and information. As a result, there is potential for billions and billions of networked, or connected, devices to communicate with each other and generate large amounts of data for consumption and analysis. To take advantage of these possibilities, multiple Standards Developing Organizations (SDOs) have formed to define a standardized way in which these connected devices may operate with each other and be accessible through a common format. Organizations such as oneM2M, ETSI, OCF, W3C, IETF, OMA, etc. have set out to define such a standard.</p><p id="p-0063" num="0061">The standards development from each SDO share common elements in the service layer (SL) protocols they define. Figure I shows the upper layers of an IoT protocol stack, in which different SL protocols and supporting protocols are listed for each layer. At the very top of the Application layer is the software that implements the desired business logic that creates the initial message content. Underneath the application logic are the SL protocols themselves. The payloads of the SL protocols are encoded in a format such as JSON or XML and the entire message is encoded using an Application protocols such as HTTP, CoAP or MQTT. The resulting message is then encapsulated within a Transport Layer protocol (e.g., TCP or UDP) and then within an IP protocol (e.g., IPV4 or IPv6) before being sent to the lower layers for distribution.</p><p id="p-0064" num="0062">For each SL protocol, there are bindings to the various payload and application protocols shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In fact, some SL protocols have bindings to multiple payload formats, and possibly multiple application protocols as well. As a result, one SL protocol may share the use of the same payload formats and application protocols as another SL protocol. The difference then among different SL protocols is the information required within a primitive message at the service layer. This information mainly consists of SL identifiers, the data model representation of SL entities, the required data for a primitive message, and how the SL protocol binds to the underlying protocols.</p><p id="p-0065" num="0063">Service layer architectures usually take the form of either a client-server architecture, as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, or a peer-to-peer architecture, as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In a client-server architecture, a client initiates communications by sending a request to a server. The server, which hosts resources that clients access, provides the capability to return data or to perform some operation as requested by the clients. The server operates as a centralized entity that may be scaled to process many requests from client applications. If a device running a client application has resources, it will store its resources on the server and let the server manage those resources. In the example of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the servers SL Server, SL Gateway, and SL Device all have both server functionalities, such as accepting requests, and client functionalities, such as initiating or sending requests. The Client Applications mainly have client functionality but may also have server functionality if they support receiving notifications. Thus, the main difference between server and client functionality is that servers host resources while clients do not.</p><p id="p-0066" num="0064">In the example peer-to-peer architecture shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, two or more entities communicate in a distributed manner in a decentralized system. The peers themselves may have both client and server functionalities but for a given communications link, one peer performs the role of a client while the other peer performs the role of a server. The same semantics of resource hosting applies here as in the client-server architecture. However, peers host their own resources instead of hosting them on a centralized server. A repository may exist to host resource links on behalf of a peer to support cases when the peer may not be available, for example during sleep cycles. Clients may discover the resource links from the repository and access the resource's content directly on the peer owning the resource.</p><p id="p-0067" num="0065">Another component of SL protocols (e.g., oneM2M, OMA) is the method to perform device configurations, which entails giving IoT devices information on how to connect to and communicate with an IoT server. The information consists of the contact address of the IoT server, some identifiers, security credentials, information to include in the initial request, and other protocol specific information. An IoT device must somehow discover or be provisioned with this information about the SL server it is going to communicate with. The device configuration is typically performed through pre-provisioning of the SL server information to IoT devices prior to deployment. An alternative method is to use a SL feature such as device management to download the information to the IoT device. A third method is to use a configuration tool to provision the information but the mechanisms on how to do so are usually not specified by the SL protocol.</p><p id="p-0068" num="0066">With the proliferation of connected devices, proprietary platforms and SDOs developing IoT standards, the issue of interoperability arises. Take for example a home automation use case in which various IoT devices are deployed. These devices may operate using SL protocols from different SDOs, as shown in the example of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In this example, four different SL protocols are used by IoT devices deployed in the home. As a result, the devices are not accessible or able to communicate or work with each other in a coordinated manner. Instead, the homeowner needs to have multiple applications that are compliant with one or more of the four different used standards to control all the devices in the home. This adds undue complexity to the management of the devices on the homeowner, who may want one device, from one standard, to follow action from input to another device belonging to another standardized platform.</p><p id="p-0069" num="0067"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a similar use case in a smart city deployment. The local government of a city wants to improve the services offered to its citizens by deploying IoT-enabled sensors connected to an underlying platform. However, the city has limited resources and money to purchase, configure, and monitor the IoT infrastructure. Consequently, the city ends up with a mix of isolated devices and locked data repositories using different SL protocols. In the short-term, this solution fulfills the city's expectations for each specific sector, at the cost of preventing the future creation of more comprehensive cross-sector solutions by having interconnectivity across all their IoT-enabled devices and platforms.</p><p id="p-0070" num="0068"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example use case involving a cellular operator's interest in providing connectivity for the IoT market. The operator wants to attract as many IoT service providers as possible and offer value add IoT services, such as data cleaning and analytics, in addition to offering connectivity. These services offer the operator an additional revenue stream on top of the revenue they receive for providing connectivity. For example, if operators could offer multi-protocol interactions, they could then add bootstrapping and device provisioning services in their secure networks to further enhance their IoT services to users by not only offering connectivity, but a means to offer services that exploit the synergies created when multiple datasets and devices may be accessed using the same mechanism.</p><p id="p-0071" num="0069">Each of the three use cases highlights the need for IoT interoperability in order to enable a new level of multi-system functionality and offer better services to data consumers and end users. Currently, various SDOs are fervently working towards defining their own standard in order to make it the de facto standard for IoT. As such, there are numerous competing standards with varying levels of acceptance/adoption from different industry sectors, which is adding fragmentation to an already fragmented IoT ecosystem.</p><p id="p-0072" num="0070">Current interworking developments within some SDOs are focused on interworking other IoT technology platforms to their specific propositions. For example, there are developments within oneM2M for interworking with other IoT platforms, such as OCF and LWM2M. However, the current and expected market for IoT is promising to be so large that multiple IoT platforms, with slightly different offerings, may be needed to cover different applications and sectors. Consequently, an interworking framework to enable better integration of data and systems is fundamental to unleash the full potential from the IoT.</p><p id="p-0073" num="0071">In addition, the current solutions for device configuration in SL protocols may not work for all devices regardless of the underlying platform. Typically, the device configuration is one of pre-provisioning information onto the IoT device. For headless devices, this may be an issue as there is no user interface with which to provision configuration or management updates. A second method is to use device management which requires certain over-head that includes communicating to a DM server to obtain configuration details. Finally, the device may discover such information using discovery mechanisms but constrained devices may not have enough resources to be programmed with the capability to discover the information and programmatically use it to communicate to the underlying IoT platform. When interworking is factored in, the process becomes more complex as the device configuration information of SL protocols may be different, which may either reduce the functionality of connected devices or even make them useless.</p><p id="p-0074" num="0072">An interworking entity may address the needs for interoperability among IoT-enabled devices from different IoT technology frameworks and provide for a more simplified device configuration process. The interworking entity will need to support various IoT protocols and provide interworking among the different protocols. In addition, the entity may support providing device configuration services on behalf of devices to offload this crucial but sometimes difficult-to-achieve requirement for the devices. Finally, the interworking entity will be in position to expose the servers and devices in an IoT system to external applications using web protocols or other mechanisms.</p><p id="p-0075" num="0073">The procedures and systems described herein address, inter alia, the issues of IoT interworking in a holistic manner in which the focus is towards interworking among IoT technologies rather than just targeting interworking within a particular SL protocol. The architecture proposed herein allows users and devices from one IoT protocol to communicate with devices from another IoT protocol at the message level. In other words, the interworking is performed by formatting the information in a message from one protocol to another protocol. The IoT entities, hence, receive messages in their native protocols and may not be aware that the message originated from another protocol. Note that the interworking may not support complete interworking between SL protocols due to differences in features of each SL protocol. What is supported is the ability for devices to functionally communicate with each other to make a multi-standard IoT framework operate as seamlessly as possible. For example, a light switch may control a light even if the devices communicate using different SL protocols. On the other hand, complex SL operations or remote procedure calls may not be supported.</p><p id="p-0076" num="0074">Central to such an interworking IoT system is an Interworking Service, which may communicate between IoT servers and IoT devices and provide interworking services between them. IoT servers or devices will send requests in their native SL protocol to the Interworking Service, which will translate the request to another SL protocol, and send the interworked request to the target IoT server or device. The same process repeats for responses but in the reverse direction. Therefore, messages sent to and from the Interworking Service are in the native SL protocol of the corresponding entities. The Interworking Service may operate as a standalone entity within the IoT system or be integrated into other entities that provides interworking capabilities to the integrated entity. For example, the Interworking Service may be integrated into a oneM2M CSE to offer interworking capabilities.</p><p id="p-0077" num="0075">The internal components of the Interworking Service will be described, which features three interfaces: IoT Server, IoT Device, and Web interfaces, as an embodiment of external access. Procedures are proposed herein for both the IoT Server and IoT Device interfaces to enable the interworking capabilities. The Web interface provides the ability to update the policies and mapping tables within the Interworking Service to provide for interworking extensibility while also exposing the IoT servers and devices in the system to external web applications. A new IoT Server Registration procedure is proposed herein to allow IoT servers to register to the Interworking Service and advertise their services to IoT devices. In addition, two new discovery procedures are introduced to assist with the interworking: IoT Server Discovery and IoT Device Discovery. The IoT Server Discovery procedure makes it easy for IoT devices to find available IoT servers and incorporates the important function of device configuration to off-load this functionality from IoT devices. Finally, the IoT Device Discovery procedure allows the Interworking Service to proactively discover IoT devices that host their own resources and may register them to an available IoT server.</p><p id="p-0078" num="0076">The procedures proposed herein are call flows that are in addition to existing SL protocol procedures that new devices may implement to take advantage of the interworking capabilities. These procedures introduce a slight overhead to existing SL protocols but offer interoperability afforded by the Interworking Service. Legacy devices that do not implement the procedures proposed herein may still operate with the Interworking Service. In those cases, the interworking may be determined by policies provisioned within the Interworking Service, which will be implementation dependent. Devices will either discover the Interworking Service using their native discovery request or be provisioned with information about the Interworking Service. They then send requests in their native protocol to the Interworking Service, which then translates the request to an entity operating with a different SL protocol.</p><p id="p-0079" num="0077">The Interworking Service may operate as an intermediary between IoT servers and devices to offer interworking capabilities. The Interworking Service may be integrated in an IoT server, such as a oneM2M Common Services Entity (CSE) or a CoRE Resource Directory (RD) server, or implemented as a standalone server that offers interworking capabilities. <figref idref="DRAWINGS">FIG. <b>7</b></figref> shows an example Interworking Service operating within an IoT system in which it interfaces to IoT servers, IoT devices, and to web entities such as a web browser. The Interworking Service manages communications among the various entities in the system and is able to allow communications between different SL protocols. For example, an OCF sensor may communicate with a oneM2M server through the Interworking Service. The web interface allows an administrator or authorized user to update certain functionalities within the Interworking Service such as the mapping tables and repository policies to add extensibility to the Interworking Service.</p><p id="p-0080" num="0078">The capabilities of an example Interworking Service are illustrated in the call flows of <figref idref="DRAWINGS">FIG. <b>8</b></figref>, <figref idref="DRAWINGS">FIG. <b>9</b></figref>, and <figref idref="DRAWINGS">FIG. <b>10</b></figref> as procedures within an IoT system. The procedures highlight the different capabilities provided by the Interworking Service and shows the relationship of the Interworking Service to IoT servers and IoT devices.</p><p id="p-0081" num="0079">An example internal architecture of an Interworking Service is shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref>. As previously stated, there are two interface components that serve to communicate between IoT servers and IoT devices. Furthermore, individual Protocol Units for the supported SL protocols are required to enable interworking. These protocol units are integrated with other components of the Interworking Service to provide protocol message translation when interworking between SL protocols. The Interworking Engine interfaces to the Mapping Tables component to provide data model mapping and other mappings between SL protocols. Note that the Interworking Engine and the Mapping Tables components are shown as separate entities but they may be integrated as one entity as they are both required to perform interworking. The IoT Repository stores information about devices based on device requests through the Interworking Service and utilizes the provisioned policies to enable or assist for better interworking support. The IoT Server Interface contains a Server Matching component to assist in forwarding device requests to the appropriate IoT servers. A web interface is used for an administrator or authorized user to provision new mapping table documents or to update policies to add extensibility to the Interworking Service.</p><p id="p-0082" num="0080">The IoT Server Interface serves as the communications link between the Interworking Service and IoT servers. This interface supports the IoT Server Registration procedure described herein and stores information about IoT servers obtained from the registration request. It then makes the information about the IoT servers available to the IoT Repository to enable web searches of IoT servers. In addition, the Server Matching component utilizes information about the IoT servers and possibly from device requests or policies provided to the IoT Repository to forward requests to the appropriate IoT servers.</p><p id="p-0083" num="0081">An IoT server may explicitly register to the Interworking Service using the registration procedure described herein. Alternatively, an administrator or authorized user of the Interworking Service may also input details of an IoT server into the repository. Mandatory and options server information may be saved in the repository. This information may be used by the IoT Server interface to initiate communications to an IoT server on behalf of IoT device requests. The information may also be shared with the IoT Repository to enable web searches of IoT servers. This information may be shared as new IoT servers are registered or when an update is performed.</p><p id="p-0084" num="0082">Mandatory server information may include: server address; server ID; SL protocol; payload formats; application protocols; security protocols; supported services; and supported resources.</p><p id="p-0085" num="0083">A server address may contain contact information where the IoT server may be reached. For example, the server address may consists of an IP address and port number or a Fully Qualified Domain Name (FQDN). Optionally or additionally, a server address may include a cellular specific address such as an Access Point Network (APN) and a phone number.</p><p id="p-0086" num="0084">A server ID may be an identifier or name for the IoT server. An SL protocol identifier may be used to identify the SL protocol and also the version the IoT server operates on, e.g., oneM2M R2, OCF 1.0, LWM2M 1.0, etc.</p><p id="p-0087" num="0085">A payload format indicator may include a list of payload formats the IoT server supports, e.g., JSON, XML, CBOR, etc.</p><p id="p-0088" num="0086">An application protocols indicator may include a list of application protocols the IoT server supports, e.g., CoAP, HTTP, MQTT, etc.</p><p id="p-0089" num="0087">A security protocols indicator may be used to identifies the security framework and algorithms the IoT server supports, e.g., TLS, DTLS, IPSEC, VPN, PM, AES, SHA256, 3DES, etc.</p><p id="p-0090" num="0088">Supported services information may include a list of SL service types and/or instances the IoT server supports. This list may also include information such as a URI or link to a corresponding interface and/or semantic description of a service.</p><p id="p-0091" num="0089">Supported resources information may include a list of SL resource types and/or instances the IoT server supports. This list may also include information such as a URI or link to a corresponding interface and/or semantic description of a resource.</p><p id="p-0092" num="0090">Optional server information may include: supported interfaces; service territory; availability; capacity; and loading.</p><p id="p-0093" num="0091">Supported interfaces information may include a list of interfaces the IoT server supports. This list may also include information such as a URIs or links to a corresponding resources or services associated with this interface and/or semantic descriptions of the interface.</p><p id="p-0094" num="0092">Service territory information may include a service area the IoT server is serving.</p><p id="p-0095" num="0093">Availability information may include availability in terms of a schedule the IoT server is on to provide services to IoT devices.</p><p id="p-0096" num="0094">Capacity information may include a total capacity of the IoT server; the capacity may have multiple criteria such as# of devices, total storage capacity, maximum number of simultaneous transactions.</p><p id="p-0097" num="0095">Loading information may include a current loading as a percentage of the capacity of the IoT server.</p><p id="p-0098" num="0096">Once IoT servers are registered, the data saved may also be used in responses provided to the generic IoT Server Discovery procedure. The server context that is returned may provide details about available IoT servers that an IoT device may communicate with based on some discovery criteria. Some IoT devices may have the capability to choose which IoT server it registers or communicates to. These devices may have a user interface in which a human is present to deploy the device and help the device registers to the IoT server.</p><p id="p-0099" num="0097">Similarly, the Server Matching component may also use the server context to match appropriate target IoT servers that a device request may be forwarded to. This determination may be provided by policies provisioned by an administrator to the IoT Repository component or determined by the device request itself by including information in protocol headers or payloads. In addition, the Server Matching component may need to maintain information for request-response matching once a device request is sent to the IoT server. When a response arrives to the IoT Server interface, the request-response matching information is used to forward the response to the IoT Repository informing it of the IoT device the response is targeted towards. The IoT Server interface may also receive requests from IoT servers, in which case the process defined above in reverse is applicable. In this case, the Server Matching component may obtain information about IoT devices from the IoT Repository.</p><p id="p-0100" num="0098">The IoT Device Interface is responsible for communicating with IoT devices on behalf of IoT servers. This interface supports the generic IoT Server Discovery procedure in which IoT devices may discover available IoT servers. Once the discovery is made, IoT devices send their requests through the Interworking Service to the IoT server using their native protocol. The IoT Device interface in turn may assist in device configuration to select an IoT server for the device. In certain use cases, this may be sufficient as there may be only one IoT server available such as the home automation use case. In other use cases, there may be policies provisioned to the IoT Repository to help make the determination for device configuration. Note that device configuration in this case involves the Interworking Service making a decision of which IoT server to target the request to. The IoT device only needs to specify the name of the IoT server to send the request to and the Interworking Service forwards the request using the contact information from the server database. Therefore, the device configuration for IoT devices is limited to performing the IoT Server Discovery procedure and selecting a server name to target requests to. The Interworking Service manages the maintenance of potential changes in IP address of the IoT servers. Some constrained IoT devices may even let the Interworking Service decide on which IoT server to forward its requests to. The device may use the HTTP or CoAP Accept header to indicate the SL protocol it is operating with and let policies in the IoT Repository match the IoT server to forward the requests to.</p><p id="p-0101" num="0099">This interface is responsible for implementing the generic IoT Server Discovery procedure by either responding to IoT client requests or by sending periodic multicast or broadcast messages advertising the availability of IoT servers. The multicast or broadcast messages may be performed over access technologies such as IP multicast or 3GPP MBMS. In addition, the multicast or broadcast messages may also be messages sent using different SL protocols on top of the aforementioned access technologies. When IoT clients that implement the discovery procedure described herein send a request towards the &#x201c;/iotDiscovery&#x201d; URI, the device interface communicates with both the Protocol Units and the IoT Repository to obtain the desired information to return in the response. After decoding the request using the appropriate protocol units, the device interface may obtain IoT server details through the IoT Repository based on the query parameters supplied in the discovery request. Upon receiving the data, the device interface contacts the Protocol Units to encode the response before sending it back to the IoT device.</p><p id="p-0102" num="0100">The device interface may also support existing SL protocol discovery requests through the Protocol Units. This may include matching IoT server names and/or identifiers provided in the request to registered IoT servers obtained from the IoT Repository. It may also involve checking the policies that may be provisioned in the IoT Repository to determine which IoT servers to send the request to if there are multiple IoT servers that communicates using the same SL protocol as the protocol used by the request.</p><p id="p-0103" num="0101">The Web interface offers extensibility to the Interworking Service as an administrator or authorized user is able to update the contents of the interworking policies within the IoT Repository or the mapping tables that are required for interworking. In addition, the Web interface exposes the IoT system to external web technologies where users may use a web browser to search for IoT servers and IoT devices that are stored in the server and device databases, respectively. If the information in the server and device databases are organized in a fashion similar to how web servers organize their resources, the Web interface may also support web crawlers to automate IoT server and IoT device discoveries.</p><p id="p-0104" num="0102">The interworking policies are used to direct how requests are interworked and consists of a sequence of rules to map requests to an appropriate server, potentially to another SL protocol. More details are provided when the IoT Repository is described. In addition, an administrator may add or update the mapping tables that are required by the Interworking Engine. There are three main types of mapping tables: data model mappings, protocol to protocol mappings including identifiers, and data type mappings. These mappings and their examples will be described further when the Mapping Tables are described.</p><p id="p-0105" num="0103">Protocol units may contain all the SL centric protocols required to support a particular IoT standard, such as the protocols shown residing at the application layer in the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Examples are the application protocols HTTP and CoAP, the payload formats JSON and XML, and the SL protocols themselves oneM2M, OCF, etc. These protocols are used by both the IoT Server and IoT Device interfaces to extract information from messages sent from IoT servers and devices, respectively, before forwarding the information to the IoT Repository. Conversely, the protocol components are used to encode messages targeting either IoT servers or IoT devices from both the Interworking Engine and the IoT Repository.</p><p id="p-0106" num="0104">Each supported protocol will have a component operating in the Protocol Units that are decoupled from each other. As a result, each protocol may be called separately to extract protocol centric information and the data is saved into an internal data structure used within the Interworking Service for sharing with other components. For example, Example I shows a simple IoT message encoded in oneM2M protocol&#x2014;note the message is formatted for easier viewing. Example I shows the components of the message: the method, a target URI, the application protocol used, a list of HTTP protocol header information, and a message payload in XML format. Notice in the HTTP headers that there are some oneM2M centric headers which have the prefix &#x201c;X-M2M&#x201d;. The presence of this information may be used to determine the SL protocol the request was generated with.</p><heading id="h-0006" level="1">EXAMPLE 1</heading><p id="p-0107" num="0105">Example of an IoT Device Message encoded in oneM2M and HTTP Protocols</p><p id="p-0108" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="161pt" align="left"/><thead><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>section</entry><entry>line</entry><entry>text</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="28pt" align="char" char="."/><colspec colname="3" colwidth="161pt" align="left"/><tbody valign="top"><row><entry>App.</entry><entry>1</entry><entry>POST/CSE01 HTTP/1.1</entry></row><row><entry>Protocol</entry><entry/><entry/></row><row><entry>Protocol</entry><entry>2</entry><entry>X-M2M-RI:webApp</entry></row><row><entry>Header</entry><entry>3</entry><entry>Accept: application/xml</entry></row><row><entry/><entry>4</entry><entry>X-M2M-Origin:CExerciserApp</entry></row><row><entry/><entry>5</entry><entry>Host: 172.25.0.202:6000</entry></row><row><entry/><entry>6</entry><entry>Content-Type:application/xml; ty=2</entry></row><row><entry/><entry>7</entry><entry>Content-Length: 369</entry></row><row><entry>Message</entry><entry>8</entry><entry>&#x3c;?xml version=&#x201c;I.O&#x201d; encoding=&#x201c;UTF-8&#x201d; standalone=</entry></row><row><entry>Payload</entry><entry/><entry>&#x201c;no&#x201d;?&#x3e; I</entry></row><row><entry/><entry>9</entry><entry>&#x3c;m2m:ae xmlns:m2m=&#x201c;http://www.onem2m.org/xml/</entry></row><row><entry/><entry/><entry>protocols&#x201d; :</entry></row><row><entry/><entry>10</entry><entry>xmlns: xsi=&#x201c;http://www.w3.org/2001/XMLSchema-</entry></row><row><entry/><entry/><entry>instance&#x201d; m=&#x201c;CAPPI&#x201d;&#x3e; I</entry></row><row><entry/><entry>11</entry><entry>&#x2003;&#x3c;lbl&#x3e;AEOI/lbl&#x3e; I</entry></row><row><entry/><entry>12</entry><entry>&#x2003;&#x3c;apn&#x3e;APNpet&#x3c;/apn&#x3e; I</entry></row><row><entry/><entry>13</entry><entry>&#x2003;&#x3c;api&#x3e;AEpet&#x3c;/api&#x3e; :</entry></row><row><entry/><entry>14</entry><entry>&#x2003;&#x3c;poa&#x3e;http://127.0.0.1:54000&#x3c;/poa&#x3e; I</entry></row><row><entry/><entry>15</entry><entry>&#x2003;&#x3c;rr&#x3e;true&#x3c;/rr&#x3e; I</entry></row><row><entry/><entry>16</entry><entry>&#x3c;/m2m:ae&#x3e; I</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0109" num="0106">In example 1, the application protocol, shown in line 1, includes the method, target URI, and the application protocol version.</p><p id="p-0110" num="0107">To decode the message, a call is first made to the HTTP component to extract the HTTP headers and determine where the payload data is located in the message. From information provided in the HTTP header, another internal call is made to extract data from the message payload. In both cases, the extracted data is saved in a data structure defined for use internally within the Interworking Service. After the data is extracted and saved into the internal data structure, the appropriate SL protocol is determined based on the information provided in the request. This determination may be made by inspecting the information contained in the content-type parameter where a SL protocol may be specified for Post/Put requests or it may be determined by extracting identifiers provided in the target URI and matching the ones provided in the Server Database for Retrieve/Delete requests, or it may be determined by inspecting the message payload to detect SL protocol information such as XML namespace. In addition, the detection of other SL protocol centric headers may be used to identify the SL protocol associated with the request.</p><p id="p-0111" num="0108">The IoT Repository is the traffic controller of the Interworking Service that communicates to all the external interfaces: IoT Server, IoT Device, and Web interfaces. It contains a repository of all IoT Devices that have used the Interworking Service, has access to the details of all registered IoT servers, and makes available all IoT devices and IoT servers to external web queries. It is responsible for triggering IoT device interworking by communicating to the Interworking Engine when interworking between SL protocols is required. Policies may also be provisioned to help determine when interworking is triggered.</p><p id="p-0112" num="0109">When the IoT Device interface receives a request, it extracts data using the facilities of the Protocol Units and saves it to an internal data structure. This data structure notes the identifying information about the IoT devices from the message details such as IP address and port number and information provided within the SL message such as the target URI, protocol headers, payload data, and other distinguishing data.</p><p id="p-0113" num="0110">Contents of IoT repository internal data structure elements may include IoT device details and request details. For example, IoT device details may include device addresses, protocols, IoT servers, and server preferences. IoT device details may also be saved in the device database to keep a repository of IoT devices.</p><p id="p-0114" num="0111">A device address may be sourced from a device request, for example, and contain the address of the device that usually consists of IP address and port number or a Fully Qualified Domain Name obtained from the device's request. There may be other addresses such as a cellular identifier to specify how to respond to the device. This will be used to return the response to the device.</p><p id="p-0115" num="0112">An indication of protocols, such as SL, application, or payload may be sourced from a device request or IoT repository, for example, and contain the different protocols used in the device request if present. When present, the content type value may specify which SL and payload protocols are used in the request and the target URI may be used to match server name/ID. When not present, the Interworking Service may use other protocol centric information contained in protocol headers and payload data of the request message to determine the type(s) of protocol(s) applicable to the request.</p><p id="p-0116" num="0113">A target IoT server data element may be sourced from a device request or IoT repository, for example. The target IoT server may be determined by inspecting the target URI of the request, for example. An IoT device may specify this after first discovering the available IoT servers using procedures similar to those described herein. For cases in which the device request does not specify a target IoT server (e.g., by using a wildcard character or other delimited character), the IoT Repository may select the IoT server on behalf of the device via some provisioned policy or criteria such as the type of service layer protocol the device is using in its requests.</p><p id="p-0117" num="0114">A server preference may be sourced from a device request or IoT repository, for example. The device request may specify a preference for a certain IoT server type such as oneM2M or OCF by using the Accept option (or alternatively other options) that is available in both HTTP and CoAP protocols. This case occurs if the IoT device wants to communicate to a particular SL server but does not care which server instance it is. An example is if the communications is performed in a localized configuration where only one IoT server is deployed such as home or factory automation environment.</p><p id="p-0118" num="0115">Contents of IoT repository internal data structure elements may include request details, such as methods, target resources, header information, and payload, all of which may be source from a device request. The method that is extracted from the IoT device's request may be, for example, CREATE, RETRIEVE, UPDATE, DELETE. The target resource may be extracted from the target URI from the IoT device's request.</p><p id="p-0119" num="0116">Protocol header information may be extracted from the IoT device's request. This information may include the identifier or name of an IoT server, the type of transport, application or service layer protocols supported by the device, the type of data serializations supported by the device, the data serialization format of the data contained in the payload of the request, semantic descriptions that provide the meaning of the information contained with the payload.</p><p id="p-0120" num="0117">The data transmitted in the payload (if any) from the IoT device's request. In addition to application specific data, the payload may also contain include the identifier or name of an IoT server, the type of transport, application or service layer protocols supported by the device, the type of data serializations supported by the device, the data serialization format of the data contained in the payload of the request, semantic descriptions that provide the meaning of the information contained with the payload.</p><p id="p-0121" num="0118">Having access to both server and device databases as shown in the example of <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the IoT Repository is in position to expose the data to external web searches through the Web Interface. Queries may be made from a web browser to target the Interworking Service through the web interface to locate IoT servers and IoT devices. The Interworking Service itself may be configured as an IoT web portal that offers a one stop site for all things IoT.</p><p id="p-0122" num="0119">When a request is received, an interworking decision is made either based on the information in the request or based on policies provisioned to the IoT Repository. If a request contains a recognized IoT server name in the target URI or other parts of the message and a content type specification, whether using an Accept or Content-Type HTTP or CoAP header, an interworking decision may be made if the IoT server's SL protocol does not match that of the content type specification. There may be other clues in the request message that specifies which SL protocol the request is generated with: the presence of SL protocol specific headers or possibly information in the message payload.</p><p id="p-0123" num="0120">In the absence of such clues in the request message, policies may be provisioned to the IoT Repository to assist in making the interworking decision. The policy may be a set of rules that is evaluated against the request or it may be implemented via an algorithm that takes into account the loading of an IoT server or uses information present in the request payload. Some examples of rules are provided in Table 2. The examples in Table 2 only show one criteria for the request message but more complex criteria are supported to combine multiple criteria together. For example, &#x201c;if request is from SL Protocol A and it is a 3GPP device and contains a &#x201c;&#x3c;string&#x3e;&#x201d; in the payload, then interwork to SL Protocol D&#x201d; may be a rule. The order of the rules may also determine the priority of the interworking decision with highest priority placed first. Multiple policies may exist to allow for separating the rules per SL protocol to provide for more granular interworking decisions, especially in larger systems.</p><p id="p-0124" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Examples of loT Interworking Policy Rules</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="119pt" align="left"/><colspec colname="2" colwidth="98pt" align="left"/><tbody valign="top"><row><entry>Request Information</entry><entry>Policy Rule</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>If request is from SL Protocol A</entry><entry>Interwork to SL Protocol B</entry></row><row><entry>If request is from IP domain A</entry><entry>Interwork to SL Protocol C</entry></row><row><entry>If request is from 3GPP domain</entry><entry>Interwork to SL Protocol D</entry></row><row><entry>If request is using HTTP protocol</entry><entry>Interwork to SL Protocol E</entry></row><row><entry>If request is using CoAP protocol</entry><entry>Interwork to SL Protocol F</entry></row><row><entry>If request is in device group#</entry><entry>Interwork to SL Protocol A</entry></row><row><entry>If request contains &#x201c;&#x3c;string&#x3e;&#x201c; in</entry><entry>Interwork to SL Protocol D</entry></row><row><entry>payload</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0125" num="0121">The Interworking Engine is triggered by the IoT Repository when a message needs to be interworked from one SL protocol to another. At this time, the internal data structure contains information of a request from one SL protocol and the IoT Repository has determined that the request needs to be interworked to another SL protocol. The determination may be based on an explicit indicator provided by the requesting device, the matching of a server or device ID specified in the request, or by a policy provisioned to the IoT Repository.</p><p id="p-0126" num="0122">Within the Interworking Engine, a set of API definitions are found for primitive messages of all supported SL protocols. These API definitions help the Interworking Engine translate data from the internal data structure provided by the IoT Repository into data required by the primitive message of the new SL protocol. To do this, the Interworking Engine communicates with the Mapping Tables component, which provides mapping relationship of data models, identifiers, data types, and other protocol semantics between SL protocols. These two components are shown logically as individual components in <figref idref="DRAWINGS">FIG. <b>11</b></figref> but they may be realized as one component as both are needed for interworking. There will be many interactions between these two components in order to complete the mapping of one SL protocol to another.</p><p id="p-0127" num="0123">The API definition may be organized as a document which specifies the needed information for a primitive message as required by the associated SL protocol. An example of a request API definition document is shown in Table 3 for a oneM2M Create AE request and an example of a response definition is shown in Table 4 for a oneM2M response. The document may include attributes or parameters that are required by the primitive message as well as the optionality of each attribute or parameter and the associated data type. In addition, the document may include references to information in the mapping tables to provide the translation from one SL protocol to another SL protocol.</p><p id="p-0128" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="273pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example API Definition for oneM2M Create AE Request</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="91pt" align="left"/><colspec colname="2" colwidth="42pt" align="left"/><colspec colname="3" colwidth="84pt" align="left"/><colspec colname="4" colwidth="56pt" align="left"/><tbody valign="top"><row><entry/><entry/><entry/><entry>Mapping Table</entry></row><row><entry>Attribute</entry><entry>Optionality</entry><entry>Data Type</entry><entry>Reference</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>To</entry><entry>M</entry><entry>xs: any URI</entry><entry>onem2m: $to</entry></row><row><entry>From</entry><entry>O</entry><entry>m2m: ID</entry><entry>onem2m: $fr</entry></row><row><entry>requestIdentifier</entry><entry>M</entry><entry>m2m: requestID</entry><entry>onem2m: $rqi</entry></row><row><entry>resourceType</entry><entry>M</entry><entry>m2m: resourceType</entry><entry>onem2m: $ty</entry></row><row><entry>content</entry><entry>M</entry><entry>m2m: primitiveContent</entry><entry>onem2m: $pc</entry></row><row><entry>role</entry><entry>O</entry><entry>xs: any Type</entry><entry>onem2m: $rol</entry></row><row><entry>originatingTimestamp</entry><entry>O</entry><entry>m2m: timestamp</entry><entry>onem2m: $ot</entry></row><row><entry>requestExpirationTimestamp</entry><entry>O</entry><entry>m2m: absRelTimestamp</entry><entry>onem2m: $rqet</entry></row><row><entry>resultExpirationTimestamp</entry><entry>O</entry><entry>m2m: absRelTimestamp</entry><entry>onem2m: $rset</entry></row><row><entry>operationExecutionTime</entry><entry>O</entry><entry>m2m: absRelTimestamp</entry><entry>onem2m: $oet</entry></row><row><entry>responseType</entry><entry>O</entry><entry>m2m: responseTypeinfo</entry><entry>onem2m: $rt</entry></row><row><entry>resultPersistence</entry><entry>O</entry><entry>m2m: absRelTimestamp</entry><entry>onem2m: $rp</entry></row><row><entry>resultContent</entry><entry>O</entry><entry>m2m: resultContent</entry><entry>onem2m: $rcn</entry></row><row><entry>eventCategory</entry><entry>O</entry><entry>m2m: eventCat</entry><entry>onem2m: $ec</entry></row><row><entry>delivery Aggregation</entry><entry>O</entry><entry>xs: boolean</entry><entry>onem2m: $da</entry></row><row><entry>groupRequestIdentifier</entry><entry>O</entry><entry>xs: string</entry><entry>onem2m: $gid</entry></row><row><entry>resourceName</entry><entry>O</entry><entry>xs: NCName</entry><entry>onem2m: $rn</entry></row><row><entry>accessControlPolicylDs</entry><entry>O</entry><entry>m2m: acpType</entry><entry>onem2m: $acpi</entry></row><row><entry>expirationTime</entry><entry>O</entry><entry>m2m: timestamp</entry><entry>onem2m: $et</entry></row><row><entry>labels</entry><entry>O</entry><entry>m2m: labels</entry><entry>onem2m: $lbl</entry></row><row><entry>announceTo</entry><entry>O</entry><entry>xs: anyURI</entry><entry>onem2m: $at</entry></row><row><entry>announcedAttribute</entry><entry>O</entry><entry>xs: NCName</entry><entry>onem2m: $aa</entry></row><row><entry>dynamicAuthorization</entry><entry>O</entry><entry>xs: anyURI</entry><entry>onem2m: $daci</entry></row><row><entry>ConsultationIDs</entry><entry/><entry/><entry/></row><row><entry>appName</entry><entry>O</entry><entry>xs: string</entry><entry>onem2m: $apn</entry></row><row><entry>App-ID</entry><entry>M</entry><entry>xs: string</entry><entry>onem2m: $api</entry></row><row><entry>pointOfAccess</entry><entry>O</entry><entry>m2m: poaList</entry><entry>onem2m: $poa</entry></row><row><entry>ontologyRef</entry><entry>O</entry><entry>xs: anyURI</entry><entry>onem2m: $or</entry></row><row><entry>requestReachability</entry><entry>M</entry><entry>xs: boolean</entry><entry>onem2m: $rr</entry></row><row><entry>contentSerialization</entry><entry>O</entry><entry>m2m: serializations</entry><entry>onem2m: $csz</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0129" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="273pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 4</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example API Definition for oneM2M Response Message</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="91pt" align="left"/><colspec colname="2" colwidth="42pt" align="left"/><colspec colname="3" colwidth="84pt" align="left"/><colspec colname="4" colwidth="56pt" align="left"/><tbody valign="top"><row><entry/><entry/><entry/><entry>Mapping Table</entry></row><row><entry>Attribute</entry><entry>Optionality</entry><entry>Data Type</entry><entry>Reference</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>responseStatusCode</entry><entry>M</entry><entry>m2m: responseStatusCode</entry><entry>onem2m: $rsc</entry></row><row><entry>requestIdentifier</entry><entry>O</entry><entry>m2m: requestID</entry><entry>onem2m: $rqi</entry></row><row><entry>content</entry><entry>M</entry><entry>m2m: primitiveContent</entry><entry>onem2m: $pc</entry></row><row><entry>to</entry><entry>M</entry><entry>m2m: ID</entry><entry>onem2m: $to</entry></row><row><entry>from</entry><entry>M</entry><entry>m2m: ID</entry><entry>onem2m: $fr</entry></row><row><entry>originatingTimestamp</entry><entry>O</entry><entry>m2m: timestamp</entry><entry>onem2m: $ot</entry></row><row><entry>requestExpirationTimestamp</entry><entry>O</entry><entry>m2m: absRelTimestamp</entry><entry>onem2m: $rqet</entry></row><row><entry>eventCategory</entry><entry>O</entry><entry>m2m: eventCat</entry><entry>onem2m: $ec</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0130" num="0124">Upon being triggered by the IoT Repository, the incoming message may be processed by the Interworking Engine as shown in the <figref idref="DRAWINGS">FIG. <b>12</b></figref>.</p><p id="p-0131" num="0125">In step 1 of <figref idref="DRAWINGS">FIG. <b>12</b></figref>, an Interworking Engine evaluates the incoming message and makes a determination if either a request or response is being interworked.</p><p id="p-0132" num="0126">In step 2, if the message is a response, the appropriate SL protocol response API is selected. For some SL protocols, only a single response exists and therefore that response is selected. For other protocols, different responses may exist and the appropriate response API definition will be selected. The response selection is based on information received in the interworked message as well as information found in the request to this response. Processing continues to step 4.</p><p id="p-0133" num="0127">In step 3, if the message is a request, the Interworking Engine selects a request API definition to use, which may include identifying a data model mapping if the request is either a Post or Put request. An example of a data model mapping document is shown in Table 5. The request method, the target SL protocol, and the target resource are used to select the request definition. Alternatively, the IoT Repository may be in position to make the determination and indicate the request API definition using information in the request message and policies provisioned with such information.</p><p id="p-0134" num="0128">In step 4, once identified, the API definition is retrieved for further processing. An example of a request definition is shown in Table 3 for a oneM2M request to create an AE resource while an example of a response definition is shown in Table 4 for a oneM2M response.</p><p id="p-0135" num="0129">In step 5, after the API definition is retrieved, the first element of the document is extracted.</p><p id="p-0136" num="0130">In step 6, using the extracted definition element, a lookup is made in the Mapping Table to obtain the mapping information. Multiple mapping tables may be retrieved as necessary in order to perform the interworking. For request processing, a lookup to the data model and resource mappings are made while for response processing, a lookup to the response mapping is made.</p><p id="p-0137" num="0131">In step 7, next, the data type of the mapping element is extracted. In step 8, using the extracted data type of the mapping element, a lookup is made to get the data type mapping of the data type used in the internal data structure.</p><p id="p-0138" num="0132">In step 9, having identified the required data type, the data in the input message is retrieved and saved in the primitive message structure to send the request/response message to its final destination. Conversion functions may be utilized to convert data values from the original message to the interwork message as described herein.</p><p id="p-0139" num="0133">In step 10, a check is made if the last element in the API definition document is reached. In step 11, if not, the next element is extracted and the process repeats from steps 5 to 10.</p><p id="p-0140" num="0134">In step 12, once all the elements of the definition document have been processed, the interworked primitive message is ready to be sent to its final destination. This message is returned to the IoT Repository for binding to the appropriate SL protocol for encoding before sending the message to its recipient.</p><p id="p-0141" num="0135">The Mapping Tables component provides various mapping tables to support interworking for both request and response messages, e.g., data model mappings among different SL protocols, SL identifier mappings, data type mappings, response code mappings, and protocol specific parameters that reflects the meta-data contained in messages. The design of the Mapping Tables component allows for new tables to be added as systems evolve and new devices are created for interworking extensibility. This flexibility may be realized through an administrator interface or through a document addition via device management capabilities.</p><p id="p-0142" num="0136">Table 5 shows an example of a mapping table used during the interworking processing. This example table is used for Post and Put requests where some resource is being interworked. In this example, the mapping table shows a data model mapping between the OCF and oneM2M protocols. This mapping table helps determine what API definition documents are selected for requests as the primitive message requirement varies among different resources.</p><p id="p-0143" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 5</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example Data Model Mapping Table of OCF to oneM2M Data Models</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="112pt" align="left"/><colspec colname="2" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>OCF Data Model</entry><entry>oneM2M Data Model</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>oic.wk.rd</entry><entry>remoteCSE</entry></row><row><entry>oic.wk.d</entry><entry>AE</entry></row><row><entry>oic.wk.p</entry><entry>Devinfo</entry></row><row><entry>oic.wk.mnt</entry><entry>Reboot</entry></row><row><entry>oic.r.energy.battery</entry><entry>Battery</entry></row><row><entry>oic.r.operational.state</entry><entry>DevCap</entry></row><row><entry>oic.r.ptz</entry><entry>DevCap</entry></row><row><entry>oic.r.audio</entry><entry>flexContainer</entry></row><row><entry>oic.r.light.dimming</entry><entry>flexContainer</entry></row><row><entry>0lc.r.sensor</entry><entry>flexContainer</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0144" num="0137">The next type of mapping tables are resource mappings between SL protocols as shown in the example in Table 6. Again, this is used for processing interworked requests and the table is used for mapping attributes or parameters of a resource from one SL protocol to another. Note that this type of mapping table may not completely map since SL protocols may be so different from each other that not everything maps. When there is no mapping relationship, an &#x201c;NA&#x201d; may be designated in the mapping table. For no mapping relationship elements, various internal functions are introduced to complete the mappings as best as possible or default values may be provided by policies. These internal functions are used to generate data that goes into the interworked primitive message. OCF have common parameters that are applicable to all messages, for requests only, and for responses only. See oneM2M TS-0001, Functional Architecture. The parameters &#x201c;to&#x201d; and &#x201c;ri&#x201d; are OCF common parameters that are applicable to all messages. The &#x201c;to&#x201d; parameter consist of a URI of the recipient of the message and the &#x201c;ri&#x201d; parameter is a request identifier that uniquely identifies the message.</p><p id="p-0145" num="0000"><tables id="TABLE-US-00007" num="00007"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 6</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example Mapping Table of OCF oic.wk.d Resource to </entry></row><row><entry>oneM2M AE Resource</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="98pt" align="left"/><colspec colname="2" colwidth="105pt" align="left"/><tbody valign="top"><row><entry/><entry>oneM2M AE Resource</entry><entry>OCF oic.wk.d Resource</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>appName</entry><entry>(Device) Name</entry></row><row><entry/><entry>Labels = concat(.)</entry><entry>Spec Version</entry></row><row><entry/><entry>App-ID</entry><entry>Device ID</entry></row><row><entry/><entry>Labels = concat(.)</entry><entry>Data Model Version</entry></row><row><entry/><entry>To</entry><entry>to</entry></row><row><entry/><entry>requestIdentifier</entry><entry>ri</entry></row><row><entry/><entry>resourceType = &#x201c;AE&#x201d;</entry><entry>NA</entry></row><row><entry/><entry>Content = protUnit( )</entry><entry>NA</entry></row><row><entry/><entry>originatingTimestamp</entry><entry>NA</entry></row><row><entry/><entry>= timeDate( )</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0146" num="0138">The internal functions of the Interworking Service may include: fixed functions, conversion functions, manipulation functions, generation functions, and component derived functions. Fixed functions provide fixed data that are known based on the context of the interworking. For example, Table 6 shows a resource mapping between a oneM2M AE resource and an OCF oic.wk.d resource, the mapping for the resourceType in oneM2M is fixed to &#x201c;AE&#x201d;. In this case, there is no one to one mapping and as a result, the internal function is required as resourceType is a mandatory attribute in oneM2M.</p><p id="p-0147" num="0139">Conversion functions help convert data values that have similar meanings but represented with different types. For example, one light switch may have a Boolean type of True and False while another light switch may an integer type 0 and 1. The conversion function will convert the data from the provided type to the required type based on the mapping tables.</p><p id="p-0148" num="0140">Manipulation functions manipulate the data found in the original message and are used to combine or extract data to form new data. For example, the concat(.) function concatenates data from the original message to form new data for the interworked message by combining them together. Other specialize functions may also be created to support the interworking process as necessary.</p><p id="p-0149" num="0141">Generation functions are used to generate data that do not have one to one mapping between SL protocols. The generated data themselves do not have significant bearings to the underlying requests and may be inserted without affecting the operations. For example, a rand( ) function may be use to generate a random number for any identifier or parameter used as a temporary identifier. The value itself is not important but its presence is. Another example is time generation (e.g., timeDate( )), which may not be available in certain constrained devices, where the Interworking Service may provide that added benefit.</p><p id="p-0150" num="0142">Component derived functions are provided by other components within the Interworking Service based on context they may have either from provisioned policies or other information extracted from previous interactions, e.g., from requests. Examples are the iotRepo( ) and protUnit( ) functions to specify these corresponding components are responsible for generating the data.</p><p id="p-0151" num="0143">Table 7 shows another type of mapping table&#x2014;data type mappings. This example shows a mapping table of oneM2M data types to the data types defined in the internal data structure within the Interworking Service. Using this information may aid the Interworking Engine to properly format the data when interworking is performed. The protocol centric data type references will be found in the API definition for each protocol and the internal data type references are specified in the internal data structure. Once the protocol element mapping is determined, then the data type is retrieved to ensure the format is properly translated.</p><p id="p-0152" num="0000"><tables id="TABLE-US-00008" num="00008"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 7</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example Mapping Table of oneM2M Data Types </entry></row><row><entry>to Internal Data Types</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="28pt" align="left"/><colspec colname="1" colwidth="98pt" align="left"/><colspec colname="2" colwidth="91pt" align="left"/><tbody valign="top"><row><entry/><entry>oneM2M Data Types</entry><entry>Internal Data Types</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>xs: boolean</entry><entry>Boolean</entry></row><row><entry/><entry>xs: integer</entry><entry>integer</entry></row><row><entry/><entry>xs: float</entry><entry>float</entry></row><row><entry/><entry>xs: base64Binary</entry><entry>binary</entry></row><row><entry/><entry>xs: string</entry><entry>string</entry></row><row><entry/><entry>m2m: labels</entry><entry>string</entry></row><row><entry/><entry>xs: any URI</entry><entry>string</entry></row><row><entry/><entry>m2m: requestID</entry><entry>string</entry></row><row><entry/><entry>m2m: resourceType</entry><entry>unsigned integer</entry></row><row><entry/><entry>m2m: primitiveContent</entry><entry>string</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0153" num="0144">In addition to requests, mapping tables also exist for responses among the different SL protocols. Table 8 shows an example mapping table of an oneM2M response to an OCF response message. The example lists common OCF parameters for all messages, such as &#x201c;fr&#x201d; which specifies the URI of the message originator and &#x201c;cn&#x201d; which specifies the content of the message, and the parameter &#x201c;rs&#x201d; for the response code, which is applicable in responses only.</p><p id="p-0154" num="0000"><tables id="TABLE-US-00009" num="00009"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 8</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example Mapping Table of oneM2M Response </entry></row><row><entry>to OCF Response</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="133pt" align="left"/><colspec colname="2" colwidth="63pt" align="left"/><tbody valign="top"><row><entry/><entry>oneM2M </entry><entry>OCF</entry></row><row><entry/><entry>Response</entry><entry>Response</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>responseStatusCode</entry><entry>rs</entry></row><row><entry/><entry>requestidentifier</entry><entry>ri</entry></row><row><entry/><entry>content</entry><entry>cn</entry></row><row><entry/><entry>to</entry><entry>to</entry></row><row><entry/><entry>from</entry><entry>fr</entry></row><row><entry/><entry>originatingTimestamp =</entry><entry>NA</entry></row><row><entry/><entry>timeDate( )</entry><entry/></row><row><entry/><entry>requestExpirationTimestamp =</entry><entry>NA</entry></row><row><entry/><entry>timeDate(offset)</entry><entry/></row><row><entry/><entry>eventCategory</entry><entry>NA</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0155" num="0145">The IoT Server Registration procedure requires an IoT server to inform the Interworking Service of its contact information, available services, and any additional information that may be pertinent to the server's operations. The procedure may be triggered by a message sent by an IoT server or be provisioned via a web interface or administrator dashboard. <figref idref="DRAWINGS">FIG. <b>13</b></figref> is a call flow of an example procedure where an IoT server initiates a registration request by sending a POST message to a target URI of &#x201c;/iotRegistration&#x201d;. The payload of the message contains the server context, which may include mandatory server information such as server address, server ID, SL protocol, payload formats, application protocols, security protocols, supported services, and supported resources, as well as optional server information such as supported interfaces, service territory, availability, capacity, and loading. An example of the message payload is shown in Example 2a.</p><p id="p-0156" num="0146">In response, the Interworking Service will save the server context internally for future use and for exposing the IoT server information to web searches for IoT servers. A response is then returned to indicate the status of the registration and optionally an expiration time of the registration. A server token may be returned as well by the Interworking Service to identify the IoT server for future communications. Alternatively, an IoT server may send its native server registration request if one is supported and the server context may be extracted from information provided in that request. To obtain some server context, the Interworking Service may need to perform additional retrieves of resources in the IoT server.</p><p id="p-0157" num="0147">The expiration time may be long lived as long as the IoT server is in operation to minimize the requirement that the IoT server needs to update its registration on a regular basis. However, an IoT server may want to periodically update its registration information to provide updates of its operational status. Examples include if the IoT server is approaching its maximum capacity of handling requests or if an upgrade to the server includes new capabilities that the IoT server wants to advertise. The IoT Server may send a Put request targeting the server token returned from the registration response and provide the updated information in the payload. The Interworking Service may also proactively remove IoT server registrations if it determines the IoT server is non-responsive to requests. Similarly, IoT servers may also remove their registration by sending a Delete request targeting their server token, e.g., &#x201c;/&#x3c;serverToken&#x3e;&#x201d;.</p><heading id="h-0007" level="1">EXAMPLE 2</heading><heading id="h-0008" level="1">Example Server Registration Payload Data</heading><p id="p-0158" num="0148"></p><p id="p-0159" num="0000"><tables id="TABLE-US-00010" num="00010"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x3c;?xml version=&#x201c; 1.0&#x201d; encoding=&#x201c;UTF-8&#x201d;?&#x3e;</entry></row><row><entry>&#x3c;serverRegistration&#x3e;</entry></row><row><entry>&#x2003;&#x3c;address&#x3e;http://iotserver01.example.com&#x3c;/address&#x3e;</entry></row><row><entry>&#x2003;&#x3c;serverID&#x3e;iotServer01.&#x3c;/serverID&#x3e;</entry></row><row><entry>&#x2003;&#x3c;slProtocol&#x3e;oneM2M&#x3c;/slProtocol&#x3e;</entry></row><row><entry>&#x2003;&#x3c;payloadFormats&#x3e;xml,json&#x3c;/payloadFormats&#x3e;</entry></row><row><entry>&#x2003;&#x3c;applicationProtocols&#x3e;http,coap&#x3c;/applicationProtocols&#x3e;</entry></row><row><entry>&#x2003;&#x3c;securityProtocols&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;channel&#x3e;tls1.2,dtls1.2&#x3c;/channel&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;vpn&#x3e;L2TP/IPsec,openVPN&#x3c;/vpn&#x3e;</entry></row><row><entry>&#x2003;&#x3c;/securityProtocols&#x3e;</entry></row><row><entry>&#x2003;&#x3c;supportedServices&#x3e;Registration,Storage,Query,Subscription,,</entry></row><row><entry>&#x2003;&#x2002;DM,AnalyticsSemantics&#x3c;/supportedServices&#x3e;</entry></row><row><entry>&#x2003;&#x3c;supportedResources&#x3e;acp,ae,cnt,la,ol,cin,cb,dlv,fopt,grp,nod,pch,</entry></row><row><entry>&#x2003;&#x2002;req,sch,sub,fwr,swr,mem,bat,dvi,dvc,rbo,&#x3c;/supportedResources&#x3e;</entry></row><row><entry>&#x2003;&#x3c;supportedlnterfaces&#x3e;mcc&#x2019;,mcc,mca&#x3c;/supportedinterfaces &#x3e;</entry></row><row><entry>&#x2003;&#x3c;serviceTerritory&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;region&#x3e;Northeast US&#x3c;/region&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;name&#x3e;Philadelphia, PA&#x3c;/name&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;gps&#x3e;39.9526N,75.1652W&#x3c;/gps&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;radius&#x3e;25 miles&#x3c;/radius&#x3e;</entry></row><row><entry>&#x2003;&#x3c;/serviceTerritory&#x3e;</entry></row><row><entry>&#x2003;&#x3c;availability&#x3e;24/7,365&#x3c;/availability&#x3e;</entry></row><row><entry>&#x2003;&#x3c;capacity&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;storage&#x3e; 16TB&#x3c;/storage&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;devices&#x3e; 1000000&#x3c;/devices&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;requests&#x3e; 10000&#x3c;/requests&#x3e;</entry></row><row><entry>&#x2003;&#x3c;/capacity&#x3e;</entry></row><row><entry>&#x2003;&#x3c;loading&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;current&#x3e;32&#x3c;/current&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;lastUpdate&#x3e;20170619T15403l&#x3c;/lastUpdate&#x3e;</entry></row><row><entry>&#x2003;&#x3c;/loading&#x3e;</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0160" num="0149">In addition to registering to the Interworking Service, an IoT server supporting one service layer protocol may also register to another IoT server supporting a different service layer protocol using a modified procedure of <figref idref="DRAWINGS">FIG. <b>13</b></figref>. The Post request will still target the &#x201c;/iotRegistration&#x201d; URI but the new request will include a query parameter in which the target IoT server is specified. <figref idref="DRAWINGS">FIG. <b>14</b></figref> shows an example of the modified procedure in which IoT Server<b>1</b> is trying to register to IoT Server<b>2</b> through the Interworking Service. Note IoT Server<b>1</b> and IoT Server<b>2</b> are operating with different SL protocols.</p><p id="p-0161" num="0150">In step 1 of <figref idref="DRAWINGS">FIG. <b>14</b></figref>, IoT Serverl sends a Post request targeting &#x201c;/iotRegistration&#x201d; and with a query parameter &#x201c;targetServer=name&#x201d;, where &#x201c;name&#x201d; is the name of IoT Server<b>2</b>. The message payload contains information that is required for the registration request. An Accept option is included to represent the SL protocol of IoT Server.</p><p id="p-0162" num="0151">In step 2, the Interworking Service determines an interworking request is present due to examining the Accept option and comparing to the SL protocol of IoT Server<b>2</b> that is found in the server database. The Interworking Service interworks the registration request using the corresponding mapping tables associated with each IoT Server.</p><p id="p-0163" num="0152">In step 3, the interworked request is sent to IoT Server<b>2</b> with the required information in the registration payload.</p><p id="p-0164" num="0153">In step 4, IoT Server<b>2</b> creates a resource serverl for IoT Server I if the registration is successful. If the registration is not successful, then an error is generated.</p><p id="p-0165" num="0154">In step 5, IoT Server<b>2</b> sends an appropriate response to the Interworking Service.</p><p id="p-0166" num="0155">In step 6, the Interworking Service interworks the response from IoT Server<b>2</b>.</p><p id="p-0167" num="0156">In step 7, the interworked response is returned to IoT Server<b>1</b> with the registered name of the resource (server I) and the expiration for the resource.</p><p id="p-0168" num="0157">In step 8, IoT Serverl may create a local resource for its registration with IoT Server<b>2</b>.</p><p id="p-0169" num="0158">The Interworking Service supports a discovery procedure in which IoT devices may discover it and all registered IoT servers and devices. In a similar fashion, IoT servers may discover the Interworking Service and all registered IoT servers and devices. For example, IoT devices may send a request targeting the URI &#x201c;/iotDiscovery&#x201d; and provide one or more discovery criteria to indicate what the device is looking for. The request may be sent via a multicast address or a unicast address if the IoT device is provisioned with or discovers the address of the Interworking Service. <figref idref="DRAWINGS">FIG. <b>15</b></figref> shows an example procedure for executing an IoT Server Discovery request.</p><p id="p-0170" num="0159">The contents of the discovery criteria may determine the amount of information that is selectively returned by the Interworking Service. Some criteria specify what and how much data is returned while other criteria specify what types of IoT servers and the corresponding server details the device is looking for.</p><p id="p-0171" num="0160">Example discovery criteria may include: all available servers; only matching AND; only matching OR; only best match; IoT server details; IoT server type; supported protocols; supported payload formats; supported services; supported resource types; supported interface types; and supported device types. Table 9 shows an example CoAP message implementing the proposed discovery request.</p><p id="p-0172" num="0161">All Available Servers (aas) Specifies all available IoT servers that match the provided criteria are returned</p><p id="p-0173" num="0162">Only Matching AND (oma) Specifies only IoT servers that match all the provided criteria are returned; when multiple criteria are provided, the IoT server must meet all the criteria in order to be in the list returned</p><p id="p-0174" num="0163">Only Matching OR (omo) Specifies only IoT servers that matches at least one of the provided criteria are returned; when multiple criteria are provided, the IoT server must meet at least one of the criteria in order to be in the list returned</p><p id="p-0175" num="0164">Only Best Match (obm) Specifies only one IoT server is returned that matches the most criteria. If more than one IoT server match the same criteria the Interworking Service may decide which to return based on its local policies (e.g., least recently used IoT server).</p><p id="p-0176" num="0165">IoT Server Details (isd) Specifies how much details are returned about IoT servers; may be divided into various levels such as Basic, All Mandatory, or All. In &#x201c;Basic&#x201d; setting, only IoT server ID and all supported protocols are returned. &#x201c;All Mandatory&#x201d; may include information such as server address, server ID, SL protocol, payload formats, application protocols, security protocols, supported services, and supported resources. &#x201c;All&#x201d; may return all information about the IoT server.</p><p id="p-0177" num="0166">IoT Server Type (ist) specifies the SL server type, e.g., oneM2M, OCF, LWM2M, WoT, Hypercat, etc.</p><p id="p-0178" num="0167">Supported Protocols (sp) Specifies the protocols the IoT server supports, e.g., HTTP, CoAP, MQTT</p><p id="p-0179" num="0168">Supported Payload Formats (spf) Specifies the payload formats the IoT server supports, e.g., JSON, XML, CBOR, Plain Text, etc.</p><p id="p-0180" num="0169">Supported Services (ss) Specifies the SL services the IoT server supports, e.g., Registration, Storage, Query, Subscription, DM, Analytics, Semantics, Retargeting, etc.</p><p id="p-0181" num="0170">Supported Resource Types (srt) Specifies the resource types the IoT server supports, e.g., AE, container, contentInstance, subscription, mgmtObj, etc.</p><p id="p-0182" num="0171">Supported Interface Types (sit) Certain SL protocols have well defined interface types each device supports and this parameter specifies those interfaces, for example, RD support Registration and Lookup interfaces; while OCF supports baseline, sensor, actuator, etc. interfaces.</p><p id="p-0183" num="0172">Supported Device Types (sdt) specifies the types of devices the IoT server supports, e.g., sensors, appliances, HAIM, IPSO, etc. This criteria may also include semantic based discovery and query criteria based on semantic ontology information.</p><p id="p-0184" num="0000"><tables id="TABLE-US-00011" num="00011"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 9</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example IoT Server Discovery Request </entry></row><row><entry>using CoAP Protocol</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="28pt" align="left"/><colspec colname="1" colwidth="98pt" align="left"/><colspec colname="2" colwidth="91pt" align="left"/><tbody valign="top"><row><entry/><entry>Version:</entry><entry>1</entry></row><row><entry/><entry>Type:</entry><entry>CON</entry></row><row><entry/><entry>Token Length:</entry><entry>6</entry></row><row><entry/><entry>Code:</entry><entry>GET</entry></row><row><entry/><entry>msgID:</entry><entry>1032</entry></row><row><entry/><entry>Token:</entry><entry>token1</entry></row><row><entry/><entry>Uri-Path=</entry><entry>discovery</entry></row><row><entry/><entry>Uri-Query=</entry><entry>obm</entry></row><row><entry/><entry>Uri-Query=</entry><entry>isd=basic</entry></row><row><entry/><entry>Uri-Query=</entry><entry>ist=onem2m</entry></row><row><entry/><entry>Uri-Query=</entry><entry>sp=coap</entry></row><row><entry/><entry>Uri-Query=</entry><entry>spf=json</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0185" num="0173">In the absence of discovery criteria, what the Interworking Service returns will be determined by the policies provisioned. One policy may specify that a list of IoT servers and their supported protocols are returned in the message payload to enable the IoT device to decide which server to communicate to. Another policy may be to only return the most popular or least loaded IoT server, the supported protocols, and their capabilities. A third policy may specify that an error response is returned with the message that not enough information is provided to complete the request.</p><p id="p-0186" num="0174">If the Interworking Service is able to process the request, a list of IoT servers is returned that meets the criteria provided in the request. The list may include detailed information about the IoT server such as SL protocol, application protocols, payload formats, supported resource types, etc. The majority of mandatory and option server information may be returned. However, the IoT server's address may not be returned as communications are expected to go through the Interworking Service.</p><p id="p-0187" num="0175">Once an IoT device receives the response to the discovery request, it may then decide which IoT server(s) to communicate to from the list of IoT servers that is provided. The device may examine the details about each IoT server and choose which one (or more) fulfill(s) its requirements. This process may be triggered by a person who is deploying the device and selects the IoT server through a user interface provided by the device. If a device is provisioned with information about the IoT server it must communicate to (e.g., a server supporting a certain SL protocol and provides certain services), the device software may programmatically make this determination and select the IoT server that matches the information returned in the response. For example, a device is configured with the requirements to discover IoT servers that support oneM2M protocol, uses CoAP and JSON protocols, and recognizes IPSO objects. The device then performs an IoT Server Discovery request specifying all the aforementioned criteria as well as specifying the &#x201c;Only Best Match&#x201d; criteria. The response returned would only provide one IoT server that the IoT device's software may then programmatically parse the returned data and continue on with its operations.</p><p id="p-0188" num="0176">Certain headless IoT devices, on the other hand, may not have the capability to make a determination based on the results returned for the discovery request. In these cases, a provisioning tool may be used to initiate the IoT Server Discovery request and have the results displayed in the tool. A user could then select the desired IoT server and initiate a registration request on behalf of the IoT device. Information about the device is provided in the registration request so future communications goes to the device. The provisioning tool may be an application running on a tablet or a smartphone the user interacts with to select the IoT server.</p><p id="p-0189" num="0177">The device configuration may be integrated with the IoT Server Discovery procedure to offload this requirement from IoT devices. A device manufacturer may simplify the design of their device applications by implementing the IoT Server Discovery procedure and let the Interworking Service select the appropriate IoT server to communicate to. In many IoT deployments where there is only one IoT server, the interworking decision is easily made within the Interworking Service through a policy.</p><p id="p-0190" num="0178">In other cases, the use of the Accept header option in either the HTTP or CoAP protocol may be specified during the IoT Server Discovery request to inform the Interworking Service of the SL protocol for the target IoT server. This is an explicit indicator an IoT device may provide to allow the Interworking Service to assist in the device configuration process. Since the discovery procedure is generic enough, all IoT devices may implement the request regardless of SL protocol and use the resulting response to target the desired IoT server.</p><p id="p-0191" num="0179">The availability of the discovery criteria allows IoT devices to generate queries during the discovery procedure to get selective information from the Interworking Service. This may simplify the parsing that is necessary to extract configuration data the device will need to communicate to an IoT server. For devices that have more capabilities and a user interface, the discovery criteria allows for more choices in selecting an IoT server to communicate with regardless of SL protocol.</p><p id="p-0192" num="0180">For peer-to-peer SL protocols such as OCF, the device applications themselves host resources locally and expose a discovery mechanism where other device applications may discover the resources they host. For these SL protocols, the Interworking Service may proactively discover and register the devices and their resources to the IoT Repository. In addition, the Interworking Service may also register the devices and their resources on IoT servers that support a device registration procedure such as oneM2M servers.</p><p id="p-0193" num="0181">In these cases, the Interworking Service may send periodic multicast discovery requests in the native SL protocol to discover the devices and their available resources. For example, the /oic/res resource is used for OCF resource discovery where an OIC client may discover the resources supported by the OIC device being queried. The Interworking Service may send a Get request targeting &#x201c;/oic/res&#x201d; using IP multicast to discover available devices. OIC devices that want to be discovered will respond with a unicast message to the Interworking Service with the contents of the /oic/res resource. The Interworking Service may then store the resulting information in the IoT Repository and may send a registration request(s) to one or more IoT Server(s) that supports such a procedure. In doing so, the Interworking Service may interwork these devices to one or more IoT servers.</p><p id="p-0194" num="0182"><figref idref="DRAWINGS">FIG. <b>16</b></figref> illustrates an example IoT device discovery and registration procedure. In step 1 of <figref idref="DRAWINGS">FIG. <b>16</b></figref>, an Interworking Service performs periodic discovery requests in the native SL protocol. In this example, an OCF discovery request is multicasted using the &#x201c;/oic/res&#x201d; URI. The Interworking Service may also be triggered on demand by a user pressing a button on the device it runs on and in response, sending the generic IoT Device Discovery request.</p><p id="p-0195" num="0183">In step 2, any IoT device that wishes to be discovered will return a response in a unicast message directly to the Interworking Service. The resource may include discovery information the device would like to share. In the example, the contents of the &#x201c;/oic/res&#x201d; is returned.</p><p id="p-0196" num="0184">In step 3, the Interworking Service updates the device database in the IoT Repository and may use the policies provisioned to determine which IoT server to register the IoT device to. The policy may be provisioned such that no registration request is made.</p><p id="p-0197" num="0185">In step 4, if the policy specifies, a device registration request is made on behalf of the IoT Device using the information returned in step 2. An interworked request is sent to the IoT server using the server's native SL protocol.</p><p id="p-0198" num="0186">In step 5, the IoT server responds with the status of the registration request.</p><p id="p-0199" num="0187">The procedure shown in <figref idref="DRAWINGS">FIG. <b>16</b></figref> may also be applied to repositories such as a Resource Directory or a Hypercat server. These repositories store resource links of the actual IoT resources that are hosted elsewhere on IoT devices. The Interworking Service may access these repositories' registration interfaces and register the resource links onto another IoT server such as a oneM2M CSE.</p><p id="p-0200" num="0188">Exemplary embodiments are provided for the IoT Interworking Service procedures defined in this document. Several interworking examples that show the use of the Interworking Service with a oneM2M CSE, a CoRE Resource Directory (RD), and a Hypercat server are presented. See: oneM2M TS-0001, Functional Architecture, CoRE Resource Directory draft-ietf-core-resource-directory-10 of Mar. 13, 2017, and the Hypercat 3.00 Specification.</p><p id="p-0201" num="0189">Note that only pertinent information of messages and data in messages are displayed to convey the information for each particular example.</p><p id="p-0202" num="0190">The following embodiments show how the Interworking Service may be used for the IoT Server Discovery procedure that includes device configuration. In addition, examples of interworking requests from IoT devices and interworking responses from IoT servers are provided.</p><p id="p-0203" num="0191">A cellular service provider has deployed an Interworking Service within its Core Network infrastructure to support IoT deployments. For example, the Interworking Service may be implemented as a function of the SCEF in the 3GPP system. Within the Interworking Service, numerous IoT protocols are implemented such as oneM2M, OCF, LwM2M, WoT, etc. The cellular service provider actively works with IoT server providers and has agreements in place in which different IoT servers register to the Interworking Service using the IoT Server Registration procedure described herein. With the system in place, the cellular service provider advertises to users of the IoT capabilities in its network.</p><p id="p-0204" num="0192">A user is a registered user of an IoT service provider that provides services through a oneM2M server operating in the cloud. The user purchases an IoT electric bike that operates using the OCF protocol and wants to manage the bike through his service provider. The bike has cellular capabilities to provide GPS coordinates and the ability to monitor the bike's battery level, tire pressure, and braking pad depth. In addition, the bike supports the generic IoT Server Discovery procedures described herein and has a user interface on the bike to allow the user to configure the bike to communicate to an IoT server.</p><p id="p-0205" num="0193">After the purchase, the user connects the bike to the cellular provider's network and initiates the IoT Server Discovery procedure. In the request, the user selects that the Interworking Service returns a list of basic information of all IoT servers that implements the oneM2M protocol. The Interworking Service will search its IoT server database and return only IoT servers that may communicate with the oneM2M protocol. The list is returned to the bike and displayed on its interface. The user scrolls through the list to find the IoT service provider he is registered with and selects it to save the server ID locally on the bike's system. All future communications from the bike will use this server ID to inform the Interworking Service where to send the request to. <figref idref="DRAWINGS">FIG. <b>17</b></figref> shows an example procedure in which an IoT Server Discovery request uses the All Available Servers, IotServer Details, and IoT Server Type discovery criteria. In response to the discovery request, the Interworking Service returns a list of three oneM2M servers that it finds in the IoT server database. The list includes the server ID of each IoT server with the basic information for each of the servers&#x2014;the SL protocol, the supported payload format and the application protocols.</p><p id="p-0206" num="0194">Once the user has discovered the IoT server which the bike may communicate to, the bike may then publish its resource information to the IoT server. In OCF, this involves the bike sending a request to the Resource Directory (RD) to register its oic.wk.d resource information. The oic.wk.d resource provides a device ID and name for the bike and the request will target the IoT server previously discovered using the oneM2M server's ID.</p><p id="p-0207" num="0195">The request is sent with a content type of &#x201c;application/xml&#x201d; to indicate the request contains a payload in XML format. The content type may also be specified with other sub-types to identify the specific protocol the message is encoded in. In this case, OCF has chosen to use the common subtype &#x201c;xml&#x201d; rather than a vendor specific sub-type to identify that the OCF protocol is used. For example, oneM2M uses a vendor specific sub-type &#x201c;vnd.onem2m-res+xml&#x201d;.</p><p id="p-0208" num="0196">Upon receiving this request, the Interworking Service may determine interworking is required by comparing the content type specified in the request to the IoT Server Type associated with the IoT server ID provided. In this case, the sub-type &#x201c;xml&#x201d; does not definitively distinguish what SL protocol is used. Therefore, the Interworking Service may additionally examine the message data (either protocol headers or message payload) to identify if interworking should be used. In this case, the resource is &#x201c;oic.wk.d&#x201d; which indicates the bike is an OCF device. The Interworking Service then determines that interworking is required since the bike uses OCF protocol while the IoT server operates using oneM2M protocol.</p><p id="p-0209" num="0197">Since this is an interworking request, the Interworking Engine references Table 5 to map OCF data models to oneM2M data models as part of step 3 of <figref idref="DRAWINGS">FIG. <b>12</b></figref>. This results in a mapping of OCF oic.wk.d to a oneM2M AE resource. Next, the oneM2M AE create API definition document from Table 3 is retrieved since it is a Post request and each element is evaluated based on the mapping table shown in Table 6. Finally, for each element of the API definition document, the appropriate data types are mapped based on a mapping table shown in Table 7. Table 13 shows an example request of the bike registering its &#x201c;oic.wk.d&#x201d; resource to the RD and Example 4 shows the interworked oneM2M message based on the data provided in Example 3. The Interworking Service will send the request shown in Example 4 to the oneM2M server and wait for a response to interwork back to the bike. During this process, information is saved in the Server Matching component to match request-response pairs to ensure the proper messages are sent to the correct entities.</p><heading id="h-0009" level="1">EXAMPLE 3</heading><heading id="h-0010" level="1">Example OCF Registration Request to Resource Directory</heading><p id="p-0210" num="0198"></p><p id="p-0211" num="0000"><tables id="TABLE-US-00012" num="00012"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="70pt" align="left"/><colspec colname="2" colwidth="147pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>POST /mobile1 HTTP/1.1 </entry></row><row><entry/><entry>Accept:application/json </entry></row><row><entry/><entry>X-OCI-RI :regreq </entry></row><row><entry/><entry>Content-Type:application/json </entry></row><row><entry/><entry>{ &#x201c;oic.wk.d&#x201d;: {</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;n&#x201d;: &#x201c;Electric Bike&#x201d;, </entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;icv&#x201d;: &#x201c;core.1.3.2&#x201d;, </entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;di&#x201d;: &#x201c;&#x3c;bikeID&#x3e;&#x201c;, </entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;dmv&#x201d;: &#x201c;res.1.2.0&#x201d;</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><heading id="h-0011" level="1">EXAMPLE 4</heading><heading id="h-0012" level="1">Example oneM2M Create AE Request Interworked from OCF RD Registration Request</heading><p id="p-0212" num="0199"></p><p id="p-0213" num="0000"><tables id="TABLE-US-00013" num="00013"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="175pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>POST /mobile1 HTTP/1.1 </entry></row><row><entry/><entry>X-M2M-RI :regreq </entry></row><row><entry/><entry>X-M2M-Origin :&#x3c;bike ID&#x3e;</entry></row><row><entry/><entry>Content-Type:application/json; ty=2 </entry></row><row><entry/><entry>{ &#x201c;m2m:ae&#x201d;: {</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;lbl&#x201d;: &#x201c;icv= core.1.3.2; dmv= res.1.2.0&#x201d;, </entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;apn&#x201d;: &#x201c;Electric Bike&#x201d;, </entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;api&#x201d;: &#x201c;&#x3c;bikeID&#x3e;&#x201c;, </entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;rr&#x201d;: &#x201c;true&#x201d;</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0214" num="0200">The oneM2M server processes the request and returns an appropriate response to the Interworking Service. Using the information saved within the Server Matching component, the IoT Repository invokes the Interworking Engine once more to translate the response from oneM2M to OCF. Example 5 shows the response returned from the oneM2M server and Example 6 shows the interworked OCF response sent to the bike.</p><heading id="h-0013" level="1">EXAMPLE 5</heading><heading id="h-0014" level="1">Example oneM2M Create AE Response</heading><p id="p-0215" num="0201"></p><p id="p-0216" num="0000"><tables id="TABLE-US-00014" num="00014"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="175pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>HTTP/1.1 201 Created </entry></row><row><entry/><entry>X-M2M-RSC:2001 </entry></row><row><entry/><entry>Content-Location:/mobile1/&#x3c;bike1D&#x3e;</entry></row><row><entry/><entry>X-M2M-RI :regreq </entry></row><row><entry/><entry>Content-Type:application/vnd.onem2m-res+json </entry></row><row><entry/><entry>{ &#x201c;m2m:ae&#x201d;: {</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;ty&#x201d;: &#x201c;2&#x201d;, </entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;ri&#x201d;: &#x201c;&#x3c;bikeID&#x3e;&#x201c;, </entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;pi&#x201d;: &#x201c;mobile1&#x201d;. </entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;ct&#x201d;: &#x201c;20170620T101003&#x201d;, </entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;It&#x201d;: &#x201c;20170620T101003&#x201d;, </entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;et&#x201d;: &#x201c;99991231 T235959&#x201d;, </entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;aei&#x201d;: &#x201c;&#x3c;bikeID&#x3e;&#x201c;</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><heading id="h-0015" level="1">EXAMPLE 6</heading><heading id="h-0016" level="1">Example oneM2M Create AE Response Interworked to OCF Registration Response</heading><p id="p-0217" num="0202"></p><p id="p-0218" num="0000"><tables id="TABLE-US-00015" num="00015"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="63pt" align="left"/><colspec colname="2" colwidth="154pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>HTTP/1.1 201 Created </entry></row><row><entry/><entry>X-OCI-RS:200 </entry></row><row><entry/><entry>Content-Type:application/json </entry></row><row><entry/><entry>{ &#x201c;oic.wk.d&#x201d;: {</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;loc&#x201d;: &#x201c;/mobile1/&#x3c;bike1D&#x3e;&#x201c;</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0219" num="0203">The Interworking Service may be realized as a Common Services Function (CSF) within a CSE or as an enhanced oneM2M Interworking Proxy Entity (IPE) which has both Mcc and Mca interfaces. See oneM2M TS-0001, Functional Architecture. The Mcc interface allows the Interworking Service the ability to register IoT servers to the CSE as remoteCSE resources while the Mca interface allows for registering IoT devices to the CSE as AE or node resources. New attributes may be added to the remoteCSE resource as shown in Table 10 to represent an IoT server registration. Alternatively, the new attributes may be included as primitive attributes provided during CSE registration and the hosting CSE maintains the information as meta-data that is not made visible in the resource tree. An IoT server may register with the Interworking Service using the IoT Server Registration procedure. The Interworking Service may then create a remoteCSE resource on the hosting CSE and include a number of attributes, such as iwType, iwCapabilities, and iwlnterfaces. Alternatively, these attributes may be added to the AE or node resource if the IoT server is to be represented as either an AE or node resource within the oneM2M resource tree.</p><p id="p-0220" num="0000"><tables id="TABLE-US-00016" num="00016"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="273pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 10</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example Interworking Attributes for oneM2M remoteCSE Resource</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="1" colwidth="63pt" align="left"/><colspec colname="2" colwidth="35pt" align="left"/><colspec colname="3" colwidth="28pt" align="left"/><colspec colname="4" colwidth="98pt" align="left"/><colspec colname="5" colwidth="49pt" align="left"/><tbody valign="top"><row><entry/><entry/><entry>RW/</entry><entry/><entry>&#x3c;remoteCSE</entry></row><row><entry>Attributes of</entry><entry>Multi-</entry><entry>RO/</entry><entry/><entry>Annc&#x3e;</entry></row><row><entry>&#x3c;remoteCSE&#x3e;</entry><entry>plicity</entry><entry>WO</entry><entry>Description</entry><entry>Attributes</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row><row><entry>Universal and</entry><entry>*</entry><entry>*</entry><entry>See clause 9.6.1.3 of oneM2M</entry><entry>OA</entry></row><row><entry>common attributes</entry><entry/><entry/><entry>TS-0001, Functional</entry><entry/></row><row><entry/><entry/><entry/><entry>Architecture.</entry><entry/></row><row><entry>cseType</entry><entry>0..1</entry><entry>WO</entry><entry>Indicates the type of CSE OA</entry><entry>OA</entry></row><row><entry/><entry/><entry/><entry>represented by the created</entry><entry/></row><row><entry/><entry/><entry/><entry>resource.</entry><entry/></row><row><entry/><entry/><entry/><entry>Mandatory for an IN-CSE,</entry><entry/></row><row><entry/><entry/><entry/><entry>hence multiplicity (1).</entry><entry/></row><row><entry/><entry/><entry/><entry>Its presence is subject to SP</entry><entry/></row><row><entry/><entry/><entry/><entry>configuration in case of an</entry><entry/></row><row><entry/><entry/><entry/><entry>ASN-CSE or a MN-CSE.</entry><entry/></row><row><entry>iwType</entry><entry>0..1</entry><entry>WO</entry><entry>Indicates the type of loT</entry><entry>OA</entry></row><row><entry/><entry/><entry/><entry>server/device that is being</entry><entry/></row><row><entry/><entry/><entry/><entry>interworked with oneM2M.</entry><entry/></row><row><entry/><entry/><entry/><entry>Examples include OCF, RD,</entry><entry/></row><row><entry/><entry/><entry/><entry>Hypercat, LwM2M, WoT, etc.</entry><entry/></row><row><entry>iwCapabilities</entry><entry>0..1</entry><entry>RW</entry><entry>Indicates the capabilities of the</entry><entry>OA</entry></row><row><entry/><entry/><entry/><entry>IoT server/device. Examples</entry><entry/></row><row><entry/><entry/><entry/><entry>may include services offered,</entry><entry/></row><row><entry/><entry/><entry/><entry>list of supported resources or</entry><entry/></row><row><entry/><entry/><entry/><entry>resource types, or list of types</entry><entry/></row><row><entry/><entry/><entry/><entry>of devices.</entry><entry/></row><row><entry>iwInterfaces</entry><entry>0..1</entry><entry>RW</entry><entry>Certain IoT protocols have</entry><entry>OA</entry></row><row><entry/><entry/><entry/><entry>well defined interfaces and</entry><entry/></row><row><entry/><entry/><entry/><entry>they may be listed here for the</entry><entry/></row><row><entry/><entry/><entry/><entry>server/device.</entry><entry/></row><row><entry>pointOfAccess</entry><entry>0-1 (L)</entry><entry>RW</entry><entry>For request-reachable remote</entry><entry>OA</entry></row><row><entry/><entry/><entry/><entry>CSE it represents the list of</entry><entry/></row><row><entry/><entry/><entry/><entry>physical addresses to be used</entry><entry/></row><row><entry/><entry/><entry/><entry>to connect to it (e.g., IP</entry><entry/></row><row><entry/><entry/><entry/><entry>address, FQDN).</entry><entry/></row><row><entry/><entry/><entry/><entry>If this information is not</entry><entry/></row><row><entry/><entry/><entry/><entry>provided and</entry><entry/></row><row><entry/><entry/><entry/><entry>&#x3c;pollingChannel&#x3e; resource</entry><entry/></row><row><entry/><entry/><entry/><entry>does exist, the CSE should use</entry><entry/></row><row><entry/><entry/><entry/><entry>&#x3c;pollingChannel&#x3e; resource.</entry><entry/></row><row><entry/><entry/><entry/><entry>Then the Hosting CSE may</entry><entry/></row><row><entry/><entry/><entry/><entry>forward a request to the CSE</entry><entry/></row><row><entry/><entry/><entry/><entry>without using the PoA.</entry><entry/></row><row><entry>CSEBase</entry><entry>1</entry><entry>WO</entry><entry>The address of the CSEBase</entry><entry>OA</entry></row><row><entry/><entry/><entry/><entry>resource represented by this</entry><entry/></row><row><entry/><entry/><entry/><entry>&#x3c;remoteCSE&#x3e; resource.</entry><entry/></row><row><entry>CSE-ID</entry><entry>1</entry><entry>WO</entry><entry>The CSE identifier of a remote</entry><entry>OA</entry></row><row><entry/><entry/><entry/><entry>CSE in SP-relative CSE-ID</entry><entry/></row><row><entry/><entry/><entry/><entry>format (clause 7.2).</entry><entry/></row><row><entry>M2M-Ext-ID</entry><entry>0..1</entry><entry>RW</entry><entry>Supported when Registrar is</entry><entry>NA</entry></row><row><entry/><entry/><entry/><entry>IN- CSE.</entry><entry/></row><row><entry/><entry/><entry/><entry>See clause 7.1.8 where this</entry><entry/></row><row><entry/><entry/><entry/><entry>attribute is described. This</entry><entry/></row><row><entry/><entry/><entry/><entry>attribute is used only for the</entry><entry/></row><row><entry/><entry/><entry/><entry>case of dynamic association of</entry><entry/></row><row><entry/><entry/><entry/><entry>M2M- Ext-ID and CSE-ID.</entry><entry/></row><row><entry>Trigger-Recipient-</entry><entry>0..1</entry><entry>RW</entry><entry>Supported when Registrar is</entry><entry>NA</entry></row><row><entry>ID</entry><entry/><entry/><entry>IN-CSE. See clause 7.1.10</entry><entry/></row><row><entry/><entry/><entry/><entry>where this attribute is</entry><entry/></row><row><entry/><entry/><entry/><entry>described. This attribute is</entry><entry/></row><row><entry/><entry/><entry/><entry>used only for the case of</entry><entry/></row><row><entry/><entry/><entry/><entry>dynamic association of M2M-</entry><entry/></row><row><entry/><entry/><entry/><entry>Ext-ID and CSE-ID.</entry><entry/></row><row><entry>requestReachability</entry><entry>1</entry><entry>RW</entry><entry>If the CSE that created</entry><entry>OA</entry></row><row><entry/><entry/><entry/><entry>this&#x3c;remoteCSE&#x3e; resource</entry><entry/></row><row><entry/><entry/><entry/><entry>may receive a request from</entry><entry/></row><row><entry/><entry/><entry/><entry>other AE/CSE(s), this attribute</entry><entry/></row><row><entry/><entry/><entry/><entry>is set to &#x201c;TRUE&#x201d; otherwise</entry><entry/></row><row><entry/><entry/><entry/><entry>&#x201c;FALSE&#x201d; (see note)</entry><entry/></row><row><entry>nodeLink</entry><entry>0..1</entry><entry>RW</entry><entry>The resourcelD of a &#x3c;node&#x3e;</entry><entry>OA</entry></row><row><entry/><entry/><entry/><entry>resource that hosts the CSE</entry><entry/></row><row><entry/><entry/><entry/><entry>represented by the</entry><entry/></row><row><entry/><entry/><entry/><entry>&#x3c;remoteCSE&#x3e; resource.</entry><entry/></row><row><entry>...</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0221" num="0204">Once the remoteCSE resource is created, IoT devices that publish their resource information to the interworked server may have corresponding oneM2M resources created on the CSE. For example, a CoRE RD may be represented as a remoteCSE resource and CoAP endpoints that register their CoRE Link formats to the RD may have AE and container resources created under the remoteCSE resource. The AE resource may be mapped to the endpoint and the resource links may be organized as container, as flexContainer resources, or both, for example. Similarly, an OCF Repository, a LwM2M server, or a Hypercat server may all be represented as a remoteCSE. The Interworking Service may register itself to the hosting CSE and be associated with a remoteCSE resource. IoT devices that register to the Interworking Service may then be associate with AE resources. In this case, the attributes in Table IO may be applied to AE resources to support interworking with different SL protocols that exist under the remoteCSE resource.</p><p id="p-0222" num="0205">Certain IoT devices that operate as servers may be represented as oneM2M AE or node resources if the device only offers resources available locally on the device. Examples may be lights, switches, fans, or other simple IoT devices that do not host resources from other devices. If there are multiple resources available on the device, then oneM2M container or flexContainer resources may be created for each of the resources. The attributes in Table 10 may be added to either the AE or node resource to indicate the IoT device is being interworked from another SL protocol.</p><p id="p-0223" num="0206">The Interworking Service may be integrated with a CoRE RD to provide interworking with a service layer server such as a oneM2M CSE. Alternatively, the Interworking Service may operate standalone and interwork the core link formats on the RD to oneM2M resources and attributes to allow oneM2M AEs access to resources on the RD endpoints. <figref idref="DRAWINGS">FIG. <b>18</b></figref> shows an example call flow of an RD registering to a CSE using the IoT Server Registration procedure. Note that rd01 could also have used the IoT Server Discovery procedure to locate cse01 before it registers to cse01. rd01 targets the &#x201c;/iotRegistration&#x201d; URI and provides a list of server contexts to the Interworking Service. The interworked request is sent to cse01 in step 3 where it is requested to create a remoteCSE resource on cse01. Alternatively, an AE resource may be created instead of a remoteCSE resource. Upon getting a success response from cse01, an interworked response is relayed to rd01 with the server token provisioned by the Interworking Service and the expiration time of the registration. Once registered to a CSE, an RD may create oneM2M resources to correspond to endpoints and the link formats that it manages.</p><p id="p-0224" num="0207">In step 1 of <figref idref="DRAWINGS">FIG. <b>18</b></figref>, an RD rd01 executes the IoT Server Registration request to the Interworking Service targeting cse01. The request includes the RD's name=rd01 and other registration information. Previously, rd01 may have discovered cse01 using the IoT Server Discovery procedure or be provisioned with cse0 1's contact information. rd01 includes the Accept option with a value of &#x201c;application/link-format+json&#x201d; to indicate the SL protocol it is associate with.</p><p id="p-0225" num="0208">In step 2, an Interworking Service detects interworking is required since the SL protocol of the target server is different than indicated SL protocol in the Accept option. The server context information are interworked to the new remoteCSE attributes iwType, iwCapabilities, and iwInterfaces.</p><p id="p-0226" num="0209">In step 3, the Interworking Service sends a remoteCSE resource create request to cse01 to correspond with rd01 and inserts the proposed interworking attributes (e.g., iwType, iwCapabilities, iwlnterfaces) as well as the keywords &#x201c;RD&#x201d; and &#x201c;interworking&#x201d; into the oneM2M labels attribute. Other key words may be added to the labels attribute to offer more context to the remoteCSE resource. Note that other RDs may be represented as remoteCSE resources and hence the CSE may link multiple RDs together by creating multiple remoteCSE resources.</p><p id="p-0227" num="0210">In step 4, cse01 creates the remoteCSE resource on its resource tree. Alternatively, an AE resource may be created for rd01 instead.</p><p id="p-0228" num="0211">In step 5, a &#x201c;2.01 Created&#x201d; response is returned with the location of the remoteCSE resource.</p><p id="p-0229" num="0212">In step 6, the Interworking Service interworks the response from cse01 to rd01.</p><p id="p-0230" num="0213">In step 7, the Interworking Service sends the interworked response to rd01 with the status of the registration, a server token for rd01 to use in future interworking request, and an expiration time of the registration.</p><p id="p-0231" num="0214">In step 8, optionally rd01 may also create a new interface for cse01 where RD endpoints may target to search for resources in cse01. The new RD interface may have the form &#x201c;/rd-iw/cse01&#x201d; or &#x201c;/rd/iw-cse01&#x201d; and RD endpoints may target this new interface to search for resources on cse01. A new link format attribute &#x201c;Interworking Resource Type&#x201d; (iwrt) may be introduced that maps to oneM2M's labels attribute. Alternatively, a new RD endpoint registration entry for cse01 may be added to the RD with a new link format attribute &#x201c;Interworking Type&#x201d; (iwt) to indicate interworking is available. RD endpoints may target the newly created cse01 registration with the iwt attribute to initiate a resource discovery on cse01. The RD endpoint may provide the iwrt attribute to search for resources in cse01.</p><p id="p-0232" num="0215">A oneM2M CSE may also register to an RD to enable IoT interworking capabilities as shown in <figref idref="DRAWINGS">FIG. <b>19</b></figref> and <figref idref="DRAWINGS">FIG. <b>20</b></figref>. In this example, cse01 is sending an existing oneM2M CSE registration request instead of the herein proposed IoT Registration request as shown in <figref idref="DRAWINGS">FIG. <b>18</b></figref>. In response, the Interworking Service will perform an endpoint registration on behalf of cse01 and include new link attributes iwt, iwc, and iwi as appropriate. These attributes correspond with the oneM2M interworking attributes listed in Table 10. In addition, the Interworking Service may perform retrieves of cse0 1's resource tree to gather information that is found in the IoT Server Registration request but not included in the CSE registration request. Conversely, the Interworking Service may also perform lookups of rd01 to update the interworking attributes iwType, iwCapabilities, and iwlnterfaces of rd01's remoteCSE resource on cse01.</p><p id="p-0233" num="0216">In step 1 of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, cse01 sends a oneM2M CSE registration request to the Interworking Service. In step 2, an Interworking Service interworks the request to an RD endpoint registration request. In step 3, the interworked request is send to rd01 with new link attributes iwt, iwc, and iwi as appropriate. In step 4, rd01 creates an entry for cse01 with the new link attributes. In step 5, rd01 returns an appropriate response with the location of the cse01 entry in the RD. In step 6, the Interworking Service interworks the response to cse01.</p><p id="p-0234" num="0217">In step 7 of <figref idref="DRAWINGS">FIG. <b>20</b></figref>, the interworked response is sent to cse01 with the location of the cse01 entry in the RD. In step 8, cse01 creates a remoteCSE resource for rd01.</p><p id="p-0235" num="0218">In step 9, optionally, the Interworking Service may retrieve resources from cse01 to obtain information that are required in the IoT Server Registration request but not included in the CSE registration request. There may be multiple retrieves made if the information is found in different resources within cse01. Alternatively, resource discovery could be performed on cse01 to ascertain the types of resources that are managed by cse01. Conversely but not shown in <figref idref="DRAWINGS">FIGS. <b>19</b> and <b>20</b></figref>, the Interworking Service may perform similar retrieves on rd01 to extract information for updating the interworking attributes (e.g., iwType, iwCapabilities, and iwlnterface) of rd01&#x2032;s remoteCSE resource.</p><p id="p-0236" num="0219">In step 10, cse01 returns the associate contents to the retrieve or discovery request in step 9. In step 11, the Interworking Service interworks the contents returned in step 10 to rd01. In step 12, a request with the interwork contents is sent to rd01. In this case, the request is a registration update to cse01&#x2032;s registration entry in rd01. In step 13, rd01 returns an appropriate response.</p><p id="p-0237" num="0220">The RD's registration interface may also be extended for an RD to register a device's resource links onto the CSE. The link format in an endpoint's registration request may be interworked to a oneM2M create AE registration request and one or more flexContainer create requests for each resource hosted by the RD endpoint. Alternatively, an endpoint's registration may also be interworked to a oneM2M node resource and the endpoint's resource links may be mapped to oneM2M flexContainer resources. Once the oneM2M resources are created, other oneM2M AEs may access the RD endpoint's resources through the AE, node, and flexContainer resources corresponding to the endpoint's link format. The request will be retargeted to the Interworking Service, which may then interwork the request to the RD endpoint. <figref idref="DRAWINGS">FIGS. <b>21</b> and <b>22</b></figref> shows an example call flow of extending the RD's registration interface to interwork to a oneM2M CSE.</p><p id="p-0238" num="0221">In step 1 of <figref idref="DRAWINGS">FIG. <b>21</b></figref>, an IoT device (CoAP server) performs an endpoint (EP) registration request with an endpoint name of &#x201c;iotNode&#x201d; and two resource links &#x201c;res<b>1</b>&#x201d; and &#x201c;res2&#x201d;.</p><p id="p-0239" num="0222">In step 2, rd01 processes the request and makes a determination based on the presence of cse01 to send the registration request to the Interworking Service to also register iotNode on the oneM2M CSE with a target URI of &#x201c;/cse01&#x201d; and an Accept option set to &#x201c;application/link-format+json&#x201d;. The RD had previously registered to cse01 using the procedure shown in <figref idref="DRAWINGS">FIG. <b>18</b></figref>.</p><p id="p-0240" num="0223">In step 3, rd01 sends a response to iotNode for the RD registration from step 1. Alternatively, rd01 may wait until after step 8 to return the response to iotNode.</p><p id="p-0241" num="0224">In step 4, the Interworking Service interworks the request from step 2. The Mapping Tables component contains data model mappings as follows: RD ep=oneM2M AE, RD resource links=oneM2M flexContainers. Using this mapping information, the Interworking Service requires three Post requests to the CSE in order to map the EP registration to a oneM2M AE and both resource links (rest and res2) to oneM2M flexContainers.</p><p id="p-0242" num="0225">In step 5, the Interworking Service first creates a oneM2M AE resource to correspond with the endpoint &#x201c;iotNode&#x201d; and an appropriate response is returned from cse01. In step 6, then a oneM2M flexContainer is created for resource link &#x201c;resl&#x201d; and an appropriate response is returned from cse01.</p><p id="p-0243" num="0226">In step 7 of <figref idref="DRAWINGS">FIG. <b>22</b></figref>, a second oneM2M flexContainer is created for resource link &#x201c;res2&#x201d; and an appropriate response is returned from cse01. In step 8, the Interworking Service aggregates cse01's responses and interworks it into a separate response to rd01. In step 9, the Interworking Service sends the interworked response and returns the location of the iotNode registration back to rd01.</p><p id="p-0244" num="0227">In step 10, a oneM2M AE may perform resource discovery using filter criteria of resources hosted by an RD by specifying iwType=RD. Using the filter criteria in this way informs the hosting CSE that the AE is only interested in discovering resources of RD endpoints. Note the oneM2M resources associated with an RD endpoint's registration may also be found by other AEs using oneM2M resource discovery without the iwType filter criteria.</p><p id="p-0245" num="0228">In step 11, cse01 searches its resource tree and finds res1 and res2 flexContainers. In step 12, cse01 returns the search result to the AE.</p><p id="p-0246" num="0229"><figref idref="DRAWINGS">FIGS. <b>21</b> and <b>22</b></figref> show the case in which an RD creates resources on the oneM2M CSE in response to endpoint registrations. This approach allows oneM2M AEs to directly discover an RD endpoint and its resource links directly within the CSE using native oneM2M resource discovery. However, it introduces overhead for the RD to maintain synchronization between the listing in the RD and the CSE. An alternative method to avoid the need for this synchronization is for the RD to only register to the CSE and let the CSE query the RD to discover the resource links available in the RD in response to oneM2M resource discovery. <figref idref="DRAWINGS">FIG. <b>23</b></figref> shows an example of interworking oneM2M resource discovery to the RD's Lookup interface to provide this alternative approach to interworking.</p><p id="p-0247" num="0230">In step 1 of <figref idref="DRAWINGS">FIG. <b>23</b></figref>, an RD registers to cse01 as described in <figref idref="DRAWINGS">FIG. <b>18</b></figref> and a oneM2M resource (rd01) is created for the RD. In Step 2, a oneM2M AE performs resource discovery in which the attributes iwType and iwCapabilities are utilized to inform the CSE that the AE is looking to find devices with capability of light that is listed in an RD.</p><p id="p-0248" num="0231">In step 3, cse01 selects rd01 based on the iwType attribute it has for rd01 and retargets the query towards the Interworking Service. If there are more than one RD registered with cse01, multiple queries may be made by cse01. In Step 4, cse01 sends a oneM2M request to query rd01 for resources that has an iwCapability of light.</p><p id="p-0249" num="0232">In step 5, the Interworking Service interworks the request from cse01 based on the procedures proposed herein.</p><p id="p-0250" num="0233">In step 6, an interwork request is generated in which the RD's Lookup interface is query for resources with a resource type (rt) of light. In Step 7, rd01 returns a response with a list of core link formats that contains a resource type of light. In Step 8, the Interworking Service interworks the response from rd01 to a response to cse01. In Step 9, the Interworking Service sends a response to cse01 with the results of the RD lookup query. In Step 10, cse01 returns a list of URIs that correspond to the link formats found from the RD lookup interface.</p><p id="p-0251" num="0234">The procedure in <figref idref="DRAWINGS">FIG. <b>23</b></figref> may be reversed in which an RD client performs a lookup query of rd01 for resources hosted on a oneM2M CSE. The RD lookup query may include the iwt link attribute to specify the client wants to perform a lookup for oneM2M resources on cse01. Alternatively, a new RD lookup interface may be created for cse01 in which RD clients may target to indicate a lookup of oneM2M resources. This new interface may simply be &#x201c;/rd01-lookup/cse01&#x201d; or &#x201c;/cse01-lookup&#x201d;, for example.</p><p id="p-0252" num="0235">An example is shown in <figref idref="DRAWINGS">FIG. <b>24</b></figref>. In step I of <figref idref="DRAWINGS">FIG. <b>24</b></figref>, cse01 had previously registered to rd01 using either the IoT Server Registration request or the existing oneM2M CSE registration request. An RD endpoint registration entry is created for cse01 in which the new link attributes iwt, iwc, and iwi may be associated with cse01 to enable interworking.</p><p id="p-0253" num="0236">In step 2, an RD client sends a lookup request to rd01 and specifies the iwt attribute with a value of oneM2M and with some resource type it is looking for. Alternatively, a new RD lookup interface such as /rd01-lookup/cse01 or /cse01-lookup may be targeted by the RD client to indicate the lookup is to be performed on cse01.</p><p id="p-0254" num="0237">In step 3, rd01 forwards the lookup request to the Interworking Service. In Step 4, the Interworking Service interworks the request to cse01. In Step 5, the interworked request is sent to cse01 to perform oneM2M resource discovery.</p><p id="p-0255" num="0238">In step 6, cse01 returns an appropriate response with the contents of the discovery results. In Step 7, the Interworking Service interworks the response to rd01. In Step 8, the interworked response is sent to rd01. In Step 9, rd01 returns the results to the RD client.</p><p id="p-0256" num="0239">Once a oneM2M AE discovers the CoAP server's resource links, it may then retrieve the resource representation associated with the link. <figref idref="DRAWINGS">FIG. <b>25</b></figref> shows an example procedure of an AE retrieving res2 from a CoAP server that hosts the resource.</p><p id="p-0257" num="0240">In step I of <figref idref="DRAWINGS">FIG. <b>25</b></figref>, the AE performs a Get of the URI &#x201c;/cse01/rd01/iotNode/res2&#x201d;. In Step 2, cse01 determines the resource data needs to be retrieved.</p><p id="p-0258" num="0241">In step 3, cse01 retargets the request to the Interworking Service with a target URI of &#x201c;/res2&#x201d; and an Accept option set to &#x201c;application/vnd.onem2m-res+json&#x201d;. The &#x201c;To&#x201d; field will point to &#x201c;iotNode&#x201d;.</p><p id="p-0259" num="0242">In step 4, the Interworking Service interworks the request to the CoAP server. In Step 5, the Interworking Service sends the interworked request to the CoAP server to retrieve the latest resource representation. In Step 6, the CoAP server returns the latest content of res2.</p><p id="p-0260" num="0243">In step 7, the Interworking Service interworks the response from the CoAP server. In Step 8, the Interworking Service sends the interworked response to cse01. In Step 9, cse01 updates the latest content for res2. In Step 10, cse01 returns the latest content associated with res2 to the AE.</p><p id="p-0261" num="0244"><figref idref="DRAWINGS">FIGS. <b>18</b>, <b>21</b>, and <b>22</b></figref> show the RD and endpoints (or CoAP servers) being represented as remoteCSE and AE resources in oneM2M, respectively. The link formats of the endpoints' resources may be represented as either oneM2M container or flexContainer resources. However, an alternative to organize RD resource links on the CSE may be that RDs are represented as oneM2M AE resources and the link formats of the endpoints' resources within the RD be realized as oneM2M container or flexContainer resources. The pointOfAccess attribute of the AE resource may be configured to point to the Interworking Service and all requests targeting the AE's container or flexContainer resources are retargeted to the Interworking Service, which then interworks the request to either the RD or the endpoints. Similarly, for multiple RDs, multiple AE resources may be created each representing the corresponding RDs. <figref idref="DRAWINGS">FIGS. <b>26</b> and <b>27</b></figref> show potential data model mappings from RD to oneM2M. In <figref idref="DRAWINGS">FIG. <b>26</b></figref>, the Interworking Service has an mcc interface to the CSE and RDs are represented as remoteCSEs, endpoints as AEs, endpoint's link formats as containers/flexContainers, and CoAP server's resources as contentlnstance resources. In <figref idref="DRAWINGS">FIG. <b>27</b></figref>, the Interworking Service only has an mca interface to the CSE and hence, an RD is represented as an AE, the endpoints as containers, the endpoint's link formats as flexContainers, and the CoAP server's resources as contentlnstance resources. In both cases, RD CoAP group entries are mapped to oneM2M group resources.</p><p id="p-0262" num="0245">A Hypercat server provides search capability of IoT resources through the use of catalogues. The catalogues use the JSON file format to describe IoT resources including their URI and other metadata and provides web APIs for fetching, serving, searching, and editing the catalogue. To access the Hypercat server, a client uses the HTTP protocol with a target URI of &#x201c;/cat&#x201d;. Each resource in a catalogue is described as an item and annotated with item meta-data similar to a semantic triple that describes the relationship between a subject and an object. A client may then accumulate one or more catalogues together to form a knowledge graph of IoT resources, which may then be queried to find the desired information.</p><p id="p-0263" num="0246">A Hypercat server may be represented as an IoT server and use the Interworking Service to interoperate with a SL server such as a oneM2M CSE. The Hypercat server may host one or more catalogues and each catalogue may be represented as either a oneM2M remoteCSE or AE resource. Alternatively, all the catalogues in a Hypercat server may be organized collectively as one remoteCSE or AE resource. The items within a catalogue may then be represented as container or flexContainer resources and the item's meta-data may be represented as a oneM2M semanticDescriptor attribute. A Hypercat catalogue-metadata describes the capabilities of the Hypercat server for the catalogue and may be interworked as the iwCapabilities attribute in Table 10 for the oneM2M remoteCSE or AE resource.</p><p id="p-0264" num="0247">To enable interworking, a Hypercat server may execute the IoT Server Registration procedure targeting a oneM2M CSE. Upon successful registration, the created remoteCSE or AE resource may expose the Hypercat catalogue to oneM2M AE clients for searching IoT resources found in the catalogue. A resource discovery request targeting the remoteCSE or AE resource may trigger an interworking request to the Hypercat server as shown in the example of <figref idref="DRAWINGS">FIG. <b>28</b></figref>.</p><p id="p-0265" num="0248">In step I of <figref idref="DRAWINGS">FIG. <b>28</b></figref>, the Hypercat server registers to cse01 with the aid of the Interworking Service. A remoteCSE resource hc1 is created on cse01 and hc1's catalogue-metadata is interwork to the iwCapabilities attribute of the remoteCSE resource. One capability in this case indicates hcl supports simple searches.</p><p id="p-0266" num="0249">In step 2, a oneM2M AE performs resource discovery of the hc1 resource where a query string of &#x201c;va1=light&#x201d; is provided. The query string may be in the form of a filter criteria or primitive attribute. In Step 3, cse01 processes the request and makes a determination to retarget the request, e.g., based on a subscription that exists for the /cse01/hc1 resource or a retargeting mechanism of cse01 if one exists.</p><p id="p-0267" num="0250">In step 4, cse01 retargets the request to the Interworking Service with a target URI of &#x201c;/hc1&#x201d;, a query parameter &#x201c;va1=light&#x201d;, and an Accept option set to &#x201c;application/vnd.onem2m-res+json&#x201d;. In Step 5, the Interworking Service interworks the request from cse01 to hc1.</p><p id="p-0268" num="0251">In step 6, the interworked request is sent to hc1 to perform a simple search of the catalogue with a query string of &#x201c;va1=light&#x201d;. In Step 7, hc1 returns a catalogue item matching the simple search criteria with the item's URI and metadata. In Step 8, the Interworking Service interworks the response from hc1 to cse01. In Step 9, the interworked response is returned to cse01 with the result of the simple search. In Step 10, cse01 returns the simple search result to the AE.</p><p id="p-0269" num="0252">Conversely, a Hypercat server may expose the resources of a oneM2M CSE by adding a catalogue to represent the resources hosted by the CSE. Hypercat, as other standards like oneM2M, store metadata associated to datasets originating from IoT-enabled devices. oneM2M, in contrast to Hypercat, allows the storage and transfer of data itself oneM2M metadata supports federation of data between CSEs and AEs, and may be extended to allow the publication of data to data catalogues such as Hypercat.</p><p id="p-0270" num="0253">Three possible ways for publication of oneM2M data to Hypercat may be used, for example, depending on the scope of integration. First, attributes of oneM2M resources directly used to create Hypercat records. The Interworking Service would be in charge of creating Hypercat catalogues duplicating the metadata found in oneM2M resources. This option includes the continuous update of Hypercat catalogues with oneM2M metadata as data updates are provided into the system.</p><p id="p-0271" num="0254">Second, HyperCAT may become aware of the organizational structure of oneM2M resources for a particular deployment or industrial vertical. The Interworking Service provides additional information regarding the nature of the data in oneM2M.</p><p id="p-0272" num="0255">Third, Hypercat may use the semantic description of oneM2M resources to support query mechanisms.</p><p id="p-0273" num="0256">The Hypercat 3.00 Specification does not support creating a catalogue through a web API. Herein, an API is described to enable the creation of a new catalogue on a Hypercat server. A oneM2M CSE may trigger the catalogue creation by performing the IoT Server Registration procedure to the Interworking Service. In turn, the Interworking Service sends the web API to create a new catalogue targeting the &#x201c;/cat&#x201d; URI and with a query parameter &#x201c;newcat&#x201d; set to &#x201c;hcat01&#x201d;, or the name for the catalogue to be created. The payload of the request will include the contents of the catalogue which will include the catalogue-metadata as well as one or more items to correspond with the resources hosted on the CSE. Alternatively, a &#x201c;newcat&#x201d; URI may be added to the Hypercat 3.00 Specification to specify that a new catalogue is requested to be created. The catalogue name reference may then be placed at the beginning of the catalogue before the catalogue-metadata.</p><p id="p-0274" num="0257">An example is shown in <figref idref="DRAWINGS">FIG. <b>29</b></figref>. In step I of <figref idref="DRAWINGS">FIG. <b>29</b></figref>, cse01 executes the IoT Server Registration procedure targeting a Hypercat server hc1 and providing the associate registration information to the Interworking Service. Cse01 may have previously discovered hc1 using the IoT Server Discovery procedure or had been provisioned with hc1's contact information. cse01 includes the Accept option with a value of &#x201c;application/vnd.onem2m-res+json&#x201d; to indicate the SL protocol it is associate with.</p><p id="p-0275" num="0258">In step 2, the Interworking Service interworks the request to hc1.</p><p id="p-0276" num="0259">In step 3, a Post request targeting the &#x201c;/cat&#x201d; URI and with a query parameter &#x201c;newcat=hcat01&#x201d; to specify the creation of a new catalogue with the name &#x201c;hcat01&#x201d;. The message payload includes the contents of the catalogue-metadata and one or more item entries.</p><p id="p-0277" num="0260">In step 4, hc1 returns an appropriate response. In Step 5, the Interworking Service interworks the response to cse01. In Step 6, the interworked response is sent to cse01. In Step 7, cse01 creates a remoteCSE resource hcat01 to represent the registration with hc1.</p><p id="p-0278" num="0261">All oneM2M resources share Universal Attributes, as they extend from a base &#x201c;Resource&#x201d; class definition. oneM2M also defines a number of Common Attributes which are common among normal (not virtual) resources. Both Universal Attributes and Common Attributes may be used as a source of information to a data catalogue. Some oneM2M resources include attributes which map more directly to HyperCAT metadata attributes. A potential mapping of oneM2M resource attributes to HyperCAT metadata is listed in the table herein. The contentInfo attribute of a Content Instance resource describes the type of content upload. It is a composite attribute composed of an IETF RFC 6838 type of data and an encoding type, allowing content to be stored as Base64 or plain-text. contentInfo would need to be transformed from an RFC6838 type to a RFC2046 MIME type.</p><p id="p-0279" num="0000"><tables id="TABLE-US-00017" num="00017"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 11</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example Interworking oneM2M Attributes to Hypercat Metadata</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="63pt" align="left"/><colspec colname="2" colwidth="35pt" align="left"/><colspec colname="3" colwidth="119pt" align="left"/><tbody valign="top"><row><entry/><entry>oneM2M </entry><entry/></row><row><entry/><entry>Resource</entry><entry/></row><row><entry>Attribute Name</entry><entry>Attribute</entry><entry>Hypercat Metadata</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>lastModifiedTime</entry><entry>Universal </entry><entry>urn:X-hypercat:rels:lastUpdatedISO8601</entry></row><row><entry/><entry>Attribute</entry><entry>UTC timedata string of last known </entry></row><row><entry/><entry/><entry>update to resource</entry></row><row><entry>contentinfo</entry><entry>Content </entry><entry>um:X-hypercat:rels:containsContentType</entry></row><row><entry/><entry>Instance</entry><entry/></row><row><entry>Labels</entry><entry>Common </entry><entry>TBC</entry></row><row><entry/><entry>Attribute</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0280" num="0262">Once the Hypercat server and oneM2M CSE are registered with each other, Hypercat clients may then perform searches of oneM2M resources through the Hypercat server. <figref idref="DRAWINGS">FIG. <b>30</b></figref> shows an example of such an interworking scenario. In step I of <figref idref="DRAWINGS">FIG. <b>30</b></figref>, cse01 registers to hc1 using either the IoT Server Registration request or the oneM2M CSE registration request. A catalogue is created for cse01 in the Hypercat server.</p><p id="p-0281" num="0263">In step 2, a Hypercat client may target the cse01 catalogue to perform searches for oneM2M resources with a particular value. Note that at present, the Hypercat 3.00 Specification does not provide for a way to target a specific catalogue to search from. An alternative approach is to add the specification of the cse01 catalogue using a query string of the search request. For example, the search request may be specify as &#x201c;Get /cat?iwt=oneM2M&#x26;va1=light HTTP/1.1&#x201d;. This example highlights the use of the interworking attributes in Table 10.</p><p id="p-0282" num="0264">In step 3, the Hypercat server forwards the request to the Interworking Service. In Step 4, the Interworking Service interworks the request to a oneM2M resource discovery request. In Step 5, the interworked request is sent to cse01. In Step 6, cse01 returns an appropriate response to the discovery request. In Step 7, the Interworking Service interworks the response to hc1 In Step 8, the interworked response is sent to hc1. In Step 9, hc1 returns the search results from cse01 to the Hypercat client. Once the Hypercat server and the oneM2M CSE are registered with each other, the Interworking Service may be utilized as a Hypercat client to retrieve catalogues and interwork the items in the catalogues into resources in a oneM2M CSE to take advantage of the CSE's semantic capabilities. Similarly, the Interworking Service may be used by an oneM2M CSE or AE to publish oneM2M resources to a Hypercat server. <figref idref="DRAWINGS">FIG. <b>31</b></figref> shows an example of the former case and <figref idref="DRAWINGS">FIG. <b>32</b></figref> shows an example of the latter case. In both examples, the Interworking Service is shown as an external, standalone entity. However, it may easily be integrated into either the Hypercat server or the oneM2M CSE as well.</p><p id="p-0283" num="0265"><figref idref="DRAWINGS">FIG. <b>31</b></figref> shows Interworking of Hypercat Catalogue Items to oneM2M CSE Resources. In step 1 of <figref idref="DRAWINGS">FIG. <b>31</b></figref>, the Interworking Service performs a Get operation of the catalogue hosted on the Hypercat server. If there are multiple catalogues available, there may be multiple Get requests&#x2014;one for each catalogue. The Get operation may be triggered by an administrator of the Interworking Service, by a oneM2M AE performing a retrieve of the remoteCSE resource associated with the Hypercat catalogue, or by a CSE in response to the successful creation of a remoteCSE resource as described in connection with <figref idref="DRAWINGS">FIG. <b>29</b></figref>.</p><p id="p-0284" num="0266">In step 2, the Hypercat server returns the contents of the catalogue.</p><p id="p-0285" num="0267">In step 3, the Interworking Service evaluates the contents of the catalogue and maps each item to a oneM2M resource. A simple mapping table may be created at or provisioned to the Interworking Service by a special client; the mapping table may also be updated later by the special client. The mapping table specifies how to map Hypercat catalogue and its items including their metadata to oneM2M resources. As an simple example: 1) each Hypercat catalogue is associated with an oneM2M CSE and each item of a catalogue corresponds to a container or flexContainer resource under the CSE; 2) then, the metadata of the catalogue itself and each catalogue item is mapped to oneM2M attributes and/or a semanticDescriptor child resource within the oneM2M resource. In another example, a Hypercat catalogue may be mapped to an oneM2M AE and the catalogue's items mapped to container or flexContainer resources. As a resu lt, oneM2M attributes or a semanticDescriptor child resource of the container/flexContainer may be used for mapping with the catalogue metadata, and content instance child resource may map with items where item metadata maps to the semanticDescriptor child resource of the contentlnstance resource.</p><p id="p-0286" num="0268">In step 4, the Interworking Service first registers the catalogue by creating a remoteCSE or AE resource on cse01 to correspond with the current catalogue.</p><p id="p-0287" num="0269">In step 5, then for the first item in the catalogue, an oneM2M container resource is created under the remoteCSE or AE resource cat01. The metadata of the item is interworked as the semanticDescriptor attribute of the container resource. For other mapping scenarios, the corresponding resources are created accordingly.</p><p id="p-0288" num="0270">In step 6, a second oneM2M container resource may be created for item2 under the cat01 remoteCSE resource. The meta-data of item2 may be interworked to the semanticDescriptor attribute of the container resource.</p><p id="p-0289" num="0271">In step 7, for each item in catalogue cat01, a corresponding oneM2M container resource and the associate semanticDescriptor attribute are created up to itemN, which represents the last item in the catalogue.</p><p id="p-0290" num="0272">In addition to the Get request shown in <figref idref="DRAWINGS">FIG. <b>31</b></figref>, the Interworking Service may subscribe to changes in the Hypercat catalogue using the Hypercat subscription mechanism &#x201c;Get/cat/events&#x201d; to get notifications of changes to the catalogue. Then upon a notification from the Hypercat server, the Interworking Service may update the oneM2M resource accordingly. Note the changes in the Hypercat catalogue may entail adding, updating, or deleting catalogue items and the notifications will reflect that. As a result, the corresponding oneM2M changes also reflect the method applied to the resources, whether it is created, updated, or deleted.</p><p id="p-0291" num="0273"><figref idref="DRAWINGS">FIG. <b>32</b></figref> shows the inverse case where changes to the oneM2M resource tree is reflected in the Hypercat catalogue. In step O of <figref idref="DRAWINGS">FIG. <b>32</b></figref>, the Interworking Service maintains subscriptions on the oneM2M resource tree to get notifications of newly created resources. Alternatively, the Interworking Service may perform periodic retrieves of the oneM2M resource tree using filter criteria to discover new resources.</p><p id="p-0292" num="0274">In step 1, a oneM2M container is created and the CSE notifies the Interworking Service. Alternatively, either an Update or Delete operation may also trigger a notification to the Interworking Service. The Interworking Service responds to the notification but it is not shown in <figref idref="DRAWINGS">FIG. <b>32</b></figref>.</p><p id="p-0293" num="0275">In step 2, the Interworking Service evaluates the new resource and maps it to a Hypercat item. For an Update or Delete operation, the Hypercat catalogue item is provided in the notification.</p><p id="p-0294" num="0276">In step 3, then the Interworking Service interworks the oneM2M resource's attributes and semanticDescriptor to Hypercat metadata for the item. For a Delete operation, no interworking of oneM2M attributes to Hypercat metadata is performed.</p><p id="p-0295" num="0277">In step 4, a Post request is sent from the Interworking Service to the Hypercat server to create the new catalogue item. A Put request is sent if an update to the resource occurred and a Delete request is sent if the resource was deleted from the oneM2M resource tree.</p><p id="p-0296" num="0278">In step 5, the Hypercat server returns an appropriate response for the status of creating the item. If the status was successful (201 Created), the Hypercat server also returns the URL of the catalogue of the item in the HTTP location header. If the oneM2M resource was modified, then a Put (or Post) request is made to the URL provided in the successful response to update the item.</p><p id="p-0297" num="0279">Interworking is a fluid process and may need updates as new device types are introduced into the IoT system. As such, the architecture of the Interworking Service is designed to support this dynamic nature. An administrator or authorized user may access the Interworking Service remotely through the web interface to add new mapping tables as new device types are deployed. <figref idref="DRAWINGS">FIG. <b>33</b></figref> shows an example user interface of a data model mapping table. The table shows a mapping ofLWM2M objects to oneM2M resources. There are options to add, delete, or update the entries in the table using the buttons displayed at the bottom. In addition, the version of the corresponding SL protocols are displayed and the time stamp of the last update are provided on the left hand side.</p><p id="p-0298" num="0280"><figref idref="DRAWINGS">FIG. <b>34</b></figref> is a diagram of an example machine-to machine (M2M), Internet of Things (IoT), or Web of Things (WoT) communication system <b>10</b> in which one or more disclosed embodiments may be implemented. Generally, M2M technologies provide building blocks for the IoT/WoT, and any M2M device, M2M gateway, M2M server, or M2M service platform may be a component or node of the IoT/WoT as well as an IoT/WoT Service Layer, etc. Any of the client, proxy, or server devices illustrated in any of <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>11</b>, <b>13</b>-<b>25</b>, and <b>28</b>-<b>32</b></figref> may comprise a node of a communication system, such as the ones illustrated in <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>11</b>, <b>13</b>-<b>25</b>, and <b>28</b>-<b>32</b></figref></p><p id="p-0299" num="0281">The service layer may be a functional layer within a network service architecture. Service layers are typically situated above the application protocol layer such as HTTP, CoAP or MQTT and provide value added services to client applications. The service layer also provides an interface to core networks at a lower resource layer, such as for example, a control layer and transport/access layer. The service layer supports multiple categories of (service) capabilities or functionalities including a service definition, service runtime enablement, policy management, access control, and service clustering. Recently, several industry standards bodies, e.g., oneM2M, have been developing M2M service layers to address the challenges associated with the integration of M2M types of devices and applications into deployments such as the Internet/Web, cellular, enterprise, and home networks. A M2M service layer may provide applications and/or various devices with access to a collection of or a set of the above mentioned capabilities or functionalities, supported by the service layer, which may be referred to as a CSE or SCL. A few examples include but are not limited to security, charging, data management, device management, discovery, provisioning, and connectivity management which may be commonly used by various applications. These capabilities or functionalities are made available to such various applications via APIs which make use of message formats, resource structures and resource representations defined by the M2M service layer. The CSE or SCL is a functional entity that may be implemented by hardware and/or software and that provides (service) capabilities or functionalities exposed to various applications and/or devices (i.e., functional interfaces between such functional entities) in order for them to use such capabilities or functionalities.</p><p id="p-0300" num="0282">As shown in <figref idref="DRAWINGS">FIG. <b>34</b></figref>, the M2M/IoT/WoT communication system <b>10</b> includes a communication network <b>12</b>. The communication network <b>12</b> may be a fixed network (e.g., Ethernet, Fiber, ISDN, PLC, or the like) or a wireless network (e.g., WLAN, cellular, or the like) or a network of heterogeneous networks. For example, the communication network <b>12</b> may be comprised of multiple access networks that provide content such as voice, data, video, messaging, broadcast, or the like to multiple users. For example, the communication network <b>12</b> may employ one or more channel access methods, such as code division multiple access (CDMA), time division multiple access (TDMA), frequency division multiple access (FDMA), orthogonal FDMA (OFDMA), single-carrier FDMA (SC-FDMA), and the like. Further, the communication network <b>12</b> may comprise other networks such as a core network, the Internet, a sensor network, an industrial control network, a personal area network, a fused personal network, a satellite network, a home network, or an enterprise network for example.</p><p id="p-0301" num="0283">As shown in <figref idref="DRAWINGS">FIG. <b>34</b></figref>, the M2M/IoT/WoT communication system <b>10</b> may include the Infrastructure Domain and the Field Domain. The Infrastructure Domain refers to the network side of the end-to-end M2M deployment, and the Field Domain refers to the area networks, usually behind an M2M gateway. The Field Domain and Infrastructure Domain may both comprise a variety of different nodes (e.g., servers, gateways, device, and the like) of the network. For example, the Field Domain may include M2M gateways <b>14</b> and devices <b>18</b>. It will be appreciated that any number ofM2M gateway devices <b>14</b> and M2M devices <b>18</b> may be included in the M2M/IoT/WoT communication system <b>10</b> as desired. Each of the M2M gateway devices <b>14</b> and M2M devices <b>18</b> are configured to transmit and receive signals, using communications circuitry, via the communication network <b>12</b> or direct radio link. A M2M gateway <b>14</b> allows wireless M2M devices (e.g., cellular and non-cellular) as well as fixed network M2M devices (e.g., PLC) to communicate either through operator networks, such as the communication network <b>12</b> or direct radio link. For example, the M2M devices <b>18</b> may collect data and send the data, via the communication network <b>12</b> or direct radio link, to an M2M application <b>20</b> or other M2M devices <b>18</b>. The M2M devices <b>18</b> may also receive data from the M2M application <b>20</b> or an M2M device <b>18</b>. Further, data and signals may be sent to and received from the M2M application <b>20</b> via an M2M Service Layer <b>22</b>, as described below. M2M devices <b>18</b> and gateways <b>14</b> may communicate via various networks including, cellular, WLAN, WPAN (e.g., Zigbee, 6LoWPAN, Bluetooth), direct radio link, and wireline for example. Exemplary M2M devices include, but are not limited to, tablets, smart phones, medical devices, temperature and weather monitors, connected cars, smart meters, game consoles, personal digital assistants, health and fitness monitors, lights, thermostats, appliances, garage doors and other actuator-based devices, security devices, and smart outlets.</p><p id="p-0302" num="0284">Referring to <figref idref="DRAWINGS">FIG. <b>35</b></figref>, the illustrated M2M Service Layer <b>22</b> in the field domain provides services for the M2M application <b>20</b>, M2M gateways <b>14</b>, and M2M devices <b>18</b> and the communication network <b>12</b>. It will be understood that the M2M Service Layer <b>22</b> may communicate with any number ofM2M applications, M2M gateways <b>14</b>, M2M devices <b>18</b>, and communication networks <b>12</b> as desired. The M2M Service Layer <b>22</b> may be implemented by one or more nodes of the network, which may comprise servers, computers, devices, or the like. The M2M Service Layer <b>22</b> provides service capabilities that apply to M2M devices <b>18</b>, M2M gateways <b>14</b>, and M2M applications <b>20</b>. The functions of the M2M Service Layer <b>22</b> may be implemented in a variety of ways, for example as a web server, in the cellular core network, in the cloud, etc.</p><p id="p-0303" num="0285">Similar to the illustrated M2M Service Layer <b>22</b>, there is the M2M Service Layer <b>22</b>&#x2032; in the Infrastructure Domain. M2M Service Layer <b>22</b>&#x2032; provides services for the M2M application <b>20</b>&#x2032; and the underlying communication network <b>12</b> in the infrastructure domain. M2M Service Layer <b>22</b>&#x2032; also provides services for the M2M gateways <b>14</b> and M2M devices <b>18</b> in the field domain. It will be understood that the M2M Service Layer <b>22</b>&#x2032; may communicate with any number of M2M applications, M2M gateways and M2M devices. The M2M Service Layer <b>22</b>&#x2032; may interact with a Service Layer by a different service provider. The M2M Service Layer <b>22</b>&#x2032; may be implemented by one or more nodes of the network, which may comprise servers, computers, devices, virtual machines (e.g., cloud computing/storage farms, etc.) or the like.</p><p id="p-0304" num="0286">Referring also to <figref idref="DRAWINGS">FIG. <b>35</b></figref>, the M2M Service Layers <b>22</b> and <b>22</b>&#x2032; provide a core set of service delivery capabilities that diverse applications and verticals may leverage. These service capabilities enable M2M applications <b>20</b> and <b>20</b>&#x2032; to interact with devices and perform functions such as data collection, data analysis, device management, security, billing, service/device discovery, etc. Essentially, these service capabilities free the applications of the burden of implementing these functionalities, thus simplifying application development and reducing cost and time to market. The Service Layers <b>22</b> and <b>22</b>&#x2032; also enable M2M applications <b>20</b> and <b>20</b>&#x2032; to communicate through various networks such as network <b>12</b> in connection with the services that the Service Layers <b>22</b> and <b>22</b>&#x2032; provide.</p><p id="p-0305" num="0287">The M2M applications <b>20</b> and <b>20</b>&#x2032; may include applications in various industries such as, without limitation, transportation, health and wellness, connected home, energy management, asset tracking, and security and surveillance. As mentioned above, the M2M Service Layer, running across the devices, gateways, servers and other nodes of the system, supports functions such as, for example, data collection, device management, security, billing, location tracking/geofencing, device/service discovery, and legacy systems integration, and provides these functions as services to the M2M applications <b>20</b> and <b>20</b>&#x2032;.</p><p id="p-0306" num="0288">Generally, a Service Layer, such as the Service Layers <b>22</b> and <b>22</b>&#x2032; illustrated in <figref idref="DRAWINGS">FIG. <b>35</b></figref>, defines a software middleware layer that supports value-added service capabilities through a set of Application Programming Interfaces (APIs) and underlying networking interfaces. Both the ETSI M2M and oneM2M architectures define a Service Layer. ETSI M2M's Service Layer is referred to as the Service Capability Layer (SCL). The SCL may be implemented in a variety of different nodes of the ETSI M2M architecture. For example, an instance of the Service Layer may be implemented within an M2M device (where it is referred to as a device SCL (DSCL)), a gateway (where it is referred to as a gateway SCL (GSCL)) and/or a network node (where it is referred to as a network SCL (NSCL)). The oneM2M Service Layer supports a set of Common Service Functions (CSFs) (i.e., service capabilities). An instantiation of a set of one or more particular types of CSFs is referred to as a Common Services Entity (CSE) which may be hosted on different types of network nodes (e.g., infrastructure node, middle node, application-specific node). The Third Generation Partnership Project (3GPP) has also defined an architecture for machine-type communications (MTC). In that architecture, the Service Layer, and the service capabilities it provides, are implemented as part of a Service Capability Server (SCS). Whether embodied in a DSCL, GSCL, or NSCL of the ETSI M2M architecture, in a Service Capability Server (SCS) of the 3GPP MTC architecture, in a CSF or CSE of the oneM2M architecture, or in some other node of a network, an instance of the Service Layer may be implemented as a logical entity (e.g., software, computer-executable instructions, and the like) executing either on one or more standalone nodes in the network, including servers, computers, and other computing devices or nodes, or as part of one or more existing nodes. As an example, an instance of a Service Layer or component thereof may be implemented in the form of software running on a network node (e.g., server, computer, gateway, device or the like) having the general architecture illustrated in <figref idref="DRAWINGS">FIG. <b>36</b></figref> or <figref idref="DRAWINGS">FIG. <b>37</b></figref> described below.</p><p id="p-0307" num="0289">Further, the methods and functionalities described herein may be implemented as part of an M2M network that uses a Service Oriented Architecture (SOA) and/or a Resource-Oriented Architecture (ROA) to access services.</p><p id="p-0308" num="0290"><figref idref="DRAWINGS">FIG. <b>36</b></figref> is a block diagram of an example hardware/software architecture of a node of a network, such as one of the clients, servers, or proxies illustrated in <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>11</b>, <b>13</b>-<b>25</b>, and <b>28</b>-<b>32</b></figref>, which may operate as an M2M server, gateway, device, or other node in an M2M network such as that illustrated in <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>11</b>, <b>13</b>-<b>25</b>, and <b>28</b>-<b>32</b></figref>. As shown in <figref idref="DRAWINGS">FIG. <b>36</b></figref>, the node <b>30</b> may include a processor <b>32</b>, non-removable memory <b>44</b>, removable memory <b>46</b>, a speaker/microphone <b>38</b>, a keypad <b>40</b>, a display, touchpad, and/or indicators <b>42</b>, a power source <b>48</b>, a global positioning system (GPS) chipset <b>50</b>, and other peripherals <b>52</b>. The node <b>30</b> may also include communication circuitry, such as a transceiver <b>34</b> and a transmit/receive element <b>36</b>. It will be appreciated that the node <b>30</b> may include any sub-combination of the foregoing elements while remaining consistent with an embodiment. This node may be a node that implements interworking and related methods described herein, e.g., in relation to the methods described in reference to <figref idref="DRAWINGS">FIGS. <b>8</b>-<b>10</b>,<b>12</b>-<b>25</b>, and <b>28</b>-<b>33</b></figref> or the data structures of <figref idref="DRAWINGS">FIGS. <b>11</b>, <b>16</b>, <b>27</b>, and <b>33</b></figref>, Examples 1-6, Tables 2-11, or in a claim.</p><p id="p-0309" num="0291">The processor <b>32</b> may be a general purpose processor, a special purpose processor, a conventional processor, a digital signal processor (DSP), a plurality of microprocessors, one or more microprocessors in association with a DSP core, a controller, a microcontroller, Application Specific Integrated Circuits (ASICs), Field Programmable Gate Array (FPGAs) circuits, any other type of integrated circuit (IC), a state machine, and the like. In general, the processor <b>32</b> may execute computer-executable instructions stored in the memory (e.g., memory <b>44</b> and/or memory <b>46</b>) of the node in order to perform the various required functions of the node. For example, the processor <b>32</b> may perform signal coding, data processing, power control, input/output processing, and/or any other functionality that enables the node <b>30</b> to operate in a wireless or wired environment. The processor <b>32</b> may run application-layer programs (e.g., browsers) and/or radio access-layer (RAN) programs and/or other communications programs. The processor <b>32</b> may also perform security operations such as authentication, security key agreement, and/or cryptographic operations, such as at the access-layer and/or application layer for example.</p><p id="p-0310" num="0292">As shown in <figref idref="DRAWINGS">FIG. <b>36</b></figref>, the processor <b>32</b> is coupled to its communication circuitry (e.g., transceiver <b>34</b> and transmit/receive element <b>36</b>). The processor <b>32</b>, through the execution of computer executable instructions, may control the communication circuitry in order to cause the node <b>30</b> to communicate with other nodes via the network to which it is connected. In particular, the processor <b>32</b> may control the communication circuitry in order to perform the interworking and related methods described herein, e.g., in relation to <figref idref="DRAWINGS">FIGS. <b>8</b>-<b>10</b>, <b>12</b>-<b>25</b>, and <b>28</b>-<b>33</b></figref>, or in a claim. While <figref idref="DRAWINGS">FIG. <b>36</b></figref> depicts the processor <b>32</b> and the transceiver <b>34</b> as separate components, it will be appreciated that the processor <b>32</b> and the transceiver <b>34</b> may be integrated together in an electronic package or chip.</p><p id="p-0311" num="0293">The transmit/receive element <b>36</b> may be configured to transmit signals to, or receive signals from, other nodes, including M2M servers, gateways, device, and the like. For example, in an embodiment, the transmit/receive element <b>36</b> may be an antenna configured to transmit and/or receive RF signals. The transmit/receive element <b>36</b> may support various networks and air interfaces, such as WLAN, WPAN, cellular, and the like. In an embodiment, the transmit/receive element <b>36</b> may be an emitter/detector configured to transmit and/or receive IR, UV, or visible light signals, for example. In yet another embodiment, the transmit/receive element <b>36</b> may be configured to transmit and receive both RF and light signals. It will be appreciated that the transmit/receive element <b>36</b> may be configured to transmit and/or receive any combination of wireless or wired signals.</p><p id="p-0312" num="0294">In addition, although the transmit/receive element <b>36</b> is depicted in <figref idref="DRAWINGS">FIG. <b>36</b></figref> as a single element, the node <b>30</b> may include any number of transmit/receive elements <b>36</b>. More specifically, the node <b>30</b> may employ MIMO technology. Thus, in an embodiment, the node <b>30</b> may include two or more transmit/receive elements <b>36</b> (e.g., multiple antennas) for transmitting and receiving wireless signals.</p><p id="p-0313" num="0295">The transceiver <b>34</b> may be configured to modulate the signals that are to be transmitted by the transmit/receive element <b>36</b> and to demodulate the signals that are received by the transmit/receive element <b>36</b>. As noted above, the node <b>30</b> may have multi-mode capabilities. Thus, the transceiver <b>34</b> may include multiple transceivers for enabling the node <b>30</b> to communicate via multiple RATs, such as UTRA and IEEE 802.11, for example.</p><p id="p-0314" num="0296">The processor <b>32</b> may access information from, and store data in, any type of suitable memory, such as the non-removable memory <b>44</b> and/or the removable memory <b>46</b>. For example, the processor <b>32</b> may store session context in its memory, as described above. The non-removable memory <b>44</b> may include random-access memory (RAM), read-only memory (ROM), a hard disk, or any other type of memory storage device. The removable memory <b>46</b> may include a subscriber identity module (SIM) card, a memory stick, a secure digital (SD) memory card, and the like. In other embodiments, the processor <b>32</b> may access information from, and store data in, memory that is not physically located on the node <b>30</b>, such as on a server or a home computer. The processor <b>32</b> may be configured to control lighting patterns, images, or colors on the display or indicators <b>42</b> to reflect the status of an M2M Service Layer session migration or sharing or to obtain input from a user or display information to a user about the node's session migration or sharing capabilities or settings. In another example, the display may show information with regard to a session state.</p><p id="p-0315" num="0297">The processor <b>32</b> may receive power from the power source <b>48</b>, and may be configured to distribute and/or control the power to the other components in the node <b>30</b>. The power source <b>48</b> may be any suitable device for powering the node <b>30</b>. For example, the power source <b>48</b> may include one or more dry cell batteries (e.g., nickel-cadmium (NiCd), nickel-zinc (NiZn), nickel metal hydride (NiMH), lithium-ion (Li-ion), etc.), solar cells, fuel cells, and the like.</p><p id="p-0316" num="0298">The processor <b>32</b> may also be coupled to the GPS chipset <b>50</b>, which is configured to provide location information (e.g., longitude and latitude) regarding the current location of the node <b>30</b>. It will be appreciated that the node <b>30</b> may acquire location information by way of any suitable location-determination method while remaining consistent with an embodiment.</p><p id="p-0317" num="0299">The processor <b>32</b> may further be coupled to other peripherals <b>52</b>, which may include one or more software and/or hardware modules that provide additional features, functionality and/or wired or wireless connectivity. For example, the peripherals <b>52</b> may include various sensors such as an accelerometer, biometrics (e.g., finger print) sensors, an e-compass, a satellite transceiver, a sensor, a digital camera (for photographs or video), a universal serial bus (USB) port or other interconnect interfaces, a vibration device, a television transceiver, a hands free headset, a Bluetooth&#xae; module, a frequency modulated (FM) radio unit, a digital music player, a media player, a video game player module, an Internet browser, and the like.</p><p id="p-0318" num="0300">The node <b>30</b> may be embodied in other apparatuses or devices, such as a sensor, consumer electronics, a wearable device such as a smart watch or smart clothing, a medical or eHealth device, a robot, industrial equipment, a drone, a vehicle such as a car, truck, train, or airplane. The node <b>30</b> may connect to other components, modules, or systems of such apparatuses or devices via one or more interconnect interfaces, such as an interconnect interface that may comprise one of the peripherals <b>52</b>.</p><p id="p-0319" num="0301"><figref idref="DRAWINGS">FIG. <b>37</b></figref> is a block diagram of an exemplary computing system <b>90</b> which may also be used to implement one or more nodes of a network, such as the clients, servers, or proxies illustrated in <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>11</b>, <b>13</b>-<b>25</b>, and <b>28</b>-<b>32</b></figref>, which may operate as an M2M server, gateway, device, or other node in an M2M network such as that illustrated in <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>11</b>, <b>13</b>-<b>25</b>, and <b>28</b>-<b>32</b></figref>.</p><p id="p-0320" num="0302">Computing system <b>90</b> may comprise a computer or server and may be controlled primarily by computer readable instructions, which may be in the form of software, wherever, or by whatever means such software is stored or accessed. Such computer readable instructions may be executed within a processor, such as central processing unit (CPU) <b>91</b>, to cause computing system <b>90</b> to do work. In many known workstations, servers, and personal computers, central processing unit <b>91</b> is implemented by a single-chip CPU called a microprocessor. In other machines, the central processing unit <b>91</b> may comprise multiple processors. Coprocessor <b>81</b> is an optional processor, distinct from main CPU <b>91</b>, which performs additional functions or assists CPU <b>91</b>. CPU <b>91</b> and/or coprocessor <b>81</b> may receive, generate, and process data related to the disclosed systems and methods for E2E M2M Service Layer sessions, such as receiving session credentials or authenticating based on session credentials.</p><p id="p-0321" num="0303">In operation, CPU <b>91</b> fetches, decodes, and executes instructions, and transfers information to and from other resources via the computer's main data-transfer path, system bus <b>80</b>. Such a system bus connects the components in computing system <b>90</b> and defines the medium for data exchange. System bus <b>80</b> typically includes data lines for sending data, address lines for sending addresses, and control lines for sending interrupts and for operating the system bus. An example of such a system bus <b>80</b> is the PCI (Peripheral Component Interconnect) bus.</p><p id="p-0322" num="0304">Memories coupled to system bus <b>80</b> include random access memory (RAM) <b>82</b> and read only memory (ROM) <b>93</b>. Such memories include circuitry that allows information to be stored and retrieved. ROMs <b>93</b> generally contain stored data that cannot easily be modified. Data stored in RAM <b>82</b> may be read or changed by CPU <b>91</b> or other hardware devices. Access to RAM <b>82</b> and/or ROM <b>93</b> may be controlled by memory controller <b>92</b>. Memory controller <b>92</b> may provide an address translation function that translates virtual addresses into physical addresses as instructions are executed. Memory controller <b>92</b> may also provide a memory protection function that isolates processes within the system and isolates system processes from user processes. Thus, a program running in a first mode may access only memory mapped by its own process virtual address space; it cannot access memory within another process's virtual address space unless memory sharing between the processes has been set up.</p><p id="p-0323" num="0305">In addition, computing system <b>90</b> may contain peripherals controller <b>83</b> responsible for communicating instructions from CPU <b>91</b> to peripherals, such as printer <b>94</b>, keyboard <b>84</b>, mouse <b>95</b>, and disk drive <b>85</b>.</p><p id="p-0324" num="0306">Display <b>86</b>, which is controlled by display controller <b>96</b>, is used to display visual output generated by computing system <b>90</b>. Such visual output may include text, graphics, animated graphics, and video. Display <b>86</b> may be implemented with a CRT-based video display, an LCD-based flat-panel display, gas plasma-based flat-panel display, or a touch-panel. Display controller <b>96</b> includes electronic components required to generate a video signal that is sent to display <b>86</b>.</p><p id="p-0325" num="0307">Further, computing system <b>90</b> may contain communication circuitry, such as for example a network adaptor <b>97</b>, that may be used to connect computing system <b>90</b> to an external communications network, such as network <b>12</b> of <figref idref="DRAWINGS">FIGS. <b>34</b>-<b>37</b></figref>, to enable the computing system <b>90</b> to communicate with other nodes of the network.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A first apparatus for providing an internet of things, IoT, interworking service, the first apparatus comprising a processor, a memory, and communication circuitry, the first apparatus being connected to a network via its communication circuitry, the first apparatus further comprising computer-executable instructions stored in the memory of the first apparatus which, when executed by the processor of the first apparatus, cause the first apparatus to perform operations comprising:<claim-text>receiving, from a second apparatus, the second apparatus being an IoT device a first service layer message comprising information regarding the second apparatus which is to be shared with an IoT server and being sent in a first service layer protocol;</claim-text><claim-text>adding, to a repository of device information, the information regarding the second apparatus, the information regarding the second apparatus being derived from the information the first service layer message received from the second apparatus;</claim-text><claim-text>selecting, based on a repository of server information, a repository of device information, and a policy, a third apparatus, wherein the third apparatus is compatible with the second apparatus and is an IoT server;</claim-text><claim-text>sending, to the third apparatus selected according to the policy, a second service layer message, the second service layer message being sent in a second service layer protocol and requesting registration at the third apparatus of the second apparatus; and</claim-text><claim-text>receiving, from the third apparatus, a response to the second service layer message, the response being sent in the second service layer protocol and indicating whether the second apparatus has been registered at the third apparatus.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The first apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first service layer protocol and the second service layer protocol are defined as a middleware layer protocol supporting service capabilities through a set of Application Programming Interfaces (APIs).</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The first apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first service layer message comprises an indication of a server type.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The first apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first service layer message comprises an identifier of the third apparatus.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The first apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first service layer message comprises an indication of a supported service, a supported interface type, or a supported device type.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The first apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instructions further cause the first apparatus to:<claim-text>receive, from the third apparatus, a server registration request; and</claim-text><claim-text>add, to the repository of server information, information provided in the server registration request.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The first apparatus of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the server registration request further comprises an indication of a security protocol, a supported service, or a service territory.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The first apparatus of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the server registration request further comprises an indication of an availability, a capacity, or a loading.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The first apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instructions further cause the first apparatus to send, to a fourth apparatus via the second service layer protocol, a device registration request, the device registration request comprising an identifier of the second apparatus.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The first apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instructions further cause the first apparatus to:<claim-text>receive, from the second apparatus via the first service layer protocol, a third service layer message, where the third service layer message is intended for a fourth apparatus;</claim-text><claim-text>compose, based on the first message, a fourth service layer message; and</claim-text><claim-text>send, to the fourth apparatus via the second service layer protocol, the fourth service layer message.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The first apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein composing the fourth service layer message comprises translating the first message using a mapping table.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The first apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the instructions further cause the first apparatus to provide a web interface whereby a user may adjust the mapping table.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The first apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein composing the fourth service layer message comprises translating the third service layer message using a protocol unit.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The first apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein composing the fourth service layer message comprises altering content in accordance with a rule or policy.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. An apparatus for providing an internet of things, IoT, interworking service, the apparatus, comprising a processor, a memory, and communication circuitry, the apparatus being connected to a network via its communication circuitry, the apparatus further comprising computer-executable instructions stored in the memory of the apparatus which, when executed by the processor of the apparatus, cause the apparatus to perform operations comprising:<claim-text>receiving, from a plurality of IoT servers, server registration requests, where each server registration request comprises an indication of a service layer protocol;</claim-text><claim-text>maintaining a repository of server information, the repository of server information comprising information derived from the IoT server registration requests;</claim-text><claim-text>receiving, from a plurality of IoT devices, first message, wherein each first message comprises an indication of a IoT server type and information regarding the IoT device which is to be shared with an IoT server;</claim-text><claim-text>maintaining a repository of device information, the repository of device information comprising information derived from the first message;</claim-text><claim-text>maintaining a repository of policies;</claim-text><claim-text>determining, based on the policies and the first message, a first IoT server that is compatible with a first IoT device;</claim-text><claim-text>sending, to the first IoT server, a request message, the request message being sent in a first service layer protocol and requesting registration at the first IoT server of the IoT device; and</claim-text><claim-text>receiving, from the first IoT server, a response to the request message, the response to the request message being sent in the first service layer protocol and indicating a status of the registration of the IoT device at the first IoT server.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the instructions further cause the apparatus to:<claim-text>receive, from a second IoT device via a first service layer protocol, a second message, where the second message is intended for a server;</claim-text><claim-text>compose, based on the second message, a third message;</claim-text><claim-text>send, to the server via a second service layer protocol, the third message.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein composing the third message comprises translating the second message using a mapping table.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein composing the third message comprises translating the second message using a protocol unit.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein composing the third message comprises altering content in accordance with a rule or policy.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The apparatus of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the first service layer protocol and the second service layer protocol are defined as a middleware layer protocol supporting service capabilities through a set of Application Programming Interfaces (APIs).</claim-text></claim></claims></us-patent-application>