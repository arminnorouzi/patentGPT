<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007073A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007073</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364358</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>29</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>13</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>29</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>137</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>42</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">TRANSFERRING FILES IN ACCORDANCE WITH A DATA COMMUNICATIONS PROTOCOL</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>LENOVO (UNITED STATES) INC.</orgname><address><city>MORRISVILLE</city><state>NC</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>RATIU</last-name><first-name>BOGDAN-ALEXANDRU</first-name><address><city>SEGOVIA</city><country>ES</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>FLORIAN</last-name><first-name>GAVRIL IOAN</first-name><address><city>CHITILA</city><country>RO</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>CALCIU</last-name><first-name>CORNELIU-ILIE</first-name><address><city>BUCHAREST</city><country>RO</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>IORGA</last-name><first-name>RADU MIHAI</first-name><address><city>BUCHAREST</city><country>RO</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Transferring files in accordance with a data communications protocol includes: receiving, by a server from a client, a read request for a file, where the read request specifies a filename of the file, a message digest algorithm, and a key, where the key includes a result of applying the message digest algorithm to the file as stored on the client; generating, by the server, a local key including applying the message digest algorithm to a file currently stored on the server and having the filename; and if the local key matches the key specified in the read request, closing, by the server, a connection to the client with success without sending the requested file.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="69.77mm" wi="143.51mm" file="US20230007073A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="137.58mm" wi="145.54mm" file="US20230007073A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="146.90mm" wi="130.22mm" file="US20230007073A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="234.02mm" wi="160.27mm" file="US20230007073A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="246.89mm" wi="162.56mm" file="US20230007073A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="234.44mm" wi="161.80mm" file="US20230007073A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><heading id="h-0002" level="1">Field of the Disclosure</heading><p id="p-0002" num="0001">The field of the disclosure is data processing, or, more specifically, methods, apparatus, and products for transferring files in accordance with a data communications protocol.</p><heading id="h-0003" level="1">Description of Related Art</heading><p id="p-0003" num="0002">Communication protocols are systems of rules that allow two or more entities of a communications system to transmit information between one another. The communication protocol defines the rules, syntax, semantics and synchronization of communication and possible error recovery methods. Communication protocols may be implemented by hardware, software, or a combination of both. Data communication protocols are often used to allow a client to retrieve a file from or place a file onto a host. Often, clients may receive duplicates of files that are already presently stored on the client.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0004" num="0003">Methods for transferring files in accordance with a data communications protocol are disclosed in this specification. In accordance with one aspect of the present disclosure, such transferring may include: receiving, by a server from a client, a read request for a file, wherein the read request specifies a filename of the file, a message digest algorithm, and a key, wherein the key comprises a result of applying the message digest algorithm to the file as stored on the client; generating, by the server, a local key including applying the message digest algorithm to a file currently stored on the server and having the filename; and if the local key matches the key specified in the read request, closing, by the server, a connection to the client with success without sending the requested file.</p><p id="p-0005" num="0004">In accordance with another aspect of the present disclosure, a method of transferring files in accordance with a data communications protocol includes: receiving, by a server from a client, a write request for a file, wherein the write request specifies a filename of the file, a message digest algorithm, and a key, wherein the key comprises a result of applying the message digest algorithm to the file as stored on the client; generating, by the server, a local key including applying the message digest algorithm to a file currently stored on the server and having the filename; and if the local key matches the key specified in the write request, prematurely terminating, by the server, a data communications connection with the client, thereby prohibiting the file to be transmitted from the client to the server.</p><p id="p-0006" num="0005">In accordance with another aspect of the present disclosure, a method of transferring files in accordance with a data communications protocol includes: sending, by a client to a server, a write request for a file, wherein the write request specifies a filename of the file, and a message digest algorithm; receiving, by the client from the server, a key, wherein the key comprises a result of applying the message digest algorithm to a file currently stored on the server and having the filename; generating, by the client, a local key including applying the message digest algorithm to the file as stored on the client; and if the local key matches the key received from the server, closing, by the client, a connection to the server with success without sending the requested file.</p><p id="p-0007" num="0006">The foregoing and other objects, features and advantages of the disclosure will be apparent from the following more particular descriptions of exemplary embodiments of the disclosure as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an example line drawing of a client and a server configured for transferring files in accordance with a data communications protocol in accordance with embodiments of the present disclosure.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a block diagram of an example initial packet for transfer in accordance with a data communications protocol in accordance with embodiments of the present disclosure.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart of an example method for transferring files in accordance with a data communications protocol according to some embodiments of the present disclosure.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of an example method for transferring files in accordance with a data communications protocol according to some embodiments of the present disclosure.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart of an example method for transferring files in accordance with a data communications protocol according to some embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0013" num="0012">Exemplary methods, apparatus, and products for transferring files in accordance with a data communications protocol in accordance with the present disclosure are described with reference to the accompanying drawings, beginning with <figref idref="DRAWINGS">FIG. <b>1</b></figref>. <figref idref="DRAWINGS">FIG. <b>1</b></figref> sets forth an example line drawing of a client and a server configured for transferring files in accordance with a data communications protocol according to embodiments of the present disclosure. The example system of <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes a client <b>104</b> connected to a server <b>102</b> through a network <b>100</b>.</p><p id="p-0014" num="0013">The example server <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes a central processing unit (CPU&#x2032;) <b>106</b>, a data communications adapter <b>108</b>, and memory <b>110</b>. Stored in memory <b>110</b> of the server is an operating system <b>112</b>. The example client <b>104</b> includes a CPU <b>114</b>, a data communications adapter <b>116</b>, and memory <b>118</b>. Stored in memory <b>118</b> of the client is an operating system <b>120</b>. Both the server <b>102</b> and the client <b>104</b> are configured for transferring files in accordance with a data communications protocol using a data communications connection <b>122</b>. Examples of data communications protocols may include Trivial File Transfer Protocol (&#x2018;TFTP&#x2019;), File Transfer Protocol (&#x2018;FTP&#x2019;), and the like.</p><p id="p-0015" num="0014">In the example system of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the client may be configured to send a read request or a write request to the server using the data communications connection <b>122</b>. A read request and a write request may be sent using the data communications connection in the form of a packet, referred to in this specification as an initial packet such as the one depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref> and described below in greater detail. In response to receiving the request, the server may respond by sending an acknowledgement packet to the client. The acknowledgement packet may include an indication of readiness to receive the file from the client for a write request, or the acknowledgment packet may include the file being requested for a read request.</p><p id="p-0016" num="0015">In some embodiments a file having the same filename as the file specified in the initial packet may or may not be stored on the recipient. That is, in one example, a server may receive a read request from a client requesting a file from the server that is already stored on the client. In this way, the client may request, from the server, an updated version of the file already stored on the client. In such cases where the requested file is already current and updated on the client, the server may send, in response to the read request, a duplicate of the file already stored on the client. In such cases, the read request may be unnecessarily performed and result in an unnecessary utilization of bandwidth for carrying out the unneeded file transfer.</p><p id="p-0017" num="0016">In another example, the server may receive a write request from a client requesting to send the server a file that is already stored on the server. In this way, the client may request to send, to the server, an updated version of the file already stored on the server. In such cases where the requested file is already current and updated on the server, the server may receive, in response to the write request, a duplicate of the file already stored on the server. In such cases, the write request may be unnecessarily performed and result in an unnecessary utilization of bandwidth for carrying out the unneeded file transfer.</p><p id="p-0018" num="0017">For further explanation, <figref idref="DRAWINGS">FIG. <b>2</b></figref> sets forth a block diagram of an example initial packet <b>200</b> for transfer in accordance with a data communications protocol in accordance with embodiments of the present disclosure. The initial packet <b>200</b> includes an opcode <b>202</b>, a filename <b>204</b>, a mode <b>206</b>, a message digest algorithm <b>208</b>, and a key <b>210</b>. The initial packet <b>200</b> may be sent by the client to the server, or by the server to the client, in order to initiate the start of the data communications connection <b>122</b>. Those skilled in the art will recognize that data communications protocol packets, such as TFTP, may be configured with options. According to embodiments of the present disclosure, the message digest algorithm <b>208</b> and the key <b>210</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be included within the initial packet as such options.</p><p id="p-0019" num="0018">The opcode <b>202</b> is a field within the initial packet that specifies either a read request or a write request. The filename <b>204</b> is a field within the initial packet that specifies name of the file requested to be read or written. The mode <b>206</b> is a field within the initial packet that specifies the mode of file transfer. Examples of the mode of file transfer include netascii, octet, and mail.</p><p id="p-0020" num="0019">The message digest algorithm <b>208</b> is a field within the initial packet that specifies a message digest algorithm to be applied to the file specified in the initial packet. A message digest algorithm is a function that maps data of an arbitrary size to fixed size values. Examples of message digest algorithms include md5sum, sha256sum, and sha512sum, among others. For example, a client that sends an initial packet to a server may use the message digest algorithm <b>208</b> field to specify a message digest algorithm of md5sum to be applied to the file. If the server receiving the initial packet does not support the message digest algorithm specified in the message digest algorithm <b>208</b> field, the server may ignore the option, as well as the key <b>210</b> field option, and proceed with the read or write request according to the data communications protocol.</p><p id="p-0021" num="0020">As mentioned above, if a recipient of an initial packet does not support a message digest algorithm or, more generally, the option that relies on message digest algorithms, the recipient may ignore the option and process the initial packet in accordance with the standard data communications protocol. TFTP, for example, provides for various options to extend the data communications protocol capability. If one of the parties in a TFTP data communications connection does not support a particular option, that party can continue communicating according to the standard TFTP (as extended by any options that the party does support), without failing or otherwise raising an error. In accordance with embodiments of the present disclosure, an option is implemented that provides for reducing redundant file transfers through use of message digest algorithms. In this way, if a recipient of an initial packet does not support the option for reducing redundant file transfers according to embodiments of the present disclosure, the recipient may process the data communications without using the option.</p><p id="p-0022" num="0021">The key <b>210</b> is a field within the initial packet that includes a result of the message digest algorithm used. The key <b>210</b> may include the result, or hash, of the message digest algorithm used on a file with the filename <b>204</b> included within the packet <b>200</b>. The key may also contain a value of zero, indicating that the message digest algorithm has not been used.</p><p id="p-0023" num="0022">Readers of skill in the art will recognize that while the packet of <figref idref="DRAWINGS">FIG. <b>2</b></figref> is an example of an initial packet sent using the data communications connection and according to a data communications protocol, other packets containing different values or options may be sent between the client and the server during the life of the data communications connection. Example packets may include acknowledgement packets with the message digest algorithm <b>208</b> and the key <b>210</b> set to a value of zero or not specified at all.</p><p id="p-0024" num="0023">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b></figref> sets forth a flow chart illustrating an exemplary method for transferring files in accordance with a data communications protocol according to embodiments of the present disclosure. The method of <figref idref="DRAWINGS">FIG. <b>3</b></figref> includes receiving <b>300</b>, by a server <b>102</b> from a client <b>104</b>, a read request <b>302</b> for a file. In the method of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the read request specifies a filename <b>304</b> of the file, a message digest algorithm <b>306</b>, and a key <b>308</b>. The key <b>308</b> is a result of applying the message digest algorithm to the file as stored on the client, such as, for example, a hash. The key <b>308</b> may be a result of applying the message digest algorithm <b>306</b> to a file currently stored on the client and having the filename <b>304</b> specified in the read request <b>302</b>. For example, the key <b>308</b> includes the hash of the contents of the file currently stored on the client and having the filename <b>304</b> specified in the read request <b>302</b>. Receiving <b>300</b>, by the server from the client, the read request <b>302</b> for a file may be carried out by receiving an initial packet <b>200</b> from the client using a data communications connection <b>122</b>, where the header of the initial packet includes an opcode value specifying the request as a read request.</p><p id="p-0025" num="0024">As an example, consider that the server receives an initial packet from the client. The initial packet includes a header with fields similar to those in the example packet of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The initial packet may, for example, include an opcode value specifying the initial packet as a read request, a filename field specifying the name of a file to be read from the server as &#x201c;config.txt,&#x201d; a message digest algorithm of md5sum, and a key value of 8743b52063cd84097a65d1633f5c74f5.</p><p id="p-0026" num="0025">The method of <figref idref="DRAWINGS">FIG. <b>3</b></figref> also includes generating <b>310</b>, by the server <b>102</b>, a local key <b>314</b>. In the method of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, generating <b>310</b> the local key <b>314</b> includes applying <b>312</b> the message digest algorithm <b>306</b> to a file currently stored on the server and having the filename <b>304</b> specified in the read request <b>302</b>. The local key <b>314</b> may be a result of applying <b>312</b> the message digest algorithm <b>306</b> to a file currently stored on the server and having the filename <b>304</b> specified in the read request <b>302</b>. For example, the local key <b>314</b> includes the hash of the contents of the file currently stored on the server and having the filename <b>304</b> specified in the read request <b>302</b>.</p><p id="p-0027" num="0026">Continuing with the example above, the server may generate a local key by applying the md5sum message digest algorithm to a file stored on the server named &#x201c;config.txt&#x201d;. The local key generated may be a hash of the config.txt and result in a value of 8743b52063cd84097a65d1633f5c74f5.</p><p id="p-0028" num="0027">The method of <figref idref="DRAWINGS">FIG. <b>3</b></figref> also includes determining <b>316</b> whether the local key <b>314</b> matches the key <b>308</b> specified in the read request <b>302</b>. Determining <b>316</b> whether the local key <b>314</b> matches the key <b>308</b> specified in the read request <b>302</b> may be carried out by comparing, by the server, the local key <b>314</b> with the key <b>308</b> specified in the received read request <b>302</b>.</p><p id="p-0029" num="0028">If the local key <b>314</b> matches the key <b>308</b> specified in the read request <b>302</b>, the method of <figref idref="DRAWINGS">FIG. <b>3</b></figref> continues by closing <b>320</b>, by the server <b>102</b>, a connection <b>122</b> to the client <b>104</b> with success without sending the requested file to the client. Closing <b>320</b>, by the server <b>102</b>, a connection <b>122</b> to the client <b>104</b> with success without sending the requested file to the client may be carried out by sending <b>322</b> a dummy file to the client <b>104</b>. Sending <b>322</b> a dummy file to the client <b>104</b> may be carried out by the server sending a file or packet to the client that represents that the local key <b>314</b> matches the key <b>308</b> specified in the read request <b>302</b>. The dummy file sent to the client may be a file that includes predefined content such as well-known code that indicates to the requestor a matching key. The dummy file may also be a file with a file size of zero. In this way, the server may send a dummy file to the client, and therefore avoid an unneeded transfer of a duplicate file, in response to determining that the contents of the requested file currently stored on the server match the contents of the requested file currently stored on the client.</p><p id="p-0030" num="0029">Continuing with the example above, the local key of 8743b52063cd84097a65d1633f5c74f5 matches the key 8743b52063cd84097a65d1633f5c74f5 in the initial packet. As such, the server, rather than transmitting the config.txt file to the requesting client, may instead send a dummy file of size 0 to indicate that the client is in possession of the same version of the config.txt file stored on the server. In this way, the server may reduce the utilization of bandwidth and other data communications resources that would otherwise be required to transfer the config.txt file to the client.</p><p id="p-0031" num="0030">If the local key <b>314</b> does not match the key <b>308</b> specified in the read request <b>302</b>, the method of <figref idref="DRAWINGS">FIG. <b>3</b></figref> continues by sending <b>318</b>, by the server, the requested file to the client. Sending <b>318</b>, by the server, the requested file to the client may be carried out by sending packets of data forming the requested file over the data communications connection between the client and server and in accordance with the standard data communications protocol.</p><p id="p-0032" num="0031">For further explanation, <figref idref="DRAWINGS">FIG. <b>4</b></figref> sets forth a flow chart illustrating a further exemplary method for transferring files in accordance with a data communications protocol according to embodiments of the present disclosure. The method of <figref idref="DRAWINGS">FIG. <b>4</b></figref> includes receiving <b>400</b>, by a server <b>102</b> from a client <b>104</b>, a write request <b>402</b> for a file. In the method of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the write request specifies a filename <b>404</b> of the file, a message digest algorithm <b>406</b>, and a key <b>408</b>. The key <b>408</b> is a result of applying the message digest algorithm <b>406</b> to the file as stored on the client, such as, for example, a hash. The key <b>408</b> includes a result of applying the message digest algorithm <b>406</b> to a file currently stored on the client and having the filename <b>404</b> specified in the write request <b>402</b>. For example, the key <b>408</b> includes the digest of the contents of the file currently stored on the client and having the filename <b>404</b> specified in the write request <b>402</b>. Receiving <b>400</b>, by a server from a client, the write request <b>402</b> for a file may be carried out by receiving an initial packet <b>200</b> from the client using a data communications connection <b>122</b>, where the header of the initial packet includes an opcode value specifying the request as a write request.</p><p id="p-0033" num="0032">As an example, consider that the server receives an initial packet from the client. The initial packet includes a header with fields similar to those in the example packet of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The initial packet may, for example, include an opcode value specifying the initial packet as a write request, a filename field specifying the name of a file to be written to the server as &#x201c;config.txt,&#x201d; a message digest algorithm of md5sum, and a key value of 8743b52063cd84097a65d1633f5c74f5.</p><p id="p-0034" num="0033">The method of <figref idref="DRAWINGS">FIG. <b>4</b></figref> also includes determining <b>410</b>, by the server, whether a file exists on the server <b>102</b> having the filename <b>404</b> specified in the write request <b>402</b>. Determining <b>410</b>, by the server, whether a file exists on the server <b>102</b> having the filename <b>404</b> specified in the write request <b>402</b> may be carried out by the server comparing filename <b>404</b> specified in the write request with the filenames of all the files stored within the memory of the server.</p><p id="p-0035" num="0034">The method of <figref idref="DRAWINGS">FIG. <b>4</b></figref> also includes generating <b>412</b>, by the server <b>102</b>, a local key <b>416</b>. In the method of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, generating <b>412</b> the local key <b>416</b> includes applying <b>414</b> the message digest algorithm <b>406</b> to a file currently stored on the server <b>102</b> and having the filename <b>404</b> specified in the write request <b>402</b>. Generating <b>412</b>, by the server <b>102</b>, a local key <b>416</b> may be carried out only if the server determines that a file exists on the server <b>102</b> having the filename <b>404</b> specified in the write request <b>402</b>. If the server determines that a file does not exist on the server having the filename specified in the write request, the server may send an acknowledgment indicating readiness to receive the file from the client. The acknowledgment packet sent to the client may include zero or null values in the key field and the message digest algorithm field. The local key <b>416</b> may be a result of applying <b>414</b> the message digest algorithm <b>406</b> to a file currently stored on the server and having the filename <b>404</b> specified in the write request <b>402</b>. For example, the local key <b>416</b> includes the hash of the contents of the file currently stored on the server and having the filename <b>404</b> specified in the write request <b>402</b>.</p><p id="p-0036" num="0035">Continuing with the example above, the server may generate a local key by applying the md5sum message digest algorithm to a file stored on the server named &#x201c;config.txt&#x201d;. The local key generated may be a hash of the config.txt and result in a value of 8743b52063cd84097a65d1633f5c74f5.</p><p id="p-0037" num="0036">The method of <figref idref="DRAWINGS">FIG. <b>4</b></figref> also includes determining <b>418</b> whether the local key <b>416</b> matches the key <b>408</b> specified in the write request <b>402</b>. Determining <b>418</b> whether the local key <b>416</b> matches the key <b>408</b> specified in the write request <b>402</b> may be carried out by comparing, by the server, the local key <b>416</b> with the key <b>408</b> specified in the received write request <b>402</b>.</p><p id="p-0038" num="0037">If the local key <b>416</b> matches the key <b>408</b> specified in the write request <b>402</b>, the method of <figref idref="DRAWINGS">FIG. <b>4</b></figref> continues by prematurely terminating <b>422</b>, by the server, a data communications connection <b>122</b> with the client <b>104</b>, thereby prohibiting the file to be transmitted from the client to the server. Prematurely terminating <b>422</b>, by the server, a data communications connection <b>122</b> with the client <b>104</b> may be carried out by sending <b>424</b> an error message to the client <b>104</b>. Sending <b>424</b> an error message to the client <b>104</b> may be carried out by the server sending an error message to the client in order to prohibit the file from being transmitted from the client to the server. In this way, the server may prohibit the requested file from being transferred from the client, and therefore prohibit an unneeded transfer of a duplicate file, in response to determining that the contents of the requested file currently stored on the server match the contents of the requested file currently stored on the client.</p><p id="p-0039" num="0038">Continuing with the example above, the local key of 8743b52063cd84097a65d1633f5c74f5 matches the key 8743b52063cd84097a65d1633f5c74f5 in the initial packet. As such, the server, rather than receiving the config.txt file from the requesting client, may instead prematurely terminate the data communications connection between the client and the server. In this way, the server may reduce the utilization of bandwidth and other data communications resources that would otherwise be required to for the client to transfer the config.txt file to the server.</p><p id="p-0040" num="0039">If the local key <b>416</b> does not match the key <b>408</b> specified in the write request <b>402</b>, the method of <figref idref="DRAWINGS">FIG. <b>4</b></figref> continues by sending <b>420</b>, by the server, an acknowledgment indicating readiness to receive the file from the client. Sending <b>420</b>, by the server, an acknowledgment indicating readiness to receive the file from the client may be carried out by sending an acknowledgment packet over the data communications connection between the client and the server and in accordance with the standard data communications protocol.</p><p id="p-0041" num="0040">For further explanation, <figref idref="DRAWINGS">FIG. <b>5</b></figref> sets forth a flow chart illustrating a further exemplary method for transferring files in accordance with a data communications protocol according to embodiments of the present disclosure. The method of <figref idref="DRAWINGS">FIG. <b>5</b></figref> includes sending <b>500</b>, by a client <b>104</b> to a server <b>102</b>, a write request <b>502</b> for a file. In the method of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the write request <b>502</b> specifies a filename <b>504</b> of the file, and a message digest algorithm <b>506</b>. Sending <b>500</b>, by a client <b>104</b> to a server <b>102</b>, a write request <b>502</b> for a file may be carried out by the client sending an initial packet <b>200</b> to the server using a data communications connection <b>122</b>, where the header of the initial packet includes an opcode value specifying the request as a write request.</p><p id="p-0042" num="0041">As an example, consider that the client sends an initial packet to the server. The initial packet includes a header with fields similar to those in the example packet of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The initial packet may, for example, include an opcode value specifying the initial packet as a write request, a filename field specifying the name of a file to be written to the server as &#x201c;config.txt,&#x201d; and a message digest algorithm of md5sum.</p><p id="p-0043" num="0042">The method of <figref idref="DRAWINGS">FIG. <b>5</b></figref> also includes receiving <b>512</b>, by the client <b>104</b> from the server <b>102</b>, a key <b>510</b>. The key <b>510</b> is a result of applying the message digest algorithm <b>506</b> to a file currently stored on the server and having the filename <b>504</b> specified in the write request <b>502</b>. For example, the key <b>510</b> includes the hash of the contents of the file currently stored on the server and having the filename <b>504</b> specified in the write request <b>502</b>.</p><p id="p-0044" num="0043">Continuing with the example above, the client may receive a packet from the server that includes a key value of 8743b52063cd84097a65d1633f5c74f5. The key in this example is a value resulting from applying a mda5sum hashing algorithm to the config.txt file stored on the server.</p><p id="p-0045" num="0044">The method of <figref idref="DRAWINGS">FIG. <b>5</b></figref> also includes generating <b>514</b>, by the client <b>104</b>, a local key <b>518</b>. In the method of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, generating <b>514</b> the local key <b>518</b> includes applying <b>516</b> the message digest algorithm <b>506</b> to the file as stored on the client and having the filename <b>404</b> specified in the write request <b>502</b>. For example, the local key <b>518</b> includes the hash of the contents of the file with the filename <b>504</b> as currently stored on the client.</p><p id="p-0046" num="0045">Continuing with the example above, the client may generate a local key by applying the md5sum message digest algorithm to a file stored on the server named &#x201c;config.txt&#x201d;. The local key generated may be a hash of the config.txt and result in a value of 8743b52063cd84097a65d1633f5c74f5.</p><p id="p-0047" num="0046">The method of <figref idref="DRAWINGS">FIG. <b>5</b></figref> also includes determining <b>520</b> whether the local key <b>518</b> matches the key <b>510</b> received from the server <b>102</b>. Determining <b>520</b> whether the local key <b>518</b> matches the key <b>510</b> received from the server <b>102</b> may be carried out by comparing, by the client, the local key <b>518</b> with the key <b>510</b> received from the server <b>102</b>.</p><p id="p-0048" num="0047">If the local key <b>518</b> matches the key <b>510</b> received from the server <b>102</b>, the method of <figref idref="DRAWINGS">FIG. <b>5</b></figref> continues by closing <b>524</b>, by the client <b>104</b>, a connection <b>122</b> to the server with success without sending the requested file. Closing <b>524</b>, by the client <b>104</b>, a connection <b>122</b> to the server with success without sending the requested file may be carried out by sending <b>526</b> a dummy file to the server <b>102</b>. Sending <b>526</b> a dummy file to the client <b>104</b> may be carried out by the client sending a file or packet to the server that represents that the local key <b>518</b> matches the key <b>510</b> received from the server. The dummy file sent to the server may be a file that includes predefined content such as well-known code that indicates to the requestor a matching key. The dummy file may also be a file with a file size of zero. In this way, the client may send a dummy file to the server, and therefore avoid an unneeded transfer of a duplicate file, in response to determining that the contents of the requested file currently stored on the client match the contents of the requested file currently stored on the server.</p><p id="p-0049" num="0048">Continuing with the example above, the local key of 8743b52063cd84097a65d1633f5c74f5 matches the key 8743b52063cd84097a65d1633f5c74f5 received from the server. As such, the client, rather than transmitting the config.txt file to the server, may instead send a dummy file of size 0 to indicate that the server is in possession of the same version of the config.txt file stored on the client. In this way, the client may reduce the utilization of bandwidth and other data communications resources that would otherwise be required to transfer the config.txt file to the server.</p><p id="p-0050" num="0049">If the local key <b>518</b> does not match the key <b>510</b> received from the server, the method of <figref idref="DRAWINGS">FIG. <b>5</b></figref> continues by sending <b>522</b>, by the client, the requested file to the server. Sending <b>522</b>, by the server, the requested file to the server may be carried out by sending packets of data forming the requested file over the data communications connection between the client and server and in accordance with the standard data communications protocol.</p><p id="p-0051" num="0050">In view of the explanations set forth above, readers will recognize that the benefits of transferring files in accordance with a data communications protocol according to embodiments of the present disclosure include:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0051">Improved computing efficiency when transferring files in accordance with a data communications protocol due to skipping unnecessary downloads.</li>        <li id="ul0002-0002" num="0052">Improved methods for increasing the speed of some processes, such as boot processes including scripts that require the latest version of a file from a different location.</li>        <li id="ul0002-0003" num="0053">Improved methods of transferring files in accordance with a data communications protocol by allowing a device to keep the same filenames when downloading a file, and only overwriting the file when a new version appears. Such a device requesting a file download may only receive the file if the contents of the file are different from the currently installed image.</li>    </ul>    </li></ul></p><p id="p-0052" num="0054">Exemplary embodiments of the present disclosure are described largely in the context of a fully functional computer system for transferring files in accordance with a data communications protocol. Readers of skill in the art will recognize, however, that the present disclosure also may be embodied in a computer program product disposed upon computer readable storage media for use with any suitable data processing system. Such computer readable storage media may be any storage medium for machine-readable information, including magnetic media, optical media, or other suitable media. Examples of such media include magnetic disks in hard drives or diskettes, compact disks for optical drives, magnetic tape, and others as will occur to those of skill in the art. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the disclosure as embodied in a computer program product. Persons skilled in the art will recognize also that, although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present disclosure.</p><p id="p-0053" num="0055">The present disclosure may be a system, a method, and/or a computer program product. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present disclosure.</p><p id="p-0054" num="0056">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0055" num="0057">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0056" num="0058">Computer readable program instructions for carrying out operations of the present disclosure may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++ or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present disclosure.</p><p id="p-0057" num="0059">Aspects of the present disclosure are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0058" num="0060">These computer readable program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0059" num="0061">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0060" num="0062">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present disclosure. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0061" num="0063">It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present disclosure without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present disclosure is limited only by the language of the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of transferring files in accordance with a data communications protocol, the method comprising:<claim-text>receiving, by a server from a client, a read request for a file, wherein the read request specifies a filename of the file and a key, wherein the key comprises a result of applying a message digest algorithm to the file as stored on the client;</claim-text><claim-text>comparing, by the server, the key specified in the read request to a local key wherein the local key comprises a result of applying the message digest algorithm to a file currently stored on the server and having the filename; and</claim-text><claim-text>if the local key matches the key specified in the read request, closing, by the server, a connection to the client with success without sending the requested file.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>if the local key does not match the key specified in the read request, sending, by the server, the requested file to the client.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein closing the connection with success without sending the requested file comprises sending, by the server, a dummy file to the client.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the read request further specifies the message digest algorithm, and wherein local key is generated by the server based on the received read request.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein a type of digest algorithm identified by the message digest algorithm consists of one of: md5sum, sha256sum, and sha512sum.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the message digest algorithm and the key specified in the read request are data communication protocol options; and<claim-text>if the server is not configured to support the options specified in the read request, ignoring, by the server, the options.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. A method of transferring files in accordance with a data communications protocol, the method comprising:<claim-text>receiving, by a server from a client, a write request for a file, wherein the write request specifies a filename of the file, a message digest algorithm, and a key, wherein the key comprises a result of applying the message digest algorithm to the file as stored on the client;</claim-text><claim-text>generating, by the server and based on the received write request, a local key including applying the message digest algorithm to a file currently stored on the server and having the filename; and</claim-text><claim-text>if the local key matches the key specified in the write request, prematurely terminating, by the server, a data communications connection with the client, thereby prohibiting the file to be transmitted from the client to the server.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref> further comprising:<claim-text>if the local key does not match the key specified in the write request, sending, by the server to the client, an acknowledgment indicating readiness to receive the file.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein prematurely terminating the data communications connection with the client further comprises sending an error message to the client.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref> further comprising:<claim-text>determining, by the server, whether a file exists on the server having the filename; and</claim-text><claim-text>generating the local key only if the file exists on the server.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref> further comprising sending, by the server, an acknowledgment to receive the file from the client only if the file does not exist on the server.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the data communications protocol comprises a Trivial File Transfer Protocol (TFTP).</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein a type of digest algorithm identified by the message digest algorithm consists of one of: md5sum, sha256sum, and sha512sum.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the message digest algorithm and the key specified in the write request are data communication protocol options; and<claim-text>if the server is not configured to support the options specified in the write request, ignoring, by the server, the options.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A method of transferring files in accordance with a data communications protocol, the method comprising:<claim-text>sending, by a client to a server, a write request for a file, wherein the write request specifies a filename of the file, and a message digest algorithm;</claim-text><claim-text>receiving, by the client from the server and based on the write request, a key, wherein the key comprises a result of applying the message digest algorithm to a file currently stored on the server and having the filename;</claim-text><claim-text>generating, by the client, a local key including applying the message digest algorithm to the file as stored on the client; and</claim-text><claim-text>if the local key matches the key received from the server, closing, by the client, a connection to the server with success without sending the requested file.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>if the local key does not match the key received from the server, sending, by the client, the requested file to the server.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein closing the connection with success without sending the file identified in the write request comprises sending, by the client, a dummy file to the server.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the data communications protocol comprises a Trivial File Transfer Protocol (TFTP).</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein a type of digest algorithm identified by the message digest algorithm consists of one of: md5sum, sha256sum, and sha512sum.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the message digest algorithm and the key specified in the write request are data communication protocol options; and<claim-text>if the server is not configured to support the options specified in the write request, ignoring, by the server, the options.</claim-text></claim-text></claim></claims></us-patent-application>