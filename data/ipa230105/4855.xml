<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004856A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004856</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364065</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>62</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6265</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6215</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6232</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">TECHNIQUES FOR VALIDATING FEATURES FOR MACHINE LEARNING MODELS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Armis Security Ltd.</orgname><address><city>Tel Aviv-Yafo</city><country>IL</country></address></addressbook><residence><country>IL</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SHOHAM</last-name><first-name>Ron</first-name><address><city>Tel Aviv</city><country>IL</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>FRIEDLANDER</last-name><first-name>Yuval</first-name><address><city>Petah-Tiqwa</city><country>IL</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>HANETZ</last-name><first-name>Tom</first-name><address><city>Tel Aviv</city><country>IL</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>BEN ZVI</last-name><first-name>Gil</first-name><address><city>Hod Hasharon</city><country>IL</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Armis Security Ltd.</orgname><role>03</role><address><city>Tel Aviv-Yafo</city><country>IL</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A system and method for machine learning features validation. A method includes: performing statistical testing on a plurality of pairs of features, each pair of features including a test feature of a plurality of test features extracted from a first data set and a corresponding training feature extracted from a second data set during a training phase for a machine learning model, wherein the statistical testing is performed under a null hypothesis that the first data set and the second data set are drawn from a same continuous distribution, wherein performing the statistical testing further comprises determining a degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature; and determining, based on the degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature, whether the plurality of test features is validated.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="104.14mm" wi="113.37mm" file="US20230004856A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="127.00mm" wi="115.23mm" file="US20230004856A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="159.34mm" wi="142.24mm" file="US20230004856A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="158.41mm" wi="164.00mm" file="US20230004856A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="179.83mm" wi="164.25mm" file="US20230004856A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="138.09mm" wi="125.73mm" file="US20230004856A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="162.22mm" wi="164.00mm" file="US20230004856A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="114.05mm" wi="129.62mm" file="US20230004856A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">The present disclosure relates generally to validation of machine learning models, and more specifically to validating features to be input to machine learning models.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">In machine learning, a model is applied to data in the form of features which may be extracted from a broader data set, cleaned, normalized, or otherwise processed. Consequently, the quality of the features being input to the model heavily affect the outcome of the model. Specifically, inaccurate or otherwise inappropriate features can result in an inaccurate or misleading output by the model. Techniques for improving the quality of features to be input to machine learning models are therefore desirable.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0004" num="0003">A summary of several example embodiments of the disclosure follows. This summary is provided for the convenience of the reader to provide a basic understanding of such embodiments and does not wholly define the breadth of the disclosure. This summary is not an extensive overview of all contemplated embodiments, and is intended to neither identify key or critical elements of all embodiments nor to delineate the scope of any or all aspects. Its sole purpose is to present some concepts of one or more embodiments in a simplified form as a prelude to the more detailed description that is presented later. For convenience, the term &#x201c;some embodiments&#x201d; or &#x201c;certain embodiments&#x201d; may be used herein to refer to a single embodiment or multiple embodiments of the disclosure.</p><p id="p-0005" num="0004">Certain embodiments disclosed herein include a method for machine learning features validation. The method comprises: performing statistical testing on a plurality of pairs of features, each pair of features including a test feature of a plurality of test features extracted from a first data set and a corresponding training feature extracted from a second data set during a training phase for a machine learning model, wherein the statistical testing is performed under a null hypothesis that the first data set and the second data set are drawn from a same continuous distribution, wherein performing the statistical testing further comprises determining a degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature; and determining, based on the degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature, whether the plurality of test features is validated.</p><p id="p-0006" num="0005">Certain embodiments disclosed herein also include a non-transitory computer readable medium having stored thereon causing a processing circuitry to execute a process, the process comprising: performing statistical testing on a plurality of pairs of features, each pair of features including a test feature of a plurality of test features extracted from a first data set and a corresponding training feature extracted from a second data set during a training phase for a machine learning model, wherein the statistical testing is performed under a null hypothesis that the first data set and the second data set are drawn from a same continuous distribution, wherein performing the statistical testing further comprises determining a degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature; and determining, based on the degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature, whether the plurality of test features is validated.</p><p id="p-0007" num="0006">Certain embodiments disclosed herein also include a system for machine learning features validation. The system comprises: a processing circuitry; and a memory, the memory containing instructions that, when executed by the processing circuitry, configure the system to: perform statistical testing on a plurality of pairs of features, each pair of features including a test feature of a plurality of test features extracted from a first data set and a corresponding training feature extracted from a second data set during a training phase for a machine learning model, wherein the statistical testing is performed under a null hypothesis that the first data set and the second data set are drawn from a same continuous distribution, wherein performing the statistical testing further comprises determining a degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature; and determine, based on the degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature, whether the plurality of test features is validated.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007">The subject matter disclosed herein is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The foregoing and other objects, features, and advantages of the disclosed embodiments will be apparent from the following detailed description taken in conjunction with the accompanying drawings.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a network diagram utilized to describe various disclosed embodiments.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart illustrating a method for training a machine learning model using validation according to an embodiment.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart illustrating a method for metrics validation according to an embodiment.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart illustrating a method for scoring validation according to an embodiment.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart illustrating a method for comparing score distributions according to an embodiment.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart illustrating a method for validating features according to an embodiment.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic diagram of a validator according to an embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0016" num="0015">It is important to note that the embodiments disclosed herein are only examples of the many advantageous uses of the innovative teachings herein. In general, statements made in the specification of the present application do not necessarily limit any of the various claimed embodiments. Moreover, some statements may apply to some inventive features but not to others. In general, unless otherwise indicated, singular elements may be in plural and vice versa with no loss of generality. In the drawings, like numerals refer to like parts through several views.</p><p id="p-0017" num="0016">In light of the ongoing need for ensuring quality of features input to machine earning models, the embodiments disclosed herein include techniques for such features. Specifically, the disclosed embodiments include respective methods and systems for determining whether test features effectively represent train features such that the resulting output of applying a machine learning model to the test features will not be misleading or inaccurate. Consequently, the disclosed embodiments allow for improving machine learning performance through using only validated features.</p><p id="p-0018" num="0017">In this regard, it has been identified that test features to be input to a machine learning model can be validated by performing statistical testing in comparison to train features used for training the machine learning model. Moreover, it has further been identified that, for certain types of data, appropriate test features tend to have the property that statistical testing performed on those test features and the train features used to train a model will confirm that the test features are drawn from the same distribution as the train features. To this end, the disclosed embodiments provide techniques for validating features involving statistical testing based on an assumption that test features are drawn from the same distribution as train features.</p><p id="p-0019" num="0018">In an embodiment, test features to be input to a machine learning model are extracted from a test data set. Statistical tests are performed on pairs of features, where each pair includes one of the test features and a corresponding train feature extracted from a training set used to train the machine learning model. The statistical testing is performed under the assumption that the train features and the test features are drawn from the same distribution, and this assumption is used to determine whether the test features effectively represent the train features. If so, the test features are validated; otherwise, the test features are not validated.</p><p id="p-0020" num="0019">In various embodiments, a machine learning model is trained using a training data set. Once trained, the model is applied in various runs over time during a test phase. At any given run, the test features to be used for that run may be validated with respect to train features extracted from the training data set. In a further embodiment, the machine learning model is only applied to a set of test features when those test features have been validated as described herein.</p><p id="p-0021" num="0020">Model validation may also be performed to determine whether the model is sufficiently well trained based on the runs during the test phase. When the model is not validated, rehabilitative actions such as reverting to a prior version of the model may be performed; otherwise, the model is validated and may continue to be used. The validation may be performed periodically. In various embodiments, each validation includes one or more stages. The stages may include, but are not limited to, metrics validation, scoring validation, features validation, or a combination thereof.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an example network diagram <b>100</b> utilized to describe the various disclosed embodiments. In the example network diagram <b>100</b>, a user device <b>120</b>, a model validator <b>130</b>, and a plurality of data sources <b>140</b>-<b>1</b> through <b>140</b>-N(hereinafter referred to individually as a data source <b>140</b> and collectively as data sources <b>140</b>, merely for simplicity purposes) communicate via a network <b>110</b>. The network <b>110</b> may be, but is not limited to, a wireless, cellular or wired network, a local area network (LAN), a wide area network (WAN), a metro area network (MAN), the Internet, the worldwide web (WWW), similar networks, and any combination thereof.</p><p id="p-0023" num="0022">The user device (UD) <b>120</b> may be, but is not limited to, a personal computer, a laptop, a tablet computer, a smartphone, a wearable computing device, or any other device capable of receiving and displaying notifications. The user device <b>120</b> may be a user device of an admin or other person seeking to have a machine learning model trained and validated, and may be configured to run and continue training the machine learning model until the model is determined to not be validated.</p><p id="p-0024" num="0023">The data sources <b>140</b> may be databases or other sources of data used for training, validating, or applying the machine learning model as described herein. When the machine learning model is trained using a supervised training process, the data sources <b>140</b> may store labeled training sets used for such supervised learning. Instead of or in addition to databases, the data sources <b>140</b> may include sources of raw data such as network scanners or other systems configured to collect data about devices communicating with each other.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an example flowchart <b>200</b> illustrating a method for training a machine learning model using validation according to an embodiment. In an embodiment, the method is performed by the model validator <b>130</b>, <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0026" num="0025">At S<b>210</b>, a machine learning model is trained. The machine learning model is trained using a training data set created based on historical data. The training may be supervised, unsupervised, or semi-supervised.</p><p id="p-0027" num="0026">In some embodiments, the model may be trained for purposes such as, but not limited to, identifying device attributes based on conventions used for text included in string fields of device data. An example of such a model and how such a model might be trained is described further in U.S. patent application Ser. No. 17/344,294, assigned to the common assignee, the contents of which are hereby incorporated by reference. When an ensemble of models is trained, each model of the ensemble may be validated in accordance with the disclosed embodiments.</p><p id="p-0028" num="0027">At S<b>220</b>, the machine learning model is applied over time in one or more runs. In an embodiment, the machine learning model is applied over multiple runs in order to allow for metrics or scoring validation by comparing results of a newer run to an older run used as a baseline. Each run includes applying the machine learning model to a test data set including data collected over a period of time. In some embodiments, a test data set is created based on a subset of the data used to create the training data set.</p><p id="p-0029" num="0028">Each run of a machine learning model is an application of the machine learning model to test data from a discrete period of time. In various implementations, different runs whose results are compared for validation are runs over the same length of time, where the length of time used for each run may depend on the specific use case. As a non-limiting example, two runs may each be executed during a time period of one week such that results of applying the model to test data from a first week are compared to results of applying the model to test data from a second week.</p><p id="p-0030" num="0029">At S<b>230</b>, a validation process is performed with respect to the machine learning model. In an embodiment, the validation process further includes, but is not limited to, validating the machine learning model with respect to metrics, scoring, or both. Such a metrics validation process is performed as described with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and such a scoring validation process is performed as described with respect to <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0031" num="0030">In another embodiment, S<b>230</b> further includes validating the features to which the model should be applied. To this end, in such an embodiment, at least the features validation of S<b>230</b> may be performed immediately prior to applying the model to the features. An example process for validating features to be input to a model is described further below with respect to <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0032" num="0031">In an embodiment, for each validation subprocess that is performed (e.g., either or both of validating metrics and scores), the model must be determined to be valid at each subprocess in order for the machine learning model to be determined as being valid.</p><p id="p-0033" num="0032">At S<b>240</b>, it is checked whether the validation process resulted in determining that the machine learning model was validated and, if so, execution continues with S<b>210</b> where training and/or application of the model continues; otherwise, execution continues with S<b>250</b>.</p><p id="p-0034" num="0033">At S<b>250</b>, when it is determined that the model is invalid because the model is not validated, one or more rehabilitative actions are performed. The rehabilitative actions may include, but are not limited to, reverting to a previous version of the model (e.g., the most recently validated version of the model) for the next iteration of training and/or application.</p><p id="p-0035" num="0034">In some embodiments, S<b>250</b> may further include generating an alert when the model is not validated. The alert may allow, for example, for alerting an administrator or other operator to promptly identify the issue and evaluate potential root causes. Alerts generated based on the validation processes described herein provide highly credible indications that a machine learning model is no longer performing as well as needed.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example flowchart <b>300</b> illustrating a method for metrics validation according to an embodiment.</p><p id="p-0037" num="0036">At S<b>310</b>, the machine learning model is applied to test data sets over multiple runs. Each test data set includes data collected over a period of time. The duration of each period of time may depend on the use of the machine learning model. As a non-limiting example, the period of time for a run of a machine learning model trained to determine device attributes based on string conventions may be a week.</p><p id="p-0038" num="0037">In an embodiment, the multiple runs include an older run and a newer run. The older run occurs during a period of time that is before the period of time for the newer run, and is used as a baseline to which the newer run is compared. The older run may be any prior run for which the model is presumably valid such as, but not limited to, a previous run for which the model was validated (e.g., a run immediately following an initial validation of the model or a run evaluated during a prior iteration of the method). In a further embodiment, the older run is the most recent prior run for which the model was validated. Use of the most recently validated model as the older model effectively allows for defining a rolling baseline which changes over time.</p><p id="p-0039" num="0038">At S<b>320</b>, based on the application of the machine learning model to the test data sets, metrics related to performance of the machine learning model are determined for each run. In an embodiment, the determined metrics for each run include at least recall. In a further embodiment, the determined metrics also include precision.</p><p id="p-0040" num="0039">In an embodiment where the machine learning model being validated is a classifier configured to classify inputs into various classes, S<b>320</b> further includes determining, for each class, a factored standard deviation. This factored standard deviation, in turn, may be compared to previously determined standard deviations computed across known under-performing data sets. In this regard, the previously determined standard deviations of under-performing data sets may be utilized as thresholds to determine whether the metrics for the newer run of the model demonstrate that the newer model is underperforming.</p><p id="p-0041" num="0040">At S<b>330</b>, it is determined whether the metrics have dropped (decreased) above a threshold between the older run and the newer run. If the drop in each metric is below a respective threshold, execution continues with S<b>340</b> at which the model is determined as validated; otherwise, execution continues with S<b>350</b> at which it is determined that the model is not validated. In an embodiment, S<b>330</b> may include comparing the factored standard deviation determined for each metric to one or more of the threshold standard deviations determined based on known under-performing data sets.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an example flowchart <b>400</b> illustrating a method for scoring validation according to an embodiment.</p><p id="p-0043" num="0042">At S<b>410</b>, scores for output of a machine learning model are determined. The scores may represent, for example, confidence levels indicating a confidence of the outputs of the machine learning model.</p><p id="p-0044" num="0043">In an embodiment, the multiple runs include an older run and a newer run. The older run occurs during a period of time that is before the period of time for the newer run. The older run may be any prior run for which the model is presumably valid such as, but not limited to, a previous run for which the model was validated (e.g., a run immediately following an initial validation of the model or a run evaluated during a prior iteration of the method). In a further embodiment, the older run is the most recent prior run for which the model was validated. Use of the most recently validated model as the older model effectively allows for defining a rolling baseline which changes over time.</p><p id="p-0045" num="0044">At S<b>420</b>, score distributions are determined. In an embodiment, a score distribution of a class of each model is determined for the period of time in which the statistical testing was run. The specific period of time to be utilized may depend on the use case. As a non-limiting example, for models trained to identify device attributes based on string conventions, the period of time may be a week such that a score distribution is determined with respect to a class of each model for every week of the statistical testing (if the statistical testing only includes a week's worth of testing, then a single score distribution is determined with respect to the class of each model).</p><p id="p-0046" num="0045">At S<b>430</b>, the determined score distributions for the older and newer runs are compared. In an embodiment, S<b>430</b> includes isolating a portion of each score distribution including a high score and comparing the isolated portions.</p><p id="p-0047" num="0046">In this regard, it has been identified that scores for some types of models may not follow a normal distribution such that comparing the score distributions for different runs of the model directly may result in false negatives (i.e., identifying mismatches when the model's performance has not actually degraded significantly). To this end, in an embodiment, respective portions of each score distribution may be compared, for example, as described with respect to <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example flowchart S<b>430</b> illustrating a method for comparing score distributions based on high scores clusters according to an embodiment.</p><p id="p-0049" num="0048">At S<b>510</b>, a high scores cluster is isolated for each score distribution to be compared. Each isolated high scores cluster is a portion of the respective score distribution including a high score. In an embodiment, each isolated high score cluster is a rightmost portion of the respective score distribution.</p><p id="p-0050" num="0049">In an embodiment, S<b>510</b> includes applying a mixture model for representing the presence of subpopulations within an overall population in order to identify and extract the high scores cluster as one of those subpopulations. In an example implementation, extraction of the high scores cluster is performed using a Gaussian Mixture Model (GMM).</p><p id="p-0051" num="0050">In this regard, it has been identified that, for certain types of data, the score distributions do not follow a typical normal distribution such that comparing the entirety of different score distributions will result in false negatives (i.e., the score distributions will always be determined to be abnormally different). Moreover, for certain types of data having score distributions with multiple peaks, the rightmost peak having the high scores within the score distribution (when the scores are arranged from left to right in a graphical representation of the score distribution) may contain the true predictions (whereas other predictions may be false). Consequently, for such types of data, the rightmost peak is the portion which best represents the score distribution such that validating based only on a portion of the score distribution including this rightmost peak allows for more accurately validating the model than other peaks of the score distribution.</p><p id="p-0052" num="0051">In particular, as noted above, the machine learning model may be trained to identify device attributes based on string conventions, for example as described further in the above-referenced U.S. patent application Ser. No. 17/344,294. The rightmost part of the score distribution (when the scores are arranged from left to right in a graphical representation of the score distribution) including the last peak, which also represents the high scores among the score distributions, is the relevant portion of this score distribution for comparison. Accordingly, by isolating this portion of the score distribution for a newer run of the machine learning model, this portion can be applied over the respective portion of the score distribution for an older run of the model in order to accurately determine whether the newer run is similar as compared to the older run. Applying only the isolated rightmost portions of the score distributions provides more stable comparison results than comparing the entire score distributions.</p><p id="p-0053" num="0052">At optional S<b>520</b>, sampling is performed to extract a sample from each isolated high scores cluster. In an embodiment, S<b>520</b> further includes fitting a subset of each high scores cluster into a Gaussian Density Estimator (GDE), from which a sample can be drawn. Using GDE and sampling for a classifier model allows for balancing anomaly volumes for an imbalanced classes environment, thereby improving accuracy of validation results.</p><p id="p-0054" num="0053">At S<b>530</b>, the isolated rightmost portions. The comparison may include, but is not limited to, performing statistical testing with respect to the isolated portions. In an embodiment, the statistical testing is performed on the extracted samples. In an example implementation, the statistical testing includes T-test, an inferential statistical test used to determine a difference between the means of two groups. To this end, in an embodiment, S<b>530</b> includes determining a difference between two high scores clusters based on their respective means and standard deviations. The T-test may be performed using a two-sided null hypothesis and under the assumption that two independent samples have identical averages. As noted above, isolating high scores clusters may allow for this T-test because, while the entire scores distribution may not follow a normal distribution, a high scores cluster may follow a normal distribution or other repeated distribution shape such that results of different runs may be effectively compared.</p><p id="p-0055" num="0054">At S<b>540</b>, based on the statistical testing, it is determined if each newer score distribution is similar to an older score distribution. In an embodiment, a newer score distribution is similar to an older score distribution if each value of the isolated rightmost portion of the score distribution is within a predetermined threshold of a respective value (i.e., corresponding values in the overlay) of the older score distribution. In an embodiment, if the mean of a high scores cluster (or sample) of the newer data set is above a threshold value different than the corresponding mean of the high scores cluster or sample of the older data set with respect to their respective standard deviations (i.e., the standard deviations of the newer data set and of the older data set, respectively), the newer score distribution is determined to be dissimilar to the older score distribution; otherwise, the newer score distribution is determined to be similar to the older score distribution.</p><p id="p-0056" num="0055">It should be noted that various embodiments described herein are discussed with respect to isolating rightmost portions of score distributions, but that a person having ordinary skill in the art would understand that the portion of be isolated may be in a different position relative to the graph depending on the way in which the score distribution is graphed. The disclosed embodiments are equally applicable to use of high scores clusters as described herein regardless of how those high scores clusters are arranged relative to a graph in any particular implementation.</p><p id="p-0057" num="0056">Returning to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, at S<b>440</b>, it is checked whether the score distribution of the newer run has been determined to be similar to the older score distribution based on the comparison. If the newer score distribution is similar to the older score distribution, execution continues with S<b>450</b> where the model is determined as validated; otherwise, execution continues with S<b>460</b> where it is determined that the model is not validated. As noted above, in an embodiment, two distributions are similar when their respective means are within a threshold of each other given their respective standard deviations.</p><p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an example flowchart <b>600</b> illustrating a method for validating features according to an embodiment.</p><p id="p-0059" num="0058">At S<b>610</b>, features to be input to a machine learning model are extracted from a test data set. In an example implementation where the machine learning model is trained to identify device attributes based on string conventions, the extracted features may include strings extracted from particular portions of device data or portions thereof. In a further example, the features may include subsets of device names such as, but not limited to, substrings of a particular length (e.g., 6 characters per substring).</p><p id="p-0060" num="0059">At S<b>620</b>, statistical tests are performed on pairs of features including the test features and features from a baseline features set. Each pair of features on which statistical tests are performed includes a feature from the extracted input features and a corresponding feature from the baseline features set. In an embodiment, the baseline feature set includes features extracted during a training phase for the machine learning model.</p><p id="p-0061" num="0060">In an example implementation, the statistical tests are performed using a nonparametric test of equality of probability distributions such as, but not limited to, the Kolmogorov-Smirnov (K-S) test. The K-S test may be performed under a two-sided null hypothesis that the two samples used for the test are drawn from the same continuous distribution in order to determine the degree to which the test feature distribution deviates from the training (baseline) feature distribution. To this end, in an embodiment, S<b>620</b> further includes separately fitting a vector extracted from the test data set and a vector extracted from a training data set into a GDE, from which a sample is drawn and used for the K-S test.</p><p id="p-0062" num="0061">In this regard, it has been identified that, for a machine learning model to perform well, its underlying feature data used for the train and test phases should be drawn from the same distribution. When the feature data used for training are different from the feature data used for testing, distributions tend to differ. Thus, performing a K-S test using the null hypothesis that the vectors extracted from the respective data sets are drawn from the same distribution allows for determining if the features distribution for the test data set is skewed and therefore would reduce the accuracy of the output of any model which is applied to the features.</p><p id="p-0063" num="0062">At S<b>630</b>, it is determined whether the test features (i.e., the extracted input features from the test data set) effectively represent the train features and, if so, execution continues with S<b>640</b> where the test features are determined to be validated; otherwise, execution continues with S<b>650</b> where the test features determined not to be validated. In an example implementation, the extracted input features are determined to effectively represent the train features when a quantified distance determined per the Kolmogorov-Smirnov test is less than a threshold; otherwise, the extracted input features are determined to not effectively represent the train features. In an embodiment, a machine learning model is applied to the test features when the test features are validated and, otherwise, application of the machine learning model to the test features is avoided.</p><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is an example schematic diagram of a model validator <b>130</b> according to an embodiment. The model validator <b>130</b> includes a processing circuitry <b>710</b> coupled to a memory <b>720</b>, a storage <b>730</b>, and a network interface <b>740</b>. In an embodiment, the components of the model validator <b>130</b> may be communicatively connected via a bus <b>750</b>.</p><p id="p-0065" num="0064">The processing circuitry <b>710</b> may be realized as one or more hardware logic components and circuits. For example, and without limitation, illustrative types of hardware logic components that can be used include field programmable gate arrays (FPGAs), application-specific integrated circuits (ASICs), Application-specific standard products (ASSPs), system-on-a-chip systems (SOCs), graphics processing units (GPUs), tensor processing units (TPUs), general-purpose microprocessors, microcontrollers, digital signal processors (DSPs), and the like, or any other hardware logic components that can perform calculations or other manipulations of information.</p><p id="p-0066" num="0065">The memory <b>720</b> may be volatile (e.g., random access memory, etc.), non-volatile (e.g., read only memory, flash memory, etc.), or a combination thereof.</p><p id="p-0067" num="0066">In one configuration, software for implementing one or more embodiments disclosed herein may be stored in the storage <b>730</b>. In another configuration, the memory <b>720</b> is configured to store such software. Software shall be construed broadly to mean any type of instructions, whether referred to as software, firmware, middleware, microcode, hardware description language, or otherwise. Instructions may include code (e.g., in source code format, binary code format, executable code format, or any other suitable format of code). The instructions, when executed by the processing circuitry <b>710</b>, cause the processing circuitry <b>710</b> to perform the various processes described herein.</p><p id="p-0068" num="0067">The storage <b>730</b> may be magnetic storage, optical storage, and the like, and may be realized, for example, as flash memory or other memory technology, compact disk-read only memory (CD-ROM), Digital Versatile Disks (DVDs), or any other medium which can be used to store the desired information.</p><p id="p-0069" num="0068">The network interface <b>740</b> allows the model validator <b>130</b> to communicate with, for example, the user device <b>120</b>, the data sources <b>140</b>, both, and the like.</p><p id="p-0070" num="0069">It should be understood that the embodiments described herein are not limited to the specific architecture illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, and other architectures may be equally used without departing from the scope of the disclosed embodiments.</p><p id="p-0071" num="0070">The various embodiments disclosed herein can be implemented as hardware, firmware, software, or any combination thereof. Moreover, the software is preferably implemented as an application program tangibly embodied on a program storage unit or computer readable medium consisting of parts, or of certain devices and/or a combination of devices. The application program may be uploaded to, and executed by, a machine comprising any suitable architecture. Preferably, the machine is implemented on a computer platform having hardware such as one or more central processing units (&#x201c;CPUs&#x201d;), a memory, and input/output interfaces. The computer platform may also include an operating system and microinstruction code. The various processes and functions described herein may be either part of the microinstruction code or part of the application program, or any combination thereof, which may be executed by a CPU, whether or not such a computer or processor is explicitly shown. In addition, various other peripheral units may be connected to the computer platform such as an additional data storage unit and a printing unit. Furthermore, a non-transitory computer readable medium is any computer readable medium except for a transitory propagating signal.</p><p id="p-0072" num="0071">All examples and conditional language recited herein are intended for pedagogical purposes to aid the reader in understanding the principles of the disclosed embodiment and the concepts contributed by the inventor to furthering the art, and are to be construed as being without limitation to such specifically recited examples and conditions. Moreover, all statements herein reciting principles, aspects, and embodiments of the disclosed embodiments, as well as specific examples thereof, are intended to encompass both structural and functional equivalents thereof. Additionally, it is intended that such equivalents include both currently known equivalents as well as equivalents developed in the future, i.e., any elements developed that perform the same function, regardless of structure.</p><p id="p-0073" num="0072">It should be understood that any reference to an element herein using a designation such as &#x201c;first,&#x201d; &#x201c;second,&#x201d; and so forth does not generally limit the quantity or order of those elements. Rather, these designations are generally used herein as a convenient method of distinguishing between two or more elements or instances of an element. Thus, a reference to first and second elements does not mean that only two elements may be employed there or that the first element must precede the second element in some manner. Also, unless stated otherwise, a set of elements comprises one or more elements.</p><p id="p-0074" num="0073">As used herein, the phrase &#x201c;at least one of&#x201d; followed by a listing of items means that any of the listed items can be utilized individually, or any combination of two or more of the listed items can be utilized. For example, if a system is described as including &#x201c;at least one of A, B, and C,&#x201d; the system can include A alone; B alone; C alone; <b>2</b>A; <b>2</b>B; <b>2</b>C; <b>3</b>A; A and B in combination; B and C in combination; A and C in combination; A, B, and C in combination; <b>2</b>A and C in combination; A, <b>3</b>B, and <b>2</b>C in combination; and the like.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for machine learning features validation, comprising:<claim-text>performing statistical testing on a plurality of pairs of features, each pair of features including a test feature of a plurality of test features extracted from a first data set and a corresponding training feature extracted from a second data set during a training phase for a machine learning model, wherein the statistical testing is performed under a null hypothesis that the first data set and the second data set are drawn from a same continuous distribution, wherein performing the statistical testing further comprises determining a degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature; and</claim-text><claim-text>determining, based on the degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature, whether the plurality of test features is validated.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>applying the machine learning model to the plurality of test features when the plurality of test features is validated; and</claim-text><claim-text>avoiding applying the machine learning model to the plurality of test features when the plurality of test features is not validated.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining a degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature further comprises:<claim-text>determining a distance between a first distribution function of the first data set and a second distribution function of the second data set.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the plurality of test features is determined as validated when the distance between the first distribution function of the first data set and the second distribution function of the second data set is below a threshold.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the distance is determined using a Kolmogorov-Smirnov test.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein performing the statistical testing further comprises:<claim-text>fitting a vector extracted from the first data set into a density estimator;</claim-text><claim-text>fitting a vector extracted from the second data set into the density estimator; and</claim-text><claim-text>drawing a sample from the density estimator, wherein the statistical testing is performed on the sample.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the density estimator is a Gaussian density estimator.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A non-transitory computer readable medium having stored thereon instructions for causing a processing circuitry to execute a process, the process comprising:<claim-text>performing statistical testing on a plurality of pairs of features, each pair of features including a test feature of a plurality of test features extracted from a first data set and a corresponding training feature extracted from a second data set during a training phase for a machine learning model, wherein the statistical testing is performed under a null hypothesis that the first data set and the second data set are drawn from a same continuous distribution, wherein performing the statistical testing further comprises determining a degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature; and</claim-text><claim-text>determining, based on the degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature, whether the plurality of test features is validated.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A system for machine learning features validation, comprising:<claim-text>a processing circuitry; and</claim-text><claim-text>a memory, the memory containing instructions that, when executed by the processing circuitry, configure the system to:</claim-text><claim-text>perform statistical testing on a plurality of pairs of features, each pair of features including a test feature of a plurality of test features extracted from a first data set and a corresponding training feature extracted from a second data set during a training phase for a machine learning model, wherein the statistical testing is performed under a null hypothesis that the first data set and the second data set are drawn from a same continuous distribution, wherein performing the statistical testing further comprises determining a degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature; and</claim-text><claim-text>determine, based on the degree to which each test feature of the plurality of pairs of features deviates from the corresponding training feature, whether the plurality of test features is validated.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the system is further configured to:<claim-text>apply the machine learning model to the plurality of test features when the plurality of test features is validated; and</claim-text><claim-text>avoid applying the machine learning model to the plurality of test features when the plurality of test features is not validated.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the system is further configured to:<claim-text>determine a distance between a first distribution function of the first data set and a second distribution function of the second data set.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the plurality of test features is determined as validated when the distance between the first distribution function of the first data set and the second distribution function of the second data set is below a threshold.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the distance is determined using a Kolmogorov-Smirnov test.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the system is further configured to:<claim-text>fit a vector extracted from the first data set into a density estimator;</claim-text><claim-text>fit a vector extracted from the second data set into the density estimator; and</claim-text><claim-text>draw a sample from the density estimator, wherein the statistical testing is performed on the sample.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the density estimator is a Gaussian density estimator.</claim-text></claim></claims></us-patent-application>