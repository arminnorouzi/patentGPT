<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004554A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004554</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17857795</doc-number><date>20220705</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>GB</country><doc-number>2109577.3</doc-number><date>20210702</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>23</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>451</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2372</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20180201</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>451</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2365</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2358</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">SYSTEMS AND METHODS FOR IMPLEMENTING INTELLIGENT LOADING OF DATA</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>WORLDR TECHNOLOGIES LIMITED</orgname><address><city>Slough</city><country>GB</country></address></addressbook><residence><country>GB</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Buchan</last-name><first-name>Maximilian Alastair</first-name><address><city>Slough</city><country>GB</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Maskaliou</last-name><first-name>Dzmitry</first-name><address><city>Slough</city><country>GB</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Antipin</last-name><first-name>Michael</first-name><address><city>Slough</city><country>GB</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Golanski</last-name><first-name>Yann</first-name><address><city>Slough</city><country>GB</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Disclosed is a system for implementing intelligent loading of data in client application database, the system comprising: client device(s) configured to execute client application associated with the client application database and target server communicably coupled to client device(s), wherein, upon start-up, client application is configured to: determine whether data is present or not in client application database, data comprising content of communication thread(s); when data is present in client application database, obtain from target server, updated version of data using first process, wherein the first process is based on recent updates or incremental updates; and when data is not present in client application database, obtain from target server, updated version of data using second process, wherein the second process is based on recent updates.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="180.85mm" wi="144.02mm" file="US20230004554A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="225.04mm" wi="159.68mm" file="US20230004554A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="198.20mm" wi="146.05mm" file="US20230004554A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">The present disclosure relates to systems for implementing intelligent loading of data in client application databases. The present disclosure also relates to methods for implementing intelligent loading of data in client application databases. The present disclosure also relates to computer program products for implementing intelligent loading of data in client application databases. The present disclosure also relates to client devices arranged to be used in systems for implementing intelligent loading of data in client application databases. The present disclosure also relates to target servers arranged to be used in systems for implementing intelligent loading of data in client application databases.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Over the past few decades, data loading technology has gained popularity due to continued technological advancements in data management. As the world is evolving at a rapid pace, a huge amount of data is being produced and stored globally, on a regular basis. Therefore, techniques for on-demand loading (i.e., access and retrieval) of such data are being developed and improved to match trends in such evolution. For example, techniques for data loading are being developed to present up-to-date data to users associated with numerous fields, for example, businesses, social networks, internet of things, e-commerce, and the like.</p><p id="p-0004" num="0003">However, existing techniques for data loading have several problems associated therewith. Firstly, the existing techniques require complete loading of an entirety of the data on devices (such as, mobile phones, computers, laptops, tablets, and the like) associated with the users, in order to present the data to the users. This needs considerable data loading time, and hence the data is presented to the users with huge latencies/delays. These latencies/delays adversely affect the users' experience of accessing the data. Moreover, loading the entirety of data on the devices in such a manner is computationally intensive, thus it requires considerable network bandwidth and high power. Secondly, when the users utilise multiple devices for accessing same data, some existing techniques lack efficiency in synchronising the same data on the multiple devices. This adversely affect users' experiences in accessing the same data on the multiple devices. As an example, when a business communication application is accessed by a user on a computer and a mobile phone, there may a lack of synchronism in terms of updation of chat lists, appearance of last messages in the chat lists, updation of chat members lists, and the like, between the computer and the mobile phone. Thirdly, the existing techniques for data loading are unreliable and error-prone in terms of loading the data when there occur situations like temporary unavailability of a communication network, for example, in case of a communication network disruption or intermittent crashes of the communication network.</p><p id="p-0005" num="0004">Therefore, in light of the foregoing discussion, there exists a need to overcome the aforementioned drawbacks associated with existing techniques for data loading.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0006" num="0005">The present disclosure seeks to provide a system for implementing intelligent loading of data in a client application database. The present disclosure also seeks to provide a method for implementing intelligent loading of data in a client application database. The present disclosure also seeks to provide a computer program product for implementing intelligent loading of data in a client application database. The present disclosure also seeks to provide a client device arranged to be used in a system for implementing intelligent loading of data in a client application database. The present disclosure also seeks to provide a target server arranged to be used in a system for implementing intelligent loading of data in a client application database. An aim of the present disclosure is to provide a solution that overcomes at least partially the problems encountered in prior art.</p><p id="p-0007" num="0006">In one aspect, an embodiment of the present disclosure provides a system for implementing intelligent loading of data in a client application database, the system comprising:</p><p id="p-0008" num="0007">at least one client device configured to execute a client application, the client application being associated with the client application database; and</p><p id="p-0009" num="0008">a target server communicably coupled to the at least one client device,</p><p id="p-0010" num="0009">wherein, upon start-up, the client application is configured to:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0010">determine whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the client application on the at least one client device is a member of the at least one communication thread;</li>        <li id="ul0002-0002" num="0011">when the data is present in the client application database, obtain from the target server, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</li>        <li id="ul0002-0003" num="0012">when the data is not present in the client application database, obtain from the target server, the updated version of the data using a second process, wherein the second process is based on recent updates.</li>    </ul>    </li></ul></p><p id="p-0011" num="0013">In another aspect, an embodiment of the present disclosure provides a method for implementing intelligent loading of data in a client application database, the method being implemented by a system comprising at least one client device configured to execute a client application, the client application having a client application database associated therewith, and a target server communicably coupled to the at least one client device, the method comprising:</p><p id="p-0012" num="0014">upon start-up of the client application,<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0015">determining whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the at least one client device is a member of the at least one communication thread;</li>        <li id="ul0004-0002" num="0016">when the data is present in the client application database, obtaining from the target server, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</li>        <li id="ul0004-0003" num="0017">when the data is not present in the client application database, obtaining from the target server, the updated version of the data using a second process, wherein the second process is based on recent updates.</li>    </ul>    </li></ul></p><p id="p-0013" num="0018">In yet another aspect, an embodiment of the present disclosure provides a computer program product for implementing intelligent loading of data in a client application database, the computer program product comprising a non-transitory machine-readable data storage medium having stored thereon program instructions that, when accessed by a processing device, cause the processing device to:</p><p id="p-0014" num="0019">upon start-up of a client application,<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0020">determine whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the processing device is a member of the at least one communication thread;</li>        <li id="ul0006-0002" num="0021">when the data is present in the client application database, obtain from a target server, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</li>        <li id="ul0006-0003" num="0022">when the data is not present in the client application database, obtain from the target server, the updated version of the data using a second process, wherein the second process is based on recent updates.</li>    </ul>    </li></ul></p><p id="p-0015" num="0023">In still another aspect, an embodiment of the present disclosure provides a client device arranged to be used in a system for implementing intelligent loading of data in a client application database, the system comprising at least one client device configured to execute a client application, wherein the client application is associated with the client application database, and a target server communicably coupled to the at least one client device,</p><p id="p-0016" num="0024">wherein, upon start-up, the client application is configured to:<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0025">determine whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the client application on the at least one client device is a member of the at least one communication thread;</li>        <li id="ul0008-0002" num="0026">when the data is present in the client application database, obtain from the target server, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</li>        <li id="ul0008-0003" num="0027">when the data is not present in the client application database, obtain from the target server, the updated version of the data using a second process, wherein the second process is based on recent updates.</li>    </ul>    </li></ul></p><p id="p-0017" num="0028">In yet another aspect, an embodiment of the present disclosure provides a target server arranged to be used in a system for implementing intelligent loading of data in a client application database, the system comprising at least one client device configured to execute a client application, wherein the client application is associated with the client application database, and the target server communicably coupled to the at least one client device,</p><p id="p-0018" num="0029">wherein, upon start-up of the client application:<ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0000">    <ul id="ul0010" list-style="none">        <li id="ul0010-0001" num="0030">the client application is configured to determine whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the client application on the at least one client device is a member of the at least one communication thread;</li>        <li id="ul0010-0002" num="0031">when the data is present in the client application database, the target server is configured to send to the client application, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</li>        <li id="ul0010-0003" num="0032">when the data is not present in the client application database, the target server is configured to send to the client application, an updated version of the data using a second process, wherein the second process is based on recent updates.</li>    </ul>    </li></ul></p><p id="p-0019" num="0033">Embodiments of the present disclosure substantially eliminate or at least partially address the aforementioned problems in the prior art, and enable efficient, accurate, and reliable loading of data in the client application database, in real time or near real time with minimal latency/delay.</p><p id="p-0020" num="0034">Additional aspects, advantages, features and objects of the present disclosure would be made apparent from the drawings and the detailed description of the illustrative embodiments construed in conjunction with the appended claims that follow.</p><p id="p-0021" num="0035">It will be appreciated that features of the present disclosure are susceptible to being combined in various combinations without departing from the scope of the present disclosure as defined by the appended claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0022" num="0036">The summary above, as well as the following detailed description of illustrative embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the present disclosure, exemplary constructions of the disclosure are shown in the drawings. However, the present disclosure is not limited to specific methods and instrumentalities disclosed herein. Moreover, those skilled in the art will understand that the drawings are not to scale. Wherever possible, like elements have been indicated by identical numbers.</p><p id="p-0023" num="0037">Embodiments of the present disclosure will now be described, by way of example only, with reference to the following diagrams wherein:</p><p id="p-0024" num="0038"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a block diagram of architecture of a system for implementing intelligent loading of data in a client application database, in accordance with an embodiment of the present disclosure;</p><p id="p-0025" num="0039"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an exemplary process flow upon start-up of a client application, in accordance with an embodiment of the present disclosure;</p><p id="p-0026" num="0040"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an exemplary process flow upon sync-up of a client application, in accordance with an embodiment of the present disclosure; and</p><p id="p-0027" num="0041"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates steps of a method for implementing intelligent loading of data in a client application database, in accordance with an embodiment of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0028" num="0042">In the accompanying drawings, an underlined number is employed to represent an item over which the underlined number is positioned or an item to which the underlined number is adjacent. A non-underlined number relates to an item identified by a line linking the non-underlined number to the item. When a number is non-underlined and accompanied by an associated arrow, the non-underlined number is used to identify a general item at which the arrow is pointing.</p><heading id="h-0005" level="1">DETAILED DESCRIPTION OF EMBODIMENTS</heading><p id="p-0029" num="0043">The following detailed description illustrates embodiments of the present disclosure and ways in which they can be implemented. Although some modes of carrying out the present disclosure have been disclosed, those skilled in the art would recognize that other embodiments for carrying out or practising the present disclosure are also possible.</p><p id="p-0030" num="0044">In one aspect, an embodiment of the present disclosure provides a system for implementing intelligent loading of data in a client application database, the system comprising:</p><p id="p-0031" num="0045">at least one client device configured to execute a client application, the client application being associated with the client application database; and</p><p id="p-0032" num="0046">a target server communicably coupled to the at least one client device,</p><p id="p-0033" num="0047">wherein, upon start-up, the client application is configured to:<ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0000">    <ul id="ul0012" list-style="none">        <li id="ul0012-0001" num="0048">determine whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the client application on the at least one client device is a member of the at least one communication thread;</li>        <li id="ul0012-0002" num="0049">when the data is present in the client application database, obtain from the target server, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</li>        <li id="ul0012-0003" num="0050">when the data is not present in the client application database, obtain from the target server, the updated version of the data using a second process, wherein the second process is based on recent updates.</li>    </ul>    </li></ul></p><p id="p-0034" num="0051">In another aspect, an embodiment of the present disclosure provides a method for implementing intelligent loading of data in a client application database, the method being implemented by a system comprising at least one client device configured to execute a client application, the client application having a client application database associated therewith, and a target server communicably coupled to the at least one client device, the method comprising:</p><p id="p-0035" num="0052">upon start-up of the client application,<ul id="ul0013" list-style="none">    <li id="ul0013-0001" num="0000">    <ul id="ul0014" list-style="none">        <li id="ul0014-0001" num="0053">determining whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the at least one client device is a member of the at least one communication thread;</li>        <li id="ul0014-0002" num="0054">when the data is present in the client application database, obtaining from the target server, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</li>        <li id="ul0014-0003" num="0055">when the data is not present in the client application database, obtaining from the target server, the updated version of the data using a second process, wherein the second process is based on recent updates.</li>    </ul>    </li></ul></p><p id="p-0036" num="0056">In yet another aspect, an embodiment of the present disclosure provides a computer program product for implementing intelligent loading of data in a client application database, the computer program product comprising a non-transitory machine-readable data storage medium having stored thereon program instructions that, when accessed by a processing device, cause the processing device to:</p><p id="p-0037" num="0057">upon start-up of a client application,<ul id="ul0015" list-style="none">    <li id="ul0015-0001" num="0000">    <ul id="ul0016" list-style="none">        <li id="ul0016-0001" num="0058">determine whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the processing device is a member of the at least one communication thread;</li>        <li id="ul0016-0002" num="0059">when the data is present in the client application database, obtain from a target server, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</li>        <li id="ul0016-0003" num="0060">when the data is not present in the client application database, obtain from the target server, the updated version of the data using a second process, wherein the second process is based on recent updates.</li>    </ul>    </li></ul></p><p id="p-0038" num="0061">In still another aspect, an embodiment of the present disclosure provides a client device arranged to be used in a system for implementing intelligent loading of data in a client application database, the system comprising at least one client device configured to execute a client application, wherein the client application is associated with the client application database, and a target server communicably coupled to the at least one client device,</p><p id="p-0039" num="0062">wherein, upon start-up, the client application is configured to:<ul id="ul0017" list-style="none">    <li id="ul0017-0001" num="0000">    <ul id="ul0018" list-style="none">        <li id="ul0018-0001" num="0063">determine whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the client application on the at least one client device is a member of the at least one communication thread;</li>        <li id="ul0018-0002" num="0064">when the data is present in the client application database, obtain from the target server, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</li>        <li id="ul0018-0003" num="0065">when the data is not present in the client application database, obtain from the target server, the updated version of the data using a second process, wherein the second process is based on recent updates.</li>    </ul>    </li></ul></p><p id="p-0040" num="0066">In yet another aspect, an embodiment of the present disclosure provides a target server arranged to be used in a system for implementing intelligent loading of data in a client application database, the system comprising at least one client device configured to execute a client application, wherein the client application is associated with the client application database, and the target server communicably coupled to the at least one client device,</p><p id="p-0041" num="0067">wherein, upon start-up of the client application:<ul id="ul0019" list-style="none">    <li id="ul0019-0001" num="0000">    <ul id="ul0020" list-style="none">        <li id="ul0020-0001" num="0068">the client application is configured to determine whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the client application on the at least one client device is a member of the at least one communication thread;</li>        <li id="ul0020-0002" num="0069">when the data is present in the client application database, the target server is configured to send to the client application, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</li>        <li id="ul0020-0003" num="0070">when the data is not present in the client application database, the target server is configured to send to the client application, an updated version of the data using a second process, wherein the second process is based on recent updates.</li>    </ul>    </li></ul></p><p id="p-0042" num="0071">The present disclosure provides the aforementioned method, the aforementioned system, and the aforementioned computer program product for implementing intelligent loading of data in a client application database. The present disclosure also provides the client device and the target server arranged to be used in the aforementioned system. Herein, the system employs a requisite technical process for obtaining the updated version of the data upon at least start-up of the client application, wherein the requisite technical process is based on recent updates or incremental updates. These updates can be used directly as the updated version of the data or can be easily added to existing data present in the client application database for generating the updated version of the data. Beneficially, this facilitates in obtaining the updated version of the data, in real time or near-real time with minimal latency/delay which is imperceptible to the user. This improves user's experience when the user uses the client application as an up-to-date content of the at least one communication thread would be readily presented to the user when the user uses the client application on the at least one client device to access such content. The system enables in obtaining the updated version of the data, from the target server, with minimal network bandwidth requirements, less power, and minimum loading time. Moreover, the system is optionally well suited for accurately and efficiently synchronising same data on several client devices that are configured to execute a same client application. The user is therefore able to access updated versions of the same data on each of the several client devices. The client application is also able to optionally sync-up effectively for obtaining the updated version of the data even on occurrence of situations like temporary unavailability of a communication network, or similar. The method adopts a customized data loading approach for improving user experience. The method is fast, effective, reliable and can be implemented and used easily.</p><p id="p-0043" num="0072">The system enables intelligent loading of the data in the client application database. The phrase &#x201c;intelligent loading of the data&#x201d; means that the system employs a requisite technical approach (namely, a requisite technical process) for loading of the data depending on requirements of the client application, instead of a typical one-algorithm-suits-all-cases approach. Beneficially, in such a case, the loading of the data is performed in real time or near real time with minimal latency/delay, which is imperceptible to the user, thereby improving user's experience when the user uses the client application.</p><p id="p-0044" num="0073">Throughout the present disclosure, the term &#x201c;client device&#x201d; refers to a computing device that is associated with the user and is capable of executing the client application. Optionally, the at least one client device comprises a processor that is configured to execute the client application. Optionally, the at least one client device is at least one of: a smartphone, a tablet, a laptop, a desktop-computer, a workstation. It will be appreciated that in some instances, the user could use a single client device, whereas in other instances, the user could use a plurality of client devices.</p><p id="p-0045" num="0074">Throughout the present disclosure, the term &#x201c;client application&#x201d; refers to a software application that comprises a set of instructions which are executable to perform steps of the aforementioned method. Optionally the client application pertains to at least one of: business communication, social networking communication, internet of things (IoT) communication, e-commerce communication, healthcare communication, reservation communication, banking communication. It will be appreciated that the client application could also pertain to other suitable domains besides the ones listed hereinabove. In a first example, the client application may be a business communication application executing on two client devices such as a smartphone and a desktop-computer that are associated with the user.</p><p id="p-0046" num="0075">Throughout the present disclosure, the term &#x201c;client application database&#x201d; refers a systematic collection of the data that is associated with the client device. In use, the client device fetches the data from the client application database and/or stores the data into client application database. It will be appreciated that the client application database may have no data or may have some data (which may or may not be in updated form) at a time of at least start-up of the client application. Optionally, the client application database is implemented at a local memory associated with the at least one client device. Examples of such a local memory may include, but are not limited to, a Solid State Drive (SSD) memory (such as a flash memory, a memory stick, a Secure Digital (SD) card, and the like), a hard disk drive (HDD) memory, a floppy disk, a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD). Alternatively, optionally, the client application database is implemented at a remote memory associated with the at least one client device. The remote memory may, for example, be a cloud-based memory.</p><p id="p-0047" num="0076">Throughout the present disclosure, the term &#x201c;target server&#x201d; refers to hardware, software, firmware, or a combination of these for backing up and storing data of at least one client application in real time or near real time. In such a case, the target server always has an up-to-date version of the data. Optionally, the target server comprises a data repository for storing the data in an organized (namely, structured) manner, thereby, allowing for easy access (namely, retrieval) and updation of said data.</p><p id="p-0048" num="0077">Optionally, the target server is communicably coupled to the at least one client device via a communication network. It will be appreciated that the communication network may be wired, wireless, or a combination thereof. Examples of the communication network may include, but are not limited to, Internet, a local network (such as, a TCP/IP-based network, an Ethernet-based local area network, an Ethernet-based personal area network, a Wi-Fi network, and the like), Wide Area Networks (WANs), Metropolitan Area Networks (MANs), a telecommunication network, and a radio network. Optionally, the target server and the client application are connected via an Application Programming Interface (API) in the communication network.</p><p id="p-0049" num="0078">It will be appreciated that the term &#x201c;start-up&#x201d; refers to a launch (namely, a start) of the client application on the at least one client device. In some cases, upon the start-up, the client application is launched for a first time ever by a new user. Such a start-up of the client application may be performed upon installation of the client application on the at least one device. In other cases, upon the start-up, the client application is launched for use by an existing user who has already used the client application earlier. It will also be appreciated that the data may or may not be present in the client application database, upon the start-up of the client application. Depending on presence or absence of the data, different technical approaches are intelligently adopted and implemented by the client application for updating the data. As an example, when the client application is launched for the first time ever by the new user, it may be determined that no data is present in the client application database. Alternatively, optionally, when the client application has previously been used by the existing user on his/her client device(s), it may be determined that the data is present in the client application database.</p><p id="p-0050" num="0079">Throughout the present disclosure, the term &#x201c;communication thread&#x201d; refers to a string of electronic communication between two or more members of the at least one communication thread. Optionally, the at least one communication thread comprises at least two members, wherein the at least two members include the user and at least one other member. It will be appreciated that a same user may be a member of two or more communication threads. When the at least one communication thread comprises two members, the two members could communicate on a one-to-one basis, whereas when the at least one communication thread comprises at least three members, the at least three members could communicate on a one-to-all basis, a one-to-one basis, or similar.</p><p id="p-0051" num="0080">Referring to the first example, the user may be a member of 3 communication threads A1, A2, and A3 in the business communication application. The communication thread A1 may comprise two members, namely, the user and a member B1. The communication thread A2 may comprise two members, namely, the user and a member B2. The communication thread A3 may comprise three members, namely, the user, the member B1, and the member B2. It will be appreciated that the content of the at least one communication thread could be a text (such as a message, alphanumeric data, and similar), an image, a data file (such as a text document), a video, an audio (such a voice message), an emotion icon, an electronic mail, and the like. The term &#x201c;communication thread&#x201d; may be referred to as a &#x201c;chat&#x201d; or a &#x201c;communication channel&#x201d;.</p><p id="p-0052" num="0081">Notably, when the client application database comprises the data, the updated version of the data is obtained (by the client application) from the target server using the first process. The updated version of the data present in the client application database is required as the content of the at least one communication thread dynamically keeps changing with time, thereby making the data present in the client application database obsolete at a time of start-up of the client application.</p><p id="p-0053" num="0082">Optionally, when obtaining from the target server, the updated version of the data using the first process, the client application is configured to:<ul id="ul0021" list-style="none">    <li id="ul0021-0001" num="0000">    <ul id="ul0022" list-style="none">        <li id="ul0022-0001" num="0083">obtain a list of updates that have been made to the data since a time of storing the data in the client application database;</li>        <li id="ul0022-0002" num="0084">determine whether an incremental update of the data is feasible or not, based on the list of updates;</li>        <li id="ul0022-0003" num="0085">when the incremental update of the data is not feasible, delete the data stored in the client application database, and receive a most recent data slice of the at least one communication thread;</li>        <li id="ul0022-0004" num="0086">when the incremental update of the data is feasible, receive an incremental data slice of the at least one communication thread; and</li>        <li id="ul0022-0005" num="0087">use the most recent data slice or the incremental data slice to generate the updated version of the data.</li>    </ul>    </li></ul></p><p id="p-0054" num="0088">Optionally, the list of updates comprises identification information of the at least one communication thread along with a status of the at least one communication thread. Optionally, in this regard, the status of a given communication thread is one of: added, removed, updated. When the status of the given communication thread is &#x201c;added&#x201d;, it indicates that the user became a member of the given communication thread. When the status of the given communication thread is &#x201c;removed&#x201d;, it indicates that the user stopped being a member of the given communication thread. When the status of the given communication thread is &#x201c;updated&#x201d;, it indicates that the user continued to be a member of the given communication thread and content of the given communication thread was updated.</p><p id="p-0055" num="0089">Optionally, the identification information of a given communication thread comprises at least one of: an identification number, an identification code, a name, of the given communication thread. Optionally, the identification code of the given communication thread is in form of a string of alphanumeric and special characters. Referring to the first example, the identification number of the communication thread A1 may be &#x201c;12345&#x201d;, the identification code of the communication thread A2 may be &#x201c;#C6D7&#x201d;, and the name of the communication thread A3 may be &#x201c;ABC BUSSINESS GROUP&#x201d;.</p><p id="p-0056" num="0090">Optionally, when obtaining the list of updates, the client application is configured to:<ul id="ul0023" list-style="none">    <li id="ul0023-0001" num="0000">    <ul id="ul0024" list-style="none">        <li id="ul0024-0001" num="0091">send, to the target server, an update request; and</li>        <li id="ul0024-0002" num="0092">receive, from the target server, the list of updates that is generated based on the update request.</li>    </ul>    </li></ul></p><p id="p-0057" num="0093">Optionally, in this regard, the client application uses an API handle for obtaining the list of updates. This API handle facilitates communication between the client application and the target server. The API handle trusts the client application to provide, in the update request, full identification information of all communication threads that the client application is aware of.</p><p id="p-0058" num="0094">Optionally, the update request comprises identification information of a plurality of communication threads. Alternatively, optionally, the update request comprises identification information of a single communication thread. Yet alternatively, optionally, the update request does not comprise identification information of any communication thread.</p><p id="p-0059" num="0095">It will be appreciated that when determining whether the incremental update of the data is feasible or not, based on the list of updates, the client application evaluates how much updates to the data have been accumulated on the target server. Greater the amount of the updates to the data, lesser is a feasibility of the incremental update of the data. This is because receiving large amount of the updates to the data from the target server would be extremely time-consuming and would burden the communication network between the target server and the client device.</p><p id="p-0060" num="0096">Optionally, when the list of updates indicates that a considerable amount of updates to the data are accumulated on the target server, it is determined that the incremental update of the data is not feasible. This considerable amount of the updates to the data may have accumulated on the target server since a last session of using the client application (i.e., a last time the user has accessed the client application on the at least one client device). The amount of updates to the data depends on how actively the members of the at least one communication thread communicate with each other on said thread. In such a case, instead of loading the considerable amount of the updates to the data in the client application database, the client application is configured to erase the data already stored on the client application database and only receive the most recent data slice of the at least one communication thread from the target server. The term &#x201c;most recent data slice&#x201d; refers to a data portion comprising latest (i.e., up-to-date) content of the at least one communication thread. Advantageously, this most recent data slice serves as the updated version of the data, thereby facilitating the system in implementing loading of the data in real time or near real time with minimal latency/delay which is imperceptible to the user. This improves user's experience when the user uses the client application as an up-to-date content of the at least one communication thread would be readily presented to the user as soon as the user starts using the client application on the at least one client device. Moreover, when receiving the most recent data slice from the target server, minimal bandwidth, lesser power, and shorter loading time is required, as compared to that associated with receiving the considerable amount of the data.</p><p id="p-0061" num="0097">Alternatively, optionally, when the list of updates indicates that a minimal amount of updates to the data are accumulated on the target server, it is determined that the incremental update of the data is feasible. This minimal amount of the data may have accumulated on the target server since a last session of using the client application on the at least one client device. In such a case, the data already stored in the client application database is not deleted and is simply updated using the incremental data slice. The term &#x201c;incremental data slice&#x201d; refers to a data portion comprising incremental content of the at least one communication thread which succeeds and is additional to the content of the at least one communication thread that is already present in the client application database. The incremental data slice can be added to the data (already) stored in the client application database to generate the updated version of the data. Advantageously, this facilitates in generating the updated version of the data using the incremental data slice, in real time or near real time with minimal any latency/delay which is imperceptible to the user. This improves user's experience when the user uses the client application as an up-to-date content of the at least one communication thread would be readily presented to the user as soon as the user starts using the client application on the at least one client device. Moreover, when receiving the incremental data slice from the target server, minimal bandwidth, low power, and minimum loading time is required.</p><p id="p-0062" num="0098">Notably, when the client application database does not comprise the data, the updated version of the data is obtained from the target server, by the client application, using the second process. The updated version of the data is required as absence of the data in the client application database would adversely impact the user's experience of using the client application and such an impact would be perceivable by the user. The second process facilitates in intelligently loading the data in the client application database, thereby avoiding the aforesaid undesirable situation.</p><p id="p-0063" num="0099">Optionally, when obtaining from the target server, the updated version of the data using the second process, the client application is configured to:<ul id="ul0025" list-style="none">    <li id="ul0025-0001" num="0000">    <ul id="ul0026" list-style="none">        <li id="ul0026-0001" num="0100">receive a first list including identification information of the at least one communication thread, and a second list of members of the at least one communication thread;</li>        <li id="ul0026-0002" num="0101">receive a most recent data slice of the at least one communication thread, based on the first list and the second list; and</li>        <li id="ul0026-0003" num="0102">use the most recent data slice as the updated version of the data.</li>    </ul>    </li></ul></p><p id="p-0064" num="0103">Optionally, when receiving the first list and the second list, the client application is configured to use an API handle to:<ul id="ul0027" list-style="none">    <li id="ul0027-0001" num="0000">    <ul id="ul0028" list-style="none">        <li id="ul0028-0001" num="0104">send, to the target server, a request for receiving the first list and the second list; and</li>        <li id="ul0028-0002" num="0105">obtain, from the target server, the first list and the second list.</li>    </ul>    </li></ul></p><p id="p-0065" num="0106">Optionally, the most recent data slice comprises latest content of the at least one communication thread referred in the first list, the latest content being exchanged in the at least one communication thread by at least one of the members in the second list. The most recent data slice, advantageously serves as the updated version of the data, thereby facilitating the system in implementing loading of the data in real time or near real time with minimal latency/delay which is imperceptible to the user. This improves the user's experience when the user uses the client application as an up-to-date content of the at least one communication thread would be readily presented to the user as soon as the user starts using the client application on the at least one client device. Moreover, when receiving the most recent data slice from the target server, minimal bandwidth, low power, and minimum loading time is required.</p><p id="p-0066" num="0107">Referring to and continuing with the first example, the first list may include the identification information of the communication threads A1, A2, and A3. The second list may include details of all the members (i.e., the user, B1, and B2) of the communication threads A1, A2, and A3. Herein, the business communication application may receive most recent messages exchanged in the communication threads A1, A2, and A3. For example, the most recent messages exchanged in the communication threads A1, A2, and A3 may be by the members A1, A2, and A1, respectively.</p><p id="p-0067" num="0108">Optionally, upon sync-up, the client application is configured to obtain from the target server, the updated version of the data using a third process, wherein the third process is based on incremental updates. The term &#x201c;sync-up&#x201d; refers to synchronization of the client application executing on the at least one client device with the target server. It will be appreciated that the client application database may have no data or may have some data (which may or may not be in updated form) at a time of sync-up of the client application. Optionally, the client application syncs-up with the target server in a manner that any change in the data stored at the client application database is automatically updated for the client application, to maintain time-consistency of the data. It will be appreciated that optionally the sync-up of the client application occurs during the use of the client application on the at least one client device. In such a case, some amount of the data is already present in the client application database.</p><p id="p-0068" num="0109">Optionally, the sync-up of the client application is performed upon one of: re-connection of the client application with the target server after a temporary disruption of communication therebetween, a transition of the client application from background to foreground. During the temporary disruption of communication between the client application and the target server, the client application would be out of sync with the target server and the data present in the client application database would not be updated continuously. Upon re-connection of the client application with the target server, the data present in the client application databased would require updating to accurately represent updates that may have been made to the data during the temporary disruption. Moreover, the user using the client application may move the client application in the background, for example, in order to use another application on the at least one client device. In such a case, the client application would be out of sync with the target server and the data present in the client application database would not be updated. When the client application transitions from the background to the foreground, it indicates that the user is actively using the client application and therefore, the data present in the client application databased requires updating. It will be appreciated that optionally when the sync-up of the client application is performed, the data for the client application is automatically updated (using the third process) in real time or near real time, to maintain time-consistency of the data and to improve the user's experience.</p><p id="p-0069" num="0110">Optionally, when obtaining from the target server, the updated version of the data using the third process, the client application is configured to:<ul id="ul0029" list-style="none">    <li id="ul0029-0001" num="0000">    <ul id="ul0030" list-style="none">        <li id="ul0030-0001" num="0111">obtain a list of updates that have been made to the data since a time of storing the data in the client application database;</li>        <li id="ul0030-0002" num="0112">receive an incremental data slice of the at least one communication thread, based on the list of updates; and</li>        <li id="ul0030-0003" num="0113">use the incremental data slice to generate the updated version of the data.</li>    </ul>    </li></ul></p><p id="p-0070" num="0114">Optionally, the incremental data slice of the at least one communication thread comprises incremental content of the at least one communication thread referred in the list of updates which succeeds and is additional to the content of the at least one communication thread that is already present in the client application database. The incremental data slice can be added to the data (already) stored in the client application database to generate the updated version of the data. Advantageously, this facilitates in generating the updated version of the data using the incremental data slice to efficiently enable the sync-up of the client application, in real time or near real time with minimal latency/delay which is imperceptible to the user. This improves the user's experience when the user uses the client application, even upon occurrences such as the temporary disruption of communication and/or the transition of the client application from background to foreground.</p><p id="p-0071" num="0115">Optionally, when receiving a given data slice of the at least one communication thread, the client application is configured to receive, from the target server, at least one page comprising a predefined amount of the content of the at least one communication thread in an iterative manner, wherein one page is received at each iteration. It will be appreciated that the given data slice is any of: the most recent data slice, the incremental data slice. The given data slice is received using an API handle. Optionally, the given data slice comprises the at least one page. It is to be understood that a given page comprises only a portion of the predefined amount of the content of the at least one communication thread (for example, a predefined number of messages of chats), and the client application may not be able to receive an entirety of the predefined amount of the content of the at least one communication thread at once. At each iteration, the client application only receives the portion of the predefined amount of the content of the at least one communication thread. In such a case, the client application is optionally configured to receive the remaining portions of the predefined amount of the content of the at least one communication thread by iteratively sending request(s) to the target server, until the remaining portions of the predefined amount of the content of the at least one communication thread is entirely received by the client application. In this iterative page-wise manner, the data stored in the client application database is iteratively updated in small increments, thereby minimizing time-lag that conventionally occurs during data updating.</p><p id="p-0072" num="0116">Optionally, for the given data slice, the predefined amount of the content of the at least one communication thread is ordered in an increasing order of date and/or time. In such a case, a page including most recent content amongst the predefined amount of the content is arranged at an end of the given data slice, while a page including oldest content amongst the predefined amount of the content is arranged at a beginning of the given data slice.</p><p id="p-0073" num="0117">Optionally, the at least one page is received in a decreasing order of recency of content included therein. In this regard, the page including the most recent content amongst the predefined amount of the content is received first, followed by a page including next-recent content amongst the predefined amount of the content, and so on, until at last the page including the oldest content amongst the predefined amount of the content is received.</p><p id="p-0074" num="0118">Optionally, the predefined amount of the content of the at least one communication thread which is included in the at least one page depends on a size of a given page and a number of pages in the given data slice. As an example, the size of the given page may be 4 kilobytes and the number of pages in the given data slice may be five. Therefore, the predefined amount of the content of the at least one communication thread has a size of 20 kilobytes of data. The predefined amount of the content of the at least one communication thread may include, for example, approximately 125 text messages (of about 160 characters in each message).</p><p id="p-0075" num="0119">Optionally, the client application is further configured to present the updated version of the data at an interactive user interface rendered on the at least one client device. Optionally, the user views, via the interactive user interface, the updated version of the data. The interactive user interface is a graphical user interface pertaining to the client application, and the user interacts with the client application using the interactive user interface. Optionally, the user prioritises, via the interactive user interface, an order of receiving the updated version of the data for at least two communication threads. Optionally, in this regard, the client application is configured to receive, from the target server, the updated version of the data for the at least two communication threads in a decreasing order of priorities. It will be appreciated that the updated version of the data is presented at the interactive user interface in real time or near real time with minimal latency/delay which is imperceptible to the user, thereby improving user's experience when the user uses the client application.</p><p id="p-0076" num="0120">Referring and continuing to the first example, the user may access the communication thread A1, then the communication thread A2, and then the communication thread A3. Herein, the business communication application may be configured to receive, from the target server, the updated version of the data for the communication thread A1, then for the communication thread A2, and then for the communication thread A3. Moreover, when the user scrolls up a given communication thread to access a historical content of the given communication thread, the historical content of the given communication thread may be received, by the business communication application, from the target server, in order of most recent content to most old content.</p><p id="p-0077" num="0121">The present disclosure also relates to the method as described above. Various embodiments and variants disclosed above, with respect to the aforementioned system, apply mutatis mutandis to the method.</p><p id="p-0078" num="0122">Optionally, the method further comprises determining whether the client application has started-up or synced-up. Optionally, the client application is configured to determine whether it has started-up or synced-up. Upon start-up of the client application, the at least one client device establishes a connection with the target server for a first time. In such a case, the client application is optionally configured to send, to the target server, a connection request for establishing the connection of the at least one client device with the target server for the first time. Therefore, in this manner, it is determined that the client application has started-up. Upon sync-up of the client application, a connection between the at least one client device and the target server is restored or refreshed as the at least one client device is pre-connected with the target server. In such a case, the client application need not send any connection request to the target server for establishing the connection of the at least one client device with the target server. Therefore, in this manner, it is determined that the client application has synced-up.</p><p id="p-0079" num="0123">Optionally, the method further comprises: upon sync-up of the client application, obtaining from the target server, the updated version of the data using a third process, wherein the third process is based on incremental updates.</p><p id="p-0080" num="0124">Optionally, the method further comprises presenting the updated version of the data at an interactive user interface rendered on the at least one client device.</p><p id="p-0081" num="0125">Optionally, in the method, the step of obtaining from the target server, the updated version of the data using the first process comprises:<ul id="ul0031" list-style="none">    <li id="ul0031-0001" num="0000">    <ul id="ul0032" list-style="none">        <li id="ul0032-0001" num="0126">obtaining a list of updates that have been made to the data since a time of storing the data in the client application database;</li>        <li id="ul0032-0002" num="0127">determining whether an incremental update of the data is feasible or not, based on the list of updates;</li>        <li id="ul0032-0003" num="0128">when the incremental update of the data is not feasible, deleting the data stored in the client application database, and receiving a most recent data slice of the at least one communication thread;</li>        <li id="ul0032-0004" num="0129">when the incremental update of the data is feasible, receiving an incremental data slice of the at least one communication thread; and</li>        <li id="ul0032-0005" num="0130">using the most recent data slice or the incremental data slice to generate the updated version of the data.</li>    </ul>    </li></ul></p><p id="p-0082" num="0131">Optionally, in the method, the step of obtaining from the target server, the updated version of the data using the second process comprises:<ul id="ul0033" list-style="none">    <li id="ul0033-0001" num="0000">    <ul id="ul0034" list-style="none">        <li id="ul0034-0001" num="0132">receiving a first list including identification information of the at least one communication thread, and a second list of members of the at least one communication thread;</li>        <li id="ul0034-0002" num="0133">receiving a most recent data slice of the at least one communication thread, based on the first list and the second list; and</li>        <li id="ul0034-0003" num="0134">using the most recent data slice as the updated version of the data.</li>    </ul>    </li></ul></p><p id="p-0083" num="0135">Optionally, in the method, the step of obtaining from the target server, the updated version of the data using the third process comprises:<ul id="ul0035" list-style="none">    <li id="ul0035-0001" num="0000">    <ul id="ul0036" list-style="none">        <li id="ul0036-0001" num="0136">obtaining a list of updates that have been made to the data since a time of storing the data in the client application database;</li>        <li id="ul0036-0002" num="0137">receiving an incremental data slice of the at least one communication thread, based on the list of updates; and</li>        <li id="ul0036-0003" num="0138">using the incremental data slice to generate the updated version of the data.</li>    </ul>    </li></ul></p><p id="p-0084" num="0139">Optionally, in the method, the step of receiving a given data slice of the at least one communication thread comprises receiving, from the target server, at least one page comprising a predefined amount of the content of the at least one communication thread in an iterative manner, wherein one page is received at each iteration.</p><p id="p-0085" num="0140">Optionally, in the method, the sync-up of the client application is performed upon one of: re-connection of the client application with the target server after a temporary disruption of communication therebetween, a transition of the client application from background to foreground.</p><p id="p-0086" num="0141">The present disclosure also relates to the client device as described above. Various embodiments and variants disclosed above, with respect to the aforementioned system and method, apply mutatis mutandis to the computer program product.</p><p id="p-0087" num="0142">Throughout the present disclosure, the term &#x201c;computer program product&#x201d; refers to a software product comprising program instructions that are recorded on the non-transitory machine-readable data storage medium, wherein the software product is executable upon a computing hardware (i.e., the processing device) for implementing the aforementioned steps of the method for implementing intelligent loading of the data.</p><p id="p-0088" num="0143">The program instructions stored on non-transitory machine-readable data storage medium can direct the processing device to function in a particular manner, such that the processing device executes processing steps for implementing intelligent loading of data. Examples of the non-transitory machine-readable data storage medium includes, but are not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, or any suitable combination thereof.</p><p id="p-0089" num="0144">Throughout the present disclosure, the term &#x201c;processing device&#x201d; refers to a device that is capable of processing the program instructions of the computer program product. Optionally, the processing device is implemented as a part of the client device. The processing device may, for example, be a microprocessor, a microcontroller, a processing unit, or similar.</p><p id="p-0090" num="0145">Optionally, in the computer program product, the program instructions further cause the processing device to, upon sync-up of the client application, obtain from the target server, the updated version of the data using a third process, wherein the third process is based on incremental updates.</p><p id="p-0091" num="0146">The present disclosure also relates to the client device as described above. Various embodiments and variants disclosed above, with respect to the aforementioned system, method, and computer program product, apply mutatis mutandis to the client device.</p><p id="p-0092" num="0147">Optionally, upon sync-up of the client application, the client application is configured to obtain from the target server, the updated version of the data using a third process, wherein the third process is based on incremental updates.</p><p id="p-0093" num="0148">The present disclosure also relates to the target server as described above. Various embodiments and variants disclosed above, with respect to the aforementioned system, method, computer program product, and client device, apply mutatis mutandis to the target server.</p><p id="p-0094" num="0149">Optionally, upon sync-up of the client application, the target server is configured to send, to the client application, the updated version of the data using a third process, wherein the third process is based on incremental updates.</p><heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE DRAWINGS</heading><p id="p-0095" num="0150">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, illustrated is a block diagram of architecture of a system <b>100</b> for implementing intelligent loading of data in a client application database <b>102</b>, in accordance with an embodiment of the present disclosure. The system <b>100</b> comprises at least one client device (depicted as a client device <b>104</b>) and a target server <b>106</b> communicably coupled to the client device <b>104</b>. The client device <b>104</b> is configured to execute a client application <b>108</b> having the client application database <b>102</b> associated therewith.</p><p id="p-0096" num="0151">Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, illustrated is an exemplary process flow upon start-up of a client application, in accordance with an embodiment of the present disclosure. At step <b>202</b>, the client application starts-up on at least one client device. At step <b>204</b>, it is determined if data is present in a client application database associated with the client application.</p><p id="p-0097" num="0152">In one case, when the data is present in the client application database, then at step <b>206</b>, a list of updates that have been made to the data since a time of storing the data in the client application database is obtained by the client application, from a target server. Then, at step <b>208</b>, it is determined if an incremental update of the data is feasible, based on the list of updates. In a first case, when the incremental update of the data is feasible, then at step <b>210</b>, an incremental data slice of at least one communication thread is received by the client application, from the target server. Then, at step <b>212</b>, it is checked if more data is available for incremental update. If yes, then the step <b>210</b> is repeated. If no, then at step <b>214</b>, the incremental data slice is used, by the client application, to generate an updated version of the data. In a second case, when the incremental update of the data is not feasible, then at step <b>216</b>, the data stored in the client application database is deleted (or wiped). Then, at step <b>218</b>, a most recent data slice of the at least one communication thread is received by the client application, from the target server. Then, at step <b>220</b>, it is checked if more recent data slice(s) of the at least one communication thread is/are available. If yes, then the step <b>218</b> is repeated. If no, then at step <b>214</b>, the most recent data slice is used, by the client application, to generate the updated version of the data.</p><p id="p-0098" num="0153">In another case, when the data is not present in the client application database, then at step <b>222</b>, a first list including identification information of the at least one communication thread, and a second list of members of the at least one communication thread received is received by the client application, from the target server. Then at step <b>218</b>, the most recent data slice of the at least one communication thread is received by the client application, from the target server, based on the first list and the second list. Then, the steps <b>220</b> and <b>214</b> are performed.</p><p id="p-0099" num="0154">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, illustrated is an exemplary process flow upon sync-up of a client application, in accordance with an embodiment of the present disclosure. At step <b>302</b>, the client application syncs-up on at least one client device. At step <b>304</b>, a list of updates that have been made to data since a time of storing the data in a client application database associated with the client application is obtained by the client application, from the target server. At step <b>306</b>, an incremental data slice of at least one communication thread is received by the client application, from the target server, based on the list of updates. Then, at step <b>308</b>, it is checked if more data is available for incremental update. If yes, then the step <b>306</b> is repeated. If no, then at step <b>310</b>, the incremental data slice is used, by the client application, to generate an updated version of the data.</p><p id="p-0100" num="0155">Referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, illustrated are steps of a method for implementing intelligent loading of data in a client application database, in accordance with an embodiment of the present disclosure. The method is implemented by a system comprising at least one client device configured to execute a client application, the client application having a client application database associated therewith, and a target server communicably coupled to the at least one client device. Upon start-up of the client application, at step <b>402</b>, it is determined that whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the at least one client device is a member of the at least one communication thread. When it is determined that the data is present in the client application database, at step <b>404</b>, an updated version of the data is obtained, from the target server, using a first process, wherein the first process is based on recent updates or incremental updates. Otherwise, when it is determined that the data is not present in the client application database, at step <b>406</b>, the updated version of the data is obtained, from the target server, using a second process, wherein the second process is based on recent updates.</p><p id="p-0101" num="0156">The steps <b>402</b> to <b>406</b> are only illustrative and other alternatives can also be provided where one or more steps are added, one or more steps are removed, or one or more steps are provided in a different sequence without departing from the scope of the claims herein.</p><p id="p-0102" num="0157">Modifications to embodiments of the present disclosure described in the foregoing are possible without departing from the scope of the present disclosure as defined by the accompanying claims. Expressions such as &#x201c;including&#x201d;, &#x201c;comprising&#x201d;, &#x201c;incorporating&#x201d;, &#x201c;have&#x201d;, &#x201c;is&#x201d; used to describe and claim the present disclosure are intended to be construed in a non-exclusive manner, namely allowing for items, components or elements not explicitly described also to be present. Reference to the singular is also to be construed to relate to the plural.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-01-19" num="01-19"><claim-text><b>1</b>.-<b>19</b>. (canceled)</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A system for implementing intelligent loading of data in a client application database, the system comprising:<claim-text>at least one client device configured to execute a client application, the client application being associated with the client application database; and</claim-text><claim-text>a target server communicably coupled to the at least one client device,</claim-text><claim-text>wherein, upon start-up, the client application is configured to:<claim-text>determine whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the client application on the at least one client device is a member of the at least one communication thread;</claim-text><claim-text>when the data is present in the client application database, obtain from the target server, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</claim-text><claim-text>when the data is not present in the client application database, obtain from the target server, the updated version of the data using a second process, wherein the second process is based on recent updates.</claim-text></claim-text></claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. A system of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein, upon sync-up, the client application is configured to obtain from the target server, the updated version of the data using a third process, wherein the third process is based on incremental updates.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. A system of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the client application is further configured to present the updated version of the data at an interactive user interface rendered on the at least one client device.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. A system of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein when obtaining from the target server, the updated version of the data using the first process, the client application is configured to:<claim-text>obtain a list of updates that have been made to the data since a time of storing the data in the client application database;</claim-text><claim-text>determine whether an incremental update of the data is feasible or not, based on the list of updates;</claim-text><claim-text>when the incremental update of the data is not feasible, delete the data stored in the client application database, and receive a most recent data slice of the at least one communication thread;</claim-text><claim-text>when the incremental update of the data is feasible, receive an incremental data slice of the at least one communication thread; and</claim-text><claim-text>use the most recent data slice or the incremental data slice to generate the updated version of the data.</claim-text></claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. A system of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein when obtaining from the target server, the updated version of the data using the second process, the client application is configured to:<claim-text>receive a first list including identification information of the at least one communication thread, and a second list of members of the at least one communication thread;</claim-text><claim-text>receive a most recent data slice of the at least one communication thread, based on the first list and the second list; and</claim-text><claim-text>use the most recent data slice as the updated version of the data.</claim-text></claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. A system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein when obtaining from the target server, the updated version of the data using the third process, the client application is configured to:<claim-text>obtain a list of updates that have been made to the data since a time of storing the data in the client application database;</claim-text><claim-text>receive an incremental data slice of the at least one communication thread, based on the list of updates; and</claim-text><claim-text>use the incremental data slice to generate the updated version of the data.</claim-text></claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. A system of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein when receiving a given data slice of the at least one communication thread, the client application is configured to receive, from the target server, at least one page comprising a predefined amount of the content of the at least one communication thread in an iterative manner, wherein one page is received at each iteration.</claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. A system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the sync-up of the client application is performed upon one of: re-connection of the client application with the target server after a temporary disruption of communication therebetween, a transition of the client application from background to foreground.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. A method for implementing intelligent loading of data in a client application database, the method being implemented by a system comprising at least one client device configured to execute a client application, the client application having a client application database associated therewith, and a target server communicably coupled to the at least one client device, the method comprising:<claim-text>upon start-up of the client application,<claim-text>determining whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the at least one client device is a member of the at least one communication thread;</claim-text><claim-text>when the data is present in the client application database, obtaining from the target server, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</claim-text><claim-text>when the data is not present in the client application database, obtaining from the target server, the updated version of the data using a second process, wherein the second process is based on recent updates.</claim-text></claim-text></claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. A method of <claim-ref idref="CLM-00028">claim 28</claim-ref>, further comprising: upon sync-up of the client application, obtaining from the target server, the updated version of the data using a third process, wherein the third process is based on incremental updates.</claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. A method of <claim-ref idref="CLM-00028">claim 28</claim-ref>, further comprising presenting the updated version of the data at an interactive user interface rendered on the at least one client device.</claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. A method of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the step of obtaining from the target server, the updated version of the data using the first process comprises:<claim-text>obtaining a list of updates that have been made to the data since a time of storing the data in the client application database;</claim-text><claim-text>determining whether an incremental update of the data is feasible or not, based on the list of updates;</claim-text><claim-text>when the incremental update of the data is not feasible, deleting the data stored in the client application database, and receiving a most recent data slice of the at least one communication thread;</claim-text><claim-text>when the incremental update of the data is feasible, receiving an incremental data slice of the at least one communication thread; and</claim-text><claim-text>using the most recent data slice or the incremental data slice to generate the updated version of the data.</claim-text></claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. A method of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the step of obtaining from the target server, the updated version of the data using the second process comprises:<claim-text>receiving a first list including identification information of the at least one communication thread, and a second list of members of the at least one communication thread;</claim-text><claim-text>receiving a most recent data slice of the at least one communication thread, based on the first list and the second list; and</claim-text><claim-text>using the most recent data slice as the updated version of the data.</claim-text></claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. A method of <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein the step of obtaining from the target server, the updated version of the data using the third process comprises:<claim-text>obtaining a list of updates that have been made to the data since a time of storing the data in the client application database;</claim-text><claim-text>receiving an incremental data slice of the at least one communication thread, based on the list of updates; and</claim-text><claim-text>using the incremental data slice to generate the updated version of the data.</claim-text></claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. A method of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the step of receiving a given data slice of the at least one communication thread comprises receiving, from the target server, at least one page comprising a predefined amount of the content of the at least one communication thread in an iterative manner, wherein one page is received at each iteration.</claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. A method of <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein the sync-up of the client application is performed upon one of: re-connection of the client application with the target server after a temporary disruption of communication therebetween, a transition of the client application from background to foreground.</claim-text></claim><claim id="CLM-00036" num="00036"><claim-text><b>36</b>. A computer program product for implementing intelligent loading of data in a client application database, the computer program product comprising a non-transitory machine-readable data storage medium having stored thereon program instructions that, when accessed by a processing device, cause the processing device to:<claim-text>upon start-up of a client application,<claim-text>determine whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the processing device is a member of the at least one communication thread;</claim-text><claim-text>when the data is present in the client application database, obtain from a target server, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</claim-text><claim-text>when the data is not present in the client application database, obtain from the target server, the updated version of the data using a second process, wherein the second process is based on recent updates.</claim-text></claim-text></claim-text></claim><claim id="CLM-00037" num="00037"><claim-text><b>37</b>. A client device arranged to be used in a system for implementing intelligent loading of data in a client application database, the system comprising at least one client device configured to execute a client application, wherein the client application is associated with the client application database, and a target server communicably coupled to the at least one client device,<claim-text>wherein, upon start-up, the client application is configured to:<claim-text>determine whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the client application on the at least one client device is a member of the at least one communication thread;</claim-text><claim-text>when the data is present in the client application database, obtain from the target server, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</claim-text><claim-text>when the data is not present in the client application database, obtain from the target server, the updated version of the data using a second process, wherein the second process is based on recent updates.</claim-text></claim-text></claim-text></claim><claim id="CLM-00038" num="00038"><claim-text><b>38</b>. A target server arranged to be used in a system for implementing intelligent loading of data in a client application database, the system comprising at least one client device configured to execute a client application, wherein the client application is associated with the client application database, and the target server communicably coupled to the at least one client device,<claim-text>wherein, upon start-up of the client application:<claim-text>the client application is configured to determine whether the data is present or not in the client application database, the data comprising content of at least one communication thread, wherein a user using the client application on the at least one client device is a member of the at least one communication thread;</claim-text><claim-text>when the data is present in the client application database, the target server is configured to send to the client application, an updated version of the data using a first process, wherein the first process is based on recent updates or incremental updates; and</claim-text><claim-text>when the data is not present in the client application database, the target server is configured to send to the client application, an updated version of the data using a second process, wherein the second process is based on recent updates.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>