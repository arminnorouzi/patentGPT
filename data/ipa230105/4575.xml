<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004576A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004576</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17782855</doc-number><date>20201124</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>CN</country><doc-number>201911296442.4</doc-number><date>20191216</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>27</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>23</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>273</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2379</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">DATA SYNCHRONIZATION METHOD AND DEVICE FOR DATABASES, AND STORAGE MEDIUM</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>ZTE CORPORATION</orgname><address><city>Shenzhen</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>HUAN</last-name><first-name>Jiajia</first-name><address><city>Shenzhen</city><country>CN</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/CN2020/131181</doc-number><date>20201124</date></document-id><us-371c12-date><date>20220606</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A data synchronization method and device for databases, and a storage medium are disclosed. The method includes: in the case where transaction response results fed back by multiple data nodes are all successful, receiving transaction commit request messages sent by a client, and writing a global transaction ID into a transaction processing list; sending the transaction commit request messages to the multiple data nodes; receiving transaction commit results fed back by the multiple data nodes; and in the case where the transaction commit results fed back by the multiple data nodes are all successful, applying to a global transaction manager to release the global transaction ID.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="162.39mm" wi="158.24mm" file="US20230004576A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="254.42mm" wi="162.39mm" file="US20230004576A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="237.74mm" wi="161.80mm" file="US20230004576A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">The present application is a national stage filing under 35 U.S.C. &#xa7; 371 of international application number PCT/CN2020/131181, filed Nov. 24, 2020, which claims priority to Chinese patent application No. 201911296442.4 filed Dec. 16, 2019. The entire contents of these application are incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure relates to the technical field of databases, in particular to a data synchronization method for databases, a device, and a storage medium.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">A heterogeneous database system is a collection of related multiple database systems, for example, a collection of a distributed database system and a standalone database system. In a data synchronization scenario of the heterogeneous database system, it is necessary to synchronize the data of a client to a distributed database and a standalone database. According to an existing data synchronization method capable of being applied to the scenario, a Proxy provided between the client and the databases is configured to receive transaction data of the client, rewrite the transaction data into structured languages that can be executed by the distributed database and the standalone database correspondingly, and send the corresponding structured languages to the distributed database and the standalone database respectively, so as to synchronize the data of the client to the distributed database and the standalone database.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0005" num="0004">A general summary of the subject matters detailed in this disclosure is provided below. The summary is not intended to limit the scope of protection of the claims.</p><p id="p-0006" num="0005">In accordance with an aspect of the present disclosure, an embodiment provides a data synchronization method for databases, a device, and a storage medium, which can realize data synchronization between a distributed database and a standalone database in a heterogeneous database system.</p><p id="p-0007" num="0006">In accordance with an aspect of the present disclosure, an embodiment provides a data synchronization method for databases, including: receiving a transaction start request sent by a client; in response to the transaction start request, applying to a global transaction manager for a global transaction ID; receiving the global transaction ID fed back by the global transaction manager, and feeding back a transaction start success message to the client; in the case where the global transaction ID fed back by the global transaction manager is received, receiving transaction request messages sent by the client, where the transaction request messages carry first transaction statements to be executed; sending the global transaction ID and the transaction request messages to a plurality of data nodes of a distributed database; receiving transaction response results fed back by the plurality of data nodes; in the case where the transaction response results fed back by the plurality of data nodes are all successful, feeding back a transaction response success message to the client; receiving transaction commit request messages sent by the client, and writing the global transaction ID into a transaction processing list; sending the transaction commit request messages to the plurality of data nodes; receiving transaction commit results fed back by the plurality of data nodes; in the case where all the transaction commit results fed back by the plurality of data nodes are successful, feeding back a transaction commit success message to the client, and applying to the global transaction manager to release the global transaction ID, so that a synchronization module may acquire the first transaction statements corresponding to the released global transaction ID from the plurality of data nodes.</p><p id="p-0008" num="0007">In accordance with an aspect of the present disclosure, an embodiment provides a data synchronization method for databases, including: acquiring both a to-be-processed transaction and a global transaction ID corresponding to the to-be-processed transaction from a transaction processing list; querying a global transaction manager to identify whether the global transaction ID of the to-be-processed transaction is released; in response to the global transaction ID of the to-be-processed transaction is released, acquiring first transaction statements corresponding to the global transaction ID from a plurality of data nodes of a distributed database; converting the acquired first transaction statements into second transaction statements adapted to a standalone database for execution; sending the second transaction statements to the standalone database; and updating the to-be-processed transaction corresponding to the global transaction ID in the transaction processing list to be &#x201c;processed&#x201d;.</p><p id="p-0009" num="0008">In accordance with an aspect of the present disclosure, an embodiment provides a device, including: a memory configured to store a program; a processor configured to execute the program stored in the memory, where the program stored in the memory, when executed by the processor, causes the processor to perform any data synchronization method for databases as described above.</p><p id="p-0010" num="0009">In accordance with an aspect of the present disclosure, an embodiment provides a computer readable storage medium storing a computer executable instruction which, when executed by a processor, causes the processor to perform any data synchronization method for databases as described above.</p><p id="p-0011" num="0010">Other features and advantages of this disclosure will be set forth in the following description, and partly become obvious from the description, or understood by implementing this disclosure. The objects and other advantages of this disclosure can be realized and obtained by the structure particularly pointed out in the description, claims and drawings.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0012" num="0011">The drawings are provided for a further understanding of the technical schemes of the present disclosure, and constitute a part of the description. The drawings and the embodiments of the present disclosure are used to explain the technical schemes of the present disclosure, and not intended to limit the technical schemes of the present disclosure.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram of an application scenario of a data synchronization method for databases according to an embodiment of the present disclosure;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart of a data synchronization method for databases according to an embodiment of the present disclosure;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart of another data synchronization method for databases according to an embodiment of the present disclosure; and</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a structural schematic diagram of a device according to an embodiment of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0017" num="0016">In order to make the object, technical schemes and advantages of this disclosure clearer, this disclosure will be further described in detail in conjunction with the drawings and embodiments. It should be understood that the specific embodiments described herein are only used to explain this disclosure, and are not used to limit this disclosure.</p><p id="p-0018" num="0017">It should be understood that in the description of the embodiments of the present disclosure, the meaning of &#x201c;multiple&#x201d; (or &#x201c;a plurality of&#x201d;) is two or more. Greater than, less than, exceeding, etc. are understood as excluding this number, while above, below, within, etc. are understood as including this number. &#x201c;First&#x201d;, &#x201c;second&#x201d; and the like are only used for the purpose of distinguishing technical features, rather than being understood to indicate or imply relative importance or hint the number of indicated technical features or hint the sequence relationship of indicated technical features.</p><p id="p-0019" num="0018">A heterogeneous database system is a collection of related multiple database systems, for example, a collection of a distributed database system and a standalone database system. In a data synchronization scenario of the heterogeneous database system, it is necessary to synchronize the data of a client to a distributed database and a standalone database. According to an existing data synchronization method capable of being applied to the scenario, a Proxy provided between the client and the databases is configured to receive a synchronization request from the client, rewrite the request into structured languages that can be executed by a distributed database and a standalone database correspondingly, and send the corresponding structured languages to the distributed database and the standalone database respectively, so as realize the data synchronization between them. The above synchronization method has the disadvantage that if the distributed database and the standalone database feedback different response results after receiving the request, the Proxy can't process the request, and may even block the transaction request from the client.</p><p id="p-0020" num="0019">An embodiment of the present disclosure provides a data synchronization method for databases, a device, and a storage medium, which can realize data synchronization between a distributed database and a standalone database in a heterogeneous database system.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a schematic diagram of an application scenario of a data synchronization method for databases according to an embodiment of the present disclosure. The architecture of the scenario includes a client, a distributed database, a standalone database, a proxy, a synchronization module and a Global Transaction Manager (GTM).</p><p id="p-0022" num="0021">The client is configured to initiate a transaction to command the databases to implement data synchronization operations of addition, deletion and modification through the transaction.</p><p id="p-0023" num="0022">The distributed database includes multiple data nodes, each data node being configured to implement the transaction from the client to synchronize data related to the transaction.</p><p id="p-0024" num="0023">The standalone database is a database that can only run on a standalone computer and does not provide network functions. For example, ACCESS, FOXPRO and the like are all standalone databases.</p><p id="p-0025" num="0024">The proxy is configured to forward statements in the transaction sent by client to the distributed database for execution, so that the distributed database may synchronize data related to the transaction.</p><p id="p-0026" num="0025">The synchronization module is configured to acquire transaction statements corresponding to a Global Transaction ID (GTID) from data nodes of the distributed database, convert the transaction statements into statements adapted to the standalone database, and send the statements to the standalone database for execution, so as to finally realize data synchronization between the distributed database and the standalone database.</p><p id="p-0027" num="0026">The GTM is configured to manage (create/release/query) the life cycle of global transactions, and assign the GTID to the global transactions, so as to realize the isolation between transactions.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a data synchronization method for databases according to an embodiment of the present disclosure. The method may be implemented by the proxy in the scenario shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the method includes, but is not limited to steps as follow.</p><p id="p-0029" num="0028">At S<b>101</b>, a transaction start request sent by a client is received.</p><p id="p-0030" num="0029">When needing to synchronize service data to the databases, the client sends a transaction start request to the proxy, and the proxy receives the transaction start request from the client.</p><p id="p-0031" num="0030">At S<b>102</b>, in response to the transaction start request, an application is made to a GTM for a GTID.</p><p id="p-0032" num="0031">After receiving the transaction start request sent by the client, the proxy applies to the GTM for the GTID.</p><p id="p-0033" num="0032">At S<b>103</b>, the GTID fed back by the GTM is received.</p><p id="p-0034" num="0033">After receiving the GTID application sent by the proxy, the GTM assigns the GTID to the transaction and feeds back the GTID to the proxy, and the proxy receives the GTID from the GTM.</p><p id="p-0035" num="0034">At S<b>104</b>, a transaction start success message is fed back to the client.</p><p id="p-0036" num="0035">After receiving the GTID fed back by the GTM, the proxy feeds back the transaction start success message to the client, so that the client further sends transaction request messages after receiving the transaction start success message sent by the proxy.</p><p id="p-0037" num="0036">At S<b>105</b>, the transaction request messages corresponding to the GTID sent by the client are received. The transaction request messages carry first transaction statements to be executed.</p><p id="p-0038" num="0037">The proxy receives the transaction request messages corresponding to the GTID sent by the client. The transaction request messages carry first transaction statements to be executed. The first transaction statements are statements adapted to be executable for the distributed database, for example, SQL statements.</p><p id="p-0039" num="0038">At S<b>106</b>, both the GTID and the transaction request messages are sent to multiple data nodes of the distributed database.</p><p id="p-0040" num="0039">In some examples, after receiving the transaction request messages from the client, the proxy sends the GTID and the transaction request messages to the multiple data nodes of the distributed database, and waits for the response from each data node. The transaction request messages are configured to query whether each data node can execute a transaction commit operation. It should be understood that multiple data nodes herein are transaction participants related to the transaction initiated by the client.</p><p id="p-0041" num="0040">After receiving the GTID and the transaction request messages, each data node parses the transaction request messages to execute the first transaction statements in the transaction request messages, and records the GTID and corresponding first transaction statements in a transaction log.</p><p id="p-0042" num="0041">At S<b>107</b>, transaction response results fed back by the multiple data nodes are received.</p><p id="p-0043" num="0042">In some examples, all the data nodes feedback transaction response results to the proxy. If successfully executing the transaction, the data nodes feedback &#x201c;successful&#x201d; to the proxy, indicating that the transaction can be executed. Otherwise, if unsuccessfully executing the transaction, the data nodes feedback &#x201c;unsuccessful&#x201d; to the proxy, indicating that the transaction cannot be executed. The proxy receives the transaction response results fed back by all data nodes, and determines whether the transaction response results fed back by all the data nodes are &#x201c;successful&#x201d;.</p><p id="p-0044" num="0043">At S<b>108</b>, a transaction response success message is fed back to the client.</p><p id="p-0045" num="0044">After the proxy receives the transaction response results fed back by the multiple data nodes, if all the transaction response results fed back by the data nodes to the proxy are &#x201c;successful&#x201d;, the proxy feeds back a transaction response success message to the client, so that the client can further send transaction commit request messages to the proxy after receiving the transaction response success message sent by the proxy.</p><p id="p-0046" num="0045">It should be understood that once a transaction response result fed back by a data node to the proxy is &#x201c;unsuccessful&#x201d;, the proxy does not execute steps S<b>107</b> to S<b>114</b>.</p><p id="p-0047" num="0046">In a distributed transaction processing scenario, a complete transaction often needs to invoke multiple services. For example, in a common &#x201c;transfer&#x201d; transaction, the following services are required to be invoked: 1. Create a transaction order; 2. Create a payment order; 3. Deduct from account A and deposit from account B. Each service may be completed through steps S<b>105</b> to S<b>108</b>. The client sends first transaction statements corresponding to the services to the data nodes participating in the transaction. Therefore, those having ordinary skill in the art should understand that steps S<b>105</b> to S<b>108</b> may be repeatedly executed multiple times between steps S<b>104</b> and S<b>109</b> to complete the whole transaction.</p><p id="p-0048" num="0047">At S<b>109</b>, the transaction commit request messages sent by the client are received.</p><p id="p-0049" num="0048">At S<b>110</b>, the GTID is written into the transaction processing list.</p><p id="p-0050" num="0049">In the case where all the transaction response results fed back by the data nodes are &#x201c;successful&#x201d;, the proxy receives the transaction commit request messages sent by the client, and writes the GTID into the transaction processing list. It should be understood that the orders of steps <b>5109</b> and <b>5110</b> may be interchanged here.</p><p id="p-0051" num="0050">In some examples, the transaction processing list may be created by the proxy, and then may be sent to the data nodes together with the transaction commit request messages. A component that manages the transaction processing list may be set independently, and this component may perform operations such as creating and updating the transaction processing list.</p><p id="p-0052" num="0051">In some examples, when the GTID is written into the transaction processing list, information about data nodes can also be written into the transaction processing list. The information about data nodes participating in the transaction is written in the transaction processing list, so that the synchronization module can search for the data nodes participating in the transaction matching the GTID in the subsequent step, so as to synchronize the related data to the standalone database.</p><p id="p-0053" num="0052">In some examples, when the GTID is written into the transaction processing list, a transaction processing status can also be written into the transaction processing list, so that the synchronization module can acquire unprocessed transactions from the transaction processing list in the subsequent steps, so as to synchronize related data to the standalone database. Of course, it is also possible to delete the processed transaction from the transaction processing list instead of writing the transaction processing status into the transaction processing list, so that the synchronization module can also acquire the unprocessed transactions from the transaction processing list.</p><p id="p-0054" num="0053">At S<b>111</b>, the transaction commit request messages are sent to the multiple data nodes.</p><p id="p-0055" num="0054">In the embodiment of the present disclosure, after receiving the transaction commit request messages from the client, the proxy sends the transaction commit request messages to all the data nodes participating in the transaction.</p><p id="p-0056" num="0055">In some examples, in step S<b>111</b>, when the transaction commit request messages are sent to the multiple data nodes, the transaction processing list is also sent to the multiple data nodes, so the transaction processing list is sent to the data nodes along with the transaction commit request messages, such that the data nodes can execute corresponding transaction commit operations according to the GTID recorded in the transaction processing list.</p><p id="p-0057" num="0056">In the embodiment of the present disclosure, before the transaction is committed, a transaction request message is sent to all data nodes to query whether the transaction commit operation may be executed, and the transaction commit operation may be executed only when all data nodes can execute the transaction commit operation, so as to ensure the consistency in the data synchronization process of the distributed database.</p><p id="p-0058" num="0057">At S<b>112</b>, transaction commit results fed back by multiple data nodes are received.</p><p id="p-0059" num="0058">After receiving the transaction commit request messages, all data nodes execute the transaction commit operation, and feedback the transaction commit results to the proxy after completion. The proxy receives the transaction commit results fed back by all data nodes, and in the case where all the transaction commit results fed back by data node are successful, steps S<b>113</b> and S<b>114</b> are executed.</p><p id="p-0060" num="0059">At S<b>113</b>, the proxy feeds back a transaction commit success message to the client.</p><p id="p-0061" num="0060">The proxy feeds back the transaction commit success message to the client, and informs the client that the transaction is successfully committed to the distributed database, so that the client can start the next transaction, avoiding the transaction jam of the client.</p><p id="p-0062" num="0061">At S<b>114</b>, in the case where the transaction commit results fed back by the multiple data nodes are all successful, an application is made to the GTM to release the GTID.</p><p id="p-0063" num="0062">In some examples, if the commit results fed back by the data nodes to the proxy are all &#x201c;successful&#x201d;, the proxy applies to the GTM to release the GTID of the transaction. If a commit result fed back by a data node to the proxy is &#x201c;unsuccessful&#x201d;, the GTID of the transaction is kept in an occupied status. After the GTID is released, the synchronization module can use the released GTID to acquire first transaction statements corresponding to the GTID from the multiple data nodes.</p><p id="p-0064" num="0063">It should be understood that the orders of step S<b>113</b> and step S<b>114</b> may be interchanged.</p><p id="p-0065" num="0064">In the embodiment of the present disclosure, the GTID of the transaction sent by the client is recorded in the transaction processing list, and the transaction is executed and committed by the distributed database through the first transaction statement adapted to the distributed database for execution, so that the distributed database synchronizes the data related to the transaction. After the distributed database commits the transaction, an application is made to the GTM to release the GTID of the transaction. Here, the function of releasing the GTID corresponding to the transaction is to enable the synchronization module to acquire unprocessed transactions from the transaction processing list, determine the first transaction statements to be acquired from all data node of the distributed database by identifying whether the GTID of the unprocessed transactions is released, and then convert these first transaction statements into second transaction statements adapted to the standalone database and send the statements to the standalone database for synchronization.</p><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows another data synchronization method for databases according to an embodiment of the present disclosure. The method may be executed by the synchronization module in the scenario shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the method includes, but is not limited to steps as follow.</p><p id="p-0067" num="0066">At S<b>201</b>, both a to-be-processed transaction and a GTID corresponding to the to-be-processed transaction are acquired from a transaction processing list.</p><p id="p-0068" num="0067">The to-be-processed transaction herein refers to a transaction that is not synchronized to the standalone database. Both the to-be-processed transaction and the GTID corresponding to the to-be-processed transaction may be acquired from the transaction processing list. In some embodiments, in addition to recording the GTID, the transaction processing list also records a transaction processing status corresponding to the GTID, according to which unprocessed transactions can be known. In some embodiments, after being processed, the transaction is deleted from the transaction processing list, so all transactions in the transaction processing list are unprocessed transactions.</p><p id="p-0069" num="0068">At S<b>202</b>, a GTM is queried whether the GTID of the to-be-processed transaction is released.</p><p id="p-0070" num="0069">The synchronization module queries the GTM whether the GTID is released according to the acquired GTID of the to-be-processed transaction.</p><p id="p-0071" num="0070">At S<b>203</b>, when the GTID of the to-be-processed transaction is released, first transaction statements corresponding to the GTID are acquired from multiple data nodes of the distributed database.</p><p id="p-0072" num="0071">In some examples, for the to-be-processed transaction of which the GTID is released, the synchronization module may acquire corresponding first transaction statements from the data nodes of the distributed database participating in the transaction.</p><p id="p-0073" num="0072">At S<b>204</b>, the acquired first transaction statements are converted into second transaction statements adapted to the standalone database for execution.</p><p id="p-0074" num="0073">At S<b>205</b>, the second transaction statements are sent to the standalone database.</p><p id="p-0075" num="0074">In some examples, the synchronization module sends the second transaction statements converted from the first transaction statements to the standalone database, so that the standalone database can execute the second transaction statements, thereby achieving the purpose of synchronizing the data related to the to-be-processed transaction to the standalone database.</p><p id="p-0076" num="0075">In a possible implementation, the synchronization module assembles all the second transaction statements into a single complete transaction, and sends the single complete transaction to the standalone database, so that that the standalone database executes the single complete transaction.</p><p id="p-0077" num="0076">At S<b>206</b>, the to-be-processed transaction corresponding to GTID in the transaction processing list is updated to &#x201c;processed&#x201d;.</p><p id="p-0078" num="0077">In the case where the data related to the to-be-processed transaction are all synchronized to the standalone database, the to-be-processed transaction corresponding to GTID in the transaction processing list is updated to be &#x201c;processed&#x201d;. For example, transaction processing status corresponding to the GTID in the transaction processing list may be updated to be &#x201c;processed&#x201d;, or items corresponding to the GTID may be deleted directly from the transaction processing list.</p><p id="p-0079" num="0078">In the embodiment of the present disclosure, the synchronization module acquires unprocessed transactions from the transaction processing list, then acquires first transaction statements corresponding to the released global transaction ID from all data nodes of the distributed database, converts these first transaction statements into second transaction statements adapted to the standalone database, sends the statements to the standalone database for synchronization, and updates the to-be-processed transaction in the transaction processing list to be &#x201c;processed&#x201d;. Based on the technical schemes of the embodiments of the present disclosure, data synchronization between the distributed database and the standalone database in the heterogeneous database system can be realized, and the problem of inconsistency caused by sending requests to the two databases at the same time may be solved by adopting one-way synchronization and binding the information of the to-be-processed transaction with the success or failure of the transaction committing, thereby greatly improving the reliability of data synchronization.</p><p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a device <b>300</b> according to an embodiment of the present disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the device <b>300</b> includes, but is not limited to as follow.</p><p id="p-0081" num="0080">A memory <b>320</b> is configured to store a program.</p><p id="p-0082" num="0081">A processor <b>310</b> is configured to execute the program stored in the memory <b>320</b>. The program stored in the memory <b>320</b>, when executed by the processor <b>310</b>, causes the processor <b>310</b> to implement any one data synchronization method for databases described above.</p><p id="p-0083" num="0082">The processor <b>310</b> and the memory <b>320</b> may be connected by a bus or other means.</p><p id="p-0084" num="0083">As a non-transient computer readable storage medium, the memory <b>320</b> may be configured to store a non-transient software program and non-transient computer executable programs, such as the data disaster recovery drill method described in the embodiment of the present disclosure. The processor <b>310</b> executes non-transient software programs and instructions stored in the memory <b>320</b>, thereby realizing any one data synchronization method for databases described above.</p><p id="p-0085" num="0084">The memory <b>320</b> may include a program storage area and a data storage area, where the program storage area may store an operating system, and an application program required by a function; and the data storage area may store any of the data synchronization method for databases described above. In addition, the memory <b>320</b> may include a high-speed random access memory, and may further include a non-transient memory, such as a magnetic disk storage device, a flash memory device, or other non-transient solid status storage device. In some implementations, the memory <b>320</b> may include memories remotely located with respect to the processor <b>310</b>, and these remote memories may be connected to the device through networks. Examples of the above networks include, but are not limited to, the Internet, intranet, local area network, mobile communication network and combinations thereof.</p><p id="p-0086" num="0085">Non-transient software programs and instructions required to implement any of the data synchronization method for databases described above are stored in the memory <b>320</b>. The non-transient software programs and instructions, when executed by one or more processors <b>310</b>, are configured to execute any of the data synchronization method for databases described above, for example, the method steps S<b>101</b> to S<b>114</b> described in <figref idref="DRAWINGS">FIG. <b>2</b></figref> and the method steps S<b>201</b> to S<b>206</b> described in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0087" num="0086">An embodiment of the present disclosure further provides a computer readable storage medium storing a computer executable instruction. The computer executable instruction is configured to execute any of the data synchronization method for databases as described above.</p><p id="p-0088" num="0087">In an embodiment, the computer readable storage medium stores a computer executable instruction which, when executed by one or more control processors <b>310</b>, for example, one of the processors <b>310</b> in the device <b>300</b>, may cause the one or more processors <b>310</b> to implement any of the data synchronization method for databases described above, for example, the method steps S<b>101</b> to S<b>114</b> described in <figref idref="DRAWINGS">FIG. <b>2</b></figref> and the method steps S<b>201</b> to S<b>206</b> described in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0089" num="0088">In the embodiment of the present disclosure, one the one hand, the GTID of the transaction sent by the client is recorded in the transaction processing list, and the transaction is executed and committed by the distributed database through the first transaction statement adapted to the distributed database for execution, so that the distributed database synchronizes the data related to the transaction. After committing the transaction, the distributed database releases the GTID of the transaction. On the other hand, the unprocessed transactions are acquired from the transaction processing list, and then the first transaction statements corresponding to the global transaction ID are acquired from all data nodes of the distributed database according to the released global transaction ID. These first transaction statements are converted into second transaction statements adapted to the standalone database, and then sent to the standalone database for synchronization, and the transaction is updated to be &#x201c;processed&#x201d; in the transaction processing list. Based on the technical schemes of the embodiments of the present disclosure, data synchronization between the distributed database and the standalone database in the heterogeneous database system can be realized, and the problem of inconsistency caused by sending requests to the two databases at the same time is solved by adopting one-way synchronization and binding the information of the to-be-processed transaction with the success or failure of the transaction commiting, thereby greatly improving the reliability of data synchronization.</p><p id="p-0090" num="0089">The device embodiments described above are merely illustrative, and the units described as separate components may or may not be physically separated, that is, may be located in one place, or may be distributed onto multiple network elements. Some or all of the modules may be selected according to actual needs to achieve the purpose of this embodiment.</p><p id="p-0091" num="0090">As will be understood by those having ordinary skill in the art that all or some of the steps, and systems in the method disclosed above may be implemented as software, firmware, hardware and appropriate combinations thereof. Some or all of the physical components may be implemented as software executed by a processor, such as a central processing unit, a digital signal processor or a microprocessor, or as hardware, or as an integrated circuit, such as an application specific integrated circuit. Such software may be distributed on a computer readable medium, and the computer readable medium may include a computer storage medium (or a non-transitory medium) and a communication medium (or a transitory medium). As well known to those having ordinary skill in the art, the term computer storage medium includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storing information such as computer readable instructions, data structures, program modules or other data. A computer storage medium may include RAM, ROM, EEPROM, flash memory or other memory technologies, CD-ROM, digital versatile disk (DVD) or other optical disk storage, magnetic cassette, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other media that can be used to store desired information and can be accessed by a computer. In addition, it is well known to those having ordinary skill in the art that the communication medium may generally include computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transmission mechanism, and may include any information delivery medium.</p><p id="p-0092" num="0091">The above is a detailed description of the implementation of this disclosure, but this disclosure is not limited to the above embodiments. Those familiar with this field can also make various equivalent modifications or substitutions without violating the sharing conditions of the scope of the present disclosure, and these equivalent modifications or substitutions are included in the scope defined by the claims of the present disclosure.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A data synchronization method for databases, comprising:<claim-text>receiving a transaction start request sent by a client;</claim-text><claim-text>in response to the transaction start request, applying to a global transaction manager for a global transaction ID;</claim-text><claim-text>receiving the global transaction ID fed back by the global transaction manager, and feeding back a transaction start success message to the client;</claim-text><claim-text>in the case where the global transaction ID fed back by the global transaction manager is received, receiving transaction request messages sent by the client, wherein the transaction request messages carry first transaction statements to be executed;</claim-text><claim-text>sending the global transaction ID and the transaction request messages to a plurality of data nodes of a distributed database;</claim-text><claim-text>receiving transaction response results fed back by the plurality of data nodes;</claim-text><claim-text>in the case where the transaction response results fed back by the plurality of data nodes are all successful, feeding back a transaction response success message to the client;</claim-text><claim-text>receiving transaction commit request messages sent by the client, and writing the global transaction ID into a transaction processing list;</claim-text><claim-text>sending the transaction commit request messages to the plurality of data nodes;</claim-text><claim-text>receiving transaction commit results fed back by the plurality of data nodes; and</claim-text><claim-text>in the case where all the transaction commit results fed back by the plurality of data nodes are successful, feeding back a transaction commit success message to the client, and applying to the global transaction manager to release the global transaction ID, so that a synchronization module acquires the first transaction statements corresponding to the released global transaction ID from the plurality of data nodes.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>in response to writing the global transaction ID into the transaction processing list, further writing at least one of the following contents into the transaction processing list:</claim-text><claim-text>information about data nodes; and</claim-text><claim-text>transaction processing status.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>in response to sending the transaction commit request messages to the plurality of data nodes, sending the transaction processing list to the plurality of data nodes.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. A data synchronization method for databases, comprising:<claim-text>acquiring both a to-be-processed transaction and a global transaction ID corresponding to the to-be-processed transaction from a transaction processing list;</claim-text><claim-text>querying a global transaction manager to identify whether the global transaction ID of the to-be-processed transaction is released;.</claim-text><claim-text>in response to the global transaction ID of the to-be-processed transaction being released, acquiring first transaction statements corresponding to the global transaction ID from a plurality of data nodes of a distributed database;</claim-text><claim-text>converting the acquired first transaction statements into second transaction statements adapted to a standalone database for execution;</claim-text><claim-text>sending the second transaction statements to the standalone database; and</claim-text><claim-text>updating the to-be-processed transaction corresponding to global transaction ID in the transaction processing list to be &#x201c;processed&#x201d;.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein sending the second transaction statements to the standalone database comprises:<claim-text>assembling all the second transaction statements into a single complete transaction, and sending the single complete transaction to the standalone database.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. A device, comprising:<claim-text>a memory configured to store a program;</claim-text><claim-text>a processor configured to execute the program stored in the memory, wherein the program stored in the memory, when executed by the processor, causes the processor to perform a data synchronization method for databases comprising:</claim-text><claim-text>receiving a transaction start request sent by a client in response to the transaction start request, applying to a global transaction manager for a global transaction ID;</claim-text><claim-text>receiving the global transaction ID fed back by the global transaction manager, and feeding back a transaction start success message to the client;</claim-text><claim-text>in the case where the global transaction ID fed back by the global transaction manager is received, receiving transaction request messages sent by the client, wherein the transaction request messages carry first transaction statements to be executed;</claim-text><claim-text>sending the global transaction ID and the transaction request messages to a plurality of data nodes of a distributed database;</claim-text><claim-text>receiving transaction response results fed back by the plurality of data nodes;</claim-text><claim-text>in the case where the transaction response results fed back by the plurality of data nodes are all successful, feeding back a transaction response success message to the client;</claim-text><claim-text>receiving transaction commit request messages sent by the client, and writing the global transaction ID into a transaction processing list;</claim-text><claim-text>sending the transaction commit request messages to the plurality of data nodes;</claim-text><claim-text>receiving transaction commit results fed back by the plurality of data nodes; and in the case where all the transaction commit results fed back by the plurality of data nodes are successful, feeding back a transaction commit success message to the client, and applying to the global transaction manager to release the global transaction ID, so that a synchronization module acquires the first transaction statements corresponding to the released global transaction ID from the plurality of data nodes.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. A non-transitory computer readable storage medium storing a computer executable instruction which, when executed by a processor, causes the processor to perform<claim-text>the method of <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>in response to sending the transaction commit request messages to the plurality of data nodes, sending the transaction processing list to the plurality of data nodes.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The device of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the data synchronization method further comprises:<claim-text>in response to writing the global transaction ID into the transaction processing list, further writing at least one of the following contents into the transaction processing list:</claim-text><claim-text>information about data nodes; and</claim-text><claim-text>transaction processing status.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The device of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the data synchronization method further comprises:<claim-text>in response to sending the transaction commit request messages to the plurality of data nodes, sending the transaction processing list to the plurality of data nodes.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the data synchronization method further comprises:<claim-text>in response to sending the transaction commit request messages to the plurality of data nodes, sending the transaction processing list to the plurality of data nodes.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A device, comprising:<claim-text>a memory configured to store a program;</claim-text><claim-text>a processor configured to execute the program stored in the memory, wherein the program stored in the memory, when executed by the processor, causes the processor to perform the method of <claim-ref idref="CLM-00004">claim 4</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The device of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein sending the second transaction statements to the standalone database comprises:<claim-text>assembling all the second transaction statements into a single complete transaction, and sending the single complete transaction to the standalone database.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the method further comprising:<claim-text>in response to writing the global transaction ID into the transaction processing list, further writing at least one of the following contents into the transaction processing list:</claim-text><claim-text>information about data nodes; and</claim-text><claim-text>transaction processing status.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the method further comprises:<claim-text>in response to sending the transaction commit request messages to the plurality of data nodes, sending the transaction processing list to the plurality of data nodes.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the method further comprises:<claim-text>in response to sending the transaction commit request messages to the plurality of data nodes, sending the transaction processing list to the plurality of data nodes.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A non-transitory computer readable storage medium storing a computer executable instruction which, when executed by a processor, causes the processor to perform the method of <claim-ref idref="CLM-00004">claim 4</claim-ref>.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, the method further comprises:<claim-text>assembling all the second transaction statements into a single complete transaction, and sending the single complete transaction to the standalone database.</claim-text></claim-text></claim></claims></us-patent-application>