<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004516A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004516</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363106</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>13</main-group><subgroup>42</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>13</main-group><subgroup>4221</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>13</main-group><subgroup>4282</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYNCHRONOUS SERIAL INTERFACE ALLOWING COMMUNICATION WITH MULTIPLE PERIPHERAL DEVICES USING A SINGLE CHIP SELECT</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>Texas Instruments Incorporated</orgname><address><city>Dallas</city><state>TX</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>HEGDE</last-name><first-name>Ganapathi</first-name><address><city>Bengaluru</city><country>IN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>SHAH</last-name><first-name>Krushal</first-name><address><city>Dallas</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>GARG</last-name><first-name>Mayank</first-name><address><city>Murphy</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>OSSA</last-name><first-name>Luis Eduardo</first-name><address><city>Plano</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>BIST</last-name><first-name>Vashist</first-name><address><city>Bengaluru</city><country>IN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A synchronous serial bus peripheral circuit includes a peripheral identification (ID) register and a state machine circuit. The state machine circuit is coupled to the peripheral ID register, and is configured to transmit a status value based on a peripheral ID field of data received via the receiver shift register equaling a value stored in the peripheral ID register.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="203.54mm" wi="158.75mm" file="US20230004516A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="218.69mm" wi="164.93mm" file="US20230004516A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="246.97mm" wi="127.08mm" orientation="landscape" file="US20230004516A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="173.48mm" wi="133.43mm" orientation="landscape" file="US20230004516A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="245.36mm" wi="144.78mm" orientation="landscape" file="US20230004516A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="250.36mm" wi="167.81mm" orientation="landscape" file="US20230004516A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="240.96mm" wi="152.06mm" file="US20230004516A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="133.86mm" wi="152.15mm" file="US20230004516A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="250.95mm" wi="143.93mm" orientation="landscape" file="US20230004516A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="253.41mm" wi="95.08mm" orientation="landscape" file="US20230004516A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">Computers and other electronic systems use serial interfaces to provide for transfer of data between connected devices. Serial peripheral interface (SPI) is one type of serial communication interface that provides synchronous transfer of data between a host device, such as a microcontroller, and one or more peripherals (peripheral devices). In SPI, the host device generates a clock signal, a select signal and an input data signal (e.g., data transferred to the peripheral devices). The peripheral devices receive the input data signal synchronous with the clock signal while the select signal is active, and generate, synchronous with the clock signal, a data output signal for reception by the host device.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0003" num="0002">In one example, a synchronous serial bus peripheral circuit includes a peripheral identification (ID) register and a circuit. The circuit is coupled to the peripheral ID register, and is configured to transmit a status value based on a peripheral ID field of data received via the receiver shift register equaling a value stored in the peripheral ID register.</p><p id="p-0004" num="0003">In another example, a method includes activating, by a host device coupled to a synchronous serial bus, a chip select signal to initiate a data frame on the synchronous serial bus. The host device transmits peripheral ID value and an address value in the data frame. A peripheral device coupled to the synchronous serial bus receives the peripheral ID value and the address value in the data frame. The peripheral device compares the peripheral ID value to a general call ID and a peripheral ID assigned to the peripheral device. Responsive to the peripheral ID value being equal to the peripheral ID assigned to the peripheral device, the peripheral device transmits, in the data frame, a status value while receiving the address value.</p><p id="p-0005" num="0004">In a further example, a motor controller includes a synchronous serial bus peripheral circuit. The synchronous serial bus peripheral circuit is for communicating with an external controller. The synchronous serial bus peripheral circuit includes a peripheral identification (ID) register, a receiver shift register, and a control circuit. The control circuit is coupled to the peripheral ID register and the receiver shift register, and is configured to transmit a status value to the external controller based on a peripheral ID field received via the receiver shift register equaling a value stored in the peripheral ID register.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0006" num="0005">For a detailed description of various examples, reference will now be made to the accompanying drawings in which:</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a block diagram for an example system that includes a synchronous serial bus as described herein.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a timing diagram of example signals of a synchronous serial bus as described herein.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>H</figref> show example transactions using a synchronous serial bus as described herein.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a block diagram for a synchronous serial bus peripheral interface circuit suitable for use in a synchronous serial bus as described herein.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a schematic level diagram for an example conflict detection circuit suitable for use in a synchronous serial bus peripheral interface circuit as described herein.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a timing diagram of example signals in the conflict detection circuit of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram of an example motor circuit that includes a synchronous serial bus as described herein.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a block diagram for a motor controller that includes a synchronous serial bus peripheral interface circuit as described herein.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a timing diagram of signals generated to synchronize a clock in the motor controller of <figref idref="DRAWINGS">FIG. <b>8</b></figref> to a synchronous serial interface clock.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0016" num="0015">The same reference numbers and reference designators are used in the drawings to designate the same or similar (functionally and/or structurally) features.</p><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0017" num="0016">The serial peripheral interface (SPI) is a point-to-point synchronous serial communication interface. In conventional SPI, a host device provides a dedicated chip select for each peripheral device that communicates with the host device. Thus, in a system communicating via SPI, a host device must provide as many chip selects as there are peripheral devices coupled to the host device. The requirement for individual chip selects limits the number of peripheral devices that can be accommodated in the system. To reduce the number of chip selects needed, peripheral devices may be daisy-chained. However, a failure anywhere in the chain of peripherals affects communication with all of the peripherals.</p><p id="p-0018" num="0017">The synchronous serial interface described herein allows a host device to communicate with multiple peripheral devices, arranged in parallel, using a single chip select. The synchronous serial interface adds framing to the underlying physical layer (e.g., the SPI physical layer, referred to as a PHY), where a data frame includes a command field, an address field, a data field, and a check field. Applying the data frame and associated fields, a host device can randomly access the registers of multiple peripheral devices using a single chip select. In some embodiments, the host device can simultaneously write to multiple peripheral devices using a peripheral identification (ID) value reserved as a &#x201c;general call&#x201d; ID. The host device can also simultaneously read and write registers at the same address or different addresses of a peripheral device. The peripheral devices may include conflict detection that monitors bus activity and detects conflicts on the serial bus.</p><p id="p-0019" num="0018">The synchronous serial interface described herein is suitable for use in various applications that implement synchronous serial communication. For example, the synchronous serial communication interface may be used in applications that employ SPI for communication, such as motor control applications and other microcontroller communication applications.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a block diagram for a system <b>100</b> that communicates via a synchronous serial communication interface as described herein. The system <b>100</b> includes controller <b>102</b>, peripheral devices <b>103</b> (including peripheral devices <b>104</b> and <b>106</b>), a peripheral device <b>108</b>, and a peripheral device <b>110</b>. The controller <b>102</b> communicates with the peripheral devices <b>103</b>, the peripheral device <b>108</b>, and the peripheral device <b>110</b> via a synchronous serial communication interface, which may be SPI compatible in some embodiments of the system <b>100</b>. The controller <b>102</b> is a control circuit, such as a microcontroller, and includes a synchronous serial bus host circuit <b>122</b> that provides an interface for communication with the peripheral devices <b>103</b>, peripheral device <b>108</b>, and peripheral device <b>110</b>.</p><p id="p-0021" num="0020">The synchronous serial bus host circuit <b>122</b> includes a clock output <b>122</b>A, a data output <b>122</b>D, a data input <b>122</b>C, and chip select outputs <b>122</b>B, <b>122</b>E, and <b>122</b>F. The synchronous serial bus host circuit <b>122</b> provides a clock signal <b>114</b> (serial bus clock signal) to the peripheral devices <b>103</b>, the peripheral device <b>108</b>, and the peripheral device <b>110</b> via the clock output <b>122</b>A. The synchronous serial bus host circuit <b>122</b> transmits data to the peripheral devices <b>103</b>, the peripheral device <b>108</b>, and the peripheral device <b>110</b> via the data output <b>122</b>D, and receives data from the peripheral devices <b>103</b>, the peripheral device <b>108</b>, and the peripheral device <b>110</b> via the data input <b>122</b>C. The synchronous serial bus host circuit <b>122</b> activates a chip select signal <b>124</b> via the chip select output <b>122</b>E to enable communication with the peripheral device <b>108</b>, and activates a chip select signal <b>126</b> via the chip select output <b>122</b>F to enable communication with the peripheral device <b>110</b>. The synchronous serial bus host circuit <b>122</b> activates a chip select signal <b>116</b> via the chip select output <b>1226</b> to enable communication with one or more of the peripheral devices <b>103</b>.</p><p id="p-0022" num="0021">The peripheral devices <b>103</b> include peripheral device <b>104</b> and peripheral device <b>106</b>. In practice, the peripheral devices <b>103</b> may include one more peripheral devices. Each of the peripheral devices <b>103</b> includes a synchronous serial bus peripheral circuit <b>112</b>. The synchronous serial bus peripheral circuit <b>112</b> includes a clock input <b>112</b>A, a chip select input <b>112</b>B, a serial data output <b>112</b>C, and a serial data input <b>112</b>D. The clock input <b>112</b>A is coupled to the clock output <b>122</b>A of the synchronous serial bus host circuit <b>122</b> for receipt of the clock signal <b>114</b>. The synchronous serial bus peripheral circuit <b>112</b> applies the clock signal <b>114</b> to synchronize data reception and transmission. The chip select input <b>1126</b> is coupled to the chip select output <b>1226</b> for receipt of the chip select signal <b>116</b>. The serial data output <b>112</b>C is coupled to data input <b>122</b>C of the synchronous serial bus host circuit <b>122</b>, and the synchronous serial bus peripheral circuit <b>112</b> provides a data signal <b>120</b> to the synchronous serial bus host circuit <b>122</b> via the serial data output <b>112</b>C. The serial data input <b>112</b>D is coupled to the data output <b>122</b>D for receipt of the data signal <b>118</b> from the synchronous serial bus host circuit <b>122</b>.</p><p id="p-0023" num="0022">To enable communication between the controller <b>102</b> and the peripheral devices <b>103</b>, where each of the peripheral devices <b>103</b> is coupled to the chip select output <b>122</b>B for receipt of the chip select signal <b>116</b>, the synchronous serial bus peripheral circuit <b>112</b> communicates with peripheral devices <b>103</b> via data frames defined by the chip select signal <b>116</b> and the data signal <b>118</b>. <figref idref="DRAWINGS">FIG. <b>2</b></figref> shows an example of a data frame <b>200</b> generated by the synchronous serial bus host circuit <b>122</b>. The synchronous serial bus host circuit <b>122</b> may be a conventional synchronous serial bus host circuit (e.g., a conventional SPI host) with frame generation provided by software executed by the controller <b>102</b>. The synchronous serial bus host circuit <b>122</b> initiates the data frame <b>200</b> by activating the chip select signal <b>116</b> at leading edge <b>202</b>, and terminates the data frame <b>200</b> by deactivating the chip select signal <b>116</b> at trailing edge <b>204</b>. The data frame <b>200</b> includes a command field <b>206</b>, an address field <b>208</b>, a write data field <b>210</b>, and check field <b>212</b> for transfer of information from the synchronous serial bus host circuit <b>122</b> to the synchronous serial bus peripheral circuit <b>112</b>. The command field <b>206</b> and the address field <b>208</b> form a header of the data frame <b>200</b>.</p><p id="p-0024" num="0023">The command field <b>206</b> may include sub-fields, such as: a peripheral identification (ID) field, a read/write field, a data length field, and/or a check enable field. The peripheral ID sub-field may include a peripheral ID value that selects one or more of the peripheral devices <b>103</b> for communication. For example, a 4-bit peripheral ID field may be used to select one of 15 different peripheral devices. In some embodiments, one value of the peripheral ID field may be used as a &#x201c;general call&#x201d; ID value that selects all of the peripheral devices <b>103</b> receiving the data frame <b>200</b> to perform a write operation.</p><p id="p-0025" num="0024">The read/write sub-field may specify whether data provided in the write data field <b>210</b> is to be written to a register of the synchronous serial bus peripheral circuit <b>112</b> (a write operation is to be performed) and/or data read from a register of the synchronous serial bus peripheral circuit <b>112</b> is to be transferred to the synchronous serial bus host circuit <b>122</b> (a read operation is to be performed) via the data frame <b>200</b>. The data frame <b>200</b> may allow simultaneous writing and reading of data in the synchronous serial bus peripheral circuit <b>112</b>. In a data frame <b>200</b>, read data may be provided from a different address than the address to which data is written in the data frame <b>200</b>.</p><p id="p-0026" num="0025">The data length field may specify a number of data bytes or data words (e.g., 16-bit data values) to be transferred in the write data field <b>210</b>. For example, the number of data words to be transferred may be equal to the value of the data length field plus one in some embodiments. In some embodiments of the data frame <b>200</b>, the number of bytes or words transferred may be defined by the active duration of the chip select signal <b>116</b>, rather than by the value of a data length field.</p><p id="p-0027" num="0026">The check enable field may specify whether the synchronous serial bus peripheral circuit <b>112</b> is to include a check character (e.g., parity or cyclic redundancy check) in the data transmitted to the synchronous serial bus host circuit <b>122</b>. The check enable field may be provided at various locations within the command field <b>206</b> (e.g., at the end or the middle of the command field <b>206</b>).</p><p id="p-0028" num="0027">The address field <b>208</b> specifies a value that identifies a register of the synchronous serial bus peripheral circuit <b>112</b> to be written and/or read by the data frame <b>200</b>. For example, the address field <b>208</b> may specify a first (a starting address) of multiple sequential registers to be written and/or read by the data frame <b>200</b>.</p><p id="p-0029" num="0028">The write data field <b>210</b> contains data bytes or data words transferred from the synchronous serial bus host circuit <b>122</b> to the synchronous serial bus peripheral circuit <b>112</b>. That is, the write data field <b>210</b> contains data that is to be written to a register identified by the value specified in the address field <b>208</b>.</p><p id="p-0030" num="0029">The check field <b>212</b> contains a check value that may be used by the synchronous serial bus peripheral circuit <b>112</b> to verify and/or correct the data provided in the command field <b>206</b>, the address field <b>208</b>, and/or the write data field <b>210</b>. For example, the check field <b>212</b> in may contain an 8-bit cyclic redundancy check value computed by the synchronous serial bus host circuit <b>122</b> based on the command field <b>206</b>, the address field <b>208</b>, and/or the write data field <b>210</b>. In the data frame <b>200</b>, the data signal <b>120</b> transfers data from the synchronous serial bus peripheral circuit <b>112</b> to the synchronous serial bus host circuit <b>122</b>. The frame <b>200</b> includes a status field <b>214</b>, a read data field <b>216</b>, and a check field <b>218</b>. In the status field <b>214</b>, the read data field <b>216</b>, and the check field <b>218</b>, the data signal <b>120</b> is driven by one of the synchronous serial bus peripheral circuits <b>112</b> having a peripheral ID value that is equal to the peripheral ID value received in the command field <b>206</b>. The status field <b>214</b> is transmitted coincident with reception of the address field <b>208</b>. The status field <b>214</b> may include various status values specifying the condition of the synchronous serial bus peripheral circuit <b>112</b> and/or the peripheral devices <b>103</b>. Examples of status values include fault codes (such as write data verification errors) and operational status codes.</p><p id="p-0031" num="0030">The read data field <b>216</b> contains data bytes or data words transferred from the synchronous serial bus peripheral circuit <b>112</b> to the synchronous serial bus host circuit <b>122</b>. That is, the read data field <b>216</b> contains data that is read from a register of the synchronous serial bus peripheral circuit <b>112</b>. An address of the register to be read may be specified in the address field <b>208</b> of the data frame <b>200</b> currently being received or a data frame <b>200</b> previously received.</p><p id="p-0032" num="0031">The check field <b>218</b> contains a check value that may be used by the synchronous serial bus host circuit <b>122</b> to verify and/or correct the data provided in the status field <b>214</b> and/or the read data field <b>216</b>. For example, the status field <b>214</b> may contain an 8-bit cyclic redundancy check value computed by the synchronous serial bus peripheral circuit <b>112</b> based on the status field <b>214</b> and/or the read data field <b>216</b>.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>H</figref> show example transactions using a synchronous serial bus as described herein. In <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the synchronous serial bus host circuit <b>122</b> transmits a command field and an address field to set an address for register reads in the synchronous serial bus peripheral circuit <b>112</b> during a subsequent frame. While receiving the address field, the synchronous serial bus peripheral circuit <b>112</b> transmits a status value to the synchronous serial bus host circuit <b>122</b>. In one example, the data length field is set to 0, the read/write field is set to 1 to indicate the read pointer in the synchronous serial bus peripheral circuit <b>112</b> is to set to the value contained in the address field, and the check enable field is set to 0 to indicate that no check value is to be provided.</p><p id="p-0034" num="0033">In <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, the synchronous serial bus host circuit <b>122</b> transmits a command field, an address field, and a data word to the synchronous serial bus peripheral circuit <b>112</b> identified in the command field (the peripheral ID sub-field). The address contained in the address field specifies the register to be written. While receiving the address field, the synchronous serial bus peripheral circuit <b>112</b> transmits a status value to the synchronous serial bus host circuit <b>122</b>. While receiving the data word to be written to, the synchronous serial bus peripheral circuit <b>112</b> transmits a register value (e.g., the current value of the register to be written to or the value of the register designated by the current value of a read pointer of the synchronous serial bus peripheral circuit <b>112</b>). In one example of a single word write/read frame as shown in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, in the command field, the data length field is set to 0, the read/write field is set to 0 (to indicate the write pointer in the synchronous serial bus peripheral circuit <b>112</b> is to be set to the value contained in the address field and a register corresponding to the write pointer is to be written), and the check enable field is set to 0 to indicate that no check value is to be provided.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>3</b>C</figref> is similar to <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, and illustrates a transaction in which the synchronous serial bus host circuit <b>122</b> writes a data word, and provides a check value to verify and/or correct the data transferred from the synchronous serial bus host circuit <b>122</b>. The synchronous serial bus peripheral circuit <b>112</b> to which the transaction is directed transmits status, a read value, and a check value to the synchronous serial bus host circuit <b>122</b>. In one example, the data length field is set to 0, the read/write field is set to 0 to indicate the write pointer in the synchronous serial bus peripheral circuit <b>112</b> is to be set to the value contained in the address field and a register corresponding to the write pointer is to be written, and the check enable field is set to 1 to indicate that a check value is to be provided.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>3</b>D</figref> is similar to <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, and illustrates a transaction in which the synchronous serial bus host circuit <b>122</b> writes two data words, and provides a check value to verify and/or correct the data transferred from the synchronous serial bus host circuit <b>122</b>. The synchronous serial bus peripheral circuit <b>112</b> to which the transaction is directed transmits status, two read values, and a check value to the synchronous serial bus host circuit <b>122</b>. In one example, the data length field is set to 1 to indicate that two data words are to be transferred, the read/write field is set to 0 to indicate the write pointer in the synchronous serial bus peripheral circuit <b>112</b> is to be set to the value contained in the address field and register corresponding to the write pointer is to be written, and the check enable field is set to 1 to indicate that a check value is to be provided.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>3</b>E</figref> is similar to <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, and illustrates a transaction in which the synchronous serial bus host circuit <b>122</b> writes three data words, and provides a check value to verify and/or correct the data transferred from the synchronous serial bus host circuit <b>122</b>. The synchronous serial bus peripheral circuit <b>112</b> to which the transaction is directed transmits status, three read values, and a check value to the synchronous serial bus host circuit <b>122</b>. In one example, the data length field is set to 2 to indicate that three data words are to be transferred, the read/write field is set to 0 to indicate the write pointer in the synchronous serial bus peripheral circuit <b>112</b> is to be set to the value contained in the address field and register corresponding to the write pointer is to be written, and the check enable field is set to 1 to indicate that a check value is to be provided.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>3</b>F</figref> is similar to <figref idref="DRAWINGS">FIG. <b>3</b>E</figref>, and illustrates a transaction in which the synchronous serial bus host circuit <b>122</b> transfers four data words, and provides a check value to verify and/or correct the data transferred from the synchronous serial bus host circuit <b>122</b>. The synchronous serial bus peripheral circuit <b>112</b> to which the transaction is directed transmits status, four read values, and a check value to the synchronous serial bus host circuit <b>122</b>. In one example, the data length field is set to 3 to indicate that four data words are to be transferred, the read/write field is set to 0 to indicate the write pointer in the synchronous serial bus peripheral circuit <b>112</b> is to be set to the value contained in the address field and register corresponding to the write pointer is to be written, and the check enable field is set to 1 to indicate that a check value is to be provided.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>3</b>G</figref> shows a single word read transaction. In <figref idref="DRAWINGS">FIG. <b>3</b>G</figref>, the synchronous serial bus host circuit <b>122</b> transmits a command field, an address field, and a dummy data word to the synchronous serial bus peripheral circuit <b>112</b> identified in the command field (the peripheral ID field). In some example embodiments, the write data field and the CRC field are ignored during read transactions. The address contained in the address field specifies the register to be read. While receiving the address field, the synchronous serial bus peripheral circuit <b>112</b> transmits a status value to the synchronous serial bus host circuit <b>122</b>. While receiving the dummy data word, the synchronous serial bus peripheral circuit <b>112</b> transmits a register value (e.g., the value of the register identified in the address field). In one example, the data length field is set to 0, the read/write field is set to 1 to indicate the read pointer in the synchronous serial bus peripheral circuit <b>112</b> is to be set to the value contained in the address field, and the check enable field is set to 0 to indicate that no check value is to be provided.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>3</b>H</figref> shows a two-frame transaction that allows simultaneous reading and writing from two different addresses. The first frame sets the read pointer as shown in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>. In the second frame, the synchronous serial bus host circuit <b>122</b> writes two data words to the synchronous serial bus peripheral circuit <b>112</b>, and simultaneously reads two data words the from the synchronous serial bus peripheral circuit <b>112</b>. The two data words read from the synchronous serial bus peripheral circuit <b>112</b> are read from the register at the address value transferred in the first frame and the next register in the peripheral device <b>112</b>, and the two data words transferred from the host in the second frame are written to registers of the synchronous serial bus peripheral circuit <b>112</b> at the address value transferred in the second frame and the next register in the peripheral device <b>112</b>. The read pointer and write pointers are incremented with each successive data word transfer of the second frame. In one example of the second frame, the data length field is set to 1 to indicate that two data words are to be transferred, the read/write field is set to 0 to indicate the write pointer in the synchronous serial bus peripheral circuit <b>112</b> is to be set to the value contained in the address field and the register corresponding to the write pointer is to be written, and the check enable field is set to 0 to indicate that no check value is to be provided.</p><p id="p-0041" num="0040">The two-frame transaction of <figref idref="DRAWINGS">FIG. <b>3</b>H</figref> may be used to simultaneously read from a first peripheral device (e.g., the peripheral device <b>106</b>) and write to a second peripheral device (e.g., the peripheral device <b>104</b>). In such operation, the frame <b>302</b> is addressed to the peripheral device <b>106</b> and sets the read pointer of the peripheral device <b>106</b> as shown in and explained with regard to <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>. The frame <b>302</b> is terminated prior to transmission of read data by the peripheral device <b>106</b>. The frame <b>302</b> is terminated prior to transmission of read data to enable the peripheral device <b>106</b> to transmit the read data in the subsequent frame (frame <b>304</b>). Thus, in the frame <b>304</b>, as the peripheral device <b>104</b> receives write data, the peripheral device <b>106</b> transmits read data. The frame <b>302</b> may set the read pointer of the peripheral device <b>106</b> to a different address than the address loaded into the write pointer of the peripheral device <b>104</b> by the frame <b>304</b>.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a block diagram for an example synchronous serial bus peripheral circuit <b>112</b>. The synchronous serial bus peripheral circuit <b>112</b> includes a receiver shift register <b>402</b>, a transmitter shift register <b>404</b>, a state machine circuit <b>406</b>, receive registers <b>414</b>, a receiver check circuit <b>416</b>, a peripheral ID register <b>418</b>, a conflict detection circuit <b>420</b>, a transmit check circuit <b>422</b>, a read data register <b>424</b>, and a register interface <b>426</b>. The receiver shift register <b>402</b> receives serial data received at the serial data input <b>112</b>D at edges of the clock signal <b>114</b> received at the clock input <b>112</b>A for conversion from serial to parallel format. The transmitter shift register <b>404</b> converts parallel data bytes or words to serial format for transmission via the serial data output <b>112</b>C. The transmitter shift register <b>404</b> shifts at edges of the clock signal received at the clock input <b>112</b>A.</p><p id="p-0043" num="0042">The receiver shift register <b>402</b> and the transmitter shift register <b>404</b> are controlled by the state machine circuit <b>406</b>. The state machine circuit <b>406</b> is a control circuit that may implemented using dedicated circuitry, a microcontroller, etc. The state machine circuit <b>406</b> includes a receive finite state machine (FSM) <b>408</b>, a transmit FSM <b>410</b>, and counters <b>412</b>. The receive FSM <b>408</b> controls reception of data via the receiver shift register <b>402</b>, and the transmit FSM <b>410</b> controls transmission of data via the transmitter shift register <b>404</b>. The counters <b>412</b> count the bits and/or bytes received in a frame to identify the frame fields. For example, the receive FSM <b>408</b> detects the start of a frame at the leading edge of the chip select signal <b>116</b>, and enables the counters <b>412</b> to count rising or falling edges of the clock signal <b>114</b>. In an embodiment of the synchronous serial bus peripheral circuit <b>112</b> that applies the frame formatting of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, when the counters <b>412</b> have counted 8 edges of the clock signal <b>114</b>, the receive FSM <b>408</b> recognizes that a command field has been received and transfers the command data, and various sub-fields thereof, from the receiver shift register <b>402</b> to the receive registers <b>414</b>. A peripheral ID value is transferred from the receiver shift register <b>402</b> to the peripheral ID register <b>428</b>, a data length value is transferred from the receiver shift register <b>402</b> to the data length register <b>430</b>, etc. Some embodiments of the receive FSM <b>408</b> may transfer sub-field values from the receiver shift register <b>402</b> to the receive registers <b>414</b> as soon as each sub-field is received. The receive FSM <b>408</b> compares the peripheral ID stored in the peripheral ID register <b>428</b> to the peripheral ID value that is assigned to the synchronous serial bus peripheral circuit <b>112</b> and stored in the peripheral ID register <b>418</b>. If the peripheral ID stored in the peripheral ID register <b>428</b> matches the peripheral ID value stored in the peripheral ID register <b>418</b> or matches a general call ID value, then frame reception continues. The general call ID is a broadcast ID that allows all instances of the synchronous serial bus peripheral circuit <b>112</b> receiving a frame to respond to the frame.</p><p id="p-0044" num="0043">Having received the command field and determined that the synchronous serial bus peripheral circuit <b>112</b> is to respond to the frame, when the receive FSM <b>408</b> counts a next 8 edges of the clock signal <b>114</b>, the receive FSM <b>408</b> recognizes that an address field has been received and transfers the address value from the receiver shift register <b>402</b> to the write pointer <b>432</b> (an address register) and/or the read pointer <b>434</b> (an address register). After receipt of the address field, the receive FSM <b>408</b> recognizes receipt of data bytes/words based on the count of edges provided by the counters <b>412</b>, and transfers received data bytes/words to the receive registers <b>414</b> (e.g., to a write data register WDATA<b>0</b>-WDATA<b>3</b>). When a number of data values specified by the data length register <b>430</b> has been received, if a check value is provided in the received data (as indicated by the command field), the receive FSM <b>408</b> recognizes receipt of the check value. The receiver check circuit <b>416</b> applies the check value and the received data protected by the check value to determine whether an error is present in the received data, and to correct the error in some implementations.</p><p id="p-0045" num="0044">The transmit FSM <b>410</b> recognizes the various transmission fields and controls transfer of data to and from the transmitter shift register <b>404</b> based on count of edges of the clock signal <b>114</b>. For example, at the start of a frame, the transmit FSM <b>410</b> may transfer a status value provided via the register interface <b>426</b> to the transmitter shift register <b>404</b>. When the counters <b>412</b> have counted the first 8 edges of the clock signal <b>114</b> in the frame, and if the synchronous serial bus peripheral circuit <b>112</b> is selected (by receipt of peripheral ID of the synchronous serial bus peripheral circuit <b>112</b> or a general call ID) the transmit FSM <b>410</b> will initiate shifting of the status value to the serial data output <b>112</b>C at the edges of the clock signal <b>114</b>. After the status value has been shifted out, the transmit FSM <b>410</b> will successively shift out read data values selected via the read pointer <b>434</b> and provided via the register interface <b>426</b> and the read data register <b>424</b>. The transmit check circuit <b>422</b> computes a check value based on the data transmitted, and when data transmission is complete, the transmit FSM <b>410</b> loads the check value into the transmitter shift register <b>404</b> and serially transmits the bits of the check value.</p><p id="p-0046" num="0045">The register interface <b>426</b> transfers received data stored in the receive registers <b>414</b> to circuitry external to the synchronous serial bus peripheral circuit <b>112</b>. For example, the register interface <b>426</b> transfers write data values received via the receiver shift register <b>402</b> to registers external to the synchronous serial bus peripheral circuit <b>112</b> (e.g. registers or other storage devices within peripheral device <b>103</b> but external to circuit <b>112</b>). The register interface <b>426</b> also transfers data (from, for example, peripheral device <b>103</b>) to be transmitted via the synchronous serial bus peripheral circuit <b>112</b> to the read data register <b>424</b>. For example, the register interface <b>426</b> transfers status values and read data values to the read data register <b>424</b> for transmission via the transmitter shift register <b>404</b>.</p><p id="p-0047" num="0046">The conflict detection circuit <b>420</b> monitors the serial data output <b>112</b>C for conflicts that can corrupt data transmitted by the synchronous serial bus peripheral circuit <b>112</b>. For example, a conflict can occur on the data signal <b>120</b> when a peripheral device is asynchronously added to the serial bus and drives the data signal <b>120</b>. The conflict detection circuit <b>420</b> detects such a conflict, and flags the detected conflict as a fault. A conflict may be detected by comparing the data at the serial data output <b>112</b>C to the data <b>436</b> shifted out of the transmitter shift register <b>404</b>. <figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a schematic level diagram for an example conflict detection circuit <b>420</b>. The conflict detection circuit <b>420</b> includes a flip-flop <b>502</b> and an exclusive-OR gate <b>504</b>. The driver circuit <b>516</b> is coupled to the serial data output <b>112</b>C, and to the transmitter shift register <b>404</b> (<figref idref="DRAWINGS">FIG. <b>4</b></figref>) for receipt of the data <b>436</b> (SDO_OUT) to be driven to the data output <b>112</b>C. The driver circuit <b>516</b> includes a driver <b>506</b> and a receiver <b>508</b> coupled to the serial data output <b>112</b>C. The driver and receiver control signals <b>518</b> and <b>522</b> may be provided by the state machine circuit <b>406</b> to enable the driver <b>506</b> and the receiver <b>508</b> during transmission of the data <b>436</b>. The receiver control signal <b>518</b> enables the driver <b>506</b> only when the synchronous serial bus peripheral circuit <b>112</b> is selected (when the chip select signal <b>116</b> is low, and the peripheral ID stored in the peripheral ID register <b>428</b> matches the peripheral ID value that is stored in the peripheral ID register <b>418</b>). The exclusive-OR gate <b>504</b> (or other comparison circuitry) compares the data <b>436</b> transmitted by the transmitter shift register <b>404</b> to the data signal <b>120</b> present at the serial data output <b>112</b>C, and the flip-flop <b>502</b> samples the result of the comparison at an edge of the clock signal <b>114</b>. A conflict is detected when the data <b>436</b> being transmitted by the synchronous serial bus peripheral circuit <b>112</b> is different from the data signal <b>120</b> present at the serial data output <b>112</b>C at the edge of the clock signal <b>114</b>. Responsive to a detected conflict, the synchronous serial bus peripheral circuit <b>112</b> may discontinue transmission (e.g., disable drive of the serial data output <b>112</b>C) for the remainder of the frame, and/or assert a conflict detected flag in transmitted status.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows example signals in the conflict detection circuit <b>420</b>. At edge <b>602</b> of the clock signal <b>114</b>, data <b>436</b> being transmitted by the synchronous serial bus peripheral circuit <b>112</b> is different from the data <b>512</b> detected at the serial data output <b>112</b>C. As a result of the difference, the flip-flop <b>502</b> sets the conflict fault flag <b>514</b>.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows an example motor circuit <b>700</b> that includes a synchronous serial bus using the synchronous serial bus peripheral circuit <b>112</b>. The motor circuit <b>700</b> includes a controller <b>701</b>, motor controller <b>702</b>, motor controller <b>704</b>, motor controller <b>706</b>, motor <b>708</b>, motor <b>710</b>, and motor <b>712</b>. The motors <b>708</b>, <b>710</b> and <b>712</b>, which may be three-phase electric motors, are respectively coupled to and controlled by the motor controllers <b>702</b>, <b>704</b>, and <b>706</b>, respectively. The motor controllers <b>702</b>, <b>704</b>, and <b>706</b> are coupled to the controller <b>701</b>. The controller <b>701</b> is an implementation of the controller <b>102</b>, and may include a microcontroller, logic circuitry, application specific integrated circuitry, memory and/or a combination thereof and may additionally include, in some embodiments, software. Controller <b>701</b> may be configured to control the motor controllers <b>702</b>, <b>704</b>, and <b>706</b>. The controller <b>701</b> includes the synchronous serial bus host circuit <b>122</b>, and each of the motor controllers <b>702</b>, <b>704</b>, and <b>706</b> includes the synchronous serial bus peripheral circuit <b>112</b> to enable synchronous serial communication between the controller <b>701</b> and the motor controllers <b>702</b>, <b>704</b>, and <b>706</b>. The clock signal <b>114</b>, chip select signal <b>116</b>, data signal <b>118</b>, and data signal <b>120</b>, are coupled to each of the synchronous serial bus peripheral circuit <b>112</b> and to the synchronous serial bus host circuit <b>122</b>, such that the controller <b>701</b> accesses the motor controllers <b>702</b>, <b>704</b>, and <b>706</b> using framing with peripheral ID-based selection as described herein (e.g., as in <figref idref="DRAWINGS">FIG. <b>2</b></figref>). Only a single chip select terminal is needed on the controller <b>701</b> to enable communication with motor controllers <b>702</b>, <b>704</b>, and <b>706</b>, which reduces the cost of the controller <b>701</b>. Use of the general call peripheral ID allows the controller <b>701</b> to synchronize operations performed by the motor controllers <b>702</b>, <b>704</b>, and <b>706</b>. For example, the controller <b>701</b> may simultaneously write to a register of each of the motor controllers <b>702</b>, <b>704</b>, and <b>706</b> using the general call peripheral ID such that the motor controllers <b>702</b>, <b>704</b>, and <b>706</b> simultaneously perform a desired operation, such as synchronously stopping or starting multiple motors.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a block diagram for a portion of the motor controller <b>702</b> that applies the clock signal <b>114</b> to stabilize an internal clock. The internal clock may be used to control pulse modulation (PWM) applied to control the motor <b>708</b>. The circuitry <b>802</b> includes PWM control registers <b>804</b> that store PWM control values provided by the controller <b>701</b> via the synchronous serial bus peripheral circuit <b>112</b>. The PWM control registers store a PWM period value, PWM duty cycle values for three phases (U, V, and W), and PWM control flags (e.g., PWM enable/disable). A PWM generation circuit <b>806</b> applies the PWM control values to generate pulses for controlling transistors that drive a three-phase electrical motor (e.g., the motor <b>708</b>). In some embodiments, the PWM generation circuit <b>806</b> includes a period counter that generates the PWM pulse period based on the PWM period value, and counters that time each of the three duty cycles based on the U, V, and W duty cycle values as a fraction of the period.</p><p id="p-0051" num="0050">The controller <b>701</b> relies on synchronization of the PWM signals generated by the motor controller <b>702</b> to the timing of the controller <b>701</b> to perform functions such as sampling of motor feedback signals at each PWM cycle. Variation in the frequency of the internal clock of the motor controller <b>702</b>, relative to the clock of the controller <b>701</b>, can result in a PWM rate that is out of specification or can corrupt sampling by the controller <b>701</b>. The circuitry <b>802</b> synchronizes the internal clock of the motor controller <b>702</b> to the clock of the controller <b>701</b> to alleviate these issues. In the circuitry <b>802</b>, a count of clock cycles of the clock signal <b>114</b> in a time interval is compared, by the OSCTRIM circuit <b>810</b>, to a count of clock cycles of the oscillator <b>808</b> in the interval. Based on a result of the comparison, the frequency of the oscillator <b>808</b> is increased or decreased to set the oscillator frequency to a desired multiple/fraction of the frequency of the clock signal <b>114</b>. The OSCCNT_EN circuit <b>812</b> generates a count enable signal <b>813</b> representing a predetermined number of cycles of the clock signal <b>114</b>. For example, the count enable signal <b>813</b> may be active for 7 of every 8 cycles of the clock signal <b>114</b>. The OSC_CNT circuit <b>814</b> synchronizes the count enable signal <b>813</b> to the clock <b>815</b> generated by the oscillator <b>808</b>, and counts cycles of the clock <b>815</b> while the synchronized version of the count enable signal <b>813</b> is active. The OSC_CNT circuit <b>814</b> provides the count of cycles of the clock <b>815</b> to the OSCTRIM circuit <b>810</b> (oscillator trim circuit). Given a desired relationship of the frequency of the clock signal <b>114</b> to frequency of the clock <b>815</b>, the OSCTRIM circuit <b>810</b> compares the cycle count values and changes a frequency code <b>811</b> provided to the oscillator <b>808</b> to adjust the frequency of the clock <b>815</b>, such that the frequency of the clock <b>815</b> better matches the frequency of the clock signal <b>114</b> or a predetermined multiple/fraction thereof.</p><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows signals generated in the circuitry <b>802</b> as part of synchronization of the clock <b>815</b> to the clock signal <b>114</b> in the motor controller <b>702</b>. When the chip select signal <b>116</b> is activated to start a frame, the OSCCNT_EN circuit <b>812</b> initiates counting of cycles of the clock signal <b>114</b> to generate the count enable signal <b>813</b>. While <figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a single frame, synchronization may involve multiple frames. In <figref idref="DRAWINGS">FIG. <b>9</b></figref>, the OSCCNT_EN circuit <b>812</b> activates the count enable signal <b>813</b> for 7 of every 8 cycles of the clock signal <b>114</b> to exclude inter-byte time during which the clock signal <b>114</b> is low. Over the frame defined by the chip select signal <b>116</b>, the number of cycles of the clock signal <b>114</b> during activation of the count enable signal <b>813</b> is M, where M=N*7 and N is the number of activations of the count enable signal <b>813</b>. N may be selected (e.g., by the controller <b>701</b>) to achieve a desired accuracy of synchronization of the clock <b>815</b> and the clock signal <b>114</b>. For example, synchronization accuracy may increase as the number of cycles of the clock signal <b>114</b> applied to synchronize the clock <b>815</b> increases. The OSC_CNT circuit <b>814</b> synchronizes the count enable signal <b>813</b> to the clock <b>815</b> to produce the synchronized count enable signal <b>902</b>. For example, the OSC_CNT circuit <b>814</b> may include a flip-flop clocked by the clock <b>815</b> to synchronize the count enable signal <b>813</b>. The OSC_CNT circuit <b>814</b> counts the number of cycles of the clock <b>815</b> generated by the oscillator <b>808</b> during each activation of the synchronized count enable signal <b>902</b>. Over the frame defined by the chip select signal <b>116</b>, the number of cycles of the clock <b>815</b> during activation of the synchronized count enable signal <b>902</b> is L, where L=N*K and K is the number of cycles of the clock <b>815</b> during an activation of the synchronized count enable signal <b>902</b>. The OSCTRIM circuit <b>810</b> compares M and L, and adjusts the frequency of the clock <b>815</b> based on a result of the comparison.</p><p id="p-0053" num="0052">As used herein, the term &#x201c;couple&#x201d; may cover connections, communications, or signal paths that enable a functional relationship consistent with this description. For example, if device A provides a signal to control device B to perform an action, then: (a) in a first example, device A is coupled to device B; or (b) in a second example, device A is coupled to device B through intervening component C if intervening component C does not substantially alter the functional relationship between device A and device B, such that device B is controlled by device A via the control signal provided by device A.</p><p id="p-0054" num="0053">Also, as used herein, a device that is &#x201c;configured to&#x201d; perform a task or function may be configured (e.g., programmed and/or hardwired) at a time of manufacturing by a manufacturer to perform the function and/or may be configurable (or reconfigurable) by a user after manufacturing to perform the function and/or other additional or alternative functions. The configuring may be through firmware and/or software programming of the device, through a construction and/or layout of hardware components and interconnections of the device, or a combination thereof. Furthermore, in this description, a circuit or device that includes certain components may instead be adapted to be coupled to those components to form the described circuitry or device. For example, a structure described as including one or more semiconductor elements (such as transistors), one or more passive elements (such as resistors, capacitors and/or inductors), and/or one or more sources (such as voltage and/or current sources) may instead include only the semiconductor elements within a single physical device (e.g., a semiconductor die and/or integrated circuit (IC) package) and may be adapted to be coupled to at least some of the passive elements and/or the sources to form the described structure either at a time of manufacture or after a time of manufacture, such as by an end-user and/or a third party.</p><p id="p-0055" num="0054">As used herein, the terms &#x201c;terminal&#x201d;, &#x201c;node&#x201d;, &#x201c;interconnection&#x201d; and &#x201c;pin&#x201d; are used interchangeably. Unless specifically stated to the contrary, these terms are generally used to mean an interconnection between or a terminus of a device element, a circuit element, an integrated circuit, a device or other electronics or semiconductor component.</p><p id="p-0056" num="0055">Modifications are possible in the described embodiments, and other embodiments are possible, within the scope of the claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A synchronous serial bus peripheral circuit, comprising:<claim-text>a peripheral identification (ID) register;</claim-text><claim-text>a receiver shift register; and</claim-text><claim-text>a circuit coupled to the peripheral ID register, and configured to transmit a status value based on a peripheral ID field of data received via the receiver shift register equaling a value stored in the peripheral ID register.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The synchronous serial bus peripheral circuit of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>an address register;</claim-text><claim-text>wherein the circuit is configured to transfer an address value from the receiver shift register to the address register.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The synchronous serial bus peripheral circuit of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the circuit is configured to transmit the status value while shifting the address value into the receiver shift register.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The synchronous serial bus peripheral circuit of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the circuit is configured to determine whether a read operation or a write operation is to be performed based on a read/write field of the data received via the receiver shift register.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The synchronous serial bus peripheral circuit of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:<claim-text>a write data register; and</claim-text><claim-text>a transmitter shift register;</claim-text><claim-text>wherein the circuit is configured to:<claim-text>transfer a write data value from the receiver shift register to the write data register based on the read/write field specifying a write operation; and</claim-text><claim-text>transfer a read data value to the transmitter shift register based on the read/write field specifying a read operation.</claim-text></claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The synchronous serial bus peripheral circuit of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>a conflict detection circuit configured to, while shifting the status value, compare the status value to a value of a serial data output to detect a conflict at the serial data output; and</claim-text><claim-text>wherein the circuit is configured to disable drive of the serial data output based on detection of the conflict.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The synchronous serial bus peripheral circuit of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>a chip select input;</claim-text><claim-text>a clock input; and</claim-text><claim-text>a serial data input;</claim-text><claim-text>wherein the circuit is configured to shift data received at the serial data input into the receiver shift register at an edge of a clock signal received at the clock input based on a chip select signal received at the chip select input being active.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A method, comprising:<claim-text>activating, by a host device coupled to a synchronous serial bus, a chip select signal to initiate a data frame on the synchronous serial bus;</claim-text><claim-text>transmitting, by the host device, in the data frame, a peripheral ID value and an address value;</claim-text><claim-text>receiving, by a peripheral device coupled to the synchronous serial bus, in the data frame, the peripheral ID value and the address value;</claim-text><claim-text>comparing, by the peripheral device, the peripheral ID value to a general call ID and a peripheral ID assigned to the peripheral device; and</claim-text><claim-text>responsive to the peripheral ID value being equal to the peripheral ID assigned to the peripheral device, transmitting, by the peripheral device, in the data frame, a status value.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising deactivating, by the host device, the chip select signal to end the data frame.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein:<claim-text>the peripheral device is a first peripheral device; and</claim-text><claim-text>the method further comprises:<claim-text>receiving, by a second peripheral device coupled to the synchronous serial bus in parallel with the first peripheral device, the peripheral ID value and the address value;</claim-text><claim-text>comparing, by the second peripheral device, the peripheral ID value to the general call ID and a peripheral ID assigned to the second peripheral device; and</claim-text><claim-text>responsive to the peripheral ID value being equal to the peripheral ID assigned to the second peripheral device, transmitting, by the second peripheral device, a status value while receiving the address value.</claim-text></claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:<claim-text>transmitting, by the host device, in the data frame, a write data value and a read/write value; and</claim-text><claim-text>responsive to the read/write value indicating that a write operation is to be performed:<claim-text>transferring, by the first peripheral device, the write data value to a write data register of the first peripheral device responsive to the peripheral ID value being equal to the general call ID or the peripheral ID assigned to the first peripheral device; and</claim-text><claim-text>transferring, by the second peripheral device, the write data value to a write data register of the second peripheral device responsive to the peripheral ID value being equal to the general call ID or the peripheral ID assigned to the second peripheral device.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:<claim-text>transmitting, by the host device, in the data frame, a check value; and</claim-text><claim-text>verifying, by the first peripheral device, the write data value based on the check value.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:<claim-text>responsive to the read/write value indicating that a read operation is to be performed:<claim-text>transmitting, by the first peripheral device, while receiving the write data value, a read data value responsive to the peripheral ID value being equal to the peripheral ID assigned to the first peripheral device; and</claim-text><claim-text>transmitting, by the second peripheral device, while receiving the write data value, a read data value responsive to the peripheral ID value being equal to the peripheral ID assigned to the second peripheral device.</claim-text></claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:<claim-text>comparing, by the peripheral device, the status value to a to a value of a serial data output while transmitting the status value; and</claim-text><claim-text>disabling transmission of the status value responsive to the value of the serial data output being different from the status value.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A motor controller, comprising:<claim-text>a synchronous serial bus peripheral circuit adapted to communicate with an external controller, the synchronous serial bus peripheral circuit including:<claim-text>a peripheral identification (ID) register;</claim-text><claim-text>a receiver shift register; and</claim-text><claim-text>a control circuit coupled to the peripheral ID register, and configured to transmit a status value to the external controller based on a peripheral ID field received via the receiver shift register equaling a value stored in the peripheral ID register.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The motor controller of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein:<claim-text>the synchronous serial bus peripheral circuit includes a clock input adapted to receive a serial bus clock signal from the external controller;</claim-text><claim-text>the synchronous serial bus peripheral circuit is configured to use the serial bus clock signal to clock the receiver shift register; and</claim-text><claim-text>the motor controller includes:<claim-text>an oscillator configured to generate a clock for timing motor control signals; and</claim-text><claim-text>an oscillator trim circuit configured to adjust a frequency of the clock based on a frequency of the serial bus clock signal.</claim-text></claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The motor controller of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the oscillator trim circuit is configured to compare a count of cycles of the serial bus clock signal to a count of cycles of the clock to determine a frequency code for adjusting the frequency of the clock.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The motor controller of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the synchronous serial bus peripheral circuit further comprises:<claim-text>an address register;</claim-text><claim-text>wherein the control circuit is configured to:<claim-text>transfer an address value from the receiver shift register to the address register; and</claim-text><claim-text>transmit the status value while shifting the address value into the receiver shift register.</claim-text></claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The motor controller of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein:<claim-text>the synchronous serial bus peripheral circuit comprises a write data register; and</claim-text><claim-text>the control circuit is configured to:<claim-text>determine whether a read operation or a write operation is to be performed based on a read/write field received via the receiver shift register;</claim-text><claim-text>transfer a write data value from the receiver shift register to the write data register based on the read/write field specifying a write operation; and</claim-text><claim-text>transfer a read data value to the receiver shift register based on the read/write field specifying a read operation.</claim-text></claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The motor controller of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the synchronous serial bus peripheral circuit comprises:<claim-text>a conflict detection circuit configured to, while shifting the status value, compare the status value to a value of a serial data output to detect a conflict at the serial data output; and</claim-text><claim-text>wherein the control circuit is configured to disable drive of the serial data output based on detection of conflict.</claim-text></claim-text></claim></claims></us-patent-application>