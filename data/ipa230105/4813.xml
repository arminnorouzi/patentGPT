<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004814A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004814</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363095</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>B</section><class>41</class><subclass>J</subclass><main-group>29</main-group><subgroup>393</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>086</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>B</section><class>41</class><subclass>J</subclass><main-group>29</main-group><subgroup>393</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">AUTOMATICALLY GENERATING DEFECT DATA OF PRINTED MATTER FOR FLAW DETECTION</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>International Business Machines Corporation</orgname><address><city>Armonk</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Cai</last-name><first-name>Zhuo</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Xin</last-name><first-name>Chao</first-name><address><city>Ningbo</city><country>CN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Zhang</last-name><first-name>Dan</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Zhang</last-name><first-name>Hong Bing</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Xiong</last-name><first-name>De Bo</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Technology for inspection for detecting a defect of a printed matter using machine logic informed by machine learning. Some embodiments of the present invention may include one, or more, of the following features: (i) generates defect datasets; (ii) generates defect libraries; (iii) uses the generated defect libraries for deep learning training; and (iv) uses machine learning to detect defects using computer code (for example, a *.jpg format file) corresponding to an image of a piece of printed matter instead of using a visual image (that is, an image of the type that is created when a person takes a picture using a traditional film camera).</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="202.44mm" wi="158.24mm" file="US20230004814A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="216.66mm" wi="160.27mm" file="US20230004814A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="190.58mm" wi="143.17mm" file="US20230004814A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="144.10mm" wi="142.32mm" file="US20230004814A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="220.56mm" wi="163.49mm" file="US20230004814A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">The present invention relates generally to the field of detecting defects in printed matter.</p><p id="p-0003" num="0002">The Wikipedia entry for &#x201c;printed matter&#x201d; (as of Apr. 15, 2021) in part states as follows: &#x201c;Printed matter is a term, mostly used by mailing systems, normally used to describe mechanically printed materials . . . Printed matter [is] produced by printers or publishers, such as books, magazines, booklets, brochures and other publicity materials and in some cases, newspapers.&#x201d; (footnote(s) omitted) While the Wikipedia entry, partially reproduced in this paragraph, extensively discusses definitions of &#x201c;printed matter&#x201d; that are specific to postal services (for example, the US Post Office), &#x201c;printed matter,&#x201d; as that term is used herein, includes all printed matter, regardless of whether the printed matter qualifies for any sort of special treatment when mailed through a post office.</p><p id="p-0004" num="0003">The Wikipedia entry for &#x201c;generative adversarial network&#x201d; (hereinafter, sometimes GAN) (as of Apr. 15, 2021) in part states as follows: &#x201c;A generative adversarial network (GAN) is a class of machine learning frameworks designed by Ian Goodfellow and his colleagues in 2014. Two neural networks contest with each other in a game (in the form of a zero-sum game, where one agent's gain is another agent's loss). Given a training set, this technique learns to generate new data with the same statistics as the training set. For example, a GAN trained on photographs can generate new photographs that look at least superficially authentic to human observers, having many realistic characteristics. Though originally proposed as a form of generative model for unsupervised learning, GANs have also proven useful for semi-supervised learning, fully supervised learning, and reinforcement learning. The core idea of a GAN is based on the &#x2018;indirect&#x2019; training through the discriminator, . . . which itself is also being updated dynamically. This basically means that the generator is not trained to minimize the distance to a specific image, but rather to fool the discriminator. This enables the model to learn in an unsupervised manner. The generative network generates candidates while the discriminative network evaluates them. The contest operates in terms of data distributions. Typically, the generative network learns to map from a latent space to a data distribution of interest, while the discriminative network distinguishes candidates produced by the generator from the true data distribution. The generative network's training objective is to increase the error rate of the discriminative network (i.e., &#x2018;fool&#x2019; the discriminator network by producing novel candidates that the discriminator thinks are not synthesized (are part of the true data distribution)). A known dataset serves as the initial training data for the discriminator. Training it involves presenting it with samples from the training dataset, until it achieves acceptable accuracy. The generator trains based on whether it succeeds in fooling the discriminator. Typically, the generator is seeded with randomized input that is sampled from a predefined latent space (e.g. a multivariate normal distribution). Thereafter, candidates synthesized by the generator are evaluated by the discriminator. Independent backpropagation procedures are applied to both networks so that the generator produces better samples, while the discriminator becomes more skilled at flagging synthetic samples. When used for image generation, the generator is typically a deconvolutional neural network, and the discriminator is a convolutional neural network . . . . While the standard GAN model learns a mapping from a latent space to the data distribution, inverse models such as Bidirectional GAN (BiGAN) and Adversarial Autoencoders also learn a mapping from data to the latent space. This inverse mapping allows real or generated data examples to be projected back into the latent space, similar to the encoder of a variational autoencoder.&#x201d;</p><p id="p-0005" num="0004">US patent application 2021/0114368 (&#x201c;Ukishima&#x201d;) discloses as follows: &#x201c;In printing of a printed matter, a defect such as ink loss, ink dripping, a scratch, and a streak may occur. For this reason, automatic inspection for detecting a defect of a printed matter is performed.&#x201d;</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0006" num="0005">According to an aspect of the present invention, there is a method, computer program product and/or system that performs the following operations (not necessarily in the following order): (i) creating a defects library; (ii) training a machine learning (ML) algorithm using the defects library to obtain a trained ML algorithm; (iii) receiving a first bitmap used to print a new original image; (iv) receiving a second bitmap corresponding to a new printed image that was printed from the new original image; and (v) applying the trained ML algorithm to the first and second bitmaps to detect a set of defect(s) in the printed image.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram view of a first embodiment of a system according to the present invention;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart showing a first embodiment method performed, at least in part, by the first embodiment system;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram showing a machine logic (for example, software) portion of the first embodiment system;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a screenshot view generated by the first embodiment system; and</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart showing a second embodiment method according to the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0012" num="0011">While automatic inspection for detecting a defect of a printed matter is already known, some embodiments of the present invention include one, or more, of the following features: (i) generates defect datasets; (ii) generates defect libraries; (iii) uses the generated defect libraries for deep learning training; and (iv) uses machine learning to detect defects using computer code (for example, a *jpg format file) corresponding to an image of a piece of printed matter instead of using a visual image (that is, an image of the type that is created when a person takes a picture using a traditional film camera). This Detailed Description section is divided into the following subsections: (i) The Hardware and Software Environment; (ii) Example Embodiment; (iii) Further Comments and/or Embodiments; and (iv) Definitions.</p><heading id="h-0005" level="1">I. The Hardware and Software Environment</heading><p id="p-0013" num="0012">The present invention may be a system, a method, and/or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.</p><p id="p-0014" num="0013">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (for example, light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0015" num="0014">A &#x201c;storage device&#x201d; is hereby defined to be anything made or adapted to store computer code in a manner so that the computer code can be accessed by a computer processor. A storage device typically includes a storage medium, which is the material in, or on, which the data of the computer code is stored. A single &#x201c;storage device&#x201d; may have: (i) multiple discrete portions that are spaced apart, or distributed (for example, a set of six solid state storage devices respectively located in six laptop computers that collectively store a single computer program); and/or (ii) may use multiple storage media (for example, a set of computer code that is partially stored in as magnetic domains in a computer's non-volatile storage and partially stored in a set of semiconductor switches in the computer's volatile memory). The term &#x201c;storage medium&#x201d; should be construed to cover situations where multiple different types of storage media are used.</p><p id="p-0016" num="0015">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0017" num="0016">Computer readable program instructions for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++ or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present invention.</p><p id="p-0018" num="0017">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0019" num="0018">These computer readable program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0020" num="0019">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0021" num="0020">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0022" num="0021">As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, networked computers system <b>100</b> is an embodiment of a hardware and software environment for use with various embodiments of the present invention. Networked computers system <b>100</b> includes: server subsystem <b>102</b> (sometimes herein referred to, more simply, as subsystem <b>102</b>); client subsystems <b>104</b>, <b>106</b>, <b>108</b>, <b>110</b>, <b>112</b>; and communication network <b>114</b>. Server subsystem <b>102</b> includes: server computer <b>200</b>; communication unit <b>202</b>; processor set <b>204</b>; input/output (I/O) interface set <b>206</b>; memory <b>208</b>; persistent storage <b>210</b>; display <b>212</b>; external device(s) <b>214</b>; random access memory (RAM) <b>230</b>; cache <b>232</b>; and program <b>300</b>.</p><p id="p-0023" num="0022">Subsystem <b>102</b> may be a laptop computer, tablet computer, netbook computer, personal computer (PC), a desktop computer, a personal digital assistant (PDA), a smart phone, or any other type of computer (see definition of &#x201c;computer&#x201d; in Definitions section, below). Program <b>300</b> is a collection of machine readable instructions and/or data that is used to create, manage and control certain software functions that will be discussed in detail, below, in the Example Embodiment subsection of this Detailed Description section.</p><p id="p-0024" num="0023">Subsystem <b>102</b> is capable of communicating with other computer subsystems via communication network <b>114</b>. Network <b>114</b> can be, for example, a local area network (LAN), a wide area network (WAN) such as the Internet, or a combination of the two, and can include wired, wireless, or fiber optic connections. In general, network <b>114</b> can be any combination of connections and protocols that will support communications between server and client subsystems.</p><p id="p-0025" num="0024">Subsystem <b>102</b> is shown as a block diagram with many double arrows. These double arrows (no separate reference numerals) represent a communications fabric, which provides communications between various components of subsystem <b>102</b>. This communications fabric can be implemented with any architecture designed for passing data and/or control information between processors (such as microprocessors, communications and network processors, etc.), system memory, peripheral devices, and any other hardware components within a computer system. For example, the communications fabric can be implemented, at least in part, with one or more buses.</p><p id="p-0026" num="0025">Memory <b>208</b> and persistent storage <b>210</b> are computer-readable storage media. In general, memory <b>208</b> can include any suitable volatile or non-volatile computer-readable storage media. It is further noted that, now and/or in the near future: (i) external device(s) <b>214</b> may be able to supply, some or all, memory for subsystem <b>102</b>; and/or (ii) devices external to subsystem <b>102</b> may be able to provide memory for subsystem <b>102</b>. Both memory <b>208</b> and persistent storage <b>210</b>: (i) store data in a manner that is less transient than a signal in transit; and (ii) store data on a tangible medium (such as magnetic or optical domains). In this embodiment, memory <b>208</b> is volatile storage, while persistent storage <b>210</b> provides nonvolatile storage. The media used by persistent storage <b>210</b> may also be removable. For example, a removable hard drive may be used for persistent storage <b>210</b>. Other examples include optical and magnetic disks, thumb drives, and smart cards that are inserted into a drive for transfer onto another computer-readable storage medium that is also part of persistent storage <b>210</b>.</p><p id="p-0027" num="0026">Communications unit <b>202</b> provides for communications with other data processing systems or devices external to subsystem <b>102</b>. In these examples, communications unit <b>202</b> includes one or more network interface cards. Communications unit <b>202</b> may provide communications through the use of either or both physical and wireless communications links. Any software modules discussed herein may be downloaded to a persistent storage device (such as persistent storage <b>210</b>) through a communications unit (such as communications unit <b>202</b>).</p><p id="p-0028" num="0027">I/O interface set <b>206</b> allows for input and output of data with other devices that may be connected locally in data communication with server computer <b>200</b>. For example, I/O interface set <b>206</b> provides a connection to external device set <b>214</b>. External device set <b>214</b> will typically include devices such as a keyboard, keypad, a touch screen, and/or some other suitable input device. External device set <b>214</b> can also include portable computer-readable storage media such as, for example, thumb drives, portable optical or magnetic disks, and memory cards. Software and data used to practice embodiments of the present invention, for example, program <b>300</b>, can be stored on such portable computer-readable storage media. I/O interface set <b>206</b> also connects in data communication with display <b>212</b>. Display <b>212</b> is a display device that provides a mechanism to display data to a user and may be, for example, a computer monitor or a smart phone display screen.</p><p id="p-0029" num="0028">In this embodiment, program <b>300</b> is stored in persistent storage <b>210</b> for access and/or execution by one or more computer processors of processor set <b>204</b>, usually through one or more memories of memory <b>208</b>. It will be understood by those of skill in the art that program <b>300</b> may be stored in a more highly distributed manner during its run time and/or when it is not running. Program <b>300</b> may include both machine readable and performable instructions and/or substantive data (that is, the type of data stored in a database). In this particular embodiment, persistent storage <b>210</b> includes a magnetic hard disk drive. To name some possible variations, persistent storage <b>210</b> may include a solid state hard drive, a semiconductor storage device, read-only memory (ROM), erasable programmable read-only memory (EPROM), flash memory, or any other computer-readable storage media that is capable of storing program instructions or digital information.</p><p id="p-0030" num="0029">The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular program nomenclature herein is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and/or implied by such nomenclature.</p><p id="p-0031" num="0030">The descriptions of the various embodiments of the present invention have been presented for purposes of illustration, but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments, the practical application or technical improvement over technologies found in the marketplace, or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.</p><heading id="h-0006" level="1">II. Example Embodiment</heading><p id="p-0032" num="0031">As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, networked computers system <b>100</b> is an environment in which an example method according to the present invention can be performed. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, flowchart <b>250</b> shows an example method according to the present invention. As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, program <b>300</b> performs or controls performance of at least some of the method operations of flowchart <b>250</b>. This method and associated software will now be discussed, over the course of the following paragraphs, with extensive reference to the blocks of <figref idref="DRAWINGS">FIGS. <b>1</b>, <b>2</b> and <b>3</b></figref>.</p><p id="p-0033" num="0032">Processing begins with operation S<b>255</b>, where defects library <b>302</b> is created. In this example, the defects library is made up of historical data sets <b>304</b><i>a </i>to <b>304</b><i>z</i>. Each historical data set <b>304</b><i>a </i>to <i>z </i>includes: (i) bitmap data corresponding to a bitmap of an original visual image used to make a printed image; (ii) bitmap data corresponding to a printed image of the original visual image; (iii) an indication of defect location within the bitmap of each and every defect existing in the image; and (iv) an indication of defect type of each and every defect existing in the image. In this simple example, there are only three defect types: blot, skip and skew.</p><p id="p-0034" num="0033">Processing proceeds to operation S<b>265</b>, where machine learning algorithm <b>306</b> is trained using the defects library by training module (&#x201c;mod&#x201d;) <b>308</b>. Machine learning (ML) algorithm <b>306</b> is a collection of machine logic based rules that evolve over time as new training data is used to refine and improve the effectiveness and reliability of the ML algorithm.</p><p id="p-0035" num="0034">Processing proceeds to operation S<b>270</b>, where input mod 310 receives: (i) a new bitmap used to print a new original image (that is, not an original image in the training data); and (ii) a new printed image that was printed from the new original image. In this example, the new original image and new printed image are both received from client subsystem <b>104</b> through network <b>114</b>.</p><p id="p-0036" num="0035">Processing proceeds to operation S<b>275</b> where the machine logic based rules of ML algorithm <b>306</b> is applied to the new original image and its corresponding new printed image to detect defects. In this simple example and as shown in screenshot <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, there are two defects detected in the printed image, specifically one skew type defect and one blot type defect.</p><heading id="h-0007" level="1">III. Further Comments and/or Embodiments</heading><p id="p-0037" num="0036">Some embodiments of the present invention recognize the following facts, potential problems and/or potential areas for improvement with respect to the current state of the art: (i) in the field of defect detection for printed matter, there have been some practices that manufacturers have developed (for example, existing methods require a lot of labor); (ii) for AI (artificial intelligence) based defect detection methodology, supervised learning ways are popular due to reliability and high accuracy, however, this method requires enormous training data with labeling; (iii) currently, businesses tend to use random syntheses, which can cause defects or defects being in the wrong position; (iv) random syntheses defects can affect the result of the model enormously; and/or (v) because the proportion of the defects in the pictures are quite small, consequently, this affect is likely to occur.</p><p id="p-0038" num="0037">Some embodiments of the present invention recognize the following facts, potential problems and/or potential areas for improvement with respect to the current state of the art: (i) in the field of defect detection for printed matter, there have been some practices developed by manufacturing where: (a) there are many workers manually checking the quality of the printed matter, (b) the factories have to keep a number of workers as the quality checking team, and/or (c) traditional and AI based methods are now being developed; and/or (ii) for existing methods, a lot of labor is required where: (a) for AI based defect detection methodology, supervised learning methods are popular for being reliable and having high accuracy, (b) AI based defect detection methodology requires enormous training data with labeling, and/or (c) a lot of labor must be done by humans manually, that is, labeling.</p><p id="p-0039" num="0038">Some embodiments of the present invention recognize the following facts, potential problems and/or potential areas for improvement with respect to the current state of the art: (i) data quantity is a bottleneck where: (a) in defect detection of printed matter, bad labeled data will seriously influence the training results since the defects are a very small proportion in the images, (b) the process must be repeated when a new product is introduced into the pipeline, and/or (c) different types of defects are out of proportion, consequently, certain types of defects are hard to find which results in having bad results of the model; and/or (ii) data quality will influence the model results enormously where: (a) businesses try using synthesized data, but run into problems of data quality, (b) existing methods, such as GAN (generative adversarial network)/traditional methods, are not satisfactory since there will be a lot of bad quality data generated without plausibility checking, (c) GAN will introduce defects that don't belong in the supposed defect categories, and/or (d) common synthesis will create a great deal of inappropriate data since there is no checking.</p><p id="p-0040" num="0039">A method according to an embodiment of the present invention includes the following operations (not necessarily in the following order): (i) raises a new way to generate the data with defects based on maintained defects, (ii) can help manufactures save labor for labeling costs; (iii) can guarantee the data quality for better training; and (iv) can be divided into the following operations: (a) construct a fundamental defects base, (b) construct the principle to decide if the defects are plausible, (c) define the rules such as color difference, shape and overlap with text, (d) when the new product is to be made, the manufacturer only needs to provide a template image instead of pictures on the manufacturing pipeline, (e) synthesizes the pictures based on the defect base and defect rules automatically, (f) the defect base can be extended by, in practice, by adding the new defects, (g) the model can be trained half-supervised and online by using the data which was generated automatically, and (h) uses standards to check plausibility.</p><p id="p-0041" num="0040">Some embodiments of the present invention may include one, or more, of the following operations, features, characteristics and/or advantages: (i) discloses a method to generate the data with defects based on maintained defects, (ii) can help manufactures save labor costs for labeling; (iii) can guarantee the data quality for better training; (iv) a fundamental defect base is constructed; (v) a defect detection model can be trained, half-supervised and online, by using the data which was generated automatically; (vi) builds a defect library; and/or (vii) builds a semi-supervised defect detection deep learning model.</p><p id="p-0042" num="0041">A method according to an embodiment of the present invention includes the following operations (not necessarily in the following order): (i) decides whether the synthesized images are plausible using the following principles/rules: (a) color difference: the RGB (red, green, blue) values of the background color and flaws will be analyzed to get the appropriate threshold, so that if plausible, the color difference can be detected, (b) shape: for different defects, they will differ obviously in shape features, so the feature analyses or statistical analyses will be conducted (for example, using clustering with k-means to filter out defects which are not plausible), (c) text overlap: text detection technology will be used to get the text area on the printed matter in order to form/avoid flaw overlapped with the text, and (d) Siamese network: a Siamese network will be used to verify if the copy/paste or random erase effects are plausible; and (ii) when synthesizing data, with the above stated standards, the quality of the data can be guaranteed.</p><p id="p-0043" num="0042">As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, flowchart <b>500</b> includes: start block S<b>502</b>; collect new defects block S<b>504</b>; construct defect database block S<b>506</b>; collect new templates block S<b>508</b>; synthesize image block S<b>510</b>; defect images plausible decision (Yes/No) block S<b>512</b>; discard block S<b>514</b>; add to training set block S<b>516</b>; train online/offline block S<b>518</b>; and end block S<b>520</b>.</p><p id="p-0044" num="0043">In operation S<b>502</b> the operation starts.</p><p id="p-0045" num="0044">In operation S<b>504</b>, new defects are collected.</p><p id="p-0046" num="0045">In operation S<b>506</b>, a defect database is constructed. The defects collected in operation S<b>504</b> above are added to this new defect database.</p><p id="p-0047" num="0046">In operation S<b>508</b>, a new template image is collected.</p><p id="p-0048" num="0047">In operation S<b>510</b>, the image is synthesized by adding defects and copying them to any area of the new template image.</p><p id="p-0049" num="0048">In operation S<b>512</b>, a decision is made as to whether the images are plausible. Here, the rationality of the synthesized image can be determined by judging the color difference, shape and template difference between the defect part and the surroundings.</p><p id="p-0050" num="0049">In operation S<b>514</b>, the image is discarded if the synthesized image is not plausible, as determined by operation S<b>512</b> above.</p><p id="p-0051" num="0050">In operation S<b>516</b>, the image is added to a training set if the synthesized image is determined to be plausible, as determined by operation S<b>512</b> above.</p><p id="p-0052" num="0051">In operation S<b>518</b>, the training set can be used for online or offline training which means that the above operations can be completed online or offline.</p><p id="p-0053" num="0052">In operation S<b>520</b>, the method of flow chart <b>500</b> ends.</p><p id="p-0054" num="0053">Some embodiments of the present invention may include one, or more, of the following operations, features, characteristics and/or advantages: (i) generates defect datasets; (ii) generates defect libraries; (iii) the generated defect library is used for deep learning training; (iv) does not use a generated network for defect detection; and/or (v) defect images come from code generation (such as copy and paste).</p><heading id="h-0008" level="1">IV. Definitions</heading><p id="p-0055" num="0054">Present invention: should not be taken as an absolute indication that the subject matter described by the term &#x201c;present invention&#x201d; is covered by either the claims as they are filed, or by the claims that may eventually issue after patent prosecution; while the term &#x201c;present invention&#x201d; is used to help the reader to get a general feel for which disclosures herein are believed to potentially be new, this understanding, as indicated by use of the term &#x201c;present invention,&#x201d; is tentative and provisional and subject to change over the course of patent prosecution as relevant information is developed and as the claims are potentially amended.</p><p id="p-0056" num="0055">Embodiment: see definition of &#x201c;present invention&#x201d; above&#x2014;similar cautions apply to the term &#x201c;embodiment.&#x201d;</p><p id="p-0057" num="0056">and/or: inclusive or; for example, A, B &#x201c;and/or&#x201d; C means that at least one of A or B or C is true and applicable.</p><p id="p-0058" num="0057">Including/include/includes: unless otherwise explicitly noted, means &#x201c;including but not necessarily limited to.&#x201d;</p><p id="p-0059" num="0058">Module/Sub-Module: any set of hardware, firmware and/or software that operatively works to do some kind of function, without regard to whether the module is: (i) in a single local proximity; (ii) distributed over a wide area; (iii) in a single proximity within a larger piece of software code; (iv) located within a single piece of software code; (v) located in a single storage device, memory or medium; (vi) mechanically connected; (vii) electrically connected; and/or (viii) connected in data communication.</p><p id="p-0060" num="0059">Computer: any device with significant data processing and/or machine readable instruction reading capabilities including, but not limited to: desktop computers, mainframe computers, laptop computers, field-programmable gate array (FPGA) based devices, smart phones, personal digital assistants (PDAs), body-mounted or inserted computers, embedded device style computers, application-specific integrated circuit (ASIC) based devices.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method (CIM) comprising:<claim-text>creating a defects library;</claim-text><claim-text>training a machine learning (ML) algorithm using the defects library to obtain a trained ML algorithm;</claim-text><claim-text>receiving a first bitmap used to print a new original image;</claim-text><claim-text>receiving a second bitmap corresponding to a new printed image that was printed from the new original image; and</claim-text><claim-text>applying the trained ML algorithm to the first and second bitmaps to detect a set of defect(s) in the printed image.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The CIM of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the defects library includes a plurality of historical data sets, with each historical data set including: (i) bitmap data corresponding to a bitmap of an original visual image used to make a printed image; (ii) bitmap data corresponding to a printed image of the original visual image; (iii) an indication of defect location(s) within the bitmap data corresponding to a printed image; and (iv) an indication of defect type defect location(s).</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The CIM of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the defect types include at least one of the following: missing words, broken words, skip, scratch, blot, skew and/or extra ink.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The CIM of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the defect types include all of the following: missing words, broken words, skip, scratch, blot, skew and/or extra ink.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The CIM of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the ML algorithm is a collection of machine logic based rules that evolve over time as new training data is used to refine and improve effectiveness and reliability of the ML algorithm.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The CIM of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:<claim-text>generating a display data set corresponding to a display for a display device, with the display indicating a defect location within the printed image for each detected defect of the set of defect(s).</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. A computer program product (CPP) comprising:<claim-text>a set of storage device(s); and</claim-text><claim-text>computer code stored collectively in the set of storage device(s), with the computer code including data and instructions to cause a processor(s) set to perform at least the following operations:<claim-text>creating a defects library,</claim-text><claim-text>training a machine learning (ML) algorithm using the defects library to obtain a trained ML algorithm,</claim-text><claim-text>receiving a first bitmap used to print a new original image,</claim-text><claim-text>receiving a second bitmap corresponding to a new printed image that was printed from the new original image, and</claim-text><claim-text>applying the trained ML algorithm to the first and second bitmaps to detect a set of defect(s) in the printed image.</claim-text></claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The CPP of <claim-ref idref="CLM-00007">claim 7</claim-ref> wherein the defects library includes a plurality of historical data sets, with each historical data set including: (i) bitmap data corresponding to a bitmap of an original visual image used to make a printed image; (ii) bitmap data corresponding to a printed image of the original visual image; (iii) an indication of defect location(s) within the bitmap data corresponding to a printed image; and (iv) an indication of defect type defect location(s).</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The CPP of <claim-ref idref="CLM-00007">claim 7</claim-ref> wherein the defect types include at least one of the following: missing words, broken words, skip, scratch, blot, skew and/or extra ink.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The CPP of <claim-ref idref="CLM-00007">claim 7</claim-ref> wherein the defect types include all of the following: missing words, broken words, skip, scratch, blot, skew and/or extra ink.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The CPP of <claim-ref idref="CLM-00007">claim 7</claim-ref> wherein the ML algorithm is a collection of machine logic based rules that evolve over time as new training data is used to refine and improve effectiveness and reliability of the ML algorithm.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The CPP of <claim-ref idref="CLM-00007">claim 7</claim-ref> wherein the computer code further includes instructions for causing the processor(s) set to perform the following operation(s):<claim-text>generating a display data set corresponding to a display for a display device, with the display indicating a defect location within the printed image for each detected defect of the set of defect(s).</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A computer system (CS) comprising:<claim-text>a processor(s) set;</claim-text><claim-text>a set of storage device(s); and</claim-text><claim-text>computer code stored collectively in the set of storage device(s), with the computer code including data and instructions to cause the processor(s) set to perform at least the following operations:<claim-text>creating a defects library,</claim-text><claim-text>training a machine learning (ML) algorithm using the defects library to obtain a trained ML algorithm,</claim-text><claim-text>receiving a first bitmap used to print a new original image,</claim-text><claim-text>receiving a second bitmap corresponding to a new printed image that was printed from the new original image, and</claim-text><claim-text>applying the trained ML algorithm to the first and second bitmaps to detect a set of defect(s) in the printed image.</claim-text></claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The CS of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the defects library includes a plurality of historical data sets, with each historical data set including: (i) bitmap data corresponding to a bitmap of an original visual image used to make a printed image; (ii) bitmap data corresponding to a printed image of the original visual image; (iii) an indication of defect location(s) within the bitmap data corresponding to a printed image; and (iv) an indication of defect type defect location(s).</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The CS of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the defect types include at least one of the following: missing words, broken words, skip, scratch, blot, skew and/or extra ink.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The CS of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the defect types include all of the following: missing words, broken words, skip, scratch, blot, skew and/or extra ink.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The CS of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the ML algorithm is a collection of machine logic based rules that evolve over time as new training data is used to refine and improve effectiveness and reliability of the ML algorithm.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The CS of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the computer code further includes instructions for causing the processor(s) set to perform the following operation(s):<claim-text>generating a display data set corresponding to a display for a display device, with the display indicating a defect location within the printed image for each detected defect of the set of defect(s).</claim-text></claim-text></claim></claims></us-patent-application>