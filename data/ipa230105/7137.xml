<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007138A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007138</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17824127</doc-number><date>20220525</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>JP</country><doc-number>2021-110183</doc-number><date>20210701</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>1</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>1</main-group><subgroup>00965</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>1</main-group><subgroup>00127</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>1</main-group><subgroup>00938</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>1</main-group><subgroup>0097</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>1</main-group><subgroup>00042</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>1</main-group><subgroup>00082</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>2201</main-group><subgroup>0072</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">IMAGE FORMING DEVICE AND PROGRAM</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only"><addressbook><orgname>KONICA MINOLTA, INC.</orgname><address><city>Tokyo</city><country>JP</country></address></addressbook><residence><country>JP</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>HARADA</last-name><first-name>Kazuki</first-name><address><city>Kobe-shi</city><country>JP</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>KONICA MINOLTA, INC.</orgname><role>03</role><address><city>Tokyo</city><country>JP</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An image forming device to which an external device is detachably attached, including an interface that is able to attach to the external device, a storage that stores multi-tier architecture software, and a computer that executes the multi-tier architecture software. The multi-tier architecture software includes a lower layer that includes an operating system that manages the external device, an upper layer that includes an application program that accesses the external device via the lower layer, and an intervening abstraction layer that hides implementation of the lower layer from the upper layer. The upper layer includes an access control program that is able to save path information to access the external device to the storage, and relays access from the application program to the external device by accessing the lower layer without going through the abstraction layer and accessing the external device using the path information.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="134.37mm" wi="98.04mm" file="US20230007138A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="152.74mm" wi="100.08mm" file="US20230007138A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="178.14mm" wi="143.34mm" file="US20230007138A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="152.57mm" wi="132.33mm" file="US20230007138A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="136.91mm" wi="142.49mm" file="US20230007138A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="208.96mm" wi="136.82mm" file="US20230007138A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="153.67mm" wi="123.95mm" file="US20230007138A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="161.12mm" wi="131.49mm" file="US20230007138A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="97.45mm" wi="123.95mm" file="US20230007138A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="193.97mm" wi="137.67mm" file="US20230007138A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="93.13mm" wi="98.30mm" file="US20230007138A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="158.33mm" wi="97.03mm" file="US20230007138A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><p id="p-0002" num="0001">The entire disclosure of Japanese patent Application No. 2021-110183, filed on Jul. 1, 2021, is incorporated herein by reference in its entirety.</p><heading id="h-0001" level="1">BACKGROUND</heading><heading id="h-0002" level="1">(1) Technical Field</heading><p id="p-0003" num="0002">The present disclosure relates to image forming devices and programs, and more particularly to techniques for improving access efficiency with respect to external devices connected to image forming devices.</p><heading id="h-0003" level="1">(2) Description of Related Art</heading><p id="p-0004" num="0003">In recent years, there is demand that more functions be added to multi-function peripherals (M P) that include printer functions, scanner function, copy function, facsimile functions, network functions, so-called box functions, and the like. In response to such demands, additional functions have come to be realized by installation of application programs on multi-function peripherals.</p><p id="p-0005" num="0004">A multi-function peripheral is composed of various devices, and an application program for realizing an additional function may also need access to at least one of the various devices that make up the multi-function peripheral. For example, when reading or writing data to or from a universal serial bus (USB) memory mounted on a USB interface of a multi-function peripheral, as illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, an application program <b>1010</b> uses a library (node library in <figref idref="DRAWINGS">FIG. <b>10</b></figref>) <b>1020</b> installed on a multi-function peripheral <b>10</b>.</p><p id="p-0006" num="0005">When an application program interface (API; fs_API in <figref idref="DRAWINGS">FIG. <b>10</b></figref>) <b>1021</b> for accessing a file system that manages data stored in the USB memory or the like is included in the library <b>1020</b> as a method, the application program <b>1010</b> uses this method to request that a USB interface driver <b>1031</b> built into an operating system (OS) <b>1030</b> reads and writes data to and from the USB memory.</p><p id="p-0007" num="0006">In this way, reading and writing to and from the USB memory is executed. The same applies to USB devices other than USB memory, and to devices other than USB devices.</p><p id="p-0008" num="0007">Rather than re-developing such an application program every time a multi-function peripheral is upgraded, development costs can be reduced if an application program can be used regardless of the version of the multi-function peripheral. Similarly, common use between different models of multi-function peripheral is desirable.</p><p id="p-0009" num="0008">For this reason, software architecture (multitier architecture) is adopted that provides a common interface for application programs that are to be used across devices that may differ depending on version and model of multi-function peripheral and different versions and models of multi-function peripheral.</p><p id="p-0010" num="0009">In multitier architecture, an interface between layers is specified in advance, and therefore only required layers need be developed or modified according to version and model of a multi-function device and other layers do not change and can be used as is.</p><p id="p-0011" num="0010">As illustrated in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the multitier architecture of a multi-function peripheral is composed of three layers, an application layer <b>1110</b>, a device control layer <b>1120</b>, and an operating system layer <b>1130</b>, for example. An application program <b>1111</b> that can be shared between versions and models of multi-function peripheral belongs to the application layer <b>1110</b>.</p><p id="p-0012" num="0011">A program <b>1122</b> for controlling various devices that make up a multi-function peripheral can be changed depending on version and model of the multi-function peripheral, and therefore belongs to the device control layer <b>1120</b>. The operating system layer <b>1130</b> is an operating system (OS) <b>1131</b> itself, but changes such as the OS <b>1131</b> being upgraded or replaced are possible. Further, device drivers included in the OS <b>1131</b> may change as devices are added or changed</p><p id="p-0013" num="0012">If the OS layer <b>1130</b> includes a hardware abstraction layer (HAL), a difference in hardware that occurs due to version or model of a multi-function peripheral can be hidden from a kernel of the OS <b>1131</b> by using the HAL.</p><p id="p-0014" num="0013">Further, as described above, when accessing USB memory, it is necessary to specify an access path. In a multitier architecture, parameters such as an access path required to access an external device mounted on a multi-function peripheral such as a USB memory are also hidden so as to not affect the application program <b>1111</b>. This allows the application program <b>1111</b> to access the external device without using access parameters.</p><p id="p-0015" num="0014">When the device control layer <b>1120</b> and the OS layer <b>1130</b> are responsible for basic functions of a multi-function peripheral and the application layer <b>1110</b> realizes additional functions, the application layer <b>1110</b> can be shared between versions and models of the multi-function peripheral, and therefore the cost for realizing the additional functions can be reduced.</p><p id="p-0016" num="0015">In addition to simply defining interfaces between layers, details of implementation of functions of other layers can be hidden by providing an abstraction layer between the application layer <b>1110</b> and the device control layer <b>1120</b>.</p><p id="p-0017" num="0016">As an example of the application program <b>1111</b> belonging to the application layer <b>1110</b> as described above, the application program <b>1111</b> may perform image processing of image data generated by using a scanner function of the multi-function peripheral or image data acquired via a communication network such as the Internet.</p><p id="p-0018" num="0017">By using this example of the application program <b>1111</b>, a user of the multi-function peripheral can perform desired image processing on desired image data, and image formation can be performed using the processed image data. Therefore, it is easy to see printed matter obtained by image formation, confirm the result, and change image processing applied to image data as needed.</p><p id="p-0019" num="0018">Regarding image data that has undergone image processing using the application program <b>1111</b>, a user can temporarily attach a recording medium such as a USB memory that is easy to carry to the multi-function peripheral, save the image data on the recording medium, and take it home. In such a case, the following problems occur in a multi-function peripheral adopting the multitier architecture described above.</p><p id="p-0020" num="0019">That is, the OS layer <b>1130</b> has a built-in device driver for managing device access to the recording medium, while the device control layer <b>1120</b> has an interface with the application layer <b>1110</b>. Therefore, in order for the application program <b>1111</b> to store the image data on the recording medium, the application program <b>1111</b> must first access the device control layer <b>1120</b> using a defined interface and request storage of the image data on the recording medium.</p><p id="p-0021" num="0020">The device control layer <b>1120</b> that has received a request from the application layer <b>1110</b> performs interface processing for hiding internal structure of the device control layer <b>1120</b> from the application layer <b>1110</b> and the original processing of the device control layer <b>1120</b>, then accesses the OS layer <b>1130</b> to execute the request. Therefore it is necessary to go through a large number of control API.</p><p id="p-0022" num="0021">Under these circumstances, there is a technical problem that when the application program <b>1111</b> saves image data on a recording medium, performance deteriorates due to various overheads, reducing convenience to the user and causing resources of the multi-function peripheral to be consumed unnecessarily.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0023" num="0022">This disclosure is made in view of the technical problem described above, and an object of the present disclosure is to provide an image forming device and a program that can be used to suppress performance degradation when accessing a device from an upper layer in a multitier architecture that hides substructure from the upper layer.</p><p id="p-0024" num="0023">In order to achieve at least the above object, an image forming device reflecting an aspect of the present disclosure is an image forming device to which an external device is detachably attached, the image forming device including an interface that is able to attach to the external device; a storage that stores multi-tier architecture software; and a computer that executes the multi-tier architecture software. The multi-tier architecture software includes a lower layer that includes an operating system (OS) that manages the external device attached to the interface; an upper layer that includes an application program that accesses the external device via the lower layer; and an abstraction layer that intervenes between the lower layer and the upper layer and hides implementation of the lower layer from the upper layer. The upper layer includes an access control program that is able to save path information to access the external device to the storage, and relays access from the application program of the upper layer to the external device by accessing the lower layer without going through the abstraction layer and accessing the external device using the path information.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0025" num="0024">The advantages and features provided by one or more embodiments of the invention will become more fully understood from the detailed description given hereinbelow and the appended drawings which are given by way of illustration only, and thus are not intended as a definition of the limits of the invention. In the drawings:</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an external perspective view diagram illustrating main structure of an image forming device <b>1</b> according to at least one embodiment of the present disclosure.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating configuration of a controller <b>102</b> included in an image former <b>100</b> of the image forming device <b>1</b>.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram illustrating a multitier architecture <b>3</b> of software installed in the controller <b>102</b>.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a configuration of a USB access control program <b>300</b>.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart illustrating a main routine executes by the USB control program <b>300</b> in order for an application program <b>311</b> to access USB memory.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart illustrating access error processing, which is a subroutine executed by the USB access control program <b>300</b> when an error occurs during access to USB memory.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram illustrating an operation when a monitoring unit <b>412</b> acquires USB memory status information via a device control layer <b>320</b> in the image forming device <b>1</b> according to a modified embodiment of the present disclosure.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart illustrating an operation in which the monitoring unit <b>412</b> according to a modified embodiment of the present disclosure acquires USB memory status information via the device control layer <b>320</b>.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart illustrating an operation of a USB access control program <b>300</b> according to a modified embodiment of the present disclosure, and in particular processing of a status management unit <b>430</b>.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram illustrating single-tier architecture of software according to conventional art.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a diagram illustrating multitier architecture of software according to conventional art.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0037" num="0036">With respect to an image reading device, image reading program, image processing device, and image processing program according to the present disclosure, the following describes a multi-function peripheral (MFP) having an image reading function as an example embodiment, with reference to the drawings.</p><heading id="h-0007" level="2">[1] Structure of Image Forming Device <b>1</b></heading><p id="p-0038" num="0037">The image forming device <b>1</b> according to the present embodiment is an MFP, and has functions including a printer function, a scanner function, a copy function, a facsimile function, a network function, and a box function. As illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the MFP includes an image former <b>100</b>, a sheet feeder <b>110</b>, an image reader <b>120</b>, and an operation panel <b>130</b>.</p><p id="p-0039" num="0038">The image reader <b>120</b> includes a scanner <b>121</b> and an automatic document feeder (ADF) <b>122</b>. When the image scanner <b>120</b> scans an image from a document by a sheet-through method, a stack of sheets on a document tray of the ADF <b>122</b> is fed out one by one and conveyed to a scanning position for scanning by the scanner <b>121</b>.</p><p id="p-0040" num="0039">The scanner <b>121</b> illuminates a scanning surface of a document passing through the scanning position, scans reflected light by using a line sensor, and generates image data line by line. Scanned documents are sequentially ejected to an ejection tray.</p><p id="p-0041" num="0040">When scanning an image from a document by a platen set method, the document is placed on scanning glass (not shown) of the scanner <b>121</b> with a scanning surface facing the scanning glass. A lower surface of the ADF <b>122</b> is a white plate, and by pressing a back surface of the document towards the scanning glass, the scanning surface of the document is pressed against the scanning glass.</p><p id="p-0042" num="0041">In this state, when a user of the image forming device <b>1</b> operates the operation panel <b>130</b> to issue an instruction to start scanning the document, the scanner <b>121</b> scans the document line by line to generate image data.</p><p id="p-0043" num="0042">The image former <b>100</b> executes image forming processing by an electrophotographic method using image data generated by the image reader <b>120</b> reading an image from a document, image data received from a personal computer (PC) or other device via a local area network (LAN) or communication network such as the Internet, or image data stored by using a box function, or the like.</p><p id="p-0044" num="0043">That is, a uniformly charged photoconductor surface (not shown) is irradiated with a laser beam modulated according to image data to form an electrostatic latent image, toner is supplied to the electrostatic latent image for development, then a resulting toner image is transferred to a sheet. Further, after the toner image carried on the sheet is heat-fixed, image forming processing is completed by ejecting the sheet on which the toner image is fixed to a sheet ejection tray <b>101</b>.</p><p id="p-0045" num="0044">The sheet feeder <b>110</b> includes sheet feed trays, and can accommodate different types of sheets for each sheet feed tray. The sheet feeder <b>112</b> supplies the image former <b>111</b> with a sheet of a type specified by a user via an image forming job or an instruction input using the operation panel <b>130</b>. The image former <b>111</b> executes image forming processing as described above, using a sheet supplied by the sheet feeder <b>110</b>.</p><p id="p-0046" num="0045">The operation panel <b>130</b> includes a touch panel, a hard key, a speaker, a light emitting diode (LED), and the like. The operation panel <b>130</b> presents information to a user of the image forming device <b>1</b> on a screen of the touch panel, or the like. Further, the operation panel <b>130</b> accepts instructions input by user operation of the touch panel, the hard key, or the like. User-instructed input is, for example, input instructing reading of a document.</p><p id="p-0047" num="0046">A user of the image forming device <b>1</b> can also use an additional function realized by an application program by operating the operation panel <b>130</b>. Further, such an additional function may include processing of image data processed by an application program and saved on a recording medium (for example, a universal serial bus (USB) flash drive).</p><p id="p-0048" num="0047">A controller <b>102</b> of the image former <b>100</b> is a computer that executes software for monitoring and controlling operations of elements of the image forming device <b>1</b>. Software installed in the image forming device <b>1</b> has a multitier architecture, and as described later, software that may differ depending on version or model of image forming device and software (application program) that is common to different versions or models of image forming device belong to different layers.</p><heading id="h-0008" level="2">[2] Hardware Structure of Controller <b>102</b></heading><p id="p-0049" num="0048">The following describes hardware structure of the controller <b>102</b>.</p><p id="p-0050" num="0049">The controller <b>102</b>, as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, includes a central processing unit (CPU) <b>201</b>, a read only memory (ROM) <b>202</b>, a random access memory (RAM) <b>203</b>, a hard disk drive (HDD) <b>204</b>, and a network interface card (NIC) <b>206</b>, which are connected to enable communication with each other using an internal bus <b>206</b>.</p><p id="p-0051" num="0050">A USB interface unit <b>211</b> and various devices <b>212</b> included in the image former <b>100</b> are connected to the internal bus <b>206</b>. The USB interface <b>211</b> is an interface for connecting a USB device such as a USB memory. Further, the CPU <b>201</b> can access the sheet feeder <b>110</b>, the image reader <b>120</b>, and the operation panel <b>130</b> via the internal bus <b>206</b>.</p><p id="p-0052" num="0051">When a reset signal is input, such as when power is turned on to the image forming device <b>1</b>, the CPU <b>201</b> reads out a boot program stored in the ROM <b>202</b>, boots, and using the RAM <b>203</b> as working storage, reads out and executes an operating system (OS), device control program, application program, and the like from the HDD <b>204</b>.</p><p id="p-0053" num="0052">As described later, the RAM <b>203</b> is provided with an access path storage area <b>231</b> storing an access path, which is path information for accessing a USB device <b>221</b> mounted to the USB interface <b>211</b>, in particular a USB memory. Instead of the RAM <b>203</b>, the access path storage area <b>231</b> may be provided in the HDD <b>204</b>.</p><p id="p-0054" num="0053">Further, the HDD <b>204</b> is provided with an app log database (DB) <b>241</b> for storing information about problems that occurred when accessing USB memory, and a temporary storage <b>242</b> for temporarily storing data to be transferred to USB memory. The temporary storage <b>242</b> may be provided in the RAM <b>203</b> instead of the HDD <b>204</b>.</p><p id="p-0055" num="0054">The MC <b>205</b> executes processing for communicating with other devices via a communication network such as a LAN or the Internet.</p><p id="p-0056" num="0055">The following describes an example where USB memory is attached to the USB interface <b>211</b> as the USB device <b>221</b>, but the same applies to a case where the USB device <b>221</b> is something other than USB memory and is attached to the USB interface <b>211</b>.</p><p id="p-0057" num="0056">Further, in the present disclosure, the ROM <b>202</b>, the RAM <b>203</b>, and the HDD <b>204</b> may be collectively referred to as &#x201c;a storage&#x201d;.</p><heading id="h-0009" level="2">[3] Software Structure of Controller <b>102</b></heading><p id="p-0058" num="0057">The following describes software structure of the controller <b>102</b>.</p><p id="p-0059" num="0058">Software installed in the controller <b>102</b> adopts a multitier architecture so that additional functions can be realized by using a common application program even if version or model of the image forming device <b>1</b> are different.</p><p id="p-0060" num="0059">As illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the multitier architecture <b>3</b> has a three layer structure consisting of an application layer <b>310</b>, a device control layer <b>320</b>, and an OS layer <b>330</b>.</p><heading id="h-0010" level="2">(3-1) Application Layer <b>310</b></heading><p id="p-0061" num="0060">The application layer <b>310</b> includes an application program <b>311</b> and the like, and corresponds to an upper layer in the multitier architecture.</p><p id="p-0062" num="0061">As described above, the application layer <b>310</b> includes the application program <b>311</b> for realizing an additional function for the image forming device <b>1</b>.</p><p id="p-0063" num="0062">The application layer <b>310</b> is provided with an interlayer communication interface <b>312</b> so the application program <b>311</b> can access various devices constituting the image forming device <b>1</b>.</p><p id="p-0064" num="0063">According to the present embodiment, the interlayer communication interface <b>312</b> on the application layer <b>310</b> side operates as a Web server. When the interlayer communication interface <b>312</b> on the application layer <b>310</b> side receives a request from the application program <b>311</b> as a Web client in accordance with the Hypertext Transfer Protocol (HTTP), the request is sent on to an interlayer communication interface <b>321</b> on the device control layer side <b>320</b>, which will be described later.</p><p id="p-0065" num="0064">When the interlayer communication interface <b>312</b> on the application layer <b>310</b> side receives a response to the request from the interlayer communication interface <b>321</b> on the device control layer <b>310</b> side, the interlayer communication interface <b>312</b> notifies the application program <b>311</b>, which was the request source, of the response.</p><p id="p-0066" num="0065">As a result, the application program <b>311</b> can acquire, for example, image data from the HDD <b>204</b> for which a user has instructed image processing.</p><p id="p-0067" num="0066">The USB access control program <b>300</b> also belongs to the application layer <b>310</b>. The USB access control program <b>300</b> is a program for relaying access of the application program <b>311</b> to the USB device.</p><p id="p-0068" num="0067">Therefore, the USB access control program <b>300</b> accesses the USB device from the application layer <b>310</b> without going through the device control layer <b>320</b>. According to the present embodiment, the USB access control program <b>300</b> is particularly used to relay access of the application program <b>311</b> to the USB device <b>221</b> mounted on the USB interface <b>211</b>.</p><p id="p-0069" num="0068">As will be described later, similarly to the application program <b>311</b>, the USB access control program <b>300</b> can also use the interlayer communication interface <b>312</b> on the application layer <b>310</b> side to request processing by a device control program group <b>322</b>, via the interlayer communication interface <b>321</b> on the device control layer <b>320</b> side.</p><heading id="h-0011" level="2">(3-2) Device Control Layer <b>320</b></heading><p id="p-0070" num="0069">The device control layer <b>320</b> intervenes between the application layer <b>310</b> and the OS layer <b>330</b>. That is, the device control layer <b>320</b> corresponds to an abstraction layer in the multitier architecture, and provides the application layer <b>310</b> with an interface that hides the implementation of the OS layer <b>330</b> and the device control layer <b>320</b> itself</p><p id="p-0071" num="0070">The device control program group <b>322</b> belongs to the device control layer <b>320</b>. The device control program group <b>322</b> is a program that monitors states and controls operations of various devices constituting the image forming device <b>1</b>.</p><p id="p-0072" num="0071">The device control program group <b>322</b> monitors states and controls operations of devices such as those of the image former <b>100</b>: a motor for rotationally driving a photoconductor drum, a charger device for uniformly charging an outer circumferential surface (photoconductor surface) of the photoconductor drum, an exposure device such as a laser light used to form an electrostatic latent image, and the like.</p><p id="p-0073" num="0072">The same applies to devices constituting the sheet feeder <b>110</b>, the image reader <b>120</b>, and the operation panel <b>130</b>.</p><p id="p-0074" num="0073">As described above, the device control layer <b>320</b> includes the interlayer communication interface <b>321</b> in order to receive a request from the application layer <b>310</b>.</p><p id="p-0075" num="0074">The interlayer communication interface <b>321</b> on the device control layer <b>320</b> side receives a request from the interlayer communication interface <b>312</b> on the application layer <b>310</b> side as a Web application program interface (API) and transfers the request to the device control program group <b>322</b>.</p><p id="p-0076" num="0075">Further, when the interlayer communication interface <b>321</b> on the device control layer <b>320</b> side receives a response to the request from the device control program group <b>322</b>, the interlayer communication interface <b>321</b> returns the response to the interlayer communication interface <b>312</b> on the application layer <b>310</b> side.</p><p id="p-0077" num="0076">The interlayer communication interface <b>321</b> on the device control layer <b>320</b> side has the same interface specifications as the interlayer communication interface <b>312</b> on the application layer <b>310</b> side, regardless of version or model of the image forming device <b>1</b>.</p><p id="p-0078" num="0077">Accordingly, a difference in hardware, a difference in the device control program group <b>322</b>, and a difference in the OS <b>331</b> (described later) due to version or model of the image forming device <b>1</b> are concealed from the application program <b>311</b>.</p><p id="p-0079" num="0078">Therefore, the application program <b>311</b> can be used even if the version and model of the image forming device <b>1</b> are different.</p><p id="p-0080" num="0079">On the other hand, the interlayer communication interface <b>321</b> on the device control layer <b>320</b> side and the device control program group <b>322</b> that exchanges requests and responses to requests can be changed if the version or model of the image forming device <b>1</b> is different.</p><p id="p-0081" num="0080">When the device control program group <b>322</b> is changed, the interlayer communication interface <b>321</b> on the device control layer <b>320</b> side changes the way of exchanging requests and responses to the device control program group <b>322</b> according to the change.</p><p id="p-0082" num="0081">By changing the interlayer communication interface <b>321</b> on the device control layer <b>320</b> side in this way, the application program <b>311</b> can be used even if the version and model of the image forming device <b>1</b> are different.</p><heading id="h-0012" level="2">(3-3) OS Layer <b>330</b></heading><p id="p-0083" num="0082">The OS layer <b>330</b> includes the OS <b>331</b> that manages various devices constituting the imager forming device <b>1</b> and external devices connected to the image forming device <b>1</b> such as USB memory, and corresponds to a lower layer in the multitier architecture.</p><p id="p-0084" num="0083">The OS <b>331</b> incorporates device drivers corresponding to each of the various devices constituting the image forming device <b>1</b>.</p><p id="p-0085" num="0084">The device control program group <b>322</b> can access a desired device via operation of a device driver corresponding to the device by using a system call of the OS <b>331</b>.</p><p id="p-0086" num="0085">The device drivers operate as part of the OS <b>331</b> kernel code.</p><p id="p-0087" num="0086">The device drivers built into the OS <b>331</b> include a USB interface driver <b>332</b> for accessing the USB interface <b>211</b>.</p><p id="p-0088" num="0087">The device control program group <b>322</b> can access the USB interface <b>211</b> by operation of the USB interface driver <b>332</b> using a system call of the OS <b>331</b>, similarly to other devices.</p><p id="p-0089" num="0088">According to the present embodiment, the OS layer <b>330</b> may include a hardware abstraction layer (HAL) (not shown). If the OS layer <b>330</b> includes an HAL, a difference in hardware that occurs due to version or model of a multi-function peripheral can be hidden from a kernel of the OS <b>331</b> by using the HAL.</p><p id="p-0090" num="0089">However, as described above, when the application program <b>311</b> accesses a device via the device control layer <b>320</b> and the OS layer <b>330</b>, many API calls or function calls in the device control layer <b>320</b> and the OS layer <b>330</b>, or processing for abstraction or the like becomes necessary.</p><p id="p-0091" num="0090">Therefore, by using the USB access control program <b>300</b>, performance of device access by the application program <b>311</b> is improved.</p><heading id="h-0013" level="2">[4] USB Access Control Program <b>300</b></heading><p id="p-0092" num="0091">The USB access control program <b>300</b> is described here in more detail.</p><p id="p-0093" num="0092">As illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the USB access control program <b>300</b> includes an access control unit <b>410</b>, a temporary data storage processing unit <b>420</b>, and a status management unit <b>430</b>. The access control unit <b>410</b> includes an access path acquisition unit <b>411</b> and a monitoring unit <b>412</b>. The status management unit <b>430</b> includes a status notification unit <b>431</b>.</p><heading id="h-0014" level="2">(4-1) Access Control Unit <b>410</b></heading><p id="p-0094" num="0093">When the access control unit <b>410</b> receives an access request from the application program <b>311</b> to the USB device <b>221</b>, the access control unit <b>410</b> uses a system call of the OS <b>331</b> of the OS layer <b>330</b> to cause operation of the USB interface driver <b>332</b> to access the USB interface <b>211</b>.</p><p id="p-0095" num="0094">When USB memory is connected to the USB interface <b>211</b>, the application program <b>311</b> may write data to the USB memory or read data from the USB memory via the USB access control program <b>300</b>.</p><p id="p-0096" num="0095">When the access control unit <b>410</b> accesses USB memory by using a system call of the OS <b>331</b>, specifying an access path is necessary. When an access path is not stored in the access path storage area <b>231</b>, the access path acquisition unit <b>411</b> uses the interlayer communication layer interface <b>312</b> on the application layer <b>310</b> side to obtain USB memory access from the OS <b>331</b>. That is, the access path acquisition unit <b>411</b> is a path information acquisition program.</p><p id="p-0097" num="0096">When the access path acquisition unit <b>411</b> acquires a USB memory access path, the access path acquisition unit <b>411</b> stores the access path in the access path storage area <b>231</b> of the RAM <b>203</b>. In this way, the access control unit <b>410</b> can use the access path read from the access path storage area <b>231</b> in all future access to the USB memory.</p><p id="p-0098" num="0097">The monitoring unit <b>412</b> monitors status of a USB memory by acquiring information on USB memory status (hereinafter, also referred to simply as &#x201c;status&#x201d;) using a system call of the OS <b>331</b>. The monitoring unit <b>412</b> may acquire the status from the hardware abstraction layer of the OS <b>331</b>. When the monitoring unit <b>412</b> detects a problem (failure) related to the USB memory access, the monitoring unit <b>412</b> notifies the temporary data storage processing unit <b>420</b> and the status management unit <b>430</b>.</p><p id="p-0099" num="0098">The monitoring unit <b>412</b> may monitor a problem related to the USB memory access by repeatedly using a system call of the OS <b>331</b>, or may receive a notification from the OS <b>331</b> that a problem related to USB memory access has occurred, as well as checking what kind of problem has occurred at the same timing</p><p id="p-0100" num="0099">In this way, the monitoring unit <b>412</b> is a monitoring program that monitors the status of a USB memory, which is an external device.</p><heading id="h-0015" level="2">(4-2) Temporary Data Storage Processing Unit <b>420</b></heading><p id="p-0101" num="0100">When the monitoring unit <b>412</b> detects a problem that data transfer cannot continue while transferring data to USB memory, and the temporary data storage processing unit <b>420</b> temporarily waits for access to the USB memory, and is a temporary storage program that temporarily stores data that has not been transferred to the USB memory in the temporary storage area <b>242</b> of the HDD <b>204</b>.</p><p id="p-0102" num="0101">After the problem is resolved, and the status becomes a status where data can be transferred, the access control unit <b>410</b> releases a standby state of USB memory access, reads out data temporarily stored in the temporary storage area <b>242</b>, and transfers the data to the USB memory.</p><heading id="h-0016" level="2">(4-3) Status Management Unit <b>430</b></heading><p id="p-0103" num="0102">The status management unit <b>430</b> is a status management program that acquires the USB memory status from the monitoring unit <b>412</b> of the access control unit <b>410</b> and controls USB memory access according to an acquired status. For example, if the USB memory status is &#x201c;interrupt&#x201d;, access to the USB memory requested by the application program <b>311</b> is temporarily suspended.</p><p id="p-0104" num="0103">Further, for example, if the USB memory status is &#x201c;memory full&#x201d;, &#x201c;failure&#x201d;, &#x201c;unknown cause&#x201d;, or the like, and data transfer cannot be continued, data transfer to the USB memory requested by the application program <b>311</b> may be interrupted or stopped.</p><p id="p-0105" num="0104">The status notification unit <b>431</b> of the status management unit <b>430</b> notifies the application program <b>311</b> of the USB memory status.</p><p id="p-0106" num="0105">Further, the status management unit <b>430</b> records status information of USB memory in an application log database (DB) <b>241</b>.</p><heading id="h-0017" level="2">[5] USB Access Control Program <b>300</b> Operation</heading><p id="p-0107" num="0106">The following describes operation of the USB access control program <b>300</b>, taking a case of transferring data to and from a USB memory as an example. Of course, when writing data to the USB memory, data is transferred from the image forming device <b>1</b> to the USB memory. Further, when reading data from the USB memory, data is transferred from the USB memory to the image forming device <b>1</b>.</p><p id="p-0108" num="0107">The application program <b>311</b> requests access to the USB access control program <b>300</b> when transferring data to and from the USB memory mounted on the USB interface <b>211</b>.</p><p id="p-0109" num="0108">In this case, the USB access control program <b>300</b> may provide an API having the same specifications as the interlayer communication interface <b>312</b> on the application layer side as an API provided to the application program <b>311</b>.</p><p id="p-0110" num="0109">This API receives the access path to the USB memory and receives requests such as data transfer to and from the USB memory.</p><p id="p-0111" num="0110">This makes it possible to write data to the USB memory and read data from the USB memory. Further, this API may return a list of files stored in the USB memory, or may return a list of files belonging to a directory or folder in the USB memory specified by the access path. Further, files stored in the USB memory may be deleted in units of files, directories, or the like.</p><p id="p-0112" num="0111">As illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, when the access control unit <b>410</b> of the USB access control program <b>300</b> receives an access request to the USB memory from the application program <b>311</b> (&#x201c;YES&#x201d; in S<b>501</b>), the access path acquisition unit <b>411</b> checks whether an access path to the USB memory is stored (S<b>502</b>).</p><p id="p-0113" num="0112">The access path is a list of directory names separated by delimiters such as slashes and backslashes according to a directory structure managed by the OS <b>331</b> file system. The access path may include a file name at the end.</p><p id="p-0114" num="0113">The access path for accessing the USB memory may be an absolute path representing a path from the root. If a current directory is specified, the access path may be a relative path representing a path from the current directory.</p><p id="p-0115" num="0114">The USB access control program <b>300</b> may receive specification of the current directory from the application program <b>311</b>. Further, if the current directory is stored in the RAM <b>203</b> or the HDD <b>204</b>, the stored current directory may be used.</p><p id="p-0116" num="0115">As described above, the access path acquisition unit <b>411</b> can store the access path in the access path storage area <b>231</b>. In step <b>5502</b>, the access path acquisition unit <b>411</b> checks whether the access path is stored in the access path storage area <b>231</b>.</p><p id="p-0117" num="0116">If the access path is not stored (&#x201c;NO&#x201d; in S<b>503</b>), the access path is obtained from the device control layer <b>320</b> (S<b>504</b>). In this case, the access path is requested from the device control program group <b>322</b> via the interlayer communication interface <b>321</b> on the device control layer <b>320</b> side by using the interlayer communication interface <b>312</b> on the application layer <b>310</b> side, as described above.</p><p id="p-0118" num="0117">The device control program group <b>322</b> acquires the access path by using a system call of the OS <b>331</b>. When the device control program group <b>322</b> acquires the access path, the device control program group <b>322</b> notifies the access path acquisitions unit <b>411</b> of the access path via the interlayer communication interface <b>312</b> on the application layer <b>310</b> side by using the interlayer communication interface <b>321</b> on the device control layer <b>320</b> side.</p><p id="p-0119" num="0118">When the access path acquisition unit <b>411</b> requests the access path using the interlayer communication interface <b>312</b> on the application layer <b>310</b> side, the following three request methods can be considered. That is, when the API for acquiring the access path is prepared in the interlayer communication interface <b>312</b> on the application layer <b>310</b> side, the access path can be acquired using the API.</p><p id="p-0120" num="0119">Further, an API may be prepared by the interlayer communication interface <b>312</b> on the application layer <b>310</b> side that can transfer data to USB memory without specifying an access path (path information-free interface), for example an API for acquiring an access path by specifying a data size for requesting data transfer as a minimum data size.</p><p id="p-0121" num="0120">In this case, the access path can be acquired by analyzing a return value and operation log of the API of the interlayer communication interface <b>312</b> on the application layer <b>310</b> side when data transfer is requested.</p><p id="p-0122" num="0121">The operation log is managed by the device control program group <b>322</b>. The device control program group <b>322</b> sends the operation log to the access path acquisition unit <b>411</b> of the USB access control program <b>300</b> via the interlayer communication interface <b>321</b> on the device control layer <b>320</b> side and the interlayer communication interface <b>312</b> on the application layer <b>310</b> side.</p><p id="p-0123" num="0122">In particular, when zero can be specified as the data size for which transfer is requested, the access path may be acquired by specifying zero as the data size and requesting data transfer. The smaller the data size of data requested to be transferred, the more the processing load on the device control layer <b>320</b> and the OS layer <b>330</b> to acquire the access path can be reduced.</p><p id="p-0124" num="0123">In this case also, the access path acquisition unit <b>411</b> can acquire the access path by analyzing the return value and the operation log of the system call of the OS <b>331</b> when the data transfer is requested. Further, specification of which of these acquisition methods is used to acquire the access path may be received.</p><p id="p-0125" num="0124">The access path acquisition unit <b>411</b> may accept specification of the access path acquisition method from the application program <b>311</b>. Alternatively, specification of the access path acquisition method may be stored in a predefined storage area of the ROM <b>202</b> or the HDD <b>204</b>, and the stored specification may be referred to.</p><p id="p-0126" num="0125">If there are advantages and disadvantages to each access path acquisition method, the access path acquisition unit <b>411</b> can acquire the access path by receiving specification and using the desired acquisition method.</p><p id="p-0127" num="0126">After acquiring the access path, the access path acquisition unit <b>411</b> stores the acquired access path in the access path storage area <b>231</b> (S<b>505</b>).</p><p id="p-0128" num="0127">In this way, although it is necessary to use the interlayer communication interface <b>312</b> on the application layer <b>310</b> side in order to acquire the access path for a first access of the USB memory, second and subsequent accesses can be performed by acquiring the access path by referring to the access path storage area <b>231</b>.</p><p id="p-0129" num="0128">Therefore, it is not necessary to use the interlayer communication interface <b>312</b> on the application layer <b>310</b> side, and processing overhead for the access path acquisition unit <b>411</b> to acquire the access path is reduced, and therefore access speed to the USB memory can be improved.</p><p id="p-0130" num="0129">After storing the USB memory access path in the access path storage area <b>231</b> in <b>5505</b>, the access control unit <b>410</b> accesses the USB memory using the newly acquired access path (S<b>506</b>). If the access path is stored in the access path storage area <b>231</b> (&#x201c;YES&#x201d; in S<b>503</b>), the access control unit <b>410</b> accesses the USB memory using the access path stored in the access path storage area <b>231</b> (S<b>506</b>).</p><p id="p-0131" num="0130">In this way, the access control unit <b>410</b> starts data transfer to and from the USB memory by directly using a system call of the OS <b>331</b> without going through the device control layer <b>320</b>. Further, USB memory status monitoring starts (S<b>508</b>). That is, the monitoring unit <b>412</b> acquires USB memory status, and the status management unit <b>430</b> executes processing according to the USB memory status.</p><p id="p-0132" num="0131">Subsequently, if it is detected that a problem related to access to the USB memory has occurred (&#x201c;YES&#x201d; in S<b>509</b>), access problem processing (described later) is executed (S<b>510</b>). Regarding whether or not a problem has occurred in accessing USB memory, as described above, the status management unit <b>430</b> may make a judgment according to a status acquired by the monitoring unit <b>412</b> referring to a return value of a system call of the OS <b>331</b>.</p><p id="p-0133" num="0132">If there is no problem in accessing the USB memory (&#x201c;NO&#x201d; in S<b>509</b>), or if data transfer with the USB memory is not yet complete after access problem processing (&#x201c;NO&#x201d; in S<b>511</b>), processing proceeds to step <b>5509</b> while continuing data transfer with the USB memory. If data transfer with the USB memory is complete (&#x201c;YES&#x201d; in S<b>511</b>), processing proceeds to step <b>5501</b> and waits for a next request for access to the USB memory from the application program <b>311</b>.</p><p id="p-0134" num="0133">By doing so, it is possible to directly request the OS <b>331</b> for access to the USB memory without going through the device control layer <b>320</b>, and therefore processing load and processing time for accessing the USB memory can be reduced.</p><heading id="h-0018" level="2">[6] Access Problem Processing (S<b>510</b>)</heading><p id="p-0135" num="0134">The following describes access problem processing (S<b>510</b>) executed by the USB access control program <b>300</b>.</p><p id="p-0136" num="0135">In the access problem processing (S<b>510</b>), the monitoring unit <b>412</b> acquires the status of the USB memory as problem information (S<b>601</b>), as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. For example, when a system call of the OS <b>331</b> used by the access control unit <b>410</b> to transfer data with the USB memory returns a value according to a problem type, the monitoring unit <b>412</b> can acquire problem information from the return value.</p><p id="p-0137" num="0136">Further, if the OS <b>331</b> has a system call that can acquire status information of a USB memory or the USB interface unit <b>211</b> from the USB interface driver <b>332</b>, the monitoring unit <b>412</b> may use the system call, acquire status information of the USB memory and/or the USB interface unit <b>211</b>, and the status management unit <b>430</b> may determine a problem type from the acquired status information.</p><p id="p-0138" num="0137">The following are example problems that may occur when transferring data with a USB memory:</p><p id="p-0139" num="0138">(a) memory size of the USB memory is full,</p><p id="p-0140" num="0139">(b) data transfer with the USB is interrupted due an access interrupt,</p><p id="p-0141" num="0140">(c) data cannot be transferred to or from the USB memory because another task is using the USB memory,</p><p id="p-0142" num="0141">(d) the USB memory was removed from the USB interface <b>211</b> during data transfer with the USB memory,</p><p id="p-0143" num="0142">(e) the USB memory malfunctioned and therefore data transfer cannot continue, and</p><p id="p-0144" num="0143">(f) when there are multiple USB ports, and the number of the USB devices <b>221</b> attached to the USB ports is too large and power reduction occurs, data transfer with the USB memory cannot be executed.</p><p id="p-0145" num="0144">The monitoring unit <b>412</b> directly uses a system call of the OS <b>331</b>, and therefore can acquire problem information even if an API for acquiring information about a problem that occurred during data transfer with the USB memory is not prepared in the interlayer communication interface <b>312</b> on the application layer <b>310</b> side.</p><p id="p-0146" num="0145">In this sense, it is not necessary to prepare an API for acquiring the problem information in the interlayer communication interface <b>312</b> on the application layer <b>310</b> side or the interlayer communication interface <b>321</b> on the device control layer <b>320</b> side.</p><p id="p-0147" num="0146">Therefore, the interlayer communication interface <b>312</b> on the application layer <b>310</b> side and the interlayer communication interface <b>321</b> on the device control layer <b>320</b> side can be simplified, and therefore processing loads and processing times of the interfaces <b>312</b>, <b>321</b> can be reduced.</p><p id="p-0148" num="0147">Further, even if an API is provided to the interlayer communication interface <b>312</b> on the application layer <b>310</b> side, as long as problem information is acquired using a system call of the OS <b>331</b>, processing load and processing time for acquisition can be reduced, and therefore problem information can be acquired promptly.</p><p id="p-0149" num="0148">When the monitoring unit <b>412</b> acquires problem information, the status management unit <b>430</b> notifies the application program requesting data transfer with the USB memory of the acquired problem information (S<b>602</b>). As a result, the application program <b>311</b> may notify a user of the image forming device <b>1</b> of the problem information, or may redo data transfer to ensure data transfer with the USB memory.</p><p id="p-0150" num="0149">As described above, the status management unit <b>430</b> records a problem information log in the application log DB <b>241</b>. Alternatively or additionally, the application program <b>311</b> may record the problem information received from the status management unit <b>430</b>.</p><p id="p-0151" num="0150">When both the application program <b>311</b> and the USB access control program <b>300</b> record log data, software operation can be analyzed in more detail than when only one records the log data. Recording log data in this way is useful as it helps infer causes of problems by analyzing log data.</p><p id="p-0152" num="0151">Next, when the access control unit <b>410</b> is transferring data to the USB memory (&#x201c;YES&#x201d; in S<b>603</b>), the temporary data storage processing unit <b>420</b> temporarily stores data to be transferred to the USB memory in the temporary storage area <b>242</b> (S<b>604</b>). Subsequently, the monitoring unit <b>412</b> uses a system call of the OS <b>331</b> to check the USB memory status (S<b>605</b>).</p><p id="p-0153" num="0152">If the acquired USB memory status is not &#x201c;ready&#x201d;, that is, if the status is not one where data transfer to the USB memory can be accepted (&#x201c;NO&#x201d; in S<b>606</b>), processing proceeds to step <b>5605</b>, and the monitoring unit <b>412</b> again references the USB memory status (S<b>605</b>).</p><p id="p-0154" num="0153">If the USB memory status acquired by the monitoring unit <b>412</b> is &#x201c;ready&#x201d;, that is, if the status is such that data transfer to the USB memory can be accepted (&#x201c;YES&#x201d; in S<b>606</b>), the status management unit <b>430</b> determines that data can be transferred to the USB memory, and the access control unit <b>410</b> resumes data transfer to the USB memory (S<b>607</b>).</p><p id="p-0155" num="0154">In this case, the USB access control program <b>300</b> first transfers data temporarily stored in the temporary storage area <b>242</b> to the USB memory. Subsequently, the USB access control program <b>300</b> transfers data newly requested to be transferred to the USB memory by the application program <b>311</b>.</p><p id="p-0156" num="0155">When data transfer to the USB memory resumes, processing returns to the main routine.</p><p id="p-0157" num="0156">In this way, information such as USB memory status can be acquired directly from the USB interface driver of the OS <b>331</b>, and therefore operation when a problem occurs can be controlled similarly to an operation of single-layer architecture. That is, fail-safe control can be performed in the same way as in a case of single-layer architecture.</p><p id="p-0158" num="0157">Further, the monitoring unit <b>412</b> can acquire the USB memory status and the status management unit <b>430</b> can be notified of the USB memory status, and therefore the application layer <b>310</b> can use USB access in consideration of the USB memory status.</p><p id="p-0159" num="0158">Further, in a case where the application program <b>311</b> receives data from a cloud system and transfers the data to USB memory, and in particular when an amount of data to be transferred to the USB memory is large, then even when the USB becomes unable to continue the data transfer, the temporary data storage processing unit <b>420</b> temporarily stores data in the temporary storage area <b>242</b>, and therefore the application program <b>311</b> can continue data transfer without being aware of the USB memory status.</p><p id="p-0160" num="0159">In this way, as long as the status management unit <b>430</b> executes fail-safe control when the USB memory cannot continue data transfer, executing fail-safe control is not necessary for the application program <b>311</b>, and therefore processing load, development cost, and program size of the application program <b>311</b> can be reduced.</p><p id="p-0161" num="0000">[7] Comparison with Conventional Art</p><p id="p-0162" num="0160">The following compares the present embodiment with conventional art.</p><p id="p-0163" num="0161">Improving access efficiency from the application program <b>311</b> to USB memory in the image forming device <b>1</b> is, in other words, improving data writing efficiency in an information processing device.</p><p id="p-0164" num="0162">In order to achieve such an object, for example, a conventional technique has been proposed according to which, when an access request to a storage device is generated in an information processing device, access is processed by selecting either a direct I/O or a buffered I/O access method, depending on at least one of an attribute of the application program that requested access and write data size associated with the access request (for example, see JP 2011-258027).</p><p id="p-0165" num="0163">However, if the access method is switched as per the conventional technique mentioned above, access to a lower layer in multi-tier architecture has to go through an abstraction layer, and the overhead due to many interface calls in the abstraction layer cannot be reduced.</p><p id="p-0166" num="0164">Further, a conventional technique has been proposed that switches data transfer paths between nodes that constitute a parallel computer, in order to prevent data transfer by an application program from being hindered or reduced in performance by data transfer by an operating system (for example, see JP <b>2007</b>-<b>156851</b>).</p><p id="p-0167" num="0165">According to this conventional technique, paths for transferring data between nodes can be switched, but when each node is provided with multi-tier architecture software, overhead of abstraction layers when processing application program data transfer cannot be reduced.</p><p id="p-0168" num="0166">Further, a conventional technique has been proposed that eliminates contention been data and commands at a time of transfer, by sending data and commands for controlling data transfer between a file server and network storage by separate paths that are not between nodes that make up a parallel computer (for example, see JP 2004-220216).</p><p id="p-0169" num="0167">According to this conventional technique, application programs can transfer data and commands between file storage and network storage via separate routes, but when the file server is provided with multi-tier architecture software, overhead of abstraction layers when transferring data cannot be reduced.</p><p id="p-0170" num="0168">Further, a conventional technique has been proposed to execute I/O processing efficiently by directly exchanging data between I/O devices such as network adapters and disk controllers, thereby minimizing use of a processor, main storage, and system bus resources of a server computer (for example, see JP 2000-047952).</p><p id="p-0171" num="0169">According to this conventional technique, I/O processing can be made more efficient, but software processing in an abstraction layer up to I/O processing cannot be made more efficient.</p><p id="p-0172" num="0170">Further, a conventional technique has been proposed for accelerating file exchange and sharing by exchanging information in a common format between computers having difference types of operating system (for example, see JP 2001-084168).</p><p id="p-0173" num="0171">While this conventional technique can share data location information between computers, it cannot reduce overhead in abstraction layers of individual computers.</p><p id="p-0174" num="0172">In contrast, the image forming device <b>1</b> according to the present embodiment relays access from the application program <b>311</b> to an external device by using the access control program <b>300</b> that accesses a lower layer from an upper layer without passing through an abstraction layer, which is a structure different from that of the conventional techniques described above.</p><p id="p-0175" num="0173">With such a structure, overhead of an abstraction layer in software of multi-tier architecture can be avoided when the application program <b>311</b> accesses an external device.</p><p id="p-0176" num="0174">Accordingly, efficiency of access to USB memory from the application program <b>311</b> can be improved.</p><p id="p-0177" num="0175">Further, the access control program <b>300</b> can store path information for accessing the external device, and therefore overhead for acquiring path information can be reduced by accessing the external device using stored path information.</p><p id="p-0178" num="0176">In this sense as well, efficiency of access to USB memory from the application program <b>311</b> can be improved.</p><heading id="h-0019" level="2">[8] Modifications</heading><p id="p-0179" num="0177">Although the present disclosure has provided description of the embodiments above, the present disclosure is of course not limited to the embodiments described above, and the following modifications can be implemented.</p><p id="p-0180" num="0178">(8-1) According to at least one embodiment, access problem processing (S<b>510</b>) is executed when a USB memory problem is detected, but the present disclosure is of course not limited to this, and the following modifications are possible.</p><p id="p-0181" num="0179">For example, as illustrated by a double-headed arrow <b>701</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the monitoring unit <b>412</b> of the USB access control program <b>300</b> may acquire USB memory status using the interlayer communication interface <b>312</b> on the application layer <b>310</b> side, and notify the status management unit <b>430</b>.</p><p id="p-0182" num="0180">That is, as illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, when transferring data from the application program <b>311</b> to the USB memory (&#x201c;YES&#x201d; in S<b>801</b>), USB memory status is acquired via the device control layer <b>320</b> by using the interlayer communication interface <b>312</b> on the application layer <b>310</b> side (S<b>802</b>).</p><p id="p-0183" num="0181">When using the interlayer communication interface <b>312</b> on the application layer <b>310</b> side, the access control unit <b>410</b> may acquire the USB memory status in parallel with data transfer to or from the USB memory using a system call of the OS <b>331</b>.</p><p id="p-0184" num="0182">USB memory status that can be acquired in this way is, for example, USB memory storage capacity, an amount of data stored in USB memory, information on management and control of USB memory, USB memory state information, and the like.</p><p id="p-0185" num="0183">By doing so, for example as illustrated by the double arrow <b>702</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, when writing a large amount of data to USB memory, the USB memory storage capacity and an amount of data stored in the USB memory are referenced, and therefore it is possible to detect when the USB memory is approaching full capacity before the USB memory becomes full.</p><p id="p-0186" num="0184">Subsequently, the monitoring unit <b>412</b> notifies the status management unit <b>430</b> of the acquired status (S<b>803</b>). Subsequently, if data transfer to the USB memory is not complete (&#x201c;NO&#x201d; in S<b>804</b>), processing proceeds to step <b>5802</b> and the above processing is repeated. If data transfer to the USB memory is completed (&#x201c;YES&#x201d; in S<b>804</b>), processing proceeds to step <b>5801</b> and waits for a next transfer.</p><p id="p-0187" num="0185">In this way, the monitoring unit <b>412</b> can acquire USB memory status and notify the status management unit <b>430</b> before a USB memory problem occurs.</p><p id="p-0188" num="0186">Accordingly, in the main routine of the USB access control program <b>300</b>, as illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>, the status management unit <b>430</b> determines whether or not there is a possibility that a problem may occur in USB memory access, and when there is a possibility (&#x201c;YES&#x201d; in S<b>908</b>), access problem processing (S<b>909</b>) can be executed even if a problem has not yet actually occurred.</p><p id="p-0189" num="0187">For example, when an instruction to transfer large amount of data from a high capacity storage such as a cloud storage <b>710</b> to a USB memory is received, then even if no problem has occurred with the USB memory, the monitoring unit <b>412</b> can acquire the USB memory status so that the status management unit <b>430</b> can acquire free capacity of the USB memory.</p><p id="p-0190" num="0188">As a result, if it is determined that free capacity of the USB is smaller than an amount of data the instruction indicates is to be transferred, the status management unit <b>430</b> can warn the source of the instruction. By receiving a warning, a user could replace the USB memory that has insufficient free space with a USB memory that has sufficient free space.</p><p id="p-0191" num="0189">Further, even if the instruction to transfer data is maintained without replacing the USB memory, despite the warning, the status management unit <b>430</b> can acquire free capacity of the USB memory due to the monitoring unit <b>412</b> acquiring the USB memory status even if no problem has occurred with the USB memory.</p><p id="p-0192" num="0190">As a result, when the status management unit <b>430</b> detects that the USB memory is approaching a full memory state, then before the USB memory is actually full, the status management unit <b>430</b> can warn the source of the instruction to transfer data that the USB memory attached to the image forming device <b>1</b> has insufficient capacity, and that data transfer cannot be continued.</p><p id="p-0193" num="0191">On receiving this warning, a user could remove the USB memory that is approaching a full memory state from the image forming device <b>1</b>, and install a USB memory with sufficient free space, such that untransferred data can be transferred to the new USB memory. Accordingly, the state of the USB memory becoming full can be avoided.</p><p id="p-0194" num="0192">Further, in this case, if data transfer to the USB memory is temporarily suspended and data to be transferred to the USB memory is stored in the temporary storage area <b>242</b>, then data transfer from the cloud storage to the application program <b>311</b> can continue regardless of the status of the USB memory.</p><p id="p-0195" num="0193">If the source of the instruction to transfer data instructs that data transfer should continue without replacing the USB, despite the warning that the USB memory is approaching a full memory state, then a full memory state occurs, which a USB memory problem. Processing when a full memory state occurs can, for example, be executed as described according to at least one embodiment above.</p><p id="p-0196" num="0194">(8-2) According to at least one embodiment, access from the application program <b>311</b> to USB memory connected to the image forming device <b>1</b> is made efficient, but the present disclosure is of course not limited to this.</p><p id="p-0197" num="0195">A USB storage other than a USB memory, such as a USB hard disk, may be connected to the USB interface <b>211</b> and accessed from the application program <b>311</b>.</p><p id="p-0198" num="0196">Further, an external authentication device such as a card reader or biometric authentication device, or an image capture device (camera) for capturing still or moving images may be connected to the USB interface unit <b>211</b> and accessed from the application program <b>311</b>.</p><p id="p-0199" num="0197">Such external devices other than a USB memory may be connected to the USB interface <b>211</b> and accessed from the application problem <b>311</b>.</p><p id="p-0200" num="0198">Further, the image forming device <b>1</b> may be provided with an interface conforming to a standard other than USB, and the present disclosure is also applicable to a case where an external device connected to an interface conforming to a standard other than USB is accessed from the application program <b>311</b>, and improves access efficiency in such a case.</p><p id="p-0201" num="0199">In this case, a dedicated access control program may be used instead of the USB access control program <b>300</b>.</p><p id="p-0202" num="0200">Examples of external devices connected to an interface conforming to a standard other than USB include Secure Digital (SD) memory cards and multimedia cards, for example.</p><p id="p-0203" num="0201">(8-3) According to at least one embodiment, access from the application program <b>311</b> to an external device connected to the image forming device <b>1</b> is made efficient, but the present disclosure is of course not limited to this.</p><p id="p-0204" num="0202">For example, when wanting to control access to resources and devices at a timing from an application, or when wanting to perform an image adjustment at level not normally used, from an application, or the like, if the interlayer communication interface <b>312</b> on the application layer <b>310</b> side or the interlayer communication interface <b>321</b> on the device control layer <b>320</b> side is modified to add functions, the advantage of using the device control layer <b>320</b> as an abstraction layer is impaired.</p><p id="p-0205" num="0203">In this case as well, by using the access control program <b>300</b> that directly uses a system call of the OS <b>331</b> to control access to resources and devices at a timing from an application, and to perform image adjustment at a level not normally used from an application, access efficiency can be improved without compromising the advantages of using the device control layer <b>320</b> as an abstraction layer be not going through the device control layer <b>320</b>.</p><p id="p-0206" num="0204">Therefore, for example, even if the interlayer communication interface <b>312</b> on the application layer <b>310</b> side is not provided with an interface for notifying of a problem related to the image forming device <b>1</b> or an external device, the application program <b>311</b> can execute a control for a fail-safe.</p><p id="p-0207" num="0205">(8-4) According to at least one embodiment, the control unit <b>410</b> is a control board that has a single CPU, but the present disclosure is of course not limited to this, and may be a control board that has multiple CPU, for example. Further, the control unit <b>410</b> may be divided into multiple circuit boards.</p><p id="p-0208" num="0206">Regardless of hardware structure of the control unit <b>410</b>, effects can be achieved by application of the present disclosure.</p><p id="p-0209" num="0207">(8-5) According to at least one embodiment, the image forming device <b>1</b> is a multi-function peripheral, but the present disclosure is of course not limited to this. Instead, the image forming device <b>1</b> may be a single function device such as a printer, a scanner, a photocopier, a facsimile machine, or the like.</p><p id="p-0210" num="0208">Similar effects can be achieved by applying the present disclosure, regardless of the type of the image forming device <b>1</b>.</p><p id="p-0211" num="0209">(8-6) According to at least one embodiment, an image forming device is described, but the present disclosure is not limited to this. For example, the present disclosure is applicable to a processing method executed by an image forming device. Further, the present disclosure is applicable to a program that causes a computer to execute such a processing method.</p><p id="p-0212" num="0210">Further, a program according to the present disclosure can be recorded on various computer-readable recording media, such as magnetic tape, magnetic disks such as flexible disks, optical recording media such as DVD-ROM, DVD-RAM, CD-ROM, CD-R, MO, PD, flash memory recording media, and the like, produced or transferred in the form of such recording media, and may be transmitted and supplied via various wired and wireless networks including the Internet, broadcasting, telecommunication lines, satellite communications, and the like.</p><p id="p-0213" num="0211">(8-7) The present disclosure may be realized as any combination of the embodiments and modifications described above.</p><p id="p-0214" num="0212">Although embodiments of the present invention have been described and illustrated in detail, the disclosed embodiments are made for purposes of illustration and example only and not limitation. The scope of the present invention should be interpreted by terms of the appended claims</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An image forming device to which an external device is detachably attached, the image forming device comprising:<claim-text>an interface that is able to attach to the external device;</claim-text><claim-text>a storage that stores multi-tier architecture software; and</claim-text><claim-text>a computer that executes the multi-tier architecture software,</claim-text><claim-text>the multi-tier architecture software comprising:</claim-text><claim-text>a lower layer that includes an operating system (OS) that manages the external device attached to the interface;</claim-text><claim-text>an upper layer that includes an application program that accesses the external device via the lower layer; and</claim-text><claim-text>an abstraction layer that intervenes between the lower layer and the upper layer and hides implementation of the lower layer from the upper layer, wherein</claim-text><claim-text>the upper layer includes an access control program,</claim-text><claim-text>the access control program:<claim-text>is able to save path information to access the external device to the storage, and</claim-text><claim-text>relays access from the application program of the upper layer to the external device by accessing the lower layer without going through the abstraction layer and accessing the external device using the path information.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The image forming device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the abstraction layer includes a device control program.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The image forming device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the access control program includes a path information acquisition program that is executed by the computer to acquire path information via the abstraction layer.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The image forming device of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the path information acquisition program is executed by the computer to acquire the path information when the access control program makes the application program access the external device and the path information is not already stored.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The image forming device of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the abstraction layer provides the upper layer with a path information-free interface for accessing the external device from the upper layer without receiving specification of path information from the upper layer.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The image forming device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein<claim-text>the path information-free interface provides path information to the upper layer when accessing the external device from the upper layer, and</claim-text><claim-text>the path information acquisition program is executed by the computer to acquire path information provided by accessing the external device using the path information-free interface.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The image forming device of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the path information acquisition program is executed by the computer to acquire path information by transferring a minimum amount of data required for the path information-free interfaces to provide path information to the external device.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The image forming device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the minimum amount of data is empty data.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The image forming device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the upper layer includes a monitoring program that is executed by the computer to acquire a status of the external device.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The image forming device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the monitoring program is executed by the computer to access the lower layer to acquire the status of the external device without going through the abstraction layer.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The image forming device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the monitoring program is executed by the computer to acquire the status of the external device when a failure occurs while accessing the external device.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The image forming device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the monitoring program is executed by the computer to acquire the status of the external device from a hardware abstraction layer of the OS.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The image forming device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the monitoring program is executed by the computer to access the lower layer via the abstraction layer to acquire the status of the external device.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The image forming device of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the monitoring program is executed by the computer to acquire the status of the external device while accessing the external device.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The image forming device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the upper layer includes a status management program that is executed by the computer to control access to the external device according to the status of the external device acquired by the monitoring program.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The image forming device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein if the status indicates that access to the external device has been interrupted, the status management program is executed by the computer to temporarily put access to the external device into a standby state.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The image forming device of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein<claim-text>the upper layer includes a temporary storage program that when executed by the computer, when the status management program temporarily puts access to the external device into the standby state and the access is for data transfer to the external device, causes the data to be transferred to be temporarily stored, and</claim-text><claim-text>transfers the temporarily stored data to the external device when the status management program ends the standby state.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The image forming device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the status management program is executed by the computer to interrupt or stop access to the external device if the status indicates that the external device has a full memory, is faulty, or has a problem of unknown cause.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A program executed by a computer in an image forming device to which a device is detachably attached, the image forming device including a storage, the program having multi-tier architecture comprising:<claim-text>a lower layer that includes an operating system (OS) that manages the external device when attached;</claim-text><claim-text>an upper layer that includes an application program that accesses the external device via the lower layer; and</claim-text><claim-text>an abstraction layer that intervenes between the lower layer and the upper layer and hides implementation of the lower layer from the upper layer, wherein</claim-text><claim-text>the upper layer causes the computer to execute:<claim-text>a saving step of saving path information to access the external device to the storage; and</claim-text><claim-text>an access control step of relaying access from the application program of the upper layer to the external device by accessing the lower layer without going through the abstraction layer and accessing the external device using the path information.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>