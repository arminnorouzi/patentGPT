<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004591A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004591</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17782040</doc-number><date>20201210</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="regional"><country>EP</country><doc-number>19215894.7</doc-number><date>20191213</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>35</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>17</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>355</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>17</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>022</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">METHOD FOR GENERATING TRIPLES FROM LOG ENTRIES</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Siemens Aktiengesellschaft</orgname><address><city>M&#xfc;nchen</city><country>DE</country></address></addressbook><residence><country>DE</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Brikis</last-name><first-name>Georgia Olympia</first-name><address><city>Plainsboro</city><state>NJ</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Fradkin</last-name><first-name>Dmitry</first-name><address><city>Wayne</city><state>PA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Lavrik</last-name><first-name>Vladimir</first-name><address><city>Dreieich, Hessen</city><country>DE</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Mogoreanu</last-name><first-name>Serghei</first-name><address><city>M&#xfc;nchen</city><country>DE</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Scholz</last-name><first-name>Andr&#xe9;</first-name><address><city>Ansbach</city><country>DE</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/EP2020/085402</doc-number><date>20201210</date></document-id><us-371c12-date><date>20220602</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A computer-implemented method, computer program product, and a technical system for generating triples including<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0000">providing a plurality of log entries from respective log files, wherein each log entry of the plurality of log entries includes at least one text message,</li>        <li id="ul0002-0002" num="0000">generating at least one template based on the plurality of log entries using unsupervised clustering, wherein the at least one template includes at least one variable part and at least one fixed part,</li>        <li id="ul0002-0003" num="0000">assigning each log entry of the plurality of log entries to one respective template based on the generated at least one template using a similarity measure,</li>        <li id="ul0002-0004" num="0000">extracting the corresponding at least one variable and at least one fixed part of each text message of the plurality of text messages as key/value pairs using the respective assigned at least one template based on the plurality of log entries, and</li>        <li id="ul0002-0005" num="0000">providing the text messages, keys and values as triples.</li>    </ul>    </li></ul></p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="37.17mm" wi="158.75mm" file="US20230004591A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="128.44mm" wi="87.46mm" file="US20230004591A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="214.46mm" wi="70.70mm" orientation="landscape" file="US20230004591A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application claims priority to PCT Application No. PCT/EP2020/085402, having a filing date of Dec. 10, 2020, which claims priority to EP Application No. 19215894.7, having a filing date of Dec. 13, 2019, the entire contents both of which are hereby incorporated by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD OF TECHNOLOGY</heading><p id="p-0003" num="0002">The following relates to a computer-implemented method for generating triples from log entries. Further, the following relates to a corresponding computer program product and technical system.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">The amount of data or data volume is still increasing until now. The data can include human- and machine-generated data. This large or voluminous data is known under the terms &#x201c;big data&#x201d; or &#x201c;large scale data&#x201d;. Especially, the digital data will substantially grow in the next years in view of the digital transformation.</p><p id="p-0005" num="0004">Thus, the importance of automated large scale data analysis or data processing will gain in importance since the manual analysis becomes unfeasible for the experts. This analysis or processing paradigm encompasses a series of different methods and systems to process big data. Big data challenges include in particular capturing data, data storage, data analysis, search, sharing, transfer, visualization, querying, updating, information privacy and data source.</p><p id="p-0006" num="0005">Considering complex industrial plants, the industrial plants usually comprise distinct parts, modules or units with a multiplicity of individual functions. Exemplary units include sensors and actuators. The units and functions have to be controlled and regulated in an interacting manner. They are often monitored, controlled and regulated by automation systems, for example the Simatic S7 system of Siemens AG. The units can either exchange data directly with one another or communicate via a bus system with one another and with a master control unit, if the plant has such a unit. The units are connected to the bus system via parallel or, more often, serial interfaces.</p><p id="p-0007" num="0006">A large amount of log files is generated during operation of such industrial plants. Each log file comprises one or more log entries and has a different structure or format depending on the computing unit, program or process it was generated by. Log mining tasks struggle with the variety of log file structures, formats and types that can be found in heterogenous computer systems, such as the aforementioned industrial plants. Exemplary tasks include the identification of anomalies in the log entries, comparison of the log files from one industrial plant over time, extraction of log files and/or extraction of relevant information from the log files of different industrial plants.</p><p id="p-0008" num="0007">According to prior art, users or experts have to manually analyze the huge amount of log files and to extract the relevant information from their log entries. However, such manual approaches rely on expert knowledge and require a lot of manual effort. Thus, they are error-prone, time consuming and expensive.</p><p id="p-0009" num="0008">Alternatively, information extraction can be accomplished automatically with e.g. regular expressions, which are known from the prior art. However, the patterns have to be defined and tested by an expert based on expert knowledge. A disadvantage is that the definition, testing and pattern matching is error prone and time-consuming.</p><p id="p-0010" num="0009">Further, IncMap is known from the prior art for mapping elements from a data source e.g. log entries to concepts and relationships in ontologies. IncMap performs a recurrent ad-hoc mapping with user feedback. However, this approach requires a structured or relational data base as data source and the ontology as basis for mapping. Thus, the disadvantage is that the definition of the ontology has to be established beforehand in a time-consuming and error-prone manner.</p><p id="p-0011" num="0010">An aspect relates to provide a computer-implemented method for generating triples from log entries in an efficient and reliable manner.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0012" num="0011">This problem is according to one aspect of embodiments of the invention solved by computer-implemented method for generating triples from log entries, comprising the steps of:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0012">a. Providing a plurality of log entries from respective log files; wherein each log entry of the plurality of log entries comprises at least one text message;</li>    <li id="ul0003-0002" num="0013">b. Generating at least one template based on the plurality of log entries using unsupervised clustering; wherein the at least one template comprises at least one variable part and at least one fixed part;</li>    <li id="ul0003-0003" num="0014">c. Assigning each log entry of the plurality of log entries to one respective template based on the generated at least one template using a similarity measure;    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0015">d. Extracting the corresponding at least one variable and at least one fixed part of each text message of the plurality of text messages as key/value pairs using the respective assigned at least one template based on the plurality of log entries; and</li>    </ul>    </li>    <li id="ul0003-0004" num="0016">e. Providing the text messages, keys and values as triples.</li></ul></p><p id="p-0013" num="0017">Accordingly, embodiments of the invention are directed to a computer-implemented method for generating triples from log entries.</p><p id="p-0014" num="0018">Knowledge graphs are known from the prior art as graph-structured databases. The triples are the elementary units of a knowledge graph. The triple can be defined as subject-predicate-object, often denoted as (head, relation, tail), (s, p, o) or (h, r, t). Each triple defines one connection between two entities in the knowledge graph.</p><p id="p-0015" num="0019">In a first step, the log entries of log files are provided as input. During operation, a computing unit or technical system generates a huge amount of log files, comprising respective log entries with their text messages. Thereby, each log entry comprises at least one text message. The text messages of these log entries are used for the further method steps.</p><p id="p-0016" num="0020">Furthermore, each log entry can comprise additional elements or information, such as time stamp, indicators of the computing unit, technical system, subsystem or component e.g. where it was generated.</p><p id="p-0017" num="0021">In a second step, after the reception of the input data set, one or more templates are determined from the text messages by means of unsupervised clustering on the basis of the received input data set. According to an embodiment, unsupervised clustering is used for the task of topic modelling. In more detail, a one-pass density clustering algorithm based on Jaccard distance and a bag-of-words model can be used to represent the messages. The advantage is that no supervision or human intervention is required. Further, this algorithm can handle log entries produced by arbitrary software processes.</p><p id="p-0018" num="0022">In other words, the log entries are instances of a log entry template or template. This means that the text message of the log entry consists partly of a fixed text and partly of dynamically generated values, thus two parts. For example, the log entry template can be expressed as &#x201c;Unable to open file % s&#x201d;, whereas the part &#x201c;Unable to open file&#x201d; is the fixed part and &#x201c;% s&#x201d; is the variable part. The actual instances have specific file paths in the message text.</p><p id="p-0019" num="0023">In a third step, after the generation of the templates, the templates are applied on the log messages using a similarity measure. In other words, similar text messages are clustered and assigned to the same or common template. Thus, they are classified as the same template. According to an embodiment, a distance measure is used as similarity measure, such as the Jaccard distance measure.</p><p id="p-0020" num="0024">In a further step, key/value pairs are extracted from the text messages using the corresponding generated templates.</p><p id="p-0021" num="0025">In a last step, the text messages, keys and values are provided as triples. The triples comprise the connections between the entities.</p><p id="p-0022" num="0026">In more detail, the text message is in relation or connection to the value. The text message and the value are the entities. The relation or connection between the entities is the key. More precisely, the subject is the message, the predicate is the key and the object is the value.</p><p id="p-0023" num="0027">The method according to embodiments of the invention ensures an improved generation of triples from log files since the triples are automatically generated from the log entries.</p><p id="p-0024" num="0028">The resulting output data is more reliable and less error-prone compared to prior art. This way, the output data and in particular the triples can serve as improved basis for more efficient use cases, which are built on the reliable output data. In particular, the triples can be loaded into a knowledge graph in an efficient manner, see further below. The knowledge graph serves as common data base for further analyses on the heterogeneous data.</p><p id="p-0025" num="0029">The manual effort by experts, such as the construction of an ontology, conception of mapping rules from log entries to entities in the ontology can be reduced or even prevented.</p><p id="p-0026" num="0030">In contrast to prior art, the method is applicable on unseen or unexpected text messages, which are similar to already existing ones.</p><p id="p-0027" num="0031">In one aspect the triples are an input data set for log mining or any other further analysis.</p><p id="p-0028" num="0032">Accordingly, the output of the method or result in the form of the triples can be used for distinct tasks. Thereby, the knowledge graph is important for diagnosis and repair of problems in an industrial environment e.g. industrial plants. In other words, the method allows the transformation of a set or collection of diverse log files from computing units or systems into a knowledge graph. Thus, the problems e.g. defects or failures of industrial plants can be detected and handled in an efficient and timely manner. Further, the method allows for an increased system uptime and reduced maintenance costs due to the improved earlier detection.</p><p id="p-0029" num="0033">Additionally, or alternatively, the method or result in the form of the triples can be used for products and/or services to support the customers or other users by analyzing their industrial plants, devices or other technical units. This support leads to e.g. an increase in the number of sales of the respective products and/or services.</p><p id="p-0030" num="0034">In a further aspect the method comprises the further step of loading the input data set into a knowledge graph.</p><p id="p-0031" num="0035">A further aspect of embodiments of the invention is a computer program product (non-transitory computer readable storage medium having instructions, which when executed by a processor, perform actions) directly loadable into an internal memory of a computer, comprising software code portions for performing the steps according to the aforementioned method when said computer program product is running on a computer.</p><p id="p-0032" num="0036">A further aspect of embodiments of the invention is a technical system for generating triples, comprising:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0037">a. Receiving unit for providing a plurality of log entries from respective log files;    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0038">wherein each log entry of the plurality of log entries comprises at least one text message;</li>    </ul>    </li>    <li id="ul0005-0002" num="0039">b. Clustering unit for    <ul id="ul0007" list-style="none">        <li id="ul0007-0001" num="0040">generating at least one template based on the plurality of log entries using unsupervised clustering; wherein the at least one template comprises at least one variable part and at least one fixed part and</li>        <li id="ul0007-0002" num="0041">Assigning each log entry of the plurality of log entries to one respective template based on the generated at least one template using a similarity measure;</li>    </ul>    </li>    <li id="ul0005-0003" num="0042">d. Triple extracting unit for extracting the corresponding at least one variable and at least one fixed part of each text message of the plurality of text messages as key/value pairs using the respective assigned at least one template based on the plurality of log entries; and</li>    <li id="ul0005-0004" num="0043">e. Transmitting unit for providing the text messages, keys and values as triples.</li></ul></p><p id="p-0033" num="0044">The units may be realized as any devices, or any means, for computing, in particular for executing a software, an app, or an algorithm. For example, the units may consist of or comprise a central processing unit (CPU) and/or a memory operatively connected to the CPU. The units may also comprise an array of CPUs, an array of graphical processing units (GPUs), at least one application-specific integrated circuit (ASIC), at least one field-programmable gate array, or any combination of the foregoing. The units may comprise at least one module which in turn may comprise software and/or hardware. Some, or even all, modules of the units may be implemented by a cloud computing platform.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION</heading><p id="p-0034" num="0045">Some of the embodiments will be described in detail, with reference to the following figures, wherein like designations denote like members, wherein:</p><p id="p-0035" num="0046"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a flowchart of the method according to an embodiment of the invention; and</p><p id="p-0036" num="0047"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a technical system according to an embodiment of the invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0037" num="0048"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a flowchart of the method according to embodiments of the invention. The method for generating triples, comprises the following steps S<b>1</b> to S<b>5</b>:<ul id="ul0008" list-style="none">    <li id="ul0008-0001" num="0049">a. In a first step a plurality of log entries <b>12</b> is provided. The log entries are derived from respective log files S<b>1</b>. Each log entry comprises one or more text messages. The first step can be performed by a receiving unit <b>10</b>.</li>    <li id="ul0008-0002" num="0050">b. In a second step at least one template is generated based on the plurality of log entries using unsupervised clustering S<b>2</b>. Each template comprises at least one variable part and at least one fixed part. The second step can be performed by a clustering unit. The clustering unit can be equally referred to extracting unit <b>20</b>.</li>    <li id="ul0008-0003" num="0051">c. In a third step each log entry of the plurality of log entries is assigned to one respective template based on the generated at least one template using a similarity measure S<b>3</b>. The third step can be performed by the same clustering unit or another clustering unit <b>20</b>.</li>    <li id="ul0008-0004" num="0052">d. In a further step the corresponding at least one variable and at least one fixed part of each text message of the plurality of text messages are extracted as key/value pairs using the respective assigned at least one template based on the plurality of log entries <b>12</b>. This step can be performed by a triple extracting unit <b>30</b>.</li>    <li id="ul0008-0005" num="0053">e. In a last step the text messages, keys and values are provided as triples <b>42</b>. This last step can be performed by a transmitting or sending unit <b>40</b>. The aforementioned units of the technical system can be also referred to as modules.</li></ul></p><p id="p-0038" num="0054"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an exemplary technical system <b>1</b> with the aforementioned units <b>10</b> to <b>40</b>. The resulting triples are loaded into a knowledge graph according to this embodiment.</p><p id="p-0039" num="0055">Clustering According to Steps S<b>2</b> and S<b>3</b></p><p id="p-0040" num="0056">The step S<b>2</b>, the templates are generated based on different log messages with usage of unsupervised clustering. Each template consists of fixed and variable parts. Exemplary templates are listed in the following:<ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0057">Log message: &#x201c;Software McAfee tries to reach IP address 139.136.55.1&#x201d;</li>    <li id="ul0009-0002" num="0058">Template: &#x201c;Software &#x3c;*&#x3e; tries to reach IP address &#x3c;*&#x3e;&#x201d;</li>    <li id="ul0009-0003" num="0059">Log message: &#x201c;Software McAfee Solidifier detected deletion of C:\temp\test.vbs&#x201d;</li>    <li id="ul0009-0004" num="0060">Template: &#x201c;Software &#x3c;*&#x3e; detected deletion of &#x3c;*&#x3e;&#x201d;</li></ul></p><p id="p-0041" num="0061">In step S<b>3</b>, similar text messages are classified as the same template, e.g. similar in the manner that the fixed parts are the same, variable parts are not the same, but have the same structure and/or length.</p><p id="p-0042" num="0062">Exemplary templates and a list of log entries with their corresponding templates are listed in the following:<ul id="ul0010" list-style="none">    <li id="ul0010-0001" num="0063">Template: &#x201c;Software &#x3c;*&#x3e; tries to reach IP address &#x3c;*&#x3e;&#x201d;</li>    <li id="ul0010-0002" num="0064">Log messages:</li>    <li id="ul0010-0003" num="0065">&#x201c;Software McAfee tries to reach IP address 139.136.55.1&#x201d;</li>    <li id="ul0010-0004" num="0066">&#x201c;Software Symantec Endpoint Protection tries to reach IP address 138.136.55.10&#x201d;</li>    <li id="ul0010-0005" num="0067">Template: &#x201c;Software &#x3c;*&#x3e; detected deletion of &#x3c;*&#x3e;&#x201d;</li>    <li id="ul0010-0006" num="0068">Log messages:</li>    <li id="ul0010-0007" num="0069">&#x201c;Software McAfee Solidifier detected deletion of C:\temp\test.vbs&#x201d;</li>    <li id="ul0010-0008" num="0070">&#x201c;Software ACME Detector detected deletion of C:\temp\test2.vbs&#x201d;</li></ul></p><p id="p-0043" num="0071">Triple Extracting According to Step S<b>4</b></p><p id="p-0044" num="0072">In step S<b>4</b>, the varying and the fixed parts of the different text messages are extracted according to the structure of the templates. For every varying part the fixed part before is extracted and listed as key/value pairs.</p><p id="p-0045" num="0073">Exemplary key/value pairs after said extraction are listed in the following:<ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0074">Key: &#x201c;Software&#x201d;, Value: &#x201c;McAfee&#x201d;</li>    <li id="ul0011-0002" num="0075">Key: &#x201c;tries to reach IP address&#x201d;, Value: &#x201c;139.136.55.1&#x201d;</li>    <li id="ul0011-0003" num="0076">Key: &#x201c;Software&#x201d;, Value: &#x201c;Symantec Endpoint protection&#x201d;</li>    <li id="ul0011-0004" num="0077">Key: &#x201c;tries to reach IP address&#x201d;, Value: &#x201c;138.136.55.10&#x201d;</li>    <li id="ul0011-0005" num="0078">Key: &#x201c;Software&#x201d;, Value: &#x201c;McAfee Solidifier&#x201d;</li>    <li id="ul0011-0006" num="0079">Key: &#x201c;detected deletion of&#x201d;, Value: &#x201c;C:\temp\test.vbs&#x201d;</li>    <li id="ul0011-0007" num="0080">Key: &#x201c;Software&#x201d;, Value: &#x201c;ACME Detector&#x201d;</li>    <li id="ul0011-0008" num="0081">Key: &#x201c;detected deletion of&#x201d;, Value: &#x201c;C:\temp\test2.vbs&#x201d;</li></ul></p><p id="p-0046" num="0082">Further, the key/value pairs of fixed and varying text message parts are connected to entities of the text message itself for the graph creation as exemplary use case.</p><p id="p-0047" num="0083">Exemplary connections are listed in the following:<ul id="ul0012" list-style="none">    <li id="ul0012-0001" num="0084">Create a connection &#x201c;Software&#x201d; from this message to the entity &#x201c;McAfee&#x201d;</li>    <li id="ul0012-0002" num="0085">Create a connection &#x201c;triesToReachIPaddress&#x201d; from this message to the entity &#x201c;139.136.55.1&#x201d;, which could relate to a device</li>    <li id="ul0012-0003" num="0086">Create a connection &#x201c;Software&#x201d; from this message to the entity &#x201c;McAfee Solidifier&#x201d;</li>    <li id="ul0012-0004" num="0087">Create a connection &#x201c;detectedDeletionOf&#x201d; from this message to the entity &#x201c;C:\temp\test.vbs&#x201d;</li></ul></p><p id="p-0048" num="0088">Post-processing steps can be added after the generation of the triples before they are loaded into the knowledge graph, such as entity reconciliation e.g. nearly similar path names should be treated as the same entity.</p><p id="p-0049" num="0089">Although the present invention has been disclosed in the form of preferred embodiments and variations thereon, it will be understood that numerous additional modifications and variations could be made thereto without departing from the scope of the invention.</p><p id="p-0050" num="0090">For the sake of clarity, it is to be understood that the use of &#x201c;a&#x201d; or &#x201c;an&#x201d; throughout this application does not exclude a plurality, and &#x201c;comprising&#x201d; does not exclude other steps or elements.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method for generating triples from log entries, the method comprising:<claim-text>providing a plurality of log entries from respective log files, wherein each log entry of the plurality of log entries comprises at least one text message;</claim-text><claim-text>generating at least one template based on the plurality of log entries using unsupervised clustering, wherein the at least one template comprises at least one variable part and at least one fixed part;</claim-text><claim-text>assigning each log entry of the plurality of log entries to one respective template based on the generated at least one template using a similarity measure;</claim-text><claim-text>extracting the corresponding at least one variable and at least one fixed part of each text message of the plurality of text messages as key/value pairs using the respective assigned at least one template based on the plurality of log entries; and</claim-text><claim-text>providing text messages, keys and values as triples.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the triples are an input data set for log mining or any other further analysis.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprises loading the input data set into a knowledge graph.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. A computer program product, comprising a computer readable hardware storage device having computer readable program code stored therein, said program code executable by a processor or a computer system to implement a method according to <claim-ref idref="CLM-00001">claim 1</claim-ref> when the computer program product is running on a computer.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. A technical system for generating triples from log entries, the technical system comprising:<claim-text>a receiving unit for providing a plurality of log entries from respective log files, wherein each log entry of the plurality of log entries comprises at least one text message;</claim-text><claim-text>a clustering unit for:<claim-text>generating at least one template based on the plurality of log entries using unsupervised clustering, wherein the at least one template comprises at least one variable part and at least one fixed part, and</claim-text><claim-text>assigning each log entry of the plurality of log entries to one respective template based on the generated at least one template using a similarity measure;</claim-text></claim-text><claim-text>a triple extracting unit for extracting the corresponding at least one variable and at least one fixed part of each text message of the plurality of text messages as key/value pairs using the respective assigned at least one template based on the plurality of log entries; and</claim-text><claim-text>a transmitting unit for providing the text messages, keys and values as triples.</claim-text></claim-text></claim></claims></us-patent-application>