<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007071A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007071</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17943249</doc-number><date>20220913</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>01</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1023</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1001</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1074</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1061</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>563</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>50</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>046</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>564</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>N</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>01</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1023</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1001</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>108</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1063</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>563</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>535</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>046</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>564</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEM PROVIDING FASTER AND MORE EFFICIENT DATA COMMUNICATION</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17194336</doc-number><date>20210308</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17943249</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17098392</doc-number><date>20201115</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10958768</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17194336</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16600504</doc-number><date>20191013</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11044341</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17098392</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16278105</doc-number><date>20190217</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10469628</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16600504</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15957950</doc-number><date>20180420</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10225374</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16278105</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>14025109</doc-number><date>20130912</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10069936</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>15957950</doc-number></document-id></child-doc></relation></continuation><division><relation><parent-doc><document-id><country>US</country><doc-number>12836059</doc-number><date>20100714</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>8560604</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>14025109</doc-number></document-id></child-doc></relation></division><us-provisional-application><document-id><country>US</country><doc-number>61249624</doc-number><date>20091008</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>BRIGHT DATA LTD.</orgname><address><city>Netanya</city><country>IL</country></address></addressbook><residence><country>IL</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Shribman</last-name><first-name>Derry</first-name><address><city>Tel Aviv</city><country>IL</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Vilenski</last-name><first-name>Ofer</first-name><address><city>Moshav Hadar Am</city><country>IL</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A system designed for increasing network communication speed for users, while lowering network congestion for content owners and ISPs. The system employs network elements including an acceleration server, clients, agents, and peers, where communication requests generated by applications are intercepted by the client on the same machine. The IP address of the server in the communication request is transmitted to the acceleration server, which provides a list of agents to use for this IP address. The communication request is sent to the agents. One or more of the agents respond with a list of peers that have previously seen some or all of the content which is the response to this request (after checking whether this data is still valid). The client then downloads the data from these peers in parts and in parallel, thereby speeding up the Web transfer, releasing congestion from the Web by fetching the information from multiple sources, and relieving traffic from Web servers by offloading the data transfers from them to nearby peers.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="131.74mm" wi="158.75mm" file="US20230007071A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="175.43mm" wi="179.83mm" file="US20230007071A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="158.16mm" wi="182.63mm" file="US20230007071A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="160.19mm" wi="156.72mm" file="US20230007071A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="223.27mm" wi="173.48mm" file="US20230007071A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="228.18mm" wi="168.57mm" file="US20230007071A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="200.91mm" wi="165.44mm" file="US20230007071A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="244.09mm" wi="150.11mm" orientation="landscape" file="US20230007071A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="201.25mm" wi="95.67mm" file="US20230007071A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="226.99mm" wi="138.60mm" file="US20230007071A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="243.67mm" wi="181.27mm" file="US20230007071A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="226.99mm" wi="181.44mm" file="US20230007071A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="238.42mm" wi="153.84mm" file="US20230007071A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="224.45mm" wi="172.47mm" file="US20230007071A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="244.01mm" wi="156.38mm" file="US20230007071A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="244.94mm" wi="180.85mm" file="US20230007071A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">The present application is a continuation application of U.S. non-provisional patent application Ser. No. 14/025,109, filed Sep. 12, 2013, which is a divisional application of U.S. non-provisional patent application entitled &#x201c;SYSTEM AND METHOD FOR PROVIDING FASTER AND MORE EFFICIENT DATA COMMUNICATION&#x201d; having Ser. No. 12/836,059, filed Jul. 14, 2010 and issued as U.S. Pat. No. 8,560,604 on Oct. 15, 2013, and claims priority to U.S. provisional patent application entitled &#x201c;SYSTEM AND METHOD FOR REDUCING INTERNET CONGESTION,&#x201d; having Ser. No. 61/249,624, filed Oct. 8, 2009, which are hereby incorporated herein by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD OF THE INVENTION</heading><p id="p-0003" num="0002">The present invention is related to Internet communication, and more particularly, to improving data communication speed and bandwidth efficiency on the Internet.</p><heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading><p id="p-0004" num="0003">There are several trends in network and Internet usage, which tremendously increase the bandwidth that is being used on the Internet. One such trend is that more and more video is being viewed on demand on the Internet. Such viewing includes the viewing of both large and short video clips. In addition, regular shows and full-featured films may be viewed on the Internet. Another trend that is increasing the traffic on the Internet is that Web sites (such as shopping portals, news portals, and social networks) are becoming global, meaning that the Web sites are serving people in many diverse places on the globe, and thus the data is traversing over longer stretches of the Internet, increasing the congestion.</p><p id="p-0005" num="0004">The increase in bandwidth consumption has created several major problems, a few of which are described below:</p><p id="p-0006" num="0005">The problem for users&#x2014;the current Internet bandwidth is not sufficient, and thus the effective &#x2018;speed&#x2019; experienced by users is slow;</p><p id="p-0007" num="0006">The problem for content owners&#x2014;the tremendous amount of data being viewed by users is costing large amounts of money in hosting and bandwidth costs; and</p><p id="p-0008" num="0007">The problem for Internet Service Providers (ISPs)&#x2014;the growth in Internet traffic is requiring the ISPs to increase the infrastructure costs (communication lines, routers, etc.) at tremendous financial expense.</p><p id="p-0009" num="0008">The need for a new method of data transfer that is fast for the consumer, cheap for the content distributor and does not require infrastructure investment for ISPs, has become a major issue which is yet unsolved.</p><p id="p-0010" num="0009">There have been many attempts at making the Internet faster for the consumer and cheaper for the broadcaster. Each such attempt is lacking in some aspect to become a widespread, practical solution, or is a partial solution in that it solves only a subset of the major problems associated with the increase in Internet traffic. Most of the previous solutions require billions of dollars in capital investment for a comprehensive solution. Many of these attempts are lacking in that much of the content on the Internet has become dynamically created per the user and the session of the user (this is what used to be called the &#x201c;Web2.0&#x201d; trend). This may be seen on the Amazon Web site and the Salesforce Web site, for example, where most of the page views on these Web sites is tailored to the viewer, and is thus different for any two viewers. This dynamic information makes it impossible for most of the solutions offered to date to store the content and provide it to others seeking similar content.</p><p id="p-0011" num="0010">One solution that has been in use is called a &#x201c;proxy&#x201d;. <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram providing an example of use of a proxy within a network <b>2</b>. A proxy, or proxy server <b>4</b>, <b>6</b>, <b>8</b> is a device that is placed between one or more clients, illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as client devices <b>10</b>, <b>12</b>, <b>14</b>, <b>16</b>, <b>18</b>, <b>20</b>, that request data, via the Internet <b>22</b>, and a Web server or Web servers <b>30</b>, <b>32</b>, <b>34</b> from which they are requesting the data. The proxy server <b>4</b>, <b>6</b>, <b>8</b> requests the data from the Web servers <b>30</b>, <b>32</b>, <b>34</b> on their behalf, and caches the responses from the Web servers <b>30</b>, <b>32</b>, <b>34</b>, to provide to other client devices that make similar requests. If the proxy server <b>4</b>, <b>6</b>, <b>8</b> is geographically close enough to the client devices <b>10</b>, <b>12</b>, <b>14</b>, <b>16</b>, <b>18</b>, <b>20</b>, and if the storage and bandwidth of the proxy server <b>4</b>, <b>6</b>, <b>8</b> are large enough, the proxy server <b>4</b>, <b>6</b>, <b>8</b> will speed up the requests for the client devices <b>10</b>, <b>12</b>, <b>14</b>, <b>16</b>, <b>18</b>, <b>20</b> that it is serving.</p><p id="p-0012" num="0011">It should be noted, however, that to provide a comprehensive solution for Internet surfing, the proxy servers of <figref idref="DRAWINGS">FIG. <b>1</b></figref> would need to be deployed at every point around the world where the Internet is being consumed, and the storage size of the proxy servers at each location would need to be near the size of all the data stored anywhere on the Internet. The abovementioned would lead to massive costs that are impractical. In addition, these proxy solutions cannot deal well with dynamic data that is prevalent now on the Web.</p><p id="p-0013" num="0012">There have been commercial companies, such as Akamai, that have deployed such proxies locally around the world, and that are serving a select small group of sites on the Internet. If all sites on the Web were to be solved with such a solution, the capital investment would be in the range of billions of dollars. In addition, this type of solution does not handle dynamic content.</p><p id="p-0014" num="0013">To create large distribution systems without the large hardware costs involved with a proxy solution, &#x201c;peer-to-peer file sharing&#x201d; solutions have been introduced, such as, for example, BitTorrent. <figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic diagram providing an example of a peer-to-peer file transfer network <b>50</b>. In the network <b>50</b>, files are stored on computers of consumers, referred to herein as client devices <b>60</b>. Each consumer can serve up data to other consumers, via the Internet <b>62</b>, thus taking the load of serving off of the distributors and saving them the associated costs, and providing the consumer multiple points from which to download the data, referred to herein as peers <b>70</b>, <b>72</b>, <b>74</b>, <b>76</b>, <b>78</b>, thus increasing the speed of the download. However, each such peer-to-peer solution must have some sort of index by which to find the required data. In typical peer-to-peer file sharing systems, because the index is on a server <b>80</b>, or distributed among several servers, the number of files available in the system is not very large (otherwise, the server costs would be very large, or the lookup time would be very long).</p><p id="p-0015" num="0014">The peer-to-peer file sharing solution is acceptable in file sharing systems, because there are not that many media files that are of interest to the mass (probably in the order of magnitude of millions of movies and songs that are of interest). Storing and maintaining an index of millions of entries is practical technically and economically. However, if this system were to be used to serve the hundreds of billions of files that are available on the Internet of today, the cost of storing and maintaining such an index would be again in the billions of dollars. In addition, these types of peer-to-peer file sharing systems are not able to deal with dynamic HTTP data.</p><p id="p-0016" num="0015">In conclusion, a system does not exist that enables fast transmission of most of the data on the Internet, that does not incur tremendous costs, and/or that provides only a very partial solution to the problem of Internet traffic congestion. Thus, a heretofore unaddressed need exists in the industry to address the aforementioned deficiencies and inadequacies.</p><heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0017" num="0016">The present system and method provides for faster and more efficient data communication within a communication network. Briefly described, in architecture, one embodiment of the system, among others, can be implemented as follows. A network is provided for accelerating data communication, wherein the network contains: at least one client communication device for originating a data request for obtaining the data from a data server; at least one agent communication device which is assigned to the data server for receiving the data request from the client communication device, wherein the agent keeps track of which client communication devices have received responses to data requests from the assigned data server; at least one peer communication device for storing portions of data received in response to the data request by the at least one client communication device, wherein the portions of data may be transmitted to the at least one client communication device upon request by the client communication device; and at least one acceleration server for deciding which agent communication device is to be assigned to which data server and providing this information to the at least one client communication device.</p><p id="p-0018" num="0017">The present system and method also provides a communication device within a network, wherein the communication device contains: a memory; and a processor configured by the memory to perform the steps of: originating a data request for obtaining data from a data server; being assigned to a data server, referred to as an assigned data server; receiving a data request from a separate device within the network, and keeping track of which client communication devices within the network have received responses to data requests from the assigned data server; and storing portions of data received in response to the originated data request, wherein the portions of data may be transmitted to communication device upon request by the communication device.</p><p id="p-0019" num="0018">Other systems, methods, features, and advantages of the present invention will be or become apparent to one with skill in the art upon examination of the following drawings and detailed description. It is intended that all such additional systems, methods, features, and advantages be included within this description, be within the scope of the present invention, and be protected by the accompanying claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0020" num="0019">Many aspects of the invention can be better understood with reference to the following drawings. The components in the drawings arc not necessarily to scale, emphasis instead being placed upon clearly illustrating the principles of the present invention. Moreover, in the drawings, like reference numerals designate corresponding parts throughout the several views.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram providing a prior art example of use of a proxy within a network.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic diagram providing a prior art example of a peer-to-peer file transfer network.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic diagram providing an example of a communication network in accordance with the present invention.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic diagram further illustrating a communication device of the communication network of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic diagram further illustrating the memory of <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic diagram further illustrating elements of the acceleration application of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, as well as communication paths of the acceleration application.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a chart further illustrating two of the main databases utilized within the communication network.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart illustrating operation of the acceleration system initializer module.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart further illustrating communication between different elements of the communication network.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a flowchart continuing the flowchart of <figref idref="DRAWINGS">FIG. <b>9</b></figref> and focused on agent response to the HTTP request.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flowchart continuing the flowchart of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, which illustrates actions taken upon receipt of the list of peers, or single peer listing, from the agent.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart illustrating steps taken by an agent, client, or peer to determine whether a certain HTTP request is still valid.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart outlining operation of the acceleration server.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flowchart further illustrating TCPIP acceleration in accordance with an alternative embodiment of the invention.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a flowchart further illustrating TCPIP acceleration in accordance with an alternative embodiment of the invention, detailing the communication between the client and the TCPIP server (read and write commands) after the connect phase has completed successfully.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0036" num="0035">The present system and method provides for faster and more efficient data communication within a communication network. An example of such a communication network <b>100</b> is provided by the schematic diagram of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The network <b>100</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> contains multiple communication devices. Due to functionality provided by software stored within each communication device, which may be the same in each communication device, each communication device may serve as a client, peer, or agent, depending upon requirements of the network <b>100</b>, as is described in detail herein. It should be noted that a detailed description of a communication device is provided with regard to the description of <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0037" num="0036">Returning to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the exemplary embodiment of the network <b>100</b> illustrates that one of the communication devices is functioning as a client <b>102</b>. The client <b>102</b> is capable of communication with one or more peers <b>112</b>, <b>114</b>, <b>116</b> and one or more agents <b>122</b>. For exemplary purposes, the network contains three peers and one agent, although it is noted that a client can communicate with any number of agents and peers.</p><p id="p-0038" num="0037">The communication network <b>100</b> also contains a Web server <b>152</b>. The Web server <b>152</b> is the server from which the client <b>102</b> is requesting information and may be, for example, a typical HTTP server, such as those being used to deliver content on any of the many such servers on the Internet. It should be noted that the server <b>152</b> is not limited to being an HTTP server. In fact, if a different communication protocol is used within the communication network, the server may be a server capable of handling a different protocol. It should also be noted that while the present description refers to the use of HTTP, the present invention may relate to any other communication protocol and HTTP is not intended to be a limitation to the present invention.</p><p id="p-0039" num="0038">The communication network <b>100</b> further contains an acceleration server <b>162</b> having an acceleration server storage device <b>164</b>. As is described in more detail herein, the acceleration server storage device <b>164</b> has contained therein an acceleration server database. The acceleration server database stores Internet protocol (IP) addresses of communication devices within the communication network <b>100</b> having acceleration software stored therein. Specifically, the acceleration server database contains stored therein a list of communication devices having acceleration software stored therein that are currently online within the communication network <b>100</b>. For each such agent, the acceleration server assigns a list of IP addresses.</p><p id="p-0040" num="0039">In the communication network <b>100</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the application in the client <b>102</b> is requesting information from the Web server <b>152</b>, which is why the software within the communication device designated this communication device to work as a client. In addition, since the agent <b>122</b> receives the request from the client <b>102</b> as the communication device closest to the Web server <b>152</b>, functionality of the agent <b>122</b>, as provided by the software of the agent <b>122</b>, designates this communication device to work as an agent. It should be noted, that in accordance with an alternative embodiment of the invention, the agent need not be the communication device that is closest to the Web server. Instead, a different communication device may be selected to be the agent.</p><p id="p-0041" num="0040">Since the peers <b>112</b>, <b>114</b>, <b>116</b> contain at least portions of the information sought by the client <b>102</b> from the Web server <b>152</b>, functionality of the peers <b>112</b>, <b>114</b>, <b>116</b>, as provided by the software of the peers <b>112</b>, <b>114</b>, <b>116</b>, designates these communication devices to work as peers. It should be noted that the process of designating clients, agents, and peers is described in detail herein. It should also be noted that the number of clients, agents, peers, acceleration servers, Web servers, and other components of the communication network <b>100</b> may differ from the number illustrated by <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In fact, the number of clients, agents, peers, acceleration servers, Web servers, and other components of the communication network <b>100</b> are not intended to be limited by the current description.</p><p id="p-0042" num="0041">Prior to describing functionality performed within a communication network <b>100</b>, the following further describes a communication device <b>200</b>, in accordance with a first exemplary embodiment of the invention. <figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic diagram further illustrating a communication device <b>200</b> of the communication network <b>100</b>, which contains general components of a computer. As previously mentioned, it should be noted that the communication device <b>200</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> may serve as a client, agent, or peer.</p><p id="p-0043" num="0042">Generally, in terms of hardware architecture, as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the communication device <b>200</b> includes a processor <b>202</b>, memory <b>210</b>, at least one storage device <b>208</b>, and one or more input and/or output (I/O) devices <b>240</b> (or peripherals) that are communicatively coupled via a local interface <b>250</b>. The local interface <b>250</b> can be, for example but not limited to, one or more buses or other wired or wireless connections, as is known in the art. The local interface <b>250</b> may have additional elements, which are omitted for simplicity, such as controllers, buffers (caches), drivers, repeaters, and receivers, to enable communications. Further, the local interface <b>250</b> may include address, control, and/or data connections to enable appropriate communications among the aforementioned components.</p><p id="p-0044" num="0043">The processor <b>202</b> is a hardware device for executing software, particularly that stored in the memory <b>210</b>. The processor <b>52</b> can be any custom made or commercially available processor, a central processing unit (CPU), an auxiliary processor among several processors associated with the communication device <b>200</b>, a semiconductor based microprocessor (in the form of a microchip or chip set), a macroprocessor, or generally any device for executing software instructions.</p><p id="p-0045" num="0044">The memory <b>210</b>, which is further illustrated and described by the description of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, can include any one or combination of volatile memory elements (e.g., random access memory (RAM, such as DRAM, SRAM, SDRAM, etc.)) and nonvolatile memory elements (e.g., ROM, hard drive, tape, CDROM, etc.). Moreover, the memory <b>210</b> may incorporate electronic, magnetic, optical, and/or other types of storage media. Note that the memory <b>210</b> can have a distributed architecture, where various components are situated remote from one another, but can be accessed by the processor <b>202</b>.</p><p id="p-0046" num="0045">The software <b>212</b> located within the memory <b>210</b> may include one or more separate programs, each of which contains an ordered listing of executable instructions for implementing logical functions of the communication device <b>200</b>, as described below. In the example of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the software <b>212</b> in the memory <b>210</b> at least contains an acceleration application <b>220</b> and an Internet browser <b>214</b>. In addition, the memory <b>210</b> may contain an operating system (O/S) <b>230</b>. The operating system <b>230</b> essentially controls the execution of computer programs and provides scheduling, input-output control, file and data management, memory management, and communication control and related services. It should be noted that, in addition to the acceleration application <b>220</b>, Internet browser <b>214</b>, and operating system <b>230</b>, the memory <b>210</b> may contain other software applications.</p><p id="p-0047" num="0046">While the present description refers to a request from the client originating from an Internet browser, the present invention is not limited to requests originating from Internet browsers. Instead, a request may originate from an email program or any other program that would be used to request data that is stored on a Web server, or other server holding data that is requested by the client device.</p><p id="p-0048" num="0047">Functionality of the communication device <b>200</b> may be provided by a source program, executable program (object code), script, or any other entity containing a set of instructions to be performed. When a source program, then the program needs to be translated via a compiler, assembler, interpreter, or the like, which may or may not be included within the memory <b>210</b>, so as to operate properly in connection with the operating system <b>230</b>. Furthermore, functionality of the communication device <b>200</b> can be written as (a) an object oriented programming language, which has classes of data and methods, or (b) a procedure programming language, which has routines, subroutines, and/or functions.</p><p id="p-0049" num="0048">The I/O devices <b>240</b> may include input devices, for example but not limited to, a keyboard, mouse, scanner, microphone, etc. Furthermore, the I/O devices <b>240</b> may also include output devices, for example but not limited to, a printer, display, etc. Finally, the I/O devices <b>240</b> may further include devices that communicate via both inputs and outputs, for instance but not limited to, a modulator/demodulator (modem; for accessing another device, system, or network), a radio frequency (RF) or other transceiver, a telephonic interface, a bridge, a router, etc.</p><p id="p-0050" num="0049">When the communication device <b>200</b> is in operation, the processor <b>202</b> is configured to execute the software <b>212</b> stored within the memory <b>210</b>, to communicate data to and from the memory <b>210</b>, and to generally control operations of the communication device <b>200</b> pursuant to the software <b>212</b>. The software <b>212</b> and the O/S <b>230</b>, in whole or in part, but typically the latter, are read by the processor <b>202</b>, perhaps buffered within the processor <b>202</b>, and then executed.</p><p id="p-0051" num="0050">When functionality of the communication device <b>200</b> is implemented in software, as is shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, it should be noted that the functionality can be stored on any computer readable medium for use by or in connection with any computer related system or method. In the context of this document, a computer readable medium is an electronic, magnetic, optical, or other physical device or means that can contain or store a computer program for use by or in connection with a computer related system or method. The functionality of the communication device <b>200</b> can be embodied in any computer-readable medium for use by or in connection with an instruction execution system, apparatus, or device, such as a computer-based system, processor-containing system, or other system that can fetch the instructions from the instruction execution system, apparatus, or device and execute the instructions. In the context of this document, a &#x201c;computer-readable medium&#x201d; can be any means that can store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.</p><p id="p-0052" num="0051">The computer readable medium can be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection (electronic) having one or more wires, a portable computer diskette (magnetic), a random access memory (RAM) (electronic), a read-only memory (ROM) (electronic), an erasable programmable read-only memory (EPROM, EEPROM, or Flash memory) (electronic), an optical fiber (optical), and a portable compact disc read-only memory (CDROM) (optical). Note that the computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via for instance optical scanning of the paper or other medium, then compiled, interpreted or otherwise processed in a suitable manner if necessary, and then stored in a computer memory.</p><p id="p-0053" num="0052">In an alternative embodiment, where the functionality of the communication device <b>200</b> is implemented in hardware, the functionality can be implemented with any or a combination of the following technologies, which are each well known in the art: a discrete logic circuit(s) having logic gates for implementing logic functions upon data signals, an application specific integrated circuit (ASIC) having appropriate combinational logic gates, a programmable gate array(s) (PGA), a field programmable gate array (FPGA), etc.</p><p id="p-0054" num="0053">The at least one storage device <b>208</b> of the communication device <b>200</b> may be one of many different categories of storage device. As is described in more detail herein, the storage device <b>208</b> may include a configuration database <b>280</b> and a cache database <b>282</b>. Alternatively, the configuration database <b>280</b> and cache database <b>282</b> may be located on different storage devices that are in communication with the communication device <b>200</b>. The description that follows assumes that the configuration database <b>280</b> and cache database <b>282</b> are located on the same storage device, however, it should be noted that the present invention is not intended to be limited to this configuration.</p><p id="p-0055" num="0054">The configuration database <b>280</b> stores configuration data that is common to all elements of the communication network <b>100</b> and is used to provide set up and synchronization information to different modules of the acceleration application <b>220</b> stored within the memory <b>210</b>, as is described in further detail herein. The cache database <b>282</b> stores responses to HTTP requests that the communication device <b>200</b> has dispatched, either for its own consumption or on behalf of other elements of the communication network <b>100</b>. As is explained in additional detail herein, the responses to HTTP requests are stored within the cache database <b>282</b> for future use by this communication device <b>200</b>, or for other communication devices within the communication network <b>100</b> that need to retrieve this information and will use this communication device as either a peer or an agent.</p><p id="p-0056" num="0055">In addition to the abovementioned, as is explained in further detail herein, the cache database <b>282</b> has stored therein a list of URLs that the communication device is aware of (i.e., has seen requests for). For each URL, the cache database <b>282</b> has stored therein the URL itself, HTTP headers returned by the Web Server for this URL, when the last time was that the contents of this URL was loaded directly from the Web Server, when the contents of the URL had last changed on the Web Server, as well as a list of chunks that contain the contents of this URL, and the chunks of data themselves. Chunks in the present description are defined as equally sized pieces of data that together form the whole content of the URL. It should be noted that while the present description provides for chunks being equally sized pieces of data, in accordance with an alternative embodiment of the invention, the chunks may instead be of different size.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic diagram further illustrating the memory <b>210</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. As shown by <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the memory <b>210</b> may be separated into two basic levels, namely, an operating system level <b>260</b> and an application level <b>270</b>. The operating system level <b>260</b> contains the operating system <b>230</b>, wherein the operating system <b>230</b> further contains at least one device driver <b>262</b> and at least one communication stack <b>264</b>. The device drivers <b>262</b> are software modules that are responsible for the basic operating commands for various hardware devices of the communication device <b>200</b>, such as the processor <b>202</b>, the storage device <b>208</b> and the I/O devices <b>240</b>. In addition, the communication stacks <b>264</b> provide applications of the communication device <b>200</b> with a means of communicating within the network <b>100</b> by implementing various standard communication protocols.</p><p id="p-0058" num="0057">The application level <b>270</b> includes any application that is running on the communication device <b>200</b>. As a result, the application level <b>270</b> includes the Internet browser <b>214</b>, which is used to view information that is located on remote Web servers, the acceleration application <b>220</b>, as described in more detail below, and any other applications <b>216</b> stored on the communication device <b>200</b>.</p><p id="p-0059" num="0058">As is explained in additional detail below, the acceleration application <b>220</b> intercepts the requests being made by applications of the communication device (client) that use the Internet, in order to modify the requests and route the requests through the communication network. There are various methods that may be used to intercept such requests. One such method is to create an intermediate driver <b>272</b>, which is also located within the memory <b>210</b>, that attaches itself to all communication applications, intercepts outgoing requests of the communication applications of the communication device <b>200</b>, such as the Internet browser <b>214</b>, and routes the requests to the acceleration application <b>220</b>. Once the acceleration application <b>220</b> modifies the requests, routes the requests to other system elements on the communication network <b>100</b>, and receives replies from other system elements of the communication network <b>100</b>, the acceleration application <b>220</b> returns the replies to the intermediate driver <b>272</b>, which provides the replies back to the requesting communication application.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic diagram further illustrating elements of the acceleration application <b>220</b>, as well as communication paths of the acceleration application <b>220</b>. The acceleration application <b>220</b> contains an acceleration system initializer module <b>222</b>, which is called when the acceleration application <b>220</b> is started. The acceleration system initializer module <b>222</b> is capable of initializing all elements of the communication device <b>200</b> The acceleration application <b>220</b> also contains three separate modules that run in parallel, namely, a client module <b>224</b>, a peer module <b>226</b>, and an agent module <b>228</b>, each of which comes into play according to the specific role that the communication device <b>200</b> is partaking in the communication network <b>100</b> at a given time. The role of each module is further described herein.</p><p id="p-0061" num="0060">The client module <b>224</b> provides functionality required when the communication device <b>200</b> is requesting information from the Web server <b>152</b>, such as, for example, but not limited to, Web pages, data, video, or audio. The client module <b>224</b> causes the communication device <b>200</b> having the client module <b>224</b> therein to intercept the information request and pass the information request on to other elements of the communication network <b>100</b>, such as, servers, agents or peers. This process is further described in detail herein.</p><p id="p-0062" num="0061">The peer module <b>226</b> provides functionality required by the communication device <b>200</b> when answering other clients within the communication network <b>100</b> and providing the other clients with information that they request, which this communication device <b>200</b>, having this peer module <b>226</b> therein, has already downloaded at a separate time. This process is further described in detail herein.</p><p id="p-0063" num="0062">The agent module <b>228</b> provides functionality required when other communication devices of the communication network <b>100</b> acting as clients query this communication device <b>200</b>, having this agent module <b>228</b> therein, as an agent, to obtain a list of peers within the communication network <b>100</b> that contain requested information. This process is further described in detail herein.</p><p id="p-0064" num="0063">The acceleration application <b>220</b> interacts with both the configuration database <b>280</b> and the cache database <b>282</b> of the storage device <b>208</b>. As previously mentioned herein, the configuration database <b>280</b> stores configuration data that may be common to all communication devices of the communication network <b>100</b> and is used to provide setup and synchronization information to different modules <b>222</b>, <b>224</b>, <b>226</b>, <b>228</b> of the acceleration application <b>220</b> stored within the memory <b>210</b>.</p><p id="p-0065" num="0064">The cache database <b>282</b> stores responses to information requests, such as, for example, HTTP requests, that the communication device <b>200</b> has dispatched, either for its own consumption or on behalf of other elements of the communication network <b>100</b>. The responses to HTTP requests are stored within the cache database <b>282</b> for future use by this communication device <b>200</b>, or for other communication devices within the communication network <b>100</b> that need to retrieve this same information and will use this communication device <b>200</b> as either a peer or an agent. This process is described in detail herein.</p><p id="p-0066" num="0065">Information stored within the cache database <b>282</b> may include any information associated with a request sent by the client. As an example, such information may include, metadata and actual requested data. For example, for an HTTP request for a video, the metadata may include the version of the Web server answering the request from the client and the data would be the requested video itself. In a situation where there is no more room for storage in the cache database, the software of the associated communication device may cause the communication device to erase previous data stored in order to clear room for the new data to store in the cache database. As an example, such previous data may include data that is most likely not to be used again. Such data may be old data or data that is known to no longer be valid. The communication device may choose to erase the least relevant data, according to any of several methods that are well known in the art.</p><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a chart further illustrating two of the main databases utilized within the communication network <b>100</b>, namely, the acceleration server database <b>164</b> and the cache database <b>282</b>. As previously mentioned, the acceleration server database <b>164</b> stores IP addresses of communication devices located within the communication network <b>100</b>, which have acceleration software stored therein. Specifically, the acceleration server database <b>164</b> contains stored therein a list of communication devices having acceleration software stored therein that are currently online within the communication network <b>100</b>. The acceleration server assigns a list of IP addresses to each communication device functioning as an agent. Each communication device will be the agent for any Web servers whose IP address is in the range &#x2018;owned&#x2019; by that communication device. As an example, when a first ever communication device goes online, namely, the first communication device as described herein having the acceleration application <b>220</b> therein, the acceleration server assigns all IP addresses in the world to this communication device, and this communication device will be the agent for any Web server. When a second communication device goes online it will share the IP address list with the first communication device, so that each of the communication devices will be responsible for a different part of the world wide web servers.</p><p id="p-0068" num="0067">The cache database <b>282</b> of the communication device <b>200</b> has stored therein a list of URLs <b>286</b> of which the communication device <b>200</b> is aware. The communication device <b>200</b> becomes aware of a URL each time that the communication device <b>200</b> receives a request for information located at a specific URL. As shown by <figref idref="DRAWINGS">FIG. <b>7</b></figref>, for each URL <b>288</b> within the list of URLs <b>286</b>, the cache database <b>282</b> stores: the URL itself <b>290</b>; HTTP headers <b>292</b> returned by the Web Server <b>152</b> for this URL; when the last time <b>294</b> was that the contents of this URL were loaded directly from the Web Server <b>152</b>; when the contents of the URL last changed <b>296</b> on the Web Server <b>152</b>; and a list of chunks <b>298</b> that contain the contents of this URL, and the content of the chunk. As previously mentioned, chunks, in the present description, are defined as equally sized pieces of data that together form the entire content of the URL, namely, the entire content whose location is described by the URL. As a non-limiting example, a chunk size of, for example, <b>16</b>KB can be used, so that any HTTP response will be split up into chunks of <b>16</b>KB. In accordance with an alternative embodiment of the invention, if the last chunk of the response is not large enough to fill the designated chunk size, such as <b>16</b>KB for the present example, the remaining portion of the chunk will be left empty.</p><p id="p-0069" num="0068">For each such chunk <b>300</b>, the cache database <b>282</b> includes the checksum of the chunk <b>302</b>, the data of the chunk <b>304</b> itself, and a list of peers <b>306</b> that most likely have the data for this chunk. As is described in additional detail herein, the data for the chunk may be used by other clients within the communication network <b>100</b> when other communication devices of the communication network <b>100</b> serve as peers to the clients, from which to download the chunk data.</p><p id="p-0070" num="0069">For each chunk, a checksum is calculated and stored along side of the chunk itself. The checksum may be calculated in any of numerous ways known to those in the art. The purpose of having the checksum is to be able to identify data uniquely, whereas the checksum is the &#x201c;key&#x201d; to the data, where the data is the chunk. As an example, a client may want to load the contents of a URL, resulting in the agent that is servicing this request sending the checksums of the chunks to the client, along with the peers that store these chunks. It is to be noted that there could be a different peer for every different chunk. The client then communicates with each such peer, and provides the checksum of the chunk that it would like the peer to transmit back to the client. The peer looks up the checksum (the key) in its cache database, and provides back the chunk (data) that corresponds to this checksum (the key). As shown by <figref idref="DRAWINGS">FIG. <b>7</b></figref>, for each peer <b>308</b> within the list of peers <b>306</b>, the cache database <b>282</b> includes the peer IP address <b>310</b>, as well as the connection status <b>312</b> of the peer, which represents whether the peer <b>308</b> is online or not.</p><p id="p-0071" num="0070">In accordance with one embodiment of the invention, the cache database <b>282</b> may be indexed by URL and by Checksum. Having the cache database indexed in this manner is beneficial due to the following reason. When the agent is using the cache database, the agent receives a request from a client for the URL that the client is looking for. In such a case the agent needs the cache database to be indexed by the URL, to assist in finding a list of corresponding peers that have the chunks of this URL. When the peers are using this cache database, the peers obtain a request from the client for a particular checksum, and the peers need the database to be indexed by the checksum so that they can quickly find the correct chunk. Of course, as would be understood by one having ordinary skill in the art, the cache database may instead be indexed in any other manner.</p><p id="p-0072" num="0071">Having described components of the communication network <b>100</b>, the following further describes how such components interact and individually function. <figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart <b>300</b> illustrating operation of the acceleration system initializer module <b>222</b> (hereafter referred to as the initializer <b>222</b> for purposes of brevity). It should be noted that any process descriptions or blocks in flowcharts should be understood as representing modules, segments, portions of code, or steps that include one or more instructions for implementing specific logical functions in the process, and alternative implementations are included within the scope of the present invention in which functions may be executed out of order from that shown or discussed, including substantially concurrently or in reverse order, depending on the functionality involved, as would be understood by those reasonably skilled in the art of the present invention.</p><p id="p-0073" num="0072">The initializer <b>222</b> is the first element of the communication device <b>200</b> to operate as the communication device <b>200</b> starts up (block <b>302</b>). As the initializer <b>222</b> starts, it first communicates with the acceleration server <b>162</b> to sign up with the acceleration server <b>162</b>. This is performed by providing the acceleration server <b>162</b> with the hostname, and all IP addresses and media access control (MAC) addresses of the interfaces on the communication device <b>200</b> having the initializer <b>222</b> thereon.</p><p id="p-0074" num="0073">In accordance with an alternative embodiment of the invention, as shown by block <b>304</b>, the initializer <b>222</b> checks with the acceleration server <b>162</b> whether a more updated version of the acceleration application software is available. This may be performed by any one of many known methods, such as, but not limited to, by providing the version number of the acceleration application software to the acceleration server <b>162</b>. The message received back from the acceleration server <b>162</b> indicates whether there is a newer version of the acceleration application software or not. If a newer version of the acceleration application software exists, the initializer <b>222</b> downloads the latest version of the acceleration application software from the acceleration server <b>162</b>, or from a different location, and installs the latest version on the communication device <b>200</b>. In addition to the abovementioned, the initializer <b>222</b> may also schedule additional version checks for every set period of time thereafter. As an example, the initializer <b>222</b> may check for system updates every two days.</p><p id="p-0075" num="0074">As shown by block <b>306</b>, the initializer <b>222</b> then redirects outgoing network traffic from the communication device <b>200</b> to flow through the acceleration application <b>162</b>. As previously mentioned, one way to redirect the outgoing network traffic is to insert an intermediate driver <b>212</b> that intercepts and redirects the traffic. It should be noted that there are many other ways to implement this redirection, which are well known to those having ordinary skill in the art.</p><p id="p-0076" num="0075">As shown by block <b>308</b>, the initializer <b>222</b> then launches the client module <b>224</b> of the communication device <b>200</b>, and configures the client module <b>224</b> of the communication device <b>200</b> to intercept to all outgoing network communications of the communication device <b>200</b> and route the outgoing network communications to the client module <b>224</b>, from the intermediate driver <b>272</b> or other routing method implemented. This is performed so that the client module <b>224</b> is able to receive all network traffic coming from the network applications, modify the network traffic if necessary, and re-route the traffic. As is known by those having ordinary skill in the art, in order to re-route the traffic, the traffic needs to be modified, as an example, to change the destination of requests.</p><p id="p-0077" num="0076">As shown by block <b>310</b>, the initializer <b>222</b> then launches the agent module <b>228</b> and the peer module <b>226</b> to run on the communication device <b>200</b>. The agent module <b>228</b> and peer module <b>226</b> listen on pre-determined ports of the communication device <b>200</b>, so that incoming network traffic on these ports gets routed to the agent module <b>228</b> and peer module <b>226</b>. As is explained in further detail herein, the abovementioned enables the communication device <b>200</b> to function as an agent and as a peer for other communication devices within the communication network <b>100</b>, as needed.</p><p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart <b>350</b> further illustrating communication between different elements of the communication network <b>100</b>, in accordance with the present system and method for providing faster and more efficient data communication.</p><p id="p-0079" num="0078">As shown by block <b>352</b>, an application running on the client <b>200</b> initiates a request for a resource on a network. Such a request may be, for example, &#x201c;GET http://www.aol.com/index.html HTTP/1.1&#x201d;. The request may come from an Internet browser <b>214</b> located on the client <b>200</b>, where the Internet browser <b>214</b> is loading a page from the Internet, an application that wants to download information from the Internet, fetch or send email, or any other network communication request.</p><p id="p-0080" num="0079">Through the intermediate driver <b>272</b>, or other such mechanism as may be implemented that is re-routing the communication to the client module <b>224</b> of the client <b>200</b>, the resource request is intercepted by the client module <b>224</b> that is running on the client <b>200</b> (block <b>354</b>). The client module <b>224</b> then looks up the IP address of the server <b>152</b> that is the target of the resource request (e.g., the IP address of the Web server that is the host of www.aol.com in the example above), and sends this IP address to the acceleration server <b>162</b> (block <b>356</b>) in order to obtain a list of communication devices that the client <b>200</b> can use as agents (hereafter referred to as agents). It should be noted that the process of performing an IP lookup for a server is known by one having ordinary skill in the art, and therefore is not described further herein.</p><p id="p-0081" num="0080">In response to receiving the IP address of the server <b>152</b>, the acceleration server <b>162</b> prepares a list of agents that may be suitable to handle the request from this IP address (block <b>358</b>). The size of the list can differ based on implementation. For exemplary purposes, the following provides an example where a list of five agents is prepared by the acceleration server <b>162</b>. The list of agents is created by the acceleration server <b>162</b> by finding the communication devices of the communication network <b>100</b> that are currently online, and whose IP address is numerically close to the IP of the destination Web server <b>152</b>. A further description of the abovementioned process is described here in.</p><p id="p-0082" num="0081">As shown by block <b>360</b>, the client module <b>224</b> then sends the original request (e.g., &#x201c;GET http://www.aol.com/index.html HTTP/1.1&#x201d;) to all the agents in the list received from the acceleration server <b>162</b> in order to find out which of the agents in the list is best suited to be the one agent that will assist with this request.</p><p id="p-0083" num="0082">It should be noted that, in accordance with an alternative embodiment of the invention, the communication device <b>200</b> may be connected to a device that is actually requesting data. In such an alternative embodiment, the communication device would be a modular device connected to a requesting device, where the requesting device, such as, for example, a personal data assistant (PDA) or other device, would request data, and the communication device connected thereto, either through a physical connection, wireless connection, or any other connection, would receive the data request and function as described herein. In addition, as previously mentioned, it should be noted that the HTTP request may be replaced by any request for resources on the Web.</p><p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a flowchart continuing the flowchart <b>380</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> and focused on agent response to the request. As shown by block <b>382</b>, upon receiving the request from the client <b>200</b>, each agent that received the request from the client responds to the client <b>200</b> with whether it has information regarding the request, which can help the client to download the requested information from peers in the network. Specifically, each agent responds with whether the agent has seen a previous request for this resource that has been fulfilled. In such a case, the agent may then provide the client with the list of peers and checksums of the chunks that each of them have.</p><p id="p-0085" num="0084">As shown by block <b>384</b>, the client then decides which of the agents in the list to use as its agent for this particular information request. To determine which agent in the list to use as its agent for the particular information request, the client may consider multiple factors, such as, for example, factoring the speed of the reply by each agent and whether that agent does or does not have the information required. There are multiple ways to implement this agent selection, one practical way being to start a timer of a small window of time, such as, for example, <b>5</b>ms, after receiving the first response from the agents, and after the small window, choosing from the list of agents that responded, the agent that has the information about the request, or in the case that none of the agents responded, to choose the first agent from the list received from the acceleration server <b>162</b>.</p><p id="p-0086" num="0085">As shown by block <b>386</b>, after selecting an agent, the client notifies the selected agent that it is going to use it for this request, and notifies the other agents that they will not be used for this request. The client then sends the selected agent a request for the first five chunks of data of the original information request (block <b>388</b>). By specifying to the selected agent the requested chunks by their order in the full response, the client receives the peer list and checksums of the requested chunks from the selected agent. As an example, for the first five chunks the client will ask the selected agent for chunks one through five, and for the fourth batch of five chunks the client will ask the agent for chunks sixteen through twenty. As previously mentioned, additional or fewer chunks may be requested at a single time.</p><p id="p-0087" num="0086">As shown by block <b>390</b>, after receiving the request from the client, the selected agent determines whether it has information regarding the requested chunks of data by looking up the request in its cache database and determining if the selected agent has stored therein information regarding peers of the communication network that have stored the requested data of the request, or whether the selected agent itself has the requested data of the request stored in its memory. In addition to determining if the selected agent contains an entry for this request in its database, the selected agent may also determine if this information is still valid. Specifically, the selected agent determines whether the data that is stored within the memory of the selected agent or the memory of the peers, still mirrors the information that would have been received from the server itself for this request. A further description of the process utilized by the selected agent to determine if the information is still valid, is described in detail herein.</p><p id="p-0088" num="0087">As shown by block <b>392</b>, if the information (requested data of the request) exists and is still valid, then the agent prepares a response to the client, which includes for each of the chunks: (i) the checksum of the chunk; (ii) a list of peers that according to the database of the selected agent contains these chunks; and (iii) if these are the first five chunks of the information, then the selected agent also provides the specific protocol's headers that would have been received from the server, had the initial request from the client been made directly to the server.</p><p id="p-0089" num="0088">As shown by block <b>394</b>, the list of peers for each chunk is sorted by geographical proximity to the requesting client. In accordance with the present example, only the five closest peers are kept in the list for every chunk, and the rest of the peers are discarded from this list. As shown by block <b>396</b>, the prepared response, namely, the list of closest peers, is sent back to the client. It should be noted that, if this were the last set of chunks to be provided for this request, then it would be beneficial to include information about this to the client.</p><p id="p-0090" num="0089">If the selected agent discovers that it does not have information about this request, or if the selected agent discovers that the information it has is no longer valid, the selected agent needs to load the information directly from the server in order to be able to provide an answer to the requesting client. As shown by block <b>400</b>, the selected agent then sends the request directly to the server. The selected agent then stores the information it receives from the server (both the headers of the request, as well as chunks of the response itself) in its database, for this particular response to the client, as well as for future use to other clients that may request this data (block <b>402</b>). The selected agent then prepares a response (list) for the client, where the response includes the protocol headers (if these are the first five chunks), and the checksums of the five chunks, and provides itself as the only peer for these chunks (block <b>404</b>). This list is then sent back to the client (block <b>406</b>).</p><p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flowchart <b>420</b> continuing the flowchart of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, which illustrates actions taken upon receipt of the list of peers, or single peer listing, from the agent. As shown by block <b>422</b>, the client receives the response from the agent (including the list of chunks and their corresponding data, including peers and other information previously mentioned) and, for each of the five chunks, the client sends a request to each of the peers listed for the chunk to download the chunk. The chunk request that the client sends to each of the peers is the checksum of the data that the client seeks to receive, which is the key (identifier) of the chunk.</p><p id="p-0092" num="0091">As shown by block <b>424</b>, the peers then respond regarding whether they still have the data of the chunk. As an example, some of the peers may not currently be online, some may be online but may have discarded the relevant information, and some may still have the relevant information, namely, the chunk. As shown by block <b>426</b>, the client then selects the quickest peer that responds with a positive answer regarding the requested information, the client lets that peer know that it is chosen to provide the client with the chunk, and the client notifies the other peers that they are not chosen.</p><p id="p-0093" num="0092">As shown by block <b>428</b>, the chosen peer then sends the chunk to the client. It should be noted that if no peers answer the request of the client, the client goes back to the agent noting that the peers were all negative, and the agent either provides a list of <b>5</b> other agents, if they exist, or the agent goes on to download the information directly from the Web server as happens in the case where no peers exist as described above.</p><p id="p-0094" num="0093">The client then stores the chunks in its cache for future use (block <b>430</b>), when the client may need to provide the chunks to a requesting communication device when acting as a peer for another client that is looking for the same information. As shown by block <b>432</b>, if some of the chunks were not loaded from any of the peers, the client requests the chunks again from the agent in a next round of requests, flagging these chunks as chunks that were not loadable from the client list of peers. In this situation, the agent will load the data directly from the server and provide it back to the client.</p><p id="p-0095" num="0094">The client then acknowledges to the agent which of the chunks it received properly (block <b>434</b>). The agent then looks up these chunks in the database of the agent, and adds the client to the list of peers for these chunks, specifically, since this client is now storing these chunks, and can provide these chunks to other clients that turn to it as a peer (block <b>436</b>).</p><p id="p-0096" num="0095">As shown by block <b>438</b>, the client then passes the data on to the Web browser or other application of the client that made the original request, for it to use as it had originally intended. The client then checks whether all of the chunks for this request were received (block <b>440</b>), by checking the flag set by the agent. Specifically, when the agent is providing the list of the last <b>5</b> chunks, the agent includes that information as part of its reply to the client, which is referred to herein as a flag. This information is what enables the client to know that all information has been received for a particular resource request.</p><p id="p-0097" num="0096">If the last received chunks were not the last chunks for this request, the processing flow of the client continues by returning to the functionality of block <b>384</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, but instead sending the chosen agent a request for the next five chunks of data of the original information request. Alternatively, if all chunks for this request were received, the request is complete, and the flow starts again at block <b>352</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart <b>500</b> illustrating steps taken by an agent, client, or peer to determine whether a certain HTTP request is still valid. Specifically, the following provides an example of how the agent, client, or peer can determine whether particular data that is stored within the memory of the agent, or the memory of a peer or client, still mirrors the information that is currently on the Web server. As shown by block <b>502</b>, the HTTP request is looked up in the cache database of the agent, client or peer that is checking the validity of the HTTP request. As an example, the HTTP protocol, defined by RFC 2616, outlines specific methods that Web servers can define within the HTTP headers signifying the validity of certain data, such as, but not limited to, by using HTTP header information such as &#x201c;max age&#x201d; to indicate how long this data may be cached before becoming invalid, &#x201c;no cache&#x201d; to indicate that the data may never be cached, and using other information.</p><p id="p-0099" num="0098">As shown by block <b>504</b>, these standard methods of validation are tested on the HTTP request information in question. As shown by block <b>506</b>, a determination is made whether the requested information that is stored is valid or not. If the requested information is valid, a &#x201c;VALID&#x201d; response is returned (block <b>508</b>). Alternatively, if the requested information is not valid, an HTTP conditional request is sent to the relevant Web server, to determine if the data stored for this request is still valid (block <b>510</b>). If the data stored for this request is still valid, a &#x201c;VALID&#x201d; response is returned (block <b>508</b>). Alternatively, if the data stored for this request is not valid, an &#x201c;INVALID&#x201d; response is returned (block <b>514</b>). It should be noted, that the abovementioned description with regard to <figref idref="DRAWINGS">FIG. <b>12</b></figref> is an explanation of how to check if HTTP information is still valid. There are similar methods of determining validity for any other protocol, which may be utilized, and which those having ordinary skill in the art would appreciate and understand.</p><p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart <b>550</b> outlining operation of the acceleration server, whose main responsibility in the present system and method is to provide clients with information regarding which agents serve which requests, and to keep the network elements all up to date with the latest software updates. As shown by block <b>552</b>, the acceleration server sends &#x201c;keep alive&#x201d; signals to the network elements, and keeps track within its database as to which network elements are online. As shown by block <b>554</b>, the acceleration server continues to wait for a client request and continues to determine if one is received.</p><p id="p-0101" num="0100">Once a request is received, the acceleration server tests the type of request received (block <b>556</b>). If the client request is to sign up the client within the network, an event that happens every time that the client starts running on its host machine, then that client is added to the list of agents stored on the acceleration server, sorted by the IP address of the client (block <b>558</b>).</p><p id="p-0102" num="0101">If the request is to find an agent to use for a particular request, the acceleration server creates a new agent list, which is empty (block <b>560</b>). The acceleration server then searches the agent database for the next 5 active agents whose IP address is closest to the IP address of the server who is targeted in the request (block <b>562</b>). In this context, 192.166.3.103 is closer to 192.166.3.212 than to <b>192</b>.<b>167</b>.<b>3</b>.<b>104</b>. The acceleration server then sends this agent list to the client (block <b>564</b>).</p><p id="p-0103" num="0102">If instead, the request is to check the version of the latest acceleration software then the acceleration server sends that network element (client, peer or agent) the version number of the latest existing acceleration software version, and a URL from where to download the new version, for the case that the element needs to upgrade to the new version (block <b>566</b>).</p><p id="p-0104" num="0103">While the abovementioned example is focused on HTTP requests for data, as previously mentioned, other protocol requests are equally capable of being handled by the present system and method. As an example, in separate embodiments the acceleration method described may accelerate any communication protocol at any OSI layer (SMTP, DNS, UDP, ETHERNET, etc.). In the following alternative embodiment, it is illustrated how the acceleration method may accelerate TCPIP. As is known by those having ordinary skill in the art, TCPIP is a relatively low-level protocol, as opposed to HTTP, which is a high level protocol. For purposes of illustration of TCPIP communication, reference may be made to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, wherein the Web server is a TCPIP server.</p><p id="p-0105" num="0104">In TCPIP there are three communication commands that are of particular interest, namely, connect, write, and read. Connect is a command issued by an application in the communication device that is initiating the communication to instruct the TCPIP stack to connect to a remote communication device. The connect message includes the IP address of the communication device, and the port number to connect to. An application uses the write command to instruct the TCPIP stack to send a message (i.e., data) to a communication device to which it is connected. In addition, an application uses the read command to ask the TCPIP stack to provide the message that was sent from the remote communication device to which it is connected. A communication session typically exists of a connect, followed by a read and write on both sides.</p><p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flowchart <b>600</b> further illustrating TCPIP acceleration in accordance with this alternative embodiment of the invention. As shown by blocks <b>601</b> and <b>602</b> when an application of the communication device makes a request to the communications stack to connect with the TCPIP server, that communication is intercepted by the acceleration application.</p><p id="p-0107" num="0106">To find an agent, upon receiving that connect message from the communication device application, which includes the IP address of the TCPIP server and the port to connect to, the acceleration application in the client makes a request to the acceleration server to find out who the agent for the communication with the TCPIP server is. This step is performed in a similar manner to that described with regard to the main HTTP embodiment of the invention (block <b>604</b>). As shown by block <b>606</b>, the server then provides the client with a list of agents, for example, a primary agent and four others.</p><p id="p-0108" num="0107">To establish a connection, as shown by block <b>608</b>, the client issues a TCPIP connect with the primary agent or one of the other agents if the primary agent does not succeed, to create a connection with the agent. The client then sends to the agent the IP address of the TCPIP server and connection port that were provided by the communication device application (block <b>610</b>). As shown by block <b>612</b>, that agent in turn issues a TCPIP connect to the TCPIP server to the port it received from the client, to create a connection with the agent.</p><p id="p-0109" num="0108"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a flowchart <b>800</b> further illustrating TCPIP acceleration in accordance with this alternative embodiment of the invention, detailing the communication between the client and the TCPIP server (read and write commands) after the connect phase has completed successfully.</p><p id="p-0110" num="0109">As shown by block <b>802</b>, if the network application within the client wants to send a message to the TCPIP server, the network application within the client writes the message to the TCPIP stack in the operating system of the client. This WRITE command is received by the acceleration application of the client and handled in the manner described below. If the TCPIP server wants to send a message to the client, the TCPIP server writes the message to the TCPIP stack of TCPIP operating system, on the connection to the agent, since this agent is where the server received the original connection. This WRITE command is received by the acceleration application of the agent and handled in the manner described below.</p><p id="p-0111" num="0110">When the acceleration application of the client receives a message from the network application of the client to be sent to the agent, or when the acceleration application of the agent receives a message from the connection to the TCPIP server that is to be sent to the client, the acceleration application proceeds to send the message to the communication device on the other side. For instance, if the client has intercepted the message from the communication application, the client sends the message to the agent, and if it is the agent that intercepted the message from the connection to the TCPIP server, such as the TCPIP server sending a message that is intended for the communication with client, the agent sends the message to the client in the following manner:</p><p id="p-0112" num="0111">As shown by block <b>804</b>, the acceleration application breaks up the content of the message to chunks and calculates the corresponding checksums, in the same manner as in the main embodiment described herein. The acceleration application then looks up each checksum in its cache database (block <b>806</b>). As shown by block <b>808</b>, the acceleration application checks if the checksum exists in the cache database. Hit does, then, as shown by block <b>810</b>, the acceleration application prepares a list of peers that have already received the chunk of the checksum in the past (if any), and adds the communication device of the other side to the list of communication devices that have received this chunk (adds it to the peer list of the checksum in its database), to be provided to other communication devices requesting this information in the future. As shown by block <b>812</b>, the list of peers is sent to the receiving communication device, which, as shown by block <b>814</b> retrieves the chunks from the peers in the list received, in the same manner as in the main embodiment.</p><p id="p-0113" num="0112">If the checksum does not exist within the cache database of the sending communication device then, as shown by block <b>820</b>, the acceleration application adds the checksum and chunk to its cache database, sends the chunk to the communication device on the other side, and adds the other communication device to the list of peers for that checksum in its database.</p><p id="p-0114" num="0113">As shown by block <b>816</b>, a determination is then made as to whether all chunks have been received. If all chunks have not been received, the process continues on again from block <b>806</b>.</p><p id="p-0115" num="0114">Once all data has been received, as shown by block <b>818</b>, the acceleration application passes the data on to the requester. Specifically, in the client, the acceleration application passes on the complete data to the communication application, and in the agent, the acceleration application passes on the complete data to the requesting TCPIP server.</p><p id="p-0116" num="0115">It should be emphasized that the above-described embodiments of the present invention are merely possible examples of implementations, merely set forth for a clear understanding of the principles of the invention. Many variations and modifications may be made to the above-described embodiments of the invention without departing substantially from the spirit and principles of the invention. All such modifications and variations are intended to be included herein within the scope of this disclosure and the present invention and protected by the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for receiving, by a consumer communication device that comprises a wireless modem for Radio-Frequency (RF) communication, a first content that is identified by a first Uniform Resource Locator (URL) and is stored in a first web server and a second content that is identified by a second URL and stored in a second web server, for use with first and second devices and a third server, the method comprising:<claim-text>periodically communicating, by the consumer communication device with the third server over the Internet using the RF communication;</claim-text><claim-text>receiving, by the consumer communication device from the third server over the Internet using the RF communication, an identifier of the first device;</claim-text><claim-text>sending, by the consumer communication device over the Internet using the RF communication, the first URL;</claim-text><claim-text>receiving, by the consumer communication device from the first device over the Internet using the RF communication, in response to the sending of the first URL, the first content;</claim-text><claim-text>receiving, by the consumer communication device from the third server over the Internet using the RF communication, an identifier of the second device;</claim-text><claim-text>sending, by the consumer communication device over the Internet using the RF communication, the second URL; and</claim-text><claim-text>receiving, by the consumer communication device from the second device over the Internet using the RF communication, in response to the sending of the second URL, the second content,</claim-text><claim-text>wherein the third server is not a client device.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the first and second web servers is a publicly-accessed Hypertext Transfer Protocol (HTTP) server that respectively responds to HTTP requests.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>establishing, by the consumer communication device over the Internet using the RF communication, with the first device using the received first device identifier, a first connection; and</claim-text><claim-text>establishing, by the consumer communication device over the Internet using the RF communication, with the second device using the received second device identifier, a second connection.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the receiving, by the consumer communication device of the first content is over the first connection, and wherein the receiving, by the consumer communication device of the second content is over the second connection, and wherein each of the first and second connections comprises, or is based on, a respective Transmission Control Protocol (TCP) connection.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the sending of the first URL comprises sending of a first Hypertext Transfer Protocol (HTTP) that is based on HTTP &#x2018;GET&#x2019; request that comprises the first URL, and wherein the sending of the second URL comprises sending of a second Hypertext Transfer Protocol (HTTP) that is based on HTTP &#x2018;GET&#x2019; request that comprises the second URL.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising notifying, by the consumer communication device to the third server over the Internet using the RF communication, in response to the receiving of the first content; and notifying, by the consumer communication device to the third server over the Internet using the RF communication, in response to the receiving of the second content.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first device stores the first content, and wherein the receiving of the first content comprises sending, by the first device to the consumer communication device, the stored first content.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising executing, by the consumer communication device, an application.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the application comprises a web/Internet browser application or an email application.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the application comprises a web/Internet browser application, the method further comprising identifying, by the consumer communication device, the first or second URLs, where the identifying comprises intercepting, by a driver in the consumer communication device, a request for the first or second content respectively from the application.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the first and second content consists of, or comprises, a respective web-page or a portion thereof.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein each of the first and second content consists of, or comprises, a respective resource or an HTML object of the respective web-page.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>sending, by the consumer communication device to the third server over the Internet using the RF communication, a first request; and</claim-text><claim-text>sending, by the consumer communication device to the third server over the Internet using the RF communication, a second request,</claim-text><claim-text>wherein the receiving of the identifier of the first device is in response to the sending of the first request, and</claim-text><claim-text>wherein the receiving of the identifier of the second device is in response to the sending of the second request.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, for use with a group of devices that includes the first and second devices, the method further comprises selecting, by the third server, the first device from the group in response to the first request; and<claim-text>selecting, by the third server, the second device from the group in response to the second request.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the selecting of the first or second device is based on former activity of the respective first or second device.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the selecting of the identifier of the first or second device is based on a response time.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the selecting of the first or second device is based on being the quickest to respond to queries.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the first request comprises the first URL, and wherein the first request comprises the second URL.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the first request comprises a first geographical location, and wherein the second request comprises a second geographical location.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the identifier of the first device comprises, or consists of, a first Internet Protocol (IP) address, and wherein the identifier of the second device comprises, or consists of, a second Internet Protocol (IP) address.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the consumer communication device comprises, or consists of, a client device.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the periodically communicating comprises exchanging &#x2018;keep alive&#x2019; messages.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the consumer communication device is identified by an Internet Protocol (IP) address, Media Access Control (MAC) address, or a hostname, and wherein the method further comprising sending, by the consumer communication device over the Internet using the RF communication, during, as part of, or in response to, a start-up of the consumer communication device, a message to the third server that respectively comprises the IP address, the MAC address, or the hostname.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The method according to <claim-ref idref="CLM-00023">claim 23</claim-ref>, for use with a first application stored in the consumer communication device and associated with a first version number, wherein the message further comprises the first version number.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the consumer communication device communicates over the Internet based on, or according to, one out of UDP, DNS, FTP, POP#, SMTP, or SQL standards.</claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising storing, by the consumer communication device, the received first content and the received second content; and sending a communication port number to the third server, wherein the communication with the third server is using the communication port number.</claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising determining, by the consumer communication device, that the received first content, or part thereof, is valid, wherein the determining is based on a received HTTP header that is according to, or based on, IETF RFC 616.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the steps are sequentially executed.</claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the receiving of the first content comprises sending, by the first device to the first web server over the Internet, the first URL; receiving, by the first device from the first web server over the Internet, the first content; and sending, by the first device to the consumer communication device over the Internet, the received first content, and wherein the receiving the second content from the second web server comprises sending, by the second device to the second web server over the Internet, the second URL; receiving, by the second device from the second web server over the Internet, the second content; and sending, by the second device to the consumer communication device over the Internet, the received second content.</claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further for use with a third device and further for use with a third content that is identified by a third Uniform Resource Locator (URL) and is stored in a third web server, the method further comprising:<claim-text>receiving, by the consumer communication device from the third server over the Internet using the RF communication, an identifier of the third device;</claim-text><claim-text>sending, by the consumer communication device over the Internet using the RF communication, the third URL; and</claim-text><claim-text>receiving, by the consumer communication device from the first device over the Internet using the RF communication, in response to the sending of the third URL, the third content.</claim-text></claim-text></claim></claims></us-patent-application>