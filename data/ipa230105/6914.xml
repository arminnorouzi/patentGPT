<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006915A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006915</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17823860</doc-number><date>20220831</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>02</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>74</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>02</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>74</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Cloud Network Reachability Analysis for Virtual Private Clouds</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16840084</doc-number><date>20200403</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11477110</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17823860</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62830159</doc-number><date>20190405</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Google LLC</orgname><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Liu</last-name><first-name>Hui</first-name><address><city>San Ramon</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Choong</last-name><first-name>Leslie</first-name><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Yang</last-name><first-name>Hongkun</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Agrawal</last-name><first-name>Shishir</first-name><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Yavatkar</last-name><first-name>Raj</first-name><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Luo</last-name><first-name>Tianqiong</first-name><address><city>San Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="06" designation="us-only"><addressbook><last-name>Adhav</last-name><first-name>Gargi</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="07" designation="us-only"><addressbook><last-name>Smolka</last-name><first-name>Steffen</first-name><address><city>Ithaca</city><state>NY</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Google LLC</orgname><role>02</role><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method for providing cloud network reachability analysis includes receiving a reachability query requesting a reachability status of a target including a packet header associated with a data packet. The packet header includes a source IP address and a destination IP address. The method also includes generating one or more simulated forwarding paths for the data packet based on the packet header using a data plane model. Each simulated forwarding path includes corresponding network configuration information. The method includes determining the reachability status of the target based on the one or more simulated forwarding paths and providing the determined reachability status and the one or more simulated forwarding paths to a user device associated with the reachability query which causes the user device to present the network configuration information for each simulated forwarding path.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="100.33mm" wi="158.75mm" file="US20230006915A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="220.81mm" wi="162.05mm" orientation="landscape" file="US20230006915A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="229.19mm" wi="151.98mm" file="US20230006915A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="197.10mm" wi="120.65mm" orientation="landscape" file="US20230006915A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="228.60mm" wi="167.22mm" file="US20230006915A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="230.46mm" wi="166.20mm" orientation="landscape" file="US20230006915A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="232.07mm" wi="163.91mm" orientation="landscape" file="US20230006915A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="232.07mm" wi="163.91mm" orientation="landscape" file="US20230006915A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="201.51mm" wi="166.54mm" orientation="landscape" file="US20230006915A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="232.07mm" wi="166.62mm" orientation="landscape" file="US20230006915A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="232.07mm" wi="166.71mm" orientation="landscape" file="US20230006915A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="225.47mm" wi="166.54mm" file="US20230006915A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="225.47mm" wi="166.54mm" file="US20230006915A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="191.09mm" wi="160.36mm" orientation="landscape" file="US20230006915A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="222.25mm" wi="125.65mm" file="US20230006915A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="230.12mm" wi="143.59mm" orientation="landscape" file="US20230006915A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This U.S. patent application is a continuation of, and claims priority under 35 U.S.C. &#xa7; 120 from, U.S. patent application Ser. No. 16/840,084, filed on Apr. 3, 2020, which claims priority under 35 U.S.C. &#xa7; 119(e) to U.S. Provisional Application 62/830,159, filed on Apr. 5, 2019. The disclosures of these prior applications are considered part of the disclosure of this application and are hereby incorporated by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">This disclosure relates to reachability analysis of a cloud network.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">A virtual private cloud (VPC) is an on-demand configurable pool of shared computing resources allocated within a public cloud environment. The VPC provides isolation for a user from other cloud users. The VPC may execute one or more virtual machines (VMs) which may communication with the user's on-premises network or other remote resources via a virtual private network (VPN). Due to the potential scale and complexity of the VPC, which may include any number of VMs, network gateways, load balancers, etc., significant network configuration is often necessary to operate and maintain the VPC.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0005" num="0004">One aspect of the disclosure provides a method for providing cloud network reachability analysis. The method includes receiving, at data processing hardware, a reachability query requesting a reachability status of a target. The reachability query includes a packet header associated with a data packet. The packet header includes a source Internet Protocol (IP) address associated a source of the data packet and a destination IP address associated with a destination of the data packet. The analysis also includes generating, by the data processing hardware, one or more simulated forwarding paths for the data packet based on the packet header using a data plane model. Each simulated forwarding path includes corresponding network configuration information. The method also includes determining, by the data processing hardware, the reachability status of the target based on the one or more simulated forwarding paths. The method also includes providing, by the data processing hardware, the determined reachability status and the one or more simulated forwarding paths to a user device associated with the reachability query. The one or more simulated forwarding paths when received by the user device, cause the user device to present the network configuration information for each simulated forwarding path.</p><p id="p-0006" num="0005">Implementations of the disclosure may include one or more of the following optional features. In some implementations, determining the reachability status of the one or more simulated forwarding paths includes using a network abstract state machine. The user device may be configured to send the data packet from a remote network using locally advertised routes. In some examples, the network configuration information includes at least one of the following: ports/interfaces for directing the data packet within a virtual private cloud (VPC) network; ports/interfaces for directing the data packet between VPC networks; ports/interfaces for directing the data packet between a VPC network and a non-VPC network; firewall rules applied to the data packet at each step along the corresponding simulated forwarding path; or a network configuration associated with each step along the corresponding simulated forwarding path.</p><p id="p-0007" num="0006">Optionally, the method includes executing, by the data processing hardware, network reachability analysis on each of the one or more simulated forwarding paths based on the corresponding network configuration information. The network reachability analysis may be configured to at least one of: determine a final state of reachability for the data packet along the corresponding simulated forwarding path, discover one or more misconfigurations along the corresponding simulated forwarding path, or discover inconsistent or obsolete configurations along the corresponding simulated forwarding path.</p><p id="p-0008" num="0007">In some implementations, the final state of reachability includes any one of: a delivered state indicating that the data packet will be delivered to the destination, a forwarded state indicating that the data packet will be forwarded to another network having an unknown configuration, a dropped state indicating that the data packet will be dropped due to a configuration checkpoint failure or a missing configuration, or an aborted state indicating the network reachability analysis is not possible due missing critical configurations. Executing the network reachability analysis may include executing the network reachability analysis in at least one of an on-demand mode, a continuous mode, a pre-submit mode, or a post-submit mode.</p><p id="p-0009" num="0008">In some examples, the packet header further includes a protocol associated with the data packet; a source port associated with the data packet; and a destination port associated with the data packet. The source of the data packet may include a first instance executing in a first network and the destination of the data packet may include a second instance executing in a second network different than the first network. In some implementations, the first network includes a VPC network and the second network includes an on-premises network. The first network and the second network may include respective VPC networks.</p><p id="p-0010" num="0009">The source of the data packet may include a first instance and the destination of the data packet may include a second instance. The first instance and the second instance both execute in the same VPC network. The source of the data packet is located in an external network and the destination of the data packet may include a global HTTPS load balancer executing in a VPC network. The global https load balancer is configured to route the data packet to one of multiple different backends. Generating one or more simulated forwarding paths for the data packet may include generating a corresponding simulated forwarding path from the global HTTPS load balancer to each one of the multiple different backends.</p><p id="p-0011" num="0010">Another aspect of the disclosure provides a system for providing could reachability analysis. The system includes data processing hardware and memory hardware in communication with the data processing hardware. The memory hardware stores instructions that when executed on the data processing hardware cause the data processing hardware to perform operations. The operations include receiving a reachability query requesting a reachability status of a target. The reachability query includes a packet header associated with a data packet. The packet header includes a source Internet Protocol (IP) address associated a source of the data packet and a destination IP address associated with a destination of the data packet. The analysis also includes generating one or more simulated forwarding paths for the data packet based on the packet header using a data plane model. Each simulated forwarding path includes corresponding network configuration information. The operations also include determining the reachability status of the target based on the one or more simulated forwarding paths. The operations also include providing the determined reachability status and the one or more simulated forwarding paths to a user device associated with the reachability query. The one or more simulated forwarding paths when received by the user device, cause the user device to present the network configuration information for each simulated forwarding path</p><p id="p-0012" num="0011">This aspect may include one or more of the following optional features. In some implementations, determining the reachability status of the one or more simulated forwarding paths includes using a network abstract state machine. The user device may be configured to send the data packet from a remote network using locally advertised routes. In some examples, the network configuration information includes at least one of the following: ports/interfaces for directing the data packet within a virtual private cloud (VPC) network; ports/interfaces for directing the data packet between VPC networks; ports/interfaces for directing the data packet between a VPC network and a non-VPC network; firewall rules applied to the data packet at each step along the corresponding simulated forwarding path; or a network configuration associated with each step along the corresponding simulated forwarding path.</p><p id="p-0013" num="0012">Optionally, the operations include executing network reachability analysis on each of the one or more simulated forwarding paths based on the corresponding network configuration information. The network reachability analysis may be configured to at least one of: determine a final state of reachability for the data packet along the corresponding simulated forwarding path, discover one or more misconfigurations along the corresponding simulated forwarding path, or discover inconsistent or obsolete configurations along the corresponding simulated forwarding path.</p><p id="p-0014" num="0013">In some implementations, the final state of reachability includes any one of: a delivered state indicating that the data packet will be delivered to the destination, a forwarded state indicating that the data packet will be forwarded to another network having an unknown configuration, a dropped state indicating that the data packet will be dropped due to a configuration checkpoint failure or a missing configuration, or an aborted state indicating the network reachability analysis is not possible due missing critical configurations. Executing the network reachability analysis may include executing the network reachability analysis in at least one of an on-demand mode, a continuous mode, a pre-submit mode, or a post-submit mode.</p><p id="p-0015" num="0014">In some examples, the packet header further includes a protocol associated with the data packet; a source port associated with the data packet; and a destination port associated with the data packet. The source of the data packet may include a first instance executing in a first network and the destination of the data packet may include a second instance executing in a second network different than the first network. In some implementations, the first network includes a VPC network and the second network includes an on-premises network. The first network and the second network may include respective VPC networks.</p><p id="p-0016" num="0015">The source of the data packet may include a first instance and the destination of the data packet may include a second instance. The first instance and the second instance both execute in the same VPC network. The source of the data packet is located in an external network and the destination of the data packet may include a global HTTPS load balancer executing in a VPC network. The global https load balancer is configured to route the data packet to one of multiple different backends. Generating one or more simulated forwarding paths for the data packet may include generating a corresponding simulated forwarding path from the global HTTPS load balancer to each one of the multiple different backends.</p><p id="p-0017" num="0016">The details of one or more implementations of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">DESCRIPTION OF DRAWINGS</heading><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic view of an example system for performing cloud network reachability analysis.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic view of exemplary components of a virtual machine of the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> is a schematic view of exemplary components including a network abstract state machine of the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> is a schematic view of an exemplary report indicating a determined reachability status of a simulated forwarding path.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic view of the network abstract state machine of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic view of a state diagram for the network abstract state machine for simulating a forwarding path between a virtual machine and another virtual machine.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic view of a state diagram for the network abstract state machine for simulating a forwarding path between a virtual machine and a load balancer.</p><p id="p-0025" num="0024">FIG.<b>7</b> is a schematic view of a state diagram for the network abstract state machine for simulating a forwarding path between a virtual machine and on-premises network.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a schematic view of a state diagram for the network abstract state machine for simulating a forwarding path between the Internet and a virtual machine.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a schematic view of a state diagram for the network abstract state machine for simulating a forwarding path between an on-premises network virtual machine and a virtual private cloud virtual machine.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIGS. <b>10</b>A and <b>10</b>B</figref> are tables of causes for final reachability states for simulated data packets.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a schematic view of a simulated forwarding path between an external host and virtual private cloud virtual machines through a load balancer.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart of an example arrangement of operations for a method of performing cloud network reachability analysis.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a schematic view of an example computing device that may be used to implement the systems and methods described herein.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0032" num="0031">Like reference symbols in the various drawings indicate like elements.</p><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0033" num="0032">A virtual private cloud (VPC) is an on-demand configurable pool of shared computing resources allocated within a public cloud environment to provide isolation for a user from other cloud users. This isolation may occur through allocation of private Internet Protocol (IP) subnets and/or virtual communication constructs. The VPC may execute one or more virtual machines (VMs) which may communication with the user's on-premises network or other remote resources via a virtual private network (VPN) to ensure secure access to the VPC environment. Because some VPC environments are very complex with a very large scale (i.e., include a number of VMs, network gateways, load balancers, etc.), significant network configuration is often necessary to operate and maintain the VPC network.</p><p id="p-0034" num="0033">Implementations herein are directed toward a cloud reachability analyzer that allows a user to specify a packet header with a plurality of fields (e.g., source and destination address, protocol, source and destination ports, etc.) and simulate at least one expected forwarding path for the data packet (using the packet header) through the VPC network, peering VPC networks, VPN tunnels, and/or to the user's on-premises network. The cloud reachability analyzer provides configuration information for each simulated path that includes, for example, route and firewall rules. As opposed to actually verifying the state of the forwarding path (i.e., by actually transmitting the data packet), the cloud reachability analyzer instead performs analysis based on active configurations of the VPC network. This may be referred to as &#x201c;intent-based&#x201d; packet tracing.</p><p id="p-0035" num="0034">That is, the cloud reachability analyzer provides configuration-based static analysis of network reachability within a VPC or between a VPC and non-VPC networks (e.g., on-premises networks). The user may specify one or more parameters of a packet header and the cloud reachability analyzer generates and simulates packet forwarding paths. The cloud reachability analyzer provides, for each step of each simulated path, the matching configuration (e.g., firewall rule, route, etc.). Thus, the cloud reachability analyzer allows the user to verify intended reachability with their network configuration and helps to discover inconsistent, obsolete, or misconfigured configurations. Additionally, the cloud reachability analyzer validates and detects errors from new configuration changes and analyzes network connectivity impact by proposed configuration changes.</p><p id="p-0036" num="0035">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in some implementations, an example system <b>100</b> includes a user device <b>10</b> associated with a respective user <b>12</b> and in communication with a remote system <b>140</b> via a network <b>60</b> (e.g., the Internet) and an on-premises network <b>70</b> (i.e., the local network that the user device <b>10</b> uses to connect to the network <b>60</b>). The on-premises network <b>70</b> include a network gateway <b>72</b> (e.g., a router) that serves as the forwarding host for the on-premises network <b>70</b>. The user device <b>10</b> may correspond to any computing device, such as a desktop workstation, a laptop workstation, or a mobile device (i.e., a smart phone). The user device <b>10</b> includes computing resources <b>18</b> (e.g., data processing hardware) and/or storage resources <b>16</b> (e.g., memory hardware).</p><p id="p-0037" num="0036">The remote system <b>140</b> may be a single computer, multiple computers, or a distributed system (e.g., a cloud environment) having scalable/elastic resources <b>142</b> including computing resources <b>144</b> (e.g., data processing hardware) and/or storage resources <b>146</b> (e.g., memory hardware). A data store (i.e., a remote storage device) may be overlain on the storage resources <b>146</b> to allow scalable use of the storage resources <b>146</b> by one or more of the client or computing resources <b>144</b>. The remote system <b>140</b> is configured to implement and execute one or more virtual machines (VMs) <b>250</b>, <b>250</b><i>a</i>-<i>n. </i>One or more of the VMs execute securely in a virtual private cloud (VPC) environment or VPC network <b>148</b> associated with or operated by the user <b>12</b>. The VPC network <b>148</b> may include a variety of other network elements, such as load balancers, gateways, front ends, and back ends.</p><p id="p-0038" num="0037">In the example shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the distributed system <b>140</b> includes a collection <b>210</b> of resources <b>110</b> (e.g., hardware resources <b>110</b><i>h</i>), a virtual machine monitor (VMM) <b>220</b>, a VM layer <b>240</b> executing one or more of the VMs <b>250</b>, and an application layer <b>260</b>. Each hardware resource <b>110</b><i>h </i>may include one or more physical central processing units (pCPU) <b>144</b> (&#x201c;physical processor <b>144</b>&#x201d;) and memory hardware <b>146</b>. While each hardware resource <b>110</b><i>h </i>is shown having a single physical processor <b>144</b>, any hardware resource <b>110</b><i>h </i>may include multiple physical processors <b>144</b>. An operating system <b>212</b> may execute on the collection <b>210</b> of resources <b>110</b>.</p><p id="p-0039" num="0038">In some examples, the VMM <b>220</b> corresponds to a hypervisor <b>220</b> (e.g., a Compute Engine) that includes at least one of software, firmware, or hardware configured to create and execute the VMs <b>250</b>. A computer (i.e., data processing hardware <b>144</b>) associated with the VMM <b>220</b> that executes the one or more VMs <b>250</b> may be referred to as a host machine, while each VM <b>250</b> may be referred to as a guest machine. Here, the VMM <b>220</b> or hypervisor is configured to provide each VM <b>250</b> a corresponding guest operating system (OS) <b>212</b><i>g </i>having a virtual operating platform and manage execution of the corresponding guest OS <b>212</b><i>g </i>on the VM <b>250</b>. As used herein, each VM <b>250</b> may be referred to as an &#x201c;instance&#x201d; or a &#x201c;VM instance&#x201d;. In some examples, multiple instances of a variety of operating systems may share virtualized resources. For instance, a first VM <b>250</b> of the Linux&#xae; operating system, a second VM <b>250</b> of the Windows&#xae; operating system, and a third VM <b>250</b> of the OS X&#xae; operating system may all run on a single physical x86 machine.</p><p id="p-0040" num="0039">The VM layer <b>240</b> includes one or more virtual machines <b>250</b>. The distributed system <b>140</b> enables the user <b>12</b> to launch VMs <b>250</b> on demand. A VM <b>250</b> emulates a real computer system and operates based on the computer architecture and functions of the real computer system or a hypothetical computer system, which may involve specialized hardware, software, or a combination thereof. In some examples, the distributed system <b>140</b> authorizes and authenticates the user <b>12</b> before launching the one or more VMs <b>250</b>. An instance of software, or simply an instance, refers to a VM <b>250</b> hosted on (executing on) the data processing hardware <b>144</b> of the distributed system <b>140</b>.</p><p id="p-0041" num="0040">Each VM <b>250</b> may include one or more virtual central processing units (vCPUs) <b>252</b> (&#x201c;virtual processor&#x201d;). In the example shown, a first virtual machine <b>250</b><i>a </i>includes a first set <b>252</b><i>a </i>of one or more virtual processors <b>252</b> and a second virtual machine <b>250</b><i>b </i>includes a second set <b>252</b><i>b </i>of one or more virtual processors <b>252</b>. While the second set <b>252</b><i>b </i>is shown as only including one virtual processor <b>252</b>, any number of virtual processors <b>252</b> is possible. Each virtual processor <b>252</b> emulates one or more physical processors <b>144</b>. For example, the first set <b>252</b><i>a </i>of the one or more virtual processors <b>252</b> emulates a first set <b>113</b><i>a </i>of one or more physical processors <b>144</b>, and the second set <b>252</b><i>b </i>of the one or more virtual processors <b>252</b> emulates a second set <b>113</b><i>b </i>of one or more physical processors <b>144</b>. The application layer <b>260</b> includes software resources <b>110</b><i>s, </i><b>110</b><i>sa, </i><b>110</b><i>sb </i>(software applications) that may execute on the virtual machine(s) <b>250</b>.</p><p id="p-0042" num="0041">Typically, each instance of software (e.g., a virtual machine <b>250</b>) includes at least one virtual storage device <b>262</b> that provides volatile and non-volatile storage capacity for the service on the physical memory hardware <b>146</b>. For instance, the storage capacity on the physical memory hardware <b>146</b> can include persistent disks (PD) that store data for the user <b>12</b> across several physical disks (e.g., memory regions <b>116</b> (<figref idref="DRAWINGS">FIG. <b>13</b></figref>) of the memory hardware <b>146</b> or random access memory (RAM) to provide volatile memory. More specifically, each virtual storage device <b>262</b> of a corresponding VM <b>250</b> moves data in sequences of bytes or bits (blocks) to an associated physical block storage volume V on the memory hardware <b>146</b> to provide non-volatile storage. Accordingly, a virtual storage device <b>262</b> of a corresponding VM instance <b>250</b> provides a storage capacity that maps to corresponding physical block storage volumes V on the memory hardware <b>146</b>. In some examples, the virtual storage devices <b>262</b> support random access to the data on the memory hardware <b>146</b> and generally use buffered I/O. Examples include hard disks, CD-ROM drives, and flash drives. Similarly, portions of volatile memory (e.g., RAM) of physical memory hardware <b>146</b> may be divided across the virtual storage devices <b>262</b>.</p><p id="p-0043" num="0042">Within the guest operating system <b>212</b><i>g </i>resides a guest kernel <b>214</b><i>g. </i>A kernel is a computer program that is the core of the operating system with full access and control over the OS. That is, the kernel is an intermediary between applications <b>110</b><i>s </i>and the hardware resources <b>110</b><i>h </i>of the host machine. Most modern computing systems segregate virtual memory into protected kernel space and user space <b>216</b><i>g. </i>The kernel typically remains in volatile memory within the protected kernel space and is isolated from user space <b>216</b><i>g. </i>To increase safety and reliability, applications <b>110</b><i>s </i>and other software services typically execute in the guest user space <b>216</b><i>g </i>and lack the privileges necessary to interact with the protected kernel space.</p><p id="p-0044" num="0043">Referring back to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the remote system <b>140</b> executes a cloud reachability analyzer <b>150</b> for analyzing one or more network forwarding paths <b>80</b>, <b>80</b><i>a</i>-<i>n </i>between or within the VPC network <b>148</b> and/or the on-premises network <b>70</b> to determine a reachability status <b>172</b> and/or network configuration information <b>162</b> regarding each network forwarding path <b>80</b>.</p><p id="p-0045" num="0044">The cloud reachability analyzer <b>150</b> receives a reachability query <b>20</b> from the user device <b>10</b> requesting the reachability status <b>172</b> of a target. The target may include the on-premises network gateway <b>72</b>, one or more VMs <b>250</b>, firewall rules, and/or other components of the VPC network <b>148</b> such as a load balancer (<figref idref="DRAWINGS">FIG. <b>11</b></figref>)). When the target is a firewall rule, the reachability status <b>172</b> depends on whether there exists a packet that can be delivered to the VPC network <b>148</b> and hit a specific rule in the configuration. The reachability query <b>20</b> includes a packet header <b>22</b> (e.g., an Internet Protocol (IP) version 4 (IPv4) or IP version 6 (IPv6) packet header) associated with a data packet <b>24</b>. In some examples, the reachability query <b>20</b> includes the data packet <b>24</b> and the associated packet header <b>22</b>, while in other examples, the cloud reachability analyzer <b>150</b> receives the packet header <b>22</b> and generates a corresponding data packet <b>24</b>. The packet header <b>22</b> includes a plurality of data packet parameters <b>25</b>, <b>25</b><i>a</i>-<i>n. </i>For example, the packet header <b>22</b> includes a source Internet Protocol (IP) address <b>25</b><i>a </i>and a destination IP address <b>25</b><i>b. </i>Optionally, the packet header <b>22</b> includes other parameters <b>25</b> such as a protocol type <b>25</b><i>c, </i>a source port <b>25</b><i>d, </i>and/or a destination port <b>25</b><i>e. </i></p><p id="p-0046" num="0045">The cloud reachability analyzer <b>150</b> includes a path generator <b>160</b> that receives or obtains the data packet <b>24</b> with the associated packet header <b>22</b>. The path generator <b>160</b> generates one or more simulated forwarding paths <b>80</b> (herein also referred to as traces) for the data packet <b>24</b> based on the packet header <b>22</b> using a data plane model <b>164</b>. Each simulated forwarding path <b>80</b> includes corresponding network configuration information <b>162</b>. The data plane model <b>164</b> obtains the network configuration information <b>162</b> from network components of the VPC network <b>148</b> and includes, for example, ports/interfaces for directing the data packet <b>24</b> within the VPC network <b>148</b>, ports/interfaces for directing the data packet <b>24</b> between different VPC networks <b>148</b>, ports/interfaces for directing the data packet <b>24</b> between the VPC network <b>148</b> and a non-VPC network (e.g., the on-premises network <b>70</b>), firewall rules applied to the data packet <b>24</b> at each step along the corresponding simulated forwarding path <b>80</b>, and/or a network configuration associated with each step along the corresponding simulated forwarding path <b>80</b>. As used herein, each step along the simulated forwarding path <b>80</b> refers an intermediate devices (e.g., gateways, load balancers, etc.) between the source instance and destination instance.</p><p id="p-0047" num="0046">The data plane model <b>164</b>, in some implementations, is an idealized data plane model that models the network <b>148</b> data plane by deriving instances from network configuration information <b>162</b>. In some examples, the network configuration information <b>162</b> is stored in a project configuration associated with the VPC network <b>148</b>. The data plane model <b>164</b> analyzes the derived instances to determine and verify reachability properties. That is, the data plane model <b>164</b> abstracts relevant network configurations for reachability analysis. The network configuration information <b>162</b> may include VPC network configuration information, network services information (e.g., load balances), hybrid cloud configurations, VM configurations, and/or platform configurations (e.g., a platform for containerized applications).</p><p id="p-0048" num="0047">The simulated forwarding paths <b>80</b> represents the data packet's <b>24</b> forwarding path within the VPC network <b>148</b> and/or between the VPC network <b>148</b> and the on-premises network <b>70</b>. For example, one simulated forwarding path <b>80</b> represents the forwarding path from a first instance (e.g., VM <b>250</b><i>a</i>) to a second instance (e.g., VM <b>250</b><i>b</i>) both executing in the same VPC network <b>148</b>. Optionally, the source of the data packet for one simulated forwarding path <b>80</b> is an instance (e.g., a VM <b>250</b>) executing in a first network that is a VPC network <b>148</b> and the destination is a second instance (e.g., a different VM <b>250</b>) executing in a second network that is a different VPC network <b>148</b> than the first network.</p><p id="p-0049" num="0048">In another example, one simulated forwarding path <b>80</b> represents the forwarding path <b>80</b> from one VM <b>250</b> to an external network (e.g., the Internet <b>60</b>). That is, the source (i.e., the source IP address <b>25</b><i>a</i>) of the data packet <b>24</b> includes a first instance executing in a first network (e.g., a VM <b>250</b> in the VPC network <b>148</b>) and the destination (i.e., the destination IP address <b>25</b><i>b</i>) of the data packet <b>24</b> includes a second instance executing in a second network (e.g., the on-premises network <b>70</b>) different than the first network. In yet other examples, the simulated forwarding path <b>80</b> represents a VM <b>250</b> to a load balancer <b>1110</b> (<figref idref="DRAWINGS">FIG. <b>11</b></figref>) and/or a VM <b>250</b> to the network gateway <b>72</b> of the on-premises network <b>70</b> (e.g., via a virtual private network (VPN) tunnel). Each of these examples may also be reversed in direction. That is, one of the simulated forwarding path <b>80</b> may include the Internet <b>60</b> to a VM <b>250</b> or load balancer <b>1110</b> and/or the on-premises network gateway <b>72</b> to a VM <b>250</b>. The user device <b>10</b> may be configured to send the data packet <b>24</b> from a remote network (e.g., the on-premises network <b>70</b>) using locally advertised routes. That is, because the cloud reachability analyzer <b>150</b> may not have access to the network configuration information <b>162</b> of the on-premises network <b>70</b>, the cloud reachability analyzer <b>150</b> may not validate if the correct route and firewall rules are configured for data packets <b>24</b> that originate from the on-premises network <b>70</b>. However, the cloud reachability analyzer <b>150</b> may validate whether the configuration from the VPC network <b>148</b> will allow the data packet <b>24</b> to be delivered to the intended destination. The most critical configuration validated by the cloud reachability analyzer <b>150</b> includes the advertised routes and the ingress firewall rules.</p><p id="p-0050" num="0049">As another example, the source of the data packet <b>24</b> is located in an external network (e.g., the on-premises network <b>70</b>) and the destination of the data packet <b>24</b> includes a global HTTPS load balancer <b>1110</b> executing in the VPC network <b>148</b>. The global HTTPS load balancer <b>1110</b> may be configured to route the data packet <b>24</b> to one of multiple different backend VMs <b>250</b> (<figref idref="DRAWINGS">FIG. <b>11</b></figref>). The path generator <b>160</b> may generate a corresponding simulated forwarding path <b>80</b> from the global HTTPS load balancer to each one of the multiple different backend VMs <b>250</b>.</p><p id="p-0051" num="0050">The exemplary paths <b>80</b> discussed herein are illustrative only and not intended to be limiting. That is, the cloud reachability analyzer <b>150</b> may analyze or simulate other forwarding paths <b>80</b> as well. For example, the cloud reachability analyzer <b>150</b> may receive or obtain network configuration information <b>162</b> (e.g., from the user <b>12</b>) for other networks (e.g., the on-premises network <b>70</b> or peering VPC networks) and include the simulated paths <b>80</b> through these networks. Put another way, the cloud reachability analyzer <b>150</b> may analyze forwarding paths <b>80</b> through any network and associated network components (e.g., gateways, load balancers, frontends, backends, etc.) that the cloud reachability analyzer <b>150</b> obtains network configuration information <b>162</b> for. In some examples, the cloud reachability analyzer <b>150</b> stops analysis at a point when network configuration information <b>162</b> is no longer available (e.g., at the on-premises gateway <b>72</b>).</p><p id="p-0052" num="0051">The path generator <b>160</b> passes the paths <b>80</b> and corresponding network configuration information <b>162</b> to a path analyzer <b>170</b> that determines the reachability status <b>172</b> of the target of the reachability query <b>20</b> based on the one or more simulated forwarding paths <b>80</b>. The path analyzer <b>170</b>, in some examples, executes network reachability analysis on each of the one or more simulated forwarding paths <b>80</b> based on the corresponding network configuration information <b>162</b>. The path analyzer <b>170</b> may execute the network reachability analysis in at least one of an on-demand mode, a continuous mode, a pre-submit mode, or a post-submit mode. For example, the reachability query <b>20</b> may indicate a request for a single simulation or for continuous simulations until the user device <b>10</b> directs the cloud reachability analyzer <b>150</b> to stop (or some other threshold is met, e.g., an amount of time has passed). In some implementations, the path analyzer <b>170</b> determines a final state of reachability <b>172</b> (also referred to herein as the reachability status <b>172</b>) for the data packet <b>24</b> along the corresponding simulated forwarding path <b>80</b> by discovering one or more misconfigurations along the corresponding simulated forwarding path <b>80</b> or discovering inconsistent or obsolete configurations along the corresponding simulated forwarding path <b>80</b>.</p><p id="p-0053" num="0052">The cloud reachability analyzer <b>150</b> provides the determined reachability status <b>172</b> and the one or more simulated forwarding paths <b>80</b> to the user device <b>10</b> associated with the reachability query <b>20</b>. As discussed in more detail below, the one or more simulated forwarding paths <b>80</b>, when received by the user device <b>10</b>, cause the user device <b>10</b> to present the network configuration information <b>162</b> for each simulated forwarding path <b>80</b> to the user <b>12</b>.</p><p id="p-0054" num="0053">Referring now to <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, in some implementations, the path analyzer <b>170</b> includes a network abstract state machine (NAM) <b>400</b> for generating the one or more simulated forwarding paths <b>80</b>. The NAM <b>400</b> may be an idealized model for how the VPC network <b>148</b> processes data packets. In some examples, the NAM <b>400</b> is an abstraction and thus, is independent of the actual implementation of the VPC network <b>148</b>. Optionally, the NAM <b>400</b> determines the final state of reachability <b>172</b> of the data packet <b>24</b>, which includes any one of: a delivered state <b>174</b><i>a </i>indicating that the data packet <b>24</b> will be delivered to the destination, a forwarded state <b>174</b><i>b </i>indicating that the data packet <b>24</b> will be forwarded to another network having an unknown configuration, a dropped state <b>174</b><i>c </i>indicating that the data packet <b>24</b> will be dropped due to a configuration checkpoint failure or a missing configuration, or an aborted state <b>174</b><i>d </i>indicating the network reachability analysis is not possible due missing critical configurations. The NAM <b>400</b> may be non-deterministic in that a state may have multiple successor states. For example, when several routes with the same IP masks and priorities apply to a data packet, a route is chosen among them based on an unspecified hashing function. Although this is a deterministic process in principle, it is better modeled by choosing one of the routes non-deterministically, as the hash function is an internal implementation that is subject to change.</p><p id="p-0055" num="0054">Referring now to <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, the cloud reachability analyzer <b>150</b> provides the determined reachability status <b>172</b> of each simulated forwarding path <b>80</b> to the user device <b>10</b>. This causes the user device to present the network configuration information <b>162</b> for each simulated forwarding path <b>80</b> to the user <b>12</b>. For example, a report <b>300</b> may indicate to the user <b>12</b> details regarding the generated data packet <b>24</b> (e.g., the packet header <b>22</b>). The report <b>300</b> may indicate information related to each step <b>310</b>, <b>310</b><i>a</i>-<i>n </i>or hop along the trace or simulated forwarding path <b>80</b>. In the example shown, the data packet <b>24</b> departed from the source instance at step <b>310</b><i>a </i>(i.e., step <b>0</b>), applied egress firewall rules at step <b>310</b><i>b </i>(i.e., step <b>1</b>), routed the data packet at step <b>310</b><i>c </i>(i.e., step <b>2</b>), arrived at the destination instance at step <b>310</b><i>d </i>(i.e., step <b>3</b>), applied ingress firewall rules at step <b>310</b><i>e </i>(i.e., step <b>4</b>), and delivered to the destination instance at step <b>310</b><i>f </i>(i.e., step <b>5</b>). Each of these steps <b>310</b> includes the relevant network configuration information <b>162</b>.</p><p id="p-0056" num="0055">The report <b>300</b> may indicate a reason or rationale for the determined reachability status <b>172</b> of each simulated forwarding path <b>80</b> (e.g., packet dropped because denied by firewall rule) to help troubleshoot and/or detect network connectivity caused by inconsistent configurations and invalid configurations or to validate new or changed configurations. In some examples, the cloud reachability analyzer <b>150</b> provides configuration change impact analysis. Each of the simulated forwarding paths <b>80</b> may be presented as part of a graphical user interface (GUI) on the user device as part of an application (e.g., a web browser). While the example shown provides details regarding only a single forwarding path <b>80</b> (i.e., trace <b>1</b>), each forwarding path <b>80</b> simulated may be provided (i.e., multiple traces). In some examples, the report <b>300</b> includes a summary section <b>320</b> that indicates the determined reachability status <b>172</b> of the data packet <b>24</b>.</p><p id="p-0057" num="0056">Referring now to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the NAM <b>400</b>, in some implementations, includes an egress check <b>410</b>, an ingress check <b>420</b>, and a path specific check <b>430</b>. The egress check <b>410</b>, in some examples, includes an egress firewall check <b>412</b> and a match route <b>414</b>. The egress firewall check finds (e.g., within the network configuration information <b>162</b>) the matching egress firewall rule. The egress firewall rules are the firewall rules applied to the source instance (e.g., a VM <b>250</b>). The match route <b>414</b> may find and apply the appropriate route for the simulated forwarding path <b>80</b>. The match route <b>414</b> may also determine, when the source instance is a VM <b>250</b>, whether there is a matching route for the destination IP address <b>25</b><i>b. </i>When there is no matching route, the NAM <b>400</b> may match the route with a default route with the next hop as the Internet gateway. The ingress firewall check <b>422</b>, like the egress firewall check <b>412</b>, finds and applies the matching ingress firewall rule (i.e., the firewall rules applied to the destination instance).</p><p id="p-0058" num="0057">The path specific check <b>430</b> is based on the type of simulated forwarding path <b>80</b> the NAM <b>400</b> is evaluating. That is, the path specific check <b>430</b> depends on the source instance and destination instance of the simulated forwarding path <b>80</b>. For example, when the destination instance is a VPN gateway <b>432</b> via VPN tunnel <b>434</b>, specific states (<figref idref="DRAWINGS">FIG. <b>7</b></figref>) are included in the evaluation by the NAM <b>400</b>. Likewise, when the destination instance is a load balancer with a forwarding rule <b>436</b>, different states (<figref idref="DRAWINGS">FIGS. <b>6</b> and <b>8</b></figref>) are evaluated. When the destination instance is a peering network gateway <b>438</b>, yet other states are evaluated in the state machine of the NAM <b>400</b>.</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIGS. <b>5</b>-<b>9</b></figref> illustrate exemplary state machines <b>500</b>, <b>600</b>, <b>700</b>, <b>800</b>, <b>900</b> that represent the NAM <b>400</b> when analyzing different simulated forwarding paths <b>80</b> for the data packet <b>24</b>. For example, <figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates the state machine <b>500</b> for the NAM <b>400</b> when analyzing a simulated forwarding path <b>80</b> between a first VM <b>250</b> and a second VM <b>250</b> or a first VM <b>250</b> to the Internet <b>60</b>. The state machine <b>500</b> begins at the instance state <b>510</b> which corresponds to the source VM <b>250</b>. From there, the state machine <b>500</b> transitions to the abort state <b>512</b> (when analysis cannot proceed due to, for example, missing network configuration information <b>162</b>), to an apply egress firewall rule <b>514</b>, or a spoofing check <b>518</b> state when the VM <b>250</b> is allowed to send/receive data packets with foreign IPs. The data packet <b>24</b> may be dropped at the drop state <b>516</b> due to a network configuration check fail or for missing network configuration information <b>162</b>. The appropriate route is found and applied at state <b>520</b> and the data packet <b>24</b> may arrive at a VM instance at state <b>522</b>, be forwarded to another network whose configuration is unknown (hence analysis stops) at state <b>528</b>, have the packet header <b>22</b> modified due to a network address translation (NAT) at state <b>526</b>, or apply ingress firewall rules at state <b>524</b>. At state <b>530</b>, the data packet <b>24</b> is delivered to the destination specified in the packet header <b>22</b>.</p><p id="p-0060" num="0059">Referring now to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the state machine <b>600</b> represents the NAM <b>400</b> when analyzing a simulated forwarding path <b>80</b> between a VM <b>250</b> and a load balancer <b>1110</b> (<figref idref="DRAWINGS">FIG. <b>11</b></figref>). The state machine <b>600</b> begins at the instance state <b>610</b> which corresponds to the source VM <b>250</b>. From there, the state machine <b>600</b> transitions to the abort state <b>612</b> (when analysis cannot proceed due to, for example, missing network configuration information <b>162</b>), to an apply egress firewall rule <b>614</b>, or a spoofing check <b>618</b> state when the VM <b>250</b> is allowed to send/receive data packets with foreign IPs. The data packet <b>24</b> may be dropped at the drop state <b>616</b> due to a network configuration check fail or for missing network configuration information <b>162</b>. The appropriate route is found and applied at state <b>620</b> and be forwarded to another network whose configuration is unknown (hence analysis stops) at state <b>622</b>. At state <b>624</b>, the NAM <b>400</b> applies the appropriate forwarding rule, and at state <b>626</b> arrives at an internal or external load balancer <b>1110</b>. From there, the data packet <b>24</b> may be forwarded to one or more backends <b>628</b>, <b>628</b><i>a</i>-<i>n </i>and the data packet is either dropped at state <b>630</b> or delivered at state <b>632</b>.</p><p id="p-0061" num="0060">Referring now to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the state machine <b>700</b> represents the NAM <b>400</b> when analyzing a simulated forwarding path <b>80</b> between a VM <b>250</b> and the on-premises network <b>70</b> through a VPN. The state machine <b>700</b> begins at the instance state <b>710</b> which corresponds to the source VM <b>250</b>. From there, the state machine <b>600</b> transitions to the abort state <b>712</b> (when analysis cannot proceed due to, for example, missing network configuration information <b>162</b>), to an apply egress firewall rule <b>714</b>, or a spoofing check <b>718</b> state when the VM <b>250</b> is allowed to send/receive data packets with foreign IPs. The data packet <b>24</b> may be dropped at the drop state <b>716</b> due to a network configuration check fail or for missing network configuration information <b>162</b>. The appropriate route is found and applied at state <b>720</b> and be forwarded to another network whose configuration is unknown (hence analysis stops) at state <b>722</b> and subsequently forwarded to one or more on-premises backends <b>728</b>, <b>728</b><i>a</i>-<i>n. </i>At state <b>724</b>, the data packet <b>24</b> arrives at the local side of the VPN tunnel and at state <b>726</b> the data packet <b>24</b> arrives at the VPN gateway and may be forwarded on to one or more VPC backends <b>628</b>.</p><p id="p-0062" num="0061">Referring now to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the state machine <b>800</b> represents the NAM <b>400</b> when analyzing a simulated forwarding path <b>80</b> between the Internet <b>60</b> and a VM <b>250</b> or the Internet <b>60</b> and a load balancer <b>1110</b>. The state machine <b>800</b> begins at the Internet state <b>810</b> for a data packet <b>24</b> originating from the Internet <b>60</b>. From there, the state machine <b>800</b> may proceed to state <b>816</b> when the data packet <b>24</b> is dropped due to a network configuration check fail or for missing network configuration information <b>162</b>. The state machine <b>800</b> may also proceed to state <b>812</b> and have the packet header <b>22</b> modified due to a NAT. From the NAT state <b>812</b>, the data packet <b>24</b> arrives at the VM instance at <b>818</b> and is either dropped at state <b>820</b> or delivered at state <b>822</b>. The state machine <b>800</b> may also proceed to state <b>814</b>, when the destination is a load balancer <b>1110</b>, and apply the appropriate forwarding rule. From there, the state machine <b>800</b> proceeds to state <b>824</b> where the data packet <b>24</b> arrives at the external load balancer. Next, the state machine <b>800</b> transitions to the proxy connection state <b>826</b> when the previous connection is proxied to a new connection, and the NAM <b>400</b> generates a new data packet <b>24</b> for subsequent traces or simulations. Otherwise, the state machine <b>800</b> simulates forwarding the data packet <b>24</b> to one or more backends <b>628</b> where the data packet is dropped at state <b>828</b> or delivered at state <b>830</b>.</p><p id="p-0063" num="0062">Referring now to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, the state machine <b>900</b> represents the NAM <b>400</b> when analyzing a simulated forwarding path <b>80</b> between the on-premises network <b>70</b> (e.g., a VM located within the on-premises network <b>70</b>) to a VPC VM <b>250</b>. Here, the state machine <b>900</b> beings at state <b>910</b> with the data packet <b>24</b> originating from a private network (e.g., the on-premises network <b>70</b>). From there, the state machine <b>900</b> transitions to state <b>912</b> and applies the appropriate route. The state machine <b>900</b> next either drops the packet at state <b>914</b> due to a network configuration check fail or for missing network configuration information <b>162</b> or processed to arrive at the instance at state <b>916</b>. From there, the NAM <b>400</b> applies the ingress firewall rules at state <b>918</b> and delivers the data packet at state <b>920</b>.</p><p id="p-0064" num="0063">In some examples, the cloud reachability analyzer <b>150</b> simulates a forwarding path <b>80</b> by reverse tracking routes advertised by the VPC network <b>148</b> to the on-premises network <b>70</b>. While the cloud reachability analyzer <b>150</b> typically does not have access to the on-premises network configuration, the cloud reachability analyzer <b>150</b> does have access to configurations of static and dynamic routes through, for example, a VPN to the on-premises network <b>70</b>. Thus, the cloud reachability analyzer may simulate the VPC network <b>148</b> routes that the on-premises network <b>70</b> should have configured or received for dynamic routes. When a data packet <b>24</b> is sources from the on-premises network ranges (derived from the VPN related routes), then the cloud reachability analyzer <b>150</b> may apply the &#x201c;inferred&#x201d; routes on the packet.</p><p id="p-0065" num="0064">Referring now to <figref idref="DRAWINGS">FIGS. <b>10</b>A and <b>10</b>B</figref>, tables <b>1000</b><i>a, </i><b>1000</b><i>b </i>illustrate the potential final reachability states <b>172</b> for the data packet (i.e., dropped <b>174</b><i>a, </i>forwarded <b>174</b><i>b, </i>delivered <b>174</b><i>c, </i>or aborted <b>174</b><i>d</i>) in the NAM <b>400</b>, the previous state of the NAM <b>400</b> from the final state (<figref idref="DRAWINGS">FIGS. <b>5</b>-<b>9</b></figref>), and the associated cause for the final state. That is, tables <b>1000</b><i>a, </i><b>1000</b><i>b </i>provides exemplary causes for transitioning to final states <b>174</b><i>a</i>-<i>d </i>in the state machines <b>500</b>, <b>600</b>, <b>700</b>, <b>800</b>, <b>900</b>.</p><p id="p-0066" num="0065">Referring now to <figref idref="DRAWINGS">FIG. <b>11</b></figref>, an exemplary forwarding path <b>80</b><i>c </i>begins at an external host (e.g., the user device <b>10</b>), passes, via the Internet <b>60</b>, to a load balancer <b>1110</b> within the VPC network <b>148</b>. The load balancer <b>1110</b> forwards data packets to a front end server <b>1020</b> which distributes data packets to one or more backends or VMs <b>250</b>. The forwarding path <b>80</b><i>c </i>in this scenario is more complicated than typical network level load balancers. In this example, the cloud reachability analyzer <b>150</b> traces the data packet <b>24</b> from the external host (e.g., the user device <b>10</b>) to the load balancer <b>1110</b> (e.g., a global HTTPS load balancer). In some examples, the load balancer is a proxy load balancer and thus the TCP connection is terminated at the front end server <b>1020</b> and the front end server <b>1020</b> initiates a new TCP connection with one or more backend VMs <b>250</b>. The cloud reachability analyzer simulates this behavior using the NAM <b>400</b>. While in the actual data plane, the load balancing algorithm may choose a VM for each connection, the cloud reachability analyzer <b>150</b> may be a static configuration analysis tool that does not predict the data plane path, but instead identifies any configuration issues to provide the user with additional visibility into expected behavior. Thus, in this case, the cloud reachability analyzer <b>150</b> provides a trace for each possible path (e.g., a first trace to VM <b>250</b><i>a, </i>a second trace to VM <b>250</b><i>b, </i>and a third trace to VM <b>250</b><i>b</i>).</p><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart of an exemplary arrangement of operations for a method <b>1200</b> of performing cloud network reachability analysis. The method <b>1200</b> includes, at operation <b>1202</b>, receiving, at data processing hardware <b>144</b>, a reachability query <b>20</b> requesting a reachability status <b>172</b> of a target <b>70</b>, <b>250</b>, <b>1110</b>. The reachability query <b>20</b> includes a packet header <b>22</b> associated with a data packet <b>24</b> that includes a source IP address <b>25</b><i>a </i>associated a source of the data packet <b>24</b> and a destination IP address <b>25</b><i>b </i>associated with a destination of the data packet <b>24</b>.</p><p id="p-0068" num="0067">At operation <b>1204</b>, the method <b>1200</b> includes generating, by the data processing hardware <b>144</b>, one or more simulated forwarding paths <b>80</b> for the data packet <b>24</b> based on the packet header <b>22</b> using a data plane model <b>164</b>. Each of the simulated forwarding paths <b>80</b> include corresponding network configuration information <b>162</b>. At operation <b>1206</b>, the method <b>1200</b> includes determining, by the data processing hardware <b>144</b>, the reachability status <b>172</b> of the target <b>70</b>, <b>250</b>, <b>1110</b> based on the one or more simulated forwarding paths <b>80</b>. The method <b>1200</b>, at operation <b>1208</b>, includes providing, by the data processing hardware <b>144</b>, the determined reachability status <b>172</b> and the one or more simulated forwarding paths <b>80</b> to a user device <b>10</b> associated with the reachability query <b>20</b>. The one or more simulated forwarding paths <b>80</b>, when received by the user device <b>10</b>, cause the user device <b>10</b> to present the network configuration information <b>162</b> for each simulated forwarding path <b>80</b>.</p><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is schematic view of an example computing device <b>1300</b> that may be used to implement the systems and methods described in this document. The computing device <b>1300</b> is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.</p><p id="p-0070" num="0069">The computing device <b>1300</b> includes a processor <b>1310</b>, memory <b>1320</b>, a storage device <b>1330</b>, a high-speed interface/controller <b>1340</b> connecting to the memory <b>1320</b> and high-speed expansion ports <b>1350</b>, and a low speed interface/controller <b>1360</b> connecting to a low speed bus <b>1370</b> and a storage device <b>1330</b>. Each of the components <b>1310</b>, <b>1320</b>, <b>1330</b>, <b>1340</b>, <b>1350</b>, and <b>1360</b>, are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate. The processor <b>1310</b> can process instructions for execution within the computing device <b>1300</b>, including instructions stored in the memory <b>1320</b> or on the storage device <b>1330</b> to display graphical information for a graphical user interface (GUI) on an external input/output device, such as display <b>1380</b> coupled to high speed interface <b>1340</b>. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also, multiple computing devices <b>1300</b> may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).</p><p id="p-0071" num="0070">The memory <b>1320</b> stores information non-transitorily within the computing device <b>1300</b>. The memory <b>1320</b> may be a computer-readable medium, a volatile memory unit(s), or non-volatile memory unit(s). The non-transitory memory <b>1320</b> may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by the computing device <b>1300</b>. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs). Examples of volatile memory include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes.</p><p id="p-0072" num="0071">The storage device <b>1330</b> is capable of providing mass storage for the computing device <b>1300</b>. In some implementations, the storage device <b>1330</b> is a computer-readable medium. In various different implementations, the storage device <b>1330</b> may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. In additional implementations, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the memory <b>1320</b>, the storage device <b>1330</b>, or memory on processor <b>1310</b>.</p><p id="p-0073" num="0072">The high speed controller <b>1340</b> manages bandwidth-intensive operations for the computing device <b>1300</b>, while the low speed controller <b>1360</b> manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only. In some implementations, the high-speed controller <b>1340</b> is coupled to the memory <b>1320</b>, the display <b>1380</b> (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports <b>1350</b>, which may accept various expansion cards (not shown). In some implementations, the low-speed controller <b>1360</b> is coupled to the storage device <b>1330</b> and a low-speed expansion port <b>1390</b>. The low-speed expansion port <b>1390</b>, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.</p><p id="p-0074" num="0073">The computing device <b>1300</b> may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server <b>1300</b><i>a </i>or multiple times in a group of such servers <b>1300</b><i>a, </i>as a laptop computer <b>1300</b><i>b, </i>or as part of a rack server system <b>1300</b><i>c. </i></p><p id="p-0075" num="0074">Various implementations of the systems and techniques described herein can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.</p><p id="p-0076" num="0075">A software application (i.e., a software resource) may refer to computer software that causes a computing device to perform a task. In some examples, a software application may be referred to as an &#x201c;application,&#x201d; an &#x201c;app,&#x201d; or a &#x201c;program.&#x201d; Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.</p><p id="p-0077" num="0076">These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms &#x201c;machine-readable medium&#x201d; and &#x201c;computer-readable medium&#x201d; refer to any computer program product, non-transitory computer readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term &#x201c;machine-readable signal&#x201d; refers to any signal used to provide machine instructions and/or data to a programmable processor.</p><p id="p-0078" num="0077">The processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.</p><p id="p-0079" num="0078">To provide for interaction with a user, one or more aspects of the disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.</p><p id="p-0080" num="0079">A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method executed by data processing hardware that causes the data processing hardware to perform operations comprising:<claim-text>receiving, from a user device, a virtual private cloud (VPC) reachability request requesting a reachability status of network traffic from a source Internet Protocol (IP) address of a VPC network to a destination IP address of the VPC network, the VPC reachability request comprising a protocol type;</claim-text><claim-text>obtaining network configuration information defining a configuration of the VCP network;</claim-text><claim-text>generating, using a model and the network configuration information, a simulated forwarding path for a data packet based on the source IP address and the destination IP address, the simulated forwarding path comprising a plurality of hops;</claim-text><claim-text>determining, based on the simulated forwarding path, that the destination IP address from the source IP address is unreachable;</claim-text><claim-text>in response to determining that the destination IP address is unreachable, generating a reachability report, the reachability report comprising:<claim-text>each hop of the plurality of hops of the simulated forwarding path; and</claim-text><claim-text>a rationale that the destination IP address from the source IP address is unreachable; and</claim-text><claim-text>providing the reachability report to the user device.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the VPC reachability request further comprises a destination port.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining that the destination IP address is unreachable comprises using a network abstract state machine.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the network configuration information comprises:<claim-text>ports/interfaces for directing the data packet within the VPC network;</claim-text><claim-text>firewall rules applied to the data packet at each step along the simulated forwarding path; and</claim-text><claim-text>a network configuration associated with each hop of the plurality of hops along the simulated forwarding path.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining that the destination IP address is unreachable comprises determining:<claim-text>a dropped state indicating that the data packet will be dropped due to a configuration checkpoint failure or a missing configuration; or</claim-text><claim-text>an aborted state indicating the destination IP address is unreachable due to missing configurations.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the VPC reachability request further comprises:<claim-text>a source port associated with the data packet; and</claim-text><claim-text>a destination port associated with the data packet.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the source IP address is associated with a first virtual machine (VM); and</claim-text><claim-text>the destination IP address is associated with a second VM.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least one hop of the plurality of hops comprises a load balancer within the VPC network.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining that the destination IP address is unreachable comprises determining from the network configuration information, a path specific check based on a type of the simulated forwarding path.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the type of the simulated forwarding path is based on a source instance and a destination instance of the simulated forwarding path.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A system comprising:<claim-text>data processing hardware; and</claim-text><claim-text>memory hardware in communication with the data processing hardware, the memory hardware storing instructions that when executed on the data processing hardware cause the data processing hardware to perform operations comprising:<claim-text>receiving, from a user device, a virtual private cloud (VPC) reachability request requesting a reachability status of network traffic from a source Internet Protocol (IP) address of a VPC network to a destination IP address of the VPC network, the VPC reachability request comprising a protocol type;</claim-text><claim-text>obtaining network configuration information defining a configuration of the VCP network;</claim-text><claim-text>generating, using a model and the network configuration information, a simulated forwarding path for a data packet based on the source IP address and the destination IP address, the simulated forwarding path comprising a plurality of hops;</claim-text><claim-text>determining, based on the simulated forwarding path, that the destination IP address from the source IP address is unreachable;</claim-text><claim-text>in response to determining that the destination IP address is unreachable, generating a reachability report, the reachability report comprising:<claim-text>each hop of the plurality of hops of the simulated forwarding path; and</claim-text><claim-text>a rationale that the destination IP address from the source IP address is unreachable; and</claim-text></claim-text><claim-text>providing the reachability report to the user device.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the VPC reachability request further comprises a destination port.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein determining that the destination IP address is unreachable comprises using a network abstract state machine.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the network configuration information comprises:<claim-text>ports/interfaces for directing the data packet within the VPC network;</claim-text><claim-text>firewall rules applied to the data packet at each step along the simulated forwarding path; and</claim-text><claim-text>a network configuration associated with each hop of the plurality of hops along the simulated forwarding path.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein determining that the destination IP address is unreachable comprises determining:<claim-text>a dropped state indicating that the data packet will be dropped due to a configuration checkpoint failure or a missing configuration; or</claim-text><claim-text>an aborted state indicating the destination IP address is unreachable due to missing configurations.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the VPC reachability request further comprises:<claim-text>a source port associated with the data packet; and</claim-text><claim-text>a destination port associated with the data packet.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein:<claim-text>the source IP address is associated with a first virtual machine (VM); and</claim-text><claim-text>the destination IP address is associated with a second VM.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein at least one hop of the plurality of hops comprises a load balancer within the VPC network.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein determining that the destination IP address is unreachable comprises determining from the network configuration information, a path specific check based on a type of the simulated forwarding path.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the type of the simulated forwarding path is based on a source instance and a destination instance of the simulated forwarding path.</claim-text></claim></claims></us-patent-application>