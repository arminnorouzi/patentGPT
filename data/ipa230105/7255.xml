<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007256A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007256</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17864011</doc-number><date>20220713</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>CN</country><doc-number>PCT/CN2020/072105</doc-number><date>20200114</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>124</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>70</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>186</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>124</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>70</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>186</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">Signaling of Quantization Parameters in Video Coding</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>PCT/CN2021/071659</doc-number><date>20210114</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17864011</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>BEIJING BYTEDANCE NETWORK TECHNOLOGY CO., LTD.</orgname><address><city>Beijing</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant><us-applicant sequence="01" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Bytedance Inc.</orgname><address><city>Los Angeles</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Zhang</last-name><first-name>Li</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Zhang</last-name><first-name>Kai</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Wang</last-name><first-name>Yue</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method of video processing includes determining, for a current video block of a video coded using an adaptive color transform mode, whether a joint coding of chroma residuals (JCCR) coding tool is enabled for the current video block, and performing, based on the determining, a conversion between the video and a bitstream of the video, wherein the bitstream conforms to a rule, and wherein the rule specifies that one or more quantization parameter (QP) offsets used for coding the current video block are signaled when the JCCR coding tool is enabled.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="92.88mm" wi="125.90mm" file="US20230007256A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="210.82mm" wi="112.86mm" orientation="landscape" file="US20230007256A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="215.56mm" wi="120.65mm" orientation="landscape" file="US20230007256A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="204.05mm" wi="137.24mm" orientation="landscape" file="US20230007256A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="200.83mm" wi="135.13mm" orientation="landscape" file="US20230007256A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="203.03mm" wi="109.05mm" orientation="landscape" file="US20230007256A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="227.41mm" wi="125.73mm" orientation="landscape" file="US20230007256A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="91.86mm" wi="129.03mm" file="US20230007256A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="126.15mm" wi="125.48mm" file="US20230007256A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="191.09mm" wi="127.34mm" orientation="landscape" file="US20230007256A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="217.51mm" wi="146.64mm" orientation="landscape" file="US20230007256A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="207.18mm" wi="116.25mm" orientation="landscape" file="US20230007256A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="110.83mm" wi="127.93mm" file="US20230007256A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="99.40mm" wi="139.95mm" file="US20230007256A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="93.56mm" wi="139.87mm" file="US20230007256A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="99.23mm" wi="139.87mm" file="US20230007256A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="99.57mm" wi="139.87mm" file="US20230007256A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This application is a continuation of International Patent Application No. PCT/CN2021/071659, filed on Jan. 14, 2021 which claims the priority to and benefits of International Patent Application No. PCT/CN2020/072105 filed on Jan. 14, 2020. All the aforementioned patent applications are hereby incorporated by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">This patent document relates to image and video coding and decoding.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Digital video accounts for the largest bandwidth use on the internet and other digital communication networks. As the number of connected user devices capable of receiving and displaying video increases, it is expected that the bandwidth demand for digital video usage will continue to grow.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0005" num="0004">The present document discloses system, methods and devices for video encoding and decoding that include the signaling and overwriting of quantization parameters.</p><p id="p-0006" num="0005">In one example aspect, a method of video processing is disclosed. The method includes determining, for a current video block of a video coded using an adaptive color transform (ACT) mode, whether a joint coding of chroma residuals (JCCR) coding tool is enabled for the current video block, and performing, based on the determining, a conversion between the video and a bitstream of the video, wherein the bitstream conforms to a rule, and wherein the rule specifies that one or more quantization parameter (QP) offsets used for coding the current video block are signaled when the JCCR coding tool is enabled.</p><p id="p-0007" num="0006">In another example aspect, a method of video processing is disclosed. The method includes performing a conversion between a current video block of a video and a bitstream of the video, wherein the bitstream conforms to a format rule, and wherein the format rule specifies that a manner by which a delta quantization parameter (QP) is derived or signaled based on a coding information of the current video block.</p><p id="p-0008" num="0007">In yet another example aspect, a method of video processing is disclosed. The method includes performing a conversion between a current video block of a video and a bitstream of the video, wherein the bitstream conforms to a format rule, and wherein the format rule specifies that that one or more quantization parameter (QP) offsets used for coding the current video block are signaled in a picture parameter set (PPS) associated with the current video block independently of information signaled in a sequence parameter set (SPS) associated with the current video block.</p><p id="p-0009" num="0008">In yet another example aspect, a method of video processing is disclosed. The method includes performing a conversion between a current video block of a video and a bitstream of the video, wherein the bitstream conforms to a format rule, and wherein the format rule specifies a video level at which to signal one or more quantization parameter (QP) offsets used for coding the current video block, wherein the video level is a first level or a second level that is lower than the first level.</p><p id="p-0010" num="0009">In yet another example aspect, a method of video processing is disclosed. The method includes performing a conversion between a current video block of a video and a bitstream of the video, wherein the bitstream conforms to a format rule, and wherein the format rule specifies whether or how an overwriting mechanism is used for signaling a quantization parameter (QP) offset used for coding the current video block.</p><p id="p-0011" num="0010">In yet another example aspect, a video encoder apparatus is disclosed. The video encoder comprises a processor configured to implement the above-described methods.</p><p id="p-0012" num="0011">In yet another example aspect, a video decoder apparatus is disclosed. The video decoder comprises a processor configured to implement the above-described methods.</p><p id="p-0013" num="0012">In yet another example aspect, a non-transitory computer readable medium having code stored thereon is disclose. The code embodies one of the methods described herein in the form of processor-executable code.</p><p id="p-0014" num="0013">These, and other, features are described throughout the present document.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a screen content coding (SCC) decoder flow of in-loop adaptive color transform (ACT).</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a decoding process with the ACT.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example of a block coded in palette mode.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows an example of using of palette predictor to signal palette entries.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example of horizontal and vertical traverse scans.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows an example of coding of palette indices.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram showing an example video processing system according to various embodiments of the disclosure.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram of an example hardware platform used for video processing.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a block diagram that illustrates a video coding system according to various embodiments of the disclosure.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram that illustrates an encoder according to various embodiments of the disclosure.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a block diagram that illustrates a decoder according to various embodiments of the disclosure.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIGS. <b>12</b>-<b>16</b></figref> show flowcharts for example methods of video processing.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0027" num="0026">Section headings are used in the present document for ease of understanding and do not limit the applicability of techniques and embodiments disclosed in each section only to that section. Furthermore, H.266 terminology is used in some description only for ease of understanding and not for limiting scope of the disclosed techniques. As such, the techniques described herein are applicable to other video codec protocols and designs also.</p><heading id="h-0007" level="1">1. Initial Discussion</heading><p id="p-0028" num="0027">This patent document is related to image/video coding technologies. Specifically, it is related to adaptive color transform in image/video coding. It may be applied to the standard under development, e.g. Versatile Video Coding (VVC). It may be also applicable to future video coding standards or video codec.</p><heading id="h-0008" level="1">2. Video Coding Introduction</heading><p id="p-0029" num="0028">Video coding standards have evolved primarily through the development of the well-known International Telecommunication Union (ITU) Telecommunication Standardization Sector (ITU-T) and International Organization for Standardization (ISO)/International Electrotechnical Commission (IEC) standards. The ITU-T produced H.261 and H.263, ISO/IEC produced MPEG-1 and MPEG-4 Visual, and the two organizations jointly produced the H.262/MPEG-2 Video and H.264/MPEG-4 Advanced Video Coding (AVC) and H.265/HEVC standards. Since H.262, the video coding standards are based on the hybrid video coding structure wherein temporal prediction plus transform coding are utilized. To explore the future video coding technologies beyond HEVC, Joint Video Exploration Team (JVET) was founded by video coding experts group (VCEG) and moving pictures experts group (MPEG) jointly in 2015. Since then, many new methods have been adopted by JVET and put into the reference software named Joint Exploration Model (JEM). In April 2018, the Joint Video Expert Team (JVET) between VCEG (Q6/16) and ISO/IEC JTC1 SC29/WG11 (MPEG) was created to work on the VVC standard targeting at 50% bitrate reduction compared to HEVC.</p><p id="p-0030" num="0029">The latest version of VVC draft, i.e., Versatile Video Coding (Draft 7) could be found at: http://phenix.it-sudparis.eu/jvet/doc_end_user/documents/16_Geneva/wg11/JVET-P2001-v14.zip</p><p id="p-0031" num="0030">The latest reference software of VVC, named VVC Test Model (VTM), could be found at: https://vcgit.hhi.fraunhofer.de/jvet/VVCSoftware_VTM/tags/VTM-7.0</p><heading id="h-0009" level="1">2.1. Adaptive Colour Transform (ACT) in HEVC-SCC</heading><p id="p-0032" num="0031">The Adaptive Colour Transform (ACT) was adopted into the HEVC Screen Content Coding (SCC) test model 2 at the 18<sup>th </sup>JCT-VC meeting (June 30<sup>th </sup>to July 9<sup>th</sup>, 2014, Sapporo, Japan). ACT performs in-loop colour space conversion in the prediction residual domain using colour transform matrices based on the YCoCg and YCoCg-R colour spaces. ACT is turned on or off adaptively at the CU level using the flag cu_residual_act_flag. ACT can be combined with Cross Component Prediction (CCP), which is another inter component de-correlation method already supported in HEVC. When both are enabled, ACT is performed after CCP at the decoder, as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><heading id="h-0010" level="2">2.1.1. Color Space Conversion in ACT</heading><p id="p-0033" num="0032">The colour space conversion in ACT is based on the YCoCg-R transform. Both lossy coding and lossless coding (cu_transquant_bypass_flag=0 or 1) use the same inverse transform, but an additional 1-bit left shift is applied to the Co and Cg components in the case of lossy coding. Specifically, the following colour space transforms are used for forward and backward conversion for lossy and lossless coding:</p><p id="p-0034" num="0000">Forward transform for lossy coding (non-normative):</p><p id="p-0035" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mrow>   <mo>[</mo>   <mtable>    <mtr>     <mtd>      <mi>Y</mi>     </mtd>    </mtr>    <mtr>     <mtd>      <mi>Co</mi>     </mtd>    </mtr>    <mtr>     <mtd>      <mi>Cg</mi>     </mtd>    </mtr>   </mtable>   <mo>]</mo>  </mrow>  <mo>=</mo>  <mrow>   <mrow>    <mrow>     <mo>[</mo>     <mtable>      <mtr>       <mtd>        <mn>1</mn>       </mtd>       <mtd>        <mn>2</mn>       </mtd>       <mtd>        <mn>1</mn>       </mtd>      </mtr>      <mtr>       <mtd>        <mn>2</mn>       </mtd>       <mtd>        <mn>0</mn>       </mtd>       <mtd>        <mrow>         <mo>-</mo>         <mn>2</mn>        </mrow>       </mtd>      </mtr>      <mtr>       <mtd>        <mrow>         <mo>-</mo>         <mn>1</mn>        </mrow>       </mtd>       <mtd>        <mn>2</mn>       </mtd>       <mtd>        <mrow>         <mo>-</mo>         <mn>1</mn>        </mrow>       </mtd>      </mtr>     </mtable>     <mo>]</mo>    </mrow>    <mo>[</mo>    <mtable>     <mtr>      <mtd>       <mi>R</mi>      </mtd>     </mtr>     <mtr>      <mtd>       <mi>G</mi>      </mtd>     </mtr>     <mtr>      <mtd>       <mi>B</mi>      </mtd>     </mtr>    </mtable>    <mo>]</mo>   </mrow>   <mo>/</mo>   <mn>4</mn>  </mrow> </mrow></math></maths></p><p id="p-0036" num="0000">Forward transform for lossless coding (non-normative):</p><p id="p-0037" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>Co=R&#x2212;B </i><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0038" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>t=B</i>+(<i>Co&#x3e;&#x3e;</i>1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0039" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>Cg</i>=(<i>G&#x2212;t</i>)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0040" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>Y=t</i>+(<i>Cg&#x3e;&#x3e;</i>1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0041" num="0000">Backward transform (normative):</p><p id="p-0042" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="42pt" align="left"/><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="126pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>if(lossy){</entry></row><row><entry/><entry/><entry>&#x2003;Co = Co &#x3c;&#x3c; 1</entry></row><row><entry/><entry/><entry>&#x2003;Cg = Cg &#x3c;&#x3c; 1</entry></row><row><entry/><entry/><entry>}</entry></row><row><entry/><entry/><entry>t&#x2009;&#x2009;&#x2002;&#x2009;&#x2009;=&#x2003;Y &#x2212; (Cg &#x3e;&#x3e; 1)</entry></row><row><entry/><entry/><entry>G&#x2002;&#x2002;=&#x2003;&#x2003;Cg + t</entry></row><row><entry/><entry/><entry>B&#x2003;=&#x2003;&#x2009;&#x2009;t &#x2212; (Co &#x3e;&#x3e; 1)</entry></row><row><entry/><entry/><entry>R&#x2003;=&#x2003;&#x2003;Co + b</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0043" num="0033">The forward colour transform is not normalized, with its norm being roughly equal to &#x221a;{square root over (6)}/4 for Y and Cg and equal to &#x221a;{square root over (2)}/2 for Co. In order to compensate for the non-normalized nature of the forward transform, delta QPs of (&#x2212;5, &#x2212;3, &#x2212;5) are applied to (Y, Co, Cg), respectively. In other words, for a given &#x201c;normal&#x201d; QP for the CU, if ACT is turned on, then the quantization parameter is set equal to (QP&#x2212;5, QP&#x2212;3, QP&#x2212;5) for (Y, Co, Cg), respectively. The adjusted quantization parameter only affects the quantization and inverse quantization of the residuals in the CU. For deblocking, the &#x201c;normal&#x201d; QP value is still used. Clipping to 0 is applied to the adjusted QP values to ensure that they will not become negative. Note that this QP adjustment is only applicable to lossy coding, as quantization is not performed in lossless coding (cu_transquant_bypass_flag=1). In SCM 4, PPS/slice-level signaling of additional QP offset values is introduced. These QP offset values may be used instead of (&#x2212;5, &#x2212;3, &#x2212;5) for CUs when adaptive colour transform is applied.</p><p id="p-0044" num="0034">When the input bit-depths of the colour components are different, appropriate left shifts are applied to align the sample bit-depths to the maximal bit-depth during ACT, and appropriate right shifts are applied to restore the original sample bit-depths after ACT.</p><heading id="h-0011" level="1">2.2. ACT in VVC</heading><p id="p-0045" num="0035"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates the decoding flowchart of VVC with the ACT be applied. As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the colour space conversion is carried out in residual domain. Specifically, one additional decoding module, namely inverse ACT, is introduced after inverse transform to convert the residuals from YCgCo domain back to the original domain.</p><p id="p-0046" num="0036">In the VVC, unless the maximum transform size is smaller than the width or height of one coding unit (CU), one CU leaf node is also used as the unit of transform processing. Therefore, in the proposed implementation, the ACT flag is signaled for one CU to select the colour space for coding its residuals. Additionally, following the HEVC ACT design, for inter and IBC CUs, the ACT is only enabled when there is at least one non-zero coefficient in the CU. For intra CUs, the ACT is only enabled when chroma components select the same intra prediction mode of luma component, i.e., derived mode (DM).</p><p id="p-0047" num="0037">The core transforms used for the colour space conversions are kept the same as that used for the HEVC. Additionally, same with the ACT design in HEVC, to compensate the dynamic range change of residuals signals before and after colour transform, the QP adjustments of (&#x2212;5, &#x2212;5, &#x2212;3) are applied to the transform residuals.</p><p id="p-0048" num="0038">On the other hand, the forward and inverse colour transforms may access the residuals of all three components. Correspondingly, in the proposed implementation, the ACT may be disabled in the following two scenarios where not all residuals of three components are available.<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0039">1. Separate-tree partition: when separate-tree is applied, luma and chroma samples inside one CTU are partitioned by different structures. This results in that the CUs in the luma-tree only contains luma component and the CUs in the chroma-tree only contains two chroma components.</li>        <li id="ul0002-0002" num="0040">2. Intra sub-partition prediction (ISP): the ISP sub-partition is only applied to luma while chroma signals are coded without splitting. In the current ISP design, except the last ISP sub-partitions, the other sub-partitions only contain luma component.</li>    </ul>    </li></ul></p><p id="p-0049" num="0041">The texts of a coding unit in the VVC draft are shown as below.</p><p id="p-0050" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="259pt" align="left"/><colspec colname="2" colwidth="35pt" align="center"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Descriptor</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>coding_unit( x0, y0, cbWidth, cbHeight, cqtDepth, treeType, modeType ) {</entry><entry/></row><row><entry>&#x2003;chType = treeType = = DUAL_TREE_CHROMA ? 1 : 0</entry><entry/></row><row><entry>&#x2003;if( slice_type != | | sps_ibc_enabled_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;if( treeType != DUAL_TREE_CHROMA &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;( ( !( cbWidth = = 4 &#x26;&#x26; cbHeight == 4 ) &#x26;&#x26; modeType !=</entry><entry/></row><row><entry>MODE_TYPE_INTRA )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;| | ( sps_ibc_enabled_flag &#x26;&#x26; cbWidth &#x3c;= 64 &#x26;&#x26; cbHeight &#x3c;= 64 ) )</entry><entry/></row><row><entry>)</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;cu_skip_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;if( cu_skip_flag[ x0 ][ y0 ] == 0 &#x26;&#x26; slice_type != I</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x26;&#x26; !( cbWidth == 4 &#x26;&#x26; cbHeight == 4 ) &#x26;&#x26; modeType = =</entry><entry/></row><row><entry>MODE_TYPE_ALL )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;pred_mode_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;if( ( ( slice_type == I &#x26;&#x26; cu_skip_flag[ x0 ][ y0 ] = =0 ) | |</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;( slice_type != I &#x26;&#x26; ( CuPredMode[ chType ][ x0 ][ y0 ] !=</entry><entry/></row><row><entry>MODE_INTRA | |</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;( ( ( cbWidth = = 4 &#x26;&#x26; cbHeight = = 4 ) | | modeType = =</entry><entry/></row><row><entry>MODE_TYPE_INTRA )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x26;&#x26; cu_skip_flag[ x0 ][ y0 ] == 0 ) ) ) ) &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;cbWidth &#x3c;= 64 &#x26;&#x26; cbHeight &#x3c;= 64 &#x26;&#x26; modeType !=</entry><entry/></row><row><entry>MODE_TYPE_INTER &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;sps_ibc_enabled_flag &#x26;&#x26; treeType != DUAL_TREE_CHROMA )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;pred_mode_ibc_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;if( CuPredMode[ chType ][ x0 ][ y0 ] == MODE_INTRA &#x26;&#x26;</entry><entry/></row><row><entry>sps_palette_enabled_flag &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;cbWidth &#x3c;= 64 &#x26;&#x26; cbHeight &#x3c;= 64 &#x26;&#x26; cu_skip_flag[ x0 ][ y0 ] = = 0</entry><entry/></row><row><entry>&#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;modeType != MODE_TYPE_INTER )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;pred_mode_plt_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;if( CuPredMode[ chType ][ x0 ][ y0 ] = = MODE_INTRA &#x26;&#x26;</entry><entry/></row><row><entry>sps_act_enabled_flag &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;treeType == SINGLE_TREE )</entry><entry/></row><row><entry>&#x2003;&#x2003;cu_act_enabled_flag</entry><entry/></row><row><entry>&#x2003;if( CuPredMode[ chType ][ x0 ][ y0 ] = = MODE_INTRA | |</entry><entry/></row><row><entry>&#x2003;&#x2003;CuPredMode[ chType ][ x0 ][ y0 ] = = MODE_PLT ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;if( treeType = = SINGLE_TREE | | treeType = = DUAL_TREE_LUMA ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( pred_mode_plt_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;palette_coding( x0, y0, cbWidth, cbHeight, treeType )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;} else {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( sps_bdpcm_enabled_flag &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;cbWidth &#x3c;= MaxTsSize &#x26;&#x26; cbHeight &#x3c;= MaxTsSize )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_bdpcm_luma_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( intra_bdpcm_luma_flag )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_bdpcm_luma_dir_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;else {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( sps_mip_enabled_flag )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_mip_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( intra_mip_flag[ x0 ][ y0 ] ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_mip_transposed[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_mip_mode[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;} else {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( sps_mrl_enabled_flag &#x26;&#x26; ( ( y0 % CtbSizeY ) &#x3e; 0 ) )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_luma_ref_idx[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( sps_isp_enabled_flag &#x26;&#x26; intra_luma_ref_idx[ x0 ][ y0 ] == 0</entry><entry/></row><row><entry>&#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;(cbWidth &#x3c;= MaxTbSizeY &#x26;&#x26; cbHeight &#x3c;= MaxTbSizeY ) </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;( cbWidth * cbHeight &#x3e; MinTbSizeY * MinTbSizeY ) &#x26;&#x26;</entry><entry/></row><row><entry>!cu_act_enabled_flag )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_subpartitions_mode_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( intra_subpartitions_mode_flag[ x0 ][ y0 ] = = 1 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_subpartitions_split_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( intra_luma_ref_idx[ x0 ][ y0 ] = = 0 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_luma_mpm_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( intra_luma_mpm_flag[ x0 ][ y0 ] ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( intra_luma_ref_idx[ x0 ][ y0 ] = = 0 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_luma_not_planar_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( intra_luma_not_planar_flag[ x0 ][ y0 ] )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_luma_mpm_idx[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;} else</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_luma_mpm_remainder[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;if( ( treeType == SINGLE_TREE | | treeType == DUAL_TREE_CHROMA</entry><entry/></row><row><entry>) &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;ChromaArrayType != 0 ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( pred_mode_plt_flag &#x26;&#x26; treeType = = DUAL_TREE_CHROMA )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;palette_coding( x0, y0, cbWidth / SubWidthC, cbHeight / SubHeightC,</entry><entry/></row><row><entry>treeType )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;else {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( !cu_act_enabled_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( cbWidth &#x3c;= MaxTsSize &#x26;&#x26; cbHeight &#x3c;= MaxTsSize &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;sps_bdpcm_chroma_enabled_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_bdpcm_chroma_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( intra_bdpcm_chroma_flag )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_bdpcm_chroma_dir_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;} else {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( CclmEnabled )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;cclm_mode_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( cclm_mode_flag )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;cclm_mode_idx</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;else</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_chroma_pred_mode</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;} else if( treeType != DUAL_TREE_CHROMA ) { /* MODE_INTER or</entry><entry/></row><row><entry>MODE_IBC */</entry><entry/></row><row><entry>&#x2003;&#x2003;if( cu_skip_flag[ x0 ][ y0 ] = = 0 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;general_merge_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;if( general_merge_flag[ x0 ][ y0 ] )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;merge_data( x0, y0, cbWidth, cbHeight, chType )</entry><entry/></row><row><entry>&#x2003;&#x2003;else if( CuPredMode[ chType ][ x0 ][ y0 ] = = MODE_IBC ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;mvd_coding( x0, y0, 0, 0 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( MaxNumIbcMergeCand &#x3e; l )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;mvp_l0_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( sps_amvr_enabled_flag &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;( MvdL0[ x0 ][ y0 ][ 0 ] != 0 | | MvdL0[ x0 ][ y0 ][ 1 ] != 0 ) )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;amvr_precision_idx[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;} else {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( slice_type = = B )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;inter_pred_idc[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( sps_affine_enabled_flag &#x26;&#x26; cbWidth &#x3e;= 16 &#x26;&#x26; cbHeight &#x3e;= 16 ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;inter_affine_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( sps_affine_type_flag &#x26;&#x26; inter_affine_flag[ x0 ][ y0 ] )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;cu_affine_type_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( sps_smvd_enabled_flag &#x26;&#x26; !mvd_l1_zero_flag &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;inter_pred_idc_[ x0 ][ y0 ] = = PRED_BI &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;!inter_affine_flag[ x0 ][ y0 ] &#x26;&#x26; RefIdxSymL0 &#x3e; &#x2212;1 &#x26;&#x26;</entry><entry/></row><row><entry>RefIdxSymL1 &#x3e; &#x2212;1 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;sym_mvd_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( inter_pred_idc[ x0 ][ y0 ] != PRED_L1 ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( NumRefIdxActive[ 0 ] &#x3e; 1 &#x26;&#x26; !sym_mvd_flag[ x0 ][ y0 ] )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;ref_idx_l0[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;mvd_coding( x0, y0, 0, 0 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( MotionModelIdc[ x0 ][ y0 ] &#x3e; 0 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;mvd_coding( x0, y0, 0, 1 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if(MotionModelIdc[ x0 ][ y0 ] &#x3e; l )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;mvd_coding( x0, y0, 0, 2 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;mvp_l0_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;} else {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdL0[ x0 ][ y0 ][ 0 ] = 0</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdL0[ x0 ][ y0 ][ 1 ] = 0</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( inter_pred_idc[ x0 ][ y0 ] != PRED_L0 ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( NumRefIdxActive[ 1 ] &#x3e; 1 &#x26;&#x26; !sym_mvd_flag[ x0 ][ y0 ] )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;ref_idx_l1[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( mvd_l1_zero_flag &#x26;&#x26; inter_pred_idc[ x0 ][ y0 ] = = PRED_BI ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdL1[ x0 ][ y0 ][ 0 ] = 0</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdL1[ x0 ][ y0 ][ 1 ] = 0</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdCpL1[ x0 ][ y0 ][ 0 ][ 0 ] = 0</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdCpL1[ x0 ][ y0 ][ 0 ][ 1 ] = 0</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdCpL1[ x0 ][ y0 ][ 1 ][ 0 ] = 0</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdCpL1[ x0 ][ y0 ][ 1 ][ 1 ] = 0</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdCpL1[ x0 ][ y0 ][ 2 ][ 0 ] = 0</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdCpL1[ x0 ][ y0 ][ 2 ][ 1 ] = 0</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;} else {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( sym_mvd_flag[ x0 ][ y0 ] ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdL1[ x0 ][ y0 ][ 0 ] = &#x2212;MvdL0[ x0 ][ y0 ][ 0 ]</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdL1[ x0 ][ y0 ][ 1 ] = &#x2212;MvdL0[ x0 ][ y0 ][ 1 ]</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;} else</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;mvd_coding( x0, y0, 1, 0 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( MotionModelIdc[ x0 ][ y0 ] &#x3e; 0 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;mvd_coding( x0, y0, 1, 1 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if(MotionModelIdc[ x0 ][ y0 ] &#x3e; l )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;mvd_coding( x0, y0, 1, 2 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;mvp_l1_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;} else {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdL1[ x0 ][ y0 ][ 0 ] = 0</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdL1[ x0 ][ y0 ][ 1 ] = 0</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( ( sps_amvr_enabled_flag &#x26;&#x26; inter_affine_flag[ x0 ][ y0 ] = = 0 &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;( MvdL0[ x0 ][ y0 ][ 0 ] != 0 | | MvdL0[ x0 ][ y0 ][ 1 ] != 0 | |</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdL1[ x0 ][ y0 ][ 0 ] != 0 | | MvdL1[ x0 ][ y0 ][ 1 ] != 0 ) ) | |</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;( sps_affine_amvr_enabled_flag &#x26;&#x26; inter_affine_flag[ x0 ][ y0 ] = = 1</entry><entry/></row><row><entry>&#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;( MvdCpL0[ x0 ][ y0 ][ 0 ][ 0 ] != 0 | | MvdCpL0[ x0 ][ y0 ][ 0 ] </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;[ 1 ] ! =</entry><entry/></row><row><entry>0 | |</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdCpL1[ x0 ][ y0 ][ 0 ][ 0 ] != 0 | | MvdCpL1[ x0 ][ y0 ][ 0 ]</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;[ 1 ] ! =</entry><entry/></row><row><entry>0 | |</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdCpL0[ x0 ][ y1 ][ 1 ][ 0 ] != 0 | | MvdCpL0[ x0 ][ y0 ][ 1 ] </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;[ 1 ] ! =</entry><entry/></row><row><entry>0 | |</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdCpL1[ x0 ][ y0 ][ 1 ][ 0 ] != 0 | | MvdCpL1[ x0 ][ y0 ][ 1 ]</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;[ 1 ] ! =</entry><entry/></row><row><entry>0 | |</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdCpL0[ x0 ][ y0 ][ 2 ][ 0 ] != 0 | | MvdCpL0[ x0 ][ y0 ][ 2 ]</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;[ 1 ] ! =</entry><entry/></row><row><entry>0 | |</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;MvdCpL1[ x0 ][ y0 ][ 2 ][ 0 ] != 0 | | MvdCpL1[ x0 ][ y0 ][ 2 ]</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;[ 1 ] ! =</entry><entry/></row><row><entry>0 ) ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;amvr_flag[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( amvr_flag[ x0 ][ y0 ] )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;amvr_precision_idx[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( sps_bcw_enabled_flag &#x26;&#x26; inter_pred_idc[ x0 ][ y0 ] = = PRED_BI &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;luma_weight_l0_flag[ ref_idx_l0 [ x0 ][ y0 ] ] = = 0 &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;luma_weight_l1_flag[ ref_idx_l1 [ x0 ][ y0 ] ] == 0 &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;chroma_weight_l0_flag[ ref_idx_l0 [ x0 ][ y0 ] ] = = 0 &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;chroma_weight_l1_flag[ ref_idx_l1 [ x0 ][ y0 ] ] = = 0 &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;cbWidth * cbHeight &#x3e;= 256 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;bcw_idx[ x0 ][ y0 ]</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;if( CuPredMode[ chType ][ x0 ][ y0 ] != MODE_INTRA</entry><entry/></row><row><entry>&#x26;&#x26; !pred_mode_plt_flag &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;general_merge_flag[ x0 ][ y0 ] = = 0 )</entry><entry/></row><row><entry>&#x2003;&#x2003;cu_cbf</entry><entry>ae(v)</entry></row><row><entry>&#x2003;if( cu_cbf ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;if( CuPredMode[ chType ][ x0 ][ y0 ] == MODE_INTER &#x26;&#x26;</entry><entry/></row><row><entry>sps_sbt_enabled_flag</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x26;&#x26; !ciip_flag[ x0 ][ y0 ] &#x26;&#x26; !MergeTriangleFlag[ x0 ][ y0 ]</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x26;&#x26; cbWidth &#x3c;= MaxTbSizeY &#x26;&#x26; cbHeight &#x3c;= MaxTbSizeY ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;allowSbtVerH = cbWidth &#x3e;= 8</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;allowSbtVerQ = cbWidth &#x3e;= 16</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;allowSbtHorH = cbHeight &#x3e;= 8</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;allowSbtHorQ = cbHeight &#x3e;= 16</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( allowSbtVerH | | allowSbtHorH )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;cu_sbt_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( cu_sbt_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( ( allowSbtVer | | allowSbtHorH ) &#x26;&#x26; ( allowSbtVerQ | | </entry><entry/></row><row><entry>allowSbtHorQ ) )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;cu_sbt_quad_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( ( cu_sbt_quad_flag &#x26;&#x26; allowSbtVerQ &#x26;&#x26; allowSbtHorQ ) | | </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;( !cu_sbt_quad_flag &#x26;&#x26; allowSbtVerH &#x26;&#x26; allowSbtHorH ) )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;cu_sbt_horizontal_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;cu_sbt_pos_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;if( sps_act_enabled_flag &#x26;&#x26; CuPredMode[ chType ][ x0 ][ y0 ] !=</entry><entry/></row><row><entry>MODE_INTRA &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;treeType == SINGLE_TREE )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;cu_act_enabled_flag ae(v)</entry><entry/></row><row><entry>&#x2003;&#x2003;LfnstDcOnly = 1</entry><entry/></row><row><entry>&#x2003;&#x2003;LfnstZeroOutSigCoeffFlag = 1</entry><entry/></row><row><entry>&#x2003;&#x2003;MtsZeroOutSigCoeffFlag = 1</entry><entry/></row><row><entry>&#x2003;&#x2003;transform_tree( x0, y0, cbWidth, cbHeight, treeType, chType )</entry><entry/></row><row><entry>&#x2003;&#x2003;lfnstWidth = ( treeType = =</entry><entry/></row><row><entry>DUAL_TREE_CHROMA ) ? cbWidth / SubWidthC</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;: ( ( IntraSubPartitionsSplitType = =</entry><entry/></row><row><entry>ISP_VER_SPLIT) ? cbWidth /</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;NumIntraSubPartitions : cbWidth )</entry><entry/></row><row><entry>&#x2003;&#x2003;lfnstHeight = ( treeType = =</entry><entry/></row><row><entry>DUAL_TREE_CHROMA ) ? cbHeight / SubHeightC</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;: ( ( IntraSubPartitionsSplitType = =</entry><entry/></row><row><entry>ISP_HOR_SPLIT) ? cbHeight/</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;NumIntraSubPartitions : cbHeight )</entry><entry/></row><row><entry>&#x2003;&#x2003;if( Min( lfnstWidth, lfnstHeight) &#x3e;= 4 &#x26;&#x26; sps_lfinst_enabled_flag = = 1</entry><entry/></row><row><entry>&#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;CuPredMode[ chType ][ x0 ][ y0 ] == MODE_INTRA &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;transform_skip_flag[ x0 ][ y0 ][ 0 ] == 0 &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;(treeType != DUAL_TREE_CHROMA | | !intra_mip_flag[ x0 ][ y0 ] | |</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;Min( lfnstWidth, lfnstHeight ) &#x3e;= 16 ) &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;Max( cbWidth, cbHeight) &#x3c;= MaxTbSizeY) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( ( IntraSubPartitionsSplitType != ISP_NO_SPLIT | | LfnstDcOnly = =</entry><entry/></row><row><entry>0 ) &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;LfnstZeroOutSigCoeffFlag = = 1 )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;lfnst_idx</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;if( treeType != DUAL_TREE_CHROMA &#x26;&#x26; lfnst idx == 0 &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;transform_skip_flag[ x0 ][ y0 ][ 0 ] == 0 &#x26;&#x26; Max( cbWidth, cbHeight )</entry><entry/></row><row><entry>&#x3c;= 32 &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;IntraSubPartitionsSplit[ x0 ][ y0 ] == ISP_NO_SPLIT &#x26;&#x26; cu_sbt_flag</entry><entry/></row><row><entry>= = 0 &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;MtsZeroOutSigCoeffFlag = = 1 &#x26;&#x26; tu_cbf_luma[ x0 ][ y0 ] ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( ( ( CuPredMode[ chType ][ x0 ][ y0 ]= = MODE_INTER &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;sps_explicit_mts_inter_enabled_flag ) | |</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;( CuPredMode[ chType ][ x0 ][ y0 ] == MODE_INTRA &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;sps_explicit_mts_intra_enabled_flag ) ) )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;mts_idx</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>cu_act_enabled_flag equal to 1 specifies that the residuals of the current coding unit are coded in YC<sub>g</sub>C<sub>o </sub>colour space. cu_act_enabled_flag equal to 0 specifies that the residuals of the current coding unit are coded in original colour space. When cu_act_enabled_flag is not present, it is inferred to be equal to 0.</p><heading id="h-0012" level="1">2.3. Transform Skip Mode in VVC</heading><p id="p-0051" num="0042">As in HEVC, the residual of a block can be coded with transform skip mode which completely skip the transform process for a block. In addition, for transform skip blocks, a minimum allowed Quantization Parameter (QP) signaled in SPS is used, which is set equal to 6*(internalBitDepth&#x2212;inputBitDepth)+4 in VTM7.0.</p><heading id="h-0013" level="1">2.4. Block-Based Delta Pulse Code Modulation (BDPCM)</heading><p id="p-0052" num="0043">In JVET-M0413, a block-based Delta Pulse Code Modulation (BDPCM) is proposed to code screen contents efficiently and then adopted into VVC.</p><p id="p-0053" num="0044">The prediction directions used in BDPCM can be vertical and horizontal prediction modes. The intra prediction is done on the entire block by sample copying in prediction direction (horizontal or vertical prediction) similar to intra prediction. The residual is quantized and the delta between the quantized residual and its predictor (horizontal or vertical) quantized value is coded. This can be described by the following: For a block of size M (rows)&#xd7;N (cols), let r<sub>i,j</sub>, 0&#x2264;i&#x2264;M&#x2212;1, 0&#x2264;j&#x2264;N&#x2212;1 be the prediction residual after performing intra prediction horizontally (copying left neighbor pixel value across the predicted block line by line) or vertically (copying top neighbor line to each line in the predicted block) using unfiltered samples from above or left block boundary samples. Let Q(r<sub>i,j</sub>), 0&#x2264;i&#x2264;M&#x2212;1, 0&#x2264;j&#x2264;N&#x2212;1 denote the quantized version of the residual r<sub>i,j</sub>, where residual is difference between original block and the predicted block values. Then the block DPCM is applied to the quantized residual samples, resulting in modified M&#xd7;N array {tilde over (R)} with elements {tilde over (r)}<sub>i,j</sub>. When vertical BDPCM is signaled:</p><p id="p-0054" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mrow>  <msub>   <mover>    <mi>r</mi>    <mo>~</mo>   </mover>   <mrow>    <mi>i</mi>    <mo>,</mo>    <mi>j</mi>   </mrow>  </msub>  <mo>=</mo>  <mrow>   <mo>{</mo>   <mrow>    <mtable>     <mtr>      <mtd>       <mrow>        <mrow>         <mi>Q</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <msub>          <mi>r</mi>          <mrow>           <mi>i</mi>           <mo>,</mo>           <mi>j</mi>          </mrow>         </msub>         <mo>)</mo>        </mrow>        <mo>,</mo>       </mrow>      </mtd>      <mtd>       <mrow>        <mrow>         <mi>i</mi>         <mo>=</mo>         <mn>0</mn>        </mrow>        <mo>,</mo>        <mrow>         <mn>0</mn>         <mo>&#x2264;</mo>         <mi>j</mi>         <mo>&#x2264;</mo>         <mrow>          <mo>(</mo>          <mrow>           <mi>N</mi>           <mo>-</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </mrow>       </mrow>      </mtd>     </mtr>     <mtr>      <mtd>       <mrow>        <mrow>         <mrow>          <mi>Q</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <msub>           <mi>r</mi>           <mrow>            <mi>i</mi>            <mo>,</mo>            <mi>j</mi>           </mrow>          </msub>          <mo>)</mo>         </mrow>         <mo>-</mo>         <mrow>          <mi>Q</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <msub>           <mi>r</mi>           <mrow>            <mrow>             <mo>(</mo>             <mrow>              <mi>i</mi>              <mo>-</mo>              <mn>1</mn>             </mrow>             <mo>)</mo>            </mrow>            <mo>,</mo>            <mi>j</mi>           </mrow>          </msub>          <mo>)</mo>         </mrow>        </mrow>        <mo>,</mo>       </mrow>      </mtd>      <mtd>       <mrow>        <mrow>         <mn>1</mn>         <mo>&#x2264;</mo>         <mi>i</mi>         <mo>&#x2264;</mo>         <mrow>          <mo>(</mo>          <mrow>           <mi>M</mi>           <mo>-</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </mrow>        <mo>,</mo>        <mrow>         <mn>0</mn>         <mo>&#x2264;</mo>         <mi>j</mi>         <mo>&#x2264;</mo>         <mrow>          <mo>(</mo>          <mrow>           <mi>N</mi>           <mo>-</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </mrow>       </mrow>      </mtd>     </mtr>    </mtable>    <mo>.</mo>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0055" num="0045">For horizontal prediction, similar rules apply, and the residual quantized samples are obtained by</p><p id="p-0056" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mrow>  <msub>   <mover>    <mi>r</mi>    <mo>~</mo>   </mover>   <mrow>    <mi>i</mi>    <mo>,</mo>    <mi>j</mi>   </mrow>  </msub>  <mo>=</mo>  <mrow>   <mo>{</mo>   <mrow>    <mtable>     <mtr>      <mtd>       <mrow>        <mrow>         <mi>Q</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <msub>          <mi>r</mi>          <mrow>           <mi>i</mi>           <mo>,</mo>           <mi>j</mi>          </mrow>         </msub>         <mo>)</mo>        </mrow>        <mo>,</mo>       </mrow>      </mtd>      <mtd>       <mrow>        <mrow>         <mn>0</mn>         <mo>&#x2264;</mo>         <mi>i</mi>         <mo>&#x2264;</mo>         <mrow>          <mo>(</mo>          <mrow>           <mi>M</mi>           <mo>-</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </mrow>        <mo>,</mo>        <mrow>         <mi>j</mi>         <mo>=</mo>         <mn>0</mn>        </mrow>       </mrow>      </mtd>     </mtr>     <mtr>      <mtd>       <mrow>        <mrow>         <mrow>          <mi>Q</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <msub>           <mi>r</mi>           <mrow>            <mi>i</mi>            <mo>,</mo>            <mi>j</mi>           </mrow>          </msub>          <mo>)</mo>         </mrow>         <mo>-</mo>         <mrow>          <mi>Q</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <msub>           <mi>r</mi>           <mrow>            <mi>i</mi>            <mo>,</mo>            <mrow>             <mo>(</mo>             <mrow>              <mi>j</mi>              <mo>-</mo>              <mn>1</mn>             </mrow>             <mo>)</mo>            </mrow>           </mrow>          </msub>          <mo>)</mo>         </mrow>        </mrow>        <mo>,</mo>       </mrow>      </mtd>      <mtd>       <mrow>        <mrow>         <mn>0</mn>         <mo>&#x2264;</mo>         <mi>i</mi>         <mo>&#x2264;</mo>         <mrow>          <mo>(</mo>          <mrow>           <mi>M</mi>           <mo>-</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </mrow>        <mo>,</mo>        <mrow>         <mn>1</mn>         <mo>&#x2264;</mo>         <mi>j</mi>         <mo>&#x2264;</mo>         <mrow>          <mo>(</mo>          <mrow>           <mi>N</mi>           <mo>-</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </mrow>       </mrow>      </mtd>     </mtr>    </mtable>    <mo>.</mo>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0057" num="0046">The residual quantized samples {tilde over (r)}<sub>i,j </sub>are sent to the decoder.</p><p id="p-0058" num="0047">On the decoder side, the above calculations are reversed to produce Q(r<sub>i,j</sub>), 0&#x2264;i&#x2264;M&#x2212;1, 0&#x2264;j&#x2264;N&#x2212;1.</p><p id="p-0059" num="0048">For vertical prediction case,</p><p id="p-0060" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>Q</i>(<i>r</i><sub>i,j</sub>)=&#x3a3;<sub>k=0</sub><sup>i</sup><i>{tilde over (r)}</i><sub>k,j</sub>, 0&#x2264;<i>i</i>&#x2264;(<i>M&#x2212;</i>1), 0&#x2264;<i>j</i>&#x2264;(<i>N&#x2212;</i>1).<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0061" num="0049">For horizontal case,</p><p id="p-0062" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>Q</i>(<i>r</i><sub>i,j</sub>)=&#x3a3;<sub>k=0</sub><sup>j</sup><i>{tilde over (r)}</i><sub>i,k</sub>, 0&#x2264;<i>i</i>&#x2264;(<i>M&#x2212;</i>1), 0&#x2264;<i>j</i>&#x2264;(<i>N&#x2212;</i>1).<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0063" num="0050">The inverse quantized residuals, Q<sup>&#x2212;1</sup>(Q(r<sub>i,j</sub>)), are added to the intra block prediction values to produce the reconstructed sample values.</p><p id="p-0064" num="0051">The main benefit of this scheme is that the inverse BDPCM can be done on the fly during coefficient parsing simply adding the predictor as the coefficients are parsed or it can be performed after parsing.</p><p id="p-0065" num="0052">In VTM7.0, the BDPCM also can be applied on chroma blocks and the chroma BDPCM has a separate flag and BDPCM direction from the luma BDPCM mode.</p><heading id="h-0014" level="1">2.5. Scaling Process for Transform Coefficients</heading><p id="p-0066" num="0053">The texts related to scaling process for transform coefficients in JVET-P2001-vE is given as follows.</p><p id="p-0067" num="0054">Inputs to this process are:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0055">a luma location (xTbY, yTbY) specifying the top-left sample of the current luma transform block relative to the top-left luma sample of the current picture,</li>        <li id="ul0004-0002" num="0056">a variable nTbW specifying the transform block width,</li>        <li id="ul0004-0003" num="0057">a variable nTbH specifying the transform block height,</li>        <li id="ul0004-0004" num="0058">a variable predMode specifying the prediction mode of the coding unit,</li>        <li id="ul0004-0005" num="0059">a variable cIdx specifying the colour component of the current block.</li>    </ul>    </li></ul></p><p id="p-0068" num="0060">Output of this process is the (nTbW)&#xd7;(nTbH) array d of scaled transform coefficients with elements d[x][y].</p><p id="p-0069" num="0061">The quantization parameter qP is derived as follows:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0062">If cIdx is equal to 0, the following applies:</li>    </ul>    </li></ul></p><p id="p-0070" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Y</sub>&#x2003;&#x2003;(1129)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0063">Otherwise, if TuCResMode[xTbY][yTbY] is equal to 2, the following applies:</li>    </ul>    </li></ul></p><p id="p-0071" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>CbCr</sub>&#x2003;&#x2003;(1130)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0000">    <ul id="ul0010" list-style="none">        <li id="ul0010-0001" num="0064">Otherwise, if cIdx is equal to 1, the following applies:</li>    </ul>    </li></ul></p><p id="p-0072" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Cb</sub>&#x2003;&#x2003;(1131)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0000">    <ul id="ul0012" list-style="none">        <li id="ul0012-0001" num="0065">Otherwise (cIdx is equal to 2), the following applies:</li>    </ul>    </li></ul></p><p id="p-0073" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Cr</sub>&#x2003;&#x2003;(1132)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0074" num="0066">The quantization parameter qP is modified and the variables rectNonTsFlag and bdShift are derived as follows:<ul id="ul0013" list-style="none">    <li id="ul0013-0001" num="0000">    <ul id="ul0014" list-style="none">        <li id="ul0014-0001" num="0067">If transform_skip_flag[xTbY][yTbY][cIdx] is equal to 0, the following applies:</li>    </ul>    </li></ul></p><p id="p-0075" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=qP&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?5:0)&#x2003;&#x2003;(1133)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0076" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>rectNon<i>Ts</i>Flag=(((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))&#x26;1)==1)?1:0&#x2003;&#x2003;(1134)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0077" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Shift=BitDepth+rectNon<i>Ts</i>Flag+((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))/2)&#x2212;5+pic_dep_quant_enabled_flag&#x2003;&#x2003;(1135)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0015" list-style="none">    <li id="ul0015-0001" num="0000">    <ul id="ul0016" list-style="none">        <li id="ul0016-0001" num="0068">Otherwise (transform_skip_flag[xTbY][yTbY][cIdx] is equal to 1), the following applies:</li>    </ul>    </li></ul></p><p id="p-0078" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Max(QpPrime<i>Ts </i>Min,qP)&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?5:0)&#x2003;&#x2003; (1136)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0079" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>rectNon<i>Ts</i>Flag=0&#x2003;&#x2003;(1137)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0080" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Shift=10&#x2003;&#x2003;(1138)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0081" num="0069">The variable bdOffset is derived as follows:</p><p id="p-0082" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Offset=(1<i>&#x3c;&#x3c;bd</i>Shift)&#x3e;&#x3e;1&#x2003;&#x2003;(1139)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0083" num="0070">The list levelScale[ ][ ] is specified as levelScale[j][k]={{40, 45, 51, 57, 64, 72}, {57, 64, 72, 80, 90, 102}} with j=0 . . . 1, k=0 . . . 5.</p><p id="p-0084" num="0071">The (nTbW)&#xd7;(nTbH) array dz is set equal to the (nTbW)&#xd7;(nTbH) array TransCoeffLevel[xTbY][yTbY][cIdx].</p><p id="p-0085" num="0072">For the derivation of the scaled transform coefficients d[x][y] with x=0 . . . nTbW&#x2212;1, y=0 . . . nTbH&#x2212;1, the following applies:<ul id="ul0017" list-style="none">    <li id="ul0017-0001" num="0000">    <ul id="ul0018" list-style="none">        <li id="ul0018-0001" num="0073">The intermediate scaling factor m[x][y] is derived as follows:        <ul id="ul0019" list-style="none">            <li id="ul0019-0001" num="0074">If one or more of the following conditions are true, m[x][y] is set equal to 16:            <ul id="ul0020" list-style="none">                <li id="ul0020-0001" num="0075">sps_scaling_list_enabled_flag is equal to 0.</li>                <li id="ul0020-0002" num="0076">pic_scaling_list_present_flag is equal to 0.</li>                <li id="ul0020-0003" num="0077">transform_skip_flag[xTbY][yTbY][cIdx] is equal to 1.</li>                <li id="ul0020-0004" num="0078">scaling_matrix_for_lfnst_disabled_flag is equal to 1 and lfnst_idx[xTbY][yTbY] is not equal to 0.</li>            </ul>            </li>            <li id="ul0019-0002" num="0079">Otherwise, the following applies:            <ul id="ul0021" list-style="none">                <li id="ul0021-0001" num="0080">The variable id is derived based on predMode, cIdx, nTbW, and nTbH as specified in Table 36 and the variable log 2MatrixSize is derived as follows:</li>            </ul>            </li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0086" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>log 2MatrixSize=(<i>id&#x3c;</i>2)?1:(<i>id&#x3c;</i>8)?2:3&#x2003;&#x2003;(1140)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0022" list-style="none">    <li id="ul0022-0001" num="0000">    <ul id="ul0023" list-style="none">        <li id="ul0023-0001" num="0000">        <ul id="ul0024" list-style="none">            <li id="ul0024-0001" num="0000">            <ul id="ul0025" list-style="none">                <li id="ul0025-0001" num="0081">The scaling factor m[x][y] is derived as follows:</li>            </ul>            </li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0087" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>m</i>[<i>x</i>][<i>y</i>]=ScalingMatrixRec[<i>id</i>][<i>i</i>][<i>j</i>] with <i>i</i>=(<i>x</i>&#x3c;&#x3c;log 2MatrixSize)&#x3e;&#x3e;Log 2(<i>nTbW</i>), <i>j</i>=(<i>y</i>&#x3c;&#x3c;log 2MatrixSize)&#x3e;&#x3e;Log 2(<i>nTbH</i>)&#x2003;&#x2003;(1141)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0026" list-style="none">    <li id="ul0026-0001" num="0000">    <ul id="ul0027" list-style="none">        <li id="ul0027-0001" num="0000">        <ul id="ul0028" list-style="none">            <li id="ul0028-0001" num="0000">            <ul id="ul0029" list-style="none">                <li id="ul0029-0001" num="0082">If id is greater than 13 and both x and y are equal to 0, m[0][0] is further modified as follows:</li>            </ul>            </li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0088" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>m</i>[0][0]=ScalingMatrixDCRec[<i>id&#x2212;</i>14]&#x2003;&#x2003;(1142)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0030" list-style="none">    <li id="ul0030-0001" num="0000">    <ul id="ul0031" list-style="none">        <li id="ul0031-0001" num="0083">NOTE&#x2014;A quantization matrix element m[x][y] can be zeroed out when any of the following conditions is true        <ul id="ul0032" list-style="none">            <li id="ul0032-0001" num="0084">x is greater than 32</li>            <li id="ul0032-0002" num="0085">y is greater than 32</li>            <li id="ul0032-0003" num="0086">The decoded tu is not coded by default transform mode (i.e. transform type is not equal to 0) and x is greater than 16</li>            <li id="ul0032-0004" num="0087">The decoded tu is not coded by default transform mode (i.e. transform type is not equal to 0) and y is greater than 16</li>        </ul>        </li>        <li id="ul0031-0002" num="0088">The scaling factor ls[x][y] is derived as follows:        <ul id="ul0033" list-style="none">            <li id="ul0033-0001" num="0089">If pic_dep_quant_enabled_flag is equal to &#x2212;1 and transform_skip_flag[xTbY][yTbY][cIdx] is equal to 0, the following applies:</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0089" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>ls</i>[<i>x</i>][<i>y</i>]=(<i>m</i>[<i>x</i>][<i>y</i>]*levelScale[rectNon<i>Ts</i>Flag][(qP+1)%6])&#x3c;&#x3c;((qP+1)/6)&#x2003;&#x2003;(1143)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0034" list-style="none">    <li id="ul0034-0001" num="0000">    <ul id="ul0035" list-style="none">        <li id="ul0035-0001" num="0000">        <ul id="ul0036" list-style="none">            <li id="ul0036-0001" num="0090">Otherwise (pic_dep_quant_enabled_flag is equal to 0 or transform_skip_flag[xTbY][yTbY][cIdx] is equal to 1), the following applies:</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0090" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>ls</i>[<i>x</i>][<i>y</i>]=(<i>m</i>[<i>x</i>][<i>y</i>]*levelScale[rectNon<i>Ts</i>Flag][qP %6])&#x3c;&#x3c;(qP/6)&#x2003;&#x2003;(1144)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0037" list-style="none">    <li id="ul0037-0001" num="0000">    <ul id="ul0038" list-style="none">        <li id="ul0038-0001" num="0091">When BdpcmFlag[xTbY][yYbY][cIdx] is equal to 1, dz[x][y] is modified as follows:        <ul id="ul0039" list-style="none">            <li id="ul0039-0001" num="0092">If BdpcmDir[xTbY][yYbY][cIdx] is equal to 0 and x is greater than 0, the following applies:</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0091" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>dz</i>[<i>x</i>][<i>y</i>]=Clip3(CoeffMin,CoeffMax,<i>dz</i>[<i>x&#x2212;</i>1][<i>y</i>]+<i>dz</i>[<i>x</i>][<i>y</i>])&#x2003;&#x2003;(1145)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0040" list-style="none">    <li id="ul0040-0001" num="0000">    <ul id="ul0041" list-style="none">        <li id="ul0041-0001" num="0000">        <ul id="ul0042" list-style="none">            <li id="ul0042-0001" num="0093">Otherwise, if BdpcmDir[xTbY][yTbY][cIdx] is equal to 1 and y is greater than 0, the following applies:</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0092" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>dz</i>[<i>x</i>][<i>y</i>]=Clip3(CoeffMin,CoeffMax,<i>dz</i>[<i>x</i>][<i>y&#x2212;</i>1]+<i>dz</i>[<i>x</i>][<i>y</i>])&#x2003;&#x2003;(1146)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0043" list-style="none">    <li id="ul0043-0001" num="0000">    <ul id="ul0044" list-style="none">        <li id="ul0044-0001" num="0094">The value dnc[x][y] is derived as follows:</li>    </ul>    </li></ul></p><p id="p-0093" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>dnc</i>[<i>x</i>][<i>y</i>]=(<i>dz</i>[<i>x</i>][<i>y</i>]*<i>ls</i>[<i>x</i>][<i>y</i>]+<i>bd</i>Offset)&#x3e;&#x3e;<i>bd</i>Shift&#x2003;&#x2003;(1147)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0045" list-style="none">    <li id="ul0045-0001" num="0000">    <ul id="ul0046" list-style="none">        <li id="ul0046-0001" num="0095">The scaled transform coefficient d[x][y] is derived as follows:</li>    </ul>    </li></ul></p><p id="p-0094" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>d</i>[<i>x</i>][<i>y</i>]=Clip3(CoeffMin,CoeffMax,<i>dnc</i>[<i>x</i>][<i>y</i>])&#x2003;&#x2003;(1148)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0095" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 36</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Specification of the scaling matrix identifier variable id </entry></row><row><entry>according to predMode, cIdx, nTbW, and nTbH</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="7"><colspec colname="1" colwidth="119pt" align="center"/><colspec colname="2" colwidth="14pt" align="center"/><colspec colname="3" colwidth="21pt" align="center"/><colspec colname="4" colwidth="14pt" align="center"/><colspec colname="5" colwidth="21pt" align="center"/><colspec colname="6" colwidth="14pt" align="center"/><colspec colname="7" colwidth="14pt" align="center"/><tbody valign="top"><row><entry>max( nTbW, nTbH )</entry><entry>2</entry><entry>4</entry><entry>8</entry><entry>16</entry><entry>32</entry><entry>64</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="9"><colspec colname="1" colwidth="56pt" align="center"/><colspec colname="2" colwidth="35pt" align="right"/><colspec colname="3" colwidth="28pt" align="left"/><colspec colname="4" colwidth="14pt" align="center"/><colspec colname="5" colwidth="21pt" align="center"/><colspec colname="6" colwidth="14pt" align="center"/><colspec colname="7" colwidth="21pt" align="center"/><colspec colname="8" colwidth="14pt" align="center"/><colspec colname="9" colwidth="14pt" align="center"/><tbody valign="top"><row><entry>predMode =</entry><entry>cIdx = 0 </entry><entry>(Y)</entry><entry/><entry>2</entry><entry>&#x2002;8</entry><entry>14</entry><entry>20</entry><entry>26</entry></row><row><entry>MODE_INTRA</entry><entry>cIdx = 1 </entry><entry>(Cb)</entry><entry/><entry>3</entry><entry>&#x2002;9</entry><entry>15</entry><entry>21</entry><entry>21</entry></row><row><entry/><entry>cIdx = 2 </entry><entry>(Cr)</entry><entry/><entry>4</entry><entry>10</entry><entry>16</entry><entry>22</entry><entry>22</entry></row><row><entry>predMode =</entry><entry>cIdx = 0 </entry><entry>(Y)</entry><entry/><entry>5</entry><entry>11</entry><entry>17</entry><entry>23</entry><entry>27</entry></row><row><entry>MODE_INTER</entry><entry>cIdx = 1 </entry><entry>(Cb)</entry><entry>0</entry><entry>6</entry><entry>12</entry><entry>18</entry><entry>24</entry><entry>24</entry></row><row><entry>(INTER, IBC)</entry><entry>cIdx = 2 </entry><entry>(Cr)</entry><entry>1</entry><entry>7</entry><entry>13</entry><entry>19</entry><entry>25</entry><entry>25</entry></row><row><entry namest="1" nameend="9" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><heading id="h-0015" level="1">2.6. Palette Mode</heading><heading id="h-0016" level="2">2.6.1. Concept of Palette Mode</heading><p id="p-0096" num="0096">The basic idea behind a palette mode is that the pixels in the CU are represented by a small set of representative colour values. This set is referred to as the palette. And it is also possible to indicate a sample that is outside the palette by signaling an escape symbol followed by (possibly quantized) component values. This kind of pixel is called escape pixel. The palette mode is illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. As depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, for each pixel with three color components (luma, and two chroma components), an index to the palette is founded, and the block could be reconstructed based on the founded values in the palette.</p><heading id="h-0017" level="2">2.6.2. Coding of the Palette Entries</heading><p id="p-0097" num="0097">For coding of the palette entries, a palette predictor is maintained. The maximum size of the palette as well as the palette predictor is signaled in the SPS. In HEVC-SCC, a palette_predictor_initializer_present_flag is introduced in the PPS. When this flag is 1, entries for initializing the palette predictor are signaled in the bitstream. The palette predictor is initialized at the beginning of each CTU row, each slice and each tile. Depending on the value of the palette_predictor_initializer_present_flag, the palette predictor is reset to 0 or initialized using the palette predictor intializer entries signaled in the PPS. In HEVC-SCC, a palette predictor initializer of size 0 was enabled to allow explicit disabling of the palette predictor initialization at the PPS level.</p><p id="p-0098" num="0098">For each entry in the palette predictor, a reuse flag is signaled to indicate whether it is part of the current palette. This is illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The reuse flags are sent using run-length coding of zeros. After this, the number of new palette entries are signaled using Exponential Golomb (EG) code of order 0, i.e., EG-0. Finally, the component values for the new palette entries are signaled.</p><heading id="h-0018" level="2">2.6.3. Coding of Palette Indices</heading><p id="p-0099" num="0099">The palette indices are coded using horizontal and vertical traverse scans as shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The scan order is explicitly signaled in the bitstream using the palette_transpose_flag. For the rest of the subsection it is assumed that the scan is horizontal.</p><p id="p-0100" num="0100">The palette indices are coded using two palette sample modes: &#x2018;COPY_LEFT&#x2019; and &#x2018;COPY_ABOVE&#x2019;. In the &#x2018;COPY_LEFT&#x2019; mode, the palette index is assigned to a decoded index. In the &#x2018;COPY_ABOVE&#x2019; mode, the palette index of the sample in the row above is copied. For both &#x201c;COPY_LEFT&#x2019; and &#x2018;COPY_ABOVE&#x2019; modes, a run value is signaled which specifies the number of subsequent samples that are also coded using the same mode.</p><p id="p-0101" num="0101">In the palette mode, the value of an index for the escape symbol is the number of palette entries. And, when escape symbol is part of the run in &#x2018;COPY_LEFT&#x2019; or &#x2018;COPY_ABOVE&#x2019; mode, the escape component values are signaled for each escape symbol. The coding of palette indices is illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0102" num="0102">This syntax order is accomplished as follows. First the number of index values for the CU is signaled. This is followed by signaling of the actual index values for the entire CU using truncated binary coding. Both the number of indices as well as the index values are coded in bypass mode. This groups the index-related bypass bins together. Then the palette sample mode (if necessary) and run are signaled in an interleaved manner. Finally, the component escape values corresponding to the escape symbols for the entire CU are grouped together and coded in bypass mode. The binarization of escape symbols is EG coding with 3rd order, i.e., EG-3.</p><p id="p-0103" num="0103">An additional syntax element, last_run_type_flag, is signaled after signaling the index values. This syntax element, in conjunction with the number of indices, eliminates the need to signal the run value corresponding to the last run in the block.</p><p id="p-0104" num="0104">In HEVC-SCC, the palette mode is also enabled for 4:2:2, 4:2:0, and monochrome chroma formats. The signaling of the palette entries and palette indices is almost identical for all the chroma formats. In case of non-monochrome formats, each palette entry consists of 3 components. For the monochrome format, each palette entry consists of a single component. For subsampled chroma directions, the chroma samples are associated with luma sample indices that are divisible by 2. After reconstructing the palette indices for the CU, if a sample has only a single component associated with it, only the first component of the palette entry is used. The only difference in signaling is for the escape component values. For each escape symbol, the number of escape component values signaled may be different depending on the number of components associated with that symbol.</p><heading id="h-0019" level="2">2.6.4. Palette in Dual Tree</heading><p id="p-0105" num="0105">In VVC, the dual tree coding structure is used on coding the intra slices, so the luma component and two chroma components may have different palette and palette indices. In addition, the two chroma component shares same palette and palette indices.</p><heading id="h-0020" level="2">2.6.5. Line Based CG Palette Mode</heading><p id="p-0106" num="0106">Line based CG palette mode was adopted to VVC. In this method, each CU of palette mode is divided into multiple segments of m samples (m=16 in this test) based on the traverse scan mode. The encoding order for palette run coding in each segment is as follows: For each pixel, 1 context coded bin <img id="CUSTOM-CHARACTER-00001" he="3.56mm" wi="19.39mm" file="US20230007256A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>=0 is signaled indicating if the pixel is of the same mode as the previous pixel, i.e., if the previous scanned pixel and the current pixel are both of run type COPY_ABOVE or if the previous scanned pixel and the current pixel are both of run type INDEX and the same index value. Otherwise, <img id="CUSTOM-CHARACTER-00002" he="3.56mm" wi="19.39mm" file="US20230007256A1-20230105-P00002.TIF" alt="custom-character" img-content="character" img-format="tif"/>=1 is signaled. If the pixel and the previous pixel are of different mode, one context coded bin <img id="CUSTOM-CHARACTER-00003" he="3.56mm" wi="43.43mm" file="US20230007256A1-20230105-P00003.TIF" alt="custom-character" img-content="character" img-format="tif"/> is signaled indicating the run type, i.e., INDEX or COPY_ABOVE, of the pixel. Same as the palette mode in VTM6.0, decoder doesn't have to parse run type if the sample is in the first row (horizontal traverse scan) or in the first column (vertical traverse scan) since the INDEX mode is used by default. Also, the decoder does not have to parse run type if the previously parsed run type is COPY_ABOVE. After palette run coding of pixels in one segment, the index values (for INDEX mode) and quantized escape colors are bypass coded and grouped apart from encoding/parsing of context coded bins to improve throughput within each line CG. Since the index value is now coded/parsed after run coding, instead of processed before palette run coding as in VTM, encoder doesn't have to signal the number of index values <img id="CUSTOM-CHARACTER-00004" he="3.22mm" wi="38.44mm" file="US20230007256A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/> and the last run type <img id="CUSTOM-CHARACTER-00005" he="3.56mm" wi="52.92mm" file="US20230007256A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/>.</p><heading id="h-0021" level="1">3. Technical Problems Solved by Embodiments and Solutions Described Herein</heading><p id="p-0107" num="0107">In some cases, the ACT and luma BDPCM modes can be enabled for one block. However, the chroma BDPCM mode may always be disabled on blocks coded with ACT mode. Therefore, the prediction signal may be derived differently for luma and chroma blocks in the same coding unit, which may be less efficient.</p><p id="p-0108" num="0108">The quantization parameter (QP) of a block may become a minus number when ACT is enabled.</p><p id="p-0109" num="0109">Some designs of ACT may not support lossless coding.</p><p id="p-0110" num="0110">The signaling of usage of ACT may not be block size dependent.</p><p id="p-0111" num="0111">The maximal palette size and the maximal predictor size are fixed numbers, which may limit the flexibility of palette mode.</p><p id="p-0112" num="0112">Escape samples employs Exponential-Golomb (EG) with 3th order as the binarization method, but the binarization for escape samples is not dependent on Quantization Parameter (QP).</p><heading id="h-0022" level="1">4. Technical Solutions</heading><p id="p-0113" num="0113">The technical solutions described below should be considered as examples to explain general concepts. These technical solutions should not be interpreted in a narrow way. Furthermore, these technical solutions can be combined in any manner.</p><p id="p-0114" num="0114">In the following description, the term &#x2018;block&#x2019; may represent a video region, such as a coding unit (CU), a prediction unit (PU), and/or a transform unit (TU), which may contain samples in three color components. The term &#x2018;BDPCM&#x2019; is not limited to the design in VVC, but it may present the technologies that coding residuals using different prediction signal generation methods.</p><p id="p-0115" num="0115">In the following description, a video block coded using a joint coding of chroma residuals (JCCR) mode includes signaling only one chroma residual block (e.g., the Cb residual block), and the other chroma residual block (e.g., the Cr residual block) is derived based on the signaled chroma residual block and one or more flags (e.g., at the transform unit level) indicating a specific JCCR mode. As described, the JCCR mode leverages the correlation between the Cb residual and the Cr residual to improve coding efficiency.</p><heading id="h-0023" level="2">Interaction Between ACT and BDPCM (Items 1-4)</heading><p id="p-0116" num="0000"><ul id="ul0047" list-style="none">    <li id="ul0047-0001" num="0000">    <ul id="ul0048" list-style="none">        <li id="ul0048-0001" num="0116">1. Whether to enable chroma BDPCM mode may depend on the usage of ACT and/or luma BDPCM mode.        <ul id="ul0049" list-style="none">            <li id="ul0049-0001" num="0117">a. In one example, when ACT is enabled on a block, the indication of the usage of chroma BDPCM mode (e.g. intra_bdpcm_chroma_flag) may be inferred to be the indication of the usage of the luma BDPCM mode (e.g. intra_bdpcm_luma_flag).            <ul id="ul0050" list-style="none">                <li id="ul0050-0001" num="0118">i. In one example, the inferred value of chroma BDPCM mode is defined as (ACT and luma BDPCM modes are enabled? true: false).                <ul id="ul0051" list-style="none">                    <li id="ul0051-0001" num="0119">1. In one example, the intra_bdpcm_chroma_flag may be set equal to false when intra_bdpcm_luma_flag is false.</li>                    <li id="ul0051-0002" num="0000">&#x2003;a. Alternatively, the intra_bdpcm_chroma_flag may be set equal to true when intra_bdpcm_luma_flag is true.</li>                </ul>                </li>                <li id="ul0050-0002" num="0120">ii. Alternatively, in one example, the indication of the usage of chroma BDPCM mode may be inferred to be true if the indication of the usage of the luma BDPCM mode and ACT for the block are true.</li>            </ul>            </li>            <li id="ul0049-0002" num="0121">b. Alternatively, whether to signal the usage of ACT for a block may be conditionally checked, such as the same BDPCM prediction direction is used for both luma and chroma samples in the block.            <ul id="ul0052" list-style="none">                <li id="ul0052-0001" num="0122">i. Alternatively, furthermore, indication of usage of ACT is signaled after usage of BDPCM modes.</li>            </ul>            </li>        </ul>        </li>        <li id="ul0048-0002" num="0123">2. When ACT is enabled on a block, the indication of the prediction direction of chroma BDPCM mode (e.g. intra_bdpcm_chroma_dir_flag) may be inferred to be the indication of the prediction direction of the usage of the luma BDPCM mode (e.g. intra_bdpcm_luma_dir_flag).        <ul id="ul0053" list-style="none">            <li id="ul0053-0001" num="0124">a. In one example, the inferred value of intra_bdpcm_chroma_dir_flag is defined as (ACT is enabled? intra_bdpcm_luma_dir_flag: 0).            <ul id="ul0054" list-style="none">                <li id="ul0054-0001" num="0125">i. In one example, the indication of the prediction direction of chroma BDPCM mode may be inferred to horizontal if the indication of the prediction direction of the luma BDPCM mode is horizontal.</li>                <li id="ul0054-0002" num="0126">ii. Alternatively, in one example, the indication of the prediction direction of chroma BDPCM mode may be inferred to vertical if the indication of the prediction direction of the luma BDPCM mode is vertical.</li>            </ul>            </li>        </ul>        </li>        <li id="ul0048-0003" num="0127">3. The ACT and BDPCM modes may be exclusively applied.        <ul id="ul0055" list-style="none">            <li id="ul0055-0001" num="0128">a. In one example, when ACT mode is enabled on a block, the BDPCM mode may be disabled on the block.            <ul id="ul0056" list-style="none">                <li id="ul0056-0001" num="0129">i. Alternatively, furthermore, the indication of usage of BDPCM mode may be signaled after the signaling of the indication of usage of ACT mode.</li>                <li id="ul0056-0002" num="0130">ii. Alternatively, furthermore, the indication of usage of BDPCM mode may be not signaled and inferred to false (0).</li>            </ul>            </li>            <li id="ul0055-0002" num="0131">b. In one example, when BDPCM mode is enabled on a block, the ACT mode may be disabled on the block.            <ul id="ul0057" list-style="none">                <li id="ul0057-0001" num="0132">i. Alternatively, furthermore, the indication of usage of ACT mode may be signaled after the signaling of the indication of usage of BDPCM mode.</li>                <li id="ul0057-0002" num="0133">ii. Alternatively, furthermore, the indication of usage of ACT mode may be not signaled and inferred to false (0).</li>            </ul>            </li>            <li id="ul0055-0003" num="0134">c. In one example, the BDPCM mode in the above examples may denote luma BDPCM mode and/or chroma BDPCM mode.</li>        </ul>        </li>        <li id="ul0048-0004" num="0135">4. Inverse ACT may be applied before reverse BDPCM at the decoder.        <ul id="ul0058" list-style="none">            <li id="ul0058-0001" num="0136">a. In one example, ACT may be applied even when luma and chroma BDPCM have a different prediction mode.</li>            <li id="ul0058-0002" num="0137">b. Alternatively, at the encoder, forward ACT may be applied after BDPCM.<br/>QP Setting when ACT is Enabled (Item 5)</li>        </ul>        </li>        <li id="ul0048-0005" num="0138">5. It is proposed to clip the QP when ACT is enabled.        <ul id="ul0059" list-style="none">            <li id="ul0059-0001" num="0139">a. In one example, the clipping function may be defined as (l, h, x), where l is the lowest possible value of the input x and h is the highest possible value of the input x.            <ul id="ul0060" list-style="none">                <li id="ul0060-0001" num="0140">i. In one example, l may be set equal to 0.</li>                <li id="ul0060-0002" num="0141">ii. In one example, h may be set equal to 63.</li>            </ul>            </li>            <li id="ul0059-0002" num="0142">b. In one example, the QP may be the qP given in Section 2.5.</li>            <li id="ul0059-0003" num="0143">c. In one example, the clipping may be performed after the QP adjustment for ACT mode.</li>            <li id="ul0059-0004" num="0144">d. In one example, when transform skip is applied, l may be set equal to the minimal allowed QP for transform skip mode.</li>        </ul>        </li>    </ul>    </li></ul></p><heading id="h-0024" level="2">Palette Mode Related (Item 6-7)</heading><p id="p-0117" num="0000"><ul id="ul0061" list-style="none">    <li id="ul0061-0001" num="0000">    <ul id="ul0062" list-style="none">        <li id="ul0062-0001" num="0145">6. The values of maximum allowed palette size and/or maximum allowed predictor size may depend on a coding characteristics. Assume S<sub>1 </sub>is the maximal palette size (or palette predictor size) associated with a first coding characteristics; and S<sub>2 </sub>is the maximal palette size (or palette predictor size) associated with a second coding characteristics.        <ul id="ul0063" list-style="none">            <li id="ul0063-0001" num="0146">a. In one example, the coding characteristics may be color component.            <ul id="ul0064" list-style="none">                <li id="ul0064-0001" num="0147">i. In one example, the maximum allowed palette size and/or maximum allowed predictor size for different color components may have different values.</li>                <li id="ul0064-0002" num="0148">ii. In one example, the values of maximum allowed palette size and/or maximum allowed predictor size for a first color components (e.g., Y in YCbCr, G in RGB) may be different from those for the other two-color components (e.g., Cb and Cr in YCbCr, B and R in RGB) excluding the first color component.</li>            </ul>            </li>            <li id="ul0063-0002" num="0149">b. In one example, the coding characteristics may be the quantization parameters (QPs).            <ul id="ul0065" list-style="none">                <li id="ul0065-0001" num="0150">i. In one example, S<sub>1 </sub>and/or S<sub>2 </sub>for QP<sub>1 </sub>may be smaller than the S<sub>1 </sub>and/or S<sub>2 </sub>for QP<sub>2 </sub>if QP<sub>1 </sub>is greater than QP<sub>2 </sub></li>                <li id="ul0065-0002" num="0151">ii. In one example, the QP may be the slice level QP or block level QP.</li>            </ul>            </li>            <li id="ul0063-0003" num="0152">c. In one example, S<sub>2 </sub>may be greater than or equal to S<sub>1</sub>.</li>            <li id="ul0063-0004" num="0153">d. For a first coding characteristics and a second coding characteristics, indications of maximum palette sizes/palette predictor sizes may be signaled separately or inferred from one to another.            <ul id="ul0066" list-style="none">                <li id="ul0066-0001" num="0154">i. In one example, S<sub>1 </sub>may be signaled and S<sub>2 </sub>may be derived based on S<sub>1</sub>.                <ul id="ul0067" list-style="none">                    <li id="ul0067-0001" num="0155">1. In one example, S<sub>2 </sub>may be inferred to S<sub>1</sub>&#x2212;n.</li>                    <li id="ul0067-0002" num="0156">2. In one example, S<sub>2 </sub>may be inferred to S<sub>1</sub>&#x3e;&#x3e;n.</li>                    <li id="ul0067-0003" num="0157">3. In one example, S<sub>2 </sub>may be inferred to floor (S<sub>1</sub>/n), where floor(x) denotes the maximum integer no larger than x.</li>                </ul>                </li>            </ul>            </li>            <li id="ul0063-0005" num="0158">e. In one example, S<sub>1 </sub>and/or S<sub>2 </sub>may be signaled at a high level (e.g. SPS/PPS/PH/slice header) and adjusted at a lower level (e.g. CU/block).            <ul id="ul0068" list-style="none">                <li id="ul0068-0001" num="0159">i. How to adjust S<sub>1 </sub>and/or S<sub>2 </sub>may depend on the coded information.                <ul id="ul0069" list-style="none">                    <li id="ul0069-0001" num="0160">1. How to adjust S<sub>1 </sub>and/or S<sub>2 </sub>may depend on the current QP.</li>                    <li id="ul0069-0002" num="0000">&#x2003;a. In one example, the S<sub>1 </sub>and/or S<sub>2 </sub>may be reduced if the current QP is increased.</li>                    <li id="ul0069-0003" num="0161">2. How to adjust S<sub>1 </sub>and/or S<sub>2 </sub>may depend on block dimension.</li>                    <li id="ul0069-0004" num="0000">&#x2003;a. In one example, the S<sub>1 </sub>and/or S<sub>2 </sub>may be increased if the current blocks size is increased.</li>                </ul>                </li>            </ul>            </li>            <li id="ul0063-0006" num="0162">f. S<sub>1 </sub>and/or S<sub>2 </sub>may be dependent on whether LMCS is used.</li>        </ul>        </li>        <li id="ul0062-0002" num="0163">7. The parameters associated with a binarization method for escape samples/pixels may depend on coded information, e.g., the quantization parameters (QPs).        <ul id="ul0070" list-style="none">            <li id="ul0070-0001" num="0164">a. In one example, EG binarization method may be utilized, and the order of the EG binarization, denoted by k, may be dependent on the coded information.            <ul id="ul0071" list-style="none">                <li id="ul0071-0001" num="0165">i. In one example, k may be reduced when the current QP is increased.</li>            </ul>            </li>        </ul>        </li>    </ul>    </li></ul></p><heading id="h-0025" level="2">Signaling of ACT Mode (Item 8-10)</heading><p id="p-0118" num="0000"><ul id="ul0072" list-style="none">    <li id="ul0072-0001" num="0000">    <ul id="ul0073" list-style="none">        <li id="ul0073-0001" num="0166">8. Indications of the allowed maximum and/or minimum ACT size may be signaled in sequence/video/slice/tile/subpicture/brick/other video processing unit level or derived based on coded information.        <ul id="ul0074" list-style="none">            <li id="ul0074-0001" num="0167">a. In one example, they may be signaled in SPS/PPS/Picture header/slice header.</li>            <li id="ul0074-0002" num="0168">b. In one example, they may be conditionally signaled, such as according to the ACT is enabled.</li>            <li id="ul0074-0003" num="0169">c. In one example, N-level of allowed maximum and/or minimum ACT size may be signaled/defined, e.g., N=2.            <ul id="ul0075" list-style="none">                <li id="ul0075-0001" num="0170">i. In one example, the allowed maximum and/or minimum ACT size may be set to either K0 or K1 (e.g., K0=64, K1=32).</li>                <li id="ul0075-0002" num="0171">ii. Alternatively, furthermore, indication of the level may be signaled, e.g., when N=2, a flag may be signaled.</li>            </ul>            </li>            <li id="ul0074-0004" num="0172">d. In one example, indications of the differences between the allowed maximum and/or minimum ACT size and the allowed maximum and/or minimum transform (or transform skip) sizes (e.g., for the luma component) may be signaled.</li>            <li id="ul0074-0005" num="0173">e. In one example, the allowed maximum and/or minimum ACT size may be derived from the allowed maximum and/or minimum (or transform skip) sizes (e.g., for the luma component).</li>            <li id="ul0074-0006" num="0174">f. Alternatively, furthermore, whether to and/or how to signal indications of ACT usage and other side information related to ACT may be dependent on the allowed maximum and/or minimum.</li>        </ul>        </li>        <li id="ul0073-0002" num="0175">9. When a block is greater than the allowed maximum ACT size (or allowed maximum transform size), the block may be automatically split to multiple sub-blocks wherein all sub-blocks share the same prediction mode (e.g., all of them are intra coded), and the ACT may be enabled in the sub-block level, instead of the block level.</li>        <li id="ul0073-0003" num="0176">10. The indication of the usage of ACT mode may be conditionally signaled based on the block dimensions (e.g., block width and/or height, block width times height, ratios between block width and height, maximum/minimum values of block width and height) and/or maximally allowed ACT sizes.        <ul id="ul0076" list-style="none">            <li id="ul0076-0001" num="0177">a. In one example, the indication of the usage of ACT mode may be signaled when certain conditions, e.g., according to block dimension, are satisfied.            <ul id="ul0077" list-style="none">                <li id="ul0077-0001" num="0178">i. In one example, the conditions are if the current block width is smaller than or equal to m and/or the current block height is smaller than or equal to n.</li>                <li id="ul0077-0002" num="0179">ii. In one example, the conditions are if the current block width times height is smaller than or no larger than m.</li>                <li id="ul0077-0003" num="0180">iii. In one example, the conditions are if the current block width times height is larger than or no smaller than m.</li>            </ul>            </li>            <li id="ul0076-0002" num="0181">b. Alternatively, in one example, the indication of the usage of ACT mode may be not signaled when certain conditions, e.g., according to block dimension, are NOT satisfied.            <ul id="ul0078" list-style="none">                <li id="ul0078-0001" num="0182">i. In one example, the conditions are if the current block width is larger than m and/or the current block height is larger than n.</li>                <li id="ul0078-0002" num="0183">ii. In one example, the conditions are if the current block width times height is smaller than or no larger than m.</li>                <li id="ul0078-0003" num="0184">iii. In one example, the conditions are if the current block width times height is larger than or no smaller than m.</li>                <li id="ul0078-0004" num="0185">iv. Alternatively, furthermore, the indication of the usage of ACT mode may be inferred to 0.</li>            </ul>            </li>            <li id="ul0076-0003" num="0186">c. In above examples, the variables m, n may be pre-defined (e.g., 4, 64, 128), or signaled, or derived on-the-fly.            <ul id="ul0079" list-style="none">                <li id="ul0079-0001" num="0187">i. In one example, m and/or n may be derived based on a decoded message in the SPS/PPS/APS/CTU row/group of CTUs/CU/block.                <ul id="ul0080" list-style="none">                    <li id="ul0080-0001" num="0188">1. In one example, m and/or n may be set equal to the maximally allowed transform size (e.g. MaxTbSizeY).</li>                </ul>                </li>            </ul>            </li>        </ul>        </li>    </ul>    </li></ul></p><heading id="h-0026" level="2">Signaling of Constraint Flags in General Constraint Information Syntax (Item 11-16)</heading><p id="p-0119" num="0189">The constraint flags below may be signaled in a video unit other than SPS. For example, they may be signaled in the general constraint information syntax specified in JVET-P2001-vE.<ul id="ul0081" list-style="none">    <li id="ul0081-0001" num="0000">    <ul id="ul0082" list-style="none">        <li id="ul0082-0001" num="0190">11. It is proposed to have a constraint flag to specify whether the SPS ACT enabling flag (e.g., sps_act_enabled_flag) may be equal to 0.        <ul id="ul0083" list-style="none">            <li id="ul0083-0001" num="0191">a. In one example, the flag may be denoted as no_act_constraint_flag            <ul id="ul0084" list-style="none">                <li id="ul0084-0001" num="0192">i. When this flag is equal to 1, the SPS ACT enabling flag (e.g., sps_act_enabled_flag) may be equal to 0.</li>                <li id="ul0084-0002" num="0193">ii. When this flag is equal to 0, it does not impose such a constraint.</li>            </ul>            </li>        </ul>        </li>        <li id="ul0082-0002" num="0194">12. It is proposed to have a constraint flag to specify whether the SPS BDPCM enabling flag (e.g., sps_bdpcm_enabled_flag) may be equal to 0.        <ul id="ul0085" list-style="none">            <li id="ul0085-0001" num="0195">a. In one example, the flag may be denoted as no_bdpcm_constraint_flag.            <ul id="ul0086" list-style="none">                <li id="ul0086-0001" num="0196">i. When this flag is equal to 1, the SPS BDPCM enabling flag (e.g., sps_bdpcm_enabled_flag) may be equal to 0.</li>                <li id="ul0086-0002" num="0197">ii. When this flag is equal to 0, it does not impose such a constraint.</li>            </ul>            </li>        </ul>        </li>        <li id="ul0082-0003" num="0198">13. It is proposed to have a constraint flag to specify whether the SPS chroma BDPCM enabling flag (e.g., sps_bdpcm_chroma_enabled_flag) may be equal to 0.        <ul id="ul0087" list-style="none">            <li id="ul0087-0001" num="0199">a. In one example, the flag may be denoted as no_bdpcm_chroma_constraint_flag.            <ul id="ul0088" list-style="none">                <li id="ul0088-0001" num="0200">i. When this flag is equal to 1, the SPS chroma BDPCM enabling flag (e.g., sps_bdpcm_chroma_enabled_flag) may be equal to 0.</li>                <li id="ul0088-0002" num="0201">ii. When this flag is equal to 0, it does not impose such a constraint.</li>            </ul>            </li>        </ul>        </li>        <li id="ul0082-0004" num="0202">14. It is proposed to have a constraint flag to specify whether the SPS palette enabling flag (e.g., sps_palette_enabled_flag) may be equal to 0.        <ul id="ul0089" list-style="none">            <li id="ul0089-0001" num="0203">a. In one example, the flag may be denoted as no_palette_constraint_flag.            <ul id="ul0090" list-style="none">                <li id="ul0090-0001" num="0204">i. When this flag is equal to 1, the SPS palette enabling flag (e.g. sps_palette_enabled_flag) may be equal to 0.</li>                <li id="ul0090-0002" num="0205">ii. When this flag is equal to 0, it does not impose such a constraint.</li>            </ul>            </li>        </ul>        </li>        <li id="ul0082-0005" num="0206">15. It is proposed to have a constraint flag to specify whether the SPS RPR enabling flag (e.g., ref_pic_resampling_enabled_flag) may be equal to 0.        <ul id="ul0091" list-style="none">            <li id="ul0091-0001" num="0207">a. In one example, the flag may be denoted as no_ref_pic_resampling_constraint_flag.            <ul id="ul0092" list-style="none">                <li id="ul0092-0001" num="0208">i. When this flag is equal to 1, the SPS RPR enabling flag (e.g. ref_pic_resampling_enabled_flag) may be equal to 0.</li>                <li id="ul0092-0002" num="0209">ii. When this flag is equal to 0, it does not impose such a constraint.</li>            </ul>            </li>        </ul>        </li>        <li id="ul0082-0006" num="0210">16. In above examples (bullet 11-15), such constraint flags may be conditionally signaled, e.g., according to chroma format (e.g., chroma_format_idc) and/or separate plane coding or ChromaArrayType.</li>    </ul>    </li></ul></p><heading id="h-0027" level="2">ACT QP Offset (Item 17-19)</heading><p id="p-0120" num="0000"><ul id="ul0093" list-style="none">    <li id="ul0093-0001" num="0000">    <ul id="ul0094" list-style="none">        <li id="ul0094-0001" num="0211">17. It is proposed that ACT offsets may be applied after applying other chroma offsets (e.g., those in PPS and/or picture header (PH) and/or slice header (SH)) when ACT is applied on a block.</li>        <li id="ul0094-0002" num="0212">18. It is proposed to have PPS and/or PH offsets other than &#x2212;5 for JCbCr mode 2 when YCgCo color transform is applied on a block.        <ul id="ul0095" list-style="none">            <li id="ul0095-0001" num="0213">a. In one example, the offset may be other than &#x2212;5.</li>            <li id="ul0095-0002" num="0214">b. In one example, the offset may be indicated in PPS (e.g., as pps_act_cbcr_qp_offset_plus6) and the offset may be set as pps_act_cbcr_qp_offset_plus6&#x2212;6.</li>            <li id="ul0095-0003" num="0215">c. In one example, the offset may be indicated in PPS (e.g., as pps_act_cbcr_qp_offset_plus7) and the offset may be set as pps_act_cbcr_qp_offset_plus7&#x2212;7.</li>        </ul>        </li>        <li id="ul0094-0003" num="0216">19. It is proposed to have PPS and/or PH offsets other than 1 for JCbCr mode 2 when YCgCo-R is applied on a block.        <ul id="ul0096" list-style="none">            <li id="ul0096-0001" num="0217">a. In one example, the offset may be other than &#x2212;1.</li>            <li id="ul0096-0002" num="0218">b. In one example, the offset may be indicated in PPS (e.g., as pps_act_cbcr_qp_offset) and the offset may be set as pps_act_cbcr_qp_offset.</li>            <li id="ul0096-0003" num="0219">c. In one example, the offset may be indicated in PPS (e.g., as pps_act_cbcr_qp_offset_plus1) and the offset may be set as pps_act_cbcr_qp_offset_plus1&#x2212;1.</li>        </ul>        </li>        <li id="ul0094-0004" num="0220">20. It is proposed that when JCCR is used, the QP offset for ACT with YCgCo transform, denoted as act_qp_offset, may depend on JCCR mode.        <ul id="ul0097" list-style="none">            <li id="ul0097-0001" num="0221">a. In one example, when JCCR mode is 1, act_qp_offset may be &#x2212;5.            <ul id="ul0098" list-style="none">                <li id="ul0098-0001" num="0222">i. Alternatively, in one example, when JCCR mode is 1, act_qp_offset may be &#x2212;6.</li>            </ul>            </li>            <li id="ul0097-0002" num="0223">b. In one example, when JCCR mode is 2, act_qp_offset may be &#x2212;7.            <ul id="ul0099" list-style="none">                <li id="ul0099-0001" num="0224">i. Alternatively, in one example, when JCCR mode is 2, act_qp_offset may be (&#x2212;7&#x2212;pps_joint_cbcr_qp_offset&#x2212;slice_joint_cbcr_qp_offset).</li>                <li id="ul0099-0002" num="0225">ii. Alternatively, in one example, when JCCR mode is 2, act_qp_offset may be (&#x2212;7+pps_joint_cbcr_qp_offset+slice_joint_cbcr_qp_offset).</li>            </ul>            </li>            <li id="ul0097-0003" num="0226">c. In one example, when JCCR mode is 3, the ACT offset may be &#x2212;4.            <ul id="ul0100" list-style="none">                <li id="ul0100-0001" num="0227">i. Alternatively, in one example, when JCCR mode is 3, the ACT offset may be &#x2212;5.</li>            </ul>            </li>        </ul>        </li>        <li id="ul0094-0005" num="0228">21. It is proposed that when JCCR is used, the QP offset for ACT with YCgCo-R transform, denoted as act_qp_offset, may depend on JCCR mode.        <ul id="ul0101" list-style="none">            <li id="ul0101-0001" num="0229">a. In one example, when JCCR mode is 1, act_qp_offset may be 1.            <ul id="ul0102" list-style="none">                <li id="ul0102-0001" num="0230">i. Alternatively, in one example, when JCCR mode is 1, act_qp_offset may be 0.</li>            </ul>            </li>            <li id="ul0101-0002" num="0231">b. In one example, when JCCR mode is 2, act_qp_offset may be &#x2212;1.            <ul id="ul0103" list-style="none">                <li id="ul0103-0001" num="0232">i. Alternatively, in one example, when JCCR mode is 2, act_qp_offset may be (&#x2212;1&#x2212;pps_joint_cbcr_qp_offset&#x2212;slice_joint_cbcr_qp_offset).</li>                <li id="ul0103-0002" num="0233">ii. Alternatively, in one example, when JCCR mode is 2, act_qp_offset may be (&#x2212;1+pps_joint_cbcr_qp_offset+slice_joint_cbcr_qp_offset).</li>            </ul>            </li>            <li id="ul0101-0003" num="0234">c. In one example, when JCCR mode is 3, the ACT offset may be 2.            <ul id="ul0104" list-style="none">                <li id="ul0104-0001" num="0235">i. Alternatively, in one example, when JCCR mode is 3, the ACT offset may be 1.</li>            </ul>            </li>        </ul>        </li>        <li id="ul0094-0006" num="0236">22. Whether to signal the QP offsets for ACT and JCCR coded blocks (e.g., slice_act_cbcr_qp_offset) may depend on the condition check of whether JCCR is enabled.        <ul id="ul0105" list-style="none">            <li id="ul0105-0001" num="0237">a. Alternatively, furthermore, the indication of whether QP offsets for ACT and JCCR coded blocks are present (e.g., pps_joint_cbcr_qp_offset_present_flag/pps_slice_cbcr_qp_offset_present_flag) may depend on the condition check of whether JCCR is enabled.</li>        </ul>        </li>        <li id="ul0094-0007" num="0238">23. How to derive/signal delta QPs may depend on the coded information, such as coded mode, usage of a coding tool.        <ul id="ul0106" list-style="none">            <li id="ul0106-0001" num="0239">a. In one example, how to derive/signal delta QPs may depend on usage of ACT for current block and/or previously coded blocks (e.g., above and left neighboring blocks).</li>            <li id="ul0106-0002" num="0240">b. In one example, the derivation and/or signaling of delta QPs may depend on whether the current block and previously coded blocks used for QP predictor derivation share the same coded mode or enabling/disabling status of a coding tool (e.g., ACT).</li>            <li id="ul0106-0003" num="0241">c. In one example, for a current block coded with coding tool X (e.g., ACT/Transform Skip), the QP predictor derivation process may be different from other blocks with X being disabled.            <ul id="ul0107" list-style="none">                <li id="ul0107-0001" num="0242">i. In one example, the QP predictor for a current block coded with coding tool X may be derived from those blocks with coding tool X being enabled.</li>                <li id="ul0107-0002" num="0243">ii. In one example, the QP predictor for a current block coded without coding tool X may be derived from those blocks with coding tool X being disabled.</li>            </ul>            </li>        </ul>        </li>        <li id="ul0094-0008" num="0244">24. How to signal the QP offsets in PPS may be independent from the SPS.        <ul id="ul0108" list-style="none">            <li id="ul0108-0001" num="0245">a. Alternatively, furthermore, an indication of color format and/or an indication of enabling of ACT may be signaled in PPS.            <ul id="ul0109" list-style="none">                <li id="ul0109-0001" num="0246">i. Alternatively, furthermore, the QP offsets may be signaled under the condition check of the indications.</li>            </ul>            </li>        </ul>        </li>        <li id="ul0094-0009" num="0247">25. Whether to signal the QP offsets (e.g., applied to ACT coded blocks) in a 1st level (e.g., picture level)        <ul id="ul0110" list-style="none">            <li id="ul0110-0001" num="0248">a. It is proposed that if the QP offsets (e.g., applied to ACT coded blocks) are present in a 2nd level (e.g., slice level), the signaling of the QP offsets in a 1st level is skipped.</li>        </ul>        </li>        <li id="ul0094-0010" num="0249">26. QPs mentioned in above examples may also be present in picture/slice/tile/subpicture level (e.g., picture header/PPS/slice header).</li>        <li id="ul0094-0011" num="0250">27. Overwriting mechanism may be used for signaling QP offsets may be utilized. That is, the QP offsets may be signaled in a 1st level (e.g., PPS), but overwritten in a 2nd level (e.g., Picture Header).        <ul id="ul0111" list-style="none">            <li id="ul0111-0001" num="0251">a. Alternatively, furthermore, a flag may be signaled in the 1st level or 2nd level to indicate whether overwriting is enabled.</li>            <li id="ul0111-0002" num="0252">b. Alternatively, when overwriting is enabled, there may be no need to signal the related information in the 1st level.            <ul id="ul0112" list-style="none">                <li id="ul0112-0001" num="0253">i. In one example, the QP offsets (e.g., applied to ACT coded blocks) may not be signaled in the 1st level (e.g., PPS) if overwritten is applied for a 2nd level (e.g., slice).</li>            </ul>            </li>            <li id="ul0111-0003" num="0254">c. Alternatively, furthermore, differences of QP offsets between the 1st and 2nd level may be signaled in the 2nd level.</li>        </ul>        </li>    </ul>    </li></ul></p><heading id="h-0028" level="2">General Techniques ((Items 20-21)</heading><p id="p-0121" num="0000"><ul id="ul0113" list-style="none">    <li id="ul0113-0001" num="0000">    <ul id="ul0114" list-style="none">        <li id="ul0114-0001" num="0255">28. In the above examples, S<sub>1</sub>, S<sub>2</sub>, l, h, m, n and/or k are integer numbers and may depend on        <ul id="ul0115" list-style="none">            <li id="ul0115-0001" num="0256">a. A message signaled in the decoding parameter set (DPS)/SPS/video parameter set (VPS)/PPS/adaption parameter set (APS)/picture header/slice header/tile group header/Largest coding unit (LCU)/Coding unit (CU)/LCU row/group of LCUs/TU/PU block/Video coding unit</li>            <li id="ul0115-0002" num="0257">b. Position of CU/PU/TU/block/Video coding unit</li>            <li id="ul0115-0003" num="0258">c. Coded modes of blocks containing the samples along the edges</li>            <li id="ul0115-0004" num="0259">d. Transform matrices applied to the blocks containing the samples along the edges</li>            <li id="ul0115-0005" num="0260">e. Block dimension/Block shape of current block and/or its neighboring blocks</li>            <li id="ul0115-0006" num="0261">f. Indication of the colour format (such as 4:2:0, 4:4:4, RGB or YUV)</li>            <li id="ul0115-0007" num="0262">g. Coding tree structure (such as dual tree or single tree)</li>            <li id="ul0115-0008" num="0263">h. Slice/tile group type and/or picture type</li>            <li id="ul0115-0009" num="0264">i. Colour component (e.g. may be only applied on Cb or Cr)</li>            <li id="ul0115-0010" num="0265">j. Temporal layer ID</li>            <li id="ul0115-0011" num="0266">k. Profiles/Levels/Tiers of a standard</li>            <li id="ul0115-0012" num="0267">l. Alternatively, S<sub>1</sub>, S<sub>2</sub>, l, h, m, n and/or k may be signaled to the decoder.</li>        </ul>        </li>        <li id="ul0114-0002" num="0268">29. The above proposed methods may be applied under certain conditions.        <ul id="ul0116" list-style="none">            <li id="ul0116-0001" num="0269">a. In one example, the condition is the colour format is 4:2:0 and/or 4:2:2.</li>            <li id="ul0116-0002" num="0270">b. In one example, indication of usage of the above methods may be signaled in sequence/picture/slice/tile/brick/a video region-level, such as SPS/PPS/picture header/slice header.</li>            <li id="ul0116-0003" num="0271">c. In one example, the usage of above methods may depend on            <ul id="ul0117" list-style="none">                <li id="ul0117-0001" num="0272">i. Video contents (e.g. screen contents or natural contents)</li>                <li id="ul0117-0002" num="0273">ii. A message signaled in the DPS/SPS/VPS/PPS/APS/picture header/slice header/tile group header/Largest coding unit (LCU)/Coding unit (CU)/LCU row/group of LCUs/TU/PU block/Video coding unit</li>                <li id="ul0117-0003" num="0274">iii. Position of CU/PU/TU/block/Video coding unit</li>                <li id="ul0117-0004" num="0275">iv. Coded modes of blocks containing the samples along the edges</li>                <li id="ul0117-0005" num="0276">v. Transform matrices applied to the blocks containing the samples along the edges</li>                <li id="ul0117-0006" num="0277">vi. Block dimension of current block and/or its neighboring blocks</li>                <li id="ul0117-0007" num="0278">vii. Block shape of current block and/or its neighboring blocks</li>                <li id="ul0117-0008" num="0279">viii. Indication of the colour format (such as 4:2:0, 4:4:4, RGB or YUV)</li>                <li id="ul0117-0009" num="0280">ix. Coding tree structure (such as dual tree or single tree)</li>                <li id="ul0117-0010" num="0281">x. Slice/tile group type and/or picture type</li>                <li id="ul0117-0011" num="0282">xi. Colour component (e.g. may be only applied on Cb or Cr)</li>                <li id="ul0117-0012" num="0283">xii. Temporal layer ID</li>                <li id="ul0117-0013" num="0284">xiii. Profiles/Levels/Tiers of a standard</li>                <li id="ul0117-0014" num="0285">xiv. Alternatively, m and/or n may be signaled to the decoder.</li>            </ul>            </li>        </ul>        </li>    </ul>    </li></ul></p><heading id="h-0029" level="1">5. Embodiments</heading><p id="p-0122" num="0286">The embodiments are based on JVET-P2001-vE. The newly added texts are highlight by <img id="CUSTOM-CHARACTER-00006" he="3.56mm" wi="39.20mm" file="US20230007256A1-20230105-P00006.TIF" alt="custom-character" img-content="character" img-format="tif"/>. The deleted texts are marked by italicized text.</p><heading id="h-0030" level="1">5.1. Embodiment #1</heading><p id="p-0123" num="0287">This embodiment is related to interaction between ACT and BDPCM modes.</p><p id="p-0124" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="224pt" align="left"/><colspec colname="2" colwidth="35pt" align="center"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Descriptor</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>coding_unit( x0, y0, cbWidth, cbHeight, cqtDepth, treeType, modeType ) {</entry><entry/></row><row><entry>&#x2003;chType = treeType = = DUAL_TREE_CHROMA ? 1 : 0</entry><entry/></row><row><entry>...</entry><entry/></row><row><entry>&#x2003;if( CuPredMode[ chType ][ x0 ][ y0 ] == MODE_INTRA &#x26;&#x26;</entry><entry/></row><row><entry>sps_palette_enabled_flag &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;cbWidth &#x3c;= 64 &#x26;&#x26; cbHeight &#x3c;= 64 &#x26;&#x26; cu_skip_flag[ x0 ][ y0 ] == </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;0</entry><entry/></row><row><entry>&#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;modeType != MODE_TYPE_INTER )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;pred_mode_plt_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;if( CuPredMode[ chType ][ x0 ][ y0 ] == MODE_INTRA &#x26;&#x26;</entry><entry/></row><row><entry>sps_act_enabled_flag &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;treeType == SINGLE_TREE )</entry><entry/></row><row><entry>&#x2003;&#x2003;cu_act_enabled_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;if( CuPredMode[ chType ][ x0 ][ y0 ] == MODE_INTRA | |</entry><entry/></row><row><entry>&#x2003;&#x2003;CuPredMode[ chType ][ x0 ][ y0 ] = = MODE_PLT ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;if( treeType = = SINGLE_TREE | | treeType = = DUAL_TREE_LUMA </entry><entry/></row><row><entry>&#x2003;&#x2003;) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( pred_mode_plt_flag ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;palette_coding( x0, y0, cbWidth, cbHeight, treeType )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;} else {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if(sps_bdpcm_enabled_flag &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;cbWidth &#x3c;= MaxTsSize &#x26;&#x26; cbHeight &#x3c;= MaxTsSize &#x26;&#x26;</entry><entry/></row><row><entry><img id="CUSTOM-CHARACTER-00007" he="2.46mm" wi="22.61mm" file="US20230007256A1-20230105-P00007.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_bdpcm_luma_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if( intra_bdpcm_luma_flag )</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;intra_bdpcm_luma_dir_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;else {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;...</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>...</entry><entry/></row><row><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><heading id="h-0031" level="1">5.2. Embodiment #2</heading><p id="p-0125" num="0288">This embodiment is related to interaction between ACT and BDPCM modes.</p><p id="p-0126" num="0289">intra_bdpcm_chroma_flag equal to 1 specifies that BDPCM is applied to the current chroma coding blocks at the location (x0, y0), i.e. the transform is skipped, the intra chroma prediction mode is specified by intra_bdpcm_chroma_dir_flag. intra_bdpcm_chroma_flag equal to 0 specifies that BDPCM is not applied to the current chroma coding blocks at the location (x0, y0).</p><p id="p-0127" num="0290">When intra_bdpcm_chroma_flag is not present <img id="CUSTOM-CHARACTER-00008" he="3.22mm" wi="43.43mm" file="US20230007256A1-20230105-P00008.TIF" alt="custom-character" img-content="character" img-format="tif"/>, it is inferred to be equal to 0.</p><p id="p-0128" num="0000"><img id="CUSTOM-CHARACTER-00009" he="2.79mm" wi="40.56mm" file="US20230007256A1-20230105-P00009.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00010" he="2.79mm" wi="41.66mm" file="US20230007256A1-20230105-P00010.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00011" he="2.79mm" wi="13.04mm" file="US20230007256A1-20230105-P00011.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00012" he="2.79mm" wi="37.42mm" file="US20230007256A1-20230105-P00012.TIF" alt="custom-character" img-content="character" img-format="tif"/>.</p><p id="p-0129" num="0291">The variable BdpcmFlag[x][y][cIdx] is set equal to intra_bdpcm_chroma_flag for x=x0 . . . x0+cbWidth&#x2212;1, y=y0 . . . y0+cbHeight&#x2212;1 and cIdx=1 . . . 2.</p><p id="p-0130" num="0292">intra_bdpcm_chroma_dir_flag equal to 0 specifies that the BDPCM prediction direction is horizontal. intra_bdpcm_chroma_dir_flag equal to 1 specifies that the BDPCM prediction direction is vertical. <img id="CUSTOM-CHARACTER-00013" he="2.79mm" wi="42.33mm" file="US20230007256A1-20230105-P00013.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00014" he="2.79mm" wi="37.76mm" file="US20230007256A1-20230105-P00014.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00015" he="2.79mm" wi="38.10mm" file="US20230007256A1-20230105-P00015.TIF" alt="custom-character" img-content="character" img-format="tif"/>.</p><p id="p-0131" num="0293">The variable BdpcmDir[x][y][cIdx] is set equal to intra_bdpcm_chroma_dir_flag for x=x0 . . . x0+cbWidth&#x2212;1, y=y0 . . . y0+cbHeight&#x2212;1 and cIdx=1 . . . 2.</p><heading id="h-0032" level="1">5.3. Embodiment #3</heading><p id="p-0132" num="0294">This embodiment is related to QP setting.</p><heading id="h-0033" level="2">8.7.3 Scaling Process for Transform Coefficients</heading><p id="p-0133" num="0295">Inputs to this process are:<ul id="ul0118" list-style="none">    <li id="ul0118-0001" num="0000">    <ul id="ul0119" list-style="none">        <li id="ul0119-0001" num="0296">a luma location (xTbY, yTbY) specifying the top-left sample of the current luma transform block relative to the top-left luma sample of the current picture,</li>        <li id="ul0119-0002" num="0297">a variable nTbW specifying the transform block width,</li>        <li id="ul0119-0003" num="0298">a variable nTbH specifying the transform block height,</li>        <li id="ul0119-0004" num="0299">a variable predMode specifying the prediction mode of the coding unit,</li>        <li id="ul0119-0005" num="0300">a variable cIdx specifying the colour component of the current block.</li>    </ul>    </li></ul></p><p id="p-0134" num="0301">Output of this process is the (nTbW)&#xd7;(nTbH) array d of scaled transform coefficients with elements d[x][y].</p><p id="p-0135" num="0000">. . . .</p><p id="p-0136" num="0302">The quantization parameter qP is modified and the variables rectNonTsFlag and bdShift are derived as follows:<ul id="ul0120" list-style="none">    <li id="ul0120-0001" num="0000">    <ul id="ul0121" list-style="none">        <li id="ul0121-0001" num="0303">If transform_skip_flag[xTbY][yTbY][cIdx] is equal to 0, the following applies:</li>    </ul>    </li></ul></p><p id="p-0137" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=qP&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?5:0)&#x2003;&#x2003;(1133)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0138" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00016" he="2.79mm" wi="23.28mm" file="US20230007256A1-20230105-P00016.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0139" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>rectNon<i>Ts</i>Flag=(((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))&#x26;1)==1)?1:0&#x2003;&#x2003;(1134)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0140" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Shift=BitDepth+rectNon<i>Ts</i>Flag+((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))/2)&#x2212;5+pic_dep_quant_enabled_flag&#x2003;&#x2003;(1135)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0122" list-style="none">    <li id="ul0122-0001" num="0000">    <ul id="ul0123" list-style="none">        <li id="ul0123-0001" num="0304">Otherwise (transform_skip_flag[xTbY][yTbY][cIdx] is equal to 1), the following applies:</li>    </ul>    </li></ul></p><p id="p-0141" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Max(QpPrime<i>Ts </i>Min,qP)&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?5:0)&#x2003;&#x2003; (1136)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0142" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00017" he="2.79mm" wi="43.43mm" file="US20230007256A1-20230105-P00017.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00018" he="2.79mm" wi="42.33mm" file="US20230007256A1-20230105-P00018.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0143" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>rectNon<i>Ts</i>Flag=0&#x2003;&#x2003;(1137)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0144" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Shift=10&#x2003;&#x2003;(1138)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0145" num="0000">. . . .</p><heading id="h-0034" level="1">5.4. Embodiment #4</heading><heading id="h-0035" level="2">8.7.1 Derivation Process for Quantization Parameters</heading><p id="p-0146" num="0305">. . .<ul id="ul0124" list-style="none">    <li id="ul0124-0001" num="0000">    <ul id="ul0125" list-style="none">        <li id="ul0125-0001" num="0306">The chroma quantization parameters for the Cb and Cr components, Qp&#x2032;Cb and Qp&#x2032;Cr, and joint Cb-Cr coding Qp&#x2032;CbCr are derived as follows:</li>    </ul>    </li></ul></p><p id="p-0147" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Qp&#x2032;<i>Cb</i>=Clip3(&#x2212;Qp<i>Bd</i>Offset,63,qP<i>Cb</i>+pps_<i>cb</i>_qp_offset+slice_<i>cb</i>_qp_offset+<i>Cu</i>QpOffset<i>Cb</i>)+Qp<i>Bd</i>Offset&#x2003;&#x2003; (1122)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0148" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Qp&#x2032;<i>Cr</i>=Clip3(&#x2212;Qp<i>Bd</i>Offset,63,qP<i>Cr</i>+pps_<i>cr</i>_qp_offset+slice_<i>cr</i>_qp_offset+<i>Cu</i>QpOffset<i>Cr</i>)+Qp<i>Bd</i>Offset&#x2003;&#x2003; (1123)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0149" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Qp&#x2032;<i>CbCr</i>=Clip3(&#x2212;Qp<i>Bd</i>Offset,63,qP<i>CbCr</i>+pps_joint_<i>cbcr</i>_qp_offset+slice_joint_<i>cbcr</i>_qp_offset+<i>Cu</i>QpOffset<i>CbCr</i>)+Qp<i>Bd</i>Offset&#x2003;&#x2003; (1124)<?in-line-formulae description="In-line Formulae" end="tail"?></p><heading id="h-0036" level="1">5.5. Embodiment #5</heading><heading id="h-0037" level="2">7.3.9.5 Coding Unit Syntax</heading><p id="p-0150" num="0307"></p><p id="p-0151" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="238pt" align="left"/><colspec colname="2" colwidth="35pt" align="center"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Descriptor</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>coding_unit( x0, y0, cbWidth, cbHeight, cqtDepth, treeType, modeType ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;chType = treeType = = DUAL_TREE_CHROMA ? 1 : 0</entry><entry/></row><row><entry>&#x2003;&#x2003;...</entry><entry/></row><row><entry>&#x2003;&#x2003;if( CuPredMode[ chType ][ x0 ][ y0 ] == MODE_INTRA &#x26;&#x26;</entry><entry/></row><row><entry>sps_act_enabled_flag &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;treeType = = SINGLE_TREE&#x2009;<img id="CUSTOM-CHARACTER-00019" he="2.46mm" wi="41.99mm" file="US20230007256A1-20230105-P00019.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;cu_act_enabled_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;...</entry><entry/></row><row><entry>&#x2003;if( cu_cbf) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( sps_act_enabled_flag &#x26;&#x26; CuPredMode[ chType ][ x0 ][ y0 ] ! =</entry><entry/></row><row><entry>MODE_INTRA&#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;treeType = = SINGLE_TREE&#x2009;<img id="CUSTOM-CHARACTER-00020" he="2.46mm" wi="41.32mm" file="US20230007256A1-20230105-P00020.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;cu_act_enabled_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;...</entry><entry/></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry namest="1" nameend="2" align="left" id="FOO-00001"><img id="CUSTOM-CHARACTER-00021" he="2.46mm" wi="29.29mm" file="US20230007256A1-20230105-P00021.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry></row></tbody></tgroup></table></tables></p><heading id="h-0038" level="1">5.6. Embodiment #6</heading><heading id="h-0039" level="2">7.3.9.5 Coding Unit Syntax</heading><p id="p-0152" num="0308"></p><p id="p-0153" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="231pt" align="left"/><colspec colname="2" colwidth="42pt" align="center"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Descriptor</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>coding_unit( x0, y0, cbWidth, cbHeight, cqtDepth, treeType, modeType ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;chType = treeType = = DUAL TREE CHROMA ? 1 : 0</entry><entry/></row><row><entry>&#x2003;&#x2003;...</entry><entry/></row><row><entry>&#x2003;&#x2003;if( CuPredMode[ chType ][ x0 ][ y0 ] == MODE_INTRA &#x26;&#x26;</entry><entry/></row><row><entry>sps_act_enabled_flag &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;treeType = = SINGLETREE&#x2009;<img id="CUSTOM-CHARACTER-00022" he="2.79mm" wi="41.99mm" file="US20230007256A1-20230105-P00022.TIF" alt="custom-character" img-content="character" img-format="tif"/> &#x2009; </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;=</entry><entry/></row><row><entry><img id="CUSTOM-CHARACTER-00023" he="2.79mm" wi="12.70mm" file="US20230007256A1-20230105-P00023.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;cu_act_enabled_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;...</entry><entry/></row><row><entry>&#x2003;if( cu_cbf) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;if( sps_act_enabled_flag &#x26;&#x26; CuPredMode[ chType ][ x0 ][ y0 ] !=</entry><entry/></row><row><entry>MODE_INTRA &#x26;&#x26;</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;treeType = = SINGLE TREE&#x2009;<img id="CUSTOM-CHARACTER-00024" he="3.22mm" wi="41.99mm" file="US20230007256A1-20230105-P00024.TIF" alt="custom-character" img-content="character" img-format="tif"/> &#x2009; &#x3c;=</entry><entry/></row><row><entry><img id="CUSTOM-CHARACTER-00025" he="2.79mm" wi="12.70mm" file="US20230007256A1-20230105-P00025.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;cu_act_enabled_flag</entry><entry>ae(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;...</entry><entry/></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><heading id="h-0040" level="1">5.7. Embodiment #7</heading><heading id="h-0041" level="2">8.7.3 Scaling Process for Transform Coefficients</heading><p id="p-0154" num="0000"><ul id="ul0126" list-style="none">    <li id="ul0126-0001" num="0309">Inputs to this process are:    <ul id="ul0127" list-style="none">        <li id="ul0127-0001" num="0310">a luma location (xTbY, yTbY) specifying the top-left sample of the current luma transform block relative to the top-left luma sample of the current picture,</li>        <li id="ul0127-0002" num="0311">a variable nTbW specifying the transform block width,</li>        <li id="ul0127-0003" num="0312">a variable nTbH specifying the transform block height,</li>        <li id="ul0127-0004" num="0313">a variable predMode specifying the prediction mode of the coding unit,</li>        <li id="ul0127-0005" num="0314">a variable cIdx specifying the colour component of the current block.</li>    </ul>    </li>    <li id="ul0126-0002" num="0315">Output of this process is the (nTbW)&#xd7;(nTbH) array d of scaled transform coefficients with elements d[x][y].    <ul id="ul0128" list-style="none">        <li id="ul0128-0001" num="0316">If cIdx is equal to 0, the following applies:</li>    </ul>    </li></ul></p><p id="p-0155" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00026" he="2.79mm" wi="18.03mm" file="US20230007256A1-20230105-P00026.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0156" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Y</sub>&#x2003;&#x2003;(1129)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0129" list-style="none">    <li id="ul0129-0001" num="0000">    <ul id="ul0130" list-style="none">        <li id="ul0130-0001" num="0317">Otherwise, if TuCResMode[xTbY][yTbY] is equal to 2, the following applies:</li>    </ul>    </li></ul></p><p id="p-0157" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00027" he="2.79mm" wi="18.03mm" file="US20230007256A1-20230105-P00027.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0158" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>CbCr</sub>&#x2003;&#x2003;(1130)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0131" list-style="none">    <li id="ul0131-0001" num="0000">    <ul id="ul0132" list-style="none">        <li id="ul0132-0001" num="0318">Otherwise, if cIdx is equal to 1, the following applies:</li>    </ul>    </li></ul></p><p id="p-0159" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00028" he="2.79mm" wi="18.03mm" file="US20230007256A1-20230105-P00028.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0160" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Cb</sub>&#x2003;&#x2003;(1131)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0133" list-style="none">    <li id="ul0133-0001" num="0000">    <ul id="ul0134" list-style="none">        <li id="ul0134-0001" num="0319">Otherwise (cIdx is equal to 2), the following applies:</li>    </ul>    </li></ul></p><p id="p-0161" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00029" he="2.79mm" wi="18.03mm" file="US20230007256A1-20230105-P00029.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0162" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Cr</sub>&#x2003;&#x2003;(1132)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0163" num="0000">The quantization parameter qP is modified and the variables rectNonTsFlag and bdShift are derived as follows:<ul id="ul0135" list-style="none">    <li id="ul0135-0001" num="0000">    <ul id="ul0136" list-style="none">        <li id="ul0136-0001" num="0320">If transform_skip_flag[xTbY][yTbY][cIdx] is equal to 0, the following applies:</li>    </ul>    </li></ul></p><p id="p-0164" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=qP&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?5:0)&#x2003;&#x2003;(1133)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0165" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00030" he="2.79mm" wi="35.98mm" file="US20230007256A1-20230105-P00030.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00031" he="2.79mm" wi="40.56mm" file="US20230007256A1-20230105-P00031.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0166" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>rectNon<i>Ts</i>Flag=(((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))&#x26;1)==1)?1:0&#x2003;&#x2003;(1134)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0167" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Shift=BitDepth+rectNon<i>Ts</i>Flag+((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))/2)&#x2212;5+pic_dep_quant_enabled_flag&#x2003;&#x2003;(1135)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0137" list-style="none">    <li id="ul0137-0001" num="0000">    <ul id="ul0138" list-style="none">        <li id="ul0138-0001" num="0321">Otherwise (transform_skip_flag[xTbY][yTbY][cIdx] is equal to 1), the following applies:</li>    </ul>    </li></ul></p><p id="p-0168" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Max(QpPrime<i>Ts </i>Min,qP)&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?5:0)&#x2003;&#x2003; (1136)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0169" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00032" he="2.79mm" wi="33.53mm" file="US20230007256A1-20230105-P00032.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00033" he="2.79mm" wi="29.63mm" file="US20230007256A1-20230105-P00033.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00034" he="2.79mm" wi="25.74mm" file="US20230007256A1-20230105-P00034.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00035" he="2.79mm" wi="3.22mm" file="US20230007256A1-20230105-P00035.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0170" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>rectNon<i>Ts</i>Flag=0&#x2003;&#x2003;(1137)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0171" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Shift=10&#x2003;&#x2003;(1138)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0172" num="0000">The variable bdOffset is derived as follows:</p><p id="p-0173" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Offset=(1<i>&#x3c;&#x3c;bd</i>Shift)&#x3e;&#x3e;1&#x2003;&#x2003;(1139)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0174" num="0000">The list levelScale[ ][ ] is specified as levelScale[j][k]={{40, 45, 51, 57, 64, 72}, {57, 64, 72, 80, 90, 102}} with j=0 . . . 1, k=0 . . . 5.<br/>. . . .</p><heading id="h-0042" level="1">5.8. Embodiment #8</heading><heading id="h-0043" level="2">8.7.3 Scaling Process for Transform Coefficients</heading><p id="p-0175" num="0000"><ul id="ul0139" list-style="none">    <li id="ul0139-0001" num="0322">Inputs to this process are:    <ul id="ul0140" list-style="none">        <li id="ul0140-0001" num="0323">a luma location (xTbY, yTbY) specifying the top-left sample of the current luma transform block relative to the top-left luma sample of the current picture,</li>        <li id="ul0140-0002" num="0324">a variable nTbW specifying the transform block width,</li>        <li id="ul0140-0003" num="0325">a variable nTbH specifying the transform block height,</li>        <li id="ul0140-0004" num="0326">a variable predMode specifying the prediction mode of the coding unit,</li>        <li id="ul0140-0005" num="0327">a variable cIdx specifying the colour component of the current block.</li>    </ul>    </li>    <li id="ul0139-0002" num="0328">Output of this process is the (nTbW)&#xd7;(nTbH) array d of scaled transform coefficients with elements d[x][y].    <ul id="ul0141" list-style="none">        <li id="ul0141-0001" num="0329">If cIdx is equal to 0, the following applies:</li>    </ul>    </li></ul></p><p id="p-0176" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Y</sub>&#x2003;&#x2003;(1129)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0177" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00036" he="2.79mm" wi="37.42mm" file="US20230007256A1-20230105-P00036.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00037" he="3.22mm" wi="40.56mm" file="US20230007256A1-20230105-P00037.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0142" list-style="none">    <li id="ul0142-0001" num="0000">    <ul id="ul0143" list-style="none">        <li id="ul0143-0001" num="0330">Otherwise, if TuCResMode[xTbY][yTbY] is equal to 2, the following applies:        <ul id="ul0144" list-style="none">            <li id="ul0144-0001" num="0331"><img id="CUSTOM-CHARACTER-00038" he="2.79mm" wi="36.66mm" file="US20230007256A1-20230105-P00038.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00039" he="2.79mm" wi="20.49mm" file="US20230007256A1-20230105-P00039.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00040" he="2.79mm" wi="22.61mm" file="US20230007256A1-20230105-P00040.TIF" alt="custom-character" img-content="character" img-format="tif"/></li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0178" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00041" he="2.79mm" wi="29.97mm" file="US20230007256A1-20230105-P00041.TIF" alt="custom-character" img-content="character" img-format="tif"/>,<img id="CUSTOM-CHARACTER-00042" he="2.79mm" wi="34.54mm" file="US20230007256A1-20230105-P00042.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00043" he="2.79mm" wi="14.48mm" file="US20230007256A1-20230105-P00043.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0145" list-style="none">    <li id="ul0145-0001" num="0000">    <ul id="ul0146" list-style="none">        <li id="ul0146-0001" num="0000">        <ul id="ul0147" list-style="none">            <li id="ul0147-0001" num="0332"><img id="CUSTOM-CHARACTER-00044" he="2.79mm" wi="14.14mm" file="US20230007256A1-20230105-P00044.TIF" alt="custom-character" img-content="character" img-format="tif"/></li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0179" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>CbCr</sub>&#x2003;&#x2003;(1130)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0148" list-style="none">    <li id="ul0148-0001" num="0000">    <ul id="ul0149" list-style="none">        <li id="ul0149-0001" num="0333">Otherwise, if cIdx is equal to 1, the following applies:        <ul id="ul0150" list-style="none">            <li id="ul0150-0001" num="0334"><img id="CUSTOM-CHARACTER-00045" he="3.22mm" wi="55.37mm" file="US20230007256A1-20230105-P00045.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00046" he="3.22mm" wi="16.26mm" file="US20230007256A1-20230105-P00046.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00047" he="3.56mm" wi="28.62mm" file="US20230007256A1-20230105-P00047.TIF" alt="custom-character" img-content="character" img-format="tif"/></li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0180" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00048" he="3.22mm" wi="38.10mm" file="US20230007256A1-20230105-P00048.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00049" he="3.22mm" wi="36.66mm" file="US20230007256A1-20230105-P00049.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00050" he="3.22mm" wi="18.71mm" file="US20230007256A1-20230105-P00050.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0151" list-style="none">    <li id="ul0151-0001" num="0000">    <ul id="ul0152" list-style="none">        <li id="ul0152-0001" num="0000">        <ul id="ul0153" list-style="none">            <li id="ul0153-0001" num="0335"><img id="CUSTOM-CHARACTER-00051" he="3.56mm" wi="16.93mm" file="US20230007256A1-20230105-P00051.TIF" alt="custom-character" img-content="character" img-format="tif"/></li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0181" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Cb</sub>&#x2003;&#x2003;(1131)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0154" list-style="none">    <li id="ul0154-0001" num="0000">    <ul id="ul0155" list-style="none">        <li id="ul0155-0001" num="0336">Otherwise (cIdx is equal to 2), the following applies:        <ul id="ul0156" list-style="none">            <li id="ul0156-0001" num="0337"><img id="CUSTOM-CHARACTER-00052" he="3.22mm" wi="55.37mm" file="US20230007256A1-20230105-P00052.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00053" he="3.56mm" wi="15.92mm" file="US20230007256A1-20230105-P00053.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00054" he="3.22mm" wi="28.62mm" file="US20230007256A1-20230105-P00054.TIF" alt="custom-character" img-content="character" img-format="tif"/></li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0182" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00055" he="3.22mm" wi="54.02mm" file="US20230007256A1-20230105-P00055.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00056" he="3.22mm" wi="54.02mm" file="US20230007256A1-20230105-P00056.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0157" list-style="none">    <li id="ul0157-0001" num="0000">    <ul id="ul0158" list-style="none">        <li id="ul0158-0001" num="0000">        <ul id="ul0159" list-style="none">            <li id="ul0159-0001" num="0338"><img id="CUSTOM-CHARACTER-00057" he="3.56mm" wi="16.93mm" file="US20230007256A1-20230105-P00057.TIF" alt="custom-character" img-content="character" img-format="tif"/></li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0183" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Cr</sub>&#x2003;&#x2003;(1132)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0184" num="0000">The quantization parameter qP is modified and the variables rectNonTsFlag and bdShift are derived as follows:<ul id="ul0160" list-style="none">    <li id="ul0160-0001" num="0000">    <ul id="ul0161" list-style="none">        <li id="ul0161-0001" num="0339">If transform_skip_flag[xTbY][yTbY][cIdx] is equal to 0, the following applies:</li>    </ul>    </li></ul></p><p id="p-0185" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=qP&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?5:0)&#x2003;&#x2003;(1133)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0186" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>rectNon<i>Ts</i>Flag=(((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))&#x26;1)==1)?1:0&#x2003;&#x2003;(1134)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0187" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Shift=BitDepth+rectNon<i>Ts</i>Flag+((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))/2)&#x2212;5+pic_dep_quant_enabled_flag&#x2003;&#x2003;(1135)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0162" list-style="none">    <li id="ul0162-0001" num="0000">    <ul id="ul0163" list-style="none">        <li id="ul0163-0001" num="0340">Otherwise (transform_skip_flag[xTbY][yTbY][cIdx] is equal to 1), the following applies:</li>    </ul>    </li></ul></p><p id="p-0188" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Max(QpPrime<i>Ts </i>Min,qP)&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?5:0)&#x2003;&#x2003; (1136)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0189" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00058" he="3.22mm" wi="42.33mm" file="US20230007256A1-20230105-P00058.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0190" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>rectNon<i>Ts</i>Flag=0&#x2003;&#x2003;(1137)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0191" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Shift=10&#x2003;&#x2003;(1138)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0192" num="0000">The variable bdOffset is derived as follows:</p><p id="p-0193" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Offset=(1<i>&#x3c;&#x3c;bd</i>Shift)&#x3e;&#x3e;1&#x2003;&#x2003;(1139)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0194" num="0000">The list levelScale[ ][ ] is specified as levelScale[j][k]={{40, 45, 51, 57, 64, 72}, {57, 64, 72, 80, 90, 102}} with j=0 . . . 1, k=0 . . . 5.<br/>. . . .</p><heading id="h-0044" level="1">5.9. Embodiment #9</heading><heading id="h-0045" level="2">7.4.3.4 Picture Parameter Set RBSP Semantics</heading><p id="p-0195" num="0341"><img id="CUSTOM-CHARACTER-00059" he="3.56mm" wi="35.98mm" file="US20230007256A1-20230105-P00059.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00060" he="3.56mm" wi="38.44mm" file="US20230007256A1-20230105-P00060.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00061" he="3.56mm" wi="47.24mm" file="US20230007256A1-20230105-P00061.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00062" he="3.89mm" wi="41.99mm" file="US20230007256A1-20230105-P00062.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00063" he="3.56mm" wi="38.44mm" file="US20230007256A1-20230105-P00063.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00064" he="3.56mm" wi="44.11mm" file="US20230007256A1-20230105-P00064.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00065" he="3.89mm" wi="44.79mm" file="US20230007256A1-20230105-P00065.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00066" he="3.56mm" wi="47.24mm" file="US20230007256A1-20230105-P00066.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00067" he="3.89mm" wi="30.73mm" file="US20230007256A1-20230105-P00067.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00068" he="3.56mm" wi="15.49mm" file="US20230007256A1-20230105-P00068.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00069" he="3.56mm" wi="37.08mm" file="US20230007256A1-20230105-P00069.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00070" he="3.22mm" wi="39.20mm" file="US20230007256A1-20230105-P00070.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00071" he="3.56mm" wi="24.38mm" file="US20230007256A1-20230105-P00071.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00072" he="3.22mm" wi="5.33mm" file="US20230007256A1-20230105-P00072.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00073" he="3.22mm" wi="46.57mm" file="US20230007256A1-20230105-P00073.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00074" he="3.56mm" wi="17.61mm" file="US20230007256A1-20230105-P00074.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00075" he="3.22mm" wi="53.59mm" file="US20230007256A1-20230105-P00075.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00076" he="3.56mm" wi="37.08mm" file="US20230007256A1-20230105-P00076.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00077" he="3.22mm" wi="36.66mm" file="US20230007256A1-20230105-P00077.TIF" alt="custom-character" img-content="character" img-format="tif"/>.<br/><img id="CUSTOM-CHARACTER-00078" he="3.56mm" wi="43.43mm" file="US20230007256A1-20230105-P00078.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00079" he="3.56mm" wi="31.07mm" file="US20230007256A1-20230105-P00079.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00080" he="3.22mm" wi="20.49mm" file="US20230007256A1-20230105-P00080.TIF" alt="custom-character" img-content="character" img-format="tif"/>.<br/><img id="CUSTOM-CHARACTER-00081" he="3.22mm" wi="41.99mm" file="US20230007256A1-20230105-P00081.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00082" he="3.22mm" wi="33.19mm" file="US20230007256A1-20230105-P00082.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00083" he="3.22mm" wi="27.18mm" file="US20230007256A1-20230105-P00083.TIF" alt="custom-character" img-content="character" img-format="tif"/><br/><img id="CUSTOM-CHARACTER-00084" he="3.22mm" wi="41.66mm" file="US20230007256A1-20230105-P00084.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00085" he="3.22mm" wi="33.19mm" file="US20230007256A1-20230105-P00085.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00086" he="3.22mm" wi="26.84mm" file="US20230007256A1-20230105-P00086.TIF" alt="custom-character" img-content="character" img-format="tif"/><br/><img id="CUSTOM-CHARACTER-00087" he="3.22mm" wi="45.55mm" file="US20230007256A1-20230105-P00087.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00088" he="3.22mm" wi="33.19mm" file="US20230007256A1-20230105-P00088.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00089" he="3.22mm" wi="27.18mm" file="US20230007256A1-20230105-P00089.TIF" alt="custom-character" img-content="character" img-format="tif"/>.</p><heading id="h-0046" level="2">8.7.3 Scaling Process for Transform Coefficients</heading><p id="p-0196" num="0000"><ul id="ul0164" list-style="none">    <li id="ul0164-0001" num="0342">Inputs to this process are:    <ul id="ul0165" list-style="none">        <li id="ul0165-0001" num="0343">a luma location (xTbY, yTbY) specifying the top-left sample of the current luma transform block relative to the top-left luma sample of the current picture,</li>        <li id="ul0165-0002" num="0344">a variable nTbW specifying the transform block width,</li>        <li id="ul0165-0003" num="0345">a variable nTbH specifying the transform block height,</li>        <li id="ul0165-0004" num="0346">a variable predMode specifying the prediction mode of the coding unit,</li>        <li id="ul0165-0005" num="0347">a variable cIdx specifying the colour component of the current block.</li>    </ul>    </li>    <li id="ul0164-0002" num="0348">Output of this process is the (nTbW)&#xd7;(nTbH) array d of scaled transform coefficients with elements d[x][y].    <ul id="ul0166" list-style="none">        <li id="ul0166-0001" num="0349">If cIdx is equal to 0, the following applies:</li>    </ul>    </li></ul></p><p id="p-0197" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00090" he="3.22mm" wi="42.67mm" file="US20230007256A1-20230105-P00090.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0198" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Y</sub>&#x2003;&#x2003;(1129)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0167" list-style="none">    <li id="ul0167-0001" num="0000">    <ul id="ul0168" list-style="none">        <li id="ul0168-0001" num="0350">Otherwise, if TuCResMode[xTbY][yTbY] is equal to 2, the following applies:</li>    </ul>    </li></ul></p><p id="p-0199" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00091" he="3.56mm" wi="47.67mm" file="US20230007256A1-20230105-P00091.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0200" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>CbCr</sub>&#x2003;&#x2003;(1130)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0169" list-style="none">    <li id="ul0169-0001" num="0000">    <ul id="ul0170" list-style="none">        <li id="ul0170-0001" num="0351">Otherwise, if cIdx is equal to 1, the following applies:</li>    </ul>    </li></ul></p><p id="p-0201" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00092" he="3.56mm" wi="44.45mm" file="US20230007256A1-20230105-P00092.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0202" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Cb</sub>&#x2003;&#x2003;(1131)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0171" list-style="none">    <li id="ul0171-0001" num="0000">    <ul id="ul0172" list-style="none">        <li id="ul0172-0001" num="0352">Otherwise (cIdx is equal to 2), the following applies:</li>    </ul>    </li></ul></p><p id="p-0203" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00093" he="3.22mm" wi="43.77mm" file="US20230007256A1-20230105-P00093.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0204" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Cr</sub>&#x2003;&#x2003;(1132)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0205" num="0000">The quantization parameter qP is modified and the variables rectNonTsFlag and bdShift are derived as follows:<ul id="ul0173" list-style="none">    <li id="ul0173-0001" num="0000">    <ul id="ul0174" list-style="none">        <li id="ul0174-0001" num="0353">If transform_skip_flag[xTbY][yTbY][cIdx] is equal to 0, the following applies:</li>    </ul>    </li></ul></p><p id="p-0206" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=qP&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?5:0)&#x2003;&#x2003;(1133)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0207" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00094" he="3.22mm" wi="15.49mm" file="US20230007256A1-20230105-P00094.TIF" alt="custom-character" img-content="character" img-format="tif"/>,<img id="CUSTOM-CHARACTER-00095" he="3.22mm" wi="62.06mm" file="US20230007256A1-20230105-P00095.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00096" he="3.22mm" wi="22.94mm" file="US20230007256A1-20230105-P00096.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0208" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>rectNon<i>Ts</i>Flag=(((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))&#x26;1)==1)?1:0&#x2003;&#x2003;(1134)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0209" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Shift=BitDepth+rectNon<i>Ts</i>Flag+((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))/2)&#x2212;5+pic_dep_quant_enabled_flag&#x2003;&#x2003;(1135)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0175" list-style="none">    <li id="ul0175-0001" num="0000">    <ul id="ul0176" list-style="none">        <li id="ul0176-0001" num="0354">Otherwise (transform_skip_flag[xTbY][yTbY][cIdx] is equal to 1), the following applies:</li>    </ul>    </li></ul></p><p id="p-0210" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Max(QpPrime<i>Ts </i>Min,qP)&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?5:0)&#x2003;&#x2003; (1136)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0211" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00097" he="3.22mm" wi="34.97mm" file="US20230007256A1-20230105-P00097.TIF" alt="custom-character" img-content="character" img-format="tif"/>,<img id="CUSTOM-CHARACTER-00098" he="3.22mm" wi="58.25mm" file="US20230007256A1-20230105-P00098.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00099" he="3.22mm" wi="16.59mm" file="US20230007256A1-20230105-P00099.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00100" he="3.22mm" wi="5.67mm" file="US20230007256A1-20230105-P00100.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0212" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>rectNon<i>Ts</i>Flag=0&#x2003;&#x2003;(1137)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0213" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Shift=10&#x2003;&#x2003;(1138)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0214" num="0000">The variable bdOffset is derived as follows:</p><p id="p-0215" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Offset=(1<i>&#x3c;&#x3c;bd</i>Shift)&#x3e;&#x3e;1&#x2003;&#x2003;(1139)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0216" num="0000">The list levelScale[ ][ ] is specified as levelScale[j][k]={{40, 45, 51, 57, 64, 72}, {57, 64, 72, 80, 90, 102}} with j=0 . . . 1, k=0 . . . 5.</p><heading id="h-0047" level="1">5.10. Embodiment #10</heading><heading id="h-0048" level="2">7.4.3.4 Picture Parameter Set RBSP Semantics</heading><p id="p-0217" num="0355"><img id="CUSTOM-CHARACTER-00101" he="3.56mm" wi="35.64mm" file="US20230007256A1-20230105-P00101.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00102" he="3.22mm" wi="37.42mm" file="US20230007256A1-20230105-P00102.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00103" he="3.22mm" wi="44.45mm" file="US20230007256A1-20230105-P00103.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00104" he="3.22mm" wi="40.89mm" file="US20230007256A1-20230105-P00104.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00105" he="2.46mm" wi="33.19mm" file="US20230007256A1-20230105-P00105.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00106" he="2.46mm" wi="22.61mm" file="US20230007256A1-20230105-P00106.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00107" he="2.46mm" wi="34.54mm" file="US20230007256A1-20230105-P00107.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00108" he="2.46mm" wi="36.32mm" file="US20230007256A1-20230105-P00108.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00109" he="2.46mm" wi="23.62mm" file="US20230007256A1-20230105-P00109.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00110" he="2.46mm" wi="12.36mm" file="US20230007256A1-20230105-P00110.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00111" he="2.46mm" wi="34.97mm" file="US20230007256A1-20230105-P00111.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00112" he="2.46mm" wi="18.37mm" file="US20230007256A1-20230105-P00112.TIF" alt="custom-character" img-content="character" img-format="tif"/>. <img id="CUSTOM-CHARACTER-00113" he="2.46mm" wi="18.71mm" file="US20230007256A1-20230105-P00113.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00114" he="2.79mm" wi="3.56mm" file="US20230007256A1-20230105-P00114.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00115" he="2.79mm" wi="22.27mm" file="US20230007256A1-20230105-P00115.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00116" he="2.79mm" wi="23.28mm" file="US20230007256A1-20230105-P00116.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00117" he="2.79mm" wi="28.96mm" file="US20230007256A1-20230105-P00117.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00118" he="2.79mm" wi="6.35mm" file="US20230007256A1-20230105-P00118.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00119" he="2.79mm" wi="28.96mm" file="US20230007256A1-20230105-P00119.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00120" he="3.22mm" wi="36.66mm" file="US20230007256A1-20230105-P00120.TIF" alt="custom-character" img-content="character" img-format="tif"/>.<br/><img id="CUSTOM-CHARACTER-00121" he="3.56mm" wi="43.77mm" file="US20230007256A1-20230105-P00121.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00122" he="3.22mm" wi="35.31mm" file="US20230007256A1-20230105-P00122.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00123" he="3.56mm" wi="21.17mm" file="US20230007256A1-20230105-P00123.TIF" alt="custom-character" img-content="character" img-format="tif"/>.<br/><img id="CUSTOM-CHARACTER-00124" he="3.56mm" wi="45.89mm" file="US20230007256A1-20230105-P00124.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00125" he="3.56mm" wi="37.76mm" file="US20230007256A1-20230105-P00125.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00126" he="3.22mm" wi="21.51mm" file="US20230007256A1-20230105-P00126.TIF" alt="custom-character" img-content="character" img-format="tif"/>.<br/><img id="CUSTOM-CHARACTER-00127" he="3.56mm" wi="41.99mm" file="US20230007256A1-20230105-P00127.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00128" he="3.22mm" wi="35.31mm" file="US20230007256A1-20230105-P00128.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00129" he="3.22mm" wi="26.50mm" file="US20230007256A1-20230105-P00129.TIF" alt="custom-character" img-content="character" img-format="tif"/>.<br/><img id="CUSTOM-CHARACTER-00130" he="3.56mm" wi="45.89mm" file="US20230007256A1-20230105-P00130.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00131" he="3.56mm" wi="38.10mm" file="US20230007256A1-20230105-P00131.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00132" he="3.56mm" wi="21.84mm" file="US20230007256A1-20230105-P00132.TIF" alt="custom-character" img-content="character" img-format="tif"/>.</p><heading id="h-0049" level="2">8.7.3 Scaling Process for Transform Coefficients</heading><p id="p-0218" num="0000"><ul id="ul0177" list-style="none">    <li id="ul0177-0001" num="0356">Inputs to this process are:    <ul id="ul0178" list-style="none">        <li id="ul0178-0001" num="0357">a luma location (xTbY, yTbY) specifying the top-left sample of the current luma transform block relative to the top-left luma sample of the current picture,</li>        <li id="ul0178-0002" num="0358">a variable nTbW specifying the transform block width,</li>        <li id="ul0178-0003" num="0359">a variable nTbH specifying the transform block height,</li>        <li id="ul0178-0004" num="0360">a variable predMode specifying the prediction mode of the coding unit,</li>        <li id="ul0178-0005" num="0361">a variable cIdx specifying the colour component of the current block.</li>    </ul>    </li>    <li id="ul0177-0002" num="0362">Output of this process is the (nTbW)&#xd7;(nTbH) array d of scaled transform coefficients with elements d[x][y].    <ul id="ul0179" list-style="none">        <li id="ul0179-0001" num="0363">If cIdx is equal to 0, the following applies:</li>    </ul>    </li></ul></p><p id="p-0219" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<i>Y</i>&#x2003;&#x2003;(1129)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0220" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00133" he="3.89mm" wi="57.49mm" file="US20230007256A1-20230105-P00133.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00134" he="3.56mm" wi="53.26mm" file="US20230007256A1-20230105-P00134.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0180" list-style="none">    <li id="ul0180-0001" num="0000">    <ul id="ul0181" list-style="none">        <li id="ul0181-0001" num="0364">Otherwise, if TuCResMode[xTbY][yTbY] is equal to 2, the following applies:        <ul id="ul0182" list-style="none">            <li id="ul0182-0001" num="0365"><img id="CUSTOM-CHARACTER-00135" he="3.56mm" wi="57.49mm" file="US20230007256A1-20230105-P00135.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00136" he="3.22mm" wi="45.89mm" file="US20230007256A1-20230105-P00136.TIF" alt="custom-character" img-content="character" img-format="tif"/></li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0221" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00137" he="3.22mm" wi="55.37mm" file="US20230007256A1-20230105-P00137.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00138" he="3.56mm" wi="59.27mm" file="US20230007256A1-20230105-P00138.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00139" he="3.22mm" wi="44.79mm" file="US20230007256A1-20230105-P00139.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0183" list-style="none">    <li id="ul0183-0001" num="0000">    <ul id="ul0184" list-style="none">        <li id="ul0184-0001" num="0000">        <ul id="ul0185" list-style="none">            <li id="ul0185-0001" num="0366"><img id="CUSTOM-CHARACTER-00140" he="3.56mm" wi="18.37mm" file="US20230007256A1-20230105-P00140.TIF" alt="custom-character" img-content="character" img-format="tif"/></li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0222" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>CbCr</sub>&#x2003;&#x2003;(1130)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0186" list-style="none">    <li id="ul0186-0001" num="0000">    <ul id="ul0187" list-style="none">        <li id="ul0187-0001" num="0367">Otherwise, if cIdx is equal to 1, the following applies:        <ul id="ul0188" list-style="none">            <li id="ul0188-0001" num="0368"><img id="CUSTOM-CHARACTER-00141" he="3.56mm" wi="57.15mm" file="US20230007256A1-20230105-P00141.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00142" he="3.22mm" wi="15.92mm" file="US20230007256A1-20230105-P00142.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00143" he="3.56mm" wi="29.29mm" file="US20230007256A1-20230105-P00143.TIF" alt="custom-character" img-content="character" img-format="tif"/></li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0223" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00144" he="3.56mm" wi="55.03mm" file="US20230007256A1-20230105-P00144.TIF" alt="custom-character" img-content="character" img-format="tif"/>,<img id="CUSTOM-CHARACTER-00145" he="3.56mm" wi="57.15mm" file="US20230007256A1-20230105-P00145.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00146" he="3.89mm" wi="40.89mm" file="US20230007256A1-20230105-P00146.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0189" list-style="none">    <li id="ul0189-0001" num="0000">    <ul id="ul0190" list-style="none">        <li id="ul0190-0001" num="0000">        <ul id="ul0191" list-style="none">            <li id="ul0191-0001" num="0369"><img id="CUSTOM-CHARACTER-00147" he="3.22mm" wi="19.05mm" file="US20230007256A1-20230105-P00147.TIF" alt="custom-character" img-content="character" img-format="tif"/></li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0224" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Cb</sub>&#x2003;&#x2003;(1131)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0192" list-style="none">    <li id="ul0192-0001" num="0000">    <ul id="ul0193" list-style="none">        <li id="ul0193-0001" num="0370">Otherwise (cIdx is equal to 2), the following applies:        <ul id="ul0194" list-style="none">            <li id="ul0194-0001" num="0371"><img id="CUSTOM-CHARACTER-00148" he="3.56mm" wi="56.81mm" file="US20230007256A1-20230105-P00148.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00149" he="3.22mm" wi="15.92mm" file="US20230007256A1-20230105-P00149.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00150" he="3.22mm" wi="28.62mm" file="US20230007256A1-20230105-P00150.TIF" alt="custom-character" img-content="character" img-format="tif"/></li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0225" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00151" he="3.22mm" wi="37.76mm" file="US20230007256A1-20230105-P00151.TIF" alt="custom-character" img-content="character" img-format="tif"/>,<img id="CUSTOM-CHARACTER-00152" he="3.22mm" wi="35.64mm" file="US20230007256A1-20230105-P00152.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00153" he="3.22mm" wi="41.99mm" file="US20230007256A1-20230105-P00153.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0195" list-style="none">    <li id="ul0195-0001" num="0000">    <ul id="ul0196" list-style="none">        <li id="ul0196-0001" num="0000">        <ul id="ul0197" list-style="none">            <li id="ul0197-0001" num="0372"><img id="CUSTOM-CHARACTER-00154" he="2.79mm" wi="13.38mm" file="US20230007256A1-20230105-P00154.TIF" alt="custom-character" img-content="character" img-format="tif"/></li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0226" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Cr</sub>&#x2003;&#x2003;(1132)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0227" num="0000">The quantization parameter qP is modified and the variables rectNonTsFlag and bdShift are derived as follows:<ul id="ul0198" list-style="none">    <li id="ul0198-0001" num="0000">    <ul id="ul0199" list-style="none">        <li id="ul0199-0001" num="0373">If transform_skip_flag[xTbY][yTbY][cIdx] is equal to 0, the following applies:</li>    </ul>    </li></ul></p><p id="p-0228" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=qP&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?5:0)&#x2003;&#x2003;(1133)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0229" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>rectNon<i>Ts</i>Flag=(((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))&#x26;1)==1)?1:0&#x2003;&#x2003;(1134)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0230" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Shift=BitDepth+rectNon<i>Ts</i>Flag+((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))/2)&#x2212;5+pic_dep_quant_enabled_flag&#x2003;&#x2003;(1135)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0200" list-style="none">    <li id="ul0200-0001" num="0000">    <ul id="ul0201" list-style="none">        <li id="ul0201-0001" num="0374">Otherwise (transform_skip_flag[xTbY][yTbY][cIdx] is equal to 1), the following applies:</li>    </ul>    </li></ul></p><p id="p-0231" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Max(QpPrime<i>Ts </i>Min,qP)&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?5:0)&#x2003;&#x2003; (1136)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0232" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00155" he="3.22mm" wi="41.99mm" file="US20230007256A1-20230105-P00155.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0233" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>rectNon<i>Ts</i>Flag=0&#x2003;&#x2003;(1137)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0234" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Shift=10&#x2003;&#x2003;(1138)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0235" num="0000">The variable bdOffset is derived as follows:</p><p id="p-0236" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Offset=(1<i>&#x3c;&#x3c;bd</i>Shift)&#x3e;&#x3e;1&#x2003;&#x2003;(1139)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0237" num="0000">The list levelScale[ ][ ] is specified as levelScale[j][k]={{40, 45, 51, 57, 64, 72}, {57, 64, 72, 80, 90, 102}} with j=0 . . . 1, k=0 . . . 5.<br/>. . . .</p><heading id="h-0050" level="1">5.11. Embodiment #11</heading><heading id="h-0051" level="2">Syntax Change in PPS:</heading><p id="p-0238" num="0375"></p><p id="p-0239" num="0000"><tables id="TABLE-US-00007" num="00007"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="189pt" align="left"/><colspec colname="2" colwidth="28pt" align="center"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>act enabled flag</entry><entry>u(1)</entry></row><row><entry>if( act_enabled_flag ) {</entry><entry/></row><row><entry>&#x2003;<img id="CUSTOM-CHARACTER-00156" he="2.79mm" wi="41.32mm" file="US20230007256A1-20230105-P00156.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry>u(1)</entry></row><row><entry>&#x2003;<img id="CUSTOM-CHARACTER-00157" he="2.46mm" wi="24.72mm" file="US20230007256A1-20230105-P00157.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry>se(v)</entry></row><row><entry>&#x2003;<img id="CUSTOM-CHARACTER-00158" he="2.79mm" wi="26.08mm" file="US20230007256A1-20230105-P00158.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry>se(v)</entry></row><row><entry>&#x2003;<img id="CUSTOM-CHARACTER-00159" he="2.46mm" wi="25.74mm" file="US20230007256A1-20230105-P00159.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry>se(v)</entry></row><row><entry>&#x2003;<img id="CUSTOM-CHARACTER-00160" he="2.79mm" wi="27.86mm" file="US20230007256A1-20230105-P00160.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry>u(1)</entry></row><row><entry>&#x2003;&#x2003;if( pps_joint_cbcr_qp_offset_present_flag &#x26;&#x26; joint_cbcr_</entry><entry/></row><row><entry>&#x2003;&#x2003;enabled_flag)</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;<img id="CUSTOM-CHARACTER-00161" he="2.46mm" wi="23.62mm" file="US20230007256A1-20230105-P00161.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry>se(v)</entry></row><row><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><heading id="h-0052" level="2">Syntax Change in Slice Header:</heading><p id="p-0240" num="0376"></p><p id="p-0241" num="0000"><tables id="TABLE-US-00008" num="00008"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="196pt" align="left"/><colspec colname="2" colwidth="21pt" align="center"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;if(pps_slice_act_qp_offset_present_flag &#x26;&#x26; !( slicetype == I &#x26;&#x26;</entry><entry/></row><row><entry>qtbtt_dual_tree_intra_flag) ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;<img id="CUSTOM-CHARACTER-00162" he="2.79mm" wi="26.08mm" file="US20230007256A1-20230105-P00162.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry>se(v)</entry></row><row><entry>&#x2003;&#x2003;<img id="CUSTOM-CHARACTER-00163" he="2.46mm" wi="26.84mm" file="US20230007256A1-20230105-P00163.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry>se(v)</entry></row><row><entry>&#x2003;&#x2003;<img id="CUSTOM-CHARACTER-00164" he="2.46mm" wi="26.08mm" file="US20230007256A1-20230105-P00164.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry>se(v)</entry></row><row><entry>&#x2003;&#x2003;if( pps_joint_cbcr_qp_offset_present_flag &#x26;&#x26;</entry><entry/></row><row><entry>sps_joint_cbcr_enabled_flag)</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;<img id="CUSTOM-CHARACTER-00165" he="2.79mm" wi="31.41mm" file="US20230007256A1-20230105-P00165.TIF" alt="custom-character" img-content="character" img-format="tif"/> </entry><entry>se(v)</entry></row><row><entry>&#x2003;}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>pps_act_y_qp_offset, pps_act_cb_qp_offset, pps_act_cr_qp_offset and pps_act_cbcr_qp_offset specify the offsets to quantization parameter Qp&#x2032;Y, Qp&#x2032;Cb, Qp&#x2032;Cr and Qp&#x2032;CbCr, respectively, when cu_act_enabled_flag is 1. The values of pps_act_y_qp_offset, pps_act_cb_qp_offset and pps_act_cr_qp_offset may be in the range of &#x2212;12 to +12, inclusive. When not present, the values of pps_act_y_qp_offset, pps_act_cb_qp_offset and pps_act_cr_qp_offset are inferred to be equal to 0.<br/>pps_slice_act_qp_offsets_present_flag equal to 1 specifies that slice_act_y_qp_offset, slice_act_cb_qp_offset, slice_act_cr_qp_offset, slice_act_cbcr_qp_offset are present in the slice header. pps_slice_act_qp_offsets_present_flag equal to 0 specifies that slice_act_y_qp_offset, slice_act_cb_qp_offset, slice_act_cr_qp_offset, slice_act_cbcr_qp_offset are not present in the slice header. When not present, the value of pps_slice_act_qp_offsets_present_flag is inferred to be equal to 0.<br/>slice_act_y_qp_offset, slice_act_cb_qp_offset, slice_act_cr_qp_offset and slice_act_cbcr_qp_offset specify the offsets when determining the value of the Qp&#x2032;Y, Qp&#x2032;Cb, Qp&#x2032;Cr and Qp&#x2032;CbCr quantization parameter. The values of slice_act_y_qp_offset, slice_act_cb_qp_offset, slice_act_cr_qp_offset and slice_act_cbcr_qp_offset may be in the range of &#x2212;12 to +12, inclusive. When not present, the values are inferred to be equal to 0.</p><heading id="h-0053" level="2">8.7.1 Derivation Process for Quantization Parameters</heading><p id="p-0242" num="0377">. . .<ul id="ul0202" list-style="none">    <li id="ul0202-0001" num="0000">    <ul id="ul0203" list-style="none">        <li id="ul0203-0001" num="0378">The variable Qp<sub>Y </sub>is derived as follows:</li>    </ul>    </li></ul></p><p id="p-0243" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Qp<sub>Y</sub>=((qP<sub>Y_PRED</sub><i>+Cu</i>QpDeltaVal+<img id="CUSTOM-CHARACTER-00166" he="3.22mm" wi="56.47mm" file="US20230007256A1-20230105-P00166.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00167" he="3.22mm" wi="29.97mm" file="US20230007256A1-20230105-P00167.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00168" he="3.22mm" wi="31.07mm" file="US20230007256A1-20230105-P00168.TIF" alt="custom-character" img-content="character" img-format="tif"/>+64+2*Qp<i>Bd</i>Offset)%(64+Qp<i>Bd</i>Offset))&#x2212;Qp<i>Bd</i>Offset&#x2003;&#x2003;(1116)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0204" list-style="none">    <li id="ul0204-0001" num="0000">    <ul id="ul0205" list-style="none">        <li id="ul0205-0001" num="0379">The luma quantization parameter Qp&#x2032;<sub>Y </sub>is derived as follows:</li>    </ul>    </li></ul></p><p id="p-0244" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Qp&#x2032;<sub>Y</sub>=Qp<sub>Y</sub>+Qp<i>Bd</i>Offset&#x2003;&#x2003;(1117)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0206" list-style="none">    <li id="ul0206-0001" num="0000">    <ul id="ul0207" list-style="none">        <li id="ul0207-0001" num="0380">When ChromaArrayType is not equal to 0 and treeType is equal to SINGLE_TREE or DUAL_TREE_CHROMA, the following applies:        <ul id="ul0208" list-style="none">            <li id="ul0208-0001" num="0381">When treeType is equal to DUAL_TREE_CHROMA, the variable Qp<sub>Y </sub>is set equal to the luma quantization parameter Qp<sub>Y </sub>of the luma coding unit that covers the luma location (xCb+cbWidth/2, yCb+cbHeight/2).</li>            <li id="ul0208-0002" num="0382">The variables qP<sub>Cb</sub>, qP<sub>Cr </sub>and qP<sub>CbCr </sub>are derived as follows:</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0245" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP<sub>Chroma</sub>=Clip3(&#x2212;Qp<i>Bd</i>Offset,63,Qp<sub>Y</sub>)&#x2003;&#x2003; (1118)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0246" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP<sub>Cb</sub>=ChromaQpTable[0][qP<sub>Chroma</sub>]&#x2003;&#x2003; (1119)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0247" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP<sub>Cr</sub>=ChromaQpTable[1][qP<sub>Chroma</sub>]&#x2003;&#x2003; (1120)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0248" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP<sub>CbCr</sub>=ChromaQpTable[2][qP<sub>Chroma</sub>]&#x2003;&#x2003; (1121)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0209" list-style="none">    <li id="ul0209-0001" num="0000">    <ul id="ul0210" list-style="none">        <li id="ul0210-0001" num="0000">        <ul id="ul0211" list-style="none">            <li id="ul0211-0001" num="0383">The chroma quantization parameters for the Cb and Cr components, Qp&#x2032;<sub>Cb </sub>and Qp&#x2032;<sub>Cr</sub>, and joint Cb-Cr coding Qp&#x2032;<sub>CbCr </sub>are derived as follows:</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0249" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Qp&#x2032;<sub>Cb</sub>=Clip3(&#x2212;Qp<i>Bd</i>Offset,63,qP<sub>Cb</sub>+pps_<i>cb</i>_qp_offset+slice_<i>cb</i>_qp_offset+<img id="CUSTOM-CHARACTER-00169" he="3.22mm" wi="58.93mm" file="US20230007256A1-20230105-P00169.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00170" he="3.22mm" wi="36.32mm" file="US20230007256A1-20230105-P00170.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00171" he="3.22mm" wi="30.73mm" file="US20230007256A1-20230105-P00171.TIF" alt="custom-character" img-content="character" img-format="tif"/>+Qp<i>Bd</i>Offset&#x2003;&#x2003;(1122)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0250" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Qp&#x2032;<sub>Cr</sub>=Clip3(&#x2212;Qp<i>Bd</i>Offset,63,qP<sub>Cr</sub>+pps_<i>cr</i>_qp_offset+slice_<i>cr</i>_qp_offset+<img id="CUSTOM-CHARACTER-00172" he="3.22mm" wi="58.93mm" file="US20230007256A1-20230105-P00172.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00173" he="3.22mm" wi="33.19mm" file="US20230007256A1-20230105-P00173.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00174" he="3.22mm" wi="29.63mm" file="US20230007256A1-20230105-P00174.TIF" alt="custom-character" img-content="character" img-format="tif"/>+Qp<i>Bd</i>Offset&#x2003;&#x2003;(1123)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0251" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Qp&#x2032;<sub>CbCr</sub>=Clip3(&#x2212;Qp<i>Bd</i>Offset,63,qP<sub>CbCr</sub>+pps_joint_<i>cbcr</i>_qp_offset+slice_joint_<i>cbcr</i>_qp_offset+<img id="CUSTOM-CHARACTER-00175" he="3.22mm" wi="65.28mm" file="US20230007256A1-20230105-P00175.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00176" he="3.22mm" wi="36.32mm" file="US20230007256A1-20230105-P00176.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00177" he="3.22mm" wi="32.85mm" file="US20230007256A1-20230105-P00177.TIF" alt="custom-character" img-content="character" img-format="tif"/>+<i>Cu</i>QpOffset<sub>CbCr</sub>)+Qp<i>Bd</i>Offset&#x2003;&#x2003; (1124)<?in-line-formulae description="In-line Formulae" end="tail"?></p><heading id="h-0054" level="2">8.7.3 Scaling Process for Transform Coefficients</heading><p id="p-0252" num="0384">. . .<br/><img id="CUSTOM-CHARACTER-00178" he="3.22mm" wi="33.87mm" file="US20230007256A1-20230105-P00178.TIF" alt="custom-character" img-content="character" img-format="tif"/> <img id="CUSTOM-CHARACTER-00179" he="3.22mm" wi="20.49mm" file="US20230007256A1-20230105-P00179.TIF" alt="custom-character" img-content="character" img-format="tif"/>.<br/>The quantization parameter qP is derived as follows:<ul id="ul0212" list-style="none">    <li id="ul0212-0001" num="0000">    <ul id="ul0213" list-style="none">        <li id="ul0213-0001" num="0385">If cIdx is equal to 0, the following applies:</li>    </ul>    </li></ul></p><p id="p-0253" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Y</sub>&#x2003;&#x2003;(1129)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0214" list-style="none">    <li id="ul0214-0001" num="0000">    <ul id="ul0215" list-style="none">        <li id="ul0215-0001" num="0386">Otherwise, if TuCResMode[xTbY][yTbY] is equal to 2, the following applies:</li>    </ul>    </li></ul></p><p id="p-0254" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>CbCr</sub>&#x2003;&#x2003;(1130)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0216" list-style="none">    <li id="ul0216-0001" num="0000">    <ul id="ul0217" list-style="none">        <li id="ul0217-0001" num="0387">Otherwise, if cIdx is equal to 1, the following applies:</li>    </ul>    </li></ul></p><p id="p-0255" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Cb</sub>&#x2003;&#x2003;(1131)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0218" list-style="none">    <li id="ul0218-0001" num="0000">    <ul id="ul0219" list-style="none">        <li id="ul0219-0001" num="0388">Otherwise (cIdx is equal to 2), the following applies:</li>    </ul>    </li></ul></p><p id="p-0256" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Qp&#x2032;<sub>Cr</sub>&#x2003;&#x2003;(1132)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0257" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00180" he="3.22mm" wi="21.51mm" file="US20230007256A1-20230105-P00180.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0220" list-style="none">    <li id="ul0220-0001" num="0000">    <ul id="ul0221" list-style="none">        <li id="ul0221-0001" num="0389">The quantization parameter qP is modified and the variables rectNonTsFlag and bdShift are derived as follows:</li>        <li id="ul0221-0002" num="0390">If transform_skip_flag[xTbY][yTbY][cIdx] is equal to 0, the following applies:</li>    </ul>    </li></ul></p><p id="p-0258" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=<img id="CUSTOM-CHARACTER-00181" he="3.22mm" wi="33.19mm" file="US20230007256A1-20230105-P00181.TIF" alt="custom-character" img-content="character" img-format="tif"/>,qP&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?<img id="CUSTOM-CHARACTER-00182" he="3.22mm" wi="16.93mm" file="US20230007256A1-20230105-P00182.TIF" alt="custom-character" img-content="character" img-format="tif"/>5:0)<img id="CUSTOM-CHARACTER-00183" he="3.22mm" wi="1.78mm" file="US20230007256A1-20230105-P00183.TIF" alt="custom-character" img-content="character" img-format="tif"/>&#x2003;&#x2003;(1133)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0259" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>rectNon<i>Ts</i>Flag=(((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))&#x26;1)==1)?1:0&#x2003;&#x2003; (1134)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0260" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>bd</i>Shift=BitDepth+rectNon<i>Ts</i>Flag+((Log 2(<i>nTbW</i>)+Log 2(<i>nTbH</i>))/2)&#x2212;5+pic_dep_quant_enabled_flag&#x2003;&#x2003;(1135)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0222" list-style="none">    <li id="ul0222-0001" num="0000">    <ul id="ul0223" list-style="none">        <li id="ul0223-0001" num="0391">Otherwise (transform_skip_flag[xTbY][yTbY][cIdx] is equal to 1), the following applies:</li>    </ul>    </li></ul></p><p id="p-0261" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>qP=Max(QpPrime<i>Ts </i>Min,qP)&#x2212;(<i>cu</i>_act_enabled_flag[<i>xTbY</i>][<i>yTbY</i>]?5:0)&#x2003;&#x2003;(1136)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0262" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00184" he="3.22mm" wi="48.01mm" file="US20230007256A1-20230105-P00184.TIF" alt="custom-character" img-content="character" img-format="tif"/>,<img id="CUSTOM-CHARACTER-00185" he="2.79mm" wi="9.91mm" file="US20230007256A1-20230105-P00185.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00186" he="3.22mm" wi="45.89mm" file="US20230007256A1-20230105-P00186.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00187" he="3.22mm" wi="29.63mm" file="US20230007256A1-20230105-P00187.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00188" he="3.22mm" wi="23.96mm" file="US20230007256A1-20230105-P00188.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00189" he="3.22mm" wi="19.39mm" file="US20230007256A1-20230105-P00189.TIF" alt="custom-character" img-content="character" img-format="tif"/><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0263" num="0392"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram showing an example video processing system <b>700</b> in which various techniques disclosed herein may be implemented. Various implementations may include some or all of the components of the system <b>700</b>. The system <b>700</b> may include input <b>702</b> for receiving video content. The video content may be received in a raw or uncompressed format, e.g., 8 or 10 bit multi-component pixel values, or may be in a compressed or encoded format. The input <b>702</b> may represent a network interface, a peripheral bus interface, or a storage interface. Examples of network interface include wired interfaces such as Ethernet, passive optical network (PON), etc. and wireless interfaces such as Wi-Fi or cellular interfaces.</p><p id="p-0264" num="0393">The system <b>700</b> may include a coding component <b>704</b> that may implement the various coding or encoding methods described in the present document. The coding component <b>704</b> may reduce the average bitrate of video from the input <b>702</b> to the output of the coding component <b>704</b> to produce a coded representation of the video. The coding techniques are therefore sometimes called video compression or video transcoding techniques. The output of the coding component <b>704</b> may be either stored, or transmitted via a communication connected, as represented by the component <b>706</b>. The stored or communicated bitstream (or coded) representation of the video received at the input <b>702</b> may be used by the component <b>708</b> for generating pixel values or displayable video that is sent to a display interface <b>710</b>. The process of generating user-viewable video from the bitstream representation is sometimes called video decompression. Furthermore, while certain video processing operations are referred to as &#x201c;coding&#x201d; operations or tools, it will be appreciated that the coding tools or operations are used at an encoder and corresponding decoding tools or operations that reverse the results of the coding will be performed by a decoder.</p><p id="p-0265" num="0394">Examples of a peripheral bus interface or a display interface may include universal serial bus (USB) or high definition multimedia interface (HDMI) or Displayport, and so on. Examples of storage interfaces include serial advanced technology attachment (SATA), peripheral component interconnect (PCI), integrated drive electronics (IDE) interface, and the like. The techniques described in the present document may be embodied in various electronic devices such as mobile phones, laptops, smartphones or other devices that are capable of performing digital data processing and/or video display.</p><p id="p-0266" num="0395"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram of a video processing apparatus <b>800</b>. The apparatus <b>800</b> may be used to implement one or more of the methods described herein. The apparatus <b>800</b> may be embodied in a smartphone, tablet, computer, Internet of Things (IoT) receiver, and so on. The apparatus <b>800</b> may include one or more processors <b>802</b>, one or more memories <b>804</b> and video processing hardware/circuitry <b>806</b>. The processor(s) <b>802</b> may be configured to implement one or more methods described in the present document (e.g., in <figref idref="DRAWINGS">FIGS. <b>5</b>A and <b>5</b>B</figref>). The memory (memories) <b>804</b> may be used for storing data and code used for implementing the methods and techniques described herein. The video processing hardware <b>806</b> may be used to implement, in hardware circuitry, some techniques described in the present document. In some embodiments, the hardware <b>806</b> may be partly or entirely in the processors <b>802</b>, e.g., a graphics processor.</p><p id="p-0267" num="0396"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a block diagram that illustrates an example video coding system <b>100</b> that may utilize the techniques of this disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref>, video coding system <b>100</b> may include a source device <b>110</b> and a destination device <b>120</b>. Source device <b>110</b> generates encoded video data which may be referred to as a video encoding device. Destination device <b>120</b> may decode the encoded video data generated by source device <b>110</b> which may be referred to as a video decoding device. Source device <b>110</b> may include a video source <b>112</b>, a video encoder <b>114</b>, and an input/output (I/O) interface <b>116</b>.</p><p id="p-0268" num="0397">Video source <b>112</b> may include a source such as a video capture device, an interface to receive video data from a video content provider, and/or a computer graphics system for generating video data, or a combination of such sources. The video data may comprise one or more pictures. Video encoder <b>114</b> encodes the video data from video source <b>112</b> to generate a bitstream. The bitstream may include a sequence of bits that form a coded representation of the video data. The bitstream may include coded pictures and associated data. The coded picture is a coded representation of a picture. The associated data may include sequence parameter sets, picture parameter sets, and other syntax structures. I/O interface <b>116</b> may include a modulator/demodulator (modem) and/or a transmitter. The encoded video data may be transmitted directly to destination device <b>120</b> via I/O interface <b>116</b> through network <b>130</b><i>a</i>. The encoded video data may also be stored onto a storage medium/server <b>130</b><i>b </i>for access by destination device <b>120</b>.</p><p id="p-0269" num="0398">Destination device <b>120</b> may include an I/O interface <b>126</b>, a video decoder <b>124</b>, and a display device <b>122</b>.</p><p id="p-0270" num="0399">I/O interface <b>126</b> may include a receiver and/or a modem. I/O interface <b>126</b> may acquire encoded video data from the source device <b>110</b> or the storage medium/server <b>130</b><i>b</i>. Video decoder <b>124</b> may decode the encoded video data. Display device <b>122</b> may display the decoded video data to a user. Display device <b>122</b> may be integrated with the destination device <b>120</b>, or may be external to destination device <b>120</b> which be configured to interface with an external display device.</p><p id="p-0271" num="0400">Video encoder <b>114</b> and video decoder <b>124</b> may operate according to a video compression standard, such as the High Efficiency Video Coding (HEVC) standard, Versatile Video Coding (VVM) standard and other current and/or further standards.</p><p id="p-0272" num="0401"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram illustrating an example of video encoder <b>200</b>, which may be video encoder <b>114</b> in the system <b>100</b> illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0273" num="0402">Video encoder <b>200</b> may be configured to perform any or all of the techniques of this disclosure. In the example of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, video encoder <b>200</b> includes a plurality of functional components. The techniques described in this disclosure may be shared among the various components of video encoder <b>200</b>. In some examples, a processor may be configured to perform any or all of the techniques described in this disclosure.</p><p id="p-0274" num="0403">The functional components of video encoder <b>200</b> may include a partition unit <b>201</b>, a predication unit <b>202</b> which may include a mode select unit <b>203</b>, a motion estimation unit <b>204</b>, a motion compensation unit <b>205</b>, an intra prediction unit <b>206</b>, a residual generation unit <b>207</b>, a transform unit <b>208</b>, a quantization unit <b>209</b>, an inverse quantization unit <b>210</b>, an inverse transform unit <b>211</b>, a reconstruction unit <b>212</b>, a buffer <b>213</b>, and an entropy encoding unit <b>214</b>.</p><p id="p-0275" num="0404">In other examples, video encoder <b>200</b> may include more, fewer, or different functional components. In an example, predication unit <b>202</b> may include an intra block copy (IBC) unit. The IBC unit may perform predication in an IBC mode in which at least one reference picture is a picture where the current video block is located.</p><p id="p-0276" num="0405">Furthermore, some components, such as motion estimation unit <b>204</b> and motion compensation unit <b>205</b> may be highly integrated, but are represented in the example of <figref idref="DRAWINGS">FIG. <b>10</b></figref> separately for purposes of explanation.</p><p id="p-0277" num="0406">Partition unit <b>201</b> may partition a picture into one or more video blocks. Video encoder <b>200</b> and video decoder <b>300</b> may support various video block sizes.</p><p id="p-0278" num="0407">Mode select unit <b>203</b> may select one of the coding modes, intra or inter, e.g., based on error results, and provide the resulting intra- or inter-coded block to a residual generation unit <b>207</b> to generate residual block data and to a reconstruction unit <b>212</b> to reconstruct the encoded block for use as a reference picture. In some example, Mode select unit <b>203</b> may select a combination of intra and inter predication (CIIP) mode in which the predication is based on an inter predication signal and an intra predication signal. Mode select unit <b>203</b> may also select a resolution for a motion vector (e.g., a sub-pixel or integer pixel precision) for the block in the case of inter-predication.</p><p id="p-0279" num="0408">To perform inter prediction on a current video block, motion estimation unit <b>204</b> may generate motion information for the current video block by comparing one or more reference frames from buffer <b>213</b> to the current video block. Motion compensation unit <b>205</b> may determine a predicted video block for the current video block based on the motion information and decoded samples of pictures from buffer <b>213</b> other than the picture associated with the current video block.</p><p id="p-0280" num="0409">Motion estimation unit <b>204</b> and motion compensation unit <b>205</b> may perform different operations for a current video block, for example, depending on whether the current video block is in an I slice, a P slice, or a B slice.</p><p id="p-0281" num="0410">In some examples, motion estimation unit <b>204</b> may perform uni-directional prediction for the current video block, and motion estimation unit <b>204</b> may search reference pictures of list <b>0</b> or list <b>1</b> for a reference video block for the current video block. Motion estimation unit <b>204</b> may then generate a reference index that indicates the reference picture in list <b>0</b> or list <b>1</b> that contains the reference video block and a motion vector that indicates a spatial displacement between the current video block and the reference video block. Motion estimation unit <b>204</b> may output the reference index, a prediction direction indicator, and the motion vector as the motion information of the current video block. Motion compensation unit <b>205</b> may generate the predicted video block of the current block based on the reference video block indicated by the motion information of the current video block.</p><p id="p-0282" num="0411">In other examples, motion estimation unit <b>204</b> may perform bi-directional prediction for the current video block, motion estimation unit <b>204</b> may search the reference pictures in list <b>0</b> for a reference video block for the current video block and may also search the reference pictures in list <b>1</b> for another reference video block for the current video block. Motion estimation unit <b>204</b> may then generate reference indexes that indicate the reference pictures in list <b>0</b> and list <b>1</b> containing the reference video blocks and motion vectors that indicate spatial displacements between the reference video blocks and the current video block. Motion estimation unit <b>204</b> may output the reference indexes and the motion vectors of the current video block as the motion information of the current video block. Motion compensation unit <b>205</b> may generate the predicted video block of the current video block based on the reference video blocks indicated by the motion information of the current video block.</p><p id="p-0283" num="0412">In some examples, motion estimation unit <b>204</b> may output a full set of motion information for decoding processing of a decoder.</p><p id="p-0284" num="0413">In some examples, motion estimation unit <b>204</b> may not output a full set of motion information for the current video. Rather, motion estimation unit <b>204</b> may signal the motion information of the current video block with reference to the motion information of another video block. For example, motion estimation unit <b>204</b> may determine that the motion information of the current video block is sufficiently similar to the motion information of a neighboring video block.</p><p id="p-0285" num="0414">In one example, motion estimation unit <b>204</b> may indicate, in a syntax structure associated with the current video block, a value that indicates to the video decoder <b>300</b> that the current video block has the same motion information as the other video block.</p><p id="p-0286" num="0415">In another example, motion estimation unit <b>204</b> may identify, in a syntax structure associated with the current video block, another video block and a motion vector difference (MVD). The motion vector difference indicates a difference between the motion vector of the current video block and the motion vector of the indicated video block. The video decoder <b>300</b> may use the motion vector of the indicated video block and the motion vector difference to determine the motion vector of the current video block.</p><p id="p-0287" num="0416">As discussed above, video encoder <b>200</b> may predictively signal the motion vector. Two examples of predictive signaling techniques that may be implemented by video encoder <b>200</b> include advanced motion vector predication (AMVP) and merge mode signaling.</p><p id="p-0288" num="0417">Intra prediction unit <b>206</b> may perform intra prediction on the current video block. When intra prediction unit <b>206</b> performs intra prediction on the current video block, intra prediction unit <b>206</b> may generate prediction data for the current video block based on decoded samples of other video blocks in the same picture. The prediction data for the current video block may include a predicted video block and various syntax elements.</p><p id="p-0289" num="0418">Residual generation unit <b>207</b> may generate residual data for the current video block by subtracting (e.g., indicated by the minus sign) the predicted video block(s) of the current video block from the current video block. The residual data of the current video block may include residual video blocks that correspond to different sample components of the samples in the current video block.</p><p id="p-0290" num="0419">In other examples, there may be no residual data for the current video block for the current video block, for example in a skip mode, and residual generation unit <b>207</b> may not perform the subtracting operation.</p><p id="p-0291" num="0420">Transform processing unit <b>208</b> may generate one or more transform coefficient video blocks for the current video block by applying one or more transforms to a residual video block associated with the current video block.</p><p id="p-0292" num="0421">After transform processing unit <b>208</b> generates a transform coefficient video block associated with the current video block, quantization unit <b>209</b> may quantize the transform coefficient video block associated with the current video block based on one or more quantization parameter (QP) values associated with the current video block.</p><p id="p-0293" num="0422">Inverse quantization unit <b>210</b> and inverse transform unit <b>211</b> may apply inverse quantization and inverse transforms to the transform coefficient video block, respectively, to reconstruct a residual video block from the transform coefficient video block. Reconstruction unit <b>212</b> may add the reconstructed residual video block to corresponding samples from one or more predicted video blocks generated by the predication unit <b>202</b> to produce a reconstructed video block associated with the current block for storage in the buffer <b>213</b>.</p><p id="p-0294" num="0423">After reconstruction unit <b>212</b> reconstructs the video block, loop filtering operation may be performed to reduce video blocking artifacts in the video block.</p><p id="p-0295" num="0424">Entropy encoding unit <b>214</b> may receive data from other functional components of the video encoder <b>200</b>. When entropy encoding unit <b>214</b> receives the data, entropy encoding unit <b>214</b> may perform one or more entropy encoding operations to generate entropy encoded data and output a bitstream that includes the entropy encoded data.</p><p id="p-0296" num="0425"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a block diagram illustrating an example of video decoder <b>300</b> which may be video decoder <b>114</b> in the system <b>100</b> illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0297" num="0426">The video decoder <b>300</b> may be configured to perform any or all of the techniques of this disclosure. In the example of <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the video decoder <b>300</b> includes a plurality of functional components. The techniques described in this disclosure may be shared among the various components of the video decoder <b>300</b>. In some examples, a processor may be configured to perform any or all of the techniques described in this disclosure.</p><p id="p-0298" num="0427">In the example of <figref idref="DRAWINGS">FIG. <b>11</b></figref>, video decoder <b>300</b> includes an entropy decoding unit <b>301</b>, a motion compensation unit <b>302</b>, an intra prediction unit <b>303</b>, an inverse quantization unit <b>304</b>, an inverse transformation unit <b>305</b>, and a reconstruction unit <b>306</b> and a buffer <b>307</b>. Video decoder <b>300</b> may, in some examples, perform a decoding pass generally reciprocal to the encoding pass described with respect to video encoder <b>200</b> (<figref idref="DRAWINGS">FIG. <b>10</b></figref>).</p><p id="p-0299" num="0428">Entropy decoding unit <b>301</b> may retrieve an encoded bitstream. The encoded bitstream may include entropy coded video data (e.g., encoded blocks of video data). Entropy decoding unit <b>301</b> may decode the entropy coded video data, and from the entropy decoded video data, motion compensation unit <b>302</b> may determine motion information including motion vectors, motion vector precision, reference picture list indexes, and other motion information. Motion compensation unit <b>302</b> may, for example, determine such information by performing the AMVP and merge mode.</p><p id="p-0300" num="0429">Motion compensation unit <b>302</b> may produce motion compensated blocks, possibly performing interpolation based on interpolation filters. Identifiers for interpolation filters to be used with sub-pixel precision may be included in the syntax elements.</p><p id="p-0301" num="0430">Motion compensation unit <b>302</b> may use interpolation filters as used by video encoder <b>200</b> during encoding of the video block to calculate interpolated values for sub-integer pixels of a reference block. Motion compensation unit <b>302</b> may determine the interpolation filters used by video encoder <b>200</b> according to received syntax information and use the interpolation filters to produce predictive blocks.</p><p id="p-0302" num="0431">Motion compensation unit <b>302</b> may use some of the syntax information to determine sizes of blocks used to encode frame(s) and/or slice(s) of the encoded video sequence, partition information that describes how each macroblock of a picture of the encoded video sequence is partitioned, modes indicating how each partition is encoded, one or more reference frames (and reference frame lists) for each inter-encoded block, and other information to decode the encoded video sequence.</p><p id="p-0303" num="0432">Intra prediction unit <b>303</b> may use intra prediction modes for example received in the bitstream to form a prediction block from spatially adjacent blocks. Inverse quantization unit <b>304</b> inverse quantizes, i.e., de-quantizes, the quantized video block coefficients provided in the bitstream and decoded by entropy decoding unit <b>301</b>. Inverse transform unit <b>305</b> applies an inverse transform.</p><p id="p-0304" num="0433">Reconstruction unit <b>306</b> may sum the residual blocks with the corresponding prediction blocks generated by motion compensation unit <b>302</b> or intra-prediction unit <b>303</b> to form decoded blocks. If desired, a deblocking filter may also be applied to filter the decoded blocks in order to remove blockiness artifacts. The decoded video blocks are then stored in buffer <b>307</b>, which provides reference blocks for subsequent motion compensation/intra predication and also produces decoded video for presentation on a display device.</p><p id="p-0305" num="0434"><figref idref="DRAWINGS">FIGS. <b>12</b>-<b>16</b></figref> show example methods that can implement the technical solutions described above in, for example, the embodiments shown in <figref idref="DRAWINGS">FIGS. <b>7</b>-<b>11</b></figref>.</p><p id="p-0306" num="0435"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows a flowchart for an example method <b>1200</b> of video processing includes, at operation <b>1210</b>, determining, for a current video block of a video coded using an adaptive color transform (ACT) mode, whether a joint coding of chroma residuals (JCCR) coding tool is enabled for the current video block.</p><p id="p-0307" num="0436">The method <b>1200</b> includes, at operation <b>1220</b>, performing, based on the determining, a conversion between the video and a bitstream of the video, the bitstream conforming to a rule that specifies that one or more quantization parameter (QP) offsets used for coding the current video block are signaled when the JCCR coding tool is enabled.</p><p id="p-0308" num="0437"><figref idref="DRAWINGS">FIG. <b>13</b></figref> shows a flowchart for an example method <b>1300</b> of video processing includes, at operation <b>1310</b>, performing a conversion between a current video block of a video and a bitstream of the video, the bitstream conforming to a format rule that specifies that a manner by which a delta quantization parameter (QP) is derived or signaled based on a coding information of the current video block.</p><p id="p-0309" num="0438"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows a flowchart for an example method <b>1400</b> of video processing includes, at operation <b>1410</b>, performing a conversion between a current video block of a video and a bitstream of the video, the bitstream conforms to a format rule that specifies that that one or more quantization parameter (QP) offsets used for coding the current video block are signaled in a picture parameter set (PPS) associated with the current video block independently of information signaled in a sequence parameter set (SPS) associated with the current video block.</p><p id="p-0310" num="0439"><figref idref="DRAWINGS">FIG. <b>15</b></figref> shows a flowchart for an example method <b>1500</b> of video processing includes, at operation <b>1510</b>, performing a conversion between a current video block of a video and a bitstream of the video, the bitstream conforming to a format rule that specifies a video level at which to signal one or more quantization parameter (QP) offsets used for coding the current video block, and the video level being a first level or a second level that is lower than the first level.</p><p id="p-0311" num="0440"><figref idref="DRAWINGS">FIG. <b>16</b></figref> shows a flowchart for an example method <b>1600</b> of video processing includes, at operation <b>1610</b>, performing a conversion between a current video block of a video and a bitstream of the video, the bitstream conforming to a format rule that specifies whether or how an overwriting mechanism is used for signaling a quantization parameter (QP) offset used for coding the current video block.</p><p id="p-0312" num="0441">A listing of solutions preferred by some embodiments is provided next.</p><p id="p-0313" num="0442">A1. A method of video processing, comprising determining, for a current video block of a video coded using an adaptive color transform (ACT) mode, whether a joint coding of chroma residuals (JCCR) coding tool is enabled for the current video block; and performing, based on the determining, a conversion between the video and a bitstream of the video, wherein the bitstream conforms to a rule, and wherein the rule specifies that one or more quantization parameter (QP) offsets used for coding the current video block are signaled when the JCCR coding tool is enabled.</p><p id="p-0314" num="0443">A2. The method of solution A1, wherein the one or more QP offsets are signaled in a slice header (SH) when the JCCR coding tool is enabled.</p><p id="p-0315" num="0444">A3. The method of solution A1, wherein the rule further specifies whether to signal a syntax element indicating whether the one or more QP offsets are present is based on the JCCR coding tool being enabled.</p><p id="p-0316" num="0445">A4. The method of solution A3, wherein the syntax element is in a picture parameter set (PPS) or a slice header (SH).</p><p id="p-0317" num="0446">A5. The method of solution A3 or A4, wherein the syntax element is pps_joint_cbcr_qp_offset_present_flag or slice_joint_cbcr_qp_offset_present_flag.</p><p id="p-0318" num="0447">A6. A method of video processing, comprising performing a conversion between a current video block of a video and a bitstream of the video, wherein the bitstream conforms to a format rule, and wherein the format rule specifies that a manner by which a delta quantization parameter (QP) is derived or signaled based on a coding information of the current video block.</p><p id="p-0319" num="0448">A7. The method of solution A6, wherein the coding information comprises a coding mode of the current video block or a previously coded neighboring block of the current video block.</p><p id="p-0320" num="0449">A8. The method of solution A7, wherein the coding mode comprises an adaptive color transform (ACT) mode.</p><p id="p-0321" num="0450">A9. The method of solution A6, wherein deriving and/or signaling the delta QP is further based on whether the current video block and a previously coded neighboring block of the current video block used to derive a QP predictor share the same coding information.</p><p id="p-0322" num="0451">A10. The method of solution A6, wherein the coding information comprises a coding tool applied to the current video block, and wherein a derivation of a QP predictor is based on one or more video blocks to which the coding tool has been applied.</p><p id="p-0323" num="0452">A11. A method of video processing, comprising performing a conversion between a current video block of a video and a bitstream of the video, wherein the bitstream conforms to a format rule, and wherein the format rule specifies that that one or more quantization parameter (QP) offsets used for coding the current video block are signaled in a picture parameter set (PPS) associated with the current video block independently of information signaled in a sequence parameter set (SPS) associated with the current video block.</p><p id="p-0324" num="0453">A12. The method of solution A11, wherein a first indication of a color format of the video and/or a second indication of enabling a coding mode for the current video block are signaled in the PPS.</p><p id="p-0325" num="0454">A13. A method of video processing, comprising performing a conversion between a current video block of a video and a bitstream of the video, wherein the bitstream conforms to a format rule, and wherein the format rule specifies a video level at which to signal one or more quantization parameter (QP) offsets used for coding the current video block, wherein the video level is a first level or a second level that is lower than the first level.</p><p id="p-0326" num="0455">A14. The method of solution A13, wherein the first level is a picture level and a second level is a slice level.</p><p id="p-0327" num="0456">A15. The method of solution A14, wherein the one or more QP offsets is signaled in the first level.</p><p id="p-0328" num="0457">A16. The method of solution A14, wherein the one or more QP offsets are excluded from the first level due to the one or more QP offsets being signaled in the second level.</p><p id="p-0329" num="0458">A17. The method any of solutions A11 to 16, wherein the one or more QP offsets are signaled in a picture header (PH) or a slice header (SH).</p><p id="p-0330" num="0459">A18. The method of any of solutions A1 to A17, wherein the conversion comprises decoding the video from the bitstream.</p><p id="p-0331" num="0460">A19. The method of any of solutions A1 to A17, wherein the conversion comprises encoding the video into the bitstream.</p><p id="p-0332" num="0461">A20. The method of any of solutions A1 to A17, wherein the conversion comprises generating the bitstream from the current video block, and wherein the method further comprises storing the bitstream in a non-transitory computer-readable recording medium.</p><p id="p-0333" num="0462">A21. A method of storing a bitstream representing a video to a computer-readable recording medium, comprising generating a bitstream from a video according to a method described in any one or more of solutions A1 to A17; and writing the bitstream to the computer-readable recording medium.</p><p id="p-0334" num="0463">A22. A video processing apparatus comprising a processor configured to implement a method recited in any one or more of solutions A1 to A17.</p><p id="p-0335" num="0464">A23. A computer readable medium that stores the bitstream generated according to a method recited in any one or more of solutions A1 to A17.</p><p id="p-0336" num="0465">A24. A computer-readable medium having instructions stored thereon, the instructions, when executed, causing a processor to implement a method recited in one or more of solutions A1 to A23.</p><p id="p-0337" num="0466">A25. A video processing apparatus for storing a bitstream, wherein the video processing apparatus is configured to implement a method recited in any one or more of solutions A1 to A23.</p><p id="p-0338" num="0467">Another listing of solutions preferred by some embodiments is provided next.</p><p id="p-0339" num="0468">B1. A method of video processing, comprising performing a conversion between a current video block of a video and a bitstream of the video, wherein the bitstream conforms to a format rule, and wherein the format rule specifies whether or how an overwriting mechanism is used for signaling a quantization parameter (QP) offset used for coding the current video block.</p><p id="p-0340" num="0469">B2. The method of solution B1, wherein a first value of the QP offset is signaled in a first level, and wherein the first value is overwritten by a second value of the QP offset signaled in a second level.</p><p id="p-0341" num="0470">B3. The method of solution B2, wherein the first level is higher than the second level.</p><p id="p-0342" num="0471">B4. The method of solution B2 or B3, wherein a difference between the first set of values and the second set of values is signaled in the second level.</p><p id="p-0343" num="0472">B5. The method of solution B2 or B3, wherein a first syntax element indicating whether the QP offset is allowed to be overwritten is signaled in the first level or the second level.</p><p id="p-0344" num="0473">B6. The method of solution B5, wherein the first syntax element being equal to one indicates that a QP delta information is signaled in a picture header (PH) and excluded from a slice header (SH) that refers to the first level.</p><p id="p-0345" num="0474">B7. The method of solution B6, wherein a second syntax element indicates that the QP delta information in the PH is used to determine an initial value of a QP, and wherein the initial value of the QP is used for coding the current video block.</p><p id="p-0346" num="0475">B8. The method of solution B5, wherein the first syntax element being equal to zero indicates that a QP delta information is excluded from a picture header (PH) and signaled in a slice header (SH) that refers to the first level.</p><p id="p-0347" num="0476">B9. The method of solution B8, wherein a second syntax element indicates that the QP delta information in the SH is used to determine an initial value of a QP, and wherein the initial value of the QP is used for coding the current video block.</p><p id="p-0348" num="0477">B10. The method of any of solutions B5 to B9, wherein the first syntax element is pps_qp_delta_info_in_ph_flag.</p><p id="p-0349" num="0478">B11. The method of any of solutions B2 to B10, wherein the first level comprises a picture parameter set (PPS).</p><p id="p-0350" num="0479">B12. The method of any of solutions B2 to B10, wherein the second level comprises a picture header (PH) or a slice header (SH).</p><p id="p-0351" num="0480">B13. The method of solution B1, wherein a first value of the QP offset is excluded from a first level due to a second value of the QP offset, which is configured to overwrite the first value, is signaled in a second level.</p><p id="p-0352" num="0481">B14. The method of any of solutions B1 to B13, wherein the conversion comprises decoding the video from the bitstream.</p><p id="p-0353" num="0482">B15. The method of any of solutions B1 to B13, wherein the conversion comprises encoding the video into the bitstream.</p><p id="p-0354" num="0483">B16. The method of any of solutions B1 to B13, wherein the conversion comprises generating the bitstream from the current video block, and wherein the method further comprises storing the bitstream in a non-transitory computer-readable recording medium.</p><p id="p-0355" num="0484">B17. A method of storing a bitstream representing a video to a computer-readable recording medium, comprising generating a bitstream from a video according to a method described in any one or more of solutions B1 to B13; and writing the bitstream to the computer-readable recording medium.</p><p id="p-0356" num="0485">B18. A video processing apparatus comprising a processor configured to implement a method recited in any one or more of solutions B1 to B13.</p><p id="p-0357" num="0486">B19. A computer readable medium that stores the bitstream generated according to any one or more of solutions B1 to B13.</p><p id="p-0358" num="0487">B20. A computer-readable medium having instructions stored thereon, the instructions, when executed, causing a processor to implement a method recited in one or more of solutions B1 to B19.</p><p id="p-0359" num="0488">B21. A video processing apparatus for storing a bitstream, wherein the video processing apparatus is configured to implement a method recited in any of solutions B1 to B19.</p><p id="p-0360" num="0489">Yet another listing of solutions preferred by some embodiments is provided next.</p><p id="p-0361" num="0490">P1. A method of video processing, comprising performing a determination whether to enable a chroma block-based delta pulse code modulation (BDPCM) mode for a video block of a video based on whether a usage of an adaptive color transform (ACT) mode and/or a luma BDPCM mode for the video block is enabled; and performing a conversion between the video block and a bitstream representation of the video according to the determinization.</p><p id="p-0362" num="0491">P2. The method of solution P1, wherein a signaling for a first value for a first flag associated with enabling the chroma BDPCM mode is determined based on a signaling of the ACT mode being enabled for the video block and a signaling of a second value for a second flag associated with the usage of the luma BDPCM mode.</p><p id="p-0363" num="0492">P3. The method of solution P2, wherein the first value for the first flag has a false value in response to the ACT mode being enabled and the second value for the second flag having a false value.</p><p id="p-0364" num="0493">P4. The method of solution P2, wherein the first value for the first flag has a true value in response to the second value for the second flag having a true value.</p><p id="p-0365" num="0494">P5. The method of solution P1, wherein a signaling of the ACT mode for the video block is conditionally based on a same BDPCM prediction direction being used for luma samples and chroma samples of the video block.</p><p id="p-0366" num="0495">P6. The method of solution P5, wherein the signaling of the ACT mode is indicated after a signaling of the chroma BDPCM mode and the luma BDPCM mode.</p><p id="p-0367" num="0496">P7. The method of solution P1, wherein in response to the usage of the ACT mode being enabled, a first value indicative of a first prediction direction of the chroma BDPCM mode is derived from a second value indicative of a second prediction direction of the luma BDPCM mode.</p><p id="p-0368" num="0497">P8. The method of solution P7, wherein the first value indicative of the first prediction direction of the chroma BDPCM mode is same as the second value indicative of the second prediction direction of the luma BDPCM mode.</p><p id="p-0369" num="0498">P9. The method of solution P8, wherein the first prediction direction of the chroma BDPCM mode and the second prediction direction of the luma BDPCM mode are in a horizontal direction.</p><p id="p-0370" num="0499">P10. The method of solution P8, wherein the first prediction direction of the chroma BDPCM mode and the second prediction direction of the luma BDPCM mode are in a vertical direction.</p><p id="p-0371" num="0500">P11. The method of solution P1, wherein in response to the usage of the ACT mode being disabled, a first value indicative of a first prediction direction of the chroma BDPCM mode is zero.</p><p id="p-0372" num="0501">P12. A method of video processing, comprising performing a determination whether to enable a block-based delta pulse code modulation (BDPCM) mode for a video block of a video based on whether a usage of an adaptive color transform (ACT) mode for the video block is enabled; and performing a conversion between the video block and a bitstream representation of the video according to the determinization.</p><p id="p-0373" num="0502">P13. The method of solution P12, wherein the BDPCM mode is disabled for the video block in response to the ACT mode being enabled for the video block.</p><p id="p-0374" num="0503">P14. The method of solution P13, wherein a first flag indicative of the BDPCM mode is signaled after a second flag indicative of the ACT mode.</p><p id="p-0375" num="0504">P15. The method of solution P13, wherein a flag indicative of the BDPCM mode is not signaled, wherein the flag is determined to be a false value or zero.</p><p id="p-0376" num="0505">P16. The method of solution P12, wherein the ACT mode is disabled for the video block in response to the BDPCM mode being enabled for the video block.</p><p id="p-0377" num="0506">P17. The method of solution P16, wherein a first flag indicative of the BDPCM mode is signaled before a second flag indicative of the ACT mode.</p><p id="p-0378" num="0507">P18. The method of solution P16, wherein a flag indicative of the ACT mode is not signaled, wherein the flag is determined to be a false value or zero.</p><p id="p-0379" num="0508">P19. The method of any of solutions P12 to P18, wherein the BDPCM mode includes a luma BDPCM mode and/or a chroma BDPCM mode.</p><p id="p-0380" num="0509">P20. The method of solution P1, wherein the ACT mode is applied when the chroma BDPCM mode and the luma BDPCM mode are associated with different prediction modes.</p><p id="p-0381" num="0510">P21. The method of solution P20, wherein a forward ACT mode is applied after the chroma BDPCM mode or the luma BDPCM mode.</p><p id="p-0382" num="0511">P22. The method of any of solution P1 to P21, wherein a quantization parameter (QP) for the video block is clipped in response to the ACT mode being enabled.</p><p id="p-0383" num="0512">P23. The method of solution P22, wherein a clipping function for clipping the QP is defined as (l, h, x), where l is a lowest possible value of an input x and h is a highest possible value of an input x.</p><p id="p-0384" num="0513">P24. The method of solution P23, wherein l is equal to zero.</p><p id="p-0385" num="0514">P25. The method of solution P23, wherein h is equal to 63.</p><p id="p-0386" num="0515">P26. The method of solution P22, wherein the QP for the video block is clipped after the QP is adjusted for the ACT mode.</p><p id="p-0387" num="0516">P27. The method of solution P23, wherein in response to a transform skip being applied to the video block, l is equal to a minimal allowed QP for a transform skip mode.</p><p id="p-0388" num="0517">P28. The method of any of solution P23 to P26, wherein l, h, m, n and/or k are integer numbers that depend on (i) a message signaled in the DPS/SPS/VPS/PPS/APS/picture header/slice header/tile group header/Largest coding unit (LCU)/Coding unit (CU)/LCU row/group of LCUs/TU/PU block/Video coding unit, (ii) a position of CU/PU/TU/block/Video coding unit, (iii) coded modes of blocks containing the samples along the edges, (iv) transform matrices applied to the blocks containing the samples along the edges, (v) block dimension/Block shape of current block and/or its neighboring blocks, (vi) indication of the colour format (such as 4:2:0, 4:4:4, RGB or YUV), (vii) a coding tree structure (such as dual tree or single tree), (viii) a slice/tile group type and/or picture type, (ix) a colour component (e.g. may be only applied on Cb or Cr), (x) a temporal layer ID, or (xi) profiles/Levels/Tiers of a standard.</p><p id="p-0389" num="0518">P29. The method of any of solution P23 to P26, wherein l, h, m, n and/or k are signaled to a decoder.</p><p id="p-0390" num="0519">P30. The method of any of solution P30, wherein a color format is 4:2:0 or 4:2:2.</p><p id="p-0391" num="0520">P31. The method of any of solutions P1 to P30, wherein an indication for the ACT mode or the BDPCM mode or the chroma BDPCM mode or the luma BDPCM mode is signaled in a sequence, a picture, a slice, a tile, a brick, or a video region-level.</p><p id="p-0392" num="0521">P32. A method of video processing, comprising determining that a joint coding of chroma residuals (JCCR) tool is used on a video block of a video for which an adaptive color transform (ACT) mode is enabled; and performing, based on the determining, a conversion between the video block and a bitstream representation of the video, wherein a quantization parameter (QP) of the ACT mode is based on a mode of the JCCR tool.</p><p id="p-0393" num="0522">P33. The method of solution P32, wherein the QP is &#x2212;5 or &#x2212;6 upon a determination that the mode of the JCCR tool is 1.</p><p id="p-0394" num="0523">P34. The method of solution P32, wherein the QP is &#x2212;4 or &#x2212;5 upon a determination that the mode of the JCCR tool is 3.</p><p id="p-0395" num="0524">P35. The method of any of solutions P1 to P34, wherein the conversion comprises parsing and decoding the coded representation to generate video pixels.</p><p id="p-0396" num="0525">P36. The method of any of solutions P1 to P34, wherein the conversion comprises generating the coded representation by encoding the video.</p><p id="p-0397" num="0526">P37. A video decoding apparatus comprising a processor configured to implement a method recited in one or more of solutions P1 to P36.</p><p id="p-0398" num="0527">P38. A video encoding apparatus comprising a processor configured to implement a method recited in one or more of solutions P1 to P36.</p><p id="p-0399" num="0528">P39. A computer program product having computer code stored thereon, the code, when executed by a processor, causes the processor to implement a method recited in any of solutions P1 to P36.</p><p id="p-0400" num="0529">In the present document, the term &#x201c;video processing&#x201d; may refer to video encoding, video decoding, video compression or video decompression. For example, video compression algorithms may be applied during conversion from pixel representation of a video to a corresponding bitstream representation or vice versa. The bitstream representation of a current video block may, for example, correspond to bits that are either co-located or spread in different places within the bitstream, as is defined by the syntax. For example, a macroblock may be encoded in terms of transformed and coded error residual values and also using bits in headers and other fields in the bitstream.</p><p id="p-0401" num="0530">The disclosed and other solutions, examples, embodiments, modules and the functional operations described in this document can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this document and their structural equivalents, or in combinations of one or more of them. The disclosed and other embodiments can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer readable medium for execution by, or to control the operation of, data processing apparatus. The computer readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more them. The term &#x201c;data processing apparatus&#x201d; encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them. A propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus.</p><p id="p-0402" num="0531">A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.</p><p id="p-0403" num="0532">The processes and logic flows described in this document can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).</p><p id="p-0404" num="0533">Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read only memory or a random-access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., erasable programmable read-only memory (EPROM), electrically EPROM (EEPROM), and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and compact disc read-only memory (CD ROM) and digital versatile disc read-only memory (DVD-ROM) disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.</p><p id="p-0405" num="0534">While this patent document contains many specifics, these should not be construed as limitations on the scope of any subject matter or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular techniques. Certain features that are described in this patent document in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.</p><p id="p-0406" num="0535">Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. Moreover, the separation of various system components in the embodiments described in this patent document should not be understood as requiring such separation in all embodiments. Only a few implementations and examples are described and other implementations, enhancements and variations can be made based on what is described and illustrated in this patent document.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230007256A1-20230105-M00001.NB"><img id="EMI-M00001" he="8.81mm" wi="76.20mm" file="US20230007256A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230007256A1-20230105-M00002.NB"><img id="EMI-M00002" he="6.35mm" wi="76.20mm" file="US20230007256A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230007256A1-20230105-M00003.NB"><img id="EMI-M00003" he="6.35mm" wi="76.20mm" file="US20230007256A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of processing video data, comprising:<claim-text>performing a conversion between a first video block of a video and a bitstream of the video,</claim-text><claim-text>wherein the bitstream conforms to a rule, and</claim-text><claim-text>wherein the rule specifies that one or more quantization parameter (QP) offsets used for coding the first video block are signaled at a first level or a second level that is lower than the first level.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first level is a picture level and the second level is a slice level.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the one or more QP offsets are signaled in the first level when a first syntax element is included in the bitstream with a value indicating that the one or more QP offsets are signaled in the first level.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the one or more QP offsets are excluded from the first level and signaled in the second level when the value of the first syntax element indicates that the one or more QP offsets are signaled in the second level or when the first syntax element is not present in the bitstream.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the first syntax element is included in a picture parameter set (PPS) when the first syntax element is included in the bitstream.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the one or more QP offsets are signaled in a picture header (PH) or a slice header (SH).</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining, for a second video block of the video coded using a color transform mode, whether a joint coding of chroma residuals (JCCR) coding tool is enabled for the second video block;</claim-text><claim-text>wherein performing the conversion is further based on the determining whether the JCCR coding tool is enabled for the second video block, and</claim-text><claim-text>wherein the rule further specifies that one or more quantization parameter (QP) offsets for a joint chroma component are signaled when the JCCR coding tool is enabled.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the one or more QP offsets for the joint chroma component are signaled in a slice header (SH) when the JCCR coding tool is enabled.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the rule further specifies a second syntax element indicating whether the one or more QP offsets for the joint chroma component are present in a picture parameter set (PPS).</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the second syntax element is pps_joint_cbcr_qp_offset_present_flag.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the conversion comprises decoding the video from the bitstream.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the conversion comprises encoding the video into the bitstream.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. An apparatus for processing video data comprising a processor and a non-transitory memory with instructions thereon, wherein the instructions upon execution by the processor, cause the processor to:<claim-text>perform a conversion between a first video block of a video and a bitstream of the video,</claim-text><claim-text>wherein the bitstream conforms to a rule, and</claim-text><claim-text>wherein the rule specifies that one or more quantization parameter (QP) offsets used for coding the first video block are signaled at a first level or a second level that is lower than the first level.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the first level is a picture level and the second level is a slice level,<claim-text>wherein the one or more QP offsets are signaled in the first level when a first syntax element is included in the bitstream with a value indicating that the one or more QP offsets are signaled in the first level,</claim-text><claim-text>wherein the one or more QP offsets are excluded from the first level and signaled in the second level when the value of the first syntax element indicates that the one or more QP offsets are signaled in the second level or when the first syntax element is not present in the bitstream,</claim-text><claim-text>wherein the first syntax element is included in a picture parameter set (PPS) when the first syntax element is included in the bitstream, and</claim-text><claim-text>wherein the one or more QP offsets are signaled in a picture header (PH) or a slice header (SH).</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the processor is further caused to:<claim-text>determine, for a second video block of the video coded using a color transform mode, whether a joint coding of chroma residuals (JCCR) coding tool is enabled for the second video block;</claim-text><claim-text>wherein the conversion is performed further based on the determining whether the JCCR coding tool is enabled for the second video block,</claim-text><claim-text>wherein the rule further specifies that one or more quantization parameter (QP) offsets for a joint chroma component are signaled when the JCCR coding tool is enabled,</claim-text><claim-text>wherein the one or more QP offsets for the joint chroma component are signaled in a slice header (SH) when the JCCR coding tool is enabled,</claim-text><claim-text>wherein the rule further specifies a second syntax element indicating whether the one or more QP offsets for the joint chroma component are present in a picture parameter set (PPS), and</claim-text><claim-text>wherein the second syntax element is pps_joint_cbcr_qp_offset_present_flag.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A non-transitory computer-readable storage medium storing instructions that cause a processor to:<claim-text>perform a conversion between a first video block of a video and a bitstream of the video,</claim-text><claim-text>wherein the bitstream conforms to a rule, and</claim-text><claim-text>wherein the rule specifies that one or more quantization parameter (QP) offsets used for coding the first video block are signaled at a first level or a second level that is lower than the first level.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the first level is a picture level and the second level is a slice level,<claim-text>wherein the one or more QP offsets are signaled in the first level when a first syntax element is included in the bitstream with a value indicating that the one or more QP offsets are signaled in the first level,</claim-text><claim-text>wherein the one or more QP offsets are excluded from the first level and signaled in the second level when the value of the first syntax element indicates that the one or more QP offsets are signaled in the second level or when the first syntax element is not present in the bitstream,</claim-text><claim-text>wherein the first syntax element is included in a picture parameter set (PPS) when the first syntax element is included in the bitstream, and</claim-text><claim-text>wherein the one or more QP offsets are signaled in a picture header (PH) or a slice header (SH).</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the processor is further caused to:<claim-text>determine, for a second video block of the video coded using a color transform mode, whether a joint coding of chroma residuals (JCCR) coding tool is enabled for the second video block;</claim-text><claim-text>wherein the conversion is performed further based on the determining whether the JCCR coding tool is enabled for the second video, and</claim-text><claim-text>wherein the rule further specifies that one or more quantization parameter (QP) offsets for a joint chroma component are signaled when the JCCR coding tool is enabled,</claim-text><claim-text>wherein the one or more QP offsets for the joint chroma component are signaled in a slice header (SH) when the JCCR coding tool is enabled,</claim-text><claim-text>wherein the rule further specifies a second syntax element indicating whether the one or more QP offsets for the joint chroma component are present in a picture parameter set (PPS), and</claim-text><claim-text>wherein the second syntax element is pps_joint_cbcr_qp_offset_present_flag.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A non-transitory computer-readable recording medium storing a bitstream of a video which is generated by a method performed by a video processing apparatus, wherein the method comprises:<claim-text>generating the bitstream for a first video block of the video,</claim-text><claim-text>wherein the bitstream conforms to a rule, and</claim-text><claim-text>wherein the rule specifies that one or more quantization parameter (QP) offsets used for coding the first video block are signaled at a first level or a second level that is lower than the first level.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable recording medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>,<claim-text>wherein the first level is a picture level and the second level is a slice level,</claim-text><claim-text>wherein the one or more QP offsets are signaled in the first level when a first syntax element is included in the bitstream with a value indicating that the one or more QP offsets are signaled in the first level,</claim-text><claim-text>wherein the one or more QP offsets are excluded from the first level and signaled in the second level when the value of the first syntax element indicates that the one or more QP offsets are signaled in the second level or when the first syntax element is not present in the bitstream,</claim-text><claim-text>wherein the first syntax element is included in a picture parameter set (PPS) when the first syntax element is included in the bitstream, and</claim-text><claim-text>wherein the one or more QP offsets are signaled in a picture header (PH) or a slice header (SH), and</claim-text><claim-text>wherein the method further comprises:<claim-text>determining, for a second video block of the video coded using a color transform mode, whether a joint coding of chroma residuals (JCCR) coding tool is enabled for the second video block;</claim-text><claim-text>wherein performing the conversion is further based on the determining whether the JCCR coding tool is enabled for the second video block, and</claim-text><claim-text>wherein the rule further specifies that one or more quantization parameter (QP) offsets for a joint chroma component are signaled when the JCCR coding tool is enabled,</claim-text><claim-text>wherein the one or more QP offsets for the joint chroma component are signaled in a slice header (SH) when the JCCR coding tool is enabled,</claim-text><claim-text>wherein the rule further specifies a second syntax element indicating whether the one or more QP offsets for the joint chroma component are present in a picture parameter set (PPS), and</claim-text><claim-text>wherein the second syntax element is pps_joint_cbcr_qp_offset_present_flag.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>