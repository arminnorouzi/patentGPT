<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004427A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004427</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363583</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>48</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>07</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4881</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>0784</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>0721</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">RE-INITIATION OF MICROSERVICES UTILIZING CONTEXT INFORMATION PROVIDED VIA SERVICE CALLS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Dell Products L.P.</orgname><address><city>Round Rock</city><state>TX</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Panikkar</last-name><first-name>Shibi</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Sethi</last-name><first-name>Parminder Singh</first-name><address><city>Ludhiana</city><country>IN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An apparatus comprises a processing device configured to identify, at a first microservice, a service call that is to be transmitted to a second microservice, and to modify the service call to include context information, the context information characterizing a current state of execution of one or more tasks by one of the first microservice and the second microservice. The processing device is further configured to provide, from the first microservice to the second microservice, the modified service call including the context information. The context information enables re-initiation of said one of the first microservice and the second microservice to continue execution of the one or more tasks from the current state.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="112.61mm" wi="158.75mm" file="US20230004427A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="236.05mm" wi="174.07mm" orientation="landscape" file="US20230004427A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="170.86mm" wi="111.42mm" orientation="landscape" file="US20230004427A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="160.19mm" wi="173.06mm" orientation="landscape" file="US20230004427A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="157.06mm" wi="139.87mm" orientation="landscape" file="US20230004427A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="96.94mm" wi="102.70mm" orientation="landscape" file="US20230004427A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="239.01mm" wi="170.18mm" orientation="landscape" file="US20230004427A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="239.10mm" wi="175.34mm" orientation="landscape" file="US20230004427A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="175.09mm" wi="117.26mm" orientation="landscape" file="US20230004427A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="175.09mm" wi="113.88mm" orientation="landscape" file="US20230004427A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="175.09mm" wi="137.92mm" orientation="landscape" file="US20230004427A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="175.09mm" wi="81.96mm" orientation="landscape" file="US20230004427A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="175.09mm" wi="129.96mm" orientation="landscape" file="US20230004427A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="96.94mm" wi="102.70mm" orientation="landscape" file="US20230004427A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="239.01mm" wi="170.18mm" orientation="landscape" file="US20230004427A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="239.18mm" wi="175.34mm" orientation="landscape" file="US20230004427A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="185.76mm" wi="100.33mm" orientation="landscape" file="US20230004427A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="215.98mm" wi="155.28mm" orientation="landscape" file="US20230004427A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">COPYRIGHT NOTICE</heading><p id="p-0002" num="0001">A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.</p><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">The field relates generally to information processing, and more particularly to microservices in information processing systems.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Information processing systems increasingly utilize reconfigurable virtual resources to meet changing user needs in an efficient, flexible and cost-effective manner. For example, cloud computing and storage systems implemented using virtual resources such as virtual machines have been widely adopted. Other virtual resources now coming into widespread use in information processing systems include Linux containers. Such containers may be used to provide at least a portion of the virtualization infrastructure of a given cloud-based information processing system.</p><p id="p-0005" num="0004">However, significant challenges can arise in the management of services in cloud-based information processing systems.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">Illustrative embodiments of the present disclosure provide techniques for re-initiation of microservices using context information provided via service calls.</p><p id="p-0007" num="0006">In one embodiment, an apparatus comprises at least one processing device comprising a processor coupled to a memory. The at least one processing device is configured to perform the steps of identifying, at a first microservice, a service call that is to be transmitted to a second microservice, and modifying the service call to include context information, the context information characterizing a current state of execution of one or more tasks by one of the first microservice and the second microservice. The at least one processing device is further configured to perform the step of providing, from the first microservice to the second microservice, the modified service call including the context information. The context information enables re-initiation of said one of the first microservice and the second microservice to continue execution of the one or more tasks from the current state.</p><p id="p-0008" num="0007">These and other illustrative embodiments include, without limitation, methods, apparatus, networks, systems and processor-readable storage media.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of an information processing system configured for re-initiation of microservices using context information provided via service calls in an illustrative embodiment.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram of an exemplary process for re-initiation of microservices using context information provided via service calls in an illustrative embodiment.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows orchestration-based microservices coordination in an illustrative embodiment.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows container-based service coordination in an illustrative embodiment.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a microservice configured to store and transmit status information via telemetry in an illustrative embodiment.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows telemetry communication between an orchestrator microservice and multiple participating microservices in an illustrative embodiment.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a process flow for an orchestrator microservice to perform service re-initiation on a participating microservice utilizing context information communicated via telemetry in an illustrative embodiment.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows pseudocode for microservice initiation in an illustrative embodiment.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows pseudocode for custom annotations for microservice initiation in an illustrative embodiment.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows pseudocode for establishing a communication channel between an orchestrator microservice and a participating microservice in an illustrative embodiment.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows pseudocode for a participating microservice to store status information in an illustrative embodiment.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows an example configuration of properties for a participating microservice in an illustrative embodiment.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>13</b></figref> shows a microservice configured to store and transmit status information via enhanced service calls in an illustrative embodiment.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows enhanced service call communication between an orchestrator microservice and multiple participating microservices in an illustrative embodiment.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>15</b></figref> shows a process flow for an orchestrator microservice to perform service re-initiation on a participating microservice utilizing context information communicated via enhanced service calls in an illustrative embodiment.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIGS. <b>16</b> and <b>17</b></figref> show examples of processing platforms that may be utilized to implement at least a portion of an information processing system in illustrative embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0025" num="0024">Illustrative embodiments will be described herein with reference to exemplary information processing systems and associated computers, servers, storage devices and other processing devices. It is to be appreciated, however, that embodiments are not restricted to use with the particular illustrative system and device configurations shown. Accordingly, the term &#x201c;information processing system&#x201d; as used herein is intended to be broadly construed, so as to encompass, for example, processing systems comprising cloud computing and storage systems, as well as other types of processing systems comprising various combinations of physical and virtual processing resources. An information processing system may therefore comprise, for example, at least one data center or other type of cloud-based system that includes one or more clouds hosting tenants that access cloud resources.</p><p id="p-0026" num="0025">Software architecture may be designed in various ways. In some architectures, software may provide a number of functions in the form of a single, monolithic application. A &#x201c;monolithic&#x201d; application refers to a single-tiered, tightly-coupled software application in which various elements of the software architecture (e.g., a user interface, database access, processing logic, etc.) are combined into a single program, usually on a single platform. In software engineering, a monolithic application describes a software application that is designed without modularity. In general, modularity of software elements in a software architecture is desirable, as modularity supports reuse of portions of application logic while also enabling efficient maintenance and development (e.g., by enabling repair and replacement of parts of an application without requiring upgrading of the entire application).</p><p id="p-0027" num="0026">Monolithic applications may suffer from disadvantages relating to innovation, manageability, resiliency and scalability, particularly in computing environments such as cloud computing environments, datacenters, and converged infrastructure. As an alternative to such monolithic applications, some software architectures provide different functions in the form of microservices. In a microservice architecture, a single application is developed as a suite of small microservices. A microservice can run on its own process and communicate with other systems or services through a lightweight mechanism, such as a hypertext transport protocol (HTTP) resource application programming interface (API) or communication API provided by an external system. Microservices in some embodiments are assumed to be independently deployable using fully automated deployment mechanisms.</p><p id="p-0028" num="0027">In some embodiments, microservices are small, independent and composable services that can be accessed through Representational State Transfer (RESTful) APIs. Thus, a single monolithic application may be broken down into separate and independent microservices for discrete functions, providing potential benefits in innovation, manageability, resiliency and scalability. Innovation benefits may be provided through the ability to develop and deploy new versions of microservices more rapidly as compared to a single monolithic application. Manageability benefits may be realized as the code used is smaller and thus easier to understand, facilitating changes and deployments. Resiliency benefits may be realized as functionality may be distributed across multiple microservices, such that failure or downtime of one microservice does not result in loss of functionality provided by other microservices. Scalability benefits may be realized in that microservices can be deployed and scaled independently of one another.</p><p id="p-0029" num="0028">Microservices-based software architectural design structures an application as a collection of loosely coupled services. Microservices-based software architectures may be viewed as a variant of a service-oriented architecture that focuses on fine-grained services, lightweight protocols, etc. A microservices architecture enables individual microservices to be deployed and scaled independently, such as via software containers. Individual microservices can be worked on in parallel by different teams, may be built in different programming languages, and have continuous delivery and deployment flows. As development moves toward cloud-native approaches, it is desired to decompose, disintegrate or otherwise separate existing monolithic applications into microservices. Advantageously, microservices allow software developers of an enterprise to work independently and communicate together. Thus, an enterprise system can achieve better efficiency and resiliency with microservices as compared with monolithic applications, while providing similar or better results.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an information processing system <b>100</b> configured in accordance with an illustrative embodiment for re-initiation of microservices using context information provided via service calls. The information processing system <b>100</b> comprises one or more host devices <b>102</b>-<b>1</b>, <b>102</b>-<b>2</b>, . . . <b>102</b>-N (collectively, host devices <b>102</b>) and a management host device <b>104</b> that communicate over a network <b>106</b>.</p><p id="p-0031" num="0030">The host devices <b>102</b> and management host device <b>104</b> illustratively comprise respective computers, servers or other types of processing devices capable of communicating with one another via the network <b>104</b>. For example, at least a subset of the host devices <b>102</b> and the management host device <b>104</b> may be implemented as respective virtual machines of a compute services platform or other type of processing platform. The host devices <b>102</b> and the management host device <b>104</b> in such an arrangement illustratively provide compute services such as execution of one or more applications on behalf of each of one or more users associated with respective ones of the host devices <b>102</b> and the management host device <b>104</b>.</p><p id="p-0032" num="0031">The term &#x201c;user&#x201d; herein is intended to be broadly construed so as to encompass numerous arrangements of human, hardware, software or firmware entities, as well as combinations of such entities.</p><p id="p-0033" num="0032">Compute and/or storage services may be provided for users under a Platform-as-a-Service (PaaS) model, an Infrastructure-as-a-Service (IaaS) model and/or a Function-as-a-Service (FaaS) model, although it is to be appreciated that numerous other cloud infrastructure arrangements could be used. Also, illustrative embodiments can be implemented outside of the cloud infrastructure context, as in the case of a stand-alone computing and storage system implemented within a given enterprise.</p><p id="p-0034" num="0033">In the information processing system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the host devices <b>102</b>-<b>1</b>, <b>102</b>-<b>2</b>, . . . <b>102</b>-N are assumed to run respective software container instances <b>120</b>-<b>1</b>, <b>120</b>-<b>2</b>, . . . <b>120</b>-N (collectively, software container instances <b>120</b>) in which respective microservices <b>122</b>-<b>1</b>, <b>122</b>-<b>2</b>, . . . <b>122</b>-N (collectively, microservices <b>122</b>) execute. It should be appreciated that the software container instances <b>120</b> (also referred to herein as container instances <b>120</b> or containers <b>120</b>) may be optional, and that the microservices <b>122</b> may run or execute directly on the host devices <b>102</b>, or otherwise outside of the container instances <b>120</b> running on the host devices <b>102</b>. The management host device <b>104</b> runs or operates a container instance <b>140</b> (e.g., providing a container orchestration engine for a container environment including the container instances <b>120</b>). An orchestrator microservice <b>142</b> executes on the container instance <b>140</b>. Although shown as being executed or run within the container instance <b>140</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, it should be appreciated that the orchestrator microservice <b>142</b> may run directly on the management host device <b>104</b> or otherwise outside of the container instance <b>140</b> running on the management host device <b>104</b>.</p><p id="p-0035" num="0034">While <figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an example wherein each of the host devices <b>102</b> and management host device <b>104</b> runs a single container instance, embodiments are not limited to this arrangement. Instead, each of the host devices <b>102</b> and/or management host device <b>104</b> may run multiple container instances, including embodiments wherein all of the container instances (e.g., <b>120</b> and <b>140</b>) run on the same host device (e.g., one of the host devices <b>102</b> or the management host device <b>104</b>). In addition, while each of the container instances <b>120</b>, <b>140</b> is shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as running or executing just a single one of the microservices <b>122</b>, <b>142</b>, one or more of the container instances <b>120</b>, <b>140</b> may run multiple microservices. This includes arrangements where a single one of the container instances <b>120</b>, <b>140</b> runs both the orchestrator microservice <b>142</b> and one or more of the microservices <b>122</b>, where a single one of the container instances <b>120</b> runs multiple different microservices <b>122</b>, etc. Further, as noted above, the microservices <b>122</b>, <b>142</b> may run or execute directly on the host devices <b>102</b> and management host device <b>104</b>, or otherwise outside of the container instances <b>120</b>, <b>140</b> on any combination of the host devices <b>102</b> and management host device <b>104</b>.</p><p id="p-0036" num="0035">As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the microservice <b>122</b>-<b>1</b> comprises a service context management module <b>124</b> and a service context data store <b>126</b>. The service context management module <b>124</b> is configured to monitor a context of the microservice <b>122</b>-<b>1</b>, and to store such context in the service context data store <b>126</b>. The service context data store <b>126</b> may utilize storage of the host device <b>102</b>-<b>1</b> (e.g., one or more storage devices of the host device <b>102</b>-<b>1</b>, storage volumes on one or more storage arrays accessible to the host device <b>102</b>-<b>1</b> over network <b>106</b>, etc.). The context of the microservice <b>122</b>-<b>1</b> may include, but is not limited to, input data, state (e.g., status of execution of one or more tasks by the microservice <b>122</b>-<b>1</b>), error codes, etc. The service context management module <b>124</b> is also configured to transmit the context of the microservice <b>122</b>-<b>1</b> to the orchestrator microservice <b>142</b>. Although not explicitly shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> for clarity of illustration, it is assumed that other ones of the microservices <b>122</b>-<b>2</b> through <b>122</b>-N are similarly configured with respective service context management modules and service context data stores, such that the other ones of the microservices <b>122</b>-<b>2</b> through <b>122</b>-N may transmit their associated service context information to the orchestrator microservice <b>142</b>.</p><p id="p-0037" num="0036">The orchestrator microservice <b>142</b> includes a service initiation module <b>144</b> and a service context data store <b>146</b>. The service context data store <b>146</b> is configured to store context information for the microservice <b>122</b>-<b>1</b> (e.g., that is transmitted by the service context management module <b>124</b>). The service context data store <b>126</b> may utilize storage of the management host device <b>104</b> (e.g., one or more storage devices of the management host device <b>104</b>, storage volumes on one or more storage arrays accessible to the management host device <b>104</b> over network <b>106</b>, etc.). If the orchestrator microservice <b>142</b> detects failure of the microservice <b>122</b>-<b>1</b>, the service initiation module <b>144</b> is configured to retrieve the stored context information for the microservice <b>122</b>-<b>1</b> from the service context data store <b>146</b>, and utilize the retrieved context information to intelligently re-initiate the microservice <b>122</b>-<b>1</b> from the point of failure. In this way, the re-initiated microservice <b>122</b>-<b>1</b> may pick up where it left off in processing instead of clearing out data and starting tasks from the beginning.</p><p id="p-0038" num="0037">At least portions of the functionality of the service context management module <b>124</b> and the service initiation module <b>144</b> may be implemented at least in part in the form of software that is stored in memory and executed by a processor.</p><p id="p-0039" num="0038">The host devices <b>102</b> and management host device <b>104</b> in the <figref idref="DRAWINGS">FIG. <b>1</b></figref> embodiment are assumed to be implemented using at least one processing platform, with each processing platform comprising one or more processing devices each having a processor coupled to a memory. Such processing devices can illustratively include particular arrangements of compute, storage and network resources. For example, processing devices in some embodiments are implemented at least in part utilizing virtual resources such as virtual machines (VMs) or Linux containers (LXCs), or combinations of both as in an arrangement in which Docker containers or other types of LXCs are configured to run on VMs.</p><p id="p-0040" num="0039">The host devices <b>102</b> and the management host device <b>104</b> (or one or more components thereof such as the container instances <b>120</b>, <b>140</b>, microservices <b>122</b>, <b>142</b>, service context management module <b>124</b>, service initiation module <b>144</b>, service context data stores <b>126</b>, <b>146</b>) may be implemented on respective distinct processing platforms, although numerous other arrangements are possible. For example, in some embodiments at least portions of one or more of the host devices <b>102</b> and the management host device <b>104</b> are implemented on the same processing platform. The management host device <b>104</b> can therefore be implemented at least in part within at least one processing platform that implements at least a subset of the host devices <b>102</b>.</p><p id="p-0041" num="0040">The network <b>106</b> may be implemented using multiple networks of different types. For example, the network <b>106</b> may comprise a portion of a global computer network such as the Internet, although other types of networks can be part of the network <b>106</b> including a wide area network (WAN), a local area network (LAN), a satellite network, a telephone or cable network, a cellular network, a wireless network such as a WiFi or WiMAX network, a storage area network (SAN), or various portions or combinations of these and other types of networks. The network <b>106</b> in some embodiments therefore comprises combinations of multiple different types of networks each comprising processing devices configured to communicate using Internet Protocol (IP) or other related communication protocols.</p><p id="p-0042" num="0041">The host devices <b>102</b> and the management host device <b>104</b> in some embodiments may be implemented as part of a cloud-based system. The host devices <b>102</b> and the management host device <b>104</b> can be part of what is more generally referred to herein as a processing platform comprising one or more processing devices each comprising a processor coupled to a memory. A given such processing device may correspond to one or more virtual machines or other types of virtualization infrastructure such as Docker containers or other types of LXCs. As indicated above, communications between such elements of system <b>100</b> may take place over one or more networks including network <b>106</b>.</p><p id="p-0043" num="0042">The term &#x201c;processing platform&#x201d; as used herein is intended to be broadly construed so as to encompass, by way of illustration and without limitation, multiple sets of processing devices and one or more associated storage systems that are configured to communicate over one or more networks. For example, distributed implementations of the host devices <b>102</b> and the management host device <b>104</b> are possible, in which certain ones of the host devices <b>102</b> reside in one data center in a first geographic location while other ones of the host devices <b>102</b> reside in one or more other data centers in at least a second geographic location that is potentially remote from the first geographic location. The management host device <b>104</b> may be implemented at least in part in the first geographic location, the second geographic location, and one or more other geographic locations. Thus, it is possible in some implementations of the system <b>100</b> for different ones of the host devices <b>102</b> and the management host device <b>104</b> to reside in different data centers.</p><p id="p-0044" num="0043">Numerous other distributed implementations of the host devices <b>102</b> and the management host device <b>104</b> are possible. Accordingly, the host devices <b>102</b> and the management host device <b>104</b> can also be implemented in a distributed manner across multiple data centers.</p><p id="p-0045" num="0044">Additional examples of processing platforms utilized to implement portions of the system <b>100</b> in illustrative embodiments will be described in more detail below in conjunction with <figref idref="DRAWINGS">FIGS. <b>16</b> and <b>17</b></figref>.</p><p id="p-0046" num="0045">It is to be understood that the particular set of elements shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> configured for re-initiation of microservices using context information provided via service calls is presented by way of illustrative example only, and in other embodiments additional or alternative elements may be used. Thus, another embodiment may include additional or alternative systems, devices and other network entities, as well as different arrangements of modules and other components.</p><p id="p-0047" num="0046">It is to be appreciated that these and other features of illustrative embodiments are presented by way of example only, and should not be construed as limiting in any way.</p><p id="p-0048" num="0047">An exemplary process for re-initiation of microservices using context information provided via service calls will now be described in more detail with reference to the flow diagram of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. It is to be understood that this particular process is only an example, and that additional or alternative processes for re-initiation of microservices using context information provided via service calls may be used in other embodiments.</p><p id="p-0049" num="0048">In this embodiment, the process includes steps <b>200</b> through <b>204</b>. These steps are assumed to be performed by the microservices <b>122</b>-<b>1</b> and <b>142</b> utilizing the service context management module <b>124</b>, the service initiation module <b>144</b>, and the service context data stores <b>126</b>, <b>146</b>. The process begins with step <b>200</b>, identifying, at a first microservice, a service call that is to be transmitted to a second microservice. In step <b>202</b>, the service call is modified to include context information, the context information characterizing a current state of execution of one or more tasks by one of the first microservice and the second microservice. The modified service call including the context information is provided from the first microservice to the second microservice in step <b>204</b>. The context information enables re-initiation of said one of the first microservice and the second microservice to continue execution of the one or more tasks from the current state.</p><p id="p-0050" num="0049">In some embodiments, the first microservice comprises an orchestrator microservice, the second microservice comprises one of a set of two or more participating microservices in a microservices execution chain orchestrated by the orchestrator microservice, and the context information characterizes the current state of execution of the one or more tasks by the second microservice. The service call may comprise a service request to be transmitted to the second microservice, and the service request may be sent in response to detecting a failure of the second microservice. The failure of the second microservice may be detected by analyzing one or more prior service calls received from the second microservice, at least one of the one or more prior service calls comprising the context information characterizing the current state of execution of the one or more tasks by the second microservice.</p><p id="p-0051" num="0050">In other embodiments, the second microservice comprises an orchestrator microservice, the first microservice comprises one of a set of two or more participating microservices in a microservices execution chain orchestrated by the orchestrator microservice, and the context information characterizes the current state of execution of the one or more tasks by the first microservice. The service call may comprise a service response to be transmitted to the second microservice. The service response may be sent in response to detecting a failure condition in the first microservice.</p><p id="p-0052" num="0051">The first microservice may comprise an attached data store, with the context information for the second microservice being stored in the attached data store. The context information for the second microservice may be stored in the attached data store as a serialized object file. The attached data store may comprise an embedded file system of the first microservice, the context information being stored in the attached data store in a serialized data format in one or more comma separated values.</p><p id="p-0053" num="0052">The context information may comprise input data for the one or more tasks to be executed by said one of the first microservice and the second microservice, a given one of two or more stages at which execution of said one of the first microservice and the second microservice failed, and an error code indicating a type of failure of said one of the first microservice and the second microservice. The one or more tasks of said one of the first microservice and the second microservice may be executed in two or more stages in a designated order, wherein the context information characterizing the current state of execution of the one or more tasks by said one of the first microservice and the second microservice comprises an indication of a most recent one of the two or more stages successfully executed by said one of the first microservice and the second microservice, and wherein the context information enables re-initiation of said one of the first microservice and the second microservice to continue execution of the one or more tasks from a given one of the two or more stages following the most recent one of the two or more stages successfully executed by said one of the first microservice and the second microservice.</p><p id="p-0054" num="0053">Said one of the first microservice and the second microservice may be implemented within a given software container instance. Failure of said one of the first microservice and the second microservice may be detected via monitoring for failure of the given software container instance, and said one of the first microservice and the second microservice may be re-initiated utilizing the context information by re-initializing the given software container instance.</p><p id="p-0055" num="0054">As described above, the concept of microservices is based on service-oriented software development wherein a software application program (application) is created as a set of loosely-coupled services. Microservices are growing in usage, especially with container-based approaches such as, by way of example only, Kubernetes and Tansu. However, developers have found it difficult to efficiently coordinate these microservices. Microservices may be coordinated in different ways, including (i) reactive-based coordination and (ii) orchestration-based coordination. In reactive-based (also known as choreography) coordination, each microservice decides which service to be called, while in orchestration-based coordination an orchestration controller (e.g., which may be implemented as an orchestrator microservice) or some other centralized system orchestrates multiple microservices using a pre-defined configuration in a database or some other data store.</p><p id="p-0056" num="0055">Further, in orchestration-based coordination, microservices send &#x201c;heartbeat&#x201d; messages to the orchestration controller. Heartbeat messages may be provided from microservices to the orchestration controller at specified time intervals. When a microservice fails for some reason, the orchestration controller may re-initiate the microservice that failed. Such failure may be detected via the orchestration controller determining that some threshold number of heartbeat messages have not been received over some designated period of time (e.g., that the orchestration controller does not receive any heartbeat message in an expected interval of time). Failure may also or alternatively be detected on receiving a service response call from a microservice with some status code or other information indicating failure.</p><p id="p-0057" num="0056">Microservices are typically stateless and thus the re-initiated microservice will not have any previous context of its functioning/failures. <figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example of orchestration-based microservices coordination, where an orchestrator microservice <b>301</b> exchanges requests and responses with a set of microservices <b>303</b>-<b>1</b>, <b>303</b>-<b>2</b>, . . . <b>303</b>-S (collectively, microservices <b>303</b>). Such requests and responses may include the above-described heartbeat messages. Such requests and responses may also or alternatively include regular or conventional service calls that are exchanged between the orchestrator microservice <b>301</b> and participating microservices <b>303</b>. Such service calls may include, for example, service initiation or request calls issued by the orchestrator microservice <b>301</b> to the participating microservices <b>303</b>, and service response calls sent from the participating microservices <b>303</b> to the orchestrator microservice <b>301</b>. Such service calls may be utilized in both synchronous and asynchronous microservices communication protocols.</p><p id="p-0058" num="0057">In the case of a container-based orchestration wherein multiple services are executing as part of a container, when the container does not receive the heartbeat message from a given service, the controller will typically re-initiate the service from the beginning of the service (re-instantiate), thus losing any processing done by the service prior to the re-initiation. The controller may also need to roll back all changes the service has made prior to the time of failure. This is very inefficient and causes extra processing overhead. <figref idref="DRAWINGS">FIG. <b>4</b></figref> shows an example of such container-based orchestration, in which a container <b>401</b> runs one or more microservices <b>403</b> and instances <b>405</b> (<b>405</b>-<b>1</b> through <b>405</b>-<b>4</b>).</p><p id="p-0059" num="0058">Illustrative embodiments provide techniques for improved microservice management. For example, illustrative embodiments provide methodologies to enable a given microservice to be made aware of states of the given microservice by persisting context information. The persisted context information may include, for example, incoming attributes, a stage at which the microservice failed, error codes, etc. The persisted context information is transmitted to an orchestration controller, such as in the form of &#x201c;heartbeat&#x201d; messages, otherwise conventional service calls that are modified to include service context information, combinations thereof, etc. When the orchestration controller has to re-initiate the given microservice due to some failure of the given microservice, the controller uses the previously transmitted context information to recreate an execution context for the given microservice and re-initiate the given microservice to start its job from where it stopped rather than start from the beginning. In some embodiments, the orchestration controller itself is a microservice (e.g., an orchestrator microservice).</p><p id="p-0060" num="0059">As discussed above, microservices may be designed to be &#x201c;stateless&#x201d; which is applicable when using reactive-based or choreography coordination. Reactive-based or choreography coordination has considerable complexity, and thus some systems are adopting a hybrid mode that combines orchestration and reactive-based microservices coordination. When there is an orchestration controller governing execution of a set of participating microservices, the orchestration controller (which may be implemented as an orchestrator microservice) being stateless creates a lot of overhead.</p><p id="p-0061" num="0060">Since the orchestration controller or orchestrator microservice does not know what participating microservices have executed, or why participating microservices fail, the orchestrator microservice is unable to perform intelligent restart or re-initiation of the participating microservices. In other words, restarted or re-initiated participating microservices do not know where to start in processing. Sometimes, when a given participating microservice goes down, it may have already done part of the work it was assigned to do. Thus, when re-initiated the given participating microservice only needs to do the rest of the work it was assigned to do. Illustrative embodiments provide techniques for participating microservices to send service context information (possibly in the form of telemetry data as described elsewhere herein) to the orchestrator microservice, to allow the orchestrator microservice to more intelligently restart or re-initialize participating microservices when such participating microservices fail or go down. The service context information may include the state of the participating microservices, error codes or other reasons for failure of participating microservices, etc. Using such service context information, the orchestrator microservice can understand the reason behind failures of participating microservices. This enables an end-to-end path for analyzing the past failures. In a container environment, a microservice may crash a container and need to be re-initialized. Such re-initialization of the container (and associated microservices) is also not intelligent, because the container (and associated microservices) does not have knowledge of how and when it crashed. For simplicity of description below, it is assumed that an orchestrator microservice is utilized. It should be appreciated, however, that the functionality of the orchestrator microservice may be performed by another type of orchestrator controller, a container, etc.</p><p id="p-0062" num="0061">Consider an implementation where an orchestrator microservice performs orchestration for a set of participating microservices for a task. Such participating microservices can send &#x201c;heartbeat&#x201d; messages to let the orchestrator microservice know if the participating microservices are alive or not. Similarly, in a container implementation if a service is failed or crashed the container misses the &#x201c;heartbeat&#x201d; of that service and the container can re-instantiate that service. Heartbeat messages, however, are not required to be utilized in some embodiments. When a given microservice goes down, it may be in the middle of some work for a given task. The orchestrator microservice or container, however, will lose all context of the given microservice when the given microservice goes down. Thus, the given microservice needs to be re-instantiated from the start of the given task. Also, communications between microservices are implementation-dependent; microservices generally cannot &#x201c;talk&#x201d; to one another or communicate by default.</p><p id="p-0063" num="0062">Consider, as an example, an &#x201c;employee&#x201d; microservice whose job or task is to update an employee summary and update employee details. The orchestrator microservice calls the employee microservice, and passes relevant details as input. Assume that the employee microservice updates the employee summary, but crashes prior to updating the employee details. The orchestrator microservice will then re-instantiate the employee microservice and re-execute the task. Since the employee summary has already been updated, an error may be returned. Thus, before the orchestrator microservice can re-initiate the employee microservice, the orchestrator microservice may need to roll back all the changes the employee microservice previously made at the time of failure.</p><p id="p-0064" num="0063">In a conventional approach, a microservice itself (e.g., the employee microservice in the example above) needs to persist data in an external database. At the time of re-initiation, the container should pick the data from the external database and re-initiate. This is not optimal. Illustrative embodiments provide a more optimal approach, whereby microservices can store error messages and other context information within the microservices and also communicate or transmit such context information (e.g., via micro-telemetry, enhanced service calls, combinations thereof, etc.) to other microservices as well as containers on which the microservices run. Thus, at re-initiation time, all the participants know where to start again.</p><p id="p-0065" num="0064">Using the techniques described herein, a microservice (e.g., the employee microservice in the example above) is made self-aware of the different states that it goes through during its task, such as by persisting incoming attributes (e.g., employee identifier (ID), employee name, etc.), stages (e.g., updating employee summary, updated employee summary, updating employee details, updated employee details, etc.), and error codes (e.g., for the last transaction) in a data attached microservice. Micro-telemetry and/or enhanced service calls are further enabled between microservices, where such details may be sent to the orchestrator microservice and/or container from participating microservices. Again continuing with the example above, the employee microservice may transmit such details as telemetry data or enhanced service calls to the orchestrator microservice. When the orchestrator microservice re-initiates participating microservices (e.g., the employee microservice in the example above), the details from the received telemetry data or enhanced service calls are used to re-create the context and intelligently re-initiate the participating microservices to start jobs or tasks from where they stopped (e.g., the re-initiated employee microservice will only update the employee details as the employee summary update was completed successfully) rather than from the beginning of the job or task.</p><p id="p-0066" num="0065">Conventional microservice designs do not enable a microservice to have the capability to store data by itself. Instead, the microservice needs to use a remote or external database (DB) to store data. Illustrative embodiments enable data storage as part of a microservice, as well as communication of such stored data. Such communication may be in the form of &#x201c;telemetry&#x201d; messages (e.g., as described below in conjunction with <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>7</b></figref>), or in the form of &#x201c;enhanced&#x201d; service calls (e.g., as described below in conjunction with <figref idref="DRAWINGS">FIGS. <b>13</b>-<b>15</b></figref>).</p><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example implementation of a microservice <b>500</b>, which includes a primary service module <b>501</b>, a telemetry communication module <b>503</b>, and a data module <b>505</b>. The primary service module <b>501</b> may be configured to perform primary tasks of the microservice <b>500</b>. In the example &#x201c;employee&#x201d; microservice described, such primary tasks may include updating the employee summary and employee details. The primary service module <b>501</b> also provides status information (e.g., current state of the primary tasks such as input data, stages of the primary tasks, error codes for latest transactions, etc.) for storage by the data module <b>505</b>. The telemetry communication module <b>503</b> is configured to provide such status information in the form of telemetry data or service context that is provided in &#x201c;heartbeat&#x201d; messages to an orchestrator. As described elsewhere herein (e.g., in conjunction with <figref idref="DRAWINGS">FIGS. <b>13</b>-<b>15</b></figref>), service context information may also or alternatively be communicated using enhanced service calls.</p><p id="p-0068" num="0067">The concept of enabling data storage as part of the microservice <b>500</b> may also be referred to herein as a &#x201c;side car&#x201d; to the microservice <b>500</b>. The data module <b>505</b> in the microservice <b>500</b> may implement a .ser file store (e.g., an object saved using serialization). As noted above, the data persisted in the .ser file store may include input data or incoming attributes, stages of the primary tasks of the microservice <b>500</b>, error codes encountered during the primary tasks of the microservice <b>500</b> (e.g., for latest transactions only), etc. Such &#x201c;side car&#x201d; reference data will go every time the microservice instance goes. When the microservice <b>500</b> instantiates data (e.g., for primary tasks executed by the primary service module <b>501</b>), it is attached (e.g., by the data module <b>505</b>), similar to the &#x201c;side car&#x201d; data, to the primary service module <b>501</b>. When the primary service is down or fails, its data is still persisted in the .ser file by the data module <b>505</b>. Thus, when the microservice <b>500</b> is re-instantiated the instance will be attached to the data again by the data module <b>505</b>.</p><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows an information processing system environment including an orchestrator microservice <b>600</b>-<b>1</b>, a participating microservice <b>600</b>-<b>2</b>, and one or more additional participating microservices <b>600</b>-<b>3</b>. The orchestrator microservice <b>600</b>-<b>1</b> includes a primary service module <b>601</b>-<b>1</b>, telemetry communication module <b>603</b>-<b>1</b>, data module <b>605</b>-<b>1</b> and service initiator module <b>607</b>. The participating microservice <b>600</b>-<b>2</b> includes a primary service module <b>601</b>-<b>2</b>, telemetry communication module <b>603</b>-<b>2</b>, data module <b>605</b>-<b>2</b> and a telemetry processing module <b>609</b>. The primary service modules <b>601</b>-<b>1</b> and <b>601</b>-<b>2</b>, telemetry communication modules <b>603</b>-<b>1</b> and <b>603</b>-<b>2</b>, and data modules <b>605</b>-<b>1</b> and <b>605</b>-<b>2</b> may provide functionality similar to that described above with respect to the primary service module <b>501</b>, telemetry communication module <b>503</b> and data module <b>505</b>. Although not explicitly shown, one or more of the additional participating microservices <b>600</b>-<b>3</b> may each be configured with a respective primary service module, telemetry communication module, data module and telemetry processing module.</p><p id="p-0070" num="0069">The information processing system environment of <figref idref="DRAWINGS">FIG. <b>6</b></figref> introduces the concept of inter-microservice telemetry for context information sharing. In conventional microservice architectures, communication between microservices is only actual microservice calls (e.g., &#x201c;business calls&#x201d;). In other words, there is no transfer of microservice context data between microservices. <figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates transfer of microservice context data (also referred to as telemetry data) between the participating microservice <b>600</b>-<b>2</b> and the orchestrator microservice <b>600</b>-<b>1</b>. Such telemetry data may include input data (incoming attributes), stages of microservice task execution, error codes, etc. This enables the orchestrator microservice <b>600</b>-<b>1</b> to use all or part of this context information to restart the participating microservice <b>600</b>-<b>2</b> (e.g., following failure of the participating microservice <b>600</b>-<b>2</b>) at the point where the participating microservice <b>600</b>-<b>2</b> failed rather than at the beginning of processing again.</p><p id="p-0071" num="0070">As shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the participating microservice <b>600</b>-<b>2</b> includes the telemetry processing module <b>609</b> (e.g., providing an implementation of a &#x201c;side car&#x201d; for the participating microservice <b>600</b>-<b>2</b>, which together with the telemetry communication module <b>603</b>-<b>2</b> provides a built-in sender and receiver of telemetry data). At the time when an error occurs in processing by the primary service module <b>601</b>-<b>2</b>, the telemetry processing module <b>609</b> and telemetry communication module <b>603</b>-<b>2</b> may still be in good health. The telemetry processing module <b>609</b> can thus take the microservice context information data attached via the data module <b>605</b>-<b>2</b>, and provides such microservice context information as telemetry data to the orchestrator microservice <b>600</b>-<b>1</b> utilizing the telemetry communication module <b>603</b>-<b>2</b>. At the orchestrator microservice <b>600</b>-<b>1</b>, the telemetry communication module <b>603</b>-<b>1</b> will provide the received microservice context information to its data module <b>605</b>-<b>1</b> for storage therein.</p><p id="p-0072" num="0071">As the orchestrator microservice <b>600</b>-<b>1</b> now has the context information of the failure of the participating microservice <b>600</b>-<b>2</b>, it can re-initiate the participating microservice <b>600</b>-<b>2</b> to start from where it failed (e.g., rather than the beginning of processing). The orchestrator microservice <b>600</b>-<b>1</b> will utilize the service initiator module <b>607</b> to do so. The service initiator module <b>607</b> will retrieve the context information for the failed participating microservice <b>600</b>-<b>2</b> from its data module <b>605</b>-<b>1</b>, and use such information when re-initiating the participating microservice <b>600</b>-<b>2</b>.</p><p id="p-0073" num="0072">Consider an example scenario, where the orchestrator microservice <b>600</b>-<b>1</b> is used to orchestrate a series of microservices (e.g., including the participating microservice <b>600</b>-<b>2</b> and the one or more additional participating microservices <b>600</b>-<b>3</b>). Continuing with the example above, assume that the series of microservices includes a microservices chain including a &#x201c;quote&#x201d; microservice&#x2192;&#x201c;order&#x201d; microservice&#x2192;&#x201c;order validation&#x201d; microservice&#x2192;&#x201c;employee&#x201d; microservice. In a conventional approach, if a microservice in the chain is failing, orchestration will start from the beginning again (e.g., from the quote microservice). Even if an external log DB is used to keep track of which microservice in the chain is currently executing, orchestration would still restart from the beginning of that microservice in the chain (rather than from the point at which processing within that microservice completed prior to failure). Consider, as an example, that the employee microservice failed, and at the point of failure its associated context indicates that the employee summary is already updated, and thus only the employee details need to be updated. Using the techniques described herein, the orchestrator microservice <b>600</b>-<b>1</b> knows the context of the failure of the participating microservice <b>600</b>-<b>2</b> (e.g., the stage of failure of the employee microservice) through the micro-telemetry and can thus more intelligently re-initiate the participating microservice <b>600</b>-<b>2</b>. This advantageously saves computing resources, as duplicate processing is avoided.</p><p id="p-0074" num="0073">In a container environment (e.g., where the orchestrator microservice <b>600</b>-<b>1</b> is a container and the participating microservice <b>600</b>-<b>2</b> is a service running in the container), the container can &#x201c;just&#x201d; re-initiate the service as the service has the context of its last failure within (e.g., as part of its attached data). Thus, the service can re-initiate with the context by taking the current input from the attached data and automatically starting from where it left off before failure (e.g., in the example above, with updating the employee details). Here, the service itself is intelligent using the attached data and the context of last failure.</p><p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a process flow for the orchestrator microservice <b>600</b>-<b>1</b> to re-initiate a failed participating microservice <b>600</b>-<b>2</b>. Prior to failure, the primary service module <b>601</b>-<b>2</b> of the participating microservice <b>600</b>-<b>2</b> is performing an assigned task (e.g., in the example employee microservice, updating the employee summary and updating the employee details). The primary service module <b>601</b>-<b>2</b> will update service context in step <b>701</b> with the telemetry processing module <b>609</b>. Step <b>701</b> may be performed periodically (e.g., each time a &#x201c;heartbeat&#x201d; message is to be transmitted to the orchestrator microservice <b>600</b>-<b>1</b>), whenever the primary service module <b>601</b>-<b>2</b> completes a &#x201c;stage&#x201d; of its assigned task (e.g., after updating the employee summary, after updating the employee details), in response to an explicit request, in response to detecting or predicting an error condition, in response to detecting or predicting failure of the participating microservice <b>600</b>-<b>2</b>, combinations thereof, etc. In step <b>702</b>, the telemetry processing module <b>609</b> stores the service context in the data module <b>605</b>-<b>2</b> (e.g., in a .ser file store).</p><p id="p-0076" num="0075">The data module <b>605</b>-<b>2</b> provides the service context to the telemetry communication module <b>603</b>-<b>2</b> in step <b>703</b>, and the telemetry communication module <b>603</b>-<b>2</b> of the participating microservice <b>600</b>-<b>2</b> transmits its service context to the telemetry communication module <b>603</b>-<b>1</b> of the orchestrator microservice <b>600</b>-<b>1</b> in step <b>704</b>. In some embodiments, steps <b>703</b> and <b>704</b> are performed periodically at regular intervals where the service context is transmitted in &#x201c;heartbeat&#x201d; messages sent from the participating microservice <b>600</b>-<b>2</b> to the orchestrator microservice <b>600</b>-<b>1</b>. It should be noted that, if there is no update to the service context of the participating microservice <b>600</b>-<b>2</b> between heartbeat messages, the service context is not required to be transmitted again (e.g., to save bandwidth). The telemetry communication module <b>603</b>-<b>1</b> of the orchestrator microservice <b>600</b>-<b>1</b> stores the service context of the participating microservice <b>600</b>-<b>2</b> in its data module <b>605</b>-<b>1</b> (e.g., in a .ser file store) in step <b>705</b>.</p><p id="p-0077" num="0076">The primary service module <b>601</b>-<b>1</b> of the orchestrator microservice <b>600</b>-<b>1</b> is assumed to detect failure of the participating microservice <b>600</b>-<b>2</b> in step <b>706</b>. Such failure may be detected if the participating microservice <b>600</b>-<b>2</b> misses some designated number of heartbeat messages in a specified period of time (e.g., such as missing a single heartbeat message, missing two or more consecutive heartbeat messages, etc.). On detecting failure of the participating microservice <b>600</b>-<b>2</b> in step <b>706</b>, the primary service module <b>601</b>-<b>1</b> of the orchestrator microservice <b>600</b>-<b>1</b> directs the service initiator module <b>607</b> to re-initiate the participating microservice <b>600</b>-<b>2</b>. The service initiator module <b>607</b> of the orchestrator microservice <b>600</b>-<b>1</b> then retrieves the service context of the participating microservice <b>600</b>-<b>2</b> from the data module <b>605</b>-<b>1</b> in step <b>707</b>. In step <b>708</b>, the service initiator module <b>607</b> of the orchestrator microservice <b>600</b>-<b>1</b> re-initiates the participating microservice <b>600</b>-<b>2</b> using the retrieved service context.</p><p id="p-0078" num="0077">Example implementations of an orchestrator microservice (e.g., orchestrator microservice <b>600</b>-<b>1</b>) and a participating microservice (e.g., participating microservice <b>600</b>-<b>2</b>) will now be described. In this example, the orchestrator microservice is built using Spring Boot annotations. This may be taken to the framework, so that the user can keep existing annotations for telemetry (e.g., to implement telemetry communication modules <b>603</b>-<b>1</b> and <b>603</b>-<b>2</b>). For telemetry, attached data (e.g., to implement data modules <b>605</b>-<b>1</b> and <b>605</b>-<b>2</b>) is mandatory, and for the attached data the &#x201c;side car&#x201d; (e.g., to implement telemetry processing module <b>609</b> and service initiator module <b>607</b>) is needed. In the orchestrator, the different participating microservices are defined and marked as &#x201c;stages.&#x201d;</p><p id="p-0079" num="0078">The communication between the modules (e.g., primary service modules <b>601</b>-<b>1</b> and <b>601</b>-<b>2</b>, telemetry communication modules <b>603</b>-<b>1</b> and <b>603</b>-<b>2</b>, data modules <b>605</b>-<b>1</b> and <b>605</b>-<b>2</b>, telemetry processing module <b>609</b> and service initiator module <b>607</b>) is as follows. The primary service modules <b>601</b>-<b>1</b> and <b>601</b>-<b>2</b> may be used for implementing tasks (e.g., business tasks where developers will write the code). Continuing with the example above, the employee microservice performs tasks of updating employee summary and employee details. Assume that the employee microservice errors out when updating the employee details (e.g., the employee summary is successfully inserted or updated). Thus, the employee microservice may log an error code (e.g., code <b>500</b>). The &#x201c;side car&#x201d; of the employee microservice (e.g., the telemetry processing module <b>609</b> of the participating microservice <b>600</b>-<b>2</b>) will read the error code, and construct context information including the input, error code and stage. This is then persisted in the attached data store (e.g., data module <b>605</b>-<b>2</b>) of the employee microservice. A telemetry sender of the employee microservice (e.g., telemetry communication module <b>603</b>-<b>2</b>) reads the message and telemetry to the orchestrator microservice. This illustratively acts as a built-in &#x201c;heartbeat&#x201d; between the orchestrator and employee microservice. The orchestrator microservice telemetry receiver (e.g., telemetry communication module <b>603</b>-<b>1</b>) receives the message and keeps it in its attached data store (e.g., data module <b>605</b>-<b>1</b>). When the orchestrator microservice re-initiates the employee microservice (or retries a current request), it reads the context information from its attached data store for the error code and state, and re-initiates the employee microservice with the stored context (e.g., using service initiator module <b>607</b>). The employee microservice, when re-executed, will skip the employee summary update (as this was successfully completed prior to failure, as indicated in the transmitted context information) and only runs the employee details update. Such intelligent re-execution may also be enabled using enhanced service calls as described in further detail below with respect to <figref idref="DRAWINGS">FIGS. <b>13</b>-<b>15</b></figref>.</p><p id="p-0080" num="0079">In an implementation, the telemetry communication annotation (e.g., for implementing telemetry communications modules <b>603</b>-<b>1</b> and <b>603</b>-<b>2</b>) may be part of a framework. In the description below, such annotations are described for a Spring Boot implementation. Custom annotations may be utilized, such as @EnableAttachData (e.g., which will enable the port to read/write to the embedded file system in a .ser format in comma separated values) and @EnableTelemetryCommunication (e.g., which will enable opening the socket for sending data and the socket server for listening to other microservices using a range of ports defined in configuration files). Similarly, an annotation @EnableTelemetryProcessing may be utilized for functions of the telemetry processing module <b>609</b> (for a participating microservice) or the service initiator module <b>607</b> (for an orchestrator microservice).</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows pseudocode <b>800</b> for microservice initiation using the above-described annotations. Again, it should be noted that while pseudocode is shown using the custom annotations described above, the functionality of the various modules of orchestrator and participating microservices may also be implemented within the microservices framework (e.g., an Istio framework). <figref idref="DRAWINGS">FIG. <b>9</b></figref> shows pseudocode <b>900</b> for the custom annotations. The @EnableTelemetryCommunication annotation will now be further considered. As described above, the @EnableTelemetryCommunication annotation is configured to listen for and send messages to other microservices. Each microservice with the @EnableTelemetryCommunication annotation will open a server socket with a unique port number. All instances of the microservice will use the same port to receive messages. <figref idref="DRAWINGS">FIG. <b>10</b></figref> shows pseudocode <b>1000</b> for the orchestrator microservice to open a unique port <b>10012</b>. Here, the orchestrator microservice listens on port <b>10012</b> (e.g., which is configurable in an associated .yaml file) for messages from the participating microservices. Once such messages (e.g., heartbeats) are received, the associated context information will be stored in an attached data store using port <b>10050</b>.</p><p id="p-0082" num="0081">Functionality of the primary service, attached data and telemetry processing and communication for the participating microservice will now be described, again with respect to the example employee microservice. On failure of the employee microservice, the &#x201c;side car&#x201d; (e.g., telemetry processing module <b>609</b>) will insert context data in the attached data store (e.g., data module <b>605</b>-<b>2</b>). The context data, in some embodiments, is stored using a JSON format. The context data will then be communicated in a message to the orchestrator microservice (e.g., using telemetry communication module <b>603</b>-<b>2</b>) on port <b>10012</b> where the orchestrator microservice's associated telemetry module (e.g., telemetry communication module <b>603</b>-<b>1</b>) will be listening. FIG. <b>11</b> shows pseudocode <b>1100</b> for such messaging. The orchestrator microservice is thus made aware of the context of the failure of the employee microservice (e.g., that the employee summary is inserted but the employee details were not). Thus, when the orchestrator microservice re-executes the same task (e.g., using service initiator module <b>607</b>), the re-initiated employee microservice will start with updating employee details. Similarly, the container re-initiation after service failure will be re-instantiated from the updating employee details task or stage. <figref idref="DRAWINGS">FIG. <b>12</b></figref> shows an example configuration file <b>1200</b> (e.g., an application.yaml file) for the orchestrator or participating microservice.</p><p id="p-0083" num="0082">As described above, in some embodiments the context information may be transmitted via enhanced service calls in addition to or in place of via micro-telemetry heartbeat messages. An &#x201c;enhanced&#x201d; service call may be an otherwise conventional service call between microservices (e.g., between an orchestrator microservice and a participating microservice) that is modified to include context information enabling intelligent re-initiation or re-execution of microservices in the event of failure.</p><p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. <b>13</b></figref> shows an example implementation of a microservice <b>1300</b>, which includes a primary service module <b>1301</b>, a service call enhancement module <b>1303</b>, and a data module <b>1305</b>. The primary service module <b>1301</b>, similar to the primary service module <b>501</b> described above, may be configured to perform primary tasks of the microservice <b>1300</b>. In the example &#x201c;employee&#x201d; microservice described, such primary tasks may include updating the employee summary and employee details. The primary service module <b>1301</b> also provides status information (e.g., current state of the primary tasks such as input data, stages of the primary tasks, error codes for latest transactions, etc.) for storage by the data module <b>1305</b>. The service call enhancement module <b>1303</b> is configured to modify otherwise conventional service calls to include such status information. For example, orchestrator and participating microservices may exchange various service calls such as where the orchestrator microservice issues service request calls to the participating microservices, and the participating microservices issue service response calls to the orchestrator microservice. It should be noted that such service request and response calls may be part of synchronous communication between the orchestrator and participating microservices, or as part of asynchronous communication between the orchestrator and participating microservices. In such asynchronous communication, the service call responses may be notifications, asynchronous responses to requests, message-based communication, etc.</p><p id="p-0085" num="0084">The concept of enabling data storage as part of the microservice <b>1300</b> may also be referred to herein as a &#x201c;side car&#x201d; to the microservice <b>1300</b> as discussed above. The data module <b>1305</b> in the microservice <b>1300</b> may implement a .ser file store (e.g., an object saved using serialization). As noted above, the data persisted in the .ser file store may include input data or incoming attributes, stages of the primary tasks of the microservice <b>1300</b>, error codes encountered during the primary tasks of the microservice <b>1300</b> (e.g., for latest transactions only), etc. Such &#x201c;side car&#x201d; reference data will go every time the microservice instance goes. When the microservice <b>1300</b> instantiates data (e.g., for primary tasks executed by the primary service module <b>1301</b>), it is attached (e.g., by the data module <b>1305</b>) similar to the &#x201c;side car&#x201d; data to the primary service module <b>1301</b>. When the primary service is down or fails, its data is still persisted in the .ser file by the data module <b>1305</b>. Thus, when the microservice <b>1300</b> is re-instantiated the instance will be attached to the data again by the data module <b>1305</b>.</p><p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows an information processing system environment including an orchestrator microservice <b>1400</b>-<b>1</b>, a participating microservice <b>1400</b>-<b>2</b>, and one or more additional participating microservices <b>1400</b>-<b>3</b>. The orchestrator microservice <b>1400</b>-<b>1</b> includes a primary service module <b>1401</b>-<b>1</b>, service call enhancement module <b>1403</b>-<b>1</b>, data module <b>1405</b>-<b>1</b> and service initiator module <b>1407</b>. The participating microservice <b>1400</b>-<b>2</b> includes a primary service module <b>1401</b>-<b>2</b>, service call enhancement module <b>1403</b>-<b>2</b>, and data module <b>1405</b>-<b>2</b>. The primary service modules <b>1401</b>-<b>1</b> and <b>1401</b>-<b>2</b>, service call enhancement modules <b>1403</b>-<b>1</b> and <b>1403</b>-<b>2</b>, and data modules <b>1405</b>-<b>1</b> and <b>1405</b>-<b>2</b> may provide functionality similar to that described above with respect to the primary service module <b>1301</b>, service call enhancement module <b>1303</b> and data module <b>1305</b>. Although not explicitly shown, one or more of the additional participating microservices <b>1400</b>-<b>3</b> may each be configured with a respective primary service module, service call enhancement module, and data module.</p><p id="p-0087" num="0086">The information processing system environment of <figref idref="DRAWINGS">FIG. <b>14</b></figref> introduces the concept of enhanced service calls for context information sharing. In conventional microservice architectures, communication between microservices is only actual microservice calls (e.g., &#x201c;business calls&#x201d;). Such conventional service calls do not transfer context data between microservices. <figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates transfer of microservice context data between the participating microservice <b>1400</b>-<b>2</b> and the orchestrator microservice <b>1400</b>-<b>1</b> via enhanced service calls. Such context information may include input data (incoming attributes), stages of microservice task execution, error codes, etc. This enables the orchestrator microservice <b>1400</b>-<b>1</b> to use all or part of this context information to restart the participating microservice <b>1400</b>-<b>2</b> (e.g., following failure of the participating microservice <b>1400</b>-<b>2</b>) at the point where the participating microservice <b>1400</b>-<b>2</b> failed rather than at the beginning of processing again.</p><p id="p-0088" num="0087">As shown in <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the participating microservice <b>1400</b>-<b>2</b> includes the service call enhancement module <b>1403</b>-<b>2</b>. The service call enhancement module <b>1403</b>-<b>2</b> interacts with the primary service module <b>1401</b>-<b>1</b>, to modify otherwise conventional service calls that would normally be exchanged between the participating microservice <b>1400</b>-<b>2</b> and the orchestrator microservice <b>1400</b>-<b>1</b>. Such conventional service calls, for example, may be HTTP messages such as an HTTP 200 OK message (e.g., indicating success of a request), an HTTP 400 Bad Request message (e.g., indicating that a request could not be understood), an HTTP 500 Internal Server Error message (e.g., indicating some unexpected condition that prevents fulfillment of a request), etc. These and other types of messages (including messages that do not necessarily use the HTTP protocol or HTTP status codes) may be used for conventional service calls. The service call enhancement module <b>1403</b>-<b>2</b> may detect when the primary service module <b>1401</b>-<b>1</b> generates such conventional service call messages that are to be transmitted to the orchestrator microservice <b>1400</b>-<b>1</b>. The service call enhancement module <b>1403</b>-<b>2</b> will modify or alter such conventional service call messages to include service context information (e.g., input, stage of execution, error codes or information, etc.). At the orchestrator microservice <b>1400</b>-<b>1</b>, the primary service module <b>1401</b>-<b>1</b> may utilize its service call enhancement module <b>1403</b>-<b>1</b> to parse such enhanced service calls and store the received microservice context information to its data module <b>1405</b>-<b>1</b> for storage therein.</p><p id="p-0089" num="0088">As the orchestrator microservice <b>1400</b>-<b>1</b> now has the context information of the failure of the participating microservice <b>1400</b>-<b>2</b>, it can re-initiate the participating microservice <b>1400</b>-<b>2</b> to start from where it failed (e.g., rather than the beginning of processing). The orchestrator microservice <b>1400</b>-<b>1</b> will utilize the service initiator module <b>1407</b> to do so. The service initiator module <b>1407</b> will utilize the service call enhancement module <b>1401</b>-<b>1</b> to retrieve service context information from the data module <b>1405</b>-<b>1</b> and then generate an enhanced service call for re-initiating the participating microservice <b>1400</b>-<b>2</b> (e.g., from the point of failure).</p><p id="p-0090" num="0089">Consider an example scenario, where the orchestrator microservice <b>1400</b>-<b>1</b> is used to orchestrate a series of microservices (e.g., including the participating microservice <b>1400</b>-<b>2</b> and the one or more additional participating microservice <b>1400</b>-<b>3</b>). Continuing with the example above, assume that the series of microservices includes a microservices chain including a &#x201c;quote&#x201d; microservice&#x2192;&#x201c;order&#x201d; microservice&#x2192;&#x201c;order validation&#x201d; microservice&#x2192;&#x201c;employee&#x201d; microservice. In a conventional approach, if a microservice in the chain is failing, orchestration will start from the beginning again (e.g., from the quote microservice). Even if an external log DB is used to keep track of which microservice in the chain is currently executing, orchestration would still restart from the beginning of that microservice in the chain (rather than from the point at which processing within that microservice completed prior to failure). Consider, as an example, that the employee microservice failed, and at the point of failure its associated context indicates that the employee summary is already updated, and thus only the employee details need to be updated. Using the techniques described herein, the orchestrator microservice <b>1400</b>-<b>1</b> knows the context of the failure of the participating microservice <b>1400</b>-<b>2</b> (e.g., the stage of failure of the employee microservice) and can thus more intelligently re-initiate the participating microservice <b>1400</b>-<b>2</b>. This advantageously saves computing resources, as duplicate processing is avoided.</p><p id="p-0091" num="0090">In a container environment (e.g., where the orchestrator microservice <b>1400</b>-<b>1</b> is a container and the participating microservice <b>1400</b>-<b>2</b> is a service running in the container), the container can &#x201c;just&#x201d; re-initiate the service as the service has the context of its last failure within (e.g., as part of its attached data). Thus, the service can re-initiate with the context by taking the current input from the attached data and automatically starting from where it left off before failure (e.g., in the example above, with updating the employee details). Here, the service itself is intelligent using the attached data and the context of last failure.</p><p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. <b>15</b></figref> shows a process flow for the orchestrator microservice <b>1400</b>-<b>1</b> to re-initiate a failed participating microservice <b>1400</b>-<b>2</b>. Prior to failure, the primary service module <b>1401</b>-<b>2</b> of the participating microservice <b>1400</b>-<b>2</b> is performing an assigned task (e.g., in the example employee microservice, updating the employee summary and updating the employee details). The primary service module <b>1401</b>-<b>2</b> will update service context in step <b>1501</b> with the data module <b>1405</b>-<b>2</b>. Step <b>1501</b> may be performed periodically (e.g., on some set schedule or interval), whenever the primary service module <b>1401</b>-<b>2</b> completes a &#x201c;stage&#x201d; of its assigned task (e.g., after updating the employee summary, after updating the employee details), in response to an explicit request, in response to detecting or predicting an error condition, in response to detecting or predicting failure of the participating microservice <b>1400</b>-<b>2</b>, combinations thereof, etc.</p><p id="p-0093" num="0092">In step <b>1502</b>, the service call enhancement module <b>1403</b>-<b>2</b> retrieves the service context in the data module <b>1405</b>-<b>2</b> (e.g., in a .ser file store). Step <b>1502</b> may be performed responsive to the service call enhancement module <b>1403</b>-<b>2</b> detecting that the primary service module <b>1401</b>-<b>2</b> will be transmitting an otherwise conventional service call to the orchestrator microservice <b>1400</b>-<b>1</b>, and that there is some update to the service context of the participating microservice <b>1400</b>-<b>2</b> that has not yet been communicated to the orchestrator microservice <b>1400</b>-<b>1</b>. In step <b>1503</b>, the service call enhancement module <b>1403</b>-<b>2</b> will modify the conventional service call to include the service context information retrieved in step <b>1502</b> to generate an enhanced service call. In step <b>1504</b>, the enhanced service call with the service context is transmitted to the primary service module <b>1401</b>-<b>1</b> of the orchestrator microservice <b>1400</b>-<b>1</b>. The orchestrator microservice <b>1400</b>-<b>1</b> stores the service context of the participating microservice <b>1400</b>-<b>2</b> in its data module <b>1405</b>-<b>1</b> (e.g., in a .ser file store) in step <b>1505</b>.</p><p id="p-0094" num="0093">The primary service module <b>1401</b>-<b>1</b> of the orchestrator microservice <b>1400</b>-<b>1</b> is assumed to detect failure of the participating microservice <b>1400</b>-<b>2</b> in step <b>1506</b>. Such failure may be detected based on analysis of the service context information of the participating microservice <b>1400</b>-<b>2</b>, on some timeout following submission of a service request call without a corresponding service response call (which, as noted above, may be as part of synchronous or asynchronous microservice communication), from service context information from another microservice (e.g., another participating microservice in a chain of participating microservices which reports an error due to lack of completion of tasks of the participating microservice <b>1400</b>-<b>2</b>), etc. On detecting failure of the participating microservice <b>1400</b>-<b>2</b> in step <b>1506</b>, the service initiator module <b>1407</b> will generate an otherwise conventional service call to re-initiate the participating microservice <b>1400</b>-<b>2</b>. The service call enhancement module <b>1403</b>-<b>1</b> will detect this, and in step <b>1507</b> will retrieve the service context of the participating microservice <b>1400</b>-<b>2</b> from the data module <b>1405</b>-<b>1</b>. The service call enhancement module <b>1403</b>-<b>1</b> in step <b>1508</b> will then generate an enhanced service call for re-initiating the participating microservice <b>1400</b>-<b>2</b> that directs the participating microservice <b>1400</b>-<b>2</b> to resume execution from its failed state (e.g., a current stage of execution prior to failure). The service initiator module <b>1407</b> in step <b>1509</b> transmits the enhanced service call with the retrieved service context to the participating microservice <b>1400</b>-<b>2</b>.</p><p id="p-0095" num="0094">The techniques described herein advantageously enable context-aware initiation of microservices, using attached data and new re-initiation logic that uses the last failure context. Thus, when re-initiating a microservice, the techniques described herein avoid the overhead of clearing the data proliferation due to microservice instance failure, and avoid restarting a task from its first step (when one or more steps or stages were successfully completed prior to failure). Further, the techniques described herein in some embodiments enable inter-microservice telemetry for microservices environments, utilize enhanced service calls for communicating service context information, combinations thereof, etc. In conventional microservices environments, communication between microservices is only actual microservice calls as there is no telemetry of microservice data or context transmitted between microservices. Illustrative embodiments enable built-in &#x201c;heartbeat&#x201d; or other messages such as enhanced service calls between orchestrator and participating microservices to include such telemetry data (e.g., microservice context information).</p><p id="p-0096" num="0095">It is to be appreciated that the particular advantages described above and elsewhere herein are associated with particular illustrative embodiments and need not be present in other embodiments. Also, the particular types of information processing system features and functionality as illustrated in the drawings and described above are exemplary only, and numerous other arrangements may be used in other embodiments.</p><p id="p-0097" num="0096">Illustrative embodiments of processing platforms utilized to implement functionality for re-initiation of microservices using context information provided via service calls will now be described in greater detail with reference to <figref idref="DRAWINGS">FIGS. <b>16</b> and <b>17</b></figref>. Although described in the context of system <b>100</b>, these platforms may also be used to implement at least portions of other information processing systems in other embodiments.</p><p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. <b>16</b></figref> shows an example processing platform comprising cloud infrastructure <b>1600</b>. The cloud infrastructure <b>1600</b> comprises a combination of physical and virtual processing resources that may be utilized to implement at least a portion of the information processing system <b>100</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The cloud infrastructure <b>1600</b> comprises multiple virtual machines (VMs) and/or container sets <b>1602</b>-<b>1</b>, <b>1602</b>-<b>2</b>, . . . <b>1602</b>-L implemented using virtualization infrastructure <b>1604</b>. The virtualization infrastructure <b>1604</b> runs on physical infrastructure <b>1605</b>, and illustratively comprises one or more hypervisors and/or operating system level virtualization infrastructure. The operating system level virtualization infrastructure illustratively comprises kernel control groups of a Linux operating system or other type of operating system.</p><p id="p-0099" num="0098">The cloud infrastructure <b>1600</b> further comprises sets of applications <b>1610</b>-<b>1</b>, <b>1610</b>-<b>2</b>, . . . <b>1610</b>-L running on respective ones of the VMs/container sets <b>1602</b>-<b>1</b>, <b>1602</b>-<b>2</b>, . . . <b>1602</b>-L under the control of the virtualization infrastructure <b>1604</b>. The VMs/container sets <b>1602</b> may comprise respective VMs, respective sets of one or more containers, or respective sets of one or more containers running in VMs.</p><p id="p-0100" num="0099">In some implementations of the <figref idref="DRAWINGS">FIG. <b>16</b></figref> embodiment, the VMs/container sets <b>1602</b> comprise respective VMs implemented using virtualization infrastructure <b>1604</b> that comprises at least one hypervisor. A hypervisor platform may be used to implement a hypervisor within the virtualization infrastructure <b>1604</b>, where the hypervisor platform has an associated virtual infrastructure management system. The underlying physical machines may comprise one or more distributed processing platforms that include one or more storage systems.</p><p id="p-0101" num="0100">In other implementations of the <figref idref="DRAWINGS">FIG. <b>16</b></figref> embodiment, the VMs/container sets <b>1602</b> comprise respective containers implemented using virtualization infrastructure <b>1604</b> that provides operating system level virtualization functionality, such as support for Docker containers running on bare metal hosts, or Docker containers running on VMs. The containers are illustratively implemented using respective kernel control groups of the operating system.</p><p id="p-0102" num="0101">As is apparent from the above, one or more of the processing modules or other components of system <b>100</b> may each run on a computer, server, storage device or other processing platform element. A given such element may be viewed as an example of what is more generally referred to herein as a &#x201c;processing device.&#x201d; The cloud infrastructure <b>1600</b> shown in <figref idref="DRAWINGS">FIG. <b>16</b></figref> may represent at least a portion of one processing platform. Another example of such a processing platform is processing platform <b>1700</b> shown in <figref idref="DRAWINGS">FIG. <b>17</b></figref>.</p><p id="p-0103" num="0102">The processing platform <b>1700</b> in this embodiment comprises a portion of system <b>100</b> and includes a plurality of processing devices, denoted <b>1702</b>-<b>1</b>, <b>1702</b>-<b>2</b>, <b>1702</b>-<b>3</b>, . . . <b>1702</b>-K, which communicate with one another over a network <b>1704</b>.</p><p id="p-0104" num="0103">The network <b>1704</b> may comprise any type of network, including by way of example a global computer network such as the Internet, a WAN, a LAN, a satellite network, a telephone or cable network, a cellular network, a wireless network such as a WiFi or WiMAX network, or various portions or combinations of these and other types of networks.</p><p id="p-0105" num="0104">The processing device <b>1702</b>-<b>1</b> in the processing platform <b>1700</b> comprises a processor <b>1710</b> coupled to a memory <b>1712</b>.</p><p id="p-0106" num="0105">The processor <b>1710</b> may comprise a microprocessor, a microcontroller, an application-specific integrated circuit (ASIC), a field-programmable gate array (FPGA), a central processing unit (CPU), a graphical processing unit (GPU), a tensor processing unit (TPU), a video processing unit (VPU) or other type of processing circuitry, as well as portions or combinations of such circuitry elements.</p><p id="p-0107" num="0106">The memory <b>1712</b> may comprise random access memory (RAM), read-only memory (ROM), flash memory or other types of memory, in any combination. The memory <b>1712</b> and other memories disclosed herein should be viewed as illustrative examples of what are more generally referred to as &#x201c;processor-readable storage media&#x201d; storing executable program code of one or more software programs.</p><p id="p-0108" num="0107">Articles of manufacture comprising such processor-readable storage media are considered illustrative embodiments. A given such article of manufacture may comprise, for example, a storage array, a storage disk or an integrated circuit containing RAM, ROM, flash memory or other electronic memory, or any of a wide variety of other types of computer program products. The term &#x201c;article of manufacture&#x201d; as used herein should be understood to exclude transitory, propagating signals. Numerous other types of computer program products comprising processor-readable storage media can be used.</p><p id="p-0109" num="0108">Also included in the processing device <b>1702</b>-<b>1</b> is network interface circuitry <b>1714</b>, which is used to interface the processing device with the network <b>1704</b> and other system components, and may comprise conventional transceivers.</p><p id="p-0110" num="0109">The other processing devices <b>1702</b> of the processing platform <b>1700</b> are assumed to be configured in a manner similar to that shown for processing device <b>1702</b>-<b>1</b> in the figure.</p><p id="p-0111" num="0110">Again, the particular processing platform <b>1700</b> shown in the figure is presented by way of example only, and system <b>100</b> may include additional or alternative processing platforms, as well as numerous distinct processing platforms in any combination, with each such platform comprising one or more computers, servers, storage devices or other processing devices.</p><p id="p-0112" num="0111">For example, other processing platforms used to implement illustrative embodiments can comprise converged infrastructure.</p><p id="p-0113" num="0112">It should therefore be understood that in other embodiments different arrangements of additional or alternative elements may be used. At least a subset of these elements may be collectively implemented on a common processing platform, or each such element may be implemented on a separate processing platform.</p><p id="p-0114" num="0113">As indicated previously, components of an information processing system as disclosed herein can be implemented at least in part in the form of one or more software programs stored in memory and executed by a processor of a processing device. For example, at least portions of the functionality for re-initiation of microservices using context information provided via service calls as disclosed herein are illustratively implemented in the form of software running on one or more processing devices.</p><p id="p-0115" num="0114">It should again be emphasized that the above-described embodiments are presented for purposes of illustration only. Many variations and other alternative embodiments may be used. For example, the disclosed techniques are applicable to a wide variety of other types of information processing systems, container environments, microservices, etc. Also, the particular configurations of system and device elements and associated processing operations illustratively shown in the drawings can be varied in other embodiments. Moreover, the various assumptions made above in the course of describing the illustrative embodiments should also be viewed as exemplary rather than as requirements or limitations of the disclosure. Numerous other alternative embodiments within the scope of the appended claims will be readily apparent to those skilled in the art.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An apparatus comprising:<claim-text>at least one processing device comprising a processor coupled to a memory;</claim-text><claim-text>the at least one processing device being configured to perform steps of:<claim-text>identifying, at a first microservice, a service call that is to be transmitted to a second microservice;</claim-text><claim-text>modifying the service call to include context information, the context information characterizing a current state of execution of one or more tasks by one of the first microservice and the second microservice; and</claim-text><claim-text>providing, from the first microservice to the second microservice, the modified service call including the context information;</claim-text></claim-text><claim-text>wherein the context information enables re-initiation of said one of the first microservice and the second microservice to continue execution of the one or more tasks from the current state.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the first microservice comprises an orchestrator microservice, wherein the second microservice comprises one of a set of two or more participating microservices in a microservices execution chain orchestrated by the orchestrator microservice, and wherein the context information characterizes the current state of execution of the one or more tasks by the second microservice.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The apparatus of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein the service call comprises a service request to be transmitted to the second microservice, and wherein the service request is sent in response to detecting a failure of the second microservice.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The apparatus of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein the failure of the second microservice is detected by analyzing one or more prior service calls received from the second microservice, at least one of the one or more prior service calls comprising the context information characterizing the current state of execution of the one or more tasks by the second microservice.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the second microservice comprises an orchestrator microservice, and wherein the first microservice comprises one of a set of two or more participating microservices in a microservices execution chain orchestrated by the orchestrator microservice, and wherein the context information characterizes the current state of execution of the one or more tasks by the first microservice.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The apparatus of <claim-ref idref="CLM-00005">claim 5</claim-ref> wherein the service call comprises a service response to be transmitted to the second microservice.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The apparatus of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein the service response is sent in response to detecting a failure condition in the first microservice.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the first microservice comprises an attached data store, the at least one processing device being further configured to perform the step of storing the context information for the second microservice in the attached data store.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the context information for the second microservice is stored in the attached data store as a serialized object file.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the attached data store comprises an embedded file system of the first microservice, the context information being stored in the attached data store in a serialized data format in one or more comma separated values.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the context information comprises:<claim-text>input data for the one or more tasks to be executed by said one of the first microservice and the second microservice;</claim-text><claim-text>a given one of two or more stages at which execution of said one of the first microservice and the second microservice failed; and</claim-text><claim-text>an error code indicating a type of failure of said one of the first microservice and the second microservice.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the one or more tasks of said one of the first microservice and the second microservice are executed in two or more stages in a designated order, wherein the context information characterizing the current state of execution of the one or more tasks by said one of the first microservice and the second microservice comprises an indication of a most recent one of the two or more stages successfully executed by said one of the first microservice and the second microservice, and wherein the context information enables re-initiation of said one of the first microservice and the second microservice to continue execution of the one or more tasks from a given one of the two or more stages following the most recent one of the two or more stages successfully executed by said one of the first microservice and the second microservice.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said one of the first microservice and the second microservice is implemented within a given software container instance.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein failure of said one of the first microservice and the second microservice is detected via monitoring for failure of the given software container instance, and wherein said one of the first microservice and the second microservice is re-initiated utilizing the context information by re-initializing the given software container instance.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A computer program product comprising a non-transitory processor-readable storage medium having stored therein program code of one or more software programs, wherein the program code when executed by at least one processing device causes the at least one processing device to perform steps of:<claim-text>identifying, at a first microservice, a service call that is to be transmitted to a second microservice;</claim-text><claim-text>modifying the service call to include context information, the context information characterizing a current state of execution of one or more tasks by one of the first microservice and the second microservice; and</claim-text><claim-text>providing, from the first microservice to the second microservice, the modified service call including the context information;</claim-text><claim-text>wherein the context information enables re-initiation of said one of the first microservice and the second microservice to continue execution of the one or more tasks from the current state.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein the first microservice comprises an orchestrator microservice, wherein the second microservice comprises one of a set of two or more participating microservices in a microservices execution chain orchestrated by the orchestrator microservice, wherein the context information characterizes the current state of execution of the one or more tasks by the second microservice, and wherein the service call comprises a service request to be transmitted to the second microservice.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein the second microservice comprises an orchestrator microservice, and wherein the first microservice comprises one of a set of two or more participating microservices in a microservices execution chain orchestrated by the orchestrator microservice, wherein the context information characterizes the current state of execution of the one or more tasks by the first microservice, and wherein the service call comprises a service response to be transmitted to the second microservice.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. A method comprising:<claim-text>identifying, at a first microservice, a service call that is to be transmitted to a second microservice;</claim-text><claim-text>modifying the service call to include context information, the context information characterizing a current state of execution of one or more tasks by one of the first microservice and the second microservice; and</claim-text><claim-text>providing, from the first microservice to the second microservice, the modified service call including the context information;</claim-text><claim-text>wherein the context information enables re-initiation of said one of the first microservice and the second microservice to continue execution of the one or more tasks from the current state; and</claim-text><claim-text>wherein the method is performed by at least one processing device comprising a processor coupled to a memory.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the first microservice comprises an orchestrator microservice, wherein the second microservice comprises one of a set of two or more participating microservices in a microservices execution chain orchestrated by the orchestrator microservice, wherein the context information characterizes the current state of execution of the one or more tasks by the second microservice, and wherein the service call comprises a service request to be transmitted to the second microservice.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the second microservice comprises an orchestrator microservice, and wherein the first microservice comprises one of a set of two or more participating microservices in a microservices execution chain orchestrated by the orchestrator microservice, wherein the context information characterizes the current state of execution of the one or more tasks by the first microservice, and wherein the service call comprises a service response to be transmitted to the second microservice.</claim-text></claim></claims></us-patent-application>