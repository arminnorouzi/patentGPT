<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006576A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006576</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364540</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>02</class><subclass>P</subclass><main-group>6</main-group><subgroup>182</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>02</class><subclass>P</subclass><main-group>21</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>02</class><subclass>P</subclass><main-group>21</main-group><subgroup>18</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>02</class><subclass>P</subclass><main-group>21</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>02</class><subclass>P</subclass><main-group>21</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>02</class><subclass>P</subclass><main-group>27</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>02</class><subclass>P</subclass><main-group>6</main-group><subgroup>182</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>02</class><subclass>P</subclass><main-group>21</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20160201</date></cpc-version-indicator><section>H</section><class>02</class><subclass>P</subclass><main-group>21</main-group><subgroup>18</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>02</class><subclass>P</subclass><main-group>21</main-group><subgroup>0003</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20160201</date></cpc-version-indicator><section>H</section><class>02</class><subclass>P</subclass><main-group>21</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>02</class><subclass>P</subclass><main-group>27</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>02</class><subclass>P</subclass><main-group>2203</main-group><subgroup>03</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">AUTOMATIC TRANSITION OF MOTOR CONTROLLER FROM OPEN-LOOP CONTROL TO CLOSED-LOOP CONTROL</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>Texas Instruments Incorporated</orgname><address><city>Dallas</city><state>TX</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>KULKARNI</last-name><first-name>Prasad</first-name><address><city>Bengaluru</city><country>IN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>MAHANKALI</last-name><first-name>Venkata Pavan</first-name><address><city>Bengaluru</city><country>IN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>HEGDE</last-name><first-name>Ganapathi</first-name><address><city>Bengaluru</city><country>IN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A motor controller integrated circuit (IC) includes a storage device containing software, and a processor core. The processor core has an output adapted to be coupled to a motor. The processor core is configured to execute the software to operate the motor in an open-loop control, calculate first and second orthogonal components of a back electromotive force (BEMF), calculate a total BEMF value, and determine that the first orthogonal component is within a threshold of the total BEMF value. The processor core is further configured to, responsive to the first orthogonal component being within the threshold of the total BEMF value, operate the motor in a closed-loop control.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="109.90mm" wi="158.75mm" file="US20230006576A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="251.12mm" wi="162.81mm" file="US20230006576A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="226.91mm" wi="166.29mm" orientation="landscape" file="US20230006576A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="206.59mm" wi="90.76mm" file="US20230006576A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="260.01mm" wi="165.78mm" orientation="landscape" file="US20230006576A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="219.54mm" wi="154.43mm" orientation="landscape" file="US20230006576A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="154.77mm" wi="123.02mm" file="US20230006576A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">Many types and configurations of electric motors are available including, for example, direct current (DC) motors and alternating current (AC) motors. AC motors are available in various types as well including, for example, three-phase motors. A three-phase motor includes, for example, three pairs of stator windings. Three sinusoidal currents, one for each pair of stator windings, are generated by, for example, a DC-to-AC inverter. The three sinusoidal currents are 120 degrees out-of-phase with respect to each other. With reference to a first of the sinusoidal currents, a second current is 120 degrees out-of-phase, and a third current is 240 degrees out-of-phase with respect to the first of the sinusoidal currents.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0003" num="0002">In one embodiment, a motor controller integrated circuit (IC) includes a storage device containing software, and a processor core. The processor core has an output adapted to be coupled to a motor. The processor core is configured to execute the software to operate the motor in an open-loop control, calculate first and second orthogonal components of a back electromotive force (BEMF), calculate a total BEMF value, and determine that the first orthogonal component is within a threshold of the total BEMF value. The processor core is further configured to, responsive to the first orthogonal component being within the threshold of the total BEMF value, operate the motor in a closed-loop control.</p><p id="p-0004" num="0003">In another embodiment, a method of controlling a motor includes operating the motor with an open-loop control, calculating first and second orthogonal components of a back electromotive force (BEMF), calculating a total BEMF value, and determining that the first orthogonal component is within a threshold of the total BEMF value. Responsive to the first orthogonal component being within the threshold of the total BEMF value, the method includes operating the motor with a closed-loop control.</p><p id="p-0005" num="0004">Reference is hereby made to co-pending patent application Ser. No. 17/358,147 (TI-92986) titled &#x201c;Motor Controller Including Resonant Controllers&#x201d;, which is hereby incorporated by reference in its entirety.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0006" num="0005">For a detailed description of various examples, reference will now be made to the accompanying drawings in which:</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of a motor and a system for controlling the motor in accordance with an example.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a functional block diagram of a field-oriented control (FOC) technique for controlling the motor in accordance with an example.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a vector diagram illustrating the relationship between the time-domain motor sense currents and an orthogonal reference implemented by the Clarke transformation.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a vector diagram illustrating the relationship between the orthogonal reference implemented by the Clarke transformation and a rotating reference frame implemented by the Park transformation.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a functional block diagram of an FOC technique for controlling the motor and including an auto-handoff controller to switch motor control from open-loop control to closed-loop control in accordance with an example</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a vector diagram showing multiple estimates of back electromotive force (BEMF) and their use by the auto-handoff controller to determine when to switch operation from open-loop to closed-loop control in accordance with an example.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart illustrating a method for automatically changing motor control from open-loop control to closed-loop control in accordance with an example.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart illustrating another method for automatically changing motor control from open-loop control to closed-loop control in accordance with an example.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0015" num="0014">The same reference numbers and/or reference designators are used below to designate the same or similar (functionally and/or structurally) features.</p><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0016" num="0015">The embodiments described herein pertain to a motor controller for a sensor-less motor. A sensor-less motor has no sensor for, for example, measuring motor speed or rotor position. Instead, based on motor current, the controller estimates motor speed and rotor position and uses those estimated values in a closed-loop to control the magnitude of the current to the motor and thus the speed of the motor. The motor controller includes a speed and position estimator that estimates motor speed and rotor position. However, at initial start-up of the motor, until the motor speed becomes large enough, the estimated values of speed and position are not accurate enough to use in the closed-loop control of the motor. Accordingly, the motor controller initializes in an open-loop control of the motor in which pre-determined values representing motor speed and rotor position are provided for controlling the motor.</p><p id="p-0017" num="0016">The described embodiments are directed to techniques for an automatic change-over from open-loop control to closed-loop control of the motor. In one implementation, an auto-handoff controller repeatedly computes back electromotive force (BEMF) in, for example, a rotating reference frame and determines when a vector component of the computed BEMF (e.g., the component along the q-axis of a rotating d-axis/q-axis reference frame) is within a threshold of the total BEMF. When the computed BEMF component is within the threshold of the total BEMF, the auto-handoff controller switches the motor controller from open-loop to closed-loop control of the motor. The motor control technique described herein is a field-oriented control (FOC) technique for a three-phase sensor-less motor (e.g., a permanent magnet synchronous motor or an induction motor). The FOC control technique described herein also is applicable to single phase and three-phase grid synchronized inverters.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of a three-phase motor system <b>100</b>. The motor system <b>100</b> includes a processor core <b>110</b>, a storage device <b>120</b>, an input/output (I/O) interface <b>130</b>, an analog-to-digital converter (ADC) <b>150</b>, a three-phase inverter <b>140</b>, and a motor M. The processor core <b>110</b> is coupled to the storage device <b>120</b> and executes software <b>125</b> stored in the storage device <b>120</b>. Storage device <b>120</b> is a non-transitory storage device such as volatile memory (e.g., random access memory) or non-volatile memory (e.g., read-only memory), or combinations thereof. While a single processor core <b>110</b> is shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, other embodiments include multiple processor cores that collectively execute the software <b>125</b>. The processor core <b>110</b> implements the functionality described herein upon execution of software <b>125</b>. Programmable values may be provided to the processor core <b>110</b> (e.g., through storage in storage device <b>120</b> and retrieval by the processor core <b>110</b>) via any suitable type of interface (e.g., Inter-Integrated Circuit (IIC) or I<b>2</b>C). The type and use of the programmable values is described below regarding <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The motor M includes three phases a, b, and c, and each phase has a pair of stator windings that receives a sinusoidal, or approximately sinusoidal, current from the three-phase inverter <b>140</b>. Phases a, b, and c receive sinusoidal currents <b>154</b>, <b>155</b>, and <b>156</b>, respectively, from the three-phase inverter <b>140</b>.</p><p id="p-0019" num="0018">The I/O interface <b>130</b> and the ADC <b>150</b> also are coupled to the processor core <b>110</b>. The processor core <b>110</b> generates control signals on signal lines <b>115</b> that the I/O interface <b>130</b> outputs to the three-phase inverter <b>140</b> as signals ma, mb, and mc. The I/O interface <b>130</b> may include buffers to drive signals ma, mb, and mc to the three-phase inverter <b>140</b>. As explained below, the three-phase inverter <b>140</b> includes a pair of transistor switches (a high side transistor coupled to a low side transistor at a switch node) for each of the three phases a, b, and c. Each of the signals ma, mb, and mc from the processor core <b>110</b> is used by the inverter <b>140</b> to implement the duty cycle for the respective high side and low side transistors. The duty cycle for the high side transistor is</p><p id="p-0020" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mfrac>   <mrow>    <mn>1</mn>    <mo>+</mo>    <mi>m</mi>   </mrow>   <mn>2</mn>  </mfrac>  <mo>,</mo> </mrow></math></maths></p><p id="p-0021" num="0000">where m is the respective value of ma, mb, or mc. The duty cycle for the corresponding low side transistor is</p><p id="p-0022" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mrow>  <mrow>   <mn>1</mn>   <mo>-</mo>   <mfrac>    <mrow>     <mn>1</mn>     <mo>+</mo>     <mi>m</mi>    </mrow>    <mn>2</mn>   </mfrac>  </mrow>  <mo>.</mo> </mrow></math></maths></p><p id="p-0023" num="0000">The values of m (and thus the duty cycle values) are varied sinusoidally by the processor core <b>110</b>. By varying the duty cycles of each pair of transistors over time in a sinusoidal fashion for each phase, a sinusoidal current for that phase is generated.</p><p id="p-0024" num="0019">The ADC <b>150</b> receives analog signals Ia <b>151</b>, lb <b>152</b>, and Ic <b>153</b> from current sensors <b>157</b>, <b>158</b>, and <b>159</b>, respectively. Analog signals Ia, Ib, and Ic represent (e.g., are directly proportional to) the instantaneous currents <b>154</b>, <b>155</b>, and <b>156</b> of the three phases a, b, and c, respectively. In one example, each of analog signals Ia, Ib, and Ic is a voltage proportional to the instantaneous magnitude of its respective phase current <b>154</b>-<b>156</b>.</p><p id="p-0025" num="0020">In one embodiment, the processor core <b>110</b>, storage device <b>120</b>, I/O interface <b>130</b>, and ADC <b>140</b> are fabricated on the same integrated circuit (IC) (e.g. on a single semiconductor die or multiple semiconductor dies that are interconnected within a IC package). In another embodiment, the storage device <b>120</b> may be fabricated on an IC separate from the IC that includes the processor core <b>110</b>, I/O interface <b>130</b>, inverter <b>140</b>, and ADC <b>150</b>. In general, any two or more of the processor cores <b>110</b>, storage device <b>120</b>, I/O interface <b>130</b>, inverter <b>140</b>, and ADC <b>150</b> can be fabricated on the same IC. In another embodiment, the three-phase inverter <b>140</b> may be implemented on the same semiconductor die as the other circuit elements or can be fabricated on a separate semiconductor die but incorporated into the same IC package/module as the other circuit structures.</p><p id="p-0026" num="0021">In one example, the processor core <b>110</b>, upon execution of software <b>125</b>, implements a field-oriented control (FOC) technique for controlling the operation of motor M. The FOC technique described below separately controls the torque and magnetic flux components of the motor's stator current.</p><p id="p-0027" num="0022"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a functional block diagram <b>200</b> of the software <b>125</b> for implementing a closed-loop FOC technique. In alternative embodiments, the functional blocks included in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be implemented using any combination of circuitry (e.g. processors, microprocessors, microcontrollers, state machines, ADC, DAC, flip-flops, registers, logic gates, and/or other types of logic circuits) and/or software. The block diagram of <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes a Clarke transform <b>210</b>, a Park transform <b>220</b>, an inverse Park transform <b>230</b>, and a space vector pulse width modulator (PWM) <b>240</b>. The space vector PWM <b>240</b> includes an inverse Clarke transform. The block diagram <b>200</b> further includes a speed and position estimator <b>260</b>, proportional integral (PI) controllers <b>271</b>, <b>272</b>, and <b>273</b>, and subtractors <b>281</b>, <b>282</b>, and <b>283</b>. The digital values from ADC <b>150</b> (ADC <b>150</b> is not shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>) corresponding to analog signals Ia, Ib, and Ic are provided as inputs to the Clarke transform <b>210</b>. In some embodiments, two of the three analog signals Ia-Ic (their digital equivalents) are used by the Clarke transform <b>210</b>, as explained below. Each of the current sensors <b>157</b>-<b>159</b> may be implemented as a sense resistor included within each of the inverter's three phases. Each phase may include a high side and low side transistor pair. The sense resistors may be coupled to the low side transistor within the respective phase. Current flows through the sense resistor only when the respective low side transistor is on. Because the low side switch and its high side transistor counterpart are reciprocally turned on and off at a sinusoidally varying duty cycle (explained below), the low side transistor is off during a portion of each switching period. When the low side transistor is off, no current flows through the sense resistor and thus that phase's sense current signal (Ia-Ic) is not available for use by the Clarke transform. Accordingly, two of the sense current signals are used by the Clarke transform, with the selection varying as to which two sense current signals are to be used at any point in time.</p><p id="p-0028" num="0023">The Clarke transform <b>210</b> projects the three-phase system (Ia, Ib, Ic) into a two-dimensional (&#x3b1;, &#x3b2;) orthogonal system. The Clarke transform <b>210</b> implements the following equations to convert two of Ia, Ib and Ic to I&#x3b1; and l&#x3b2;. Currents Ia and lb are assumed to be the two selected currents in Eq. (1), but in general, Eq. (1) uses any two of the three currents Ia, Ib, and Ic.</p><p id="p-0029" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mo>{</mo>     <mtable>      <mtr>       <mtd>        <mrow>         <mrow>          <mi>I</mi>          <mo>&#x2062;</mo>          <mi>&#x3b1;</mi>         </mrow>         <mo>=</mo>         <mi>Ia</mi>        </mrow>       </mtd>      </mtr>      <mtr>       <mtd>        <mrow>         <mrow>          <mi>I</mi>          <mo>&#x2062;</mo>          <mi>&#x3b2;</mi>         </mrow>         <mo>=</mo>         <mrow>          <mrow>           <mfrac>            <mn>1</mn>            <msqrt>             <mn>3</mn>            </msqrt>           </mfrac>           <mo>*</mo>           <mi>Ia</mi>          </mrow>          <mo>+</mo>          <mrow>           <mfrac>            <mn>2</mn>            <msqrt>             <mn>3</mn>            </msqrt>           </mfrac>           <mo>*</mo>           <mi>Ib</mi>          </mrow>         </mrow>        </mrow>       </mtd>      </mtr>     </mtable>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>1</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0030" num="0000"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows the relationship between the three-phase a, b, c coordinate system and the two-dimensional (&#x3b1;, &#x3b2;) orthogonal system. Currents Ia-Ic are 120 degrees out of phase with respect to each other and are on the respective a, b and c axes in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Current vector I&#x3b1; is in-line with the a-axis (the a and &#x3b1;-axes are colinear) and current vector I&#x3b2; is along the &#x3b2;-axis. The &#x3b2;-axis is orthogonal to the &#x3b1;-axis. Vector <b>301</b> is the complex stator current vector (Is) which is the vector sum of I&#x3b1; and l&#x3b2; and thus is a mathematical combination (per Eq. (1)) of the motor's current signals Ia and lb.</p><p id="p-0031" num="0024">The Clarke transform <b>210</b> outputs I&#x3b1; and l&#x3b2; as inputs to the Park transform <b>220</b>. The Park transform <b>220</b> projects the (&#x3b1;, &#x3b2;) orthogonal system onto a rotating reference frame (d,q) as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The rotating reference frame is a reference frame that spins at a constant angular speed, which may or may not be same as the speed of the rotor. For permanent magnet synchronous motors, for example, the speed of the rotating reference frame is the same as rotor speed and the d-axis of the rotating reference frame aligns with the d-axis of the rotor (e.g. the axis extending from the south pole of the magnet to the north pole of the magnet). Accordingly, the d-axis of the rotating reference frame is aligned with the rotor's flux. The angle &#x3b8; between the &#x3b1;-axis and the d-axis is the rotor flux position. In closed-loop control, the rotor flux position &#x3b8; is computed by the speed and position estimator <b>260</b> and is provided to the Park transform <b>220</b>. The q-axis is aligned with rotor torque. Based on I&#x3b1; and l&#x3b2; in one embodiment, the Park transform <b>220</b> computes the flux (Id) and torque (Iq) components in the (d,q) domain as follows:</p><p id="p-0032" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mo>{</mo>     <mtable>      <mtr>       <mtd>        <mrow>         <mi>Id</mi>         <mo>=</mo>         <mrow>          <mrow>           <mi>I</mi>           <mo>&#x2062;</mo>           <mi>&#x3b1;</mi>           <mo>*</mo>           <mrow>            <mi>cos</mi>            <mo>&#x2061;</mo>            <mo>(</mo>            <mi>&#x3b8;</mi>            <mo>)</mo>           </mrow>          </mrow>          <mo>+</mo>          <mrow>           <mi>I</mi>           <mo>&#x2062;</mo>           <mi>&#x3b2;</mi>           <mo>*</mo>           <mrow>            <mi>sin</mi>            <mo>&#x2061;</mo>            <mo>(</mo>            <mi>&#x3b8;</mi>            <mo>)</mo>           </mrow>          </mrow>         </mrow>        </mrow>       </mtd>      </mtr>      <mtr>       <mtd>        <mrow>         <mi>Iq</mi>         <mo>=</mo>         <mrow>          <mrow>           <mrow>            <mo>-</mo>            <mi>I</mi>           </mrow>           <mo>&#x2062;</mo>           <mi>&#x3b1;</mi>           <mo>*</mo>           <mrow>            <mi>sin</mi>            <mo>&#x2061;</mo>            <mo>(</mo>            <mi>&#x3b8;</mi>            <mo>)</mo>           </mrow>          </mrow>          <mo>+</mo>          <mrow>           <mi>I</mi>           <mo>&#x2062;</mo>           <mi>&#x3b2;</mi>           <mo>*</mo>           <mrow>            <mi>cos</mi>            <mo>&#x2061;</mo>            <mo>(</mo>            <mi>&#x3b8;</mi>            <mo>)</mo>           </mrow>          </mrow>         </mrow>        </mrow>       </mtd>      </mtr>     </mtable>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>2</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0033" num="0025">The flux component Id and the torque component Iq are the outputs of the Park transform <b>220</b> and depend on the current vector components (I&#x3b1;, I&#x3b2;) and on the rotor flux position &#x3b8;. Per the FOC control technique, processor core <b>110</b> controls the flux current component (Id) and the torque current component (Iq) independently.</p><p id="p-0034" num="0026">The speed and position estimator <b>260</b> receives as inputs the outputs I&#x3b1; and l&#x3b2; from the Clarke transform <b>210</b>, as well as signals V&#x3b1; and V&#x3b2; which are output values from the inverse Park transform <b>230</b>. Using the values of I&#x3b1;, l&#x3b2;, V&#x3b1;, and V&#x3b2;, the speed and position estimator <b>260</b> computes the back electromotive force (BEMF), and then using the computed BEMF, computes rotor speed &#x3c9; and flux position &#x3b8;. In one embodiment, the speed and position estimator <b>260</b> computes the BEMF in the &#x3b1;, &#x3b2; reference frame</p><p id="p-0035" num="0000"><maths id="MATH-US-00005" num="00005"><math overflow="scroll"> <mrow>  <mo>(</mo>  <mrow>   <mo>[</mo>   <mtable>    <mtr>     <mtd>      <mrow>       <mi>E</mi>       <mo>&#x2062;</mo>       <mi>&#x3b1;</mi>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mi>E</mi>       <mo>&#x2062;</mo>       <mi>&#x3b2;</mi>      </mrow>     </mtd>    </mtr>   </mtable>   <mo>]</mo>  </mrow>  <mo>)</mo> </mrow></math></maths></p><p id="p-0036" num="0000">using the following equation:</p><p id="p-0037" num="0000"><maths id="MATH-US-00006" num="00006"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mo>[</mo>      <mtable>       <mtr>        <mtd>         <mrow>          <mi>E</mi>          <mo>&#x2062;</mo>          <mi>&#x3b1;</mi>         </mrow>        </mtd>       </mtr>       <mtr>        <mtd>         <mrow>          <mi>E</mi>          <mo>&#x2062;</mo>          <mi>&#x3b2;</mi>         </mrow>        </mtd>       </mtr>      </mtable>      <mo>]</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mo>[</mo>       <mtable>        <mtr>         <mtd>          <mrow>           <mi>V</mi>           <mo>&#x2062;</mo>           <mi>&#x3b1;</mi>          </mrow>         </mtd>        </mtr>        <mtr>         <mtd>          <mrow>           <mi>V</mi>           <mo>&#x2062;</mo>           <mi>&#x3b2;</mi>          </mrow>         </mtd>        </mtr>       </mtable>       <mo>]</mo>      </mrow>      <mo>-</mo>      <mrow>       <mo>(</mo>       <mrow>        <mi>rs</mi>        <mo>*</mo>        <mrow>         <mo>[</mo>         <mtable>          <mtr>           <mtd>            <mrow>             <mi>I</mi>             <mo>&#x2062;</mo>             <mi>&#x3b1;</mi>            </mrow>           </mtd>          </mtr>          <mtr>           <mtd>            <mrow>             <mi>I</mi>             <mo>&#x2062;</mo>             <mi>&#x3b2;</mi>            </mrow>           </mtd>          </mtr>         </mtable>         <mo>]</mo>        </mrow>       </mrow>       <mo>)</mo>      </mrow>      <mo>-</mo>      <mrow>       <mfrac>        <mi>d</mi>        <mi>dt</mi>       </mfrac>       <mo>&#x2062;</mo>       <mrow>        <mo>(</mo>        <mrow>         <mrow>          <mo>[</mo>          <mtable>           <mtr>            <mtd>             <mrow>              <mi>L</mi>              <mo>&#x2062;</mo>              <mi>&#x3b1;</mi>              <mo>&#x2062;</mo>              <mi>&#x3b1;</mi>             </mrow>            </mtd>            <mtd>             <mrow>              <mi>L</mi>              <mo>&#x2062;</mo>              <mi>&#x3b1;</mi>              <mo>&#x2062;</mo>              <mi>&#x3b2;</mi>             </mrow>            </mtd>           </mtr>           <mtr>            <mtd>             <mrow>              <mi>L</mi>              <mo>&#x2062;</mo>              <mi>&#x3b2;</mi>              <mo>&#x2062;</mo>              <mi>&#x3b1;</mi>             </mrow>            </mtd>            <mtd>             <mrow>              <mi>L</mi>              <mo>&#x2062;</mo>              <mi>&#x3b2;</mi>              <mo>&#x2062;</mo>              <mi>&#x3b2;</mi>             </mrow>            </mtd>           </mtr>          </mtable>          <mo>]</mo>         </mrow>         <mo>*</mo>         <mrow>          <mo>[</mo>          <mtable>           <mtr>            <mtd>             <mrow>              <mi>I</mi>              <mo>&#x2062;</mo>              <mi>&#x3b1;</mi>             </mrow>            </mtd>           </mtr>           <mtr>            <mtd>             <mrow>              <mi>I</mi>              <mo>&#x2062;</mo>              <mi>&#x3b2;</mi>             </mrow>            </mtd>           </mtr>          </mtable>          <mo>]</mo>         </mrow>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>3</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0038" num="0000">where rs is the motor's resistance and</p><p id="p-0039" num="0000"><maths id="MATH-US-00007" num="00007"><math overflow="scroll"> <mrow>  <mrow>   <mo>[</mo>   <mtable>    <mtr>     <mtd>      <mrow>       <mi>L</mi>       <mo>&#x2062;</mo>       <mi>&#x3b1;</mi>       <mo>&#x2062;</mo>       <mi>&#x3b1;</mi>      </mrow>     </mtd>     <mtd>      <mrow>       <mi>L</mi>       <mo>&#x2062;</mo>       <mi>&#x3b1;</mi>       <mo>&#x2062;</mo>       <mi>&#x3b2;</mi>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mi>L</mi>       <mo>&#x2062;</mo>       <mi>&#x3b2;</mi>       <mo>&#x2062;</mo>       <mi>&#x3b1;</mi>      </mrow>     </mtd>     <mtd>      <mrow>       <mi>L</mi>       <mo>&#x2062;</mo>       <mi>&#x3b2;&#x3b2;</mi>      </mrow>     </mtd>    </mtr>   </mtable>   <mo>]</mo>  </mrow>  <mo>=</mo>  <mrow>   <mrow>    <mo>[</mo>    <mtable>     <mtr>      <mtd>       <mrow>        <mrow>         <mi>L</mi>         <mo>&#x2062;</mo>         <mn>0</mn>        </mrow>        <mo>+</mo>        <mrow>         <mi>L</mi>         <mo>&#x2062;</mo>         <mn>1</mn>         <mo>*</mo>         <mrow>          <mi>cos</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <mrow>           <mn>2</mn>           <mo>&#x2062;</mo>           <mi>&#x3b8;</mi>          </mrow>          <mo>)</mo>         </mrow>        </mrow>       </mrow>      </mtd>      <mtd>       <mrow>        <mi>L</mi>        <mo>&#x2062;</mo>        <mn>1</mn>        <mo>*</mo>        <mrow>         <mi>sin</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <mrow>          <mn>2</mn>          <mo>&#x2062;</mo>          <mi>&#x3b8;</mi>         </mrow>         <mo>)</mo>        </mrow>       </mrow>      </mtd>     </mtr>     <mtr>      <mtd>       <mrow>        <mi>L</mi>        <mo>&#x2062;</mo>        <mn>1</mn>        <mo>*</mo>        <mrow>         <mi>sin</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <mrow>          <mn>2</mn>          <mo>&#x2062;</mo>          <mi>&#x3b8;</mi>         </mrow>         <mo>)</mo>        </mrow>       </mrow>      </mtd>      <mtd>       <mrow>        <mrow>         <mi>L</mi>         <mo>&#x2062;</mo>         <mn>0</mn>        </mrow>        <mo>-</mo>        <mrow>         <mi>L</mi>         <mo>&#x2062;</mo>         <mn>1</mn>         <mo>*</mo>         <mrow>          <mi>cos</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <mrow>           <mn>2</mn>           <mo>&#x2062;</mo>           <mi>&#x3b8;</mi>          </mrow>          <mo>)</mo>         </mrow>        </mrow>       </mrow>      </mtd>     </mtr>    </mtable>    <mo>]</mo>   </mrow>   <mo>.</mo>  </mrow> </mrow></math></maths></p><p id="p-0040" num="0000">The inductance value</p><p id="p-0041" num="0000"><maths id="MATH-US-00008" num="00008"><math overflow="scroll"> <mrow>  <mrow>   <mrow>    <mi>L</mi>    <mo>&#x2062;</mo>    <mn>0</mn>   </mrow>   <mo>=</mo>   <mrow>    <mrow>     <mfrac>      <mrow>       <mi>Ld</mi>       <mo>+</mo>       <mi>Lq</mi>      </mrow>      <mn>2</mn>     </mfrac>     <mo>&#x2062;</mo>     <mtext>   </mtext>     <mi>and</mi>     <mo>&#x2062;</mo>     <mtext>   </mtext>     <mi>L</mi>     <mo>&#x2062;</mo>     <mn>1</mn>    </mrow>    <mo>=</mo>    <mfrac>     <mrow>      <mi>Ld</mi>      <mo>-</mo>      <mi>Lq</mi>     </mrow>     <mn>2</mn>    </mfrac>   </mrow>  </mrow>  <mo>,</mo> </mrow></math></maths></p><p id="p-0042" num="0000">wnere Ld and Lq are the d- and q-axis inductances, respectively. The speed and position estimator computes rotor position &#x3b8;, but the preceding equation for computing</p><p id="p-0043" num="0000"><maths id="MATH-US-00009" num="00009"><math overflow="scroll"> <mrow>  <mo>[</mo>  <mtable>   <mtr>    <mtd>     <mrow>      <mi>L</mi>      <mo>&#x2062;</mo>      <mi>&#x3b1;</mi>      <mo>&#x2062;</mo>      <mi>&#x3b1;</mi>     </mrow>    </mtd>    <mtd>     <mrow>      <mi>L</mi>      <mo>&#x2062;</mo>      <mi>&#x3b1;</mi>      <mo>&#x2062;</mo>      <mi>&#x3b2;</mi>     </mrow>    </mtd>   </mtr>   <mtr>    <mtd>     <mrow>      <mi>L</mi>      <mo>&#x2062;</mo>      <mi>&#x3b2;&#x3b1;</mi>     </mrow>    </mtd>    <mtd>     <mrow>      <mi>L</mi>      <mo>&#x2062;</mo>      <mi>&#x3b2;</mi>      <mo>&#x2062;</mo>      <mi>&#x3b2;</mi>     </mrow>    </mtd>   </mtr>  </mtable>  <mo>]</mo> </mrow></math></maths></p><p id="p-0044" num="0000">uses rotor position &#x3b8;. The assumption is that the motor's inductance does not appreciably change very quickly (e.g., within one sampling instance) and thus the rotor position &#x3b8; previously computed by the speed and position estimator <b>260</b> is used to compute the current value of motor inductance</p><p id="p-0045" num="0000"><maths id="MATH-US-00010" num="00010"><math overflow="scroll"> <mrow>  <mrow>   <mo>[</mo>   <mtable>    <mtr>     <mtd>      <mrow>       <mi>L</mi>       <mo>&#x2062;</mo>       <mi>&#x3b1;</mi>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mi>L</mi>       <mo>&#x2062;</mo>       <mi>&#x3b2;</mi>      </mrow>     </mtd>    </mtr>   </mtable>   <mo>]</mo>  </mrow>  <mo>.</mo> </mrow></math></maths></p><p id="p-0046" num="0000">In one embodiment, the speed and position estimator <b>260</b> then computes the BEMF in the d,q rotating reference frame (Ed and Eq, respectively) based on the BEMF in the &#x3b1;, &#x3b2; reference frame and then computes rotor speed &#x3c9; and position &#x3b8; as provided in equations 4-6.</p><p id="p-0047" num="0000"><maths id="MATH-US-00011" num="00011"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mo>[</mo>      <mtable>       <mtr>        <mtd>         <mi>Ed</mi>        </mtd>       </mtr>       <mtr>        <mtd>         <mi>Eq</mi>        </mtd>       </mtr>      </mtable>      <mo>]</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mo>[</mo>       <mtable>        <mtr>         <mtd>          <mrow>           <mi>cos</mi>           <mo>&#x2061;</mo>           <mo>(</mo>           <mi>&#x3b8;</mi>           <mo>)</mo>          </mrow>         </mtd>         <mtd>          <mrow>           <mi>sin</mi>           <mo>&#x2061;</mo>           <mo>(</mo>           <mi>&#x3b8;</mi>           <mo>)</mo>          </mrow>         </mtd>        </mtr>        <mtr>         <mtd>          <mrow>           <mo>-</mo>           <mrow>            <mi>sin</mi>            <mo>&#x2061;</mo>            <mo>(</mo>            <mi>&#x3b8;</mi>            <mo>)</mo>           </mrow>          </mrow>         </mtd>         <mtd>          <mrow>           <mi>cos</mi>           <mo>&#x2061;</mo>           <mo>(</mo>           <mi>&#x3b8;</mi>           <mo>)</mo>          </mrow>         </mtd>        </mtr>       </mtable>       <mo>]</mo>      </mrow>      <mo>*</mo>      <mrow>       <mo>[</mo>       <mtable>        <mtr>         <mtd>          <mrow>           <mi>E</mi>           <mo>&#x2062;</mo>           <mi>&#x3b1;</mi>          </mrow>         </mtd>        </mtr>        <mtr>         <mtd>          <mrow>           <mi>E</mi>           <mo>&#x2062;</mo>           <mi>&#x3b2;</mi>          </mrow>         </mtd>        </mtr>       </mtable>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>4</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00011-2" num="00011.2"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mi>&#x3c9;</mi>     <mo>=</mo>     <mrow>      <mfrac>       <mn>1</mn>       <mi>Ke</mi>      </mfrac>      <mo>*</mo>      <mrow>       <mo>(</mo>       <mrow>        <mi>Eq</mi>        <mo>-</mo>        <mrow>         <mrow>          <mi>sgn</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <mi>&#x3c9;</mi>          <mo>)</mo>         </mrow>         <mo>*</mo>         <mi>Ed</mi>        </mrow>       </mrow>       <mo>)</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>5</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00011-3" num="00011.3"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mi>&#x3b8;</mi>     <mo>=</mo>     <mrow>      <mo>&#x222b;</mo>      <mrow>       <mi>&#x3c9;</mi>       <mo>*</mo>       <mi>dt</mi>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>6</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0048" num="0027">The subtractor <b>281</b> subtracts the rotor speed &#x3c9; from a reference speed value &#x3c9;ref (the target speed for the motor and generated by the processor core <b>110</b>) to produce an error value err&#x3c9; <b>289</b>. The error value err&#x3c9; <b>289</b> is an input to the PI controller <b>271</b>. In some example embodiments, the PI controllers <b>271</b>, <b>272</b> and <b>273</b> are control loop software modules that employ feedback, and in other example embodiments these PI controllers are implemented in hardware. In general, a PI controller repeatedly receives an error value that is the difference between a desired setpoint (e.g., reference speed value &#x3c9;ref in the case of PI controller <b>271</b>) and a measured process variable (e.g., rotor speed &#x3c9;), and generates an adjustment for another process variable based on proportional and integral terms. For example, in the case of the PI controller <b>271</b>, the generated adjustment is Iqref. Subtractor <b>282</b> subtracts lq from Iqref to generate output value errq <b>285</b>. The PI controllers <b>271</b>-<b>273</b> are digital controllers that implement the following equation:</p><p id="p-0049" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>u</i>(<i>t</i>)=<i>Kp+Ki/s</i>&#x2003;&#x2003;(7)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0050" num="0000">where u(t) is the ratio of the output value to the input value (e.g., an error value) from a PI controller, Kp is a proportional gain, Ki is an integral gain, &#x201c;s&#x201d; is the Laplace variable. A PI controller includes a proportional component and an integral component. The proportional component operates on the present value of the error while the integral component operates on previous error values. The proportional component ensures that the steady state error becomes small, but generally cannot ensure the error to be zero. However, because it operates on present error values, the proportional component converges relatively quickly. The integral component ensures that steady state error becomes zero. However, because it operates on previous values of error (error history), it converges more slowly than the proportional component. In general, the proportional component of a PI controller reduces the error to a relatively low value, and the integral component further reduces the error to zero. The speed at which the PI controller converges and any overshoot or undershoot observed are determined by the values of the proportional gain (Kp) and the integral gain (Ki).</p><p id="p-0051" num="0028">The outputs from the Park transform <b>220</b>, Id and Iq, are flux and torque current values, respectively, in the d,q rotating reference frame. The Iq component from the Park transform is subtracted from the Iqref value by subtractor <b>282</b> to produce an error value errq <b>285</b>. The PI controller <b>272</b> processes the value errq to compute the voltage value Vq in the (d,q) rotating reference frame. Subtractor <b>283</b> subtracts Id from a flux reference value Idref to compute a flux error value errd <b>291</b>. PI controller <b>273</b> receives error value errd <b>291</b> and outputs a voltage value Vd. The voltages Vq and Vd are the q-axis and d-axis voltages, respectively, applied to the motor so that the q-axis and d-axis currents match their respective references.</p><p id="p-0052" num="0029">The inverse Park transform <b>230</b> transforms the rotating frame flux and torque values Vd and Vq, respectively, into the corresponding values of V&#x3b1; and V&#x3b2; in the (&#x3b1;, &#x3b2;) stationary orthogonal reference frame. The rotor flux position &#x3b8; from the speed and position estimator <b>260</b> is also provided to the inverse Park transform <b>230</b>. In one example, the Park transform computes V&#x3b1; and V&#x3b2; as:</p><p id="p-0053" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>V&#x3b1;=Vd </i>* cos(&#x3b8;)&#x2212;<i>Vq </i>* sin(&#x3b8;)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0054" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>V&#x3b2;=Vd </i>* sin(&#x3b8;)+<i>Vq </i>* cos(&#x3b8;)&#x2003;&#x2003;(8)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0055" num="0030">The values V&#x3b1; and V&#x3b2; are then provided to the space vector PWM <b>240</b> which uses the values V&#x3b1; and V&#x3b2; to produce the signals ma, mb, and mc that drive the three-phase inverter <b>140</b>. The inverter <b>140</b> converts the voltage reference values (ma, mb, mc) to duty cycles that control the on and off states of the transistors within the respective inverter phase such that the voltage on the phase's switch node applied to the motor has an average voltage that is approximately the same as the voltage reference value (ma, mb, mc). The relationship between ma-mc and the respective duty cycle is provided above.</p><p id="p-0056" num="0031">As explained above, the values of speed (&#x3c9;) and rotor position (&#x3b8;) computed by the speed and position estimator <b>260</b> are not necessarily accurate at motor start-up because speed and position is determined from BEMF, and BEMF has relatively poor (low) signal-to-noise ratio (SNR) at low motor speeds. <figref idref="DRAWINGS">FIG. <b>5</b></figref> is a functional block diagram <b>500</b> of the software <b>125</b> for implementing an FOC technique that includes both open-loop and closed-loop modes of operation. Some of the functional blocks in <figref idref="DRAWINGS">FIG. <b>5</b></figref> are the same as those shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> and the description of those blocks is not repeated with regard to the description of <figref idref="DRAWINGS">FIG. <b>5</b></figref>. While the example embodiments of <figref idref="DRAWINGS">FIGS. <b>1</b>, <b>2</b> and <b>5</b></figref>, refer to software <b>125</b> and the implementation of some features in software, other example embodiments may implement the same features in hardware, software or a combination of hardware and software.</p><p id="p-0057" num="0032">In addition to the functional blocks from <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the functional block diagram <b>500</b> includes an auto-handoff controller <b>510</b> and multiplexers <b>520</b> and <b>522</b>. The auto-handoff controller <b>510</b> receives as an input the d- and q-axis estimates of BEMF (Ed and Eq) computed by the speed and position estimator <b>260</b>. As explained below, based on the BEMF values Ed and Eq, the auto-handoff controller <b>510</b> generates a select signal (SELECT), which is the control signal for multiplexers <b>520</b> and <b>522</b>.</p><p id="p-0058" num="0033">Multiplexer <b>520</b> has a first input (e.g. a 0-input) and a second input (e.g. a 1-input). The select signal SELECT indicates which of the two inputs is to provide its signal to the output. The output signal is lqref, described above with reference to the input of subtractor <b>282</b>. The 0-input receives a value labeled lqrefm, which is one of the programmable values provided to the processor core <b>110</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>). An external device (not shown) can transmit the value of lqrefm to the processor core <b>110</b>. During open-loop operation, the SELECT signal is set to a first logic state (e.g., &#x201c;0&#x201d;) to cause the 0-input of the multiplexer <b>520</b> to be selected. The output from the PI controller <b>271</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref> is shown as lqrefa. During closed-loop operation, the SELECT signal is set to a second logic state (e.g., &#x201c;1&#x201d;) to cause the 1-input of the multiplexer <b>520</b> to be selected. During open-loop operation, lqref is equal to lqrefm. During closed-loop operation, lqref is equal to Irefa from the PI controller <b>271</b>.</p><p id="p-0059" num="0034">Multiplexer <b>522</b> also has a 0-input and a 1-input. The estimated value of rotor position from the speed and position estimator <b>260</b> is provided to the 1-input. The 0-input of multiplexer <b>522</b> is a calculated value &#x3b8;_openloop. The open loop value of rotor position (&#x3b8;_openloop) is calculated based on programmable values and not based on motor current. The programmable values for computing &#x3b8;_openloop include rotor acceleration values a<b>1</b> and a2. The processor core <b>110</b> computes motor speed (FREQ) during open loop operation as:</p><p id="p-0060" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>FREQ =(<i>a</i>1*t)+<i>a</i>2*<i>t</i><sup>2 </sup>&#x2003;&#x2003;(9)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0061" num="0000">where &#x201c;t&#x201d; is time measured starting from the time the motor begins to spin (i.e., time spent during open-loop operation) . The processor core <b>110</b> integrates FREQ to compute the open loop value &#x3b8;_openloop as:</p><p id="p-0062" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>&#x3b8;_openloop=&#x222b;(FREQ)<i>dt </i>&#x2003;&#x2003;(10)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0063" num="0035">The select signal SELECT form the auto-handoff controller <b>510</b> causes the multiplexer <b>522</b> to select between its 0-input and its 1-input. During open loop operation, the auto-handoff controller <b>510</b> asserts SELECT to the first logic state to cause multiplexer <b>522</b> to provide &#x3b8;_openloop as its output (shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref> as &#x3b8;<b>1</b>) to the Park transform <b>220</b> and the inverse Park transform <b>230</b>. The &#x3b8; inputs to the Park and inverse Park transforms described above are replaced with &#x3b8;<b>1</b> in the embodiment of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0064" num="0036">The auto-handoff controller <b>510</b> automatically (without using externally-provided parameters) determines when to switch control from open-loop to closed-loop control. The determination of when to switch from open-loop to closed-loop control is implemented by the auto-handoff controller <b>510</b> based on the calculation of BEMF from Eq. 4 above. The calculation of BEMF produces BEMF components in the d and q-axes. The value Ed is the component of BEMF along the d-axis, and the value Eq is the component of BEMF along the q-axis. The total BEMF is the sum of the Ed and Eq components (vector addition).</p><p id="p-0065" num="0037"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates multiple BEMF estimates in the d,q rotating reference frame for a rotor <b>610</b>. The rotor has a north pole <b>611</b> and a south pole <b>612</b>. The d,q rotating reference frame generally rotates at rotor speed and thus the rotor is stationary with respect to the rotating reference frame. Two estimates for BEMF are shown. The rotor flux position &#x3b8; takes a finite amount of time to lock to the rotor and thus one of the estimates (Estimate 0 and Estimate 1) is likely closer to the actual angular position of the rotor than the other estimate. The determination below is an example of how the processor core <b>110</b> determines an estimate to be within a threshold range of the actual rotor position. Estimate 0 includes Ed and Eq components shown as Ed_estim0 and Eq_estim0, respectively. Estimate 1 includes Ed and Eq components shown as Ed_estim1 and Eq_estim1. Each of the vector sum of Ed_estim0 and Eq_estim0 and the vector sum of Ed_estim1 and Eq_estim1 is the total BEMF labeled as vector E in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. For any pair of d- and q-axis components of a BEMF estimate (Ed, Eq) calculated by the speed and position estimator <b>260</b>, the vector sum of the components is the same as for any other pair of d- and q-axis BEMF components.</p><p id="p-0066" num="0038">In accordance with an example embodiment, the auto-handoff controller <b>510</b> computes the vector sum of the Ed and Eq BEMF components it receives from the speed and position estimator <b>260</b> and determines when the q-axis component (Eq) is within a threshold value of the total BEMF. In the example of <figref idref="DRAWINGS">FIG. <b>6</b></figref>, for estimate 1, the Eq_estim1 component is closer in magnitude to the total BEMF (E) compared to Eq_estim0 for estimate 0. In one example, the auto-handoff controller <b>510</b> applies a preset or programmable (via programmable values, <figref idref="DRAWINGS">FIG. <b>1</b></figref>) threshold. For example, the threshold may be 90% (0.9). As such, the auto-handoff controller <b>510</b> determines when the Eq component of a given BEMF estimate is at least 90% of the total BEMF. Before the auto-handoff controller <b>510</b> determines that the Eq component of a BEMF estimated has reached the threshold, the auto-handoff controller asserts the select signal SELECT to the first logic state which causes the multiplexers <b>520</b> and <b>522</b> to select their 0-input, thereby using the Irefm and &#x3b8;_openloop values, respectively, in open-loop control of the motor. When the Eq component of a given BEMF estimate reaches or exceeds the threshold level (e.g., percentage of total BEMF), the auto-handoff controller <b>510</b> changes the select signal SELECT to the second logic state which causes the multiplexers <b>520</b> and <b>522</b> to select their 1-inputs (Irefa and &#x3b8;, respectively) thereby implementing closed-loop control of the motor. In one embodiment, the auto-handoff controller <b>510</b> changes the select signal SELECT to the second logic to switch from open-loop to closed-loop control as long as the estimator is not within a threshold value of saturation. The determination as to whether the estimator is within a threshold value of saturation is implementation dependent, and ensures that the estimate of BEMF is a reliable value. For example, a BEMF threshold value may be programmed into the processor core <b>110</b> and/or stored in storage device <b>120</b>. The auto-handoff controller <b>510</b> determines whether the estimate of BEMF is within a predetermined percentage of the programmed BEMF threshold value.</p><p id="p-0067" num="0039"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow chart <b>700</b> depicting an example method implemented by the motor controller <b>100</b>. At step <b>702</b>, the method includes operating the motor according to an open-loop FOC operation. This step, for example, may be implemented using predetermined or calculated values for FOC operation where the predetermined or calculated values are not derived from a measurement of motor current. Open-loop FOC operation may begin upon motor start-up (motor beginning to turn from a dead stop).</p><p id="p-0068" num="0040">At <b>704</b>, the method includes estimating the BEMF. In one example, the estimated BEMF includes first and second orthogonal components such as Ed and Eq in a d,q rotating reference frame. At <b>706</b>, the method includes determining whether a component of the estimated BEMF is within a threshold of the total BEMF. In one example, the component is the q-axis component of the estimated BEMF and the total BEMF is the vector sum of the first and second orthogonal components of the estimated BEMF. The threshold may be, for example, a percentage of the total BEMF.</p><p id="p-0069" num="0041">If the estimated BEMF component (e.g., Eq) is not within the threshold of the total BEMF, then control loops back to step <b>704</b>, open-loop FOC operation continues and another BEMF estimate is computed. Open-loop FOC operation continues until the estimated component of BEMF reaches or exceeds the threshold, at which time the auto-handoff controller <b>510</b> changes motor operation to a closed-loop FOC control (<b>708</b>) in which motor current is measured and used to derive rotor speed and position as feedback values in the FOC technique.</p><p id="p-0070" num="0042"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flow chart <b>800</b> depicting another example method implemented by the motor controller <b>100</b>. At step <b>802</b>, the method includes operating the motor according to the open-loop FOC operation, as described above. At <b>804</b>, the method includes computing an estimate of the BEMF in the &#x3b1;, &#x3b2; domain. Equation (3) above provides one possible embodiment for computing the BEMF in the &#x3b1;,&#x3b2; domain. At <b>806</b>, the method includes converting the estimate of the BEMF in the &#x3b1;, &#x3b2; domain to an estimate of the BEMF in the d,q domain. The components of the BEMF in the d,q domain are Ed and Eq as explained above.</p><p id="p-0071" num="0043">At <b>808</b>, the method includes computing the total BEMF using the Ed and Eq components of the estimated BEMF in the d,q domain. The total BEMF is computed as a vector sum of Ed and Eq, and thus the magnitude of the total BEMF is the square root of the sum of the squares of the magnitudes of Ed and Eq. At <b>810</b>, the method <b>800</b> includes determining whether the Eq component of the estimated BEMF in the d,q domain is within a threshold of the total BEMF. The threshold may be, for example, a percentage of the total BEMF. If the Eq component is not within the threshold of the total BEMF, then control loops back to step <b>804</b>, open-loop FOC operation continues, and another BEMF estimate in the &#x3b1;, &#x3b2; domain is computed. Open-loop FOC operation continues until the Eq component of BEMF reaches or exceeds the threshold, at which time the auto-handoff controller <b>510</b> changes motor operation to a closed-loop FOC control (<b>812</b>) in which motor current is measured and used to derive rotor speed and position as feedback values in the FOC technique.</p><p id="p-0072" num="0044">In this description, the term &#x201c;couple&#x201d; may cover connections, communications, or signal paths that enable a functional relationship consistent with this description. For example, if device A generates a signal to control device B to perform an action: (a) in a first example, device A is coupled to device B by direct connection; or (b) in a second example, device A is coupled to device B through intervening component C if intervening component C does not alter the functional relationship between device A and device B, such that device B is controlled by device A via the control signal generated by device A.</p><p id="p-0073" num="0045">A device that is &#x201c;configured to&#x201d; perform a task or function may be configured (e.g., programmed and/or hardwired) at a time of manufacturing by a manufacturer to perform the function and/or may be configurable (or re-configurable) by a user after manufacturing to perform the function and/or other additional or alternative functions. The configuring may be through firmware and/or software programming of the device, through a construction and/or layout of hardware components and interconnections of the device, or a combination thereof. As used herein, references to software functions or functional block diagrams may be implemented by software running on a processor, microcontroller or other type of processing device in conjunction with memory, in some example embodiments, or may be implemented using hardware (such as logic gates, processors, application specific integrated circuits, field programmable gate array and/or state machines), alone.</p><p id="p-0074" num="0046">As used herein, the terms &#x201c;terminal&#x201d;, &#x201c;node&#x201d;, &#x201c;interconnection&#x201d;, &#x201c;pin&#x201d; and &#x201c;lead&#x201d; are used interchangeably. Unless specifically stated to the contrary, these terms are generally used to mean an interconnection between or a terminus of a device element, a circuit element, an integrated circuit, a device or other electronics or semiconductor component.</p><p id="p-0075" num="0047">A circuit or device that is described herein as including certain components may instead be adapted to be coupled to those components to form the described circuitry or device. For example, a structure described as including one or more semiconductor elements (such as transistors), one or more passive elements (such as resistors, capacitors, and/or inductors), and/or one or more sources (such as voltage and/or current sources) may instead include only the semiconductor elements within a single physical device (e.g., a semiconductor die and/or integrated circuit (IC) package) and may be adapted to be coupled to at least some of the passive elements and/or the sources to form the described structure either at a time of manufacture or after a time of manufacture, for example, by an end-user and/or a third-party.</p><p id="p-0076" num="0048">Unless otherwise stated, &#x201c;about,&#x201d; &#x201c;approximately,&#x201d; or &#x201c;substantially&#x201d; preceding a value means +/&#x2212;10 percent of the stated value. Modifications are possible in the described examples, and other examples are possible within the scope of the claims.</p><p id="p-0077" num="0049">Modifications are possible in the described embodiments, and other embodiments are possible, within the scope of the claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230006576A1-20230105-M00001.NB"><img id="EMI-M00001" he="5.25mm" wi="76.20mm" file="US20230006576A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230006576A1-20230105-M00002.NB"><img id="EMI-M00002" he="5.25mm" wi="76.20mm" file="US20230006576A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230006576A1-20230105-M00003.NB"><img id="EMI-M00003" he="9.91mm" wi="76.20mm" file="US20230006576A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004" nb-file="US20230006576A1-20230105-M00004.NB"><img id="EMI-M00004" he="5.67mm" wi="76.20mm" file="US20230006576A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00005" nb-file="US20230006576A1-20230105-M00005.NB"><img id="EMI-M00005" he="5.67mm" wi="76.20mm" file="US20230006576A1-20230105-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00006" nb-file="US20230006576A1-20230105-M00006.NB"><img id="EMI-M00006" he="6.01mm" wi="76.20mm" file="US20230006576A1-20230105-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00007" nb-file="US20230006576A1-20230105-M00007.NB"><img id="EMI-M00007" he="5.67mm" wi="76.20mm" file="US20230006576A1-20230105-M00007.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00008" nb-file="US20230006576A1-20230105-M00008.NB"><img id="EMI-M00008" he="5.67mm" wi="76.20mm" file="US20230006576A1-20230105-M00008.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00009" nb-file="US20230006576A1-20230105-M00009.NB"><img id="EMI-M00009" he="5.67mm" wi="76.20mm" file="US20230006576A1-20230105-M00009.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00010" nb-file="US20230006576A1-20230105-M00010.NB"><img id="EMI-M00010" he="5.67mm" wi="76.20mm" file="US20230006576A1-20230105-M00010.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00011 MATH-US-00011-2 MATH-US-00011-3" nb-file="US20230006576A1-20230105-M00011.NB"><img id="EMI-M00011" he="19.39mm" wi="76.20mm" file="US20230006576A1-20230105-M00011.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A motor controller integrated circuit (IC), comprising:<claim-text>a storage device containing software; and</claim-text><claim-text>a processor core coupled to the storage device, the processor core having an output adapted to be coupled to a motor, and the processor core configured to execute the software to:<claim-text>operate the motor in an open-loop control;</claim-text><claim-text>calculate first and second orthogonal components of a back electromotive force (BEMF);</claim-text><claim-text>calculate a total BEMF value;</claim-text><claim-text>determine that the first orthogonal component is within a threshold of the total BEMF value; and</claim-text><claim-text>responsive to the first orthogonal component being within the threshold of the total BEMF value, operate the motor in a closed-loop control.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The motor controller IC of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor, upon executing the software, is configured to implement a field-oriented control (FOC) of the motor.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The motor controller IC of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the first and second orthogonal components are BEMF components in a rotating reference frame.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The motor controller IC of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the processor is configured to:<claim-text>implement first and second proportional integral (PI) controllers, the first PI controller<claim-text>having a PI controller output and the second PI controller having a PI controller input;</claim-text></claim-text><claim-text>during open-loop control operation, provide a predetermined value to the PI controller input; and</claim-text><claim-text>during closed-loop control operation, provide the PI controller output from the first PI controller to the PI controller input of the second PI controller.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The motor controller IC of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the processor is configured to:<claim-text>estimate a motor speed based on motor current; and</claim-text><claim-text>implement the first PI controller to calculate the PI controller output using the estimated motor speed.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The motor controller IC of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the processor is configured to:<claim-text>implement a Park transform having a Park transform input;</claim-text><claim-text>estimate a motor speed based on motor current;</claim-text><claim-text>during open-loop control operation, compute a first value of rotor position based on a predetermined acceleration value, and provide the first value of rotor position to the Park transform input; and</claim-text><claim-text>during closed-loop control operation, compute a second value of rotor position based on the motor current, and provide the second value of rotor position to the Park transform input.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The motor controller IC of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is configured to calculate the total BEMF as a vector sum of the first and second orthogonal components.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The motor controller IC of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is configured to:<claim-text>compute estimates of rotor speed and position based on motor current; and</claim-text><claim-text>during closed-loop control operation, control current to the motor based on the computed estimates of rotor speed and position.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The motor controller IC of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is configured to operate the motor as a three-phase motor.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A motor controller integrated circuit (IC), comprising:<claim-text>a three-phase inverter operable to be coupled to a motor; and</claim-text><claim-text>circuitry coupled to the three-phase motor, the circuitry operable to:<claim-text>operate the motor in an open-loop field-oriented control (FOC);</claim-text><claim-text>calculate first and second orthogonal components of a back electromotive force (BEMF) in a rotating reference frame;</claim-text><claim-text>calculate a total BEMF value in the rotating reference frame;</claim-text><claim-text>determine that the first orthogonal component is within a threshold of the total BEMF value; and</claim-text><claim-text>responsive to the first orthogonal component being within a threshold of the total BEMF value, operate the motor in a closed-loop FOC control.</claim-text></claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The motor controller IC of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the processor is configured to:<claim-text>implement first and second proportional integral (PI) controllers, the first PI controller<claim-text>having a PI controller output and the second PI controller having a PI controller input;</claim-text></claim-text><claim-text>during open-loop control operation, provide a predetermined value to the PI controller input; and</claim-text><claim-text>during closed-loop control operation, provide the PI controller output from the first PI controller to the PI controller input of the second PI controller.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The motor controller IC of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the processor is configured to:<claim-text>estimate a motor speed based on motor current; and</claim-text><claim-text>implement the first PI controller to calculate the PI controller output using the estimated motor speed.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The motor controller IC of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the processor is configured to:<claim-text>implement a Park transform having a Park transform input;</claim-text><claim-text>estimate a motor speed based on motor current;</claim-text><claim-text>during open-loop control operation, compute a first value of rotor position based on a predetermined acceleration value, and provide the first value of rotor position to the Park transform input; and</claim-text><claim-text>during closed-loop control operation, compute a second value of rotor position based on the motor current, and provide the second value of rotor position to the Park transform input.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The motor controller IC of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the processor is configured to calculate the total BEMF as a vector sum of the first and second orthogonal components.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The motor controller IC of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the processor is configured to:<claim-text>compute estimates of rotor speed and position based on motor current; and</claim-text><claim-text>during closed-loop control operation, control current to the three-phase motor based on the computed estimates of rotor speed and position.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A method of controlling a motor, comprising:<claim-text>operating the motor with an open-loop control; and</claim-text><claim-text>calculating first and second orthogonal components of a back electromotive force (BEMF) calculating a total BEMF value;</claim-text><claim-text>determining that the first orthogonal component is within a threshold of the total BEMF value; and</claim-text><claim-text>responsive to the first orthogonal component being within the threshold of the total BEMF value, operating the motor with a closed-loop control.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein calculating the first and second orthogonal components comprise calculating the first and second orthogonal components in a rotating reference frame.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising:<claim-text>implementing first and second proportional integral (PI) controllers, the first PI controller having a PI controller output and the second PI controller having a PI controller input;</claim-text><claim-text>during open-loop control operation, providing a predetermined value to the PI controller input; and</claim-text><claim-text>during closed-loop control operation, providing the PI controller output from the first PI controller to the PI controller input of the second PI controller.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref>, further comprising:<claim-text>estimating motor speed based on motor current; and</claim-text><claim-text>implementing the first PI controller to calculate the PI controller output using the estimated motor speed.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising:<claim-text>implementing a Park transform having a Park transform input;</claim-text><claim-text>estimating motor speed based on motor current;</claim-text><claim-text>during open-loop control operation, computing a first value of rotor position based on a predetermined acceleration value, and providing the first value of rotor position to the Park transform input; and</claim-text><claim-text>during closed-loop control operation, computing a second value of rotor position based on the motor current, and providing the second value of rotor position to the Park transform input.</claim-text></claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein calculating the total BEMF comprises calculating the square root of the sum of the squares of the magnitudes of the first and second orthogonal components.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising:<claim-text>computing estimates of rotor speed and position based on motor current; and</claim-text><claim-text>during closed-loop control operation, controlling current to the motor based on the computed estimates of rotor speed and position.</claim-text></claim-text></claim></claims></us-patent-application>