<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005610A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005610</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17366237</doc-number><date>20210702</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>16</class><subclass>H</subclass><main-group>40</main-group><subgroup>63</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>A</section><class>61</class><subclass>B</subclass><main-group>34</main-group><subgroup>37</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>A</section><class>61</class><subclass>B</subclass><main-group>34</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>B</section><class>25</class><subclass>J</subclass><main-group>9</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20180101</date></cpc-version-indicator><section>G</section><class>16</class><subclass>H</subclass><main-group>40</main-group><subgroup>63</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20160201</date></cpc-version-indicator><section>A</section><class>61</class><subclass>B</subclass><main-group>34</main-group><subgroup>37</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20160201</date></cpc-version-indicator><section>A</section><class>61</class><subclass>B</subclass><main-group>34</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>B</section><class>25</class><subclass>J</subclass><main-group>9</main-group><subgroup>1605</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20160201</date></cpc-version-indicator><section>A</section><class>61</class><subclass>B</subclass><main-group>2034</main-group><subgroup>101</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SCALABLE FILTERING INFRASTRUCTURE FOR VARIABLE CONTROL RATES IN A DISTRIBUTED SYSTEM SUCH AS A SURGICAL ROBOTIC SYSTEM</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>Verb Surgical Inc.</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Shrivastava</last-name><first-name>Apoorv</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Yu</last-name><first-name>Haoran</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Zhou</last-name><first-name>Renbin</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Sen</last-name><first-name>H. Tutkun</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Hariri</last-name><first-name>Alireza</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">For a scalable filtering infrastructure, a library of filters each usable at different control rates is provided by defining filters in a continuous time mode despite eventual use for digital filtering. For implementation, a filter is selected and discretized for the desired control rate. The discretized filter is then deployed as a discrete time realization for convolution. In a distributed system with multiple control rates, the library may be used to more rapidly and conveniently generate the desired filters.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="185.84mm" wi="140.55mm" file="US20230005610A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="188.89mm" wi="129.29mm" orientation="landscape" file="US20230005610A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="195.16mm" wi="142.58mm" file="US20230005610A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="154.18mm" wi="141.99mm" file="US20230005610A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="108.71mm" wi="94.66mm" file="US20230005610A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD</heading><p id="p-0002" num="0001">Embodiments relate to scalable filtering for design and/or use in a surgical robotic system or other system.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Surgical robotic systems give an operating surgeon the ability to robotically perform one or more actions of a surgical procedure. In the surgical robotic system, a robot manipulates a surgical tool to assist in surgery. A user console receives user input to control the robot and may be posited remotely from the robot. A control tower may communicatively connect between the user console and the robot. These distributed components have different signal or data filtering requirements. To complicate the filtering, the different components may provide data for filtering at different sampling rates. Due to different modes of operation, a given component may operate at different rates. The active components of the system change depending on the various system and/or sub-system modes, such as clinical mode (i.e., surgery), training or simulation mode, or standalone (e.g., active system fault state due to loss of communications). In these modes, system functionality is often duplicated to meet operational requirements or is redundantly implemented for fault detection or fault handling. Depending on hardware specifications or computational limitations, the various underlying control algorithms implemented as firmware or software may need to run at various different control rates. As a result, it is difficult and time consuming to design filters appropriate for the various signals at the different control rates.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0004" num="0003">By way of introduction, the preferred embodiments described below include methods, systems, instructions, and computer readable media for a scalable filtering infrastructure. By defining filters in a continuous time mode despite eventual use for digital filtering, a library of filters each usable at different control rates is provided. For implementation, a filter is selected and discretized for the desired control rate. The discretized filter is then deployed as a discrete time realization for convolution. In a distributed system with multiple control rates, the library may be used to more rapidly and conveniently generate the desired filters.</p><p id="p-0005" num="0004">In a first aspect, a method is provided for filtering information in a surgical robotic system. A library of filters defined as continuous domain transfer functions is generated. A first of the filters is discretized based on a sample rate for the information in the surgical robotic system. The information is filtered at the sample rate. The filtering includes convolving the information with a linear system realization of the first of the filters. The surgical robotic system is operated, such as operating in any of various modes, with the filtered information.</p><p id="p-0006" num="0005">In a second aspect, a surgical robotic system is provided for filtering at different control rates. A surgical robot has a first component operable at a first control rate. A user console is configured to receive user input for control of the surgical robot. The user console connects wirelessly or through wires to the surgical robot. The user console has a second component operable at a second control rate different than the first control rate. A memory stores a library of filters defined in a continuous domain. A processor is configured to discretize a first filter from the library with the first control rate and a second filter from the library with the second control rate. The processor is configured to generate discrete time realizations of the first and second filters.</p><p id="p-0007" num="0006">In a third aspect, a method is provided for a scalable filtering infrastructure. Filter requirements for filtering at a first control rate are input. A filter is generated from a library of filters based on the requirements. The filters of the library are independent of the first control rate. The selected filter is converted to the first control rate. A filter kernel is generated for the converted filter. Signals are filtered with the filter kernel at the first control rate.</p><p id="p-0008" num="0007">The present invention is defined by the following claims, and nothing in this section should be taken as a limitation on those claims. Further aspects and advantages of the invention are discussed below in conjunction with the preferred embodiments and may be later claimed independently or in combination.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008">The embodiments of the invention are illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. It should be noted that references to &#x201c;an&#x201d; or &#x201c;one&#x201d; embodiment of the invention in this disclosure are not necessarily to the same embodiment, and they mean at least one. Also, in the interest of conciseness and reducing the total number of figures, a given figure may be used to illustrate the features of more than one embodiment of the invention, and not all elements in the figure may be required for a given embodiment.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a pictorial view of an example surgical robotic system in an operating arena;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram of one embodiment of a method for implementing a scalable filter infrastructure;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a scalable filter infrastructure; and</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of one embodiment of a robotic system using the scalable filter infrastructure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0014" num="0013">A scalable software infrastructure supports variable control rates for reconfigurable hardware and/or software. In order to address different modes of operation and a distributed system, a continuous-time filter library is provided with discretization methods that allow software to be run at various different control rates while maintaining transient and steady state system response and/or performance.</p><p id="p-0015" num="0014">In one embodiment, the filtering process is split into three stages. In a first stage, filter definitions and corresponding performance requirements are used to generate the library. A user or developer defines the required system characteristics for filtering in software or hardware. These include but are not limited to transfer function types, cut-off frequencies, attenuation, bandwidth, order, etc. The filters for these requirements are converted into s-domain transfer functions. Alternatively, a s-domain transfer function is directly specified. The result is a library of filters defined in continuous time. In a second stage, one or more of the filters are discretized. Depending on the specified control rate of the software process and the intended application, a discretized z-domain transfer function is generated from a selected filter of the library. In a third stage, a standard controllable or observable realization or a custom realization is generated, depending on the context. For filter deployment or realization, the discretized filter is used to generate a discrete time realization that can perform signal filtering as desired. In certain real time contexts, the filter may be required to meet additional requirements of minimal dynamic memory allocation at runtime. The order of the filter selected may be used to control the memory allocation.</p><p id="p-0016" num="0015">The formation of the continuous-time filters of the library with discretization to particular control rates supports multiple control rates across different system (hardware and/or software) configurations. The continuous-time library separates the mathematical definition of a discrete filter from its real time context usage. Validation of filter parameters, including stability at specified control rates, may be enabled through use of the library to test different filters for a given context. The library infrastructure with discretization to control rates needed for particular realization may reduce the number of control parameters and tuning effort for robotics or control engineers. Since the definition of the filters is separated from the context, requirements for defined filters may be accurately recorded.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an example surgical robotic system. The surgical robotic system is a distributed system and includes multiple modes of operation, both of which result in use of different filters (e.g., for different components and/or for different modes of operation) in the one system. <figref idref="DRAWINGS">FIG. <b>1</b></figref> is provided as an example environment for which the filter infrastructure is used. In other embodiments, other distributed systems and/or other systems with multiple modes of operation may be provided, whether robotic or not, whether medical or not. In alternative embodiments, a single processor operating in one mode uses filtering at more than one control rate, so the filter infrastructure is used to realize different filters for or by the processor.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a method using the filter infrastructure, and <figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example representation of the filter infrastructure. <figref idref="DRAWINGS">FIG. <b>4</b></figref> shows an example generalized distributed system for using the filter infrastructure, albeit in a robotic context.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a pictorial view of an example surgical robotic system <b>1</b> in an operating arena. The surgical robotic system <b>1</b> includes a user console <b>2</b>, a control tower <b>3</b>, and one or more surgical robotic arms <b>4</b> at a surgical platform <b>5</b>, e.g., a table, a bed, etc. The surgical robotic system <b>1</b> can incorporate any number of devices, tools, or accessories used to perform surgery on a patient <b>6</b>. For example, the surgical robotic system <b>1</b> may include one or more surgical tools <b>7</b> used to perform surgery. The surgical tool <b>7</b> may have an end effector at its distal end (also a distal end of the robotic surgical arm <b>4</b> to which the surgical tool <b>7</b> is attached), for executing a surgical operation such as stapling, cutting, grasping, poking, or energy emission.</p><p id="p-0020" num="0019">Each surgical tool <b>7</b> may be manipulated manually, robotically, or both, during the surgery. For example, the surgical tool <b>7</b> may be a tool used to enter, view, or manipulate an internal anatomy of the patient <b>6</b>. The surgical tool <b>7</b> may be controlled manually, directly by a hand of a bedside operator <b>8</b>; or it may be controlled robotically, via sending electronic commands to actuate movement of the surgical robotic arm <b>4</b> to which the surgical tool <b>7</b> is attached. The surgical robotic arms <b>4</b> are shown as a table-mounted system, but in other configurations the surgical robotic arms <b>4</b> may be mounted in a cart, ceiling or sidewall, or in another suitable structural support.</p><p id="p-0021" num="0020">Generally, a remote operator <b>9</b>, such as a surgeon, may use the user console <b>2</b> to remotely manipulate the surgical robotic arms <b>4</b> and the attached surgical tools <b>7</b>, e.g., teleoperation. The user console <b>2</b> may be located in the same operating room as the rest of the surgical robotic system <b>1</b>, as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In other environments however, the user console <b>2</b> may be located in an adjacent or nearby room, or it may be at a remote location, e.g., in a different building, city, or country. The user console <b>2</b> may include a seat <b>10</b>, foot-operated controls <b>13</b>, one or more handheld user interface devices, UID <b>14</b>, and at least one user display <b>15</b> that is configured to display, for example, a view of the surgical site inside the patient <b>6</b>. In the example user console <b>2</b>, the remote operator <b>9</b> is sitting in the seat <b>10</b> and viewing the user display <b>15</b> while manipulating a foot-operated control <b>13</b> and a handheld UID <b>14</b> in order to remotely control the surgical robotic arms <b>4</b> and the surgical tools <b>7</b> (that are mounted on the distal ends of the surgical arms <b>4</b>).</p><p id="p-0022" num="0021">In some variations, the bedside operator <b>9</b> may also operate the surgical robotic system <b>1</b> in an &#x201c;over the bed&#x201d; mode, in which the beside operator <b>8</b> (user) is now at a side of the patient <b>6</b> and is simultaneously manipulating i) a robotically-driven tool (having an end effector) that is attached to the surgical robotic arm <b>4</b>, e.g., with a handheld UID <b>14</b> held in one hand, and ii) a manual laparoscopic tool. For example, the bedside operator's left hand may be manipulating the handheld UID to control a surgical robotic component, while the bedside operator's right hand may be manipulating a manual laparoscopic tool. Thus, in these variations, the bedside operator <b>8</b> may perform both robotic-assisted minimally invasive surgery and manual laparoscopic surgery on the patient <b>6</b>.</p><p id="p-0023" num="0022">During an example procedure (surgery), the patient <b>6</b> is prepped and draped in a sterile fashion to achieve anesthesia. Initial access to the surgical site may be performed manually while the arms of the surgical robotic system <b>1</b> are in a stowed configuration or withdrawn configuration (to facilitate access to the surgical site.) Once access is completed, initial positioning or preparation of the surgical robotic system <b>1</b> including its surgical robotic arms <b>4</b> may be performed. Next, the surgery proceeds with the remote operator <b>9</b> at the user console <b>2</b> utilizing the foot-operated controls <b>13</b> and the UIDs <b>14</b> to manipulate the various end effectors and perhaps an imaging system to perform the surgery. Manual assistance may also be provided at the procedure bed or table, by sterile-gowned bedside personnel, e.g., the bedside operator <b>8</b> who may perform tasks such as retracting tissues, performing manual repositioning, and tool exchange upon one or more of the surgical robotic arms <b>4</b>. Non-sterile personnel may also be present to assist the remote operator <b>9</b> at the user console <b>2</b>. When the procedure or surgery is completed, the surgical robotic system <b>1</b> and the user console <b>2</b> may be configured or set in a state to facilitate post-operative procedures such as cleaning or sterilization and healthcare record entry or printout via the user console <b>2</b>.</p><p id="p-0024" num="0023">In one embodiment, the remote operator <b>9</b> holds and moves the UID <b>14</b> to provide an input command to move a robot arm actuator <b>17</b> in the surgical robotic system <b>1</b>. The UID <b>14</b> may be communicatively coupled to the rest of the surgical robotic system <b>1</b>, e.g., via a console computer system <b>16</b>. The UID <b>14</b> can generate spatial state signals corresponding to movement of the UID <b>14</b>, e.g. position and orientation of the handheld housing of the UID, and the spatial state signals may be input signals to control a motion of the robot arm actuator <b>17</b>. The surgical robotic system <b>1</b> may use control signals derived from the spatial state signals, to control proportional motion of the actuator <b>17</b>. In one embodiment, a console processor of the console computer system <b>16</b> receives the spatial state signals and generates the corresponding control signals. Based on these control signals, which control how the actuator <b>17</b> is energized to move a segment of the surgical robotic arm <b>4</b>, the movement of a corresponding surgical tool that is attached to the arm may mimic the movement of the UID <b>14</b>. Similarly, interaction between the remote operator <b>9</b> and the UID <b>14</b> can generate for example a grip control signal that causes a jaw of a grasper of the surgical tool <b>7</b> to close and grip the tissue of patient <b>6</b>.</p><p id="p-0025" num="0024">The surgical robotic system <b>1</b> may include several UIDs <b>14</b>, where respective control signals are generated for each UID <b>14</b> that control the actuators and the surgical tool (end effector) of a respective surgical robotic arm <b>4</b>. For example, the remote operator <b>9</b> may move a first UID <b>14</b> to control the motion of an actuator <b>17</b> that is in a left robotic arm, where the actuator responds by moving linkages, gears, etc., in that surgical robotic arm <b>4</b>. Similarly, movement of a second UID <b>14</b> by the remote operator <b>9</b> controls the motion of another actuator <b>17</b>, which in turn moves other linkages, gears, etc., of the surgical robotic system <b>1</b>. The surgical robotic system <b>1</b> may include a right surgical robotic arm <b>4</b> that is secured to the bed or table to the right side of the patient, and a left surgical robotic arm <b>4</b> that is at the left side of the patient. An actuator <b>17</b> may include one or more motors that are controlled so that they drive the rotation of a joint of the surgical robotic arm <b>4</b>, to for example change, relative to the patient, an orientation of an endoscope or a grasper of the surgical tool <b>7</b> that is attached to that arm. Motion of several actuators <b>17</b> in the same surgical robotic arm <b>4</b> can be controlled by the spatial state signals generated from a particular UID <b>14</b>. The UIDs <b>14</b> can also control motion of respective surgical tool graspers. For example, each UID <b>14</b> can generate a respective grip signal to control motion of an actuator, e.g., a linear actuator, that opens or closes jaws of the grasper at a distal end of surgical tool <b>7</b> to grip tissue within patient <b>6</b>. One or more of the UIDs <b>14</b> can also control motion of a stapler, such as activating the application of a staple to the tissue of the patient <b>9</b>.</p><p id="p-0026" num="0025">In some aspects, the communication between the surgical platform <b>5</b> and the user console <b>2</b> may be through a control tower <b>3</b>, which may translate user commands that are received from the user console <b>2</b> (and more particularly from the console computer system <b>16</b>) into robotic control commands that are transmitted to the surgical robotic arms <b>4</b> on the surgical platform <b>5</b>. The control tower <b>3</b> may also transmit status and feedback from the surgical platform <b>5</b> back to the user console <b>2</b>. The communication connections between the surgical platform <b>5</b>, the user console <b>2</b>, and the control tower <b>3</b> may be via wired and/or wireless links, using any suitable ones of a variety of data communication protocols. Any wired connections may be optionally built into the floor and/or walls or ceiling of the operating room. The surgical robotic system <b>1</b> may provide video output to one or more displays, including displays within the operating room as well as remote displays that are accessible via the Internet or other networks. The video output or feed may also be encrypted to ensure privacy and all or portions of the video output may be saved to a server or electronic healthcare record system.</p><p id="p-0027" num="0026">Any of the various components of the surgical robotic system may generate, operate on, or receive signals to be filtered. A processor or other digital hardware is programmable to implement the desired filtering. In a distributed system like this example robotic surgical system, there may be tens or hundreds of different filters to be implemented. Where the system may operate in different modes, the same signals may be filtered differently, even at a different control rate. The sample rates used by different components (e.g., processors or other hardware) and/or for different modes may require even more filters to be defined. Separately design filter kernels for all these filters is time consuming and difficult.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow chart diagram of one embodiment of a method for creating and use of a scalable filtering infrastructure. The filtering process is split into three stages, filter definition in a library, discretization, and realization. One or more filters are generated for use by one or more components and/or modes of operation. In one example use, <figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a method for filtering information in a surgical robotic system.</p><p id="p-0029" num="0028">The method is implemented by a processor, such as a computer, workstation, or server. The implementation of realized filters may be performed by one or more other processors, such as a processor implementing software filtering or programmable hardware implementing filtering. For example, acts <b>200</b>-<b>212</b> are performed by a computer. Different computers may be used at different times and/or for different acts of the method, such as one computer for acts <b>200</b> and <b>202</b>, and a different computer for acts <b>204</b>-<b>212</b>. In this example, act <b>214</b> is performed by a component of a distributed or other system.</p><p id="p-0030" num="0029">The acts are performed in the order shown (e.g., top to bottom or numerical) or a different order. For example, the filter is selected in act <b>206</b> based on other criteria (e.g., user selects desired type of filter), and then the requirements for the selected filter are input in act <b>204</b>.</p><p id="p-0031" num="0030">Additional, different, or fewer acts may be provided. For example, acts <b>200</b> and/or <b>202</b> are not performed where the library already exists or the user chooses to directly specify the discrete transfer function. In yet another example, acts <b>200</b> and <b>202</b> are performed without the other acts to create the library of continuous-time filters.</p><p id="p-0032" num="0031">In act <b>200</b>, a processor or processors generate a filter. The filter is generated alone or generated with other filters in a library of filters. A user or developer defines the required system characteristics. The characteristics include but are not limited to transfer function types, cut-off frequencies, attenuation, bandwidth, order, etc. Filters with different characteristics are defined. The definitions may be formed by a search or randomization or may be characteristics needed for a particular system. Sets of characteristics defining multiple different filters are input.</p><p id="p-0033" num="0032">In one embodiment, the transfer function types are used to define a generic filter for each type. The bandwidth, cut-off frequencies, attenuation, and/or other characteristics are not defined as the generic filter may be configured to provide different bandwidths, cut-off frequencies, attenuation, and/or other characteristics. Any sub-set or all characteristics may be used to define a filter for the library.</p><p id="p-0034" num="0033">The filters are defined as time-continuous filters in act <b>202</b>. The library is generated as a library of filters defined as continuous domain transfer functions. The defined filters are converted into s-domain transfer functions, such as using Laplace domain processing. Alternatively, the definition may directly specify an s-domain transfer function. The filter definitions based on requirements are translated into the continuous domain transfer functions. Alternatively, act <b>204</b> is performed prior to act <b>202</b>, which is a conversion of the defined filters into time-continuous filters.</p><p id="p-0035" num="0034">The time-continuous filters, such as provided by the s-domain transfer functions, are independent of the sampling rate. By defining the filters as time-continuous (e.g., analog), the sampling rate is not used in the definition.</p><p id="p-0036" num="0035">In one embodiment, the definitions are by type of filter. The library is generated to include filters of different types. For example, the library, H(s) in the s-domain, is represented as:</p><p id="p-0037" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mtext>                 </mtext>  <mrow>   <mrow>    <mi>H</mi>    <mo>&#x2061;</mo>    <mo>(</mo>    <mi>s</mi>    <mo>)</mo>   </mrow>   <mo>=</mo>   <mstyle><mtext>?</mtext></mstyle>  </mrow> </mrow></math></maths><maths id="MATH-US-00001-2" num="00001.2"><math overflow="scroll"> <mrow>  <mstyle><mtext>?</mtext></mstyle>  <mtext mathsize="6pt">indicates text missing or illegible when filed</mtext> </mrow></math></maths></p><p id="p-0038" num="0000">where f is the filter, the parameters in parenthesis are the variables for the filter, and the subscript is the type of transfer function where &#x201c;ct&#x201d; is custom.</p><p id="p-0039" num="0036">In generation of the transfer functions, filter definitions specify the filter parameters such as cutoff frequencies, amplitude response graph slopes, etc. These definitions are translated into continuous domain (s-domain) transfer functions. Some example filters as s-domain transfer functions include Butterworth, Chebyshev Type II, Notch, 2<sup>nd </sup>Order, and custom filters. The Butterworth filter is parameterized by the cutoff frequency (w<sub>n</sub>) and order (n), where the method of discretization is the bilinear transform. The s-domain transfer function is given as:</p><p id="p-0040" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mrow>  <msub>   <mi>H</mi>   <mi>butterworth</mi>  </msub>  <mo>=</mo>  <mrow>   <mfrac>    <msup>     <mi>&#x3c9;</mi>     <mi>n</mi>    </msup>    <mrow>     <mrow>      <msubsup>       <mo>&#x220f;</mo>       <mrow>        <mi>i</mi>        <mo>=</mo>        <mn>1</mn>       </mrow>       <mrow>        <mi>n</mi>        <mo>/</mo>        <mn>2</mn>       </mrow>      </msubsup>      <msup>       <mi>s</mi>       <mn>2</mn>      </msup>     </mrow>     <mo>-</mo>     <mrow>      <mn>2</mn>      <mo>&#x2062;</mo>      <mrow>       <mi>cos</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mfrac>         <mrow>          <mrow>           <mn>2</mn>           <mo>&#x2062;</mo>           <mi>i</mi>          </mrow>          <mo>+</mo>          <mi>n</mi>          <mo>-</mo>          <mn>1</mn>         </mrow>         <mrow>          <mn>2</mn>          <mo>&#x2062;</mo>          <mi>n</mi>         </mrow>        </mfrac>        <mo>&#x2062;</mo>        <mi>&#x3c0;</mi>       </mrow>       <mo>)</mo>      </mrow>      <mo>&#x2062;</mo>      <mi>s</mi>     </mrow>     <mo>+</mo>     <msup>      <mi>&#x3c9;</mi>      <mn>2</mn>     </msup>    </mrow>   </mfrac>   <mo>.</mo>  </mrow> </mrow></math></maths></p><p id="p-0041" num="0000">The s-domain transfer function for the Chebyshev Type II filter is given by:</p><p id="p-0042" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mrow>  <mtext>               </mtext>  <mstyle><mtext>?</mtext></mstyle> </mrow></math></maths><maths id="MATH-US-00003-2" num="00003.2"><math overflow="scroll"> <mrow>  <mstyle><mtext>?</mtext></mstyle>  <mtext mathsize="6pt">indicates text missing or illegible when filed</mtext> </mrow></math></maths></p><p id="p-0043" num="0000">The s-domain transfer function for the notch filter is given by:</p><p id="p-0044" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mrow>  <msub>   <mi>H</mi>   <mi>notch</mi>  </msub>  <mo>=</mo>  <mrow>   <mfrac>    <mrow>     <msup>      <mi>s</mi>      <mn>2</mn>     </msup>     <mo>+</mo>     <msubsup>      <mi>&#x3c9;</mi>      <mi>c</mi>      <mn>2</mn>     </msubsup>    </mrow>    <mrow>     <msup>      <mi>s</mi>      <mn>2</mn>     </msup>     <mo>+</mo>     <mrow>      <mi>s</mi>      <mo>&#x2062;</mo>      <msub>       <mi>&#x3c9;</mi>       <mi>b</mi>      </msub>     </mrow>     <mo>+</mo>     <msubsup>      <mi>&#x3c9;</mi>      <mi>c</mi>      <mn>2</mn>     </msubsup>    </mrow>   </mfrac>   <mo>.</mo>  </mrow> </mrow></math></maths></p><p id="p-0045" num="0000">The s-domain transfer function of the 2<sup>nd </sup>order filter is given by:</p><p id="p-0046" num="0000"><maths id="MATH-US-00005" num="00005"><math overflow="scroll"> <mrow>  <msub>   <mi>H</mi>   <mrow>    <mn>2</mn>    <mo>&#x2062;</mo>    <mi>nd</mi>    <mo>-</mo>    <mi>order</mi>   </mrow>  </msub>  <mo>=</mo>  <mrow>   <mfrac>    <msubsup>     <mi>&#x3c9;</mi>     <mi>n</mi>     <mn>2</mn>    </msubsup>    <mrow>     <msup>      <mi>s</mi>      <mn>2</mn>     </msup>     <mo>+</mo>     <mrow>      <mn>2</mn>      <mo>&#x2062;</mo>      <mi>&#x3c4;</mi>      <mo>&#x2062;</mo>      <msub>       <mi>&#x3c9;</mi>       <mi>n</mi>      </msub>     </mrow>     <mo>+</mo>     <msubsup>      <mi>&#x3c9;</mi>      <mi>n</mi>      <mn>2</mn>     </msubsup>    </mrow>   </mfrac>   <mo>.</mo>  </mrow> </mrow></math></maths></p><p id="p-0047" num="0000">An example s-domain transfer function of a custom filter is given by:</p><p id="p-0048" num="0000"><maths id="MATH-US-00006" num="00006"><math overflow="scroll"> <mrow>  <mtext>                </mtext>  <mrow>   <msub>    <mi>H</mi>    <mi>custom</mi>   </msub>   <mo>=</mo>   <mrow>    <mfrac>     <mrow>      <msubsup>       <mo>&#x2211;</mo>       <mrow>        <mi>i</mi>        <mo>=</mo>        <mn>0</mn>       </mrow>       <mi>n</mi>      </msubsup>      <mstyle><mtext>?</mtext></mstyle>     </mrow>     <mrow>      <msubsup>       <mo>&#x2211;</mo>       <mrow>        <mi>i</mi>        <mo>=</mo>        <mn>0</mn>       </mrow>       <mi>n</mi>      </msubsup>      <mstyle><mtext>?</mtext></mstyle>     </mrow>    </mfrac>    <mo>.</mo>   </mrow>  </mrow> </mrow></math></maths><maths id="MATH-US-00006-2" num="00006.2"><math overflow="scroll"> <mrow>  <mstyle><mtext>?</mtext></mstyle>  <mtext mathsize="6pt">indicates text missing or illegible when filed</mtext> </mrow></math></maths></p><p id="p-0049" num="0000">Other types of filters may be used. Multiple filters of the same type may be defined, such as where one or more variables in the s-domain transfer function are set or defined.</p><p id="p-0050" num="0037">The resulting set, H(s), of time-continuous filters provides a defined library of filters. <figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example. The filter definition <b>300</b> includes the library <b>301</b> of filters <b>302</b>-<b>306</b>. Any number of filters may be defined.</p><p id="p-0051" num="0038">Once the library is created, other filters may be defined and added. As new requirements from a new mode, component, and/or signal are found, new filters may be added to the library <b>301</b>.</p><p id="p-0052" num="0039">Once the library <b>301</b> is created, the library <b>301</b> is used to create a filter for a given component and/or signal. Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the filter requirements for the filter to be created are input in act <b>204</b>. The filter requirements, such as the bandwidth, cut-off frequency, transfer function type, attenuation, order, and/or other characteristic of the filter or the signal (e.g., data stream) to be filtered are input.</p><p id="p-0053" num="0040">The order of the filter may be limited. For example, memory space for a given component implementing the filter may be limited. The order of the filter may be likewise limited to avoid exceeding available memory.</p><p id="p-0054" num="0041">The component and/or signal for which the filter is to be used has a given control rate. The sample rate or rate of processing the filter may be different for different components, modes, and/or signals. Since the filter is to be realized for software filtering or filtering by programmable hardware, the signals to be filtered are digital signals have a given sampling rate. The filter requirements include the control or sample rate.</p><p id="p-0055" num="0042">The designer, engineer, or other user inputs the filter requirements. The input may be through selection of the filter in act <b>206</b> or through providing values for one or more variables.</p><p id="p-0056" num="0043">In act <b>206</b>, the processor selects or generates the filter <b>302</b>-<b>306</b>, such as from the library <b>301</b>, based on filtering requirements. The requirements may result in identification of one filter <b>302</b>-<b>306</b> of the library. For example, one filter type is identified, and that type is specialized based on the requirements of the user. Alternatively, multiple filters <b>302</b>-<b>306</b> are identified.</p><p id="p-0057" num="0044">The identified filters <b>302</b>-<b>306</b> matching the requirements are output, such as in a list. The user may then select a specific one of the filters <b>302</b>-<b>306</b>. Alternatively, the processor identifies one of the filters <b>302</b>-<b>306</b> based on any criterion, such as least memory usage, from amongst the filters <b>302</b>-<b>306</b> that satisfy the requirements. The realization provides flexibility by, for example, memory reduction where the input version requires &#x2dc;2n memory whereas the canonical version require &#x2dc;n memory. In other embodiments, the user selects the filter <b>302</b>-<b>306</b> without processor selection.</p><p id="p-0058" num="0045">The selected filter (e.g., filter <b>306</b>) is in the continuous time domain. In act <b>208</b>, the processor converts the filter based on the control rate. In act <b>210</b>, the conversion discretizes the selected filter to operate at the control rate. Since the filter will be operated in a digital environment on samples or data at a given rate, the filter is discretized to operate at that rate. The selected filter is converted from the continuous time domain to a discrete time domain in order to operate at the control rate. For filter discretization, the continuous time transfer function generated from filter definitions is mapped to a discrete time transfer function. The sample or control rate for the information to be filtered is used to discretize the filter. In one embodiment, a z-domain transfer function is formed as the discrete time transfer function. The z-domain transfer function is formed at the sample rate.</p><p id="p-0059" num="0046">Depending on the specified control rate of the software process and the intended application, a discretized z-domain transfer function, H(z), is generated, as represented by:</p><p id="p-0060" num="0000"><maths id="MATH-US-00007" num="00007"><math overflow="scroll"> <mrow>  <mtext>               </mtext>  <mrow>   <mrow>    <mi>H</mi>    <mo>&#x2061;</mo>    <mo>(</mo>    <mi>z</mi>    <mo>)</mo>   </mrow>   <mo>=</mo>   <mstyle><mtext>?</mtext></mstyle>  </mrow> </mrow></math></maths><maths id="MATH-US-00007-2" num="00007.2"><math overflow="scroll"> <mrow>  <mstyle><mtext>?</mtext></mstyle>  <mtext mathsize="6pt">indicates text missing or illegible when filed</mtext> </mrow></math></maths></p><p id="p-0061" num="0000">where bilinear, matched, and n-hold are types of substitutions of the continuous time variable, s, with discrete time variable, z. Any substitution may be used, such as bilinear, bilinear with prewarp, or matched substitution of a continuous time variable of the filter.</p><p id="p-0062" num="0047">In one example embodiment of discretization of the filter, AT is a hardware and/or software-mode specific parameter representing the nominal control rate or update period of the signal to be processed. For bilinear substitution</p><p id="p-0063" num="0000"><maths id="MATH-US-00008" num="00008"><math overflow="scroll"> <mrow>  <mi>s</mi>  <mo>=</mo>  <mrow>   <mfrac>    <mn>2</mn>    <mrow>     <mi>&#x394;</mi>     <mo>&#x2062;</mo>     <mi>T</mi>    </mrow>   </mfrac>   <mo>&#x2062;</mo>   <mfrac>    <mrow>     <mi>z</mi>     <mo>-</mo>     <mn>1</mn>    </mrow>    <mrow>     <mi>z</mi>     <mo>+</mo>     <mn>1</mn>    </mrow>   </mfrac>  </mrow> </mrow></math></maths></p><p id="p-0064" num="0000">in the continuous time transfer function. For bilinear with frequency prewarp,</p><p id="p-0065" num="0000"><maths id="MATH-US-00009" num="00009"><math overflow="scroll"> <mrow>  <mi>s</mi>  <mo>=</mo>  <mrow>   <mfrac>    <mfrac>     <mrow>      <mn>2</mn>      <mo>&#x2062;</mo>      <mi>&#x3c0;</mi>     </mrow>     <mrow>      <mi>&#x394;</mi>      <mo>&#x2062;</mo>      <msub>       <mi>T</mi>       <mi>p</mi>      </msub>     </mrow>    </mfrac>    <mrow>     <mi>tan</mi>     <mo>&#x2061;</mo>     <mo>(</mo>     <mfrac>      <mrow>       <mi>&#x3c0;&#x394;</mi>       <mo>&#x2062;</mo>       <mi>T</mi>      </mrow>      <mrow>       <mi>&#x394;</mi>       <mo>&#x2062;</mo>       <msub>        <mi>T</mi>        <mi>p</mi>       </msub>      </mrow>     </mfrac>     <mo>)</mo>    </mrow>   </mfrac>   <mo>&#x2062;</mo>   <mfrac>    <mrow>     <mi>z</mi>     <mo>-</mo>     <mn>1</mn>    </mrow>    <mrow>     <mi>z</mi>     <mo>+</mo>     <mn>1</mn>    </mrow>   </mfrac>  </mrow> </mrow></math></maths></p><p id="p-0066" num="0000">in the continuous time transfer function where &#x394;T<sub>p </sub>is the prewarp compensation timestep. For matched substitution, the discrete time transfer function is generated after mapping the poles and zero of the continuous time transfer function through the mapping z=e<sup>s&#x394;T</sup><sup><sub2>s</sub2></sup>. In general, the discretization maps the filter definition to the discrete rate specific form, represented as:</p><p id="p-0067" num="0000"><maths id="MATH-US-00010" num="00010"><math overflow="scroll"> <mrow>  <mtext>                </mtext>  <mrow>   <mrow>    <mi>H</mi>    <mo>&#x2061;</mo>    <mo>(</mo>    <mi>z</mi>    <mo>)</mo>   </mrow>   <mo>=</mo>   <mrow>    <mfrac>     <mrow>      <msubsup>       <mo>&#x2211;</mo>       <mrow>        <mi>i</mi>        <mo>=</mo>        <mn>0</mn>       </mrow>       <mi>m</mi>      </msubsup>      <mstyle><mtext>?</mtext></mstyle>     </mrow>     <mrow>      <mn>1</mn>      <mo>+</mo>      <mrow>       <msubsup>        <mo>&#x2211;</mo>        <mrow>         <mi>i</mi>         <mo>=</mo>         <mn>1</mn>        </mrow>        <mi>n</mi>       </msubsup>       <mstyle><mtext>?</mtext></mstyle>      </mrow>     </mrow>    </mfrac>    <mo>.</mo>   </mrow>  </mrow> </mrow></math></maths><maths id="MATH-US-00010-2" num="00010.2"><math overflow="scroll"> <mrow>  <mstyle><mtext>?</mtext></mstyle>  <mtext mathsize="6pt">indicates text missing or illegible when filed</mtext> </mrow></math></maths></p><p id="p-0068" num="0000">Other substitutions may be used.</p><p id="p-0069" num="0048"><figref idref="DRAWINGS">FIG. <b>3</b></figref> represents the discretization into a z-domain transfer function <b>314</b>. The time step <b>312</b> to be applied for a given filter in a given context (e.g., for the selected filter running on particular hardware and/or for filtering a particular signal) is used to discretize to the digital domain, creating the z-domain transfer function <b>314</b>.</p><p id="p-0070" num="0049">Depending on the context, the controllable or observable realizations or a custom realization are generated in act <b>212</b>. The processor generates a filter kernel for the converted filter. The discretized filter is realized. To instantiate the discretized filter, the filter kernel is created.</p><p id="p-0071" num="0050">In one embodiment, a linear system realization is performed on the discrete time domain. For filter deployment or realization, the discrete time realization is transformed to perform signal filtering as desired. The discrete rate form may be realized using linear system realization techniques, resulting in a filter kernel that may be convolved with the incoming signal.</p><p id="p-0072" num="0051">Example linear system realization techniques include the controllable technique, represented as:</p><p id="p-0073" num="0000"><maths id="MATH-US-00011" num="00011"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mtext>                 </mtext>     <mrow>      <mi>A</mi>      <mo>=</mo>      <mrow>       <mo>[</mo>       <mtable>        <mtr>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mn>1</mn>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mo>&#x2026;</mo>         </mtd>         <mtd>          <mn>0</mn>         </mtd>        </mtr>        <mtr>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mn>1</mn>         </mtd>         <mtd>          <mo>&#x2026;</mo>         </mtd>         <mtd>          <mn>0</mn>         </mtd>        </mtr>        <mtr>         <mtd>          <mo>&#x22ee;</mo>         </mtd>         <mtd>          <mo>&#x22ee;</mo>         </mtd>         <mtd>          <mo>&#x22ee;</mo>         </mtd>         <mtd>          <mo>&#x2026;</mo>         </mtd>         <mtd>          <mo>&#x22ee;</mo>         </mtd>        </mtr>        <mtr>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mo>&#x2026;</mo>         </mtd>         <mtd>          <mn>1</mn>         </mtd>        </mtr>        <mtr>         <mtd>          <mstyle><mtext>?</mtext></mstyle>         </mtd>         <mtd>          <mstyle><mtext>?</mtext></mstyle>         </mtd>         <mtd>          <mstyle><mtext>?</mtext></mstyle>         </mtd>         <mtd>          <mstyle><mtext>?</mtext></mstyle>         </mtd>         <mtd>          <mstyle><mtext>?</mtext></mstyle>         </mtd>        </mtr>       </mtable>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>B</mi>     <mo>=</mo>     <mrow>      <mo>[</mo>      <mtable>       <mtr>        <mtd>         <mn>0</mn>        </mtd>       </mtr>       <mtr>        <mtd>         <mn>0</mn>        </mtd>       </mtr>       <mtr>        <mtd>         <mn>0</mn>        </mtd>       </mtr>       <mtr>        <mtd>         <mo>&#x22ee;</mo>        </mtd>       </mtr>       <mtr>        <mtd>         <mn>1</mn>        </mtd>       </mtr>      </mtable>      <mo>]</mo>     </mrow>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00011-2" num="00011.2"><math overflow="scroll"> <mrow>  <mi>C</mi>  <mo>=</mo>  <mrow>   <mrow>    <mstyle><mtext>?</mtext></mstyle>    <mtext>   </mtext>    <mi>D</mi>   </mrow>   <mo>=</mo>   <mrow>    <mstyle><mtext>?</mtext></mstyle>    <mo>.</mo>   </mrow>  </mrow> </mrow></math></maths><maths id="MATH-US-00011-3" num="00011.3"><math overflow="scroll"> <mrow>  <mstyle><mtext>?</mtext></mstyle>  <mtext mathsize="6pt">indicates text missing or illegible when filed</mtext> </mrow></math></maths></p><p id="p-0074" num="0000">Another example technique results in the observable form, represented as:</p><p id="p-0075" num="0000"><maths id="MATH-US-00012" num="00012"><math overflow="scroll"> <mrow>  <mtable>   <mtr>    <mtd>     <mrow>      <mi>A</mi>      <mo>=</mo>      <mrow>       <mo>[</mo>       <mtable>        <mtr>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mo>&#x2026;</mo>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mstyle><mtext>?</mtext></mstyle>         </mtd>        </mtr>        <mtr>         <mtd>          <mn>1</mn>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mo>&#x2026;</mo>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mstyle><mtext>?</mtext></mstyle>         </mtd>        </mtr>        <mtr>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mn>1</mn>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mo>&#x2026;</mo>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mstyle><mtext>?</mtext></mstyle>         </mtd>        </mtr>        <mtr>         <mtd>          <mo>&#x22ee;</mo>         </mtd>         <mtd>          <mo>&#x22ee;</mo>         </mtd>         <mtd>          <mo>&#x22ee;</mo>         </mtd>         <mtd>          <mo>&#x2026;</mo>         </mtd>         <mtd>          <mo>&#x22ee;</mo>         </mtd>         <mtd>          <mtext> </mtext>         </mtd>        </mtr>        <mtr>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mo>&#x2026;</mo>         </mtd>         <mtd>          <mn>1</mn>         </mtd>         <mtd>          <mstyle><mtext>?</mtext></mstyle>         </mtd>        </mtr>       </mtable>       <mo>]</mo>      </mrow>     </mrow>    </mtd>    <mtd>     <mrow>      <mi>B</mi>      <mo>=</mo>      <mrow>       <mo>[</mo>       <mtable>        <mtr>         <mtd>          <mstyle><mtext>?</mtext></mstyle>         </mtd>        </mtr>        <mtr>         <mtd>          <mstyle><mtext>?</mtext></mstyle>         </mtd>        </mtr>        <mtr>         <mtd>          <mo>&#x22ee;</mo>         </mtd>        </mtr>        <mtr>         <mtd>          <mstyle><mtext>?</mtext></mstyle>         </mtd>        </mtr>       </mtable>       <mo>]</mo>      </mrow>     </mrow>    </mtd>    <mtd>     <mrow>      <mi>C</mi>      <mo>=</mo>      <mrow>       <mo>[</mo>       <mtable>        <mtr>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mn>0</mn>         </mtd>         <mtd>          <mo>&#x2026;</mo>         </mtd>         <mtd>          <mn>1</mn>         </mtd>        </mtr>       </mtable>       <mo>]</mo>      </mrow>     </mrow>    </mtd>    <mtd>     <mrow>      <mi>D</mi>      <mo>=</mo>      <msub>       <mi>&#x3b2;</mi>       <mn>0</mn>      </msub>     </mrow>    </mtd>   </mtr>  </mtable>  <mo>.</mo> </mrow></math></maths><maths id="MATH-US-00012-2" num="00012.2"><math overflow="scroll"> <mrow>  <mstyle><mtext>?</mtext></mstyle>  <mtext mathsize="6pt">indicates text missing or illegible when filed</mtext> </mrow></math></maths></p><p id="p-0076" num="0000">Yet another technique is the time series or input-output form, represented as:</p><p id="p-0077" num="0000"><maths id="MATH-US-00013" num="00013"><math overflow="scroll"> <mrow>  <mrow>   <mi>y</mi>   <mo>[</mo>   <mi>k</mi>   <mo>]</mo>  </mrow>  <mo>=</mo>  <mrow>   <mrow>    <munderover>     <mo>&#x2211;</mo>     <mrow>      <mi>i</mi>      <mo>=</mo>      <mn>0</mn>     </mrow>     <mi>n</mi>    </munderover>    <mrow>     <msub>      <mi>&#x3b2;</mi>      <mi>i</mi>     </msub>     <mo>&#x2062;</mo>     <mrow>      <mi>u</mi>      <mo>[</mo>      <mrow>       <mi>k</mi>       <mo>-</mo>       <mi>i</mi>      </mrow>      <mo>]</mo>     </mrow>    </mrow>   </mrow>   <mo>-</mo>   <mrow>    <munderover>     <mo>&#x2211;</mo>     <mrow>      <mi>i</mi>      <mo>=</mo>      <mn>1</mn>     </mrow>     <mi>n</mi>    </munderover>    <mrow>     <msub>      <mi>&#x3b1;</mi>      <mi>i</mi>     </msub>     <mo>&#x2062;</mo>     <mrow>      <mrow>       <mi>y</mi>       <mo>[</mo>       <mrow>        <mi>k</mi>        <mo>-</mo>        <mi>i</mi>       </mrow>       <mo>]</mo>      </mrow>      <mo>.</mo>     </mrow>    </mrow>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0078" num="0000">Other techniques may be used.</p><p id="p-0079" num="0052">In some real time contexts, the filter may be required to meet an additional requirement of minimal dynamic memory allocation at runtime. This requirement is met based on the order of the filter. By including the order as a limitation in selection of the filter, the realization may use a limited amount of memory.</p><p id="p-0080" num="0053">In act <b>214</b>, the processor or component of the system filters information at the sample rate. The realized filter is stored in a memory accessible by a component of the system, such as the surgical robotic system. Alternatively, a processor of the component creates and applies the realization. The processor or other hardware of a component of the distributed or other system implements the filtering using the realized filter, such as convolving in the controllable, observable, time series with input-output form, or another linear realization.</p><p id="p-0081" num="0054">The realized filter (e.g., filter kernel) is convolved with the signal or data. The linear system realization is used to filter the signals. The filtering occurs at the control rate for that component. <figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example of the realization <b>320</b>. The realized filter is provided for dynamic operation <b>322</b>. The signal is input, and a filtered signal is output. The state <b>324</b> represents the state of the dynamic filtering. The generated z domain transfer function represents a kernel that needs to be applied (e.g., multiplied) through a convolution to the signal (e.g., data) sampled periodically at the control rate for that component. To do this, a realization object <b>320</b> is created with dynamics <b>322</b> derived from the z-domain transfer function <b>314</b>. The signal is an input to the realization at runtime and updates the internal state <b>324</b> of the realization through its input dynamics. Simultaneously, the state <b>324</b> is processed through the output dynamics to generate the output or filtered signal</p><p id="p-0082" num="0055">In one embodiment, the filtering uses shift operation. The linear system realization is implemented with shift operations in place of the matrix or kernel multiplications with the block identity matrix. Certain realizations have spare dynamics with at least part of the dynamics matrix being an identity matrix. These realizations allow shift operations to reduce the computational complexity through shift operations.</p><p id="p-0083" num="0056">The filtered information is used to operate the system. In the surgical robotic system example, the filtered information is used in control, feedback, sensing, or other processing. The filtered information may be used in one or more modes of operation. The filter is operable at the control rate. Where the mode changes the control rate, a different discretization and realization is used.</p><p id="p-0084" num="0057">Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the feedback from act <b>214</b> to act <b>204</b> represents use of the library to generate and use a filter for another component, signal, and/or mode. The library is used again. A second filter of the library is selected <b>206</b> based on input <b>204</b> requirements. This selected filter is discretized <b>210</b> using the control rate for the context of the filter. After realization <b>212</b>, this other filter is used to filter <b>214</b> signals, which signals are used in operation of the system. With a distributed system having different components with different control rates and/or a system with different modes using different control rates, the library of time-continuous filters is used to create various realized filters for digital filtering. Filters are created for different modes and/or components operating at different control rates. Alternatively, the feedback is for iterative designing of a filter.</p><p id="p-0085" num="0058"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a block diagram of one embodiment of robotic system (e.g., surgical robotic system) for filtering at different control rates. Filters generated from discretization of time-continuous filters from a library are applied in different components <b>404</b>, <b>406</b> of the system. The method of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the infrastructure of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, or other methods and infrastructures are used to create the filters for the components <b>404</b>, <b>406</b>.</p><p id="p-0086" num="0059">The system includes a robot <b>400</b>, a user console <b>402</b>, a processor <b>410</b>, and a memory <b>412</b>. Additional, different, or fewer devices may be used. For example, addition components and/or distributed parts are provided. In another example, multiple processors and/or memories are used to host the library and/or discretize.</p><p id="p-0087" num="0060">The robot <b>400</b> is a robotic arm, robotic manipulator, or other movable or controllable machine. In one embodiment, the robot <b>400</b> is one or more robotic arms <b>4</b> for use in a surgical or medical environment, such as described above for <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0088" num="0061">The robot <b>400</b> includes one or more components <b>404</b>, which filter signals. The signals may be sensed or measured information, output control signals, signals being processed, input control signals, communications signals, or any other signals used by the robot <b>400</b> for operation, simulation, or fault handling.</p><p id="p-0089" num="0062">The component <b>404</b> is a processor, such as a digital signal processor. The component <b>404</b> may be a programmable processor, field programmable gate array, or generic processor. Alternatively, the component <b>404</b> is an application specific integrated circuit, digital filter, or firmware operable device. The component <b>404</b> implements a filter realization to filter the signals.</p><p id="p-0090" num="0063">The signals and/or operation of the component <b>404</b> are at the control rate. The filter is operable to filter at the control rate. Different components and/or modes of operation may result in different control rates.</p><p id="p-0091" num="0064">The user console <b>402</b> is configured by hardware and/or software to receive user input for control of the robot <b>400</b>. The user console <b>402</b> is a user input device, such as a joystick, computer with keyboard and mouse, or virtual reality device. In one embodiment, the user console <b>402</b> is a control console <b>2</b> for a robotic surgical system as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The user console <b>402</b> connects wirelessly or through wires to the robot <b>400</b> to control and receive feedback from the robot <b>400</b>.</p><p id="p-0092" num="0065">The user console <b>402</b> includes one or more components <b>406</b>, which filter signals. The signals may be sensed or measured information, output control signals, signals being processed, input control signals, communications signals, or any other signals used by the user console <b>402</b> for operation, simulation, or fault handling.</p><p id="p-0093" num="0066">The component <b>406</b> is a processor, such as a digital signal processor. The component <b>406</b> may be a programmable processor, field programmable gate array, or generic processor. Alternatively, the component <b>406</b> is a digital filter or firmware operable device. The component <b>406</b> implements a filter realization to filter the signals.</p><p id="p-0094" num="0067">The signals and/or operation of the component <b>406</b> are at a control rate. The filter is operable to filter at the control rate. Different components and/or modes of operation may result in different control rates. For example, the component <b>406</b> has a control rate different than the control rate of the component <b>404</b>.</p><p id="p-0095" num="0068">The robot <b>400</b> and/or user console <b>402</b>, including the respective components <b>404</b>, <b>406</b> form a distributed system. Rather than a single component, multiple separate components subject to different control rates (e.g., using different clocks) are provided. The robot <b>400</b> and/or user console <b>402</b> may be operable in different modes. For the surgical robotic system example, the different modes may be a clinical mode for operation on a patient, in a simulation mode for simulating operation on a patient, and in a standalone mode for failure in communications between the surgical robot <b>400</b> and the user console <b>402</b>. The active components of the system change depending on the various system and/or sub-system modes. In these modes, system functionality is often duplicated to meet operational requirements or is redundantly implemented for fault detection or handling. Depending on hardware specifications or computational limitations, the various underlying control algorithms implemented as firmware or software may need to run at various different control rates.</p><p id="p-0096" num="0069">The memory <b>412</b> stores the library of filters defined in a continuous domain, such as the library <b>301</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In one embodiment, the filters are defined in the continuous domain as s-domain transfer functions with defined or definable transfer functions, cut-off frequencies, attenuations, bandwidths, and/or orders. Any or all characteristics of the filters may be defined or definable.</p><p id="p-0097" num="0070">The memory <b>412</b> may be a graphics processing memory, a video random access memory, a random-access memory, system memory, cache memory, hard drive, optical media, magnetic media, flash drive, buffer, database, combinations thereof, or other now known or later developed memory device for storing data. The memory <b>412</b> is part of the robot <b>400</b>, the user console <b>402</b>, a computer with the processor <b>410</b>, a standalone device, or memory in another location or device.</p><p id="p-0098" num="0071">The memory <b>412</b> or other memory is alternatively or additionally a non-transitory computer readable storage medium storing data representing instructions executable by the programmed processor <b>410</b>, component <b>404</b>, or component <b>406</b>. The instructions for implementing the processes, methods and/or techniques discussed herein are provided on non-transitory computer-readable storage media or memories, such as a cache, buffer, RAM, removable media, hard drive or other computer readable storage media. Non-transitory computer readable storage media include various types of volatile and nonvolatile storage media. The functions, acts or tasks illustrated in the figures or described herein are executed in response to one or more sets of instructions stored in or on computer readable storage media. The functions, acts or tasks are independent of the particular type of instructions set, storage media, processor or processing strategy and may be performed by software, hardware, integrated circuits, firmware, micro code and the like, operating alone, or in combination. Likewise, processing strategies may include multiprocessing, multitasking, parallel processing, and the like.</p><p id="p-0099" num="0072">In one embodiment, the instructions are stored on a removable media device for reading by local or remote systems. In other embodiments, the instructions are stored in a remote location for transfer through a computer network or over telephone lines. In yet other embodiments, the instructions are stored within a given computer, CPU, GPU, or system.</p><p id="p-0100" num="0073">The processor <b>410</b> is a general processor, central processing unit, control processor, graphics processor, digital signal processor, three-dimensional rendering processor, application specific integrated circuit, field programmable gate array, digital circuit, combinations thereof, or other now known or later developed device for generating the library of filters, converting filters from continuous time domain to digital time domain, and/or realizing a filter from a discretization. The processor <b>410</b> is a single device or multiple devices operating in serial, parallel, or separately. The image processor <b>410</b> may be a main processor of a computer, such as a laptop or desktop computer, or may be a processor for handling some tasks in a larger system, such as in the robot <b>400</b> or user console <b>402</b>. The processor <b>410</b> is configured by instructions, design, hardware, and/or software to perform the acts discussed herein.</p><p id="p-0101" num="0074">The processor <b>410</b> is configured to discretize filters from the library at the desired control rates. Different filters or the same filter are converted to a z- or discrete-time domain based on different control rates. The processor <b>410</b> is configured to generate discrete time realizations of the discretized filters. For example, filters are converted from the continuous time to z-domain transfer functions. The z-domain transfer functions are realized by the processor <b>410</b> as linear system realizations.</p><p id="p-0102" num="0075">The realized filters are provided to the components <b>404</b>, <b>406</b> for filtering and operation of the robot <b>400</b> and user console <b>402</b>. Alternatively, the signals from the components <b>404</b>, <b>406</b> are provided to the processor <b>410</b> for filtering, and the processor <b>410</b> provides the filtered results to the component <b>404</b>, <b>406</b> for operation of the robot <b>400</b> and user console <b>402</b>.</p><p id="p-0103" num="0076">The above description of illustrated embodiments of the invention, including what is described below in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. The terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification. Rather, the scope of the invention is to be determined entirely by the following claims, which are to be construed in accordance with established doctrines of claim interpretation.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001 MATH-US-00001-2" nb-file="US20230005610A1-20230105-M00001.NB"><img id="EMI-M00001" he="7.37mm" wi="76.20mm" file="US20230005610A1-20230105-M00001.TIF" alt="text missing or illegible when filed" img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230005610A1-20230105-M00002.NB"><img id="EMI-M00002" he="9.14mm" wi="76.20mm" file="US20230005610A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003 MATH-US-00003-2" nb-file="US20230005610A1-20230105-M00003.NB"><img id="EMI-M00003" he="7.37mm" wi="76.20mm" file="US20230005610A1-20230105-M00003.TIF" alt="text missing or illegible when filed" img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004" nb-file="US20230005610A1-20230105-M00004.NB"><img id="EMI-M00004" he="7.03mm" wi="76.20mm" file="US20230005610A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00005" nb-file="US20230005610A1-20230105-M00005.NB"><img id="EMI-M00005" he="7.03mm" wi="76.20mm" file="US20230005610A1-20230105-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00006 MATH-US-00006-2" nb-file="US20230005610A1-20230105-M00006.NB"><img id="EMI-M00006" he="13.38mm" wi="76.20mm" file="US20230005610A1-20230105-M00006.TIF" alt="text missing or illegible when filed" img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00007 MATH-US-00007-2" nb-file="US20230005610A1-20230105-M00007.NB"><img id="EMI-M00007" he="7.37mm" wi="76.20mm" file="US20230005610A1-20230105-M00007.TIF" alt="text missing or illegible when filed" img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00008" nb-file="US20230005610A1-20230105-M00008.NB"><img id="EMI-M00008" he="5.25mm" wi="76.20mm" file="US20230005610A1-20230105-M00008.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00009" nb-file="US20230005610A1-20230105-M00009.NB"><img id="EMI-M00009" he="13.04mm" wi="76.20mm" file="US20230005610A1-20230105-M00009.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00010 MATH-US-00010-2" nb-file="US20230005610A1-20230105-M00010.NB"><img id="EMI-M00010" he="13.38mm" wi="76.20mm" file="US20230005610A1-20230105-M00010.TIF" alt="text missing or illegible when filed" img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00011 MATH-US-00011-2 MATH-US-00011-3" nb-file="US20230005610A1-20230105-M00011.NB"><img id="EMI-M00011" he="24.30mm" wi="76.20mm" file="US20230005610A1-20230105-M00011.TIF" alt="text missing or illegible when filed" img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00012 MATH-US-00012-2" nb-file="US20230005610A1-20230105-M00012.NB"><img id="EMI-M00012" he="20.83mm" wi="76.20mm" file="US20230005610A1-20230105-M00012.TIF" alt="text missing or illegible when filed" img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00013" nb-file="US20230005610A1-20230105-M00013.NB"><img id="EMI-M00013" he="7.79mm" wi="76.20mm" file="US20230005610A1-20230105-M00013.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for filtering information in a surgical robotic system, the method comprising:<claim-text>generating a first filter defined as continuous domain transfer function, the filter generated based on a filtering requirement;</claim-text><claim-text>discretizing the first filter based on a sample rate for the information in the surgical robotic system, the sample rate being based an operating mode of the surgical robotic system;</claim-text><claim-text>filtering the information at the sample rate using the discretized first filter; and</claim-text><claim-text>operating the surgical robotic system with the filtered information.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein generating comprises generating the first filter as s-domain transfer function independent of the sample rate.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein generating comprises generating a library of filters including the first filter, the filters of the library including filters of different types.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein generating the library comprises translating filter definitions based on requirements into the continuous domain transfer functions.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein discretizing comprises forming a z-domain transfer function as a discrete time transfer function at the sample rate.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein discretizing comprises bilinear, bilinear with prewarp, or matched substitution of a continuous time variable of the first filter.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein filtering comprises realizing the first filter as a convolution of the information with a linear system realization of the first filter.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein filtering comprises convolving as a controllable, observable, or time series with input-output form.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein filtering comprises filtering with shift operations.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising discretizing a second filter based on a different sample rate in the surgical robotic system, filtering signals at the different sample rate with a linear system realization of the second filter, and operating the surgical robotic system with the filtered signals from the second filter.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein the surgical robotic system comprises a distributed system wherein the filtering of the information is performed for a first component of the distributed system and the filtering of the signals is performed for a second component of the distributed system.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein discretizing comprises discretizing with the sampling rate being based on the operating mode comprising one of a clinical mode, a simulation mode, or a standalone mode.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A surgical robotic system for filtering at different control rates, the surgical robotic system comprising:<claim-text>a surgical robot having a first component operable at a first control rate;</claim-text><claim-text>a user console configured to receive user input for control of the surgical robot, the user console connected wirelessly or through wires to the surgical robot, the user console having a second component operable at a second control rate different than the first control rate;</claim-text><claim-text>a memory storing a library of filters defined in a continuous domain; and</claim-text><claim-text>a processor configured to discretize a first filter from the library with the first control rate and a second filter from the library with the second control rate, the processor configured to generate discrete time realizations of the first and second filters.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The surgical robotic system of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the first component is configured to apply the first filter and the second component is configured to apply the second filter.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The surgical robotic system of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the surgical robot and the user console are operable in a clinical mode for operation on a patient, in a simulation mode for simulating operation on a patient, and in a standalone mode for failure in communications between the surgical robot and the user console.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The surgical robotic system of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the filters defined in the continuous domain comprise s-domain transfer functions with defined transfer functions, cut-off frequencies, attenuations, bandwidths, and orders, wherein the first and second filters as discretized comprise z-domain transfer functions, and wherein the discrete time realizations of the first and second filters comprise linear system realizations.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A method for scalable filtering infrastructure, the method comprising:<claim-text>inputting filter requirements for filtering at a first control rate;</claim-text><claim-text>selecting a filter from a library of filters based on the requirements, the filters of the library being independent of the first control rate;</claim-text><claim-text>converting the selected filter to the first control rate;</claim-text><claim-text>generating a filter kernel for the converted filter; and</claim-text><claim-text>filtering signals with the filter kernel at the first control rate.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein inputting comprises a designer inputting the filter requirements for a component that operates at the first control rate, the filter requirements including an order limited by memory requirements.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein the filter comprises a first filter and the signals comprise first signals, and wherein filtering comprises filtering the first signals by a first processor of a surgical robotic system with distributed components, the first processor in a first component of the distributed components, and further comprising repeating the inputting, selecting, converting, generating, and filtering for a second filter at a second control rate different than the first control rate, second signals for the second filter being in a second component of the distributed components.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein selecting comprises selecting where the filters of the library are in a continuous time domain, wherein converting comprises discretizing the filter from the continuous time domain to a discrete time domain at the first control rate, and wherein generating comprises performing linear system realization from the discrete time domain.</claim-text></claim></claims></us-patent-application>