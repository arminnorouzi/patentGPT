<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004922A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004922</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17467217</doc-number><date>20210905</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>10</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>10</main-group><subgroup>063116</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>10</main-group><subgroup>06316</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHOD AND SYSTEM FOR SOLVING LARGE SCALE OPTIMIZATION PROBLEMS INCLUDING INTEGRATING MACHINE LEARNING WITH SEARCH PROCESSES</invention-title><us-related-documents><division><relation><parent-doc><document-id><country>US</country><doc-number>17364897</doc-number><date>20210701</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17467217</doc-number></document-id></child-doc></relation></division></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Plataine Ltd.</orgname><address><city>Petah Tikva</city><country>IL</country></address></addressbook><residence><country>IL</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>BENBASSAT</last-name><first-name>Moshe</first-name><address><city>Tsur Moshe</city><country>IL</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>BEN-BASSAT</last-name><first-name>Avner</first-name><address><city>Even Yehuda</city><country>IL</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>DON YECHIYA</last-name><first-name>Naomi</first-name><address><city>Givat Shmuel</city><country>IL</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>COOPER</last-name><first-name>Gil</first-name><address><city>Yehud</city><country>IL</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>LEVI</last-name><first-name>Ayelet</first-name><address><city>Tel Aviv</city><country>IL</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>LIFSHITZ</last-name><first-name>Naaman</first-name><address><city>Kiryat Ono</city><country>IL</country></address></addressbook></inventor><inventor sequence="06" designation="us-only"><addressbook><last-name>RUVINSKY</last-name><first-name>Eduard</first-name><address><city>Petah Tikva</city><country>IL</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Methods, apparatus, and computer program product, the method for determining an executable solution for a problem of scheduling work orders within an organization, comprising: obtaining a sample collection of solutions from a solution space of the problem, wherein the sample collection comprising a plurality of solutions to the problem based on a collection of goals, and wherein the sample collection includes one or more solutions optimizing a subset of the goals, the subset of the goals different from the collection of goals; and in an interactive stage: receiving from a user a collection of actual work orders to be executed; and providing to the user a suggested solution for scheduling the actual work orders, the suggested solution based on one or more solutions from the sample collection, wherein the suggested solution is a practical solution.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="50.38mm" wi="158.75mm" file="US20230004922A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="232.58mm" wi="164.08mm" file="US20230004922A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="213.70mm" wi="143.34mm" file="US20230004922A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="230.04mm" wi="166.20mm" file="US20230004922A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="233.68mm" wi="171.11mm" file="US20230004922A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="175.09mm" wi="133.94mm" orientation="landscape" file="US20230004922A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="228.18mm" wi="168.15mm" file="US20230004922A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">The present disclosure relates to a method and apparatus for creating practical optimal solutions for large scale problems such as scheduling in general, and to creating practical executable solutions, in particular.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Optimization problems are an integral part of life in general, and practically of any field, such as but not limited to business, manufacturing scheduling, planning optimal delivery routes between geographical locations (the &#x201c;traveling salesman&#x201d; problem), placement of circuits on a wafer in an electronic product, transportation, budget allocation, and many others. For example, in determining an optimal weekly schedule for a manufacturing factory, a demand set of work orders to be produced by certain due-dates is given, and it is required to assign resources to the work orders, such as raw material, machines, tools and people, at certain time slots so as complete production in such a way that business rules are satisfied, and an objective function is optimized. An example of a business rule may state that a 60 cm wide machine cannot be assigned to cut 70 cm wide raw material. Another example is that a second operation cannot start before a first operation is completed. A schedule that complies with all business rules is named &#x2018;feasible&#x2019; or &#x2018;valid&#x2019;. Schedule quality may be calculated according to an objective function, also referred to as Z function, which may be defined as a mix of one or multiple metrics or goals such as but not limited to: due date compliance, completion time of last job (make-span), machine utilization, raw material consumption, and more. A valid schedule is said to be optimal if no other valid schedule yields a better Z value.</p><p id="p-0004" num="0003">An optimization problem is a problem of finding one or more solutions which are superior to all other feasible solutions.</p><p id="p-0005" num="0004">The term &#x201c;best&#x201d; as related to a solution is tightly associated with the problem at hand, and may be comprised of an optimal value of a Z function related to a combination of multiple factors, wherein some of which may be in conflict with each other. For example, in a product delivery problem, the term &#x201c;best&#x201d; can relate to minimal time until last product is delivered, minimize use of raw material, minimal production time, maximal number of products delivered within a predetermined period of time, or the like, whereby a goal like &#x201c;minimize delivery time&#x201d; may result in excess use of materials and be in conflict of goals like &#x201c;minimize use of raw material&#x201d;.</p><p id="p-0006" num="0005">Many of the optimization problems are known to be NP-hard problems, meaning that the number of possible solutions grows exponentially with the size of problem input, stated for example in terms of work orders, time slots, machines, raw material, operation steps, personnel and tools. Hence explicit or implicit exploration of all feasible solutions to guarantee an optimal solution is practically prohibitive, and may require computer time which exceeds the allowable planning time even by the fastest computer. Therefore, such optimization problems are often addressed by using heuristic methods and approximation algorithms that are expected to converge to good solutions, but cannot be proven to be optimal.</p><p id="p-0007" num="0006">The disclosure below focuses on scheduling of work in a manufacturing factory. However, it is contemplated that this is merely an example, and the same principles may be applied to any other environment.</p><p id="p-0008" num="0007">Numerous mathematical methods and algorithms have been proposed to automatically build an optimal manufacturing schedule for a day, week, month or the like. The methods and algorithms are based on a variety of approaches such as Tabu search, Simulated Annealing, Genetic, Ant Colony, Grasshopper algorithms, and other heuristic and metaheuristic algorithms. The vast majority of current methods and algorithms for scheduling optimization are primarily concerned with the combinatorial complexity of the scheduling problem and are mainly focused on the speed of convergence to an &#x2018;optimal&#x2019; schedule, i.e., the best solution that can be found in practical processing time, which may not be optimal by the above mathematical definition.</p><p id="p-0009" num="0008">The current methods have a number of drawbacks. A first drawback relates to executability and robustness: in real life, &#x2018;surprises&#x2019; or unexpected events such as machine breakdown, remake of an urgent part, a task duration taking longer than planned, or the like occur very often and disrupt execution of pre-prepared schedules. By the very nature of inter-relationships between manufacturing operations, almost every change in the schedule may be a root cause for other changes that, in turn, imply their own changes, causing together a complex chain effect that needs to be settled. Recovering from such disruptions in the midst of busy daily operations is more challenging than just a re-run of a computer program, because it involves people and physical real-life objects, thereby making the cost and complexity of changes quite high. Even relatively small &#x2018;surprises&#x2019; may lead to radical changes in the original schedules causing excessive cost.</p><p id="p-0010" num="0009">Another drawback of current algorithms is that schedules produced by them are primarily focused on the highest density of the schedule, are likely to include assignments that work against &#x2018;executability&#x2019;, and their logic is not necessarily intelligible to a human scheduler. As a result, revising a schedule to adapt to changes or disruptions is often frustrating for the scheduler, and in many cases reduces significantly the Z value for the business actual execution.</p><p id="p-0011" num="0010">Yet another drawback of the current methods relates to micro level objectives, that is context-dependent objectives that most users cannot articulate, or that even if they could, are practically prohibitive to model. Quite often a user is presented with a schedule showing an optimal schedule with a satisfactory Z value for the overall objective function set by the user. After reviewing the schedule, the user may start changing the schedule, such as: bringing into the schedule a work-order from a very important customer that was left out. The user may insist on these changes even when they reduce the Z value, due to micro-level objectives that override the macro level objective functions and, business wise, are the right thing to do. Foreseeing all such micro-level objectives ahead of time and incorporating them into the current methods is impractical as they are context dependent, their number could be very large and enumerating them in the original problem formulation is therefore prohibitive.</p><heading id="h-0003" level="1">BRIEF SUMMARY</heading><p id="p-0012" num="0011">One exemplary embodiment of the disclosed subject matter is a computer-implemented method for determining an executable solution for a problem of scheduling work orders within an organization, comprising: obtaining a sample collection of solutions from a solution space of the problem, wherein the sample collection comprising a plurality of solutions to the problem based on a collection of goals, and wherein the sample collection includes one or more solutions optimizing a subset of the goals, the subset of the goals different from the collection of goals; and in an interactive stage: receiving from a user a collection of actual work orders to be executed; and providing to the user a suggested solution for scheduling the actual work orders, the suggested solution based on one or more solutions from the sample collection, wherein the suggested solution is a practical solution. Within the method, said interactive stage can further comprise: receiving from the user one or more changes to the suggested solution; and enhancing the suggested solution to accommodate the changes, thereby obtaining the practical solution to the problem. Within the method, the suggested solution is optionally selected from the sample collection of solutions. The method can further comprise receiving from the user a set of target values, and wherein subject to the sample collection not comprising a solution that complies with the target values, issuing a warning to the user indicating that not all target values can be met. The method can further comprise receiving an updated target value from the user and providing the suggested solution to comply with the updated target value. Within the method, generating the sample collection optionally comprises: obtaining goals of the problem; generating a plurality of solutions, wherein generating each solution from the plurality of solutions comprises: selecting a work order set from an exemplary set of work orders; selecting an objective combination; selecting a work order sequencing algorithm for setting an order in which work orders from the work order set are to be assigned; selecting an assignment algorithm for assigning required resources for each work order; and applying the work order sequencing algorithm to repeatedly select a work order and applying the assignment algorithm for assigning resources to the work order. Within the method, the sample collection is optionally generated on an offline stage. Within the method, the sample collection optionally comprises two or more solutions. Within the method, the subset of the goals optionally comprises exactly one goal from the collection of goals. Within the method, the sample collection optionally depicts an operational envelope of the organization. Within the method, said receiving the change from the user and said enhancing the solution are optionally repeated until the practical solution converges. The method can further comprise receiving from the user an indication for a target value for each of two or more goals, wherein the target value for each goal is indicated independently of other goals and in units appropriate for the goal. The method can further comprise: monitoring execution of the solution to obtain execution data; and using a data item from the execution data to enhance the suggested solution. The method can further comprise: receiving from the user one or more updates to the solution; and incorporating the updates into determination of the sample collection of solutions. The method can further comprise: receiving from the user updates to the solution; receiving from the user a set of target values; verifying that the solution as updated is feasible and complies with the set of target values; and subject to the at least one solution as updated not complying with the target value, providing a warning to the user. The method can further comprise receiving from the user a set of target values, and wherein the indication for each target value is received through a user interface. Within the method, the user interface can optionally limit a target value to values or value range learned from the two or more solutions each optimizing the goal. Within the method, the suggested solution is optionally selected from the sample collection of solutions. The method can further comprise receiving from the user a set of target values, and wherein the solution indicates a point on an operational envelope of the organization, and wherein absence of a suggested solution indicates that the set of target values is external to the operational envelope. Within the method, the suggested solution optionally comprises one or more solutions from the sample collection in which a task are padded by allocating additional resources to the task beyond resources required by the task. Within the method, the additional resources are optionally determined in accordance with deviations in the resources required by the at least one task in past schedules.</p><p id="p-0013" num="0012">One exemplary embodiment of the disclosed subject matter is a method for determining an executable solution for a problem, comprising: generating a sample collection of solutions, each solution in the sample collection representing a solution from a solution space of a problem of scheduling work orders; receiving data related to a scheduling solution created based on the sample collection; and combining the data with the sample collection, thereby learning an enhanced sample collection of solutions. Within the method, the data optionally comprises actual execution data of the schedule. Within the method, the data optionally comprises changes introduced by a user to a solution based on the sample collection of solutions. said learning is optionally unsupervised self-learning. The method can further comprise analyzing execution trends for determining required changes in available resources. The method can further comprise learning trends to be used for long term forecasting and capacity planning based on the sample collection and the enhanced sample collection of solutions.</p><p id="p-0014" num="0013">Yet another exemplary embodiment of the disclosed subject matter is a method for determining an executable solution for a large-scale problem, comprising: obtaining a sample collection of solutions from a solution space of the problem, wherein the sample collection comprising a plurality of solutions to the problem based on a collection of goals associated with the problem, and wherein the sample collection includes a solution optimizing a subset of the collection of goals, the subset of the goals different from the collection of goals; and in an interactive stage: receiving from a user a collection of actual data relevant to the problem; and providing to the user a suggested solution for solving the problem, the suggested solution based on a solution from the sample collection, wherein the suggested solution is a practical solution.</p><p id="p-0015" num="0014">Yet another exemplary embodiment of the disclosed subject matter is a computerized apparatus having a processor, the processor configured to perform the steps of: obtaining a sample collection of solutions from a solution space of a problem of scheduling work orders, wherein the sample collection comprising a plurality of solutions to the problem based on a collection of goals, and wherein the sample collection includes at least one solution optimizing a subset of the goals, the subset of the goals different from the collection of goals; and in an interactive stage: receiving from a user a collection of actual work orders to be executed; providing to the user a suggested solution for scheduling the actual work orders, the suggested solution based on at least one solution from the sample collection; receiving from the user at least one change to the suggested solution; enhancing the suggested solution to accommodate the at least one change, thereby obtaining a practical solution; and providing the practical solution to the user.</p><p id="p-0016" num="0015">Yet another exemplary embodiment of the disclosed subject matter is a computer program product comprising a non-transitory computer readable storage medium retaining program instructions configured to cause a processor to perform actions, which program instructions implement: obtaining a sample collection of solutions from a solution space of a problem of scheduling work orders, wherein the sample collection comprising a plurality of solutions to the problem based on a collection of goals, and wherein the sample collection includes at least one solution optimizing a subset of the goals, the subset of the goals different from the collection of goals; and in an interactive stage: receiving from a user a collection of actual work orders to be executed; providing to the user a suggested solution for scheduling the actual work orders, the suggested solution based on at least one solution from the sample collection; receiving from the user at least one change to the suggested solution; enhancing the suggested solution to accommodate the at least one change, thereby obtaining a practical solution; and providing the practical solution to the user.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading><p id="p-0017" num="0016">The present disclosed subject matter will be understood and appreciated more fully from the following detailed description taken in conjunction with the drawings in which corresponding or like numerals or characters indicate corresponding or like components. Unless indicated otherwise, the drawings provide exemplary embodiments or aspects of the disclosure and do not limit the scope of the disclosure. In the drawings:</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic flowchart of a method for solving scheduling or other large-scale problems, in accordance with some exemplary embodiments of the disclosure;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a detailed flowchart of a method for the offline stage of sampling a solution space, in accordance with some exemplary embodiments of the disclosure;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a detailed flowchart of a method for generating schedules that sample the solution space, in accordance with some exemplary embodiments of the disclosure;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIGS. <b>4</b>A, <b>4</b>B and <b>4</b>C</figref> show an exemplary user interface for manipulating a schedule, in accordance with some embodiments of the disclosure; and</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram of a system for solving scheduling or other large scale problems, in accordance with some embodiments of the disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0023" num="0022">In the description below, the term &#x201c;work order&#x201d; or &#x201c;job&#x201d;, is to be widely construed to cover any work that needs to be done to produce an output product, kit, part, or the like. A work order may comprise one or more tasks to be performed at a predetermined order, each with predetermined resources such as machines, human power, materials, tools, or the like.</p><p id="p-0024" num="0023">In the description below, the term &#x201c;assignment&#x201d;, is to be widely construed to cover a task or work order assigned to a specific time slot with specified resources such as the machine or station, personnel, raw material, or the like.</p><p id="p-0025" num="0024">In the description below, the term &#x201c;sequence&#x201d;, is to be widely construed to cover any ordering of work orders. It is understood that a same combination of work orders may be performed with different sequencing, having different implications on the assignments of certain work orders.</p><p id="p-0026" num="0025">In the description below, the term &#x201c;schedule&#x201d; or &#x201c;solution&#x201d; is to be widely construed to cover any combination of assignments for work orders and their tasks, such that the required resources are available for executing or performing all the assigned work orders.</p><p id="p-0027" num="0026">In the description below, the term &#x201c;goal&#x201d; is to be widely construed to cover a metric for assessing an objective of the organization, such as throughput in terms of number of produced items, due date compliance rate, machine utilization, or the like. The term &#x201c;target goal&#x201d; is a numerical value that an organization may aim to achieve, e.g., due date compliance of at least a predetermined value.</p><p id="p-0028" num="0027">Thus &#x201c;objective function&#x201d; or &#x201c;Z function&#x201d; can be expressed as a weighted combination of goals. For a given schedule, the value of the objective function may represent the quality of the schedule with the aim of finding a schedule that maximizes the objective function.</p><p id="p-0029" num="0028">In the description below, the term &#x201c;business rule&#x201d; or &#x201c;constraint&#x201d; is to be widely construed to cover a limitation or requirement from the organization to determine valid assignments that can be performed. Some business rules may be strict and must be complied with, for example a material of width 60 cm cannot be cut on a 40 cm cutting machine. Other business rules may be more elastic. For example, the daily schedule needs to be completed by 5 pm, but under certain tight situations, up to a one extra overtime hour is acceptable, although not desirable.</p><p id="p-0030" num="0029">One technical problem dealt with by the disclosed subject matter is the need to solve large scale problems, such as but not limited to scheduling problems. Such problems are, by their nature highly complex. One example to such problems is a manufacturing problem wherein items of multiple types are to be manufactured by a plurality of machines, with a plurality of people, subject to the timely arrival of raw materials, the availability of supporting tools, to be delivered by given due dates, or the like. In this example, the goals of the scheduling may include but are not limited to any one or more, or a combination of the following: maximal number of items produced, maximal utilization of machines and people time, meeting a maximal number of due dates, meeting one or more particular due dates, minimal resource usage, minimal costs, quality levels or the like. An objective function to be optimized by the solution may be defined as a weighted combination of one or more of the goals which provides a quality score, and enables comparison between two solutions.</p><p id="p-0031" num="0030">Other examples may relate to optimal selection of raw material from stock, optimal cutting of parts from materials, or the like.</p><p id="p-0032" num="0031">The description of each such problem may comprise a list of work orders to be scheduled, available resources and business rules that define a valid solution, e.g., a solution that may not be optimal but complies with certain constraints. As detailed above, each work order may comprise one or more tasks.</p><p id="p-0033" num="0032">In classic mathematical approaches, the problem may be formulated by a set of mathematical formulas. Such formulation may involve continuous variables and may be solved by linear programming methods, and/or discrete variables, which may be solved by integer programming.</p><p id="p-0034" num="0033">For problems with discrete variables that involve combinatorial search, techniques such as simulated annealing, Taboo search, genetic algorithms, grasshopper algorithms or others may be used for generating solutions which are optimal or just satisfactory for the user.</p><p id="p-0035" num="0034">However, even after such analysis and refinement, a user, such as a person in charge of scheduling the manufacturing, may not always be able to fully phrase ahead of time in a rigorous manner the objective function, and even an experienced user may always have additional considerations, also referred to as micro level goals, which are hard to express mathematically, may depend on the changing circumstances, or the like.</p><p id="p-0036" num="0035">Moreover, once the requirements, constraints and objectives are given, and a solution is found that complies with the constraints and is mathematically optimal or close to optimal, the user may still be unhappy with the solution for a specific reason, or simply because of a gut feeling that may be based on experience. Additionally, or alternatively, a user may prefer a solution associated with a lower value of the Z function over a solution that received a higher value. For example, in a proposed solution an item required for a major customer may be scheduled to be manufactured towards the end of the work week, and may thus be vulnerable to delays caused by failures in the equipment or in the manufacturing of other items throughout the week. Thus, while the solution is &#x201c;optimal&#x201d; it may still be impractical.</p><p id="p-0037" num="0036">Currently available computerized systems and methods may attempt to have the user add &#x2018;micro-level goals&#x2019; into the original mathematical objective statement of the problem, such that the optimal schedule will also reflect the micro-level goals, and provide a feasible solution, which may also be mathematically optimal or close to optimal. However, this is impractical or not optimal in business real-life. Although the human user provided or agreed with the objective function and business rules, in certain contexts the user may realize he wishes to modify or replace the provided solution with an alternative one, which he believes to be preferred for good business reasons under the specific circumstances. As the micro-level goals are not always easy to foresee ahead of time, or to express mathematically, a user cannot always phrase, or is even unaware of the micro-level goals, but can recognize that a schedule is sub optimal or inappropriate when he sees it, due to incompliance of the schedule with such goals.</p><p id="p-0038" num="0037">Another technical problem dealt with by the disclosure relates to the robustness of a generated solution to a problem. A schedule should not be only measured by the Z value of its goal-driven metrics, also referred to as Key Performance Indices (KPIs) such as makespan, throughput, or utilization, but also by factors that measure risk and robustness to disruptions during execution, and to facilitate addressing, directly or indirectly, micro objectives. An &#x2018;optimal&#x2019; schedule may be so dense as a result of aiming at the best Z scores that it may come at the cost of robustness. Namely, the planned schedule may be very sensitive to disruptive events during execution, events which, in real life occur quite often. For example, longer than planned task duration, raw material late arrival at production stations, machine breakdown, or a new emergency work order that must be inserted into a day's schedule pushing out other pre-planned jobs. Such disruptive events necessitate changes in the planned (originally &#x2018;optimal&#x2019;) schedule. In a high-density schedule, the change required to respond to a single event may cause a complex chain of additional changes. Multiple such disruption events may worsen the macro Z scores of the actual executed schedule to a level far below those of the planned &#x2018;optimal&#x2019; schedule. Therefore, a planned schedule which is mathematically optimal may not necessarily be practically optimal at execution. Moreover, as schedule execution involves people, raw material, and auxiliary equipment in the real world, changes in the planned schedules also have many other negative implications causing excessive cost.</p><p id="p-0039" num="0038">Moreover, typical available systems operate as a black box that search the solution space, whereby assignments are generated and checked for validity and quality, and also for conflicts with other assignments which compete for same resources. However, the user may have no understanding of how and why a certain schedule has been formed.</p><p id="p-0040" num="0039">Yet another technical problem dealt with by the disclosed subject matter is that currently available systems demonstrate minimal if any learning and improvement from planning one schedule to the next, for example from one week to the other. For a given factory, for example, while the demand set may change from week to week, the overall structure in terms of the production lines, the products and their multi-step processes, and the business rules and objectives are fairly stable. However, the system will carry on the same process for generating the schedules instead of learning from previous schedules. Currently available systems may include minimal learning of parameters such as statistics of time duration of a task, if at all, thus inevitably leading to lower &#x2018;robustness&#x2019; of their output, as the schedules time and again face reality without learning to adapt to it</p><p id="p-0041" num="0040">One technical solution of the disclosure comprises creating a schedule that is practically optimal in accordance with business considerations, although the obtained schedule may be somewhat inferior to a mathematically optimal solution according to the Z function. However this practically optimal solution has higher degree of robustness and executability and complies with additional considerations which may not be explicitly expressed. Such solution may be more understandable, thereby facilitating user-driven changes. Such a schedule may be named &#x201c;practicum-optimum&#x201d;, or &#x201c;practimum&#x201d;, as opposed to mathematical optimum. Determining the practical optimum may be based on a discovery process rather than a single optimal point search as done by currently available systems.</p><p id="p-0042" num="0041">The solution combines sampling the solution space, computerized search and additional techniques, artificial intelligence (AI) and in particular machine learning techniques, with experience and expertise of human users, thereby obtaining practically optimal solutions.</p><p id="p-0043" num="0042">The solution comprises executing an offline pre-deployment process of sampling the solution space, thereby obtaining a plurality of solutions that comply with different problem descriptions and aspects. For example, a solution may be generated for one or more combinations created by selecting one item from each of the following categories:</p><p id="p-0044" num="0043">A set of factory settings, including for example specific products, stations, processes, raw material, tools, worker roles, and business rules;</p><p id="p-0045" num="0044">Sets of demand work orders;</p><p id="p-0046" num="0045">Sets of objective weights (objective functions);</p><p id="p-0047" num="0046">Rules/constraints</p><p id="p-0048" num="0047">A set of goals may be defined, such as maximal compliance with due dates vs maximal machine utilization time, or the like.</p><p id="p-0049" num="0048">In the description below, the term &#x201c;sequencing algorithm&#x201d; relates to a rule or algorithm for determining the order in which a particular scheduling algorithm assigns the various work orders at hand, which may have great impact on the resulting schedule. For example, if the resources are insufficient for executing all tasks, the first tasks to be considered will get assigned, while the last ones may not, while a different sequencing of the work-orders will result in a different set of tasks getting assigned and executed.</p><p id="p-0050" num="0049">In some embodiments, a solution may be generated for each such combination of work orders. In further embodiments, re-sequencing of the work orders may be applied to a given set of work orders a plurality of times, thereby creating a plurality of schedule options for the same combination of work orders, resources, and assignment algorithm. In such activation or re-activation, work orders that have been highly prioritized may get lower priority and vice versa, thereby generating a different order of the work orders to be assigned and thus a different scheduling solution. One or more goal values may be determined for each such schedule, each value related to one of the goals or a combination thereof.</p><p id="p-0051" num="0050">The operational envelope of an organization may be based on schedules that represent focusing on a rigid limited single goal, or a few goals, for example extreme focus on due date compliance which may come at high cost of low machine utilization and low throughput. The envelope structure provides the tradeoff relationships between the various goals. That is, with a given set of manufacturing resources, what is the maximum score for a certain goal that can be achieved while complying with all business rules, possibly at the cost of all other goals. For instance, if the value of a certain goal on the envelope boundaries is 85%, there is no point setting a performance target for the goal at 88%, because there are no valid schedules that would yield this score, meaning that this target is external to the operational envelope. A 88% goal can be achieved only if other factors are changed, such as the work order combination, the available resources, allowing overtime, or the like. It will be appreciated that a set of targets may be external to the operational envelope if not all target goals can be achieved by the same schedule.</p><p id="p-0052" num="0051">The schedules generated during the pre-deployment stage may include schedules aiming at optimizing a subset of the goals, for example one goal, which may be useful in discovering and depicting the operational envelope of the organization.</p><p id="p-0053" num="0052">The schedules may be stored, along with the parameters upon which they were generated, the values they obtain for each goal, and additional metrics that may be derived, for example via learning algorithms, to obtain additional insights into the solution space. The additional insights or metrics may also serve as search indices that represent similar problems to those seen and solved beforehand in the learning process, in order to arrive faster at an optimal solution of a new problem, based on various parameters, such as the goal values, the parameters, or the various metrics.</p><p id="p-0054" num="0053">The system may then be adapted to the specific factory situations by holding a training and orientation session. During such a session the system may drive a dialogue with its user for obtaining the user's preferences, including for example the relative weights of the various macro level goals, executability considerations, and micro-level objectives.</p><p id="p-0055" num="0054">Assessing a schedule quality by a user usually includes judgmental subjective elements for which the user cannot provide clear-cut rigorous statements, but only statements that are context dependent and &#x2018;soft&#x2019; by nature. To discover such elements, the system and method may leverage the created collection of schedules to present the user with concrete examples. Via such a dialogue, the user's subjective judgement is revealed via concrete selection of his preferences, though for certain examples. The system and method may then interpret the user's responses into its schedule generation process. For example, the training and orientation session may comprise presenting to the user pairs of schedules and asking the user to point at the preferred schedule from each pair, thereby assessing the more important goals, characteristics of the preferred schedules, or the like. The system may further ask a user to point at an assignment within a schedule that is problematic and select (or not select) a problem from a predetermined list of reasons. By taking into account the subjective elements of schedule creation, the advantages of humans and artificial intelligence may be combined, thereby providing for improved practimum-optimum solutions.</p><p id="p-0056" num="0055">Having the solutions' data set and optionally the user's preferences, an online or interactive macro planning stage can take place, in which a user provides a pending set of actual work orders, and is presented with one or more optional schedules from the sample of the solution space, or combined upon multiple schedules from the sample, which are estimated as being optimal or most appropriate. The user may also be presented with data such as key metrics, e.g., goal values, and other insights into the schedule, presented for example as a Gantt chart. If the work orders cannot all be executed while complying with the business rules, a corresponding notice may be provided to the user.</p><p id="p-0057" num="0056">Whether a schedule is found or not, the user may iteratively change the work orders, the assignments, the goals, and/or the business rules, in order to obtain a schedule that is better suited to the current needs of the organization.</p><p id="p-0058" num="0057">Once a schedule is provided to a user, an online micro-objective scheduling stage may take place via an online dialogue, where the user may introduce, or request changes to the schedule, and the system may try to accommodate these changes with minimal impact on executability metrics and/or macro-goal values. The user input may also be stored and may serve to make future schedules to be generated by the system address in advance the user driven considerations of micro-objectives and robustness. Such usage of the user input may thus teach the system, such that over time less user involvement will be needed. If the user changes cause the schedule to deviate from one or more of the goals set during the macro planning stage, a corresponding warning may be provided to the user. In some embodiments, the user may approve the deviation and continue with the schedule although it deviates from the goals or constraints the user himself has set. However, in some embodiments, strict constraints may not be overruled. For example, physical constraints such as a 60 cm wide fabric roll may not be cut by a 40 cm wide cutting machine. The dialogue may proceed until the schedule converges to a final practimum-optimum schedule. The schedule may then be distributed for execution to all the relevant entities in the organization.</p><p id="p-0059" num="0058">The practically optimal solution is thus the product of a discovery process of the practimum-optimum, rather than a searching for a single &#x2018;optimal&#x2019; point by visiting only narrow parts of the solution space as is currently done by available systems. Additionally, the operational envelope may be discovered along with other insights into the solution space, which may also help during schedule execution and longer term planning.</p><p id="p-0060" num="0059">The schedule may also be monitored during execution, comprising for example collecting information about the execution of each task: when it started and ended, on which station, with what resources, whether there have been any failures, or the like, and certain parameters may be measured and stored for ongoing learning. For example, it may be measured and stored how long the actual execution of a certain task took, how often a raw material arrives late at a production station, or the like.</p><p id="p-0061" num="0060">Another technical solution of the disclosure comprises the system on-going self-learning, also referred to as automatic learning or unsupervised learning, from past schedules, feedback related to on-going usage of the system, including the user's responses and actions, and the execution results. The final schedule may be added to a set of &#x2018;training schedules&#x2019;, and as time progresses and the training samples include a growing number of real-life schedules, the system and method may learn better the user preferences, the actual execution performance, and the factory characteristics. As a result, the schedule generation process may be streamlined with faster and/or better convergence to the practimum-optimum schedule. For example, if a user constantly moves work orders related to a certain customer or having another common characteristic to earlier time slots, future schedules may be adapted to do that, too. In another example, if certain work order has significant variance in its execution time, wider safety margins may be allocated for the task, such that execution of another task using the same machine as the specific task may not be set to begin immediately following execution of the specific task. The system can thus self-learn the schedule space, including key features, patterns, classes, and other characteristics of high-performance schedules.</p><p id="p-0062" num="0061">The self-learning may include multi-dimensional capacity analysis of the resources, for a variety of volume and mix of work-order demand. Under stressed situations the space of valid schedules could be quite sparse, and finding even a single valid schedule may be a challenge, let alone an optimal one, therefore recognizing stressed situations before running an optimization algorithm is beneficial. Thus, self-learning is not focused on just the assignment of work orders, but rather uncovers the sources of difficulties in determining and executing optimal schedules, such as capacity shortage, bottlenecks, tight business rules, and competing goals. The system may then use these factors in driving the schedule creation and execution processes.</p><p id="p-0063" num="0062">Yet another technical solution of the disclosure relates to the self-learning assisting not only in streamlining future schedule creation, but also in using the knowledge for strategic longer-term forecasting and capacity planning, such as recognizing ahead resource shortage. For example, if the demand volume for Product A is systematically trending up and this may imply the need for additional machine M capacity in the coming 12 months, it may alert that capacity should be increased, by buying more machines, hiring more people, extending work hours, or the like.</p><p id="p-0064" num="0063">One technical effect of the disclosure relates to a method and system for achieving a &#x201c;practical optimum&#x201d; solution to complex problems such as large scale scheduling problems. If a full and precise definition of the problem at hand has been available, a solution which is both mathematically and practically optimal could be achieved by current method. However since the problem is not fully defined due to the existence of micro objectives which the user may not even be aware of, the current methods are not applicable for the full real life problem. The solution generated in accordance with the current disclosure may not be mathematically optimal, but is practically optimal and enables compliance with additional considerations and constraints learned from experience and may be crucial in successful execution of the planned schedule, while the user may not have expressed them, either due to their uniqueness, or subjective nature rather than disciplined planning. Thus, the solution may successfully overcome execution instability problems, and the high complexities in recovering from disruptions. A practically optimal solution may be obtained by integrating into the optimization process macro goal metrics such as make-span, due date compliance, throughput, and utilization, as well as factors that provide robustness and leeway breathing space to minimize the impact of disruptions during its execution, and the ability to integrate micro-level objectives. A balanced view on the planned schedule may provide for practical execution with high performance metrics at the end of the schedule period.</p><p id="p-0065" num="0064">The solution thus combines computerized search and additional computerized techniques with artificial intelligence (AI) and machine learning techniques, and with the experience and know-how of human users, thereby enabling the design of a practically optimal solution as described above. The combination provides for sampling the solution space in a manner impossible for a human user, and also utilizes the human knowledge, capabilities and experience.</p><p id="p-0066" num="0065">The solution is practically optimal in that in addition to obtaining a satisfactory Z-score, it is also robust to execution events, and also addresses micro-objectives and executability considerations. The solution also provides for learning of characteristics of the problem environment and its solutions. The disclosed method and apparatus integrate classic search algorithms with learning discovery. The method and apparatus generate a large sample dataset of schedules and apply unsupervised self-learning algorithms for discovering key characteristics of the schedules space, such as the organization envelope for any specific demand set of work-orders that need to be schedule. In some embodiments, the learning results. Once such knowledge is available, it may be used in the short and long term. The knowledge may be used during a dialogue with the user during scheduling, in addressing micro-objectives and executability considerations, such that a solution may converge quickly to a practimum-optimum solution.</p><p id="p-0067" num="0066">Another technical effect of the disclosure relates to a method and system that make efficient use of computing, computer time and human time resources, by performing high resource consuming steps in an offline stage, for example on nights, weekends, or other time slots when users are off, and the computing platforms are not highly loaded, or may even be idle. The results of this processing may then be used during interaction time of the user with the system, which is not computationally heavy, for example during normal business hours, when the computing resources are in higher demand.</p><p id="p-0068" num="0067">Referring now to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, showing a schematic flowchart of a method for solving scheduling or other large scale problems, in accordance with some exemplary embodiments of the disclosure.</p><p id="p-0069" num="0068">On step <b>100</b>, a sample of the solution space may be obtained. In some embodiments, the sample may be obtained from an external source, such as a storage device, over a network, or the like. In further embodiments, the sample may be generated by automatic algorithms. Either way, the sample may be determined offline when user presence is not required, for example over nights or weekends, or other times when computing resources are available.</p><p id="p-0070" num="0069">The offline stage for sampling the solution space, may be performed pre-deployment of the solution, and also at later times, for example periodically increase the sample set with additional recent samples. In step <b>100</b> the problem parameters may be defined, and a plurality of solutions may be generated which sample its solution space.</p><p id="p-0071" num="0070">On step <b>101</b>, organizational insights may be obtained from the solution space. For example, step <b>101</b> may include discovering the operational envelope of the organization, e.g., by examining solutions which focus on optimizing a subset of the goals, such as individual goals. For example, if such a discovery implies that the due date delivery compliance rate of some work order combinations cannot exceed 80%, even if all other goals are compromised or non-existent, then clearly this rate cannot be exceeded in the presence of current business rules.</p><p id="p-0072" num="0071">Step <b>101</b> may thus comprise obtaining parameters and goals of the problem, based on a sample collection of solutions from a solution space of the problem.</p><p id="p-0073" num="0072">Step <b>100</b> is further detailed below in association with <figref idref="DRAWINGS">FIG. <b>2</b></figref> and <figref idref="DRAWINGS">FIG. <b>3</b></figref> below.</p><p id="p-0074" num="0073">It will be appreciated that step <b>100</b> may be performed as pre-deployment stage, as well as periodically after usage has started, in order to improve the generated schedules. Step <b>100</b> may be based also on the execution of past schedules. For example, offline stage <b>100</b> may be performed every week, every month, every year, or the like.</p><p id="p-0075" num="0074">On orientation and adaptation step <b>102</b> may be performed, in which the user's general preferences may be obtained or deduced.</p><p id="p-0076" num="0075">For example, the system may present to the user two valid schedules and ask which one is preferable, as opposed to current systems when the user is required to formulate a macro objective function that induces such preferences via the Z value. In another example, the system may present to the user valid schedules and ask the user to point at specific assignments which he thinks are suboptimal or problematic, thereby discovering micro objectives.</p><p id="p-0077" num="0076">On step <b>104</b>, a macro stage may be performed, in which the work orders to be scheduled are received from a user. The user may then define the work orders and target values for goals of the solution. Step <b>104</b> may be performed online, thereby leveraging available solutions that have been generated during the offline stage.</p><p id="p-0078" num="0077">On step <b>104</b> the user can define target values for goals of a schedule, using a user interface. The user interface may be graphic and may comprise controls such as sliders, text boxes, or the like. The user may also define the target values as part of orientation and adaptation step <b>102</b>.</p><p id="p-0079" num="0078">Using the user interface, a target value may be defined for one or more goals, each with its own units. For example, target values may be defined for units throughput, due date violation, and machine time utilization.</p><p id="p-0080" num="0079">A user may define a minimal (or maximal, depending on whether it is a positive or a negative goal) acceptable target value for one or more goals. In some embodiments, a target value exceeding the envelope maximal or minimal value as achieved in discovering the operational envelope of the organization cannot be set. The target values may be set, and the dialogue between the system and the user described below is aimed at obtaining a practical mix of values that can be achieved.</p><p id="p-0081" num="0080">In some embodiments, one or more values may be provided for the same goal, for indicating minimal and maximal values. However, in most cases a user is unlikely to reject a solution in which one or more target values are achieved with a rate of success exceeding a threshold.</p><p id="p-0082" num="0081">It is noted that a user may or may not state the relative importance or weights of the goals. Furthermore, the goals may or may not be scaled, and each goal may be stated in its own units, for example minimal throughput in terms of number of units, minimal percent for due date violation, and percent also for the machine time utilization. This methodology enables the user to leverage best his personal real-world experience in the original units without having to go through technical transformations. Additionally, the user does not have to specify numerically the full set of relative weights. Rather, by setting one or more target values, the user may get the implications on the other target values. The system can then automatically convert any set of pointer locations into numerical relative weights. However, in further embodiments, relationship between the goals may be stated, using any specificity. For example, given four goals G1, G2, G3, and G4, a user may indicate simple ordinal relationship like: &#x201c;G3 is top priority, then G1, followed by G2 and last priority is G4&#x201d;, or assign specific weights, such as &#x201c;40% on G3, 25% on G1, 20% on G3 and 15% on G4&#x201d;. It will be appreciated that the schemes above are non-limiting, and any other scheme may be used for stating the goals.</p><p id="p-0083" num="0082">It will be appreciated that the mentioned goals are exemplary only, and multiple additional or different goals may be used, such as accumulated cost of raw material for all tasks, percentage or amount of customer deliveries within a predetermined period of time, or the like. It will be appreciated that the goals, their units, and their target values or range may be defined on a preliminary preparation stage. Additionally, or alternatively, some defaults may be provided.</p><p id="p-0084" num="0083">During the on-line stage, one or more valid or mathematically optimal-solutions from the samples obtained on the offline stage may be retrieved and provided to the user with their assignments and goal values. In some embodiments a combination of two or more solutions may be used as the basis for creating the requested solution.</p><p id="p-0085" num="0084">In some situations, no solution can comply with all the constraints and comply with the target values. This can become apparent, for example, due to the target values being outside the operational envelope of the organization as discovered on the offline stage. For example, if under no circumstances, even absence of any other target value, a throughput of over 1000 units can be obtained, then if one of the target value defined by the user is the production of at least 1100 units, then regardless of other goals, this target value cannot be achieved.</p><p id="p-0086" num="0085">In such case, a solution may be provided to the user, which is based on a combination of existing solutions, and/or relaxation of some of the rules.</p><p id="p-0087" num="0086">If still no solution exists, the set of target values may be external to the operational envelope and the user may receive a corresponding message.</p><p id="p-0088" num="0087">If no solution is found, a warning may be issued to the user, indicating that one of the goals or a combination of multiple goals are impossible to achieve.</p><p id="p-0089" num="0088">If the user sets a target value for which no solution exists, with the other target values as is, but a solution may exist for other target values of the other goals, then the values of the other goals may be set automatically to reflect such combination, and to provide a graphic or textual demonstration to the user of the tradeoffs between the goals.</p><p id="p-0090" num="0089">Whether a solution is found or not, the user may manipulate or update the target values, and the provided schedules may change accordingly. This is enabled because all solutions are stored and indexed for fast retrieval. The user may continue manipulating the goals in cases such as when a solution is found which complies with all the goals, but does not comply with the user's preferences as may be based on experience, or for example exceptions to the macro goals, for example &#x201c;it is necessary to ensure that the work orders of customer X are performed early in the week, to avoid possible delays&#x201d;, or the like.</p><p id="p-0091" num="0090">Step <b>104</b> may thus comprise receiving from a user a collection of work-orders to be executed and optionally an indication for target values for the goals, wherein each target value may be indicated independently of others and in appropriate units. Subject to the representative collection comprising a solution that complies with the target values for the goals, a solution may be selected and provided to the user as a practical solution.</p><p id="p-0092" num="0091">Once a solution is retrieved from among the sampled solutions and displayed, on step <b>108</b>, an interactive micro-planning stage may be performed, in which a user may receive a suggested solution, iteratively manipulate the solution, for example add, change, amend or delete work orders, change execution order, or the like, until the user converges to a practical executable solution that the user accepts. The system may then enhance the solution to accommodate the changes introduced by the user, for example changing the time or machine for one or more tasks. If the user change cannot be accommodated since the solution contradicts any of the rules, an appropriate notice may be provided to the user, Step <b>108</b> may be performed online, in particular as it involves interactive work by the user where the system serves as an assistant facilitating user's changes. This step may be referred to as &#x201c;practicalizing&#x201d; the solution, i.e., introducing exceptions to the schedule to accommodate micro objectives, such as important work orders that were left out, or improving its executability by making it more robust to minimize the impact of disruptions during the schedule execution. For example, on this step the user may switch between two tasks on the same machine if this generates some buffer for a task with high variance in its duration. The user input may also serve the learning phase as described in association with step <b>120</b> below.</p><p id="p-0093" num="0092">Referring now to <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, and <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>. <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> shows an exemplary user interface <b>500</b>, displaying a schedule. User interface <b>400</b> comprises a top pane <b>404</b> showing the tasks to be executed, and a bottom pane displaying a Gantt <b>408</b> of the tasks to be executed by each machine at each time slot. The user may select any of the tasks on Gantt <b>408</b>, for example task <b>412</b>, and in response to message <b>416</b> may reschedule the task by dragging and dropping it. For example, the user may move the task to another machine and/or to another time slot.</p><p id="p-0094" num="0093">The system may then validate whether the manual assignment is feasible. If the re-assignment is infeasible, the system may issue a corresponding message. Furthermore, if such move degrades the Z value, a corresponding message may be displayed. In any case, the user may insist on the change and lock it, and the system will keep it, for the current and future assignments.</p><p id="p-0095" num="0094">Referring now to <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>, in which the user has attempted to reschedule task <b>420</b>, and the system displayed message <b>424</b> informing the user that that such re-assignment cannot be performed since it contradicts a rule, such as dependency on a later scheduled task.</p><p id="p-0096" num="0095">If the re-assignment is feasible, then the system may further determine the impact of the re-assignment on any one or more of the goals as defined. In any case, the user may continue re-assigning tasks, or go back to updating the goals on step <b>104</b>.</p><p id="p-0097" num="0096">Step <b>108</b> may thus comprise receiving from the user instructions on what or how to manipulate the displayed solution, and getting from the system feedback on the impact of such manipulations or non-imposing suggestions how to implement the manipulations in better ways.</p><p id="p-0098" num="0097">Once the user has finalized the solution, then on step <b>112</b> the solution may be stored, published or distributed to all relevant people, and executed.</p><p id="p-0099" num="0098">During the schedule generation, and during and post-execution, the user decisions and execution data of the schedule may be monitored on step <b>116</b>. For example, execution time of each work order may be reported, including on which machine an order was executed, execution start time and duration, the amount of raw material used, or the like. Further monitoring data may be obtained from other devices or sensors, including reports by Internet of Things (IoT) devices. For example, a forklift may report whether a cutting role was transported to the required machine and at what time. Further collected data may include changes introduced by a user to suggested schedules during the macro scheduling stage.</p><p id="p-0100" num="0099">On step <b>120</b>, execution parameters, trends, changes introduced by a user to a solution based on the sample collection of solutions, or other data may be learned from the data collected through monitoring. The learning may be unsupervised self-learning of the collected data.</p><p id="p-0101" num="0100">The learned parameters and/or monitoring data may be provided to step <b>100</b>, such that it may be used the next time the solution space is learned. Thus, step <b>100</b> can utilize the data accumulated up to date and improve the future generated schedules. For example, a task that has significant variance in its execution time, may be padded, i.e., allowed broader time margins, to ensure execution in case it takes longer than standard, or may be scheduled at time slots such that a delay affects minimally other orders, or the like. It will be appreciated that padding may also relate to other resources such as raw material, labor, or the like. In another example, if execution of a task started late due to the raw material not arriving on time, further changes may be introduced, such as arranging for the material to arrive earlier, or postponing the task.</p><p id="p-0102" num="0101">It will be appreciated that self-learning step <b>120</b> may be implemented as part of step <b>100</b> of sampling the solution space, or as a separate step.</p><p id="p-0103" num="0102">It will be appreciated that although <figref idref="DRAWINGS">FIG. <b>1</b></figref> and the associated description relate to a scheduling problem, the disclosure is not limited to such problem, and can be used for solving any large-scale problem, by obtaining a sample collection of solutions from a solution space of the problem, the solutions based on a collection of goals associated with the problem, wherein some of the solutions may optimize a subset of the goals, and in an interactive stage receive from a user a collection of actual data relevant to the problem; and provide to the user a suggested solution based on one or more solutions from the sample collection, wherein the suggested solution is a practical solution.</p><p id="p-0104" num="0103">Referring now also to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, showing a detailed flowchart of a method for the pre-deployment, and on-going, preparation of a sample of the solution space, in accordance with some exemplary embodiments of the disclosure.</p><p id="p-0105" num="0104">On step <b>200</b>, the choices are set for defining a problem such as but not limited to a scheduling problem. The choices are defined per one factory or organization, however, one system may serve multiple organizations, in which case it may be required to define the choices per organization.</p><p id="p-0106" num="0105">For example, some or all of the following parameter choices may be provided:</p><p id="p-0107" num="0106">A set of factory settings, including for example the product types to be manufactured and their production steps, machines, raw material, tools, processes including which machines are used, the required processing time and additional times such as cooling time, required people, business rules, or the like. As disclosed above, the choices may include one or more sets of factory settings.</p><p id="p-0108" num="0107">Work order sets, also referred to as demand sets, for example a list of work orders to be executed for the time period for which the schedule is being planned, such as a day, week, month, or multiple months. For example, each Friday afternoon a new set of work orders to be scheduled are submitted for the coming week i.e., <b>52</b> sets of work orders for the full year. In other embodiments, any number of sets may be provided, depending on changing demand, seasonal changes, or the like.</p><p id="p-0109" num="0108">A set of objectives. In some embodiments, the objectives may be orthogonal to each other, and each may be expressed in a scale and units of its own. For example, the number of units to be produced, the percentage of timely deliveries, minimizing a makespan (the period of time until all tasks are executed), or the like. For the sake of example, three such objective sets may be considered. However, in some embodiments, each objective may be associated with a weight, wherein the weights may be relative, for example add up to 10, 100 or other numbers.</p><p id="p-0110" num="0109">A scheduling algorithm, characterized by the core logics which primarily consists of (a) the sequence in which the work orders are submitted for assignment decisions, and (b) the process by which specific resources are assigned for each work order, such as time slots and machines. In some embodiments, a plurality of algorithms may be used, each associated with a core logics combination.</p><p id="p-0111" num="0110">A sequencing algorithm, i.e., the algorithm for ordering the work orders to be assigned. For example, by their processing time, wherein work orders requiring longer time get higher priority, by their due date, wherein work orders with shorter due date get higher priority, or the like. By assigning work orders A before assigning work orders B, work orders A may be assigned to be executed earlier than work orders B, and this may increase its chances of work orders A to indeed be executed, before delays or other problems occur and accumulate, getting precedence on shared resources, or the like. Changing the assignment order may produce a totally different schedule. For the sake of example, six sequencing algorithms may be considered, wherein each may be executed a plurality of times. It will be appreciated that in some embodiments, the ordering may relate to tasks rather than to work orders.</p><p id="p-0112" num="0111">An assignment algorithm, i.e., the specific assignment decision by which specific resources such as time slots and machines are assigned for each task of a work order. Graphically depicted, this is the logic by which assignments are placed on a Gantt chart. In one example, the algorithm may scan the time dimension, placing all tasks of a work order at the first open time slot according to their order. In another example, the algorithm may scan the machines and select the one which is first available. In further embodiments, further dimensions and dimension combinations may be considered.</p><p id="p-0113" num="0112">On step <b>204</b>, schedules constituting the solution space may be generated upon the choices provided on step <b>200</b>.</p><p id="p-0114" num="0113">Referring now to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, showing a flowchart of steps in a method for generating schedules for sampling the solution space, in accordance with some exemplary embodiments of the disclosure.</p><p id="p-0115" num="0114">On step <b>300</b>, an organization (if multiple organizations are handled) and a set of work orders may be selected. The set of work orders may be selected from an exemplary set of work orders, comprising for example a plurality of work orders frequently occurring in the organization. These settings determine a factory with the products it produces, the production line machine steps for each product, time duration, raw material required for each step, and the business rules such as the work shift, e.g., 8 am to 5 pm, and whether overtime is allowed.</p><p id="p-0116" num="0115">On step <b>304</b>, an objective combination may be selected. The objective combinations may include one or more combinations that optimize a single goal, such as throughput, percent of due date compliance, or the like. Such combinations generate a variety of schedules that may provide the operational envelope of the organization, since it provides a maximal value of the objective when no resources are utilized for attempting to optimize any other objective.</p><p id="p-0117" num="0116">On step <b>308</b>, an assignment algorithm may be selected, and on step <b>312</b> a work order sequencing algorithm may be selected.</p><p id="p-0118" num="0117">On step <b>316</b> a stopping rule may be selected, for determining the number of schedules to be generated for each combination. The stopping rule may comprise for example an arbitrary number of schedules to be generated. In other embodiments, the stopping rule may be that per a work order sequencing algorithm, generating the schedules will stop when the difference between the quality of the last generated schedules is below a predetermined threshold, or the like.</p><p id="p-0119" num="0118">On step <b>320</b>, after all selections have been made, a schedule may be generated, by applying the selected algorithm with the set of parameters as provided on step <b>300</b>. The schedule may be generated by selecting a set of work orders, applying the sequence rule to sequence the work orders, applying the assignment algorithm to the tasks of the work orders to generate a schedule, and storing the schedule. Step <b>320</b> may be iterated until all options made on steps <b>304</b>, <b>308</b>, <b>312</b> and <b>316</b> above are exhausted, or until another stopping criteria has been met, such as a predetermined number of schedules have been generated, a predetermined amount of time has passed, or the like.</p><p id="p-0120" num="0119">Thus, in the example above, if for a single (1) organization the process is performed for 52 weeks, 7 choices of objectives (Step <b>304</b>), 4 choices of core logics (step <b>308</b>) and 6 choices of sequencing algorithms, a total of 1&#xd7;52&#xd7;7&#xd7;4&#xd7;6=8,736 schedules may be generated. This number assumes one demand set of work orders to be scheduled. Thus, if, for example, the same process is applied 5 times for 5 different demand sets, the total number of schedules may amount to 8,736*5=43,680 schedule samples. Each schedule is thus one sample solution in the solution space of all possible schedules.</p><p id="p-0121" num="0120">The generated schedules may be stored, each with the corresponding set of parameter choices upon which it was created, and optionally with the values it assigns to one or more goals and other aspects characterizing the schedule, such as load per machine, completion time of work orders, and the like.</p><p id="p-0122" num="0121">Referring now back to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, on step <b>208</b>, the operational envelope of the organization may be learned, e.g., by generating and analyzing schedules that maximize a subset of the objectives, such as one objective, two objectives, or the like, regardless of the other objectives. It will be appreciated that step <b>208</b> may be performed as a standalone step, or as part of schedule generation step <b>204</b>, where the objectives combinations are comprised of a subset of the objectives.</p><p id="p-0123" num="0122">On step <b>212</b>, learning and in particular self-learning algorithms may be applied to the collection of sampled schedules to learn characteristics of the overall schedule space, as well as features of individual schedules or groups of schedules, for example the features of group of schedules with similar goal values, e.g., goal values differing at most in a predetermined threshold according to a relevant metrics. In another example, groups of similar schedules that were produced by different sequencing methods or core logics may be discovered. When a user makes a change in a suggested schedule, for example promotes work orders of preferred customers, the system may search for a solution that is similar to the suggested solution, or grouped together with the suggested solution, and complies with the change, for example in which the preferred customer is promoted as required. Thus, the grouping or similarity is used for recommending a schedule in which the specific change is accommodated, with minimal harm to the goals.</p><p id="p-0124" num="0123">Furthermore, once the system is put to use, schedule information, including user decisions in adapting the schedules, and monitoring results of the schedules may be added to the corresponding sample schedules as detailed in association with step <b>116</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, to enable further self-learning by the system, such as the exception cases that the user typically makes in a given &#x2018;optimal&#x2019; schedule.</p><p id="p-0125" num="0124">In non-limiting examples, the following parameters may be learned: the statistical variation of actual time execution of tasks, which is more informative than the fixed time that is typically used in planning schedules, statistics on machine down time, the variation in the amount of raw material actually used, or the like.</p><p id="p-0126" num="0125">The learned parameters may be provided to the offline stage, in order to generate more realistic schedules. The learned parameters may also be used when evaluating whether the changes attempted by a user to a suggested schedule are practically feasible.</p><p id="p-0127" num="0126">It will be appreciated that the parameters may also be learned before the system is deployed, for example by analyzing past schedules, and using the results during the pre-deployment stage.</p><p id="p-0128" num="0127">On step <b>216</b>, trends of changes in the demand sets for schedule execution and/or trends in the executed schedules, may be analyzed for determining required changes in available resources. In some non-limiting examples, the following trends may be learned: a trend in the volume and mix of the demand set, wherein the demand for a first product is decreasing while demand for a second product is increasing may be a critical finding for capacity planning, such as the timing to purchase equipment to cope with change. Similarly, machine downtime data may point at trends which may be useful for changes in maintenance policies. It will be Appreciated that other trends may be learned, relating on non-limiting examples to personnel, equipment, raw material providers, or the like.</p><p id="p-0129" num="0128">Referring now to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, showing a block diagram of the main entities in an apparatus in accordance with some embodiments of the disclosure.</p><p id="p-0130" num="0129">The system may comprise one or more computing platforms <b>600</b>. In some embodiments, computing platform <b>600</b> may be in the Cloud or a computer system on organization premises, and may provide services to one or more clients, such as one or more computing platforms associated with one or more organizations. In further embodiments, computing platform <b>600</b> may be the same, or one of the computing platforms executing tasks for a client. In some embodiments edge computing may also be exercised, in which some initial processing is performed by local computers while more resource consuming processing is performed on remote servers, cloud computers or the like.</p><p id="p-0131" num="0130">Computing platform <b>600</b> may communicate with other computing platforms whether within the organization, in other organizations or with servers such as cloud servers via any communication channel, such as a Wide Area Network, a Local Area Network, intranet, Internet or the like.</p><p id="p-0132" num="0131">Computing platform <b>600</b> may comprise one or more processors <b>604</b>, which may be one or more Central Processing Units (CPU), microprocessors, electronic circuits, Integrated Circuits (IC) or the like. Processor <b>604</b> may be configured to provide the required functionality, for example by loading to memory and activating the software modules stored on storage device <b>620</b> detailed below.</p><p id="p-0133" num="0132">It will be appreciated that computing platform <b>600</b> may be implemented as one or more computing platforms which may be operatively connected to each other. For example, one or more remote computing platforms, which may be implemented for example on a cloud computer, may be used for training AI engines, or for offline generation of schedules sampling a solution space. Other computing platforms may be a part of a computer network of the organization, and used for providing user interface (UI) for a user for entering input, selecting one or more schedules in accordance with the user's input, and manipulating the schedule. In other embodiments, all the functionality may be provided by one or more computing platform all being a part of the organization network. It will also be appreciated that processor <b>604</b> may be implemented as one or more processors, whether located on the same computing platform or not.</p><p id="p-0134" num="0133">Computing platform <b>600</b> may comprise Input/Output (I/O) device <b>608</b> such as a display device, a speakerphone, a headset, a keyboard, a pointing device, a touch screen, or the like. I/O device <b>608</b> may be utilized to receive input from and provide output to a user, for example receive work orders and goals from the user, display suggested schedules to the user, receive manipulation instructions from the user and display the schedules as manipulated.</p><p id="p-0135" num="0134">Computing platform <b>600</b> may comprise a storage device <b>620</b>, such as a hard disk drive, a Flash disk, a Random Access Memory (RAM), a memory chip, or the like. In some exemplary embodiments, Storage device <b>620</b> may retain program code operative to cause processor <b>604</b> to perform acts associated with any of the modules listed below, or steps of the methods of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, <figref idref="DRAWINGS">FIG. <b>2</b></figref> or <figref idref="DRAWINGS">FIG. <b>3</b></figref> above. The program code may comprise one or more executable units, such as functions, libraries, standalone programs or the like, adapted to execute instructions as detailed below.</p><p id="p-0136" num="0135">Storage device <b>620</b> may comprise offline schedule generation and storing module <b>624</b>, for obtaining input parameters relevant for the schedules, as detailed for example in association with step <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> above, generating a plurality of schedules for a plurality of input parameter combinations thus sampling the solution space, and storing the schedules with the relevant parameters, for example in a database such as database <b>648</b>.</p><p id="p-0137" num="0136">In some embodiments, offline schedule generation and storing module <b>624</b>, and/or database <b>648</b> may be implemented on a computing platform remote from the organization, such as a cloud computer or cloud storage device.</p><p id="p-0138" num="0137">Storage device <b>620</b> may comprise user interface <b>628</b> for displaying information to the user and receiving information form the user. User interface <b>628</b> may be implemented separately, for example as separate modules, for the offline stage and the online stages.</p><p id="p-0139" num="0138">Storage device <b>620</b> may comprise schedule selection module <b>632</b> for receiving parameters including a set of work orders and goals, and selecting or combining one or more schedules prepared during the offline stage.</p><p id="p-0140" num="0139">Storage device <b>620</b> may comprise schedule feasibility assessment module <b>636</b> for assessing whether a schedule complies with the rules.</p><p id="p-0141" num="0140">Storage device <b>620</b> may comprise schedule goal assessment module <b>640</b> for determining the goal compliance of a schedule with the one or more goals.</p><p id="p-0142" num="0141">Storage device <b>620</b> may comprise schedule monitoring module <b>644</b> for monitoring execution of the schedule, for example whether, on what machine, at what time and how long execution of a certain task took, and storing the data such that offline schedule generation and storing module <b>624</b> can access it directly or indirectly when generating schedules. In order to collect the information, communication components <b>612</b> may communicate with other computing platforms, such as computing platforms associated with the production process.</p><p id="p-0143" num="0142">Storage device <b>620</b> may comprise options, parameters and schedules database <b>648</b>, which may be implemented as part of, or as a separate database accessible to modules of storage device <b>620</b>. Options, parameters and schedules database <b>648</b> may store the various choices of step <b>200</b>, the various schedules and the parameters associated with each schedule, or other data required for or generated by the system.</p><p id="p-0144" num="0143">It will be appreciated that the module description above is exemplary only, that the modules may be arranged differently, and that the division of tasks between the modules may be different.</p><p id="p-0145" num="0144">The present invention may be a system, a method, and/or a computer program product. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.</p><p id="p-0146" num="0145">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0147" num="0146">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0148" num="0147">Computer readable program instructions for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, Java, C++, C#, Phyton, or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present invention.</p><p id="p-0149" num="0148">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0150" num="0149">These computer readable program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0151" num="0150">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0152" num="0151">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0153" num="0152">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.</p><p id="p-0154" num="0153">The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for determining an executable solution for scheduling of work orders, the method comprising:<claim-text>during a pre-deployment stage, generating a sample collection of solutions from a solution space for a problem of scheduling work orders within a manufacturing factory, said generating performed by automatic learning based at least on data of past work orders and resource combinations and additional work orders and resource combinations, schedules and execution thereof, comprising production line machine steps for each product from a set of products, execution duration, and raw material required for each step, said generating comprising applying first multiple algorithms for generating multiple solutions for multiple optimization goals, each representing a different priority ranking of quality metrics, wherein the sample collection of solutions represents an operational envelope of the manufacturing factory; and</claim-text><claim-text>repeating:<claim-text>monitoring actual execution of a scheduling solution created based on the sample collection, wherein said monitoring comprises obtaining through a communication component at least a report from at least one sensor involved in executing the scheduling solution; and</claim-text><claim-text>combining the data with the sample collection, thereby learning an enhanced sample collection of solutions which is based also on actual execution performance, wherein generating the enhanced sample collection of solutions comprises applying second multiple algorithms for generating further work orders and resource combinations with multiple solutions for multiple optimization goals, each representing a different priority ranking of quality metrics, wherein the enhanced sample collection of solutions represents an updated operational envelope of the manufacturing factory, thereby:</claim-text><claim-text>increasing a size of a training set of the automatic learning with optimal theoretical cases, to improve scheduling of future work orders.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. (canceled)</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data comprises changes introduced by a user to a solution based on the sample collection of solutions.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said learning is unsupervised self-learning.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising analyzing execution trends for determining required changes in available resources.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising learning trends to be used for long term forecasting and capacity planning based on the sample collection and the enhanced sample collection of solutions.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising determining from the trends future needs for resources, wherein the resources are selected from the group consisting of machines, people, tools, materials, parts and work hours.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data of past schedules comprises at least one of required tools and manpower.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first multiple algorithms or the second multiple algorithms comprise at least two scheduling algorithms or at least two sequencing algorithms.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the report is received from an Internet of Things (IoT) device.</claim-text></claim></claims></us-patent-application>