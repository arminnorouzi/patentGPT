<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004748A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004748</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364419</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>34</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>32</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>62</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>24</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>344</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>325</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6232</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6296</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>24</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>2209</main-group><subgroup>01</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHODS, SYSTEMS, ARTICLES OF MANUFACTURE AND APPARATUS TO DECODE RECEIPTS BASED ON NEURAL GRAPH ARCHITECTURE</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Nielsen Consumer LLC</orgname><address><city>New York</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Rodriguez</last-name><first-name>Dayron Rizo</first-name><address><city>New York</city><state>NY</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Torres</last-name><first-name>Jose Javier Yebes</first-name><address><city>Valladolid</city><country>ES</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Methods, apparatus, systems, and articles of manufacture are disclosed to decode receipts based on neural graph architecture. An example apparatus for decoding receipts includes, vertex feature representation circuitry to extract features from optical-character-recognition (OCR) words, polar coordinate circuitry to: calculate polar coordinates of the OCR words based on respective ones of the extracted features, graph neural network circuitry to generate an adjacency matrix based on the extracted features, post-processing circuitry to traverse the adjacency matrix to generate cliques of OCR processed words, and output circuitry to generate lines of text based on the cliques of OCR processed words.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="78.32mm" wi="158.75mm" file="US20230004748A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="236.39mm" wi="133.94mm" orientation="landscape" file="US20230004748A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="237.32mm" wi="168.23mm" file="US20230004748A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="105.07mm" wi="176.61mm" file="US20230004748A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="190.25mm" wi="174.41mm" file="US20230004748A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="189.99mm" wi="134.03mm" file="US20230004748A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="151.13mm" wi="160.19mm" file="US20230004748A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="137.75mm" wi="138.77mm" file="US20230004748A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="236.22mm" wi="157.40mm" file="US20230004748A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="105.24mm" wi="48.01mm" orientation="landscape" file="US20230004748A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="211.50mm" wi="127.25mm" orientation="landscape" file="US20230004748A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="216.58mm" wi="160.10mm" orientation="landscape" file="US20230004748A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="204.55mm" wi="139.78mm" file="US20230004748A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="229.87mm" wi="113.54mm" file="US20230004748A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="183.90mm" wi="117.60mm" orientation="landscape" file="US20230004748A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="221.66mm" wi="143.09mm" file="US20230004748A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="213.87mm" wi="153.75mm" orientation="landscape" file="US20230004748A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="228.43mm" wi="176.70mm" orientation="landscape" file="US20230004748A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="204.55mm" wi="181.27mm" orientation="landscape" file="US20230004748A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="226.99mm" wi="152.91mm" file="US20230004748A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="243.50mm" wi="167.05mm" file="US20230004748A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="246.21mm" wi="175.85mm" file="US20230004748A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="149.69mm" wi="63.42mm" file="US20230004748A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD OF THE DISCLOSURE</heading><p id="p-0002" num="0001">This disclosure relates generally to text processing and, more particularly, to methods, systems, articles of manufacture and apparatus to decode receipts based on neural graph architecture.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">In recent years, Optical Character Recognition (OCR) has been used to distinguish printed or handwritten text characters digitally. In recent years, Graph Neural Networks (GNNs) have been used to represent data in graphical format as vertices of a graph.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an example framework to apply optical character recognition to a table with cells, rows, and columns.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an example illustration of results of the optical character recognition corresponding to the example framework of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example line detection framework to decode receipts.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of example line-detection framework circuitry corresponding to the example line detection framework of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example wrinkled receipt with corresponding text to decode.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates example features recorded by an example feature vector representation circuitry.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example word in context.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example vector corresponding to the example word of <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates example text detected by examples disclosed herein.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is an example adjacency matrix corresponding to the example text of <figref idref="DRAWINGS">FIG. <b>9</b></figref> and <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates an example post-processing algorithm.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref> are flowcharts representative of example machine readable instructions that may be executed by example processor circuitry to implement the line detection framework circuitry disclosed herein.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is an example results table comparing the disclosed approach and the prior approach.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIGS. <b>15</b>-<b>18</b></figref> are examples of receipts decoded by the disclosed approach and the prior approach.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a block diagram of an example processing platform including processor circuitry structured to execute the example machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref> to implement the example line detection framework circuitry disclosed herein.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is a block diagram of an example implementation of the processor circuitry of <figref idref="DRAWINGS">FIG. <b>19</b></figref>.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a block diagram of another example implementation of the processor circuitry of <figref idref="DRAWINGS">FIG. <b>19</b></figref>.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>22</b></figref> is a block diagram of an example software distribution platform (e.g., one or more servers) to distribute software (e.g., software corresponding to the example machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref>) to client devices associated with end users and/or consumers (e.g., for license, sale, and/or use), retailers (e.g., for sale, re-sale, license, and/or sub-license), and/or original equipment manufacturers (OEMs) (e.g., for inclusion in products to be distributed to, for example, retailers and/or to other end users such as direct buy customers).</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0022" num="0021">The figures are not to scale. Instead, the thickness of the layers or regions may be enlarged in the drawings. Although the figures show layers and regions with clean lines and boundaries, some or all of these lines and/or boundaries may be idealized. In reality, the boundaries and/or lines may be unobservable, blended, and/or irregular. In general, the same reference numbers will be used throughout the drawing(s) and accompanying written description to refer to the same or like parts. As used herein, unless otherwise stated, the term &#x201c;above&#x201d; describes the relationship of two parts relative to Earth. A first part is above a second part, if the second part has at least one part between Earth and the first part. Likewise, as used herein, a first part is &#x201c;below&#x201d; a second part when the first part is closer to the Earth than the second part. As noted above, a first part can be above or below a second part with one or more of: other parts therebetween, without other parts therebetween, with the first and second parts touching, or without the first and second parts being in direct contact with one another. As used in this patent, stating that any part (e.g., a layer, film, area, region, or plate) is in any way on (e.g., positioned on, located on, disposed on, or formed on, etc.) another part, indicates that the referenced part is either in contact with the other part, or that the referenced part is above the other part with one or more intermediate part(s) located therebetween. As used herein, connection references (e.g., attached, coupled, connected, and joined) may include intermediate members between the elements referenced by the connection reference and/or relative movement between those elements unless otherwise indicated. As such, connection references do not necessarily infer that two elements are directly connected and/or in fixed relation to each other. As used herein, stating that any part is in &#x201c;contact&#x201d; with another part is defined to mean that there is no intermediate part between the two parts.</p><p id="p-0023" num="0022">Unless specifically stated otherwise, descriptors such as &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; etc., are used herein without imputing or otherwise indicating any meaning of priority, physical order, arrangement in a list, and/or ordering in any way, but are merely used as labels and/or arbitrary names to distinguish elements for ease of understanding the disclosed examples. In some examples, the descriptor &#x201c;first&#x201d; may be used to refer to an element in the detailed description, while the same element may be referred to in a claim with a different descriptor such as &#x201c;second&#x201d; or &#x201c;third.&#x201d; In such instances, it should be understood that such descriptors are used merely for identifying those elements distinctly that might, for example, otherwise share a same name. As used herein &#x201c;substantially real time&#x201d; refers to occurrence in a near instantaneous manner recognizing there may be real world delays for computing time, transmission, etc. Thus, unless otherwise specified, &#x201c;substantially real time&#x201d; refers to real time+/&#x2212;1 second. As used herein, the phrase &#x201c;in communication,&#x201d; including variations thereof, encompasses direct communication and/or indirect communication through one or more intermediary components, and does not require direct physical (e.g., wired) communication and/or constant communication, but rather additionally includes selective communication at periodic intervals, scheduled intervals, aperiodic intervals, and/or one-time events. As used herein, &#x201c;processor circuitry&#x201d; is defined to include (i) one or more special purpose electrical circuits structured to perform specific operation(s) and including one or more semiconductor-based logic devices (e.g., electrical hardware implemented by one or more transistors), and/or (ii) one or more general purpose semiconductor-based electrical circuits programmed with instructions to perform specific operations and including one or more semiconductor-based logic devices (e.g., electrical hardware implemented by one or more transistors). Examples of processor circuitry include programmed microprocessors, Field Programmable Gate Arrays (FPGAs) that may instantiate instructions, Central Processor Units (CPUs), Graphics Processor Units (GPUs), Digital Signal Processors (DSPs), XPUs, or microcontrollers and integrated circuits such as Application Specific Integrated Circuits (ASICs). For example, an XPU may be implemented by a heterogeneous computing system including multiple types of processor circuitry (e.g., one or more FPGAs, one or more CPUs, one or more GPUs, one or more DSPs, etc., and/or a combination thereof) and application programming interface(s) (API(s)) that may assign computing task(s) to whichever one(s) of the multiple types of the processing circuitry is/are best suited to execute the computing task(s).</p><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0024" num="0023">In certain jurisdictions, auditors and panelists involved in manual data collection may upload (e.g., record) receipts and invoices to an information collection entity (e.g., Nielsen Consumer, LLC). In some examples, there are at least two problems with the automatic decoding of the receipts and invoices (e.g., text) by traditional optical character recognition (OCR). The first problem is that the receipt may be wrinkled and/or deformed. The second problem is that based on the structure (e.g., format) of the receipt, there may be large gaps (e.g., large areas of empty space) between different data items (e.g., the item purchased, the price of the item, the product code, the taxes, etc.). Current computer vision solutions, due to the popularity of deep learning and Convolutional Neural Networks (CNNs), such as Faster R-CNN, Yolo, and dhSegment may be able to determine specific words of the text, but are unable to handle text with misalignment due to image and paper distortions. Example solutions disclosed herein improve text recognition in view of misalignment caused by image and paper distortions.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a prior art framework for performing OCR (e.g., application of OCR to a table). In particular, the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes a graph neural network (GNN) architecture proposed for table recognition. The prior GNN architecture integrates aspects of a CNN for image features and integrates aspects of a GNN for structural linking. Table recognition includes three structural connections: rows, columns cells.</p><p id="p-0026" num="0025">An input <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a feature representation of the words in the table. The positional features used in a feature representation vector <b>108</b> are the top left and bottom right points to represent the bounding box of the word provided by an example OCR process <b>104</b>. An example CNN <b>106</b> is used to extract and then concatenate image features of the word to a feature representation vector <b>108</b>. The feature representation vector <b>108</b> is utilized to represent each word as a vertex of a graph network <b>110</b>. As a result, through pair sapling <b>112</b> and a dense net <b>114</b>, the graph network <b>110</b> outputs a vertex adjacency matrix for each of the three structural connections to determine if words (i) share a cell <b>116</b>, (ii) share a row <b>118</b>, and/or (iii) share a column <b>120</b>.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates the output after a maximal clique algorithm is applied to construct full cells <b>202</b>, rows <b>204</b>, and columns <b>206</b>. In the illustrated example of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the text that had the OCR process performed (post-OCR text, OCRed text) was derived from a table with multiple cells, multiple rows, and multiple columns. The cells <b>202</b> illustrate how each word is in a separate clique of one (1). As used herein, a &#x201c;clique&#x201d; represents a graph where each vertex in the clique is connected to all the other vertices in the clique. For example, a clique may be a classification group or a first line, where all the words in the clique have a strong connection. For example, the words &#x201c;IN NEED&#x201d;, &#x201c;PILL PT&#x201d;, and &#x201c;SANIDINE&#x201d; are each highlighted in dashed lines. Row <b>204</b> illustrates how multiple words may belong to a single row of the table. For example, the words &#x201c;446.00&#x201d;, &#x201c;NORTH&#x201d;, &#x201c;0.001&#x201d;, &#x201c;TO&#x201d;, &#x201c;04&#x201d; &#x201c;PILL, PT&#x201d;, and &#x201c;SINCE&#x201d; are in a first row. Example column <b>206</b> illustrates how multiple words may belong to a single column of the table. For example, the words &#x201c;PRODUCTS&#x201d;, &#x201c;EXERCISES&#x201d;, &#x201c;TO&#x201d;, &#x201c;BERKELEY&#x201d;, &#x201c;ANIONS&#x201d;, &#x201c;SANDINE&#x201d;, &#x201c;LIABILITY UNREALIZED&#x201d; are in a first column. The prior process to generate the cells, rows, columns, has been adapted to be used for text from receipts with large gaps between entries instead of orderly tables.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example line detection framework <b>300</b> for decoding text (e.g., receipts, media with large gaps, media having distortions, etc.). The example line detection framework <b>300</b> includes at least three operations performed by circuitry: vertex feature representation circuitry <b>302</b>, graph neural network circuitry <b>304</b>, and post processing circuitry <b>306</b>. Example input <b>308</b> for the vertex feature representation operation (e.g., step) (performed by the vertex feature representation circuitry <b>302</b>) is OCRed text boxes. The vertex feature representation circuitry <b>302</b> uses the example OCRed text boxes <b>308</b> as an input, and produces an example feature graph <b>310</b> as an output. The example graph neural network circuitry <b>304</b> uses the example feature graph <b>310</b> as an input and generates an example adjacency matrix <b>312</b>. The example post processing circuitry <b>306</b> uses the example adjacency matrix <b>312</b> as an input and generates text lines <b>314</b> having a corrected alignment with other text (e.g., words, corresponding numbers, etc.) that is relevant to a particular row (e.g., a row on a receipt showing an item description, a corresponding item quantity, a corresponding item price, etc.).</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of example line detection framework circuitry <b>400</b>. In some examples, the line detection framework circuitry <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> implements the framework of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The example line detection framework circuitry <b>400</b> includes data interface circuitry <b>402</b>, the vertex feature representation circuitry <b>302</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, polar coordinate circuitry <b>412</b>, the graph neural network circuitry <b>304</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, adjacency matrix generation circuitry <b>404</b>, the post-processing circuitry <b>306</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, vertex sorter circuitry <b>406</b>, clique assembler circuitry <b>408</b>, and optional OCR circuitry <b>410</b>.</p><p id="p-0030" num="0029">The example data interface circuitry <b>402</b> is to receive OCRed text boxes (e.g., the OCRed text boxes of <figref idref="DRAWINGS">FIG. <b>3</b></figref>) from, for instance, the OCR circuitry <b>410</b>. In some examples, the OCR circuitry <b>410</b> is included in the line detection framework circuitry <b>400</b>. The OCR circuitry <b>410</b> may be any standard OCR process (e.g., Google OCR). The example data interface circuitry <b>402</b> communicates the example OCRed text boxes to the example vertex feature representation circuitry <b>302</b>.</p><p id="p-0031" num="0030">The example vertex feature representation circuitry <b>302</b> is to classify the data derived from the OCR into a vector corresponding to a vertex (e.g., neuron of the GNN). The example vertex feature representation circuitry <b>302</b> is to generate a vector of information (e.g., ten portions of data) corresponding to a single word. Typically, the OCR circuitry <b>410</b> (or the OCR process) generates cartesian coordinates for different points (e.g., locations) on the word. The example vertex feature representation circuitry <b>302</b> includes polar coordinate circuitry <b>412</b> which is to identify the polar coordinates of certain points (e.g., locations) on the word. <figref idref="DRAWINGS">FIGS. <b>6</b>-<b>8</b></figref> are disclosed below with further details.</p><p id="p-0032" num="0031">The example graph neural network circuitry <b>304</b> is to receive, retrieve and/or otherwise obtain vectors for the words, corresponding vertex feature representations (wherein the current data type is modeled as a vector) and the example adjacency matrix generation circuitry <b>404</b> generates an adjacency matrix (such as the example adjacency matrix of <figref idref="DRAWINGS">FIG. <b>10</b></figref>). The example graph neural network circuitry <b>304</b> executes and/or otherwise processes a graph neural network, wherein the neurons (e.g., nodes, vertices) are the different vectors corresponding the OCRed words. The example graph neural network circuitry <b>304</b> generates the adjacency matrix used by the example post-processing circuitry <b>306</b>.</p><p id="p-0033" num="0032">The example post-processing circuitry <b>306</b> includes example vertex sorter circuitry <b>406</b> and clique assembler circuitry <b>408</b>. The example post-processing circuitry <b>306</b> generates lines of text for digital upload by determining not only which words are adjacent, but which words belong in the same clique (e.g., classification group) as the other words.</p><p id="p-0034" num="0033">The example line detection framework circuitry <b>400</b> includes example output circuitry <b>414</b>, wherein the output circuitry <b>414</b> outputs the maximum cliques as horizontal rows (e.g., lines of text).</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a visual illustration of example media (e.g., a piece of paper, a receipt, etc.) <b>500</b> to be decoded by the example line detection framework of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The illustrated example of <figref idref="DRAWINGS">FIG. <b>5</b></figref> includes a wrinkle (e.g., a crease) <b>502</b>. Due to the crease (e.g., misalignment, deformation, wrinkle, etc.), the text is not straight and/or otherwise horizontal (e.g., the wrinkle <b>502</b> causes a deviation from a horizontal line). While a human being may understand the sentence to read &#x201c;THE QUICK FOX JUMPED OVER ANOTHER LAZY DOG,&#x201d; prior art OCR techniques may recognize the words of the text, but may not place the words in the correct lines or associations with each other. For example, the automatic OCR process may generate a sentence &#x201c;THE JUMPED QUICK FOX ANOTHER LAZY DOG OVER.&#x201d; In the example of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, there is an angular misalignment and a large gap between the words &#x201c;JUMPED&#x201d; and &#x201c;OVER.&#x201d; In some media (e.g., receipts), there may be a large gap between the name of the product (e.g., milk) and the price of the product (e.g., $1.99). The example line detection framework circuitry <b>400</b> decodes the text on the receipt <b>500</b>.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an example of computer syntax of example target feature data <b>600</b>. For example, the OCR circuitry <b>410</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> may collect positional information of text boxes, which may be transmitted (e.g., communicated, sent) to the example data interface circuitry <b>402</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The example vertex feature representation circuitry <b>302</b> generates (e.g., builds) a feature graph wherein each word of the text (e.g., each word of the document) is a vertex of the graph. Any number of vertex representations may be used by the vertex feature representation circuitry <b>302</b> to identify connections and/or spatial associations between the words of the text. The example target feature data <b>600</b> includes at least ten different data points. The vertex representation circuitry <b>302</b> selects and/or otherwise causes selection of the cartesian left center x coordinate <b>602</b> (e.g., &#x201c;LEFT_CENTER_X&#x201d;) which is the x-coordinate of the center left point of the word box.</p><p id="p-0037" num="0036">The vertex representation circuitry <b>302</b> selects and/or otherwise causes selection of the cartesian left center y coordinate <b>604</b> (e.g., &#x201c;LEFT_CENTER_Y&#x201d;) which is the y-coordinate of the center left point of the word box.</p><p id="p-0038" num="0037">The vertex representation circuitry <b>302</b> selects and/or otherwise causes selection of the cartesian right center x coordinate <b>606</b> (e.g., &#x201c;RIGHT_CENTER_X&#x201d;) which is the x-coordinate of the center right point of the word box.</p><p id="p-0039" num="0038">The vertex representation circuitry <b>302</b> selects and/or otherwise causes selection of the cartesian right center y coordinate <b>608</b> (e.g., RIGHT_CENTER_Y) which is the y-coordinate of the center right point of the word box. The aforementioned approach uses bounding boxes by selecting the top-left point and the bottom-right point, while the techniques disclosed herein utilize the center points on the left of the word and the right of the word to generate a center line. The techniques disclosed herein utilize the center points of the words which is more accurate than the prior technique of a bounding box. <figref idref="DRAWINGS">FIG. <b>14</b></figref> is a comparison between the accuracy and/or precision of the two techniques for examples of media to be decoded. Representatives of five hundred (&#x201c;500&#x201d;) images of CPS receipts are shown in <figref idref="DRAWINGS">FIGS. <b>15</b>-<b>18</b></figref>.</p><p id="p-0040" num="0039">The example vertex representation circuitry <b>302</b> selects and/or otherwise causes selection of the norm of the left center point <b>610</b> (e.g., LEFT_CENTER_NORM) which is the norm of the center left point of the word box in polar coordinates in [0,1].</p><p id="p-0041" num="0040">The vertex representation circuitry <b>302</b> selects and/or otherwise causes selection of the left center angle <b>612</b> (e.g., LEFT_CENTER_ANGLE) which is the angle of the center left point of the word box in polar coordinates.</p><p id="p-0042" num="0041">The vertex representation circuitry <b>302</b> selects and/or otherwise causes selection of the right center norm <b>614</b> (e.g., RIGHT_CENTER_NORM) which is the norm of the center right point of the word box in polar coordinates [0,1].</p><p id="p-0043" num="0042">The vertex representation circuitry <b>302</b> selects and/or otherwise causes selection of the right center angle <b>616</b> (e.g., RIGHT_CENTER_ANGLE) which is the angle of the center right point of the word box in polar coordinates. In some examples, the polar coordinate circuitry <b>412</b> generates the four polar coordinates (<b>610</b>, <b>612</b>, <b>614</b>, <b>616</b>) by ______. The example polar coordinates include angular information which may contribute to complex misalignment problems (e.g., wrinkles, large gaps).</p><p id="p-0044" num="0043">The vertex representation circuitry <b>302</b> selects and/or otherwise causes selection of the center line slope <b>618</b> (e.g., CENTER_LINE_SLOPE) which is the slope of the center line of the word box.</p><p id="p-0045" num="0044">The vertex representation circuitry <b>302</b> selects and/or otherwise causes selection of they intersect point <b>620</b> (e.g., CENTER_LINE_N) which is the y-intersect of the center line of the word box in [0,1]. The example slope <b>618</b> and y-intersect <b>620</b> join the left and right center points.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is an example word <b>730</b> illustrating the different positional features selected by the example vertex representation circuitry <b>302</b>. For example, the word <b>730</b> (e.g., &#x201c;QUICK&#x201d;) has a left center point <b>732</b>. The left center point includes an x-coordinate of negative four (&#x201c;&#x2212;4&#x201d;) and a y-coordinate of positive two (&#x201c;2&#x201d;). The right center point <b>736</b> includes an x-coordinate of positive five (&#x201c;5&#x201d;) and a y-coordinate of positive three (&#x201c;3&#x201d;). The example word includes a y-intersect point <b>734</b> at a y-coordinate of two point forty-four (&#x201c;2.44&#x201d;). As shown in the example of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the center line cuts through the center of the example word <b>736</b>, rather than the prior approach of surrounding the entire word in a bounding box.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is an example representation of the data points corresponding to a word represented as a vector, which is used a vertex of the feature graph. The example word <b>802</b> (e.g., &#x201c;THE&#x201d;) has a corresponding vector <b>804</b>. The example word <b>730</b> (e.g., &#x201c;QUICK&#x201d;) has a corresponding vector <b>806</b>. The example word <b>808</b> (e.g., &#x201c;FOX&#x201d;) has an example vector <b>810</b>. The example vector <b>806</b> includes the ten data points of <figref idref="DRAWINGS">FIG. <b>6</b></figref>, but with information corresponding to the example word <b>732</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. For example, the left center x-coordinate data point value <b>812</b> is negative four (&#x201c;&#x2212;4&#x201d;) and the left center y-coordinate data point value <b>814</b> is positive two (&#x201c;2&#x201d;). (See the left center data point <b>732</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>). <figref idref="DRAWINGS">FIG. <b>8</b></figref> is an example, and the accuracy of the data points (e.g., the cartesian coordinates, the polar coordinates, the center line slope) is not guaranteed. The example vertex feature representation circuitry <b>302</b> uses each word, with corresponding ten features, as a vertex of a feature graph (e.g., the feature graph <b>310</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.) The feature graph is used as an input for the graph neural network circuitry <b>304</b> which generates an adjacency matrix that represents the connections between words that belong to the same line. For example, words with an index i and index j, A[ij]=1 if those words belong to the same line and A[ij]=0 if otherwise.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is the example text <b>900</b> to be decoded that corresponds to the adjacency matrix <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>. The example text in <figref idref="DRAWINGS">FIG. <b>9</b></figref> is a sentence, having three lines, reading &#x201c;THE QUICK FOX JUMPED OVER ANOTHER LAZY DOG.&#x201d; The first line <b>902</b> includes the first three words (e.g., &#x201c;THE&#x201d;, &#x201c;QUICK,&#x201d; &#x201c;FOX&#x201d;), the second line <b>904</b> includes the next two words (e.g., &#x201c;JUMPED&#x201d;, &#x201c;OVER&#x201d;), and the third line <b>906</b> includes the last three words (e.g., &#x201c;ANOTHER,&#x201d; &#x201c;LAZY,&#x201d; &#x201c;DOG.&#x201d;). The example text <b>900</b> may be the output of the example output circuitry <b>414</b>, and is merely shown to illustrate the functionality of the adjacency matrix <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is an example adjacency matrix <b>1000</b>. The example graph neural network circuitry <b>304</b> (of <figref idref="DRAWINGS">FIG. <b>4</b></figref>) utilizes the adjacency matrix generation circuitry <b>404</b> (of <figref idref="DRAWINGS">FIG. <b>4</b></figref>) to generate the adjacency matrix <b>1000</b>. The example adjacency matrix lists each word of the text <b>900</b> against all the other words of the text. For example, the word &#x201c;THE&#x201d; <b>1004</b> is adjacent to the word &#x201c;QUICK&#x201d; <b>1006</b> as shown by the one (&#x201c;1&#x201d;). The word &#x201c;THE&#x201d; <b>1004</b> is also adjacent to the word &#x201c;FOX&#x201d; <b>1008</b> even though there is not a direct connection as shown by the one (&#x201c;1&#x201d;). The word &#x201c;THE&#x201d; <b>1004</b> is adjacent to the word &#x201c;JUMPED&#x201d; <b>1010</b>, despite not being in the same horizontal line as shown by the one (&#x201c;1&#x201d;). The example post-processing circuitry <b>306</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> will address the issue that mere adjacency is not the same as being in the same line. In some examples, the word &#x201c;THE&#x201d; <b>1004</b> is not adjacent to the word &#x201c;JUMPED&#x201d; <b>1010</b> because the word &#x201c;JUMPED&#x201d; <b>1010</b> is not in the same horizontal line, and is shown by a zero (&#x201c;1&#x201d;). The word &#x201c;THE&#x201d; <b>1004</b> is not adjacent to the word &#x201c;ANOTHER&#x201d; <b>1012</b> as evidenced by the zero (&#x201c;0&#x201d;).</p><p id="p-0050" num="0049">The example post processing circuitry <b>306</b> traverses the adjacency matrix <b>1000</b> (the adjacency matrix <b>1000</b> generated by the graph neural network circuitry <b>304</b>) in order to construct the text lines.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates example operation/functionality of the example clique assembler circuitry <b>408</b> in line construction. The first word &#x201c;THE&#x201d; <b>1102</b> (in the black outlined box) is the reference word. The example clique assembler circuitry <b>408</b> determines there is a clique between the first word &#x201c;THE&#x201d; <b>1102</b> and the second word &#x201c;QUICK&#x201d; <b>1104</b> and the third word &#x201c;FOX&#x201d; <b>1106</b> (both in the dashed outlined boxes). The first word <b>1102</b>, the second word <b>1104</b>, and the third word <b>1106</b> are in a clique because there is a double connection between all three words. There is a first connection <b>1122</b><i>a </i>from the first word &#x201c;THE&#x201d; <b>1102</b> to the second word &#x201c;QUICK&#x201d; <b>1104</b>. There is a second connection <b>1122</b><i>b </i>from the second work &#x201c;QUICK&#x201d; <b>1104</b> to the first word &#x201c;THE&#x201d; <b>1102</b>. There is a second connection pair (<b>1124</b><i>a </i>and <b>1124</b><i>b</i>) between the second word &#x201c;QUICK&#x201d; <b>1104</b> and the third word &#x201c;FOX&#x201d; <b>1106</b>. There is a third connection pair (<b>1120</b><i>a </i>and <b>1120</b><i>b</i>) between the first word <b>1102</b> and the third word <b>1106</b>. As used herein, a double connection is wherein index i and index j, A[ij]=1 if those words belong to the same line and A[ij]=0 if otherwise.</p><p id="p-0052" num="0051">Despite the fourth word &#x201c;JUMPED&#x201d; <b>1108</b> (in the dotted outline box) having double connections with the first word <b>1102</b>, the second word <b>1104</b>, the third word <b>1106</b>, the fourth word <b>1108</b> is not included in the first clique. The clique assembler circuitry <b>406</b> operates according to the rule that a word that is below one of the words in the clique (e.g., line) is unable to be added to the left or right of the clique (e.g., line).</p><p id="p-0053" num="0052">The fifth word &#x201c;OVER&#x201d; <b>1110</b> (in the dashed dotted outline box) does not belong to the first clique. The fifth word <b>1110</b> does not have connections to the words in the first clique (e.g., the first word <b>1102</b>, the second word <b>1104</b>, the third word <b>1106</b>.</p><p id="p-0054" num="0053">In some examples, the line detection framework circuitry <b>400</b> includes means for extracting features from optical-character-recognition (OCR) words. For example, the means for extracting features from OCR words may be implemented by vertex feature representation circuitry <b>302</b>. In some examples, the vertex feature representation circuitry <b>302</b> may be implemented by machine executable instructions such as that implemented by at least blocks <b>1302</b>, <b>1306</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref> executed by processor circuitry, which may be implemented by the example processor circuitry <b>1912</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, the example processor circuitry <b>1900</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, and/or the example Field Programmable Gate Array (FPGA) circuitry <b>2000</b> of <figref idref="DRAWINGS">FIG. <b>20</b></figref>. In other examples, the vertex feature representation circuitry <b>302</b> is implemented by other hardware logic circuitry, hardware implemented state machines, and/or any other combination of hardware, software, and/or firmware. For example, the vertex feature representation circuitry <b>302</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an Application Specific Integrated Circuit (ASIC), a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0055" num="0054">In some examples, the line detection framework circuitry <b>400</b> includes means for calculating polar coordinates of the OCR words. For example, the means for calculating polar coordinates of the OCR words may be implemented by polar coordinate circuitry <b>412</b>. In some examples, the polar coordinate circuitry <b>412</b> may be implemented by machine executable instructions such as that implemented by at least blocks <b>1304</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref> executed by processor circuitry, which may be implemented by the example processor circuitry <b>1912</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, the example processor circuitry <b>1900</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, and/or the example Field Programmable Gate Array (FPGA) circuitry <b>2000</b> of <figref idref="DRAWINGS">FIG. <b>20</b></figref>. In other examples, the vertex feature representation circuitry <b>302</b> is implemented by other hardware logic circuitry, hardware implemented state machines, and/or any other combination of hardware, software, and/or firmware. For example, the vertex feature representation circuitry <b>302</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an Application Specific Integrated Circuit (ASIC), a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0056" num="0055">In some examples, the line detection framework circuitry <b>400</b> includes means for generating an adjacency matrix. For example, the means for generating an adjacency matrix may be implemented by adjacency matrix generation circuitry <b>404</b>. In some examples, the adjacency matrix generation circuitry <b>404</b> may be implemented by machine executable instructions such as that implemented by at least blocks <b>1308</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref> executed by processor circuitry, which may be implemented by the example processor circuitry <b>1912</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, the example processor circuitry <b>1900</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, and/or the example Field Programmable Gate Array (FPGA) circuitry <b>2000</b> of <figref idref="DRAWINGS">FIG. <b>20</b></figref>. In other examples, the adjacency matrix generation circuitry <b>404</b> is implemented by other hardware logic circuitry, hardware implemented state machines, and/or any other combination of hardware, software, and/or firmware. For example, the adjacency matrix generation circuitry <b>404</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an Application Specific Integrated Circuit (ASIC), a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0057" num="0056">In some examples, the line detection framework circuitry <b>400</b> includes means for generating cliques of OCR words. For example, the means for generating cliques of OCR words may be implemented by clique assembler circuitry <b>408</b>. In some examples, the clique assembler circuitry <b>408</b> may be implemented by machine executable instructions such as that implemented by at least blocks <b>1310</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref> executed by processor circuitry, which may be implemented by the example processor circuitry <b>1912</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, the example processor circuitry <b>1900</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, and/or the example Field Programmable Gate Array (FPGA) circuitry <b>2000</b> of <figref idref="DRAWINGS">FIG. <b>20</b></figref>. In other examples, the clique assembler circuitry <b>408</b> is implemented by other hardware logic circuitry, hardware implemented state machines, and/or any other combination of hardware, software, and/or firmware. For example, the clique assembler circuitry <b>408</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an Application Specific Integrated Circuit (ASIC), a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0058" num="0057">In some examples, the line detection framework circuitry <b>400</b> includes means for outputting lines of text based on the cliques of OCR words. For example, the means for outputting lines of text based on the cliques of OCR words may be implemented by output circuitry <b>414</b>. In some examples, the output circuitry <b>414</b> may be implemented by machine executable instructions such as that implemented by at least blocks <b>1312</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref> executed by processor circuitry, which may be implemented by the example processor circuitry <b>1912</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, the example processor circuitry <b>1900</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, and/or the example Field Programmable Gate Array (FPGA) circuitry <b>2000</b> of <figref idref="DRAWINGS">FIG. <b>20</b></figref>. In other examples, the output circuitry <b>414</b> is implemented by other hardware logic circuitry, hardware implemented state machines, and/or any other combination of hardware, software, and/or firmware. For example, the output circuitry <b>414</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an Application Specific Integrated Circuit (ASIC), a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0059" num="0058">While an example manner of implementing the line detection framework circuitry <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> is illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, one or more of the elements, processes, and/or devices illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be combined, divided, re-arranged, omitted, eliminated, and/or implemented in any other way. Further, the example vertex feature representation circuitry <b>302</b>, the example graph neural network circuitry <b>304</b>, the example post processing circuitry <b>306</b>, the data interface circuitry <b>402</b>, the example adjacency matrix generation circuitry <b>404</b>, the example vertex sorter <b>406</b>, the example clique assembler circuitry <b>408</b>, the example polar coordinate circuitry <b>412</b>, and the example output circuitry <b>414</b>, and/or, more generally, the example line detection framework circuitry <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, may be implemented by hardware, software, firmware, and/or any combination of hardware, software, and/or firmware. Thus, for example, any of the example vertex feature representation circuitry <b>302</b>, the example graph neural network circuitry <b>304</b>, the example post processing circuitry <b>306</b>, the data interface circuitry <b>402</b>, the example adjacency matrix generation circuitry <b>404</b>, the example vertex sorter <b>406</b>, the example clique assembler circuitry <b>408</b>, the example polar coordinate circuitry <b>412</b>, and the example output circuitry <b>414</b> and/or, more generally, the example line detection framework circuitry <b>400</b>, could be implemented by processor circuitry, analog circuit(s), digital circuit(s), logic circuit(s), programmable processor(s), programmable microcontroller(s), graphics processing unit(s) (GPU(s)), digital signal processor(s) (DSP(s)), application specific integrated circuit(s) (ASIC(s)), programmable logic device(s) (PLD(s)), and/or field programmable logic device(s) (FPLD(s)) such as Field Programmable Gate Arrays (FPGAs). When reading any of the apparatus or system claims of this patent to cover a purely software and/or firmware implementation, at least one of the example vertex feature representation circuitry <b>302</b>, the example graph neural network circuitry <b>304</b>, the example post processing circuitry <b>306</b>, the data interface circuitry <b>402</b>, the example adjacency matrix generation circuitry <b>404</b>, the example vertex sorter <b>406</b>, the example clique assembler circuitry <b>408</b>, the example polar coordinate circuitry <b>412</b>, and/or the example output circuitry <b>414</b> is/are hereby expressly defined to include a non-transitory computer readable storage device or storage disk such as a memory, a digital versatile disk (DVD), a compact disk (CD), a Blu-ray disk, etc., including the software and/or firmware. Further still, the example line detection framework circuitry <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> may include one or more elements, processes, and/or devices in addition to, or instead of, those illustrated in <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref>, and/or may include more than one of any or all of the illustrated elements, processes and devices.</p><p id="p-0060" num="0059">A flowchart representative of example hardware logic circuitry, machine readable instructions, hardware implemented state machines, and/or any combination thereof for implementing the line detection framework circuitry <b>400</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> is shown in <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref>. The machine readable instructions may be one or more executable programs or portion(s) of an executable program for execution by processor circuitry, such as the processor circuitry <b>1912</b> shown in the example processor platform <b>1900</b> discussed below in connection with <figref idref="DRAWINGS">FIG. <b>19</b></figref> and/or the example processor circuitry discussed below in connection with <figref idref="DRAWINGS">FIGS. <b>20</b> and/or <b>21</b></figref>. The program may be embodied in software stored on one or more non-transitory computer readable storage media such as a CD, a floppy disk, a hard disk drive (HDD), a DVD, a Blu-ray disk, a volatile memory (e.g., Random Access Memory (RAM) of any type, etc.), or a non-volatile memory (e.g., FLASH memory, an HDD, etc.) associated with processor circuitry located in one or more hardware devices, but the entire program and/or parts thereof could alternatively be executed by one or more hardware devices other than the processor circuitry and/or embodied in firmware or dedicated hardware. The machine readable instructions may be distributed across multiple hardware devices and/or executed by two or more hardware devices (e.g., a server and a client hardware device). For example, the client hardware device may be implemented by an endpoint client hardware device (e.g., a hardware device associated with a user) or an intermediate client hardware device (e.g., a radio access network (RAN) gateway that may facilitate communication between a server and an endpoint client hardware device). Similarly, the non-transitory computer readable storage media may include one or more mediums located in one or more hardware devices. Further, although the example program is described with reference to the flowchart illustrated in <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref>, many other methods of implementing the example line detection framework circuitry <b>400</b> may alternatively be used. For example, the order of execution of the blocks may be changed, and/or some of the blocks described may be changed, eliminated, or combined. Additionally or alternatively, any or all of the blocks may be implemented by one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an ASIC, a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware. The processor circuitry may be distributed in different network locations and/or local to one or more hardware devices (e.g., a single-core processor (e.g., a single core central processor unit (CPU)), a multi-core processor (e.g., a multi-core CPU), etc.) in a single machine, multiple processors distributed across multiple servers of a server rack, multiple processors distributed across one or more server racks, a CPU and/or a FPGA located in the same package (e.g., the same integrated circuit (IC) package or in two or more separate housings, etc).</p><p id="p-0061" num="0060">The machine readable instructions described herein may be stored in one or more of a compressed format, an encrypted format, a fragmented format, a compiled format, an executable format, a packaged format, etc. Machine readable instructions as described herein may be stored as data or a data structure (e.g., as portions of instructions, code, representations of code, etc.) that may be utilized to create, manufacture, and/or produce machine executable instructions. For example, the machine readable instructions may be fragmented and stored on one or more storage devices and/or computing devices (e.g., servers) located at the same or different locations of a network or collection of networks (e.g., in the cloud, in edge devices, etc.). The machine readable instructions may require one or more of installation, modification, adaptation, updating, combining, supplementing, configuring, decryption, decompression, unpacking, distribution, reassignment, compilation, etc., in order to make them directly readable, interpretable, and/or executable by a computing device and/or other machine. For example, the machine readable instructions may be stored in multiple parts, which are individually compressed, encrypted, and/or stored on separate computing devices, wherein the parts when decrypted, decompressed, and/or combined form a set of machine executable instructions that implement one or more operations that may together form a program such as that described herein.</p><p id="p-0062" num="0061">In another example, the machine readable instructions may be stored in a state in which they may be read by processor circuitry, but require addition of a library (e.g., a dynamic link library (DLL)), a software development kit (SDK), an application programming interface (API), etc., in order to execute the machine readable instructions on a particular computing device or other device. In another example, the machine readable instructions may need to be configured (e.g., settings stored, data input, network addresses recorded, etc.) before the machine readable instructions and/or the corresponding program(s) can be executed in whole or in part. Thus, machine readable media, as used herein, may include machine readable instructions and/or program(s) regardless of the particular format or state of the machine readable instructions and/or program(s) when stored or otherwise at rest or in transit.</p><p id="p-0063" num="0062">The machine readable instructions described herein can be represented by any past, present, or future instruction language, scripting language, programming language, etc. For example, the machine readable instructions may be represented using any of the following languages: C, C++, Java, C#, Perl, Python, JavaScript, HyperText Markup Language (HTML), Structured Query Language (SQL), Swift, etc.</p><p id="p-0064" num="0063">As mentioned above, the example operations of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref> may be implemented using executable instructions (e.g., computer and/or machine readable instructions) stored on one or more non-transitory computer and/or machine readable media such as optical storage devices, magnetic storage devices, an HDD, a flash memory, a read-only memory (ROM), a CD, a DVD, a cache, a RAM of any type, a register, and/or any other storage device or storage disk in which information is stored for any duration (e.g., for extended time periods, permanently, for brief instances, for temporarily buffering, and/or for caching of the information). As used herein, the terms non-transitory computer readable medium and non-transitory computer readable storage medium is expressly defined to include any type of computer readable storage device and/or storage disk and to exclude propagating signals and to exclude transmission media.</p><p id="p-0065" num="0064">&#x201c;Including&#x201d; and &#x201c;comprising&#x201d; (and all forms and tenses thereof) are used herein to be open ended terms. Thus, whenever a claim employs any form of &#x201c;include&#x201d; or &#x201c;comprise&#x201d; (e.g., comprises, includes, comprising, including, having, etc.) as a preamble or within a claim recitation of any kind, it is to be understood that additional elements, terms, etc., may be present without falling outside the scope of the corresponding claim or recitation. As used herein, when the phrase &#x201c;at least&#x201d; is used as the transition term in, for example, a preamble of a claim, it is open-ended in the same manner as the term &#x201c;comprising&#x201d; and &#x201c;including&#x201d; are open ended. The term &#x201c;and/or&#x201d; when used, for example, in a form such as A, B, and/or C refers to any combination or subset of A, B, C such as (1) A alone, (2) B alone, (3) C alone, (4) A with B, (5) A with C, (6) B with C, or (7) A with B and with C. As used herein in the context of describing structures, components, items, objects and/or things, the phrase &#x201c;at least one of A and B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, or (3) at least one A and at least one B. Similarly, as used herein in the context of describing structures, components, items, objects and/or things, the phrase &#x201c;at least one of A or B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, or (3) at least one A and at least one B. As used herein in the context of describing the performance or execution of processes, instructions, actions, activities and/or steps, the phrase &#x201c;at least one of A and B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, or (3) at least one A and at least one B. Similarly, as used herein in the context of describing the performance or execution of processes, instructions, actions, activities and/or steps, the phrase &#x201c;at least one of A or B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, or (3) at least one A and at least one B.</p><p id="p-0066" num="0065">As used herein, singular references (e.g., &#x201c;a&#x201d;, &#x201c;an&#x201d;, &#x201c;first&#x201d;, &#x201c;second&#x201d;, etc.) do not exclude a plurality. The term &#x201c;a&#x201d; or &#x201c;an&#x201d; object, as used herein, refers to one or more of that object. The terms &#x201c;a&#x201d; (or &#x201c;an&#x201d;), &#x201c;one or more&#x201d;, and &#x201c;at least one&#x201d; are used interchangeably herein. Furthermore, although individually listed, a plurality of means, elements or method actions may be implemented by, e.g., the same entity or object. Additionally, although individual features may be included in different examples or claims, these may possibly be combined, and the inclusion in different examples or claims does not imply that a combination of features is not feasible and/or advantageous.</p><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart representative of example machine readable instructions and/or example operations <b>1200</b> that may be executed and/or instantiated by processor circuitry to output lines of text from the adjacency matrix. The machine readable instructions and/or operations <b>1200</b> of <figref idref="DRAWINGS">FIG. <b>12</b></figref> begin at block <b>1202</b>, at which the vertex sorter circuitry <b>406</b> sorts vertices by the y-coordinate from top to bottom. For example, the vertex sorter circuitry <b>406</b> may sort the vertices (e.g., words) by the y-coordinate from top to bottom by using the vertex with the largest positive y-coordinate as the first. For example, the first word <b>1102</b> has a y-coordinate that placed the first word <b>1102</b> above the y-coordinate of the fourth word <b>1108</b>.</p><p id="p-0068" num="0067">At block <b>1204</b>, the clique assembler circuitry <b>408</b> computes the maximum clique for a first vertex. For example, the clique assembler circuitry <b>408</b> may compute the maximum clique for a first vertex by determining if there is a strong connection between the vertexes of the clique. For example, a strong connection may be defined as A[i,j]=A[j,i]=1. The example clique assembler circuitry <b>408</b> may determine vertexes to be in the clique if the vertex is to the left or right of all nodes (e.g., other vertices) in the clique.</p><p id="p-0069" num="0068">At block <b>1206</b>, the clique assembler circuitry <b>408</b> loops over the cliques. For example, the clique assembler circuitry <b>408</b> may loop over the cliques from top to bottom and retain disjoint cliques as the lines from top to bottom.</p><p id="p-0070" num="0069">At block <b>1208</b>, the clique assembler circuitry <b>408</b> determines if there is any vertex which is not in a clique. For example, the example clique assembler circuitry <b>408</b> may determine there is a vertex which is not in a clique (e.g., &#x201c;YES&#x201d;), control returns to block <b>1204</b>. For example, the example clique assembler circuitry <b>408</b> may determine all the vertices are in a clique (e.g., &#x201c;NO&#x201d;), control advances to block <b>1210</b>.</p><p id="p-0071" num="0070">At block <b>1210</b>, the example vertex sorter circuitry <b>406</b> sorts all the vertices in the clique from left to right. For example, the example vertex sorter circuitry <b>406</b> may sort all the vertices in the clique from left to right by using the x-coordinates of the vertices. For example, the first word <b>1102</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref> is to the left of the second word <b>1104</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref> based on the x-coordinates.</p><p id="p-0072" num="0071">At block <b>1212</b>, the example output circuitry <b>414</b> outputs a line of text. For example, the example output circuitry <b>414</b> may output a line of text by printing the words of the clique which have been sorted from left to right, and top to bottom.</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart representative of example machine readable instructions and/or example operations <b>1200</b> that may be executed and/or instantiated by processor circuitry to output lines of text from the adjacency matrix. The example instructions and/or operations <b>1200</b> begin at block <b>1302</b>, at which vertex feature representation circuitry <b>302</b> extracts features from optical-character-recognition (OCR) words. For example, the vertex feature representation circuitry <b>302</b> may extract features from OCR words by determining cartesian coordinates of the OCR words.</p><p id="p-0074" num="0073">At block <b>1304</b>, the example polar coordinate circuitry <b>412</b> calculates polar coordinates of the OCR words. For example, the example polar coordinate circuitry <b>412</b> may calculate the polar coordinates of the OCR words by determining the norm and the angle of the left center point and the right center point.</p><p id="p-0075" num="0074">At block <b>1306</b>, the example vertex feature representation circuitry <b>302</b> generates a feature graph. For example, the example vertex feature representation circuitry <b>302</b> may generate a feature graph based on the extracted features.</p><p id="p-0076" num="0075">At block <b>1308</b>, the example graph neural network circuitry <b>304</b> generates an adjacency matrix based on the extracted features. For example, the graph neural network circuitry <b>304</b> may generate an adjacency matrix based on the extracted features by using the feature graph as an input.</p><p id="p-0077" num="0076">At block <b>1310</b>, the example clique assembler circuitry <b>408</b> generates cliques of OCR words. For example, the example clique assembler circuitry <b>408</b> may generate a clique of OCR words by determining the number of connections the words have to other words. For example, a strong connection may be wherein for an index i and an index j, A[ij]=1 if those words belong to the same line and A[ij]=0 if otherwise.</p><p id="p-0078" num="0077">At block <b>1312</b>, the example output circuitry <b>306</b> outputs lines of text based on the cliques of the OCR words. For example, the example output circuitry <b>306</b> may output lines of text by sorting the cliques of OCR words and representing each clique as a distinct line of text. The example instructions <b>1300</b> end.</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a results table example results table comparing the disclosed approach and the prior approach is a comparison between the accuracy and/or precision of the two techniques for examples of media to be decoded. Four representatives of the five hundred (&#x201c;500&#x201d;) images of CPS receipts are shown in <figref idref="DRAWINGS">FIGS. <b>15</b>-<b>18</b></figref>. Examples disclosed herein have several benefits including more precision and more accuracy. The prior dhSegment approach <b>1402</b> has a corresponding precision of 94.05 and a recall of 94.85. The disclosed approach <b>1404</b> has a precision of 95.52 and a recall of 96.11.</p><p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates typical distortions <b>1500</b> in receipt images. There may be wrinkles, creases, or misalignments.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>16</b></figref> illustrates the bounding boxes technique <b>1602</b> of one prior approach (e.g., dhSegment) contrasted with the center line technique <b>1604</b> disclosed herein. The product &#x201c;FIFTEENSA&#x201d; costs four dollars and ninety cents (e.g., 4.90). Under the bounding boxes <b>1602</b> a first box surrounds (e.g., bounds) the FIFTEENSA product and a second box surrounds (e.g., bounds) the price 4.90. Under the bounding boxes approach, the price is not linked with the product. Under the center line technique <b>1604</b>, which travels through the center (e.g., middle) of the product and price, the product is linked to the price semantically. The large gap which causes the bounding boxes technique <b>1602</b> to incorrectly report the data, does not affect the center line technique <b>1604</b>.</p><p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. <b>17</b></figref> illustrates the bounding boxes technique <b>1702</b> and the center line technique <b>1704</b> on a wrinkled and/or deformed receipt. The bounding boxes technique <b>1702</b> surrounds multiple numbers 2.59 and 1.15, while the center line technique <b>1704</b> has a first center line through the first number 2.59 and a second center line through the second number 1.15.</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>18</b></figref> illustrates a difficult receipt where both the prior art method and the disclosed method were inaccurate.</p><p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a block diagram of an example processor platform <b>1700</b> structured to execute and/or instantiate the machine readable instructions and/or operations of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref> to implement the line detection framework circuitry of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The processor platform <b>1900</b> can be, for example, a server, a personal computer, a workstation, a self-learning machine (e.g., a neural network), a mobile device (e.g., a cell phone, a smart phone, a tablet such as an iPad&#x2122;), a personal digital assistant (PDA), an Internet appliance, a DVD player, a CD player, a digital video recorder, a Blu-ray player, a gaming console, a personal video recorder, a set top box, a headset (e.g., an augmented reality (AR) headset, a virtual reality (VR) headset, etc.) or other wearable device, or any other type of computing device.</p><p id="p-0085" num="0084">The processor platform <b>1900</b> of the illustrated example includes processor circuitry <b>1912</b>. The processor circuitry <b>19</b> of the illustrated example is hardware. For example, the processor circuitry <b>1912</b> can be implemented by one or more integrated circuits, logic circuits, FPGAs microprocessors, CPUs, GPUs, DSPs, and/or microcontrollers from any desired family or manufacturer. The processor circuitry <b>1912</b> may be implemented by one or more semiconductor based (e.g., silicon based) devices. In this example, the processor circuitry <b>1912</b> implements the example vertex feature representation circuitry <b>302</b>, the example graph neural network circuitry <b>304</b>, the example post processing circuitry <b>306</b>, the data interface circuitry <b>402</b>, the example adjacency matrix generation circuitry <b>404</b>, the example vertex sorter <b>406</b>, the example clique assembler circuitry <b>408</b>, the example polar coordinate circuitry <b>412</b>, and the example output circuitry <b>414</b>.</p><p id="p-0086" num="0085">The processor circuitry <b>1912</b> of the illustrated example includes a local memory <b>1913</b> (e.g., a cache, registers, etc.). The processor circuitry <b>1912</b> of the illustrated example is in communication with a main memory including a volatile memory <b>1914</b> and a non-volatile memory <b>1916</b> by a bus <b>1918</b>. The volatile memory <b>1914</b> may be implemented by Synchronous Dynamic Random Access Memory (SDRAM), Dynamic Random Access Memory (DRAM), RAMBUS&#xae; Dynamic Random Access Memory (RDRAM&#xae;), and/or any other type of RAM device. The non-volatile memory <b>1916</b> may be implemented by flash memory and/or any other desired type of memory device. Access to the main memory <b>1914</b>, <b>1916</b> of the illustrated example is controlled by a memory controller <b>1917</b>.</p><p id="p-0087" num="0086">The processor platform <b>1900</b> of the illustrated example also includes interface circuitry <b>1920</b>. The interface circuitry <b>1920</b> may be implemented by hardware in accordance with any type of interface standard, such as an Ethernet interface, a universal serial bus (USB) interface, a Bluetooth&#xae; interface, a near field communication (NFC) interface, a PCI interface, and/or a PCIe interface.</p><p id="p-0088" num="0087">In the illustrated example, one or more input devices <b>1922</b> are connected to the interface circuitry <b>1920</b>. The input device(s) <b>1922</b> permit(s) a user to enter data and/or commands into the processor circuitry <b>1912</b>. The input device(s) <b>1922</b> can be implemented by, for example, an audio sensor, a microphone, a camera (still or video), a keyboard, a button, a mouse, a touchscreen, a track-pad, a trackball, an isopoint device, and/or a voice recognition system.</p><p id="p-0089" num="0088">One or more output devices <b>1924</b> are also connected to the interface circuitry <b>1920</b> of the illustrated example. The output devices <b>1924</b> can be implemented, for example, by display devices (e.g., a light emitting diode (LED), an organic light emitting diode (OLED), a liquid crystal display (LCD), a cathode ray tube (CRT) display, an in-place switching (IPS) display, a touchscreen, etc.), a tactile output device, a printer, and/or speaker. The interface circuitry <b>1920</b> of the illustrated example, thus, typically includes a graphics driver card, a graphics driver chip, and/or graphics processor circuitry such as a GPU.</p><p id="p-0090" num="0089">The interface circuitry <b>1920</b> of the illustrated example also includes a communication device such as a transmitter, a receiver, a transceiver, a modem, a residential gateway, a wireless access point, and/or a network interface to facilitate exchange of data with external machines (e.g., computing devices of any kind) by a network <b>1926</b>. The communication can be by, for example, an Ethernet connection, a digital subscriber line (DSL) connection, a telephone line connection, a coaxial cable system, a satellite system, a line-of-site wireless system, a cellular telephone system, an optical connection, etc.</p><p id="p-0091" num="0090">The processor platform <b>1900</b> of the illustrated example also includes one or more mass storage devices <b>1928</b> to store software and/or data. Examples of such mass storage devices <b>1928</b> include magnetic storage devices, optical storage devices, floppy disk drives, HDDs, CDs, Blu-ray disk drives, redundant array of independent disks (RAID) systems, solid state storage devices such as flash memory devices, and DVD drives.</p><p id="p-0092" num="0091">The machine executable instructions <b>1932</b>, which may be implemented by the machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref>, may be stored in the mass storage device <b>1928</b>, in the volatile memory <b>1914</b>, in the non-volatile memory <b>1916</b>, and/or on a removable non-transitory computer readable storage medium such as a CD or DVD.</p><p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is a block diagram of an example implementation of the processor circuitry <b>1912</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>. In this example, the processor circuitry <b>1912</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref> is implemented by a microprocessor <b>2000</b>. For example, the microprocessor <b>2000</b> may implement multi-core hardware circuitry such as a CPU, a DSP, a GPU, an XPU, etc. Although it may include any number of example cores <b>2002</b> (e.g., 1 core), the microprocessor <b>2000</b> of this example is a multi-core semiconductor device including N cores. The cores <b>2002</b> of the microprocessor <b>2000</b> may operate independently or may cooperate to execute machine readable instructions. For example, machine code corresponding to a firmware program, an embedded software program, or a software program may be executed by one of the cores <b>2002</b> or may be executed by multiple ones of the cores <b>2002</b> at the same or different times. In some examples, the machine code corresponding to the firmware program, the embedded software program, or the software program is split into threads and executed in parallel by two or more of the cores <b>2002</b>. The software program may correspond to a portion or all of the machine readable instructions and/or operations represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref>.</p><p id="p-0094" num="0093">The cores <b>2002</b> may communicate by an example bus <b>2004</b>. In some examples, the bus <b>2004</b> may implement a communication bus to effectuate communication associated with one(s) of the cores <b>2002</b>. For example, the bus <b>2004</b> may implement at least one of an Inter-Integrated Circuit (I2C) bus, a Serial Peripheral Interface (SPI) bus, a PCI bus, or a PCIe bus. Additionally or alternatively, the bus <b>2004</b> may implement any other type of computing or electrical bus. The cores <b>2002</b> may obtain data, instructions, and/or signals from one or more external devices by example interface circuitry <b>2006</b>. The cores <b>2002</b> may output data, instructions, and/or signals to the one or more external devices by the interface circuitry <b>2006</b>. Although the cores <b>2002</b> of this example include example local memory <b>2020</b> (e.g., Level 1 (L1) cache that may be split into an L1 data cache and an L1 instruction cache), the microprocessor <b>2000</b> also includes example shared memory <b>2010</b> that may be shared by the cores (e.g., Level 2 (L2_cache)) for high-speed access to data and/or instructions. Data and/or instructions may be transferred (e.g., shared) by writing to and/or reading from the shared memory <b>2010</b>. The local memory <b>2020</b> of each of the cores <b>2002</b> and the shared memory <b>2010</b> may be part of a hierarchy of storage devices including multiple levels of cache memory and the main memory (e.g., the main memory <b>1914</b>, <b>1916</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>). Typically, higher levels of memory in the hierarchy exhibit lower access time and have smaller storage capacity than lower levels of memory. Changes in the various levels of the cache hierarchy are managed (e.g., coordinated) by a cache coherency policy.</p><p id="p-0095" num="0094">Each core <b>2002</b> may be referred to as a CPU, DSP, GPU, etc., or any other type of hardware circuitry. Each core <b>2002</b> includes control unit circuitry <b>2014</b>, arithmetic and logic (AL) circuitry (sometimes referred to as an ALU) <b>2016</b>, a plurality of registers <b>2018</b>, the L1 cache <b>2020</b>, and an example bus <b>2022</b>. Other structures may be present. For example, each core <b>2002</b> may include vector unit circuitry, single instruction multiple data (SIMD) unit circuitry, load/store unit (LSU) circuitry, branch/jump unit circuitry, floating-point unit (FPU) circuitry, etc. The control unit circuitry <b>2014</b> includes semiconductor-based circuits structured to control (e.g., coordinate) data movement within the corresponding core <b>2002</b>. The AL circuitry <b>2016</b> includes semiconductor-based circuits structured to perform one or more mathematic and/or logic operations on the data within the corresponding core <b>2002</b>. The AL circuitry <b>2016</b> of some examples performs integer based operations. In other examples, the AL circuitry <b>2016</b> also performs floating point operations. In yet other examples, the AL circuitry <b>2016</b> may include first AL circuitry that performs integer based operations and second AL circuitry that performs floating point operations. In some examples, the AL circuitry <b>2016</b> may be referred to as an Arithmetic Logic Unit (ALU). The registers <b>2018</b> are semiconductor-based structures to store data and/or instructions such as results of one or more of the operations performed by the AL circuitry <b>2016</b> of the corresponding core <b>2002</b>. For example, the registers <b>2018</b> may include vector register(s), SIMD register(s), general purpose register(s), flag register(s), segment register(s), machine specific register(s), instruction pointer register(s), control register(s), debug register(s), memory management register(s), machine check register(s), etc. The registers <b>2018</b> may be arranged in a bank as shown in <figref idref="DRAWINGS">FIG. <b>20</b></figref>. Alternatively, the registers <b>2018</b> may be organized in any other arrangement, format, or structure including distributed throughout the core <b>2002</b> to shorten access time. The bus <b>2020</b> may implement at least one of an I2C bus, a SPI bus, a PCI bus, or a PCIe bus</p><p id="p-0096" num="0095">Each core <b>2002</b> and/or, more generally, the microprocessor <b>2000</b> may include additional and/or alternate structures to those shown and described above. For example, one or more clock circuits, one or more power supplies, one or more power gates, one or more cache home agents (CHAs), one or more converged/common mesh stops (CMSs), one or more shifters (e.g., barrel shifter(s)) and/or other circuitry may be present. The microprocessor <b>2000</b> is a semiconductor device fabricated to include many transistors interconnected to implement the structures described above in one or more integrated circuits (ICs) contained in one or more packages. The processor circuitry may include and/or cooperate with one or more accelerators. In some examples, accelerators are implemented by logic circuitry to perform certain tasks more quickly and/or efficiently than can be done by a general purpose processor. Examples of accelerators include ASICs and FPGAs such as those discussed herein. A GPU or other programmable device can also be an accelerator. Accelerators may be on-board the processor circuitry, in the same chip package as the processor circuitry and/or in one or more separate packages from the processor circuitry.</p><p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a block diagram of another example implementation of the processor circuitry <b>1912</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>. In this example, the processor circuitry <b>1912</b> is implemented by FPGA circuitry <b>2100</b>. The FPGA circuitry <b>2100</b> can be used, for example, to perform operations that could otherwise be performed by the example microprocessor <b>2000</b> of <figref idref="DRAWINGS">FIG. <b>20</b></figref> executing corresponding machine readable instructions. However, once configured, the FPGA circuitry <b>2100</b> instantiates the machine readable instructions in hardware and, thus, can often execute the operations faster than they could be performed by a general purpose microprocessor executing the corresponding software.</p><p id="p-0098" num="0097">More specifically, in contrast to the microprocessor <b>2000</b> of <figref idref="DRAWINGS">FIG. <b>20</b></figref> described above (which is a general purpose device that may be programmed to execute some or all of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref> but whose interconnections and logic circuitry are fixed once fabricated), the FPGA circuitry <b>2100</b> of the example of <figref idref="DRAWINGS">FIG. <b>21</b></figref> includes interconnections and logic circuitry that may be configured and/or interconnected in different ways after fabrication to instantiate, for example, some or all of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref>. In particular, the FPGA <b>2100</b> may be thought of as an array of logic gates, interconnections, and switches. The switches can be programmed to change how the logic gates are interconnected by the interconnections, effectively forming one or more dedicated logic circuits (unless and until the FPGA circuitry <b>2100</b> is reprogrammed). The configured logic circuits enable the logic gates to cooperate in different ways to perform different operations on data received by input circuitry. Those operations may correspond to some or all of the software represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref>. As such, the FPGA circuitry <b>2100</b> may be structured to effectively instantiate some or all of the machine readable instructions of the flowcharts of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref> as dedicated logic circuits to perform the operations corresponding to those software instructions in a dedicated manner analogous to an ASIC. Therefore, the FPGA circuitry <b>2100</b> may perform the operations corresponding to the some or all of the machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref> faster than the general purpose microprocessor can execute the same.</p><p id="p-0099" num="0098">In the example of <figref idref="DRAWINGS">FIG. <b>21</b></figref>, the FPGA circuitry <b>2100</b> is structured to be programmed (and/or reprogrammed one or more times) by an end user by a hardware description language (HDL) such as Verilog. The FPGA circuitry <b>2100</b> of <figref idref="DRAWINGS">FIG. <b>21</b></figref>, includes example input/output (I/O) circuitry <b>2102</b> to obtain and/or output data to/from example configuration circuitry <b>2104</b> and/or external hardware (e.g., external hardware circuitry) <b>2106</b>. For example, the configuration circuitry <b>2104</b> may implement interface circuitry that may obtain machine readable instructions to configure the FPGA circuitry <b>2100</b>, or portion(s) thereof. In some such examples, the configuration circuitry <b>2104</b> may obtain the machine readable instructions from a user, a machine (e.g., hardware circuitry (e.g., programmed or dedicated circuitry) that may implement an Artificial Intelligence/Machine Learning (AI/ML) model to generate the instructions), etc. In some examples, the external hardware <b>2106</b> may implement the microprocessor <b>2100</b> of <figref idref="DRAWINGS">FIG. <b>21</b></figref>. The FPGA circuitry <b>2100</b> also includes an array of example logic gate circuitry <b>2108</b>, a plurality of example configurable interconnections <b>2110</b>, and example storage circuitry <b>2112</b>. The logic gate circuitry <b>2108</b> and interconnections <b>2110</b> are configurable to instantiate one or more operations that may correspond to at least some of the machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref> and/or other desired operations. The logic gate circuitry <b>2108</b> shown in <figref idref="DRAWINGS">FIG. <b>21</b></figref> is fabricated in groups or blocks. Each block includes semiconductor-based electrical structures that may be configured into logic circuits. In some examples, the electrical structures include logic gates (e.g., And gates, Or gates, Nor gates, etc.) that provide basic building blocks for logic circuits. Electrically controllable switches (e.g., transistors) are present within each of the logic gate circuitry <b>2108</b> to enable configuration of the electrical structures and/or the logic gates to form circuits to perform desired operations. The logic gate circuitry <b>2108</b> may include other electrical structures such as look-up tables (LUTs), registers (e.g., flip-flops or latches), multiplexers, etc.</p><p id="p-0100" num="0099">The interconnections <b>2110</b> of the illustrated example are conductive pathways, traces, vias, or the like that may include electrically controllable switches (e.g., transistors) whose state can be changed by programming (e.g., using an HDL instruction language) to activate or deactivate one or more connections between one or more of the logic gate circuitry <b>2108</b> to program desired logic circuits.</p><p id="p-0101" num="0100">The storage circuitry <b>2112</b> of the illustrated example is structured to store result(s) of the one or more of the operations performed by corresponding logic gates. The storage circuitry <b>2112</b> may be implemented by registers or the like. In the illustrated example, the storage circuitry <b>2112</b> is distributed amongst the logic gate circuitry <b>2108</b> to facilitate access and increase execution speed.</p><p id="p-0102" num="0101">The example FPGA circuitry <b>2100</b> of <figref idref="DRAWINGS">FIG. <b>21</b></figref> also includes example Dedicated Operations Circuitry <b>2114</b>. In this example, the Dedicated Operations Circuitry <b>2114</b> includes special purpose circuitry <b>2116</b> that may be invoked to implement commonly used functions to avoid the need to program those functions in the field. Examples of such special purpose circuitry <b>2116</b> include memory (e.g., DRAM) controller circuitry, PCIe controller circuitry, clock circuitry, transceiver circuitry, memory, and multiplier-accumulator circuitry. Other types of special purpose circuitry may be present. In some examples, the FPGA circuitry <b>2100</b> may also include example general purpose programmable circuitry <b>2118</b> such as an example CPU <b>2120</b> and/or an example DSP <b>2122</b>. Other general purpose programmable circuitry <b>2118</b> may additionally or alternatively be present such as a GPU, an XPU, etc., that can be programmed to perform other operations.</p><p id="p-0103" num="0102">Although <figref idref="DRAWINGS">FIGS. <b>20</b> and <b>21</b></figref> illustrate two example implementations of the processor circuitry <b>1912</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, many other approaches are contemplated. For example, as mentioned above, modern FPGA circuitry may include an on-board CPU, such as one or more of the example CPU <b>2120</b> of <figref idref="DRAWINGS">FIG. <b>21</b></figref>. Therefore, the processor circuitry <b>1912</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref> may additionally be implemented by combining the example microprocessor <b>2000</b> of <figref idref="DRAWINGS">FIG. <b>20</b></figref> and the example FPGA circuitry <b>2100</b> of <figref idref="DRAWINGS">FIG. <b>21</b></figref>. In some such hybrid examples, a first portion of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref> may be executed by one or more of the cores <b>2002</b> of <figref idref="DRAWINGS">FIG. <b>20</b></figref> and a second portion of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref> may be executed by the FPGA circuitry <b>2100</b> of <figref idref="DRAWINGS">FIG. <b>21</b></figref>.</p><p id="p-0104" num="0103">In some examples, the processor circuitry <b>1912</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref> may be in one or more packages. For example, the processor circuitry <b>2000</b> of <figref idref="DRAWINGS">FIG. <b>20</b></figref> and/or the FPGA circuitry <b>2100</b> of <figref idref="DRAWINGS">FIG. <b>21</b></figref> may be in one or more packages. In some examples, an XPU may be implemented by the processor circuitry <b>1912</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, which may be in one or more packages. For example, the XPU may include a CPU in one package, a DSP in another package, a GPU in yet another package, and an FPGA in still yet another package.</p><p id="p-0105" num="0104">A block diagram illustrating an example software distribution platform <b>2205</b> to distribute software such as the example machine readable instructions <b>1932</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref> to hardware devices owned and/or operated by third parties is illustrated in <figref idref="DRAWINGS">FIG. <b>22</b></figref>. The example software distribution platform <b>2205</b> may be implemented by any computer server, data facility, cloud service, etc., capable of storing and transmitting software to other computing devices. The third parties may be customers of the entity owning and/or operating the software distribution platform <b>2205</b>. For example, the entity that owns and/or operates the software distribution platform <b>2205</b> may be a developer, a seller, and/or a licensor of software such as the example machine readable instructions <b>1932</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>. The third parties may be consumers, users, retailers, OEMs, etc., who purchase and/or license the software for use and/or re-sale and/or sub-licensing. In the illustrated example, the software distribution platform <b>2205</b> includes one or more servers and one or more storage devices. The storage devices store the machine readable instructions <b>1932</b>, which may correspond to the example machine readable instructions <b>1200</b> and <b>1300</b> of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>13</b></figref>, as described above. The one or more servers of the example software distribution platform <b>2205</b> are in communication with a network <b>2210</b>, which may correspond to any one or more of the Internet and/or any of the example networks <b>1926</b> described above. In some examples, the one or more servers are responsive to requests to transmit the software to a requesting party as part of a commercial transaction. Payment for the delivery, sale, and/or license of the software may be handled by the one or more servers of the software distribution platform and/or by a third party payment entity. The servers enable purchasers and/or licensors to download the machine readable instructions <b>1932</b> from the software distribution platform <b>2205</b>. For example, the software, which may correspond to the example machine readable instructions <b>1932</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, may be downloaded to the example processor platform <b>1900</b>, which is to execute the machine readable instructions <b>1932</b> to implement the line detection framework circuitry <b>400</b>. In some example, one or more servers of the software distribution platform <b>2205</b> periodically offer, transmit, and/or force updates to the software (e.g., the example machine readable instructions <b>1932</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>) to ensure improvements, patches, updates, etc., are distributed and applied to the software at the end user devices.</p><p id="p-0106" num="0105">From the foregoing, it will be appreciated that example systems, methods, apparatus, and articles of manufacture have been disclosed that detect lines from OCR text. The disclosed systems, methods, apparatus, and articles of manufacture improve the efficiency of using a computing device by improving the accuracy of computer vision and reducing errors in line detection in media such as receipts with gaps in between words. The disclosed systems, methods, apparatus, and articles of manufacture are accordingly directed to one or more improvement(s) in the operation of a machine such as a computer or other electronic and/or mechanical device.</p><p id="p-0107" num="0106">Example methods, apparatus, systems, and articles of manufacture to decode receipts based on neural graph architecture are disclosed herein. Further examples and combinations thereof include the following:</p><p id="p-0108" num="0107">Example 1 includes an apparatus for decoding receipts, the apparatus comprising vertex feature representation circuitry to extract features from optical-character-recognition (OCR) words, polar coordinate circuitry to calculate polar coordinates of the OCR words based on respective ones of the extracted features, graph neural network circuitry to generate an adjacency matrix based on the extracted features, post-processing circuitry to traverse the adjacency matrix to generate cliques of OCR processed words, and output circuitry to generate lines of text based on the cliques of OCR processed words.</p><p id="p-0109" num="0108">Example 2 includes the apparatus as defined in example 1 wherein the vertex feature representation circuitry is to generate a feature graph including a plurality of vertices, wherein the ones of the plurality of vertices correspond to the plurality of features of ones of the plurality of OCR processed words.</p><p id="p-0110" num="0109">Example 3 includes the apparatus as defined in example 2 further including vertex sorter circuitry to sort the ones of the vertices from top-to-bottom, and sort the ones of the vertices from left-to-right.</p><p id="p-0111" num="0110">Example 4 includes the apparatus as defined in example 1, further including clique assembler circuitry to determine a first clique for respective ones of the plurality of OCR processed words.</p><p id="p-0112" num="0111">Example 5 includes the apparatus as defined in example 4, wherein the clique assembler circuitry is to determine a first one of the cliques for ones of the plurality of OCR processed words by computing a double connection between a first word and a second word.</p><p id="p-0113" num="0112">Example 6 includes the apparatus as defined in example 4, wherein the clique assembler circuitry is to determine to not add a second word to a first clique in response to the second word being below the first clique by a threshold distance.</p><p id="p-0114" num="0113">Example 7 includes the apparatus as defined in example 1, wherein the features include at least one of cartesian coordinates, polar coordinates, or slope.</p><p id="p-0115" num="0114">Example 8 includes the apparatus as defined in example 7, wherein the cartesian coordinates and the polar coordinates correspond to the center coordinate of a left point of the word and the center coordinate of a right point of the word.</p><p id="p-0116" num="0115">Example 9 includes the apparatus as defined in example 1, wherein the adjacency matrix returns a value of one if there is a connection between a first word and a second word, and a value of zero if there not a connection between a first word and a second.</p><p id="p-0117" num="0116">Example 10 includes the apparatus as defined in example 1, wherein the polar coordinate circuitry concatenates the polar coordinates to a feature vector.</p><p id="p-0118" num="0117">Example 11 includes the apparatus as defined in example 1, wherein the extracted features for a first word are stored as a first feature vector.</p><p id="p-0119" num="0118">Example 12 includes a non-transitory computer readable medium comprising instructions that, when executed, cause processor circuitry to at least extract features from optical-character-recognition (OCR) words, calculate polar coordinates of the OCR words based on respective ones of the extracted features, generate an adjacency matrix based on the extracted features, traverse the adjacency matrix to generate cliques of OCR processed words, and generate lines of text based on the cliques of OCR processed words.</p><p id="p-0120" num="0119">Example 13 includes the non-transitory computer readable medium as defined in example 12, wherein the instructions are to cause the processor circuitry to generate a feature graph including a plurality of vertices, wherein the ones of the plurality of vertices correspond to the plurality of features of ones of the plurality of OCR processed words.</p><p id="p-0121" num="0120">Example 14 includes the non-transitory computer readable medium as defined in example 13, wherein the instructions are to cause the processor circuitry to sort the ones of the vertices from top-to-bottom, and sort the ones of the vertices from left-to-right.</p><p id="p-0122" num="0121">Example 15 includes the non-transitory computer readable medium as defined in example 12, wherein the instructions are to cause the processor circuitry to determine a first clique for respective ones of the plurality of OCR processed words.</p><p id="p-0123" num="0122">Example 16 includes the non-transitory computer readable medium as defined in example 15, wherein the instructions are to cause the processor circuitry to determine a first one of the cliques for ones of the plurality of OCR processed words by computing a double connection between a first word and a second word.</p><p id="p-0124" num="0123">Example 17 includes the non-transitory computer readable medium as defined in example 15, wherein the instructions are to cause the processor circuitry to determine to not add a second word to a first clique in response to the second word being below the first clique by a threshold distance.</p><p id="p-0125" num="0124">Example 18 includes the non-transitory computer readable medium as defined in example 12, wherein the features include at least one of cartesian coordinates, polar coordinates, or slope.</p><p id="p-0126" num="0125">Example 19 includes the non-transitory computer readable medium as defined in example 18, wherein the cartesian coordinates and the polar coordinates correspond to the center coordinate of a left point of the word and the center coordinate of a right point of the word.</p><p id="p-0127" num="0126">Example 20 includes the non-transitory computer readable medium as defined in example 12, wherein the adjacency matrix returns a value of one if there is a connection between a first word and a second word, and a value of zero if there not a connection between a first word and a second.</p><p id="p-0128" num="0127">Example 21 includes the non-transitory computer readable medium as defined in example 12, wherein the polar coordinate circuitry concatenates the polar coordinates to a feature vector.</p><p id="p-0129" num="0128">Example 22 includes the non-transitory computer readable medium as defined in example 12, wherein the extracted features for a first word are stored as a first feature vector.</p><p id="p-0130" num="0129">Example 23 includes an apparatus for decoding receipts, the apparatus comprising means for extracting features from optical-character-recognition (OCR) words, means for calculating polar coordinates of the OCR words based on respective ones of the extracted features, means for generating an adjacency matrix based on the extracted features, means for traversing the adjacency matrix to generate cliques of OCR processed words, and means for generating lines of text based on the cliques of OCR processed words.</p><p id="p-0131" num="0130">Example 24 includes the apparatus as defined in example 23, the apparatus further including means for generating a feature graph including a plurality of vertices, wherein the ones of the plurality of vertices correspond to the plurality of features of ones of the plurality of OCR processed words.</p><p id="p-0132" num="0131">Example 25 includes the apparatus as defined in example 24, the apparatus further including means for sorting the ones of the vertices from top-to-bottom, and means for sorting the ones of the vertices from left-to-right.</p><p id="p-0133" num="0132">Example 26 includes the apparatus as defined in example 23, the apparatus further including means for determining a first clique for respective ones of the plurality of OCR processed words.</p><p id="p-0134" num="0133">Example 27 includes the apparatus as defined in example 26, the apparatus further including means for determining a first one of the cliques for ones of the plurality of OCR processed words by computing a double connection between a first word and a second word.</p><p id="p-0135" num="0134">Example 28 includes the apparatus as defined in example 26, the apparatus further including means for determining to not add a second word to a first clique in response to the second word being below the first clique by a threshold distance.</p><p id="p-0136" num="0135">Example 29 includes the apparatus as defined in example 23, wherein the features include at least one of cartesian coordinates, polar coordinates, or slope.</p><p id="p-0137" num="0136">Example 30 includes the apparatus as defined in example 29, wherein the cartesian coordinates and the polar coordinates correspond to the center coordinate of a left point of the word and the center coordinate of a right point of the word.</p><p id="p-0138" num="0137">Example 31 includes the apparatus as defined in example 23, wherein the adjacency matrix returns a value of one if there is a connection between a first word and a second word, and a value of zero if there not a connection between a first word and a second.</p><p id="p-0139" num="0138">Example 32 includes the apparatus as defined in example 23, wherein the polar coordinate circuitry concatenates the polar coordinates to a feature vector.</p><p id="p-0140" num="0139">Example 33 includes the apparatus as defined in example 23, wherein the extracted features for a first word are stored as a first feature vector. Although certain example systems, methods, apparatus, and articles of manufacture have been disclosed herein, the scope of coverage of this patent is not limited thereto. On the contrary, this patent covers all systems, methods, apparatus, and articles of manufacture fairly falling within the scope of the claims of this patent.</p><p id="p-0141" num="0140">The following claims are hereby incorporated into this Detailed Description by this reference, with each claim standing on its own as a separate embodiment of the present disclosure.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An apparatus for decoding receipts, the apparatus comprising:<claim-text>vertex feature representation circuitry to extract features from optical-character-recognition (OCR) words;</claim-text><claim-text>polar coordinate circuitry to:<claim-text>calculate polar coordinates of the OCR words based on respective ones of the extracted features;</claim-text></claim-text><claim-text>graph neural network circuitry to generate an adjacency matrix based on the extracted features;</claim-text><claim-text>post-processing circuitry to traverse the adjacency matrix to generate cliques of OCR processed words; and</claim-text><claim-text>output circuitry to generate lines of text based on the cliques of OCR processed words.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The apparatus as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the vertex feature representation circuitry is to generate a feature graph including a plurality of vertices, wherein the ones of the plurality of vertices correspond to the plurality of features of ones of the plurality of OCR processed words.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The apparatus as defined in <claim-ref idref="CLM-00002">claim 2</claim-ref> further including vertex sorter circuitry to:<claim-text>sort the ones of the vertices from top-to-bottom; and</claim-text><claim-text>sort the ones of the vertices from left-to-right.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The apparatus as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further including clique assembler circuitry to:<claim-text>determine a first clique for respective ones of the plurality of OCR processed words.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The apparatus as defined in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the clique assembler circuitry is to determine a first one of the cliques for ones of the plurality of OCR processed words by computing a double connection between a first word and a second word.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The apparatus as defined in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the clique assembler circuitry is to determine to not add a second word to a first clique in response to the second word being below the first clique by a threshold distance.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The apparatus as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the features include at least one of cartesian coordinates, polar coordinates, or slope.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The apparatus as defined in <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the cartesian coordinates and the polar coordinates correspond to the center coordinate of a left point of the word and the center coordinate of a right point of the word.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The apparatus as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the adjacency matrix returns a value of one if there is a connection between a first word and a second word, and a value of zero if there not a connection between a first word and a second.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The apparatus as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the polar coordinate circuitry concatenates the polar coordinates to a feature vector.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. (canceled)</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A non-transitory computer readable medium comprising instructions that, when executed, cause processor circuitry to at least:<claim-text>extract features from optical-character-recognition (OCR) words;</claim-text><claim-text>calculate polar coordinates of the OCR words based on respective ones of the extracted features;</claim-text><claim-text>generate an adjacency matrix based on the extracted features;</claim-text><claim-text>traverse the adjacency matrix to generate cliques of OCR processed words; and</claim-text><claim-text>generate lines of text based on the cliques of OCR processed words.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The non-transitory computer readable medium as defined in <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the instructions are to cause the processor circuitry to generate a feature graph including a plurality of vertices, wherein the ones of the plurality of vertices correspond to the plurality of features of ones of the plurality of OCR processed words.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-transitory computer readable medium as defined in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the instructions are to cause the processor circuitry to:<claim-text>sort the ones of the vertices from top-to-bottom; and</claim-text><claim-text>sort the ones of the vertices from left-to-right.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The non-transitory computer readable medium as defined in <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the instructions are to cause the processor circuitry to determine a first clique for respective ones of the plurality of OCR processed words.</claim-text></claim><claim id="CLM-16-22" num="16-22"><claim-text><b>16</b>.-<b>22</b>. (canceled)</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. An apparatus for decoding receipts, the apparatus comprising:<claim-text>means for extracting features from optical-character-recognition (OCR) words;</claim-text><claim-text>means for calculating polar coordinates of the OCR words based on respective ones of the extracted features;</claim-text><claim-text>means for generating an adjacency matrix based on the extracted features;</claim-text><claim-text>means for traversing the adjacency matrix to generate cliques of OCR processed words; and</claim-text><claim-text>means for generating lines of text based on the cliques of OCR processed words.</claim-text></claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The apparatus as defined in <claim-ref idref="CLM-00023">claim 23</claim-ref>, the apparatus further including means for generating a feature graph including a plurality of vertices, wherein the ones of the plurality of vertices correspond to the plurality of features of ones of the plurality of OCR processed words.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The apparatus as defined in <claim-ref idref="CLM-00024">claim 24</claim-ref>, the apparatus further including: means for sorting the ones of the vertices from top-to-bottom; and</claim-text><claim-text>means for sorting the ones of the vertices from left-to-right.</claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The apparatus as defined in <claim-ref idref="CLM-00023">claim 23</claim-ref>, the apparatus further including means for determining a first clique for respective ones of the plurality of OCR processed words.</claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The apparatus as defined in <claim-ref idref="CLM-00026">claim 26</claim-ref>, the apparatus further including means for determining a first one of the cliques for ones of the plurality of OCR processed words by computing a double connection between a first word and a second word.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The apparatus as defined in <claim-ref idref="CLM-00026">claim 26</claim-ref>, the apparatus further including means for determining to not add a second word to a first clique in response to the second word being below the first clique by a threshold distance.</claim-text></claim><claim id="CLM-29-33" num="29-33"><claim-text><b>29</b>.-<b>33</b>. (canceled)</claim-text></claim></claims></us-patent-application>