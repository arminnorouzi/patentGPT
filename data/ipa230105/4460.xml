<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004461A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004461</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17366955</doc-number><date>20210702</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>10</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1068</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1417</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2201</main-group><subgroup>82</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>71</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEMS AND METHODS FOR USING PATTERN-BASED BIT FLIPS FOR FASTER WRITE AND CONSISTENT ERROR RECOVERY</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Dell Products L.P.</orgname><address><city>Round Rock</city><state>TX</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SURYANARAYANA</last-name><first-name>Shekar Babu</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>JOSHI</last-name><first-name>Anand P.</first-name><address><city>Round Rock</city><state>TX</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Dell Products L.P.</orgname><role>02</role><address><city>Round Rock</city><state>TX</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An information handling system may include a processor and a non-transitory computer-readable medium having stored thereon a program of instructions executable by the processor, the program of instructions configured to, when read and executed by the processor, receive a write request to a non-volatile memory, combine write request data and data patterns associated with the write request into a versioned log and store the versioned log in a persistent memory, and store in the persistent memory patterned-matched bits for single- and multi-bit error recovery code-based recovery.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="157.73mm" wi="158.75mm" file="US20230004461A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="174.75mm" wi="165.86mm" file="US20230004461A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="235.29mm" wi="160.70mm" orientation="landscape" file="US20230004461A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="178.22mm" wi="154.26mm" orientation="landscape" file="US20230004461A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">The present disclosure relates in general to information handling systems, and more particularly to methods and systems for using pattern-based bit flips for faster writes to a storage resource and for consistent error recovery for the storage resource.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">As the value and use of information continues to increase, individuals and businesses seek additional ways to process and store information. One option available to users is information handling systems. An information handling system generally processes, compiles, stores, and/or communicates information or data for business, personal, or other purposes thereby allowing users to take advantage of the value of the information. Because technology and information handling needs and requirements vary between different users or applications, information handling systems may also vary regarding what information is handled, how the information is handled, how much information is processed, stored, or communicated, and how quickly and efficiently the information may be processed, stored, or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transaction processing, airline reservations, enterprise data storage, or global communications. In addition, information handling systems may include a variety of hardware and software components that may be configured to process, store, and communicate information and may include one or more computer systems, data storage systems, and networking systems.</p><p id="p-0004" num="0003">NAND flash technology has enabled information handling systems to provide rich functionalities and is used in a variety of operating system and platform firmware data stores. However, NAND technology does include some disadvantages, such as asymmetric speed of read and write operations, inability to perform in-place updates, limited lifetime, random page write prohibition within a block, and others. Accordingly, an operating system (OS) system management mode (SMM) or runtime services-based write to non-volatile random access memory (NVRAM) implemented using NAND flash may be costly due to the asymmetric read/write access.</p><p id="p-0005" num="0004">Such disadvantages may also lead to other problems, including NVRAM data corruptions due to power failure during firmware update that may be caused due to slower writes, parity mismatch with previous data patterns and current data patterns, and/or other reasons.</p><p id="p-0006" num="0005">Further, NAND flash architectures suffer from a phenomenon known as bit flipping. Bit flipping may occur due to natural wear and aging on memory cells, and may be exacerbated by ambient electromagnetic radiation. An error correction code (ECC) algorithm is often applied to correct bit flips, but during a power failure, the ECC algorithm may fail to correct bit flips, and thus corrupted data may be accessed from the NVRAM, resulting in boot failures.</p><p id="p-0007" num="0006">Accordingly, NVRAM write failures due to single- or multi-bit errors during power failure may be disastrous and recovery of data corruption may be difficult. While hamming code algorithms exist to recover single-bit ECC errors during normal write cycles, none may exist to recover bit corruptions in the failure scenarios described above. Data spread across multiple words and write failure may lead to multiple parity mismatches, with no logging or error detection, further rendering recovery difficult.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0008" num="0007">In accordance with the teachings of the present disclosure, the disadvantages and problems associated with existing approaches to writing data to a storage resource in an information handling system may be reduced or eliminated.</p><p id="p-0009" num="0008">In accordance with embodiments of the present disclosure, an information handling system may include a processor and a non-transitory computer-readable medium having stored thereon a program of instructions executable by the processor, the program of instructions configured to, when read and executed by the processor, receive a write request to a non-volatile memory, combine write request data and data patterns associated with the write request into a versioned log and store the versioned log in a persistent memory, and store in the persistent memory patterned-matched bits for single- and multi-bit error recovery code-based recovery.</p><p id="p-0010" num="0009">In accordance with these and other embodiments of the present disclosure, a method may include receiving a write request to a non-volatile memory of an information handling system, combining write request data and data patterns associated with the write request into a versioned log and storing the versioned log in a persistent memory, and storing in the persistent memory patterned-matched bits for single- and multi-bit error recovery code-based recovery.</p><p id="p-0011" num="0010">In accordance with these and other embodiments of the present disclosure, an article of manufacture may include a non-transitory computer-readable medium and computer-executable instructions carried on the computer readable medium, the instructions readable by a processor, the instructions, when read and executed, for causing the processor to receive a write request to a non-volatile memory of an information handling system; combine write request data and data patterns associated with the write request into a versioned log and store the versioned log in a persistent memory; and store in the persistent memory patterned-matched bits for single- and multi-bit error recovery code-based recovery.</p><p id="p-0012" num="0011">Technical advantages of the present disclosure may be readily apparent to one skilled in the art from the figures, description and claims included herein. The objects and advantages of the embodiments will be realized and achieved at least by the elements, features, and combinations particularly pointed out in the claims.</p><p id="p-0013" num="0012">It is to be understood that both the foregoing general description and the following detailed description are examples and explanatory and are not restrictive of the claims set forth in this disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0014" num="0013">A more complete understanding of the present embodiments and advantages thereof may be acquired by referring to the following description taken in conjunction with the accompanying drawings, in which like reference numbers indicate like features, and wherein:</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a block diagram of an example information handling system, in accordance with embodiments of the present disclosure;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a diagram depicting functionality of a write combined error correction and translation driver, in accordance with embodiments of the present disclosure; and</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a diagram depicting a hybrid cache, in accordance with embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0018" num="0017">Preferred embodiments and their advantages are best understood by reference to <figref idref="DRAWINGS">FIGS. <b>1</b> through <b>3</b></figref>, wherein like numbers are used to indicate like and corresponding parts. For the purposes of this disclosure, an information handling system may include any instrumentality or aggregate of instrumentalities operable to compute, classify, process, transmit, receive, retrieve, originate, switch, store, display, manifest, detect, record, reproduce, handle, or utilize any form of information, intelligence, or data for business, scientific, control, entertainment, or other purposes. For example, an information handling system may be a personal computer, a personal digital assistant (PDA), a consumer electronic device, a network storage device, or any other suitable device and may vary in size, shape, performance, functionality, and price. The information handling system may include memory, one or more processing resources such as a central processing unit (&#x201c;CPU&#x201d;) or hardware or software control logic. Additional components of the information handling system may include one or more storage devices, one or more communications ports for communicating with external devices as well as various input/output (&#x201c;I/O&#x201d;) devices, such as a keyboard, a mouse, and a video display. The information handling system may also include one or more buses operable to transmit communication between the various hardware components.</p><p id="p-0019" num="0018">For the purposes of this disclosure, computer-readable media may include any instrumentality or aggregation of instrumentalities that may retain data and/or instructions for a period of time. Computer-readable media may include, without limitation, storage media such as a direct access storage device (e.g., a hard disk drive or floppy disk), a sequential access storage device (e.g., a tape disk drive), compact disk, CD-ROM, DVD, random access memory (RAM), read-only memory (ROM), electrically erasable programmable read-only memory (EEPROM), and/or flash memory; as well as communications media such as wires, optical fibers, microwaves, radio waves, and other electromagnetic and/or optical carriers; and/or any combination of the foregoing.</p><p id="p-0020" num="0019">For the purposes of this disclosure, information handling resources may broadly refer to any component system, device or apparatus of an information handling system, including without limitation processors, service processors, basic input/output systems (BIOSs), buses, memories, I/O devices and/or interfaces, storage resources, network interfaces, motherboards, and/or any other components and/or elements of an information handling system.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a block diagram of an example information handling system <b>102</b>, in accordance with embodiments of the present disclosure. In some embodiments, information handling system <b>102</b> may comprise a server. In other embodiments, information handling system <b>102</b> may be a personal computer (e.g., a desktop computer, a laptop, notebook, tablet, handheld, smart phone, personal digital assistant, etc.). As depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, information handling system <b>102</b> may include a processor <b>103</b>, a memory <b>104</b> communicatively coupled to processor <b>103</b>, a storage medium <b>106</b> communicatively coupled to processor <b>103</b>, a basic input/output system (BIOS) <b>105</b> communicatively coupled to processor <b>103</b>, a network interface <b>108</b> communicatively coupled to processor <b>103</b>, and one or more other information handling resources <b>120</b> communicatively coupled to processor <b>103</b>.</p><p id="p-0022" num="0021">Processor <b>103</b> may include any system, device, or apparatus configured to interpret and/or execute program instructions and/or process data, and may include, without limitation, a microprocessor, microcontroller, digital signal processor (DSP), application specific integrated circuit (ASIC), or any other digital or analog circuitry configured to interpret and/or execute program instructions and/or process data. In some embodiments, processor <b>103</b> may interpret and/or execute program instructions and/or process data stored in memory <b>104</b>, storage medium <b>106</b>, BIOS <b>105</b>, and/or another component of information handling system <b>102</b>.</p><p id="p-0023" num="0022">Memory <b>104</b> may be communicatively coupled to processor <b>103</b> and may include any system, device, or apparatus configured to retain program instructions and/or data for a period of time (e.g., computer-readable media). Memory <b>104</b> may include RAM, EEPROM, a PCMCIA card, flash memory, magnetic storage, opto-magnetic storage, or any suitable selection and/or array of volatile or non-volatile memory that retains data after power to information handling system <b>102</b> is turned off.</p><p id="p-0024" num="0023">Storage medium <b>106</b> may be communicatively coupled to processor <b>103</b> and may include any system, device, or apparatus operable to store information processed by processor <b>103</b>. Storage medium <b>106</b> may include, for example, network attached storage, one or more direct access storage devices (e.g., hard disk drives), and/or one or more sequential access storage devices (e.g., tape drives).</p><p id="p-0025" num="0024">As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, storage medium <b>106</b> may have stored thereon an operating system (OS) <b>114</b>. OS <b>114</b> may be any program of executable instructions, or aggregation of programs of executable instructions, configured to manage and/or control the allocation and usage of hardware resources such as memory, CPU time, disk space, and input and output devices, and provide an interface between such hardware resources and application programs hosted by OS <b>114</b>. Active portions of OS <b>114</b> may be transferred to memory <b>104</b> for execution by processor <b>103</b>. As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, OS <b>114</b> may include or implement a write combined error correction and translation driver <b>116</b>, which may be referred to herein as &#x201c;driver <b>116</b>.&#x201d;</p><p id="p-0026" num="0025">Driver <b>116</b> may comprise a program of instructions configured to, when loaded into memory <b>104</b> and executed by processor <b>103</b>, provide a software interface to an NVRAM used to store BIOS firmware (e.g., for storing BIOS <b>105</b>) or other firmware of information handling system <b>102</b>. Thus, driver <b>116</b> may enable OS <b>114</b> or other applications executing on information handling system <b>102</b> to access hardware functions of the NVRAM without needing to be aware of precise details about the NVRAM hardware being used.</p><p id="p-0027" num="0026">BIOS <b>105</b> may be communicatively coupled to processor <b>103</b> and may include any system, device, or apparatus configured to identify, test, and/or initialize information handling resources of information handling system <b>102</b>. &#x201c;BIOS&#x201d; may broadly refer to any system, device, or apparatus configured to perform such functionality, including without limitation, a Unified Extensible Firmware Interface (UEFI). In some embodiments, BIOS <b>105</b> may be implemented as a program of instructions that may be read by and executed on processor <b>103</b> to carry out the functionality of BIOS <b>105</b>. In these and other embodiments, BIOS <b>105</b> may comprise boot firmware configured to be the first code executed by processor <b>103</b> when information handling system <b>102</b> is booted and/or powered on. As part of its initialization functionality, code for BIOS <b>105</b> may be configured to set components of information handling system <b>102</b> into a known state, so that one or more applications (e.g., operating system <b>114</b> or other application programs) stored on compatible media (e.g., memory <b>104</b>, storage medium <b>106</b>) may be executed by processor <b>103</b> and given control of information handling system <b>102</b>. In particular embodiments, BIOS <b>105</b> may be implemented as and/or stored in NVRAM implemented using NAND flash. As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, BIOS <b>105</b> may implement an instance of write combined error correction and translation driver <b>116</b>, in addition to (or in lieu of) the instance implemented by operating system <b>114</b>.</p><p id="p-0028" num="0027">Network interface <b>108</b> may include any suitable system, apparatus, or device operable to serve as an interface between information handling system <b>102</b> and a network external to information handling system <b>102</b> (e.g., network <b>210</b> depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref>). Network interface <b>108</b> may allow information handling system <b>102</b> to communicate via an external network using any suitable transmission protocol and/or standard.</p><p id="p-0029" num="0028">Generally speaking, information handling resources <b>120</b> may include any component system, device or apparatus of information handling system <b>102</b>, including without limitation processors, buses, computer-readable media, input-output devices and/or interfaces, storage resources, network interfaces, motherboards, electro-mechanical devices (e.g., fans), displays, batteries, and/or power supplies.</p><p id="p-0030" num="0029">In operation, write combined error correction and translation driver <b>116</b> may implement a write-combined logging over a single- and multi-bit ECC error recovery approach to provide faster writes for OS SMM and pre-boot access and data recovery for an NVRAM storing platform firmware (e.g., BIOS <b>105</b>) of information handling system <b>102</b>. Such approach may combine NVRAM write operations and a data pattern into versioned persistent logging for quick data recovery. For example, patterned matched parity bits for single- and multi-bit ECC error recovery may be utilized for accurate data recovery during boot of information handling system <b>102</b>, and versioned data logging of a data pattern may enable roll back of NVRAM data. Driver <b>116</b> may also enable write data pattern matched bit flipping for optimizing asymmetric write operations to NVRAM to support OS-based SMM quick return from write operations as well as extending the lifetime of the flash device.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a diagram depicting functionality of write combined error correction and translation driver <b>116</b>, in accordance with embodiments of the present disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, driver <b>116</b> may optimize every write operation to NVRAM with combined logging in a hybrid buffer <b>202</b> (e.g., a cache implemented in both random access memory and non-volatile memory) that may be implemented in the form of a ring buffer. For each NVRAM write operation, driver <b>116</b> may write information to hybrid buffer <b>202</b>, then to NVRAM.</p><p id="p-0032" num="0031">As further shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, hybrid buffer <b>202</b> may include a log head pointer <b>204</b> pointing to the head of hybrid buffer <b>202</b> and a log tail pointer <b>206</b> pointing to the end of hybrid buffer <b>202</b>. Driver <b>116</b> may cache every write pattern in the form of a write synchronization (sync) state <b>208</b>, a write pattern sequence <b>210</b>, and a bit flip position indicator <b>212</b>.</p><p id="p-0033" num="0032">Write sync state <b>208</b> may be based on NVRAM data write state and ECC correction index to take optimized data in a log area of hybrid buffer <b>202</b>.</p><p id="p-0034" num="0033">With respect to write pattern sequence <b>210</b>, data patterns for write operations may be monitored based on previous write history and the most recent recoverable patterns may be synchronized for every write operation. Accordingly, an index pattern key with a data log may recover NVRAM block data to a particular time instant. Recovery of data may be 100% guaranteed as the pattern and optimized logs may include a time stamp as a hash and may be persistently logged until the same block is overwritten with new data.</p><p id="p-0035" num="0034">With respect to bit-flip position indicator <b>212</b>, driver <b>116</b> may implement within an NVRAM memory translation module integral to driver <b>116</b>, a multi-bit error correction algorithm based on bit-flip position. Such algorithm may scan based on bit-flip events due to power failure or a memory refresh cycle. The data sequence of bit-flip position indicator <b>212</b> may be overlaid with a pattern-based persistent log of a particular block to retrieve the original bit at an index in order to recover flipped bits, which may guarantee recovery of flipped bits over time in NVRAM.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a diagram depicting a hybrid cache <b>302</b>, in accordance with embodiments of the present disclosure. In some embodiments, hybrid cache <b>302</b> may comprise ring cache <b>202</b>, spread across non-volatile and volatile memory. Hybrid cache <b>302</b> may be implemented over a random access memory area of memory <b>104</b> extended over a non-volatile memory store with most-frequently-accessed patterns <b>304</b> and recently-accessed patterns <b>306</b> implemented in RAM indexing the write-combined logging approach of hybrid buffer <b>202</b> and least-recently accessed patterns <b>308</b> implemented in non-volatile memory.</p><p id="p-0037" num="0036">Accordingly, driver <b>116</b> may overcome hamming code deficiency of ECC only overwrites of traditional approaches. Driver <b>116</b> may implement a pattern extractor that handles operations of NAND write operations in a write buffer for extraction logic based on bit pattern. Thus, the next time the index is fetched as shown in write pattern extractor logic <b>310</b>, the pattern-based correction update may only be made to NVRAM. In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, write pattern extractor logic <b>310</b> may indicate portions of data for which data had changed due to a write operation.</p><p id="p-0038" num="0037">Driver <b>116</b> may also perform a bit-flip segregation within a bit-flip-segregated in-memory queue <b>312</b> for flip indexing and correction based on a write combined log synchronization (sync) <b>314</b> for a write/read operation. Bit-flip-segregated in-memory queue <b>312</b> may indicate portions of data with corrupted bits, and write combined log synchronization (sync) <b>314</b> may indicate the head of a particular word in NVRAM. Such approach may be efficient as a pattern may be known and a cache index may simplify correction for ECC or other failure scenarios.</p><p id="p-0039" num="0038">Driver <b>116</b> may also implement an access synchronization (sync) status <b>316</b> that may implement an optimized in-memory and hybrid-based status synchronization for runtime and persistent status codes. Access sync status <b>316</b> may provide status information indicating whether an operation of driver <b>116</b> was successful for a particular block.</p><p id="p-0040" num="0039">As used herein, when two or more elements are referred to as &#x201c;coupled&#x201d; to one another, such term indicates that such two or more elements are in electronic communication or mechanical communication, as applicable, whether connected indirectly or directly, with or without intervening elements.</p><p id="p-0041" num="0040">This disclosure encompasses all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly, where appropriate, the appended claims encompass all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Moreover, reference in the appended claims to an apparatus or system or a component of an apparatus or system being adapted to, arranged to, capable of, configured to, enabled to, operable to, or operative to perform a particular function encompasses that apparatus, system, or component, whether or not it or that particular function is activated, turned on, or unlocked, as long as that apparatus, system, or component is so adapted, arranged, capable, configured, enabled, operable, or operative. Accordingly, modifications, additions, or omissions may be made to the systems, apparatuses, and methods described herein without departing from the scope of the disclosure. For example, the components of the systems and apparatuses may be integrated or separated. Moreover, the operations of the systems and apparatuses disclosed herein may be performed by more, fewer, or other components and the methods described may include more, fewer, or other steps. Additionally, steps may be performed in any suitable order. As used in this document, &#x201c;each&#x201d; refers to each member of a set or each member of a subset of a set.</p><p id="p-0042" num="0041">Although exemplary embodiments are illustrated in the figures and described below, the principles of the present disclosure may be implemented using any number of techniques, whether currently known or not. The present disclosure should in no way be limited to the exemplary implementations and techniques illustrated in the drawings and described above.</p><p id="p-0043" num="0042">Unless otherwise specifically noted, articles depicted in the drawings are not necessarily drawn to scale.</p><p id="p-0044" num="0043">All examples and conditional language recited herein are intended for pedagogical objects to aid the reader in understanding the disclosure and the concepts contributed by the inventor to furthering the art, and are construed as being without limitation to such specifically recited examples and conditions. Although embodiments of the present disclosure have been described in detail, it should be understood that various changes, substitutions, and alterations could be made hereto without departing from the spirit and scope of the disclosure.</p><p id="p-0045" num="0044">Although specific advantages have been enumerated above, various embodiments may include some, none, or all of the enumerated advantages. Additionally, other technical advantages may become readily apparent to one of ordinary skill in the art after review of the foregoing figures and description.</p><p id="p-0046" num="0045">To aid the Patent Office and any readers of any patent issued on this application in interpreting the claims appended hereto, applicants wish to note that they do not intend any of the appended claims or claim elements to invoke 35 U.S.C. &#xa7; 112(f) unless the words &#x201c;means for&#x201d; or &#x201c;step for&#x201d; are explicitly used in the particular claim.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An information handling system comprising:<claim-text>a processor; and</claim-text><claim-text>a non-transitory computer-readable medium having stored thereon a program of instructions executable by the processor, the program of instructions configured to, when read and executed by the processor:</claim-text><claim-text>respond to receiving a write request to a non-volatile memory by writing information to a hybrid buffer comprising a random access memory portion and a non-volatile portion before writing information to the non-volatile memory;</claim-text><claim-text>combine write request data and data patterns associated with the write request into a versioned log and store the versioned log in a persistent memory; and</claim-text><claim-text>store in the persistent memory patterned-matched bits for single- and multi-bit error recovery code-based recovery,</claim-text><claim-text>optimize every write operation to NVRAM with combined logging in a hybrid buffer <b>202</b> (e.g., a cache implemented in both random access memory and non-volatile memory)</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The information handling system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the non-volatile memory is a non-volatile random access memory for storing firmware of the information handling system.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The information handling system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the non-volatile random access memory is implemented with NAND flash.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The information handling system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the instructions further configured to, in response to corruption of data on the non-volatile memory, recover such data based on the patterned-matched bits.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The information handling system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the instructions further configured to, in response to corruption of data on the non-volatile memory, and based on the versioned log, recover a previous firmware version for booting to an operating system of the information handling system.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. A method comprising:<claim-text>respond to receiving a write request to a non-volatile memory of an information handling system by writing information to a hybrid buffer comprising a random access memory portion and a non-volatile portion before writing information to the non-volatile memory;</claim-text><claim-text>combining write request data and data patterns associated with the write request into a versioned log and storing the versioned log in a persistent memory; and</claim-text><claim-text>storing in the persistent memory patterned-matched bits for single- and multi-bit error recovery code-based recovery.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the non-volatile memory is a non-volatile random access memory for storing firmware of the information handling system.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the non-volatile random access memory is implemented with NAND flash.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising, in response to corruption of data on the non-volatile memory, recovering such data based on the patterned-matched bits.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising, in response to corruption of data on the non-volatile memory, and based on the versioned log, recovering a previous firmware version for booting to an operating system of the information handling system.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. An article of manufacture comprising:<claim-text>a non-transitory computer-readable medium; and</claim-text><claim-text>computer-executable instructions carried on the computer readable medium, the instructions readable by a processor, the instructions, when read and executed, for causing the processor to:<claim-text>respond to receiving a write request to a non-volatile memory of an information handling system by writing information to a hybrid buffer comprising a random access memory portion and a non-volatile portion before writing information to the non-volatile memory;</claim-text><claim-text>combine write request data and data patterns associated with the write request into a versioned log and store the versioned log in a persistent memory; and</claim-text><claim-text>store in the persistent memory patterned-matched bits for single- and multi-bit error recovery code-based recovery.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The article of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the non-volatile memory is a non-volatile random access memory for storing firmware of the information handling system.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The article of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the non-volatile random access memory is implemented with NAND flash.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The article of <claim-ref idref="CLM-00011">claim 11</claim-ref>, the instructions for further causing the processor to, in response to corruption of data on the non-volatile memory, recover such data based on the patterned-matched bits.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The article of <claim-ref idref="CLM-00011">claim 11</claim-ref>, the instructions for further causing the processor to, in response to corruption of data on the non-volatile memory, and based on the versioned log, recover a previous firmware version for booting to an operating system of the information handling system.</claim-text></claim></claims></us-patent-application>