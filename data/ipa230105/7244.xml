<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007245A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007245</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17808933</doc-number><date>20220624</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>117</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>82</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>169</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>186</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>70</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>117</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>82</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>1887</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>1883</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>186</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>70</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHODS AND SYSTEMS FOR CROSS-COMPONENT ADAPTIVE LOOP FILTER</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63215521</doc-number><date>20210628</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>63235111</doc-number><date>20210819</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>Alibaba Singapore Holding Private Limited</orgname><address><city>Singapore</city><country>SG</country></address></addressbook><residence><country>SG</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SARWER</last-name><first-name>Mohammed Golam</first-name><address><city>San Mateo</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>LIAO</last-name><first-name>Ru-Ling</first-name><address><city>San Mateo</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>CHEN</last-name><first-name>Jie</first-name><address><city>San Mateo</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>YE</last-name><first-name>Yan</first-name><address><city>San Mateo</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>LI</last-name><first-name>Xinwei</first-name><address><city>San Mateo</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method for video processing using Cross-Component Adaptive Loop Filter (CCALF) is provided. The method includes filtering decoded video content using a CCALF, wherein the CCALF is a 24-tap 9&#xd7;9 filter.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="91.52mm" wi="158.75mm" file="US20230007245A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="236.56mm" wi="157.73mm" orientation="landscape" file="US20230007245A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="247.90mm" wi="150.28mm" orientation="landscape" file="US20230007245A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="247.90mm" wi="171.96mm" orientation="landscape" file="US20230007245A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="247.90mm" wi="112.35mm" orientation="landscape" file="US20230007245A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="247.90mm" wi="146.64mm" orientation="landscape" file="US20230007245A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="171.79mm" wi="157.48mm" orientation="landscape" file="US20230007245A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="177.29mm" wi="158.58mm" orientation="landscape" file="US20230007245A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="77.98mm" wi="126.15mm" file="US20230007245A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="105.16mm" wi="133.27mm" file="US20230007245A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="212.77mm" wi="153.25mm" file="US20230007245A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="103.97mm" wi="133.18mm" file="US20230007245A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="210.31mm" wi="183.81mm" file="US20230007245A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="115.49mm" wi="183.64mm" file="US20230007245A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="154.86mm" wi="179.92mm" file="US20230007245A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="210.65mm" wi="182.29mm" file="US20230007245A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="218.19mm" wi="182.29mm" file="US20230007245A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="240.54mm" wi="183.98mm" file="US20230007245A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="185.34mm" wi="184.15mm" file="US20230007245A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="225.04mm" wi="182.29mm" file="US20230007245A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="96.86mm" wi="183.98mm" file="US20230007245A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="144.27mm" wi="184.15mm" file="US20230007245A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="121.67mm" wi="135.13mm" file="US20230007245A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="83.40mm" wi="93.22mm" file="US20230007245A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="121.24mm" wi="135.04mm" file="US20230007245A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="165.44mm" wi="165.52mm" file="US20230007245A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="157.65mm" wi="169.08mm" file="US20230007245A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="100.84mm" wi="168.91mm" file="US20230007245A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="213.28mm" wi="167.47mm" file="US20230007245A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="215.90mm" wi="168.91mm" file="US20230007245A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="114.55mm" wi="168.91mm" file="US20230007245A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="69.34mm" wi="135.30mm" file="US20230007245A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00032" num="00032"><img id="EMI-D00032" he="209.47mm" wi="167.13mm" file="US20230007245A1-20230105-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00033" num="00033"><img id="EMI-D00033" he="149.86mm" wi="168.91mm" file="US20230007245A1-20230105-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00034" num="00034"><img id="EMI-D00034" he="151.89mm" wi="168.91mm" file="US20230007245A1-20230105-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00035" num="00035"><img id="EMI-D00035" he="93.22mm" wi="97.11mm" file="US20230007245A1-20230105-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00036" num="00036"><img id="EMI-D00036" he="222.84mm" wi="177.72mm" file="US20230007245A1-20230105-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00037" num="00037"><img id="EMI-D00037" he="201.25mm" wi="177.88mm" file="US20230007245A1-20230105-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00038" num="00038"><img id="EMI-D00038" he="171.70mm" wi="71.71mm" file="US20230007245A1-20230105-D00038.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00039" num="00039"><img id="EMI-D00039" he="71.46mm" wi="180.17mm" file="US20230007245A1-20230105-D00039.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00040" num="00040"><img id="EMI-D00040" he="98.72mm" wi="135.38mm" file="US20230007245A1-20230105-D00040.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00041" num="00041"><img id="EMI-D00041" he="117.52mm" wi="135.04mm" file="US20230007245A1-20230105-D00041.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">The disclosure claims the benefits of priority to U.S. Provisional Application No. 63/215,521, filed on Jun. 28, 2021, and U.S. Provisional Application No. 63/235,111, filed on Aug. 19, 2021, both of which are incorporated herein by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure generally relates to video processing, and more particularly, to methods and systems for cross component loop adaptive filter of video coding.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">A video is a set of static pictures (or &#x201c;frames&#x201d;) capturing the visual information. To reduce the storage memory and the transmission bandwidth, a video can be compressed before storage or transmission and decompressed before display. The compression process is usually referred to as encoding and the decompression process is usually referred to as decoding. There are various video coding formats which use standardized video coding technologies, most commonly based on prediction, transform, quantization, entropy coding and in-loop filtering. The video coding standards, such as the High Efficiency Video Coding (HEVC/H.265) standard, the Versatile Video Coding (VVC/H.266) standard, and AVS standards, specifying the specific video coding formats, are developed by standardization organizations. With more and more advanced video coding technologies being adopted in the video standards, the coding efficiency of the new video coding standards get higher and higher.</p><heading id="h-0004" level="1">SUMMARY OF THE DISCLOSURE</heading><p id="p-0005" num="0004">Embodiments of the present disclosure provide a method for video processing using Cross-Component Adaptive Loop Filter (CCALF). The method includes filtering decoded video content using a CCALF, wherein the CCALF is a 24-tap 9&#xd7;9 filter.</p><p id="p-0006" num="0005">Embodiments of the present disclosure provide a method for video processing using Cross-Component Adaptive Loop Filter (CCALF). The method includes filtering video content using a CCALF, wherein the CCALF is a 24-tap 9&#xd7;9 filter.</p><p id="p-0007" num="0006">Embodiments of the present disclosure provide a non-transitory computer readable medium storing a bitstream. The bitstream includes a first index associated with encoded video data, the first index identifying a Cross-Component Adaptive Loop Filter (CCALF), wherein the CCALF is a 24-tap 9&#xd7;9 filter, and the first index causes a decoder to filter decoded video content using the 24-tap 9&#xd7;9 filter.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007">Embodiments and various aspects of the present disclosure are illustrated in the following detailed description and the accompanying figures. Various features shown in the figures are not drawn to scale.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram illustrating structures of an example video sequence, according to some embodiments of the present disclosure.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a schematic diagram illustrating an exemplary encoding process of a hybrid video coding system, consistent with embodiments of the disclosure.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a schematic diagram illustrating another exemplary encoding process of a hybrid video coding system, consistent with embodiments of the disclosure.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> is a schematic diagram illustrating an exemplary decoding process of a hybrid video coding system, consistent with embodiments of the disclosure.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> is a schematic diagram illustrating another exemplary decoding process of a hybrid video coding system, consistent with embodiments of the disclosure.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of an exemplary apparatus for encoding or decoding a video, according to some embodiments of the present disclosure.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a Cross-Component Adaptive Loop Filter (CCALF) process, according to some embodiments of the present disclosure.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an exemplary CCALF filter shape used in Versatile Video Coding (VVC), according to some embodiments of the present disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a flowchart of an exemplary method for CCALF, according to some embodiments of the present disclosure.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates five exemplary shapes for CCALF, according to some embodiments of the present disclosure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates a flowchart of an exemplary method for signaling a best CCALF filter shape for each coding tree block (CTB) in a slice for which the CCALF is enabled, according to some embodiments of the present disclosure</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows an exemplary semantics for updated CCALF-related syntax elements, according to some embodiments of the present disclosure.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows an exemplary Adaptive Loop Filter (ALF) signaled in adaptation parameter sets (APS) syntax, according to some embodiments of the present disclosure.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows an exemplary updated VVC specification for CCALF process, according to some embodiments of the present disclosure.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>13</b></figref> shows exemplary changes of CCALF-related semantics, according to some embodiments of the present disclosure.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows an exemplary APS syntax table, according to some embodiments of the present disclosure.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates a flowchart of an exemplary method for signaling parameters associated with CCALF, according to some embodiments of the present disclosure.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>16</b></figref> shows an illustration of an exemplary method for block classification, according to some embodiments of the present disclosure.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>17</b></figref> illustrates four computations of the gradients for block classification, according to some embodiments of the present disclosure.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>18</b></figref> shows an example of the APS syntax to signal the filter coefficients for one or more CCALF classes, according to some embodiments of the present disclosure.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>19</b></figref> shows exemplary semantic changes, according to some embodiments of the present disclosure.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>20</b></figref> shows an exemplary updated VVC specification, according to some embodiments of the present disclosure.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>21</b></figref> illustrates a flowchart of a method for signaling filter coefficients using class merging, according to some embodiments of the present disclosure.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>22</b></figref> shows APS syntax of the method for signaling filter coefficients using class merging, according to some embodiments of the present disclosure.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>23</b></figref> shows exemplary semantic changes, according to some embodiments of the present disclosure.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>24</b></figref> illustrates an exemplary 24-tap 9&#xd7;9 filter, according to some embodiments of the present disclosure.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>25</b></figref> shows an exemplary updated VVC specification of the CCALF process using the filter shown in <figref idref="DRAWINGS">FIG. <b>24</b></figref>, according to some embodiments of the present disclosure.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>26</b></figref> shows an exemplary 28-tap filter, according to some embodiments of the present disclosure.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>27</b></figref> shows an exemplary 36-tap filter, according to some embodiments of the present disclosure.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>28</b></figref> shows an exemplary APS syntax table, according to some embodiments of the present disclosure.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>29</b></figref> illustrates a flowchart of an exemplary method for signaling a best filter for each CTB, according to some embodiments of the present disclosure.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>30</b></figref> illustrates a flowchart of an exemplary method for video processing, according to some embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0041" num="0040">Reference will now be made in detail to exemplary embodiments, examples of which are illustrated in the accompanying drawings. The following description refers to the accompanying drawings in which the same numbers in different drawings represent the same or similar elements unless otherwise represented. The implementations set forth in the following description of exemplary embodiments do not represent all implementations consistent with the invention. Instead, they are merely examples of apparatuses and methods consistent with aspects related to the invention as recited in the appended claims. Particular aspects of the present disclosure are described in greater detail below. The terms and definitions provided herein control, if in conflict with terms and/or definitions incorporated by reference.</p><p id="p-0042" num="0041">The Joint Video Experts Team (JVET) of the ITU-T Video Coding Expert Group (ITU-T VCEG) and the ISO/IEC Moving Picture Expert Group (ISO/IEC MPEG) is currently developing the Versatile Video Coding (VVC/H.266) standard. The VVC standard is aimed at doubling the compression efficiency of its predecessor, the High Efficiency Video Coding (HEVC/H.265) standard. In other words, VVC's goal is to achieve the same subjective quality as HEVC/H.265 using half the bandwidth.</p><p id="p-0043" num="0042">To achieve the same subjective quality as HEVC/H.265 using half the bandwidth, the JVET has been developing technologies beyond HEVC using the joint exploration model (JEM) reference software. As coding technologies were incorporated into the JEM, the JEM achieved substantially higher coding performance than HEVC.</p><p id="p-0044" num="0043">The VVC standard has been developed recent, and continues to include more coding technologies that provide better compression performance. VVC is based on the same hybrid video coding system that has been used in modern video compression standards such as HEVC, H.264/AVC, MPEG2, H.263, etc.</p><p id="p-0045" num="0044">A video is a set of static pictures (or &#x201c;frames&#x201d;) arranged in a temporal sequence to store visual information. A video capture device (e.g., a camera) can be used to capture and store those pictures in a temporal sequence, and a video playback device (e.g., a television, a computer, a smartphone, a tablet computer, a video player, or any end-user terminal with a function of display) can be used to display such pictures in the temporal sequence. Also, in some applications, a video capturing device can transmit the captured video to the video playback device (e.g., a computer with a monitor) in real-time, such as for surveillance, conferencing, or live broadcasting.</p><p id="p-0046" num="0045">For reducing the storage space and the transmission bandwidth needed by such applications, the video can be compressed before storage and transmission and decompressed before the display. The compression and decompression can be implemented by software executed by a processor (e.g., a processor of a generic computer) or specialized hardware. The module for compression is generally referred to as an &#x201c;encoder,&#x201d; and the module for decompression is generally referred to as a &#x201c;decoder.&#x201d; The encoder and decoder can be collectively referred to as a &#x201c;codec.&#x201d; The encoder and decoder can be implemented as any of a variety of suitable hardware, software, or a combination thereof. For example, the hardware implementation of the encoder and decoder can include circuitry, such as one or more microprocessors, digital signal processors (DSPs), application-specific integrated circuits (ASICs), field-programmable gate arrays (FPGAs), discrete logic, or any combinations thereof. The software implementation of the encoder and decoder can include program codes, computer-executable instructions, firmware, or any suitable computer-implemented algorithm or process fixed in a computer-readable medium. Video compression and decompression can be implemented by various algorithms or standards, such as MPEG-1, MPEG-2, MPEG-4, H.26x series, or the like. In some applications, the codec can decompress the video from a first coding standard and re-compress the decompressed video using a second coding standard, in which case the codec can be referred to as a &#x201c;transcoder.&#x201d;</p><p id="p-0047" num="0046">The video encoding process can identify and keep useful information that can be used to reconstruct a picture and disregard unimportant information for the reconstruction. If the disregarded, unimportant information cannot be fully reconstructed, such an encoding process can be referred to as &#x201c;lossy.&#x201d; Otherwise, it can be referred to as &#x201c;lossless.&#x201d; Most encoding processes are lossy, which is a tradeoff to reduce the needed storage space and the transmission bandwidth.</p><p id="p-0048" num="0047">The useful information of a picture being encoded (referred to as a &#x201c;current picture&#x201d;) include changes with respect to a reference picture (e.g., a picture previously encoded and reconstructed). Such changes can include position changes, luminosity changes, or color changes of the pixels, among which the position changes are mostly concerned. Position changes of a group of pixels that represent an object can reflect the motion of the object between the reference picture and the current picture.</p><p id="p-0049" num="0048">A picture coded without referencing another picture (i.e., it is its own reference picture) is referred to as an &#x201c;I-picture.&#x201d; A picture is referred to as a &#x201c;P-picture&#x201d; if some or all blocks (e.g., blocks that generally refer to portions of the video picture) in the picture are predicted using intra prediction or inter prediction with one reference picture (e.g., uni-prediction). A picture is referred to as a &#x201c;B-picture&#x201d; if at least one block in it is predicted with two reference pictures (e.g., bi-prediction).</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates structures of an example video sequence <b>100</b>, according to some embodiments of the present disclosure. Video sequence <b>100</b> can be a live video or a video having been captured and archived. Video <b>100</b> can be a real-life video, a computer-generated video (e.g., computer game video), or a combination thereof (e.g., a real-life video with augmented-reality effects). Video sequence <b>100</b> can be inputted from a video capture device (e.g., a camera), a video archive (e.g., a video file stored in a storage device) containing previously captured video, or a video feed interface (e.g., a video broadcast transceiver) to receive video from a video content provider.</p><p id="p-0051" num="0050">As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, video sequence <b>100</b> can include a series of pictures arranged temporally along a timeline, including pictures <b>102</b>, <b>104</b>, <b>106</b>, and <b>108</b>. Pictures <b>102</b>-<b>106</b> are continuous, and there are more pictures between pictures <b>106</b> and <b>108</b>. In <figref idref="DRAWINGS">FIG. <b>1</b></figref>, picture <b>102</b> is an I-picture, the reference picture of which is picture <b>102</b> itself. Picture <b>104</b> is a P-picture, the reference picture of which is picture <b>102</b>, as indicated by the arrow. Picture <b>106</b> is a B-picture, the reference pictures of which are pictures <b>104</b> and <b>108</b>, as indicated by the arrows. In some embodiments, the reference picture of a picture (e.g., picture <b>104</b>) can be not immediately preceding or following the picture. For example, the reference picture of picture <b>104</b> can be a picture preceding picture <b>102</b>. It should be noted that the reference pictures of pictures <b>102</b>-<b>106</b> are only examples, and the present disclosure does not limit embodiments of the reference pictures as the examples shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0052" num="0051">Typically, video codecs do not encode or decode an entire picture at one time due to the computing complexity of such tasks. Rather, they can split the picture into basic segments, and encode or decode the picture segment by segment. Such basic segments are referred to as basic processing units (&#x201c;BPUs&#x201d;) in the present disclosure. For example, structure <b>110</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an example structure of a picture of video sequence <b>100</b> (e.g., any of pictures <b>102</b>-<b>108</b>). In structure <b>110</b>, a picture is divided into 4&#xd7;4 basic processing units, the boundaries of which are shown as dash lines. In some embodiments, the basic processing units can be referred to as &#x201c;macroblocks&#x201d; in some video coding standards (e.g., MPEG family, H.261, H.263, or H.264/AVC), or as &#x201c;coding tree units&#x201d; (&#x201c;CTUs&#x201d;) in some other video coding standards (e.g., H.265/HEVC or H.266/VVC). The basic processing units can have variable sizes in a picture, such as 128&#xd7;128, 64&#xd7;64, 32&#xd7;32, 16&#xd7;16, 4&#xd7;8, 16&#xd7;32, or any arbitrary shape and size of pixels. The sizes and shapes of the basic processing units can be selected for a picture based on the balance of coding efficiency and levels of details to be kept in the basic processing unit.</p><p id="p-0053" num="0052">The basic processing units can be logical units, which can include a group of different types of video data stored in a computer memory (e.g., in a video frame buffer). For example, a basic processing unit of a color picture can include a luma component (Y) representing achromatic brightness information, one or more chroma components (e.g., Cb and Cr) representing color information, and associated syntax elements, in which the luma and chroma components can have the same size of the basic processing unit. The luma and chroma components can be referred to as &#x201c;coding tree blocks&#x201d; (&#x201c;CTBs&#x201d;) in some video coding standards (e.g., H.265/HEVC or H.266/VVC). Any operation performed to a basic processing unit can be repeatedly performed to each of its luma and chroma components.</p><p id="p-0054" num="0053">Video coding has multiple stages of operations, examples of which are shown in <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> and <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>B</figref>. For each stage, the size of the basic processing units can still be too large for processing, and thus can be further divided into segments referred to as &#x201c;basic processing sub-units&#x201d; in the present disclosure. In some embodiments, the basic processing sub-units can be referred to as &#x201c;blocks&#x201d; in some video coding standards (e.g., MPEG family, H.261, H.263, or H.264/AVC), or as &#x201c;coding units&#x201d; (&#x201c;CUs&#x201d;) in some other video coding standards (e.g., H.265/HEVC or H.266/VVC). A basic processing sub-unit can have the same or smaller size than the basic processing unit. Similar to the basic processing units, basic processing sub-units are also logical units, which can include a group of different types of video data (e.g., Y, Cb, Cr, and associated syntax elements) stored in a computer memory (e.g., in a video frame buffer). Any operation performed to a basic processing sub-unit can be repeatedly performed to each of its luma and chroma components. It should be noted that such division can be performed to further levels depending on processing needs. It should also be noted that different stages can divide the basic processing units using different schemes.</p><p id="p-0055" num="0054">For example, at a mode decision stage (an example of which is shown in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>), the encoder can decide what prediction mode (e.g., intra-picture prediction or inter-picture prediction) to use for a basic processing unit, which can be too large to make such a decision. The encoder can split the basic processing unit into multiple basic processing sub-units (e.g., CUs as in H.265/HEVC or H.266/VVC), and decide a prediction type for each individual basic processing sub-unit.</p><p id="p-0056" num="0055">For another example, at a prediction stage (an example of which is shown in <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref>), the encoder can perform prediction operation at the level of basic processing sub-units (e.g., CUs). However, in some cases, a basic processing sub-unit can still be too large to process. The encoder can further split the basic processing sub-unit into smaller segments (e.g., referred to as &#x201c;prediction blocks&#x201d; or &#x201c;PBs&#x201d; in H.265/HEVC or H.266/VVC), at the level of which the prediction operation can be performed.</p><p id="p-0057" num="0056">For another example, at a transform stage (an example of which is shown in <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref>), the encoder can perform a transform operation for residual basic processing sub-units (e.g., CUs). However, in some cases, a basic processing sub-unit can still be too large to process. The encoder can further split the basic processing sub-unit into smaller segments (e.g., referred to as &#x201c;transform blocks&#x201d; or &#x201c;TBs&#x201d; in H.265/HEVC or H.266/VVC), at the level of which the transform operation can be performed. It should be noted that the division schemes of the same basic processing sub-unit can be different at the prediction stage and the transform stage. For example, in H.265/HEVC or H.266/VVC, the prediction blocks and transform blocks of the same CU can have different sizes and numbers.</p><p id="p-0058" num="0057">In structure <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, basic processing unit <b>112</b> is further divided into 3&#xd7;3 basic processing sub-units, the boundaries of which are shown as dotted lines. Different basic processing units of the same picture can be divided into basic processing sub-units in different schemes.</p><p id="p-0059" num="0058">In some implementations, to provide the capability of parallel processing and error resilience to video encoding and decoding, a picture can be divided into regions for processing, such that, for a region of the picture, the encoding or decoding process can depend on no information from any other region of the picture. In other words, each region of the picture can be processed independently. By doing so, the codec can process different regions of a picture in parallel, thus increasing the coding efficiency. Also, when data of a region is corrupted in the processing or lost in network transmission, the codec can correctly encode or decode other regions of the same picture without reliance on the corrupted or lost data, thus providing the capability of error resilience. In some video coding standards, a picture can be divided into different types of regions. For example, H.265/HEVC and H.266/VVC provide two types of regions: &#x201c;slices&#x201d; and &#x201c;tiles.&#x201d; It should also be noted that different pictures of video sequence <b>100</b> can have different partition schemes for dividing a picture into regions.</p><p id="p-0060" num="0059">For example, in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, structure <b>110</b> is divided into three regions <b>114</b>, <b>116</b>, and <b>118</b>, the boundaries of which are shown as solid lines inside structure <b>110</b>. Region <b>114</b> includes four basic processing units. Each of regions <b>116</b> and <b>118</b> includes six basic processing units. It should be noted that the basic processing units, basic processing sub-units, and regions of structure <b>110</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref> are only examples, and the present disclosure does not limit embodiments thereof.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> illustrates a schematic diagram of an example encoding process <b>200</b>A, consistent with embodiments of the disclosure. For example, the encoding process <b>200</b>A can be performed by an encoder. As shown in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the encoder can encode video sequence <b>202</b> into video bitstream <b>228</b> according to process <b>200</b>A. Similar to video sequence <b>100</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, video sequence <b>202</b> can include a set of pictures (referred to as &#x201c;original pictures&#x201d;) arranged in a temporal order. Similar to structure <b>110</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, each original picture of video sequence <b>202</b> can be divided by the encoder into basic processing units, basic processing sub-units, or regions for processing. In some embodiments, the encoder can perform process <b>200</b>A at the level of basic processing units for each original picture of video sequence <b>202</b>. For example, the encoder can perform process <b>200</b>A in an iterative manner, in which the encoder can encode a basic processing unit in one iteration of process <b>200</b>A. In some embodiments, the encoder can perform process <b>200</b>A in parallel for regions (e.g., regions <b>114</b>-<b>118</b>) of each original picture of video sequence <b>202</b>.</p><p id="p-0062" num="0061">In <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the encoder can feed a basic processing unit (referred to as an &#x201c;original BPU&#x201d;) of an original picture of video sequence <b>202</b> to prediction stage <b>204</b> to generate prediction data <b>206</b> and predicted BPU <b>208</b>. The encoder can subtract predicted BPU <b>208</b> from the original BPU to generate residual BPU <b>210</b>. The encoder can feed residual BPU <b>210</b> to transform stage <b>212</b> and quantization stage <b>214</b> to generate quantized transform coefficients <b>216</b>. The encoder can feed prediction data <b>206</b> and quantized transform coefficients <b>216</b> to binary coding stage <b>226</b> to generate video bitstream <b>228</b>. Components <b>202</b>, <b>204</b>, <b>206</b>, <b>208</b>, <b>210</b>, <b>212</b>, <b>214</b>, <b>216</b>, <b>226</b>, and <b>228</b> can be referred to as a &#x201c;forward path.&#x201d; During process <b>200</b>A, after quantization stage <b>214</b>, the encoder can feed quantized transform coefficients <b>216</b> to inverse quantization stage <b>218</b> and inverse transform stage <b>220</b> to generate reconstructed residual BPU <b>222</b>. The encoder can add reconstructed residual BPU <b>222</b> to predicted BPU <b>208</b> to generate prediction reference <b>224</b>, which is used in prediction stage <b>204</b> for the next iteration of process <b>200</b>A. Components <b>218</b>, <b>220</b>, <b>222</b>, and <b>224</b> of process <b>200</b>A can be referred to as a &#x201c;reconstruction path.&#x201d; The reconstruction path can be used to ensure that both the encoder and the decoder use the same reference data for prediction.</p><p id="p-0063" num="0062">The encoder can perform process <b>200</b>A iteratively to encode each original BPU of the original picture (in the forward path) and generate predicted reference <b>224</b> for encoding the next original BPU of the original picture (in the reconstruction path). After encoding all original BPUs of the original picture, the encoder can proceed to encode the next picture in video sequence <b>202</b>.</p><p id="p-0064" num="0063">Referring to process <b>200</b>A, the encoder can receive video sequence <b>202</b> generated by a video capturing device (e.g., a camera). The term &#x201c;receive&#x201d; used herein can refer to receiving, inputting, acquiring, retrieving, obtaining, reading, accessing, or any action in any manner for inputting data.</p><p id="p-0065" num="0064">At prediction stage <b>204</b>, at a current iteration, the encoder can receive an original BPU and prediction reference <b>224</b>, and perform a prediction operation to generate prediction data <b>206</b> and predicted BPU <b>208</b>. Prediction reference <b>224</b> can be generated from the reconstruction path of the previous iteration of process <b>200</b>A. The purpose of prediction stage <b>204</b> is to reduce information redundancy by extracting prediction data <b>206</b> that can be used to reconstruct the original BPU as predicted BPU <b>208</b> from prediction data <b>206</b> and prediction reference <b>224</b>.</p><p id="p-0066" num="0065">Ideally, predicted BPU <b>208</b> can be identical to the original BPU. However, due to non-ideal prediction and reconstruction operations, predicted BPU <b>208</b> is generally slightly different from the original BPU. For recording such differences, after generating predicted BPU <b>208</b>, the encoder can subtract it from the original BPU to generate residual BPU <b>210</b>. For example, the encoder can subtract values (e.g., greyscale values or RGB values) of pixels of predicted BPU <b>208</b> from values of corresponding pixels of the original BPU. Each pixel of residual BPU <b>210</b> can have a residual value as a result of such subtraction between the corresponding pixels of the original BPU and predicted BPU <b>208</b>. Compared with the original BPU, prediction data <b>206</b> and residual BPU <b>210</b> can have fewer bits, but they can be used to reconstruct the original BPU without significant quality deterioration. Thus, the original BPU is compressed.</p><p id="p-0067" num="0066">To further compress residual BPU <b>210</b>, at transform stage <b>212</b>, the encoder can reduce spatial redundancy of residual BPU <b>210</b> by decomposing it into a set of two-dimensional &#x201c;base patterns,&#x201d; each base pattern being associated with a &#x201c;transform coefficient.&#x201d; The base patterns can have the same size (e.g., the size of residual BPU <b>210</b>). Each base pattern can represent a variation frequency (e.g., frequency of brightness variation) component of residual BPU <b>210</b>. None of the base patterns can be reproduced from any combinations (e.g., linear combinations) of any other base patterns. In other words, the decomposition can decompose variations of residual BPU <b>210</b> into a frequency domain. Such a decomposition is analogous to a discrete Fourier transform of a function, in which the base patterns are analogous to the base functions (e.g., trigonometry functions) of the discrete Fourier transform, and the transform coefficients are analogous to the coefficients associated with the base functions.</p><p id="p-0068" num="0067">Different transform algorithms can use different base patterns. Various transform algorithms can be used at transform stage <b>212</b>, such as, for example, a discrete cosine transform, a discrete sine transform, or the like. The transform at transform stage <b>212</b> is invertible. That is, the encoder can restore residual BPU <b>210</b> by an inverse operation of the transform (referred to as an &#x201c;inverse transform&#x201d;). For example, to restore a pixel of residual BPU <b>210</b>, the inverse transform can be multiplying values of corresponding pixels of the base patterns by respective associated coefficients and adding the products to produce a weighted sum. For a video coding standard, both the encoder and decoder can use the same transform algorithm (thus the same base patterns). Thus, the encoder can record only the transform coefficients, from which the decoder can reconstruct residual BPU <b>210</b> without receiving the base patterns from the encoder. Compared with residual BPU <b>210</b>, the transform coefficients can have fewer bits, but they can be used to reconstruct residual BPU <b>210</b> without significant quality deterioration. Thus, residual BPU <b>210</b> is further compressed.</p><p id="p-0069" num="0068">The encoder can further compress the transform coefficients at quantization stage <b>214</b>. In the transform process, different base patterns can represent different variation frequencies (e.g., brightness variation frequencies). Because human eyes are generally better at recognizing low-frequency variation, the encoder can disregard information of high-frequency variation without causing significant quality deterioration in decoding. For example, at quantization stage <b>214</b>, the encoder can generate quantized transform coefficients <b>216</b> by dividing each transform coefficient by an integer value (referred to as a &#x201c;quantization scale factor&#x201d;) and rounding the quotient to its nearest integer. After such an operation, some transform coefficients of the high-frequency base patterns can be converted to zero, and the transform coefficients of the low-frequency base patterns can be converted to smaller integers. The encoder can disregard the zero-value quantized transform coefficients <b>216</b>, by which the transform coefficients are further compressed. The quantization process is also invertible, in which quantized transform coefficients <b>216</b> can be reconstructed to the transform coefficients in an inverse operation of the quantization (referred to as &#x201c;inverse quantization&#x201d;).</p><p id="p-0070" num="0069">Because the encoder disregards the remainders of such divisions in the rounding operation, quantization stage <b>214</b> can be lossy. Typically, quantization stage <b>214</b> can contribute the most information loss in process <b>200</b>A. The larger the information loss is, the fewer bits the quantized transform coefficients <b>216</b> can need. For obtaining different levels of information loss, the encoder can use different values of the quantization parameter or any other parameter of the quantization process.</p><p id="p-0071" num="0070">At binary coding stage <b>226</b>, the encoder can encode prediction data <b>206</b> and quantized transform coefficients <b>216</b> using a binary coding technique, such as, for example, entropy coding, variable length coding, arithmetic coding, Huffman coding, context-adaptive binary arithmetic coding, or any other lossless or lossy compression algorithm. In some embodiments, besides prediction data <b>206</b> and quantized transform coefficients <b>216</b>, the encoder can encode other information at binary coding stage <b>226</b>, such as, for example, a prediction mode used at prediction stage <b>204</b>, parameters of the prediction operation, a transform type at transform stage <b>212</b>, parameters of the quantization process (e.g., quantization parameters), an encoder control parameter (e.g., a bitrate control parameter), or the like. The encoder can use the output data of binary coding stage <b>226</b> to generate video bitstream <b>228</b>. In some embodiments, video bitstream <b>228</b> can be further packetized for network transmission.</p><p id="p-0072" num="0071">Referring to the reconstruction path of process <b>200</b>A, at inverse quantization stage <b>218</b>, the encoder can perform inverse quantization on quantized transform coefficients <b>216</b> to generate reconstructed transform coefficients. At inverse transform stage <b>220</b>, the encoder can generate reconstructed residual BPU <b>222</b> based on the reconstructed transform coefficients. The encoder can add reconstructed residual BPU <b>222</b> to predicted BPU <b>208</b> to generate prediction reference <b>224</b> that is to be used in the next iteration of process <b>200</b>A.</p><p id="p-0073" num="0072">It should be noted that other variations of the process <b>200</b>A can be used to encode video sequence <b>202</b>. In some embodiments, stages of process <b>200</b>A can be performed by the encoder in different orders. In some embodiments, one or more stages of process <b>200</b>A can be combined into a single stage. In some embodiments, a single stage of process <b>200</b>A can be divided into multiple stages. For example, transform stage <b>212</b> and quantization stage <b>214</b> can be combined into a single stage. In some embodiments, process <b>200</b>A can include additional stages. In some embodiments, process <b>200</b>A can omit one or more stages in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>.</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> illustrates a schematic diagram of another example encoding process <b>200</b>B, consistent with embodiments of the disclosure. Process <b>200</b>B can be modified from process <b>200</b>A. For example, process <b>200</b>B can be used by an encoder conforming to a hybrid video coding standard (e.g., H.26x series). Compared with process <b>200</b>A, the forward path of process <b>200</b>B additionally includes mode decision stage <b>230</b> and divides prediction stage <b>204</b> into spatial prediction stage <b>2042</b> and temporal prediction stage <b>2044</b>. The reconstruction path of process <b>200</b>B additionally includes loop filter stage <b>232</b> and buffer <b>234</b>.</p><p id="p-0075" num="0074">Generally, prediction techniques can be categorized into two types: spatial prediction and temporal prediction. Spatial prediction (e.g., an intra-picture prediction or &#x201c;intra prediction&#x201d;) can use pixels from one or more already coded neighboring BPUs in the same picture to predict the current BPU. That is, prediction reference <b>224</b> in the spatial prediction can include the neighboring BPUs. The spatial prediction can reduce the inherent spatial redundancy of the picture. Temporal prediction (e.g., an inter-picture prediction or &#x201c;inter prediction&#x201d;) can use regions from one or more already coded pictures to predict the current BPU. That is, prediction reference <b>224</b> in the temporal prediction can include the coded pictures. The temporal prediction can reduce the inherent temporal redundancy of the pictures.</p><p id="p-0076" num="0075">Referring to process <b>200</b>B, in the forward path, the encoder performs the prediction operation at spatial prediction stage <b>2042</b> and temporal prediction stage <b>2044</b>. For example, at spatial prediction stage <b>2042</b>, the encoder can perform the intra prediction. For an original BPU of a picture being encoded, prediction reference <b>224</b> can include one or more neighboring BPUs that have been encoded (in the forward path) and reconstructed (in the reconstructed path) in the same picture. The encoder can generate predicted BPU <b>208</b> by extrapolating the neighboring BPUs. The extrapolation technique can include, for example, a linear extrapolation or interpolation, a polynomial extrapolation or interpolation, or the like. In some embodiments, the encoder can perform the extrapolation at the pixel level, such as by extrapolating values of corresponding pixels for each pixel of predicted BPU <b>208</b>. The neighboring BPUs used for extrapolation can be located with respect to the original BPU from various directions, such as in a vertical direction (e.g., on top of the original BPU), a horizontal direction (e.g., to the left of the original BPU), a diagonal direction (e.g., to the down-left, down-right, up-left, or up-right of the original BPU), or any direction defined in the used video coding standard. For the intra prediction, prediction data <b>206</b> can include, for example, locations (e.g., coordinates) of the used neighboring BPUs, sizes of the used neighboring BPUs, parameters of the extrapolation, a direction of the used neighboring BPUs with respect to the original BPU, or the like.</p><p id="p-0077" num="0076">For another example, at temporal prediction stage <b>2044</b>, the encoder can perform the inter prediction. For an original BPU of a current picture, prediction reference <b>224</b> can include one or more pictures (referred to as &#x201c;reference pictures&#x201d;) that have been encoded (in the forward path) and reconstructed (in the reconstructed path). In some embodiments, a reference picture can be encoded and reconstructed BPU by BPU. For example, the encoder can add reconstructed residual BPU <b>222</b> to predicted BPU <b>208</b> to generate a reconstructed BPU. When all reconstructed BPUs of the same picture are generated, the encoder can generate a reconstructed picture as a reference picture. The encoder can perform an operation of &#x201c;motion estimation&#x201d; to search for a matching region in a scope (referred to as a &#x201c;search window&#x201d;) of the reference picture. The location of the search window in the reference picture can be determined based on the location of the original BPU in the current picture. For example, the search window can be centered at a location having the same coordinates in the reference picture as the original BPU in the current picture and can be extended out for a predetermined distance. When the encoder identifies (e.g., by using a pel-recursive algorithm, a block-matching algorithm, or the like) a region similar to the original BPU in the search window, the encoder can determine such a region as the matching region. The matching region can have different dimensions (e.g., being smaller than, equal to, larger than, or in a different shape) from the original BPU. Because the reference picture and the current picture are temporally separated in the timeline (e.g., as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>), it can be deemed that the matching region &#x201c;moves&#x201d; to the location of the original BPU as time goes by. The encoder can record the direction and distance of such a motion as a &#x201c;motion vector.&#x201d; When multiple reference pictures are used (e.g., as picture <b>106</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>), the encoder can search for a matching region and determine its associated motion vector for each reference picture. In some embodiments, the encoder can assign weights to pixel values of the matching regions of respective matching reference pictures.</p><p id="p-0078" num="0077">The motion estimation can be used to identify various types of motions, such as, for example, translations, rotations, zooming, or the like. For inter prediction, prediction data <b>206</b> can include, for example, locations (e.g., coordinates) of the matching region, the motion vectors associated with the matching region, the number of reference pictures, weights associated with the reference pictures, or the like.</p><p id="p-0079" num="0078">For generating predicted BPU <b>208</b>, the encoder can perform an operation of &#x201c;motion compensation.&#x201d; The motion compensation can be used to reconstruct predicted BPU <b>208</b> based on prediction data <b>206</b> (e.g., the motion vector) and prediction reference <b>224</b>. For example, the encoder can move the matching region of the reference picture according to the motion vector, in which the encoder can predict the original BPU of the current picture. When multiple reference pictures are used (e.g., as picture <b>106</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>), the encoder can move the matching regions of the reference pictures according to the respective motion vectors and average pixel values of the matching regions. In some embodiments, if the encoder has assigned weights to pixel values of the matching regions of respective matching reference pictures, the encoder can add a weighted sum of the pixel values of the moved matching regions.</p><p id="p-0080" num="0079">In some embodiments, the inter prediction can be unidirectional or bidirectional. Unidirectional inter predictions can use one or more reference pictures in the same temporal direction with respect to the current picture. For example, picture <b>104</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a unidirectional inter-predicted picture, in which the reference picture (e.g., picture <b>102</b>) precedes picture <b>104</b>. Bidirectional inter predictions can use one or more reference pictures at both temporal directions with respect to the current picture. For example, picture <b>106</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a bidirectional inter-predicted picture, in which the reference pictures (e.g., pictures <b>104</b> and <b>108</b>) are at both temporal directions with respect to picture <b>104</b>.</p><p id="p-0081" num="0080">Still referring to the forward path of process <b>200</b>B, after spatial prediction <b>2042</b> and temporal prediction stage <b>2044</b>, at mode decision stage <b>230</b>, the encoder can select a prediction mode (e.g., one of the intra prediction or the inter prediction) for the current iteration of process <b>200</b>B. For example, the encoder can perform a rate-distortion optimization technique, in which the encoder can select a prediction mode to minimize a value of a cost function depending on a bit rate of a candidate prediction mode and distortion of the reconstructed reference picture under the candidate prediction mode. Depending on the selected prediction mode, the encoder can generate the corresponding predicted BPU <b>208</b> and predicted data <b>206</b>.</p><p id="p-0082" num="0081">In the reconstruction path of process <b>200</b>B, if intra prediction mode has been selected in the forward path, after generating prediction reference <b>224</b> (e.g., the current BPU that has been encoded and reconstructed in the current picture), the encoder can directly feed prediction reference <b>224</b> to spatial prediction stage <b>2042</b> for later usage (e.g., for extrapolation of a next BPU of the current picture). The encoder can feed prediction reference <b>224</b> to loop filter stage <b>232</b>, at which the encoder can apply a loop filter to prediction reference <b>224</b> to reduce or eliminate distortion (e.g., blocking artifacts) introduced during coding of the prediction reference <b>224</b>. The encoder can apply various loop filter techniques at loop filter stage <b>232</b>, such as, for example, deblocking, sample adaptive offsets (SAO), adaptive loop filters (ALF), or the like. The loop-filtered reference picture can be stored in buffer <b>234</b> (or &#x201c;decoded picture buffer&#x201d;) for later use (e.g., to be used as an inter-prediction reference picture for a future picture of video sequence <b>202</b>). The encoder can store one or more reference pictures in buffer <b>234</b> to be used at temporal prediction stage <b>2044</b>. In some embodiments, the encoder can encode parameters of the loop filter (e.g., a loop filter strength) at binary coding stage <b>226</b>, along with quantized transform coefficients <b>216</b>, prediction data <b>206</b>, and other information.</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> illustrates a schematic diagram of an example decoding process <b>300</b>A, consistent with embodiments of the disclosure. Process <b>300</b>A can be a decompression process corresponding to the compression process <b>200</b>A in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. In some embodiments, process <b>300</b>A can be similar to the reconstruction path of process <b>200</b>A. A decoder can decode video bitstream <b>228</b> into video stream <b>304</b> according to process <b>300</b>A. Video stream <b>304</b> can be very similar to video sequence <b>202</b>. However, due to the information loss in the compression and decompression process (e.g., quantization stage <b>214</b> in <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref>), generally, video stream <b>304</b> is not identical to video sequence <b>202</b>. Similar to processes <b>200</b>A and <b>200</b>B in <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref>, the decoder can perform process <b>300</b>A at the level of basic processing units (BPUs) for each picture encoded in video bitstream <b>228</b>. For example, the decoder can perform process <b>300</b>A in an iterative manner, in which the decoder can decode a basic processing unit in one iteration of process <b>300</b>A. In some embodiments, the decoder can perform process <b>300</b>A in parallel for regions (e.g., regions <b>114</b>-<b>118</b>) of each picture encoded in video bitstream <b>228</b>.</p><p id="p-0084" num="0083">In <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the decoder can feed a portion of video bitstream <b>228</b> associated with a basic processing unit (referred to as an &#x201c;encoded BPU&#x201d;) of an encoded picture to binary decoding stage <b>302</b>. At binary decoding stage <b>302</b>, the decoder can decode the portion into prediction data <b>206</b> and quantized transform coefficients <b>216</b>. The decoder can feed quantized transform coefficients <b>216</b> to inverse quantization stage <b>218</b> and inverse transform stage <b>220</b> to generate reconstructed residual BPU <b>222</b>. The decoder can feed prediction data <b>206</b> to prediction stage <b>204</b> to generate predicted BPU <b>208</b>. The decoder can add reconstructed residual BPU <b>222</b> to predicted BPU <b>208</b> to generate predicted reference <b>224</b>. In some embodiments, predicted reference <b>224</b> can be stored in a buffer (e.g., a decoded picture buffer in a computer memory). The decoder can feed predicted reference <b>224</b> to prediction stage <b>204</b> for performing a prediction operation in the next iteration of process <b>300</b>A.</p><p id="p-0085" num="0084">The decoder can perform process <b>300</b>A iteratively to decode each encoded BPU of the encoded picture and generate predicted reference <b>224</b> for encoding the next encoded BPU of the encoded picture. After decoding all encoded BPUs of the encoded picture, the decoder can output the picture to video stream <b>304</b> for display and proceed to decode the next encoded picture in video bitstream <b>228</b>.</p><p id="p-0086" num="0085">At binary decoding stage <b>302</b>, the decoder can perform an inverse operation of the binary coding technique used by the encoder (e.g., entropy coding, variable length coding, arithmetic coding, Huffman coding, context-adaptive binary arithmetic coding, or any other lossless compression algorithm). In some embodiments, besides prediction data <b>206</b> and quantized transform coefficients <b>216</b>, the decoder can decode other information at binary decoding stage <b>302</b>, such as, for example, a prediction mode, parameters of the prediction operation, a transform type, parameters of the quantization process (e.g., quantization parameters), an encoder control parameter (e.g., a bitrate control parameter), or the like. In some embodiments, if video bitstream <b>228</b> is transmitted over a network in packets, the decoder can depacketize video bitstream <b>228</b> before feeding it to binary decoding stage <b>302</b>.</p><p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> illustrates a schematic diagram of another example decoding process <b>300</b>B, consistent with embodiments of the disclosure. Process <b>300</b>B can be modified from process <b>300</b>A. For example, process <b>300</b>B can be used by a decoder conforming to a hybrid video coding standard (e.g., H.26x series). Compared with process <b>300</b>A, process <b>300</b>B additionally divides prediction stage <b>204</b> into spatial prediction stage <b>2042</b> and temporal prediction stage <b>2044</b>, and additionally includes loop filter stage <b>232</b> and buffer <b>234</b>.</p><p id="p-0088" num="0087">In process <b>300</b>B, for an encoded basic processing unit (referred to as a &#x201c;current BPU&#x201d;) of an encoded picture (referred to as a &#x201c;current picture&#x201d;) that is being decoded, prediction data <b>206</b> decoded from binary decoding stage <b>302</b> by the decoder can include various types of data, depending on what prediction mode was used to encode the current BPU by the encoder. For example, if intra prediction was used by the encoder to encode the current BPU, prediction data <b>206</b> can include a prediction mode indicator (e.g., a flag value) indicative of the intra prediction, parameters of the intra prediction operation, or the like. The parameters of the intra prediction operation can include, for example, locations (e.g., coordinates) of one or more neighboring BPUs used as a reference, sizes of the neighboring BPUs, parameters of extrapolation, a direction of the neighboring BPUs with respect to the original BPU, or the like. For another example, if inter prediction was used by the encoder to encode the current BPU, prediction data <b>206</b> can include a prediction mode indicator (e.g., a flag value) indicative of the inter prediction, parameters of the inter prediction operation, or the like. The parameters of the inter prediction operation can include, for example, the number of reference pictures associated with the current BPU, weights respectively associated with the reference pictures, locations (e.g., coordinates) of one or more matching regions in the respective reference pictures, one or more motion vectors respectively associated with the matching regions, or the like.</p><p id="p-0089" num="0088">Based on the prediction mode indicator, the decoder can decide whether to perform a spatial prediction (e.g., the intra prediction) at spatial prediction stage <b>2042</b> or a temporal prediction (e.g., the inter prediction) at temporal prediction stage <b>2044</b>. The details of performing such spatial prediction or temporal prediction are described in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> and will not be repeated hereinafter. After performing such spatial prediction or temporal prediction, the decoder can generate predicted BPU <b>208</b>. The decoder can add predicted BPU <b>208</b> and reconstructed residual BPU <b>222</b> to generate prediction reference <b>224</b>, as described in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>.</p><p id="p-0090" num="0089">In process <b>300</b>B, the decoder can feed predicted reference <b>224</b> to spatial prediction stage <b>2042</b> or temporal prediction stage <b>2044</b> for performing a prediction operation in the next iteration of process <b>300</b>B. For example, if the current BPU is decoded using the intra prediction at spatial prediction stage <b>2042</b>, after generating prediction reference <b>224</b> (e.g., the decoded current BPU), the decoder can directly feed prediction reference <b>224</b> to spatial prediction stage <b>2042</b> for later usage (e.g., for extrapolation of a next BPU of the current picture). If the current BPU is decoded using the inter prediction at temporal prediction stage <b>2044</b>, after generating prediction reference <b>224</b> (e.g., a reference picture in which all BPUs have been decoded), the decoder can feed prediction reference <b>224</b> to loop filter stage <b>232</b> to reduce or eliminate distortion (e.g., blocking artifacts). The decoder can apply a loop filter to prediction reference <b>224</b>, in a way as described in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>. The loop-filtered reference picture can be stored in buffer <b>234</b> (e.g., a decoded picture buffer in a computer memory) for later use (e.g., to be used as an inter-prediction reference picture for a future encoded picture of video bitstream <b>228</b>). The decoder can store one or more reference pictures in buffer <b>234</b> to be used at temporal prediction stage <b>2044</b>. In some embodiments, prediction data can further include parameters of the loop filter (e.g., a loop filter strength). In some embodiments, prediction data includes parameters of the loop filter when the prediction mode indicator of prediction data <b>206</b> indicates that inter prediction was used to encode the current BPU.</p><p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of an example apparatus <b>400</b> for encoding or decoding a video, consistent with embodiments of the disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, apparatus <b>400</b> can include processor <b>402</b>. When processor <b>402</b> executes instructions described herein, apparatus <b>400</b> can become a specialized machine for video encoding or decoding. Processor <b>402</b> can be any type of circuitry capable of manipulating or processing information. For example, processor <b>402</b> can include any combination of any number of a central processing unit (or &#x201c;CPU&#x201d;), a graphics processing unit (or &#x201c;GPU&#x201d;), a neural processing unit (&#x201c;NPU&#x201d;), a microcontroller unit (&#x201c;MCU&#x201d;), an optical processor, a programmable logic controller, a microcontroller, a microprocessor, a digital signal processor, an intellectual property (IP) core, a Programmable Logic Array (PLA), a Programmable Array Logic (PAL), a Generic Array Logic (GAL), a Complex Programmable Logic Device (CPLD), a Field-Programmable Gate Array (FPGA), a System On Chip (SoC), an Application-Specific Integrated Circuit (ASIC), or the like. In some embodiments, processor <b>402</b> can also be a set of processors grouped as a single logical component. For example, as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, processor <b>402</b> can include multiple processors, including processor <b>402</b><i>a, </i>processor <b>402</b><i>b, </i>and processor <b>402</b><i>n. </i></p><p id="p-0092" num="0091">Apparatus <b>400</b> can also include memory <b>404</b> configured to store data (e.g., a set of instructions, computer codes, intermediate data, or the like). For example, as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the stored data can include program instructions (e.g., program instructions for implementing the stages in processes <b>200</b>A, <b>200</b>B, <b>300</b>A, or <b>300</b>B) and data for processing (e.g., video sequence <b>202</b>, video bitstream <b>228</b>, or video stream <b>304</b>). Processor <b>402</b> can access the program instructions and data for processing (e.g., via bus <b>410</b>), and execute the program instructions to perform an operation or manipulation on the data for processing. Memory <b>404</b> can include a high-speed random-access storage device or a non-volatile storage device. In some embodiments, memory <b>404</b> can include any combination of any number of a random-access memory (RAM), a read-only memory (ROM), an optical disc, a magnetic disk, a hard drive, a solid-state drive, a flash drive, a security digital (SD) card, a memory stick, a compact flash (CF) card, or the like. Memory <b>404</b> can also be a group of memories (not shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>) grouped as a single logical component.</p><p id="p-0093" num="0092">Bus <b>410</b> can be a communication device that transfers data between components inside apparatus <b>400</b>, such as an internal bus (e.g., a CPU-memory bus), an external bus (e.g., a universal serial bus port, a peripheral component interconnect express port), or the like.</p><p id="p-0094" num="0093">For ease of explanation without causing ambiguity, processor <b>402</b> and other data processing circuits are collectively referred to as a &#x201c;data processing circuit&#x201d; in this disclosure. The data processing circuit can be implemented entirely as hardware, or as a combination of software, hardware, or firmware. In addition, the data processing circuit can be a single independent module or can be combined entirely or partially into any other component of apparatus <b>400</b>.</p><p id="p-0095" num="0094">Apparatus <b>400</b> can further include network interface <b>406</b> to provide wired or wireless communication with a network (e.g., the Internet, an intranet, a local area network, a mobile communications network, or the like). In some embodiments, network interface <b>406</b> can include any combination of any number of a network interface controller (NIC), a radio frequency (RF) module, a transponder, a transceiver, a modem, a router, a gateway, a wired network adapter, a wireless network adapter, a Bluetooth adapter, an infrared adapter, a near-field communication (&#x201c;NFC&#x201d;) adapter, a cellular network chip, or the like.</p><p id="p-0096" num="0095">In some embodiments, optionally, apparatus <b>400</b> can further include peripheral interface <b>408</b> to provide a connection to one or more peripheral devices. As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the peripheral device can include, but is not limited to, a cursor control device (e.g., a mouse, a touchpad, or a touchscreen), a keyboard, a display (e.g., a cathode-ray tube display, a liquid crystal display, or a light-emitting diode display), a video input device (e.g., a camera or an input interface coupled to a video archive), or the like.</p><p id="p-0097" num="0096">It should be noted that video codecs (e.g., a codec performing process <b>200</b>A, <b>200</b>B, <b>300</b>A, or <b>300</b>B) can be implemented as any combination of any software or hardware modules in apparatus <b>400</b>. For example, some or all stages of process <b>200</b>A, <b>200</b>B, <b>300</b>A, or <b>300</b>B can be implemented as one or more software modules of apparatus <b>400</b>, such as program instructions that can be loaded into memory <b>404</b>. For another example, some or all stages of process <b>200</b>A, <b>200</b>B, <b>300</b>A, or <b>300</b>B can be implemented as one or more hardware modules of apparatus <b>400</b>, such as a specialized data processing circuit (e.g., an FPGA, an ASIC, an NPU, or the like).</p><p id="p-0098" num="0097">The present disclosure provides methods for signaling and deriving parameters associated with a cross component adaptive loop filter (CCALF).</p><p id="p-0099" num="0098">In VVC, the Adaptive Loop Filter (ALF) with block-based filter adaption is applied. For the luma component, one filter selected from 25 filters is used for each 4&#xd7;4 block, based on the direction and activity of local gradients. In addition to ALF, the Cross Component Adaptive Loop Filter (CCALF) is adopted in VVC. The CCALF is designed to operate in parallel with the luma ALF. A linear filter is used in CCALF to filter luma sample values and generate a residual correction for the chroma samples. <figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a Cross-Component Adaptive Loop Filter (CCALF) process, according to some embodiments of the present disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, reconstructed luma sample <b>511</b> output from the luma Sample Adaptive Offset (SAO) <b>510</b> is taken as an input for luma (Y) ALF <b>520</b>, chroma (Cb) CC-ALF <b>530</b>, and chroma (Cr) CC-ALF <b>540</b>, respectively. Reconstructed chroma samples <b>551</b>, <b>561</b> outputs from the chroma SAO <b>550</b>, <b>560</b>, are taken as inputs for chroma ALF <b>570</b>. Finally, luma sample Y is obtained after the luma ALF <b>520</b>. Chroma sample Cb is obtained by adding a residual correction <b>531</b> output from the Cb CC-ALF <b>530</b> and an output <b>571</b> of the chroma ALF <b>570</b>. Chroma sample Cr is obtained by adding a residual correction <b>541</b> output from the Cr CC-ALF <b>540</b> and an output <b>572</b> of the chroma ALF <b>570</b>.</p><p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an exemplary CCALF filter shape in VVC, according to some embodiments of the present disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, in VVC, an 8-tap hexagon shaped filter <b>600</b> is used in the CCALF process.</p><p id="p-0101" num="0100">However, the CCALF of current VVC design cannot achieve optimal compression performance due to following reasons. A single filter shape may not be optimal for all types of content. In VVC, filter coefficients are restricted to only having values in the form of power of 2, from the following set: {&#x2212;64, &#x2212;32, &#x2212;16, &#x2212;8, &#x2212;4, &#x2212;2, &#x2212;1, 0, 1, 2, 4, 8, 16, 32, 64}. Furthermore, in VVC, same filter coefficients are applied for all type of blocks. However, the correlation between neighboring pixels may depend on the characteristics of the block (such as edge direction, activity etc.).</p><p id="p-0102" num="0101">To improve the compression performance of the CCALF filter, the present disclosure provides methods for shape adaptive cross component filtering.</p><p id="p-0103" num="0102">In VVC, a single filter shape (8-tap hexagon shape filters shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> is used for filtering. However, a correlation between neighboring pixels may depend on characteristics of a video content. A single filter shape is not optimal for all types of content. In the present disclosure, it is proposed to adaptively select the filter shape based on the characteristics of the content. <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a flowchart of an exemplary method <b>700</b> for CCALF, according to some embodiments of the present disclosure. Method <b>700</b> can be performed by an encoder (e.g., by process <b>200</b>A of <figref idref="DRAWINGS">FIG. <b>2</b>A or <b>200</b>B</figref> of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>) or performed by one or more software or hardware components of an apparatus (e.g., apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). For example, a processor (e.g., processor <b>402</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>) can perform method <b>700</b>. In some embodiments, method <b>700</b> can be implemented by a computer program product, embodied in a computer-readable medium, including computer-executable instructions, such as program code, executed by computers (e.g., apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). Referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the method <b>700</b> can include steps S<b>702</b> to S<b>706</b>.</p><p id="p-0104" num="0103">At step S<b>702</b>, statistics of a video content is collected and analyzed. For example, direction and activity of gradients of luma samples are collected.</p><p id="p-0105" num="0104">At step S<b>704</b>, an optimal filter shape and associated filter coefficients are selected based on the statistics from a set of predefined filter shapes. For example, for each filter shape in the set of predefined filter shapes, a sum of absolute differences (i.e., SAD) is calculated by the filtered chroma samples and the original samples. A filter shape with a minimum SAD is selected as the optimal filter shape.</p><p id="p-0106" num="0105">In some embodiments, the filtered chroma samples can be obtained by following steps: classifying chroma samples into a plurality of classes using the statistics; calculating filter coefficients associated with each class by minimizing a mean square error of reconstructed chroma samples with respect to the original chroma samples; and applying the associated filter coefficients to the reconstructed chroma samples to obtain filtered chroma samples for each class.</p><p id="p-0107" num="0106">In some embodiments, the selection of filter shape is content adaptive, that is the shape of the filter is selected based on the content. The granularity of the selection of shape can be sequence level, and/or frame level, and/or slice level, and/or block level. In some embodiments, multiple shape adaptive cross component filters are provided. <figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates five exemplary shape adaptive cross component filters for CCALF, according to some embodiments of the present disclosure. The proposed shape adaptive cross component filters can be applied with any shape/pattern and are not limit to the shapes described in <figref idref="DRAWINGS">FIG. <b>8</b></figref>. Referring to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the number of taps of the different filter shapes may be same or different. Filter shape4 is the same as the filter <b>600</b> shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. In this example, it is assumed that the filter shapes are pre-defined and known by both encoder and decoder before the encoding/decoding process is performed. In some embodiments, each filter shape can be represented by a shape index (e.g., filters_shape_idx) in syntax. Error! Reference source not found. shows the number of filter taps associated with each shape corresponding to the shape index.</p><p id="p-0108" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Number of taps of each shape defined in FIG. 8 (tap of collocated luma</entry></row><row><entry>position is not counted because filter is implemented as difference)</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="56pt" align="center"/><colspec colname="2" colwidth="98pt" align="center"/><colspec colname="3" colwidth="63pt" align="center"/><tbody valign="top"><row><entry/><entry>filters_shape_idx</entry><entry>noCoeff</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="56pt" align="center"/><colspec colname="2" colwidth="98pt" align="center"/><colspec colname="3" colwidth="63pt" align="char" char="."/><tbody valign="top"><row><entry>Shape0</entry><entry>0</entry><entry>16</entry></row><row><entry>Shape1</entry><entry>1</entry><entry>15</entry></row><row><entry>Shape2</entry><entry>2</entry><entry>11</entry></row><row><entry>Shape3</entry><entry>3</entry><entry>13</entry></row><row><entry>Shape4</entry><entry>4</entry><entry>7</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0109" num="0107">At step S<b>706</b>, one or more parameters indicating the selected filter shape and filter coefficients are signaled, for example, to a decoder. In case of sequence level granularity, the encoder can signal one of the predefined filter shapes to the decoder. Therefore, for a whole sequence, a same filter shape is used for filtering. In case of the frame level granularity, the parameter is signaled for each frame. In case of block level granularity, a frame is divided into multiple non-overlapping blocks, and the parameter is signaled for each block. For the parameter signaled in a frame level or a block level will be further described below.</p><p id="p-0110" num="0108">In some embodiments, the encoder can also signal the total number of predefined filter shapes to the decoder. Alternatively, the total number of filter shapes can be predefined and known for both encoder and decoder before staring encoding/decoding process.</p><p id="p-0111" num="0109">For each frame/slice, N filters and the associated shapes and coefficients are signaled to the decoder. For each CTB, a best filter shape is selected (from the N filters signaled in frame/slice) and signaled to the decoder. <figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates a flowchart of an exemplary method for signaling a best filter shape for each CTB in the slice in CCALF, according to some embodiments of the present disclosure. Method <b>900</b> can be performed by an encoder (e.g., by process <b>200</b>A of <figref idref="DRAWINGS">FIG. <b>2</b>A or <b>200</b>B</figref> of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>) or performed by one or more software or hardware components of an apparatus (e.g., apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). For example, a processor (e.g., processor <b>402</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>) can perform method <b>900</b>. In some embodiments, method <b>900</b> can be implemented by a computer program product, embodied in a computer-readable medium, including computer-executable instructions, such as program code, executed by computers (e.g., apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). Referring to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, the method can include steps S<b>902</b> to S<b>906</b>.</p><p id="p-0112" num="0110">At step S<b>902</b>, a number of filters is signaled. For example, the number of filters is N. Therefore, N filters are expected by the encoder and decoder. A number of filter shapes is also known by both the encoder and decoder.</p><p id="p-0113" num="0111">At step S<b>904</b>, a parameter (e.g., filter_shape_idx) is signaled to indicate each filter, and filter coefficients associated with each filter are signaled. Therefore, the N filters with the associated filter coefficients are known by the decoder.</p><p id="p-0114" num="0112">At step S<b>906</b>, an index (e.g., i) is signaled to indicate the filter to be used for each CTU in the frame/slice. The maximum value of i is N&#x2212;1. The filter to be used is selected from the N filters. With the index, the filter shape and the filter coefficient associated with the selected filter can be determined.</p><p id="p-0115" num="0113">In some embodiments, the filter shape is selected implicitly by both encoder/decoders. For instance, in case of block level implicit filter shape derivation, both encoder/decoders can analyze the reconstructed block (before filtering) and based on the characteristics of the reconstructed block, the filter shape is implicitly derived. That is, the filter shape is determined by both the encoder and decoder based on the video content. Therefore, after step S<b>904</b>, the filter to be used can be determined by the decoder.</p><p id="p-0116" num="0114">Details of the proposed shape adaption method are further described. In the following example, it is assumed that there are 5 filter shapes (e.g., the 5 filter shapes shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>) are predefined and known in both encoder and decoder before starting the decoding process. The maximum value of N is 20. The number of coefficients (e.g., noCoeff[k]) of k-th filter shape is also predefined as follows:</p><p id="p-0117" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>noCoeff[ ]=[16, 15, 11, 13, 7]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0118" num="0115">In VVC, the filter coefficients are signaled in the adaptation parameter sets (APS). In this example, filter coefficients are also signaled in the APS. It should be noted that the filter coefficients are not limited to be signaled through APS only. Alternatively, or additionally, the filter coefficients can be signaled in picture header, and/or slice header etc. For each filter, the shape index is signaled in the bit-stream through APS to indicate the shape of the signaled filter. <figref idref="DRAWINGS">FIG. <b>10</b></figref> shows an exemplary semantics for updated syntax elements, according to some embodiments of the present disclosure. <figref idref="DRAWINGS">FIG. <b>11</b></figref> shows an exemplary ALF APS syntax, according to some embodiments of the present disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, values of the syntax elements alf_cc_cbfilters_shape_idx[k] <b>1010</b> and alf_cc_cr_filters_shape_idx[k] <b>1020</b> are modified. And referring to <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the syntax elements alf_cc_cb_filters_shape_idx[k]and alf_cc_cr_filters_shape_idx[k] are signaled to indicate the shape of the k-th filter <b>1110</b>, <b>1120</b>. Filter coefficients associated with each filter is further signaled <b>1130</b>, <b>1140</b>.</p><p id="p-0119" num="0116"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows an exemplary updated VVC specification for the CCALF process, according to some embodiments of the present disclosure. Consistent with <figref idref="DRAWINGS">FIGS. <b>9</b> to <b>11</b></figref>, as shown in <figref idref="DRAWINGS">FIG. <b>12</b></figref>, the parts in italic show the modification as compared to existing VVC method. Before starting the CCALF process of each CTB, the variable CcAlfShape is derived, which represents the filter shape of the current CTB <b>1210</b>. The filter coefficient and neighboring tap's locations are adaptively selected based on the value of the variable CcAlfShape <b>1220</b>.</p><p id="p-0120" num="0117">The present disclosure also provides methods for removing power of 2 constraint of the filter coefficient values.</p><p id="p-0121" num="0118">In VVC, CCALF filter coefficients are restricted to the values in the form of power of 2, from the following set: {&#x2212;64, &#x2212;32, &#x2212;16, &#x2212;8, &#x2212;4, &#x2212;2, &#x2212;1, 0, 1, 2, 4, 8, 16, 32, 64}. In the present disclosure, it is proposed to remove this constraint to improve the compression performance. In some embodiments, the value of the filter coefficient can be any integer value between &#x2212;64 to +64, inclusive. In some embodiments, the filter coefficients are coded using variable length code (i.e., ue(v) coding), whereas in VVC the mapped coefficients are coded using fixed length code. <figref idref="DRAWINGS">FIG. <b>13</b></figref> shows the changes of semantics as compared to VVC, according to some embodiments of the present disclosure. <figref idref="DRAWINGS">FIG. <b>14</b></figref> shows an exemplary APS syntax table, according to some embodiments of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>13</b></figref>, the constrains for the values of filter coefficients are removed <b>1310</b>. Referring to <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the filter coefficients are coded using variable length code (i.e., ue(v) coding) <b>1410</b>.</p><p id="p-0122" num="0119">The present disclosure also provides methods for block level filter coefficients adaption.</p><p id="p-0123" num="0120">In VVC, the filter coefficients are signaled in the slice level through APS. A same set of filter coefficients may not be optimal for all part of the frame/slice. In some embodiments, the slice is divided into multiple non-overlapping M&#xd7;N blocks. Then, each M&#xd7;N block is classified into one of the predefined classes based on the characteristics of the reconstructed block (before filtering). The block is classified using reconstructed samples before filtering, and the reconstructed samples (before filtering) are already known to the decoder before starting the CCALF process. Therefore, signaling is not required to indicate the class of the block. <figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates a flowchart of a method <b>1500</b> for signaling parameters associated with CCALF, according to some embodiments of the present disclosure. Method <b>1500</b> can be performed by an encoder (e.g., by process <b>200</b>A of <figref idref="DRAWINGS">FIG. <b>2</b>A or <b>200</b>B</figref> of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>) or performed by one or more software or hardware components of an apparatus (e.g., apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). For example, a processor (e.g., processor <b>402</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>) can perform method <b>1500</b>. In some embodiments, method <b>1500</b> can be implemented by a computer program product, embodied in a computer-readable medium, including computer-executable instructions, such as program code, executed by computers (e.g., apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). The method can include steps S<b>1502</b> to S<b>1506</b>.</p><p id="p-0124" num="0121">At step S<b>1502</b>, a plurality of classes are predefined. Classification methods are further described below.</p><p id="p-0125" num="0122">At step S<b>1504</b>, for each frame/slice, statistics of all of the classes are collected.</p><p id="p-0126" num="0123">At step S<b>1506</b>, optimal filters are generated for each class. For example, the optimal filters can be generated based on characteristics of the class.</p><p id="p-0127" num="0124">At step S<b>1508</b>, filter coefficients associated with the optimal filters of each class are signaled in the bit-stream at slice/frame level.</p><p id="p-0128" num="0125">Furthermore, methods for block classification are also provided.</p><p id="p-0129" num="0126"><figref idref="DRAWINGS">FIG. <b>16</b></figref> shows an illustration of a method for block classification, according to some embodiments of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>16</b></figref>, an image is divided into 16 blocks. In this example, before starting the CCALF process, each M&#xd7;N block of luma component can be classified as one of the predefined classes. The maximum number of classes is predefined and known to both encoder and decoder before starting the process.</p><p id="p-0130" num="0127">An example of block classification is described below, where it is assumed that a maximum number of classes is 15 and the classification block size is 4&#xd7;4 as shown in <figref idref="DRAWINGS">FIG. <b>16</b></figref>. In this example, the classification method is similar to the classification of adaptive loop filters of VVC. However, the classification methods in the present disclosure are not limited.</p><p id="p-0131" num="0128">In this example, for luma component, each 4&#xd7;4 block is categorized into one of 15 classes. The classification index C is derived based on its directionality D and a quantized value of activity &#xc2;, as follows:</p><p id="p-0132" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>C=</i>5<i>D+&#xc2;</i><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0133" num="0129">To calculate D and &#xc2;, gradients of the horizontal, vertical and two diagonal directions are first calculated using 1-D Laplacian:</p><p id="p-0134" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mtext>	</mtext>  <mrow>   <mrow>    <msub>     <mi>g</mi>     <mi>&#x3bd;</mi>    </msub>    <mo>=</mo>    <mrow>     <munderover>      <mo>&#x2211;</mo>      <mrow>       <mi>k</mi>       <mo>=</mo>       <mrow>        <mi>i</mi>        <mo>-</mo>        <mn>2</mn>       </mrow>      </mrow>      <mrow>       <mi>i</mi>       <mo>+</mo>       <mn>3</mn>      </mrow>     </munderover>     <mrow>      <munderover>       <mo>&#x2211;</mo>       <mrow>        <mi>l</mi>        <mo>=</mo>        <mrow>         <mi>j</mi>         <mo>-</mo>         <mn>2</mn>        </mrow>       </mrow>       <mrow>        <mi>j</mi>        <mo>+</mo>        <mn>3</mn>       </mrow>      </munderover>      <msub>       <mi>V</mi>       <mrow>        <mi>k</mi>        <mo>,</mo>        <mi>l</mi>       </mrow>      </msub>     </mrow>    </mrow>   </mrow>   <mtext>&#x205f;</mtext>   <mo>,</mo>   <mrow>    <msub>     <mi>V</mi>     <mrow>      <mi>k</mi>      <mo>,</mo>      <mi>l</mi>     </mrow>    </msub>    <mo>=</mo>    <mrow>     <semantics definitionURL="">      <mo>&#x2758;</mo>      <annotation encoding="Mathematica">"\[LeftBracketingBar]"</annotation>     </semantics>     <mrow>      <mrow>       <mn>2</mn>       <mo>&#x2062;</mo>       <mrow>        <mi>R</mi>        <mo>&#x2061;</mo>        <mo>(</mo>        <mrow>         <mi>k</mi>         <mo>,</mo>         <mi>l</mi>        </mrow>        <mo>)</mo>       </mrow>      </mrow>      <mo>-</mo>      <mrow>       <mi>R</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>k</mi>        <mo>,</mo>        <mrow>         <mi>l</mi>         <mo>-</mo>         <mn>1</mn>        </mrow>       </mrow>       <mo>)</mo>      </mrow>      <mo>-</mo>      <mrow>       <mi>R</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>k</mi>        <mo>,</mo>        <mrow>         <mi>l</mi>         <mo>+</mo>         <mn>1</mn>        </mrow>       </mrow>       <mo>)</mo>      </mrow>     </mrow>     <semantics definitionURL="">      <mo>&#x2758;</mo>      <annotation encoding="Mathematica">"\[RightBracketingBar]"</annotation>     </semantics>    </mrow>   </mrow>  </mrow> </mrow></math></maths><maths id="MATH-US-00001-2" num="00001.2"><math overflow="scroll"> <mrow>  <mrow>   <msub>    <mi>g</mi>    <mi>h</mi>   </msub>   <mo>=</mo>   <mrow>    <munderover>     <mo>&#x2211;</mo>     <mrow>      <mi>k</mi>      <mo>=</mo>      <mrow>       <mi>i</mi>       <mo>-</mo>       <mn>2</mn>      </mrow>     </mrow>     <mrow>      <mi>i</mi>      <mo>+</mo>      <mn>3</mn>     </mrow>    </munderover>    <mrow>     <munderover>      <mo>&#x2211;</mo>      <mrow>       <mi>l</mi>       <mo>=</mo>       <mrow>        <mi>j</mi>        <mo>-</mo>        <mn>2</mn>       </mrow>      </mrow>      <mrow>       <mi>j</mi>       <mo>+</mo>       <mn>3</mn>      </mrow>     </munderover>     <msub>      <mi>H</mi>      <mrow>       <mi>k</mi>       <mo>,</mo>       <mi>l</mi>      </mrow>     </msub>    </mrow>   </mrow>  </mrow>  <mo>,</mo>  <mrow>   <msub>    <mi>H</mi>    <mrow>     <mi>k</mi>     <mo>,</mo>     <mi>l</mi>    </mrow>   </msub>   <mo>=</mo>   <mrow>    <semantics definitionURL="">     <mo>&#x2758;</mo>     <annotation encoding="Mathematica">"\[LeftBracketingBar]"</annotation>    </semantics>    <mrow>     <mrow>      <mn>2</mn>      <mo>&#x2062;</mo>      <mrow>       <mi>R</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>k</mi>        <mo>,</mo>        <mi>l</mi>       </mrow>       <mo>)</mo>      </mrow>     </mrow>     <mo>-</mo>     <mrow>      <mi>R</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mrow>       <mrow>        <mi>k</mi>        <mo>-</mo>        <mn>1</mn>       </mrow>       <mo>,</mo>       <mi>l</mi>      </mrow>      <mo>)</mo>     </mrow>     <mo>-</mo>     <mrow>      <mi>R</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mrow>       <mrow>        <mi>k</mi>        <mo>+</mo>        <mn>1</mn>       </mrow>       <mo>,</mo>       <mi>l</mi>      </mrow>      <mo>)</mo>     </mrow>    </mrow>    <semantics definitionURL="">     <mo>&#x2758;</mo>     <annotation encoding="Mathematica">"\[RightBracketingBar]"</annotation>    </semantics>   </mrow>  </mrow> </mrow></math></maths><maths id="MATH-US-00001-3" num="00001.3"><math overflow="scroll"> <mrow>  <mrow>   <msub>    <mi>g</mi>    <mrow>     <mi>d</mi>     <mo>&#x2062;</mo>     <mn>1</mn>    </mrow>   </msub>   <mo>=</mo>   <mrow>    <munderover>     <mo>&#x2211;</mo>     <mrow>      <mi>k</mi>      <mo>=</mo>      <mrow>       <mi>i</mi>       <mo>-</mo>       <mn>2</mn>      </mrow>     </mrow>     <mrow>      <mi>i</mi>      <mo>+</mo>      <mn>3</mn>     </mrow>    </munderover>    <mrow>     <munderover>      <mo>&#x2211;</mo>      <mrow>       <mi>l</mi>       <mo>=</mo>       <mrow>        <mi>j</mi>        <mo>-</mo>        <mn>3</mn>       </mrow>      </mrow>      <mrow>       <mi>j</mi>       <mo>+</mo>       <mn>3</mn>      </mrow>     </munderover>     <mrow>      <mi>D</mi>      <mo>&#x2062;</mo>      <msub>       <mn>1</mn>       <mrow>        <mi>k</mi>        <mo>,</mo>        <mi>l</mi>       </mrow>      </msub>     </mrow>    </mrow>   </mrow>  </mrow>  <mo>,</mo>  <mrow>   <mrow>    <mi>D</mi>    <mo>&#x2062;</mo>    <msub>     <mn>1</mn>     <mrow>      <mi>k</mi>      <mo>,</mo>      <mi>l</mi>     </mrow>    </msub>   </mrow>   <mo>=</mo>   <mrow>    <semantics definitionURL="">     <mo>&#x2758;</mo>     <annotation encoding="Mathematica">"\[LeftBracketingBar]"</annotation>    </semantics>    <mrow>     <mrow>      <mn>2</mn>      <mo>&#x2062;</mo>      <mrow>       <mi>R</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>k</mi>        <mo>,</mo>        <mi>l</mi>       </mrow>       <mo>)</mo>      </mrow>     </mrow>     <mo>-</mo>     <mrow>      <mi>R</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mrow>       <mrow>        <mi>k</mi>        <mo>-</mo>        <mn>1</mn>       </mrow>       <mo>,</mo>       <mrow>        <mi>l</mi>        <mo>-</mo>        <mn>1</mn>       </mrow>      </mrow>      <mo>)</mo>     </mrow>     <mo>-</mo>     <mrow>      <mi>R</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mrow>       <mrow>        <mi>k</mi>        <mo>+</mo>        <mn>1</mn>       </mrow>       <mo>,</mo>       <mtext>&#x205f;</mtext>       <mrow>        <mi>l</mi>        <mo>+</mo>        <mn>1</mn>       </mrow>      </mrow>      <mo>)</mo>     </mrow>    </mrow>    <semantics definitionURL="">     <mo>&#x2758;</mo>     <annotation encoding="Mathematica">"\[RightBracketingBar]"</annotation>    </semantics>   </mrow>  </mrow> </mrow></math></maths><maths id="MATH-US-00001-4" num="00001.4"><math overflow="scroll"> <mrow>  <mrow>   <msub>    <mi>g</mi>    <mrow>     <mi>d</mi>     <mo>&#x2062;</mo>     <mn>2</mn>    </mrow>   </msub>   <mo>=</mo>   <mrow>    <munderover>     <mo>&#x2211;</mo>     <mrow>      <mi>k</mi>      <mo>=</mo>      <mrow>       <mi>i</mi>       <mo>-</mo>       <mn>2</mn>      </mrow>     </mrow>     <mrow>      <mi>i</mi>      <mo>+</mo>      <mn>3</mn>     </mrow>    </munderover>    <mrow>     <munderover>      <mo>&#x2211;</mo>      <mrow>       <mi>j</mi>       <mo>=</mo>       <mrow>        <mi>j</mi>        <mo>-</mo>        <mn>2</mn>       </mrow>      </mrow>      <mrow>       <mi>j</mi>       <mo>+</mo>       <mn>3</mn>      </mrow>     </munderover>     <mrow>      <mi>D</mi>      <mo>&#x2062;</mo>      <msub>       <mn>2</mn>       <mrow>        <mi>k</mi>        <mo>,</mo>        <mi>l</mi>       </mrow>      </msub>     </mrow>    </mrow>   </mrow>  </mrow>  <mo>,</mo>  <mrow>   <mrow>    <mi>D</mi>    <mo>&#x2062;</mo>    <msub>     <mn>2</mn>     <mrow>      <mi>k</mi>      <mo>,</mo>      <mi>l</mi>     </mrow>    </msub>   </mrow>   <mo>=</mo>   <mrow>    <semantics definitionURL="">     <mo>&#x2758;</mo>     <annotation encoding="Mathematica">"\[LeftBracketingBar]"</annotation>    </semantics>    <mrow>     <mrow>      <mn>2</mn>      <mo>&#x2062;</mo>      <mrow>       <mi>R</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>k</mi>        <mo>,</mo>        <mi>l</mi>       </mrow>       <mo>)</mo>      </mrow>     </mrow>     <mo>-</mo>     <mrow>      <mi>R</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mrow>       <mrow>        <mi>k</mi>        <mo>-</mo>        <mn>1</mn>       </mrow>       <mo>,</mo>       <mrow>        <mi>l</mi>        <mo>+</mo>        <mn>1</mn>       </mrow>      </mrow>      <mo>)</mo>     </mrow>     <mo>-</mo>     <mrow>      <mi>R</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mrow>       <mrow>        <mi>k</mi>        <mo>+</mo>        <mn>1</mn>       </mrow>       <mo>,</mo>       <mrow>        <mi>l</mi>        <mo>-</mo>        <mn>1</mn>       </mrow>      </mrow>      <mo>)</mo>     </mrow>    </mrow>    <semantics definitionURL="">     <mo>&#x2758;</mo>     <annotation encoding="Mathematica">"\[RightBracketingBar]"</annotation>    </semantics>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0135" num="0000">where indices i and j refer to the coordinates of the upper left sample within the 4&#xd7;4 block and R(i, j) indicates a reconstructed sample at coordinate (i, j).</p><p id="p-0136" num="0130">To reduce the complexity of block classification, a subsampled 1-D Laplacian calculation is applied. <figref idref="DRAWINGS">FIG. <b>17</b></figref> illustrates four computations of the gradients for block classification, according to some embodiments of the present disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>17</b></figref>, the same subsampled positions are used for gradient calculation of all directions, for example, for vertical gradient <b>1710</b>, horizontal gradient <b>1720</b>, and two diagonal gradients <b>1730</b>, <b>1740</b>.</p><p id="p-0137" num="0131">Then D maximum and minimum values of the gradients of horizontal and vertical directions are set as:</p><p id="p-0138" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>h,v</sub><sup>max</sup>=max(<i>g</i><sub>h</sub><i>, g</i><sub>v</sub>), <i>g</i><sub>h,v</sub><sup>min</sup>=min(<i>g</i><sub>h</sub><i>, g</i><sub>v</sub>)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0139" num="0132">The maximum and minimum values of the gradient of two diagonal directions are set as:</p><p id="p-0140" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>d0,d1</sub><sup>max</sup>=max(<i>g</i><sub>d0</sub><i>, g</i><sub>d1</sub>), <i>g</i><sub>d0,d1</sub><sup>min</sup>=min(<i>g</i><sub>d0</sub><i>, g</i><sub>d1</sub>)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0141" num="0133">To derive the value of the directionality D, these values are compared against each other and with two thresholds t<sub>1 </sub>and t<sub>2</sub>:</p><p id="p-0142" num="0134">Step 1. If both g<sub>h,v</sub><sup>max</sup>&#x2264;t<sub>1</sub>&#xb7;g<sub>h,v</sub><sup>min </sup>and g<sub>d0,d1</sub><sup>max</sup>&#x2264;t<sub>1</sub>&#xb7;g<sub>d0,d1</sub><sup>min </sup>are true, D is set to 0.</p><p id="p-0143" num="0135">Step 2. If g<sub>h,v</sub><sup>max</sup>/g<sub>h,v</sub><sup>min</sup>&#x3e;g<sub>d0,d1</sub><sup>max</sup>/g<sub>d0,d1</sub><sup>min</sup>, continue from Step 3; otherwise continue from Step 4.</p><p id="p-0144" num="0136">Step 3. If g<sub>h,v</sub><sup>max</sup>&#x3e;t<sub>2</sub>&#xb7;g<sub>h,v</sub><sup>min</sup>, D is set to 2; otherwise D is set to 1.</p><p id="p-0145" num="0137">Step 4. If g<sub>d0,d1</sub><sup>max</sup>&#x3e;t<sub>2</sub>&#xb7;g<sub>d0,d1</sub><sup>min</sup>, D is set to 4; otherwise D is set to 3.</p><p id="p-0146" num="0138">The activity value A is calculated as:</p><p id="p-0147" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mrow>  <mi>A</mi>  <mo>=</mo>  <mrow>   <munderover>    <mo>&#x2211;</mo>    <mrow>     <mi>k</mi>     <mo>=</mo>     <mrow>      <mi>i</mi>      <mo>-</mo>      <mn>2</mn>     </mrow>    </mrow>    <mrow>     <mi>i</mi>     <mo>+</mo>     <mn>3</mn>    </mrow>   </munderover>   <mrow>    <munderover>     <mo>&#x2211;</mo>     <mrow>      <mi>l</mi>      <mo>=</mo>      <mrow>       <mi>j</mi>       <mo>-</mo>       <mn>2</mn>      </mrow>     </mrow>     <mrow>      <mi>j</mi>      <mo>+</mo>      <mn>3</mn>     </mrow>    </munderover>    <mrow>     <mo>(</mo>     <mrow>      <msub>       <mi>V</mi>       <mrow>        <mi>k</mi>        <mo>,</mo>        <mi>l</mi>       </mrow>      </msub>      <mo>+</mo>      <msub>       <mi>H</mi>       <mrow>        <mi>k</mi>        <mo>,</mo>        <mi>l</mi>       </mrow>      </msub>     </mrow>     <mo>)</mo>    </mrow>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0148" num="0000">A is further quantized to the range of 0 to 2, inclusively, and the quantized value is denoted as &#xc2;.</p><p id="p-0149" num="0139">The classification method described above is merely an exemplary method, and the specific block size and the classification method are not limited in the present disclosure. For instance, any block classification method known in the art can also be used. Alternatively, the classification method of luma ALF method can also be directly reused without doing classification for CCALF itself.</p><p id="p-0150" num="0140">The present disclosure also provides methods for filter coefficients signaling.</p><p id="p-0151" num="0141">In some embodiments, for each frame/slice the filter coefficients for each class are signaled in the bit-stream. For instance, in the above example, for each slice, the encoder can generate totally 15 filters (each for each class) and signal their parameters to the decoder. <figref idref="DRAWINGS">FIG. <b>18</b></figref> shows an example of the APS syntax to signal the filter coefficients of all classes, according to some embodiments of the present disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>18</b></figref>, 15 filters for 15 classes are signaled with associated filter coefficients for CC-Cb filter <b>1810</b> and CC-Cr filter <b>1820</b>, respectively. It can be understood that the number of classes is not limited to 15. <figref idref="DRAWINGS">FIG. <b>19</b></figref> shows the semantic changes as compared to VVC, according to some embodiments of the present disclosure. In some embodiments, each luma pixel is classified as one of the predefined classes. <figref idref="DRAWINGS">FIG. <b>20</b></figref> shows the detail of the specification changes as compared to VVC, according to some embodiments of the present disclosure.</p><p id="p-0152" num="0142">As shown in <figref idref="DRAWINGS">FIG. <b>18</b></figref>, filter coefficients for each filter corresponding to each class are signaled, which may introduce significant overhead signaling bits. In order to reduce the overhead signaling bits, an alternative approach of signaling filter coefficients is proposed. In some embodiments, the encoder uses a class merging method where number of a class(es) is adaptively selected based on the content. <figref idref="DRAWINGS">FIG. <b>21</b></figref> illustrates a flowchart of a method <b>2100</b> for signaling filter coefficients using class merging, according to some embodiments of the present disclosure. Method <b>2100</b> can be performed by an encoder (e.g., by process <b>200</b>A of <figref idref="DRAWINGS">FIG. <b>2</b>A or <b>200</b>B</figref> of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>) or performed by one or more software or hardware components of an apparatus (e.g., apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). For example, a processor (e.g., processor <b>402</b> of FIG. <b>4</b>) can perform method <b>2100</b>. In some embodiments, method <b>2100</b> can be implemented by a computer program product, embodied in a computer-readable medium, including computer-executable instructions, such as program code, executed by computers (e.g., apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). As shown in <figref idref="DRAWINGS">FIG. <b>21</b></figref>, the method <b>2100</b> can include steps S<b>2102</b> and S<b>2104</b>.</p><p id="p-0153" num="0143">At step S<b>2102</b>, a plurality of filters are merged in to one or more merged classes. Each merged class includes one or more filters. Each merged class has its own index. For example, the number of the plurality of classes is N (i.e., the number of filters is N), and a merged class can include M classes (i.e., filters), wherein N is an integer equal to or lager than M. For example, with the above discussed example, 15 filters are generated for 15 classes. A maximum number of the merged class can be 15, with an index from 0 to 14. In some embodiments, the 15 filters can be merged into 6 merged class for example. Each merged class may include one or more filters, which may be merged based on a similarity of filter coefficients of filters. A filter for the merged class is used for processing.</p><p id="p-0154" num="0144">At step S<b>2104</b>, filter coefficients for each merged class are signaled. In some embodiments, the filter <b>600</b> shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> is used, of which the number of filter coefficient is 7.</p><p id="p-0155" num="0145">With this method, since the number of merged classes is equal to or less than the number of classes, the overhead signaling bit can be reduced, both for filters and filter coefficients.</p><p id="p-0156" num="0146">For example, in syntax, a filter set can be represented by syntax element filter set, which can be defined as follows:</p><p id="p-0157" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;filter_set{</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;int number_of_merged_class;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;int filter_coeff[ ][ ];</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;int merge_index_array[ ];</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2002;};</entry></row><row><entry>where,</entry></row><row><entry>&#x2003;&#x2022; number_of_merged_class is the number of classes signaled in the</entry></row><row><entry>&#x2003;&#x2002;&#x2009;frame/slice after class merging. The minimum value of</entry></row><row><entry>&#x2003;&#x2002;&#x2009;number_of_merged_class is 1 and the maximum value is the</entry></row><row><entry>&#x2003;&#x2002;&#x2009;maximum number of class (i.e., 15 in the above example), inclusive.</entry></row><row><entry>&#x2003;&#x2022; filter_coeff[c][j] is the j-th filter coefficient of c-th merged class.</entry></row><row><entry>&#x2003;&#x2002;&#x2009;The maximum value of c is number_of_merged_class &#x2212; 1.</entry></row><row><entry>&#x2003;&#x2022; merge_index_array is one dimensional array of size 15</entry></row><row><entry>&#x2003;&#x2002;&#x2009;(assume 15 is the maximum number of classes).</entry></row><row><entry>The j-th filter coefficient of a class c (c= 0 to 14) is equal to</entry></row><row><entry>filter_coeff [merge_index_array [c]][j].</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0158" num="0147"><figref idref="DRAWINGS">FIG. <b>22</b></figref> shows APS syntax of the method for signaling filter coefficients using class merging, according to some embodiments of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>22</b></figref>, the merged class and corresponding filters are signed <b>2210</b>, <b>2220</b>. <figref idref="DRAWINGS">FIG. <b>23</b></figref> shows the semantic changes as compared to VVC, according to some embodiments of the present disclosure.</p><p id="p-0159" num="0148">In some embodiments, a single shape CCALF filter is used for all CTUs of a slice. <figref idref="DRAWINGS">FIG. <b>24</b></figref> illustrates an exemplary 24-tap 9&#xd7;9 filter <b>2400</b>, according to some embodiments of the present disclosure. As shown in the <figref idref="DRAWINGS">FIG. <b>24</b></figref>, filter <b>2400</b> has a generally cross shape. Specifically, the 24-tap 9&#xd7;9 filter <b>2400</b> is defined as below:</p><p id="p-0160" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mrow>  <mo>[</mo>  <mtable>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>0</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>1</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>2</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>3</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>9</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>10</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>11</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>12</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>4</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>13</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>14</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>15</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>16</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>17</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>18</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>19</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>20</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>5</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>21</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>22</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>23</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>24</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>6</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>7</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>8</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>  </mtable>  <mo>]</mo> </mrow></math></maths></p><p id="p-0161" num="0000">wherein C<sub>0 </sub>to C<sub>24 </sub>are filter coefficients associated with the 24-tap 9&#xd7;9 filter <b>2400</b>.</p><p id="p-0162" num="0149"><figref idref="DRAWINGS">FIG. <b>25</b></figref> shows the modification of the CCALF process using the filter <b>2400</b> compared to the VVC specification, according to some embodiments of the present disclosure. The parts in italic show the modification as compared to existing VVC method. Referring to <figref idref="DRAWINGS">FIG. <b>25</b></figref>, the number of filter coefficients <b>2510</b> is modified to 24, and a variable sum <b>2520</b> is modified accordingly.</p><p id="p-0163" num="0150">In some embodiments, more filters are provided. <figref idref="DRAWINGS">FIG. <b>26</b></figref> and <figref idref="DRAWINGS">FIG. <b>27</b></figref> show an exemplary 28-tap filter <b>2600</b> and an exemplary 36-tap filter <b>2700</b>, respectively, according to some embodiments of the present disclosure. It can be understood that, if the 28-tap filter <b>2600</b> or the 36-tap filter <b>2700</b> is used, the number of filter coefficients and the variable sum need to be modified accordingly.</p><p id="p-0164" num="0151">The present disclosure also provides methods for filter coefficients signaling. In VVC, CCALF filter coefficients are restricted to having only values in the form of power of 2, from the following set: {&#x2212;64, &#x2212;32, &#x2212;16, &#x2212;8, &#x2212;4, &#x2212;2, &#x2212;1, 0, 1, 2, 4, 8, 16, 32, 64}. In VVC specification, a fixed length code is used to signal the index of the filter coefficients.</p><p id="p-0165" num="0152">In some embodiments, the values of the filter coefficients are restricted to power of 2. However, instead of using fixed length code, the variable length code (more specifically unary coding) is used to signal the filter coefficients. <figref idref="DRAWINGS">FIG. <b>28</b></figref> shows the APS syntax table of the proposed method, according to some embodiments of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>28</b></figref>, the filter coefficients signaled are coded in variable length (e.g., ue(v)) <b>2810</b>. Therefore, the filter coefficients can be more flexible, removing a constrain of values in the form of power of 2.</p><p id="p-0166" num="0153">In the present disclosure, methods for CTB level mapped filter index signaling are further provided. In VVC, for each frame/slice, a number of N filters and coefficients are signaled. For each CTB, the encoder can select the best filter to be signaled to the decoder. <figref idref="DRAWINGS">FIG. <b>29</b></figref> illustrates a flowchart of an exemplary method for signaling a best filter for each CTB, according to some embodiments of the present disclosure. Method <b>2900</b> can be performed by an encoder (e.g., by process <b>200</b>A of <figref idref="DRAWINGS">FIG. <b>2</b>A or <b>200</b>B</figref> of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>) or performed by one or more software or hardware components of an apparatus (e.g., apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). For example, a processor (e.g., processor <b>402</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>) can perform method <b>2900</b>. In some embodiments, method <b>2900</b> can be implemented by a computer program product, embodied in a computer-readable medium, including computer-executable instructions, such as program code, executed by computers (e.g., apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). As shown in <figref idref="DRAWINGS">FIG. <b>29</b></figref>, the method <b>2900</b> can include steps S<b>2902</b> to S<b>2906</b>.</p><p id="p-0167" num="0154">At step S<b>2902</b>, a number of filters is signaled for each frame/slice. For example, the number of filters is N. Therefore, N is known by both the encoder and decoder. A number of filter shapes is also known by both the encoder and decoder.</p><p id="p-0168" num="0155">At step S<b>2904</b>, filter coefficients for each filter are signaled.</p><p id="p-0169" num="0156">At step S<b>2906</b>, a parameter indicating the best filter is signaled for each CTB in the slice. For example, the parameter can be a filter index (e.g., filter_idc), the maximum value of the index is N&#x2212;1. In some embodiments, the maximum value of the index is N, and when the filter index (e.g., filter_idc) is equal to 0, there is no filtering applied.</p><p id="p-0170" num="0157">In the method provided by the present disclosure, for each CTB, instead of signaling the filter index (e.g., filter_idc) directly, a mapped filter index is signaled to the decoder. <figref idref="DRAWINGS">FIG. <b>30</b></figref> illustrates a flowchart of an exemplary method <b>3000</b> for video processing, according to some embodiments of the present disclosure. Method <b>3000</b> can be performed by an encoder (e.g., by process <b>200</b>A of <figref idref="DRAWINGS">FIG. <b>2</b>A or <b>200</b>B</figref> of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>) or performed by one or more software or hardware components of an apparatus (e.g., apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). For example, a processor (e.g., processor <b>402</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>) can perform method <b>3000</b>. In some embodiments, method <b>3000</b> can be implemented by a computer program product, embodied in a computer-readable medium, including computer-executable instructions, such as program code, executed by computers (e.g., apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). As shown in <figref idref="DRAWINGS">FIG. <b>30</b></figref>, the method <b>3000</b> can include steps S<b>3002</b> to S<b>3008</b>.</p><p id="p-0171" num="0158">At step S<b>3002</b>, a predefined parameter (e.g., filter_idc_pos0) is signaled. The value of the predefined parameter (e.g., filter_idc_pos0) can be any value between 0 to N, and N is the number of filters to be signaled.</p><p id="p-0172" num="0159">At step S<b>3004</b>, in response to the predefined parameter being equal to 0, a first filter index (e.g., filter_idc) is signaled. That is, the method <b>2900</b> is performed.</p><p id="p-0173" num="0160">At step S<b>3006</b>, in response to the predefined parameter not being equal to 0, a mapped filter index (e.g., mapped_filter_idc) is derived from the first filter index (e.g., filter_idc). In some embodiments, the predefined parameter is assumed to be equal to 1, and known by both encoder and decoder. The mapped filter index can be derived by the following steps: in response to the first filter index being equal to 0, a value of the mapped filter index is set as a value the predetermined parameter (e.g., 1); in response to the first filter index being less than or equal to the predetermined parameter, the value of the mapped filter index is set as a value of the first filter index minus 1; and for other cases, the value of the mapped filter index is set as a value of the first filter index. For example, a pseudo code can be described as below:</p><p id="p-0174" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="28pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="147pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>filter_idc_pos0 = 1;</entry></row><row><entry/><entry/><entry>&#x2002;if (filter_idc == 0)</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;mapped_filter_idc = filter_idc_pos0;</entry></row><row><entry/><entry/><entry>&#x2002;else if (filter_idc &#x3c;= filter_idc_pos0)</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;mapped_filter_idc = filter_idc &#x2212; 1;</entry></row><row><entry/><entry/><entry>&#x2002;else</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;mapped_filter_idc = filter_idc;</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0175" num="0161">At step S<b>3008</b>, the mapped_filter_idc is signaled in the bitstream.</p><p id="p-0176" num="0162">Since the filter_idc is not equal binarized, the number of bits is reduced, when filter_idc is not equal to 0.</p><p id="p-0177" num="0163">In the decoder side, the first filter index is derived from the mapped filter index. In some embodiments, the predefined parameter is assumed to be equal to 1, and known by both the encoder and decoder. The first filter index can be derived by the following steps: in response to a value of the mapped filter index being equal to a value of the predetermined parameter, the first filter index is set as 0, that is, there is no filtering applied; in response to a value of the mapped filter index being less than the value of the predetermined parameter, the value of the first filter index is set as a value of the mapped filter index plus 1; and for other values, the value of the first filter index is set as a value of the mapped filter index. For example, a pseudo code can be described as below:</p><p id="p-0178" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="28pt" align="left"/><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="154pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>filter_idc_pos0 = 1;</entry></row><row><entry/><entry/><entry>&#x2002;if (mapped_filter_idc == filter_idc_pos0)</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2002;filter_idc = 0;</entry></row><row><entry/><entry/><entry>&#x2002;else if (mapped_filter_idc &#x3c; filter_idc_pos0)</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2002;filter_idc = mapped_filter_idc + 1;</entry></row><row><entry/><entry/><entry>&#x2002;else</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;filter_idc = mapped_filter_idc;</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0179" num="0164">In the above pseudo code, it is assumed that filter_idc_pos0 is fixed (equal to 1) to the coded video sequence. In some embodiments, the value of filter_idc_pos0 can also be adaptively derived in each CTB. One way to derive the value of filter_idc_pos0 is based on the previously decoded neighboring CTBs. For instance, if the filter_idc of the top or left CTB is non-zero value, filter_idc_pos0 of the current CTB can be set to 1; otherwise, filter_idc_pos0 is equal to 0. For example, a pseudo code can be described as below:</p><p id="p-0180" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="154pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>Assume,</entry></row><row><entry/><entry/><entry>filter_idc_top = filter_idc of the above CTB</entry></row><row><entry/><entry/><entry>filter_idc_left = filter_idc of the left CTB</entry></row><row><entry/><entry/><entry>if (filter_idc_top || filter_idc_left)</entry></row><row><entry/><entry/><entry>filter_idc_pos0 = 1;</entry></row><row><entry/><entry/><entry>else</entry></row><row><entry/><entry/><entry>filter_idc_pos0 = 0;</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0181" num="0165">The present disclosure also provides methods for improving context coding of the filter index. In VVC, two syntax elements alf_ctb_cc_cb_idc and alf_ctb_cc_cr_idc are signaled in the bitstream to indicate the index of the filter used for a target CTB. For both alf_ctb_cc_cb_idc and alf_ctb_cc_cr_idc, only first bin is context coded and the rest of the bins are bypass coded.</p><p id="p-0182" num="0166">In some embodiments, both the first and second bins are context coded, and the rest of the bins are bypass coded.</p><p id="p-0183" num="0167">To a person skilled in the art of video coding, the above embodiments might be combined into one embodiment.</p><p id="p-0184" num="0168">The embodiments may further be described using the following clauses:</p><p id="p-0185" num="0169">1. A method for video processing using Cross-Component Adaptive Loop Filter (CCALF), comprising:</p><p id="p-0186" num="0170">filtering decoded video content using a CCALF, wherein the CCALF is a 24-tap 9&#xd7;9 filter.</p><p id="p-0187" num="0171">2. The method according to clause 1, wherein the 24-tap 9&#xd7;9 filter has a cross shape defined as:</p><p id="p-0188" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mrow>  <mo>[</mo>  <mtable>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>0</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>1</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>2</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>3</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>9</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>10</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>11</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>12</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>4</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>13</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>14</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>15</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>16</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>17</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>18</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>19</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>20</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>5</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>21</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>22</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>23</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>24</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>6</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>7</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>8</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>  </mtable>  <mo>]</mo> </mrow></math></maths></p><p id="p-0189" num="0172">wherein C<sub>0 </sub>to C<sub>24 </sub>are filter coefficients of the 24-tap 9&#xd7;9 filter.</p><p id="p-0190" num="0173">3. The method according to clause 1 or 2, wherein the decoded video content comprises a video slice, and the 24-tap 9&#xd7;9 filter is applied to all coding tree units (CTUs) of the video slice.</p><p id="p-0191" num="0174">4. The method according to any one of clauses 1 to 3, wherein values of the filter coefficients are integer values between &#x2212;64 and +64.</p><p id="p-0192" num="0175">5. The method according to any one of clauses 1 to 4, wherein the filter coefficients are coded using variable length code.</p><p id="p-0193" num="0176">6. A method for video processing using Cross-Component Adaptive Loop Filter (CCALF), comprising:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0177">receiving a bitstream;</li>        <li id="ul0002-0002" num="0178">determining a CCALF based on a first index signaled in the bitstream;</li>        <li id="ul0002-0003" num="0179">determining a first filter shape based on a second index signaled in the bitstream, the first filter shape being selected from a set of pre-defined filter shapes for the CCALF;</li>        <li id="ul0002-0004" num="0180">determining, based on the first index, filter coefficients of the CCALF; and</li>        <li id="ul0002-0005" num="0181">filtering decoded video content using the first filter shape and the filter coefficients.</li>    </ul>    </li></ul></p><p id="p-0194" num="0182">7. The method according to clause 6, wherein values of the filter coefficients are integer values between &#x2212;64 and +64.</p><p id="p-0195" num="0183">8. The method according to clause 6 or 7, wherein the filter coefficients are coded using variable length code.</p><p id="p-0196" num="0184">9. The method according to any one of clauses 6 to 8, wherein the first index is indicated by a syntax element signaled in the bitstream, the syntax element is associated with a coding tree block (CTB), and the method further comprises:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0185">context decoding a first bin and a second bin of the syntax element.</li>    </ul>    </li></ul></p><p id="p-0197" num="0186">10. A method for video processing using Cross-Component Adaptive Loop Filter (CCALF), comprising:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0187">receiving a bitstream;</li>        <li id="ul0006-0002" num="0188">determining a CCALF based on a first index signaled in the bitstream;</li>        <li id="ul0006-0003" num="0189">determining a first filter shape based on characteristics of a reconstructed block, the first filter shape being selected from a set of pre-defined filter shapes for the CCALF;</li>        <li id="ul0006-0004" num="0190">determining, based on the first index, filter coefficients of the CCALF; and</li>        <li id="ul0006-0005" num="0191">filtering decoded video content using the first filter shape and the filter coefficients.</li>    </ul>    </li></ul></p><p id="p-0198" num="0192">11. A method for video processing using Cross-Component Adaptive Loop Filter (CCALF), comprising:<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0193">receiving a bitstream;</li>        <li id="ul0008-0002" num="0194">determining N CCALFs based on the bitstream;</li>        <li id="ul0008-0003" num="0195">determining a first filter based on the bitstream, the first filter being one of the N CCALFs; and</li>        <li id="ul0008-0004" num="0196">filtering decoded video content using the first filter.</li>    </ul>    </li></ul></p><p id="p-0199" num="0197">12. The method according to clause 11, wherein determining the first filter based on the bitstream, further comprises:<ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0000">    <ul id="ul0010" list-style="none">        <li id="ul0010-0001" num="0198">determining a first filter index based on a mapped filter index, wherein: in response to a value of the mapped filter index being less than a predetermined value, a value of the first filter index is set as the value of the mapped filter index plus 1, or in response to the value of the mapped filter index being greater than the predetermined value, the value of the first filter index is set as the value of the mapped filter index; and</li>        <li id="ul0010-0002" num="0199">determining the first filter based on the first filter index,</li>        <li id="ul0010-0003" num="0200">wherein the predetermined parameter is in a range of 1 to N.</li>    </ul>    </li></ul></p><p id="p-0200" num="0201">13. The method according to clause 12, where the predetermined value is set as 1.</p><p id="p-0201" num="0202">14. The method according to clause 12, wherein the predetermined value is associated with a target coding tree (CTB) and is determined based on previously decoded neighboring CTBs.</p><p id="p-0202" num="0203">15. The method according to clause 14, wherein the first filter index is associated with a previously decoded top CTB or a previously decoded left CTB, and the method further comprises:</p><p id="p-0203" num="0204">in response to the value of the first filter index being non-zero, setting the predetermined value as 1.</p><p id="p-0204" num="0205">16. A method for video processing using Cross-Component Adaptive Loop Filter (CCALF), comprising:<ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0000">    <ul id="ul0012" list-style="none">        <li id="ul0012-0001" num="0206">receiving a bitstream associated with a video slice;</li>        <li id="ul0012-0002" num="0207">generating, based on the bitstream, a plurality of reconstructed blocks associated with the video slice;</li>        <li id="ul0012-0003" num="0208">classifying the plurality of reconstructed blocks into one or more classes based on characteristics of the plurality of reconstructed blocks;</li>        <li id="ul0012-0004" num="0209">determining, based on the bitstream, a set of CCALF coefficients for each of the one or more classes; and</li>        <li id="ul0012-0005" num="0210">filtering the one or more classes of reconstructed blocks using the respective sets of CCALF coefficients.</li>    </ul>    </li></ul></p><p id="p-0205" num="0211">17. The method according to clause 16, wherein the plurality of blocks are luma blocks.</p><p id="p-0206" num="0212">18. The method according to clause 17, wherein each luma pixel of the video sequence is classified into one of the plurality of classes.</p><p id="p-0207" num="0213">19. The method according to clause 16, wherein the one or more classes include M classes, M being a positive integer, and wherein classifying the plurality of reconstructed blocks into one or more classes based on characteristics of the plurality of reconstructed blocks, further comprises:<ul id="ul0013" list-style="none">    <li id="ul0013-0001" num="0000">    <ul id="ul0014" list-style="none">        <li id="ul0014-0001" num="0214">classifying the plurality of reconstructed blocks into N classes based on characteristics of the plurality of reconstructed blocks, N being an integer larger than M; and</li>        <li id="ul0014-0002" num="0215">merging the N classes into the one or more classes.</li>    </ul>    </li></ul></p><p id="p-0208" num="0216">20. The method according to clause 19, wherein the plurality of classes are merged based on a similarity of the filter coefficients of the CCALFs associated with the plurality of classes.</p><p id="p-0209" num="0217">21. An apparatus for performing video processing using Cross-Component Adaptive Loop Filter (CCALF), the apparatus comprising:<ul id="ul0015" list-style="none">    <li id="ul0015-0001" num="0000">    <ul id="ul0016" list-style="none">        <li id="ul0016-0001" num="0218">a memory figured to store instructions; and</li>        <li id="ul0016-0002" num="0219">one or more processors configured to execute the instructions to cause the apparatus to perform:</li>        <li id="ul0016-0003" num="0220">filtering decoded video content using a CCALF, wherein the CCALF is a 24-tap 9&#xd7;9 filter.</li>    </ul>    </li></ul></p><p id="p-0210" num="0221">22. The apparatus according to claim 21, wherein the 24-tap 9&#xd7;9 filter has a cross shape defined as:</p><p id="p-0211" num="0000"><maths id="MATH-US-00005" num="00005"><math overflow="scroll"> <mrow>  <mo>[</mo>  <mtable>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>0</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>1</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>2</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>3</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>9</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>10</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>11</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>12</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>4</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>13</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>14</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>15</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>16</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>17</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>18</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>19</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>20</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>5</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>21</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>22</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>23</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>24</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>6</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>7</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>8</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>  </mtable>  <mo>]</mo> </mrow></math></maths></p><p id="p-0212" num="0222">wherein C<sub>0 </sub>to C<sub>24 </sub>are filter coefficients of the 24-tap 9&#xd7;9 filter.</p><p id="p-0213" num="0223">23. The apparatus according to clause 21 or 22, wherein the decoded video content comprises a video slice, and the 24-tap 9&#xd7;9 filter is applied to all coding tree units (CTUs) of the video slice.</p><p id="p-0214" num="0224">24. The apparatus according to any one of clauses 21 to 23, wherein values of the filter coefficients are integer values between &#x2212;64 and +64.</p><p id="p-0215" num="0225">25. The apparatus according to any one of clauses 21 to 24, wherein the filter coefficients are coded using variable length code.</p><p id="p-0216" num="0226">26. An apparatus for performing video processing using Cross-Component Adaptive Loop Filter (CCALF), the apparatus comprising:<ul id="ul0017" list-style="none">    <li id="ul0017-0001" num="0000">    <ul id="ul0018" list-style="none">        <li id="ul0018-0001" num="0227">a memory figured to store instructions; and</li>        <li id="ul0018-0002" num="0228">one or more processors configured to execute the instructions to cause the apparatus to perform:</li>        <li id="ul0018-0003" num="0229">receiving a bitstream;</li>        <li id="ul0018-0004" num="0230">determining a CCALF based on a first index signaled in the bitstream;</li>        <li id="ul0018-0005" num="0231">determining a first filter shape based on a second index signaled in the bitstream, the first filter shape being selected from a set of pre-defined filter shapes for the CCALF;</li>        <li id="ul0018-0006" num="0232">determining, based on the first index, filter coefficients of the CCALF; and</li>        <li id="ul0018-0007" num="0233">filtering decoded video content using the first filter shape and the filter coefficients.</li>    </ul>    </li></ul></p><p id="p-0217" num="0234">27. The apparatus according to clause 26, wherein values of the filter coefficients are integer values between &#x2212;64 and +64.</p><p id="p-0218" num="0235">28. The apparatus according to clause 26 or 27, wherein the filter coefficients are coded using variable length code.</p><p id="p-0219" num="0236">29. The apparatus according to any one of clauses 26 to 28, wherein the first index is indicated by a syntax element signaled in the bitstream, the syntax element is associated with a coding tree block (CTB), and the one or more processors are further configured to execute the instructions to cause the apparatus to perform:<ul id="ul0019" list-style="none">    <li id="ul0019-0001" num="0000">    <ul id="ul0020" list-style="none">        <li id="ul0020-0001" num="0237">context decoding a first bin and a second bin of the syntax element.</li>    </ul>    </li></ul></p><p id="p-0220" num="0238">30. An apparatus for performing video processing using Cross-Component Adaptive Loop Filter (CCALF), the apparatus comprising:<ul id="ul0021" list-style="none">    <li id="ul0021-0001" num="0000">    <ul id="ul0022" list-style="none">        <li id="ul0022-0001" num="0239">a memory figured to store instructions; and</li>        <li id="ul0022-0002" num="0240">one or more processors configured to execute the instructions to cause the apparatus to perform:</li>        <li id="ul0022-0003" num="0241">receiving a bitstream;</li>        <li id="ul0022-0004" num="0242">determining a CCALF based on a first index signaled in the bitstream;</li>        <li id="ul0022-0005" num="0243">determining a first filter shape based on characteristics of a reconstructed block, the first filter shape being selected from a set of pre-defined filter shapes for the CCALF;</li>        <li id="ul0022-0006" num="0244">determining, based on the first index, filter coefficients of the CCALF; and</li>        <li id="ul0022-0007" num="0245">filtering decoded video content using the first filter shape and the filter coefficients.</li>    </ul>    </li></ul></p><p id="p-0221" num="0246">31. An apparatus for performing video processing using Cross-Component Adaptive Loop Filter (CCALF), the apparatus comprising:<ul id="ul0023" list-style="none">    <li id="ul0023-0001" num="0000">    <ul id="ul0024" list-style="none">        <li id="ul0024-0001" num="0247">a memory figured to store instructions; and</li>        <li id="ul0024-0002" num="0248">one or more processors configured to execute the instructions to cause the apparatus to perform:</li>        <li id="ul0024-0003" num="0249">receiving a bitstream;</li>        <li id="ul0024-0004" num="0250">determining N CCALFs based on the bitstream;</li>        <li id="ul0024-0005" num="0251">determining a first filter based on the bitstream, the first filter being one of the N CCALFs; and</li>        <li id="ul0024-0006" num="0252">filtering decoded video content using the first filter.</li>    </ul>    </li></ul></p><p id="p-0222" num="0253">32. The apparatus according to clause 31, wherein in determining the first filter based on the bitstream, the one or more processors are further configured to execute the instructions to cause the apparatus to perform:<ul id="ul0025" list-style="none">    <li id="ul0025-0001" num="0000">    <ul id="ul0026" list-style="none">        <li id="ul0026-0001" num="0254">determining a first filter index based on a mapped filter index, wherein: in response to a value of the mapped filter index being less than a predetermined value, a value of the first filter index is set as the value of the mapped filter index plus 1, or in response to the value of the mapped filter index being greater than the predetermined value, the value of the first filter index is set as the value of the mapped filter index; and</li>        <li id="ul0026-0002" num="0255">determining the first filter based on the first filter index,</li>        <li id="ul0026-0003" num="0256">wherein the predetermined parameter is in a range of 1 to N.</li>    </ul>    </li></ul></p><p id="p-0223" num="0257">33. The apparatus according to clause 32, where the predetermined value is set as 1.</p><p id="p-0224" num="0258">34. The apparatus according to clause 32, wherein the predetermined value is associated with a target coding tree (CTB) and is determined based on previously decoded neighboring CTBs.</p><p id="p-0225" num="0259">35. The apparatus according to clause 34, wherein the first filter index is associated with a previously decoded top CTB or a previously decoded left CTB, and the one or more processors are further configured to execute the instructions to cause the apparatus to perform:</p><p id="p-0226" num="0260">in response to the value of the first filter index being non-zero, setting the predetermined value as 1.</p><p id="p-0227" num="0261">36. An apparatus for performing video processing using Cross-Component Adaptive Loop Filter (CCALF), the apparatus comprising:<ul id="ul0027" list-style="none">    <li id="ul0027-0001" num="0000">    <ul id="ul0028" list-style="none">        <li id="ul0028-0001" num="0262">a memory figured to store instructions; and</li>        <li id="ul0028-0002" num="0263">one or more processors configured to execute the instructions to cause the apparatus to perform:</li>        <li id="ul0028-0003" num="0264">receiving a bitstream associated with a video slice;</li>        <li id="ul0028-0004" num="0265">generating, based on the bitstream, a plurality of reconstructed blocks associated with the video slice;</li>        <li id="ul0028-0005" num="0266">classifying the plurality of reconstructed blocks into one or more classes based on characteristics of the plurality of reconstructed blocks;</li>        <li id="ul0028-0006" num="0267">determining, based on the bitstream, a set of CCALF coefficients for each of the one or more classes; and</li>        <li id="ul0028-0007" num="0268">filtering the one or more classes of reconstructed blocks using the respective sets of CCALF coefficients.</li>    </ul>    </li></ul></p><p id="p-0228" num="0269">37. The apparatus according to clause 36, wherein the plurality of blocks are luma blocks.</p><p id="p-0229" num="0270">38. The apparatus according to clause 37, wherein each luma pixel of the video sequence is classified into one of the plurality of classes.</p><p id="p-0230" num="0271">39. The apparatus according to clause 36, wherein the one or more classes include M classes, M being a positive integer, and wherein in classifying the plurality of reconstructed blocks into one or more classes based on characteristics of the plurality of reconstructed blocks, the one or more processors are further configured to execute the instructions to cause the apparatus to perform:<ul id="ul0029" list-style="none">    <li id="ul0029-0001" num="0000">    <ul id="ul0030" list-style="none">        <li id="ul0030-0001" num="0272">classifying the plurality of reconstructed blocks into N classes based on characteristics of the plurality of reconstructed blocks, N being an integer larger than M; and</li>        <li id="ul0030-0002" num="0273">merging the N classes into the one or more classes.</li>    </ul>    </li></ul></p><p id="p-0231" num="0274">40. The apparatus according to clause 39, wherein the plurality of classes are merged based on a similarity of the filter coefficients of the CCALFs associated with the plurality of classes.</p><p id="p-0232" num="0275">51. A non-transitory computer readable medium that stores a set of instructions that is executable by one or more processors of an apparatus to cause the apparatus to initiate a method for video processing using Cross-Component Adaptive Loop Filter (CCALF), the method comprising:</p><p id="p-0233" num="0276">filtering decoded video content using a CCALF, wherein the CCALF is a 24-tap 9&#xd7;9 filter.</p><p id="p-0234" num="0277">52. The non-transitory computer readable medium according to clause 51, wherein the 24-tap 9&#xd7;9 filter has a cross shape defined as:</p><p id="p-0235" num="0000"><maths id="MATH-US-00006" num="00006"><math overflow="scroll"> <mrow>  <mo>[</mo>  <mtable>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>0</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>1</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>2</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>3</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>9</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>10</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>11</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>12</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>4</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>13</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>14</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>15</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>16</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>17</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>18</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>19</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>20</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>5</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>21</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>22</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>23</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>24</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>6</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>7</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>8</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>  </mtable>  <mo>]</mo> </mrow></math></maths></p><p id="p-0236" num="0278">wherein C<sub>0 </sub>to C<sub>24 </sub>are filter coefficients of the 24-tap 9&#xd7;9 filter.</p><p id="p-0237" num="0279">53. The non-transitory computer readable medium according to clause 51 or 52, wherein the decoded video content comprises a video slice, and the 24-tap 9&#xd7;9 filter is applied to all coding tree units (CTUs) of the video slice.</p><p id="p-0238" num="0280">54. The non-transitory computer readable medium according to any one of clauses 51 to 53, wherein values of the filter coefficients are integer values between &#x2212;64 and +64.</p><p id="p-0239" num="0281">55. The non-transitory computer readable medium according to any one of clauses 51 to 54, wherein the filter coefficients are coded using variable length code.</p><p id="p-0240" num="0282">56. A non-transitory computer readable medium that stores a set of instructions that is executable by one or more processors of an apparatus to cause the apparatus to initiate a method for video processing using Cross-Component Adaptive Loop Filter (CCALF), the method comprising:<ul id="ul0031" list-style="none">    <li id="ul0031-0001" num="0000">    <ul id="ul0032" list-style="none">        <li id="ul0032-0001" num="0283">receiving a bitstream;</li>        <li id="ul0032-0002" num="0284">determining a CCALF based on a first index signaled in the bitstream;</li>        <li id="ul0032-0003" num="0285">determining a first filter shape based on a second index signaled in the bitstream, the first filter shape being selected from a set of pre-defined filter shapes for the CCALF;</li>        <li id="ul0032-0004" num="0286">determining, based on the first index, filter coefficients of the CCALF; and</li>        <li id="ul0032-0005" num="0287">filtering decoded video content using the first filter shape and the filter coefficients.</li>    </ul>    </li></ul></p><p id="p-0241" num="0288">57. The non-transitory computer readable medium according to clause 56, wherein values of the filter coefficients are integer values between &#x2212;64 and +64.</p><p id="p-0242" num="0289">58. The non-transitory computer readable medium according to clause 56 or 57, wherein the filter coefficients are coded using variable length code.</p><p id="p-0243" num="0290">59. The non-transitory computer readable medium according to any one of clauses 56 to 58, wherein the first index is indicated by a syntax element signaled in the bitstream, the syntax element is associated with a coding tree block (CTB), and the method further comprises:<ul id="ul0033" list-style="none">    <li id="ul0033-0001" num="0000">    <ul id="ul0034" list-style="none">        <li id="ul0034-0001" num="0291">context decoding a first bin and a second bin of the syntax element.</li>    </ul>    </li></ul></p><p id="p-0244" num="0292">60. A non-transitory computer readable medium that stores a set of instructions that is executable by one or more processors of an apparatus to cause the apparatus to initiate a method for video processing using Cross-Component Adaptive Loop Filter (CCALF), the method comprising:<ul id="ul0035" list-style="none">    <li id="ul0035-0001" num="0000">    <ul id="ul0036" list-style="none">        <li id="ul0036-0001" num="0293">receiving a bitstream;</li>        <li id="ul0036-0002" num="0294">determining a CCALF based on a first index signaled in the bitstream;</li>        <li id="ul0036-0003" num="0295">determining a first filter shape based on characteristics of a reconstructed block, the first filter shape being selected from a set of pre-defined filter shapes for the CCALF;</li>        <li id="ul0036-0004" num="0296">determining, based on the first index, filter coefficients of the CCALF; and</li>        <li id="ul0036-0005" num="0297">filtering decoded video content using the first filter shape and the filter coefficients.</li>    </ul>    </li></ul></p><p id="p-0245" num="0298">61. A non-transitory computer readable medium that stores a set of instructions that is executable by one or more processors of an apparatus to cause the apparatus to initiate a method for video processing using Cross-Component Adaptive Loop Filter (CCALF), the method comprising:<ul id="ul0037" list-style="none">    <li id="ul0037-0001" num="0000">    <ul id="ul0038" list-style="none">        <li id="ul0038-0001" num="0299">receiving a bitstream;</li>        <li id="ul0038-0002" num="0300">determining N CCALFs based on the bitstream;</li>        <li id="ul0038-0003" num="0301">determining a first filter based on the bitstream, the first filter being one of the N CCALFs; and</li>        <li id="ul0038-0004" num="0302">filtering decoded video content using the first filter.</li>    </ul>    </li></ul></p><p id="p-0246" num="0303">62. The non-transitory computer readable medium according to clause 61, wherein determining the first filter based on the bitstream, further comprises:<ul id="ul0039" list-style="none">    <li id="ul0039-0001" num="0000">    <ul id="ul0040" list-style="none">        <li id="ul0040-0001" num="0304">determining a first filter index based on a mapped filter index, wherein: in response to a value of the mapped filter index being less than a predetermined value, a value of the first filter index is set as the value of the mapped filter index plus 1, or in response to the value of the mapped filter index being greater than the predetermined value, the value of the first filter index is set as the value of the mapped filter index; and</li>        <li id="ul0040-0002" num="0305">determining the first filter based on the first filter index,</li>        <li id="ul0040-0003" num="0306">wherein the predetermined parameter is in a range of 1 to N.</li>    </ul>    </li></ul></p><p id="p-0247" num="0307">63. The non-transitory computer readable medium according to clause 62, where the predetermined value is set as 1.</p><p id="p-0248" num="0308">64. The non-transitory computer readable medium according to clause 62, wherein the predetermined value is associated with a target coding tree (CTB) and is determined based on previously decoded neighboring CTBs.</p><p id="p-0249" num="0309">65. The non-transitory computer readable medium according to clause 64, wherein the first filter index is associated with a previously decoded top CTB or a previously decoded left CTB, and the method further comprises:</p><p id="p-0250" num="0310">in response to the value of the first filter index being non-zero, setting the predetermined value as 1.</p><p id="p-0251" num="0311">66. A non-transitory computer readable medium that stores a set of instructions that is executable by one or more processors of an apparatus to cause the apparatus to initiate a method for video processing using Cross-Component Adaptive Loop Filter (CCALF), the method comprising:<ul id="ul0041" list-style="none">    <li id="ul0041-0001" num="0000">    <ul id="ul0042" list-style="none">        <li id="ul0042-0001" num="0312">receiving a bitstream associated with a video slice;</li>        <li id="ul0042-0002" num="0313">generating, based on the bitstream, a plurality of reconstructed blocks associated with the video slice;</li>        <li id="ul0042-0003" num="0314">classifying the plurality of reconstructed blocks into one or more classes based on characteristics of the plurality of reconstructed blocks;</li>        <li id="ul0042-0004" num="0315">determining, based on the bitstream, a set of CCALF coefficients for each of the one or more classes; and</li>        <li id="ul0042-0005" num="0316">filtering the one or more classes of reconstructed blocks using the respective sets of CCALF coefficients.</li>    </ul>    </li></ul></p><p id="p-0252" num="0317">67. The non-transitory computer readable medium according to clause 66, wherein the plurality of blocks are luma blocks.</p><p id="p-0253" num="0318">68. The non-transitory computer readable medium according to clause 67, wherein each luma pixel of the video sequence is classified into one of the plurality of classes.</p><p id="p-0254" num="0319">69. The non-transitory computer readable medium according to clause 66, wherein the one or more classes include M classes, M being a positive integer, and wherein classifying the plurality of reconstructed blocks into one or more classes based on characteristics of the plurality of reconstructed blocks, further comprises:<ul id="ul0043" list-style="none">    <li id="ul0043-0001" num="0000">    <ul id="ul0044" list-style="none">        <li id="ul0044-0001" num="0320">classifying the plurality of reconstructed blocks into N classes based on characteristics of the plurality of reconstructed blocks, N being an integer larger than M; and</li>        <li id="ul0044-0002" num="0321">merging the N classes into the one or more classes.</li>    </ul>    </li></ul></p><p id="p-0255" num="0322">70. The non-transitory computer readable medium according to clause 69, wherein the plurality of classes are merged based on a similarity of the filter coefficients of the CCALFs associated with the plurality of classes.</p><p id="p-0256" num="0323">71. A non-transitory computer readable medium storing a bitstream, wherein the bitstream comprises an index associated with video data for Cross-Component Adaptive Loop Filter (CCALF), the index indicating a filter shape selected from a set of filter shapes.</p><p id="p-0257" num="0324">72. A method for video processing using Cross-Component Adaptive Loop Filter (CCALF), comprising:<ul id="ul0045" list-style="none">    <li id="ul0045-0001" num="0000">    <ul id="ul0046" list-style="none">        <li id="ul0046-0001" num="0325">filtering video content using a CCALF, wherein the CCALF is a 24-tap 9&#xd7;9 filter.</li>    </ul>    </li></ul></p><p id="p-0258" num="0326">73. The method according to claim 72, wherein the 24-tap 9&#xd7;9 filter has a cross shape defined as:</p><p id="p-0259" num="0000"><maths id="MATH-US-00007" num="00007"><math overflow="scroll"> <mrow>  <mo>[</mo>  <mtable>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>0</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>1</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>2</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>3</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>9</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>10</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>11</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>12</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>4</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>13</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>14</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>15</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>16</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>17</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>18</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>19</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>20</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>5</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>21</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>22</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>23</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>24</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>6</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>7</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>8</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>  </mtable>  <mo>]</mo> </mrow></math></maths></p><p id="p-0260" num="0327">wherein C<sub>0 </sub>to C<sub>24 </sub>are filter coefficients of the 24-tap 9&#xd7;9 filter.</p><p id="p-0261" num="0328">74. The method according to claim 72, wherein the video content comprises a video slice, and the 24-tap 9&#xd7;9 filter is applied to all coding tree units (CTUs) of the video slice.</p><p id="p-0262" num="0329">75. The method according to any one of claim 72, wherein values of the filter coefficients are integer values between &#x2212;64 and +64.</p><p id="p-0263" num="0330">76. The method according to claim 72, wherein the filter coefficients are coded using variable length code.</p><p id="p-0264" num="0331">77. A non-transitory computer readable medium storing a bitstream, wherein the bitstream comprises a first index associated with encoded video data, the first index identifying a Cross-Component Adaptive Loop Filter (CCALF), wherein the CCALF is a 24-tap 9&#xd7;9 filter, and the first index causes a decoder to filter decoded video content using the 24-tap 9&#xd7;9 filter.</p><p id="p-0265" num="0332">78. The non-transitory computer readable medium according to claim 77, wherein the 24-tap 9&#xd7;9 filter has a cross shape defined as:</p><p id="p-0266" num="0000"><maths id="MATH-US-00008" num="00008"><math overflow="scroll"> <mrow>  <mo>[</mo>  <mtable>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>0</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>1</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>2</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>3</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>9</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>10</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>11</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>12</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>4</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>13</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>14</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>15</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>16</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>17</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>18</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>19</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>20</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>5</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>21</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>22</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>23</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>24</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>6</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>7</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>8</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>  </mtable>  <mo>]</mo> </mrow></math></maths></p><p id="p-0267" num="0333">wherein C<sub>0 </sub>to C<sub>24 </sub>are filter coefficients of the 24-tap 9&#xd7;9 filter.</p><p id="p-0268" num="0334">79. The non-transitory computer readable medium according to claim 77, wherein the bitstream further comprises a coded syntax element, the encoded syntax element comprising filter coefficients of the 24-tap 9&#xd7;9 filter.</p><p id="p-0269" num="0335">80. The non-transitory computer readable medium according to claim 79, wherein the filter coefficients are coded using variable length code.</p><p id="p-0270" num="0336">81. The non-transitory computer readable medium according to claim 77, wherein the first index indicating a first CCALF for Cr component, the bitstream further comprises a second index indicating a second CCALF for Cb component, the first CCALF is a first 24-tap 9&#xd7;9 filter, the second CCALF is a second 24-tap 9&#xd7;9 filter, and the first index and the second index cause the decoder to filter the Cr component of the decoded video content using the first 24-tap 9&#xd7;9 filter, and filter the Cb component of the decoded video content using the second 24-tap 9&#xd7;9 filter.</p><p id="p-0271" num="0337">82. The non-transitory computer readable medium according to claim 81, wherein the bitstream further comprises a coded syntax element, the coded syntax element comprising filter coefficients of the first 24-tap 9&#xd7;9 filter and filter coefficients of the second 24-tap 9&#xd7;9 filter.</p><p id="p-0272" num="0338">83. The non-transitory computer readable medium according to claim 82, wherein in the bitstream, the filter coefficients of the first 24-tap 9&#xd7;9 filter and the filter coefficients of the second 24-tap 9&#xd7;9 filter are coded using variable length code.</p><p id="p-0273" num="0339">In some embodiments, a non-transitory computer-readable storage medium is also provided. In some embodiments, the medium can store all or portions of the video bitstream having the indices, flags, and/or syntax elements that indicate the parameters associated with the CCALF. In some embodiments, the medium can store instructions that may be executed by a device (such as the disclosed encoder and decoder), for performing the above-described methods. Common forms of non-transitory media include, for example, a floppy disk, a flexible disk, hard disk, solid state drive, magnetic tape, or any other magnetic data storage medium, a CD-ROM, any other optical data storage medium, any physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM or any other flash memory, NVRAM, a cache, a register, any other memory chip or cartridge, and networked versions of the same. The device may include one or more processors (CPUs), an input/output interface, a network interface, and/or a memory.</p><p id="p-0274" num="0340">It should be noted that, the relational terms herein such as &#x201c;first&#x201d; and &#x201c;second&#x201d; are used only to differentiate an entity or operation from another entity or operation, and do not require or imply any actual relationship or sequence between these entities or operations. Moreover, the words &#x201c;comprising,&#x201d; &#x201c;having,&#x201d; &#x201c;containing,&#x201d; and &#x201c;including,&#x201d; and other similar forms are intended to be equivalent in meaning and be open ended in that an item or items following any one of these words is not meant to be an exhaustive listing of such item or items, or meant to be limited to only the listed item or items.</p><p id="p-0275" num="0341">As used herein, unless specifically stated otherwise, the term &#x201c;or&#x201d; encompasses all possible combinations, except where infeasible. For example, if it is stated that a database may include A or B, then, unless specifically stated otherwise or infeasible, the database may include A, or B, or A and B. As a second example, if it is stated that a database may include A, B, or C, then, unless specifically stated otherwise or infeasible, the database may include A, or B, or C, or A and B, or A and C, or B and C, or A and B and C.</p><p id="p-0276" num="0342">It is appreciated that the above described embodiments can be implemented by hardware, or software (program codes), or a combination of hardware and software. If implemented by software, it may be stored in the above-described computer-readable media. The software, when executed by the processor can perform the disclosed methods. The computing units and other functional units described in this disclosure can be implemented by hardware, or software, or a combination of hardware and software. One of ordinary skill in the art will also understand that multiple ones of the above described modules/units may be combined as one module/unit, and each of the above described modules/units may be further divided into a plurality of sub-modules/sub-units.</p><p id="p-0277" num="0343">In the foregoing specification, embodiments have been described with reference to numerous specific details that can vary from implementation to implementation. Certain adaptations and modifications of the described embodiments can be made. Other embodiments can be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only, with a true scope and spirit of the invention being indicated by the following claims. It is also intended that the sequence of steps shown in figures are only for illustrative purposes and are not intended to be limited to any particular sequence of steps. As such, those skilled in the art can appreciate that these steps can be performed in a different order while implementing the same method.</p><p id="p-0278" num="0344">In the drawings and specification, there have been disclosed exemplary embodiments. However, many variations and modifications can be made to these embodiments. Accordingly, although specific terms are employed, they are used in a generic and descriptive sense only and not for purposes of limitation.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001 MATH-US-00001-2 MATH-US-00001-3 MATH-US-00001-4" nb-file="US20230007245A1-20230105-M00001.NB"><img id="EMI-M00001" he="38.10mm" wi="76.20mm" file="US20230007245A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230007245A1-20230105-M00002.NB"><img id="EMI-M00002" he="8.47mm" wi="76.20mm" file="US20230007245A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230007245A1-20230105-M00003.NB"><img id="EMI-M00003" he="28.53mm" wi="76.20mm" file="US20230007245A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004" nb-file="US20230007245A1-20230105-M00004.NB"><img id="EMI-M00004" he="28.53mm" wi="76.20mm" file="US20230007245A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00005" nb-file="US20230007245A1-20230105-M00005.NB"><img id="EMI-M00005" he="28.53mm" wi="76.20mm" file="US20230007245A1-20230105-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00006" nb-file="US20230007245A1-20230105-M00006.NB"><img id="EMI-M00006" he="28.53mm" wi="76.20mm" file="US20230007245A1-20230105-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00007" nb-file="US20230007245A1-20230105-M00007.NB"><img id="EMI-M00007" he="28.53mm" wi="76.20mm" file="US20230007245A1-20230105-M00007.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00008" nb-file="US20230007245A1-20230105-M00008.NB"><img id="EMI-M00008" he="28.53mm" wi="76.20mm" file="US20230007245A1-20230105-M00008.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00009" nb-file="US20230007245A1-20230105-M00009.NB"><img id="EMI-M00009" he="28.53mm" wi="76.20mm" file="US20230007245A1-20230105-M00009.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00010" nb-file="US20230007245A1-20230105-M00010.NB"><img id="EMI-M00010" he="28.53mm" wi="76.20mm" file="US20230007245A1-20230105-M00010.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00011" nb-file="US20230007245A1-20230105-M00011.NB"><img id="EMI-M00011" he="28.53mm" wi="76.20mm" file="US20230007245A1-20230105-M00011.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for video processing using Cross-Component Adaptive Loop Filter (CCALF), comprising:<claim-text>filtering decoded video content using a CCALF, wherein the CCALF is a 24-tap 9&#xd7;9 filter.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the 24-tap 9&#xd7;9 filter has a cross shape defined as:</claim-text><claim-text><maths id="MATH-US-00009" num="00009"><math overflow="scroll"> <mrow>  <mo>[</mo>  <mtable>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>0</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>1</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>2</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>3</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>9</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>10</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>11</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>12</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>4</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>13</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>14</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>15</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>16</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>17</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>18</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>19</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>20</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>5</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>21</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>22</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>23</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>24</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>6</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>7</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>8</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>  </mtable>  <mo>]</mo> </mrow></math></maths><claim-text>wherein C<sub>0 </sub>to C<sub>24 </sub>are filter coefficients of the 24-tap 9&#xd7;9 filter.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the decoded video content comprises a video slice, and the 24-tap 9&#xd7;9 filter is applied to all coding tree units (CTUs) of the video slice.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to any one of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein values of the filter coefficients are integer values between &#x2212;64 and +64.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the filter coefficients are coded using variable length code.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. A method for video processing using Cross-Component Adaptive Loop Filter (CCALF), comprising:<claim-text>filtering video content using a CCALF, wherein the CCALF is a 24-tap 9&#xd7;9 filter.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the 24-tap 9&#xd7;9 filter has a cross shape defined as:</claim-text><claim-text><maths id="MATH-US-00010" num="00010"><math overflow="scroll"> <mrow>  <mo>[</mo>  <mtable>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>0</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>1</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>2</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>3</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>9</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>10</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>11</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>12</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>4</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>13</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>14</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>15</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>16</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>17</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>18</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>19</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>20</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>5</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>21</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>22</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>23</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>24</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>6</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>7</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>8</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>  </mtable>  <mo>]</mo> </mrow></math></maths><claim-text>wherein C<sub>0 </sub>to C<sub>24 </sub>are filter coefficients of the 24-tap 9&#xd7;9 filter.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the video content comprises a video slice, and the 24-tap 9&#xd7;9 filter is applied to all coding tree units (CTUs) of the video slice.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method according to any one of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein values of the filter coefficients are integer values between &#x2212;64 and +64.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the filter coefficients are coded using variable length code.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A non-transitory computer readable medium storing a bitstream, wherein the bitstream comprises a first index associated with encoded video data, the first index identifying a Cross-Component Adaptive Loop Filter (CCALF), wherein the CCALF is a 24-tap 9&#xd7;9 filter, and the first index causes a decoder to filter decoded video content using the 24-tap 9&#xd7;9 filter.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the 24-tap 9&#xd7;9 filter has a cross shape defined as:</claim-text><claim-text><maths id="MATH-US-00011" num="00011"><math overflow="scroll"> <mrow>  <mo>[</mo>  <mtable>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>0</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>1</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>2</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>3</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>9</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>10</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>11</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>12</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>4</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>13</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>14</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>15</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>16</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <msub>      <mi>C</mi>      <mn>17</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>18</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>19</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>20</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>5</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>21</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>22</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>23</mn>     </msub>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>24</mn>     </msub>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>6</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>7</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>   <mtr>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <msub>      <mi>C</mi>      <mn>8</mn>     </msub>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>    <mtd>     <mtext> </mtext>    </mtd>   </mtr>  </mtable>  <mo>]</mo> </mrow></math></maths><claim-text>wherein C<sub>0 </sub>to C<sub>24 </sub>are filter coefficients of the 24-tap 9&#xd7;9 filter.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the bitstream further comprises a coded syntax element, the encoded syntax element comprising filter coefficients of the 24-tap 9&#xd7;9 filter.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the filter coefficients are coded using variable length code.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the first index indicating a first CCALF for Cr component, the bitstream further comprises a second index indicating a second CCALF for Cb component, the first CCALF is a first 24-tap 9&#xd7;9 filter, the second CCALF is a second 24-tap 9&#xd7;9 filter, and the first index and the second index cause the decoder to filter the Cr component of the decoded video content using the first 24-tap 9&#xd7;9 filter, and filter the Cb component of the decoded video content using the second 24-tap 9&#xd7;9 filter.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the bitstream further comprises a coded syntax element, the coded syntax element comprising filter coefficients of the first 24-tap 9&#xd7;9 filter and filter coefficients of the second 24-tap 9&#xd7;9 filter.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein in the bitstream, the filter coefficients of the first 24-tap 9&#xd7;9 filter and the filter coefficients of the second 24-tap 9&#xd7;9 filter are coded using variable length code.</claim-text></claim></claims></us-patent-application>