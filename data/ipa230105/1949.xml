<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230001950A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230001950</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17823973</doc-number><date>20220901</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>B</section><class>60</class><subclass>W</subclass><main-group>60</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20200201</date></cpc-version-indicator><section>B</section><class>60</class><subclass>W</subclass><main-group>60</main-group><subgroup>001</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20200201</date></cpc-version-indicator><section>B</section><class>60</class><subclass>W</subclass><main-group>2556</main-group><subgroup>25</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>B</section><class>60</class><subclass>W</subclass><main-group>2420</main-group><subgroup>42</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">USING PREDICTIVE VISUAL ANCHORS TO CONTROL AN AUTONOMOUS VEHICLE</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16671983</doc-number><date>20191101</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11458988</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17823973</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62900076</doc-number><date>20190913</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>GHOST AUTONOMY INC.</orgname><address><city>MOUNTAIN VIEW</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>HAYES</last-name><first-name>JOHN</first-name><address><city>MOUNTAIN VIEW</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>UHLIG</last-name><first-name>VOLKMAR</first-name><address><city>CUPERTINO</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>SAGAR</last-name><first-name>AKASH J.</first-name><address><city>REDWOOD CITY</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>SOLTANI</last-name><first-name>NIMA</first-name><address><city>LOS GATOS</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>TIAN</last-name><first-name>FENG</first-name><address><city>FOSTER CITY</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Using predictive visual anchors to control an autonomous vehicle, including: determining, based on a plurality of frames of video data from a camera of an autonomous vehicle, one or more predicted visual anchors, wherein the one or more predicted visual anchors comprise a predicted location of one or more visual anchors at a future time relative to when the plurality of frames were captured; identifying, in another frame of video data corresponding to the future time, the one or more visual anchors; determining one or more differentials between the one or more visual anchors and the one or more predicted visual anchors; determining, based on the one or more differentials, one or more control operations for the autonomous vehicle; and applying the one or more control operations.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="179.24mm" wi="138.43mm" file="US20230001950A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="196.93mm" wi="140.46mm" file="US20230001950A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="205.32mm" wi="164.17mm" file="US20230001950A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="159.51mm" wi="129.62mm" file="US20230001950A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="191.26mm" wi="139.19mm" file="US20230001950A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="217.00mm" wi="159.43mm" file="US20230001950A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="213.36mm" wi="154.69mm" file="US20230001950A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="214.88mm" wi="158.24mm" file="US20230001950A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="216.24mm" wi="156.63mm" file="US20230001950A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This is a continuation application for patent entitled to a filing date and claiming the benefit of earlier-filed U.S. patent application Ser. No. 16/671,983, filed Nov. 1, 2019, which claims priority from U.S. Provisional Patent Application Ser. No. 62/900,076, filed Sep. 13, 2019, each of which is incorporated herein by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><heading id="h-0003" level="1">Field of the Invention</heading><p id="p-0003" num="0002">The field of the invention is automated vehicles, or, more specifically, methods, apparatus, autonomous vehicles, and products for controlling an automated vehicle using visual anchors.</p><heading id="h-0004" level="1">Description Of Related Art</heading><p id="p-0004" num="0003">Autonomous vehicles may determine control decisions based on a variety of sensor inputs. Such autonomous vehicles may require a complex array of sensors to perform autonomous functions.</p><heading id="h-0005" level="1">SUMMARY</heading><p id="p-0005" num="0004">Controlling an automated vehicle using visual anchors may include receiving, from one or more cameras of an autonomous vehicle, first video data; identifying one or more visual anchors in the first video data; determining one or more differentials between the one or more visual anchors and one or more predicted visual anchors; and determining, based on the one or more differentials, one or more control operations for the autonomous vehicle to reduce the one or more differentials.</p><p id="p-0006" num="0005">The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows example views of an autonomous vehicle for controlling an automated vehicle using visual anchors.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is block diagram of an autonomous computing system for controlling an automated vehicle using visual anchors.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram of a redundant power fabric for controlling an automated vehicle using visual anchors.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of a redundant data fabric for controlling an automated vehicle using visual anchors.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example view of process allocation across CPU packages for controlling an automated vehicle using visual anchors.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart of an example method for controlling an automated vehicle using visual anchors.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart of an example method for controlling an automated vehicle using visual anchors.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart of an example method for controlling an automated vehicle using visual anchors.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0007" level="1">DETAILED DESCRIPTION</heading><p id="p-0015" num="0014">Controlling an automated vehicle using visual anchors may be implemented in an autonomous vehicle. Accordingly, <figref idref="DRAWINGS">FIG. <b>1</b></figref> shows multiple views of an autonomous vehicle <b>100</b> configured for controlling an automated vehicle using visual anchors according to embodiments of the present invention. Right side view <b>101</b><i>a </i>shows a right side of the autonomous vehicle <b>100</b>. Shown in the right side view <b>101</b><i>a </i>are cameras <b>102</b> and <b>103</b>, configured to capture image data, video data, and/or audio data of the environmental state of the autonomous vehicle <b>100</b> from the perspective of the right side of the car. Front view <b>101</b><i>b </i>shows a front side of the autonomous vehicle <b>100</b>. Shown in the front view <b>101</b><i>b </i>are cameras <b>104</b> and <b>106</b>, configured to capture image data, video data, and/or audio data of the environmental state of the autonomous vehicle <b>100</b> from the perspective of the front of the car. Rear view <b>101</b><i>c </i>shows a rear side of the autonomous vehicle <b>100</b>. Shown in the rear view <b>101</b><i>c </i>are cameras <b>108</b> and <b>110</b>, configured to capture image data, video data, and/or audio data of the environmental state of the autonomous vehicle <b>100</b> from the perspective of the rear of the car. Top view <b>101</b><i>d </i>shows a rear side of the autonomous vehicle <b>100</b>. Shown in the top view <b>101</b><i>d </i>are cameras <b>102</b>-<b>110</b>. Also shown are cameras <b>112</b> and <b>114</b>, configured to capture image data, video data, and/or audio data of the environmental state of the autonomous vehicle <b>100</b> from the perspective of the left side of the car.</p><p id="p-0016" num="0015">Further shown in the top view <b>101</b><i>d </i>is an automation computing system <b>116</b>. The automation computing system <b>116</b> comprises one or more computing devices configured to control one or more autonomous operations (e.g., autonomous driving operations) of the autonomous vehicle <b>100</b>. For example, the automation computing system <b>116</b> may be configured to process sensor data (e.g., data from the cameras <b>102</b>-<b>114</b> and potentially other sensors), operational data (e.g., a speed, acceleration, gear, orientation, turning direction), and other data to determine a operational state and/or operational history of the autonomous vehicle. The automation computing system <b>116</b> may then determine one or more operational commands for the autonomous vehicle (e.g., a change in speed or acceleration, a change in brake application, a change in gear, a change in turning or orientation, etc.). The automation computing system <b>116</b> may also capture and store sensor data. Operational data of the autonomous vehicle may also be stored in association with corresponding sensor data, thereby indicating the operational data of the autonomous vehicle <b>100</b> at the time the sensor data was captured.</p><p id="p-0017" num="0016">Although the autonomous vehicle <b>100</b> if <figref idref="DRAWINGS">FIG. <b>1</b></figref> is shown as car, it is understood that autonomous vehicles <b>100</b> configured for controlling an automated vehicle using visual anchors may also include other vehicles, including motorcycles, planes, helicopters, unmanned aerial vehicles (UAVs, e.g., drones), or other vehicles as can be appreciated. Moreover, it is understood that additional cameras or other external sensors may also be included in the autonomous vehicle <b>100</b>.</p><p id="p-0018" num="0017">Controlling an automated vehicle using visual anchors in accordance with the present invention is generally implemented with computers, that is, with automated computing machinery. For further explanation, therefore, <figref idref="DRAWINGS">FIG. <b>2</b></figref> sets forth a block diagram of automated computing machinery comprising an exemplary automation computing system <b>116</b> configured for controlling an automated vehicle using visual anchors according to embodiments of the present invention. The automation computing system <b>116</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes at least one computer Central Processing Unit (CPU) package <b>204</b> as well as random access memory <b>206</b> (RAM') which is connected through a high speed memory bus <b>208</b> and bus adapter <b>210</b> to CPU packages <b>204</b> via a front side bus <b>211</b> and to other components of the automation computing system <b>116</b>.</p><p id="p-0019" num="0018">A CPU package <b>204</b> may comprise a plurality of processing units. For example, each CPU package <b>204</b> may comprise a logical or physical grouping of a plurality of processing units. Each processing unit may be allocated a particular process for execution. Moreover, each CPU package <b>204</b> may comprise one or more redundant processing units. A redundant processing unit is a processing unit not allocated a particular process for execution unless a failure occurs in another processing unit. For example, when a given processing unit allocated a particular process fails, a redundant processing unit may be selected and allocated the given process. A process may be allocated to a plurality of processing units within the same CPU package <b>204</b> or different CPU packages <b>204</b>. For example, a given process may be allocated to a primary processing unit in a CPU package <b>204</b>. The results or output of the given process may be output from the primary processing unit to a receiving process or service. The given process may also be executed in parallel on a secondary processing unit. The secondary processing unit may be included within the same CPU package <b>204</b> or a different CPU package <b>204</b>. The secondary processing unit may not provide its output or results of the process until the primary processing unit fails. The receiving process or service will then receive data from the secondary processing unit. A redundant processing unit may then be selected and have allocated the given process to ensure that two or more processing units are allocated the given process for redundancy and increased reliability.</p><p id="p-0020" num="0019">The CPU packages <b>204</b> are communicatively coupled to one or more sensors <b>212</b>. The sensors <b>212</b> are configured to capture sensor data describing the operational and environmental conditions of an autonomous vehicle. For example, the sensors <b>212</b> may include cameras (e.g., the cameras <b>102</b>-<b>114</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), accelerometers, Global Positioning System (GPS) radios, Lidar sensors, or other sensors as can be appreciated. As described herein, cameras may include a stolid state sensor <b>212</b> with a solid state shutter capable of measuring photons or a time of flight of photons. For example, a camera may be configured to capture or measure photons captured via the shutter for encoding as images and/or video data. As another example, a camera may emit photons and measure the time of flight of the emitted photons. Cameras may also include event cameras configured to measure changes in light and/or motion of light.</p><p id="p-0021" num="0020">Although the sensors <b>212</b> are shown as being external to the automation computing system <b>116</b>, it is understood that one or more of the sensors <b>212</b> may reside as a component of the automation computing system <b>212</b> (e.g., on the same board, within the same housing or chassis). The sensors <b>212</b> may be communicatively coupled with the CPU packages <b>204</b> via a switched fabric <b>213</b>. The switched fabric <b>213</b> comprises a communications topology through which the CPU packages <b>204</b> and sensors <b>212</b> are coupled via a plurality of switching mechanisms (e.g., latches, switches, crossbar switches, field programmable gate arrays (FPGAs), etc.). For example, the switched fabric <b>213</b> may implement a mesh connection connecting the CPU packages <b>204</b> and sensors <b>212</b> as endpoints, with the switching mechanisms serving as intermediary nodes of the mesh connection. The CPU packages <b>204</b> and sensors <b>212</b> may be in communication via a plurality of switched fabrics <b>213</b>. For example, each of the switched fabrics <b>213</b> may include the CPU packages <b>204</b> and sensors <b>212</b>, or a subset of the CPU packages <b>204</b> and sensors <b>212</b>, as endpoints. Each switched fabric <b>213</b> may also comprise a respective plurality of switching components. The switching components of a given switched fabric <b>213</b> may be independent (e.g., not connected) of the switching components of other switched fabrics <b>213</b> such that only switched fabric <b>213</b> endpoints (e.g., the CPU packages <b>204</b> and sensors <b>212</b>) are overlapping across the switched fabrics <b>213</b>. This provides redundancy such that, should a connection between a CPU package <b>204</b> and sensor <b>212</b> fail in one switched fabric <b>213</b>, the CPU package <b>204</b> and sensor <b>212</b> may remain connected via another switched fabric <b>213</b>. Moreover, in the event of a failure in a CPU package <b>204</b>, a processor of a CPU package <b>204</b>, or a sensor, a communications path excluding the failed component and including a functional redundant component may be established.</p><p id="p-0022" num="0021">The CPU packages <b>204</b> and sensors <b>212</b> are configured to receive power from one or more power supplies <b>215</b>. The power supplies <b>215</b> may comprise an extension of a power system of the autonomous vehicle <b>100</b> or an independent power source (e.g., a battery). The power supplies <b>215</b> may supply power to the CPU packages <b>204</b> and sensors <b>212</b> by another switched fabric <b>214</b>. The switched fabric <b>214</b> provides redundant power pathways such that, in the event of a failure in a power connection, a new power connection pathway may be established to the CPU packages <b>204</b> and sensors <b>214</b>.</p><p id="p-0023" num="0022">Stored in RAM <b>206</b> is an automation module <b>220</b>. The automation module <b>220</b> may be configured to process sensor data from the sensors <b>212</b> to determine one or more operational commands for an autonomous vehicle <b>100</b> to affect the movement, direction, or other function of the autonomous vehicle <b>100</b>, thereby facilitating autonomous driving or operation of the vehicle. Such operational commands may include a change in the speed of the autonomous vehicle <b>100</b>, a change in steering direction, a change in gear, or other command as can be appreciated. For example, the automation module <b>220</b> may provide sensor data and/or processed sensor data as one or more inputs to a trained machine learning model (e.g., a trained neural network) to determine the one or more operational commands. The operational commands may then be communicated to autonomous vehicle control systems <b>223</b> via a vehicle interface <b>222</b>. The autonomous vehicle control systems <b>223</b> are configured to affect the movement and operation of the autonomous vehicle <b>100</b>. For example, the autonomous vehicle control systems <b>223</b> may turn or otherwise change the direction of the autonomous vehicle <b>100</b>, accelerate or decelerate the autonomous vehicle <b>100</b>, change a gear of the autonomous vehicle <b>100</b>, or otherwise affect the movement and operation of the autonomous vehicle <b>100</b>.</p><p id="p-0024" num="0023">Further stored in RAM <b>206</b> is a data collection module <b>224</b> configured to process and/or store sensor data received from the one or more sensors <b>212</b>. For example, the data collection module <b>224</b> may store the sensor data as captured by the one or more sensors <b>212</b>, or processed sensor data <b>212</b> (e.g., sensor data <b>212</b> having object recognition, compression, depth filtering, or other processes applied). Such processing may be performed by the data collection module <b>224</b> in real-time or in substantially real-time as the sensor data is captured by the one or more sensors <b>212</b>. The processed sensor data may then be used by other functions or modules. For example, the automation module <b>220</b> may use processed sensor data as input to determine one or more operational commands. The data collection module <b>224</b> may store the sensor data in data storage <b>218</b>.</p><p id="p-0025" num="0024">Also stored in RAM <b>206</b> is a data processing module <b>226</b>. The data processing module <b>226</b> is configured to perform one or more processes on stored sensor data (e.g., stored in data storage <b>218</b> by the data collection module <b>218</b>) prior to upload to a server <b>227</b>. Such operations can include filtering, compression, encoding, decoding, or other operations as can be appreciated. The data processing module <b>226</b> may then communicate the processed and stored sensor data to the server <b>227</b>.</p><p id="p-0026" num="0025">Further stored in RAM <b>206</b> is a hypervisor <b>228</b>. The hypervisor <b>228</b> is configured to manage the configuration and execution of one or more virtual machines <b>229</b>. For example, each virtual machine <b>229</b> may emulate and/or simulate the operation of a computer. Accordingly, each virtual machine <b>229</b> may comprise a guest operating system <b>216</b> for the simulated computer. The hypervisor <b>228</b> may manage the creation of a virtual machine <b>229</b> including installation of the guest operating system <b>216</b>. The hypervisor <b>228</b> may also manage when execution of a virtual machine <b>229</b> begins, is suspended, is resumed, or is terminated. The hypervisor <b>228</b> may also control access to computational resources (e.g., processing resources, memory resources, device resources) by each of the virtual machines.</p><p id="p-0027" num="0026">Each of the virtual machines <b>229</b> may be configured to execute one or more of the automation module <b>220</b>, the data collection module <b>224</b>, the data processing module <b>226</b>, or combinations thereof. Moreover, as is set forth above, each of the virtual machines <b>229</b> may comprise its own guest operating system <b>216</b>. Guest operating systems <b>216</b> useful in autonomous vehicles in accordance with some embodiments of the present disclosure include UNIX&#x2122;, Linux&#x2122;, Microsoft Windows&#x2122;, AIX&#x2122;, IBM's i OS&#x2122;, and others as will occur to those of skill in the art. For example, the autonomous vehicle <b>100</b> may be configured to execute a first operating system when the autonomous vehicle is in an autonomous (or even partially autonomous) driving mode and the autonomous vehicle <b>100</b> may be configured to execute a second operating system when the autonomous vehicle is not in an autonomous (or even partially autonomous) driving mode. In such an example, the first operating system may be formally verified, secure, and operate in real-time such that data collected from the sensors <b>212</b> are processed within a predetermined period of time, and autonomous driving operations are performed within a predetermined period of time, such that data is processed and acted upon essentially in real-time. Continuing with this example, the second operating system may not be formally verified, may be less secure, and may not operate in real-time as the tasks that are carried out (which are described in greater detail below) by the second operating system are not as time-sensitive the tasks (e.g., carrying out self-driving operations) performed by the first operating system.</p><p id="p-0028" num="0027">Readers will appreciate that although the example included in the preceding paragraph relates to an embodiment where the autonomous vehicle <b>100</b> may be configured to execute a first operating system when the autonomous vehicle is in an autonomous (or even partially autonomous) driving mode and the autonomous vehicle <b>100</b> may be configured to execute a second operating system when the autonomous vehicle is not in an autonomous (or even partially autonomous) driving mode, other embodiments are within the scope of the present disclosure. For example, in another embodiment one CPU (or other appropriate entity such as a chip, CPU core, and so on) may be executing the first operating system and a second CPU (or other appropriate entity) may be executing the second operating system, where switching between these two modalities is accomplished through fabric switching, as described in greater detail below. Likewise, in some embodiments, processing resources such as a CPU may be partitioned where a first partition supports the execution of the first operating system and a second partition supports the execution of the second operating system.</p><p id="p-0029" num="0028">The guest operating systems <b>216</b> may correspond to a particular operating system modality. An operating system modality is a set of parameters or constraints which a given operating system satisfies, and are not satisfied by operating systems of another modality. For example, a given operating system may be considered a &#x201c;real-time operating system&#x201d; in that one or more processes executed by the operating system must be performed according to one or more time constraints. For example, as the automation module <b>220</b> must make determinations as to operational commands to facilitate autonomous operation of a vehicle. Accordingly, the automation module <b>220</b> must make such determinations within one or more time constraints in order for autonomous operation to be performed in real time. The automation module <b>220</b> may then be executed in an operating system (e.g., a guest operating system <b>216</b> of a virtual machine <b>229</b>) corresponding to a &#x201c;real-time operating system&#x201d; modality. Conversely, the data processing module <b>226</b> may be able to perform its processing of sensor data independent of any time constrains, and may then be executed in an operating system (e.g., a guest operating system <b>216</b> of a virtual machine <b>229</b>) corresponding to a &#x201c;non-real-time operating system&#x201d; modality.</p><p id="p-0030" num="0029">As another example, an operating system (e.g., a guest operating system <b>216</b> of a virtual machine <b>229</b>) may comprise a formally verified operating system. A formally verified operating system is an operating system for which the correctness of each function and operation has been verified with respect to a formal specification according to formal proofs. A formally verified operating system and an unverified operating system (e.g., one that has not been formally verified according to these proofs) can be said to operate in different modalities.</p><p id="p-0031" num="0030">The automation module <b>220</b>, data collection module <b>224</b>, data collection module <b>224</b>, data processing module <b>226</b>, hypervisor <b>228</b>, and virtual machine <b>229</b> in the example of <figref idref="DRAWINGS">FIG. <b>2</b></figref> are shown in RAM <b>206</b>, but many components of such software typically are stored in non-volatile memory also, such as, for example, on data storage <b>218</b>, such as a disk drive. Moreover, any of the automation module <b>220</b>, data collection module <b>224</b>, and data processing module <b>226</b> may be executed in a virtual machine <b>229</b> and facilitated by a guest operating system <b>216</b> of that virtual machine <b>229</b>.</p><p id="p-0032" num="0031">The automation computing system <b>116</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes disk drive adapter <b>230</b> coupled through expansion bus <b>232</b> and bus adapter <b>210</b> to processor(s) <b>204</b> and other components of the automation computing system <b>116</b>. Disk drive adapter <b>230</b> connects non-volatile data storage to the automation computing system <b>116</b> in the form of data storage <b>213</b>. Disk drive adapters <b>230</b> useful in computers configured for controlling an automated vehicle using visual anchors according to embodiments of the present invention include Integrated Drive Electronics (&#x2018;IDE&#x2019;) adapters, Small Computer System Interface (SCSI') adapters, and others as will occur to those of skill in the art. Non-volatile computer memory also may be implemented for as an optical disk drive, electrically erasable programmable read-only memory (so-called &#x2018;EEPROM&#x2019; or &#x2018;Flash&#x2019; memory), RAM drives, and so on, as will occur to those of skill in the art.</p><p id="p-0033" num="0032">The exemplary automation computing system <b>116</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes a communications adapter <b>238</b> for data communications with other computers and for data communications with a data communications network. Such data communications may be carried out serially through RS-238 connections, through external buses such as a Universal Serial Bus ('USB'), through data communications networks such as IP data communications networks, and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer, directly or through a data communications network. Examples of communications adapters useful in computers configured for controlling an automated vehicle using visual anchors according to embodiments of the present invention include modems for wired dial-up communications, Ethernet (IEEE 802.3) adapters for wired data communications, 802.11 adapters for wireless data communications, as well as mobile adapters (e.g., cellular communications adapters) for mobile data communications. For example, the automation computing system <b>116</b> may communicate with one or more remotely disposed servers <b>227</b> via the communications adapter <b>238</b>.</p><p id="p-0034" num="0033">The exemplary automation computing system of <figref idref="DRAWINGS">FIG. <b>2</b></figref> also includes one or more Artificial Intelligence (AI) accelerators <b>240</b>. The AI accelerator <b>240</b> provides hardware-based assistance and acceleration of AI-related functions, including machine learning, computer vision, etc. Accordingly, performance of any of the automation module <b>220</b>, data collection module <b>224</b>, data processing module <b>226</b>, or other operations of the automation computing system <b>116</b> may be performed at least in part by the AI accelerators <b>240</b>.</p><p id="p-0035" num="0034">The exemplary automation computing system of <figref idref="DRAWINGS">FIG. <b>2</b></figref> also includes one or more graphics processing units (GPUs) <b>242</b>. The GPUs <b>242</b> are configured to provide additional processing and memory resources for processing image and/or video data, including encoding, decoding, etc. Accordingly, performance of any of the automation module <b>220</b>, data collection module <b>224</b>, data processing module <b>226</b>, or other operations of the automation computing system <b>116</b> may be performed at least in part by the GPUs <b>242</b>.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example redundant power fabric for controlling an automated vehicle using visual anchors. The redundant power fabric provides redundant pathways for power transfer between the power supplies <b>215</b>, the sensors <b>212</b>, and the CPU packages <b>204</b>. In this example, the power supplies <b>215</b> are coupled to the sensors <b>212</b> and CPU packages via two switched fabrics <b>214</b><i>a </i>and <b>214</b><i>b. </i>The topology shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> provides redundant pathways between the power supplies <b>215</b>, the sensors <b>212</b>, and the CPU packages <b>204</b> such that power can be rerouted through any of multiple pathways in the event of a failure in an active connection pathway. The switched fabrics <b>214</b><i>a </i>and <b>214</b><i>b </i>may provide power to the sensors <b>212</b> using various connections, including Mobile Industry Processor Interface (MIPI), Inter-Integrated Circuit (I<b>2</b>C), Universal Serial Bus (USB), or another connection. The switched fabrics <b>214</b><i>a </i>and <b>214</b><i>b </i>may also provide power to the CPU packages <b>204</b> using various connections, including Peripheral Component Interconnect Express (PCIe), USB, or other connections. Although only two switched fabrics <b>214</b><i>a </i>and <b>214</b><i>b </i>are shown connecting the power supplies <b>215</b> to the sensors <b>212</b> and CPU packages <b>204</b>, it is understood that the approach shown by <figref idref="DRAWINGS">FIG. <b>3</b></figref> can be modified to include additional switched fabrics <b>214</b>.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an example redundant data fabric for controlling an automated vehicle using visual anchors. The redundant data fabric provides redundant data connection pathways between sensors <b>212</b> and CPU packages <b>204</b>. In this example view, three CPU packages <b>204</b><i>a, </i><b>204</b><i>b, </i>and <b>204</b><i>c </i>are connected to three sensors <b>212</b><i>a, </i><b>212</b><i>b, </i>and <b>212</b><i>c </i>via three switched fabrics <b>213</b><i>a, </i><b>213</b><i>b, </i>and <b>213</b><i>c. </i>Each CPU package <b>204</b><i>a, </i><b>204</b><i>b, </i>and <b>204</b><i>c </i>is connected to a subset of the switched fabrics <b>213</b><i>a, </i><b>213</b><i>b, </i>and <b>213</b><i>c. </i>For example, CPU package <b>204</b><i>a </i>is connected to switched fabrics <b>213</b><i>a </i>and <b>213</b><i>c, </i>CPU package <b>204</b><i>b </i>is connected to switched fabrics <b>213</b><i>a </i>and <b>213</b><i>b, </i>and CPU package <b>204</b><i>c </i>is connected to switched fabrics <b>213</b><i>b </i>and <b>213</b><i>c. </i>Each switched fabric <b>213</b><i>a, </i><b>213</b><i>b, </i>and <b>213</b><i>c </i>is connected to a subset of the sensors <b>212</b><i>a, </i><b>212</b><i>b, </i>and <b>212</b><i>c. </i>For example, switched fabric <b>213</b><i>a </i>is connected to sensors <b>212</b><i>a </i>and <b>212</b><i>b, </i>switched fabric <b>213</b><i>b </i>is connected to sensor <b>212</b><i>b </i>and <b>212</b><i>c, </i>and switched fabric <b>213</b><i>c </i>is connected to sensors <b>212</b><i>a </i>and <b>212</b><i>c. </i>Under this topology, each CPU package <b>204</b><i>a, </i><b>204</b><i>b, </i>and <b>204</b><i>c </i>has an available connection path to any sensor <b>212</b><i>a, </i><b>212</b><i>b, </i>and <b>212</b><i>c. </i>It is understood that the topology of <figref idref="DRAWINGS">FIG. <b>4</b></figref> is exemplary, and that CPU packages, switched fabrics, sensors, or connections between components may be added or removed while maintaining redundancy as can be appreciated by one skilled in the art.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example view of process allocation across CPU packages for controlling an automated vehicle using visual anchors. Shown are three CPU packages <b>204</b><i>a, </i><b>204</b><i>b, </i>and <b>204</b><i>c. </i>Each CPU package <b>204</b><i>a </i>includes a processing unit that has been allocated (e.g., by a hypervisor <b>228</b> or other process or service) primary execution of a process and another processing unit that has been allocated secondary execution of a process. As set forth herein, primary execution of a process describes an executing instance of a process whose output will be provided to another process or service. Secondary execution of the process describes executing an instance of the process in parallel to the primary execution, but the output may not be output to the other process or service. For example, in CPU package <b>204</b><i>a, </i>processing unit <b>502</b><i>a </i>has been allocated secondary execution of &#x201c;process B,&#x201d; denoted as secondary process B <b>504</b><i>b, </i>while processing unit <b>502</b><i>b </i>has been allocated primary execution of &#x201c;process C,&#x201d; denoted as primary process C <b>506</b><i>a. </i></p><p id="p-0039" num="0038">CPU package <b>204</b><i>a </i>also comprises two redundant processing units that are not actively executing a process A, B, or C, but are instead reserved in case of failure of an active processing unit. Redundant processing unit <b>508</b><i>a </i>has been reserved as &#x201c;A/B redundant,&#x201d; indicating that reserved processing unit <b>508</b><i>a </i>may be allocated primary or secondary execution of processes A or B in the event of a failure of a processing unit allocated the primary or secondary execution of these processes. Redundant processing unit <b>508</b><i>b </i>has been reserved as &#x201c;A/C redundant,&#x201d; indicating that reserved processing unit <b>508</b><i>b </i>may be allocated primary or secondary execution of processes A or C in the event of a failure of a processing unit allocated the primary or secondary execution of these processes.</p><p id="p-0040" num="0039">CPU package <b>204</b><i>b </i>includes processing unit <b>502</b><i>c, </i>which has been allocated primary execution of &#x201c;process A,&#x201d; denoted as primary process A <b>510</b><i>a, </i>and processing unit <b>502</b><i>d, </i>which has been allocated secondary execution of &#x201c;process C,&#x201d; denoted as secondary process C <b>506</b><i>a. </i>CPU package <b>204</b><i>b </i>also includes redundant processing unit <b>508</b><i>c, </i>reserved as &#x201c;A/B redundant,&#x201d; and redundant processing unit <b>508</b><i>d, </i>reserved as &#x201c;B/C redundant.&#x201d; CPU package <b>204</b><i>c </i>includes processing unit <b>502</b><i>e, </i>which has been allocated primary execution of &#x201c;process B,&#x201d; denoted as primary process B <b>504</b><i>a, </i>and processing unit <b>502</b><i>f, </i>which has been allocated secondary execution of &#x201c;process A,&#x201d; denoted as secondary process A <b>510</b><i>a. </i>CPU package <b>204</b><i>c </i>also includes redundant processing unit <b>508</b><i>e, </i>reserved as &#x201c;B/C redundant,&#x201d; and redundant processing unit <b>508</b><i>f, </i>reserved as &#x201c;A/C redundant.&#x201d;</p><p id="p-0041" num="0040">As set forth in the example view of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, primary and secondary instances processes A, B, and C are each executed in an allocated processing unit. Thus, if a processing unit performing primary execution of a given process fails, the processing unit performing secondary execution may instead provide output of the given process to a receiving process or service. Moreover, the primary and secondary execution of a given process are executed on different CPU packages. Thus, if an entire processing unit fails, execution of each of the processes can continue using one or more processing units handling secondary execution. The redundant processing units <b>508</b><i>a</i>-<i>f </i>allow for allocation of primary or secondary execution of a process in the event of processing unit failure. This further prevents errors caused by processing unit failure as parallel primary and secondary execution of a process may be restored. One skilled in the art would understand that the number of CPU packages, processing units, redundant processing units, and processes may be modified according to performance requirements while maintaining redundancy.</p><p id="p-0042" num="0041">For further explanation, <figref idref="DRAWINGS">FIG. <b>6</b></figref> sets forth a flow chart illustrating an exemplary method for controlling an automated vehicle using visual anchors that includes receiving <b>602</b> (e.g., by an automation computing system <b>116</b>, by an automation module <b>220</b> of an automation computing system <b>116</b>), from one or more cameras <b>603</b> of an autonomous vehicle <b>100</b> (e.g., from one or more camera sensors <b>212</b>), first video data <b>604</b>. The first video data <b>604</b> may comprise a window of most recently captured video data (e.g., a most recently captured 200 ms of video data). The video data <b>604</b> may comprise one or more frames of video data. The first video data <b>604</b> may comprise video data from a plurality of cameras associated with different sensing spaces of the automation computing system <b>116</b>. For example, the first video data <b>604</b> may comprise video data from a camera <b>603</b> for the front side of the automated vehicle <b>100</b>, video data from a camera <b>603</b> for the rear side of the automated vehicle <b>100</b>, video data from a camera <b>603</b> for the left side of the automated vehicle <b>100</b>, and video data from a camera <b>603</b> for the right side of the automated vehicle <b>100</b>.</p><p id="p-0043" num="0042">The method of <figref idref="DRAWINGS">FIG. <b>6</b></figref> further comprises identifying <b>606</b> one or more visual anchors in the first video data <b>604</b>. The visual anchors may comprise image objects in the first video data <b>604</b>. Image objects comprise two-dimensional projections of physical objects as captured by cameras <b>603</b> and encoded in video data. Such visual anchors may include lane markers, street signs, traffic signals, pedestrians or other persons, vehicles on the road, parked vehicles, etc.</p><p id="p-0044" num="0043">The method of <figref idref="DRAWINGS">FIG. <b>6</b></figref> further comprises determining <b>608</b> one or more differentials between the one or more visual anchors and one or more predicted visual anchors. The one or more predicted visual anchors comprise one or more visual anchors in a predicted arrangement based on previously captured sensor data comprising second video data. The sensor data may comprise a time window of previously received or captured sensor data. For example, the sensor data may comprise sensor data received within a time window ending at a time offset relative to a current time. As an example, where the first video data comprises a most recently captured 200 ms of video data, the sensor data may comprise a time window (e.g., 200 ms, 400 ms, 600 ms, etc.) of sensor data ending 200 ms prior to the current time. In other words, the one or more visual anchors in the first video data would reflect an actual arrangement of one or more entities at a given time, and the one or more predicted visual anchors in the sensor data comprising the second video data would reflect a predicted arrangement of the one or more entities at the given time.</p><p id="p-0045" num="0044">For example, a machine learning model may be configured to predict behavior of entities in the environment relative to the autonomous vehicle <b>100</b> by predicting an arrangement of their corresponding visual anchors. Accordingly, the machine learning model may accept, as input, sensor data comprising second video data, as well as potentially other sensor data (e.g., data from gyroscopes, accelerometers, global positioning system radios, or other sensors <b>212</b>). The machine learning model may also accept as input one or more visual anchors identified from the sensor data. The machine learning model may then provide, as output, the one or more predicted visual anchors (e.g., the one or more visual anchors identified from the sensor data in a predicted arrangement).</p><p id="p-0046" num="0045">Determining <b>608</b> the one or more differentials between the one or more visual anchors and the one or more predicted visual anchors may comprise determining, for each visual anchor, a differential relative to its corresponding predicted visual anchor. Each differential may comprise, for example, a pixel width differential, a pixel height differential, a pixel region differential, or a pixel area differential. Thus, each differential reflects a difference between an actual location of an object in the environment relative to the autonomous vehicle <b>100</b> and a predicted location of the object in the environment relative to the autonomous vehicle <b>100</b>. Each differential may also comprise a difference between motion vectors or matrices (e.g., combinations of vectors) describing the actual or predicted motion of pixels.</p><p id="p-0047" num="0046">For example, assume that an autonomous vehicle <b>100</b> is in a cruising driving mode and that a car is driving and maintaining some distance in front of the autonomous vehicle <b>100</b>. A visual anchor for the car may be identified based on first video data <b>603</b> and compared to a predicted visual anchor for the car based on previously captured sensor data. Assuming the car is behaving as predicted, the differential between the visual anchor and predicted visual anchor would be lower. Should the car behave unpredictably (e.g., unexpectedly accelerate or decelerate), the differential would be higher.</p><p id="p-0048" num="0047">The method of <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes determining <b>610</b>, based on the one or more differentials, one or more control operations for the autonomous vehicle to reduce the one or more differentials. Continuing with the example above, assume that the car in front of the autonomous vehicle <b>100</b> decelerates, resulting in the car being closer to the autonomous vehicle <b>100</b> than predicted. The visual anchor of the car in the first video data <b>603</b> would be larger when compared to a predicted visual anchor of the car (e.g., the visual anchor would have a greater pixel width, height, and/or area compared to the predicted visual anchor). Decelerating the autonomous vehicle <b>100</b> would reduce the differential between the visual anchor and the predicted visual anchor, as the distance between the car and the autonomous vehicle <b>100</b> would be increased, or decrease at a slower rate. Accordingly, a deceleration control action would be determined.</p><p id="p-0049" num="0048">The particular control actions to be determined may be based on a location of the visual anchor corresponding to the differential to be minimized. For example, acceleration or deceleration control actions may be more likely determined for visual anchors corresponding to the front or rear of the autonomous vehicle, while lane changing or turning operations may be more likely more likely determined for visual anchors corresponding to the left or right side of the autonomous vehicle. The control action may also be based on a rate of change in the differentials for a given visual anchor. For example, assume that a car is accelerating and approaching the rear of the autonomous vehicle. Where the rate of change in the differential is low, the autonomous vehicle <b>100</b> may preferentially change lanes to allow the car to pass, or accelerate to maintain a distance relative to the autonomous vehicle. The control action to be determined may also be based on a location of the autonomous vehicle <b>100</b> relative to the road. Continuing with the example above, where the autonomous vehicle <b>100</b> is located in a leftmost lane, the autonomous vehicle <b>100</b> may move the car further to the right as part of a lane change in order to allow the approaching car to pass in the leftmost lane. Where the autonomous vehicle <b>100</b> is not located in the rightmost lane, the autonomous vehicle <b>100</b> may instead accelerate. The determined control action may also be based on one or more safety rules (e.g., speed limits, rules for passing on the right, etc.).</p><p id="p-0050" num="0049">The method of <figref idref="DRAWINGS">FIG. <b>6</b></figref> may be repeatedly performed (e.g., at a predefined interval or frequency). Thus, visual anchors relative to the autonomous vehicle <b>100</b> are continually compared to predicted visual anchors in order to determine control operations for the autonomous vehicle.</p><p id="p-0051" num="0050">Readers will appreciate that controlling an autonomous vehicle, or any robot, with an open-loop system, may benefit from highly accurate sensors which are finely tuned. The control system may therefore calculate a plan which the system should follow and continuously monitors the execution of the plan based on the sensors. This approach breaks down when sensors are incorrectly calibrated, or environmental factors change the behavior (such as side wind or ice). As such, to correct for such deficiencies, a closed-loop visual control system may be used to control the car's actuators (steering, gas, brake). The system may calculate a visual target based of camera sensors and computes a delta between the observed and the target value of a visual feature. Visual features may be the location of lane markers, the location of cars on the road, and so on. For each visual feature, a feature-specific delta function may be defined, which computes the difference between the target location in the visual field and the actual location. The delta is then fed into a control system (e.g., a PID controller) which interfaces with the actuators of the car. The visual features may be computed using a neural network that estimates a visual feature F<sub>E </sub>at time t and predicts a visual feature F<sub>P </sub>at time t+&#x3c4;. At time t+&#x3c4; the system computes the delta between F<sub>E </sub>at t+&#x3c4; and F<sub>P </sub>at t+&#x3c4;, where the delta is subsequently used as an input to the control system. Readers will appreciate that control systems may have operating boundaries (for example, it is not possible to accelerate a regular car from 0 to 100 km/h within 1 second). The operating boundaries of the control system may be used to determine if the difference between F<sub>E </sub>and F<sub>P </sub>can be resolved or if the predicted feature is outside of the operating domain of the car.</p><p id="p-0052" num="0051">For further explanation, <figref idref="DRAWINGS">FIG. <b>7</b></figref> sets forth a flow chart illustrating an exemplary method for controlling an automated vehicle using visual anchors that includes receiving <b>602</b> (e.g., by an automation computing system <b>116</b>, by an automation module <b>220</b> of an automation computing system <b>116</b>), from one or more cameras <b>603</b> of an autonomous vehicle <b>100</b> (e.g., from one or more camera sensors <b>212</b>), first video data <b>604</b>; identifying <b>606</b> one or more visual anchors in the first video data <b>604</b>; determining <b>608</b> one or more differentials between the one or more visual anchors and the one or more objective visual anchors; and determining <b>610</b>, based on the one or more differentials, one or more control operations for the autonomous vehicle <b>100</b> to reduce the one or more differentials.</p><p id="p-0053" num="0052">The method of <figref idref="DRAWINGS">FIG. <b>7</b></figref> differs from <figref idref="DRAWINGS">FIG. <b>6</b></figref> in that the method of <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes applying <b>702</b> the one or more control operations. For example, a signal or message indicating the one or more operations may be sent via a vehicle interface <b>222</b> to the autonomous vehicle control systems <b>223</b>. Thus, the autonomous vehicle <b>100</b> may perform the determined control operations.</p><p id="p-0054" num="0053">For further explanation, <figref idref="DRAWINGS">FIG. <b>8</b></figref> sets forth a flow chart illustrating an exemplary method for controlling an automated vehicle using visual anchors that includes receiving <b>602</b> (e.g., by an automation computing system <b>116</b>, by an automation module <b>220</b> of an automation computing system <b>116</b>), from one or more cameras <b>603</b> of an autonomous vehicle <b>100</b> (e.g., from one or more camera sensors <b>212</b>), first video data <b>604</b>; identifying <b>606</b> one or more visual anchors in the first video data <b>604</b>; determining <b>608</b> one or more differentials between the one or more visual anchors and the one or more objective visual anchors; and determining <b>610</b>, based on the one or more differentials, one or more control operations for the autonomous vehicle <b>100</b> to reduce the one or more differentials.</p><p id="p-0055" num="0054">The method of <figref idref="DRAWINGS">FIG. <b>8</b></figref> differs from <figref idref="DRAWINGS">FIG. <b>6</b></figref> in that the method of <figref idref="DRAWINGS">FIG. <b>8</b></figref> includes determining <b>802</b> the one more predicted visual anchors based on sensor data <b>803</b> (e.g., from sensors <b>212</b>) comprising second video data. The sensor data <b>803</b> may comprise a time window of previously received or captured sensor data <b>803</b>. For example, the sensor data <b>803</b> may comprise sensor data <b>803</b> received within a time window ending at a time offset relative to a current time. As an example, where the first video data comprises a most recently captured 200 ms of video data, the sensor data may comprise a time window (e.g., 200 ms, 400 ms, 600 ms, etc.) of sensor data <b>803</b> ending 200 ms prior to the current time. In other words, the one or more visual anchors in the first video data would reflect an actual arrangement of one or more entities at a given time, and the one or more predicted visual anchors in the sensor data <b>803</b> comprising the second video data would reflect a predicted arrangement of the one or more entities at the given time.</p><p id="p-0056" num="0055">For example, a machine learning model may be configured to predict behavior of entities in the environment relative to the autonomous vehicle <b>100</b> by predicting an arrangement of their corresponding visual anchors. Accordingly, the machine learning model may accept, as input, sensor data <b>803</b> comprising second video data, as well as potentially other sensor data (e.g., data from gyroscopes, accelerometers, global positioning system radios, or other sensors <b>212</b>). The machine learning model may also accept as input one or more visual anchors identified from the sensor data <b>803</b>. The machine learning model may then provide, as output, the one or more predicted visual anchors (e.g., the one or more visual anchors identified from the sensor data in a predicted arrangement).</p><p id="p-0057" num="0056">In view of the explanations set forth above, readers will recognize that the benefits of controlling an automated vehicle using visual anchors according to embodiments of the present invention include:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0057">Improved performance of an autonomous vehicle by basing control operations on variances in actual and predicted visual anchors, allowing for autonomous vehicles to be controlled using camera arrays.</li>        <li id="ul0002-0002" num="0058">Improved performance of an autonomous vehicle by determining control operations based on variations from predicted scenarios.</li>    </ul>    </li></ul></p><p id="p-0058" num="0059">Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for controlling an automated vehicle using visual anchors. Readers of skill in the art will recognize, however, that the present invention also may be embodied in a computer program product disposed upon computer readable storage media for use with any suitable data processing system. Such computer readable storage media may be any storage medium for machine-readable information, including magnetic media, optical media, or other suitable media. Examples of such media include magnetic disks in hard drives or diskettes, compact disks for optical drives, magnetic tape, and others as will occur to those of skill in the art. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a computer program product. Persons skilled in the art will recognize also that, although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.</p><p id="p-0059" num="0060">The present invention may be a system, a method, and/or a computer program product. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.</p><p id="p-0060" num="0061">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0061" num="0062">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0062" num="0063">Computer readable program instructions for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++ or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present invention.</p><p id="p-0063" num="0064">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0064" num="0065">These computer readable program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0065" num="0066">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0066" num="0067">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0067" num="0068">It will be understood that any of the functionality or approaches set forth herein may be facilitated at least in part by artificial intelligence applications, including machine learning applications, big data analytics applications, deep learning, and other techniques. Applications of such techniques may include: machine and vehicular object detection, identification and avoidance; visual recognition, classification and tagging; algorithmic financial trading strategy performance management; simultaneous localization and mapping; predictive maintenance of high-value machinery; prevention against cyber security threats, expertise automation; image recognition and classification; question answering; robotics; text analytics (extraction, classification) and text generation and translation; and many others.</p><p id="p-0068" num="0069">It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>determining, based on a plurality of frames of video data from a camera of an autonomous vehicle, one or more predicted visual anchors, wherein the one or more predicted visual anchors comprise a predicted location of one or more visual anchors at a future time relative to when the plurality of frames were captured;</claim-text><claim-text>identifying, in another frame of video data corresponding to the future time, the one or more visual anchors;</claim-text><claim-text>determining one or more differentials between the one or more visual anchors and the one or more predicted visual anchors;</claim-text><claim-text>determining, based on the one or more differentials, one or more control operations for the autonomous vehicle; and</claim-text><claim-text>applying the one or more control operations.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining the one or more control operations comprises determining the one or more control operations to reduce the one or more differentials.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more differentials comprise one or more pixel width differentials, one or more pixel height differentials, one or more pixel area differentials, or one or more vector differentials.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining the one or more control operations is based on a rate of change of the one or more differentials.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining the one or more control operations comprises providing the one or more differentials to a controller of a control system of the autonomous vehicle.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the controller interfaces with one or more actuators of the autonomous vehicle.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining the one or more predicted visual anchors comprises providing the plurality of frames of video data as input to one or more machine learning models.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. An apparatus comprising a computer processor, a computer memory operatively coupled to the computer processor, the computer memory having disposed within it computer program instructions that, when executed by the computer processor, cause the apparatus to carry out steps comprising:<claim-text>determining, based on a plurality of frames of video data from a camera of an autonomous vehicle, one or more predicted visual anchors, wherein the one or more predicted visual anchors comprise a predicted location of one or more visual anchors at a future time relative to when the plurality of frames were captured;</claim-text><claim-text>identifying, in another frame of video data corresponding to the future time, the one or more visual anchors;</claim-text><claim-text>determining one or more differentials between the one or more visual anchors and the one or more predicted visual anchors;</claim-text><claim-text>determining, based on the one or more differentials, one or more control operations for the autonomous vehicle; and</claim-text><claim-text>applying the one or more control operations.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein determining the one or more control operations comprises determining the one or more control operations to reduce the one or more differentials.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the one or more differentials comprise one or more pixel width differentials, one or more pixel height differentials, one or more pixel area differentials, or one or more vector differentials.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein determining the one or more control operations is based on a rate of change of the one or more differentials.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein determining the one or more control operations comprises providing the one or more differentials to a controller of a control system of the autonomous vehicle.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The apparatus of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the controller interfaces with one or more actuators of the autonomous vehicle.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein determining the one or more predicted visual anchors comprises providing the plurality of frames of video data as input to one or more machine learning models.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A computer program product disposed upon a non-transitory computer readable medium, the computer program product comprising computer program instructions that, when executed, cause a computer system of the autonomous vehicle to perform a method comprising:<claim-text>determining, based on a plurality of frames of video data from a camera of an autonomous vehicle, one or more predicted visual anchors, wherein the one or more predicted visual anchors comprise a predicted location of one or more visual anchors at a future time relative to when the plurality of frames were captured;</claim-text><claim-text>identifying, in another frame of video data corresponding to the future time, the one or more visual anchors;</claim-text><claim-text>determining one or more differentials between the one or more visual anchors and the one or more predicted visual anchors;</claim-text><claim-text>determining, based on the one or more differentials, one or more control operations for the autonomous vehicle; and</claim-text><claim-text>applying the one or more control operations.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein determining the one or more control operations comprises determining the one or more control operations to reduce the one or more differentials.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the one or more differentials comprise one or more pixel width differentials, one or more pixel height differentials, one or more pixel area differentials, or one or more vector differentials.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein determining the one or more control operations is based on a rate of change of the one or more differentials.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein determining the one or more control operations comprises providing the one or more differentials to a controller of a control system of the autonomous vehicle.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer program product of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the controller interfaces with one or more actuators of the autonomous vehicle.</claim-text></claim></claims></us-patent-application>