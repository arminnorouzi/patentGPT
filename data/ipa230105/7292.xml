<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007293A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007293</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17944609</doc-number><date>20220914</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20140101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>46</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20140101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>513</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20140101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>184</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20140101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20140101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>172</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>46</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>513</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>184</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>172</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">DEVICE AND METHOD FOR CODING VIDEO DATA</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17206560</doc-number><date>20210319</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17944609</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62992092</doc-number><date>20200319</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>FG Innovation Company Limited</orgname><address><city>Tuen Mun</city><country>HK</country></address></addressbook><residence><country>HK</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>YANG</last-name><first-name>YU-CHIAO</first-name><address><city>Taipei</city><country>TW</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>TENG</last-name><first-name>CHIH-YU</first-name><address><city>Taipei</city><country>TW</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method of encoding video data by an electronic device is provided. The electronic device determines whether an affine enabled flag corresponding to one or more image frames included in the video data is true. The electronic device determines a maximum number of zero or more subblock-based merging motion vector prediction candidates corresponding to the one or more image frames when the affine enabled flag is true. The maximum number is in a number range of K to N, N being a first integer and K being a second integer less than N. The electronic device determines that a maximum index is in an index range of 0 to N-K and generated by subtracting the maximum number from N when the affine enabled flag is true. An index value of the maximum index is in an index range of 0 to N-1 when K is 1.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="81.53mm" wi="158.75mm" file="US20230007293A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="95.25mm" wi="163.15mm" file="US20230007293A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="144.36mm" wi="144.95mm" file="US20230007293A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="177.72mm" wi="155.87mm" file="US20230007293A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="123.02mm" wi="136.23mm" file="US20230007293A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="168.15mm" wi="155.87mm" file="US20230007293A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="164.08mm" wi="155.87mm" file="US20230007293A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="117.35mm" wi="140.12mm" file="US20230007293A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="187.88mm" wi="135.13mm" file="US20230007293A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION(S)</heading><p id="p-0002" num="0001">This application is a continuation application of U.S. patent application Ser. No. 17/206,560, filed on Mar. 19, 2021, which claims the benefit of and priority to U.S. Provisional Patent Application Ser. No. 62/992,092, filed on Mar. 19, 2020. The contents of all of the above-mentioned applications are hereby incorporated herein fully by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">The present disclosure is generally related to video coding and, more specifically, to techniques for using a high-level syntax to determine a number of merging candidates.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">In a conventional video coding method, an encoder may encode video data to generate encoded data having a plurality of flags and a plurality of indices and provide the encoded data to a decoder. The flags may indicate whether a plurality of coding modes is enabled or not. For example, the encoded data may include an affine enabled flag indicating whether an affine mode is enabled for some of the image frames. In addition, the indices may indicate maximum numbers of the mode candidates for the coding modes.</p><p id="p-0005" num="0004">Although the encoded data can include a flag and an index for each of the coding modes in each different level syntax element, the coding efficiency may be decreased. Therefore, the encoder and the decoder need to have a method for more efficiently using the flags and the indices to prevent a number of bits in the encoded data from increasing too much.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">The present disclosure is directed to a device and method for using a high-level syntax to determine a number of merging candidates.</p><p id="p-0007" num="0006">In a first aspect of the present disclosure, a method for decoding a bitstream and an electronic device for performing the method are provided. The method includes receiving the bitstream; determining an affine enabled flag corresponding to one or more image frames from the bitstream; determining a maximum index corresponding to the one or more image frames from the bitstream when the affine enabled flag is true, wherein an index value of the maximum index is in an index range of 0 to N-K, N being a first integer and K being a second integer less than N; determining a maximum number of zero or more subblock-based merging motion vector prediction (MVP) candidates based on the maximum index when the affine enabled flag is true; and reconstructing the one or more image frames based on the maximum number of zero or more subblock-based merging MVP candidates.</p><p id="p-0008" num="0007">In a second aspect of the present disclosure a method for decoding a bitstream and an electronic device for performing the method are provided. The method includes receiving the bitstream; determining a maximum index corresponding to one or more image frames from the bitstream, wherein an index value of the maximum index is in an index range of 0 to N-K, N being a first integer and K being a second integer less than N; determining a maximum number of zero or more subblock-based merging motion vector prediction (MVP) candidates by subtracting the index value of the maximum index from N; and reconstructing the one or more image frames based on the maximum number of zero or more subblock-based merging MVP candidates.</p><p id="p-0009" num="0008">In a third aspect of the present disclosure, a method of encoding video data and an electronic device for performing the method are provided. The method includes receiving the video data; determining whether an affine enabled flag corresponding to one or more image frames included in the video data is true; determining a maximum number of zero or more subblock-based merging motion vector prediction (MVP) candidates corresponding to the one or more image frames when the affine enabled flag is true, wherein the maximum number of the zero or more subblock-based merging MVP candidates is in a number range of K to N, N being a first integer, and K being a second integer less than N, and the maximum number of the zero or more subblock-based merging MVP candidates is in a number range of 1 to N when K is 1; determining that a maximum index is in an index range of 0 to N-K and generated by subtracting the maximum number of the zero or more subblock-based merging MVP candidates from N when the affine enabled flag is true, wherein an index value of the maximum index is in an index range of 0 to N-1 when K is 1; and signaling the maximum index into a bitstream for the video data.</p><p id="p-0010" num="0009">In an implementation of the third aspect, N is five.</p><p id="p-0011" num="0010">In an implementation of the third aspect, the affine enabled flag and the maximum index are signaled in a sequence parameter set (SPS) of the bitstream, each of the one or more image frames is reconstructed based on the SPS, and at least one of the one or more image frames is reconstructed based on a picture header of the bitstream.</p><p id="p-0012" num="0011">In an implementation of the third aspect, the maximum number is in a number range of K to N when K is different from 1.</p><p id="p-0013" num="0012">In a fourth aspect of the present disclosure a method of encoding video data and an electronic device for performing the method are provided. The method includes receiving the video data; determining a maximum number of zero or more subblock-based merging motion vector prediction (MVP) candidates corresponding to one or more image frames included in the video data, wherein the maximum number of the zero or more subblock-based merging MVP candidates is in a number range of K to N, N being a first integer, and K being a second integer less than N; determining a maximum index by subtracting the maximum number of the zero or more subblock-based merging MVP candidates from N, wherein the maximum number of the zero or more subblock-based merging MVP candidates is in a number range of 1 to N and an index value of the maximum index is in an index range of 0 to N-1 when K is 1; and signaling the maximum index into a bitstream for the video data.</p><p id="p-0014" num="0013">An implementation of the fourth aspect further includes determining an affine enabled flag corresponding to the one or more image frames, wherein the maximum index is signaled into the bitstream when the affine enabled flag is true.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0015" num="0014">Aspects of the present disclosure are best understood from the following detailed disclosure and the corresponding figures. Various features are not drawn to scale and dimensions of various features may be arbitrarily increased or reduced for clarity of discussion.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating a system configured to encode and decode video data, according to an implementation of the present disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating the decoder module of an electronic device illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, according to an implementation of the present disclosure.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart illustrating a method for decoding video data by an electronic device, according to an implementation of the present disclosure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart illustrating a method for decoding video data by an electronic device, according to an implementation of the present disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart illustrating a method for decoding video data by an electronic device, according to an implementation of the present disclosure.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart illustrating a method for decoding video data by an electronic device, according to an implementation of the present disclosure.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart o illustrating f a method for decoding video data by an electronic device, according to an implementation of the present disclosure.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram illustrating an encoder module of an electronic device illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, according to an implementation of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DESCRIPTION</heading><p id="p-0024" num="0023">The following disclosure contains specific information pertaining to implementations in the present disclosure. The figures and the corresponding detailed disclosure are directed to example implementations. However, the present disclosure is not limited to these example implementations. Other variations and implementations of the present disclosure will occur to those skilled in the art.</p><p id="p-0025" num="0024">Unless noted otherwise, like or corresponding elements among the figures may be indicated by like or corresponding reference designators. The figures and illustrations in the present disclosure are generally not to scale and are not intended to correspond to actual relative dimensions.</p><p id="p-0026" num="0025">For the purpose of consistency and ease of understanding, like features are identified (although, in some examples, not illustrated) by reference designators in the exemplary figures. However, the features in different implementations may differ in other respects and shall not be narrowly confined to what is illustrated in the figures.</p><p id="p-0027" num="0026">The disclosure uses the phrases &#x201c;in one implementation,&#x201d; or &#x201c;in some implementations,&#x201d; may refer to one or more of the same or different implementations. The term &#x201c;coupled&#x201d; is defined as connected, whether directly or indirectly through intervening components, and is not necessarily limited to physical connections. The term &#x201c;comprising&#x201d; means &#x201c;including, but not necessarily limited to,&#x201d; and specifically indicates open-ended inclusion or membership in the so-described combination, group, series, and the equivalent.</p><p id="p-0028" num="0027">For purposes of explanation and non-limitation, specific details, such as functional entities, techniques, protocols, and standards, are set forth for providing an understanding of the disclosed technology. Detailed disclosure of well-known methods, technologies, systems, and architectures are omitted so as not to obscure the present disclosure with unnecessary details.</p><p id="p-0029" num="0028">Persons skilled in the art will immediately recognize that any disclosed coding function(s) or algorithm(s) described in the present disclosure may be implemented by hardware, software, or a combination of software and hardware. Disclosed functions may correspond to modules that are software, hardware, firmware, or any combination thereof.</p><p id="p-0030" num="0029">A software implementation may include a program having computer-executable instructions stored on a computer-readable medium, such as memory or other type of storage devices. For example, one or more microprocessors or general-purpose computers with communication processing capability may be programmed with executable instructions and perform the disclosed function(s) or algorithm(s).</p><p id="p-0031" num="0030">The microprocessors or general-purpose computers may be formed of application-specific integrated circuits (ASICs), programmable logic arrays, and/or one or more digital signal processors (DSPs). Although some of the disclosed implementations are oriented to software installed and executing on computer hardware, alternative implementations implemented as firmware or as hardware or combination of hardware and software are well within the scope of the present disclosure. The computer-readable medium includes, but is not limited to, random-access memory (RAM), read-only memory (ROM), erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), flash memory, compact disc read-only memory (CD ROM), magnetic cassettes, magnetic tape, magnetic disk storage, or any other equivalent medium capable of storing computer-readable instructions.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating a system <b>100</b> configured to encode and decode video data, according to an implementation of the present disclosure. The system <b>100</b> includes a first electronic device <b>110</b>, a second electronic device <b>120</b>, and a communication medium <b>130</b>.</p><p id="p-0033" num="0032">The first electronic device <b>110</b> may be a source device including any device configured to encode video data and transmit encoded video data to the communication medium <b>130</b>. The second electronic device <b>120</b> may be a destination device including any device configured to receive encoded video data via the communication medium <b>130</b> and to decode encoded video data.</p><p id="p-0034" num="0033">The first electronic device <b>110</b> may communicate via wire or wirelessly with the second electronic device <b>120</b> via the communication medium <b>130</b>. The first electronic device <b>110</b> may include a source module <b>112</b>, an encoder module <b>114</b>, and a first interface <b>116</b>. The second electronic device <b>120</b> may include a display module <b>122</b>, a decoder module <b>124</b>, and a second interface <b>126</b>. The first electronic device <b>110</b> may be a video encoder and the second electronic device <b>120</b> may be a video decoder.</p><p id="p-0035" num="0034">The first electronic device <b>110</b> and/or the second electronic device <b>120</b> may be a mobile phone, a tablet, a desktop, a notebook, or other electronic devices. <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates one example of the first electronic device <b>110</b> and the second electronic device <b>120</b>. The first electronic device <b>110</b> and second electronic device <b>120</b> may include more or fewer components than illustrated or have a different configuration of the various illustrated components.</p><p id="p-0036" num="0035">The source module <b>112</b> may include a video capture device to capture new video, a video archive to store previously captured video, and/or a video feed interface to receive video from a video content provider. The source module <b>112</b> may generate computer graphics-based data as the source video or generate a combination of live video, archived video, and computer-generated video as the source video. The video capture device may be a charge-coupled device (CCD) image sensor, a complementary metal-oxide-semiconductor (CMOS) image sensor, or a camera.</p><p id="p-0037" num="0036">The encoder module <b>114</b> and the decoder module <b>124</b> may each be implemented as any of a variety of suitable encoder/decoder circuitry, such as one or more microprocessors, a central processing unit (CPU), a graphic processing unit (GPU), a system on chip (SoC), digital signal processors (DSPs), application-specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), discrete logic, software, hardware, firmware, or any combination thereof When implemented partially in software, a device may store the program having instructions for the software in a suitable, non-transitory computer-readable medium and execute the instructions in hardware using one or more processors to perform the disclosed methods. Each of the encoder module <b>114</b> and the decoder module <b>124</b> may be included in one or more encoders or decoders, any of which may be integrated as part of a combined encoder/decoder (CODEC) in a device.</p><p id="p-0038" num="0037">The first interface <b>116</b> and the second interface <b>126</b> may utilize customized protocols or follow existing standards or de facto standards including, but not limited to, Ethernet, IEEE 802.11 or IEEE 802.15 series, Wireless USB or telecommunication standards including, but not limited to, Global System for Mobile Communications (GSM), Code-Division Multiple Access 2000 (CDMA2000), Time Division Synchronous Code Division Multiple Access (TD-SCDMA), Worldwide Interoperability for Microwave Access (WiMAX), Third Generation Partnership Project Long-Term Evolution (3GPP-LTE) or Time-Division LTE (TD-LTE). The first interface <b>116</b> and the second interface <b>126</b> may each include any device configured to transmit and/or store a compliant video bitstream via the communication medium <b>130</b> and to receive the compliant video bitstream via the communication medium <b>130</b>.</p><p id="p-0039" num="0038">The first interface <b>116</b> and the second interface <b>126</b> may include a computer system interface that enables a compliant video bitstream to be stored on a storage device or to be received from the storage device. For example, the first interface <b>116</b> and the second interface <b>126</b> may include a chipset supporting Peripheral Component Interconnect (PCI) and Peripheral Component Interconnect Express (PCIe) bus protocols, proprietary bus protocols, Universal Serial Bus (USB) protocols, I2C, or any other logical and physical structure that may be used to interconnect peer devices.</p><p id="p-0040" num="0039">The display module <b>122</b> may include a display using liquid crystal display (LCD) technology, plasma display technology, organic light-emitting diode (OLED) display technology, or light-emitting polymer display (LPD) technology with other display technologies used in other implementations. The display module <b>122</b> may include a high-definition display or an ultra-high-definition display.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating the decoder module <b>124</b> of an electronic device <b>120</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, according to an implementation of the present disclosure. The decoder module <b>124</b> includes an entropy decoder (e.g., entropy decoding unit <b>2241</b>), a prediction processor (e.g., prediction process unit <b>2242</b>), an inverse quantization/inverse transform processor (e.g., inverse quantization/inverse transform unit <b>2243</b>), a summer (e.g., summer <b>2244</b>), a filter (e.g., filtering unit <b>2245</b>), and a decoded picture buffer (e.g., decoded picture buffer <b>2246</b>). The prediction process unit <b>2242</b> further includes an intra prediction processor (e.g., intra prediction unit <b>22421</b>) and an inter prediction processor (e.g., inter prediction unit <b>22422</b>). The decoder module <b>124</b> receives a bitstream and decodes the bitstream to output decoded video.</p><p id="p-0042" num="0041">The entropy decoding unit <b>2241</b> may receive the bitstream including a plurality of syntax elements from the second interface <b>126</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and perform a parsing operation on the bitstream to extract syntax elements from the bitstream. As part of the parsing operation, the entropy decoding unit <b>2241</b> may entropy decode the bitstream to generate quantized transform coefficients, quantization parameters, transform data, motion vectors, intra modes, partition information, and other syntax information.</p><p id="p-0043" num="0042">The entropy decoding unit <b>2241</b> may perform context adaptive variable length coding (CAVLC), context adaptive binary arithmetic coding (CABAC), syntax-based context-adaptive binary arithmetic coding (SBAC), probability interval partitioning entropy (PIPE) coding or another entropy coding technique to generate the quantized transform coefficients. The entropy decoding unit <b>2241</b> may provide the quantized transform coefficients, the quantization parameters, and the transform data to the inverse quantization/inverse transform unit <b>2243</b> and provide the motion vectors, the intra modes, the partition information, and other syntax information to the prediction process unit <b>2242</b>.</p><p id="p-0044" num="0043">The prediction process unit <b>2242</b> may receive syntax elements such as motion vectors, intra modes, partition information, and other syntax information from the entropy decoding unit <b>2241</b>. The prediction process unit <b>2242</b> may receive the syntax elements including the partition information and divide image frames according to the partition information.</p><p id="p-0045" num="0044">Each of the image frames may be divided into at least one image block according to the partition information. The at least one image block may include a luminance block for reconstructing a plurality of luminance samples and at least one chrominance block for reconstructing a plurality of chrominance samples. The luminance block and the at least one chrominance block may be further divided to generate macroblocks, coding tree units (CTUs), coding blocks (CBs), sub-divisions thereof, and/or another equivalent coding unit.</p><p id="p-0046" num="0045">During the decoding process, the prediction process unit <b>2242</b> may receive predicted data including the intra mode or the motion vector for a current image block of a specific one of the image frames. The current image block may be the luminance block or one of the chrominance blocks in the specific image frame.</p><p id="p-0047" num="0046">The intra prediction unit <b>22421</b> may perform intra-predictive coding of a current block unit relative to one or more neighboring blocks in the same frame as the current block unit based on syntax elements related to the intra mode in order to generate a predicted block. The intra mode may specify the location of reference samples selected from the neighboring blocks within the current frame. The intra prediction unit <b>22421</b> may reconstruct a plurality of chroma components of the current block unit based on a plurality of luma components of the current block unit when the chroma components are reconstructed by the prediction process unit <b>2242</b>.</p><p id="p-0048" num="0047">The intra prediction unit <b>22421</b> may reconstruct a plurality of chroma components of the current block unit based on the plurality of luma components of the current block unit when the luma components of the current block are reconstructed by the prediction process unit <b>2242</b>.</p><p id="p-0049" num="0048">The inter prediction unit <b>22422</b> may perform inter-predictive coding of the current block unit relative to one or more blocks in one or more reference image blocks based on syntax elements related to the motion vector in order to generate the predicted block.</p><p id="p-0050" num="0049">The motion vector may indicate a displacement of the current block unit within the current image block relative to a reference block unit within the reference image block. The reference block unit is a block determined to closely match the current block unit.</p><p id="p-0051" num="0050">The inter prediction unit <b>22422</b> may receive the reference image block stored in the decoded picture buffer <b>2246</b> and reconstruct the current block unit based on the received reference image blocks.</p><p id="p-0052" num="0051">The inverse quantization/inverse transform unit <b>2243</b> may apply inverse quantization and inverse transformation to reconstruct the residual block in the pixel domain. The inverse quantization/inverse transform unit <b>2243</b> may apply inverse quantization to the residual quantized transform coefficient to generate a residual transform coefficient and then apply inverse transformation to the residual transform coefficient to generate the residual block in the pixel domain.</p><p id="p-0053" num="0052">The inverse transformation may be inversely applied by the transformation process, such as discrete cosine transform (DCT), discrete sine transform (DST), adaptive multiple transform (AMT), mode-dependent non-separable secondary transform (MDNSST), hypercube-givens transform (HyGT), signal-dependent transform, Karhunen-Loeve transform (KLT), wavelet transform, integer transform, sub-band transform, or a conceptually similar transform. The inverse transformation may convert the residual information from a transform domain, such as a frequency domain, back to the pixel domain. The degree of inverse quantization may be modified by adjusting a quantization parameter.</p><p id="p-0054" num="0053">The summer <b>2244</b> adds the reconstructed residual block to the predicted block provided from the prediction process unit <b>2242</b> to produce a reconstructed block.</p><p id="p-0055" num="0054">The filtering unit <b>2245</b> may include a deblocking filter, a sample adaptive offset (SAO) filter, a bilateral filter, and/or an adaptive loop filter (ALF) to remove blocking artifacts from the reconstructed block. Additional filters (in loop or post loop) may also be used in addition to the deblocking filter, the SAO filter, the bilateral filter, and the ALF. Such filters are not explicitly illustrated for brevity but may filter the output of the summer <b>2244</b>. The filtering unit <b>2245</b> may output the decoded video to the display module <b>122</b> or other video receiving unit after the filtering unit <b>2245</b> performs the filtering process for the reconstructed blocks of the specific image frame.</p><p id="p-0056" num="0055">The decoded picture buffer <b>2246</b> may be a reference picture memory that stores the reference block for use by the prediction process unit <b>2242</b> in decoding the bitstream (in inter coding modes). The decoded picture buffer <b>2246</b> may be formed by any of a variety of memory devices, such as dynamic random-access memory (DRAM), including synchronous DRAM (SDRAM), magneto-resistive RAM (MRAM), resistive RAM (RRAM), or other types of memory devices. The decoded picture buffer <b>2246</b> may be on-chip with other components of the decoder module <b>124</b> or off-chip relative to those components.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart illustrating a method <b>300</b> for decoding video data by an electronic device, according to an implementation of the present disclosure. The method <b>300</b> is an example only, as there are a variety of ways to perform decoding of the video data.</p><p id="p-0058" num="0057">The method <b>300</b> may be performed using the configurations illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and various elements of these figures are referenced with regard to the method <b>300</b>. Each block illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may represent one or more processes, methods, or subroutines performed.</p><p id="p-0059" num="0058">The order of blocks in <figref idref="DRAWINGS">FIG. <b>3</b></figref> is illustrative only and may change. Additional blocks may be added or fewer blocks may be utilized without departing from the present disclosure.</p><p id="p-0060" num="0059">At block <b>310</b>, the decoder module <b>124</b> receives video data. The video data may be a bitstream.</p><p id="p-0061" num="0060">With reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the second electronic device <b>120</b> may receive the bitstream from an encoder, such as the first electronic device <b>110</b>, or other video providers via the second interface <b>126</b>. The second interface <b>126</b> may provide the bitstream to the decoder module <b>124</b>.</p><p id="p-0062" num="0061">The entropy decoding unit <b>2241</b> may decode the bitstream to determine a plurality of prediction indications and a plurality of partitioning indications for a plurality of video images. Then, the decoder module <b>124</b> may further reconstruct the plurality of video images based on the prediction indications and the partitioning indications. The prediction indications and the partitioning indications may include a plurality of flags and a plurality of indices.</p><p id="p-0063" num="0062">At block <b>320</b>, the decoder module <b>124</b> determines an affine enabled flag corresponding to one or more image frames from the video data. With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may determine the one or more image frames from the bitstream and determine a first parameter set corresponding to the one or more image frames.</p><p id="p-0064" num="0063">The first parameter set may include a plurality of first prediction indications and a plurality of first partitioning indications. The bitstream may further include a second parameter set corresponding to one or more other image frames excluding the one or more image frames.</p><p id="p-0065" num="0064">Both of the first parameter set and the second parameter set may be one of a video parameter set (VPS), a sequence parameter set (SPS), a picture parameter set (PPS), and a picture header (PH). For example, the affine enabled flag may be a flag sps_affine_enabled_flag when the affine enabled flag is included in the SPS. Each of the one or more image frames is reconstructed based on the SPS when the first parameter set is SPS.</p><p id="p-0066" num="0065">The decoder module <b>124</b> may determine an affine enabled flag corresponding to the one or more image frames from the first parameter set of the bitstream. The affine enabled flag is used to determine whether an affine model-based motion compensation is enabled for the one or more image frames. A block-based syntax in the bitstream may further include a block-based affine flag for determining whether the affine model-based motion compensation is used for an image block divided from one of the one or more image frames when the affine enabled flag is equal to one. The affine model-based motion compensation may include affine merge prediction (having a plurality of affine merge candidates selected from a plurality of inherited affine merge candidates, a plurality of constructed affine merge candidates and at least one zero motion vectors (MVs) candidate), and affine advanced motion vector prediction (AMVP) prediction (having a plurality of affine AMVP candidates selected from a plurality of inherited affine AMVP candidates, a plurality of constructed affine AMVP candidates, a translational MVs candidate determined from neighboring blocks, and a zero MVs candidate).</p><p id="p-0067" num="0066">At block <b>330</b>, the decoder module <b>124</b> determines whether the affine enabled flag is true. The method <b>300</b> may proceed to block <b>340</b> when the decoder module <b>124</b> determines that the affine enabled flag is true. The method <b>300</b> may proceed to block <b>350</b> when the decoder module <b>124</b> determines the affine enabled flag is false.</p><p id="p-0068" num="0067">The decoder module <b>124</b> determines that the affine enabled flag is true when the affine enabled flag is equal to one. The decoder module <b>124</b> determines that the affine enabled flag is false when the affine enabled flag is equal to zero.</p><p id="p-0069" num="0068">The affine enabled flag is a flag vps affine enabled flag when the affine enabled flag is included in VPS. The affine enabled flag is a flag sps affine enabled flag when the affine enabled flag is included in an SPS. The affine enabled flag is a flag pps affine enabled flag when the affine enabled flag is included in a PPS. The affine enabled flag is a flag ph affine enabled flag when the affine enabled flag is included in a PH.</p><p id="p-0070" num="0069">At block <b>340</b>, the decoder module <b>124</b> determines a maximum index corresponding to the one or more image frames from the video data. With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may determine the maximum index from the first parameter set corresponding to the one or more image frames when the affine enabled flag is true. Therefore, the maximum index also corresponds to the one or more image frames. The maximum index is included in the SPS when the affine enabled flag is included in the SPS.</p><p id="p-0071" num="0070">The maximum index is used to calculate a maximum number of zero or more subblock-based merging motion vector prediction (MVP) candidates when the affine enabled flag is true. The maximum number may be represented as MaxNumSubblockMergeCand. An index value of the maximum index may be in an index range of 0 to N1-K. The number N1 is a first integer and the number K is a second integer less than the number N1. The maximum index is an index sps_N1_minus_max_num_subblock_merge_cand when the maximum index is included in the SPS. The maximum index is an index sps_five_minus_max_num_subblock_merge_cand when the maximum index is included in the SPS and the number N1 is equal to 5. When the maximum index is included in the PPS and the number N1 is equal to 6, the maximum index is an index pps_six_minus_max_num_subblock_merge_cand.</p><p id="p-0072" num="0071">The number K may be equal to zero or one. When the number K is equal to zero, the index value of the maximum index may be in an index range of 0 to 5. When the number K is equal to one, the index value of the maximum index may be in an index range of 0 to 4.</p><p id="p-0073" num="0072">At block <b>350</b>, the decoder module <b>124</b> determines, for the one or more image frames, the maximum number of the zero or more subblock-based merging MVP candidates based on a subblock-based temporal MVP (sbTMVP) flag and a temporal MVP (TMVP) flag without determining the maximum index from the video data.</p><p id="p-0074" num="0073">The maximum number is calculated based on the sbTMVP flag and the TMVP flag without determining the maximum index from the video data when the affine enabled flag is false. The sbTMVP flag may be determined from the first parameter set corresponding to the one or more image frames. Therefore, the sbTMVP flag may also correspond to the one or more image frames.</p><p id="p-0075" num="0074">The sbTMVP flag may be a flag sps sbtmvp enabled flag included in the SPS when the affine enabled flag is included in the SPS. The TMVP flag may be determined from another level parameter set.</p><p id="p-0076" num="0075">For example, the TMVP flag may be a flag ph temporal mvp enabled flag when the TMVP flag is included in the picture header corresponding to at least one of the one or more image frames. Therefore, the TMVP flag may correspond to the at least one of the one or more image frames. The at least one of the one or more image frames is reconstructed based on the picture header corresponding to at least one of the one or more image frames.</p><p id="p-0077" num="0076">The sbTMVP flag may be equal to one or zero, and the TMVP flag may be equal to one or zero. The maximum number MaxNumSubblockMergeCand may be equal to (the sbTMVP flag &#x26;&#x26; the TMVP flag) when the affine enabled flag is false. The logical operator &#x26;&#x26; is a Boolean logical &#x201c;and&#x201d; of two values. Therefore, the maximum number MaxNumSubblockMergeCand may be equal to one when the affine enabled flag is false and each of the sbTMVP flag and the TMVP flag is equal to one.</p><p id="p-0078" num="0077">In other words, the maximum number MaxNumSubblockMergeCand may be equal to zero when the affine enabled flag is false and at least one of the sbTMVP flag and the TMVP flag is equal to zero. Therefore, when the affine enabled flag is false, the maximum number MaxNumSubblockMergeCand may be derived as follows:</p><p id="p-0079" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>MaxNumSubblockMergeCand=sps_sbtmvp_enabled_flag </i>&#x26;&#x26; <i>ph_temporal_mvp_enable_flag </i><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0080" num="0078">At block <b>360</b>, the decoder module <b>124</b> determines the maximum number based on the maximum index. The maximum number may be calculated by subtracting the maximum index from the number N1 when the affine enabled flag is true. Therefore, the maximum number may be calculated by subtracting the maximum index from five, when the affine enabled flag is true and the number N1 is equal to 5. In other words, when the affine enabled flag is true and the number N1 is equal to 5, the maximum number MaxNumSubblockMergeCand may be derived as follows:</p><p id="p-0081" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>MaxNumSubblockMergeCand=</i>5<i>&#x2212;sps_five_minus_max_num_subblock_merge_cand </i><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0082" num="0079">The index value of the maximum index may be in the index range of 0 to N1-K, and the maximum number may be calculated by subtracting the maximum index from the number N1, when the affine enabled flag is true. Therefore, a value of the maximum number is in a value range of N1-(N1-K) to N1 (i.e., a value range of K to N1). The value of the maximum number is in a value range of 1 to N1, and the index value of the maximum index is in the index range of 0 to N1-1, when the affine enabled flag is true and the number K is equal to 1. The value of the maximum number may be in a value range of 0 to N1, and the index value of the maximum index is in an index range of 0 to N1, when the affine enabled flag is true and the number K is equal to 0. In addition, the value of the maximum number is in a value range of 1 to 5, and the index value of the maximum index is in an index range of 0 to 4, when the affine enabled flag is true, the number N1 is equal to 5, and the number K is equal to 1. The value of the maximum number may be in a value range of 0 to 5, and the index value of the maximum index is in an index range of 0 to 5, when the affine enabled flag is true, the number N1 is equal to 5, and the number K is equal to O.</p><p id="p-0083" num="0080">With reference to blocks <b>330</b>-<b>360</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the maximum number MaxNumSubblockMergeCand may be derived as follows:</p><p id="p-0084" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="273pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>if( sps_affine_enabled_flag )</entry></row><row><entry>&#x2003;MaxNumSubblockMergeCand = 5 &#x2212; sps_five_minus_max_num_subblock_merge_cand</entry></row><row><entry>else</entry></row><row><entry>&#x2003;MaxNumSubblockMergeCand</entry></row><row><entry>&#x2003;= sps_sbtmvp_enabled_flag &#x26;&#x26; ph_temporal_mvp_enabled_flag</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0085" num="0081">The decoder module <b>124</b> may determine whether the maximum number is included in the value range. The decoder module <b>124</b> may determine that the video data is not in compliance with the decoder module <b>124</b> when the decoder module <b>124</b> determines that the maximum number is excluded from the value range.</p><p id="p-0086" num="0082">Therefore, the decoder module <b>124</b> may output an error signal for the one or more image frames. In other words, the decoder module <b>124</b> may determine that the video data is in compliance with the decoder module <b>124</b> when the decoder module <b>124</b> determines that the maximum number is included in the value range. Therefore, the decoder module <b>124</b> may decode the bitstream to reconstruct the one or more image frames.</p><p id="p-0087" num="0083">The decoder module <b>124</b> may determine whether the maximum index is included in the index range when the affine enabled flag is true. The decoder module <b>124</b> may determine that the video data is not in compliance with the decoder module <b>124</b> when the decoder module <b>124</b> determines that the maximum index is excluded from the index range. Therefore, the decoder module <b>124</b> may output an error signal for the one or more image frames. The above determination may be one of the bitstream conformance requirements in a video coding standard, such as versatile video coding (VVC).</p><p id="p-0088" num="0084">In other words, the decoder module <b>124</b> may determine that the video data is in compliance with the decoder module <b>124</b> when the decoder module <b>124</b> determines that the maximum index is included in the index range. Therefore, the decoder module <b>124</b> may decode the bitstream to reconstruct the one or more image frames.</p><p id="p-0089" num="0085">At block <b>370</b>, the decoder module <b>124</b> reconstructs the one or more image frames based on the maximum number of the zero or more subblock-based merging MVP candidates. With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may select a prediction mode for each of a plurality of image blocks in the one or more image frames from a plurality of mode candidates including the zero or more subblock-based merging MVP candidates and determine a plurality of predicted blocks based on the prediction modes. The number of the zero or more subblock-based merging MVP candidates for each image block in the one or more image frames is restricted by the maximum number. Therefore, the decoder module <b>124</b> reconstructs the one or more image frames based on the zero or more subblock-based merging MVP candidates restricted by the maximum number. The zero or more subblock-based merging MVP candidates may include zero or more of a plurality of sbTMVP candidates, a plurality of affine merge prediction candidates, and at least one zero-padding candidate. The decoder module <b>124</b> may determine a plurality of residual components from the bitstream for each of the image blocks and add the residual components into a corresponding one of the predicted blocks to reconstruct the image blocks. The decoder module <b>124</b> may reconstruct all of the image frames for reconstructing the video images.</p><p id="p-0090" num="0086">In a video coding standard, such as high efficiency video coding (HEVC) and VVC, a plurality of first search candidates of the subblock-based merging mode including the subblock-based merging MVP candidates may be more efficient than a plurality of second search candidates of the affine AMVP prediction. However, the number of the first search candidates of the subblock-based merging mode may be restricted by the maximum number MaxNumSubblockMergeCand. Therefore, due to an encoder complexity, the maximum number MaxNumSubblockMergeCand may be set to ensure that the subblock-based merging mode may not be disabled by the maximum number when the affine model-based motion compensation is enabled. Therefore, the maximum number MaxNumSubblockMergeCand will be greater than one when the number K is set to be greater than zero. There will be no condition that the maximum number is equal to zero to disable the subblock-based merging mode so the signaling of the maximum index will not be useless and wasted.</p><p id="p-0091" num="0087">In order to decrease complexity, the subblock-based merging mode may be used when the affine enabled flag is true. The number K may be equal to one for changing the value range of the maximum number MaxNumSubblockMergeCand when the affine enabled flag is true. However, it is unnecessary to reserve a candidate for the subblock-based merging MVP candidates when the subblock-based merging mode has been already disabled due to any other methods. Therefore, the number K may be equal to zero to maintain the value range unchanged when the subblock-based merging mode is disabled. Thus, the number K may be set for the subblock-based merging mode.</p><p id="p-0092" num="0088"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart illustrating a method <b>400</b> for decoding video data by an electronic device, according to an implementation of the present disclosure. The method <b>400</b> is an example only, as there are a variety of ways to decode the video data.</p><p id="p-0093" num="0089">The method <b>400</b> for decoding a bitstream and reconstructing a block unit may be performed using the configurations illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and various elements of these figures are referenced with regard to the method <b>400</b>. Each block illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may represent one or more processes, methods, or subroutines performed.</p><p id="p-0094" num="0090">The order of blocks in <figref idref="DRAWINGS">FIG. <b>4</b></figref> is illustrative only and may change. Additional blocks may be added or fewer blocks may be utilized without departing from the present disclosure.</p><p id="p-0095" num="0091">At block <b>410</b>, the decoder module <b>124</b> receives video data. The video data may be a bitstream. With reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the second electronic device <b>120</b> may receive the bitstream from an encoder, such as the first electronic device <b>110</b>, or other video providers via the second interface <b>126</b>. The second interface <b>126</b> may provide the bitstream to the decoder module <b>124</b>.</p><p id="p-0096" num="0092">At block <b>420</b>, the decoder module <b>124</b> determines, from the video data, a maximum index corresponding to one or more image frames. With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may determine the one or more image frames from the bitstream and determine a first parameter set corresponding to the one or more image frames. The bitstream may further include a second parameter set corresponding to one or more other image frames excluding the one or more image frames. Both of the first parameter set and the second parameter set may be one of a VPS, an SPS, a PPS, and a PH.</p><p id="p-0097" num="0093">The decoder module <b>124</b> may determine the maximum index from the first parameter set corresponding to the one or more image frames. Therefore, the maximum index also corresponds to the one or more image frames. When the first parameter set is an SPS, the maximum index may be included in the SPS.</p><p id="p-0098" num="0094">The maximum index is used to calculate a maximum number of zero or more merging motion vector prediction (MVP) candidates. The maximum number may be represented as MaxNumMergeCand. An index value of the maximum index may be in an index range of 0 to N2. The number N2 is an integer.</p><p id="p-0099" num="0095">The maximum index may be an index sps_N2_minus_max_num_merge_cand when the maximum index is included in the SPS. The maximum index may be an index sps_six_minus_max_num_merge_cand when the maximum index is included in the SPS and the number N2 is equal to 6. When the maximum index is included in the PPS and the number N2 is equal to 5, the maximum index is an index pps_five_minus_max_num_merge_cand.</p><p id="p-0100" num="0096">At block <b>430</b>, the decoder module <b>124</b> determines, based on the maximum index, the maximum number of zero or more merging MVP candidates. The maximum number corresponds to the one or more image frames and has a number value in a value range including zero.</p><p id="p-0101" num="0097">The maximum number may be calculated by subtracting the maximum index from the number N2. Therefore, the maximum number may be calculated by subtracting the maximum index from six when the number N2 is equal to 6. In other words, when the number N2 is equal to 6, the maximum number MaxNumMergeCand may be derived as follows:</p><p id="p-0102" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>MaxNumMergeCand=</i>6 <i>&#x2212;sps_six_minus_max_num_merge_cand </i><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0103" num="0098">The index value of the maximum index may be in the index range of 0 to N2. Therefore, the value of the maximum number is in a value range of 0 to N2 and zero is included in the value range. The value of the maximum number is in a value range of 0 to 6 when the number N2 is equal to 6.</p><p id="p-0104" num="0099">The decoder module <b>124</b> may determine whether the maximum number is included in the value range. The decoder module <b>124</b> may determine that the video data is not in compliance with the decoder module <b>124</b> when the decoder module <b>124</b> determines that the maximum number is excluded from the value range. Therefore, the decoder module <b>124</b> may output an error signal for the one or more image frames.</p><p id="p-0105" num="0100">The decoder module <b>124</b> may determine whether the maximum index is included in the index range. The decoder module <b>124</b> may determine that the video data is not in compliance with the decoder module <b>124</b> when the decoder module <b>124</b> determines that the maximum index is excluded from the index range. Therefore, the decoder module <b>124</b> may output an error signal for the one or more image frames.</p><p id="p-0106" num="0101">At block <b>440</b>, the decoder module <b>124</b> reconstructs the one or more image frames based on the maximum number. With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may select a prediction mode for each of a plurality of image blocks in the one or more image frames from a plurality of mode candidates including the zero or more merging MVP candidates and determine a plurality of predicted blocks based on the prediction modes. The zero or more merging MVP candidates may include zero or more of a plurality of spatial MVP candidate, a plurality of temporal MVP candidates, a plurality of history-based MVP candidates, a plurality of pairwise average MVP candidates, and a zero MVs candidate. The spatial MVP candidates may be determined from motion vectors of spatial neighbor blocks, the temporal MVP candidates may be determined from motion vectors of collocated blocks, and the history-based MVP candidates may be determined from a first-in-first-out (FIFO) table.</p><p id="p-0107" num="0102">The decoder module <b>124</b> may determine a plurality of residual components from the bitstream for each of the image blocks and add the residual components into a corresponding one of the predicted blocks to reconstruct the image blocks. The decoder module <b>124</b> may reconstruct all of the image frames for reconstructing the video images.</p><p id="p-0108" num="0103">In a video coding standard, such as HEVC and VVC, the regular merge mode including the merging MVP candidates may be also enabled when the inter prediction mode is enabled. However, the process for decoding and constructing the merge candidates may be more complicated than the process for decoding the regular inter mode. Therefore, pipeline latency is also a problem and the regular merge mode may be directly disabled to reduce the pipeline latency.</p><p id="p-0109" num="0104">The regular merge mode may be directly disabled by a high-level syntax, such as VPS, SPS, PPS. The maximum number may be equal to zero for directly disabling the regular merge mode when zero is included in the value range. Therefore, the regular merge mode is allowed to be disabled in the one or more image frames only by the maximum index since the first parameter set including the maximum index corresponds to the one or more image frames.</p><p id="p-0110" num="0105"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart illustrating a method <b>500</b> for decoding video data by an electronic device, according to an implementation of the present disclosure. The method <b>500</b> is an example only, as there are a variety of ways to decode the video data.</p><p id="p-0111" num="0106">The method <b>500</b> for decoding a bitstream and reconstructing a block unit may be performed using the configurations illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and various elements of these figures are referenced with regard to the method <b>500</b>. Each block illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref> may represent one or more processes, methods, or subroutines performed.</p><p id="p-0112" num="0107">The order of blocks in <figref idref="DRAWINGS">FIG. <b>5</b></figref> is illustrative only and may change. Additional blocks may be added or fewer blocks may be utilized without departing from the present disclosure.</p><p id="p-0113" num="0108">At block <b>510</b>, the decoder module <b>124</b> receives video data. The video data may be a bitstream. With reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the second electronic device <b>120</b> may receive the bitstream from an encoder, such as the first electronic device <b>110</b>, or other video providers via the second interface <b>126</b>. The second interface <b>126</b> may provide the bitstream to the decoder module <b>124</b>.</p><p id="p-0114" num="0109">At block <b>520</b>, the decoder module <b>124</b> determines a regular merge enabled flag corresponding to one or more image frames from the video data. With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may determine the one or more image frames from the bitstream and determine a first parameter set corresponding to the one or more image frames. The first parameter set may include a plurality of first prediction indications and a plurality of first partitioning indications. The bitstream may further include a second parameter set corresponding to one or more other image frames excluding the one or more image frames.</p><p id="p-0115" num="0110">Both of the first parameter set and the second parameter set may be one of a VPS, an SPS, a PPS, and a PH. For example, the regular merge enabled flag may be a flag sps_regular_merge_enabled_flag when the regular merge enabled flag is included in the SPS.</p><p id="p-0116" num="0111">The decoder module <b>124</b> may determine the regular merge enabled flag corresponding to the one or more image frames from the first parameter set of the bitstream. The regular merge enabled flag is used to determine whether a regular merge mode is enabled for the one or more image frames. A block-based syntax in the bitstream may further include a block-based regular merge flag for determining whether the regular merge mode is used for an image block divided from one of the one or more image frames when the regular merge enabled flag is equal to one.</p><p id="p-0117" num="0112">The regular merge mode may include a plurality of merging MVP candidates. The merging MVP candidates may include zero or more of a plurality of spatial MVP candidate, a plurality of temporal MVP candidates, a plurality of history-based MVP candidates, a plurality of pairwise average MVP candidates, and a zero MVs candidate. The spatial MVP candidates may be determined from motion vectors of spatial neighbor blocks, the temporal MVP candidates may be determined from motion vectors of collocated blocks, and the history-based MVP candidates may be determined from a FIFO table.</p><p id="p-0118" num="0113">The regular merge enabled flag is inferred to be equal to zero when the regular merge enabled flag is not present. In other words, the decoder module <b>124</b> may determine that the regular merge enabled flag is false when the regular merge enabled flag is not present.</p><p id="p-0119" num="0114">At block <b>530</b>, the decoder module <b>124</b> determines whether the regular merge enabled flag is true. The method <b>500</b> may proceed to block <b>540</b> when the decoder module <b>124</b> determines that the regular merge enabled flag is true. The method <b>500</b> may proceed to block <b>550</b> when the decoder module <b>124</b> determines the regular merge enabled flag is false.</p><p id="p-0120" num="0115">The decoder module <b>124</b> determines that the regular merge enabled flag is true when the regular merge enabled flag is equal to one. The decoder module <b>124</b> determines that the regular merge enabled flag is false when the regular merge enabled flag is equal to zero. The regular merge enabled flag may be a flag sps_regular_merge_enabled_flag when the regular merge enabled flag is included in SPS.</p><p id="p-0121" num="0116">At block <b>540</b>, the decoder module <b>124</b> determines a maximum index corresponding to the one or more image frames from the video data. With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may determine the maximum index from the first parameter set corresponding to the one or more image frames when the regular merge enabled flag is true. Therefore, the maximum index also corresponds to the one or more image frames. The maximum index is included in the SPS when the regular merge enabled flag is included in the SPS.</p><p id="p-0122" num="0117">The maximum index is used to calculate a maximum number of zero or more of the merging MVP candidates when the regular merge enabled flag is true. The maximum number may be represented as MaxNumMergeCand.</p><p id="p-0123" num="0118">An index value of the maximum index may be in an index range of 0 to N3-P. The number N3 may be a first integer and the number P may be a second integer less than the number N3.</p><p id="p-0124" num="0119">The maximum index may be an index sps_N3_minus_max_num_merge_cand when the maximum index is included in the SPS. The maximum index may be an index sps_six_minus_max_num_merge_cand when the maximum index is included in the SPS and the number N3 is equal to 6. When the maximum index is included in the PPS and the number N is equal to 5, the maximum index may be an index pps_five_minus_max_num_merge_cand.</p><p id="p-0125" num="0120">The number P may be a positive integer. For example, the number P may be equal to one. When the number P is equal to one and the number N3 is equal to 6, the index value of the maximum index may be in the index range of 0 to 5.</p><p id="p-0126" num="0121">At block <b>550</b>, the decoder module <b>124</b> determines, for the one or more image frames, the maximum number of the zero or more merging MVP candidates equal to zero without determining the maximum index from the video data.</p><p id="p-0127" num="0122">The maximum number is directly determined as zero without determining the maximum index from the video data when the regular merge enabled flag is false. The regular merge mode is disabled in the one or more image frames when the regular merge enabled flag is false. Therefore, all of the merging MVP candidates may not be used to predict all of a plurality of blocks divided from the one or more image frames, and the maximum number may be directly set as zero without further paring any flags or indices from the first parameter set when the regular merge enabled flag is false.</p><p id="p-0128" num="0123">At block <b>560</b>, the decoder module <b>124</b> determines the maximum number based on the maximum index. The maximum number may be calculated by subtracting the maximum index from the number N3 when the regular merge enabled flag is true. Therefore, the maximum number may be calculated by subtracting the maximum index from six when the regular merge enabled flag is true and the number N3 is equal to 6. In other words, when the regular merge enabled flag is true and the number N3 is equal to 6, the maximum number MaxNumMergeCand may be derived as follows:</p><p id="p-0129" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>MaxNumMergeCand=</i>6<i>&#x2212;sps_six_minus_max_num_merge_cand </i><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0130" num="0124">The index value of the maximum index may be in the index range of 0 to N3-P. Therefore, a value of the maximum number is in a value range of P to N3 when the regular enabled flag is true. The value of the maximum number is in a value range of 1 to 6 when the regular merge enabled flag is true, the number N3 is equal to 6, and the number P is equal to 1. Therefore, the maximum number may not be equal to zero when the regular merge enabled flag is true.</p><p id="p-0131" num="0125">With reference to blocks <b>530</b>-<b>560</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the maximum number MaxNumMergeCand may be derived as follows:</p><p id="p-0132" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>if( sps_regular_merge_enabled_flag )</entry></row><row><entry>&#x2003;MaxNumMergeCand = 6 &#x2212; sps_six_minus_max_num_merge_cand</entry></row><row><entry>else</entry></row><row><entry>&#x2003;MaxNumMergeCand = 0</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0133" num="0126">The decoder module <b>124</b> may determine whether the maximum number is included in the value range. The decoder module <b>124</b> may determine that the video data is not in compliance with the decoder module <b>124</b> when the decoder module <b>124</b> determines that the maximum number is excluded from the value range. Therefore, the decoder module <b>124</b> may output an error signal for the one or more image frames.</p><p id="p-0134" num="0127">The decoder module <b>124</b> may determine whether the maximum index is included in the index range. The decoder module <b>124</b> may determine that the video data is not in compliance with the decoder module <b>124</b> when the decoder module <b>124</b> determines that the maximum index is excluded from the index range. Therefore, the decoder module <b>124</b> may output an error signal for the one or more image frames.</p><p id="p-0135" num="0128">At block <b>570</b>, the decoder module <b>124</b> reconstructs the one or more image frames based on the maximum number of the zero or more merging MVP candidates.</p><p id="p-0136" num="0129">With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may select a prediction mode for each of a plurality of image blocks in the one or more image frames from a plurality of mode candidates including the zero or more merging MVP candidates and determine a plurality of predicted blocks based on the prediction modes. The decoder module <b>124</b> may determine a plurality of residual components from the bitstream for each of the image blocks and add the residual components into a corresponding one of the predicted blocks to reconstruct the image blocks. The decoder module <b>124</b> may reconstruct all of the image frames for reconstructing the video images.</p><p id="p-0137" num="0130">The regular merge mode may be directly disabled by a high-level syntax, such as VPS, SPS, PPS, to reduce the pipeline latency. Therefore, the high-level syntax may include the regular merge enabled flag to determine whether the merging MVP candidates are enabled in one or more image frames. In addition, it is unnecessary that the value range of the maximum number includes zero to disable the regular merge mode since the regular merge mode may be disabled directly by the regular merge enabled flag. Therefore, the number P may be a positive integer, such as one.</p><p id="p-0138" num="0131"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart illustrating a method <b>600</b> for decoding video data by an electronic device, according to an implementation of the present disclosure. The method <b>600</b> is an example only, as there are a variety of ways to perform the method.</p><p id="p-0139" num="0132">The method <b>600</b> for decoding a bitstream and reconstructing a block unit may be performed using the configurations illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and various elements of these figures are referenced with regard to the method <b>600</b>. Each block illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref> may represent one or more processes, methods, or subroutines performed.</p><p id="p-0140" num="0133">The order of blocks in <figref idref="DRAWINGS">FIG. <b>6</b></figref> is illustrative only and may change. Additional blocks may be added or fewer blocks may be utilized without departing from the present disclosure.</p><p id="p-0141" num="0134">At block <b>610</b>, the decoder module 124 receives video data. The video data may be a bitstream. With reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the second electronic device <b>120</b> may receive the bitstream from an encoder, such as the first electronic device <b>110</b>, or other video providers via the second interface <b>126</b>. The second interface <b>126</b> may provide the bitstream to the decoder module <b>124</b>.</p><p id="p-0142" num="0135">At block <b>620</b>, the decoder module <b>124</b> determines an intra block copy (IBC) enabled flag from the video data. With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may determine one or more image frames from the bitstream and determine a first parameter set corresponding to the one or more image frames. The first parameter set may be one of a VPS, an SPS, a PPS, and a PH. For example, the IBC enabled flag may be a flag sps ibc enabled flag when the IBC enabled flag is included in the SPS.</p><p id="p-0143" num="0136">The decoder module <b>124</b> may determine the IBC enabled flag from the bitstream. The decoder module <b>124</b> may determine the IBC enabled flag from the first parameter set in the bitstream. Since the first parameter set corresponds to the one or more image frames, the IBC enabled flag may also correspond to the one or more image frames.</p><p id="p-0144" num="0137">The IBC enabled flag is used to determine an IBC prediction mode is enabled for the one or more image frames. The IBC prediction mode is implemented as a block level coding mode. Therefore, block matching is performed at the encoder to find the optimal block vector for each of a plurality of image blocks divided from the one or more image frames. A block vector is used to indicate a displacement from a current image block in a current image frame to a reference image block, which is already reconstructed inside the current picture.</p><p id="p-0145" num="0138">At block <b>630</b>, the decoder module <b>124</b> determines whether the IBC enabled flag is true. The method <b>600</b> may proceed to block <b>640</b> when the decoder module <b>124</b> determines that the IBC enabled flag is true. The method <b>600</b> may proceed to block <b>650</b> when the decoder module <b>124</b> determines the IBC enabled flag is false.</p><p id="p-0146" num="0139">The decoder module <b>124</b> determines that the IBC enabled flag is true when the IBC enabled flag is equal to one. The decoder module <b>124</b> determines that the IBC enabled flag is false when the IBC enabled flag is equal to zero. The IBC enabled flag may be a flag sps_ibc_enabled_flag when the IBC enabled flag is included in SPS.</p><p id="p-0147" num="0140">At block <b>640</b>, the decoder module <b>124</b> determines a maximum index from the video data. With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may determine the maximum index from the video data when the IBC enabled flag is true. The maximum index may be included in one of a VPS, SPS, PPS, and PH.</p><p id="p-0148" num="0141">The maximum index may be used to calculate a maximum number of zero or more IBC merging block vector prediction (BVP) candidates when the IBC enabled flag is true. The maximum number may be represented as MaxNumlbcMergeCand.</p><p id="p-0149" num="0142">An index value of the maximum index may be in an index range of 0 to N4. The number N4 maybe an integer.</p><p id="p-0150" num="0143">The maximum index may be an index sps_N4_minus_max_ibc_num_merge_cand when the maximum index is included in the SPS. The maximum index may be an index sps_six_minus_max_ibc_num_merge_cand when the maximum index is included in the SPS and the number N is equal to 6. When the maximum index is included in the PPS and the number N is equal to 5, the maximum index may be an index pps_five_minus_max_ibc_num_merge_cand.</p><p id="p-0151" num="0144">At block <b>650</b>, the decoder module <b>124</b> determines the maximum number of the zero or more IBC merging BVP candidates equal to zero without determining the maximum index from the video data. The maximum number may be calculated by subtracting the maximum index from the number N4. Therefore, the maximum number may be calculated by subtracting the maximum index from six, when the number N4 is equal to 6. In other words, when the number N4 is equal to 6, the maximum number MaxNumIbcMergeCand may be derived as follows:</p><p id="p-0152" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>MaxNumIbcMergeCand=</i>6<i>&#x2212;sps_six_minus_max_ibc_num_merge_cand </i><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0153" num="0145">The index value of the maximum index may be in the index range of 0 to N4. Therefore, the value of the maximum number may be in a value range of 0 to N4 and zero is included in the value range. The value of the maximum number may be in a value range of 0 to 6 when the number N4 is equal to 6.</p><p id="p-0154" num="0146">At block <b>660</b>, the decoder module <b>124</b> determines the maximum number based on the maximum index and the maximum number has a number value in a value range including zero. The maximum number may be calculated by subtracting the maximum index from the number N4 when the IBC enabled flag is true. Therefore, the maximum number may be calculated by subtracting the maximum index from six when the IBC enabled flag is true and the number N4 is equal to 6. In other words, the maximum number MaxNumIbcMergeCand may be derived as follows:</p><p id="p-0155" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>MaxNumIbcMergeCand=</i>6<i>&#x2212;sps_six_minus_max_ibc_num_merge_cand </i><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0156" num="0147">The index value of the maximum index may be in an index range of 0 to N4. Therefore, a value of the maximum number may be in a value range of 0 to N4 when the IBC enabled flag is true. Thus, zero is still included in the value range when the IBC enabled flag is true. In one implementation, the value of the maximum number may be in a value range of 0 to 6 when the number N4 is equal to 6.</p><p id="p-0157" num="0148">With reference to blocks <b>630</b>-<b>660</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the maximum number MaxNumlbcMergeCand may be derived as follows:</p><p id="p-0158" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>if( sps_ibc_enabled_flag )</entry></row><row><entry>&#x2003;MaxNumIbcMergeCand = 6 &#x2212; six_minus_max_ibc_num_merge_cand</entry></row><row><entry>else</entry></row><row><entry>&#x2003;MaxNumIbcMergeCand = 0</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0159" num="0149">The decoder module <b>124</b> may determine whether the maximum number is included in the value range. The decoder module <b>124</b> may determine that the video data is not in compliance with the decoder module <b>124</b> when the decoder module <b>124</b> determines that the maximum number is excluded from the value range. Therefore, the decoder module <b>124</b> may output an error signal.</p><p id="p-0160" num="0150">The decoder module <b>124</b> may determine whether the maximum index is included in the index range when the IBC enabled flag is true. The decoder module <b>124</b> may determine that the video data is not in compliance with the decoder module <b>124</b> when the decoder module <b>124</b> determines that the maximum index is excluded from the index range. Therefore, the decoder module <b>124</b> may output an error signal.</p><p id="p-0161" num="0151">At block <b>670</b>, the decoder module <b>124</b> reconstructs, based on the maximum number, an image block divided from an image frame and corresponding to the maximum number.</p><p id="p-0162" num="0152">With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may select a prediction mode for the image block divided from one of the one or more image frames from a plurality of mode candidates including the zero or more IBC merging BVP candidates and determine a predicted block based on the prediction mode. The zero or more IBC merging BVP candidates may include zero or more of a plurality of spatial IBC MVP candidates, a plurality of history-based MVP candidates, and a plurality of pairwise average MVP candidates.</p><p id="p-0163" num="0153">The spatial MVP candidates may be determined from motion vectors of spatial neighbor blocks, and the history-based MVP candidates may be determined from a FIFO table. The decoder module <b>124</b> may determine a plurality of residual components from the bitstream for the image block and add the residual components into the predicted block to reconstruct the image block.</p><p id="p-0164" num="0154">The decoder module <b>124</b> may reconstruct all of the image frames for reconstructing the video images. In a video coding standard, such as HEVC and VVC, the IBC prediction mode may include an IBC inter mode and IBC merge mode having the IBC merging candidates. However, the process for decoding and constructing the IBC merging BVP candidates may be more complicated than the process for decoding an IBC inter mode. Therefore, pipeline latency is also a problem and the IBC merge mode may be directly disabled to reduce the pipeline latency.</p><p id="p-0165" num="0155">The IBC merge mode may be directly disabled by a high-level syntax, such as VPS, SPS, PPS. The maximum number may be allowed to be equal to zero for directly disabling the IBC merge mode when zero is included in the value range. Therefore, the IBC merge mode is allowed to be disabled in the one or more image frames only by one maximum index when both of the maximum index and the IBC enabled flag are included in the first parameter set.</p><p id="p-0166" num="0156">For example, both the maximum index and the IBC enabled flag are included in the SPS. The IBC merge mode may be allowed to be disabled in a part of the one or more image frames by different maximum indices when a syntax level of the IBC enabled flag is higher than that of the maximum index. For example, the maximum index is included in PPS and the IBC enabled flag is included in the SPS.</p><p id="p-0167" num="0157"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart o illustrating f a method <b>700</b> for decoding video data by an electronic device, according to an implementation of the present disclosure. The method <b>700</b> is an example only, as there are a variety of ways to decode the video data.</p><p id="p-0168" num="0158">The method <b>700</b> for decoding a bitstream and reconstructing a block unit may be performed using the configurations illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and various elements of these figures are referenced with regard to the method <b>700</b>. Each block illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref> may represent one or more processes, methods, or subroutines performed.</p><p id="p-0169" num="0159">The order of blocks in <figref idref="DRAWINGS">FIG. <b>7</b></figref> is illustrative only and may change. Additional blocks may be added or fewer blocks may be utilized without departing from the present disclosure.</p><p id="p-0170" num="0160">At block <b>710</b>, the decoder module <b>124</b> receives video data. The video data may be a bitstream. With reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the second electronic device <b>120</b> may receive the bitstream from an encoder, such as the first electronic device <b>110</b>, or other video providers via the second interface <b>126</b>. The second interface <b>126</b> may provide the bitstream to the decoder module <b>124</b>.</p><p id="p-0171" num="0161">At block <b>720</b>, the decoder module <b>124</b> determines, from the video data, a general merge enabled flag indicating whether all of a plurality of merge modes are enabled. With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may determine one or more image frames from the bitstream and determine a first parameter set corresponding to the one or more image frames. The first parameter set may be one of a VPS, an SPS, a PPS, and a PH.</p><p id="p-0172" num="0162">The decoder module <b>124</b> may determine the general merge enabled flag from the bitstream. The decoder module <b>124</b> may determine the general merge enabled flag from the first parameter set in the bitstream. Since the first parameter set corresponds to the one or more image frames, the general merge enabled flag may also correspond to the one or more image frames.</p><p id="p-0173" num="0163">The general merge enabled flag may be used to determine all of the merge modes enabled for the one or more image frames. The merge modes may include a regular merge mode, an affine merge mode, an IBC merge mode, and other merge modes.</p><p id="p-0174" num="0164">All of the merge modes may be disabled in the one or more merge modes when the general merge enabled flag is false. The merge modes may be enabled in the one or more merge modes when the general merge enabled flag is true. Zero or more of the merge modes may be disabled in the one or more merge modes due to any other flags when the general merge enabled flag is true. For example, the IBC merge mode may be disabled due to an IBC enabled flag when the general merge enabled flag is true.</p><p id="p-0175" num="0165">The general merge enabled flag is inferred to be equal to zero when the general merge enabled flag is not present. In other words, the decoder module <b>124</b> may determine that the general merge enabled flag is inferred to be equal to zero when the general merge enabled flag is not present.</p><p id="p-0176" num="0166">At block <b>730</b>, the decoder module <b>124</b> determines, based on the general merge enabled flag, a maximum number of zero or more specific merging candidates in a specific one of the merge modes. With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may determine, for the maximum number, a maximum index from the first parameter set corresponding to the one or more image frames. Therefore, the maximum index also corresponds to the one or more image frames. When the first parameter set is an SPS, the maximum index is included in the SPS. However, the maximum index may be equal to an inferred value when the maximum index is not present.</p><p id="p-0177" num="0167">The maximum index is used to calculate the maximum number of the zero or more specific merging candidates in the specific merge mode. An index value of the maximum index may be in an index range so a value of the maximum number may be in a value range. The decoder module <b>124</b> may compare the maximum number with the value range or compare the maximum index with the index range for determining whether the video data is in compliance with the decoder module <b>124</b>.</p><p id="p-0178" num="0168">In one implementation, the maximum index may be used to calculate a maximum number of zero or more merging MVP candidates when the specific merge mode is the regular merge mode. The maximum number may be represented as MaxNumMergeCand. The maximum index may be an index sps_N5_minus_max_num_merge_cand when the maximum index is included in the SPS. The number N5 may be a positive integer.</p><p id="p-0179" num="0169">The decoder module <b>124</b> may determine the maximum index for the regular merge mode from the video data when the general merge enabled flag is true. The decoder module <b>124</b> may determine the inferred value of the maximum index to be equal to the number N5 without parsing the maximum index from the video data when the general merge enabled flag is false.</p><p id="p-0180" num="0170">The maximum index may be an index sps_six_minus_max_num_merge_cand when the maximum index is included in the SPS and the number N5 is equal to 6. The maximum number of the regular merge mode may be calculated by subtracting the maximum index from the number N5. Therefore, the maximum number MaxNumMergeCand may be derived as follows:</p><p id="p-0181" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>if( sps_general_merge_enabled_flag )</entry></row><row><entry>&#x2003;MaxNumMergeCand = 6 &#x2212; sps_six_minus_max_num_merge_cand</entry></row><row><entry>else</entry></row><row><entry>&#x2003;MaxNumMergeCand = 0</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0182" num="0171">In one implementation, the maximum index may be used to calculate a maximum number of zero or more subblock-based merging MVP candidates when the specific merge mode is the affine merge mode. The maximum number may be represented as MaxNumSubblockMergeCand. The maximum index may be an index sps_N6_minus_max_num_subblock_merge_cand when the maximum index is included in the SPS. The number N6 may be a positive integer.</p><p id="p-0183" num="0172">The decoder module <b>124</b> may determine the maximum index from the video data when both an affine enabled flag and the general merge enabled flag are true. The decoder module <b>124</b> may determine the inferred value to be equal to the number N6 without parsing the maximum index when the affine enabled flag or the general merge mode is false. The maximum index of the affine merge mode may be an index sps_five_minus_max_num_subblock_merge_cand when the maximum index is included in the SPS and the number N6 is equal to 5.</p><p id="p-0184" num="0173">The maximum number of the affine merge mode may be calculated by subtracting the maximum index from the number N6 when the affine enabled flag is true. The maximum number of the affine merge mode may be calculated based on the general merge enabled flag, a subblock-based temporal MVP (sbTMVP) flag, and a temporal MVP (TMVP) flag when the affine enabled flag is false. For example, the maximum number MaxNumSubblockMergeCand may be derived as follows:</p><p id="p-0185" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="273pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>if( sps_affine_enabled_flag )</entry></row><row><entry>&#x2003;MaxNumSubblockMergeCand = 5 &#x2212; sps_five_minus_max_num_subblock_merge_cand</entry></row><row><entry>else</entry></row><row><entry>&#x2003;MaxNumSubblockMergeCand=sps_general_merge_enable_flag&#x26;&#x26;sps_sbtmvp_enabled_flag</entry></row><row><entry>&#x2003;&#x2003;&#x26;&#x26;ph_temporal_mvp_enable_flag</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0186" num="0174">In one implementation, the maximum index may be used to calculate a maximum number of zero or more IBC merging BVP candidates when the specific merge mode is the IBC merge mode. The maximum number may be represented as MaxNumlbcMergeCand. The maximum index may be an index sps_N7_minus_max_ibc_num_merge_cand when the maximum index is included in the SPS. The number N7 may be a positive integer.</p><p id="p-0187" num="0175">The decoder module <b>124</b> may determine the maximum index from the video data when both an IBC enabled flag and the general merge enabled flag are true. The decoder module 124 may determine the inferred value to be equal to the number N7 without parsing the maximum index when the IBC enabled flag or the general merge mode is false.</p><p id="p-0188" num="0176">The maximum index of the IBC merge mode may be an index sps_six_minus_max_ibc_num_merge_cand when the maximum index is included in the SPS and the number N7 is equal to 6. The maximum number of the IBC merge mode may be calculated by subtracting the maximum index from the number N7 when the IBC enabled flag is true. The maximum number of the IBC merge mode may be determined based on the general merge enabled flag when the affine enabled flag is false. For example, the maximum number MaxNumlbcMergeCand may be derived as follows:</p><p id="p-0189" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="7pt" align="left"/><colspec colname="2" colwidth="252pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>if( sps_ibc_enabled_flag )</entry></row><row><entry/><entry>&#x2003;MaxNumIbcMergeCand = 6 &#x2212; sps_six_minus_max_ibc_num_merge_cand</entry></row><row><entry/><entry>else</entry></row><row><entry/><entry>&#x2003;MaxNumIbcMergeCand = sps_general_merge_enable_flag</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0190" num="0177">In another implementation, the decoder module <b>124</b> may determine, based on the general merge enabled flag, more than one maximum number respectively for different merge modes according to at least two of the first to the third implementations in the method <b>700</b>. For example, the decoder module <b>124</b> may determine, based on the general merge enabled flag, the maximum number of the regular merge mode and the maximum number of the IBC merge mode.</p><p id="p-0191" num="0178">At block <b>740</b>, the decoder module <b>124</b> reconstructs, based on the maximum number, an image block divided from an image frame. With further reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decoder module <b>124</b> may select a prediction mode for each of a plurality of image blocks in the one or more image frames from a plurality of mode candidates including the zero or more specific merging candidates and determine a plurality of predicted blocks based on the prediction modes. The decoder module <b>124</b> may determine a plurality of residual components from the bitstream for each of the image blocks and add the residual components into a corresponding one of the predicted blocks to reconstruct the image blocks. The decoder module <b>124</b> may reconstruct all of the image frames for reconstructing the video images.</p><p id="p-0192" num="0179">All of the merge modes may be directly disabled by a high-level syntax, such as VPS, SPS, PPS, to reduce the pipeline latency. Therefore, the high-level syntax may include the general merge enabled flag to determine whether all of the merge modes are enabled in one or more image frames. In addition, each maximum number for the merge modes may be controlled by the general merge enabled flag for further increasing the coding efficiency.</p><p id="p-0193" num="0180"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram illustrating an encoder module <b>114</b> of an electronic device <b>110</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, according to an implementation of the present disclosure. The encoder module <b>114</b> may include a prediction processor (e.g., prediction process unit <b>8141</b>), at least a first summer (e.g., first summer <b>8142</b>) and a second summer (e.g., second summer <b>8145</b>), a transform/quantization processor (e.g., transform/quantization unit <b>8143</b>), an inverse quantization/inverse transform processor (e.g., inverse quantization/inverse transform unit <b>8144</b>), a filter (e.g., filtering unit <b>8146</b>), a decoded picture buffer (e.g., decoded picture buffer <b>8147</b>), and an entropy encoder (e.g., entropy encoding unit <b>8148</b>). The prediction process unit <b>8141</b> of the encoder module <b>114</b> may further include a partition processor (e.g., partition unit <b>81411</b>), an intra prediction processor (e.g., intra prediction unit <b>81412</b>), and an inter prediction processor (e.g., inter prediction unit <b>81413</b>).</p><p id="p-0194" num="0181">The encoder module <b>114</b> may receive the source video and encode the source video to output a bitstream. The encoder module <b>114</b> may receive source video including a plurality of image frames and then divide the image frames according to a coding structure. Each of the image frames may be divided into at least one image block.</p><p id="p-0195" num="0182">The at least one image block may include a luminance block having a plurality of luminance samples and at least one chrominance block having a plurality of chrominance samples. The luminance block and the at least one chrominance block may be further divided to generate macroblocks, coding tree units (CTUs), coding blocks (CBs), sub-divisions thereof, and/or another equivalent coding unit.</p><p id="p-0196" num="0183">The encoder module <b>114</b> may perform additional sub-divisions of the source video. It should be noted that the disclosed implementations are generally applicable to video coding regardless of how the source video is partitioned prior to and/or during the encoding.</p><p id="p-0197" num="0184">During the encoding process, the prediction process unit <b>8141</b> may receive a current image block of a specific one of the image frames. The current image block may be the luminance block or one of the chrominance blocks in the specific image frame.</p><p id="p-0198" num="0185">The partition unit <b>81411</b> may divide the current image block into multiple block units. The intra prediction unit <b>81412</b> may perform intra-predictive coding of a current block unit relative to one or more neighboring blocks in the same frame as the current block unit in order to provide spatial prediction. The inter prediction unit <b>81413</b> may perform inter-predictive coding of the current block unit relative to one or more blocks in one or more reference image blocks to provide temporal prediction.</p><p id="p-0199" num="0186">The prediction process unit <b>8141</b> may select one of the coding results generated by the intra prediction unit <b>81412</b> and the inter prediction unit <b>81413</b> based on a mode selection method, such as a cost function. The mode selection method may be a rate-distortion optimization (RDO) process.</p><p id="p-0200" num="0187">The prediction process unit <b>8141</b> may determine the selected coding result and provide a predicted block corresponding to the selected coding result to the first summer <b>8142</b> for generating a residual block and to the second summer <b>8145</b> for reconstructing the encoded block unit. The prediction process unit <b>8141</b> may further provide syntax elements, such as motion vectors, intra mode indicators, partition information, and other syntax information, to the entropy encoding unit <b>8148</b>.</p><p id="p-0201" num="0188">The intra prediction unit <b>81412</b> may intra predict the current block unit. The intra prediction unit <b>81412</b> may determine an intra prediction mode directed toward a reconstructed sample neighboring the current block unit in order to encode the current block unit.</p><p id="p-0202" num="0189">The intra prediction unit <b>81412</b> may encode the current block unit using various intra prediction modes. The intra prediction unit <b>81412</b> or the prediction process unit <b>8141</b> may select an appropriate intra prediction mode from the selected modes. The intra prediction unit <b>81412</b> may encode the current block unit using a cross component prediction mode to predict one of the two chroma components of the current block unit based on the luma components of the current block unit. The intra prediction unit <b>81412</b> may predict a first one of the two chroma components of the current block unit based on the second of the two chroma components of the current block unit.</p><p id="p-0203" num="0190">The inter prediction unit <b>81413</b> may inter predict the current block unit as an alternative to the intra prediction performed by the intra prediction unit <b>81412</b>. The inter prediction unit <b>81413</b> may perform motion estimation to estimate motion of the current block unit for generating a motion vector.</p><p id="p-0204" num="0191">The motion vector may indicate a displacement of the current block unit within the current image block relative to a reference block unit within a reference image block. The inter prediction unit <b>81413</b> may receive at least one reference image block stored in the decoded picture buffer <b>8147</b> and estimate the motion based on the received reference image blocks to generate the motion vector.</p><p id="p-0205" num="0192">The first summer <b>8142</b> may generate the residual block by subtracting the prediction block determined by the prediction process unit <b>8141</b> from the original current block unit. The first summer <b>8142</b> may represent the component or components that perform this subtraction.</p><p id="p-0206" num="0193">The transform/quantization unit <b>8143</b> may apply a transform to the residual block in order to generate a residual transform coefficient and then quantize the residual transform coefficients to further reduce bit rate. The transform may be one of a DCT, DST, AMT, MDNSST, HyGT, signal-dependent transform, KLT, wavelet transform, integer transform, sub-band transform, or a conceptually similar transform.</p><p id="p-0207" num="0194">The transform may convert the residual information from a pixel value domain to a transform domain, such as a frequency domain. The degree of quantization may be modified by adjusting a quantization parameter.</p><p id="p-0208" num="0195">The transform/quantization unit <b>8143</b> may perform a scan of the matrix including the quantized transform coefficients. Alternatively, the entropy encoding unit <b>8148</b> may perform the scan.</p><p id="p-0209" num="0196">The entropy encoding unit <b>8148</b> may receive a plurality of syntax elements from the prediction process unit <b>8141</b> and the transform/quantization unit <b>8143</b> including a quantization parameter, transform data, motion vectors, intra modes, partition information, and other syntax information. The entropy encoding unit <b>8148</b> may encode the syntax elements into the bitstream.</p><p id="p-0210" num="0197">The entropy encoding unit <b>8148</b> may entropy encode the quantized transform coefficients by performing CAVLC, CABAC, SBAC, PIPE coding, or another entropy coding technique to generate an encoded bitstream. The encoded bitstream may be transmitted to another device (e.g., the second electronic device <b>120</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) or archived for later transmission or retrieval.</p><p id="p-0211" num="0198">The inverse quantization/inverse transform unit <b>8144</b> may apply inverse quantization and inverse transformation to reconstruct the residual block in the pixel domain for later use as a reference block. The second summer <b>8145</b> may add the reconstructed residual block to the prediction block provided from the prediction process unit <b>8141</b> in order to produce a reconstructed block for storage in the decoded picture buffer <b>8147</b>.</p><p id="p-0212" num="0199">The filtering unit <b>8146</b> may include a deblocking filter, an SAO filter, a bilateral filter, and/or an ALF to remove blocking artifacts from the reconstructed block. Additional filters (in loop or post loop) may be used in addition to the deblocking filter, the SAO filter, the bilateral filter, and the ALF. Such filters are not illustrated for brevity and may filter the output of the second summer <b>8145</b>.</p><p id="p-0213" num="0200">The decoded picture buffer <b>8147</b> may be a reference picture memory that stores the reference block for use by the encoder module <b>114</b> to encode video, such as in intra or inter coding modes. The decoded picture buffer <b>8147</b> may include a variety of memory devices, such as DRAM (including SDRAM, MRAM, RRAM), or other types of memory devices. The decoded picture buffer <b>8147</b> may be on-chip with other components of the encoder module <b>114</b> or off-chip relative to those components.</p><p id="p-0214" num="0201">The encoder module <b>114</b> may receive video data and use a plurality of prediction modes to predict a plurality of image frames in the video data. The prediction modes may include a plurality of merge modes having a plurality of merging candidates. The encoder module <b>114</b> may signal, based on the prediction results, at least one of an affine enabled flag in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a regular merge enabled flag in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, an IBC enabled flag in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, and a general merge enabled flag in <figref idref="DRAWINGS">FIG. <b>7</b></figref> for determining whether a corresponding mode is enabled for one or more image frames.</p><p id="p-0215" num="0202">The encoder module <b>114</b> may signal, based on the prediction results, a maximum index for the method <b>300</b>-<b>700</b> in <figref idref="DRAWINGS">FIGS. <b>3</b>-<b>7</b></figref> for determining a corresponding maximum number. In addition, with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the encoder module <b>114</b> may signal a subblock-based temporal MVP flag and a temporal MVP flag for determining the maximum number of the affine merging MVP candidates. Then, the encoder module <b>114</b> may add the encoded data including the flags and the indices into the bitstream for providing to the decoder module <b>124</b>.</p><p id="p-0216" num="0203">The disclosed implementations are to be considered in all respects as illustrative and not restrictive. It should also be understood that the present disclosure is not limited to the specific disclosed implementations, but that many rearrangements, modifications, and substitutions are possible without departing from the scope of the present disclosure.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of encoding video data performed by an electronic device, the method comprising:<claim-text>receiving the video data;</claim-text><claim-text>determining whether an affine enabled flag corresponding to one or more image frames included in the video data is true;</claim-text><claim-text>determining a maximum number of zero or more subblock-based merging motion vector prediction (MVP) candidates corresponding to the one or more image frames when the affine enabled flag is true, wherein:<claim-text>the maximum number of the zero or more subblock-based merging MVP candidates is in a number range of K to N, N being a first integer, and K being a second integer less than N, and</claim-text><claim-text>the maximum number of the zero or more subblock-based merging MVP candidates is in a number range of 1 to N when K is 1;</claim-text></claim-text><claim-text>determining that a maximum index is in an index range of 0 to N-K and generated by subtracting the maximum number of the zero or more subblock-based merging MVP candidates from N when the affine enabled flag is true, wherein an index value of the maximum index is in an index range of 0 to N-1 when K is 1; and</claim-text><claim-text>signaling the maximum index into a bitstream for the video data.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein N is five.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the affine enabled flag and the maximum index are signaled in a sequence parameter set (SPS) of the bitstream,</claim-text><claim-text>each of the one or more image frames is reconstructed based on the SPS, and</claim-text><claim-text>at least one of the one or more image frames is reconstructed based on a picture header of the bitstream.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the maximum number of the zero or more subblock-based merging MVP candidates is in a number range of K to N when K is different from 1.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. An electronic device for encoding video data, the electronic device comprising:<claim-text>at least one processor; and</claim-text><claim-text>at least one storage device coupled to the at least one processor and storing computer-executable instructions which, when executed by the at least one processor, causes the electronic device to:<claim-text>receive the video data;</claim-text><claim-text>determine whether an affine enabled flag corresponding to one or more image frames included in the video data is true;</claim-text><claim-text>determine a maximum number of zero or more subblock-based merging motion vector prediction (MVP) candidates corresponding to the one or more image frames when the affine enabled flag is true, wherein:<claim-text>the maximum number of the zero or more subblock-based merging MVP candidates is in a number range of K to N, N being a first integer, and K being a second integer less than N, and</claim-text><claim-text>the maximum number of the zero or more subblock-based merging MVP candidates is in a number range of 1 to N when K is 1;</claim-text></claim-text><claim-text>determine that a maximum index is in an index range of 0 to N-K and generated by subtracting the maximum number of the zero or more subblock-based merging MVP candidates from N when the affine enabled flag is true, wherein an index value of the maximum index is in an index range of 0 to N-1 when K is 1; and</claim-text><claim-text>signal the maximum index into a bitstream for the video data.</claim-text></claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The electronic device according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein N is five.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The electronic device according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein:<claim-text>the affine enabled flag and the maximum index are signaled in a sequence parameter set (SPS) of the bitstream,</claim-text><claim-text>each of the one or more image frames is reconstructed based on the SPS, and</claim-text><claim-text>at least one of the one or more image frames is reconstructed based on a picture header of the bitstream.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The electronic device according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the maximum number of the zero or more subblock-based merging MVP candidates is in a number range of K to N when K is different from 1.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A method of encoding video data by an electronic device, the method comprising:<claim-text>receiving the video data;</claim-text><claim-text>determining a maximum number of zero or more subblock-based merging motion vector prediction (MVP) candidates corresponding to one or more image frames included in the video data, wherein the maximum number of the zero or more subblock-based merging MVP candidates is in a number range of K to N, N being a first integer, and K being a second integer less than N;</claim-text><claim-text>determining a maximum index by subtracting the maximum number of the zero or more subblock-based merging MVP candidates from N, wherein the maximum number of the zero or more subblock-based merging MVP candidates is in a number range of 1 to N and an index value of the maximum index is in an index range of 0 to N-1 when K is 1; and</claim-text><claim-text>signaling the maximum index into a bitstream for the video data.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>determining an affine enabled flag corresponding to the one or more image frames, wherein:</claim-text><claim-text>the maximum index is signaled into the bitstream when the affine enabled flag is true.</claim-text></claim-text></claim></claims></us-patent-application>