<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004804A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004804</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17940343</doc-number><date>20220908</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">System on a Chip with Deep Learning Accelerator and Random Access Memory</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16845002</doc-number><date>20200409</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11461651</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17940343</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Micron Technology, Inc.</orgname><address><city>Boise</city><state>ID</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Kale</last-name><first-name>Poorna</first-name><address><city>Folsom</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Cummins</last-name><first-name>Jaime</first-name><address><city>Bainbridge Island</city><state>WA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Systems, devices, and methods related to a deep learning accelerator and memory are described. An integrated circuit may be configured with: a central processing unit, a deep learning accelerator configured to execute instructions with matrix operands; random access memory configured to store first instructions of an artificial neural network executable by the deep learning accelerator and second instructions of an application executable by the central processing unit; one or connections among the random access memory, the deep learning accelerator and the central processing unit; and an input/output interface to an external peripheral bus. While the deep learning accelerator is executing the first instructions to convert sensor data according to the artificial neural network to inference results, the central processing unit may execute the application that uses inference results from the artificial neural network.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="147.91mm" wi="141.56mm" file="US20230004804A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="177.55mm" wi="143.59mm" file="US20230004804A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="152.15mm" wi="111.76mm" file="US20230004804A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="152.15mm" wi="111.76mm" file="US20230004804A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="164.85mm" wi="111.76mm" file="US20230004804A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="209.30mm" wi="123.70mm" file="US20230004804A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="202.95mm" wi="143.59mm" file="US20230004804A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="215.65mm" wi="143.59mm" file="US20230004804A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="204.47mm" wi="143.59mm" file="US20230004804A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="183.90mm" wi="162.64mm" file="US20230004804A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATIONS</heading><p id="p-0002" num="0001">The present application is a continuation application of U.S. patent application Ser. No. 16/845,002 filed Apr. 9, 2020, the entire disclosures of which application are hereby incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">At least some embodiments disclosed herein relate to integrated circuit devices in general and more particularly, but not limited to, integrated circuit devices having accelerators for artificial neural networks (ANNs), such as ANNs configured through machine learning and/or deep learning.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">An artificial neural network (ANN) uses a network of neurons to process inputs to the network and to generate outputs from the network.</p><p id="p-0005" num="0004">For example, each neuron in the network receives a set of inputs. Some of the inputs to a neuron may be the outputs of certain neurons in the network; and some of the inputs to a neuron may be the inputs provided to the neural network. The input/output relations among the neurons in the network represent the neuron connectivity in the network.</p><p id="p-0006" num="0005">For example, each neuron can have a bias, an activation function, and a set of synaptic weights for its inputs respectively. The activation function may be in the form of a step function, a linear function, a log-sigmoid function, etc. Different neurons in the network may have different activation functions.</p><p id="p-0007" num="0006">For example, each neuron can generate a weighted sum of its inputs and its bias and then produce an output that is the function of the weighted sum, computed using the activation function of the neuron.</p><p id="p-0008" num="0007">The relations between the input(s) and the output(s) of an ANN in general are defined by an ANN model that includes the data representing the connectivity of the neurons in the network, as well as the bias, activation function, and synaptic weights of each neuron. Based on a given ANN model, a computing device can be configured to compute the output(s) of the network from a given set of inputs to the network.</p><p id="p-0009" num="0008">For example, the inputs to an ANN network may be generated based on camera inputs; and the outputs from the ANN network may be the identification of an item, such as an event or an object.</p><p id="p-0010" num="0009">In general, an ANN may be trained using a supervised method where the parameters in the ANN are adjusted to minimize or reduce the error between known outputs associated with or resulted from respective inputs and computed outputs generated via applying the inputs to the ANN. Examples of supervised learning/training methods include reinforcement learning and learning with error correction.</p><p id="p-0011" num="0010">Alternatively, or in combination, an ANN may be trained using an unsupervised method where the exact outputs resulted from a given set of inputs is not known before the completion of the training. The ANN can be trained to classify an item into a plurality of categories, or data points into clusters.</p><p id="p-0012" num="0011">Multiple training algorithms can be employed for a sophisticated machine learning/training paradigm.</p><p id="p-0013" num="0012">Deep learning uses multiple layers of machine learning to progressively extract features from input data. For example, lower layers can be configured to identify edges in an image; and higher layers can be configured to identify, based on the edges detected using the lower layers, items captured in the image, such as faces, objects, events, etc. Deep learning can be implemented via artificial neural networks (ANNs), such as deep neural networks, deep belief networks, recurrent neural networks, and/or convolutional neural networks.</p><p id="p-0014" num="0013">Deep learning has been applied to many application fields, such as computer vision, speech/audio recognition, natural language processing, machine translation, bioinformatics, drug design, medical image processing, games, etc.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0015" num="0014">The embodiments are illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an integrated circuit device having a deep learning accelerator and random access memory configured according to one embodiment.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a processing unit configured to perform matrix-matrix operations according to one embodiment.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a processing unit configured to perform matrix-vector operations according to one embodiment.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a processing unit configured to perform vector-vector operations according to one embodiment.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a deep learning accelerator and random access memory configured to autonomously apply inputs to a trained artificial neural network according to one embodiment.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows an integrated circuit device having a deep learning accelerator and random access memory configured with separate memory access connections according to one embodiment.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows an integrated circuit device having a deep learning accelerator and random access memory with a camera interface according to one embodiment.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a system on a chip according to one embodiment.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a method implemented in an integrated circuit device according to one embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0025" num="0024">At least some embodiments disclosed herein provide a general-purpose integrated circuit device configured to perform computations of artificial neural networks (ANNs) with reduced energy consumption and computation time. The integrated circuit device includes a deep learning accelerator (DLA) and random access memory. The integrated circuit device can be configured with separate connections for concurrent access to the random access memory. The integrated circuit device can have a camera interface configured to receive image data directly from one or more cameras as input to an artificial neural network (ANN) implemented in the integrated circuit device. Further, the integrated circuit device can include a central processing unit (<b>225</b>) to form a system on a chip.</p><p id="p-0026" num="0025">The deep learning accelerator (DLA) includes a set of general-purpose, programmable hardware computing logic that is specialized and/or optimized to perform parallel vector and/or matrix calculations, including but not limited to multiplication and accumulation of vectors and/or matrices.</p><p id="p-0027" num="0026">Further, the deep learning accelerator (DLA) can include one or more arithmetic-logic units (ALUs) to perform arithmetic and bitwise operations on integer binary numbers.</p><p id="p-0028" num="0027">The deep learning accelerator (DLA) is programmable via a set of instructions to perform the computations of an artificial neural network (ANN).</p><p id="p-0029" num="0028">The granularity of the deep learning accelerator (DLA) operating on vectors and matrices corresponds to the largest unit of vectors/matrices that can be operated upon during the execution of one instruction by the deep learning accelerator (DLA). During the execution of the instruction for a predefined operation on vector/matrix operands, elements of vector/matrix operands can be operated upon by the deep learning accelerator (DLA) in parallel to reduce execution time and/or energy consumption associated with memory/data access. The operations on vector/matrix operands of the granularity of the deep learning accelerator (DLA) can be used as building blocks to implement computations on vectors/matrices of larger sizes.</p><p id="p-0030" num="0029">The implementation of a typical/practical artificial neural network (ANN) involves vector/matrix operands having sizes that are larger than the operation granularity of the deep learning accelerator (DLA). To implement such an artificial neural network (ANN) using the deep learning accelerator (DLA), computations involving the vector/matrix operands of large sizes can be broken down to the computations of vector/matrix operands of the granularity of the deep learning accelerator (DLA). The deep learning accelerator (DLA) can be programmed via instructions to carry out the computations involving large vector/matrix operands. For example, atomic computation capabilities of the deep learning accelerator (DLA) in manipulating vectors and matrices of the granularity of the deep learning accelerator (DLA) in response to instructions can be programmed to implement computations in an artificial neural network (ANN).</p><p id="p-0031" num="0030">In some implementations, the deep learning accelerator (DLA) lacks some of the logic operation capabilities of a typical central processing unit (CPU). However, the deep learning accelerator (DLA) can be configured with sufficient logic units to process the input data provided to an artificial neural network (ANN) and generate the output of the artificial neural network (ANN) according to a set of instructions generated for the deep learning accelerator (DLA). Thus, the deep learning accelerator (DLA) can perform the computation of an artificial neural network (ANN) with little or no help from a central processing unit (CPU) or another processor. Optionally, a conventional general purpose processor can also be configured as part of the deep learning accelerator (DLA) to perform operations that cannot be implemented efficiently using the vector/matrix processing units of the deep learning accelerator (DLA), and/or that cannot be performed by the vector/matrix processing units of the deep learning accelerator (DLA).</p><p id="p-0032" num="0031">A typical artificial neural network (ANN) can be described/specified in a standard format (e.g., open neural network exchange (ONNX)). A compiler can be used to convert the description of the artificial neural network (ANN) into a set of instructions for the deep learning accelerator (DLA) to perform calculations of the artificial neural network (ANN). The compiler can optimize the set of instructions to improve the performance of the deep learning accelerator (DLA) in implementing the artificial neural network (ANN).</p><p id="p-0033" num="0032">The deep learning accelerator (DLA) can have local memory, such as registers, buffers and/or caches, configured to store vector/matrix operands and the results of vector/matrix operations. Intermediate results in the registers can be pipelined/shifted in the deep learning accelerator (DLA) as operands for subsequent vector/matrix operations to reduce time and energy consumption in accessing memory/data and thus speed up typical patterns of vector/matrix operations in implementing a typical artificial neural network (ANN). The capacity of registers, buffers and/or caches in the deep learning accelerator (DLA) is typically insufficient to hold the entire data set for implementing the computation of a typical artificial neural network (ANN). Thus, a random access memory coupled to the deep learning accelerator (DLA) is configured to provide an improved data storage capability for implementing a typical artificial neural network (ANN). For example, the deep learning accelerator (DLA) loads data and instructions from the random access memory and stores results back into the random access memory.</p><p id="p-0034" num="0033">The communication bandwidth between the deep learning accelerator (DLA) and the random access memory is configured to optimize or maximize the utilization of the computation power of the deep learning accelerator (DLA). For example, high communication bandwidth can be provided between the deep learning accelerator (DLA) and the random access memory such that vector/matrix operands can be loaded from the random access memory into the deep learning accelerator (DLA) and results stored back into the random access memory in a time period that is approximately equal to the time for the deep learning accelerator (DLA) to perform the computations on the vector/matrix operands. The granularity of the deep learning accelerator (DLA) can be configured to increase the ratio between the amount of computations performed by the deep learning accelerator (DLA) and the size of the vector/matrix operands such that the data access traffic between the deep learning accelerator (DLA) and the random access memory can be reduced, which can reduce the requirement on the communication bandwidth between the deep learning accelerator (DLA) and the random access memory. Thus, the bottleneck in data/memory access can be reduced or eliminated.</p><p id="p-0035" num="0034">In at least some embodiments, multiple connections are provided to allow different devices to access the random access memory in parallel for different purposes. For example, the random access memory can include a portion configured to store input to the artificial neural network (ANN) and another portion configured to store output from the artificial neural network (ANN). One connection to the random access memory can be used by the central processing unit (CPU) or another processor to access the output from the artificial neural network (ANN), while concurrently another connection to the random access memory can be used by a direct memory access (DMA) controller to store into the random access memory input data for the artificial neural network (ANN).</p><p id="p-0036" num="0035">For example, the central processing unit (CPU) can set up the direct memory access (DMA) controller to write, into an input region of the random access memory, input data to be processed by the artificial neural network (ANN). The completion of the direct memory access (DMA) controller writing a set of input into the input region can trigger the deep learning accelerator (DLA) to execute the instructions to implement artificial neural network (ANN). The execution of the instructions results in the combination of the input with the matrices of the artificial neural network (ANN) to generate output. The output is configured to be stored in another region of the random access memory for the central processing unit (CPU).</p><p id="p-0037" num="0036">Optionally, the model data of an artificial neural network (ANN) can be stored in a further region of the random access memory. The model data can include the matrices identifying neural connectivity and synaptic weights of artificial neurons, states and/or properties of artificial neurons in the artificial neural network (ANN). The model data can further include the instructions for the deep learning accelerator (DLA) to implement the computation of the artificial neural network (ANN). For example, a compiler can convert a description of the artificial neural network (ANN) into the model data stored in the random access memory.</p><p id="p-0038" num="0037">After the model data is stored in the random access memory and the direct memory access (DMA) controller is configured to write input data into the random access memory, the deep learning accelerator (DLA) and the direct memory access (DMA) controller can process the input data using the artificial neural network (ANN) without help from the central processing unit (CPU). The output of the artificial neural network (ANN) is automatically stored in the random access memory. The central processing unit (CPU) can access the random access memory via a separate connection concurrently with the direct memory access (DMA) controller providing input data to the deep learning accelerator (DLA).</p><p id="p-0039" num="0038">For example, a stream of input data to the artificial neural network (ANN) can be configured in the form of a sequence of input data sets. Each input data set is for a set of input to the artificial neural network (ANN) during a time slot. While the deep learning accelerator (DLA) is computing the output from the current set of input, the direct memory access (DMA) controller can store the next set of input into the random access memory; and the central processing unit (CPU) can concurrently retrieve, from the random access memory, the output generated for the previous set of input.</p><p id="p-0040" num="0039">Thus, the task of preparation and processing of input data to an artificial neural network (ANN) can be offloaded from the central processing unit (CPU). The combination of the deep learning accelerator (DLA), random access memory and the direct memory access (DMA) controller can function as an independent supplier of results from an artificial neural network (ANN) to the central processing unit (CPU). The central processing unit (CPU) can retrieve a set of output at a time when the output is needed. The central processing unit (CPU) can instruct the direct memory access (DMA) controller to pause its operations in supplying input to the artificial neural network (ANN) when output from the artificial neural network (ANN) is not required. Subsequently, when output from the artificial neural network (ANN) is needed, the central processing unit (CPU) can instruct the direct memory access (DMA) controller to resume its operations of loading input data into the random access memory.</p><p id="p-0041" num="0040">artificial neural networks (ANNs) can be used to process sensor data, such as images. For example, digital cameras can be used to generate images for computer vision and/or autonomous driving, flying, navigation, etc. For example, some sensor data can be converted into an image form for processing by an artificial neural network (ANN). For example, radar, lidar, ultrasound scanner, medical imaging equipment, etc. can generate images for analysis by artificial neural networks (ANNs) to recognize and/or classify features, objects, diseases, etc.</p><p id="p-0042" num="0041">An integrated circuit device having a deep learning accelerator and random access memory can be configured to include a camera interface to acquire image data as input to an artificial neural network (ANN) implemented in the integrated circuit device.</p><p id="p-0043" num="0042">For example, the camera interface can be implemented according to a mobile industry processor interface (MIPI) protocol to receive image data from an image sensor, a camera or another device that can generate images, such as radar, lidar, ultrasound scanner, medical imaging equipment. For example, the mobile industry processor interface (MIPI) protocol can include support of a camera command interface to control the operation of a camera, or an imaging device. The camera interface allows the integrated circuit device having a deep learning accelerator and random access memory to control the receiving of image data as input for processing by an artificial neural network (ANN). A camera or an image sensor/generator can stream its input data as images into the input region of the random access memory. The integrated circuit device automatically converts the input data according to an artificial neural network (ANN) and stores the output from the artificial neural network (ANN) in the random access memory. Since the integrated circuit device seamlessly acquires and converts the image data into artificial neural network (ANN) outputs, data traffic to the central processing unit can be dramatically reduced.</p><p id="p-0044" num="0043">The camera interface allows the integrated circuit device to be combined with an image generator as a smart sensor unit that automatically supplies the intelligent results from an artificial neural network (ANN) in random access memory. Once the central processing unit configures the integrated circuit device to operate, the computation tasks of acquiring input data and performing the computation involving the artificial neural network (ANN) can be offloaded from the central processing unit (CPU).</p><p id="p-0045" num="0044">Optionally, the raw sensor/image data can be buffered in the random access memory for a period of time in a cyclic way such that if needed, the central processing unit (CPU) can also access the raw sensor data within the period of time.</p><p id="p-0046" num="0045">The logic circuit of a central processing unit (CPU) can also be integrated into an integrated circuit device that has a deep learning accelerator (DLP) and random access memory. The central processing unit (CPU) and the deep learning accelerator (DLP) can be configured to share the random access memory in the integrated circuit device. Since the integrated circuit device has a central processing unit (CPU) and random access memory, the integrated circuit device can form a system on a chip and can be configured without an interface to an external memory bus.</p><p id="p-0047" num="0046">For example, in such an integrated circuit device having a central processing unit (CPU), applications can be programmed to run in the central processing unit (CPU), where logical memory addresses used in a running instance of an application can be mapped via a memory controller of the central processing unit to the physical memory address for accessing the random access memory. The deep learning accelerator (DLP) can perform some or all of the computations involving an artificial neural network (ANN) and can provide the output of the artificial neural network (ANN) as input to the application(s) running in the central processing unit (CPU). Thus, the integrated circuit device can be used to implement low cost, intelligent internet of things (IoTs), such as a surveillance camera.</p><p id="p-0048" num="0047">For example, one or more sensors can be connected to an input/output interface of the integrated circuit device to provide sensor data as the input to an artificial neural network (ANN) that has been trained to generate inference results. A description of the trained artificial neural network (ANN) can be converted, using a compiler, into a set of instructions and matrix data. After storing the instructions and the matrix data in the random access memory, the deep learning accelerator (DLP) can execute the instructions to combine the sensor data and the matrix data of the artificial neural network (ANN) into high-level input for the central processing unit. Optionally, the instructions executed by the deep learning accelerator (DLP) can include calls to one or more routines executed in the central processing unit. Signal lines can be implemented within the integrated circuit device to facilitate the calls. Thus, the central processing unit in the integrated circuit device can optionally provide services to the deep learning accelerator (DLP) in implementing the artificial neural network (ANN).</p><p id="p-0049" num="0048">The application to be executed by the central processing unit can be programmed to read as input, from the random access memory, the inference results generated by the artificial neural network (ANN). Therefore, the details of processing the sensor data using the artificial neural network (ANN) can be shielded from the programming of the application.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an integrated circuit device (<b>101</b>) having a deep learning accelerator (<b>103</b>) and random access memory (<b>105</b>) configured according to one embodiment.</p><p id="p-0051" num="0050">The deep learning accelerator (<b>103</b>) in <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes processing units (<b>111</b>), a control unit (<b>113</b>), and local memory (<b>115</b>). When vector and matrix operands are in the local memory (<b>115</b>), the control unit (<b>113</b>) can use the processing units (<b>111</b>) to perform vector and matrix operations in accordance with instructions. Further, the control unit (<b>113</b>) can load instructions and operands from the random access memory (<b>105</b>) through a memory interface (<b>117</b>) and a high speed/bandwidth connection (<b>119</b>).</p><p id="p-0052" num="0051">The integrated circuit device (<b>101</b>) is configured to be enclosed within an integrated circuit package with pins or contacts for a memory controller interface (<b>107</b>).</p><p id="p-0053" num="0052">The memory controller interface (<b>107</b>) is configured to support a standard memory access protocol such that the integrated circuit device (<b>101</b>) appears to a typical memory controller in a way same as a conventional random access memory device having no deep learning accelerator (DLA) (<b>103</b>). For example, a memory controller external to the integrated circuit device (<b>101</b>) can access, using a standard memory access protocol through the memory controller interface (<b>107</b>), the random access memory (<b>105</b>) in the integrated circuit device (<b>101</b>).</p><p id="p-0054" num="0053">The integrated circuit device (<b>101</b>) is configured with a high bandwidth connection (<b>119</b>) between the random access memory (<b>105</b>) and the deep learning accelerator (DLA) (<b>103</b>) that are enclosed within the integrated circuit device (<b>101</b>). The bandwidth of the connection (<b>119</b>) is higher than the bandwidth of the connection (<b>109</b>) between the random access memory (<b>105</b>) and the memory controller interface (<b>107</b>).</p><p id="p-0055" num="0054">In one embodiment, both the memory controller interface (<b>107</b>) and the memory interface (<b>117</b>) are configured to access the random access memory (<b>105</b>) via a same set of buses or wires. Thus, the bandwidth to access the random access memory (<b>105</b>) is shared between the memory interface (<b>117</b>) and the memory controller interface (<b>107</b>). Alternatively, the memory controller interface (<b>107</b>) and the memory interface (<b>117</b>) are configured to access the random access memory (<b>105</b>) via separate sets of buses or wires. Optionally, the random access memory (<b>105</b>) can include multiple sections that can be accessed concurrently via the connection (<b>119</b>). For example, when the memory interface (<b>117</b>) is accessing a section of the random access memory (<b>105</b>), the memory control interface (<b>107</b>) can concurrently access another section of the random access memory (<b>105</b>). For example, the different sections can be configured on different integrated circuit dies and/or different planes/banks of memory cells; and the different sections can be accessed in parallel to increase throughput in accessing the random access memory (<b>105</b>). For example, the memory controller interface (<b>107</b>) is configured to access one data unit of a predetermined size at a time; and the memory interface (<b>117</b>) is configured to access multiple data units, each of the same predetermined size, at a time.</p><p id="p-0056" num="0055">In one embodiment, the random access memory (<b>105</b>) and the integrated circuit device (<b>101</b>) are configured on different integrated circuit dies configured within a same integrated circuit package. Further, the random access memory (<b>105</b>) can be configured on one or more integrated circuit dies that allows parallel access of multiple data elements concurrently.</p><p id="p-0057" num="0056">In some implementations, the number of data elements of a vector or matrix that can be accessed in parallel over the connection (<b>119</b>) corresponds to the granularity of the deep learning accelerator (DLA) operating on vectors or matrices. For example, when the processing units (<b>111</b>) can operate on a number of vector/matrix elements in parallel, the connection (<b>119</b>) is configured to load or store the same number, or multiples of the number, of elements via the connection (<b>119</b>) in parallel.</p><p id="p-0058" num="0057">Optionally, the data access speed of the connection (<b>119</b>) can be configured based on the processing speed of the deep learning accelerator (DLA) (<b>103</b>). For example, after an amount of data and instructions have been loaded into the local memory (<b>115</b>), the control unit (<b>113</b>) can execute an instruction to operate on the data using the processing units (<b>111</b>) to generate output. Within the time period of processing to generate the output, the access bandwidth of the connection (<b>119</b>) allows the same amount of data and instructions to be loaded into the local memory (<b>115</b>) for the next operation and the same amount of output to be stored back to the random access memory (<b>105</b>). For example, while the control unit (<b>113</b>) is using a portion of the local memory (<b>115</b>) to process data and generate output, the memory interface (<b>117</b>) can offload the output of a prior operation into the random access memory (<b>105</b>) from, and load operand data and instructions into, another portion of the local memory (<b>115</b>). Thus, the utilization and performance of the deep learning accelerator (DLA) are not restricted or reduced by the bandwidth of the connection (<b>119</b>).</p><p id="p-0059" num="0058">The random access memory (<b>105</b>) can be used to store the model data of an artificial neural network (ANN) and to buffer input data for the artificial neural network (ANN). The model data does not change frequently. The model data can include the output generated by a compiler for the deep learning accelerator (DLA) to implement the artificial neural network (ANN). The model data typically includes matrices used in the description of the artificial neural network (ANN) and instructions generated for the deep learning accelerator (DLA) (<b>103</b>) to perform vector/matrix operations of the artificial neural network (ANN) based on vector/matrix operations of the granularity of the deep learning accelerator (DLA) (<b>103</b>). The instructions operate not only on the vector/matrix operations of the artificial neural network (ANN), but also on the input data for the artificial neural network (ANN).</p><p id="p-0060" num="0059">In one embodiment, when the input data is loaded or updated in the random access memory (<b>105</b>), the control unit (<b>113</b>) of the deep learning accelerator (DLA) (<b>103</b>) can automatically execute the instructions for the artificial neural network (ANN) to generate an output of the artificial neural network (ANN). The output is stored into a predefined region in the random access memory (<b>105</b>). The deep learning accelerator (DLA) (<b>103</b>) can execute the instructions without help from a central processing unit (CPU). Thus, communications for the coordination between the deep learning accelerator (DLA) (<b>103</b>) and a processor outside of the integrated circuit device (<b>101</b>) (e.g., a central processing unit (CPU)) can be reduced or eliminated.</p><p id="p-0061" num="0060">Optionally, the logic circuit of the deep learning accelerator (DLA) (<b>103</b>) can be implemented via complementary metal oxide semiconductor (CMOS). For example, the technique of CMOS under the array (CUA) of memory cells of the random access memory (<b>105</b>) can be used to implement the logic circuit of the deep learning accelerator (DLA) (<b>103</b>), including the processing units (<b>111</b>) and the control unit (<b>113</b>). Alternatively, the technique of CMOS in the array of memory cells of the random access memory (<b>105</b>) can be used to implement the logic circuit of the deep learning accelerator (DLA) (<b>103</b>).</p><p id="p-0062" num="0061">In some implementations, the deep learning accelerator (DLA) (<b>103</b>) and the random access memory (<b>105</b>) can be implemented on separate integrated circuit dies and connected using through-silicon vias (TSV) for increased data bandwidth between the deep learning accelerator (DLA) (<b>103</b>) and the random access memory (<b>105</b>). For example, the deep learning accelerator (DLA) (<b>103</b>) can be formed on an integrated circuit die of a field-programmable gate array (FPGA) or application specific integrated circuit (ASIC).</p><p id="p-0063" num="0062">Alternatively, the deep learning accelerator (DLA) (<b>103</b>) and the random access memory (<b>105</b>) can be configured in separate integrated circuit packages and connected via multiple point-to-point connections on a printed circuit board (PCB) for parallel communications and thus increased data transfer bandwidth.</p><p id="p-0064" num="0063">The random access memory (<b>105</b>) can be volatile memory or non-volatile memory, or a combination of volatile memory and non-volatile memory. Examples of non-volatile memory include flash memory, memory cells formed based on negative-and (NAND) logic gates, negative-or (NOR) logic gates, phase-change memory (PCM), magnetic memory (MRAM), resistive random-access memory, cross point storage and memory devices. A cross point memory device can use transistor-less memory elements, each of which has a memory cell and a selector that are stacked together as a column. Memory element columns are connected via two layers of wires running in perpendicular directions, where wires of one layer run in one direction in the layer that is located above the memory element columns, and wires of the other layer run in another direction and are located below the memory element columns. Each memory element can be individually selected at a cross point of one wire on each of the two layers. Cross point memory devices are fast and non-volatile and can be used as a unified memory pool for processing and storage. Further examples of non-volatile memory include read-only memory (ROM), programmable read-only memory (PROM), erasable programmable read-only memory (EPROM) and electronically erasable programmable read-only memory (EEPROM) memory, etc. Examples of volatile memory include dynamic random-access memory (DRAM) and static random-access memory (SRAM).</p><p id="p-0065" num="0064">For example, non-volatile memory can be configured to implement at least a portion of the random access memory (<b>105</b>). The non-volatile memory in the random access memory (<b>105</b>) can be used to store the model data of an artificial neural network (ANN). Thus, after the integrated circuit device (<b>101</b>) is powered off and restarts, it is not necessary to reload the model data of the artificial neural network (ANN) into the integrated circuit device (<b>101</b>). Further, the non-volatile memory can be programmable/rewritable. Thus, the model data of the artificial neural network (ANN) in the integrated circuit device (<b>101</b>) can be updated or replaced to implement an update artificial neural network (ANN), or another artificial neural network (ANN).</p><p id="p-0066" num="0065">The processing units (<b>111</b>) of the deep learning accelerator (DLA) (<b>103</b>) can include vector-vector units, matrix-vector units, and/or matrix-matrix units. Examples of units configured to perform for vector-vector operations, matrix-vector operations, and matrix-matrix operations are discussed below in connection with <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>4</b></figref>.</p><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a processing unit (<b>121</b>) configured to perform matrix-matrix operations according to one embodiment. For example, the matrix-matrix unit (<b>121</b>) of <figref idref="DRAWINGS">FIG. <b>2</b></figref> can be used as one of the processing units (<b>111</b>) of the deep learning accelerator (DLA) (<b>103</b>) of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0068" num="0067">In <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the matrix-matrix unit (<b>121</b>) includes multiple kernel buffers (<b>131</b> to <b>133</b>) and multiple the maps banks (<b>151</b> to <b>153</b>). Each of the maps banks (<b>151</b> to <b>153</b>) stores one vector of a matrix operand that has multiple vectors stored in the maps banks (<b>151</b> to <b>153</b>) respectively; and each of the kernel buffers (<b>131</b> to <b>133</b>) stores one vector of another matrix operand that has multiple vectors stored in the kernel buffers (<b>131</b> to <b>133</b>) respectively. The matrix-matrix unit (<b>121</b>) is configured to perform multiplication and accumulation operations on the elements of the two matrix operands, using multiple matrix-vector units (<b>141</b> to <b>143</b>) that operate in parallel.</p><p id="p-0069" num="0068">A crossbar (<b>123</b>) connects the maps banks (<b>151</b> to <b>153</b>) to the matrix-vector units (<b>141</b> to <b>143</b>). The same matrix operand stored in the maps bank (<b>151</b> to <b>153</b>) is provided via the crossbar (<b>123</b>) to each of the matrix-vector units (<b>141</b> to <b>143</b>); and the matrix-vector units (<b>141</b> to <b>143</b>) receives data elements from the maps banks (<b>151</b> to <b>153</b>) in parallel. Each of the kernel buffers (<b>131</b> to <b>133</b>) is connected to a respective one in the matrix-vector units (<b>141</b> to <b>143</b>) and provides a vector operand to the respective matrix-vector unit. The matrix-vector units (<b>141</b> to <b>143</b>) operate concurrently to compute the operation of the same matrix operand, stored in the maps banks (<b>151</b> to <b>153</b>) multiplied by the corresponding vectors stored in the kernel buffers (<b>131</b> to <b>133</b>). For example, the matrix-vector unit (<b>141</b>) performs the multiplication operation on the matrix operand stored in the maps banks (<b>151</b> to <b>153</b>) and the vector operand stored in the kernel buffer (<b>131</b>), while the matrix-vector unit (<b>143</b>) is concurrently performing the multiplication operation on the matrix operand stored in the maps banks (<b>151</b> to <b>153</b>) and the vector operand stored in the kernel buffer (<b>133</b>).</p><p id="p-0070" num="0069">Each of the matrix-vector units (<b>141</b> to <b>143</b>) in <figref idref="DRAWINGS">FIG. <b>2</b></figref> can be implemented in a way as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a processing unit (<b>141</b>) configured to perform matrix-vector operations according to one embodiment. For example, the matrix-vector unit (<b>141</b>) of <figref idref="DRAWINGS">FIG. <b>3</b></figref> can be used as any of the matrix-vector units in the matrix-matrix unit (<b>121</b>) of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0072" num="0071">In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, each of the maps banks (<b>151</b> to <b>153</b>) stores one vector of a matrix operand that has multiple vectors stored in the maps banks (<b>151</b> to <b>153</b>) respectively, in a way similar to the maps banks (<b>151</b> to <b>153</b>) of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The crossbar (<b>123</b>) in <figref idref="DRAWINGS">FIG. <b>3</b></figref> provides the vectors from the maps banks (<b>151</b>) to the vector-vector units (<b>161</b> to <b>163</b>) respectively. A same vector stored in the kernel buffer (<b>131</b>) is provided to the vector-vector units (<b>161</b> to <b>163</b>).</p><p id="p-0073" num="0072">The vector-vector units (<b>161</b> to <b>163</b>) operate concurrently to compute the operation of the corresponding vector operands, stored in the maps banks (<b>151</b> to <b>153</b>) respectively, multiplied by the same vector operand that is stored in the kernel buffer (<b>131</b>). For example, the vector-vector unit (<b>161</b>) performs the multiplication operation on the vector operand stored in the maps bank (<b>151</b>) and the vector operand stored in the kernel buffer (<b>131</b>), while the vector-vector unit (<b>163</b>) is concurrently performing the multiplication operation on the vector operand stored in the maps bank (<b>153</b>) and the vector operand stored in the kernel buffer (<b>131</b>).</p><p id="p-0074" num="0073">When the matrix-vector unit (<b>141</b>) of <figref idref="DRAWINGS">FIG. <b>3</b></figref> is implemented in a matrix-matrix unit (<b>121</b>) of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the matrix-vector unit (<b>141</b>) can use the maps banks (<b>151</b> to <b>153</b>), the crossbar (<b>123</b>) and the kernel buffer (<b>131</b>) of the matrix-matrix unit (<b>121</b>).</p><p id="p-0075" num="0074">Each of the vector-vector units (<b>161</b> to <b>163</b>) in <figref idref="DRAWINGS">FIG. <b>3</b></figref> can be implemented in a way as illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a processing unit (<b>161</b>) configured to perform vector-vector operations according to one embodiment. For example, the vector-vector unit (<b>161</b>) of <figref idref="DRAWINGS">FIG. <b>4</b></figref> can be used as any of the vector-vector units in the matrix-vector unit (<b>141</b>) of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0077" num="0076">In <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the vector-vector unit (<b>161</b>) has multiple multiply-accumulate (MAC) units (<b>171</b> to <b>173</b>). Each of the multiply-accumulate (MAC) units (<b>171</b> to <b>173</b>) can receive two numbers as operands, perform multiplication of the two numbers, and add the result of the multiplication to a sum maintained in the multiply-accumulate (MAC) unit.</p><p id="p-0078" num="0077">Each of the vector buffers (<b>181</b> and <b>183</b>) stores a list of numbers. A pair of numbers, each from one of the vector buffers (<b>181</b> and <b>183</b>), can be provided to each of the multiply-accumulate (MAC) units (<b>171</b> to <b>173</b>) as input. The multiply-accumulate (MAC) units (<b>171</b> to <b>173</b>) can receive multiple pairs of numbers from the vector buffers (<b>181</b> and <b>183</b>) in parallel and perform the multiply-accumulate (MAC) operations in parallel. The outputs from the multiply-accumulate (MAC) units (<b>171</b> to <b>173</b>) are stored into the shift register (<b>175</b>); and an accumulator (<b>177</b>) computes the sum of the results in the shift register (<b>175</b>).</p><p id="p-0079" num="0078">When the vector-vector unit (<b>161</b>) of <figref idref="DRAWINGS">FIG. <b>4</b></figref> is implemented in a matrix-vector unit (<b>141</b>) of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the vector-vector unit (<b>161</b>) can use a maps bank (e.g., <b>151</b> or <b>153</b>) as one vector buffer (<b>181</b>), and the kernel buffer (<b>131</b>) of the matrix-vector unit (<b>141</b>) as another vector buffer (<b>183</b>).</p><p id="p-0080" num="0079">The vector buffers (<b>181</b> and <b>183</b>) can have a same length to store the same number/count of data elements. The length can be equal to, or the multiple of, the count of multiply-accumulate (MAC) units (<b>171</b> to <b>173</b>) in the vector-vector unit (<b>161</b>). When the length of the vector buffers (<b>181</b> and <b>183</b>) is the multiple of the count of multiply-accumulate (MAC) units (<b>171</b> to <b>173</b>), a number of pairs of inputs, equal to the count of the multiply-accumulate (MAC) units (<b>171</b> to <b>173</b>), can be provided from the vector buffers (<b>181</b> and <b>183</b>) as inputs to the multiply-accumulate (MAC) units (<b>171</b> to <b>173</b>) in each iteration; and the vector buffers (<b>181</b> and <b>183</b>) feed their elements into the multiply-accumulate (MAC) units (<b>171</b> to <b>173</b>) through multiple iterations.</p><p id="p-0081" num="0080">In one embodiment, the communication bandwidth of the connection (<b>119</b>) between the deep learning accelerator (DLA) (<b>103</b>) and the random access memory (<b>105</b>) is sufficient for the matrix-matrix unit (<b>121</b>) to use portions of the random access memory (<b>105</b>) as the maps banks (<b>151</b> to <b>153</b>) and the kernel buffers (<b>131</b> to <b>133</b>).</p><p id="p-0082" num="0081">In another embodiment, the maps banks (<b>151</b> to <b>153</b>) and the kernel buffers (<b>131</b> to <b>133</b>) are implemented in a portion of the local memory (<b>115</b>) of the deep learning accelerator (DLA) (<b>103</b>). The communication bandwidth of the connection (<b>119</b>) between the deep learning accelerator (DLA) (<b>103</b>) and the random access memory (<b>105</b>) is sufficient to load, into another portion of the local memory (<b>115</b>), matrix operands of the next operation cycle of the matrix-matrix unit (<b>121</b>), while the matrix-matrix unit (<b>121</b>) is performing the computation in the current operation cycle using the maps banks (<b>151</b> to <b>153</b>) and the kernel buffers (<b>131</b> to <b>133</b>) implemented in a different portion of the local memory (<b>115</b>) of the deep learning accelerator (DLA) (<b>103</b>).</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a deep learning accelerator and random access memory configured to autonomously apply inputs to a trained artificial neural network according to one embodiment.</p><p id="p-0084" num="0083">An artificial neural network (ANN) (<b>201</b>) that has been trained through machine learning (e.g., deep learning) can be described in a standard format (e.g., open neural network exchange (ONNX)). The description of the trained ANN (<b>201</b>) in the standard format identifies the properties of the artificial neurons and their connectivity.</p><p id="p-0085" num="0084">In <figref idref="DRAWINGS">FIG. <b>5</b></figref>, a deep learning accelerator (DLA) compiler (<b>203</b>) converts trained ANN (<b>201</b>) by generating instructions (<b>205</b>) for a deep learning accelerator (DLA) (<b>103</b>) and matrices (<b>207</b>) corresponding to the properties of the artificial neurons and their connectivity. The instructions (<b>205</b>) and the matrices (<b>207</b>) generated by the DLA compiler (<b>203</b>) from the trained ANN (<b>201</b>) can be stored in random access memory (<b>105</b>) for the deep learning accelerator (DLA) (<b>103</b>).</p><p id="p-0086" num="0085">For example, the random access memory (<b>105</b>) and the deep learning accelerator (DLA) (<b>103</b>) can be connected via a high bandwidth connection (<b>119</b>) in a way as in the integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The autonomous computation of <figref idref="DRAWINGS">FIG. <b>5</b></figref> based on the instructions (<b>205</b>) and the matrices (<b>207</b>) can be implemented in the integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Alternatively, the random access memory (<b>105</b>) and the deep learning accelerator (DLA) (<b>103</b>) can be configured on a printed circuit board with multiple point to point serial buses running in parallel to implement the connection (<b>119</b>).</p><p id="p-0087" num="0086">In <figref idref="DRAWINGS">FIG. <b>5</b></figref>, after the results of the DLA compiler (<b>203</b>) are stored in the random access memory (<b>105</b>), the application of the trained ANN (<b>201</b>) to process an input (<b>211</b>) to the trained ANN (<b>201</b>) to generate the corresponding output (<b>213</b>) of the trained ANN (<b>201</b>) can be triggered by the presence of the input (<b>211</b>) in the random access memory (<b>105</b>), or another indication provided in the random access memory (<b>105</b>).</p><p id="p-0088" num="0087">In response, the deep learning accelerator (DLA) (<b>103</b>) executes the instructions (<b>205</b>) to combine the input (<b>211</b>) and the matrices (<b>207</b>). The execution of the instructions (<b>205</b>) can include the generation of maps matrices for the maps banks (<b>151</b> to <b>153</b>) of one or more matrix-matrix units (e.g., <b>121</b>) of the deep learning accelerator (DLA) (<b>103</b>).</p><p id="p-0089" num="0088">In some embodiments, the inputs to ANN (<b>211</b>) is in the form of an initial maps matrix. Portions of the initial maps matrix can be retrieved from the random access memory (<b>105</b>) as the matrix operand stored in the maps banks (<b>151</b> to <b>153</b>) of a matrix-matrix unit (<b>121</b>). Alternatively, the DLA instructions (<b>205</b>) also include instructions for the deep learning accelerator (DLA) (<b>103</b>) to generate the initial maps matrix from the input (<b>211</b>).</p><p id="p-0090" num="0089">According to the DLA instructions (<b>205</b>), the deep learning accelerator (DLA) (<b>103</b>) loads matrix operands into the kernel buffers (<b>131</b> to <b>133</b>) and maps banks (<b>151</b> to <b>153</b>) of its matrix-matrix unit (<b>121</b>). The matrix-matrix unit (<b>121</b>) performs the matrix computation on the matrix operands. For example, the DLA instructions (<b>205</b>) break down matrix computations of the trained ANN (<b>201</b>) according to the computation granularity of the deep learning accelerator (DLA) (<b>103</b>) (e.g., the sizes/dimensions of matrices that loaded as matrix operands in the matrix-matrix unit (<b>121</b>)) and applies the input feature maps to the kernel of a layer of artificial neurons to generate output as the input for the next layer of artificial neurons.</p><p id="p-0091" num="0090">Upon completion of the computation of the trained ANN (<b>201</b>) performed according to the instructions (<b>205</b>), the deep learning accelerator (DLA) (<b>103</b>) stores the output (<b>213</b>) of the ANN (<b>201</b>) at a pre-defined location in the random access memory (<b>105</b>), or at a location specified in an indication provided in the random access memory (<b>105</b>) to trigger the computation.</p><p id="p-0092" num="0091">When the technique of <figref idref="DRAWINGS">FIG. <b>5</b></figref> is implemented in the integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, an external device connected to the memory controller interface (<b>107</b>) can write the input (<b>211</b>) into the random access memory (<b>105</b>) and trigger the autonomous computation of applying the input (<b>211</b>) to the trained ANN (<b>201</b>) by the deep learning accelerator (DLA) (<b>103</b>). After a period of time, the output (<b>213</b>) is available in the random access memory (<b>105</b>); and the external device can read the output (<b>213</b>) via the memory controller interface (<b>107</b>) of the integrated circuit device (<b>101</b>).</p><p id="p-0093" num="0092">For example, a predefined location in the random access memory (<b>105</b>) can be configured to store an indication to trigger the autonomous execution of the instructions (<b>205</b>) by the deep learning accelerator (DLA) (<b>103</b>). The indication can optionally include a location of the input (<b>211</b>) within the random access memory (<b>105</b>). Thus, during the autonomous execution of the instructions (<b>205</b>) to process the input (<b>211</b>), the external device can retrieve the output generated during a previous run of the instructions (<b>205</b>), and/or store another set of input for the next run of the instructions (<b>205</b>).</p><p id="p-0094" num="0093">Optionally, a further predefined location in the random access memory (<b>105</b>) can be configured to store an indication of the progress status of the current run of the instructions (<b>205</b>). Further, the indication can include a prediction of the completion time of the current run of the instructions (<b>205</b>) (e.g., estimated based on a prior run of the instructions (<b>205</b>)). Thus, the external device can check the completion status at a suitable time window to retrieve the output (<b>213</b>).</p><p id="p-0095" num="0094">In some embodiments, the random access memory (<b>105</b>) is configured with sufficient capacity to store multiple sets of inputs (e.g., <b>211</b>) and outputs (e.g., <b>213</b>). Each set can be configured in a predetermined slot/area in the random access memory (<b>105</b>).</p><p id="p-0096" num="0095">The deep learning accelerator (DLA) (<b>103</b>) can execute the instructions (<b>205</b>) autonomously to generate the output (<b>213</b>) from the input (<b>211</b>) according to matrices (<b>207</b>) stored in the random access memory (<b>105</b>) without helps from a processor or device that is located outside of the integrated circuit device (<b>101</b>).</p><p id="p-0097" num="0096">In a method according to one embodiment, random access memory (<b>105</b>) of a computing device (e.g., <b>101</b>) can be accessed using an interface (<b>107</b>) of the computing device (e.g., <b>101</b>) to a memory controller. The computing device (e.g., <b>101</b>) can have processing units (e.g., <b>111</b>) configured to perform at least computations on matrix operands, such as a matrix operand stored in maps banks (<b>151</b> to <b>153</b>) and a matrix operand stored in kernel buffers (<b>131</b> to <b>133</b>).</p><p id="p-0098" num="0097">For example, the computing device (e.g., <b>101</b>) can be enclosed within an integrated circuit package; and a set of connections can connect the interface (<b>107</b>) to the memory controller that is located outside of the integrated circuit package.</p><p id="p-0099" num="0098">Instructions (<b>205</b>) executable by the processing units (e.g., <b>111</b>) can be written into the random access memory (<b>105</b>) through the interface (<b>107</b>).</p><p id="p-0100" num="0099">Matrices (<b>207</b>) of an artificial neural network (<b>201</b>) can be written into the random access memory (<b>105</b>) through the interface (<b>107</b>). The matrices (<b>207</b>) identify the property and/or state of the artificial neural network (<b>201</b>).</p><p id="p-0101" num="0100">Optionally, at least a portion of the random access memory (<b>105</b>) is non-volatile and configured to store the instructions (<b>205</b>) and the matrices (<b>07</b>) of the artificial neural network (<b>201</b>).</p><p id="p-0102" num="0101">First input (<b>211</b>) to the artificial neural network can be written into the random access memory (<b>105</b>) through the interface (<b>107</b>).</p><p id="p-0103" num="0102">An indication is provided in the random access memory (<b>105</b>) to cause the processing units (<b>111</b>) to start execution of the instructions (<b>205</b>). In response to the indication, the processing units (<b>111</b>) execute the instructions to combine the first input (<b>211</b>) with the matrices (<b>207</b>) of the artificial neural network (<b>201</b>) to generate first output (<b>213</b>) from the artificial neural network (<b>201</b>) and store the first output (<b>213</b>) in the random access memory (<b>105</b>).</p><p id="p-0104" num="0103">For example, the indication can be an address of the first input (<b>211</b>) in the random access memory (<b>105</b>); and the indication can be stored a predetermined location in the random access memory (<b>105</b>) to cause the initiation of the execution of the instructions (<b>205</b>) for the input (<b>211</b>) identified by the address. Optionally, the indication can also include an address for storing the output (<b>213</b>).</p><p id="p-0105" num="0104">The first output (<b>213</b>) can be read, through the interface (<b>107</b>), from the random access memory (<b>105</b>).</p><p id="p-0106" num="0105">For example, the computing device (e.g., <b>101</b>) can have a deep learning accelerator (<b>103</b>) formed on a first integrated circuit die and the random access memory (<b>105</b>) formed on one or more second integrated circuit dies. The connection (<b>119</b>) between the first integrated circuit die and the one or more second integrated circuit dies can include through-silicon vias (TSVs) to provide high bandwidth for memory access.</p><p id="p-0107" num="0106">For example, a description of the artificial neural network (<b>201</b>) can be converted using a compiler (<b>203</b>) into the instructions (<b>205</b>) and the matrices (<b>207</b>). The combination of the instructions (<b>205</b>) and the matrices (<b>207</b>) stored in the random access memory (<b>105</b>) and the deep learning accelerator (<b>103</b>) provides an autonomous implementation of the artificial neural network (<b>201</b>) that can automatically convert input (<b>211</b>) to the artificial neural network (<b>201</b>) to its output (<b>213</b>).</p><p id="p-0108" num="0107">For example, during a time period in which the deep learning accelerator (<b>103</b>) executes the instructions (<b>205</b>) to generate the first output (<b>213</b>) from the first input (<b>211</b>) according to the matrices (<b>207</b>) of the artificial neural network (<b>201</b>), the second input to artificial neural network (<b>201</b>) can be written into the random access memory (<b>105</b>) through the interface (<b>107</b>) at an alternative location. After the first output (<b>213</b>) is stored in the random access memory (<b>105</b>), an indication can be provided in the random access memory to cause the deep learning accelerator (<b>103</b>) to again start the execution of the instructions and generate second output from the second input.</p><p id="p-0109" num="0108">During the time period in which the deep learning accelerator (<b>103</b>) executes the instructions (<b>205</b>) to generate the second output from the second input according to the matrices (<b>207</b>) of the artificial neural network (<b>201</b>), the first output (<b>213</b>) can be read from the random access memory (<b>105</b>) through the interface (<b>107</b>); and a further input can be written into the random access memory to replace the first input (<b>211</b>), or written at a different location. The process can be repeated for a sequence of inputs.</p><p id="p-0110" num="0109">The deep learning accelerator (<b>103</b>) can include at least one matrix-matrix unit (<b>121</b>) that can execute an instruction on two matrix operands. The two matrix operands can be a first matrix and a second matrix. Each of two matrices has a plurality of vectors. The matrix-matrix unit (<b>121</b>) can include a plurality of matrix-vector units (<b>141</b> to <b>143</b>) configured to operate in parallel. Each of the matrix-vector units (<b>141</b> to <b>143</b>) are configured to operate, in parallel with other matrix-vector units, on the first matrix and one vector from second matrix. Further, each of the matrix-vector units (<b>141</b> to <b>143</b>) can have a plurality of vector-vector units (<b>161</b> to <b>163</b>) configured to operate in parallel. Each of the vector-vector units (<b>161</b> to <b>163</b>) is configured to operate, in parallel with other vector-vector units, on a vector from the first matrix and a common vector operand of the corresponding matrix-vector unit. Further, each of the vector-vector units (<b>161</b> to <b>163</b>) can have a plurality of multiply-accumulate units (<b>171</b> to <b>173</b>) configured to operate in parallel.</p><p id="p-0111" num="0110">The deep learning accelerator (<b>103</b>) can have local memory (<b>115</b>) and a control unit (<b>113</b>) in addition to the processing units (<b>111</b>). The control unit (<b>113</b>) can load instructions (<b>205</b>) and matrix operands (e.g., <b>207</b>) from the random access memory (<b>105</b>) for execution by the processing units (<b>111</b>). The local memory can cache matrix operands used by the matrix-matrix unit. The connection (<b>119</b>) can be configured with a bandwidth sufficient to load a set of matrix operands from the random access memory (<b>105</b>) to the local memory (<b>115</b>) during a time period in which the matrix-matrix unit performs operations on two other matrix operands. Further, during the time period, the bandwidth is sufficient to store a result, generated by the matrix-matrix unit (<b>121</b>) in a prior instruction execution, from the local memory (<b>115</b>) to the random access memory (<b>105</b>).</p><p id="p-0112" num="0111"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows an integrated circuit device (<b>101</b>) having a deep learning accelerator (<b>103</b>) and random access memory (<b>105</b>) configured with separate memory access connections according to one embodiment.</p><p id="p-0113" num="0112">For example, the deep learning accelerator (<b>103</b>), the random access memory (<b>105</b>), and the connection (<b>119</b>) of the integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>6</b></figref> can be configured in a way similar to those illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and/or <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0114" num="0113">The integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>6</b></figref> has two external interfaces (<b>106</b> and <b>107</b>) that can be used to access the random access memory (<b>105</b>) concurrently.</p><p id="p-0115" num="0114">For example, the random access memory (<b>105</b>) can have at least two portions that can be accessed concurrently and independently from reach other. Such portions can be configured on separate integrated circuit dies, or in separate planes or blocks of memory cells form on a same integrated circuit die. One portion is configured to store input (<b>211</b>) to the artificial neural network (ANN) (<b>201</b>); and another portion is configured to store output (<b>213</b>) from the artificial neural network (ANN) (<b>201</b>). The two external interfaces (<b>106</b> and <b>107</b>) configured with separate connections (<b>108</b> and <b>109</b>) to the portions for the input (<b>211</b>) and output (<b>213</b>) respectively. Thus, different devices external to the integrated circuit device (<b>101</b>) can use the separate external interfaces (<b>106</b> and <b>107</b>) of the integrated circuit device (<b>101</b>) to access its random access memory (<b>105</b>) concurrently.</p><p id="p-0116" num="0115">For example, a memory controller of a central processing unit (CPU) can be connected to the CPU memory interface (<b>107</b>) to read prior output from the artificial neural network (ANN) (<b>201</b>), while a direct memory access (DMA) controller can be connected to the DMA controller interface (<b>106</b>) to write next input to the artificial neural network (ANN) (<b>201</b>) concurrently.</p><p id="p-0117" num="0116">In one embodiment, the connections (<b>108</b> and <b>109</b>) have separate sets of buses or wires. Thus, the external interfaces (<b>106</b> and <b>107</b>) do not share buses or wires in accessing the different portions of the random access memory (<b>105</b>) for the input (<b>211</b>) and the output (<b>213</b>). Alternatively, an access controller is configured to use separate buffers for the interfaces (<b>106</b> and <b>107</b>) and use the high bandwidth connection (<b>119</b>) to transfer data between the random access memory (<b>105</b>) and the buffers for the interfaces (<b>106</b> and <b>107</b>) such that the interfaces (<b>106</b> and <b>107</b>) can service write and read requests concurrently. Since the bandwidth of the connection (<b>119</b>) is substantially higher than the bandwidth used by the connections (<b>108</b> and <b>109</b>) to the external interfaces (<b>106</b> and <b>107</b>) of the integrated circuit device (<b>101</b>), a small portion of the bandwidth can be allocated to the connections (<b>108</b> and <b>109</b>). For example, the interfaces (<b>106</b> and <b>107</b>) can be connected to the memory interface (<b>117</b>) of the deep learning accelerator (DLA) (<b>103</b>) to access the random access memory (<b>105</b>) via the connection (<b>119</b>).</p><p id="p-0118" num="0117">Optionally, the memory interface (<b>117</b>) of the deep learning accelerator (DLA) (<b>103</b>), the interface (<b>107</b>) to the memory controller of the central processing unit (CPU), and the interface (<b>106</b>) can be configured to access the random access memory (<b>105</b>) concurrently.</p><p id="p-0119" num="0118">For example, the random access memory (<b>105</b>) can be configured with at multiple sets of input/output memory. Each set can be selectively configured to service the memory interface (<b>117</b>) or service the external interfaces (<b>106</b> and <b>107</b>). When a set of input/output memory is selected to service the memory interface (<b>117</b>), the connection (<b>119</b>) allows the deep learning accelerator (DLA) (<b>103</b>) to access input (e.g., <b>211</b>) stored in the set and to store output (e.g., <b>213</b>) from the artificial neural network (ANN) (<b>201</b>) to the set. When a set of input/output memory is selected to service the external interfaces (<b>106</b> and <b>107</b>), the input (e.g., <b>211</b>) and the output (e.g., <b>213</b>) in different memory regions can be accessed concurrently by the separate external interfaces (<b>106</b> and <b>107</b>). While one set of input/output memory is allocated for the deep learning accelerator (DLA) (<b>103</b>) to process a set of input (e.g., <b>211</b>) and generate a corresponding set of output (e.g., <b>213</b>), one or more sets of input/output memory can be concurrently made accessible to the external interfaces (<b>106</b> and <b>107</b>).</p><p id="p-0120" num="0119">In a method according to one embodiment, an integrated circuit device (<b>101</b>) stores matrices (<b>207</b>) of an artificial neural network (<b>201</b>) and instructions (<b>205</b>). The instructions (<b>205</b>) are executable by at least one processing unit (<b>111</b>) enclosed within the integrated circuit device (<b>101</b>) to implement the artificial neural network (<b>201</b>) using the matrices (<b>207</b>). The integrated circuit device (<b>101</b>), or the alternatively packaged computing device on a printed circuit board, has random access memory.</p><p id="p-0121" num="0120">The random access memory (<b>105</b>) enclosed within the integrated circuit device (<b>101</b>) stores first input to the artificial neural network (<b>201</b>); and the at least one processing unit (<b>111</b>) is caused or used to execute the instructions (<b>205</b>) in generating first output from the first input stored in the random access memory (<b>105</b>). The first output is stored in the random access memory (<b>105</b>).</p><p id="p-0122" num="0121">Subsequently, the random access memory (<b>105</b>) enclosed within the integrated circuit device (<b>101</b>) further stores second input to the artificial neural network (<b>201</b>); and the at least one processing unit (<b>111</b>) is caused or used to execute the instructions (<b>205</b>) in generating second output from the second input stored in the random access memory (<b>105</b>).</p><p id="p-0123" num="0122">While the at least one processing unit (<b>111</b>) is executing the instructions (<b>205</b>) to generate the second output from the second input, an external device (e.g., a direct memory access controller) writes, through a first interface (<b>106</b>) of the integrated circuit device (<b>101</b>), third input to the artificial neural network (<b>201</b>) into the random access memory (<b>105</b>) in the integrated circuit device (<b>101</b>). At the same time, another external device (e.g., a central processing unit) reads the first output from the random access memory (<b>105</b>), through a second interface (<b>107</b>) of the integrated circuit device (<b>101</b>) and concurrently with the writing of the third input.</p><p id="p-0124" num="0123">For example, the writing of the third input can be performed through the first interface (<b>106</b>) connected to a direct memory access controller; and the reading of the first output can be performed through the second interface (<b>107</b>) connected to a central processing unit.</p><p id="p-0125" num="0124">For example, the integrated circuit device (<b>101</b>) can be enclosed within an integrated circuit package and has a deep learning accelerator (<b>103</b>) with processing units (<b>111</b>), a control unit (<b>113</b>) and local memory (<b>115</b>). The processing units (<b>111</b>) include at least a matrix-matrix unit (<b>121</b>) configured to execute an instruction having two matrix operands. The matrix-matrix unit (<b>121</b>) includes a plurality of matrix-vector units (<b>141</b> to <b>143</b>) configured to operate in parallel. Each of the matrix-vector units (<b>141</b> to <b>143</b>) includes a plurality of vector-vector units (<b>161</b> to <b>163</b>) configured to operate in parallel. Each of the vector-vector units (<b>161</b> to <b>163</b>) includes a plurality of multiply-accumulate units (<b>171</b> to <b>173</b>) configured to operate in parallel.</p><p id="p-0126" num="0125">For example, a compiler (<b>203</b>) can be used to convert a description of the artificial neural network (<b>201</b>) into the instructions (<b>205</b>) and the matrices (<b>207</b>) to implement the artificial neural network (<b>201</b>) using the deep learning accelerator (<b>103</b>).</p><p id="p-0127" num="0126">In one implementation, the reading of the first output through the second interface (<b>107</b>), the writing of the third input through the first interface (<b>106</b>), the deep learning accelerator (<b>103</b>) reading a portion of the second input, and the deep learning accelerator (<b>103</b>) writing a portion of the second output into the random access memory can be performed in parallel and concurrently.</p><p id="p-0128" num="0127">For example, the random access memory (<b>105</b>) can have multiple portions that are capable of being used concurrently and independent from each other. A first portion is configured to store the first output from the artificial neural network (<b>201</b>); a second portion configured to store third input to the artificial neural network (<b>201</b>); a third portion configured to store the second output from the artificial neural network (<b>201</b>); and a fourth portion configured to store the second input to the artificial neural network (<b>201</b>). When the third and fourth portions are being used by the deep learning accelerator (<b>103</b>) in execution of the instructions (<b>205</b>), the first interface and the second interface can be connected concurrently to the first portion and second portion respectively.</p><p id="p-0129" num="0128">For example, the different portions can be configured on separate integrated circuit dies (or planes or blocks) that can operate independent from each other in parallel. The first interface and the second interface can share no connections to the first portion and the second portion.</p><p id="p-0130" num="0129">The integrated circuit device (<b>101</b>) can be enclosed within a single integrated circuit package, with a first set of connectors configured to couple the first interface (<b>106</b>) to the direct memory access controller and a second set of connectors configured to couple the second interface (<b>107</b>) to the central processing unit.</p><p id="p-0131" num="0130">In some implementations, the deep learning accelerator (<b>103</b>) has a memory interface (<b>117</b>) with a high bandwidth connection (<b>119</b>) to the random access memory (<b>105</b>); and the first interface (<b>106</b>) and the second interface (<b>107</b>) are connected to the random access memory (<b>105</b>) via the memory interface (<b>117</b>) of the deep learning accelerator (<b>103</b>).</p><p id="p-0132" num="0131"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows an integrated circuit device (<b>101</b>) having a deep learning accelerator (<b>103</b>) and random access memory (<b>105</b>) with a camera interface (<b>221</b>) according to one embodiment.</p><p id="p-0133" num="0132">For example, the deep learning accelerator (<b>103</b>), the random access memory (<b>105</b>), and the connection (<b>119</b>) of the integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>7</b></figref> can be configured in a way similar to those illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, <figref idref="DRAWINGS">FIG. <b>5</b></figref>, and/or <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0134" num="0133">The integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>7</b></figref> has at least two external interfaces (<b>221</b> and <b>107</b>) that can be used concurrently, including a CPU memory interface (<b>107</b>) and a camera interface (<b>221</b>).</p><p id="p-0135" num="0134">The CPU memory interface (<b>107</b>) in the integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>7</b></figref> is configured to provide for a connection (<b>229</b>) to a memory controller (<b>227</b>) of a central processing unit (CPU) (<b>225</b>), similar to the CPU memory interface (<b>107</b>) in the integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>6</b></figref></p><p id="p-0136" num="0135">In <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the CPU memory interface (<b>107</b>) is implemented in the deep learning accelerator (<b>103</b>). For example, the logic circuit of the CPU memory interface (<b>107</b>) can be formed on the integrated circuit die of the deep learning accelerator (<b>103</b>); and the CPU memory interface (<b>107</b>) accesses the random access memory (<b>105</b>) using the memory interface (<b>117</b>) of the deep learning accelerator (<b>103</b>).</p><p id="p-0137" num="0136">Alternatively, the CPU memory interface (<b>107</b>) can be separate from the deep learning accelerator (<b>103</b>) and be implemented in a way as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the CPU memory interface (<b>107</b>) can be configured to access the random access memory (<b>105</b>) using a connection (<b>109</b>) that is separate from the connection (<b>119</b>) between the deep learning accelerator (<b>103</b>) and the random access memory (<b>105</b>). The integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>6</b></figref> can also be modified to have the logic circuit of the CPU memory interface (<b>107</b>) and/or the DMA controller interface (<b>106</b>) implemented in the deep learning accelerator (DLA) (<b>103</b>), in a way similar to the CPU memory interface (<b>107</b>) being implemented in the deep learning accelerator (<b>103</b>) of <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0138" num="0137">The camera interface (<b>221</b>) in the integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>7</b></figref> is configured to provide a connection (<b>228</b>) to one or more devices containing or employing image sensors or image generators, such as a camera (<b>223</b>), radar, lidar, medical imaging equipment, etc.</p><p id="p-0139" num="0138">For example, the connection (<b>228</b>) to the camera (<b>223</b>) can be implemented in accordance with a standard for a mobile industry processor interface (MIPI) protocol, including a MIPI camera serial interface (CSI) protocol. The connection (<b>228</b>) can be used to control the imaging operations of the camera (<b>223</b>) (or another image generator) and to obtain image data from the camera (<b>223</b>) (or another image generator) as input (<b>211</b>) to the artificial neural network (<b>201</b>). In one embodiment, the connection (<b>228</b>) is a serial bus in accordance with a MIPI CSI-2 standard that supports high-performance applications, including 1080p, 4K, 8K and beyond video, and high-resolution photography.</p><p id="p-0140" num="0139">The camera interface (<b>221</b>) can be used to control the operations of the camera (<b>223</b>) in generating image data. For example, the camera interface (<b>221</b>) can be used to send commands to the camera (<b>223</b>) to adjust the resolution of image data provided by the camera (<b>223</b>). For example, the commands sent via the camera interface (<b>221</b>) to the camera (<b>223</b>) can adjust the frame rate and/or exposure time of image data provided by the camera (<b>223</b>). For example, the deep learning accelerator (DLA) (<b>103</b>) can use the camera interface (<b>221</b>) to start or stop the operations of the camera (<b>223</b>) in capturing and/or transferring images.</p><p id="p-0141" num="0140">In some implementations, the camera interface (<b>221</b>) can be used to optionally issue commands to digitally zoom in an area of an interest and thus reduce the amount of data to be transferred over the connection (<b>228</b>) and the amount of computation to be performed by the integrated circuit device (<b>101</b>) on the image data received from the camera (<b>223</b>).</p><p id="p-0142" num="0141">In some implementations, the camera interface (<b>221</b>) can be used to optionally issue commands to adjust the view point and/or field of view of the camera (<b>223</b>).</p><p id="p-0143" num="0142"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an implementation in which the camera interface (<b>221</b>) is configured in the deep learning accelerator (<b>103</b>). For example, at least a portion of the logic circuit of the camera interface (<b>221</b>) is formed on the integrated circuit die of the deep learning accelerator (<b>103</b>); and the camera interface (<b>107</b>) can access the random access memory (<b>105</b>) using the memory interface (<b>117</b>) of the deep learning accelerator (<b>103</b>).</p><p id="p-0144" num="0143">For example, the camera interface (<b>221</b>) can receive image from the camera (<b>223</b>) through the connection (<b>228</b>) and buffers the image data in the random access memory (<b>105</b>) as input (<b>211</b>) to the artificial neural network (<b>201</b>). Once the integrated circuit device (<b>101</b>) obtains a set of image data as the input (<b>211</b>), the deep learning accelerator (<b>103</b>) can execute the instructions (<b>205</b>) to generate the output (<b>213</b>), in a way similar to the device of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, <figref idref="DRAWINGS">FIG. <b>5</b></figref>, and/or <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0145" num="0144">The instructions (<b>205</b>) can optionally include instructions for the control unit (<b>113</b>) to operate the camera interface (<b>221</b>) and obtain image data, from the camera (<b>223</b>) via the connection (<b>228</b>) through the camera interface (<b>221</b>), as the input (<b>211</b>) to the artificial neural network (<b>201</b>).</p><p id="p-0146" num="0145">In <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the camera interface (<b>221</b>) is configured in the deep learning accelerator (<b>103</b>). Alternatively, the camera interface (<b>221</b>) can be separate from the deep learning accelerator (<b>103</b>) and be configured to access the random access memory (<b>105</b>) using a connection that is separate from the connection (<b>119</b>) between the deep learning accelerator (<b>103</b>) and the random access memory (<b>105</b>), in a way similar to the DMA controller interface (<b>106</b>) being separate from the deep learning accelerator (<b>103</b>) in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0147" num="0146">The integrated circuit devices (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>6</b></figref> and <figref idref="DRAWINGS">FIG. <b>7</b></figref> can be modified to have three external interfaces: a CPU memory interface (<b>107</b>), a DMA controller interface (<b>106</b>), and a camera interface (<b>221</b>). Optionally, the camera interface (<b>221</b>) can include a direct memory access controller to load image data into the random access memory (<b>105</b>) from the camera (<b>223</b>), e.g., in parallel with the central processing unit (<b>225</b>) retrieving output (e.g., <b>213</b>) from the random access memory (<b>105</b>). The camera interface (<b>221</b>) and the DMA controller interface (<b>106</b>) can optionally share a portion of logic circuit for supporting the operations of direct memory access controllers.</p><p id="p-0148" num="0147">In a method according to one embodiment, an integrated circuit device (<b>101</b>) stores matrices (<b>207</b>) of an artificial neural network (<b>201</b>) and instructions (<b>205</b>). The instructions (<b>205</b>) are executable by at least one processing unit (<b>111</b>) enclosed within the integrated circuit device (<b>101</b>) to implement, using the matrices (<b>207</b>), the computations of the artificial neural network (<b>201</b>). The integrated circuit device (<b>101</b>) has a first interface (<b>107</b>) configured to be connected to a memory controller (<b>227</b>) and a second interface (<b>221</b>) configured to be connected to an image generator, such as a camera (<b>223</b>), radar, lidar, ultrasound scanner, or medical imaging equipment.</p><p id="p-0149" num="0148">For example, the second interface (<b>221</b>) implements a camera command interface protocol, and/or a mobile industry processor interface (MIPI) protocol. For example, the second interface (<b>221</b>) is configured to be connected to a camera (<b>223</b>) via a serial bus connection (<b>228</b>) in accordance with a mobile industry processor interface (MIPI) camera serial interface (CSI) protocol.</p><p id="p-0150" num="0149">The integrated circuit device (<b>101</b>) communicates, via the second interface (<b>221</b>), with the image generator (e.g., camera <b>223</b>) to receive image data as input (<b>211</b>) to the artificial neural network (<b>201</b>).</p><p id="p-0151" num="0150">The integrated circuit device (<b>101</b>) executes the instructions (<b>205</b>) to generate output (<b>213</b>) from the artificial neural network (<b>201</b>) according to the input (<b>211</b>).</p><p id="p-0152" num="0151">The integrated circuit device (<b>101</b>) stores, in random access memory (<b>105</b>) that is enclosed within the integrated circuit device (<b>101</b>), the output (<b>213</b>) from the artificial neural network (<b>201</b>).</p><p id="p-0153" num="0152">The integrated circuit device (<b>101</b>) provides, via the first interface (<b>107</b>), the output (<b>213</b>) to a central processing unit (<b>225</b>) that is in control of the memory controller (<b>227</b>).</p><p id="p-0154" num="0153">For example, the integrated circuit device (<b>101</b>) can buffer, into the random access memory (<b>105</b>) via the second interface (<b>221</b>) and as input to the artificial neural network (<b>201</b>), a next set of image data from the image generator (e.g., camera <b>223</b>), while simultaneously providing, from the random access memory (<b>105</b>) via the first interface (<b>107</b>) and concurrently with the buffering, output previously generated from the artificial neural network (<b>201</b>) according to a prior set of image data from the image generator (e.g., camera <b>223</b>).</p><p id="p-0155" num="0154">For example, the integrated circuit device (<b>101</b>) can be enclosed within an integrated circuit package. The integrated circuit device (<b>101</b>) has a deep learning accelerator (<b>103</b>) with processing units (<b>111</b>), a control unit (<b>113</b>) and local memory (<b>115</b>). The processing units (<b>111</b>) include at least a matrix-matrix unit (<b>121</b>) configured to execute an instruction having two matrix operands; the matrix-matrix unit (<b>121</b>) includes a plurality of matrix-vector units (<b>141</b> to <b>143</b>) configured to operate in parallel; each of the matrix-vector units includes a plurality of vector-vector units (<b>161</b> to <b>163</b>) configured to operate in parallel; and each of the vector-vector units includes a plurality of multiply-accumulate units (<b>171</b> to <b>173</b>) configured to operate in parallel.</p><p id="p-0156" num="0155">For example, the integrated circuit device (<b>101</b>) can transmit, via the second interface (<b>221</b>), a command to the image generator (e.g., camera <b>223</b>), where the command instructs the image generator (e.g., camera <b>223</b>) to adjust resolution or frame rate of image data generated by the image generator (e.g., camera <b>223</b>).</p><p id="p-0157" num="0156">For example, the integrated circuit device (<b>101</b>) can transmit, via the second interface (<b>221</b>), another command to the image generator (e.g., camera <b>223</b>) to instruct the image generator (e.g., camera <b>223</b>) to adjust an area of interest, a point of view, or a field of view of image data generated by the image generator (e.g., camera <b>223</b>).</p><p id="p-0158" num="0157"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a system on a chip according to one embodiment.</p><p id="p-0159" num="0158">The system of <figref idref="DRAWINGS">FIG. <b>8</b></figref> is packaged in an integrated circuit device (<b>101</b>). The integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>8</b></figref> has a deep learning accelerator (<b>103</b>), random access memory (<b>105</b>), and a connection (<b>119</b>) between the deep learning accelerator (<b>103</b>) and random access memory (<b>105</b>), which can be configured a way similar to those illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, <figref idref="DRAWINGS">FIG. <b>5</b></figref>, <figref idref="DRAWINGS">FIG. <b>6</b></figref>, and/or <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0160" num="0159">The integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>8</b></figref> further includes a central processing unit (CPU) (<b>225</b>). The central processing unit (CPU) (<b>225</b>) can have one or more processing cores. When the central processing unit (CPU) (<b>225</b>) has more than one processing cores, multiple processing cores of the central processing unit (CPU) (<b>225</b>) can operate independent from each other and operate in parallel.</p><p id="p-0161" num="0160">The central processing unit (<b>225</b>) has a memory controller (<b>227</b>). A connection (<b>239</b>) is provided in the integrated circuit device (<b>101</b>) between the memory controller (<b>227</b>) and the random access memory (<b>105</b>). For example, the integrated circuit package of the device (<b>101</b>) can include a substrate to support the integrated circuit dies enclosed therein. The substrate can provide connections (<b>239</b>, <b>238</b>, <b>119</b>) among components within the integrated circuit device (<b>101</b>), such as the central processing unit (<b>225</b>), the random access memory (<b>105</b>), the deep learning accelerator (<b>103</b>), and/or the input/output interface (<b>236</b>). For example, an interposer can be affixed to the substrate to provide the connections (e.g., <b>239</b>, <b>238</b>, <b>119</b>) and/or connections to the connectors (e.g., pins or solder balls) of the integrated circuit device (<b>101</b>).</p><p id="p-0162" num="0161">A portion of the random access memory (<b>105</b>) can be reserved for use by the central processing unit (<b>225</b>) and thus not used by the deep learning accelerator (<b>103</b>). Such a portion can be used to store the instructions of an application (<b>215</b>) and/or an operating system that are programmed to be executed by the central processing unit (<b>225</b>). Logical memory allocated and used during the execution of the application (<b>215</b>) can be mapped, by the memory controller (<b>227</b>) and/or an operating system executed by the central processing unit (<b>225</b>), to the physical memory in the portion of the random access memory (<b>105</b>) reserved for the central processing unit (<b>225</b>).</p><p id="p-0163" num="0162">Another portion of the random access memory (<b>105</b>) can be shared between the central processing unit (<b>225</b>) and the deep learning accelerator (<b>103</b>). The deep learning accelerator (<b>103</b>) can write the output (<b>213</b>) from the artificial neural network (<b>201</b>) to the shared portion; and the central processing unit (<b>225</b>) can read the output (<b>213</b>) from the shared portion as input to the application (<b>215</b>) running/executed in the central processing unit (<b>225</b>). For example, the shared portion configured for the output (<b>213</b>) can be read only for the central processing unit (<b>225</b>) and write only for the deep learning accelerator (<b>103</b>).</p><p id="p-0164" num="0163">A further portion of the random access memory (<b>105</b>) can be used to buffer input (<b>211</b>) to the artificial neural network (<b>201</b>) that is represented and/or implemented by the DLA instructions (<b>205</b>) and the matrices (<b>207</b>).</p><p id="p-0165" num="0164">The integrated circuit device (<b>101</b>) has an input/output interface (<b>236</b>) that can be used to receive sensor data from one or more sensors, such as an image sensor, a microphone, etc. The received sensor data can be stored into the buffer portion of the random access memory (<b>105</b>) as the input (<b>211</b>) to the artificial neural network (<b>201</b>).</p><p id="p-0166" num="0165">For example, the input/output interface (<b>236</b>) can be an interface to a peripheral bus, such as a universal serial bus (USB), a serial advanced technology attachment (SATA) bus, a peripheral component interconnect express (PCIe) bus, a small computer system interface (SCSI) bus, a fibre channel, a serial attached SCSI (SAS) bus, or any other bus.</p><p id="p-0167" num="0166">For example, the input/output interface (<b>236</b>) can be a camera interface (<b>221</b>), e.g., as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref> and configured to receive image data from a camera or an image generator.</p><p id="p-0168" num="0167">For example, the input/output interface (<b>236</b>) can be a direct memory access controller interface (<b>106</b>), e.g., as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref> and configured to receive sensor data from a direct memory access controller.</p><p id="p-0169" num="0168">The central processing unit (<b>225</b>) and/or the deep learning accelerator (<b>103</b>) can use the input/output interface (<b>236</b>) to control the operation of a sensor configured on the bus and to receive sensor data from the sensor.</p><p id="p-0170" num="0169">Additional external devices can be connected to the bus accessible to the input/output interface (<b>236</b>). Such devices can include a communication device configured to communicate over a wired or wireless computer connection, such as a wired or wireless local area network, a wireless personal area network, a wireless wide area network, a cellular communications network, and/or the internet. Such devices can also include a display device, a monitor, a touch screen, a speaker, a keyboard, a mouse, a touch pad, and/or a track ball, etc. to present a user interface of the application (<b>215</b>). Through the input/output interface (<b>236</b>), the application (<b>215</b>) executed in the central processing unit (<b>225</b>) can access the devices connected on the bus.</p><p id="p-0171" num="0170">The input/output interface (<b>236</b>) has a connection (<b>238</b>) to the input portion of the random access memory (<b>105</b>). The connection (<b>238</b>) can be used to load input (<b>211</b>) into the random access memory (<b>105</b>) (e.g., from a sensor device) in parallel with the central processing unit (<b>225</b>) accessing the random access memory (<b>105</b>) in reading the output (<b>213</b>) and/or executing the application (<b>215</b>).</p><p id="p-0172" num="0171">The central processing unit (<b>225</b>) and the deep learning accelerator (<b>103</b>) can be formed on separate integrated circuit dies. For example, the deep learning accelerator (<b>103</b>) can be formed on an integrated circuit die stacked above one or more integrated circuit dies of the random access memory (<b>105</b>); and the central processing unit (<b>225</b>) can be formed on a further integrated circuit die stacked below the one or more integrated circuit dies of the random access memory (<b>105</b>). Optionally, a portion of the random access memory (<b>105</b>) reserved for the central processing unit (<b>225</b>) can be configured on a further integrated circuit die stacked under the central processing unit (<b>225</b>). The integrated circuit dies can be connected using through-silicon vias to provide the connections (<b>119</b> and <b>239</b>).</p><p id="p-0173" num="0172">Alternatively, when the integrated circuit dies of the central processing unit (<b>225</b>) and the deep learning accelerator (<b>103</b>) are smaller in size than the integrated circuit die of the random access memory (<b>105</b>), both the central processing unit (<b>225</b>) and the deep learning accelerator (<b>103</b>) can be stacked above (or under) the integrated circuit die of the random access memory (<b>105</b>).</p><p id="p-0174" num="0173">Alternatively, an integrated circuit die is configured with wires to provide connections; and the integrated circuit die with the wires is used as a substrate to support integrated circuit dies of the central processing unit (<b>225</b>), the deep learning accelerator (<b>103</b>), and the random access memory (<b>105</b>). Through-silicon vias (TSVs) from the substrate integrated circuit die to the other integrated circuit dies stacked on it (and/or underneath it) can be used to provide the connections (<b>119</b>, <b>239</b>, and/or <b>238</b>). Optionally, the signal processing circuit of the input/output interface (<b>236</b>) is configured in the substrate integrated circuit die.</p><p id="p-0175" num="0174">In some implementations, the random access memory (<b>105</b>) includes non-volatile memory configured to store the matrices (<b>207</b>) of the artificial neural network (<b>201</b>) and the instructions (<b>205</b>) for the deep learning accelerator (<b>103</b>). For example, such non-volatile memory can be configured in an integrated circuit die stacked above the deep learning accelerator (<b>103</b>).</p><p id="p-0176" num="0175">Alternatively, the deep learning accelerator (<b>103</b>) and the central processing unit (<b>225</b>) can be configured on a same integrated circuit die. The deep learning accelerator (<b>103</b>) and the central processing unit (<b>225</b>) can optionally share circuit and connections for the memory interface (<b>117</b>) and the memory controller (<b>227</b>). Further, the deep learning accelerator (<b>103</b>) and the central processing unit (<b>225</b>) can share a portion logic circuit configured for loading instructions from the random access memory (<b>105</b>). In some implementations, the matrix/vector processing units (<b>111</b>) of the deep learning accelerator (<b>103</b>) are configured as matrix/vector execution units of the central processing unit (<b>225</b>).</p><p id="p-0177" num="0176">For example, the central processing unit (<b>225</b>) can have logic circuit configured to load instructions (e.g., <b>205</b>, and/or application <b>215</b>) from the random access memory (<b>105</b>) for execution. Matrix/vector instructions are dispatched to processing units (<b>111</b>); and other instructions are dispatched to the arithmetic-logic units (ALUs) of the central processing unit (<b>225</b>) for execution. The processing units (<b>111</b>) can have additional circuits to load matrix/vector operands from the random access memory (<b>105</b>) and/or store results to the random access memory (<b>105</b>). Thus, the deep learning accelerator (<b>103</b>) and the central processing unit (<b>225</b>) can cooperate with each other in executing the instructions (<b>205</b>) of the artificial neural network (<b>201</b>).</p><p id="p-0178" num="0177"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a method implemented in an integrated circuit device according to one embodiment. For example, the method of <figref idref="DRAWINGS">FIG. <b>9</b></figref> can be implemented in the integrated circuit device (<b>101</b>) of <figref idref="DRAWINGS">FIG. <b>8</b></figref>. However, the method of <figref idref="DRAWINGS">FIG. <b>9</b></figref> can also be implemented in an alternatively packaged computing device similar to that illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref> but configured on a printed circuit board.</p><p id="p-0179" num="0178">In the method of <figref idref="DRAWINGS">FIG. <b>9</b></figref>, a deep learning accelerator (<b>103</b>) and a central processing unit (<b>225</b>) can operate substantially independent from each other. The deep learning accelerator (<b>103</b>) generates inference results from sensor data according to an artificial neural network; and the central processing unit (<b>225</b>) runs an application that may use inference results from the artificial neural network. The inference results can be updated periodically based on the incoming stream of sensor data; and the application running the central processing unit (<b>225</b>) can use the inferences results generated from previously received sensor data.</p><p id="p-0180" num="0179">At block <b>301</b>, the integrated circuit device (<b>101</b>) stores, in its random access memory (<b>105</b>), matrices (<b>207</b>) of an artificial neural network (<b>201</b>) and first instructions (<b>205</b>) that are executable by at least one processing unit (<b>111</b>) enclosed within the integrated circuit device (<b>101</b>) to implement the artificial neural network (<b>201</b>) using the matrices (<b>207</b>).</p><p id="p-0181" num="0180">At block <b>303</b>, through an interface (<b>236</b>) to a bus that is external to the integrated circuit device (<b>101</b>), sensor data is loaded into the random access memory (<b>105</b>) as input (<b>211</b>) to the artificial neural network (<b>201</b>).</p><p id="p-0182" num="0181">At block <b>305</b>, the at least one processing unit (<b>111</b>) executes the first instructions (<b>205</b>) to generate output (<b>213</b>) from the artificial neural network (<b>201</b>) based on the input (<b>211</b>).</p><p id="p-0183" num="0182">At block <b>307</b>, the integrated circuit device (<b>101</b>) stores, into the random access memory (<b>105</b>), the output (<b>213</b>) from the artificial neural network (<b>201</b>).</p><p id="p-0184" num="0183">Operations <b>303</b> to <b>307</b> can be repeated for multiple sets of input (<b>211</b>) corresponding to sensor data generated in different time windows. After a predetermined number of sets of output (<b>213</b>) are stored in the random access memory (<b>105</b>), the oldest can be overwritten to store the newest set.</p><p id="p-0185" num="0184">In some implementations, loading the next set of sensor data into the random access memory (<b>105</b>) and/or storing the output generated from the previously set of sensor data into the random access memory (<b>105</b>) can be performed in parallel with executing the first instructions (<b>205</b>) to generate output from the current set of sensor data.</p><p id="p-0186" num="0185">At block <b>311</b>, the integrated circuit device (<b>101</b>) stores, in its random access memory (<b>105</b>), second instructions of at least one application (<b>215</b>) programmed for execution by a central processing unit (<b>225</b>) enclosed within the integrated circuit device (<b>101</b>).</p><p id="p-0187" num="0186">At block <b>313</b>, the central processing unit (<b>225</b>) executes the second instructions of the at least one application (<b>215</b>) that uses output (<b>213</b>) from the artificial neural network (<b>201</b>).</p><p id="p-0188" num="0187">At block <b>315</b>, the central processing unit (<b>225</b>) reads, from the random access memory (<b>105</b>), output (<b>213</b>) from the artificial neural network (<b>201</b>).</p><p id="p-0189" num="0188">At block <b>317</b>, the central processing unit (<b>225</b>) processes the output (<b>213</b>) in execution of the at least one application (<b>215</b>).</p><p id="p-0190" num="0189">Operations <b>313</b> to <b>317</b> can be repeated for multiple sets of output (<b>213</b>) that are inference results corresponding to sensor data generated in different time windows.</p><p id="p-0191" num="0190">Optionally, the central processing unit (<b>225</b>) can provide an indication to cause the deep learning accelerator (<b>103</b>) to start or stop generation of new sets of output (<b>213</b>) from the artificial neural network (<b>201</b>).</p><p id="p-0192" num="0191">Optionally, during execution of the first instructions (<b>205</b>), the deep learning accelerator (<b>103</b>) can call a routine to be executed in the central processing unit (<b>225</b>). For example, such a routine can be provided in an operating system executed by the central processing unit (<b>225</b>), or in the application (<b>215</b>) or another application. For example, such a routine can provide a service that does not involve two matrix/vector operands and/or that is suitable for execution in the arithmetic-logic unit (ALU) of the central processing unit (<b>225</b>). Signal lines can be configured between the deep learning accelerator (<b>103</b>) and the central processing unit (<b>225</b>) to facilitate such calls.</p><p id="p-0193" num="0192">In some implementations, the integrated circuit device (<b>101</b>) has multiple stacked integrated circuit dies that are connected using through-silicon vias (TSVs).</p><p id="p-0194" num="0193">For example, the deep learning accelerator (<b>103</b>) can be configured on a first integrated circuit die having the at least one processing unit (<b>111</b>), a control unit (<b>113</b>), local memory (<b>115</b>) configured to store matrix operands for the processing unit(s) (<b>111</b>), and a memory interface (<b>117</b>) to the random access memory (<b>105</b>). The random access memory (<b>105</b>) can be configured on at least one second integrated circuit die.</p><p id="p-0195" num="0194">The central processing unit (<b>225</b>) can be configured on a third integrated circuit die. The at least one second integrated circuit die of the random access memory (<b>105</b>) can be stacked between the first integrated circuit die and the second integrated circuit die. The memory interface (<b>117</b>) of the deep learning accelerator (<b>103</b>) and the memory controller (<b>227</b>) of the central processing unit (<b>225</b>) can be connected to the at least one second integrated circuit die of the random access memory (<b>105</b>) by using separate sets of through-silicon vias (TSVs).</p><p id="p-0196" num="0195">Alternatively, the central processing unit (<b>225</b>) can be configured on the first integrated circuit of the deep learning accelerator (<b>103</b>); and the memory controller (<b>227</b>) of the central processing unit (<b>225</b>) and the memory interface (<b>117</b>) of the deep learning accelerator (<b>103</b>) can share an interface to the random access memory (<b>105</b>) and/or share a logic circuit to load instructions (e.g., <b>205</b>, and application <b>215</b>) from the random access memory (<b>105</b>).</p><p id="p-0197" num="0196">In some implementations, a fourth integrated circuit die is configured with wires. The deep learning accelerator (<b>103</b>) in the first integrated circuit die, the random access memory (<b>105</b>) in the at least second integrated circuit die, and/or the central processing unit (<b>225</b>) in the third integrated circuit die (or in the first integrated circuit die) can be connected using the wires in the fourth integrated circuit die and using through-silicon vias (TSVs) from the fourth integrated circuit die to the other integrated circuit dies. Separate sets of through-silicon vias (TSVs) can be connected from the wires in the fourth integrated circuit die and respective integrated circuit dies of the central processing unit (<b>225</b>), the deep learning accelerator (<b>103</b>), and the random access memory (<b>105</b>).</p><p id="p-0198" num="0197">Optionally, a circuit of the interface (<b>236</b>) of the integrated circuit device (<b>101</b>) is also configured on the fourth integrated circuit die to process signals to or from the bus. For example, the bus can be implemented in accordance with a protocol of universal serial bus (USB), serial advanced technology attachment (SATA) bus, or peripheral component interconnect express (PCIe) for a connection to one or more sensor devices, such as a camera, a microphone, an image generator, etc.</p><p id="p-0199" num="0198">The present disclosure includes methods and apparatuses which perform the methods described above, including data processing systems which perform these methods, and computer readable media containing instructions which when executed on data processing systems cause the systems to perform these methods.</p><p id="p-0200" num="0199">A typical data processing system may include an inter-connect (e.g., bus and system core logic), which interconnects a microprocessor(s) and memory. The microprocessor is typically coupled to cache memory.</p><p id="p-0201" num="0200">The inter-connect interconnects the microprocessor(s) and the memory together and also interconnects them to input/output (I/O) device(s) via I/O controller(s). I/O devices may include a display device and/or peripheral devices, such as mice, keyboards, modems, network interfaces, printers, scanners, video cameras and other devices known in the art. In one embodiment, when the data processing system is a server system, some of the I/O devices, such as printers, scanners, mice, and/or keyboards, are optional.</p><p id="p-0202" num="0201">The inter-connect can include one or more buses connected to one another through various bridges, controllers and/or adapters. In one embodiment the I/O controllers include a universal serial bus (USB) adapter for controlling USB peripherals, and/or an IEEE-1394 bus adapter for controlling IEEE-1394 peripherals.</p><p id="p-0203" num="0202">The memory may include one or more of: read only memory (ROM), volatile random access memory (RAM), and non-volatile memory, such as hard drive, flash memory, etc.</p><p id="p-0204" num="0203">Volatile RAM is typically implemented as dynamic RAM (DRAM) which requires power continually in order to refresh or maintain the data in the memory. Non-volatile memory is typically a magnetic hard drive, a magnetic optical drive, an optical drive (e.g., a DVD RAM), or other type of memory system which maintains data even after power is removed from the system. The non-volatile memory may also be a random access memory.</p><p id="p-0205" num="0204">The non-volatile memory can be a local device coupled directly to the rest of the components in the data processing system. A non-volatile memory that is remote from the system, such as a network storage device coupled to the data processing system through a network interface such as a modem or ethernet interface, can also be used.</p><p id="p-0206" num="0205">In the present disclosure, some functions and operations are described as being performed by or caused by software code to simplify description. However, such expressions are also used to specify that the functions result from execution of the code/instructions by a processor, such as a microprocessor.</p><p id="p-0207" num="0206">Alternatively, or in combination, the functions and operations as described here can be implemented using special purpose circuitry, with or without software instructions, such as using application-specific integrated circuit (ASIC) or field-programmable gate array (FPGA). Embodiments can be implemented using hardwired circuitry without software instructions, or in combination with software instructions. Thus, the techniques are limited neither to any specific combination of hardware circuitry and software, nor to any particular source for the instructions executed by the data processing system.</p><p id="p-0208" num="0207">While one embodiment can be implemented in fully functioning computers and computer systems, various embodiments are capable of being distributed as a computing product in a variety of forms and are capable of being applied regardless of the particular type of machine or computer-readable media used to actually effect the distribution.</p><p id="p-0209" num="0208">At least some aspects disclosed can be embodied, at least in part, in software. That is, the techniques may be carried out in a computer system or other data processing system in response to its processor, such as a microprocessor, executing sequences of instructions contained in a memory, such as ROM, volatile RAM, non-volatile memory, cache or a remote storage device.</p><p id="p-0210" num="0209">Routines executed to implement the embodiments may be implemented as part of an operating system or a specific application, component, program, object, module or sequence of instructions referred to as &#x201c;computer programs.&#x201d; The computer programs typically include one or more instructions set at various times in various memory and storage devices in a computer, and that, when read and executed by one or more processors in a computer, cause the computer to perform operations necessary to execute elements involving the various aspects.</p><p id="p-0211" num="0210">A machine readable medium can be used to store software and data which when executed by a data processing system causes the system to perform various methods. The executable software and data may be stored in various places including for example ROM, volatile RAM, non-volatile memory and/or cache. Portions of this software and/or data may be stored in any one of these storage devices. Further, the data and instructions can be obtained from centralized servers or peer to peer networks. Different portions of the data and instructions can be obtained from different centralized servers and/or peer to peer networks at different times and in different communication sessions or in a same communication session. The data and instructions can be obtained in entirety prior to the execution of the applications. Alternatively, portions of the data and instructions can be obtained dynamically, just in time, when needed for execution. Thus, it is not required that the data and instructions be on a machine readable medium in entirety at a particular instance of time.</p><p id="p-0212" num="0211">Examples of computer-readable media include but are not limited to non-transitory, recordable and non-recordable type media such as volatile and non-volatile memory devices, read only memory (ROM), random access memory (RAM), flash memory devices, floppy and other removable disks, magnetic disk storage media, optical storage media (e.g., compact disk read-only memory (CD ROM), digital versatile disks (DVDs), etc.), among others. The computer-readable media may store the instructions.</p><p id="p-0213" num="0212">The instructions may also be embodied in digital and analog communication links for electrical, optical, acoustical or other forms of propagated signals, such as carrier waves, infrared signals, digital signals, etc. However, propagated signals, such as carrier waves, infrared signals, digital signals, etc. are not tangible machine readable medium and are not configured to store instructions.</p><p id="p-0214" num="0213">In general, a machine readable medium includes any mechanism that provides (i.e., stores and/or transmits) information in a form accessible by a machine (e.g., a computer, network device, personal digital assistant, manufacturing tool, any device with a set of one or more processors, etc.).</p><p id="p-0215" num="0214">In various embodiments, hardwired circuitry may be used in combination with software instructions to implement the techniques. Thus, the techniques are neither limited to any specific combination of hardware circuitry and software nor to any particular source for the instructions executed by the data processing system.</p><p id="p-0216" num="0215">The above description and drawings are illustrative and are not to be construed as limiting. Numerous specific details are described to provide a thorough understanding. However, in certain instances, well known or conventional details are not described in order to avoid obscuring the description. References to one or an embodiment in the present disclosure are not necessarily references to the same embodiment; and, such references mean at least one.</p><p id="p-0217" num="0216">In the foregoing specification, the disclosure has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A device, comprising:<claim-text>a first integrated circuit die having:<claim-text>a local memory;</claim-text><claim-text>a control unit; and</claim-text><claim-text>at least one processing unit operable to execute instructions having matrix operands;</claim-text></claim-text><claim-text>a second integrated circuit die having random access memory;</claim-text><claim-text>a third integrated circuit die having a central processing unit; and</claim-text><claim-text>an integrated circuit package configured to enclose the first integrated circuit die, the second integrated circuit die, and the third integrated circuit die.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the random access memory is configured to store:<claim-text>first data representative of matrices of an artificial neural network;</claim-text><claim-text>second data representative of the instructions executable by the at least one processing unit to implement computations of the artificial neural network; and</claim-text><claim-text>third data representative of an application programmed with instructions executable by the central processing unit.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>an interface coupled to the central processing unit and the random access memory and operable on a computer bus that is external to the device.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the at least one processing unit in the first integrated circuit die is connected to the random access memory in the second integrated circuit die by through-silicon vias.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the central processing unit in the third integrated circuit die is connected to the random access memory in the second integrated circuit die by through-silicon vias.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the second integrated circuit die is configured between the first integrated circuit die and the third integrated circuit die.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>an interposer configured to couple the central processing unit to the at least one processing unit, or the random access memory, or both.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the at least one processing unit is configured to store an output from the artificial neural network in the random access memory as an input to the application.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the central processing unit includes at least one arithmetic-logic unit.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the at least one processing unit includes a matrix-matrix unit configured to operate on two matrix operands of an instruction;<claim-text>wherein the matrix-matrix unit includes a plurality of matrix-vector units configured to operate in parallel;</claim-text><claim-text>wherein each of the plurality of matrix-vector units includes a plurality of vector-vector units configured to operate in parallel; and</claim-text><claim-text>wherein each of the plurality of vector-vector units includes a plurality of multiply-accumulate units configured to operate in parallel.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A method, comprising:<claim-text>storing, in random access memory of a device having a first integrated circuit die having at least one processing unit operable to execute first instructions having matrix operands, a second integrated circuit die having the random access memory, and a third integrated circuit die having a central processing unit:<claim-text>first data representative of matrices of an artificial neural network;</claim-text><claim-text>second data representative of the first instructions; and</claim-text><claim-text>third data representative of an application programmed with second instructions executable by the central processing unit;</claim-text></claim-text><claim-text>executing, by the at least one processing unit, the first instructions to implement computations of the artificial neural network to generate an output; and</claim-text><claim-text>executing, by the central processing unit, the second instructions to process the output as an input to the application.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the first integrated circuit die further includes a local memory and a control unit configured to control execution of the first instructions by the at least one processing unit; and wherein the device includes an integrated circuit package configured to enclose the first integrated circuit die, the second integrated circuit die, and the third integrated circuit die.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:<claim-text>connecting, by an interface of the device, the central processing unit and the random access memory for operations on a computer bus that is external to the device.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:<claim-text>coupling, by an interposer of the device, the central processing unit to the at least one processing unit, or the random access memory, or both.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:<claim-text>storing, by the at least one processing unit the output from the artificial neural network in the random access memory as the input to the application.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the central processing unit includes at least one arithmetic-logic unit.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the at least one processing unit includes a matrix-matrix unit configured to operate on two matrix operands of an instruction;<claim-text>wherein the matrix-matrix unit includes a plurality of matrix-vector units configured to operate in parallel;</claim-text><claim-text>wherein each of the plurality of matrix-vector units includes a plurality of vector-vector units configured to operate in parallel; and</claim-text><claim-text>wherein each of the plurality of vector-vector units includes a plurality of multiply-accumulate units configured to operate in parallel.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. An apparatus, comprising:<claim-text>a peripheral bus; and</claim-text><claim-text>a system on a chip, having:<claim-text>an interface connected to the peripheral bus;</claim-text><claim-text>a first integrated circuit die having at least one processing unit operable to execute instructions having matrix operands;</claim-text><claim-text>a second integrated circuit die having random access memory;</claim-text><claim-text>a third integrated circuit die having a central processing unit; and</claim-text><claim-text>an integrated circuit package configured to enclose the first integrated circuit die, the second integrated circuit die, and the third integrated circuit die.</claim-text></claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The apparatus of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the random access memory is configured to store:<claim-text>first data representative of matrices of an artificial neural network;</claim-text><claim-text>second data representative of the instructions executable by the at least one processing unit to implement computations of the artificial neural network; and</claim-text><claim-text>third data representative of an application programmed with instructions executable by the central processing unit.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The apparatus of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the system on a chip has no interface to a memory bus external to the system on a chip.</claim-text></claim></claims></us-patent-application>