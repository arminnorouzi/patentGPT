<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006928A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006928</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17745502</doc-number><date>20220516</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>745</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>12</main-group><subgroup>18</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>61</main-group><subgroup>2503</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>745</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>12</main-group><subgroup>18</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>61</main-group><subgroup>2503</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEMS AND METHODS FOR NETWORK PACKET TRANSLATION</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63217880</doc-number><date>20210702</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Arista Networks, Inc.</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Borgione</last-name><first-name>Sebastiano</first-name><address><city>Bellevue</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Peach</last-name><first-name>John S G</first-name><address><city>Berkshire</city><country>GB</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method for modifying packet data of a packet in a network device, where the method includes receiving, at an ingress pipeline of the network device, the packet, performing a lookup, in a packet translation ruleset, to compare the packet data to rule criteria of a rule in the packet translation ruleset, making a first determination that at least a portion of the packet data matches the rule criteria, and based on the first determination, adding a packet translation tag to the packet, where the packet translation tag includes a rule action, copying the packet translation tag and a portion of the packet to obtain a copied packet, modifying the copied packet as described in the rule action to obtain a modified copied packet, and forwarding the modified copied packet to an egress pipeline.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="197.87mm" wi="158.75mm" file="US20230006928A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="234.19mm" wi="169.25mm" file="US20230006928A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="246.21mm" wi="169.25mm" file="US20230006928A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="230.29mm" wi="178.73mm" file="US20230006928A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="170.69mm" wi="169.25mm" file="US20230006928A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="246.89mm" wi="172.38mm" file="US20230006928A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="170.69mm" wi="169.25mm" file="US20230006928A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="180.93mm" wi="147.40mm" file="US20230006928A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="201.59mm" wi="140.97mm" file="US20230006928A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="192.96mm" wi="169.25mm" file="US20230006928A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="246.21mm" wi="169.25mm" file="US20230006928A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="212.09mm" wi="105.75mm" file="US20230006928A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="240.54mm" wi="169.25mm" file="US20230006928A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="240.96mm" wi="169.25mm" file="US20230006928A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">In some network environments, there may be a limited ability to implement certain protocols and policies. Accordingly, there may be difficulty in achieving a desired security practice, network layout, and/or data flow. In such scenarios, it may be advantageous to introduce components that allow for the necessary protocols and policies in order to achieve the desired network.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0002" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0003" num="0002"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a diagram of various networks, in accordance with one or more embodiments.</p><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a diagram of various networks with devices therein, in accordance with one or more embodiments.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a diagram of a network device, in accordance with one or more embodiments.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a diagram of packet translation ruleset, in accordance with one or more embodiments.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example of a packet translation ruleset, in accordance with one or more embodiments.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a diagram of a packet translation queue, in accordance with one or more embodiments.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref> shows a flowchart of a method of diverting a network packet, in accordance with one or more embodiments.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>7</b>B</figref> shows a flowchart of a method of copying and modifying a network packet, in accordance with one or more embodiments.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows an example, in accordance with one or more embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows an example, in accordance with one or more embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows an example, in accordance with one or more embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows an example, in accordance with one or more embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows an example, in accordance with one or more embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DETAILED DESCRIPTION</heading><p id="p-0016" num="0015">While standards exist to facilitate the organized flow of network traffic through networks (and the devices therein), such standards also constrain the abilities of network administrators to implement certain protocols and policies. Such standards may prevent the efficient merging of existing networks&#x2014;often requiring reconfiguration of one network to match the configuration of the other. An intermediate network, managed by a third party, may disallow the direct routing of certain types of protocols (e.g., multicast over the Internet). Further, existing standards may provide too much transparency of an internal network to a device outside the network&#x2014;exposing the internal network to potential security breaches.</p><p id="p-0017" num="0016">To solve some of these problems, one or more embodiments disclosed herein provide for a packet translation module that can copy network packets and arbitrarily modify their headers (e.g., internet protocol (IP) addresses, media access control (MAC) addresses, protocols, ports, etc.). Such modifications may ensure that the packet is compatible with an intermediate network, destination network, destination device, or is otherwise modified to provide additional functionalities&#x2014;without any adherence to traditional network routing rules. Further, the systems and methods disclosed herein provide for modifying network traffic (e.g., using a &#x201c;stateless&#x201d; protocol) such that existing systems may route the modified traffic normally (e.g., without identification that the network traffic was modified, requiring no additional configuration of existing systems).</p><p id="p-0018" num="0017">For example, a packet may be changed from unicast to multicast or multicast to unicast. An arbitrary egress port may be chosen for the packet to exit a network device (including the same port from which the packet was received). In addition to the modification of ordinary data packets, &#x2018;protocol&#x2019; packets (that would normally be handled specifically) may be modified as though ordinary data packets. A packet may be copied any number of times&#x2014;including packets of any variety (e.g., a unicast packet may be copied that, traditionally, would not be copied). Copies of packets may be modified uniquely from other copies (e.g., one copy of a unicast packet may be modified to change the port and be set to multicast, a second copy may be modified to change the destination address, and a third copy may be modified to change the source address and the destination address). That is, any number of copies of a packet may be generated and any number of modifications may be made to each of those copied packets.</p><p id="p-0019" num="0018">Considering the vast capabilities of a packet translation module, there are countless scenarios where such a device may be utilized. As a first example, consider a scenario where a network administrator is tasked with virtually merging two or more existing local area networks (LANs) over the Internet (e.g., via a site-to-site virtual private network (VPN)). It is likely that such networks&#x2014;independently developed and maintained&#x2014;will have conflicting policies, overlapping IP addresses, and/or incompatible security features. Often, the solution is to reconfigure each LAN to become compatible with the other. Such changes take time (costing money) and result in other issues arising within the modified network (e.g., those caused by poorly configured client devices, hard-coded devices, incompatible network devices, etc.).</p><p id="p-0020" num="0019">However, using the systems and methods disclosed herein, a network administrator could implement a packet translation module within each network. The packet translation modules could then be configured to allow for seamless communication between devices across each LAN&#x2014;while only making minor modifications to existing network devices (or no modifications at all).</p><p id="p-0021" num="0020">As a second example, consider a scenario where multiple source devices may be serving content to a destination device (or multiple destination devices). Those destination devices may be able to discern that the content is provided from multiple sources and identify the network in which the source devices reside. Such information may be used by a bad actor to disrupt communications between networks (e.g., attacking one of those sources), allow for the easy identification of additional source devices (e.g., if the known sources follow an identifiable scheme), and generally gain unwanted insight into the interworking of the source devices' network.</p><p id="p-0022" num="0021">To prevent this, using the systems and methods disclosed herein, a network administrator could implement a packet translation module through which all source device content is routed and modified to provide a single external address (different from the address of any source device). Such routing and modifications may be specifically configured to maximize obscurity of the source devices' network and thereby reduce the insight offered to any potential attacker.</p><p id="p-0023" num="0022">Further, by providing a unified external address, source redundancy and load balancing may be achieved without inconvenience to the destination devices. As an example, redundant source devices may be employed within the network to provide a failover mechanism to maintain content integrity. Upon the failure of one or more source device(s), backup source device(s) would begin and continue to serve content to the same packet translation module (as served by the failed source device). Further, destination devices would be un-impacted by the change in source devices as the content from the backup source device is routed through the same packet translation module (from the same external address).</p><p id="p-0024" num="0023">As a third example, consider a scenario where a provider needs to send their content to multiple recipients (e.g., a television studio sending content to multiple broadcasters, a corporate announcement being streamed to multiple company locations, etc.). However, the internal addressing scheme of one or more recipient networks requires a unique configuration in order for the content to be received properly.</p><p id="p-0025" num="0024">In such an instance, a packet translation module may be implemented within the provider's network to ensure a compatible stream of content is provided to each location (where each stream is modified specific to the needs of each recipient network). Alternatively, each recipient network (needing special configuration) may employ their own packet translation module to ensure the provider's content conforms to their internal network. As another alternative, the provider and recipient networks may each employ a packet translation module to perform some part of the needed translation (e.g., the provider may use a packet translation module to provide a more generically compatible stream, and each recipient may employ a packet translation module to perform minor additional configurations as needed).</p><p id="p-0026" num="0025">As a fourth example, consider a scenario similar to the third example, but with multiple providers needing to send content to a single recipient (e.g., multiple television networks providing their respective content to a single cable television provider). In such an instance, the cable television provider may employ one or more packet translation module(s) to modify the content&#x2014;incoming from each of the providers&#x2014;to match a single internal scheme of the cable television provider's network. Further, if the recipient utilizes different locations/facilities for receiving the content (with different networks deployed therein), each recipient network may include a packet translation module to modify the content for the particular needs of those networks.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a diagram of various networks, in accordance with one or more embodiments. Specifically, one or more source local area network(s) (e.g., source local area network A (<b>100</b>A), source local area network N (<b>100</b>N)) may be connected to one or more destination local area network(s) (e.g., destination local area network A (<b>104</b>A), destination local area network N (<b>104</b>N)) via an intermediate network (<b>102</b>). Each of these components is described below.</p><p id="p-0028" num="0027">In one or more embodiments, a network is a collection of connected network devices (not shown) that allow for the communication of data from one network device to other computing device(s) (not shown), or the sharing of resources among network devices. Non-limiting examples of a network include a local area network (LAN), a wide area network (WAN) (e.g., the Internet), a mobile network, or any other type of network that allows for the communication of data and sharing of resources among network devices and/or computing devices connected to the network. One of ordinary skill in the art, having the benefit of this detailed description, would appreciate that a network is a collection of connected computing devices that enables communication between those devices.</p><p id="p-0029" num="0028">In one or more embodiments, a source local area network (e.g., source local area network A (<b>100</b>A), source local area network N (<b>100</b>N)) is a network. Further, a source local area network (<b>100</b>A, <b>100</b>N) may be a local area network which includes one or more source device(s) (not shown). In one or more embodiments, a destination local area network (e.g., destination local area network A (<b>104</b>A), destination local area network N (<b>104</b>N)) is a network. A destination local area network (<b>104</b>A, <b>104</b>N) may be a local area network which includes one or more destination device(s) (not shown). Although the number of destination local area networks (<b>104</b>A, <b>104</b>N) and source local area networks (<b>100</b>A, <b>100</b>N) are shown to be the same, there can be any different number of either type, independent of each other.</p><p id="p-0030" num="0029">In one or more embodiments, an intermediate network (e.g., intermediate network (<b>102</b>)) is a network. An intermediate network (<b>102</b>) may be a local area network or a wide area network (e.g., the Internet) and connects one or more source local area network(s) (<b>100</b>A, <b>100</b>N) to one or more destination local area network(s) (<b>104</b>A, <b>104</b>N). Communication between networks (i.e., the devices in those networks) may be accomplished via certain network devices (not shown) that may communicate inside their own network and further be configured to communicate with devices in other networks (i.e., edge network devices). One of ordinary skill in the art, having the benefit of this detailed description, would appreciate the intercommunication of network devices between logically disparate networks.</p><p id="p-0031" num="0030">While <figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a specific configuration of a system, other configurations may be used without departing from the scope. Accordingly, embodiments disclosed herein should not be limited to the configuration of devices and/or components shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a diagram of various networks with devices therein, in accordance with one or more embodiments. A source local area network (e.g., source local area network (<b>200</b>)) may include a source device (e.g., source device (<b>230</b>)) and a source network device (e.g., source network device (<b>210</b>)). Similarly, a destination local area network (e.g., destination local area network (<b>204</b>)) may include a destination device (e.g., destination device (<b>232</b>)) and a destination network device (e.g., destination network device (<b>212</b>)). Further, the source local area network (<b>200</b>) and destination local area network (<b>204</b>) may each be connected to an intermediate network (e.g., intermediate network (<b>202</b>)). Similarly named components, shown in this figure, have all of the same properties and functionalities as described in previous figures. Accordingly, only additional components, properties, and functionalities will be described below.</p><p id="p-0033" num="0032">In one or more embodiments, a computing device includes one or more processor(s), memory, persistent storage, input and output device(s), physical interface(s) (e.g., network ports, device peripherals), light emitting diodes (LEDs), optical transceivers, network chips, or any combination thereof. The persistent storage (and/or memory) may store computer instructions (e.g., computer code) which, when executed by the processor(s) of the computing device, cause the computing device to perform one or more processes specified in the computer instructions.</p><p id="p-0034" num="0033">Non-limiting examples of a computing device include a network device (e.g., switch, router, multi-layer switch, etc.), a server (e.g., a blade-server in a blade-server chassis, a rack server in a rack, etc.), a personal computer (e.g., desktop, laptop, tablet, smart phone, personal digital assistant), and/or any other type of computing device with the aforementioned capabilities.</p><p id="p-0035" num="0034">In one or more embodiments, a network device is a type of computing device that executes computer instructions related to the operation of a network. In one or more embodiments, a network device may include a packet translation module. Additional details regarding the network device and packet translation module may be found in the description of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0036" num="0035">In one or more embodiments, a source device (e.g., source device (<b>230</b>)) and a destination device (e.g., destination device (<b>232</b>)) are computing devices. A source device (<b>230</b>) may be configured (i.e., execute computer instructions) to generate a network packet (i.e., &#x201c;packet&#x201d;) that is intended to be received by a destination device (<b>232</b>). Although <figref idref="DRAWINGS">FIG. <b>2</b></figref> shows the source device (<b>230</b>) and destination device (<b>232</b>) as standalone devices within each local area network (<b>200</b>, <b>204</b>), the source network device (<b>210</b>) may be the source device (<b>230</b>), and the destination network device (<b>212</b>) may be the destination device (<b>232</b>).</p><p id="p-0037" num="0036">In one or more embodiments, a source network device (e.g., source network device (<b>210</b>)) is a network device and may include a source packet translation module (e.g., source packet translation module (<b>220</b>)). In one or more embodiments, a destination network device (e.g., destination network device (<b>212</b>)) is a network device and may include a destination packet translation module (e.g., destination packet translation module (<b>222</b>)). Additional details regarding the network device and packet translation module may be found in the description of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0038" num="0037">While <figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a specific configuration of a system, other configurations may be used without departing from the scope. Accordingly, embodiments disclosed herein should not be limited to the configuration of devices and/or components shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a diagram of a network device, in accordance with one or more embodiments. A network device (e.g., network device (<b>300</b>)) may be connected to a source device (e.g., source device (<b>330</b>)) and a destination device (e.g., destination device (<b>332</b>)) either directly or through any number of computing devices (not shown) and networks (not shown) in between. Further, a network device (<b>300</b>) may include an ingress pipeline (e.g., ingress pipeline (<b>340</b>)), and egress pipeline (e.g., egress pipeline (<b>342</b>)), and a packet translation module (e.g., packet translation module (<b>320</b>)). Similarly named components, shown in this figure, have all of the same properties and functionalities as described in previous figures. Accordingly, only additional components, properties, and functionalities will be described below.</p><p id="p-0040" num="0039">In one or more embodiments, an ingress pipeline (e.g., ingress pipeline (<b>340</b>)) is a data structure and queue (or collection of queues), stored in the memory of the network device (<b>300</b>), for buffering packets incoming to the network device (<b>300</b>). Further the ingress pipeline (<b>340</b>) may also be considered a software component (in addition to a queue) that includes a collection of computer instructions associated with managing the flow of the incoming packets. The ingress pipeline (<b>340</b>) may implement one or more policies of the network device (<b>300</b>) by executing specific computer code that dictates the handling of incoming packets (e.g., priority, where the packets are forwarded, etc.).</p><p id="p-0041" num="0040">In one or more embodiments, an egress pipeline (e.g., egress pipeline (<b>342</b>)) is a data structure and queue (or collection of queues), stored in the memory of the network device (<b>300</b>), for buffering packets outgoing from the network device (<b>300</b>). Further the egress pipeline (<b>342</b>) may also be considered a software component (in addition to a queue) that includes a collection of computer instructions associated with managing the flow of the outgoing packets. The egress pipeline (<b>342</b>) may implement one or more policies of the network device (<b>300</b>) by executing specific computer code that dictates the handling of outgoing packets (e.g., priority, where the packets are forwarded, etc.).</p><p id="p-0042" num="0041">In one or more embodiments, a packet translation module (e.g., packet translation module (<b>320</b>)) is a collection of software and data components that collectively perform the functions of packet address translation in the network device (<b>300</b>). A packet translation module (<b>320</b>) may include a packet translation diverter (<b>322</b>), a packet translation queue (<b>370</b>), a packet translation agent (<b>324</b>), and a packet translation ruleset (<b>360</b>). Each of these components is described below.</p><p id="p-0043" num="0042">In one or more embodiments, a packet translation diverter (e.g., packet translation diverter (<b>322</b>)) is software, executing on the network device to redirect incoming packets that are identified to match the rule criteria of at least one rule of the packet translation ruleset (<b>360</b>). In one or more embodiments, the packet translation diverter (<b>322</b>) may be integrated into the operations of the ingress pipeline (<b>340</b>). As a non-limiting example, the computer code that includes the instructions to perform the operations of the packet translation diverter (<b>322</b>) may be executed (by a processor of the network device (<b>300</b>)) concurrently and/or within one or more operation(s) of the ingress pipeline (<b>340</b>). Accordingly, the packet translation diverter (<b>322</b>) may be logically considered a part (i.e., subprocess) of the ingress pipeline (<b>340</b>) and/or part of the packet translation module (<b>320</b>).</p><p id="p-0044" num="0043">In one or more embodiments, a packet translation queue (e.g., packet translation queue (<b>370</b>)) is a data structure and queue, stored in the memory/storage of the network device (<b>300</b>), for buffering one or more packet(s) (not shown) diverted to the packet translation queue (<b>370</b>) by the packet translation diverter (<b>322</b>). Additional details regarding the packet translation queue (<b>370</b>) may be found in the description of <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0045" num="0044">In one or more embodiments, a packet translation agent (e.g., packet translation agent (<b>324</b>)) is software, executing on the network device to perform one or more operation(s) specified in the rule action(s) of a rule (of the packet translation ruleset (<b>360</b>)). In one or more embodiments, the packet translation agent (<b>324</b>) may be integrated into the operations of the egress pipeline (<b>342</b>). As a non-limiting example, the computer code that includes the instructions to perform the operations of the packet translation agent (<b>324</b>) may be executed (by a processor of the network device (<b>300</b>)) concurrently and/or within one or more operation(s) of the egress pipeline (<b>342</b>). Accordingly, the packet translation agent (<b>324</b>) may be logically considered a part (i.e., subprocess) of the egress pipeline (<b>342</b>) and/or part of the packet translation module (<b>320</b>).</p><p id="p-0046" num="0045">In one or more embodiments, a packet translation ruleset (e.g., packet translation ruleset (<b>360</b>)) is a data structure, stored in the memory/storage of the network device (<b>300</b>), that includes one or more rule(s) (not shown). Additional details regarding the packet translation ruleset (<b>360</b>) may be found in the description of <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0047" num="0046">Although a packet translation module (<b>320</b>) is shown as having distinct software and data components, the software as stored and executed (by the network device (<b>300</b>)) may not be divided into such individually identifiable components. As a non-limiting example, the packet translation diverter (<b>322</b>) and packet translation agent (<b>324</b>) may be a single software instance that performs the operations of both components and holds the packet translation queue (<b>370</b>) and packet translation ruleset (<b>360</b>) in memory. One of ordinary skill in the art, having the benefit of this detailed description, would appreciate that various portions of software instances may be divided and/or combined and separately labeled to aid in the understanding of the function of the software.</p><p id="p-0048" num="0047">In one or more embodiments, the components of the network device (<b>300</b>) may be implemented as hardware, software, data structures, or any combination thereof. Further, software (and &#x201c;software components&#x201d;) may be computer instructions stored in generic memory and executed on a general-purpose processor, may be stored and executed on configurable hardware (e.g., a device that includes configurable logic gates, a field programmable gate array (FPGA), etc.), and/or may be stored and executed on specially designed hardware (e.g., an application specific integrated circuit (ASIC)). As a non-limiting example, the packet translation module (<b>320</b>) (with the ingress pipeline (<b>340</b>) and egress pipeline (<b>342</b>)) may be deployed on a single FPGA that is configured to perform the operations as described above. As an another non-limiting example, the ingress pipeline (<b>340</b>) may be combined with the packet translation diverter (<b>322</b>) and executing as software (on a generic processor of the network device (<b>300</b>)), the egress pipeline (<b>342</b>) may be executing on an ASIC, while the packet translation queue (<b>370</b>) may be manipulated on a dedicated memory device of the network device (<b>300</b>). One of ordinary skill in the art, having the benefit of this detailed description, would appreciate that any combination of hardware and software may be utilized to employ the components of the network device (<b>300</b>).</p><p id="p-0049" num="0048">While <figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a specific configuration of a system, other configurations may be used without departing from the scope. Accordingly, embodiments disclosed herein should not be limited to the configuration of devices and/or components shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a diagram of packet translation ruleset, in accordance with one or more embodiments. In one or more embodiments, a packet translation ruleset (packet translation ruleset (<b>460</b>)) is a data structure, stored in the memory/storage of the network device (<b>300</b>), that includes one or more rule(s) (e.g., rule A (<b>462</b>A), rule N (<b>462</b>N)), described below.</p><p id="p-0051" num="0050">In one or more embodiments, a rule (e.g., rule A (<b>462</b>A), rule N (<b>462</b>N)) is a data structure that includes data relevant to the applicability and execution of a network policy. A rule (<b>462</b>A, <b>462</b>N) may be created, partially or wholly, by a user (not shown) of the network device and/or the rule (<b>462</b>A, <b>462</b>N) may be created, partially or wholly, by software of the network device. Further, a rule (<b>462</b>A, <b>462</b>N) may include a rule identifier (e.g., rule identifier (<b>464</b>)), rule criteria (e.g., rule criteria (<b>466</b>)), one or more rule action(s) (e.g., rule action(s) (<b>468</b>)), and a counter (e.g., counter (<b>469</b>)). Each of these components is described below.</p><p id="p-0052" num="0051">In one or more embodiments, a rule identifier (e.g., rule identifier (<b>464</b>)) is an alphanumeric expression associated with a rule (<b>462</b>A, <b>462</b>N). The alphanumeric expression may be encoded using a standard protocol for alphanumeric characters (e.g., Unicode, American Standard Code for Information Interchange (ASCII), etc.). In one embodiment, the rule identifier (<b>464</b>) is provided by a user that initiated the creation of the corresponding rule (<b>462</b>A, <b>462</b>N) and may further be a string of text that uniquely identifies that rule (<b>462</b>A, <b>462</b>N) to one or more users (e.g., &#x201c;mapping <b>4</b>&#x201d;, &#x201c;engineering&#x201d;, &#x201c;sales east&#x201d;, etc.). In one embodiment, a rule identifier (<b>464</b>) may be automatically generated by the network device when the rule (<b>462</b>A, <b>462</b>N) is created. Further, a rule identifier (<b>464</b>) may be a simple integer count (e.g., 1, 2, 3, 4, 5, etc.) or index (e.g., 0, 1, 2, 3, etc.). One of ordinary skill in the art, having the benefit of this detailed description, would appreciate that a rule identifier may be any alphanumeric expression that identifies an associated set of rule(s).</p><p id="p-0053" num="0052">In one or more embodiments, a rule criterion (e.g., rule criteria (<b>466</b>)) is data that specifies a packet property and an associated value (or range of values). As a non-imitating example, a single rule criterion (<b>466</b>) may specify a property of &#x201c;source MAC address&#x201d; with an associated value &#x201c;18:65:71:A0:ED:00&#x201d;. Accordingly, the criteria of a matching packet would be a packet with a source MAC address of 18:65:71:A0:ED:00.</p><p id="p-0054" num="0053">In one or more embodiments, rule criteria (<b>466</b>) may specify multiple packet properties, multiple corresponding associated values, and one or more logical operators linking the multiple properties. As another non-limiting example, a first property may be &#x201c;source IP address&#x201d; with an associated value of &#x201c;10.10.5.0/24&#x201d;. Further, a second property may be &#x201c;destination MAC address&#x201d; with an associated value &#x201c;18:65:71:A0:ED:00&#x201d;. Continuing with the example, the logical operator linking the two properties may be &#x201c;AND&#x201d;. Accordingly, the criteria of a matching packet would be a packet with a source IP address anywhere in the range 10.10.5.0-255 and with a destination MAC address of 18:65:71:A0:ED:00.</p><p id="p-0055" num="0054">Non-limiting examples of packet properties include a source/sender IP address, a destination/recipient IP address, source/sender MAC address, a destination/recipient MAC address, layer 4 source/sender port, layer 4 destination/recipient port, and ethernet protocol type.</p><p id="p-0056" num="0055">One of ordinary skill in the art, having the benefit of this detailed description, would appreciate that various combinations of packet properties, associated values, and logical operators may be used to generate simple, complicated, broad, or narrow sets of rule criteria.</p><p id="p-0057" num="0056">In one or more embodiments, a rule action (e.g., rule action(s) (<b>468</b>)) is data that specifies a modification to make to the packet data of a packet (and/or a copy of the packet). Further, a rule action (<b>468</b>) may specify generating a certain number of copies of the packet and the modifications to make to the packet data of the copied packet(s), respectively. A rule action (<b>468</b>) may include a rule action identifier (an alphanumeric string, not shown) that is uniquely associated with the rule action (<b>468</b>). If a rule action (<b>468</b>) specifies generating multiple copies of a packet, a unique rule action identifier may be generated for each copy of the packet generated.</p><p id="p-0058" num="0057">As a non-limiting example, rule actions (<b>468</b>) may include steps to: (1) generate two copies of a packet, (2) set the destination IP address of the first copied packet to &#x201c;172.217.22.14&#x201d;, (3) set the destination IP address of the second copied packet to &#x201c;54.239.28.85&#x201d;. Further, the rule action (<b>468</b>) includes two unique rule action identifiers (one for each packet).</p><p id="p-0059" num="0058">Non-limiting examples of packet data that may be modified include a source/sender IP address, a destination/recipient IP address, source/sender MAC address, a destination/recipient MAC address, layer 4 source/sender port, layer 4 destination/recipient port, ethernet protocol type, layer 4 checksum value.</p><p id="p-0060" num="0059">In one or more embodiments, a counter (e.g., counter (<b>469</b>)) is a numerical indication of how many copies of an associated packet have yet to be sent to an egress pipeline. As a non-limiting example, a counter (<b>469</b>) may have a value of &#x201c;2&#x201d;, meaning that two copies of the packet need to be generated and sent to an egress pipeline. Further, after one of those copies is sent to the egress pipeline, the counter (<b>469</b>) may be decremented to &#x201c;1&#x201d; indicating that only one copy of the packet now needs to be generated and sent to an egress pipeline.</p><p id="p-0061" num="0060">While <figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a specific configuration of a system, other configurations may be used without departing from the scope. Accordingly, embodiments disclosed herein should not be limited to the configuration of devices and/or components shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example of a packet translation ruleset, in accordance with one or more embodiments. The example packet translation ruleset (<b>560</b>) includes a series of rules (rule A (<b>562</b>A), rule B (<b>562</b>B), rule C (<b>562</b>C), rule D (<b>562</b>D), rule E (<b>562</b>E)) each with a corresponding rule identifier (<b>564</b>), rule criteria (<b>566</b>), and rule action(s) (<b>568</b>).</p><p id="p-0063" num="0062">Each rule (<b>562</b>A-E) in the example packet translation ruleset (<b>560</b>) of <figref idref="DRAWINGS">FIG. <b>5</b></figref> is used in a corresponding example figure (see <figref idref="DRAWINGS">FIGS. <b>8</b>-<b>12</b></figref> for an example implementation of each example rule (<b>562</b>A-E)).</p><p id="p-0064" num="0063">While <figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a specific configuration of a system, other configurations may be used without departing from the scope. Accordingly, embodiments disclosed herein should not be limited to the configuration of devices and/or components shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a diagram of a packet translation queue, in accordance with one or more embodiments. In one or more embodiments, a packet translation queue (packet translation queue (<b>670</b>)) is a data structure, stored in the memory/storage of the network device, that includes one or more packet(s) (e.g., packet A (<b>672</b>A), packet N (<b>672</b>N)) diverted to the packet translation queue (<b>670</b>) by the packet translation diverter. Further, a packet (<b>672</b>A, <b>672</b>N) may include a packet translation tag (e.g., packet translation tag (<b>674</b>)) and packet data (e.g., packet data (<b>676</b>)). Similarly named components, shown in this figure, have all of the same properties and functionalities as described in previous figures. Accordingly, only additional components, properties, and functionalities will be described below.</p><p id="p-0066" num="0065">In one or more embodiments, a packet (e.g., packet A (<b>672</b>A), packet N (<b>672</b>N)) is data that may include a packet translation tag (<b>674</b>) and packet data (<b>676</b>). Each of these components is described below.</p><p id="p-0067" num="0066">In one or more embodiments, packet data (e.g., packet data (<b>676</b>)) is the data included in the packet as received by the ingress pipeline (i.e., prior to the addition of the packet translation tag (<b>674</b>)). Packet data (<b>676</b>) may include a packet header (including, for example, a source/sender IP address, a destination/recipient IP address), source/sender MAC address, a destination/recipient MAC address, layer 4 source/sender port, layer 4 destination/recipient port, ethernet protocol type, layer 4 checksum value, payload, error correction, options, flags, or any combination thereof. A packet may also include additional data and is not limited by the specifically enumerated preceding data components. Further, as used herein, any part or combination of parts of the packet data (<b>676</b>) may be referred to as a &#x201c;portion of the packet&#x201d; or a &#x201c;portion of the packet data&#x201d;.</p><p id="p-0068" num="0067">In one or more embodiments, a packet translation tag (e.g., packet translation tag (<b>674</b>)) is a collection of data copied from a matching rule. Specifically, a packet translation tag (<b>674</b>) may include a rule identifier (<b>664</b>), a rule action (<b>667</b>), a counter (<b>669</b>), or any combination thereof. A packet translation tag (<b>674</b>) may be added to the header of a packet (<b>672</b>A, <b>672</b>N), added to a new section of the packet, or various parts of the packet translation tag (<b>674</b>) (e.g., the counter (<b>669</b>)) may be added to the header of a packet, whereas other parts (e.g., the rule identifier (<b>664</b>)) may be added separately elsewhere in the packet.</p><p id="p-0069" num="0068">While <figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a specific configuration of a system, other configurations may be used without departing from the scope. Accordingly, embodiments disclosed herein should not be limited to the configuration of devices and/or components shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref> shows a flowchart of a method of diverting a network packet, in accordance with one or more embodiments. All or a portion of the method shown in <figref idref="DRAWINGS">FIG. <b>7</b>A</figref> may be performed by one or more components of a network device (and/or a packet translation module thereof). However, another component of the system may perform this method without departing from the scope. While the various steps in this flowchart are presented and described sequentially, one of ordinary skill in the relevant art will appreciate that some or all of the steps may be executed in different orders, may be combined or omitted, and some or all steps may be executed in parallel.</p><p id="p-0071" num="0070">In Step <b>700</b>, a packet is received at an ingress pipeline in a network device. In one or more embodiments, the packet may have been generated by a source device prior to Step <b>700</b> and the ingress pipeline may receive the packet from the source device (directly or indirectly).</p><p id="p-0072" num="0071">In Step <b>702</b>, a packet translation diverter performs a lookup, using the packet translation ruleset, and compares the packet data of the packet to the rule criteria of each rule.</p><p id="p-0073" num="0072">In Step <b>704</b>, a determination is made if the packet data matches the rule criteria of any one of the rules in the packet translation ruleset. If the packet data matches any rule criteria (<b>704</b>&#x2014;YES), the process proceeds to Step <b>706</b>. If the packet data does not match the rule criteria (<b>704</b>&#x2014;NO), the process proceeds to Step <b>710</b>.</p><p id="p-0074" num="0073">In Step <b>706</b>, the packet translation diverter adds a packet translation tag to the packet. In one or more embodiments, the packet translation tag includes the rule identifier, rule action(s), and/or counter associated with the rule that included the matching rule criteria in Step <b>704</b>. A packet translation tag may be added to the header of a packet, added to a new section of the packet, or various parts of the packet translation tag (e.g., the counter) may be added to the header of a packet, whereas other parts (e.g., the rule identifier) may be added separately elsewhere in the packet (e.g., in the packet data).</p><p id="p-0075" num="0074">In Step <b>708</b>, the packet translation diverter places (i.e., diverts) the packet into the packet translation queue. After the packet is placed into the packet translation queue, the ingress portion of the process may conclude.</p><p id="p-0076" num="0075">In Step <b>710</b>, the packet translation diverter forwards the packet to the egress pipeline. In one or more embodiments, a packet that does not have packet data matching any rule criteria is processed normally (and not diverted into the packet translation queue). After the packet is forwarded to the egress pipeline, the ingress portion of the process may conclude.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>7</b>B</figref> shows a flowchart of a method of copying and modifying a network packet, in accordance with one or more embodiments. All or a portion of the method shown in <figref idref="DRAWINGS">FIG. <b>7</b>B</figref> may be performed by one or more components of a network device (and/or a packet translation module thereof). However, another component of the system may perform this method without departing from the scope. While the various steps in this flowchart are presented and described sequentially, one of ordinary skill in the relevant art will appreciate that some or all of the steps may be executed in different orders, may be combined or omitted, and some or all steps may be executed in parallel.</p><p id="p-0078" num="0077">In Step <b>712</b>, a packet translation agent identifies the existence of the packet in the packet translation queue. In one or more embodiments, the packet translation agent may periodically check the packet translation queue for the existence of packets using a scheduler. If the packet translation agent does not identify any packets when checking the packet translation queue, the packet translation agent idles until the next scheduled event to check the packet translation queue.</p><p id="p-0079" num="0078">In Step <b>714</b> the packet translation agent copies the packet in the packet translation queue (identified in Step <b>712</b>) to obtain a copied packet. Further, in one or more embodiments, the packet translation agent adds the rule action identifier (from the rule action) to the copied packet for the specific copy of the packet being modified. As a non-limiting example, if two copies of the packet are to be generated, each copy of the packet has a unique rule action identifier added that is specific to the actions to be performed on that one specific copy. In one or more embodiments, the copied packet may reside in the packet translation queue, the egress pipeline, or in another data structure.</p><p id="p-0080" num="0079">In one or more embodiments, the entire packet may not be copied. Instead, just the header of the packet may be copied to obtain a copied header (including the source and destination IP addresses). In such an instance, the packet translation agent adds the rule action identifier (from the rule action) to the copied header for the specific copy of the packet being modified. As a non-limiting example, if two copies of the packet are to be generated, each copy of the header has a unique rule action identifier added that is specific to the actions to be performed on that one specific copy.</p><p id="p-0081" num="0080">In Step <b>716</b>, the translation packet agent modifies the copied packet data (and/or header) of the packet as specified in the action rule(s) for the matching rule to obtain a modified copied packet. In one or more embodiments, where only the header was copied at Step <b>714</b>, the modified copied header may be merged with the packet in the packet translation queue (without ever copying the packet itself) to obtain the modified copied packet. In one or more embodiments, where there are more than one copy of the packet to be made, the translation packet agent performs the actions associated with the rule action identifier that is unique to that particular copied packet (as the rule may include several rule actions that are unique to different packet copies). In one or more embodiments, any of the packet data, after it has been modified may be considered &#x201c;modified packet data&#x201d; (e.g., a &#x201c;modified source IP address&#x201d;, a &#x201c;modified destination MAC address&#x201d;, a &#x201c;modified egress port&#x201d;, etc.).</p><p id="p-0082" num="0081">In Step <b>718</b>, the packet translation agent forwards the modified copied packet to the appropriate egress pipeline. In one or more embodiments, the egress pipeline may be specified by a rule action in the packet translation tag.</p><p id="p-0083" num="0082">In Step <b>720</b>, the packet translation agent decrements the counter of the packet in the packet translation queue. In one or more embodiments, decrementing the counter includes subtracting 1 (i.e., &#x2212;1) from the current value of the counter.</p><p id="p-0084" num="0083">In Step <b>722</b>, the packet translation agent makes a determination if the counter is equal to 0. If the counter is equal to 0 (<b>722</b>&#x2014;YES), the process may proceed to Step <b>724</b>. However, if the counter is not equal to 0 (722-NO), the process returns to Step <b>714</b>. In one or more embodiments, the counter may not have a value of &#x201c;0&#x201d;, but instead may otherwise indicate that additional copies of the packet need to be sent (<b>722</b>&#x2014;YES), or that additional copies of the packet do not need to be sent (<b>722</b>&#x2014;NO).</p><p id="p-0085" num="0084">In Step <b>724</b>, the packet translation agent removes the packet from the packet translation queue. Following removal of the packet from the packet translation queue, the egress portion of the handling of that packet may conclude.</p><p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows an example, in accordance with one or more embodiments. The following use case is for explanatory purposes only and not intended to limit the scope to this embodiment. In <figref idref="DRAWINGS">FIG. <b>8</b></figref>, consider a scenario in which a source device (<b>830</b>) has a dynamic host configuration protocol (DHCP) assigned IP address of 192.168.1.105, yet also on the network is a destination device (<b>832</b>) that has the same hardcoded IP address of 192.168.1.105. Normally, such a configuration would not be able to exist (causing IP address conflicts in the local area network (<b>800</b>)).</p><p id="p-0087" num="0086">However, the destination device (<b>832</b>) is not directly connected to the source device (<b>830</b>) (or other devices (not shown)) in the local area network (<b>800</b>). Instead, the destination device (<b>832</b>) is shielded from other devices in the local area network (<b>800</b>) by the network device (<b>810</b>) and the packet translation module (<b>820</b>) therein.</p><p id="p-0088" num="0087">Further, the packet translation module (<b>820</b>) includes a packet translation ruleset with Rule A (<b>562</b>A) (rule identifier &#x201c;0&#x201d;) as shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The rule criteria specifies any packet with a destination of 192.168.10.105/32 and the rule action includes a step to (1) change the destination address to 192.168.1.105/32 for any packet that matches the rule criteria. Accordingly, within the local area network (<b>800</b>), all computing devices see the destination device (<b>832</b>) as having the IP address 192.168.10.105 (despite it actually being 192.168.1.105). That is, even though the destination device (<b>832</b>) has the hardcoded IP address of 192.168.1.105, the source device (<b>830</b>) (and every other computing device (not shown) connected to the local area network (<b>800</b>)) uses IP address 192.168.10.105 for the destination device (<b>832</b>). As explained in the example steps below, the network device (<b>810</b>) isolates the destination device (<b>832</b>) from every other computing device of the local area network (<b>800</b>) and the packet translation module (<b>820</b>) modifies incoming packets (addressed to 192.168.10.105) to use the destination device's (<b>832</b>) actual IP address of 192.168.1.105.</p><p id="p-0089" num="0088">At (1), source device (<b>830</b>) generates a packet with destination address 192.168.10.105. The packet is then routed normally and sent over the local area network (<b>800</b>).</p><p id="p-0090" num="0089">At (2), the packet arrives at network device (<b>810</b>) (through which all traffic destined to IP address 192.168.10.105 is routed). The translation packet diverter (of network device (<b>810</b>)) identifies a match for the packet with the rule &#x201c;0&#x201d; because the packet is addressed to 192.168.10.105&#x2014;and the rule criteria specifies that anything addressed to the IP address 192.168.10.105/32 satisfies the conditions of the rule criteria. Accordingly, the packet is diverted into the packet translation queue of the packet translation module (<b>820</b>).</p><p id="p-0091" num="0090">At (3), the packet, now in the packet translation queue, is copied and modified by the translation packet agent (of packet translation module (<b>820</b>)) to change the destination address from 192.168.10.105 to 192.168.1.105 (the rule action specified in the rule). After this modification is made, the packet is forwarded to the egress pipeline of network device (<b>810</b>) and routed normally to destination device (<b>832</b>).</p><p id="p-0092" num="0091">At (4), the packet is received at the destination device (<b>832</b>) and the destination device (<b>832</b>) accepts that packet as the destination address is 192.168.1.105.</p><p id="p-0093" num="0092">As a variation of the shown example, consider a scenario where two or more packet translation modules are stationed between two or more destination devices with hard coded IP addresses. In such a scenario, the packet translation modules may each (independently) perform the function of modifying packets to facilitate communication with the legacy devices. Additionally, two or more packet translation modules may be used for load balancing and fault tolerance.</p><p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows an example, in accordance with one or more embodiments. The following use case is for explanatory purposes only and not intended to limit the scope to this embodiment. In <figref idref="DRAWINGS">FIG. <b>9</b></figref>, consider a scenario in which, local area network A (<b>900</b>) and local area network B (<b>904</b>) have the same subnet (192.168.1.0/24, with a DHCP server issuing addresses in the range 192.168.1.0-255). Further, computing devices A (<b>930</b>) includes devices with IP addresses from 192.168.1.101-150 while computing devices B includes devices with IP addresses from 192.168.1.120-181.</p><p id="p-0095" num="0094">In this example, 31 devices in each network (62 devices total) have the same IP address as a device in the other network (overlapping IP addresses 192.168.1.120-150). Normally, directly merging two such networks (<b>900</b>, <b>904</b>) over intermediate network (<b>902</b>) would cause numerous IP address conflicts and prevent most network traffic. However, by utilizing two packet translation modules (packet translation module A (<b>920</b>) and packet translation module B (<b>922</b>)) both networks can be virtually joined.</p><p id="p-0096" num="0095">Specifically, packet translation module A (<b>920</b>) includes a packet translation ruleset with Rule B (<b>562</b>B) (&#x201c;SITE_A_2_SITE_B&#x201d;) as shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The rule criteria specifies any packet with a destination subnet of 192.168.20.0/24 and the rule action(s) include steps to (1) change the destination subnet to 192.168.1.0/24, and (2) change source subnet to 192.168.10.0/24.</p><p id="p-0097" num="0096">Further, packet translation module B (<b>922</b>) includes a packet translation ruleset with Rule C (<b>562</b>C) (&#x201c;SITE_B_2_SITE_A&#x201d;) as shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The rule criteria specifies any packet with a destination subnet of 192.168.10.0/24 and the rule action(s) include steps to (1) change destination subnet to 192.168.1.0/24, and (2) change source subnet to 192.168.20.0/24.</p><p id="p-0098" num="0097">Accordingly, within local area network A (<b>900</b>), all computing devices in local area network B (<b>904</b>) appear to have the subnet 192.168.20.xx. And, conversely, within local area network B (<b>904</b>), all computing devices in local area network A (<b>900</b>) appear to have the subnet 192.168.10.xx, thereby avoiding all IP address conflicts.</p><p id="p-0099" num="0098">At (1), a computing device with IP address 192.168.1.121 (of local area network A (<b>900</b>)) generates a ping packet. The source address of the ping packet is 192.168.1.121 and the destination address is 192.168.20.142. The ping packet is routed normally to network device A (<b>912</b>A)</p><p id="p-0100" num="0099">At (2), the translation packet diverter (of packet translation module A (<b>920</b>)) identifies a match for the ping packet with the rule &#x201c;SITE_A_2_SITE_B&#x201d; because the ping packet is addressed to 192.168.20.142&#x2014;and the rule criteria specifies that anything addressed to the subnet 192.168.20.0/24 satisfies the conditions of the rule criteria. Accordingly, the ping packet is diverted into the packet translation queue.</p><p id="p-0101" num="0100">At (3), the packet, now in the packet translation queue, is copied and modified by the translation packet agent (of packet translation module A (<b>920</b>)) to change the destination address from 192.168.20.142 to 192.168.1.142, and the source address from 192.168.1.121 to 192.168.10.121 (the two rule actions specified in the rule). After these modifications are made, the packet is forwarded to the egress pipeline of network device A (<b>912</b>A) and routed normally to computing devices B (<b>932</b>).</p><p id="p-0102" num="0101">At (4), the ping packet is received at the computing device with the IP address 192.168.1.142 (of local area network B (<b>904</b>)). At (5), the computing device, with the IP address 192.168.1.142 (of local area network B (<b>904</b>)) generates a reply packet in response to the ping packet. The reply packet is generated with source address 192.168.1.142, and addressed to 192.168.10.121 (the IP address listed as the original sender of the ping packet). The reply packet is then forwarded normally within local area network B (<b>904</b>) to network device B (<b>912</b>B).</p><p id="p-0103" num="0102">At (6), the translation packet diverter (of packet translation module B (<b>922</b>)) identifies a match for the ping packet with the rule &#x201c;SITE_B_2_SITE_A&#x201d; because the ping packet is addressed to 192.168.10.121&#x2014;and the rule criteria specifies that anything addressed to the subnet 192.168.10.0/24 satisfies the conditions of the rule criteria. Accordingly, the ping packet is diverted into the packet translation queue.</p><p id="p-0104" num="0103">At (7), the packet, now in the packet translation queue, is copied and modified by the translation packet agent (of packet translation module B (<b>922</b>)) to change the destination address from 192.168.10.121 to 192.168.1.121, and the source address from 192.168.1.142 to 192.168.20.142 (the two rule actions specified in the rule). After these modifications are made, the packet is forwarded to the egress pipeline of network device B (<b>912</b>B) and routed normally to computing devices A (<b>930</b>).</p><p id="p-0105" num="0104">At (8), the computing device with IP address 192.168.1.121 (of local area network A (<b>900</b>)) receives the reply packet. The original ping packet (generated at (1)) has a source IP address of 192.168.1.121 and a destination IP address of 192.168.20.142. Accordingly, the computing device with IP address 192.168.1.121 is configured to expect a reply packet that is oppositely addressed&#x2014;with source IP address 192.168.20.142 and destination IP address 192.168.1.121. As modified in step (7), the computing device with IP address 192.168.1.121 receives the reply packet addressed as expected.</p><p id="p-0106" num="0105">Although the example shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref> only shows two local area networks (<b>900</b>, <b>904</b>), the described method and technologies may be employed over any number of networks. Further, one or more packet translation modules may be employed even when the IP address ranges of two networks do not overlap/conflict. As a non-limiting example, consider the layout of <figref idref="DRAWINGS">FIG. <b>9</b></figref> (or <figref idref="DRAWINGS">FIG. <b>2</b></figref>) where one or more addresses of the intermediate network conflicts with the addresses of one of the local area networks (while the addresses of two local area networks do not conflict). In such an instance, one or more packet translation module(s) may be employed to modify network traffic to avoid conflicting with the network devices of the intermediate network.</p><p id="p-0107" num="0106">As another non-limiting example, consider a scenario with three local area networks, where each of those three networks may employ a packet translation module to arbitrarily modify all traffic to the other local area networks (either with or without overlapping IP addresses). Continuing with the example, a first network's packet translation module may modify all traffic to (and from) a second network as appearing to belong to subnet 10.1.2.0/24 (regardless of the second network's actual addressing scheme). Further, that same first network's packet translation module may modify all traffic to (and from) a third network as appearing to belong to subnet 10.1.3.0/24 (regardless of the second network's actual addressing scheme). By arbitrarily forcing such traffic into the desired address ranges, it may be easier to implement and manage separate policies for devices of those external networks (e.g., firewalls, permissions, quality of service, throttling, etc.).</p><p id="p-0108" num="0107">Further, continuing with the same example, the second network's packet translation module may force all traffic to (and from) the first network and third network into the same subnet as the devices of the second network. This may be desired for opposite reasons&#x2014;using the same policies that already exist within the second network for the devices of the first and third networks.</p><p id="p-0109" num="0108">Lastly, continuing with the same example, the third network may modify some of the traffic from the first network to unique subnet (e.g., 172.16.12.0/24), may modify other traffic from the first network to the same subnet as the third network (e.g., 192.168.85.0/24), while leaving other traffic from the first network unmodified (e.g., in subnet 10.1.1.0/24). Similarly, any number of rules may be applied for traffic to (and from) the second network.</p><p id="p-0110" num="0109"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows an example, in accordance with one or more embodiments. The following use case is for explanatory purposes only and not intended to limit the scope to this embodiment. In <figref idref="DRAWINGS">FIG. <b>10</b></figref>, consider a scenario in which it is desired that unicast source(s) (<b>1030</b>) broadcast the same unicast stream to multiple unicast destination devices (unicast destination device A (<b>1032</b>A), unicast destination device N (<b>1032</b>N)). Although not shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, there could be any number of intermediary networks between each of the devices depicted.</p><p id="p-0111" num="0110">At (1), one or more unicast source(s) (<b>1030</b>) begins to broadcast a single unicast stream from IP address 162.32.45.99 to the network device (<b>1010</b>) at IP address 97.125.25.16. At (2), the translation packet diverter (of network device (<b>1010</b>)) identifies a match for the unicast stream with the rule &#x201c;Uni2MultiUni&#x201d; because the unicast stream is from source IP address 162.32.45.99 and being sent to destination IP address 97.125.25.16&#x2014; satisfying Rule D (<b>562</b>D) of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0112" num="0111">At (3), the packet, now in the packet translation queue, is copied a first time and modified by the translation packet agent (of packet translation module (<b>1020</b>)) to change the destination address from 97.125.25.16 to 192.168.10.54 as specified in the rule action for the first copy of the packet.</p><p id="p-0113" num="0112">Additionally, a second copy of the packet is produced, and modified by the translation packet agent (of packet translation module (<b>1020</b>)) to change the destination address from 97.125.25.16 to 192.168.10.57. Further, the source IP address is changed from 162.32.45.99 to 100.88.36.2 as specified in the rule action for the second copy of the packet. After these modifications are made, the packets are forwarded to the egress pipeline of network device (<b>1010</b>) and routed normally to the unicast destination devices (<b>1032</b>A, <b>1032</b>N). Alternatively, after the first copied packet is modified, the first modified copied packet may be sent prior to generating the second copied packet.</p><p id="p-0114" num="0113">At (4), the first modified copied packet is received by the unicast destination device A (<b>1032</b>A) with IP address 192.168.10.54. Additionally, the second modified copied packet is received by the unicast destination device N (<b>1032</b>N) with IP address 192.168.10.57. Further, neither recipient destination device (<b>1032</b>A, <b>1032</b>N) of the unicast stream is aware that the stream was duplicated by a packet translation module (<b>1020</b>) during transit. Further, the source IP address of the unicast stream received by unicast destination device N (<b>1032</b>N) is changed (from 162.32.45.99 to 100.88.36.2) to hide the real source IP address of the unicast source (<b>1030</b>).</p><p id="p-0115" num="0114"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows an example, in accordance with one or more embodiments. The following use case is for explanatory purposes only and not intended to limit the scope to this embodiment. In <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the network device that includes the packet translation module (<b>1120</b>) is excluded for compactness and to reduce repetitiveness of the procedure. In <figref idref="DRAWINGS">FIG. <b>11</b></figref>, consider a scenario in which within a local area network (<b>1100</b>), multiple multicast sources (multicast source A (<b>1120</b>A), multicast source B (<b>1120</b>B)) are generating multiple multicast streams. But, instead of providing several multicast streams externally, it is desired to provide a single unified multicast frontend over the intermediate network (<b>1102</b>).</p><p id="p-0116" num="0115">At (1), one or more multicast source(s) (<b>1120</b>A, <b>1120</b>B) begins to broadcast multiple multicast streams to the network device (not shown) with the packet translation module (<b>1120</b>). Multicast source A (<b>1120</b>A) is broadcasting to destination group IP address 239.55.55.55, whereas multicast source B (<b>1120</b>B) is broadcasting to destination group IP address 240.21.99.2 (both of which are received by the packet translation module (<b>1120</b>)).</p><p id="p-0117" num="0116">At (2), the translation packet diverter (of the packet translation module (<b>1120</b>)) identifies a match for the unicast stream with the rule &#x201c;UnifiedMulti&#x201d; because the multicast streams are sent to destination IP address 239.55.55.55 and 240.21.99.2&#x2014;either of which satisfies Rule E (<b>562</b>E) of <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Accordingly, the multicast stream packets are then placed in the packet translation queue.</p><p id="p-0118" num="0117">As specified in the rule actions for Rule E (<b>562</b>E) of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the source IP address is changed to 77.10.10.2 for all packets. However, for the first copy of each packet, the destination group IP address is changed to 239.10.10.2 (for multicast destination A (<b>1122</b>A)). And, for the second copy of each packet, the destination group IP address is changed to 239.10.10.3 (for multicast destination N (<b>1122</b>N)).</p><p id="p-0119" num="0118">After these modifications are made, the packets are forwarded to the egress pipeline of the network device and routed normally to multicast destinations (<b>1122</b>A, <b>1122</b>N) over intermediate network (<b>1102</b>). Alternatively, after the first copied packet is modified, the first modified copied packet may be sent prior to generating the second copied packet.</p><p id="p-0120" num="0119">Further, although not shown in Rule E of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the rule may additionally specify to send each copied stream to a unique egress port of the network device (that includes packet translation module (<b>1120</b>)). Accordingly, each multicast destination (<b>1122</b>A, <b>1122</b>N) accesses their copy of the multicast stream from a unique egress port (possibly unaware of the other port's existence).</p><p id="p-0121" num="0120">At (3), the first modified copied packet is received by the multicast destination A (<b>1122</b>A) with group IP address 239.10.10.2. Additionally, the second modified copied packet is received by the multicast destination N (<b>1122</b>N) with group IP address 239.10.10.3. Further, neither recipient of the multicast stream is aware that the stream was either (i) merged from multiple sources (<b>1120</b>A, <b>1120</b>N) or (ii) split into multiple streams by a packet translation module (<b>1120</b>) during transit, as it appears there is a single multicast frontend (from source group address 77.10.10.2).</p><p id="p-0122" num="0121">Further, this process may be reversed where multiple external multicast streams are funneled through a single packet translation module (or multiple packet translation modules configured to work in parallel) to provide a unified frontend for the multicast streams within the local area network.</p><p id="p-0123" num="0122"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows an example, in accordance with one or more embodiments. The following use case is for explanatory purposes only and not intended to limit the scope to this embodiment. In <figref idref="DRAWINGS">FIG. <b>12</b></figref>, consider a scenario in which a source device (<b>1230</b>) broadcasts a multicast stream to (at least) one destination device (<b>1232</b>). Further, the multicast stream (as initially generated) is not compatible with one or more intermediate networks (<b>1202</b>A, <b>1202</b>N) between the source device (<b>1230</b>) and the destination device (<b>1232</b>). Further, as shown, there are multiple paths from local area network A (<b>1200</b>) to local area network B (<b>1204</b>)&#x2014;either through intermediate network A (<b>1202</b>A) or through intermediate network N (<b>1202</b>N). Such a setup may be desirable if redundancy is important to maintain the stream of data from the source device (<b>1230</b>) to the destination device (<b>1232</b>).</p><p id="p-0124" num="0123">Accordingly, at (1), the source device (<b>1230</b>) begins to broadcast a multicast stream from IP address 192.168.1.10 to destination group IP address 239.10.10.10. At (2), the network device (not shown) with packet translation module A (<b>1220</b>) (in local area network A (<b>1200</b>)) receives the multicast stream and generates two copies of the stream, modifies each copy to a unicast stream packet (compatible to be transmitted over the intermediate networks (<b>1202</b>A, <b>1202</b>N)), and with a different modified destination IP address on each of the stream (i.e., all of the first copies have the same modified destination IP address, and all of the second copies have the same modified destination IP address).</p><p id="p-0125" num="0124">Accordingly, at (3), each of the unicast streams is directed over different intermediate networks (<b>1202</b>A, <b>1202</b>N) before arriving at local area network B (<b>1204</b>). Further, at (4), the two unicast streams are re-merged by packet translation module B (<b>1222</b>) and converted back into multicast stream packets. Accordingly, a single multicast stream frontend is presented to the destination device (<b>1232</b>) inside local area network B (<b>1204</b>). Thus, at (5), the destination device (<b>1232</b>) does not need to manage either or both of the multicast streams. Instead, every aspect of the duplication, conversion, and merging of the streams occurs without the intervention of the destination device (<b>1232</b>) by the packet translation modules (<b>1220</b>, <b>1222</b>).</p><p id="p-0126" num="0125">As articulated above, specific embodiments are described with reference to the accompanying figures. In the preceding description, numerous details were set forth as examples. One of ordinary skill in the art, having the benefit of this detailed description, would appreciate that one or more embodiments described above may be practiced without the explicitly articulated details, and that numerous variations or modifications may be possible without departing from the scope. Certain details known to those of ordinary skill in the art may be omitted to avoid obscuring the description.</p><p id="p-0127" num="0126">In the preceding description of the figures, any component described with regard to a figure, in various embodiments, may be equivalent to one or more like-named components shown and/or described with regard to any other figure. For brevity, descriptions of these components were not repeated with regard to each figure. Thus, each and every embodiment of the components of each figure is incorporated by reference and assumed to be optionally present within every other figure having one or more like-named components. Additionally, in accordance with various embodiments, any description of any component of a figure is to be interpreted as an optional embodiment, which may be implemented in addition to, in conjunction with, or in place of the embodiments described with regard to a corresponding like-named component in any other figure.</p><p id="p-0128" num="0127">Throughout this application, ordinal numbers (e.g., first, second, third, etc.) may be used as an adjective for an element (i.e., any noun in the application). The use of ordinal numbers is not to imply or create any particular ordering of the elements nor to limit any element to being only a single element unless expressly disclosed, such as by the use of the terms &#x201c;before&#x201d;, &#x201c;after&#x201d;, &#x201c;single&#x201d;, and other such terminology. Rather, the use of ordinal numbers is to distinguish between the elements. By way of an example, a first element is distinct from a second element, and the first element may encompass more than one element and succeed (or precede) the second element in an ordering of elements.</p><p id="p-0129" num="0128">As used herein, the term &#x2018;connected&#x2019;, or &#x2018;connection&#x2019;, means that there exists between elements/components/devices a direct or indirect connection that allows the elements to interact with one another in some way (e.g., via the exchange of information). For example, the phrase &#x2018;connected&#x2019; may refer to any direct (e.g., wired connection or wireless connection directly between two devices) or indirect (e.g., wired and/or wireless connections between any number of devices connecting the connected devices) connection.</p><p id="p-0130" num="0129">As used herein, the adjectives &#x201c;source&#x201d;, &#x201c;destination&#x201d;, and &#x201c;intermediate&#x201d; are for explanatory purposes only. That is, the components, devices, and collections of devices described using these adjectives are meant only to provide a better understanding to the reader in the context of a particular scenario&#x2014;not to generally limit the capabilities of those components, devices, and collections of devices. As an example, a &#x201c;component&#x201d; may perform certain operations when acting as a &#x201c;source component&#x201d; and may perform some of the same and other operations when acting as a &#x201c;destination component&#x201d;. However, each &#x201c;component&#x201d; (whether it be &#x201c;source&#x201d; or &#x201c;destination&#x201d;) may be fully capable of performing the operations of either role.</p><p id="p-0131" num="0130">While one or more embodiments have been described herein with respect to a limited number of embodiments and examples, one of ordinary skill in the art, having the benefit of this detailed description, would appreciate that other embodiments can be devised which do not depart from the scope of the embodiments disclosed herein. Accordingly, the scope should be limited only by the attached claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for modifying packet data of a packet in a network device, wherein the method comprises:<claim-text>receiving, at an ingress pipeline of the network device, the packet;</claim-text><claim-text>performing a lookup, in a packet translation ruleset, to compare the packet data to rule criteria of a rule in the packet translation ruleset;</claim-text><claim-text>making a first determination that at least a first portion of the packet data matches the rule criteria; and</claim-text><claim-text>based on the first determination:</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein modifying the copied packet comprises:<claim-text>changing a destination IP address of the packet to a modified destination IP address.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein modifying the copied packet further comprises:<claim-text>changing a source IP address of the packet to a modified source IP address.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the source IP address and the destination IP address belong to a same first subnet.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the modified source IP address and the modified destination IP address do not belong to a same second subnet.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein after adding the packet translation tag to the packet and before copying the packet, the method further comprises:<claim-text>placing the packet in a packet translation queue.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein after placing the packet in the packet translation queue, the method further comprises:<claim-text>identifying the packet in the packet translation queue.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method further comprises:<claim-text>decrementing a counter of the packet translation tag; and</claim-text><claim-text>making a second determination, that the counter indicates a second copy of the packet needs to be sent.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein, based on the second determination, the method further comprises:<claim-text>copying the packet translation tag and the second portion of the packet data to obtain a second copied packet, wherein the packet translation tag comprises a second rule action;</claim-text><claim-text>modifying the second copied packet as described in the second rule action to obtain a second modified copied packet; and</claim-text><claim-text>forwarding the second modified copied packet to the egress pipeline.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the rule action specifies a first modified destination IP address, wherein the second rule action specifies a second modified destination IP address, wherein the first modified destination IP address and the second modified destination IP address are different.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the method further comprises:<claim-text>wherein after forwarding the modified copied packet to the egress pipeline:<claim-text>the modified copied packet is routed through a first intermediate network, and</claim-text></claim-text><claim-text>wherein after forwarding the second modified copied packet to the egress pipeline:<claim-text>the second modified copied packet is routed through a second intermediate network.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein modifying the copied packet as described in the rule action, comprises:<claim-text>changing a protocol of the copied packet from unicast to multicast.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein a protocol of the packet is unicast.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method further comprises:<claim-text>receiving, at the ingress pipeline of the network device, a second packet;</claim-text><claim-text>performing a second lookup, in the packet translation ruleset, to compare second packet data of the second packet to second rule criteria of the rule in the packet translation ruleset;</claim-text><claim-text>making a second determination that at least a first portion of the second packet data matches the rule criteria; and</claim-text><claim-text>based on the second determination:<claim-text>adding a second packet translation tag to the second packet, wherein the second packet translation tag comprises a second rule action;</claim-text><claim-text>copying the second packet translation tag and at least a second portion of the second packet data to obtain a second copied packet;</claim-text><claim-text>modifying the second copied packet as described in the second rule action to obtain a second modified copied packet; and</claim-text><claim-text>forwarding the second modified copied packet to the egress pipeline.</claim-text></claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the method further comprises:<claim-text>wherein modifying the copied packet comprises:<claim-text>changing a source IP address of the packet to a modified source IP address, and</claim-text></claim-text><claim-text>wherein modifying the second copied packet comprises:<claim-text>changing a second source IP address of the second packet to the modified source IP address,</claim-text></claim-text><claim-text>wherein the source IP address and the second source IP address are different.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A network device, comprising:<claim-text>an ingress pipeline;</claim-text><claim-text>an egress pipeline;</claim-text><claim-text>a packet translation module, comprising:<claim-text>a packet translation diverter;</claim-text><claim-text>a packet translation agent;</claim-text><claim-text>a packet translation queue;</claim-text><claim-text>a packet translation ruleset;</claim-text></claim-text><claim-text>a processor, executing the packet translation diverter, performs a method for modifying packet data of a packet, wherein the method comprises:<claim-text>receiving, at the ingress pipeline, the packet;</claim-text><claim-text>performing a lookup, in the packet translation ruleset, to compare the packet data to rule criteria of a rule in the packet translation ruleset;</claim-text><claim-text>making a first determination that at least a portion of the packet data matches the rule criteria; and</claim-text><claim-text>based on the first determination:<claim-text>adding a packet translation tag to the packet, wherein the packet translation tag comprises a rule action;</claim-text></claim-text></claim-text><claim-text>wherein the processor, executing the packet translation agent, performs the method for modifying the packet data of the packet, wherein the method further comprises:<claim-text>copying the packet translation tag and at least a second portion of the packet data to obtain a copied packet;</claim-text><claim-text>modifying the copied packet as described in the rule action to obtain a modified copied packet; and</claim-text><claim-text>forwarding the modified copied packet to the egress pipeline.</claim-text></claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The network device of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein modifying the copied packet comprises:<claim-text>changing a destination IP address of the packet to a modified destination IP address.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The network device of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein modifying the copied packet further comprises:<claim-text>changing a source IP address of the packet to a modified source IP address.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The network device of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the source IP address and the destination IP address belong to a same first subnet.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The network device of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the modified source IP address and the modified destination IP address do not belong to a same second subnet.</claim-text></claim></claims></us-patent-application>