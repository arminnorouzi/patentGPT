<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005552A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005552</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17940317</doc-number><date>20220908</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>34</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>7</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>30</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>26</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>3404</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>7</main-group><subgroup>106</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>30</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>26</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>7</main-group><subgroup>1087</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Simplified Operations to Read Memory Cells Coarsely Programmed via Interleaved Two-Pass Data Programming Techniques</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17127476</doc-number><date>20201218</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11456038</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17940317</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Micron Technology, Inc.</orgname><address><city>Boise</city><state>ID</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Nguyen</last-name><first-name>Phong Sy</first-name><address><city>Livermore</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Fitzpatrick</last-name><first-name>James</first-name><address><city>Laguna Niguel</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Muchherla</last-name><first-name>Kishore Kumar</first-name><address><city>Fremont</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A memory system to store multiple bits of data in a memory cell. After receiving the data bits, a memory device coarsely programs a threshold voltage of the memory cell to a first level representative of a combination of bit values according to a mapping between combinations of bit values and threshold levels. The threshold levels are partitioned into a plurality of groups, each containing a subset of the threshold levels. A group identification of a first group, among the plurality of groups, containing the first level is determined for the memory cell. The memory device reads, using the group identification, a subset of the data bits back from the first memory cell, and combines the bits of the group identification and the subset to recover the entire set of data bits to finely program the threshold voltage of the memory cell to represent the data bits.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="214.55mm" wi="143.93mm" file="US20230005552A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="224.37mm" wi="148.51mm" file="US20230005552A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="177.55mm" wi="111.76mm" file="US20230005552A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="232.49mm" wi="162.64mm" file="US20230005552A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="228.35mm" wi="163.41mm" file="US20230005552A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="225.98mm" wi="168.66mm" orientation="landscape" file="US20230005552A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="214.63mm" wi="166.03mm" orientation="landscape" file="US20230005552A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="194.39mm" wi="142.75mm" file="US20230005552A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="216.58mm" wi="145.97mm" file="US20230005552A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="231.82mm" wi="176.78mm" file="US20230005552A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="200.74mm" wi="117.09mm" file="US20230005552A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="235.63mm" wi="178.99mm" file="US20230005552A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="180.59mm" wi="130.89mm" file="US20230005552A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="179.58mm" wi="172.13mm" file="US20230005552A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATIONS</heading><p id="p-0002" num="0001">The present application is a continuation application of U.S. patent application Ser. No. 17/127,476 filed Dec. 18, 2020 and issued as U.S. Pat. No. 11,456,038 on Sep. 27, 2022, the entire disclosures of which application are hereby incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">At least some embodiments disclosed herein relate to memory systems in general, and more particularly, but not limited to techniques to program voltage thresholds of memory cells in memory systems to store multiple bits of data per memory cell.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">A memory sub-system can include one or more memory devices that store data. The memory devices can be, for example, non-volatile memory devices and volatile memory devices. In general, a host system can utilize a memory sub-system to store data at the memory devices and to retrieve data from the memory devices.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004">The embodiments are illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example computing system having a memory sub-system in accordance with some embodiments of the present disclosure.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an integrated circuit memory device having a programming manager configured to program threshold voltages of memory cells to store data according to one embodiment.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example of programming memory cells to store multiple bits per memory cell according to one embodiment.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a two-pass programming technique to store multiple bits per memory cell according to one embodiment.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates voltage distributions for two-pass programming of memory cells according to one embodiment.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows mapping to threshold levels and group identifications in two-pass programming of memory cells to store data according to one embodiment.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a technique to coarsely program a memory cell to store data in a QLC level and to read the coarsely programmed memory cell according to one embodiment.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows another technique to read the coarsely programmed memory cell according to one embodiment.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows techniques to determine the value of a bit stored in a memory cell coarsely programmed in a group of predefined threshold levels according to one embodiment.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a method to read a memory cell coarsely programmed in a group of predefined threshold levels according to one embodiment.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a technique to read two bits of a memory cell coarsely programmed in a QLC mode according to one embodiment.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows a method of two-pass programming of memory cells according to some embodiments.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a block diagram of an example computer system in which embodiments of the present disclosure can operate.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0019" num="0018">At least some aspects of the present disclosure are directed to techniques to improve storing multiple bits per memory cell in a memory sub-system. Examples of storage devices and memory modules are described below in conjunction with <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In general, a host system can utilize a memory sub-system that includes one or more components, such as memory devices that store data. The host system can provide data to be stored at the memory sub-system and can request data to be retrieved from the memory sub-system.</p><p id="p-0020" num="0019">An integrated circuit memory cell (e.g., a flash memory cell) can be programmed to store data by the way of its state at a predefined voltage. For example, if the memory cell is configured/programmed in a state that allows a substantial current to pass the memory cell at the predefined voltage, the memory cell is storing a bit of one; and otherwise, the memory cell is storing a bit of zero. Further, a memory cell can store multiple bits of data by being configured/programmed differently at multiple predefined voltages. For example, the memory cell can store multiple bits of data by having a combination of states at the multiple predefined voltages; and different combinations of the states of the memory cell at the predefined voltages can be interpreted to represent different states of bits of data that is stored in the memory cell.</p><p id="p-0021" num="0020">Although the threshold voltage of a memory cell can be adjusted/programmed via applying voltage pulses to the memory cell, it is generally difficult to adjust/program the threshold voltage of a memory cell precisely to a predetermined voltage. A typical programming operation can move the threshold voltage of a memory cell to a voltage region, with varying probability levels of the threshold voltage actually being at different voltages within the region of threshold distribution.</p><p id="p-0022" num="0021">Thus, a programming operation can move the threshold voltage of the memory cell into a region of threshold distribution, where the probability density level of the threshold voltage of the memory cell being at any voltage in the region is above a predetermined threshold density. A programming operation that results in a wide region of threshold distribution is coarse and thus less accurate than a programming operation that results in a narrow region of threshold distribution. A coarse programming operation is typically faster than a fine, accurate programming operation.</p><p id="p-0023" num="0022">To store multiple bits per memory cell, the threshold voltage of the memory cell can be programmed into different regions so that each of the regions represents a different combination of bit values.</p><p id="p-0024" num="0023">To reduce the probability of error in reading the memory cell, it is desirable to reduce, minimize, and/or eliminate overlaps in the regions of threshold voltage resulting from the programming operations. Increasing the number of bits stored per memory cell leads to the requirement to reduce the width of regions of threshold distribution and thus the requirement to increase the precision/accuracy of the programming operations.</p><p id="p-0025" num="0024">Increasing the precision/accuracy of a programming operation generally leads to a longer time period for the data programming operation. When the time used for programming the threshold voltage of the memory cell increases, the speed of storing data in the memory cell decreases.</p><p id="p-0026" num="0025">Multi-pass programming can be used to speed up the storing data in a memory cell by programming the threshold voltage of the memory cell to a narrow region of threshold distribution. An initial pass of coarse programming can be used to rapidly move the threshold voltage of the memory cell with less precision. As a result, the threshold voltage of the memory cell is moved to a relatively wide region of threshold distribution. A subsequent pass of fine programming can be used to fine tune and move the threshold voltage of the memory cell to a relatively narrow region of threshold voltage distribution to reduce the probability of read error. The combination of coarse programming and fine programming can be faster than directly programming the memory cell to a narrow region of threshold distribution.</p><p id="p-0027" num="0026">Multi-pass programming can lead to increased complexity in the circuitry used to apply the multiple passes of programming. For example, buffers may be used in some implementations to store the input data for the subsequent pass of programming. Optionally, some memory cells in a memory device may be used in a single level cell (SLC) mode to store/buffer the input data temporarily, one bit per memory cell, for subsequent use in the next pass. Such an arrangement can eliminate the need for a separate type of memory cells for buffering data but increase write amplification for the memory device and/or reduced usable memory/storage capacity from the point of view of the user.</p><p id="p-0028" num="0027">At least some aspects of the present disclosure address the above and other deficiencies by coarsely programming a number of bits per memory cell and storing group indicators of possible threshold levels of individual memory cells that are programmed coarsely. Since the group indicator eliminates some threshold levels from possibilities for reading the memory cell, the memory device can read the data back from the memory cell with accuracy, even though its threshold voltage is coarsely programmed to a wide region of threshold distribution. Since the group indicator allows the memory device to read the data stored in the memory cell in the form of its coarsely programmed threshold voltage, the coarsely programmed memory cell can function as a buffer for the data to be stored into the memory cell in the subsequent operation of fine programming. Storing the group indicator takes less resources than storing the entire data to be stored back into the memory cell in fine programming.</p><p id="p-0029" num="0028">For example, a memory cell can be coarsely programmed to one of sixteen possible threshold levels to store 4-bit data in a quad-level cell (QLC) mode. The sixteen possible threshold levels can be divided into four groups, where the division of the groups is configured to increase the voltage gap between adjacent voltage levels in each group. For example, the threshold levels of the four groups can be fully interleaved when ordered according to voltage to increase the minimum separation among threshold levels in each individual groups.</p><p id="p-0030" num="0029">A two-bit group indicator can be stored in one or more memory cells to represent the identification of the group of the threshold level of the memory cell. Since the group indicator limits the possible threshold levels of the memory cell to one fourth of the possible sixteen levels of 4-bit data in general, the memory device can perform a read operation to obtain the 4-bit data stored in the coarsely programmed memory cell by differentiating its coarsely programmed threshold level from four possible coarsely programmed threshold levels, which corresponds to reading a memory cell programmed to store 2-bit data (or a multi-level cell (MLC) mode). Reading data in a MLC mode can be performed accurately with a threshold programming coarser than for reading data in a QLC mode. The two-bit group indicator can be stored/buffered in two memory cells in a single level cell (SLC) mode (e.g., one bit per cell). Since the 4-bit data can be read from the coarsely programmed memory cell with the help of the two-bit group indicator, the need to buffer the 4-bit data in four memory cells in SLC mode can be eliminated. Thus, the technique can reduce write amplification and/or increase the memory/storage capacity usable by the end user.</p><p id="p-0031" num="0030">In some implementations, the group indicator can be calculated from XOR or XNOR operations applied to the four bits to be stored in a memory cell. For example, one bit of the two-bit group indicator can be computed from XOR (or XNOR) of two of the four bits to be stored in the memory cell; and another bit of the group indicator can be computed from XOR (or XNOR) of the four bits to be stored in the memory cell.</p><p id="p-0032" num="0031">When multiple bits from multiple memory cells respectively are configured as codewords using a linear error-correcting code (ECC) technique (e.g., low-density parity-check (LDPC)), the XOR of codewords can result in codewords having bits from group indicators of the memory cells. Hence XOR (or XNOR) of codewords preserve the decodability; and ECC techniques can be used to recover errors in reading the group indicators.</p><p id="p-0033" num="0032">When the group indicator is computed from XOR (or XNOR) of the four bits to be stored in the memory cell, the coarsely programmed memory cell can be read to retrieve two of the four bits; and the remaining two bits can be computed from XOR (of XNOR) of the bits of the group indicator and the bit bits read from the coarsely programmed memory cell. Alternatively, the redundant information provided by the group indicator can be used to recover from errors in reading the memory cell.</p><p id="p-0034" num="0033">Since the threshold levels of the four groups are interleaved, the read voltages for reading the four groups are also interleaved. During the reading of the memory cell coarsely programmed to threshold levels of a QLC mode, the voltage applied to the memory cell is increased to the read voltages of the four groups one after another according to an order of increasing read voltage. Thus, the state of the memory cell is tested at the monotonically increasing read voltages in one pass to determine the bit values of the data stored in the memory cell. Such a technique can reduce the overhead in ramping up the voltage applied on the memory cell during reading and thus increase the speed of two-pass programming of the memory cell.</p><p id="p-0035" num="0034">After the data stored in the coarsely programmed memory cell is retrieved with the help of the group indicator, a fine programming operation can be applied to narrow the regions of threshold distribution such that the group indicator is no longer necessary for the accurate reading of the memory cell.</p><p id="p-0036" num="0035">Such programming techniques can reduce the requirements in using separate memory cells to buffer data for the fine pass programming, reduce write amplification, and/or increase the memory/storage capacity available to users.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example computing system <b>100</b> that includes a memory sub-system <b>110</b> in accordance with some embodiments of the present disclosure. The memory sub-system <b>110</b> can include media, such as one or more volatile memory devices (e.g., memory device <b>140</b>), one or more non-volatile memory devices (e.g., memory device <b>130</b>), or a combination of such.</p><p id="p-0038" num="0037">A memory sub-system <b>110</b> can be a storage device, a memory module, or a hybrid of a storage device and memory module. Examples of a storage device include a solid-state drive (SSD), a flash drive, a universal serial bus (USB) flash drive, an embedded multi-media controller (eMMC) drive, a universal flash storage (UFS) drive, a secure digital (SD) card, and a hard disk drive (HDD). Examples of memory modules include a dual in-line memory module (DIMM), a small outline DIMM (SO-DIMM), and various types of non-volatile dual in-line memory module (NVDIMM).</p><p id="p-0039" num="0038">The computing system <b>100</b> can be a computing device such as a desktop computer, a laptop computer, a network server, a mobile device, a vehicle (e.g., airplane, drone, train, automobile, or other conveyance), an internet of things (loT) enabled device, an embedded computer (e.g., one included in a vehicle, industrial equipment, or a networked commercial device), or such a computing device that includes memory and a processing device.</p><p id="p-0040" num="0039">The computing system <b>100</b> can include a host system <b>120</b> that is coupled to one or more memory sub-systems <b>110</b>. <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates one example of a host system <b>120</b> coupled to one memory sub-system <b>110</b>. As used herein, &#x201c;coupled to&#x201d; or &#x201c;coupled with&#x201d; generally refers to a connection between components, which can be an indirect communicative connection or direct communicative connection (e.g., without intervening components), whether wired or wireless, including connections such as electrical, optical, magnetic, etc.</p><p id="p-0041" num="0040">The host system <b>120</b> can include a processor chipset (e.g., processing device <b>118</b>) and a software stack executed by the processor chipset. The processor chipset can include one or more cores, one or more caches, a memory controller (e.g., controller <b>116</b>) (e.g., NVDIMM controller), and a storage protocol controller (e.g., PCIe controller, SATA controller). The host system <b>120</b> uses the memory sub-system <b>110</b>, for example, to write data to the memory sub-system <b>110</b> and read data from the memory sub-system <b>110</b>.</p><p id="p-0042" num="0041">The host system <b>120</b> can be coupled to the memory sub-system <b>110</b> via a physical host interface. Examples of a physical host interface include, but are not limited to, a serial advanced technology attachment (SATA) interface, a peripheral component interconnect express (PCIe) interface, a universal serial bus (USB) interface, a fibre channel, a serial attached SCSI (SAS) interface, a double data rate (DDR) memory bus interface, a small computer system interface (SCSI), a dual in-line memory module (DIMM) interface (e.g., DIMM socket interface that supports double data rate (DDR)), an open NAND flash interface (ONFI), a double data rate (DDR) interface, a low power double data rate (LPDDR) interface, or any other interface. The physical host interface can be used to transmit data between the host system <b>120</b> and the memory sub-system <b>110</b>. The host system <b>120</b> can further utilize an NVM express (NVMe) interface to access components (e.g., memory devices <b>130</b>) when the memory sub-system <b>110</b> is coupled with the host system <b>120</b> by the PCIe interface. The physical host interface can provide an interface for passing control, address, data, and other signals between the memory sub-system <b>110</b> and the host system <b>120</b>. <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a memory sub-system <b>110</b> as an example. In general, the host system <b>120</b> can access multiple memory sub-systems via a same communication connection, multiple separate communication connections, and/or a combination of communication connections.</p><p id="p-0043" num="0042">The processing device <b>118</b> of the host system <b>120</b> can be, for example, a microprocessor, a central processing unit (CPU), a processing core of a processor, an execution unit, etc. In some instances, the controller <b>116</b> can be referred to as a memory controller, a memory management unit, and/or an initiator. In one example, the controller <b>116</b> controls the communications over a bus coupled between the host system <b>120</b> and the memory sub-system <b>110</b>. In general, the controller <b>116</b> can send commands or requests to the memory sub-system <b>110</b> for desired access to memory devices <b>130</b>, <b>140</b>. The controller <b>116</b> can further include interface circuitry to communicate with the memory sub-system <b>110</b>. The interface circuitry can convert responses received from memory sub-system <b>110</b> into information for the host system <b>120</b>.</p><p id="p-0044" num="0043">The controller <b>116</b> of the host system <b>120</b> can communicate with controller <b>115</b> of the memory sub-system <b>110</b> to perform operations such as reading data, writing data, or erasing data at the memory devices <b>130</b>, <b>140</b> and other such operations. In some instances, the controller <b>116</b> is integrated within the same package of the processing device <b>118</b>. In other instances, the controller <b>116</b> is separate from the package of the processing device <b>118</b>. The controller <b>116</b> and/or the processing device <b>118</b> can include hardware such as one or more integrated circuits (ICs) and/or discrete components, a buffer memory, a cache memory, or a combination thereof. The controller <b>116</b> and/or the processing device <b>118</b> can be a microcontroller, special purpose logic circuitry (e.g., a field programmable gate array (FPGA), an application specific integrated circuit (ASIC), etc.), or another suitable processor.</p><p id="p-0045" num="0044">The memory devices <b>130</b>, <b>140</b> can include any combination of the different types of non-volatile memory components and/or volatile memory components. The volatile memory devices (e.g., memory device <b>140</b>) can be, but are not limited to, random access memory (RAM), such as dynamic random access memory (DRAM) and synchronous dynamic random access memory (SDRAM).</p><p id="p-0046" num="0045">Some examples of non-volatile memory components include a negative-and (or, NOT AND) (NAND) type flash memory and write-in-place memory, such as three-dimensional cross-point (&#x201c;3D cross-point&#x201d;) memory. A cross-point array of non-volatile memory can perform bit storage based on a change of bulk resistance, in conjunction with a stackable cross-gridded data access array. Additionally, in contrast to many flash-based memories, cross-point non-volatile memory can perform a write in-place operation, where a non-volatile memory cell can be programmed without the non-volatile memory cell being previously erased. NAND type flash memory includes, for example, two-dimensional NAND (2D NAND) and three-dimensional NAND (3D NAND).</p><p id="p-0047" num="0046">Each of the memory devices <b>130</b> can include one or more arrays of memory cells. One type of memory cell, for example, single level cells (SLC) can store one bit per cell. Other types of memory cells, such as multi-level cells (MLCs), triple level cells (TLCs), quad-level cells (QLCs), and penta-level cells (PLCs) can store multiple bits per cell. In some embodiments, each of the memory devices <b>130</b> can include one or more arrays of memory cells such as SLCs, MLCs, TLCs, QLCs, PLCs, or any combination of such. In some embodiments, a particular memory device can include an SLC portion, an MLC portion, a TLC portion, a QLC portion, and/or a PLC portion of memory cells. The memory cells of the memory devices <b>130</b> can be grouped as pages that can refer to a logical unit of the memory device used to store data. With some types of memory (e.g., NAND), pages can be grouped to form blocks.</p><p id="p-0048" num="0047">Although non-volatile memory devices such as 3D cross-point type and NAND type memory (e.g., 2D NAND, 3D NAND) are described, the memory device <b>130</b> can be based on any other type of non-volatile memory, such as read-only memory (ROM), phase change memory (PCM), self-selecting memory, other chalcogenide based memories, ferroelectric transistor random-access memory (FeTRAM), ferroelectric random access memory (FeRAM), magneto random access memory (MRAM), spin transfer torque (STT)-MRAM, conductive bridging RAM (CBRAM), resistive random access memory (RRAM), oxide based RRAM (OxRAM), negative-or (NOR) flash memory, and electrically erasable programmable read-only memory (EEPROM).</p><p id="p-0049" num="0048">A memory sub-system controller <b>115</b> (or controller <b>115</b> for simplicity) can communicate with the memory devices <b>130</b> to perform operations such as reading data, writing data, or erasing data at the memory devices <b>130</b> and other such operations (e.g., in response to commands scheduled on a command bus by controller <b>116</b>). The controller <b>115</b> can include hardware such as one or more integrated circuits (ICs) and/or discrete components, a buffer memory, or a combination thereof. The hardware can include digital circuitry with dedicated (e.g., hard-coded) logic to perform the operations described herein. The controller <b>115</b> can be a microcontroller, special purpose logic circuitry (e.g., a field programmable gate array (FPGA), an application specific integrated circuit (ASIC), etc.), or another suitable processor.</p><p id="p-0050" num="0049">The controller <b>115</b> can include a processing device <b>117</b> (e.g., processor) configured to execute instructions stored in a local memory <b>119</b>. In the illustrated example, the local memory <b>119</b> of the controller <b>115</b> includes an embedded memory configured to store instructions for performing various processes, operations, logic flows, and routines that control operation of the memory sub-system <b>110</b>, including handling communications between the memory sub-system <b>110</b> and the host system <b>120</b>.</p><p id="p-0051" num="0050">In some embodiments, the local memory <b>119</b> can include memory registers storing memory pointers, fetched data, etc. The local memory <b>119</b> can also include read-only memory (ROM) for storing micro-code. While the example memory sub-system <b>110</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref> has been illustrated as including the controller <b>115</b>, in another embodiment of the present disclosure, a memory sub-system <b>110</b> does not include a controller <b>115</b>, and can instead rely upon external control (e.g., provided by an external host, or by a processor or controller separate from the memory sub-system).</p><p id="p-0052" num="0051">In general, the controller <b>115</b> can receive commands or operations from the host system <b>120</b> and can convert the commands or operations into instructions or appropriate commands to achieve the desired access to the memory devices <b>130</b>. The controller <b>115</b> can be responsible for other operations such as wear leveling operations, garbage collection operations, error detection and error-correcting code (ECC) operations, encryption operations, caching operations, and address translations between a logical address (e.g., logical block address (LBA), namespace) and a physical address (e.g., physical block address) that are associated with the memory devices <b>130</b>. The controller <b>115</b> can further include host interface circuitry to communicate with the host system <b>120</b> via the physical host interface. The host interface circuitry can convert the commands received from the host system into command instructions to access the memory devices <b>130</b> as well as convert responses associated with the memory devices <b>130</b> into information for the host system <b>120</b>.</p><p id="p-0053" num="0052">The memory sub-system <b>110</b> can also include additional circuitry or components that are not illustrated. In some embodiments, the memory sub-system <b>110</b> can include a cache or buffer (e.g., DRAM) and address circuitry (e.g., a row decoder and a column decoder) that can receive an address from the controller <b>115</b> and decode the address to access the memory devices <b>130</b>.</p><p id="p-0054" num="0053">In some embodiments, the memory devices <b>130</b> include local media controllers <b>150</b> that operate in conjunction with memory sub-system controller <b>115</b> to execute operations on one or more memory cells of the memory devices <b>130</b>. An external controller (e.g., memory sub-system controller <b>115</b>) can externally manage the memory device <b>130</b> (e.g., perform media management operations on the memory device <b>130</b>). In some embodiments, a memory device <b>130</b> is a managed memory device, which is a raw memory device combined with a local controller (e.g., local media controller <b>150</b>) for media management within the same memory device package. An example of a managed memory device is a managed NAND (MNAND) device.</p><p id="p-0055" num="0054">The controller <b>115</b> and/or a memory device <b>130</b> can include a programming manager <b>113</b> configured to perform interleaved two-pass data programming with reduced write amplification. In some embodiments, the controller <b>115</b> in the memory sub-system <b>110</b> and/or the controller <b>150</b> in the memory device <b>130</b> can include at least a portion of the programming manager <b>113</b>. In other embodiments, or in combination, the controller <b>116</b> and/or the processing device <b>118</b> in the host system <b>120</b> includes at least a portion of the programming manager <b>113</b>. For example, the controller <b>115</b>, the controller <b>116</b>, and/or the processing device <b>118</b> can include logic circuitry implementing the programming manager <b>113</b>. For example, the controller <b>115</b>, or the processing device <b>118</b> (e.g., processor) of the host system <b>120</b>, can be configured to execute instructions stored in memory for performing the operations of the programming manager <b>113</b> described herein. In some embodiments, the programming manager <b>113</b> is implemented in an integrated circuit chip disposed in the memory sub-system <b>110</b>. In other embodiments, the programming manager <b>113</b> can be part of firmware of the memory sub-system <b>110</b>, an operating system of the host system <b>120</b>, a device driver, or an application, or any combination therein.</p><p id="p-0056" num="0055">For example, the programming manager <b>113</b> implemented in the controller <b>115</b> and/or the controller <b>150</b> can receive a predetermined number N of data groups (e.g., pages) for coarsely programming into a memory cell group in the memory device <b>130</b>. The coarsely programmed memory cell group is subsequent finely programmed to store the predetermined number N of bits per memory cells. The programming manager <b>113</b> generates a group of multi-bit indicators (e.g., n-bit indicators) for the memory cells by applying XOR (or XNOR) operations on the data groups. The programming manager <b>113</b> initiates a coarse programming to store the predetermined number N of data groups (e.g., pages) into the memory cell group, where each memory cell in the memory cell group stores one bit from each of the predetermined number N of data groups by being programmed to one of 2<sup>N </sup>threshold levels. Each memory cell in the memory cell group has a corresponding indicator that has bits each generated from an XOR or XNOR operation on some or all of its bits stored via the coarse programming. When an n-bit group indicator is used, the indicator identifies a set of possible threshold levels of the memory cell among 2<sup>n </sup>possible sets of threshold levels. When the indicator has a particular set of bit values, the set of possible threshold levels of the memory cell corresponds to eliminating, from the 2<sup>N </sup>threshold levels, 2<sup>n</sup>&#x2212;1 consecutive threshold levels after each threshold level selected for the group. The first 2<sup>n </sup>of the 2<sup>N </sup>threshold levels are selected for the 2<sup>n </sup>groups respectively. Thus, the threshold levels of the 2<sup>n </sup>groups are interleaved in the 2<sup>N </sup>threshold levels representing the 2<sup>N </sup>possible combinations of the values of N bits. Since the group indicators eliminate the intervening threshold levels, the memory device can read the data coarsely programmed into the memory cell group by differentiating 2<sup>N-n </sup>coarsely programmed regions of threshold distributions. For example, the programming precision of storing N-n bits per memory cell can be sufficient to read a memory cell programmed in a particular group to store N-bit of data, with the help of the group indicator that identifies the particular group. For example, a memory cell coarsely programmed in QLC mode but with MLC programming accuracy can be accurately read with a 2-bit group indicator; and the bits of the group indicators can be computed from XOR (or XNOR) of two of the 4 bits and from XOR (or XNOR) of the 4 bits. The XOR (or XNOR) preserves the ECC decodability of the indicator group. Thus, the reliability of reading the group indicator is improved.</p><p id="p-0057" num="0056">The n-bit group indicator provides n-bit redundant information for the N bits of data coarsely programmed in a memory cell. Thus, the memory device can be configured to read only N-n bits of data from the memory cell and obtain the remaining n bits using the n-bit redundant information provided by the n-bit group indicator. Alternatively, the N-bit data and n-bit group indicator can be used to form a codeword for error recovery using an ECC technique (e.g., LDPC).</p><p id="p-0058" num="0057">The read voltages of the 2<sup>n </sup>groups can be combined as a list of voltages in a monotonically increasing order for sensing and thus reading the coarsely programmed memory cell group. The memory cell group is applied a voltage starting from the lowest one in the list to the highest one in the list. At each applied read voltage, the memory device senses whether a substantial current can pass a memory cell at the applied read voltage. The result of sensing the current can be used to update a relevant bit to be stored in a memory cell in a relevant group. Through sensing each of the read voltages once in the increasing order, the memory cells of all groups can be read for multiple data groups. Thus, it is not necessary to ramp up voltages multiple passes to read different groups separately. The combined read reduces overhead and thus improves the speed of the two-pass programming operation.</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an integrated circuit memory device having a programming manager configured to program threshold voltages of memory cells to store data according to one embodiment. For example, the memory devices <b>130</b> in the memory sub-system <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> can be implemented using the integrated circuit memory device <b>130</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0060" num="0059">The integrated circuit memory device <b>130</b> can be enclosed in a single integrated circuit package. The integrated circuit memory device <b>130</b> includes multiple groups <b>131</b>, . . . , <b>133</b> of memory cells that can be formed in one or more integrated circuit dies. A typical memory cell in a group <b>131</b> (or group <b>133</b>) can be programmed to store one or more bits of data.</p><p id="p-0061" num="0060">Some of the memory cells in the integrated circuit memory device <b>130</b> can be configured to be operated together for a particular type of operations. For example, memory cells on an integrated circuit die can be organized in planes, blocks, and pages. A plane contains multiple blocks; a block contains multiple pages; and a page can have multiple strings of memory cells. For example, an integrated circuit die can be the smallest unit that can independently execute commands or report status; identical, concurrent operations can be executed in parallel on multiple planes in an integrated circuit die; a block can be the smallest unit to perform an erase operation; and a page can be the smallest unit to perform a data program operation (to write data into memory cells). Each string has its memory cells connected to a common bitline; and the control gates of the memory cells at the same positions in the strings in a block or page are connected to a common wordline. Control signals can be applied to wordlines and bitlines to address the individual memory cells.</p><p id="p-0062" num="0061">The integrated circuit memory device <b>130</b> has a communication interface <b>147</b> to receive a command having an address <b>135</b> from the controller <b>115</b> of a memory sub-system <b>110</b>, retrieve memory data <b>144</b> from memory cells identified by the memory address <b>135</b>, and provide at least the memory data <b>144</b> as part of a response to the command. Optionally, the memory device <b>130</b> may decode the memory data <b>144</b> (e.g., using an error-correcting code (ECC) technique) and provide the decoded data as part of a response to the command. An address decoder <b>141</b> of the integrated circuit memory device <b>130</b> converts the address <b>135</b> into control signals to select a group of memory cells in the integrated circuit memory device <b>130</b>; and a read/write circuit <b>143</b> of the integrated circuit memory device <b>130</b> performs operations to determine the memory data <b>144</b> stored in the memory cells at the address <b>135</b>.</p><p id="p-0063" num="0062">The integrated circuit memory device <b>130</b> has a set of latches <b>145</b> to hold memory data <b>144</b> temporarily while the read/write circuit <b>143</b> is programming the threshold voltages of a memory cell group (e.g., <b>131</b> or <b>133</b>). For example, the read/write circuit <b>143</b> can program the threshold voltages of memory cells in a memory cell group <b>131</b> to store N bits per memory cell. The memory cell group (e.g., <b>131</b> or <b>133</b>) has M memory cells. The latches <b>145</b> are configured to store N&#xd7;M bits of data in the form of N data groups. Each of the data group has M bits of data to be stored respectively into M memory cells in the memory cell group (e.g., <b>131</b> or <b>133</b>).</p><p id="p-0064" num="0063">When the latches <b>145</b> have N data groups to be stored into a memory cell group (e.g., <b>131</b>), the programming manager <b>113</b> is configured to determine and program threshold voltage levels of memory cells in the memory cell group (e.g., <b>131</b>). The threshold voltage levels can be determined according to the values of bits in the memory data <b>144</b> and a Gray code that maps bit value combinations to threshold levels, such that any two combinations of bit values represented by two successive threshold levels differ by and only by one bit.</p><p id="p-0065" num="0064">In one embodiment, the memory device <b>130</b> receives N data groups from the controller <b>115</b> of the memory sub-system <b>110</b> for coarse programming of the threshold voltages of memory cells in a memory cell group (e.g., <b>131</b>). The operating of coarse programming moves the threshold voltages of the memory cells to voltage regions that are close to the threshold levels for storing N data groups. The coarse programming is configured to store the N data groups to the memory cell group, where each memory cell stores one bit from each of the N data groups. The coarse programming maps the N bit values to be stored in each memory cell to its coarsely programmed threshold level, which is one of the 2<sup>N </sup>possible threshold levels used to represent 2<sup>N </sup>possible combinations of N-bit data. An indicator is generated to identify a subset of the 2<sup>N </sup>threshold levels that contains the coarsely programmed threshold level of the memory cell. An n-bit indicator can reduce the subset to 2<sup>N-n </sup>threshold levels, allowing the region of threshold distribution to be coarsely programmed to an accuracy level for reading a memory cell programmed to store N-n bits. Such an arrangement can reduce the precision requirement for the coarse programming and the time to perform the coarse programming and/or improve the accuracy of reading the N bit values from each coarsely programmed memory cell. The group indicators can be stored in other memory cell groups (e.g., <b>133</b>), with each memory cell group (e.g., <b>133</b>) being used to store one indicator bit in a SLC mode. To perform the fine programming, the group indicators can be read from the memory cell groups (e.g., <b>133</b>) and used to further read the coarsely programmed memory cell group (e.g., <b>131</b>). Since no further input is required from the controller <b>115</b> of the memory sub-system <b>110</b>, the fine programming can be scheduled for performance at a later time (e.g., when the memory device is idling, or less busy). To perform fine programming, the memory device <b>130</b> reads the group indicator, reads the data from the coarsely programmed memory cell group (e.g., <b>131</b>), and applies voltage pulses to narrow the regions of threshold distributions such that the finely programmed memory cell group (e.g., <b>131</b>) can be read without the help of the group indicators. After the fine programming, the group indicators can be discarded or deleted.</p><p id="p-0066" num="0065">In some implementations, the threshold levels of the coarse and fine programming are determined using a Gray code, as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. A Gray code can map a combination of bit values to a threshold level such that one bit and only one bit is changed in the bit values when the threshold level represented by the bit value combination changes to the next larger or smaller threshold level. In some implementations, the indicator group can be computed by applying XOR (or XNOR) to the N data groups.</p><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example of programming memory cells to store multiple bits per memory cell according to one embodiment. For example, the example of <figref idref="DRAWINGS">FIG. <b>3</b></figref> can be implemented in the memory device <b>130</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> and/or <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0068" num="0067">In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a memory cell group <b>131</b> has memory cells <b>137</b>, . . . , <b>139</b>. A number of data groups <b>151</b>, <b>157</b>, . . . , <b>159</b> provide data bits to be stored into the memory cells <b>137</b>, . . . , <b>139</b>. The number of bits provided in each data group (e.g., <b>157</b>, <b>159</b>, or <b>151</b>) equals to the number of memory cells <b>137</b> to <b>139</b> in the memory cell group <b>131</b>. Each memory cell (e.g., <b>139</b> or <b>137</b>) stores a set of bits, one from each of the data groups <b>151</b>, <b>157</b>, . . . , and <b>159</b>.</p><p id="p-0069" num="0068">For example, the data bits <b>161</b>, <b>163</b>, . . . , <b>165</b> from the data groups <b>151</b>, <b>157</b>, . . . , <b>159</b> are stored into one memory cell <b>137</b>; and the voltage threshold of the memory cell <b>137</b> is programmed by the read/write circuit <b>143</b> at a level that represents the values of the data bits <b>161</b>, <b>163</b>, . . . , <b>165</b>. Similarly, the data bits <b>171</b>, <b>173</b>, . . . , <b>175</b> from the data groups <b>151</b>, <b>157</b>, . . . , <b>159</b> are stored into another memory cell <b>139</b> and represented by the level of the voltage threshold of the memory cell <b>139</b>.</p><p id="p-0070" num="0069">Optionally, the data bits in a data group can be organized in codeword <b>153</b>, . . . codeword <b>155</b> according to an error detection and data recovery technique, such as error correction code (ECC) (e.g., low-density parity-check (LDPC) code).</p><p id="p-0071" num="0070">For example, a codeword <b>153</b> in the data group <b>151</b> can include data bit <b>161</b> to data bit <b>162</b>. When one of data bit in the codeword <b>153</b> is in error, the error can be detected and corrected (e.g., using a technique of low-density parity-check (LDPC)).</p><p id="p-0072" num="0071">When the data groups <b>151</b>, <b>157</b>, . . . , <b>159</b> are stored in the latches <b>181</b>, <b>183</b>, . . . , <b>185</b>, the read/write circuit <b>143</b> can program <b>149</b> thresholds of the memory cells <b>137</b>, . . . , <b>139</b> such that the voltage thresholds of the memory cells <b>137</b>, . . . , <b>139</b> represent the values of the respective data bits from the data groups <b>151</b>, <b>157</b>, . . . , <b>159</b>.</p><p id="p-0073" num="0072">A combination of the values of the data bits (e.g., <b>161</b>, <b>163</b>, . . . , <b>165</b>) to be stored in a memory cell (e.g., <b>137</b>) is mapped to the level of a voltage threshold of the memory cell (e.g., <b>137</b>) based on a Gray code. For example, a read/write circuit <b>143</b> can include a table of a Gray code (e.g., as illustrated by the table of <figref idref="DRAWINGS">FIG. <b>6</b></figref>) to map between the values of a set of data bits (e.g., <b>161</b>, <b>163</b>, . . . , <b>165</b>) of a memory cell (e.g., <b>137</b>) and a threshold level of the memory cell (e.g., <b>137</b>) that represents the values of the set of data bits (e.g., <b>161</b>, <b>163</b>, . . . , <b>165</b>).</p><p id="p-0074" num="0073">To accelerate the operation to program <b>149</b> threshold voltages of the memory cells <b>137</b>, . . . , <b>139</b> to store the data groups <b>151</b>, <b>157</b>, . . . , <b>159</b>, the read/write circuit <b>143</b> can be configured to use two-pass programming operations. In a first coarse programming, the threshold voltages of the memory cell group <b>131</b> are moved to relatively wide regions of threshold distribution near the fine regions of threshold distributions. The coarsely programmed threshold voltages are determined based on threshold levels representative of the data groups <b>151</b>, <b>157</b>, . . . , <b>159</b>. A group of threshold level indicators is computed and stored/buffered temporarily to assist the accurate reading of the data groups <b>151</b>, <b>157</b>, . . . , <b>159</b> from the coarsely programmed memory cell group <b>131</b>. After reading the data groups <b>151</b>, <b>157</b>, . . . , <b>159</b> back into the latches <b>183</b>, . . . , <b>185</b>, the read/write circuit <b>143</b> can perform the fine programming to move the threshold voltages of the memory cells <b>137</b>, . . . , <b>139</b> into fine regions of threshold distributions representative of the data bits in the data groups <b>151</b>, . . . , <b>157</b>, <b>159</b>, as discussed in further details below in connection with <figref idref="DRAWINGS">FIGS. <b>4</b> to <b>12</b></figref>.</p><p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a two-pass programming technique to store multiple bits per memory cell according to one embodiment. For example, the technique of <figref idref="DRAWINGS">FIG. <b>4</b></figref> can be implemented in the memory device <b>130</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> in a memory sub-system <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0076" num="0075">In <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a number (N) of data bits <b>163</b> to <b>165</b> are used to determine coarse programming threshold level T <b>203</b> through a mapping <b>201</b> between bit value combinations and coarse programming threshold levels.</p><p id="p-0077" num="0076">All possible coarse programming threshold levels are classified into 2<sup>n </sup>groups. For example, the 2<sup>N </sup>coarse programming threshold levels are numbered in an increasing order. The classification <b>205</b> is configured to place the first 2<sup>n </sup>threshold levels into 2<sup>n </sup>groups respectively. For each of the 2<sup>n </sup>groups, the classification <b>205</b> is configured to remove the next consecutive 2<sup>n</sup>&#x2212;1 threshold levels to select the next threshold level for the group. Thus, the 2<sup>N </sup>coarse programming threshold levels are equally divided into 2<sup>n </sup>groups, each having 2<sup>N-n </sup>threshold levels. Each pair of adjacent threshold levels in a group is separated by 2<sup>n</sup>&#x2212;1 threshold levels that belong to other groups. The threshold levels in the group are interleaved. The group identification <b>207</b> provides the identification of the group that contains the threshold level <b>203</b> of a memory cell <b>137</b> after the coarse programming. Since the group identification <b>207</b> limits the threshold level <b>203</b> to one of 2<sup>N-n </sup>threshold levels, the coarse programming can be performed with accuracy sufficient to read from memory cells storing N-n bit per memory cell.</p><p id="p-0078" num="0077">A first pass operation of threshold programming <b>219</b> is performed to move the threshold voltage <b>221</b> of the memory cell <b>137</b> of a memory cell group <b>131</b> to a relatively wide region of threshold distribution. The read/write circuit <b>143</b> can store <b>209</b> the group identification <b>207</b> of the memory cell <b>137</b> in one or more other memory cells <b>191</b> (e.g., in a different memory cell group <b>133</b> in a SLC mode).</p><p id="p-0079" num="0078">For the fine programming of the memory cell <b>137</b> to store the data bits <b>161</b>, <b>163</b>, . . . , <b>165</b>, the read/write circuit <b>143</b> can read <b>211</b> the group identification of the memory cell <b>137</b> from the memory cells <b>191</b> to assist the operation to read <b>213</b> the memory <b>137</b> for the retrieval of the data bits <b>161</b>, <b>163</b>, . . . , <b>165</b>. The group identification <b>207</b> eliminates 2<sup>n</sup>&#x2212;1 groups of the possible threshold levels representative of the values of the data bits <b>161</b>, <b>163</b>, . . . , <b>165</b>. Thus, the group identification allows the read/write circuit <b>143</b> to determine the values of the data bits <b>161</b>, <b>163</b>, . . . , <b>165</b> from the threshold voltage <b>221</b> that is coarsely programmed into a relatively wide region of threshold distribution, as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The read/write circuit <b>143</b> can read <b>213</b> the data bits <b>161</b>, <b>163</b>, . . . , <b>165</b> from the memory cell <b>137</b> into the latches <b>183</b>, . . . , <b>185</b> respectively.</p><p id="p-0080" num="0079">During the fine programming of the memory cell <b>137</b>, the data bits <b>161</b>, <b>163</b>, . . . , <b>165</b> in the latches <b>181</b>, <b>183</b>, . . . , <b>185</b> are again used to determine the fine programming threshold levels <b>223</b> through a mapping <b>217</b> between bit value combinations and fine programming threshold levels. The mapping <b>217</b> to the threshold level <b>223</b> for fine programming can be the same as the mapping <b>201</b> to the threshold level <b>203</b> for the coarse programming.</p><p id="p-0081" num="0080">A second pass operation of threshold programming <b>229</b> is performed to move the threshold voltage <b>225</b> of the memory cell <b>137</b> of a memory cell group <b>131</b> to a relatively narrow region of threshold distribution. The region is sufficiently narrow to allow the read/write circuit <b>143</b> to determine the data bits <b>161</b>, <b>163</b>, . . . , <b>165</b> based on sensing the threshold voltage <b>225</b> of the memory cell <b>137</b>. Thus, the group identification <b>207</b> can be discarded after the second pass operation of threshold programming <b>229</b>.</p><p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates voltage distributions for two-pass programming of memory cells according to one embodiment. For example, the two-pass programming technique of <figref idref="DRAWINGS">FIG. <b>4</b></figref> can be implemented based on the distributions illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref> to store data in a QLC mode (four bits per memory cell).</p><p id="p-0083" num="0082">In <figref idref="DRAWINGS">FIG. <b>5</b></figref>, to program a memory cell <b>137</b> to store data in the QLC mode, the threshold voltage of the memory cells is moved to one of 16 QLC threshold levels 0, 1, . . . , 15 centered at voltages V<sub>0</sub>, V<sub>2</sub>, . . . , V<sub>15</sub>.</p><p id="p-0084" num="0083">After the fine QLC threshold programming <b>229</b>, the regions of threshold distributions are narrow, as illustrated by the curves illustrated for fine QLC. For example, when the memory cell <b>137</b> is finely programmed to QLC threshold level 0, the probability level of the threshold voltage of the memory cell <b>137</b> being at voltages near V<sub>0 </sub>is illustrated by a curve <b>241</b> centered at V<sub>0</sub>. The voltage range of the curve <b>241</b> represents the region of threshold distribution at QLC threshold level 0 after fine QLC programming.</p><p id="p-0085" num="0084">Similarly, when the memory cell <b>137</b> is finely programmed to QLC threshold level 1, the probability level of the threshold voltage of the memory cell <b>137</b> being at voltages near V<sub>1 </sub>is illustrated by a curve <b>243</b> centered at V<sub>1</sub>. The voltage range of the curve <b>243</b> represents the region of threshold distribution at QLC threshold level 1 after fine QLC programming.</p><p id="p-0086" num="0085">At the voltage region <b>249</b>, the curves <b>241</b> and <b>243</b> overlap with each other, which indicates that when the threshold voltage of the memory cell <b>137</b> is found in the region <b>249</b>, there is an ambiguity as to whether the memory cell <b>137</b> is programmed at threshold level 0 to represent one set of bit values, or at threshold level 1 to represent another set of bit values. When the mapping between the bit value combinations and threshold levels is based on a Gray code, the bit values represented by threshold level 0 and threshold level 1 differ by one bit. Thus, there is a small probability that this bit, determined based on the threshold voltage of the memory cell <b>137</b>, is read incorrectly. An error in such a bit can be typically detected and corrected via ECC/LPDC decoding of a codeword (e.g., <b>153</b>) in a data group (e.g., <b>151</b>) that contains the bit. Reducing the overlapping region can improve the accuracy in reading the memory cell <b>137</b>. However, reducing the widths of the distribution curves <b>241</b>, <b>243</b> requires higher precision and thus longer time in programming the threshold voltage of the memory cell <b>137</b>.</p><p id="p-0087" num="0086">In <figref idref="DRAWINGS">FIG. <b>5</b></figref>, to program the threshold voltage of the memory cell <b>137</b> to the fine QLC levels with narrow distribution curves <b>241</b>, <b>243</b>, etc., the read/write circuit <b>143</b> of the memory device <b>130</b> initially programs coarsely the memory cells to corresponding coarse QLC levels according to the four data bits (e.g., <b>161</b>, <b>163</b>, . . . , <b>165</b>) to be stored in the memory cell <b>137</b>.</p><p id="p-0088" num="0087">For example, when the four data bits of the memory cell <b>137</b> is coarsely programmed to QLC threshold level 0, the probability level of the threshold voltage of the memory cell <b>137</b> being at voltages near V<sub>0 </sub>is illustrated by a curve <b>251</b> centered at V<sub>0</sub>. The voltage range of the curve <b>251</b> represents the region of threshold distribution at QLC threshold level 0 after the coarse programming.</p><p id="p-0089" num="0088">Similarly, when the three data bits of the memory cell <b>137</b> is coarsely programmed to QLC threshold level 1, the probability level of the threshold voltage of the memory cell <b>137</b> being at voltages near V<sub>0 </sub>is illustrated by a curve <b>253</b> centered at V<sub>1</sub>. The voltage range of the curve <b>253</b> represents the region of threshold distribution at QLC threshold level 1 after the coarse programming.</p><p id="p-0090" num="0089">The coarse QLC curves (e.g., <b>251</b> and <b>253</b>) have significant overlap with each other, which can lead to many read errors.</p><p id="p-0091" num="0090">To reduce the time for coarse programming and to reduce read errors, a group identification <b>207</b> is computed and/or stored to identify a group of threshold levels that contains the threshold level of the coarsely programmed memory cell <b>137</b>.</p><p id="p-0092" num="0091">In <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the sixteen threshold levels of the coarse QLC programming are divided into four groups. The first four levels V<sub>0</sub>, V<sub>1</sub>, V<sub>2</sub>, and V<sub>3 </sub>of the coarse QLC programming are assigned to groups 0, 1, 2 and 3 respectively. For each group, the next selected threshold levels can be identified by elimination the next consecutive three threshold levels. Thus, each group has four threshold levels, corresponding to the threshold levels of an MLC mode.</p><p id="p-0093" num="0092">For example, the threshold level V<sub>0 </sub>of coarse QLC programming is selected for group 0 as its threshold level V<sub>0 </sub>for MLC reading. After eliminating the next 3 consecutive threshold levels V<sub>1</sub>, V<sub>2</sub>, and V<sub>3 </sub>of coarse QLC programming, threshold level V<sub>4 </sub>of coarse QLC programming is selected for group 0 as its next threshold level V<sub>1 </sub>of MLC reading. Thus, the threshold levels V<sub>0</sub>, V<sub>4</sub>, V<sub>8 </sub>and V<sub>12 </sub>of the coarse QLC programming are classified as threshold levels V<sub>0</sub>, V<sub>1</sub>, V<sub>2</sub>, and V<sub>3 </sub>in group 0 of MLC reading. If the memory cell <b>137</b> is coarsely programmed to any of the threshold levels V<sub>0</sub>, V<sub>4</sub>, V<sub>8 </sub>and V<sub>12</sub>, the memory cell <b>137</b> is classified to be in group 0 for the reading of its data. The threshold levels of other group 1, 2, or 3 for MLC reading are selected in a similar way.</p><p id="p-0094" num="0093">When the group identification <b>207</b> indicates that the memory cell <b>137</b> is coarsely programmed to a threshold level contained in group 0 for MLC reading, the possible threshold voltage distributions are represented by the alternating curves <b>251</b>, <b>255</b>, etc. The distribution curves of groups 1, 2, and 3 for MLC reading are not possible. Thus, the threshold voltage of the memory cell <b>137</b> can be mapped back to a threshold level without ambiguity and be mapped back to the bit values represented by the threshold level.</p><p id="p-0095" num="0094">Similarly, when the group identification <b>207</b> indicates that the memory cell <b>137</b> is coarsely programmed to a threshold level in group 1 for MLC reading, the possible threshold voltage distributions are represented by the alternating curves <b>253</b>, <b>257</b>, etc. The distribution curves of other threshold levels (e.g., curve <b>251</b>) are not possible. Thus, the threshold voltage of the memory cell <b>137</b> can be mapped back to a unique threshold level and the bit values represented by the corresponding threshold level.</p><p id="p-0096" num="0095">The group identification <b>207</b> allows the read/write circuit <b>143</b> to differentiate the alternating distribution curves (e.g., <b>251</b>, <b>255</b>, . . . , in group 0; or <b>253</b>, <b>237</b>, . . . , in group 1) for a coarsely programmed memory cell. The reduced number of distribution curves (e.g., <b>251</b>, <b>255</b>, . . . , in group 0; or <b>253</b>, <b>237</b>, . . . , in group 1) can be read in an MLC mode. Thus, the distribution curves (<b>251</b>, <b>255</b>, . . . ; <b>253</b>, <b>257</b>, . . . ) of the coarse QLC programming can be as coarse as programmed for MLC modes; and the coarsely programmed memory cell <b>137</b> can be read in a MLC mode identified by the group identification <b>207</b>.</p><p id="p-0097" num="0096">For example, based on the group identification <b>207</b> identifying the memory cell <b>137</b> being coarsely programmed according to a level in group 0, the read/write circuit <b>143</b> can use a group 0 MLC read mode to determine the coarsely programmed threshold level of the memory cell <b>137</b> and thus the four data bits (e.g., <b>163</b>, . . . , <b>165</b>) stored in the memory cell <b>137</b> through coarse programming.</p><p id="p-0098" num="0097">Similarly, based on the group identification <b>207</b> identifying the memory cell <b>137</b> being coarsely programmed according to a level in group 1, the read/write circuit <b>143</b> can use a group 1 MLC read mode to determine the coarsely programmed threshold level of the memory cell <b>137</b> and thus the four data bits (e.g., <b>163</b>, . . . , <b>165</b>) stored in the memory cell <b>137</b> through coarse programming.</p><p id="p-0099" num="0098">From an alternative point of view, the threshold distribution curves of each group (e.g., 0, 1, 2, or 3) can be seen as the result of programming the corresponding data to the respective threshold levels in a respective MLC mode; and the MLC threshold levels of each group is configured to represent respective QLC threshold levels and thus the corresponding four bit values. The voltage levels of different groups 0, 1, 2, and 3 MLC programming are offset from each other so that none of their distribution curves overlap with each other (or the overlap is reduced/minimized to allow occasional errors to be corrected through ECC operations); and the collection of the voltage levels of the groups 0, 1, 2, and 3 MLC programming corresponds to the threshold levels of the QLC programming. Based on the group identification <b>207</b>, the memory cell <b>137</b> is to be read according to the one of the groups 0, 1, 2 and 3 MLC modes.</p><p id="p-0100" num="0099">After the threshold voltage of the memory cell <b>137</b> is coarsely programmed to a coarse QLC level, the threshold voltage of the memory cell <b>137</b> can be further finely programmed to a corresponding fine QLC level to represent the four data bits (e.g., <b>161</b>, <b>163</b>, . . . , <b>165</b>) stored in the memory cell <b>137</b>. The regions of threshold distributions of the fine QLC levels are reduced in width, from the corresponding coarse QLC levels, such that the memory device <b>130</b> can determine the programmed threshold levels from the threshold voltage of the memory cell <b>137</b> without the help of the group identification <b>207</b>.</p><p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows mapping to threshold levels and group identifications in two-pass programming of memory cells to store data according to one embodiment. For example, the mapping of <figref idref="DRAWINGS">FIG. <b>6</b></figref> can be used with the distribution curves illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example of data programming in a QLC mode where the threshold voltage of a memory cell (e.g., <b>137</b>) is programmed to represent the values of four bits. A page of memory cells is programmed (written into) together. Since each cell stores four bits, the page of memory cells can store four data pages of data bits, where the number of data bits in a data page is equal to the number of memory cells in a memory cell page. For example, each data page is an example of a data group illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>; and the memory cell page is an example of a memory cell group illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0103" num="0102">Conventionally and/or for convenience, the four data pages for a QLC mode are named as lower page (LP), upper page (UP), extra page (XP), and top page (TP) respectively. A memory cell (e.g., <b>137</b>) in a QLC mode stores one bit from each of the four pages. Since the values of the four data bits stored in a memory cell (e.g., <b>137</b>) have 16 different combinations, as illustrated in the table shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the threshold voltage of the memory cell (e.g., <b>137</b>) is programmed to one of 16 QLC threshold levels to represent a corresponding combination of bit values.</p><p id="p-0104" num="0103">The table shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example Gray code that maps between the values of the four data bits (e.g., <b>161</b>, <b>163</b>, . . . , <b>165</b>) stored in a QLC memory cell (e.g., <b>137</b>) and the threshold level <b>203</b> of the memory cell (e.g., <b>137</b>). For example, when the memory cell (e.g., <b>137</b>) is determined to have a QLC threshold level of 0, the memory cell (e.g., <b>137</b>) is considered to store 1 as the TP bit, 1 as the XP bit, 1 as the UP bit, and 1 as the LP bit. Similarly, to store 1, 1, 0, and 1 as TP, XP, UP and LP bits in the memory cell (e.g., <b>137</b>), the threshold voltage is programmed to level 1. An increasing threshold level represents an increasing threshold voltage to be programmed for the memory cell (e.g., <b>137</b>).</p><p id="p-0105" num="0104">A Gray code (e.g., as illustrated in the table of <figref idref="DRAWINGS">FIG. <b>6</b></figref>) has the characteristics/propriety where one and only one bit value changes between two successive threshold levels. For example, when QLC threshold level changes from 0 to 1, only the UP bit changes from 1 to 0 in the table of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. Similarly, when QLC threshold level changes between 1 and 2 (or, 2 and 3, 3 and 4, 4 and 5, etc.), only the LP bit changes (or, the UP bit, the TP bit, the XP bit, etc. respectively).</p><p id="p-0106" num="0105">In <figref idref="DRAWINGS">FIG. <b>6</b></figref>, QLC levels 0, 4, 8, 12 are arranged in group 0; and group 0 is identified by two-bit ID having 0 and 0 as bit <b>0</b> and bit <b>1</b> respectively. QLC levels 0, 4, 8, 12 can be seen as MLC levels 0, 1, 2 and 3 for group 0. A memory cell <b>137</b> programmed to a QLC level in group 0 can be read in an MLC mode that is specific for group 0.</p><p id="p-0107" num="0106">QLC levels 1, 5, 9, 13 are arranged in group 1; and group 1 is identified by two-bit ID having 1 and 0 as bit <b>0</b> and bit <b>1</b> respectively. QLC levels 1, 5, 9, 13 can be seen as MLC levels 0, 1, 2 and 3 for group 1. A memory cell <b>137</b> programmed to a QLC level in group 1 can be read in an MLC mode for that is specific group 1.</p><p id="p-0108" num="0107">QLC levels 2, 6, 10, 14 are arranged in group 2; and group 2 is identified by two-bit ID having 1 and 1 as bit <b>0</b> and bit <b>1</b> respectively. QLC levels 2, 6, 10, 14 can be seen as MLC levels 0, 1, 2 and 3 for group 2. A memory cell <b>137</b> programmed to a QLC level in group 2 can be read in an MLC mode that is specific for group 2.</p><p id="p-0109" num="0108">QLC levels 3, 7, 11, 15 are arranged in group 3; and group 3 is identified by two-bit ID having 0 and 1 as bit <b>0</b> and bit <b>1</b> respectively. QLC levels 3, 7, 11, 15 can be seen as MLC levels 0, 1, 2 and 3 for group 3. A memory cell <b>137</b> programmed to a QLC level in group 3 can be read in an MLC mode that is specific for group 3.</p><p id="p-0110" num="0109">In <figref idref="DRAWINGS">FIG. <b>6</b></figref>, bit <b>0</b> of group ID is equal to the XOR of TP, XP, UP and LP bits; and bit <b>1</b> of group ID is equal to the XOR of TP and LP bits. Thus, the collections of TP, XP, UP and LP bits and the bits <b>0</b> and <b>1</b> of group ID can be seen as a LDPC codeword that can be used to detect and correct errors in some of the bits in the codeword. Alternatively, the XOR relation about the bits can be used to compute some of the TP, XP, UP and LP bits from the group ID. For example, TP bit can be computed from XOR of bit <b>1</b> of group ID and LP bit; and XP bit can be computed from XOR of UP bit and bits <b>1</b> and <b>0</b> of group ID.</p><p id="p-0111" num="0110"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example of bits <b>0</b> and <b>1</b> of group ID computed via XOR. Alternatively, bits <b>0</b> and <b>1</b> of group ID can be computed via XNOR.</p><p id="p-0112" num="0111">In general, the group identification (ID) can be computed from XOR (or XNOR) of bits to be stored in a memory cell (e.g., UP, UP, and LP bits). When such group identifications are used, one or more of the bits stored in the memory cell (e.g., TP, and XP bits) can be computed from XOR (or XNOR) of the group identification with other bits. Such an arrangement can simplify the reading of multiple bits from the memory cell.</p><p id="p-0113" num="0112"><figref idref="DRAWINGS">FIGS. <b>5</b> and <b>6</b></figref> illustrate an example in which each pair of adjacent, closest MLC levels of each group are separated by one MLC level from each of other groups. Such an arrangement can maximize the minimum gap between closest pairs of MLC levels in each group. In general, it is not necessary to interleave the MLC levels of different groups in such a way. When each pair of adjacent MLC levels of each group are sufficiently separately, the MLC levels of each group can be read accurately, even though the threshold distributions of the coarse QLC programming (e.g., as illustrated by curves <b>251</b>, <b>253</b>, <b>255</b>, <b>257</b>) are too wide to read in QLC mode without the help of the group identification <b>207</b>.</p><p id="p-0114" num="0113"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a technique to coarsely program a memory cell to store data in a QLC level and to read the coarsely programmed memory cell according to one embodiment.</p><p id="p-0115" num="0114">The technique of <figref idref="DRAWINGS">FIG. <b>7</b></figref> is an example of the use of the technique of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The technique of <figref idref="DRAWINGS">FIG. <b>7</b></figref> can be implemented using the mapping showing in <figref idref="DRAWINGS">FIG. <b>6</b></figref> and the threshold distributions illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0116" num="0115">In <figref idref="DRAWINGS">FIG. <b>7</b></figref>, four data bits to be stored in a memory cell <b>137</b> are received as LP bit <b>261</b>, UP bit <b>263</b>, XP bit <b>265</b> and TP bit <b>267</b>. A logic circuit computes the XOR <b>273</b> of the four data bits to generate bit A <b>274</b> of a group identification <b>207</b> for the memory cell <b>137</b>; and another logic circuit computes the XOR <b>271</b> of the TP bit <b>267</b> and the LP bit <b>261</b> to generate bit B <b>272</b> of the group identification <b>207</b> for the memory cell <b>137</b>.</p><p id="p-0117" num="0116"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates the use of XOR <b>271</b> and XOR <b>273</b> to compute the group identification <b>207</b>. Alternatively, XNOR can be used.</p><p id="p-0118" num="0117">When the XOR <b>271</b> is used to combine LP bit <b>261</b> and TP bit <b>267</b> to form bit B <b>272</b> of the group identification <b>207</b>, ECC/LPDC codewords containing the LP bit <b>261</b> and the TP bit <b>267</b> respective are effectively combined via XOR to generate a valid ECC/LPDC codeword containing the bit B <b>272</b>. Thus, ECC/LPDC techniques can be used to detect and/or correct errors in reading the bit B <b>272</b> of the group identification <b>207</b>.</p><p id="p-0119" num="0118">Similarly, when the bit A <b>274</b> is computed via XOR <b>273</b>, a valid ECC/LPDC codeword containing the bit A <b>274</b> is also generated from the XOR of the codewords containing the LP, UP, XP, and TP bits. ECC/LPDC techniques can be used to detect and/or correct errors in reading the bit A <b>274</b> of the group identification <b>207</b>.</p><p id="p-0120" num="0119">The group identification <b>207</b> can be buffered in two memory cells in SLC mode. Alternatively, the group identification <b>207</b> can be buffered in a memory cell in MLC mode.</p><p id="p-0121" num="0120">For example, the values of bit A <b>274</b> of a page of memory cells being programmed coarsely in QLC mode can be stored/buffered in a page of memory cells in SLC mode; and the values of bit B <b>272</b> can be stored/buffered in another page of memory cells in SLC mode. After reading the SLC buffer pages, ECC/LPDC techniques can be applied to codewords in the SLC buffer pages to detect and/or correct errors.</p><p id="p-0122" num="0121">The combination of the values of the LP, UP, XP and TP bits is mapped to a QLC threshold level (e.g., using the table of <figref idref="DRAWINGS">FIG. <b>6</b></figref>). The read/write circuit <b>143</b> of the memory device <b>130</b> can apply coarse programming pulses to move the threshold voltage <b>221</b> of the memory cell <b>137</b> to a coarse region of threshold distribution.</p><p id="p-0123" num="0122">For example, when the combination of the values of the LP, UP, XP and TP bits corresponds to coarse QLC threshold level V<sub>0</sub>, the threshold voltage <b>221</b> of the memory cell <b>137</b> is moved into a region represented by the curve <b>251</b>. The probability density of the threshold voltage <b>221</b> being at a voltage within the region of the curve <b>251</b> is the highest at the voltage V<sub>0</sub>, and reduces when away from the voltage V<sub>0</sub>.</p><p id="p-0124" num="0123">To read the memory cell <b>137</b>, the group identification <b>207</b> is used to determine the read voltages <b>275</b> for testing the threshold level of the memory cell <b>137</b>. For example, when the memory cell <b>137</b> is programmed to threshold level V<sub>0 </sub>and thus in the group 0, a read voltage between V<sub>0 </sub>and V<sub>1 </sub>of group 0 MLC levels can be used to determine whether the threshold voltage <b>221</b> of the memory cell <b>137</b> is below the read voltage. For example, the read/write circuit <b>143</b> applies the read voltage to the memory cell <b>137</b> and determines whether a substantial current passes through the memory cell. If so, the threshold voltage <b>221</b> of the memory cell <b>137</b> is below the applied read voltage; and the memory cell is determined to be programmed at threshold V<sub>0 </sub>of group 0 MLC levels; and the values of the LP, UP, XP and TP bits represented by the threshold level can be determined from the table illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0125" num="0124">If no substantial current passes through the memory cell <b>137</b> when the read voltage between V<sub>0 </sub>and V<sub>1 </sub>of group 0 MLC levels is applied, the memory cell <b>137</b> is not programmed at the threshold level V<sub>0 </sub>of group 0 MLC levels. Thus, further read threshold voltages between V<sub>1 </sub>and V<sub>2 </sub>and between V<sub>2 </sub>and V<sub>3 </sub>of group 0 MLC levels can be applied to determine if the threshold voltage of the memory cell <b>137</b> is programmed at V<sub>1</sub>, V<sub>2</sub>, or V<sub>3 </sub>of the group 0 MLC levels.</p><p id="p-0126" num="0125">When the group identification <b>207</b> indicates that the threshold voltage <b>221</b> is programmed according to group 1, 2, or 3, the corresponding read voltages <b>275</b> configured according to group 1, 2, or 3 MLC levels can be applied to determine the threshold level of the memory cell <b>137</b> based on whether the threshold voltage <b>221</b> is lower than the read voltages <b>275</b>.</p><p id="p-0127" num="0126"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows an example of combining two bits (TP bit <b>267</b> and LP bit <b>261</b>) to generate a bit <b>272</b> of the group ID <b>207</b>. Such a selection can generate optimal results for a Gray code (2-4-4-5) illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. In general, more or less bits can be used to generate a bit of the group ID <b>207</b>. For example, when another Gray code (3-4-4-4) is used, one bit of the group ID <b>207</b> can be computed from XOR of LP, UP and XP bits, and the other from XOR of LP, UP and TP bits. For example, when a further Gray code (3-3-4-5) is used, one bit of the group ID <b>207</b> can be computed from XOR of LP, UP and XP bits, and the other from XOR of UP, XP and TP bits. For example, when yet another Gray code is used, one bit of the group ID <b>207</b> can be equal to XP; and the other from XOR of LP, UP, XP and TP bits. Thus, the technique is not limited to a combination of bits of a specific number.</p><p id="p-0128" num="0127"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows another technique to read the coarsely programmed memory cell according to one embodiment.</p><p id="p-0129" num="0128">Similar to the technique of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the technique of <figref idref="DRAWINGS">FIG. <b>8</b></figref> uses XOR <b>271</b> and XOR <b>273</b> to compute the group identification <b>207</b>. Alternatively, XNOR can be used.</p><p id="p-0130" num="0129">In addition to the use of group identification <b>207</b> to determine the read voltages <b>275</b> to read <b>213</b> the memory cell <b>137</b> in an MLC mode, the bits <b>272</b> and <b>274</b> of the group identification <b>207</b> are used to compute the TP bit <b>267</b> and XP bit <b>265</b> using XOR <b>283</b> and XOR <b>281</b>.</p><p id="p-0131" num="0130">Since the TP and XP bits can be computed using the LP bit <b>261</b>, UP bit <b>263</b>, and the group identification <b>207</b>, the operation to read <b>213</b> the memory cell <b>137</b> can be simplified by reading LP and UP bits of the four bits.</p><p id="p-0132" num="0131"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example of computing TP and XP bits using the group identification <b>207</b>. Alternatively, LP and/or UP bits can be computed based on TP and/or XP bits. For example, LP bit <b>261</b> can be computed from the XOR of the TP bit and bit B <b>272</b> of the group identification <b>207</b>; and UP bit <b>263</b> can be computed from the XOR of the XP bit <b>265</b> and bits <b>272</b> and <b>274</b> of the group identification <b>207</b>.</p><p id="p-0133" num="0132"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows techniques to determine the value of a bit stored in a memory cell coarsely programmed in a group of predefined threshold levels according to one embodiment.</p><p id="p-0134" num="0133">For example, the techniques of <figref idref="DRAWINGS">FIG. <b>9</b></figref> can be used to read a memory cell <b>137</b> programmed to a threshold level in group 0, 1, 2, or 3 MLC levels illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0135" num="0134">In <figref idref="DRAWINGS">FIG. <b>9</b></figref>, curves <b>193</b>, <b>195</b>, <b>197</b> and <b>199</b> represent the probability distributions of the threshold voltage <b>221</b> of a memory cell <b>137</b> after programming at threshold levels V<sub>0</sub>, V<sub>1</sub>, V<sub>2 </sub>and V<sub>3 </sub>respectively.</p><p id="p-0136" num="0135">Read voltages V<sub>R0</sub>, V<sub>R1 </sub>and V<sub>R2 </sub>are configured between the adjacent threshold distribution curves <b>193</b>, <b>195</b>, <b>197</b> and <b>199</b>. The read/write circuit <b>143</b> of the memory device <b>130</b> can apply a read voltage (e.g., V<sub>R0</sub>, V<sub>R1 </sub>or V<sub>R2</sub>) to the memory cell <b>137</b> and sense whether a substantial current (e.g., higher than a threshold) goes through the memory cell <b>137</b>. If so, the threshold voltage <b>221</b> of the memory cell <b>137</b> is lower than the applied read voltage (e.g., V<sub>R0</sub>, V<sub>R1 </sub>or V<sub>R2</sub>).</p><p id="p-0137" num="0136">In block <b>301</b>, when the threshold voltage <b>221</b> of the memory cell <b>137</b> is found to be lower than the read voltage V<sub>R0</sub>, the threshold voltage <b>221</b> of the memory cell <b>137</b> is seen to be programmed to level V<sub>0</sub>, which represents that the stored bit <b>291</b> in the memory cell <b>137</b> has a first value associated with level V<sub>0 </sub>(e.g., <b>1</b> in the example illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>). Otherwise, in block <b>303</b>, when the threshold voltage <b>221</b> of the memory cell <b>137</b> is found to be lower than the read voltage V<sub>R1</sub>, the threshold voltage <b>221</b> of the memory cell <b>137</b> is seen to be programmed to level V<sub>1</sub>, which represents that the stored bit <b>291</b> in the memory cell <b>137</b> has a second value associated with level V<sub>1 </sub>(e.g., 0 in the example illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>). Otherwise, in block <b>305</b>, when the threshold voltage <b>221</b> of the memory cell <b>137</b> is found to be lower than the read voltage V<sub>R2</sub>, the threshold voltage <b>221</b> of the memory cell <b>137</b> is seen to be programmed to level V<sub>2</sub>, which represents that the stored bit <b>291</b> in the memory cell <b>137</b> has a third value associated with level V<sub>2 </sub>(e.g., 0 in the example illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>). Otherwise, the threshold voltage <b>221</b> of the memory cell <b>137</b> is seen to be programmed to level V<sub>3</sub>, which represents that the stored bit <b>291</b> in the memory cell <b>137</b> has a fourth value associated with level V<sub>3 </sub>(e.g., 1 in the example illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>).</p><p id="p-0138" num="0137">When the mapping between the levels V<sub>0</sub>, V<sub>1</sub>, V<sub>2</sub>, and V<sub>3 </sub>and their respective values are known, it can be possible to skip the operation of current sensing at some of the read voltages.</p><p id="p-0139" num="0138">In the example illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>, the levels V<sub>1 </sub>and V<sub>2 </sub>both are used to represent a same value of zero. The threshold voltage <b>221</b> of the memory cell <b>137</b> being programmed at consecutive V<sub>1 </sub>or V<sub>2 </sub>provides the same value of zero for the stored bit <b>291</b>. Thus, it is not necessary to separately test whether the memory cell <b>137</b> is programmed at V<sub>1 </sub>or V<sub>2</sub>; and the sensing at read voltage V<sub>R1 </sub>can be skipped. When the current sensing at read voltage V<sub>R0 </sub>indicates at block <b>301</b> that the threshold voltage <b>221</b> of the memory cell <b>137</b> is higher than V<sub>R0</sub>, the conclusion <b>307</b> can be made that the threshold level of the memory cell <b>137</b> is higher than V<sub>0</sub>. When the current sensing at read voltage V<sub>R2 </sub>indicates at block <b>305</b> that the threshold voltage <b>221</b> of the memory cell <b>137</b> is lower than V<sub>R2</sub>, the conclusion <b>309</b> can be made that the threshold level of the memory cell <b>137</b> is lower than V<sub>3</sub>. From the conclusions <b>307</b> and <b>309</b> it can be determined that the memory cell <b>137</b> is programmed at either V<sub>1 </sub>or V<sub>2</sub>. Since both threshold levels V<sub>1 </sub>and V<sub>2 </sub>represent the same value of zero, the value of the stored bit <b>291</b> can be determined without ambiguity.</p><p id="p-0140" num="0139">In general, it is sufficient to perform sensing at read voltages that separate a pair of adjacent, closest threshold levels representing different values. The value of the stored bit <b>291</b> can be initially assumed and set to have the value (e.g., 1) represented by the lowest level V<sub>0</sub>. The smallest read voltage (e.g., V<sub>R0</sub>) that separates levels (e.g., V<sub>0 </sub>and V<sub>1</sub>) representing different values (e.g., 1 and 0) can be applied to the memory cell <b>137</b>. When a current passing the memory cell <b>137</b> at the read voltage (e.g., V<sub>R0</sub>) is sensed to be above a threshold, the assumed value for the stored bit <b>291</b> is correct; otherwise, the assumed value is inverted to be the value (e.g., 0) represented by the next level (e.g., V<sub>1</sub>) that is immediately above the read voltage (e.g., V<sub>R0</sub>). Such sensing operations can be repeated at increasingly higher read voltages that separate levels representing different bit values until the value of the stored bit <b>291</b> is determined.</p><p id="p-0141" num="0140"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates an example of mapping between the values of the stored bit <b>291</b> and the threshold levels V<sub>0</sub>, V<sub>1</sub>, V<sub>2</sub>, and V<sub>3 </sub>that corresponds to the mapping between the values of LP bit and the group 0 MLC levels. The techniques of <figref idref="DRAWINGS">FIG. <b>9</b></figref> can be similarly applied to mapping between the values of UP bit (XP bit, or TP bit) and the group 1 (2 or 3) MLC levels.</p><p id="p-0142" num="0141"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a method to read a memory cell coarsely programmed in a group of predefined threshold levels according to one embodiment. For example, the method of <figref idref="DRAWINGS">FIG. <b>10</b></figref> can be performed by a read/write circuit <b>143</b> of the memory device <b>130</b> using a technique discussed above in connection with <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0143" num="0142">At block <b>321</b>, a memory device <b>130</b> sets a result of reading a stored bit <b>291</b> from a memory cell to a bit value (e.g., 1) associated with a first region of threshold distribution (e.g., represented by the distribution curve <b>193</b>).</p><p id="p-0144" num="0143">At block <b>323</b>, the memory device <b>130</b> applies, to the memory cell <b>137</b>, a read voltage (e.g., V<sub>R0</sub>) between two adjacent regions of threshold distribution (e.g., represented by the distribution curves <b>193</b> and <b>195</b>) representing different bit values (e.g., 1 and 0).</p><p id="p-0145" num="0144">At block <b>325</b>, the memory device <b>130</b> determines whether the threshold voltage <b>221</b> of the memory cell <b>137</b> is lower than the read voltage (e.g., V<sub>R0</sub>). For example, the current passing through the memory cell <b>137</b> at the read voltage (e.g., V<sub>R0</sub>) is compared to a threshold. If the current is larger than the threshold, the threshold voltage <b>221</b> of the memory cell <b>137</b> is lower than the read voltage (e.g., V<sub>R0</sub>); and the value of the stored bit <b>291</b> is identified. At block <b>331</b>, the memory device <b>130</b> provides the result as the value of the stored bit <b>291</b>.</p><p id="p-0146" num="0145">If the threshold voltage <b>221</b> of the memory cell <b>137</b> is higher than the read voltage (e.g., V<sub>R0</sub>), at block <b>327</b> the memory device <b>130</b> inverts the result to set the result to the bit value (e.g., 0) associated with the higher one of the two regions (e.g., represented by the distribution curve <b>195</b>).</p><p id="p-0147" num="0146">At block <b>329</b>, the memory device <b>130</b> determines whether there is a next read voltage (e.g., V<sub>R2</sub>) that separates two adjacent regions of threshold distribution (e.g., represented by the distribution curves <b>197</b> and <b>199</b>) representing different bit values (e.g., 0 and 1). If so, operations in blocks <b>323</b> to <b>329</b> can be repeated for the next read voltage (e.g., V<sub>R2</sub>).</p><p id="p-0148" num="0147">In general, a memory cell group (e.g., <b>131</b>) have different memory cells (e.g., <b>137</b>, . . . , <b>139</b>) that are programmed to different ones of the groups 0, 1, 2, and 3 MLC levels. It is possible to read memory cells in group 0, and the memory cells in group 1, etc., sequentially. However, such an arrange can result in overhead in spending time ramping up voltages to reach read voltages of the respective groups 0, 1, 2 and 3.</p><p id="p-0149" num="0148">To reduce the overhead, the read voltages of groups 0, 1, 2 and 3 can be stacked, interleaved, and arranged in an increase order such that the memory device <b>130</b> can stepwise increase the voltage applied to a group of memory cells (e.g., <b>137</b>, . . . , <b>139</b>) to various read voltages, from the lowest voltage one to the highest read voltages. When a read voltage of a particular group (e.g., group 0 MLC levels) is applied, the result of each memory cell belong to the group can be updated according to the sensing of the current passing through the memory cell, as illustrated in <figref idref="DRAWINGS">FIG. <b>11</b></figref>.</p><p id="p-0150" num="0149"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a technique to read two bits of a memory cell coarsely programmed in a QLC mode according to one embodiment.</p><p id="p-0151" num="0150">The example illustrated in <figref idref="DRAWINGS">FIG. <b>11</b></figref> uses the mapping of LP and UP bits shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. The QLC voltage levels V<sub>0 </sub>to V<sub>15 </sub>are mapped to the respective values of the LP and UP bits.</p><p id="p-0152" num="0151">For a memory cell in group 0, read voltages V<sub>R00</sub>, V<sub>R10 </sub>and V<sub>R20 </sub>are used to determine the bit values for the LP bit and UP bit stored in the memory cell.</p><p id="p-0153" num="0152">For a memory cell in group 1, read voltages V<sub>R01</sub>, V<sub>R11 </sub>and V<sub>R21 </sub>are used to determine the bit values for the LP bit and UP bit stored in the memory cell.</p><p id="p-0154" num="0153">For a memory cell in group 2, read voltages V<sub>R02</sub>, V<sub>R12 </sub>and V<sub>R22 </sub>are used to determine the bit values for the LP bit and UP bit stored in the memory cell.</p><p id="p-0155" num="0154">For a memory cell in group 3, read voltages V<sub>R03</sub>, V<sub>R13 </sub>and V<sub>R23 </sub>are used to determine the bit values for the LP bit and UP bit stored in the memory cell.</p><p id="p-0156" num="0155">The read voltages of groups 0, 1, 2 and 3 can be stacked and interleaved in an increasing order (e.g., V<sub>R00</sub>, V<sub>R01</sub>, V<sub>R02</sub>, V<sub>R03</sub>, V<sub>R10</sub>, V<sub>R11</sub>, . . . , V<sub>R23</sub>) such that the memory device <b>130</b> applies the read voltages one after another with increasing read voltages to minimize the time overhead in setting the read voltages.</p><p id="p-0157" num="0156">Values of the LP bit for memory cells in groups 0, 1, 2, and 3 are initially set to the values 1, 1, 0, and 0 associated with the lowest threshold levels of groups 0, 1, 2, and 3 respectively (e.g., QLC levels V<sub>0</sub>, V<sub>1</sub>, V<sub>2</sub>, and V<sub>3</sub>).</p><p id="p-0158" num="0157">Values of the UP bit for memory cells in groups 0, 1, 2, and 3 are initially set to the values 1, 0, 0, and 1 associated with or the lowest threshold levels of groups 0, 1, 2, and 3 respectively (e.g., QLC levels V<sub>0</sub>, V<sub>1</sub>, V<sub>2</sub>, and V<sub>3</sub>).</p><p id="p-0159" num="0158">When the read voltage V<sub>R00 </sub>is applied to the memory cell group <b>131</b>, the current going through each group 0 memory cell is sensed. If the threshold voltage of the sensed memory cell is lower than the applied read voltage V<sub>R00</sub>, the assumed bit value of 1 programmed at V<sub>0 </sub>is confirmed; and no further update to the LP bit value is performed. Optionally, further sensing at one or more higher read voltages (e.g., V<sub>R20</sub>) can be performed; however, since the threshold voltage of the sensed memory cell will be again confirmed to be lower than the applied read voltage (e.g., V<sub>R20</sub>), no further update to the assumed value will be made. Otherwise, if the threshold voltage of the sensed memory cell is higher than the applied read voltage V<sub>R00</sub>, the assumed bit value for the sensed memory cell is inverted to 0, corresponding to the value of 0 associated with next levels V<sub>4 </sub>and V<sub>8 </sub>for group 0 memory cells; and the LP bit value of the group 0 memory cell will not be updated or confirmed until the read voltage V<sub>R20 </sub>is applied.</p><p id="p-0160" num="0159">Since the value of UP bit remains the same for V<sub>0 </sub>and V<sub>4</sub>, no operation is necessary/performed in response to sensing the group 0 memory cell at the read voltage V<sub>R00</sub>.</p><p id="p-0161" num="0160">Subsequently, the memory device <b>130</b> increases the voltage applied to the memory cell group <b>131</b> to V<sub>R01 </sub>for group 1. The current going through each group 1 memory cell is sensed; and the assumed LP bit for sensed memory cell can be confirmed or inverted based on the current sensing result at the read voltage V<sub>R01</sub>. Since the group 1 memory cell can have different values for its UP bit for being programmed at V<sub>1 </sub>that is below the read voltage V<sub>R01 </sub>and at V<sub>5 </sub>that is above the read voltage V<sub>R01</sub>, the assumed UP bit for the sensed memory cell can also be confirmed or inverted based on the current sensing result at the read voltage V<sub>R01</sub>. Thus, the result of current sensing performed for a group 1 memory cell at read voltage V<sub>R01 </sub>can be used to confirm or invert both its LP bit and UP bit.</p><p id="p-0162" num="0161">Subsequently, the memory device <b>130</b> increases the voltage applied to the memory cell group <b>131</b> to V<sub>R02 </sub>for group 2. Since the value of LP bit remains the same for threshold voltages across V<sub>R02</sub>, no operation is performed in response to sensing the group 2 memory cell at the read voltage V<sub>R02</sub>. However, the value of UP bit changes from having threshold voltages below V<sub>R02 </sub>to having threshold voltages above V<sub>R02</sub>, the assumed UP bit for the sensed memory cell can be confirm or invert based on the current sensing result at the read voltage V<sub>R02</sub>.</p><p id="p-0163" num="0162">Subsequently, the memory device <b>130</b> increases the voltage applied to the memory cell group <b>131</b> to V<sub>R03 </sub>for group 3. Since the value of LP bit remains the same for threshold voltages across V<sub>R03</sub>, no operation is performed in response to sensing the group 3 memory cell at the read voltage V<sub>R02</sub>. However, the value of UP bit changes from having threshold voltages below V<sub>R03 </sub>to having threshold voltages above V<sub>R03</sub>, the assumed UP bit for the sensed memory cell can be confirmed or inverted based on the current sensing result at the read voltage V<sub>R03</sub>.</p><p id="p-0164" num="0163">In a similar way, when the memory device <b>130</b> increases the voltage applied to the memory cell group <b>131</b> to V<sub>R10</sub>, V<sub>R11</sub>, V<sub>R12 </sub>and V<sub>R13 </sub>for groups 0, 1, 2 and 3 respectively, the assumed LP value is confirmed or inverted based on the current sensing result at V<sub>R12 </sub>and V<sub>R13 </sub>for group 2 and group 3 memory cells respectively; and the assumed UP value is confirmed or inverted based on the current sensing result at V<sub>R1</sub><i>o</i>, V<sub>R11 </sub>and V<sub>R12 </sub>for group 0, group 1 and group 2 memory cells respectively.</p><p id="p-0165" num="0164">Subsequently, when the memory device <b>130</b> increases the voltage applied to the memory cell group <b>131</b> to V<sub>R20</sub>, V<sub>R21</sub>, V<sub>R22 </sub>and V<sub>R23 </sub>for groups 0, 1, 2 and 3 respectively, the assumed LP value is confirmed or inverted based on the current sensing result at V<sub>R20 </sub>and V<sub>R21 </sub>for group 0 and group 1 memory cells respectively; and the assumed UP value is confirmed or inverted based on the current sensing result at V<sub>R21</sub>, V<sub>R22 </sub>and V<sub>R23 </sub>for group 1, group 2 and group 3 memory cells respectively.</p><p id="p-0166" num="0165"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates an example of reading LP and UP bits. After the LP and UP bits are determined, XP and TP bits can be computed from the LP and UP bits and the group identification <b>207</b>, as illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0167" num="0166">In some instances, a request is received to retrieve one of the data groups <b>151</b>, <b>157</b>, . . . , <b>159</b> that corresponds to the values of the LP bit of the memory cells <b>137</b>, . . . , <b>139</b> in the memory cell group <b>131</b>. In response to such a request, the operations related to the reading of UP bit can be skipped. For example, sensing current at read voltages V<sub>R02</sub>, V<sub>R03</sub>, V<sub>R11</sub>, V<sub>R22</sub>, and V<sub>R23 </sub>can be skipped, since the sensing results are used in the determination of the UP bit but not in the determination of the LP bit.</p><p id="p-0168" num="0167">Similarly, in response to a request for the values of the UP bit of the memory cells <b>137</b>, . . . , <b>139</b> in the memory cell group <b>131</b>, the operations related to the reading of the LP bit but not related to the reading of the UP bit can be skipped.</p><p id="p-0169" num="0168">Further, TP and/or XP bits can be read (e.g., assumed, confirmed, inverted) in a similar way by based on the results of sensing current at the read voltages applied at the read voltages V<sub>R00</sub>, V<sub>R01 </sub>V<sub>R02</sub>, V<sub>R03</sub>, V<sub>R10</sub>, . . . , V<sub>R22</sub>, and V<sub>R23</sub>. For example, a request can be made to retrieve the TP values of a page of memory cells without LP, UP, XP values. Thus, the current sensing at some of the read voltages (e.g., V<sub>R10</sub>, V<sub>R11</sub>) can be skipped.</p><p id="p-0170" num="0169"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows a method of two-pass programming of memory cells according to some embodiments. The methods of <figref idref="DRAWINGS">FIG. <b>12</b></figref> can be performed by processing logic that can include hardware (e.g., processing device, circuitry, dedicated logic, programmable logic, microcode, hardware of a device, integrated circuit, etc.), software/firmware (e.g., instructions run or executed on a processing device), or a combination thereof. In some embodiments, the method of <figref idref="DRAWINGS">FIG. <b>12</b></figref> is performed at least in part by the controller <b>150</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, or processing logic in the memory device <b>130</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Although shown in a particular sequence or order, unless otherwise specified, the order of the processes can be modified. Thus, the illustrated embodiments should be understood only as examples, and the illustrated processes can be performed in a different order, and some processes can be performed in parallel. Additionally, one or more processes can be omitted in various embodiments. Thus, not all processes are required in every embodiment. Other process flows are possible.</p><p id="p-0171" num="0170">For example, the method of <figref idref="DRAWINGS">FIG. <b>12</b></figref> can be implemented in the programming manager <b>113</b> of the memory device <b>130</b> and/or the memory sub-system <b>110</b>.</p><p id="p-0172" num="0171">At block <b>341</b>, the programming manager <b>113</b> receives a first number of data bits <b>161</b>, <b>163</b>, . . . , <b>165</b>. For example, the controller <b>115</b> of the memory sub-system <b>110</b> can send a write command with four pages of data to be stored in a page of memory cells in a memory device <b>130</b>. The memory device <b>130</b> can place the four pages in latches <b>145</b> to facilitate the programming of four bits of data in each memory cell in the page of memory cells.</p><p id="p-0173" num="0172">At block <b>343</b>, the programming manager <b>113</b> instructs the read/write circuit <b>143</b> to coarsely program a threshold voltage <b>221</b> of a first memory cell <b>137</b> to a first level <b>203</b> representative of a combination of values of the data bits <b>161</b>, <b>163</b>, . . . , <b>165</b> according to a first mapping <b>201</b> between combinations of values of bits of the first number and threshold levels. The possible threshold levels can be divided into a plurality of groups. Each of the threshold levels is in one of the groups; and each of the groups contains a subset of the threshold levels.</p><p id="p-0174" num="0173">For example, when the first number is four, the data bits <b>161</b>, <b>163</b>, . . . , <b>165</b> can be LP bit <b>261</b>, UP bit <b>263</b>, XP bit <b>265</b>, and TP bit <b>267</b>; and the first mapping <b>201</b> can be according to a table illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref> to store data in the first memory cell <b>137</b> in quad-level cell (QLC) mode.</p><p id="p-0175" num="0174">For example, the threshold levels can be partitioned into the groups such that between each pair of closest threshold levels in each respective group in the plurality of groups, there are threshold levels each in one of the plurality of groups other than the respective group, as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref> and <figref idref="DRAWINGS">FIG. <b>6</b></figref>. The threshold levels of different groups are interleaved.</p><p id="p-0176" num="0175">At block <b>345</b>, the programming manager <b>113</b> computes a group identification <b>207</b> of a first group, among the plurality of groups, that contains the first level <b>203</b>. For example, the group identification <b>207</b> can have at least two bits <b>272</b> and <b>274</b> to reduce the number of threshold levels in the first group and thus the precision requirement for coarsely programming the first memory cell <b>137</b> while allowing the data stored in the coarsely programmed first memory cell <b>137</b> to be read.</p><p id="p-0177" num="0176">For example, a first bit <b>272</b> of the two bits of the group identification <b>207</b> can be computed from applying a logic operation to two (e.g., LP bit <b>261</b> and TP bit <b>267</b>) of the first number of data bits (e.g., LP bit <b>261</b>, UP bit <b>263</b>, XP bit <b>265</b>, and TP bit <b>267</b>). A second bit <b>274</b> of the two bits of the group identification <b>207</b> can be computed from applying the logic operation to the first number of data bits (e.g., LP bit <b>261</b>, UP bit <b>263</b>, XP bit <b>265</b>, and TP bit <b>267</b>), as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, <figref idref="DRAWINGS">FIG. <b>7</b></figref>, and <figref idref="DRAWINGS">FIG. <b>8</b></figref>. For example, the logic operation can be XOR or XNOR.</p><p id="p-0178" num="0177">Alternatively, the group identification <b>207</b> can be calculated from the QLC threshold level numbers 0, 1, 2, . . . , 15.</p><p id="p-0179" num="0178">To read <b>213</b> the first number of data bits (e.g., LP bit <b>261</b>, UP bit <b>263</b>, XP bit <b>265</b>, and TP bit <b>267</b>) back from the first memory cell <b>137</b> into latches <b>145</b>, the memory device <b>130</b> can determine a subset (e.g., LP bit <b>261</b> and UP bit <b>263</b>) of the first number of the data bits from testing the threshold voltage <b>221</b> of the first memory cell <b>137</b> at read voltages identified according to the group identification. For example, read voltages V<sub>R00</sub>, V<sub>R10 </sub>and V<sub>R20 </sub>are used for group 0, read voltages V<sub>R01</sub>, V<sub>R11 </sub>and V<sub>R21 </sub>for group 1, read voltages V<sub>R02</sub>, V<sub>R12 </sub>and V<sub>R22 </sub>for group 2, and read voltages V<sub>R03</sub>, V<sub>R13 </sub>and V<sub>R23 </sub>for group 3. From the subset (e.g., LP bit <b>261</b> and UP bit <b>263</b>) and the group identification <b>207</b>, the memory device <b>130</b> can compute the values of at least two of the first number of the data bits. For example, when the group identification <b>207</b> has bits <b>272</b> and <b>274</b>, the TP bit <b>267</b> and XP bit <b>265</b> can be computed from the group identification <b>207</b> and the remaining bits read <b>213</b> from the first memory cell <b>137</b>.</p><p id="p-0180" num="0179">When data groups <b>151</b>, <b>157</b>, . . . , <b>159</b> of the first number are coarsely programmed in a memory cell group <b>131</b>, the group identification (e.g., <b>207</b>) of each memory cell (e.g., <b>137</b>) in the memory cell group <b>131</b> identifies the threshold level subset that contains the first level <b>203</b> of the respective memory cell (e.g., <b>137</b>). On the other hand, a given group identifications (e.g., <b>207</b>) identifies a subset of memory cells (e.g., <b>137</b>) in the memory cell group <b>131</b> that are coarsely programmed to the threshold levels represented by the corresponding threshold level group.</p><p id="p-0181" num="0180">The memory device <b>130</b> can buffer the group identification <b>207</b> in at least two second memory cells in single level cell (SLC) mode. To read the coarsely programmed first memory cell <b>137</b>, the memory device <b>130</b> reads the at least two second memory cells in SLC mode to retrieve the group identification <b>207</b> prior to the fine threshold programming <b>229</b> of the threshold voltage <b>225</b> of the first memory cell <b>137</b>.</p><p id="p-0182" num="0181">At block <b>347</b>, the programming manager <b>113</b> instructs the read/write circuit <b>143</b> to read, based on the group identification <b>207</b>, the first memory cell <b>137</b> having the threshold voltage <b>221</b> programmed to the first level to obtain a second number of data bits, where the second number is smaller than the first number.</p><p id="p-0183" num="0182">For example, TP and XP bits can be computed from LP and UP bits and the bits <b>272</b> and <b>274</b> of the group identification <b>207</b>. Thus, the operations to read the TP, XP, UP and LP bits can be simplified.</p><p id="p-0184" num="0183">At block <b>349</b>, the programming manager <b>113</b> determines, from the second number of data bits and the group identification <b>207</b>, the first number of data bits <b>161</b>, <b>163</b>, . . . , <b>165</b>.</p><p id="p-0185" num="0184">After retrieving the first number of data bits <b>161</b>, <b>163</b>, . . . , <b>165</b> back from the first memory cell <b>137</b> into the latches <b>145</b>, the programming manager <b>113</b> instructs the read/write circuit <b>143</b> to finely program the threshold voltage <b>225</b> of the first memory cell <b>137</b> to a second level <b>223</b> representative of the combination of values of the data bits obtained from the reading of the first memory cell, according to a second mapping <b>217</b> between combinations of values of bits of the first number and threshold levels.</p><p id="p-0186" num="0185">Optionally, the second mapping <b>217</b> can be the same as the first mapping <b>201</b>; and the second level <b>223</b> is the same as the first level <b>203</b>. The second-pass threshold programming <b>229</b> is performed to reduce the width of region of threshold distribution such that the first memory cell <b>137</b> can be read according to the second mapping <b>217</b> without the help of the group identification <b>207</b>. After the second-pass threshold programming <b>229</b>, the group identification <b>207</b> can be discarded.</p><p id="p-0187" num="0186"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates an example machine of a computer system <b>400</b> within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, can be executed. In some embodiments, the computer system <b>400</b> can correspond to a host system (e.g., the host system <b>120</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) that includes, is coupled to, or utilizes a memory sub-system (e.g., the memory sub-system <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) or can be used to perform the operations of a programming manager <b>113</b> (e.g., to execute instructions to perform operations corresponding to the programming manager <b>113</b> described with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>12</b></figref>). In alternative embodiments, the machine can be connected (e.g., networked) to other machines in a LAN, an intranet, an extranet, and/or the internet. The machine can operate in the capacity of a server or a client machine in client-server network environment, as a peer machine in a peer-to-peer (or distributed) network environment, or as a server or a client machine in a cloud computing infrastructure or environment.</p><p id="p-0188" num="0187">The machine can be a personal computer (PC), a tablet PC, a set-top box (STB), a personal digital assistant (PDA), a cellular telephone, a web appliance, a server, a network router, a switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while a single machine is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.</p><p id="p-0189" num="0188">The example computer system <b>400</b> includes a processing device <b>402</b>, a main memory <b>404</b> (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), static random access memory (SRAM), etc.), and a data storage system <b>418</b>, which communicate with each other via a bus <b>430</b> (which can include multiple buses).</p><p id="p-0190" num="0189">Processing device <b>402</b> represents one or more general-purpose processing devices such as a microprocessor, a central processing unit, or the like. More particularly, the processing device can be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or a processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device <b>402</b> can also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device <b>402</b> is configured to execute instructions <b>426</b> for performing the operations and steps discussed herein. The computer system <b>400</b> can further include a network interface device <b>408</b> to communicate over the network <b>420</b>.</p><p id="p-0191" num="0190">The data storage system <b>418</b> can include a machine-readable medium <b>424</b> (also known as a computer-readable medium) on which is stored one or more sets of instructions <b>426</b> or software embodying any one or more of the methodologies or functions described herein. The instructions <b>426</b> can also reside, completely or at least partially, within the main memory <b>404</b> and/or within the processing device <b>402</b> during execution thereof by the computer system <b>400</b>, the main memory <b>404</b> and the processing device <b>402</b> also constituting machine-readable storage media. The machine-readable medium <b>424</b>, data storage system <b>418</b>, and/or main memory <b>404</b> can correspond to the memory sub-system <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0192" num="0191">In one embodiment, the instructions <b>426</b> include instructions to implement functionality corresponding to a programming manager <b>113</b> (e.g., the programming manager <b>113</b> described with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>12</b></figref>). While the machine-readable medium <b>424</b> is shown in an example embodiment to be a single medium, the term &#x201c;machine-readable storage medium&#x201d; should be taken to include a single medium or multiple media that store the one or more sets of instructions. The term &#x201c;machine-readable storage medium&#x201d; shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure. The term &#x201c;machine-readable storage medium&#x201d; shall accordingly be taken to include, but not be limited to, solid-state memories, optical media, and magnetic media.</p><p id="p-0193" num="0192">Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.</p><p id="p-0194" num="0193">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. The present disclosure can refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage systems.</p><p id="p-0195" num="0194">The present disclosure also relates to an apparatus for performing the operations herein. This apparatus can be specially constructed for the intended purposes, or it can include a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program can be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.</p><p id="p-0196" num="0195">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems can be used with programs in accordance with the teachings herein, or it can prove convenient to construct a more specialized apparatus to perform the method. The structure for a variety of these systems will appear as set forth in the description below. In addition, the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages can be used to implement the teachings of the disclosure as described herein.</p><p id="p-0197" num="0196">The present disclosure can be provided as a computer program product, or software, that can include a machine-readable medium having stored thereon instructions, which can be used to program a computer system (or other electronic devices) to perform a process according to the present disclosure. A machine-readable medium includes any mechanism for storing information in a form readable by a machine (e.g., a computer). In some embodiments, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium such as a read only memory (&#x201c;ROM&#x201d;), random access memory (&#x201c;RAM&#x201d;), magnetic disk storage media, optical storage media, flash memory components, etc.</p><p id="p-0198" num="0197">In this description, various functions and operations are described as being performed by or caused by computer instructions to simplify description. However, those skilled in the art will recognize what is meant by such expressions is that the functions result from execution of the computer instructions by one or more controllers or processors, such as a microprocessor. Alternatively, or in combination, the functions and operations can be implemented using special purpose circuitry, with or without software instructions, such as using application-specific integrated circuit (ASIC) or field-programmable gate array (FPGA). Embodiments can be implemented using hardwired circuitry without software instructions, or in combination with software instructions. Thus, the techniques are limited neither to any specific combination of hardware circuitry and software, nor to any particular source for the instructions executed by the data processing system.</p><p id="p-0199" num="0198">In the foregoing specification, embodiments of the disclosure have been described with reference to specific example embodiments thereof. It will be evident that various modifications can be made thereto without departing from the broader spirit and scope of embodiments of the disclosure as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A device, comprising:<claim-text>memory cells;</claim-text><claim-text>latches; and</claim-text><claim-text>a circuit configured to:<claim-text>receive, in the latches, a first number of groups of data bits;</claim-text><claim-text>program, in a first pass, the memory cells to store the first number of groups of data bits, wherein a threshold voltage of each respective memory cell in the memory cells is programmed to a first level representative of a combination of values of bits of the first number according to a mapping between combinations of values of bits of the first number and threshold levels in a plurality of threshold level groups;</claim-text><claim-text>determine a group identification of a first group among the plurality of threshold level groups, the first group containing the first level, the group identification having at least two bits;</claim-text><claim-text>read a second number of groups of data bits into the latches, based on the group identification for the respective memory cell, from the memory cells having the threshold voltage of the respective memory cell programmed to the first level, the second number being smaller than the first number;</claim-text><claim-text>determine, from the second number of groups of data bits and the group identification, for the respective memory cell, the first number of groups of data bits in the latches; and</claim-text><claim-text>program, in a second pass, the memory cells to store the first number of groups of data bits loaded into the latches via reading the memory cells, wherein the threshold voltage of the respective memory cell in the memory cells is programmed to the first level representative of the combination of values of bits of the first number according to the mapping.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the memory cells are first memory cells; the device further includes second memory cells; and the circuit is further configured to program the second memory cells to store the group identification before the second pass.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the circuit is configured to program, in a single level cell (SCL) mode, the second memory cells to store the group identification.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The device of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the mapping is configured to store data in a quad-level cell (QLC) mode.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The device of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the circuit is configured to perform a bitwise logic operation on the first number of groups of data bits to obtain the group identification.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the bitwise logic operation is XOR.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the bitwise logic operation is XNOR.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein threshold levels in the first group are separated by threshold levels in the plurality of threshold level groups other than the first group.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the circuit is configured to read the second number of groups of data bits into the latches in a multi-level cell (MLC) mode represented by the group identification.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A method, comprising:<claim-text>receiving, in latches of a device having memory cells, a first number of groups of data bits;</claim-text><claim-text>programming, in a first pass, the memory cells to store the first number of groups of data bits, wherein a threshold voltage of each respective memory cell in the memory cells is programmed to a first level representative of a combination of values of bits of the first number according to a mapping between combinations of values of bits of the first number and threshold levels in a plurality of threshold level groups;</claim-text><claim-text>determining a group identification of a first group among the plurality of threshold level groups, the first group containing the first level, the group identification having at least two bits;</claim-text><claim-text>reading a second number of groups of data bits into the latches, based on the group identification for the respective memory cell, from the memory cells having the threshold voltage of the respective memory cell programmed to the first level, the second number being smaller than the first number;</claim-text><claim-text>determining, from the second number of groups of data bits and the group identification, for the respective memory cell, the first number of groups of data bits in the latches; and</claim-text><claim-text>programming, in a second pass, the memory cells to store the first number of groups of data bits loaded into the latches via reading the memory cells, wherein the threshold voltage of the respective memory cell in the memory cells is programmed to the first level representative of the combination of values of bits of the first number according to the mapping.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the memory cells are first memory cells; the device further includes second memory cells; and the method further includes programming the second memory cells to store the group identification before the second pass.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the second memory cells are programmed in a single level cell (SCL) mode to store the group identification.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the mapping is configured to store data in a quad-level cell (QLC) mode.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:<claim-text>performing a bitwise logic operation on the first number of groups of data bits to obtain the group identification.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the bitwise logic operation is XOR.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the bitwise logic operation is XNOR.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein threshold levels in the first group are separated by threshold levels in the plurality of threshold level groups other than the first group.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the reading of the second number of groups of data bits into the latches is in a multi-level cell (MLC) mode represented by the group identification.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. An apparatus, comprising:<claim-text>a processing device configured to provide a command to write data; and</claim-text><claim-text>a memory device having:<claim-text>latches configured to receive, in response to the command from the processing device, a first number of groups of data bits;</claim-text><claim-text>memory cells; and</claim-text><claim-text>a circuit configured to:<claim-text>program, in a first pass, the memory cells to store the first number of groups of data bits, wherein a threshold voltage of each respective memory cell in the memory cells is programmed to a first level representative of a combination of values of bits of the first number according to a mapping between combinations of values of bits of the first number and threshold levels in a plurality of threshold level groups;</claim-text><claim-text>determine a group identification of a first group among the plurality of threshold level groups, the first group containing the first level, the group identification having at least two bits;</claim-text><claim-text>read a second number of groups of data bits into the latches, based on the group identification for the respective memory cell, from the memory cells having the threshold voltage of the respective memory cell programmed to the first level, the second number being smaller than the first number;</claim-text><claim-text>determine, from the second number of groups of data bits and the group identification, for the respective memory cell, the first number of groups of data bits in the latches; and</claim-text><claim-text>program, in a second pass, the memory cells to store the first number of groups of data bits loaded into the latches via reading the memory cells, wherein the threshold voltage of the respective memory cell in the memory cells is programmed to the first level representative of the combination of values of bits of the first number according to the mapping.</claim-text></claim-text></claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The apparatus of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the mapping is configured to store data in a quad-level cell (QLC) mode; and the circuit is configured to read the second number of groups of data bits into the latches in a multi-level cell (MLC) mode represented by the group identification.</claim-text></claim></claims></us-patent-application>