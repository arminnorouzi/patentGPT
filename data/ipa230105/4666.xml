<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004667A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004667</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17900041</doc-number><date>20220831</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>62</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>6218</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0618</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0891</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2221</main-group><subgroup>2107</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Progressive Key Rotation for Format Preserving Encryption (FPE)</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17091475</doc-number><date>20201106</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11468187</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17900041</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16199360</doc-number><date>20181126</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10839094</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17091475</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15276125</doc-number><date>20160926</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10157289</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16199360</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Bank of America Corporation</orgname><address><city>Charlotte</city><state>NC</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Iyer</last-name><first-name>Shankar Ramasubramanian</first-name><address><city>East Windsor</city><state>NJ</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Keerthi</last-name><first-name>Navanith R.</first-name><address><city>Lawrenceville</city><state>NJ</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Aspects of the disclosure provide a technological improvement to a cipher by improving data security of format-preserving encryption (FPE), by, inter alia, embedding specific key identifiers for rotating keys directly into ciphertext. Aspects of the disclosure relate to methods, computer-readable media, and apparatuses for improving data security in a format-preserving encryption (FPE) context by using specific methods of rotating and identifying the appropriate encryption key from among numerous rotating keys stored in a key data store. Specific to FPE, a plaintext of the data and its corresponding ciphertext of the data remain the same in length/size; yet the methods, computer-readable media, and/or apparatuses disclosed herein permit embedding of an identification of a specific key among the plurality of rotating keys for the particular ciphertext without compromising the technical requirements of FPE.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="116.16mm" wi="158.75mm" file="US20230004667A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="205.49mm" wi="168.91mm" file="US20230004667A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="181.61mm" wi="155.02mm" file="US20230004667A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="249.09mm" wi="184.23mm" orientation="landscape" file="US20230004667A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="249.00mm" wi="179.07mm" orientation="landscape" file="US20230004667A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="236.56mm" wi="168.99mm" orientation="landscape" file="US20230004667A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="197.02mm" wi="177.29mm" orientation="landscape" file="US20230004667A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="211.50mm" wi="178.48mm" orientation="landscape" file="US20230004667A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="222.93mm" wi="174.58mm" file="US20230004667A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a Continuation of U.S. patent application Ser. No. 17/094,476 (filed Nov. 6, 2020, with atty. Docket no. 007131.02392), which is a Continuation of U.S. patent application Ser. No. 16/199,360 (filed on Nov. 26, 2018, with atty. docket no. 007131.02072), which is a Continuation of U.S. patent application Ser. No. 15/276,125 (filed Sep. 26, 2016, with atty. docket no. 007131.01820 and granted Dec. 18, 2018, as U.S. Pat. No. 10,157,289); the content of all the above applications is herein incorporated by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">Aspects of the disclosure are drawn to a cipher that improves data security of format-preserving encryption (FPE) by embedding specific key identifiers for rotating keys. More generally, aspects of the disclosure are directed to an encryption/decryption service that simplifies and enables key rotation without the requisite overhead of decryption and/or encryption.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Many different types of encryption are known and contemplated by this disclosure. For examples, AES (advanced encryption standard), RSA, shared key, and others. The input into an encryption module is often referred to as &#x201c;plaintext,&#x201d; and the output after encryption is often referred to as &#x201c;ciphertext.&#x201d; Many of these encryption methodologies are use with credit card numbers, social security numbers, and other confidential information before transmission and/or storage of that information. In systems where confidential information is accepted only as a predetermined number of characters (e.g., sixteen-digit credit card number, nine-digit social security number, and others), encryption must take this requirement into account. One encryption methodology that meets this requirement is known as format-preserving encryption (FPE).</p><p id="p-0005" num="0004">Online resource Wikipedia teaches examples of format-preserving encryption (FPE). Block ciphers traditionally work over a binary alphabet, i.e., both the input and the output are binary strings of n zeroes and ones. In some situations, however, a block cipher may be used that works over some other alphabet; for example, encrypting a plaintext 16-digit credit card number in such a way that the ciphertext is also a 16-digit number might facilitate adding an encryption layer to legacy software, such as is the example with FPE. More generally, FPE sometimes uses a keyed permutation on some finite language. A key is sometimes understood to be a secret bit string that parameterizes the permutation for a given block cipher. Meanwhile, some encryption schemes, such as cipher block chaining (CBC), are not permutations because the same plaintext can encrypt to multiple different ciphertexts, even when using a fixed key.</p><p id="p-0006" num="0005">Moreover, various methods of FPE are described in the March 2016, National Institute of Standards and Technology's special publication number 800-38G entitled, &#x201c;Recommendation for Block Cipher: Modes of Operation: Methods for Format-Preserving Encryption,&#x201d; which is herein incorporated by reference in its entirety of 28 pages and a copy of which is concurrently submitted in an Information Disclosure Statement with the filing of this application.</p><p id="p-0007" num="0006">In addition to the challenge of encrypting data, there exists a technological challenge in managing encryption keys (e.g., generating, distributing, tracking, maintaining, and other operations involving keys). This challenge becomes markedly complex as new encryption keys are introduced into the technological ecosystem.</p><p id="p-0008" num="0007">The aforementioned prior art solutions include various drawbacks and shortcomings leaving much room for improvement.</p><heading id="h-0004" level="1">BRIEF SUMMARY</heading><p id="p-0009" num="0008">The following presents a simplified summary in order to provide a basic understanding of some aspects of the disclosure. The summary is not an extensive overview of the disclosure. It is neither intended to identify key or critical elements of the disclosure nor to delineate the scope of the disclosure. The following summary merely presents some concepts of the disclosure in a simplified form as a prelude to the description below.</p><p id="p-0010" num="0009">A communications network is disclosed comprising a public network and a private network, which is constrained to format-preserving encryption (FPE) that secures plaintext by transforming ciphertext with rotating encryption keys. Moreover, a data storage device is disclosed comprising memory storing plaintext encrypted with format-preserving encryption (FPE) and embedded with an encryption key ID. The data store and communications network work in conjunction to provide an improved, secure data network.</p><p id="p-0011" num="0010">Various aspects described herein may be embodied as a method, an apparatus, or as one or more computer-readable media storing computer-executable instructions. Accordingly, those aspects may take the form of an entirely hardware embodiment, an entirely software embodiment, or an embodiment combining software and hardware aspects. Any and/or all of the method steps described herein may be implemented as computer-readable instructions stored on a computer-readable medium, such as a non-transitory computer-readable medium. In addition, various signals representing data or events as described herein may be transferred between a source and a destination in the form of light and/or electromagnetic waves traveling through signal-conducting media such as metal wires, optical fibers, and/or wireless transmission media (e.g., air and/or space).</p><p id="p-0012" num="0011">Aspects of the disclosure have been described in terms of illustrative embodiments thereof. Numerous other embodiments, modifications, and variations within the scope and spirit of the disclosure will occur to persons of ordinary skill in the art from a review of this disclosure. For example, one of ordinary skill in the art will appreciate that the steps illustrated herein may be performed in other than the recited order, and that one or more steps illustrated may be optional in accordance with aspects of the disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0013" num="0012">The present disclosure is illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements and in which:</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of a suitable computing system environment that may be used according to one or more illustrative embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows an illustrative system for implementing example embodiments according to the present disclosure.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, and <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> show versions of contemplated system with a plurality of computing components in communication with a FPE secure data store in accordance with an aspect of the disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> shows a system diagram of a data store secured with FPE data using transformed rotating, encryption key identifiers in accordance with an aspect of the disclosure.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a high-level diagram of an illustrative mapping table that may be used by encoder and decoders in accordance with an aspect of the disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0019" num="0018">In the following description of the various embodiments, reference is made to the accompanying drawings, which form a part hereof, and in which is shown by way of illustration various embodiments in which the disclosure may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope and spirit of the present disclosure.</p><p id="p-0020" num="0019">The features disclosed herein overcome one or more drawbacks in format-preserving encryption systems to provide a technological improvement. Aspects of the disclosure relate to methods, computer-readable media, and apparatuses for improving data security in a format-preserving encryption (FPE) context by using specific methods of rotating and identifying the appropriate encryption key from among numerous rotating keys stored in a key data store. Specific to FPE, a plaintext of the data and its corresponding ciphertext of the data remain the same in length/size; yet the methods, computer-readable media, and/or apparatuses disclosed herein permit embedding of an identification of a specific key among the plurality of rotating keys for the particular ciphertext without compromising the requirements of FPE.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of a suitable computing system environment <b>100</b> that may be used according to one or more illustrative embodiments. The computing system environment <b>100</b> is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality contained in the disclosure. The computing system environment <b>100</b> should not be interpreted as having any dependency or requirement relating to any one or combination of components shown in the illustrative computing system environment <b>100</b>.</p><p id="p-0022" num="0021">The disclosure is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and/or configurations that may be suitable for use with the disclosed embodiments include, but are not limited to, personal computers (PCs), server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.</p><p id="p-0023" num="0022">With reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the computing system environment <b>100</b> may include a computing device <b>101</b> wherein the processes discussed herein may be implemented. The computing device <b>101</b> may have a processor <b>103</b> for controlling overall operation of the computing device <b>101</b> and its associated components, including random-access memory (RAM) <b>105</b>, read-only memory (ROM) <b>107</b>, communications module <b>109</b>, and memory <b>115</b>. Computing device <b>101</b> typically includes a variety of computer readable media. Computer readable media may be any available media that may be accessed by computing device <b>101</b> and include both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise a combination of computer storage media and communication media.</p><p id="p-0024" num="0023">Computer storage media include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media include, but is not limited to, random access memory (RAM), read only memory (ROM), electronically erasable programmable read only memory (EEPROM), flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information and that can be accessed by computing device <b>101</b>.</p><p id="p-0025" num="0024">Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. Modulated data signal includes a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media.</p><p id="p-0026" num="0025">Computing system environment <b>100</b> may also include optical scanners (not shown). Exemplary usages include scanning and converting paper documents, e.g., correspondence, receipts to digital files.</p><p id="p-0027" num="0026">Although not shown, RAM <b>105</b> may include one or more are applications representing the application data stored in RAM <b>105</b> while the computing device is on and corresponding software applications (e.g., software tasks), are running on the computing device <b>101</b>.</p><p id="p-0028" num="0027">Communications module <b>109</b> may include a microphone, keypad, touch screen, and/or stylus through which a user of computing device <b>101</b> may provide input, and may also include one or more of a speaker for providing audio output and a video display device for providing textual, audiovisual and/or graphical output.</p><p id="p-0029" num="0028">Software may be stored within memory <b>115</b> and/or storage to provide instructions to processor <b>103</b> for enabling computing device <b>101</b> to perform various functions. For example, memory <b>115</b> may store software used by the computing device <b>101</b>, such as an operating system <b>117</b>, application programs <b>119</b>, and an associated database <b>121</b>. Also, some or all of the computer executable instructions for computing device <b>101</b> may be embodied in hardware or firmware.</p><p id="p-0030" num="0029">Computing device <b>101</b> may operate in a networked environment supporting connections to one or more remote computing devices, such as computing devices <b>141</b>, <b>151</b>, and <b>161</b>. The computing devices <b>141</b>, <b>151</b>, and <b>161</b> may be personal computing devices or servers that include many or all of the elements described above relative to the computing device <b>101</b>. Computing device <b>161</b> may be a mobile device communicating over wireless carrier channel <b>171</b>.</p><p id="p-0031" num="0030">The network connections depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> include a local area network (LAN) <b>125</b> and a wide area network (WAN) <b>129</b>, but may also include other networks. When used in a LAN networking environment, computing device <b>101</b> may be connected to the LAN <b>125</b> through a network interface or adapter in the communications module <b>109</b>. When used in a WAN networking environment, the computing device <b>101</b> may include a modem in the communications module <b>109</b> or other means for establishing communications over the WAN <b>129</b>, such as the Internet <b>131</b> or other type of computer network. It will be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the computing devices may be used. Various well-known protocols such as TCP/IP, Ethernet, FTP, HTTP and the like may be used, and the system can be operated in a client-server or in Distributed Computing configuration to permit a user to retrieve web pages from a web-based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.</p><p id="p-0032" num="0031">Additionally, one or more application programs <b>119</b> used by the computing device <b>101</b>, according to an illustrative embodiment, may include computer executable instructions for invoking user functionality related to communication including, for example, email, short message service (SMS), and voice input and speech recognition applications.</p><p id="p-0033" num="0032">Embodiments of the disclosure may include forms of computer-readable media. Computer-readable media include any available media that can be accessed by a computing device <b>101</b>. Computer-readable media may comprise storage media and communication media and in some examples may be non-transitory. Storage media include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, object code, data structures, program modules, or other data. Communication media include any information delivery media and typically embody data in a modulated data signal such as a carrier wave or other transport mechanism.</p><p id="p-0034" num="0033">Although not required, various aspects described herein may be embodied as a method, a data processing system, or a computer-readable medium storing computer-executable instructions. For example, a computer-readable medium storing instructions to cause a processor to perform steps of a method in accordance with aspects of the disclosed embodiments is contemplated. For example, aspects of the method steps disclosed herein may be executed on a processor on a computing device <b>101</b>. Such a processor may execute computer-executable instructions stored on a computer-readable medium.</p><p id="p-0035" num="0034">Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, an illustrative system <b>200</b> for implementing example embodiments according to the present disclosure is shown. As illustrated, system <b>200</b> may include one or more workstation computers <b>201</b>. Workstations <b>201</b> may be local or remote, and may be connected by one of communications links <b>202</b> to computer network <b>203</b> that is linked via communications links <b>205</b> to server <b>204</b>. In system <b>200</b>, server <b>204</b> may be any suitable server, processor, computer, or data processing device, or combination of the same. Server <b>204</b> may be used to process the instructions received from, and the transactions entered into by, one or more participants.</p><p id="p-0036" num="0035">Computer network <b>203</b> may be any suitable computer network including the Internet, an intranet, a wide-area network (WAN), a local-area network (LAN), a wireless network, a digital subscriber line (DSL) network, a frame relay network, an asynchronous transfer mode (ATM) network, a virtual private network (VPN), or any combination of any of the same. Communications links <b>202</b> and <b>205</b> may be any communications links suitable for communicating between workstations <b>201</b> and server <b>204</b>, such as network links, dial-up links, wireless links, and hard-wired links.</p><p id="p-0037" num="0036">The steps that follow in the Figures may be implemented by one or more of the components in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref> and/or other components, including other computing devices.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, and <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> (collectively, &#x201c;<figref idref="DRAWINGS">FIG. <b>3</b></figref>&#x201d;) show systems <b>300</b>A, <b>300</b>B with a plurality of network computing devices communicating over a network to provide a secure FPE network, in accordance with an aspect of the disclosure. Format-preserving encryption (FPE) provides an ability to encrypt plain text such that the output cipher text has the same length as input text. For example social security number (SSN) is 9 digits and all numeric data. If SSN is encrypted with FPE, then the output is also 9-digit all numeric data. Internally, FPE may use a block cipher (e.g., AES) that uses a symmetric key. Such an approach works fine if there is only one symmetric key used for encryption and all the data is encrypted with the same symmetric key. However if the symmetric key is rotated at some point (e.g., after a certain period) then conventional FPE is insufficient. To elaborate, after the symmetric key is rotated, the cipher text to be decrypted could have been encrypted with a previous symmetric key or a new rotated key. As such, FPE by itself is incapable of inherently supporting rotating keys.</p><p id="p-0039" num="0038">To support symmetric key rotation, the system disclosed herein provides a mechanism by which the symmetric key used to encrypt the data is identifiable from within the FPE ciphertext itself. The correct key is identified and determined from the ciphertext, and then the decryption process proceeds with the correct key to return valid data. With FPE involving fixed length data, a mechanism is disclosed to embed a key identifier in the fixed length data without having to increase the length. In the case of all numeric fields such as a social security number (SSN) or credit card number, an approach of using alphabet (e.g., A . . . Z) to identify the key may be used. In some examples, the last three numbers of the fixed length data may be used to identify the key. The disclosure contemplates the aforementioned approach being expanded to more than three numbers.</p><p id="p-0040" num="0039">To increase the responsiveness (e.g., reduce latency) of the encoder <b>312</b> and decoder <b>314</b>, a mapping table may be used that stores pre-calculated mappings of alphanumeric values to the last three numbers of the fixed length data. Because, in this example, three digits are being used, the range is from 000 to 999. As such the alphabetic characters (A . . . Z) used to identify each rotating encryption key may be, in one example, as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Because, in this one example, the character values of the ciphertext are limited to be only a possible 0, 1 . . . 8, 9 value, then the key identifier, with three digits, can accommodate up to a possible 1,296 values (i.e., 36 unique values of 0, 1 . . . 8, 9, A, B Y, Z in each digit) into just two digits. The 1,296 possible values can be mapped to the range of 000 to 999 that previously occupied three digits. As such, the remaining digit in the key identifier is open space for embedding of an encryption key ID while still maintaining the constraints of FPE.</p><p id="p-0041" num="0040">Regarding <figref idref="DRAWINGS">FIG. <b>5</b></figref>, notably, the alphanumeric values (see columns KEY1, KEY2, KEY26) in the mapping table occupy the same fixed-length space as the last three numbers (see column <b>506</b>), and may be used to identify the key. As such, the constraints of a FPE ecosystem are maintained while still allowing for a key identifier to be injected into the FPE string. Thus, the FPE ciphertext string is transformed in accordance with various aspects of the disclosure. Moreover, with the example in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the number of rotating keys available to the system <b>300</b>A is twenty-six (e.g., KEY1 . . . KEY26). However, in some examples, the number of available rotating keys may be increased to thirty-six if in addition to A . . . Z values, the values of 0 . . . 9 are also allowed for key ID. Moreover, in yet other examples, both upper and lower case alphabetic characters may be permitted to allow yet even more possible rotating key ID. One reason to limit key ID to just A . . . Z values is to allow for a quick comparison of the designated key ID character in a ciphertext string to determine if it is an alphabetic value in a normally all-numeric string. Thus, the determination can be made more efficiently.</p><p id="p-0042" num="0041">In two examples illustrated in Table 1, below, the last three characters of a FPE ciphertext are translated/encoded with an embedded key identifier. Although in this illustrative system, the last three characters were pre-defined for the key identifier fields, other consecutive or non-consecutive characters may be used for the key identifier field in other examples.</p><p id="p-0043" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="84pt" align="center"/><colspec colname="3" colwidth="84pt" align="left"/><thead><row><entry namest="1" nameend="3" rowsep="1">TABLE 1</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>Input</entry><entry>FPE before embedding key</entry><entry>FPE after embedding key</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>123456789</entry><entry>877244098</entry><entry>877244A98</entry></row><row><entry>987654321</entry><entry>958688480</entry><entry>958688AJK</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0044" num="0042">Using the illustrative mapping table of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, an input of &#x201c;12345679&#x201d; provided by a user computing device <b>201</b> would be sent to a server <b>204</b>. The server <b>204</b> may communicate behind a firewall (not illustrated) the plaintext to a FPE encrypter <b>308</b> that encrypts the plaintext into ciphertext of &#x201c;877244098&#x201d;.</p><p id="p-0045" num="0043">Regarding the FPE encryption process, the encryption server system <b>304</b> retrieves a current encryption key from among the plurality of encryption keys pooled in the private memory <b>306</b> and provides it to the encrypter <b>308</b> for use in the FPE encryption process.</p><p id="p-0046" num="0044">In some examples, the encryption server system <b>304</b> may comprise an enhanced encryption unit <b>320</b> and enhanced decryption unit <b>322</b>, as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>. Alternatively, the FPE decrypter <b>310</b> and decoder <b>314</b> may be organized as separate units that coordinate and cooperate to produce a similar outcome, as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>. Likewise, the FPE encrypter <b>308</b> and encoder <b>312</b> may be organized as separate units that coordinate and cooperate to produce a similar outcome. The encrypter <b>308</b> encrypts with FPE the plaintext into ciphertext using the current encryption key provided to it. With FPE, the ciphertext is an identical fixed length as the plaintext.</p><p id="p-0047" num="0045">Next, the ciphertext is then translated/encoded by the encoder <b>312</b> into &#x201c;877244A98&#x201d;. The encoder <b>312</b> may store a mapping table <b>500</b> with a mapping <b>502</b> for converting &#x201c;098&#x201d; into &#x201c;A98&#x201d;. The converting results in a translation/encoding of a key ID of &#x201c;A&#x201d; into the FPE ciphertext. The transformation of the ciphertext is performed by compressing a portion of ciphertext to create open space in the ciphertext to store the encryption key ID. Then, embedding the encryption key ID of &#x201c;A&#x201d; in the open space in the ciphertext without causing the ciphertext to change in length. The encryption key ID may be in plaintext (e.g., &#x201c;A,&#x201d; which is readable and immediately identifiable as unique without decryption) or may be in a non-plaintext form.</p><p id="p-0048" num="0046">Finally, this transformed ciphertext may be then be transmitted and stored in a data store <b>302</b> with other transformed ciphertext with the same key ID <b>402</b> or even a different key ID <b>404</b>. Because the FPE ciphertext <b>406</b> is encoded with a key identifier <b>408</b>A, <b>408</b>B, it can now be effectively stored/archived anywhere without concern for which encryption key from a potential pool <b>306</b> of rotating encryption keys is the current key at the time the ciphertext needs to be decrypted for access. In addition, because the encoding of the key identifier <b>408</b>A occurs in plaintext after the FPE encryption has already generated a ciphertext, the key ID <b>412</b> may be identified at any time without requiring decryption of the ciphertext. This ability to identify the key ID without requiring decryption permits users (e.g., a user of computing device <b>201</b>, a security administrator of the overall system <b>300</b>A, <b>300</b>B, or other user) to more efficiently and effectively react in the event of a data breach of particular encryption keys. For example, a breach of just that encryption key corresponding to key ID <b>414</b> means that ciphertexts <b>402</b> in data store <b>302</b> is not at risk, and only ciphertexts <b>404</b> require remediation (e.g., taking offline particular data, immediate decryption and re-encryption with a new encryption key, and other actions).</p><p id="p-0049" num="0047">In an example illustrating the decryption process, a server <b>204</b> may later request a stored, transformed ciphertext to be retrieved from data store <b>302</b>, decrypted, and provided to user computing device <b>201</b>. In one example, during the decryption process, the the last 3 characters, which correspond to the key identifier, are retrieved and processed. If the key ID in the key identifier is an &#x201c;A&#x201d;, then, according to the example of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the system <b>300</b>A, <b>300</b>B will use Key1. Once they key is identified, the key identifier fields are replaced with the corresponding 3-digit number from <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Then, the FPE decryption process may proceed with the FPE decrypter <b>310</b> being provided with an identification of which encryption key (e.g., key &#x201c;A&#x201d;) to use for the decryption. The decrypter <b>310</b> requests the appropriate key from the key data store <b>306</b> and decrypts the ciphertext into the original plaintext value. That value may then be transmitted to the server <b>204</b> and eventually a user's device <b>201</b>.</p><p id="p-0050" num="0048">Referring to <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, the ciphertext string is transmitted from the FPE encrypter <b>308</b> to an encoder <b>312</b>. However, unlike the implementation <b>300</b>A in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, in the FPE ecosystem implementation <b>300</b>B of <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> the encoder <b>312</b> is positioned outside of the firewall <b>316</b>. The encoder <b>312</b>, in some examples, is implemented as a plug-in for a web browser. That plug-in may optionally also include a decoder <b>314</b>. In such an example, the plug-in <b>318</b> may be executing in the context of a web browser running on a user computing device <b>201</b>. Alternatively, the computer-executable instructions embodying the encoder <b>312</b> and decoder <b>314</b>, which collectively may be referred to as a FPE coder <b>318</b>, may be implemented in forms other than a plug-in for a web browser. For example, the FPE coder <b>318</b> may be implemented as client-side scripting code, such as Javascript (or asynchronous Javascript AJAX), executing in a web browser, and a data store <b>302</b> may store tables <b>402</b>, <b>404</b> with Internet cookies or other Internet data files. In another embodiment, FPE coder <b>318</b> may be implemented as a standalone application installed on a user computing device <b>201</b> to interface with the FPE encrypter <b>308</b> and FPE decrypter <b>310</b> installed on an encryption server system <b>304</b>.</p><p id="p-0051" num="0049">In any event, the FPE coder <b>318</b> receives an input indicating which key ID <b>412</b> to use to encode the key identifier into the ciphertext. The FPE coder <b>318</b> will then use the encoder <b>312</b> to translate the bits <b>408</b>A in the ciphertext corresponding to the key identifier into a compressed translation <b>410</b>A based on a mapping table <b>500</b>. The open space resulting from the translation (e.g., compression) is then occupied by the encryption key ID <b>412</b> provided as an input into the FPE coder <b>318</b> (e.g., encoder <b>312</b>).</p><p id="p-0052" num="0050">Meanwhile, for decoding, the decoder <b>314</b> includes instructions to extract the key identifier from the ciphertext stored in data store <b>302</b> without requiring the ciphertext to be decrypted. The key ID <b>412</b> in the key identifier <b>408</b>A is used to identify which encryption key to use. In the example of the decoder <b>314</b>, in addition to sending the original ciphertex to the FPE decrypter <b>310</b> for decryption, the decoder <b>314</b> also sends the encryption key ID (e.g., KeyA <b>412</b>) so that the FPE decrypter <b>310</b> retrieves and/or uses the appropriate encryption key from the key storage pool <b>306</b>. After the key ID has been retrieved from the ciphertext, the ciphertext may be translated back to its original ciphertext that can then be decrypted as typically done with FPE.</p><p id="p-0053" num="0051">In the aforementioned examples, the FPE coder <b>318</b> performs the operations of encoding and decoding using a mapping table <b>500</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. A single mapping comprises multiple key IDs <b>412</b>, <b>414</b> and the corresponding translations for each key ID. For example, referring to the data store <b>302</b> in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the memory stores ciphertext encrypted with different encryption keys such that entries <b>402</b> are encrypted and encoded with a first key ID <b>412</b> while entries <b>404</b> are encrypted and encoded with a different, second key ID <b>414</b>. In one example, the data store <b>302</b> may be located at a user computing device <b>201</b> and the entries <b>402</b>, <b>404</b> may correspond to Internet cookies or other data files managed by a browser (or other Internet software application) installed on the user computing device <b>201</b>. As a result, the user computing device <b>201</b> has access to the mapping table <b>500</b> so that the encoder <b>312</b> and/or decoder <b>314</b> may use the mapping table <b>500</b> to translate the portion of the key identifier corresponding to the compressed translation <b>410</b>A of the initial ciphertext into its original, initial ciphertext occupying more bits <b>408</b>A than the compressed version <b>410</b>A. In other words, the mapping table <b>500</b> may be, in some examples, a publicly and readily accessible data store and/or algorithm/formula available to all FPE coder <b>318</b>.</p><p id="p-0054" num="0052">The FPE coder <b>318</b> also includes the particular configuration information indicating which bits of the ciphertext contain the key identifier. For example, the configuration information may indicate that a predetermined number of right-most bits/bytes of a ciphertext contain the key identifier. In another example, the configuration information may indicate that a predetermined number of left-most bits/bytes of a ciphertext contain the key identifier. In yet another example, the configuration information may indicate that a predetermined number bits/bytes spread across a ciphertext contain the key identifier (e.g., see <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> in which the key identifier <b>408</b>B is spread across the ciphertext <b>406</b> and indicates a key ID <b>412</b>). For example, in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, the compressed version <b>410</b>B of the ciphertext <b>406</b> runs almost the entirety of the initial ciphertext <b>406</b>. Nevertheless, in some examples, a standard (or de facto standard) may dictate which bits and/or how many bits are occupied by the key identifier; and in such examples, the FPE coder <b>318</b> may be hard-coded with that information instead of including the entirety of the aforementioned configuration information. Furthermore, in alternate examples, a mapping table <b>500</b> may be replaced by a predetermined set of steps (e.g., an algorithm) performed to translate between original, initial ciphertext and its corresponding key identifier.</p><p id="p-0055" num="0053">In the foregoing examples of <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, at least one advantage of a FPE coder <b>318</b> separate from server machine <b>304</b> is the distribution of computing load across the network. This distribution reduces the computing load on the encryption server machine <b>304</b> while also potentially reducing latency/increasing responsiveness of the encoder <b>312</b> and decoder <b>314</b>. In addition, in examples where data store <b>302</b> is located at the user computing device <b>201</b>, a user is able to hold (e.g., control) their own encrypted data instead of relying upon another person/entity to hold and secure their data. Moreover, the aforementioned approach is operable even with a rotating key approach because, unlike prior format-preserving encryption (FPE) approaches, the ciphertext stored in data store <b>302</b> includes an embedded key identifier <b>408</b>A, <b>408</b>B comprising an encryption key ID <b>412</b>. As a result the decoder <b>314</b> may retrieve the encryption ID <b>412</b> of the encryption key without requiring the decryption of the ciphertext or reference to a table. Rather, the encryption identifier <b>408</b>A, <b>408</b>B is accessible as plaintext at the appropriate bit/byte sequence.</p><p id="p-0056" num="0054">Referring to <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, a computer system is disclosed comprising an enhanced encryption unit <b>320</b> and enhanced decryption unit <b>322</b> to transfer plaintext data into a ciphertext value using format-preserving encryption (FPE) that has embedded in it a key identifier for rotating encryption keys. A server <b>204</b> may send plaintext to an enhanced encryption unit <b>320</b> for transformation into the aforementioned ciphertext. The transformation of the plaintext may include both encrypting it and then subsequently translating/compressing it to embed a key ID field <b>412</b>.</p><p id="p-0057" num="0055">The aforementioned transformation may include retrieving a current encryption key from among the plurality of encryption keys <b>306</b> in the private memory. The current encryption key may be uniquely identified by a first encryption key ID <b>412</b>. The FPE encrypter <b>308</b> may then use the current encryption key to encrypt with FPE the plaintext into ciphertext. The FPE results in the ciphertext being an identical fixed length as the plaintext. In addition, to allow for a more robust encryption system, rotating keys may be used. After encrypting, the encoder <b>312</b> may compress a portion <b>408</b>A of the ciphertext to create open space in the ciphertext to store the first encryption key ID <b>412</b>. As explained herein, the compression includes using a readily accessible mapping table <b>500</b> to translate in a loss-less manner, to create the open space in the FPE ciphertext. Next, the</p><p id="p-0058" num="0056">Next, the encoder <b>312</b> embeds the first encryption key ID <b>412</b> in the open space in the ciphertext without causing the ciphertext <b>406</b> to change in length. The encryption key ID <b>412</b> may be plaintext such that it is readable without requiring decryption of the entire transformed ciphertext. Based on the quantity of different values the encryption key ID field (i.e., the open space) can hold, the number of different keys can be rotated from among the pool <b>306</b> of encryption keys. Finally, the transformed ciphertext <b>406</b> may be transmitted for storage as appropriate.</p><p id="p-0059" num="0057">While <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, and <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> shows alternative embodiments of various features disclosed herein, they illustrate a communications network <b>300</b>A, <b>300</b>B comprising a public network and a private network. The communications network is constrained by the fact that it uses, inter alia, format-preserving encryption (FPE) to secure plaintext by transforming it into ciphertext that is operable with rotating encryption keys. The communication network includes private memory <b>306</b>, which is securely located on the private network behind a firewall, to store a plurality of encryption keys. The keys may be rotated and each key is assigned an unique encryption key ID. Since the encryption keys are stored in the private memory <b>306</b>, it is generally inaccessible from outside of the private network. Meanwhile, various aspects of the enhanced encryption unit <b>320</b> and enhanced decryption unit <b>322</b> may be located inside and/or outside of the private network. Aspects of these units <b>320</b>, <b>322</b> transform the plaintext into ciphertext and then into transformed ciphertext, as explained herein.</p><p id="p-0060" num="0058">The features disclosed herein may also be used with other types of data that would benefit from encryption while maintaining the formatting of its plaintext and ciphertext. In one example, maintaining formatting includes keeping the length of bits of the ciphertext the same as the length of bits of the plaintext. In addition, any encrypted data that uses rotating keys to encrypt the data would benefit from the features disclosed herein. In some examples, encryption keys may be rotated more or less frequently than in other examples. For example, the encryption key used to encrypt plaintext data may be changed (e.g., rotated) on a time basis (e.g., monthly, annually, weekly, bi-annually, bi-monthly, bi-weekly, daily, hourly, or other time period) and/or based on the current date. In another example, the current key may be changed based upon occurrence of an event. Some examples of events include receipt of more than a threshold quantity of denial of service (Dos) attacks (or other type of malicious attack/threat) by a system, receipt of a software update from an anti-malware software provider, and/or consumption of an excess of a predetermined amount of data throughput over a network of the system. Moreover, in some example, key rotation may be done automatically or manually depending on a company's policies. Automatic encryption key rotation may be done when a key has expired or after a certain number/quantity of usage. Manual key rotation may be performed on-demand (e.g., on-the-fly, dynamically) when a compromise is detected or simply to have greater coordination between teams/applications when this occurs. A FPE key manager is incorporated in the system <b>300</b>A, <b>300</b>B to manage and rotate between the plurality of encryption keys <b>306</b>. The key manager <b>306</b> may provide the current key to an authorized FPE encrypter <b>308</b>; and in the case of an FPE decrypter <b>310</b>, upon input of a specific key ID <b>412</b>, the key manager <b>306</b> may provide the corresponding key from the pool of keys.</p><p id="p-0061" num="0059">In one example involving optimization of hexadecimal digits in a ciphertext, the system <b>300</b>A, <b>300</b>B results in an improvement in memory consumption. In one example, assume that social security numbers are securely stored using format-preserving encryption (FPE), as generally described herein. With social security numbers (SSN), the range of possible plaintext values for each character in each of the nine characters in a SSN is 0 . . . 9. In decimal notation, values of 0 through 9 each require 4 bits for storage. Coincidentally, hexadecimal notation also required 4 bits for each hexadecimal character, however, with hexadecimal notation, values of A . . . F are also possible for each character without consuming any additional bits. In other words, at a minimum, a SSN consumes 36 bits of memory (or 9 hexadecimal characters in memory). Given the aforementioned, the key identifier <b>408</b>A for a SSN number is a minimum of six characters (or 24 bits of memory). The six characters (with each character being 4 bits in length) can collectively represent a maximum integer value of 999,999. Meanwhile, once optimized for hexadecimal notation, the 999,999 integer value can be compressed/translated into the bits required for just five characters (i.e., 20 bits). In other words, the maximum decimal value of 2{circumflex over (&#x2003;)}20 (i.e., 0 . . . 1,048,575), which be represented by five characters, is greater than the 999,999 integer value. As such, in this example, with a six-digit key identifier <b>408</b>A, five of those digits are allocated to the compressed/translated ciphertext <b>410</b>A while still allowing one character (i.e., 4 bits) for the plaintext-readable key ID field (e.g., the field storing key IDs <b>412</b>, <b>414</b>). Furthermore, the 4-bit key ID field permits up to 16 rotating, encryption key IDs corresponding to hexadecimal values of 0 . . . 9, A . . . F. In some examples, the system <b>300</b>A, <b>300</b>B may restrict the key ID values to just A . . . F (i.e., six rotating keys) to clearly flag the encryption key ID field in the ciphertext of the SSN.</p><p id="p-0062" num="0060">The preceding SSN example assumed the ciphertext resulting from FPE encryption of a nine-digit SSN results in a nine-digit number comprising just 0 . . . 9. However, in some examples, while the plaintext SSN comprises just 0 . . . 9 values, the resulting ciphertext may not be limited to just 0 . . . 9 values. In those instances, the calculation of the minimum length of key identifier <b>408</b>A will result in a length different than six characters. For example, if values of 0 . . . 9 and &#x201c;A&#x201d; are possible in the ciphertext of a SSN, then the desired length of the key identifier is eight hexadecimals (i.e., 32 bits). Meanwhile, in other examples, the key ID field may be less than the full bit-count of a character of the SSN. In other words, assuming each character in the SSN is allocated 4 bits, just two bits of the 4 bits of a character may be allocated to the key ID field. In such an example, the number of rotating keys is limited to just four keys; moreover, the FPE coder <b>318</b> in such a system may be more heavily relied upon to decode/translate the key ID field because a user may not be able to simply view a character of the SSN to immediately identify the value of the key ID field. Rather, some computations may be desired before the identification is possible.</p><p id="p-0063" num="0061">While the preceding example references each character consuming just 4 bits of memory, in another example, each character may be represented as ASCII (e.g., UTF-8 or other formatting). In an ASCII example, each character of a SSN, or other form field (e.g., a credit card number field) may require 1 byte (or 8 bits) of memory. Like with the preceding hexadecimal example, in the ASCII example, the additional bits provide potential, additional open space for compression and translation. As such, given all things being the same, a minimum-length key identifier in the ASCII example may be shorter in length than the hexadecimal example. Moreover, ASCII provides for a greater range in human-readable character values, as illustrated in Table 2, including lower case and upper-case alphabet characters, as well as allocations for special characters:</p><p id="p-0064" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="1" colwidth="42pt" align="center"/><colspec colname="2" colwidth="28pt" align="left"/><colspec colname="3" colwidth="42pt" align="center"/><colspec colname="4" colwidth="49pt" align="center"/><colspec colname="5" colwidth="56pt" align="left"/><thead><row><entry namest="1" nameend="5" rowsep="1">TABLE 2</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row><row><entry>Dec</entry><entry>Hex</entry><entry>Binary</entry><entry>Character</entry><entry>Description</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>32</entry><entry>20</entry><entry>00100000</entry><entry>Space</entry><entry>space</entry></row><row><entry>. . .</entry></row><row><entry>44</entry><entry>2C</entry><entry>00101100</entry><entry>,</entry><entry>comma</entry></row><row><entry>45</entry><entry>2D</entry><entry>00101101</entry><entry>&#x2212;</entry><entry>minus</entry></row><row><entry>46</entry><entry>2E</entry><entry>00101110</entry><entry>.</entry><entry>period</entry></row><row><entry>47</entry><entry>2F</entry><entry>00101111</entry><entry>/</entry><entry>slash</entry></row><row><entry>48</entry><entry>30</entry><entry>00110000</entry><entry>0</entry><entry>zero</entry></row><row><entry>49</entry><entry>31</entry><entry>00110001</entry><entry>1</entry><entry>one</entry></row><row><entry>50</entry><entry>32</entry><entry>00110010</entry><entry>2</entry><entry>two</entry></row><row><entry>. . .</entry></row><row><entry>57</entry><entry>39</entry><entry>00111001</entry><entry>9</entry><entry>nine</entry></row><row><entry>. . .</entry></row><row><entry>65</entry><entry>41</entry><entry>01000001</entry><entry>A</entry></row><row><entry>66</entry><entry>42</entry><entry>01000010</entry><entry>B</entry></row><row><entry>67</entry><entry>43</entry><entry>01000011</entry><entry>C</entry></row><row><entry>. . .</entry></row><row><entry>90</entry><entry>5A</entry><entry>01011010</entry><entry>Z</entry></row><row><entry>. . .</entry></row><row><entry>97</entry><entry>61</entry><entry>01100001</entry><entry>a</entry></row><row><entry>98</entry><entry>62</entry><entry>01100010</entry><entry>b</entry></row><row><entry>. . .</entry></row><row><entry>122&#x2002;</entry><entry>7A</entry><entry>01111010</entry><entry>z</entry></row><row><entry>. . .</entry></row><row><entry>127&#x2002;</entry><entry>7F</entry><entry>01111111</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>Of course, in some example, the key identifier may be longer than the minimum-length for one or more reasons, including spanning the entire ciphertext <b>408</b>B.</p><p id="p-0065" num="0062">While the preceding example uses social security number (SSN) for purposes of illustration, other types of data may also be encrypted and encoded/translated as disclosed herein. For example, credit card numbers and other confidential information may be secured using the systems and methods disclosed herein. Credit card numbers may be represented, in some embodiments, as sixteen-digit numbers composed of a four-six digit bank identification number (BIN) followed by a personal account number (PAN) followed by a special checksum digit that's computed deterministically based on the previous digits. For example, with some credit card company providers, the credit card number may occupy just fifteen digits and include a PAN as short as eight digits. In other examples contemplated by this disclosure, a plaintext credit card number may be a different predefined length of characters, including a combination in some examples of numbers and/or alphabetic characters. And, the credit card number may be composed of all, some, none, or other portions besides those listed here. In addition, besides credit card numbers, other examples of unique identifiers for payment systems and other systems are contemplated. For example, a unique bit string of a different length may be used by mobile payment providers, such as those using near field code (NFC) or other short-range wireless communication protocols, to authorize a secure payment instruction.</p><p id="p-0066" num="0063">In yet other examples, data other than credit card numbers is contemplated for use with the systems and methods disclosed herein. For example, social security numbers and other confidential user identification information may be secured for transmission and storage using one or more of the features disclosed herein. Like a credit card number with its various predefined portions, this confidential user identification information may also be comprised of one or more predefined portions. In addition to credit card numbers and social security numbers, other data contemplated by this disclosure include, but is not limited to, government identifications with fixed formatting such as passport numbers, alien registration cards, permanent residence cards, and other unique identification information.</p><p id="p-0067" num="0064">Aspects of the embodiments have been described in terms of illustrative embodiments thereof. Numerous other embodiments, modifications and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure. For example, one of ordinary skill in the art will appreciate that the steps illustrated in the illustrative figures may be performed in other than the recited order, and that one or more steps illustrated may be optional in accordance with aspects of the embodiments.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computing device comprising:<claim-text>an application installed on the user computing device, wherein the application includes a format-preserving encryption (FPE) module comprising an encoder and decoder; and</claim-text><claim-text>a memory accessible to the application, the memory storing plaintext encrypted with format-preserving encryption (FPE) and embedded with an encryption key ID, the memory comprising a first ciphertext encrypted with the FPE module using a first encryption key, wherein the first ciphertext is a fixed length of bits equal to a length of the plaintext, wherein the first ciphertext is embedded with a first key identifier that, without requiring decryption of the entire first ciphertext, identifies the first ciphertext as having been encrypted with the first encryption key,</claim-text><claim-text>wherein the first key identifier is structured with a first portion of bits storing the encryption key ID and a second portion of bits storing a compressed translation of that portion of ciphertext that initially populated the bits corresponding to the first key identifier, and</claim-text><claim-text>wherein the encryption key is changed based on one of: a time basis, and an occurrence of an event, and</claim-text><claim-text>wherein a maximum quantity of encryption keys for the ciphertext corresponds to a maximum number of unique values capable of being stored at any given time within the first portion of bits corresponding to the encryption key ID, and</claim-text><claim-text>wherein the first portion of bits storing the encryption key ID is multiple bits, and the memory stored different ciphertext encrypted with the FPE module with multiple rotating encryption keys.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the FPE module compresses the first ciphertext encrypted without requiring access to a current encryption key and without decrypting the first ciphertext.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the FPE module is located on a public network.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the memory comprises:<claim-text>a second ciphertext encrypted with the FPE module using a second encryption key, wherein the second ciphertext is of the same fixed length of bits as the first ciphertext, wherein the second ciphertext is embedded with a second key identifier that, without requiring decryption of the entire second ciphertext, identifies the second ciphertext as having been encrypted with the second encryption key, and</claim-text><claim-text>wherein the first encryption key and second encryption key are symmetric keys.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The device of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the first ciphertext and second ciphertext are stored in a single memory.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The device of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein each key identifier is structured with a first portion of bits storing the encryption key ID and a second portion of bits storing a compressed translation of that portion of ciphertext that initially populated the bits corresponding to the key identifier.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first ciphertext corresponds to numeric values and less than all hexadecimal values.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the event comprises receipt one of: more than a threshold quantity of denial of service attacks, a software update from an anti-malware software provider, and consumption of an excess of a predetermined amount of data throughput.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the FPE module is located on a public network, a current encryption key is located on a private network, and the private network automatically rotates the current encryption key that is retrieved from the private memory based upon occurrence of an event.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the FPE module comprises instructions that, when executed by the processor, cause the FPE module to:<claim-text>after receiving a new ciphertext encrypted with the FPE module using a current encryption key, compressing a portion of the new ciphertext to create open space in the new ciphertext to store a first encryption key ID;</claim-text><claim-text>embedding the first encryption key ID in the open space in the new ciphertext without causing the new ciphertext to change in length, wherein the first encryption key ID is in plaintext, which is readable without decryption; and</claim-text><claim-text>transmitting the transformed new ciphertext with the embedded first encryption key ID for storage in the memory.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the FPE module is located on a public network, a current encryption key is located on a private network, and the private network automatically rotates the current encryption key that is retrieved from the private memory based upon occurrence of an event.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the encoder compresses the first ciphertext encrypted with FPE without requiring access to a current encryption key and without decrypting the first ciphertext.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the encoder is located on a public network, a current encryption key is located on a private network, and the private network automatically rotates the current encryption key that is retrieved from the private memory based upon occurrence of an event.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A communications network comprising a public network and a private network, which is constrained to format-preserving encryption (FPE) that secures plaintext by transforming ciphertext with rotating encryption keys, the communications network comprising:<claim-text>a private memory, which is located on the private network, storing a plurality of encryption keys that are rotated, wherein each encryption key is assigned an encryption key ID, wherein the private memory is inaccessible from outside of the private network;</claim-text><claim-text>a computer system comprising at least one processor and at least one memory storing computer-executable instructions that, when executed by the at least one processor, cause the computer system to transform a plaintext, wherein the transforming comprises:<claim-text>retrieving a current encryption key from among the plurality of encryption keys in the private memory, wherein the current encryption key is uniquely identified by a first encryption key ID;</claim-text><claim-text>encrypting with FPE the plaintext into ciphertext using the current encryption key, wherein the FPE results in the ciphertext being an identical fixed length as the plaintext;</claim-text><claim-text>after the encrypting, compressing a portion of ciphertext to create open space in the ciphertext to store the first encryption key ID;</claim-text><claim-text>embedding the first encryption key ID in the open space in the ciphertext without causing the ciphertext to change in length, wherein the first encryption key ID is in plaintext, which is readable without decryption, and wherein a key identifier is structured with a first portion of bits storing the first encryption key ID and a second portion of bits storing a compressed translation of that portion of ciphertext that initially populated the bits corresponding to the first key identifier; and</claim-text><claim-text>transmitting the transformed ciphertext with the embedded first encryption key ID for storage; and</claim-text></claim-text><claim-text>a data storage device configured to store the transformed ciphertext, wherein at least some of the data storage device concurrently stores transformed ciphertext encrypted with an encryption key different than the current encryption key.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The network of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the computer system comprises an encoder that performs the compressing step and the embedding step without requiring access to the current encryption key and without decrypting the ciphertext, wherein the encoder is located on the public network.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The network of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the computer system automatically rotates the current encryption key that is retrieved from the private memory based on a current date.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The network of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the computer system automatically rotates the current encryption key that is retrieved from the private memory based upon occurrence of an event.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The network of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the transformed ciphertext comprises the key identifier, wherein the key identifier is structured with a first portion storing the first encryption key ID and a second portion storing the compressed ciphertext.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A computerized system comprising:<claim-text>a format-preserving encryption (FPE) key manager configured to manage and rotate a plurality of symmetric encryption keys based on one of: a time basis, and an occurrence of an event;</claim-text><claim-text>a memory, which is located on a private network, storing the plurality of encryption keys;</claim-text><claim-text>an encoder, which is located on a public network, that transforms the FPE ciphertext by embedding an encryption key ID that can be accessed without decrypting the FPE ciphertext; and</claim-text><claim-text>a decoder, which is located on the public network, that translates the transformed FPE ciphertext back into its original FPE ciphertext by extracting the key identifier and replacing it with corresponding FPE ciphertext identified in a mapping table, wherein the mapping table is publicly accessible.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the event comprises receipt one of: more than a threshold quantity of denial of service attacks, a software update from an anti-malware software provider, and consumption of an excess of a predetermined amount of data throughput over a network of the system.</claim-text></claim></claims></us-patent-application>