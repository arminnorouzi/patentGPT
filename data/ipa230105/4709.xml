<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004710A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004710</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17365947</doc-number><date>20210701</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>18</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>103</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>216</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>93</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>18</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>103</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>216</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>93</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>547</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">WHITELISTING REDACTION SYSTEMS AND METHODS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>OPEN TEXT HOLDINGS, INC.</orgname><address><city>San Mateo</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Kiefer</last-name><first-name>Bruce Edward</first-name><address><city>Denver</city><state>CO</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Bhatt</last-name><first-name>Rakesh Babulal</first-name><address><city>Castle Pines</city><state>CO</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Cornado Garcia</last-name><first-name>Jose Ramon</first-name><address><city>Lakewood</city><state>CO</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A whitelisting approach to redaction may include receiving a normalization request containing a binary file with complex structured data, such as a workbook or spreadsheet file, from an application on a user device through a redaction service provided by an e-discovery platform. In response to the normalization request, a normalization process starts and runs asynchronously to apply a whitelist to the binary file. The whitelist is configurable and specifies features (e.g., data types, workbook object types, etc.) of the binary file that are considered safe by a party to a lawsuit or investigation. The normalization process includes a pre-processing stage, a transferring stage, and a post-processing stage to push all the data to a visible level and produce a normalized document with the whitelisted features. An artifact containing the normalized document can then be generated and used to render a normalized representation for interactive redaction.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="124.46mm" wi="74.93mm" file="US20230004710A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="173.06mm" wi="111.68mm" file="US20230004710A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="235.63mm" wi="167.89mm" file="US20230004710A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="240.45mm" wi="166.88mm" file="US20230004710A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="232.49mm" wi="151.05mm" file="US20230004710A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="231.22mm" wi="157.90mm" orientation="landscape" file="US20230004710A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="232.16mm" wi="140.80mm" orientation="landscape" file="US20230004710A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="124.71mm" wi="149.18mm" file="US20230004710A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="245.28mm" wi="170.10mm" orientation="landscape" file="US20230004710A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="224.37mm" wi="141.65mm" orientation="landscape" file="US20230004710A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="184.07mm" wi="97.37mm" file="US20230004710A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD OF THE INVENTION</heading><p id="p-0002" num="0001">This invention relates generally to redaction technology. More particularly, this invention relates to redaction systems, methods, and computer program products having a whitelisting mechanism, useful for production of data in electronic discovery.</p><heading id="h-0002" level="1">SUMMARY OF THE DISCLOSURE</heading><p id="p-0003" num="0002">For years, practitioners in the legal field have struggled with the challenges of electronic discovery. Today, companies generate millions of electronic documents, emails, messages, files, etc. on a daily basis. The sheer volume of data that could be involved in an electronic discovery process continues to be a technical challenge that needs to be addressed. Adding to this challenge is the fact that electronic documents, emails, messages, files, etc. often have disparate file formats. While disparate file formats are a problem of its own, exacerbating the problem is that even some commonly used file formats can be difficult to apply redaction technology.</p><p id="p-0004" num="0003">For example, spreadsheet programs are commonly used by companies for data visualization and analysis. Spreadsheet files created using these spreadsheet programs can have a common file format (e.g., a binary file format optimized for fast loading and saving) that is recognizable by an operating system on which a spreadsheet program is run. A spreadsheet file in this common file format can contain multiple types of information, including text, microformats, macros, formulas, images, tables, and so on. The disparate nature of these data types makes it difficult to apply redaction technology efficiently, accurately, and effectively to a spreadsheet file. Yet, redaction is a necessary part of electronic discovery. Accordingly, there is a need for a new approach to redaction, particularly for redacting files that contain multiple types of information, such that information contained therein can be discovered in an electronic discovery process without leaking any protected information. The invention disclosed herein can address this need and more by taking a whitelisting approach to redaction.</p><p id="p-0005" num="0004">In some embodiments, a whitelisting approach to redaction may include receiving a normalization request containing a binary file with complex structured data, such as a workbook or spreadsheet file, from an application on a user device through a redaction service provided by an e-discovery platform. In response to the normalization request, a normalization process starts and runs asynchronously to apply a whitelist to the binary file. The whitelist is configurable and specifies features (e.g., data types, workbook object types, etc.) of the binary file that are considered safe by a party to a lawsuit or investigation. The normalization process includes a pre-processing stage, a transferring stage, and a post-processing stage to push all the data to a visible level and produce a normalized document with the whitelisted features. An artifact containing the normalized document can then be generated and used to render a normalized representation for interactive redaction.</p><p id="p-0006" num="0005">More specifically, in some embodiments, a whitelisting redaction method may comprise receiving, from an application on a user device through a redaction service provided by an e-discovery platform, a normalization request containing a binary file. A normalization processor executing on the e-discovery platform may start a normalization process which runs asynchronously. The normalization process may include applying a whitelist to the binary file in a whitelisting process which produces a normalized document with whitelisted features, performing an artifact generation process to generate an artifact containing the normalized document, and storing the artifact in a data store on the e-discovery platform. Through the redaction service, the artifact containing the normalized document can be communicated to the user device. The artifact can then be used by a browser program on the user device to render a normalized representation of the normalized document for interactive redaction.</p><p id="p-0007" num="0006">In some embodiments, the binary file may comprise a source workbook. Accordingly, the whitelisting process may comprise creating a target workbook which is initially empty and iteratively processing each source worksheet in the source workbook to transfer the whitelisted features to the target workbook using the whitelist. In this way, the target workbook is transformed into a normalized workbook.</p><p id="p-0008" num="0007">In some embodiments, source worksheets in the source workbook are processed through an iterative process that includes pre-processing a source worksheet of the source workbook, the pre-processing including unhiding the source worksheet, unhiding a row of the source worksheet, or unhiding a column of the source worksheet to thereby produce a pre-processed worksheet; transferring content of the source worksheet to the pre-processed worksheet to thereby produce a target worksheet; and post-processing the target worksheet, the post-processing including removing empty rows and columns from the target worksheet and matching cell heights and widths to those of the source worksheet.</p><p id="p-0009" num="0008">In some embodiments, the whitelist specifies whitelisted workbook object types. Accordingly, transferring content of a source worksheet to a pre-processed worksheet can include removing a set of workbook objects of the whitelisted workbook object types from the source worksheet and transferring cell values of the set of workbook objects to the target worksheet. In post-processing, the target worksheets are cleaned up and formatted to transform into a normalized workbook.</p><p id="p-0010" num="0009">In some embodiments, the artifact is generated using the normalized document (e.g., a normalized workbook). Further, for each worksheet of the normalized document, any charts, pictures, comments, and/or worksheet content are added to a zip file. Document metadata (e.g., workbook metadata) can also be added to the zip file. The artifact encompasses the zip file and can be stored with other artifacts on the e-discovery platform. At this point, the artifact is ready for use in interactive redaction (e.g., through a normalized representation which is rendered using the artifact).</p><p id="p-0011" num="0010">One embodiment comprises a system comprising a processor and a non-transitory computer-readable storage medium that stores computer instructions translatable by the processor to perform a method substantially as described herein. Another embodiment comprises a computer program product having a non-transitory computer-readable storage medium that stores computer instructions translatable by a processor to perform a method substantially as described herein. Numerous other embodiments are also possible.</p><p id="p-0012" num="0011">These, and other, aspects of the disclosure will be better appreciated and understood when considered in conjunction with the following description and the accompanying drawings. It should be understood, however, that the following description, while indicating various embodiments of the disclosure and numerous specific details thereof, is given by way of illustration and not of limitation. Many substitutions, modifications, additions and/or rearrangements may be made within the scope of the disclosure without departing from the spirit thereof, and the disclosure includes all such substitutions, modifications, additions and/or rearrangements.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0013" num="0012">The drawings accompanying and forming part of this specification are included to depict certain aspects of the invention. A clearer impression of the invention, and of the components and operation of systems provided with the invention, will become more readily apparent by referring to the exemplary, and therefore non-limiting, embodiments illustrated in the drawings, wherein identical reference numerals designate the same components. The features illustrated in the drawings are not necessarily drawn to scale.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a diagrammatic representation of a blacklisting approach to redaction.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a diagrammatic representation of a whitelisting approach to redaction according to some embodiments disclosed herein.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a diagrammatic representation of an example of an electronic discovery platform operating in a network computing environment according to some embodiments disclosed herein.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow chart illustrating an example of an overall normalization process according to some embodiments disclosed herein.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flow chart illustrating an example of an overall whitelisting process according to some embodiments disclosed herein.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow chart illustrating an example of an overall artifact generation process according to some embodiments disclosed herein.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIGS. <b>7</b>-<b>9</b></figref> are flow charts illustrating a pre-processing stage, a transferring stage, and a post-processing stage of a whitelisting process according to some embodiments disclosed herein.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>10</b></figref> depicts a flow diagram showing an example of whitelisting redactable data types of a file format according to some embodiments disclosed herein.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows a portion of a screenshot that illustrates an example of a normalized representation displayed through a redaction viewer according to some embodiments disclosed herein.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>12</b></figref> depicts an example of a search window of a redaction viewer that can be used to search a term in a redaction file and redact the term in all places where it is mentioned, according to some embodiments disclosed herein.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIGS. <b>13</b>A-<b>13</b>B</figref> together depict a sequence diagram showing an example of operation according to some embodiments disclosed herein.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>14</b></figref> depicts a diagrammatic representation of an example of a distributed network computing environment for implementing embodiments disclosed herein.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0026" num="0025">The invention and the various features and advantageous details thereof are explained more fully with reference to the non-limiting embodiments that are illustrated in the accompanying drawings and detailed in the following description. Descriptions of well-known starting materials, processing techniques, components and equipment are omitted so as not to unnecessarily obscure the invention in detail. It should be understood, however, that the detailed description and the specific examples, while indicating some embodiments of the invention, are given by way of illustration only and not by way of limitation. Various substitutions, modifications, additions and/or rearrangements within the spirit and/or scope of the underlying inventive concept will become apparent to those skilled in the art from this disclosure.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a diagrammatic representation of a blacklisting approach to redaction which attempts to remove everything that could be risky (e.g., information that might reveal a trade secret, data that is subject to data protection laws and regulations such as personal identifiable information, medical history, user credentials, etc., language that is considered inappropriate, threats that may raise security concerns, etc.) from a source file. However, with the blacklisting approach, it is hard to remove all that is risky because data could be hidden in the source file. For example, as alluded to above, some the formats may contain sub-data types that may embed a large of amount of invisible data in the a source file.</p><p id="p-0028" num="0027">Further, the blacklisting approach relies on a blacklist to identify what information in a source file needs to be removed for legal purposes. If something is not blacklisted, it is not removed. In electronic discovery (which is also known as e-discovery, ediscovery, eDiscovery, or e-Discovery, and which is collectively referred to herein as e-discovery), it can be important to correctly identify, collect, and produce electronically stored information in response to a request for production in a law suit or investigation. However, items of information that should be blacklisted may constantly be evolving during an e-discovery process. If the blacklist is not current, accurate, or complete, information that should be removed may undesirably be leaked. This problem is exacerbated when a file format is updated with unexpected feature(s). When that happens, efforts to block or remove potentially dangerous content from a source file having a new feature(s) would fail because the existing blacklist does not include the new feature(s).</p><p id="p-0029" num="0028">Usually, in data production, original documents are provided by one party to another. When exchanging electronically, the content of an original file is often turned into images of pages in the Tag Image File Format (TIFF). A recipient of the TIFF files then scans the TIFF files and runs an OCR to attempt to recreate the content of the original file from the images. This is not an efficient process and can be quite excruciatingly time-consuming and tedious. Further, for some file formats, it is not possible to accurately and/or completely recreate the content of the original files. Thus, in some data production cases, a party may desire to exchange the original files instead of the converted (e.g., page images) of the original files. However, in reality, this desire is often met with a technical challenge because existing redaction technology is inadequate when applied to certain file formats, such as spreadsheet files that contain multiple types of information.</p><p id="p-0030" num="0029">A spreadsheet file is an example of a workbook, both of which are binary files having a binary file format. In computing, the term &#x201c;binary file&#x201d; is used to describe a non-text file, although parts of a binary file can be interpreted as text. A binary file consists of complex structured data that must be interpreted by a computer program or hardware processor that understands the corresponding binary format in advance. Formatting information, for example, is contained in binary form in a binary file and is used to interpret how to present the content of the binary file.</p><p id="p-0031" num="0030">The invention disclosed herein can be particularly useful for preparing binary files for redaction. In the following description, a workbook is used as a non-limiting example of a binary file. Skilled artisans appreciate that the invention disclosed herein can be adapted for preparing other types of binary files for redaction.</p><p id="p-0032" num="0031">A single workbook can contain several different types of related information as separate worksheets. All of these different types of related information can potentially contain data. Today, it is practically impossible to accurately and completely convert a workbook into an intermediary file or files in a format that is commonly acceptable for e-discovery purposes and then recreate the content of the workbook from the intermediary file or files.</p><p id="p-0033" num="0032">A goal of the invention is to prepare and produce, given an original file (i.e., a source file in a binary format such as a workbook), a version of the original file that is considered safe (i.e., producing the least amount of risk for legal purposes) for data production in an e-discovery process. in this disclosure, this goal is realized by taking a whitelisting approach to process an original file and produce a version of the original the with the least amount of risk.</p><p id="p-0034" num="0033">As discussed above, some data in a source file may be considered risky for e-discovery purposes and, therefore, should be redacted or otherwise removed from the source file. However, due to the complex data structure of a binary file, a piece of data could be found in different layers in a workbook, for instance, in a table, a cell, and a graph, some of which can be invisible to an end user. Ideally, such a piece of data should be removed from these places altogether. However, a human may not remember to redact or remove a particular piece of data from all these places.</p><p id="p-0035" num="0034">Further, a human may not be able to redact or remove a particular piece of data from all these places. This is because, as discussed above, a human may not know where a piece of data could be hidden in all the places in a workbook. For example, an end user of a spreadsheet program may learn how to draw a pie graph, add data to the pie graph, and delete data from the pie graph. However, the end user may not know or even be aware that a piece of data used in the pie graph could also be hidden in a footnote, a comment, etc. of the workbook.</p><p id="p-0036" num="0035">Even if the end user understands that a piece of data could be hidden in various types of workbook objects, it is extremely difficult for the end user to keep track of every piece of data in all the hidden places in the workbook when redacting the workbook manually. This is particularly the case for product management workbooks which can be quite complex and which tend to have a plurality of documents (e.g., worksheets) in each workbook.</p><p id="p-0037" num="0036">To this end, <figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a diagrammatic representation of a whitelisting approach to redaction that can alleviate the difficulty of preparing binary files for redaction and that can shield users from the complexity of redacting workbooks for e-discovery data production.</p><p id="p-0038" num="0037">Unlike the blacklisting approach to redaction discussed above, whitelist operations allow &#x201c;safe&#x201d; data in an original file to be exported to a target file. For e-discovery, &#x201c;safe&#x201d; data refers to data that is considered by a party to be safe for inclusion in a collection of electronically stored information identified as necessary and appropriate for responding to a request for production in a lawsuit or investigation.</p><p id="p-0039" num="0038">As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the whitelisting approach utilizes a whitelist(s) to promote particular features (e.g., workbook objects of &#x201c;safe&#x201d; workbook object types) in a source file (e.g., a workbook such as a spreadsheet file or any binary file containing different data types, sometimes referred to as subtypes or sub-datatypes, of related information as separate worksheets). These whitelisted features are considered as safe for export by a party involved in a lawsuit or investigation. A target file, which is a version of the source file, is created with the avowed features or objects.</p><p id="p-0040" num="0039">The whitelist can be revised overtime, particularly when a computer program or hardware processor is updated with a new way to process a workbook. For instance, suppose a spreadsheet program is updated with a new feature that allows certain background images to be redacted. A whitelist can be revised to include this new feature. The target file can be iterated through the revised whitelist and the resulting target file would include the redactable background images as they are now considered to be safe for production.</p><p id="p-0041" num="0040">At the frontend, an end user such as a redaction reviewer is provided with a user interface (e.g., a redaction viewer) so that the redaction reviewer can configure the whitelist, as well as performing e-discovery tasks such as identifying a collection of original source files for production, reviewing the original source files, and applying redactions to the content of the original source files where necessary and appropriate. An example of this operation is illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a diagrammatic representation of an example of an e-discovery platform <b>350</b> that is accessible by a redaction reviewer <b>301</b> of a user device <b>310</b> over a network and that operates in a network computing environment. In some embodiments, redaction reviewer <b>301</b> may direct a browser <b>312</b> on user device <b>310</b> to a cloud-based e-discovery application <b>314</b> for identifying a collection of original files in response to a request for production. The original files may reside on user device <b>310</b> and/or a network data storage (not shown). The network data storage can be a repository residing on the premises of an enterprise that employs redaction reviewer <b>301</b>, a cloud-based data storage containing digital assets of the enterprise, etc. The cloud-based e-discovery application <b>314</b> may send the collection of original files thus identified to e-discovery platform <b>350</b> for further processing. Alternatively, in some embodiments, cloud-based e-discovery application <b>314</b> may examine the original files in the collection, determine which binary files would require whitelist operations, and provide those binary files as input source files to e-discovery platform <b>350</b>.</p><p id="p-0043" num="0042">As a non-limiting example, cloud-based e-discovery application <b>314</b> may communicate a source file <b>320</b> to e-discovery platform <b>350</b> through a redaction service provided by e-discovery platform <b>350</b>. The redaction service may call an application programming interface (API) (e.g., API <b>380</b>) of e-discovery platform <b>350</b> to start a normalization process to prepare source file <b>320</b> for interactive redaction.</p><p id="p-0044" num="0043">A normalization processor <b>360</b> processes source file <b>320</b> utilizing a whitelist <b>370</b>. Whitelist <b>370</b> is configurable per a production job or request. Normalization processor <b>360</b> iterates worksheets contained in source file <b>320</b> one by one through whitelist <b>370</b> and produces an artifact that can be used for rendering a normalized representation <b>330</b> for display on user device <b>310</b> through a redaction viewer <b>316</b>. The artifact is a clean version of source file <b>320</b> and, initially, has features of source file <b>320</b> that are allowed per whitelist <b>370</b>, with no redactions applied. Artifacts thus produced can be stored in a data storage <b>390</b> on e-discovery platform <b>350</b>.</p><p id="p-0045" num="0044">Redaction viewer <b>316</b> runs in a window of browser <b>312</b>. Redaction reviewer <b>301</b> can mark up, or otherwise indicate, what features shown on normalized representation <b>330</b> should be redacted. Redaction viewer <b>316</b> communicates user indications (e.g., redaction markups) to e-discovery platform <b>350</b> as redaction instructions <b>318</b>. A target file without the redacted features can then be generated following redaction instructions <b>318</b>. Details and examples of normalization, whitelisting, and artifact generation processes will now be described with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>6</b></figref>.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow chart illustrating an example of an overall normalization process according to some embodiments disclosed herein. In this invention, the term &#x201c;normalization&#x201d; refers to a process that is applied to documents in order to prepare them for redactions. This normalization process requires maintaining the accuracy of the data while reducing the risk of making privileged information that is not part of the redaction process available to third parties. With the whitelisting approach disclosed herein, normalization works on ensuring that only visible content is transferred from an original file to a target file. This allows for irrelevant or privileged objects to not be included in the target file, which is also referred to as a &#x201c;normalized document.&#x201d;</p><p id="p-0047" num="0046">Generally, a native normalization process involves applying various settings to a source file (e.g., a workbook) with multiple data types across worksheets contained in the workbook. Example settings can include unhiding rows/columns, unhiding worksheets, showing comments, deleting blank rows, removing protections, converting formulas into values, and so on. The native normalization process outputs a target file and an artifact, if requested. As illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, an enhanced normalization process <b>400</b> according to embodiments can include uploading a source file (<b>401</b>), applying a whitelist to the source file (<b>405</b>), generating an artifact (<b>410</b>), and storing the artifact and a normalized document (<b>415</b>). Details of an example of a whitelisting process (<b>405</b>) are described below with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Details of an example of an artifact generation process (<b>410</b>) are described below with reference to <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0048" num="0047">As alluded to above, the whitelist can include a configurable list of features (e.g., &#x201c;safe&#x201d; sub-datatypes, workbook object types, etc.) that can be included in a normalized representation of the source file. Depending on the application or application type used in generating the source file, the features may have different labels. Table 1 below provides a non-limiting example of a feature list of workbook object types that are native to a workbook application and a non-limiting example of a feature list of whitelisted object types.</p><p id="p-0049" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="91pt" align="left"/><colspec colname="2" colwidth="112pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" rowsep="1">TABLE 1</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Workbook Object Types</entry><entry>Whitelisted Object Types</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>Macros</entry><entry>Rows with Content Unhidden</entry></row><row><entry/><entry>External Links</entry><entry>Columns with Content Unhidden</entry></row><row><entry/><entry>Hyperlinks</entry><entry>Formatting</entry></row><row><entry/><entry>Shapes</entry><entry>Comments</entry></row><row><entry/><entry>Formulas</entry><entry>Charts</entry></row><row><entry/><entry>Blank Rows</entry><entry>Images</entry></row><row><entry/><entry>Blank Columns</entry></row><row><entry/><entry>Query Tables</entry></row><row><entry/><entry>Protection</entry></row><row><entry/><entry>Background Images</entry></row><row><entry/><entry>OLE Objects</entry></row><row><entry/><entry>Scenarios</entry></row><row><entry/><entry>Sparklines</entry></row><row><entry/><entry>Hidden Sheets</entry></row><row><entry/><entry>Revisions</entry></row><row><entry/><entry>Merged cells</entry></row><row><entry/><entry>Metadata</entry></row><row><entry/><entry>Any New Features</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0050" num="0048">Notice that, in this case, the feature list of whitelisted object types includes features such as &#x201c;Rows with Content Unhidden,&#x201d; &#x201c;Columns with Content Unhidden,&#x201d; etc. that are not part of the feature list of workbook object types. With these features, an end user (e.g., a redaction reviewer) can review and redact previously hidden data where necessary.</p><p id="p-0051" num="0049">With a conventional redaction tool, an end user may only see an image of a single sheet in a spreadsheet file. However, for that single sheet, there can be multiple hidden sheets of data in the spreadsheet the that are not visible to the end user. Such hidden sheets can dramatically increase the amount of invisible data that could be in a source file in a production environment. The blacklist approach attempts to remove everything that could be risky from a production source file. However, it is extremely difficult to remove everything that could be risky from a source file because the source file may have many data types that may embed a large amount of invisible data. It is also impossible to anticipate future updates to a program and, therefore, impossible to include everything that could be risky in a blacklist.</p><p id="p-0052" num="0050">The whitelisting approach discussed above can produce a normalized representation of a source file, particularly of a complex type such as a workbook having multiple data types. Through the normalization process discussed above, all the whitelisted data contained in the source file, whether visible or invisible, is pushed up to the same level. This normalization ensures that an end user (e.g., a redaction reviewer) can review all the whitelisted data in the source file and be able to identify and remove risky data cleanly in a production environment without possibly missing certain pieces of data that might be hidden somewhere in the source file.</p><p id="p-0053" num="0051">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, normalized representation <b>330</b> thus produced by normalization process <b>400</b> is accessible by redaction reviewer <b>301</b> through a browser-based application (e.g., redaction viewer <b>316</b>) running on user device <b>310</b>. In this case, normalized representation <b>330</b> shows whitelisted features of source file <b>320</b>. Since whitelist <b>370</b> is configurable per production job, the whitelisted features of source file <b>320</b> may vary over time and/or per job.</p><p id="p-0054" num="0052"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flow chart illustrating an example of an overall whitelisting process <b>500</b> according to some embodiments disclosed herein. In processing and preparing a workbook (e.g., source file <b>320</b>) for application of a whitelist, whitelisting process <b>500</b> begins with creating a target workbook that is initially empty (<b>501</b>). Whitelisting process <b>500</b> then iterates, one by one, worksheets contained in the workbook. Each iteration can include preparing (pre-processing) a source worksheet (<b>505</b>), collecting state information of the source worksheet (<b>510</b>), transferring cell values and format information from the source worksheet to a target worksheet of the target workbook using a whitelist (<b>515</b>), and post-processing the target worksheet (<b>520</b>). Details of a pre-processing process (<b>505</b>) are described below with reference to <figref idref="DRAWINGS">FIG. <b>7</b></figref>. Details of a transferring process (<b>510</b>) are described below with reference to <figref idref="DRAWINGS">FIG. <b>8</b></figref>. Details of a post-processing process (<b>515</b>) are described below with reference to <figref idref="DRAWINGS">FIG. <b>9</b></figref>. Through processing all the source worksheets in which each source worksheet is iterated through a pre-processing process, a transferring process, and a post-processing process, the target workbook is transformed into a normalized workbook with whitelisted features. Whitelisting process <b>500</b> then sends the normalized workbook to storage (e.g., artifact storage <b>390</b>).</p><p id="p-0055" num="0053"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow chart that illustrates an example of processing performed at a pre-processing stage of whitelisting process <b>500</b> according to some embodiments disclosed herein. At this stage, pre-processing process <b>700</b> is operable to take a source worksheet <b>701</b> and performs a series of whitelisting operations, including unhiding the source worksheet, rows, and columns (<b>705</b>), transferring page formatting information and set up information (<b>710</b>), removing merged cells and ranges (<b>715</b>), and transferring any charts, pictures, comments, and so on to a target worksheet. A goal of this pre-processing is to identify what features (e.g., workbook objects of &#x201c;safe&#x201d; workbook object types) the source worksheet has which have been whitelisted, which have been removed from the source worksheet, and which can be presented to a user. Pre-processing process <b>700</b> can make a note of these features and keep the note as metadata for a target workbook. Pre-processing process <b>700</b> can then send the pre-processed target worksheet to the next stage (<b>725</b>).</p><p id="p-0056" num="0054">Pre-processing process <b>700</b> can be useful when a computer program or hardware processor has been updated with a new feature(s). For example, a new version of a spreadsheet program may support a new feature or data type that is unknown to e-discovery platform <b>350</b>. Pre-processing process <b>700</b> can identify and note this new feature. This allows a reviewer a chance to review the new feature, even if e-discovery platform <b>350</b> had never encountered the new feature before, allowing the whitelisting process disclosed herein to be &#x201c;future-proof&#x201d;.</p><p id="p-0057" num="0055"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flow chart that illustrates an example of processing performed at a transferring stage of whitelisting process <b>500</b> according to some embodiments disclosed herein. At this stage, transferring process <b>800</b> takes the pre-processed target worksheet (<b>801</b>) and performs cell-level transferring operations that remove/strip whitelisted features from the source worksheet and transfer their cell values (<b>805</b>) and formatting (<b>810</b>) to the target worksheet. As exemplified in Table 1 above, the whitelisted features can include unhidden contents of rows and columns, page formatting, comments, charts, images, etc. These whitelisted features are transferred or otherwise carried over to the new file (i.e., the target workbook). Transferring process <b>800</b> can then send the target worksheet to the next stage (<b>815</b>).</p><p id="p-0058" num="0056"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flow chart that illustrates an example of processing performed at a post-processing stage of whitelisting process <b>500</b> according to some embodiments disclosed herein. At this stage, post-processing process <b>900</b> takes the target worksheet (<b>901</b>) and performs cleanup operations so that the target worksheet is suitable for use in artifact generation as a normalized worksheet (see <figref idref="DRAWINGS">FIG. <b>6</b></figref>). Examples of cleanup operations can include removing empty or blank rows and columns so they are not transferred to the new file (<b>905</b>) and matching cell widths and heights to those of the source worksheet (e.g., matching the width and height of a cell in the target worksheet to a corresponding cell in the source worksheet) (<b>910</b>). This produces clean content (e.g., a normalized workbook) for review and redaction. At this time, no redactions have been made and a final production file has not been generated.</p><p id="p-0059" num="0057">Returning to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the normalized workbook produced by whitelisting process <b>500</b> is stored and used in generating an artifact which, in turn, can then be used to render or otherwise prepare a normalized representation of the source file for presentation through an e-discovery tool, such as e-discovery application <b>314</b> or redaction viewer <b>316</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Although shown separately in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, e-discovery application <b>314</b> and redaction viewer <b>316</b> can be part of a larger program. Alternatively, redaction viewer <b>316</b> can be a function of e-discovery application <b>314</b>. Other implementations are also possible. Thus, <figref idref="DRAWINGS">FIG. <b>3</b></figref> is meant to be illustrative, rather than limiting.</p><p id="p-0060" num="0058"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow chart that illustrates an example of an overall artifact generation process according to some embodiments disclosed herein. In this example, artifact generation process <b>600</b> begins with receiving a normalized workbook (<b>601</b>). Each worksheet of the normalized workbook is then processed for generation of an artifact (e.g., a zip file). More specifically, artifact generation process <b>600</b> iterates through each worksheet of the normalized workbook to add, to the zip file, the actual files of any charts (<b>605</b>), pictures (<b>610</b>), comments (<b>615</b>), and worksheet content (<b>620</b>), etc. referenced therein. Artifact generation process <b>600</b> then adds metadata associated with the normalized workbook to the zip file (<b>625</b>) and sends the artifact to storage (<b>630</b>).</p><p id="p-0061" num="0059">Referring now to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the inventive subject matter in one embodiment is directed to a new, novel, useful, and non-obvious method <b>1000</b> for whitelisting redactable data types for a binary file format so that such data types may be interactively redacted and produced, such as in an electronic discovery computing environment.</p><p id="p-0062" num="0060">In the embodiment of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, a file <b>1002</b> of a particular format <b>1005</b> is identified as a candidate for redaction. As a non-limiting example, file format <b>1005</b> can include a spreadsheet file format <b>1005</b><i>a</i>, a drawing file format <b>1005</b><i>b</i>, a slideshow file format <b>1005</b><i>c</i>, and/or any other file format <b>1005</b><i>n </i>desired for redaction.</p><p id="p-0063" num="0061">In this embodiment, a system implementing method <b>1000</b> receives file <b>1002</b> and determines file format <b>1005</b>. In the non-limiting example of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, file <b>1002</b> is of spreadsheet file format <b>1005</b><i>a </i>which comprises data types 1, 2, 3 through n (generally represented by reference numeral <b>1012</b>).</p><p id="p-0064" num="0062">Next, the system parses (<b>1010</b>) file <b>1002</b> into components <b>1015</b>. Here, each component <b>1015</b> comprises data for one of data types <b>1012</b> of spreadsheet file format <b>1005</b><i>a</i>. The system selects a sub-portion of components <b>1015</b> based on matching (<b>1020</b>) data types <b>1012</b> of a component <b>1015</b> to one of a whitelisted, redactable data types <b>1022</b>. In the example of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, whitelisted data types <b>1022</b> include data type 1, data type 3, data type 6, and data type 10. The system generates redaction file <b>1032</b> and populates it with data having data types <b>1034</b> from file <b>1002</b> that matched whitelisted data types <b>1022</b>.</p><p id="p-0065" num="0063">Redaction file <b>1032</b> generated by the system may be of the same file format as original file <b>1002</b> or it may be a different file type that is more amenable for redaction. In some embodiments, an end user does not interact with redaction file <b>1031</b>. Rather, redaction file <b>1032</b> is used to render a normalized representation in Hypertext Markup Language (HTML) that is more amenable for interactive redaction. The normalized representation may then be presented as a browser page for interactive redaction (<b>1040</b>).</p><p id="p-0066" num="0064"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows a portion of a screenshot showing an example of a redaction viewer <b>1100</b> through which a normalized representation of a redaction file is displayed in a browser window or page with whitelisted, redactable data types for interactive redaction. In the example of <figref idref="DRAWINGS">FIG. <b>11</b></figref>, cell <b>1110</b> is highlighted or otherwise marked for redaction.</p><p id="p-0067" num="0065">Although the normalized representation shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref> has rows, columns, cells, text strings, areas, pages, etc. similarly formatted as the original spreadsheet (not shown), it is not a spreadsheet file. That is, a user of redaction viewer <b>1100</b> does not interact with any spreadsheet file&#x2014;original or whitelisted. Rather, a user of redaction viewer <b>1100</b> interacts with a normalized representation of a whitelisted spreadsheet file. Any user-provided redaction instructions&#x2014;highlights, marks, indications, etc., to redact whitelisted features shown through the normalized representation are used to generate a production spreadsheet file without the user-indicated whitelisted features.</p><p id="p-0068" num="0066">The user-provided redaction instructions can include those automatically generated by a search functionality <b>1120</b> of the redaction viewer. <figref idref="DRAWINGS">FIG. <b>12</b></figref> depicts an example of a &#x201c;Find and Redact&#x201d; window <b>1200</b> through which a redaction reviewer can direct search functionality <b>1120</b> of the redaction viewer to search a term in a redaction file (e.g., a normalized document produced by a normalization process disclosed herein) and redact the term in all places where it is mentioned. If the redaction reviewer determines that no redaction is necessary, a production spreadsheet file is generated based on the redaction file, with all the whitelisted features (e.g., whitelisted data types, whitelisted workbook object types, etc.). Otherwise, a production spreadsheet file is generated with redactions applied to the whitelisted features in the redaction file.</p><p id="p-0069" num="0067">As is explained above, the inventive technique employs whitelisting of data types for a file format that are deemed to be interactively redactable on a display. This file format may contain dozens if not hundreds of data types. For instance, in Microsoft&#xae; Excel&#xae;, manufactured by the Microsoft Corporation, data as straightforward as a date value may combine and include multiple data types, some of which represent the actual date value, while others represent date formulas and other information such as date value field formatting. Not all these data types, even if they may be distilled out from the formatted file into a separate component, are presentable for interactive redaction. For example, data value field formatting data may comprise cryptic alpha-numeric values that are not inherently readable and selectable for redaction.</p><p id="p-0070" num="0068">Moreover, as alluded to above, certain data types may be hidden and unknown to the user, yet there may be a significant security and confidentiality risk of allowing data of these data types to be potentially discoverable in a produced file. Advantageously, the predetermined whitelist of data types ensures that only redactable data is produced and presented, while non-redactable and potentially risky data (and often hidden and unknown data) is removed from the original file. Such hidden data may be discoverable by file format experts. This is not to say that hidden data may not be one of the whitelisted data types. There are times when hidden data may be desired to be exposed and presented in a way that may be redactable. Often, however, in some embodiments, whitelisted data types are predetermined based on selectable data types that may be interactively redacted.</p><p id="p-0071" num="0069">The inventive technique employs whitelisting of data types that are to be copied and regenerated from an original file into a redaction file, rather than blacklisting data types, a technique which removes data types from the original file for production. A significant advantage of whitelisting data types over blacklisting data types is that whitelisting essentially builds the redaction file data type by data type, whereas blacklisting removes data types. The former is more adaptive to updated file formats which may include new data types, either from the format manufacturer or customized by users and/or organizations. The whitelisting technique disclosed herein ensures that such potentially risky and yet-to-be-vetted new data types are not added to the redaction file (e.g., redaction file <b>1032</b>) because they will not be in the data type whitelist. In contrast, the blacklisting technique will not remove such potentially risky new data types if they are not yet vetted because they will not be in the blacklist. Thus, until and when the new data type is vetted, the whitelist techniques minimizes the risk of unwanted and undesired data copied and regenerated in a redaction file.</p><p id="p-0072" num="0070">Referring again to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, in still further embodiments, whitelisted data types <b>1022</b> may include a text-based data type and/or numerical-based data type <b>1042</b>. The system is operable to normalize (<b>1050</b>) the text-based data type and the numerical-based data type. Such normalization may be necessary when the data is generated from a combination of data types into the produced and presented format.</p><p id="p-0073" num="0071">Predetermining which data types to whitelist may be accomplished in several ways. One embodiment involves domain experts who understand the file format <b>1005</b> to predetermine which data types to produce and present for redacting and which to drop from an original file. Alternatively or additionally, in some embodiments, the inventive technique may utilize heuristics and machine learning <b>1060</b> to automatically determine and/or present whitelist data type candidates to domain experts for whitelisting. Such techniques <b>560</b> may involve analyzing the data for a data type. For example, if the data is primarily unstructured text, the data type may be determined as interactively redactable and placed on the whitelist. Data deemed to be formatting information and/or formulaic may not be interactively redactable and, therefore, may not be placed on the whitelist. In this way, in some embodiments, such as that shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, supported file formats <b>1005</b> may be updated (<b>1070</b>) to include a new data type n+1 and whitelisted data types <b>1022</b> may be updated to whitelisted data types <b>1072</b> that include the new data type n+1 <b>1074</b> so that new data type n+1 <b>1074</b> can be included in redaction file <b>1032</b> and be presented for interactive redaction via a normalized representation as discussed above (<b>1040</b>).</p><p id="p-0074" num="0072"><figref idref="DRAWINGS">FIGS. <b>13</b>A-<b>13</b>B</figref> depict a sequence diagram that shows an example of operation <b>1300</b>. In some embodiments, operation <b>1300</b> can be implemented as a redaction service provided by e-discovery platform <b>350</b>. In this example, operation <b>1300</b> is initiated in response to a normalization request <b>1301</b> from a requester. The normalization request has a payload containing a source file in a binary format (e.g., one that is native to a spreadsheet program) and specifies input parameters and values thereof. The input parameters, which can be passed as a query string, can include a document identifier (&#x201c;Documentld&#x201d;) identifying the native binary file, a customer identifier (&#x201c;CustomerID&#x201d;) identifying the requester, and an artifact generation parameter (&#x201c;GenerateArtifact&#x201d;) for indicating whether normalized contents are to be stored in the system. As a non-limiting example, the maximum size limit for the native binary file is 90 MB.</p><p id="p-0075" num="0073">Operation <b>1300</b> starts a normalization process <b>1303</b> and applies default normalization settings. As a non-limiting example, default normalization settings can include those to decrypt password encrypted sections, unhide hidden rows/hidden columns/hidden sheets, show print comments, show all headers and footers, delete blank rows and columns, flatten formulas for data presentation, render graphs as images, remove external links, disable macros, etc. Operation <b>1300</b> may store the payload of the normalization request and call a designated API (e.g., &#x201c;ExcelAPI&#x201d; provided by e-discovery platform <b>350</b>) to start normalization process <b>1303</b>. This can be accomplished by sending a POST request to the designated API which will start a process that runs asynchronously to produce a normalized document. Operation <b>1300</b> may create an entry in a data store (e.g., database <b>1311</b>) to track the status using a process identifier (e.g., &#x201c;ProcessId&#x201d; <b>1313</b>) returned by the asynchronous process that performs the normalization. If the normalization process fails to start, an error status code is returned. Optionally, operation <b>1300</b> may abort the normalization request (<b>1305</b>).</p><p id="p-0076" num="0074">Since the process to generate a normalization document runs asynchronously, the normalization request returns immediately and before the output is ready. Thus, operation <b>1300</b> is operable to check the status of the asynchronous process by sending a GET request specifying the process identifier to query database <b>311</b> about the resource just created. In response to this request, a JavaScript Object Notation (JSON) will be returned that includes a &#x201c;state&#x201d; property. The state property may indicate whether the state of the normalization is pending, in-progress, completed, or failed. When the state property indicates &#x201c;completed&#x201d;, operation <b>1300</b> can proceed to the next step.</p><p id="p-0077" num="0075">Once the normalization process completes successfully, the new, normalized document is available for download (<b>1307</b>). Downloading of the normalized document can be accomplished by retrieving the normalized document from the data store using the process identifier and loading the normalized document into the payload of a REST response.</p><p id="p-0078" num="0076">If the normalization request indicates an artifact and the normalization process completes successfully, the artifact can be downloaded in a similar way (<b>1309</b>). An example of an artifact can be a zip file containing normalized data (e.g., normalizeddata_sheet1.xml, normalizeddata_sheet2.xml, etc.), chart images (e.g., sheet1_chart1.png, sheet1_chart2.png, etc.), pictures (e.g., sheet1_picture1.png, sheet2_picture2, etc.), and normalized file metadata (e.g., normalizedfile.meta). As discussed above, the artifact thus generated can be useful for rendering a normalized representation of the normalized document with whitelisted redactable content (e.g., whitelisted features, whitelisted data types, whitelisted sub-datatypes, whitelisted workbook object types, etc.) for interactive redaction through a redaction viewer.</p><p id="p-0079" num="0077"><figref idref="DRAWINGS">FIG. <b>14</b></figref> depicts a diagrammatic representation of an example of a distributed network computing environment for implementing embodiments disclosed herein. In the example illustrated, network computing environment <b>1400</b> includes network <b>1414</b> that can be bi-directionally coupled to user computer <b>1412</b> and e-discovery server <b>1416</b> (e.g., one that operates on the premises of an enterprise or one that is hosted in a cloud computing environment). Computer <b>1416</b> can be bi-directionally coupled to database <b>1418</b>. Network <b>1414</b> may represent a combination of wired and wireless networks that network computing environment <b>1400</b> may utilize for various types of network communications known to those skilled in the art.</p><p id="p-0080" num="0078">For the purpose of illustration, a single system is shown for each of computer <b>1412</b> and computer <b>1416</b>. However, with each of each of computer <b>1412</b> and computer <b>1416</b>, a plurality of computers (not shown) may be interconnected to each other over network <b>1414</b>. For example, a plurality of computers <b>1412</b> and a plurality of computers <b>1416</b> may be coupled to network <b>1414</b>. Computers <b>1412</b> may include data processing systems for communicating with computer <b>1416</b>. Computers <b>1412</b> may include data processing systems for form designers whose jobs may require them to design, build, and/or customize forms used in network computing environment <b>1400</b>.</p><p id="p-0081" num="0079">Computer <b>1412</b> can include central processing unit (&#x201c;CPU&#x201d;) <b>1450</b>, read-only memory (&#x201c;ROM&#x201d;) <b>1452</b>, random access memory (&#x201c;RAM&#x201d;) <b>1454</b>, hard drive (&#x201c;HD&#x201d;) or storage memory <b>1456</b>, and input/output device(s) (&#x201c;I/O&#x201d;) <b>1458</b>. I/O <b>1458</b> can include a keyboard, monitor, printer, electronic pointing device (e.g., mouse, trackball, stylus, etc.), or the like. Computer <b>1412</b> can include a desktop computer, a laptop computer, a personal digital assistant, a cellular phone, or nearly any device capable of communicating over a network.</p><p id="p-0082" num="0080">Likewise, computer <b>1416</b> may include CPU <b>1460</b>, ROM <b>1462</b>, RAM <b>1464</b>, HD <b>1466</b>, and I/O <b>1468</b>. Computer <b>1416</b> may provide e-discovery services including a redaction service to computer <b>1412</b> over network <b>1414</b>. In some embodiments, database <b>1418</b> may be configured for storing normalization artifacts and normalized documents.</p><p id="p-0083" num="0081">Each of the computers in <figref idref="DRAWINGS">FIG. <b>14</b></figref> may have more than one CPU, ROM, RAM, HD, I/O, or other hardware components. For the sake of brevity, each computer is illustrated as having one of each of the hardware components, even if more than one is used. Each of computers <b>1412</b> and <b>1416</b> is an example of a data processing system. ROM <b>1452</b> and <b>1462</b>; RAM <b>1454</b> and <b>1464</b>; HD <b>1456</b> and <b>1466</b>; and database <b>1418</b> can include media that can be read by CPU <b>1450</b> or <b>1460</b>. Therefore, these types of memories include non-transitory computer-readable storage media. These memories may be internal or external to computers <b>1412</b> or <b>1416</b>.</p><p id="p-0084" num="0082">Portions of the methods described herein may be implemented in suitable software code that may reside within ROM <b>1452</b> or <b>1462</b>; RAM <b>1454</b> or <b>1464</b>; or HD <b>1456</b> or <b>1466</b>. In addition to those types of memories, the instructions in an embodiment disclosed herein may be contained on a data storage device with a different computer-readable storage medium, such as a hard disk. Alternatively, the instructions may be stored as software code elements on a data storage array, magnetic tape, floppy diskette, optical storage device, or other appropriate data processing system readable medium or storage device.</p><p id="p-0085" num="0083">Those skilled in the relevant art will appreciate that the invention can be implemented or practiced with other computer system configurations, including without limitation multi-processor systems, network devices, mini-computers, mainframe computers, data processors, and the like. The invention can be embodied in a computer or data processor that is specifically programmed, configured, or constructed to perform the functions described in detail herein. The invention can also be employed in distributed computing environments, where tasks or modules are performed by remote processing devices, which are linked through a communications network such as a local area network (LAN), wide area network (WAN), and/or the Internet. In a distributed computing environment, program modules or subroutines may be located in both local and remote memory storage devices. These program modules or subroutines may, for example, be stored or distributed on computer-readable media, including magnetic and optically readable and removable computer discs, stored as firmware in chips, as well as distributed electronically over the Internet or over other networks (including wireless networks). Example chips may include Electrically Erasable Programmable Read-Only Memory (EEPROM) chips. Embodiments discussed herein can be implemented in suitable instructions that may reside on a non-transitory computer-readable medium, hardware circuitry or the like, or any combination and that may be translatable by one or more server machines. Examples of a non-transitory computer-readable medium are provided below in this disclosure.</p><p id="p-0086" num="0084">ROM, RAM, and HD are computer memories for storing computer-executable instructions executable by the CPU or capable of being compiled or interpreted to be executable by the CPU. Suitable computer-executable instructions may reside on a computer-readable medium (e.g., ROM, RAM, and/or HD), hardware circuitry or the like, or any combination thereof. Within this disclosure, the term &#x201c;computer-readable medium&#x201d; is not limited to ROM, RAM, and HD and can include any type of data storage medium that can be read by a processor. Examples of computer-readable storage media can include, but are not limited to, volatile and non-volatile computer memories and storage devices such as random access memories, read-only memories, hard drives, data cartridges, direct access storage device arrays, magnetic tapes, floppy diskettes, flash memory drives, optical data storage devices, compact-disc read-only memories, and other appropriate computer memories and data storage devices. Thus, a computer-readable medium may refer to a data cartridge, a data backup magnetic tape, a floppy diskette, a flash memory drive, an optical data storage drive, a CD-ROM, ROM, RAM, HD, or the like.</p><p id="p-0087" num="0085">The processes described herein may be implemented in suitable computer-executable instructions that may reside on a computer-readable medium (for example, a disk, CD-ROM, a memory, etc.). Alternatively, the computer-executable instructions may be stored as software code components on a direct access storage device array, magnetic tape, floppy diskette, optical storage device, or other appropriate computer-readable medium or storage device.</p><p id="p-0088" num="0086">Any suitable programming language can be used to implement the routines, methods or programs of embodiments of the invention described herein, including C, C++, Java, JavaScript, HTML, or any other programming or scripting code, etc. Other software/hardware/network architectures may be used. For example, the functions of the disclosed embodiments may be implemented on one computer or shared/distributed among two or more computers in or across a network. Communications between computers implementing embodiments can be accomplished using any electronic, optical, radio frequency signals, or other suitable methods and tools of communication in compliance with known network protocols.</p><p id="p-0089" num="0087">Different programming techniques can be employed such as procedural or object oriented. Any particular routine can execute on a single computer processing device or multiple computer processing devices, a single computer processor or multiple computer processors. Data may be stored in a single storage medium or distributed through multiple storage mediums, and may reside in a single database or multiple databases (or other data storage techniques). Although the steps, operations, or computations may be presented in a specific order, this order may be changed in different embodiments. In some embodiments, to the extent multiple steps are shown as sequential in this specification, some combination of such steps in alternative embodiments may be performed at the same time. The sequence of operations described herein can be interrupted, suspended, or otherwise controlled by another process, such as an operating system, kernel, etc. The routines can operate in an operating system environment or as stand-alone routines. Functions, routines, methods, steps and operations described herein can be performed in hardware, software, firmware or any combination thereof.</p><p id="p-0090" num="0088">Embodiments described herein can be implemented in the form of control logic in software or hardware or a combination of both. The control logic may be stored in an information storage medium, such as a computer-readable medium, as a plurality of instructions adapted to direct an information processing device to perform a set of steps disclosed in the various embodiments. Based on the disclosure and teachings provided herein, a person of ordinary skill in the art will appreciate other ways and/or methods to implement the invention.</p><p id="p-0091" num="0089">It is also within the spirit and scope of the invention to implement in software programming or code any of the steps, operations, methods, routines or portions thereof described herein, where such software programming or code can be stored in a computer-readable medium and can be operated on by a processor to permit a computer to perform any of the steps, operations, methods, routines or portions thereof described herein. The invention may be implemented by using software programming or code in one or more digital computers, by using application specific integrated circuits, programmable logic devices, field programmable gate arrays, optical, chemical, biological, quantum or nanoengineered systems, components and mechanisms may be used. The functions of the invention can be achieved by distributed or networked systems. Communication or transfer (or otherwise moving from one place to another) of data may be wired, wireless, or by any other means.</p><p id="p-0092" num="0090">A &#x201c;computer-readable medium&#x201d; may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, system, or device. The computer-readable medium can be, by way of example only but not by limitation, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, system, device, propagation medium, or computer memory. Such computer-readable medium shall generally be machine readable and include software programming or code that can be human readable (e.g., source code) or machine readable (e.g., object code). Examples of non-transitory computer-readable media can include random access memories, read-only memories, hard drives, data cartridges, magnetic tapes, floppy diskettes, flash memory drives, optical data storage devices, compact-disc read-only memories, and other appropriate computer memories and data storage devices. In an illustrative embodiment, some or all of the software components may reside on a single server computer or on any combination of separate server computers. As one skilled in the art can appreciate, a computer program product implementing an embodiment disclosed herein may comprise one or more non-transitory computer-readable media storing computer instructions translatable by one or more processors in a computing environment.</p><p id="p-0093" num="0091">A &#x201c;processor&#x201d; includes any, hardware system, mechanism or component that processes data, signals or other information. A processor can include a system with a central processing unit, multiple processing units, dedicated circuitry for achieving functionality, or other systems. Processing need not be limited to a geographic location, or have temporal limitations. For example, a processor can perform its functions in &#x201c;real-time,&#x201d; &#x201c;offline,&#x201d; in a &#x201c;batch mode,&#x201d; etc. Portions of processing can be performed at different times and at different locations, by different (or the same) processing systems.</p><p id="p-0094" num="0092">As used herein, the terms &#x201c;comprises,&#x201d; &#x201c;comprising,&#x201d; &#x201c;includes,&#x201d; &#x201c;including,&#x201d; &#x201c;has,&#x201d; &#x201c;having,&#x201d; or any other variation thereof, are intended to cover a non-exclusive inclusion. For example, a process, product, article, or apparatus that comprises a list of elements is not necessarily limited only those elements but may include other elements not expressly listed or inherent to such process, product, article, or apparatus.</p><p id="p-0095" num="0093">Furthermore, the term &#x201c;or&#x201d; as used herein is generally intended to mean &#x201c;and/or&#x201d; unless otherwise indicated. For example, a condition A or B is satisfied by any one of the following: A is true (or present) and B is false (or not present), A is false (or not present) and B is true (or present), and both A and B are true (or present). As used herein, a term preceded by &#x201c;a&#x201d; or &#x201c;an&#x201d; (and &#x201c;the&#x201d; when antecedent basis is &#x201c;a&#x201d; or &#x201c;an&#x201d;) includes both singular and plural of such term, unless clearly indicated otherwise (i.e., that the reference &#x201c;a&#x201d; or &#x201c;an&#x201d; clearly indicates only the singular or only the plural). Also, as used in the description herein, the meaning of &#x201c;in&#x201d; includes &#x201c;in&#x201d; and &#x201c;on&#x201d; unless the context clearly dictates otherwise.</p><p id="p-0096" num="0094">It will also be appreciated that one or more of the elements depicted in the drawings/figures can also be implemented in a more separated or integrated manner, or even removed or rendered as inoperable in certain cases, as is useful in accordance with a particular application. Additionally, any signal arrows in the drawings/figures should be considered only as exemplary, and not limiting, unless otherwise specifically noted. The scope of the disclosure should be determined by the following claims and their legal equivalents.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method, comprising:<claim-text>receiving, from an application on a user device through a redaction service provided by an e-discovery platform, a normalization request containing a binary file;</claim-text><claim-text>starting, by a normalization processor executing on the e-discovery platform, a normalization process, wherein the normalization process comprises:<claim-text>applying a whitelist to the binary file in a whitelisting process which produces a normalized document with whitelisted features;</claim-text><claim-text>performing an artifact generation process to generate an artifact containing the normalized document; and</claim-text><claim-text>storing the artifact in a data store on the e-discovery platform; and</claim-text></claim-text><claim-text>providing, through the redaction service, the artifact containing the normalized document to the user device, wherein the artifact is used by a browser program on the user device to render a normalized representation of the normalized document for interactive redaction.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the binary file comprises a source workbook and wherein the whitelisting process further comprises:<claim-text>creating a target workbook which is initially empty; and</claim-text><claim-text>iteratively processing each source worksheet in the source workbook to transfer the whitelisted features to the target workbook using the whitelist and thereby transform the target workbook into a normalized workbook.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the artifact generation process further comprises:<claim-text>receiving the normalized workbook;</claim-text><claim-text>for each worksheet of the normalized workbook, adding at least one of a chart, picture, comment, or worksheet content to a zip file; and</claim-text><claim-text>adding workbook metadata to the zip file, wherein the artifact comprises the zip file.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the iteratively processing each source worksheet in the source workbook further comprises:<claim-text>pre-processing a source worksheet of the source workbook, the pre-processing including unhiding the source worksheet, unhiding a row of the source worksheet, or unhiding a column of the source worksheet to thereby produce a pre-processed worksheet;</claim-text><claim-text>transferring content of the source worksheet to the pre-processed worksheet to thereby produce a target worksheet; and</claim-text><claim-text>post-processing the target worksheet, the post-processing including removing empty rows and columns from the target worksheet and matching cell heights and widths to those of the source worksheet.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the whitelist specifies whitelisted workbook object types and wherein the transferring further comprises:<claim-text>removing a set of workbook objects of the whitelisted workbook object types from the source worksheet; and</claim-text><claim-text>transferring cell values of the set of workbook objects to the target worksheet.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein starting the normalization process comprises:<claim-text>making an application programming interface (API) call to an API provided by the e-discovery platform, wherein the API call starts the normalization process which runs asynchronously to produce the normalized document with the whitelisted features.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. A system, comprising:<claim-text>a processor;</claim-text><claim-text>a non-transitory computer-readable medium; and</claim-text><claim-text>stored instructions translatable by the processor for:<claim-text>receiving, from an application on a user device through a redaction service provided by the system, a normalization request containing a binary file;</claim-text><claim-text>starting, by a normalization processor executing on the processor, a normalization process, wherein the normalization process comprises:<claim-text>applying a whitelist to the binary file in a whitelisting process which produces a normalized document with whitelisted features;</claim-text><claim-text>performing an artifact generation process to generate an artifact containing the normalized document; and</claim-text><claim-text>storing the artifact in a data store on the e-discovery platform; and</claim-text></claim-text><claim-text>providing, through the redaction service, the artifact containing the normalized document to the user device, wherein the artifact is used by a browser program on the user device to render a normalized representation of the normalized document for interactive redaction.</claim-text></claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the binary file comprises a source workbook and wherein the whitelisting process further comprises:<claim-text>creating a target workbook which is initially empty; and</claim-text><claim-text>iteratively processing each source worksheet in the source workbook to transfer the whitelisted features to the target workbook using the whitelist and thereby transform the target workbook into a normalized workbook.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the artifact generation process further comprises:<claim-text>receiving the normalized workbook;</claim-text><claim-text>for each worksheet of the normalized workbook, adding at least one of a chart, picture, comment, or worksheet content to a zip file; and</claim-text><claim-text>adding workbook metadata to the zip file, wherein the artifact comprises the zip file.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the iteratively processing each source worksheet in the source workbook further comprises:<claim-text>pre-processing a source worksheet of the source workbook, the pre-processing including unhiding the source worksheet, unhiding a row of the source worksheet, or unhiding a column of the source worksheet to thereby produce a pre-processed worksheet;</claim-text><claim-text>transferring content of the source worksheet to the pre-processed worksheet to thereby produce a target worksheet; and</claim-text><claim-text>post-processing the target worksheet, the post-processing including removing empty rows and columns from the target worksheet and matching cell heights and widths to those of the source worksheet.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the whitelist specifies whitelisted workbook object types and wherein the transferring further comprises:<claim-text>removing a set of workbook objects of the whitelisted workbook object types from the source worksheet; and</claim-text><claim-text>transferring cell values of the set of workbook objects to the target worksheet.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein starting the normalization process comprises:<claim-text>making an application programming interface (API) call to an API provided by the e-discovery platform, wherein the API call starts the normalization process which runs asynchronously to produce the normalized document with the whitelisted features.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A computer program product comprising a non-transitory computer-readable medium storing instructions translatable by a processor for:<claim-text>receiving, from an application on a user device through a redaction service, a normalization request containing a binary file;</claim-text><claim-text>starting, by a normalization processor executing on the processor, a normalization process, wherein the normalization process comprises:<claim-text>applying a whitelist to the binary file in a whitelisting process which produces a normalized document with whitelisted features;</claim-text><claim-text>performing an artifact generation process to generate an artifact containing the normalized document; and</claim-text><claim-text>storing the artifact in a data store on the e-discovery platform; and</claim-text></claim-text><claim-text>providing, through the redaction service, the artifact containing the normalized document to the user device, wherein the artifact is used by a browser program on the user device to render a normalized representation of the normalized document for interactive redaction.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the binary file comprises a source workbook and wherein the whitelisting process further comprises:<claim-text>creating a target workbook which is initially empty; and</claim-text><claim-text>iteratively processing each source worksheet in the source workbook to transfer the whitelisted features to the target workbook using the whitelist and thereby transform the target workbook into a normalized workbook.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The computer program product of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the artifact generation process further comprises:<claim-text>receiving the normalized workbook;</claim-text><claim-text>for each worksheet of the normalized workbook, adding at least one of a chart, picture, comment, or worksheet content to a zip file; and</claim-text><claim-text>adding workbook metadata to the zip file, wherein the artifact comprises the zip file.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer program product of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the iteratively processing each source worksheet in the source workbook further comprises:<claim-text>pre-processing a source worksheet of the source workbook, the pre-processing including unhiding the source worksheet, unhiding a row of the source worksheet, or unhiding a column of the source worksheet to thereby produce a pre-processed worksheet;</claim-text><claim-text>transferring content of the source worksheet to the pre-processed worksheet to thereby produce a target worksheet; and</claim-text><claim-text>post-processing the target worksheet, the post-processing including removing empty rows and columns from the target worksheet and matching cell heights and widths to those of the source worksheet.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer program product of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the whitelist specifies whitelisted workbook object types and wherein the transferring further comprises:<claim-text>removing a set of workbook objects of the whitelisted workbook object types from the source worksheet; and</claim-text><claim-text>transferring cell values of the set of workbook objects to the target worksheet.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein starting the normalization process comprises:<claim-text>making an application programming interface (API) call to an API provided by the e-discovery platform, wherein the API call starts the normalization process which runs asynchronously to produce the normalized document with the whitelisted features.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A method for parsing a file of a format, the format comprising of a plurality of data types, to generate a redaction file comprising a whitelisted sub-portion of the plurality of data types that are predetermined to be redactable, the method comprising:<claim-text>receiving the file and determining the format of the file;</claim-text><claim-text>parsing the file into components, each component comprising a corresponding data type of the plurality of data types;</claim-text><claim-text>selecting a sub-portion of the components based on matching the corresponding data type of the component to one of the whitelisted, redactable data types;</claim-text><claim-text>generating the redaction file comprising the selected sub-portion of the components; and</claim-text><claim-text>providing the redaction file for interactive redaction.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the format is one of: a spreadsheet file format, a drawing file format, or a slide-based file format.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the white-listed data types include at least one of: a text-based data type and a numerical-based data type.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the whitelisted data types include a text-based data type and a numerical-based data type, the method further comprising:<claim-text>normalizing the text-based data type and the numerical-based data type.</claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the whitelisted data types are predetermined based on selectable data types that can be interactively redacted.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, further comprising:<claim-text>updating the plurality of data types with a new data type; and</claim-text><claim-text>adapting the whitelisted, redactable data types based on the updated plurality of data types.</claim-text></claim-text></claim></claims></us-patent-application>