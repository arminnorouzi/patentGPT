<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230003565A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230003565</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17899011</doc-number><date>20220830</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>01</class><subclass>F</subclass><main-group>1</main-group><subgroup>7084</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>01</class><subclass>M</subclass><main-group>3</main-group><subgroup>28</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>E</section><class>03</class><subclass>B</subclass><main-group>7</main-group><subgroup>07</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>01</class><subclass>M</subclass><main-group>3</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>01</class><subclass>M</subclass><main-group>3</main-group><subgroup>24</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2457</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>25</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0481</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0484</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>01</class><subclass>F</subclass><main-group>1</main-group><subgroup>7084</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>01</class><subclass>M</subclass><main-group>3</main-group><subgroup>2815</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>E</section><class>03</class><subclass>B</subclass><main-group>7</main-group><subgroup>071</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>01</class><subclass>M</subclass><main-group>3</main-group><subgroup>002</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>01</class><subclass>M</subclass><main-group>3</main-group><subgroup>007</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>01</class><subclass>M</subclass><main-group>3</main-group><subgroup>243</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>24578</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>252</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0481</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0484</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">USER INTERFACES FOR DISPLAYING DISCRETIZED ELEMENTS OF LOGICAL FLOW SYSTEMS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16239956</doc-number><date>20190104</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11435880</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17899011</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62729625</doc-number><date>20180911</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Palantir Technologies Inc.</orgname><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Bond</last-name><first-name>Ethan</first-name><address><city>New York</city><state>NY</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The systems and methods described herein provide highly dynamic and interactive data analysis user interfaces which enable the data analyst to quickly and efficiently explore large volume data sources, such as computer code or intellectual system. A user interface can be implanted that includes a plurality of nodes associated with portions of a process. The nodes may include indications of logical relationships between nodes. Node identifiers may be associated with particular nodes and be usable to select particular nodes. Reliability scores associated with particular nodes can be included.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="100.25mm" wi="158.75mm" file="US20230003565A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="244.09mm" wi="164.42mm" orientation="landscape" file="US20230003565A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="223.77mm" wi="153.50mm" orientation="landscape" file="US20230003565A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="200.15mm" wi="120.23mm" orientation="landscape" file="US20230003565A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="233.76mm" wi="141.99mm" orientation="landscape" file="US20230003565A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="138.09mm" wi="121.84mm" file="US20230003565A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="236.81mm" wi="160.61mm" orientation="landscape" file="US20230003565A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. application Ser. No. 16/239,956, filed on Jan. 4, 2019, titled &#x201c;USER INTERFACES FOR DISPLAYING DISCRETIZED ELEMENTS OF LOGICAL FLOW SYSTEMS&#x201d;, which claims the benefit of priority under 35 U.S.C. &#xa7; 119(e) to U.S. Provisional Application No. 62/729,625, filed on Sep. 11, 2018, titled &#x201c;USER INTERFACES FOR DISPLAYING DISCRETIZED ELEMENTS OF LOGICAL FLOW SYSTEMS,&#x201d; which are hereby incorporated by reference herein in their entireties for all purposes.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><heading id="h-0003" level="1">Field</heading><p id="p-0003" num="0002">The present disclosure relates generally to systems and methods for graphical user interfaces and more particularly to displaying discretized logical elements.</p><heading id="h-0004" level="1">Description of the Related Art</heading><p id="p-0004" num="0003">The approaches described in this section are approaches that could be pursued, but not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated, it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.</p><p id="p-0005" num="0004">Modern scientific research requires substantial reliance on large amounts of data. Moreover, at the cutting edge of scientific advances, increasing specialization in a particular discipline is often required. Accordingly, overlap of expertise among subject-matter experts is shrinking and gaps of expertise is growing among subject-matter experts. These gaps in subject matter expertise among scientists necessitate some level of trust in the proposed findings. To reduce a reliance on trust, the scientific community calls on subject-matter peers to review and confirm at least some likelihood of accuracy in the proposed findings. However, as subject matter specialization increases, peer review of scientific findings requires more time to confirm the likelihood of accuracy. This requirement slows the dissemination of newly discovered scientific knowledge to the public.</p><p id="p-0006" num="0005">Relatedly, software algorithms are generally comprised of a plurality of commands, logic modules, discrete applications, and/or other software elements that may seek to work together to achieve a particular function. However, debugging these individual elements can be likened to finding a needle in a haystack. For example, structural software elements may rely on one or more foundational elements. In such circumstances, identifying whether the bug exists in the foundational or structural elements may be challenging to humans or computer algorithms. User interfaces could be improved to help a user visualize a structure of a computer program and to systematically interact with the program to discover bugs and other weaknesses in the program.</p><heading id="h-0005" level="1">SUMMARY</heading><p id="p-0007" num="0006">Details of one or more implementations of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages will become apparent from the description, the drawings, and the claims. Neither this summary nor the following detailed description purports to define or limit the scope of the inventive subject matter.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example interactive graphical user interface, as generated using one embodiment of the computer system of <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a detail of a portion of an example interactive graphical user interface shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flow diagram illustrating how a first group of boards may transition to a second group of boards and/or vice versa.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows another embodiment of a possible interactive graphical user interface.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart illustrating an example embodiment of a method that may be implemented.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram illustrating one example of a computer system upon which various embodiments may be implemented.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0007" level="1">DETAILED DESCRIPTION</heading><heading id="h-0008" level="2">Overview</heading><p id="p-0014" num="0013">Data analysts face a daunting challenge when tasked with exploring a large volume of data to identify discrete pieces of information and intelligence&#x2014;a veritable needle-in-a-haystack problem. In some cases, a data analyst may have a lead on something she wishes to investigate. For example, knowing that a particular bad actor was involved in an incident may be a starting point from which the data analyst can begin to investigate other individuals who may have been involved. However, in many cases the data analyst has little information or, at best, only some contextual information on which to base an investigation. For example, the data analyst might know that a website was hacked at a certain time but have little else to go on to identify the individuals involved. However, data analysts might need to explore multiple analysis paths, many of which lead to &#x201c;dead ends&#x201d; or results that do not answer the search premise, by sorting and filtering through a massive volume of (for example) Internet proxy traffic data, cyber security data, telephone data, and/or any other type of data. The data analyst's path through the data is often multi-directional, in that the analyst may approach a problem from the top-down, bottom-up, and/or in either direction over the course of a given data analysis path and investigation. For example, the data analyst may begin with a large set of data, submit one or more queries which may lead to smaller sets of data results or filtered data results, and then merge or join smaller sets of data results to formulate larger sets of data, exclude subsets of data, and so on in as many iterations as the data analysts desires or finds useful.</p><p id="p-0015" num="0014">Such challenges can be particularly present in the fields of scientific inquiry or software development. Other systems involving dependencies in processes can also benefit. For example, scientific inquiry often involves substantial reliance on large amounts of data. At the cutting edge of scientific advances, increasing specialization in a particular discipline is often required. Accordingly, overlap of expertise among subject-matter experts is shrinking and gaps of expertise is growing among subject-matter experts. These gaps in subject matter expertise among scientists necessitate some level of trust in the others' proposed findings. To provide additional trust, the scientific community calls on subject-matter peers to review and confirm at least some likelihood of accuracy in the proposed findings. However, as subject matter specialization increases, peer review of scientific findings requires more time to confirm the likelihood of accuracy. This requirement slows the dissemination of newly discovered scientific knowledge to the public.</p><p id="p-0016" num="0015">As another example, software algorithms are generally comprised of a plurality of commands, logic modules, discrete applications, and/or other software elements that may seek to work together to achieve a particular function. However, debugging these individual elements can be likened to finding a needle in a haystack. For example, structural software elements may rely on one or more foundational elements. In such circumstances, identifying whether the bug exists in the foundational or structural elements may be challenging to humans or computer algorithms. User interfaces could be improved to help a user visualize a structure of a computer program and to systematically interact with the program to discover bugs and other weaknesses in the program.</p><heading id="h-0009" level="1">Terms</heading><p id="p-0017" num="0016">In order to facilitate an understanding of the systems and methods discussed herein, a number of terms are defined below. The terms defined below, as well as other terms used herein, should be construed to include the provided definitions, the ordinary and customary meaning of the terms, and/or any other implied meaning for the respective terms. Thus, the definitions below do not limit the meaning of these terms, but only provide example definitions.</p><p id="p-0018" num="0017">A node (or data node): a data structure representation of a data item, such as an analysis item representing a particular analysis process, such as a particular set of software code, research hypothesis, conclusions, theories, etc. A node may be linked to one or more other nodes. In some embodiments, the link between two nodes can be directed. A node may include configuration data regarding the presentation of its underlying data set. In some embodiments, a node is immutable. However, in other embodiments, the data of a node may be modified. The terms &#x201c;node,&#x201d; &#x201c;data node,&#x201d; and &#x201c;board&#x201d; may be used interchangeably and/or synonymously in the present disclosure.</p><p id="p-0019" num="0018">Two or more nodes in a data structure may be connected and/or linked. One example data structure is a tree data structure. In some embodiments, an example data structure has two or more parent nodes. In the context of a data structure: a &#x201c;root node&#x201d; is a top node in the structure; a &#x201c;child node&#x201d; and/or &#x201c;sub-node&#x201d; is a node that directly descends from a higher node; a &#x201c;parent node&#x201d; is the converse of a child; a child node has a &#x201c;dependency&#x201d; on a parent node; and a &#x201c;descendent&#x201d; is a node reachable by traversing from parent to child. A parent node may have one or more children. In some embodiments, an example data structure is a directed structure and/or a directed acyclic structure. As described herein, the data structure can be visually represented in a user interface as a workflow. Further, the example data structure can include data representing user interactions with the user interfaces and/or the data sets of the user interfaces.</p><p id="p-0020" num="0019">Board: a user interface element associated with one or more nodes. In certain embodiments discussed herein, boards are illustrated as generally rectangular user interface elements. However, boards may be visualized in any other way, such as different shapes (e.g., circles, rows, columns, formatted text, etc.), colors, graphics, etc.</p><p id="p-0021" num="0020">Reliability: an indication of trust or accuracy of an analysis item(s). Reliability levels or scores may be based on subjective information (e.g., ratings from scientific researchers) and/or objective information (e.g., automated analysis to determine consistency of information in the analysis item). A reliability score for an analysis item may be determined based on reliability scores (and/or other information regarding) one or more related analysis items.</p><heading id="h-0010" level="1">EXAMPLE IMPLEMENTATIONS</heading><p id="p-0022" num="0021">The systems and methods described herein provide highly dynamic and interactive data analysis user interfaces which enable the data analyst to quickly and efficiently explore large volume data sources. In particular, a data analysis system, such as described herein, may provide features to enable the data analyst to investigate large volumes of data over many different paths of analysis while maintaining detailed and retraceable steps taken by the data analyst over the course of an investigation, as captured via the data analyst's queries and user interaction with the user interfaces provided by the data analysis system. For example, one data analysis path may begin with a high volume data set, such as Internet proxy data, which may include hundreds or thousands (or more) of rows of elements of a process (e.g., scientific hypotheses, software code modules, etc.). Rather than start over from scratch, an analyst may wish to investigate a particular node or element of the process.</p><p id="p-0023" num="0022">Various data storage mechanisms and associated user interfaces discussed herein address the functionality issues noted above. For example, a user interface can implement a board-based map of discretized logical flows of various processes, such as scientific knowledge or computer software. In a first aspect, the user interface can provide an interactive visualization of various components of scientific understanding that can allow a user to navigate various principles within which a logical flow may exist and be displayed. For example, indicators of logical flow can aid a user in interacting with the board-based map. In a second aspect, the board-based map can identify logical flows of a computer algorithm to aid a user in detecting and identifying a bug in algorithm. The UI can display a plurality of interactive boards in an ordered configuration, such as a grid. The UI can indicate logical flow from one board to another board. Boards may be collapsed from multiple boards into a single board, with at least some of the underlying data or metadata associated with the collapsed boards (e.g., trust levels) combined into the single remaining board. From a user interface perspective, this allows a user to &#x201c;zoom out&#x201d; of the board-based map. Additionally or alternatively, boards may be expanded to allow a user to drill down into a particular logical element (e.g., to access lower levels of abstraction). Boards may be forked to indicate a plurality of boards that build off the board. Boards may be backed by data/logic associated with those boards, and may be accessed and shared with others. Trust levels may be associated with boards, indicating a general likelihood of reliability of the information on the board. These trust levels may be used to determine a composite trust level of boards that may be combined (either automatically by the system and/or manually by the user) and trust levels may be at least partially inherited from parent node(s) of a particular node.</p><p id="p-0024" num="0023">In an embodiment, a main data analysis workflow user interface provided by the data analysis system provides the data analyst with a set of highly interactive data visualization tools with which the data analyst can explore sets of data. Data visualization tools provided by the data analysis system can include, for example, a data summary view; a time series view; an ability to link to one or more boards or even another dataset; and options to add, remove, or keep only selected boards from a data view.</p><p id="p-0025" num="0024">Each of these data visualization tools may include rich UI controls which are configured to respond to user interaction and input in a manner that allows the non-technical user to quickly and intuitively traverse a logical sequence of a process (e.g., scientific, software, etc.).</p><p id="p-0026" num="0025">The data analysis systems and methods described herein may also include various features for search optimization on the backend or server-side. For example, a query backend module may be configured to analyze user selections and interactions with the data set query results and associated data visualizations and, based on those selections and interactions, determine what data the user is actually interested in, and translate the query into an efficient or optimized search query string. For example, the user might produce a workflow or analysis path which involves linking or joining a first large data set to a second large data set, and then filtering the resulting linked data set. An optimized search query string may then be generated which applies the filter operation prior to the link or join operation, such that the resources required to perform the join operation would be greatly reduced (e.g., since the link or join operation would be performed on smaller data sets resulting from the filter being applied first).</p><heading id="h-0011" level="1">Example User Interfaces</heading><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIGS. <b>1</b>-<b>3</b></figref> illustrate example user interfaces and UI components, as used in one or more embodiments of an interactive graphical user interface <b>100</b>. The sample user interfaces may be displayed, for example, via a web browser (e.g., as a web page), a mobile application, or a standalone application. In some embodiments, the sample user interfaces shown may also be displayed on any suitable computer device, such as a cell/smart phone, tablet, wearable computing device, portable/mobile computing device, desktop, laptop, or personal computer, and are not limited to the samples as described herein. The user interfaces include examples of only certain features that a data analysis system may provide. In other embodiments, additional features may be provided, and they may be provided using various different user interfaces and software code. Depending on the embodiment, the user interfaces and functionality described with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>3</b></figref> may be provided by software executing on the individual's computing device, by a data analysis system located remotely that is in communication with the computing device via one or more networks, and/or some combination of software executing on the computing device and the data analysis system. In other embodiments, analogous interfaces may be presented using audio or other forms of communication. In an embodiment, the interfaces shown are configured to be interactive and respond to various user interactions. Such user interactions may include clicks with a mouse, typing with a keyboard, touches and/or gestures on a touch screen, voice commands, physical gestures made within a proximity of a user interface, and/or the like.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example interactive graphical user interface <b>100</b>, as generated using one embodiment of the display <b>712</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. As shown, the interactive graphical user interface <b>100</b> can be referred to as a board interface or other interface. The interactive graphical user interface <b>100</b> can include a plurality of boards <b>104</b>. The boards <b>104</b> may be arranged in a particular order, which may be set by the software provider and/or customized by the user. For example, the boards <b>104</b> may be arranged on the display in a linear fashion, in a grid (e.g., as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>), or in some other layout. The boards <b>104</b> can be arranged in one or more logical paths. One or more relationship indicators <b>108</b> can be displayed to show the logical relationship(s) between or among the boards <b>104</b>.</p><p id="p-0029" num="0028">A board <b>104</b> can represent a node in a logical structure. Multiple nodes can be linked via a common or related trait (such as by an edge in a data structure). The trait may be based on time (e.g., in a temporal relationship, a sequence, etc.), gradation, space, or other characteristic. Each board <b>104</b> can represent a discrete element of an intellectual (e.g., scientific, philosophical, historical, etc.) argument or other system, a software module or feature, a process flow, or other node tree or other node linking scheme. For embodiments where each board represents a scientific element, a board can include information related to the scientific element. For example, an intellectual system or argument may be based on a plurality of assertions or hypotheses. The assertions can be discretized and associated with corresponding boards <b>104</b> (and underlying data stored in nodes). Links between or among the boards <b>104</b> can be represented by the relationship indicators <b>108</b>. Each relationship indicator <b>108</b> can be directional (e.g., an arrow) or connectional (e.g., a line).</p><p id="p-0030" num="0029">In some embodiments, the boards <b>104</b> can be displayed in a vertical arrangement as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The boards <b>104</b> can be arranged in a logical order, such as in a board arrangement <b>112</b>. For example, a parent board <b>104</b><i>a </i>and one or more child boards <b>104</b><i>b </i>can indicate stages of a process, such as ordered elements of a software program or research events that build upon one another. In some embodiments, the boards are arranged in a chronological or other temporal relationship. For embodiments with directional relationship indicators <b>108</b>, the relationship indicator <b>108</b> can point from a parent board <b>104</b><i>a </i>to a child board <b>104</b><i>b</i>. The boards <b>104</b> can be located in the interactive graphical user interface <b>100</b> in corresponding grid locations <b>124</b>. Each grid location <b>124</b> can be associated with a corresponding row and column. The row indicators <b>116</b> and column indicators <b>120</b> can allow a user to more intuitively interact with the boards <b>104</b>. For example, the row indicators <b>116</b> and the column indicators <b>120</b> may provide a grid system that allows a user to easily reference one or more boards. The grid system may allow for compact relay of information, e.g., through a link, reference, or pointer.</p><p id="p-0031" num="0030">Each board <b>104</b> can include information regarding the data item(s) associated with the board, such as a summary, table, histogram, distribution, time series, grid, heatmap, pivot table, filter, column editor, enrich, link, set math, export, and/or chart visualization. Additional details on some of these information indicators and some of the functionality of these information indicators can be found in U.S. Patent Application Publication No. 2018/0039399, titled &#x201c;INTERACTIVE USER INTERFACE FOR DYNAMICALLY UPDATING DATA AND DATA ANALYSIS AND QUERY PROCESSING,&#x201d; filed on Oct. 13, 2017, which is incorporated by reference herein in its entirety for all purposes.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a detail of a portion of an example interactive graphical user interface <b>100</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. As shown, in some embodiments one or more of the boards <b>104</b> can include a score region <b>130</b> and an attribute region <b>134</b>. The score region <b>130</b> can include a reliability score, such as a trust or accuracy score. The attributes region <b>134</b> can include an information indicator, such as those described herein. The reliability score can be associated with one or more corresponding boards <b>104</b>. A reliability score may be determined at least in part by a process associated with the associated board <b>104</b> or node. For example, the reliability score may be associated with the discretized intellectual element associated with the board <b>104</b>, such as a scientific theory or a philosophical assertion. One or more of the reliability scores may be determined at least in part by a user input. For example, the score region <b>130</b> may include a score modifier selector to allow a user increase (e.g., a &#x201c;plus&#x201d; sign) and/or decrease (e.g., a &#x201c;minus&#x201d; sign) the reliability score, which may then be automatically update a corresponding reliability indicator that may be shared with other users. In this manner, the reliability scores may be &#x201c;crowd sourced&#x201d; to include reliability indicators from multiple individuals, entities, and/or automated processes. Other variations are possible.</p><p id="p-0033" num="0032">In some embodiments, the reliability scores of one or more children nodes <b>104</b><i>b </i>may be at least partially based on reliability scores of one or more related nodes, such as one or more parent nodes <b>104</b><i>a</i>. Reliability scores may be combined based on various aspects of related nodes, such as by selecting a lowest score of all predecessor nodes, a highest score of all predecessor nodes, or applying an algorithmic model to data associated with the predecessors nodes (e.g., reliability scores of predecessors nodes may be weighted based on sources of the underlying analysis item, sources of the reliability scores for that node, etc.). A predecessor node can include parent nodes, parent nodes of the parent nodes, and so forth. By contrast, leaf, descendent, progenitor, or ancestor nodes may refer to child nodes or child nodes of the child nodes, and so forth. In some embodiments, a reliability score of a particular board <b>104</b> is equal to the lowest score of all of the predecessor nodes. This may be helpful in identifying a node in which the trust or reliability score drops. For example, if nodes or boards <b>104</b> represent elements or modules of software code in a software application, a user seeking to debug the code may quickly identify a module in which the trust score of subsequent or child nodes begins to drop. Thus, a debugger can quickly identify the node or board that may require further investigation or debugging. In some embodiments, the reliability scores may include a mathematical averaging of all or some predecessor nodes. In this way, the reliability scores of later nodes can raise the reliability of later nodes or boards and indicate a trend of rising trust in spite of a previous low-trust node or board.</p><p id="p-0034" num="0033">The attributes region <b>134</b> can provide valuable information related to the corresponding board <b>104</b> or node. The attributes region <b>134</b> can include a description of the attribute of the board <b>104</b>. For example, in embodiments where each board <b>104</b> represents an element or module of computer software, the attributes region <b>134</b> can include a portion of computer code, such as &#x201c;age==null&#x201d; or &#x201c;name==null&#x201d;. In some embodiments, a link or pointer (e.g., a clickable hyperlink) may be included in the attributes region <b>134</b>. A selection of the link, for example, may update the interactive graphical user interface <b>100</b> to display the node or further content associated with the selected node. This linking functionality may apply to links within the boards <b>104</b> and/or links external to the boards <b>104</b>. For example, a link may be included in external document (e.g., online articles, websites, etc.), where the link includes a reference to a dataset associated with the boards <b>104</b> of the interactive graphical user interface <b>100</b>. For example, a link may be associated with a particular board (e.g., at a particular location, such as a row/column, or a dataset) so that when selected by a user (via an external or internal file or document), the user's browser (or other application wherein the link is selected) is directed to the interactive graphical user interface <b>100</b> to show the linked board <b>104</b> (and/or content associated with the board <b>104</b>). In some embodiments, selection of such a link initiates display of the linked board within or near an article or other document that includes the link. Additionally or alternatively, the link may be from within the dataset of the boards <b>104</b> (e.g., within a attributes region <b>134</b> of one of the boards <b>104</b>). In some embodiments, a marketplace can be created for trading, selling, sharing, and/or modifying individual and/or groups of boards belonging to another person or institution. For example, research institutions that each conduct scientific research may be interested in sharing individual or groups of boards to review (e.g., peer review) that individual or group of boards. Thus, the interactive graphical user interface <b>100</b> may allow distinct groups of people and/or institutions from reviewing and/or modifying the same board(s). As a different example, one individual or group could create a piece or module of a computer software application (e.g., a specific process of a piece of medical device hardware) that could be traded and/or sold through a marketplace.</p><p id="p-0035" num="0034">In response to a selection of the link (e.g., internal link, external link), the interactive graphical user interface <b>100</b> can display information associated with the link that may be located in a database external to a database associated with the boards <b>104</b>. The external information can include information external to the dataset. For example, a link to a webpage, a document, an email, a video, a photo, a graph, a dataset, or any other type of information may be displayed in the interactive graphical user interface <b>100</b> in response to the link selection. A new window may appear overlaid on the board arrangement <b>112</b>. The information may be displayed in a window dedicated to a display of the information. Additional space for boards <b>104</b> in the board arrangement <b>112</b> may be made by use of a grid expander selector <b>126</b>.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a way that a first group of boards <b>104</b> may transition to a second group of boards <b>104</b> and/or vice versa. A first group of boards <b>104</b> may include a first board <b>160</b><i>a </i>and a second board <b>160</b><i>b</i>. One or more relationship indicators <b>108</b><i>a</i>-<i>c </i>may show a parent-child (or some other logical flow) relationship among the first and second boards <b>160</b><i>a</i>, <b>160</b><i>b</i>. Each board <b>160</b><i>a</i>, <b>160</b><i>b </i>may include a corresponding score indicator <b>138</b> and score modifier selectors <b>136</b>. Corresponding board attributes <b>146</b><i>a</i>, <b>146</b><i>b </i>may also be included.</p><p id="p-0037" num="0036">A user may make a collapsing transition <b>150</b> and/or an expanding transition <b>154</b> based on a selection. In contrast to the zooming in and out shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, which is essentially a view operation, the transitions illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref> actually collapse multiple boards into fewer boards (e.g., one board), and/or a expand a board into a larger group of boards. For example, in some embodiments, in response to a collapsing transition <b>150</b>, a resulting third board attribute <b>146</b><i>c </i>may include information related to one or both of the board attributes <b>146</b><i>a</i>, <b>146</b><i>b</i>. In this way, the system may allow a user to quickly identify common functionality (e.g., common software operations) in a single board or small group of boards. The information related to the board attributes <b>146</b><i>a</i>, <b>146</b><i>b </i>may include a determination of a commonality between the first board attributes <b>146</b><i>a </i>and the second board attributes <b>146</b><i>b</i>. For example, the third board attributes <b>146</b><i>c </i>may include a combination of the board attributes <b>146</b><i>a</i>, <b>146</b><i>b</i>. As shown, the first board attributes <b>146</b><i>a </i>includes a criterion or rule of &#x201c;age==null&#x201d; and the second board attributes <b>146</b><i>b </i>includes a &#x201c;name==null&#x201d; criterion. The symbol &#x201c;,&#x201d; may indicate, for example, that a first item &#x201c;is defined by&#x201d; the second item. The resulting third board attributes <b>146</b><i>c </i>may include a command that is a combination of the two criteria (e.g., a &#x201c;remove nulls&#x201d; command). Other variants are possible. Additionally or alternatively, the second relationship indicators <b>108</b><i>b </i>may be omitted or subsumed within (but need not be necessarily be displayed) within the third board <b>160</b><i>c</i>. In this way, the interactive graphical user interface <b>100</b> may allow the collapsing transition <b>150</b> to appear as if the user is zooming out of the first group of boards. The second group of boards in this scenario would be the resulting collapsed version of the first group of boards. An analogous, but contrasted, transition can characterize one or more attributes of the expanding transition <b>154</b>. One or both of the transitions <b>150</b>, <b>154</b> may be controlled through a user input (e.g., a scrolling action, etc.).</p><p id="p-0038" num="0037">Another embodiment of a possible interactive graphical user interface <b>100</b> is shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. A plurality of boards <b>104</b><i>a</i>-<i>d </i>may be visually &#x201c;collapsed&#x201d; (without a corresponding collapsing transition <b>150</b>) via one or more relationship indicators <b>108</b>. This may be indicated where a plurality of boards <b>104</b> have fewer children boards than the plurality of boards <b>104</b>. For example, the boards <b>104</b><i>a</i>-<i>d </i>have a single child board <b>104</b><i>e</i>. Thus, the interactive graphical user interface <b>100</b> may indicate a zoomed-out relationship of <b>104</b><i>e </i>relative to the boards <b>104</b><i>a</i>-<i>d</i>. Analogous zoom-in functionality can be portrayed where a plurality of children nodes stem from fewer parent nodes. For example, the children boards (or nodes) <b>104</b><i>f</i>-<i>h </i>may have a common parent board <b>104</b><i>e</i>. Thus, the interactive graphical user interface <b>100</b> can show simultaneous zoom-in and/or zoom-out functionality within the same display without a time-based collapsing transition <b>150</b> and/or expanding transition <b>154</b>.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example embodiment of a method <b>600</b> that may be implemented to provide certain features discussed herein, such as by the computing system <b>700</b> (<figref idref="DRAWINGS">FIG. <b>6</b></figref>), a user computing device, and/or other computing devices. Depending on the embodiment, the process may include further or additional blocks and/or the blocks may be performed in an order different than is illustrated.</p><p id="p-0040" num="0039">At block <b>604</b>, the method <b>600</b> can include accessing a data set having a plurality of nodes. The block <b>604</b> may be associated with corresponding boards for display on an interactive graphical user interface. At block <b>608</b> the interactive graphical user interface can be generated having the plurality of boards that are associated with the corresponding nodes. The boards may be arranged in any fashion or order described herein. At block <b>612</b> the method can include updating the user interface to display a second plurality of boards different from the plurality of boards. For example, a collapsing or expanding transition may be executed (e.g., via a user command), such as one described herein, which may include a determination of a reliability score based on information associated with one or more other boards. In some embodiments, at block <b>616</b> the method <b>600</b> receives a selection of a link. The link may be a link or pointer described herein, such as a link pointing to content internal to a database associated with the plurality of boards or external thereto. The link may be stored and/or located in a location and/or database external to that associated with the plurality of boards. For example, the link may be accessed from a location through a network, such as an Internet or intranet. At block <b>620</b>, the method can display information (e.g., information external to the plurality of boards) associated with the link. The information may correspond to text, a graph, chart, flowchart, heatmap, or any other type of content described herein.</p><heading id="h-0012" level="1">OTHER EMBODIMENTS</heading><p id="p-0041" num="0040">Each of the processes, methods, and algorithms described in the preceding sections may be embodied in, and fully or partially automated by, code modules executed by one or more computer systems or computer processors comprising computer hardware. The code modules may be stored on any type of non-transitory computer-readable medium or computer storage device, such as hard drives, solid state memory, optical disc, and/or the like. The systems and modules may also be transmitted as generated data signals (for example, as part of a carrier wave or other analog or digital propagated signal) on a variety of computer-readable transmission mediums, including wireless-based and wired/cable-based mediums, and may take a variety of forms (for example, as part of a single or multiplexed analog signal, or as multiple discrete digital packets or frames). The processes and algorithms may be implemented partially or wholly in application-specific circuitry. The results of the disclosed processes and process steps may be stored, persistently or otherwise, in any type of non-transitory computer storage such as, for example, volatile or non-volatile storage.</p><p id="p-0042" num="0041">In general, the word &#x201c;module,&#x201d; as used herein, refers to logic embodied in hardware or firmware, or to a collection of software instructions, possibly having entry and exit points, written in a programming language, such as, for example, Java, Lua, C or C++. A software module may be compiled and linked into an executable program, installed in a dynamic link library, or may be written in an interpreted programming language such as, for example, BASIC, Perl, or Python. It will be appreciated that software modules may be callable from other modules or from themselves, and/or may be invoked in response to detected events or interrupts. Software modules configured for execution on computing devices may be provided on a computer readable medium, such as a compact disc, digital video disc, flash drive, or any other tangible medium. Such software code may be stored, partially or fully, on a memory device of the executing computing device, such as the programming notebook system <b>100</b>, for execution by the computing device. Software instructions may be embedded in firmware, such as an EPROM. It will be further appreciated that hardware modules may be comprised of connected logic units, such as gates and flip-flops, and/or may be comprised of programmable units, such as programmable gate arrays or processors. The modules described herein are preferably implemented as software modules, but may be represented in hardware or firmware. Generally, the modules described herein refer to logical modules that may be combined with other modules or divided into sub-modules despite their physical organization or storage.</p><p id="p-0043" num="0042">The various features and processes described above may be used independently of one another, or may be combined in various ways. All possible combinations and subcombinations are intended to fall within the scope of this disclosure. In addition, certain method or process blocks may be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence, and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example, described blocks or states may be performed in an order other than that specifically disclosed, or multiple blocks or states may be combined in a single block or state. The example blocks or states may be performed in serial, in parallel, or in some other manner. Blocks or states may be added to or removed from the disclosed example embodiments. The example systems and components described herein may be configured differently than described. For example, elements may be added to, removed from, or rearranged compared to the disclosed example embodiments.</p><p id="p-0044" num="0043">Conditional language used herein, such as, among others, &#x201c;can,&#x201d; &#x201c;could,&#x201d; &#x201c;might,&#x201d; &#x201c;may,&#x201d; &#x201c;for example,&#x201d; and the like, unless specifically stated otherwise, or otherwise understood within the context as used, is generally intended to convey that certain embodiments include, while other embodiments do not include, certain features, elements and/or steps. Thus, such conditional language is not generally intended to imply that features, elements and/or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding, with or without author input or prompting, whether these features, elements and/or steps are included or are to be performed in any particular embodiment. The terms &#x201c;comprising,&#x201d; &#x201c;including,&#x201d; &#x201c;having,&#x201d; and the like are synonymous and are used inclusively, in an open-ended fashion, and do not exclude additional elements, features, acts, operations, and so forth. For example, a general purpose computer comprising one or more processors should not be interpreted as excluding other computer components, and may possibly include such components as memory, input/output devices, and/or network interfaces, among others. Also, the term &#x201c;or&#x201d; is used in its inclusive sense (and not in its exclusive sense) so that when used, for example, to connect a list of elements, the term &#x201c;or&#x201d; means one, some, or all of the elements in the list. Conjunctive language such as the phrase &#x201c;at least one of X, Y and Z,&#x201d; unless specifically stated otherwise, is otherwise understood with the context as used in general to convey that an item, term, etc. may be either X, Y, or Z. Thus, such conjunctive language is not generally intended to imply that certain embodiments require at least one of X, at least one of Y, and at least one of Z to each be present.</p><p id="p-0045" num="0044">The term &#x201c;a&#x201d; as used herein should be given an inclusive rather than exclusive interpretation. For example, unless specifically noted, the term &#x201c;a&#x201d; should not be understood to mean &#x201c;exactly one&#x201d; or &#x201c;one and only one&#x201d;; instead, the term &#x201c;a&#x201d; means &#x201c;one or more&#x201d; or &#x201c;at least one,&#x201d; whether used in the claims or elsewhere in the specification and regardless of uses of quantifiers such as &#x201c;at least one,&#x201d; &#x201c;one or more,&#x201d; or &#x201c;a plurality&#x201d; elsewhere in the claims or specification.</p><p id="p-0046" num="0045">While certain example embodiments have been described, these embodiments have been presented by way of example only, and are not intended to limit the scope of the disclosure. Thus, nothing in the foregoing description is intended to imply that any particular element, feature, characteristic, step, module, or block is necessary or indispensable. Indeed, the novel methods and systems described herein may be embodied in a variety of other forms; furthermore, various omissions, substitutions, and changes in the form of the methods and systems described herein may be made without departing from the spirit of the inventions disclosed herein. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of certain of the inventions disclosed herein.</p><p id="p-0047" num="0046">Any process descriptions, elements, or blocks in the flow diagrams described herein and/or depicted in the attached figures should be understood as potentially representing modules, segments, or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of the embodiments described herein in which elements or functions may be deleted, executed out of order from that shown or discussed, including substantially concurrently or in reverse order, depending on the functionality involved, as would be understood by those skilled in the art.</p><p id="p-0048" num="0047">It should be emphasized that many variations and modifications may be made to the above-described embodiments, the elements of which are to be understood as being among other acceptable examples. All such modifications and variations are intended to be included herein within the scope of this disclosure. The foregoing description details certain embodiments of the invention. It will be appreciated, however, that no matter how detailed the foregoing appears in text, the invention can be practiced in many ways. As is also stated above, it should be noted that the use of particular terminology when describing certain features or aspects of the invention should not be taken to imply that the terminology is being re-defined herein to be restricted to including any specific characteristics of the features or aspects of the invention with which that terminology is associated.</p><heading id="h-0013" level="1">EXAMPLE EMBODIMENTS</heading><p id="p-0049" num="0048">In a 1st example, a computerized method comprises: accessing a data set comprising: a plurality of nodes associated with portions of a process; indications of logical relationships between nodes, including at least some relationships between nodes; a first subset of nodes associated with a first portion of the process; node identifiers associated with particular nodes, the node identifiers usable to select particular nodes; and reliability scores associated with particular nodes, wherein reliability scores of children nodes are at least partially based on reliability scores of one or more parent nodes; generating an interactive graphical user interface comprising a plurality of boards associated with at least some of the plurality of nodes, excluding at least some of the nodes of the first subset of nodes.</p><p id="p-0050" num="0049">In a 2nd example, the method of example 1, wherein the user interface comprises at least one indicator of logical relationship between two boards, the at least one indicator of logical relationship corresponding to an indication of logical relationships between nodes corresponding to the two boards.</p><p id="p-0051" num="0050">In a 3rd example, the method of any of examples 1-2, further comprising updating the interactive graphical user interface to display a second plurality of boards different from the plurality of boards.</p><p id="p-0052" num="0051">In a 4th example, the method of any of examples 1-3, comprising updating, based on a collapse input, the interactive graphical user interface to display a second plurality of boards greater than the plurality of boards.</p><p id="p-0053" num="0052">In a 5th example, the method of example 4, wherein updating the interactive graphical user interface to display a second plurality of boards greater than the plurality of boards comprises displaying an indication that a first board of the plurality of boards split into at least two boards.</p><p id="p-0054" num="0053">In a 6th example, the method of example 5, wherein updating the interactive graphical user interface to display a second plurality of boards greater than the plurality of boards comprises displaying a first indication of logical flow between at least one of the at least two boards and another board.</p><p id="p-0055" num="0054">In a 7th example, the method of any of examples 1-6, comprising updating, based on an expand input, the interactive graphical user interface to display a second plurality of boards fewer than the plurality of boards.</p><p id="p-0056" num="0055">In an 8th example, the method of example 7, wherein updating the interactive graphical user interface to display a second plurality of boards fewer than the plurality of boards comprises displaying an indication that at least two boards of the plurality of boards combined into a combined board.</p><p id="p-0057" num="0056">In a 9th example, the method of example 8, wherein updating the interactive graphical user interface to display a second plurality of boards greater than the plurality of boards comprises displaying a second indication of logical flow between the combined board and another board.</p><p id="p-0058" num="0057">In a 10th example, the method of any of examples 1-9, wherein at least one of the reliability scores is determined at least in part by a process associated with the associated node.</p><p id="p-0059" num="0058">In an 11th example, the method of any of examples 1-10, wherein at least one of the reliability scores is determined at least in part by a user input.</p><p id="p-0060" num="0059">In a 12th example, the method of any of examples 1-11, wherein at least one of the reliability scores comprises a lowest score of all predecessor nodes.</p><p id="p-0061" num="0060">In a 13th example, the method of any of examples 1-12, wherein at least one of the reliability scores comprises a mathematical averaging of all predecessor nodes.</p><p id="p-0062" num="0061">In a 14th example, the method of any of examples 1-13, wherein the plurality of boards is displayed in a grid comprising rows and columns.</p><p id="p-0063" num="0062">In a 15th example, the method of any of examples 1-14, wherein generating the interactive graphical user interface further comprises displaying, based on a selection of a link to a node location of a first node, a first board associated with the first node, the link selectable from a location external to the dataset.</p><p id="p-0064" num="0063">In a 16th example, the method of any of examples 1-15, wherein generating the interactive graphical user interface further comprises displaying, based on a selection of a link to a node location of a second node, a second board associated with the second node, the link selectable from a location within the dataset.</p><p id="p-0065" num="0064">In a 17th example, the method of any of examples 1-16, wherein generating the interactive graphical user interface further comprises displaying, based on a selection of a link, external information associated with the link, at least a portion of the external information, the external information comprising information external to the dataset.</p><p id="p-0066" num="0065">In an 18th example, the method of any of examples 1-17, wherein generating the interactive graphical user interface further comprises updating, based on a user update action, the plurality of boards to include at least one new board different from any of the plurality of boards.</p><p id="p-0067" num="0066">In a 19th example, the method of any of examples 1-18, further wherein generating the interactive graphical user interface further comprises displaying the plurality of boards without at least a portion of code of the process associated with the corresponding node.</p><p id="p-0068" num="0067">In a 20th example, a computerized method comprises: generating data for rendering an interactive graphical user interface, the interactive graphical user interface comprising: a plurality of boards comprising a first plurality of boards and a second plurality of boards; and a first indicator of logical flow indicating a link between first and second boards of the first plurality of boards; a second indicator of logical flow indicating a link between first and second boards of the second plurality of boards; receive a user modification input; in response to the user modification input, update the interactive graphical user interface to display one or more boards having a second plurality of boards different from the plurality of boards.</p><heading id="h-0014" level="2">Additional Implementation Details</heading><p id="p-0069" num="0068">Various embodiments of the present disclosure may be a system, a method, and/or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium (or mediums) having computer readable program instructions thereon for causing a processor to carry out aspects of the present disclosure.</p><p id="p-0070" num="0069">For example, the functionality described herein may be performed as software instructions are executed by, and/or in response to software instructions being executed by, one or more hardware processors and/or any other suitable computing devices. The software instructions and/or other executable code may be read from a computer readable storage medium (or mediums).</p><p id="p-0071" num="0070">The computer readable storage medium can be a tangible device that can retain and store data and/or instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device (including any volatile and/or non-volatile electronic storage devices), a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a solid state drive, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0072" num="0071">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0073" num="0072">Computer readable program instructions (as also referred to herein as, for example, &#x201c;code,&#x201d; &#x201c;instructions,&#x201d; &#x201c;module,&#x201d; &#x201c;application,&#x201d; &#x201c;software application,&#x201d; and/or the like) for carrying out operations of the present disclosure may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, configuration data for integrated circuitry, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++, or the like, and procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. Computer readable program instructions may be callable from other instructions or from itself, and/or may be invoked in response to detected events or interrupts. Computer readable program instructions configured for execution on computing devices may be provided on a computer readable storage medium, and/or as a digital download (and may be originally stored in a compressed or installable format that requires installation, decompression or decryption prior to execution) that may then be stored on a computer readable storage medium. Such computer readable program instructions may be stored, partially or fully, on a memory device (e.g., a computer readable storage medium) of the executing computing device, for execution by the computing device. The computer readable program instructions may execute entirely on a user's computer (e.g., the executing computing device), partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present disclosure.</p><p id="p-0074" num="0073">Aspects of the present disclosure are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0075" num="0074">These computer readable program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart(s) and/or block diagram(s) block or blocks.</p><p id="p-0076" num="0075">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks. For example, the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer may load the instructions and/or modules into its dynamic memory and send the instructions over a telephone, cable, or optical line using a modem. A modem local to a server computing system may receive the data on the telephone/cable/optical line and use a converter device including the appropriate circuitry to place the data on a bus. The bus may carry the data to a memory, from which a processor may retrieve and execute the instructions. The instructions received by the memory may optionally be stored on a storage device (e.g., a solid state drive) either before or after execution by the computer processor.</p><p id="p-0077" num="0076">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present disclosure. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the blocks may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. In addition, certain blocks may be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence, and the blocks or states relating thereto can be performed in other sequences that are appropriate.</p><p id="p-0078" num="0077">It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions. For example, any of the processes, methods, algorithms, elements, blocks, applications, or other functionality (or portions of functionality) described in the preceding sections may be embodied in, and/or fully or partially automated via, electronic hardware such application-specific processors (e.g., application-specific integrated circuits (ASICs)), programmable processors (e.g., field programmable gate arrays (FPGAs)), application-specific circuitry, and/or the like (any of which may also combine custom hard-wired logic, logic circuits, ASICs, FPGAs, etc. with custom programming/execution of software instructions to accomplish the techniques).</p><p id="p-0079" num="0078">Any of the above-mentioned processors, and/or devices incorporating any of the above-mentioned processors, may be referred to herein as, for example, &#x201c;computers,&#x201d; &#x201c;computer devices,&#x201d; &#x201c;computing devices,&#x201d; &#x201c;hardware computing devices,&#x201d; &#x201c;hardware processors,&#x201d; &#x201c;processing units,&#x201d; and/or the like. Computing devices of the above-embodiments may generally (but not necessarily) be controlled and/or coordinated by operating system software, such as Mac OS, iOS, Android, Chrome OS, Windows OS (e.g., Windows XP, Windows Vista, Windows 7, Windows 8, Windows 10, Windows Server, etc.), Windows CE, Unix, Linux, SunOS, Solaris, Blackberry OS, VxWorks, or other suitable operating systems. In other embodiments, the computing devices may be controlled by a proprietary operating system. Conventional operating systems control and schedule computer processes for execution, perform memory management, provide file system, networking, I/O services, and provide a user interface functionality, such as a graphical user interface (&#x201c;GUI&#x201d;), among other things.</p><p id="p-0080" num="0079">For example, <figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram that illustrates a computer system <b>700</b> upon which various embodiments may be implemented. Computer system <b>700</b> includes a bus <b>702</b> or other communication mechanism for communicating information, and a hardware processor, or multiple processors, <b>704</b> coupled with bus <b>702</b> for processing information. Hardware processor(s) <b>704</b> may be, for example, one or more general purpose microprocessors.</p><p id="p-0081" num="0080">Computer system <b>700</b> also includes a main memory <b>706</b>, such as a random access memory (RAM), cache and/or other dynamic storage devices, coupled to bus <b>702</b> for storing information and instructions to be executed by processor <b>704</b>. Main memory <b>706</b> also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor <b>704</b>. Such instructions, when stored in storage media accessible to processor <b>704</b>, render computer system <b>700</b> into a special-purpose machine that is customized to perform the operations specified in the instructions.</p><p id="p-0082" num="0081">Computer system <b>700</b> further includes a read only memory (ROM) <b>708</b> or other static storage device coupled to bus <b>702</b> for storing static information and instructions for processor <b>704</b>. A storage device <b>710</b>, such as a magnetic disk, optical disk, or USB thumb drive (Flash drive), etc., is provided and coupled to bus <b>702</b> for storing information and instructions.</p><p id="p-0083" num="0082">Computer system <b>700</b> may be coupled via bus <b>702</b> to a display <b>712</b>, such as a cathode ray tube (CRT) or LCD display (or touch screen), for displaying information to a computer user. An input device <b>714</b>, including alphanumeric and other keys, is coupled to bus <b>702</b> for communicating information and command selections to processor <b>704</b>. Another type of user input device is cursor control <b>716</b>, such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor <b>704</b> and for controlling cursor movement on display <b>712</b>. This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane. In some embodiments, the same direction information and command selections as cursor control may be implemented via receiving touches on a touch screen without a cursor.</p><p id="p-0084" num="0083">Computing system <b>700</b> may include a user interface module to implement a GUI that may be stored in a mass storage device as computer executable program instructions that are executed by the computing device(s). Computer system <b>700</b> may further, as described below, implement the techniques described herein using customized hard-wired logic, one or more ASICs or FPGAs, firmware and/or program logic which in combination with the computer system causes or programs computer system <b>700</b> to be a special-purpose machine. According to one embodiment, the techniques herein are performed by computer system <b>700</b> in response to processor(s) <b>704</b> executing one or more sequences of one or more computer readable program instructions contained in main memory <b>706</b>. Such instructions may be read into main memory <b>706</b> from another storage medium, such as storage device <b>710</b>. Execution of the sequences of instructions contained in main memory <b>706</b> causes processor(s) <b>704</b> to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions.</p><p id="p-0085" num="0084">Various forms of computer readable storage media may be involved in carrying one or more sequences of one or more computer readable program instructions to processor <b>704</b> for execution. For example, the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system <b>700</b> can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus <b>702</b>. Bus <b>702</b> carries the data to main memory <b>706</b>, from which processor <b>704</b> retrieves and executes the instructions. The instructions received by main memory <b>706</b> may optionally be stored on storage device <b>710</b> either before or after execution by processor <b>704</b>.</p><p id="p-0086" num="0085">Computer system <b>700</b> also includes a communication interface <b>718</b> coupled to bus <b>702</b>. Communication interface <b>718</b> provides a two-way data communication coupling to a network link <b>720</b> that is connected to a local network <b>722</b>. For example, communication interface <b>718</b> may be an integrated services digital network (ISDN) card, cable modem, satellite modem, or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface <b>718</b> may be a local area network (LAN) card to provide a data communication connection to a compatible LAN (or WAN component to communicated with a WAN). Wireless links may also be implemented. In any such implementation, communication interface <b>718</b> sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.</p><p id="p-0087" num="0086">Network link <b>720</b> typically provides data communication through one or more networks to other data devices. For example, network link <b>720</b> may provide a connection through local network <b>722</b> to a host computer <b>724</b> or to data equipment operated by an Internet Service Provider (ISP) <b>726</b>. ISP <b>726</b> in turn provides data communication services through the world wide packet data communication network now commonly referred to as the &#x201c;Internet&#x201d; <b>728</b>. Local network <b>722</b> and Internet <b>728</b> both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link <b>720</b> and through communication interface <b>718</b>, which carry the digital data to and from computer system <b>700</b>, are example forms of transmission media.</p><p id="p-0088" num="0087">Computer system <b>700</b> can send messages and receive data, including program code, through the network(s), network link <b>720</b> and communication interface <b>718</b>. In the Internet example, a server <b>730</b> might transmit a requested code for an application program through Internet <b>728</b>, ISP <b>726</b>, local network <b>722</b> and communication interface <b>718</b>.</p><p id="p-0089" num="0088">The received code may be executed by processor <b>704</b> as it is received, and/or stored in storage device <b>710</b>, or other non-volatile storage for later execution.</p><p id="p-0090" num="0089">As described above, in various embodiments certain functionality may be accessible by a user through a web-based viewer (such as a web browser), or other suitable software program). In such implementations, the user interface may be generated by a server computing system and transmitted to a web browser of the user (e.g., running on the user's computing system). Alternatively, data (e.g., user interface data) necessary for generating the user interface may be provided by the server computing system to the browser, where the user interface may be generated (e.g., the user interface data may be executed by a browser accessing a web service and may be configured to render the user interfaces based on the user interface data). The user may then interact with the user interface through the web-browser. User interfaces of certain implementations may be accessible through one or more dedicated software applications. In certain embodiments, one or more of the computing devices and/or systems of the disclosure may include mobile computing devices, and user interfaces may be accessible through such mobile computing devices (for example, smartphones and/or tablets).</p><p id="p-0091" num="0090">Many variations and modifications may be made to the above-described embodiments, the elements of which are to be understood as being among other acceptable examples. All such modifications and variations are intended to be included herein within the scope of this disclosure. The foregoing description details certain embodiments. It will be appreciated, however, that no matter how detailed the foregoing appears in text, the systems and methods can be practiced in many ways. As is also stated above, it should be noted that the use of particular terminology when describing certain features or aspects of the systems and methods should not be taken to imply that the terminology is being re-defined herein to be restricted to including any specific characteristics of the features or aspects of the systems and methods with which that terminology is associated.</p><p id="p-0092" num="0091">Conditional language, such as, among others, &#x201c;can,&#x201d; &#x201c;could,&#x201d; &#x201c;might,&#x201d; or &#x201c;may,&#x201d; unless specifically stated otherwise, or otherwise understood within the context as used, is generally intended to convey that certain embodiments include, while other embodiments do not include, certain features, elements, and/or steps. Thus, such conditional language is not generally intended to imply that features, elements and/or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding, with or without user input or prompting, whether these features, elements and/or steps are included or are to be performed in any particular embodiment.</p><p id="p-0093" num="0092">The term &#x201c;substantially&#x201d; when used in conjunction with the term &#x201c;real-time&#x201d; forms a phrase that will be readily understood by a person of ordinary skill in the art. For example, it is readily understood that such language will include speeds in which no or little delay or waiting is discernible, or where such delay is sufficiently short so as not to be disruptive, irritating, or otherwise vexing to a user.</p><p id="p-0094" num="0093">Conjunctive language such as the phrase &#x201c;at least one of X, Y, and Z,&#x201d; or &#x201c;at least one of X, Y, or Z,&#x201d; unless specifically stated otherwise, is to be understood with the context as used in general to convey that an item, term, etc. may be either X, Y, or Z, or a combination thereof. For example, the term &#x201c;or&#x201d; is used in its inclusive sense (and not in its exclusive sense) so that when used, for example, to connect a list of elements, the term &#x201c;or&#x201d; means one, some, or all of the elements in the list. Thus, such conjunctive language is not generally intended to imply that certain embodiments require at least one of X, at least one of Y, and at least one of Z to each be present.</p><p id="p-0095" num="0094">The term &#x201c;a&#x201d; as used herein should be given an inclusive rather than exclusive interpretation. For example, unless specifically noted, the term &#x201c;a&#x201d; should not be understood to mean &#x201c;exactly one&#x201d; or &#x201c;one and only one&#x201d;; instead, the term &#x201c;a&#x201d; means &#x201c;one or more&#x201d; or &#x201c;at least one,&#x201d; whether used in the claims or elsewhere in the specification and regardless of uses of quantifiers such as &#x201c;at least one,&#x201d; &#x201c;one or more,&#x201d; or &#x201c;a plurality&#x201d; elsewhere in the claims or specification.</p><p id="p-0096" num="0095">The term &#x201c;comprising&#x201d; as used herein should be given an inclusive rather than exclusive interpretation. For example, a general purpose computer comprising one or more processors should not be interpreted as excluding other computer components, and may possibly include such components as memory, input/output devices, and/or network interfaces, among others.</p><p id="p-0097" num="0096">While the above detailed description has shown, described, and pointed out novel features as applied to various embodiments, it may be understood that various omissions, substitutions, and changes in the form and details of the devices or processes illustrated may be made without departing from the spirit of the disclosure. As may be recognized, certain embodiments of the inventions described herein may be embodied within a form that does not provide all of the features and benefits set forth herein, as some features may be used or practiced separately from others. The scope of certain inventions disclosed herein is indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computerized method comprising:<claim-text>accessing a data set comprising:<claim-text>a plurality of nodes associated with portions of a process;</claim-text><claim-text>indications of logical relationships between nodes, including at least some relationships between nodes;</claim-text><claim-text>and</claim-text><claim-text>reliability scores associated with each of the plurality of nodes;</claim-text></claim-text><claim-text>generating an interactive graphical user interface comprising a plurality of boards associated with corresponding nodes of the plurality of nodes, each of the plurality of boards comprising</claim-text><claim-text>a logical expression;</claim-text><claim-text>receiving a collapse input via the interactive graphical user interface, the collapse input configured to display a second plurality of boards fewer than the plurality of boards;</claim-text><claim-text>displaying an indication that at least two boards of the plurality of boards combined into a combined board, a first board of the at least two boards having a first logical expression, and a second board of the at least two boards having a second logical expression;</claim-text><claim-text>determining, based on the collapse input and on the first and second logical expressions, a combined logical expression based on the first and second logical expressions; and</claim-text><claim-text>displaying the combined logical expression within an attribute region of the combined board.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the user interface comprises at least one indicator of logical relationship between two boards, the at least one indicator of logical relationship corresponding to an indication of logical relationships between nodes corresponding to the two boards.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising updating the interactive graphical user interface to display a second plurality of boards different from the plurality of boards.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising updating, based on an expand input, the interactive graphical user interface to display a second plurality of boards greater than the plurality of boards.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein updating the interactive graphical user interface to display a second plurality of boards greater than the plurality of boards comprises displaying an indication that a first board of the plurality of boards split into at least two boards.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein updating the interactive graphical user interface to display a second plurality of boards greater than the plurality of boards comprises displaying a first indication of logical flow between at least one of the at least two boards and another board.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising:<claim-text>displaying a combined attribute in relation to the combined board, the combined attribute based at least on first and second attributes displayed within corresponding attribute regions of respective first and second boards of the at least two boards of the plurality of boards.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>updating, in response to a collapse input, the interactive graphical user interface to display an updated plurality of boards comprising a board having an attribute region that is based on respective attribute regions of at least two boards of the plurality of boards.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein updating the interactive graphical user interface to display a second plurality of boards fewer than the plurality of boards comprises displaying a second indication of logical flow between the combined board and another board.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least one of the reliability scores is determined at least in part by a process associated with the associated node.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least one of the reliability scores is determined at least in part by a user input.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least one of the reliability scores comprises a mathematical averaging of all predecessor nodes.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of boards is displayed in a grid comprising rows and columns.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the interactive graphical user interface further comprises displaying, based on a selection of a link to a node location of a first node, a first board associated with the first node, the link selectable from a location external to the dataset.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the interactive graphical user interface further comprises displaying, based on a selection of a link to a node location of a second node, a second board associated with the second node, the link selectable from a location within the dataset.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the interactive graphical user interface further comprises displaying, based on a selection of a link, external information associated with the link, at least a portion of the external information, the external information comprising information external to the dataset.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the interactive graphical user interface further comprises updating, based on a user update action, the plurality of boards to include at least one new board different from any of the plurality of boards.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>updating, in response to a collapse input, the interactive graphical user interface to display an updated plurality of boards comprising a board having an attribute region that is based on respective attribute regions of at least two boards of the plurality of boards.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>displaying a combined attribute in relation to the combined board, the combined attribute based at least on first and second attributes displayed within corresponding attribute regions of respective first and second boards of the at least two boards of the plurality of boards.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A computerized method comprising:<claim-text>generating data for rendering an interactive graphical user interface, the interactive graphical user interface comprising:<claim-text>a plurality of boards comprising a first plurality of boards and a second plurality of boards; and</claim-text><claim-text>a first indicator of logical flow indicating a link between first and second boards of the first plurality of boards; and</claim-text><claim-text>a second indicator of logical flow indicating a link between first and second boards of the second plurality of boards;</claim-text></claim-text><claim-text>receiving a user modification input comprising a collapse input;</claim-text><claim-text>in response to the user modification input, updating the interactive graphical user interface to display one or more boards, the one or more boards comprising a quantity of boards fewer from a quantity of the plurality of boards, each of the plurality of boards comprising:<claim-text>a logical expression;</claim-text></claim-text><claim-text>displaying an indication that at least two boards of the plurality of boards combined into the combined board, a first board of the at least two boards having a first logical expression, and a second board of the at least two boards having a second logical expression;</claim-text><claim-text>determining, based on the collapse input and on the first and second logical expressions, a combined logical expression based on the first and second logical expressions; and</claim-text><claim-text>displaying the combined logical expression within an attribute region of the combined board.</claim-text></claim-text></claim></claims></us-patent-application>