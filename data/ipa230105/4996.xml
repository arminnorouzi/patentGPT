<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004997A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221222" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004997</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17362404</doc-number><date>20210629</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>30</main-group><subgroup>02</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>30</main-group><subgroup>0204</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>30</main-group><subgroup>0201</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHODS AND APPARATUS TO ESTIMATE CARDINALITY ACROSS MULTIPLE DATASETS REPRESENTED USING BLOOM FILTER ARRAYS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>The Nielsen Company (US), LLC</orgname><address><city>New York</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Sheppard</last-name><first-name>Michael</first-name><address><city>Holland</city><state>MI</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Sullivan</last-name><first-name>Jonathan</first-name><address><city>Hurricane</city><state>UT</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Morovati Lopez</last-name><first-name>Diane</first-name><address><city>West Hills</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Dailey</last-name><first-name>Jake Ryan</first-name><address><city>San Francisco</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Summers</last-name><first-name>Christie Nicole</first-name><address><city>Baltimore</city><state>MD</state><country>US</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Poppie</last-name><first-name>Molly</first-name><address><city>Arlington Heights</city><state>IL</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Methods and apparatus to estimate cardinality across multiple datasets represented using Bloom filter arrays are disclosed. Disclosed examples include processor circuitry to execute and/or instantiate instructions to determine an inclusion-exclusion expression that defines an audience size for a user group of interest. Terms in the inclusion-exclusion expression corresponding to either a first cardinality of a first one of at least three Bloom filter arrays or a second cardinality of a union of two or more of the Bloom filter arrays. Different ones of the Bloom filter arrays representative of different sets of users who accessed media. The at least one processor further to estimate, based on the inclusion-exclusion expression, the audience size of the user group of interest.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="115.40mm" wi="158.75mm" file="US20230004997A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="222.25mm" wi="164.59mm" orientation="landscape" file="US20230004997A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="226.91mm" wi="150.37mm" file="US20230004997A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="154.01mm" wi="121.24mm" file="US20230004997A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="109.90mm" wi="118.19mm" file="US20230004997A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="163.83mm" wi="118.19mm" file="US20230004997A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="219.20mm" wi="162.56mm" file="US20230004997A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="231.90mm" wi="168.91mm" file="US20230004997A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="232.41mm" wi="168.40mm" orientation="landscape" file="US20230004997A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="106.43mm" wi="145.29mm" file="US20230004997A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="170.26mm" wi="145.20mm" file="US20230004997A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="170.26mm" wi="145.20mm" file="US20230004997A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="241.47mm" wi="167.22mm" file="US20230004997A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="243.16mm" wi="175.77mm" file="US20230004997A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD OF THE DISCLOSURE</heading><p id="p-0002" num="0001">This disclosure relates generally to monitoring media exposure and, more particularly, to methods and apparatus to estimate cardinality across multiple datasets represented using Bloom filter arrays.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Traditionally, audience measurement entities determine audience exposure to media based on registered panel members. That is, an audience measurement entity (AME) enrolls people who consent to being monitored into a panel. The AME then monitors those panel members to determine media (e.g., television programs or radio programs, movies, DVDs, advertisements, webpages, streaming media, etc.) exposed to those panel members. In this manner, the AME can determine exposure metrics (e.g., audience size) for different media based on the collected media measurement data.</p><p id="p-0004" num="0003">As people are accessing more and more media through digital means (e.g., via the Internet), it is possible for online publishers and/or database proprietors providing such media to track all instances of exposure to media (e.g., on a census wide level) rather than being limited to exposure metrics based on audience members enrolled as panel members of an AME. However, database proprietors are typically only able to track media exposure pertaining to online activity associated with the platforms operated by the database proprietors. Where media is delivered via multiple different platforms of multiple different database proprietors, no single database proprietor will be able to provide exposure metrics across the entire population to which the media was made accessible. Furthermore, such database proprietors have an interest in preserving the privacy of their users such that there are limitations on the nature of the exposure metrics such database proprietors are willing to share with one another and/or an interested third party such as an AME.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an example environment to implement a technique for logging impressions of accesses to server-based media.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIGS. <b>2</b>-<b>5</b></figref> illustrate the creation of a traditional Bloom filter array.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example Venn diagram showing the various disjoint datasets possible across three sets of data represented by three different Bloom filter arrays.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram of the example database proprietor apparatus of any one of the example database proprietors of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram of the example audience metric generator of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart representative of example machine readable instructions that may be executed and/or instantiated by example processor circuitry to implement the example database proprietor apparatus of <figref idref="DRAWINGS">FIGS. <b>1</b> and/or <b>7</b></figref>.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>10</b>-<b>12</b></figref> are flowcharts representative of example machine readable instructions that may be executed and/or instantiated by example processor circuitry to implement the example audience metric generator of <figref idref="DRAWINGS">FIGS. <b>1</b> and/or <b>8</b></figref>.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a block diagram of an example processing platform including processor circuitry structured to execute and/or instantiate the example machine readable instructions of <figref idref="DRAWINGS">FIG. <b>9</b></figref> to implement the example database proprietor apparatus of <figref idref="DRAWINGS">FIGS. <b>1</b> and/or <b>7</b></figref>.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a block diagram of an example processing platform including processor circuitry structured to execute and/or instantiate the example machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>10</b>-<b>12</b></figref> to implement the example audience metric generator of <figref idref="DRAWINGS">FIGS. <b>1</b> and/or <b>8</b></figref>.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a block diagram of an example implementation of the processor circuitry of <figref idref="DRAWINGS">FIGS. <b>13</b> and/or <b>14</b></figref>.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a block diagram of another example implementation of the processor circuitry of <figref idref="DRAWINGS">FIGS. <b>13</b> and/or <b>14</b></figref>.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0016" num="0015">The figures are not necessarily to scale. In general, the same reference numbers will be used throughout the drawing(s) and accompanying written description to refer to the same or like parts. As used herein, connection references (e.g., attached, coupled, connected, and joined) may include intermediate members between the elements referenced by the connection reference and/or relative movement between those elements unless otherwise indicated. As such, connection references do not necessarily infer that two elements are directly connected and/or in fixed relation to each other.</p><p id="p-0017" num="0016">Unless specifically stated otherwise, descriptors such as &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; etc. are used herein without imputing or otherwise indicating any meaning of priority, physical order, arrangement in a list, and/or ordering in any way, but are merely used as labels and/or arbitrary names to distinguish elements for ease of understanding the disclosed examples. In some examples, the descriptor &#x201c;first&#x201d; may be used to refer to an element in the detailed description, while the same element may be referred to in a claim with a different descriptor such as &#x201c;second&#x201d; or &#x201c;third.&#x201d; In such instances, it should be understood that such descriptors are used merely for identifying those elements distinctly that might, for example, otherwise share a same name. As used herein &#x201c;substantially real time&#x201d; refers to occurrence in a near instantaneous manner recognizing there may be real world delays for computing time, transmission, etc. Thus, unless otherwise specified, &#x201c;substantially real time&#x201d; refers to real time+/&#x2212;1 second.</p><p id="p-0018" num="0017">As used herein, &#x201c;processor circuitry&#x201d; is defined to include (i) one or more special purpose electrical circuits structured to perform specific operation(s) and including one or more semiconductor-based logic devices (e.g., electrical hardware implemented by one or more transistors), and/or (ii) one or more general purpose semiconductor-based electrical circuits programmed with instructions to perform specific operations and including one or more semiconductor-based logic devices (e.g., electrical hardware implemented by one or more transistors). Examples of processor circuitry include programmed microprocessors, Field Programmable Gate Arrays (FPGAs) that may instantiate instructions, Central Processor Units (CPUs), Graphics Processor Units (GPUs), Digital Signal Processors (DSPs), XPUs, or microcontrollers and integrated circuits such as Application Specific Integrated Circuits (ASICs). For example, an XPU may be implemented by a heterogeneous computing system including multiple types of processor circuitry (e.g., one or more FPGAs, one or more CPUs, one or more GPUs, one or more DSPs, etc., and/or a combination thereof) and application programming interface(s) (API(s)) that may assign computing task(s) to whichever one(s) of the multiple types of the processing circuitry is/are best suited to execute the computing task(s).</p><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0019" num="0018">Techniques for monitoring user access to an Internet-accessible media, such as digital television (DTV) media and digital content ratings (DCR) media, have evolved significantly over the years. Internet-accessible media is also known as digital media. In the past, such monitoring was done primarily through server logs. In particular, entities serving media on the Internet would log the number of requests received for their media at their servers. Basing Internet usage research on server logs is problematic for several reasons. For example, server logs can be tampered with either directly or via zombie programs, which repeatedly request media from the server to increase the server log counts. Also, media is sometimes retrieved once, cached locally and then repeatedly accessed from the local cache without involving the server. Server logs cannot track such repeat views of cached media. Thus, server logs are susceptible to both over-counting and under-counting errors.</p><p id="p-0020" num="0019">The inventions disclosed in Blumenau, U.S. Pat. No. 6,108,637, which is hereby incorporated herein by reference in its entirety, fundamentally changed the way Internet monitoring is performed and overcame the limitations of the server-side log monitoring techniques described above. For example, Blumenau disclosed a technique wherein Internet media to be tracked is tagged with monitoring instructions. In particular, monitoring instructions are associated with the hypertext markup language (HTML) of the media to be tracked. When a client requests the media, both the media and the monitoring instructions are downloaded to the client. The monitoring instructions are, thus, executed whenever the media is accessed, be it from a server or from a cache. Upon execution, the monitoring instructions cause the client to send or transmit monitoring information from the client to a content provider site. The monitoring information is indicative of the manner in which content was displayed.</p><p id="p-0021" num="0020">In some implementations, an impression request or ping request can be used to send or transmit monitoring information by a client device using a network communication in the form of a hypertext transfer protocol (HTTP) request. In this manner, the impression request or ping request reports the occurrence of a media impression at the client device. For example, the impression request or ping request includes information to report access to a particular item of media (e.g., an advertisement, a webpage, an image, video, audio, etc.). In some examples, the impression request or ping request can also include a cookie previously set in the browser of the client device that may be used to identify a user that accessed the media. That is, impression requests or ping requests cause monitoring data reflecting information about an access to the media to be sent from the client device that downloaded the media to a monitoring entity and can provide a cookie to identify the client device and/or a user of the client device. In some examples, the monitoring entity is an audience measurement entity (AME) that did not provide the media to the client and who is a trusted (e.g., neutral) third party for providing accurate usage statistics (e.g., The Nielsen Company, LLC). Since the AME is a third party relative to the entity serving the media to the client device, the cookie sent to the AME in the impression request to report the occurrence of the media impression at the client device is a third-party cookie. Third-party cookie tracking is used by measurement entities to track access to media accessed by client devices from first-party media servers.</p><p id="p-0022" num="0021">There are many database proprietors operating on the Internet. These database proprietors provide services to large numbers of subscribers. In exchange for the provision of services, the subscribers register with the database proprietors. As part of this registration, the subscribers may provide personally identifiable information (PII) including, for example, their name, their home address, their email address, etc. that is stored in a database operated and/or maintained by the database proprietor. Examples of such database proprietors include social network sites (e.g., Facebook, Twitter, MySpace, etc.), multi-service sites (e.g., Yahoo!, Google, Axiom, Catalina, etc.), online retailer sites (e.g., Amazon.com, Buy.com, etc.), credit reporting sites (e.g., Experian), streaming media sites (e.g., YouTube, Hulu, etc.), etc. These database proprietors set cookies and/or other device/user identifiers on the client devices of their subscribers to enable the database proprietors to recognize their subscribers when they visit their web sites.</p><p id="p-0023" num="0022">The protocols of the Internet make cookies inaccessible outside of the domain (e.g., Internet domain, domain name, etc.) on which they were set. Thus, a cookie set in, for example, the facebook.com domain (e.g., a first party) is accessible to servers in the facebook.com domain, but not to servers outside that domain. Therefore, although AMEs (e.g., third parties) might find it advantageous to access the cookies set by the database proprietors, they are unable to do so.</p><p id="p-0024" num="0023">The inventions disclosed in Mazumdar et al., U.S. Pat. No. 8,370,489, which is incorporated by reference herein in its entirety, enable an AME to leverage the existing databases of database proprietors to collect more extensive Internet usage by extending the impression request process to encompass partnered database proprietors and by using such partners as interim data collectors. The inventions disclosed in Mazumdar accomplish this task by structuring the AME to respond to impression requests from clients (who may not be a member of an audience measurement panel and, thus, may be unknown to the AME) by redirecting the clients from the AME to a database proprietor, such as a social network site partnered with the AME, using an impression response. Such a redirection initiates a communication session between the client accessing the tagged media and the database proprietor. For example, the impression response received at the client device from the AME may cause the client device to send a second impression request to the database proprietor. In response to the database proprietor receiving this impression request from the client device, the database proprietor (e.g., Facebook) can access any cookie it has set on the client to thereby identify the client based on the internal records of the database proprietor. In the event the client device corresponds to a subscriber of the database proprietor, the database proprietor logs/records a database proprietor demographic impression in association with the user/client device.</p><p id="p-0025" num="0024">As used herein, an impression is defined to be an event in which a home or individual accesses and/or is exposed to media (e.g., an advertisement, content, a group of advertisements and/or a collection of content). In Internet media delivery, a quantity of impressions or impression count is the total number of times media (e.g., content, an advertisement, or advertisement campaign) has been accessed by a web population (e.g., the number of times the media is accessed). In some examples, an impression or media impression is logged by an impression collection entity (e.g., an AME or a database proprietor) in response to an impression request from a user/client device that requested the media. For example, an impression request is a message or communication (e.g., an HTTP request) sent by a client device to an impression collection server to report the occurrence of a media impression at the client device. In some examples, a media impression is not associated with demographics. In non-Internet media delivery, such as television (TV) media, a television or a device attached to the television (e.g., a set-top-box or other media monitoring device) may monitor media being output by the television. The monitoring generates a log of impressions associated with the media displayed on the television. The television and/or connected device may transmit impression logs to the impression collection entity to log the media impressions.</p><p id="p-0026" num="0025">A user of a computing device (e.g., a mobile device, a tablet, a laptop, etc.) and/or a television may be exposed to the same media via multiple devices (e.g., two or more of a mobile device, a tablet, a laptop, etc.) and/or via multiple media types (e.g., digital media available online, digital TV (DTV) media temporality available online after broadcast, TV media, etc.). For example, a user may start watching the Walking Dead television program on a television as part of TV media, pause the program, and continue to watch the program on a tablet as part of DTV media. In such an example, the exposure to the program may be logged by an AME twice, once for an impression log associated with the television exposure, and once for the impression request generated by a tag (e.g., census measurement science (CMS) tag) executed on the tablet. Multiple logged impressions associated with the same program and/or same user are defined as duplicate impressions. Duplicate impressions are problematic in determining total reach estimates because one exposure via two or more cross-platform devices may be counted as two or more unique audience members. As used herein, reach is a measure indicative of the demographic coverage achieved by media (e.g., demographic group(s) and/or demographic population(s) exposed to the media). For example, media reaching a broader demographic base will have a larger reach than media that reaches a more limited demographic base. The reach metric may be measured by tracking impressions for known users (e.g., panelists or non-panelists) for which an audience measurement entity stores demographic information or can obtain demographic information. Deduplication is a process that is necessary to adjust cross-platform media exposure totals by reducing (e.g., eliminating) the double counting of individual audience members that were exposed to media via more than one platform and/or are represented in more than one database of media impressions used to determine the reach of the media.</p><p id="p-0027" num="0026">As used herein, a unique audience (also known as audience size) is based on audience members distinguishable from one another. That is, a particular audience member exposed to particular media is measured as a single unique audience member regardless of how many times that audience member is exposed to that particular media or the particular platform(s) through which the audience member is exposed to the media. If that particular audience member is exposed multiple times to the same media, the multiple exposures for the particular audience member to the same media is counted as only a single unique audience member. In this manner, impression performance for particular media is not disproportionately represented when a small subset of one or more audience members is exposed to the same media an excessively large number of times while a larger number of audience members is exposed fewer times or not at all to that same media. By tracking exposures to unique audience members, a unique audience measure may be used to determine a reach measure to identify how many unique audience members are reached by media. In some examples, increasing unique audience and, thus, reach, is useful for advertisers wishing to reach a larger audience base.</p><p id="p-0028" num="0027">An AME may want to find unique audience/deduplicate impressions across multiple database proprietors, custom date ranges, custom combinations of assets and platforms, etc. Some deduplication techniques perform deduplication across database proprietors using particular systems (e.g., Nielsen's TV Panel Audience Link). For example, such deduplication techniques match or probabilistically link personally identifiable information (PII) from each source. Such deduplication techniques require storing massive amounts of user data or calculating audience overlap for all possible combinations, neither of which are desirable. PII data can be used to represent and/or access audience demographics (e.g., geographic locations, ages, genders, etc.).</p><p id="p-0029" num="0028">In some situations, while the database proprietors may be interested in collaborating with an AME, the database proprietor may not want to share the PII data associated with its subscribers to maintain the privacy of the subscribers. One solution to the concerns for privacy is to share sketch data that provides summary information about an underlying dataset without revealing PII data for individuals that may be included in the dataset. Not only does sketch data assist in protecting the privacy of users represented by the data, but sketch data also serves as a memory saving construct to represent the contents of relatively large databases using relatively small amounts of date. Further, not only does the relatively small size of sketch date offer advantages for memory capacity but it also reduces demands on processor capacity to analyze and/or process such data.</p><p id="p-0030" num="0029">Sketch data may include a cardinality defining the number of individuals (e.g., users or subscribers) represented by the data while maintaining the identity of such individuals private. The cardinality of sketch data associated with media exposure is a useful piece of information for an AME because it provides an indication of the number of audience members exposed to particular media via a platform maintained by the database proprietor providing the sketch data. However, in some instances, sketch data may be provided by database proprietors without providing an indication of the cardinality of the data. Even when the cardinality for sketch data is provided, problems for audience metrics arise when the media may be accessed via multiple different database proprietors that each provide separate sketch data summarizing the individual subscribers that were exposed to the media. In particular, the sum of the cardinalities of each sketch data is not a reliable estimate of the unique audience size because the same individual may be represented in multiple datasets associated with different sketch data. As a result, such individuals will be double counted (or possibly more than twice if there are more than two datasets being aggregated) resulting in the incorrect inflation of the unique audience size. Furthermore, identifying overlap between two different sets of sketch data (e.g., to deduplicate the users represented in the data) is non-trivial because, as stated above, the sketch data is generated to preserve the identity and privacy of the individuals represented thereby. Examples disclosed herein overcome the above challenges by enabling the estimation of a total cardinality of users represented in sketch data associated with two or more different datasets so that an AME may be able to deduplicate individuals represented in more than one of the datasets, thereby enabling the accurate estimate of the unique audience for a particular media item. Furthermore, the cardinality estimation in examples disclosed herein may be made with or without database proprietors providing the dataset-specific cardinalities associated with the different data sketches being combined.</p><p id="p-0031" num="0030">Notably, although third-party cookies are useful for third-party measurement entities in many of the above-described techniques to track media accesses and to leverage demographic information from third-party database proprietors, use of third-party cookies may be limited or may cease in some or all online markets. That is, use of third-party cookies enables sharing anonymous PII subscriber information across entities which can be used to identify and deduplicate audience members across database proprietor impression data. However, to reduce or eliminate the possibility of revealing user identities outside database proprietors by such anonymous data sharing across entities, some websites, internet domains, and/or web browsers will stop (or have already stopped) supporting third-party cookies. This will make it more challenging for third-party measurement entities to track media accesses via first-party servers. That is, although first-party cookies will still be supported and useful for media providers (e.g., database proprietors) to track accesses to media via their own first-party servers, neutral third parties interested in generating neutral, unbiased audience metrics data will not have access to the impression data collected by the first-party servers using first-party cookies. Examples disclosed herein may be implemented with or without the availability of third-party cookies because, as mentioned above, the datasets used in the deduplication process are generated and provided by database proprietors, which may employ first-party cookies to track media impressions from which the datasets (e.g., sketch data) is generated.</p><p id="p-0032" num="0031">Although examples disclosed herein are described in association with audience metrics related to media impressions, examples disclosed herein may be similarly used for other applications to deduplicate between multiple different datasets while preserving privacy. The datasets themselves need not be audiences or email addresses. They could be, for example, bank accounts, lists of purchased items, store visits, traffic patterns, etc. The datasets could be represented as lists of numbers or any other information represented as unique entries in a database.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an example environment <b>100</b> that includes an example audience measurement entity (AME) <b>102</b>, a first example database proprietor <b>106</b><i>a</i>, a second example database proprietor <b>106</b><i>b</i>, and example client devices <b>108</b>. The example AME <b>102</b> includes an example AME computer <b>110</b> that implements an example audience metrics generator <b>112</b> to determine audience sizes based on media impressions logged by the database proprietors <b>106</b><i>a</i>-<i>b</i>. In the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the AME computer <b>110</b> may also implement an impression monitor system to log media impressions reported by the client devices <b>108</b>. In the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the client devices <b>108</b> may be stationary or portable computers, handheld computing devices, smart phones, Internet appliances, smart televisions, and/or any other type of device that may be connected to the Internet and capable of accessing and/or presenting media.</p><p id="p-0034" num="0033">As used herein, an audience size is defined as a number of deduplicated or unique audience members exposed to a media item of interest for audience metrics analysis. A deduplicated or unique audience member is one that is counted only once as part of an audience size. Thus, regardless of whether a particular person is detected as accessing a media item once or multiple times, that person is only counted once in the audience size for that media item. Audience size may also be referred to as unique audience or deduplicated audience.</p><p id="p-0035" num="0034">As used herein, a media impression is defined as an occurrence of access and/or exposure to media <b>114</b> (e.g., an advertisement, a movie, a movie trailer, a song, a web page banner, etc.). Examples disclosed herein may be used to monitor for media impressions of any one or more media types (e.g., video, audio, a web page, an image, text, etc.). In examples disclosed herein, the media <b>114</b> may be content and/or advertisements. Examples disclosed herein are not restricted for use with any particular type of media. On the contrary, examples disclosed herein may be implemented in connection with tracking impressions for media of any type or form in a network.</p><p id="p-0036" num="0035">In the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, content providers and/or advertisers distribute the media <b>114</b> via the Internet to users that access websites and/or online television services (e.g., web-based TV, Internet protocol TV (IPTV), etc.). The content providers may be the same as or different entities than the database proprietors <b>106</b><i>a</i>-<i>b</i>. In some examples, the media <b>114</b> is served by media servers of the same internet domains as the database proprietors <b>106</b><i>a</i>-<i>b</i>. For example, the database proprietors <b>106</b><i>a</i>-<i>b </i>include corresponding database proprietor servers <b>118</b><i>a</i>-<i>b </i>that can serve media <b>114</b> to their corresponding subscribers via the client devices <b>108</b>. Examples disclosed herein can be used to generate audience metrics data that measures audience sizes of media served by different ones of the database proprietors <b>106</b><i>a</i>-<i>b</i>. For example, the database proprietors <b>106</b><i>a</i>-<i>b </i>may use such audience metrics data to promote their online media serving services (e.g., ad server services, media server services, etc.) to prospective clients. By showing audience metrics data indicative of audience sizes drawn by corresponding ones of the database proprietors <b>106</b><i>a</i>-<i>b</i>, the database proprietors <b>106</b><i>a</i>-<i>b </i>can sell their media serving services to customers interested in delivering online media to users.</p><p id="p-0037" num="0036">In some examples, the media <b>114</b> is presented via the client devices <b>108</b>. When the media <b>114</b> is accessed by the client devices <b>108</b>, the client devices <b>108</b> send impression requests <b>122</b><i>a</i>-<i>b </i>to the database proprietor servers <b>118</b><i>a</i>-<i>b </i>to inform the database proprietor servers <b>118</b><i>a</i>-<i>b </i>of the media accesses. In this manner, the database proprietor servers <b>118</b><i>a</i>-<i>b </i>can log media impressions in impression records of corresponding database proprietor audience metrics databases <b>124</b><i>a</i>-<i>b</i>. In some examples, when a database proprietor server <b>118</b><i>a</i>-<i>b </i>serves the media <b>114</b>, the impression request <b>122</b><i>a</i>-<i>b </i>includes a first-party cookie set by that database proprietor server <b>118</b><i>a</i>-<i>b </i>so that the database proprietor server <b>118</b><i>a</i>-<i>b </i>can log an impression for the media <b>114</b> without using a third-party cookie. In some examples, the client devices <b>108</b> also send impression requests <b>122</b><i>c </i>to the AME <b>102</b> so that the AME <b>102</b> can log census impressions in an AME audience metrics database <b>126</b>. In the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the database proprietors <b>106</b><i>a</i>-<i>b </i>log demographic impressions corresponding to accesses by the client devices <b>108</b> to the media <b>114</b>. Demographic impressions are impressions logged in association with demographic information collected by the database proprietors <b>106</b><i>a</i>-<i>b </i>from registered subscribers of their services. Also, in the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the AME computer <b>110</b> logs census-level media impressions corresponding to accesses by client devices <b>108</b> to media <b>114</b>. Census-level media impressions (e.g., census impressions) are impressions logged regardless of whether demographic information is known for those logged impressions. In some examples, the census impressions include some media impressions accessed via a platform maintained by the first database proprietor <b>106</b><i>a </i>and some media impressions accessed via a platform maintained by the second database proprietor <b>106</b><i>b</i>. In some examples, the AME computer <b>110</b> does not collect impressions, and examples disclosed herein are based on audience data from impressions collected by the database proprietors <b>106</b><i>a</i>-<i>b</i>. For instance, the AME computer <b>110</b> may not collect impressions if the database proprietors <b>106</b><i>a</i>-<i>b </i>do not allow or support third-party cookies on their platforms.</p><p id="p-0038" num="0037">In some examples, the media <b>114</b> is encoded to include a media identifier (ID). The media ID may be any identifier or information that can be used to identify the corresponding media <b>114</b>. In some examples the media ID is an alphanumeric string or value. In some examples, the media ID is a collection of information. For example, if the media <b>114</b> is an episode, the media ID may include program name, season number, and/or episode number. When the example media <b>114</b> includes advertisements, such advertisements may be content and/or advertisements. The advertisements may be individual, standalone ads and/or may be part of one or more ad campaigns. In some examples, the ads of the illustrated example are encoded with identification codes (e.g., data) that identify the associated ad campaign (e.g., campaign ID, if any), a creative type ID (e.g., identifying a Flash-based ad, a banner ad, a rich type ad, etc.), a source ID (e.g., identifying the ad publisher), and/or a placement ID (e.g., identifying the physical placement of the ad on a screen). In some examples, advertisements tagged with the monitoring instructions are distributed with Internet-based media content such as, for example, web pages, streaming video, streaming audio, IPTV content, etc. As noted above, methods, apparatus, systems, and/or articles of manufacture disclosed herein are not limited to advertisement monitoring but can be adapted to any type of content monitoring (e.g., web pages, movies, television programs, etc.).</p><p id="p-0039" num="0038">In some examples, the media <b>114</b> of the illustrated example is tagged or encoded to include monitoring or tag instructions, which are computer executable monitoring instructions (e.g., Java, java script, or any other computer language or script) that are executed by web browsers that access the media <b>114</b> via, for example, the Internet. Execution of the monitoring instructions causes the web browser to send the impression requests <b>122</b><i>a</i>-<i>c </i>(e.g., also referred to as tag requests) to one or more specified servers of the AME <b>102</b>, the first database proprietor <b>106</b><i>a</i>, and/or the second database proprietor <b>106</b><i>b</i>. As used herein, impression requests <b>122</b><i>a</i>-<i>c </i>are used by the client devices <b>108</b> to report occurrences of media impressions caused by the client devices accessing the media <b>114</b>. In the illustrated example, the impression requests <b>122</b><i>a</i>-<i>b </i>include user-identifying information that the database proprietors <b>106</b><i>a</i>-<i>b </i>can use to identify the subscriber that accessed the media <b>114</b>. For example, when a subscriber of the first database proprietor <b>106</b><i>a </i>logs into a server of the first database proprietor <b>106</b><i>a </i>via a client device <b>108</b>, the first database proprietor <b>106</b><i>a </i>sets a database proprietor cookie on the client device <b>108</b> and maps that cookie to the subscriber's identity/account information at the database proprietor server <b>118</b><i>a</i>. In examples disclosed herein, subscriber identity and/or subscriber account information includes personally identifiable information (PII) such as full name, street address, residence city and state, telephone number, email address, age, date of birth, social security number, demographic information, and/or any other personal information provided by subscribers in exchange for services from the database proprietors <b>106</b><i>a</i>-<i>b</i>. By having such PII data mapped to database proprietor cookies, the first database proprietor <b>106</b><i>a </i>can subsequently identify the subscriber based on the database proprietor cookie to determine when that user accessed different media <b>114</b> and to log an impression in association with demographics and/or other PII data of that user. In the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the impression requests <b>122</b><i>a</i>-<i>b </i>include database proprietor cookies of the client devices <b>108</b> to inform the database proprietors <b>106</b><i>a</i>-<i>b </i>of the particular subscribers that accessed the media <b>114</b>. In some examples, the AME <b>102</b> also sets AME cookies in the client devices <b>108</b> to identify users that are enrolled in a panel of the AME <b>102</b> such that the AME <b>102</b> collects PII data of people that agree to having their internet activities monitored by the AME <b>102</b>.</p><p id="p-0040" num="0039">The impression requests <b>122</b><i>a</i>-<i>c </i>may be implemented using HTTP requests. However, whereas HTTP requests are network communications that traditionally identify web pages or other resources to be downloaded, the impression requests <b>122</b><i>a</i>-<i>c </i>of the illustrated example are network communications that include audience measurement information (e.g., ad campaign identification, content identifier, and/or user identification information) as their payloads. The server (e.g., the AME computer <b>110</b> and/or the database proprietor servers <b>118</b><i>a</i>-<i>b</i>) to which the impression requests <b>122</b><i>a</i>-<i>c </i>are directed is programmed to log occurrences of impressions reported by the impression requests <b>122</b><i>a</i>-<i>c</i>. Further examples of monitoring instructions (e.g., beacon instructions) and uses thereof to collect impression data are disclosed in Mazumdar et al., U.S. Pat. No. 8,370,489, entitled &#x201c;Methods and Apparatus to Determine Impressions using Distributed Demographic Information,&#x201d; which is hereby incorporated herein by reference in its entirety.</p><p id="p-0041" num="0040">In other examples in which the media <b>114</b> is accessed by apps on mobile devices, tablets, computers, etc. (e.g., that do not employ cookies and/or do not execute instructions in a web browser environment), an app publisher (e.g., an app store) can provide a data collector in an install package of an app for installation at the client devices <b>108</b>. When a client device <b>108</b> downloads the app and consents to the accompanying data collector being installed at the client device <b>108</b> for purposes of audience/media/data analytics, the data collector can detect when the media <b>114</b> is accessed at the client device <b>108</b> and cause the client device <b>108</b> to send one or more of the impression requests <b>122</b><i>a</i>-<i>c </i>to report the access to the media <b>114</b>. In such examples, the data collector can obtain user identifiers and/or device identifiers stored in the client devices <b>108</b> and send them in the impression requests <b>122</b><i>a</i>-<i>c </i>to enable the database proprietors <b>106</b><i>a</i>-<i>b </i>and/or the AME <b>102</b> to log impressions. Further examples of using a collector in client devices to collect impression data are disclosed in Burbank et al., U.S. Pat. No. 8,930,701, entitled &#x201c;Methods and Apparatus to Collect Distributed User Information for Media Impressions and Search Terms,&#x201d; and in Bosworth et al., U.S. Pat. No. 9,237,138, entitled &#x201c;Methods and Apparatus to Collect Distributed User Information for Media Impressions and Search Terms,&#x201d; both of which are hereby incorporated herein by reference in their entireties.</p><p id="p-0042" num="0041">In some examples, the database proprietor servers <b>118</b><i>a</i>-<i>b </i>may additionally or alternatively use server logs to log impressions based on requests for media <b>114</b> from the client devices <b>108</b>. For example, when a user of a client device <b>108</b> provides a URL or selects an item of media for viewing, the client device <b>108</b> sends an HTTP request (e.g., the impression request <b>122</b><i>a</i>-<i>b</i>) to a database proprietor server <b>118</b>, a-b that includes the first-party cookie and an identifier of the requested media. In response, the database proprietor server <b>118</b><i>a</i>-<i>b </i>serves the requested media to the client device <b>108</b> and logs an impression of the media as attributable to the client device <b>108</b>.</p><p id="p-0043" num="0042">Typically, the database(s) <b>124</b><i>a</i>-<i>b </i>maintained by the database proprietors <b>106</b><i>a</i>-<i>b </i>are implemented in a closed platform or walled garden so that untrusted third parties do not have access to the information stored in the database. Among other reasons, database systems implemented in this manner serve to maintain the privacy of the users registered with the database proprietors <b>106</b><i>a</i>-<i>b</i>. Maintaining the privacy of individuals represented within the databases of the database proprietors <b>106</b><i>a</i>-<i>b </i>is in some tension with the interests of third-party entities (e.g., media providers that may want to target particular individuals (and/or particular demographic segments of a population) with media (e.g., advertisements)), and/or the AME <b>102</b> that may want to generate audience metrics (e.g., audience size) based on tracked exposures to the media <b>114</b>).</p><p id="p-0044" num="0043">In the illustrated example, the database proprietors <b>106</b><i>a</i>-<i>b </i>collaborate with the AME <b>102</b> so that the AME <b>102</b> can operate as an independent party that measures and/or verifies audience measurement information pertaining to the media <b>114</b> accessed by the subscribers of the database proprietors <b>106</b><i>a</i>-<i>b</i>. However, the database proprietors <b>106</b><i>a</i>-<i>b </i>desire to do so while protecting the privacies of their subscribers by not sharing or revealing subscriber identities, subscriber information, and/or any other subscriber PII data to outside parties. In examples disclosed herein, to share impression data with the AME <b>102</b> without revealing subscriber identities, subscriber information, and/or any other subscriber PII data, the database proprietors <b>106</b><i>a</i>-<i>b </i>process their collected impression data to generate corresponding sketch data <b>132</b><i>a</i>-<i>b</i>. In some examples, the sketch data <b>132</b><i>a</i>-<i>b </i>is generated by a database proprietor apparatus <b>700</b> implemented by the corresponding data base proprietor servers <b>118</b><i>a</i>-<i>b</i>. Further detail regarding the database proprietor apparatus <b>700</b> is provided below in connection with <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0045" num="0044">As used herein, sketch data is an arrangement of data for use in massive data analyses. For example, operations and/or queries that are specified with respect to the explicit and/or very large subsets, can be processed instead in sketch space (e.g., quickly (but approximately) from the much smaller sketches representing the actual data). This enables processing each observed item of data (e.g., each logged media impression and/or audience member) quickly in order to create a summary of the current state of the actual data. In some examples, summary statistics or sketch data provide an indication of certain characteristics (e.g., number of impressions of a media item and/or audience reach of the media item) of data in a database without disclosing any personally identifiable information of individual users that may have contributed to the summary statistics.</p><p id="p-0046" num="0045">One type of data structure that is useful to provide summary statistics (e.g., sketch data) in the context of tracking exposure to media is the Bloom filter array. A typical Bloom filter array is a vector or array of bits that are initialized to 0 and then populated by flipping individual ones of the bits from 0 to 1 based on the allocation or assignment of users (or other data entries) in a database (e.g., the databases <b>124</b><i>a</i>-<i>b </i>of the database proprietors <b>106</b><i>a</i>-<i>b </i>of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) to respective ones of the bits in the Bloom filter array. The users (or other data entries) in a database that are represented in the Bloom filter array are identified as corresponding to summary statistics of interest (e.g., users that were exposed to a particular media item, users that visited a particular website, etc.). That is, while it would be possible to generate a vector for sketch data of all subscribers of either one of the database proprietors <b>106</b><i>a</i>-<i>b</i>, in many instances, the subscribers included in particular sketch data <b>132</b><i>a</i>-<i>b </i>may be the subset of all subscribers that corresponds to audience members that accessed and/or were exposed to a particular media item <b>114</b> of interest and/or the subset of all subscribers identified based on any other suitable filter defined by one or more criteria.</p><p id="p-0047" num="0046">The process of generating a Bloom filter array representative of three distinct users is demonstrated in connection with <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>5</b></figref>. <figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an initial Bloom filter array <b>202</b> that has a vector length of 10 bits with all values being initialized to 0. <figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates the values of the elements in the Bloom filter array <b>202</b> after the mapping of a first user to the Bloom filter array <b>202</b>. <figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates the values of the elements in the Bloom filter array <b>202</b> after the mapping of a second user to the Bloom filter array <b>202</b>. <figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates the values of the elements in the Bloom filter array <b>202</b> after the mapping of a third user to the Bloom filter array <b>202</b>. To populate the Bloom filter array, email addresses <b>302</b>, <b>402</b>, <b>502</b> of the respective first, second, and third users are used. While the email addresses <b>302</b>, <b>402</b>, <b>502</b> are represented in the figures, any type of PII data could additionally or alternatively be used. More generally, although the underlying dataset in the illustrated example represents different people (e.g., different users), the Bloom filter array may represent any type of dataset that includes different items with a unique identifier that can be processed by the hash function(s) to allocate the items to corresponding elements in the Bloom filter array.</p><p id="p-0048" num="0047">As shown in <figref idref="DRAWINGS">FIGS. <b>3</b>-<b>5</b></figref>, three separate hash functions <b>304</b>, <b>306</b>, <b>308</b> are applied to each of the email addresses <b>302</b>, <b>402</b>, <b>502</b> and the particular bit or element in the Bloom filter array <b>202</b> to which the corresponding user is mapped is based on the output of the hash functions <b>304</b>, <b>306</b>, <b>308</b>. The three hash functions <b>304</b>, <b>306</b>, <b>308</b> are shown for purposes of explanation but any number of hash functions may be used (e.g., only 1 hash function, 2 hash functions, more than 3 hash functions). In examples disclosed herein, each of the hash functions <b>304</b>, <b>306</b>, <b>308</b> is designed to map a particular input (e.g., a particular email address <b>302</b>, <b>402</b>, <b>502</b>) to one and only one element in the Bloom filter array <b>202</b>. Further, the hash functions <b>304</b>, <b>306</b>, <b>308</b> are designed such that the probability of a particular input being assigned to a given element in the Bloom filter array <b>202</b> is the same as the probability of being assigned to any other element in the Bloom filter array <b>202</b>. That is, where the Bloom filter array <b>202</b> has a length of m (e.g., m=10 in the illustrated examples), the probability p<sub>i </sub>that a given input (e.g., a particular email address <b>302</b>, <b>402</b>, <b>502</b>) is assigned to the ith element is p<sub>i</sub>=1/m.</p><p id="p-0049" num="0048">In some examples, for the sketch data <b>132</b><i>a</i>-<i>b </i>(e.g., the Bloom filter array <b>202</b>) from the separate database proprietors <b>106</b><i>a</i>-<i>b </i>to be reliably aggregated and meaningfully analyzed, the particular hash function(s) (e.g., the hash functions <b>304</b>, <b>306</b>, <b>308</b>) used by each database proprietors <b>106</b><i>a</i>-<i>b </i>need to be agreed upon in advance. Further, the length of the Bloom filter array <b>202</b> as generated by each of the database proprietors <b>106</b><i>a</i>-<i>b </i>needs to be the same. Based on these constraints, if a user is a registered subscriber of both database proprietors <b>106</b><i>a</i>-<i>b </i>and identified as an audience member of a particular media item <b>114</b>, then both database proprietors <b>106</b><i>a</i>-<i>b </i>will include the user in their respective Bloom filter arrays (e.g., sketch data <b>132</b><i>a</i>-<i>b</i>) and the user will be allocated to the same elements in both Bloom filter arrays (e.g., based on the same output of the same hash function used by both database proprietors <b>106</b><i>a</i>-<i>b</i>). Inasmuch as hashing functions cannot be reversed, the PII data for the particular audience members is kept private, thereby preserving the anonymity of the underlying raw data represented by the sketch data <b>132</b><i>a</i>-<i>b. </i></p><p id="p-0050" num="0049">As represented in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the first email address <b>302</b> is allocated to the first element of the Bloom filter array <b>202</b> based on the first hash function <b>304</b>, the eighth element of the Bloom filter array based on the second hash function <b>306</b>, and the fourth element of the Bloom filter array <b>202</b> based on the third hash function. As such, the bit value of each of the first, fourth, and eighth elements in the Bloom filter array <b>202</b> are flipped from a 0 (as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>) to a 1 (as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>).</p><p id="p-0051" num="0050">As represented in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the second email address <b>402</b> is allocated to each of the fourth, seventh, and eighth elements of the Bloom filter array <b>202</b> based on the respective outputs of the first, second, and third hash functions <b>304</b>, <b>306</b>, <b>308</b>. As a result, the bit value of the seventh element in the Bloom filter array <b>202</b> is flipped from a 0 to a 1. Notably, however, there is no change in the bit values for the fourth and eighth elements in the Bloom filter array <b>202</b> because these bits were already changed to a value 1 based on the mapping of the first email address <b>302</b> to the same elements. In other words, a value of 0 in a particular element in a Bloom filter array <b>202</b> remains a 0 so long as no data entry (e.g., no user) is mapped to that particular element. However, once at least one user is mapped to a particular element the value of the element is flipped to a 1 and remains a 1 regardless of any further assignments of different users to the same element.</p><p id="p-0052" num="0051">As represented in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the third email address <b>502</b> is allocated to the fifth element twice (based on each of the first and third hash functions <b>304</b>, <b>308</b>) and to the eighth element once (based on the second hash function <b>306</b>). As a result, the value of the fifth element is flipped to a 1 (based on the output of the first hash function <b>304</b>) and remains a 1 thereafter such that the duplicate allocation to that element (based on the output of the third hash function <b>308</b>) has no effect. Further, as above, the allocation of the third email address <b>502</b> to the eighth element in the Bloom filter array <b>202</b> (based on the second hash function <b>306</b>) has no effect on the corresponding bit value because the value was previously flipped to a 1.</p><p id="p-0053" num="0052">The mapping of the output of multiple different hash functions (e.g., the first and third hash functions <b>304</b>, <b>308</b>) to the same element (e.g., the fifth element in <figref idref="DRAWINGS">FIG. <b>5</b></figref>) for a single user identifier (e.g., third email address <b>502</b>) is referred to as a hash collision. There is always some probability that a hash collision may occur when multiple hash functions are used. However, the probability of a hash collision may be reduced by increasing the length of the Bloom filter array <b>202</b> (e.g., increasing the number of elements in the array to which a user may be allocated). In many applications, the number of elements in a Bloom filter array may number in the hundreds or even in the thousands such that hash collisions are relatively rare. Relatively long Bloom filter arrays also reduce the likelihood of the array becoming saturated. A Bloom filter array becomes saturated when an overly large proportion of the bits are flipped to a value of 1. As mentioned above, once a bit value is flipped to a 1 in a Bloom filter array, the value remains at a value of 1 thereafter. Thus, as the number of users to be represented in a Bloom filter array increases, there will be an ever increasing number of 1s until (theoretically) all 0s have become 1s. When a Bloom filter array is entirely filled with is (or has an overly large proportion of 1s) it is no longer possible to infer anything from the sketch data. Accordingly, Bloom filter arrays are designed with a sufficient length relative to an expected size of the database to be represented to reduce (e.g., avoid) saturation so that the resulting sketch data remains meaningful and valuable.</p><p id="p-0054" num="0053">While longer Bloom filter arrays reduce the likelihood of hash collisions and reduce the likelihood of saturation occurring, longer Bloom filter arrays can increase memory requirements to store the arrays and reduce the computational efficiency with which the arrays may be analyzed. Furthermore, having Bloom filter arrays that are overly long presents concerns for user privacy. For instance, although the Bloom filter array <b>202</b> does not contain any personally identifiable information (PII) data (e.g., the email addresses <b>302</b>, <b>402</b>, <b>502</b>), the flipping of bits from 0 to 1 is based on a hash of such PII data. As such, if a Bloom filter array is sparsely populated because of a relatively large number of elements to which each user may be allocated and/or a relatively small database represented in the Bloom filter array, it is possible that separate users will be mapped to separate elements in the Bloom filter array with no overlap. In such a situation, there may be a loss of privacy if a third-party entity has access to the Bloom filter array and has independent access to the email addresses <b>302</b>, <b>402</b>, <b>502</b> and knows the particular hash function(s) used to populate the Bloom filter array <b>202</b>. In particular, the third party may be able to confirm whether or not a particular user was included in the sketch data represented by the Bloom filter array <b>202</b> by regenerating the hashes and mapping the outputs to the Bloom filter array <b>202</b> to see whether the corresponding elements have a bit value of 0 or 1. However, this privacy concern is somewhat mitigated for very large databases and/or Bloom filter arrays with short lengths because multiple user are more likely to map to the same element in the Bloom filter array <b>202</b>. That is, a bit value of 1 in a particular element of the Bloom filter array <b>202</b> may correspond to multiple users in a database the Bloom filter array <b>202</b> is created to represent such that a third-party entity may only confirm whether it is possible that a particular user is included in the dataset underlying the Bloom filter array <b>202</b>. Therefore, the length of a Bloom filter array is often defined based on a tradeoff between increasing user privacy (by reducing the vector length) and reducing saturation for more reliable statistics (by increasing the vector length). Notably, if a third-party entity determines that the output of a hash function for a particular user corresponds to an element in the Bloom filter array <b>202</b> that has a value of 0, the third-party entity can at least confidently confirm that the particular user is not included in the underlying dataset. Thus, while Bloom filters arrays can generate false positives when testing for dataset membership, false negatives are impossible (unless additional steps are taken to increase privacy by, for example, adding noise to the array).</p><p id="p-0055" num="0054">Even though the membership of a particular user within a particular dataset represented by a Bloom filter array cannot be guaranteed with confidence, due to the nature in which users are allocated to different elements in the array, it is still possible to reliably estimate the cardinality or total number of unique users included in the underlying dataset. Furthermore, it is possible to reliably estimate the cardinality of users represented across multiple different Bloom filter arrays. To understand the process of estimating the cardinality of users represented in a Bloom filter array (or across multiple Bloom filter arrays), it is useful to consider the probabilities associated with randomly distributing balls into urns or bins.</p><p id="p-0056" num="0055">In particular, allocating users uniformly across a discrete set of elements in a Bloom filter array of length m (as outlined above in connection with <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>5</b></figref>) and testing whether a particular element ends up with a 0 (no user allocations) or a 1 (at least one user allocation) is directly analogous to randomly distributing balls into urns or bins and seeing if a particular urn is empty or not. There is a known theorem defining the probability of a particular number of balls ending up in a particular urn where n balls are distributed across m urns with each ball being equally likely to fall into any of the urns. Specifically, the theorem provides that if n, m&#x2192;&#x221e;, with n m<sup>&#x2212;1</sup>&#x2192;&#x3bb;&#x3c;&#x221e;, then the limit standardized distribution of M<sub>r </sub>is unit normal (where M<sub>r </sub>denotes the number of urns containing r balls after the distribution is completed), and</p><p id="p-0057" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>P</mi>      <mo>&#x2062;</mo>      <mrow>       <mi>r</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mfrac>         <mrow>          <msub>           <mi>M</mi>           <mi>r</mi>          </msub>          <mo>-</mo>          <mrow>           <mi>E</mi>           <mo>[</mo>           <msub>            <mi>M</mi>            <mi>r</mi>           </msub>           <mo>]</mo>          </mrow>         </mrow>         <msqrt>          <mrow>           <mi>Var</mi>           <mo>[</mo>           <msub>            <mi>M</mi>            <mi>r</mi>           </msub>           <mo>]</mo>          </mrow>         </msqrt>        </mfrac>        <mo>&#x3c;</mo>        <mi>x</mi>       </mrow>       <mo>)</mo>      </mrow>     </mrow>     <mo>&#x2192;</mo>     <mrow>      <mi>&#x3a6;</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mi>x</mi>      <mo>)</mo>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>1</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00001-2" num="00001.2"><math overflow="scroll"> <mi>with</mi></math></maths><maths id="MATH-US-00001-3" num="00001.3"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mrow>       <munder>        <mi>lim</mi>        <mrow>         <mi>m</mi>         <mo>&#x2192;</mo>         <mi>&#x221e;</mi>        </mrow>       </munder>       <mfrac>        <mrow>         <mi>E</mi>         <mo>[</mo>         <msub>          <mi>M</mi>          <mi>r</mi>         </msub>         <mo>]</mo>        </mrow>        <mi>m</mi>       </mfrac>      </mrow>      <mo>=</mo>      <mrow>       <mfrac>        <msup>         <mi>&#x3bb;</mi>         <mi>r</mi>        </msup>        <mrow>         <mi>r</mi>         <mo>!</mo>        </mrow>       </mfrac>       <mo>&#x2062;</mo>       <msup>        <mi>e</mi>        <mrow>         <mo>-</mo>         <mi>&#x3bb;</mi>        </mrow>       </msup>      </mrow>     </mrow>     <mo>&#x2062;</mo>     <mtext></mtext>     <mrow>      <mrow>       <munder>        <mi>lim</mi>        <mrow>         <mi>m</mi>         <mo>&#x2192;</mo>         <mi>&#x221e;</mi>        </mrow>       </munder>       <mfrac>        <mrow>         <mi>Var</mi>         <mo>[</mo>         <msub>          <mi>M</mi>          <mi>r</mi>         </msub>         <mo>]</mo>        </mrow>        <mrow>         <mi>E</mi>         <mo>[</mo>         <msub>          <mi>M</mi>          <mi>r</mi>         </msub>         <mo>]</mo>        </mrow>       </mfrac>      </mrow>      <mo>=</mo>      <mrow>       <mn>1</mn>       <mo>-</mo>       <mrow>        <mfrac>         <mrow>          <msup>           <mi>&#x3bb;</mi>           <mi>r</mi>          </msup>          <mo>&#x2062;</mo>          <msup>           <mi>e</mi>           <mrow>            <mo>-</mo>            <mi>&#x3bb;</mi>           </mrow>          </msup>         </mrow>         <mrow>          <mi>r</mi>          <mo>!</mo>         </mrow>        </mfrac>        <mo>&#x2062;</mo>        <mrow>         <mo>(</mo>         <mrow>          <mn>1</mn>          <mo>+</mo>          <msup>           <mrow>            <msup>             <mi>&#x3bb;</mi>             <mrow>              <mo>-</mo>              <mn>1</mn>             </mrow>            </msup>            <mo>(</mo>            <mrow>             <mi>r</mi>             <mo>-</mo>             <mi>&#x3bb;</mi>            </mrow>            <mo>)</mo>           </mrow>           <mn>2</mn>          </msup>         </mrow>         <mo>)</mo>        </mrow>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>2</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0058" num="0056">Estimating the number of empty urns (e.g., r=0) is directly analogous to estimating the number of 0s in a Bloom filter array. When r=0, the above formulae simplify to</p><p id="p-0059" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mrow>       <munder>        <mi>lim</mi>        <mrow>         <mi>m</mi>         <mo>&#x2192;</mo>         <mi>&#x221e;</mi>        </mrow>       </munder>       <mfrac>        <mrow>         <mi>E</mi>         <mo>[</mo>         <msub>          <mi>M</mi>          <mn>0</mn>         </msub>         <mo>]</mo>        </mrow>        <mi>m</mi>       </mfrac>      </mrow>      <mo>=</mo>      <msup>       <mi>e</mi>       <mrow>        <mo>-</mo>        <mi>&#x3bb;</mi>       </mrow>      </msup>     </mrow>     <mo>&#x2062;</mo>     <mspace linebreak="newline"/>     <mrow>      <mrow>       <munder>        <mi>lim</mi>        <mrow>         <mi>m</mi>         <mo>&#x2192;</mo>         <mi>&#x221e;</mi>        </mrow>       </munder>       <mfrac>        <mrow>         <mi>Var</mi>         <mo>[</mo>         <msub>          <mi>M</mi>          <mn>0</mn>         </msub>         <mo>]</mo>        </mrow>        <mrow>         <mi>E</mi>         <mo>[</mo>         <msub>          <mi>M</mi>          <mi>r</mi>         </msub>         <mo>]</mo>        </mrow>       </mfrac>      </mrow>      <mo>=</mo>      <mrow>       <mn>1</mn>       <mo>-</mo>       <mrow>        <msup>         <mi>e</mi>         <mrow>          <mo>-</mo>          <mi>&#x3bb;</mi>         </mrow>        </msup>        <mo>(</mo>        <mrow>         <mn>1</mn>         <mo>+</mo>         <mi>&#x3bb;</mi>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>3</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0060" num="0000">yielding reliable approximations (in the limit) of the expectation and variance of the number of empty urns (or the number of 0s in a Bloom filter array), which may be expressed as follows:</p><p id="p-0061" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>E</i>[<i>M</i><sub>0</sub>]&#x2dc;<i>me</i><sup>&#x2212;&#x3bb;</sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0062" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Var[<i>M</i><sub>0</sub>]&#x2dc;<i>me</i><sup>&#x2212;&#x3bb;</sup>(1&#x2212;<i>e</i><sup>&#x2212;&#x3bb;</sup>(1+&#x3bb;))&#x2003;&#x2003;Eq. 4<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0063" num="0057">Although &#x3bb; in the above theorem is defined as a limiting ratio, if the limit is treated as an equality (e.g., &#x3bb;=n/m) and the expected limiting value as an equality, then the value of n (the number of balls distributed into urns, which is analogous to the cardinality of users represented in a Bloom filter array) can be estimated using the observed count of M<sub>0 </sub>as an estimate of E[M<sub>0</sub>] as follows:</p><p id="p-0064" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mover accent="true">      <mi>n</mi>      <mi>&#x2c6;</mi>     </mover>     <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mi>m</mi>      </mrow>      <mo>&#x2062;</mo>      <mtext>  </mtext>      <mrow>       <mi>log</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mfrac>        <msub>         <mi>M</mi>         <mn>0</mn>        </msub>        <mi>m</mi>       </mfrac>       <mo>)</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>5</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0065" num="0000">where the circumflex accent on the {circumflex over (n)} is to indicate an estimate rather than the actual value of n.</p><p id="p-0066" num="0058">Inasmuch as M<sub>0 </sub>is a random variable, {circumflex over (n)} is also a random variable. Generally speaking, the expected value and variance of a function &#x192; of a random variable X (having a mean &#x3bc;<sub>x </sub>and variance &#x3c3;<sub>X</sub><sup>2</sup>), can be approximated using Taylor expansions, provided that &#x192; is sufficiently differentiable and that the moments of X are finite. The estimates for the expected value and variance may be expressed mathematically as follows:</p><p id="p-0067" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>E</mi>      <mo>[</mo>      <mrow>       <mi>f</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mi>X</mi>       <mo>)</mo>      </mrow>      <mo>]</mo>     </mrow>     <mo>&#x2248;</mo>     <mrow>      <mrow>       <mi>f</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <msub>        <mi>&#x3bc;</mi>        <mi>X</mi>       </msub>       <mo>)</mo>      </mrow>      <mo>+</mo>      <mrow>       <mfrac>        <mrow>         <msup>          <mi>f</mi>          <mo>&#x2033;</mo>         </msup>         <mo>(</mo>         <msub>          <mi>&#x3bc;</mi>          <mi>X</mi>         </msub>         <mo>)</mo>        </mrow>        <mn>2</mn>       </mfrac>       <mo>&#x2062;</mo>       <msubsup>        <mi>&#x3c3;</mi>        <mi>X</mi>        <mn>2</mn>       </msubsup>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>6</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00004-2" num="00004.2"><math overflow="scroll"> <mrow>  <mrow>   <mrow>    <mi>Var</mi>    <mo>[</mo>    <mrow>     <mi>f</mi>     <mo>&#x2061;</mo>     <mo>(</mo>     <mi>X</mi>     <mo>)</mo>    </mrow>    <mo>]</mo>   </mrow>   <mo>&#x2248;</mo>   <mrow>    <msup>     <mrow>      <mo>(</mo>      <mrow>       <msup>        <mi>f</mi>        <mo>&#x2032;</mo>       </msup>       <mo>(</mo>       <mrow>        <mi>E</mi>        <mo>[</mo>        <mi>X</mi>        <mo>]</mo>       </mrow>       <mo>)</mo>      </mrow>      <mo>)</mo>     </mrow>     <mn>2</mn>    </msup>    <mo>&#x2062;</mo>    <mi>var</mi>    <mo>&#x2062;</mo>    <mrow>     <mo>{</mo>     <mi>X</mi>     <mo>}</mo>    </mrow>   </mrow>  </mrow>  <mo>=</mo>  <mrow>   <msup>    <mrow>     <mo>(</mo>     <mrow>      <msup>       <mi>f</mi>       <mo>&#x2032;</mo>      </msup>      <mo>(</mo>      <msub>       <mi>&#x3bc;</mi>       <mi>X</mi>      </msub>      <mo>)</mo>     </mrow>     <mo>)</mo>    </mrow>    <mn>2</mn>   </msup>   <mo>&#x2062;</mo>   <msubsup>    <mi>&#x3c3;</mi>    <mi>X</mi>    <mn>2</mn>   </msubsup>  </mrow> </mrow></math></maths></p><p id="p-0068" num="0059">The above theorem can be applied to estimate the expected value and variance of the cardinality {circumflex over (n)} in which case X=M<sub>0 </sub>and &#x192;(X) is defined as</p><p id="p-0069" num="0000"><maths id="MATH-US-00005" num="00005"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>f</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mi>X</mi>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mi>m</mi>      </mrow>      <mo>&#x2062;</mo>      <mtext>  </mtext>      <mrow>       <mi>log</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mfrac>        <mi>X</mi>        <mi>m</mi>       </mfrac>       <mo>)</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>7</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0070" num="0000">Specifically, inserting Equation 7 into the theorem defined in Equation 6 and simplifying yields</p><p id="p-0071" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>E</i>[<i>{circumflex over (n)}</i>]&#x2248;<i>n+</i>&#xbd;(<i>e</i><sup>&#x3bb;</sup>&#x2212;&#x3bb;&#x2212;1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0072" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Var[<i>{circumflex over (n)}</i>]&#x2248;<i>m</i>(<i>e</i><sup>&#x3bb;</sup>&#x2212;&#x3bb;&#x2212;1)&#x2003;&#x2003;Eq. 8<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0073" num="0000">Equation 8 shows that the formula for the estimate of n is almost unbiased because the second expression is O(&#x3bb;<sup>2</sup>) by series expansion, with &#x3bb;=n/m.</p><p id="p-0074" num="0060">Applied to cardinality estimations, the above equations assume that each user is represented only once in a Bloom filter array (e.g., each user was allocated using only one hash function). If multiple hash functions are used to allocate users, the user will be represented the same number of times in the Bloom filter array. In such situations, n in the above equations is a multiple of another number, n=kn&#x2032;, where k is the number of hash functions and n&#x2032; is the actual number of items allocated to the Bloom filter array (e.g., the unique audience size of users represented in the array). To estimate n&#x2032;, Equation 7 can be updated to divide by k, yielding the function</p><p id="p-0075" num="0000"><maths id="MATH-US-00006" num="00006"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>f</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mi>X</mi>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>log</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mfrac>        <mi>X</mi>        <mi>m</mi>       </mfrac>       <mo>)</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>9</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0076" num="0000">which is an estimator of n&#x2032;</p><p id="p-0077" num="0000"><maths id="MATH-US-00007" num="00007"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>          <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>log</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mfrac>        <mi>X</mi>        <mi>m</mi>       </mfrac>       <mo>)</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>10</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0078" num="0000">with expected value and variance of</p><p id="p-0079" num="0000"><maths id="MATH-US-00008" num="00008"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>E</mi>      <mo>[</mo>            <mo>]</mo>     </mrow>     <mo>&#x2248;</mo>     <mrow>      <msup>       <mi>n</mi>       <mo>&#x2032;</mo>      </msup>      <mo>+</mo>      <mrow>       <mfrac>        <mn>1</mn>        <mrow>         <mn>2</mn>         <mo>&#x2062;</mo>         <mi>k</mi>        </mrow>       </mfrac>       <mo>&#x2062;</mo>       <mrow>        <mo>(</mo>        <mrow>         <msup>          <mi>e</mi>          <mi>&#x3bb;</mi>         </msup>         <mo>-</mo>         <mi>&#x3bb;</mi>         <mo>-</mo>         <mn>1</mn>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>11</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00008-2" num="00008.2"><math overflow="scroll"> <mrow>  <mrow>   <mi>Var</mi>   <mo>[</mo>      <mo>]</mo>  </mrow>  <mo>&#x2248;</mo>  <mrow>   <mfrac>    <mi>m</mi>    <msup>     <mi>k</mi>     <mn>2</mn>    </msup>   </mfrac>   <mo>&#x2062;</mo>   <mrow>    <mo>(</mo>    <mrow>     <msup>      <mi>e</mi>      <mi>&#x3bb;</mi>     </msup>     <mo>-</mo>     <mi>&#x3bb;</mi>     <mo>-</mo>     <mn>1</mn>    </mrow>    <mo>)</mo>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0080" num="0000">where &#x3bb;=kn&#x2032;/m and the term inside the parenthesis of the expected value is O(&#x3bb;<sup>2</sup>).</p><p id="p-0081" num="0061">Notably, the estimation defined in Equation 10 is based on defining the random variable X as corresponding to the number of elements in a Bloom filter array with a 0 after all allocations (e.g., the number of elements that were not allocated any users). The estimation could alternatively be implemented by defining the random variable X as corresponding to the number of elements in the Bloom filter array with a value of 1 (e.g., indicating at least one user was allocated to the element). In particular, if X<sub>0 </sub>is the number of elements with a value of 0 and X<sub>1</sub>=m&#x2212;X<sub>0</sub>, the estimation can be rewritten as follows:</p><p id="p-0082" num="0000"><maths id="MATH-US-00009" num="00009"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>          <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>log</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mn>1</mn>        <mo>-</mo>        <mfrac>         <msub>          <mi>X</mi>          <mn>1</mn>         </msub>         <mi>m</mi>        </mfrac>       </mrow>       <mo>)</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>12</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0083" num="0000">While Equation 12 could be used to estimate the cardinality of a Bloom filter array, examples disclosed herein are specifically described with respect to the estimation for n&#x2032; as defined in Equation 10.</p><p id="p-0084" num="0062">The bias term</p><p id="p-0085" num="0000"><maths id="MATH-US-00010" num="00010"><math overflow="scroll"> <mrow>  <mfrac>   <mn>1</mn>   <mrow>    <mn>2</mn>    <mo>&#x2062;</mo>    <mi>k</mi>   </mrow>  </mfrac>  <mo>&#x2062;</mo>  <mrow>   <mo>(</mo>   <mrow>    <msup>     <mi>e</mi>     <mi>&#x3bb;</mi>    </msup>    <mo>-</mo>    <mi>&#x3bb;</mi>    <mo>-</mo>    <mn>1</mn>   </mrow>   <mo>)</mo>  </mrow> </mrow></math></maths></p><p id="p-0086" num="0000">in Equation 11 can be rewritten with the portion inside the parenthesis as e<sup>&#x3bb;</sup>&#x2212;(1+&#x3bb;), which is identical in form to the error term between the function e<sup>&#x3bb;</sup> and its Taylor series expansion up to the linear term. The bounds of such an expression is given by the Lagrange remainder theorem, which states that given a Taylor series</p><p id="p-0087" num="0000"><maths id="MATH-US-00011" num="00011"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>f</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mi>x</mi>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mi>f</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <msub>        <mi>x</mi>        <mn>0</mn>       </msub>       <mo>)</mo>      </mrow>      <mo>+</mo>      <mrow>       <mfrac>        <mrow>         <msup>          <mi>f</mi>          <mo>&#x2032;</mo>         </msup>         <mo>(</mo>         <msub>          <mi>x</mi>          <mn>0</mn>         </msub>         <mo>)</mo>        </mrow>        <mrow>         <mn>1</mn>         <mo>!</mo>        </mrow>       </mfrac>       <mo>&#x2062;</mo>       <mrow>        <mo>(</mo>        <mrow>         <mi>x</mi>         <mo>-</mo>         <msub>          <mi>x</mi>          <mn>0</mn>         </msub>        </mrow>        <mo>)</mo>       </mrow>      </mrow>      <mo>+</mo>      <mrow>       <mfrac>        <mrow>         <msup>          <mi>f</mi>          <mo>&#x2033;</mo>         </msup>         <mo>(</mo>         <msub>          <mi>x</mi>          <mn>0</mn>         </msub>         <mo>)</mo>        </mrow>        <mrow>         <mn>2</mn>         <mo>!</mo>        </mrow>       </mfrac>       <mo>&#x2062;</mo>       <msup>        <mrow>         <mo>(</mo>         <mrow>          <mi>x</mi>          <mo>-</mo>          <msub>           <mi>x</mi>           <mn>0</mn>          </msub>         </mrow>         <mo>)</mo>        </mrow>        <mn>2</mn>       </msup>      </mrow>      <mo>+</mo>      <mo>&#x2026;</mo>      <mo>+</mo>      <mrow>       <mfrac>        <mrow>         <msup>          <mi>f</mi>          <mrow>           <mo>(</mo>           <mi>n</mi>           <mo>)</mo>          </mrow>         </msup>         <mo>(</mo>         <msub>          <mi>x</mi>          <mn>0</mn>         </msub>         <mo>)</mo>        </mrow>        <mrow>         <mi>n</mi>         <mo>!</mo>        </mrow>       </mfrac>       <mo>&#x2062;</mo>       <msup>        <mrow>         <mo>(</mo>         <mrow>          <mi>x</mi>          <mo>-</mo>          <msub>           <mi>x</mi>           <mn>0</mn>          </msub>         </mrow>         <mo>)</mo>        </mrow>        <mi>n</mi>       </msup>      </mrow>      <mo>+</mo>      <msub>       <mi>R</mi>       <mi>n</mi>      </msub>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>13</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0088" num="0000">the error R<sub>n </sub>after n terms can be rewritten using the mean-value theorem as</p><p id="p-0089" num="0000"><maths id="MATH-US-00012" num="00012"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <msub>      <mi>R</mi>      <mi>n</mi>     </msub>     <mo>=</mo>     <mrow>      <mfrac>       <mrow>        <msup>         <mi>f</mi>         <mrow>          <mo>(</mo>          <mrow>           <mi>n</mi>           <mo>+</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </msup>        <mo>(</mo>        <msup>         <mi>x</mi>         <mo>&#x2032;</mo>        </msup>        <mo>)</mo>       </mrow>       <mrow>        <mrow>         <mo>(</mo>         <mrow>          <mi>n</mi>          <mo>+</mo>          <mn>1</mn>         </mrow>         <mo>)</mo>        </mrow>        <mo>!</mo>       </mrow>      </mfrac>      <mo>&#x2062;</mo>      <msup>       <mrow>        <mo>(</mo>        <mrow>         <mi>x</mi>         <mo>-</mo>         <msub>          <mi>x</mi>          <mn>0</mn>         </msub>        </mrow>        <mo>)</mo>       </mrow>       <mrow>        <mi>n</mi>        <mo>+</mo>        <mn>1</mn>       </mrow>      </msup>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>14</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0090" num="0000">for some x&#x2032; &#x2208; {x<sub>0</sub>, x}.</p><p id="p-0091" num="0063">Applying &#x192;(&#x3bb;)=e<sup>&#x3bb;</sup> and taking the series about &#x3bb;<sub>0</sub>=0 with n=1 and keeping the remainder on the right hand side yields</p><p id="p-0092" num="0000"><maths id="MATH-US-00013" num="00013"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <msup>       <mi>e</mi>       <mi>&#x3bb;</mi>      </msup>      <mo>-</mo>      <mrow>       <mo>(</mo>       <mrow>        <mn>1</mn>        <mo>+</mo>        <mi>&#x3bb;</mi>       </mrow>       <mo>)</mo>      </mrow>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mfrac>        <msup>         <mi>&#x3bb;</mi>         <mn>2</mn>        </msup>        <mn>2</mn>       </mfrac>       <mo>&#x2062;</mo>       <msup>        <mi>e</mi>        <mi>&#x3bb;&#x2032;</mi>       </msup>       <mo>&#x2062;</mo>       <mtext>   </mtext>       <mi>for</mi>       <mo>&#x2062;</mo>       <mtext>   </mtext>       <mi>some</mi>       <mo>&#x2062;</mo>       <mtext>   </mtext>       <msup>        <mi>&#x3bb;</mi>        <mo>&#x2032;</mo>       </msup>      </mrow>      <mo>&#x2208;</mo>      <mrow>       <mo>{</mo>       <mrow>        <mn>0</mn>        <mo>,</mo>        <mi>&#x3bb;</mi>       </mrow>       <mo>}</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>15</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0093" num="0064">Although &#x3bb;&#x2032; is unknown, the right hand side of Equation 15 is monotonically increasing with &#x3bb;&#x2032; such that the error term reaches a maximum when &#x3bb;&#x2032;=&#x3bb;. This demonstrates that the bias for <img id="CUSTOM-CHARACTER-00001" he="3.22mm" wi="2.79mm" file="US20230004997A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/> is bounded from above by some value and bounded from below at zero because all terms within the bias expression are positive.</p><p id="p-0094" num="0000"><maths id="MATH-US-00014" num="00014"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mn>0</mn>     <mo>&#x2264;</mo>     <mrow>      <mrow>       <mi>E</mi>       <mo>[</mo>              <mo>]</mo>      </mrow>      <mo>-</mo>      <msup>       <mi>n</mi>       <mo>&#x2032;</mo>      </msup>     </mrow>     <mo>&#x2264;</mo>     <mrow>      <mrow>       <mo>(</mo>       <mfrac>        <msup>         <mi>&#x3bb;</mi>         <mn>2</mn>        </msup>        <mrow>         <mn>4</mn>         <mo>&#x2062;</mo>         <mi>k</mi>        </mrow>       </mfrac>       <mo>)</mo>      </mrow>      <mo>&#x2062;</mo>      <msup>       <mi>e</mi>       <mi>&#x3bb;</mi>      </msup>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>16</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0095" num="0000">Likewise, if the bounded criteria determined above that</p><p id="p-0096" num="0000"><maths id="MATH-US-00015" num="00015"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <msup>       <mi>e</mi>       <mi>&#x3bb;</mi>      </msup>      <mo>-</mo>      <mi>&#x3bb;</mi>      <mo>-</mo>      <mn>1</mn>     </mrow>     <mo>&#x2264;</mo>     <mrow>      <mfrac>       <msup>        <mi>&#x3bb;</mi>        <mn>2</mn>       </msup>       <mn>2</mn>      </mfrac>      <mo>&#x2062;</mo>      <msup>       <mi>e</mi>       <mi>&#x3bb;</mi>      </msup>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>17</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0097" num="0000">is used, the expression for the variance is also bounded from above</p><p id="p-0098" num="0000"><maths id="MATH-US-00016" num="00016"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>Var</mi>      <mo>[</mo>            <mo>]</mo>     </mrow>     <mo>&#x2264;</mo>     <mrow>      <mfrac>       <mi>m</mi>       <msup>        <mi>k</mi>        <mn>2</mn>       </msup>      </mfrac>      <mo>&#x2062;</mo>      <mrow>       <mo>(</mo>       <mrow>        <mfrac>         <msup>          <mi>&#x3bb;</mi>          <mn>2</mn>         </msup>         <mn>2</mn>        </mfrac>        <mo>&#x2062;</mo>        <msup>         <mi>e</mi>         <mi>&#x3bb;</mi>        </msup>       </mrow>       <mo>)</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>18</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0099" num="0065">Unless extreme values for &#x3bb; are used, the expected value of a cardinality estimate can be assumed to be unbiased because any bias will be negligible. For example, assume that k=4 hash functions are used to allocate n&#x2032;=10,000 users across a Bloom filter array having a length of m=20,000. Thus, in this example, &#x3bb;=kn&#x2032;/m=2 and the maximum absolute bias in the cardinality estimate of <img id="CUSTOM-CHARACTER-00002" he="3.22mm" wi="2.79mm" file="US20230004997A1-20230105-P00002.TIF" alt="custom-character" img-content="character" img-format="tif"/> is 1.85 out of the true cardinality of n&#x2032;=10,000. This yields a maximum relative bias of only 0.2%. Although there is some bias, the maximum is small enough to be negligible for all intents and purposes such that the methodology can be used as if unbiased. As a result, it is possible to define a length m for a Bloom filter array that can satisfy an estimate for the cardinality of users represented by the Bloom filter array for a given confidence level and relative error. More particularly, let the relative error be r and the confidence level be defined as 1&#x2212;&#x3b1;. Achieving a particular confidence interval requires</p><p id="p-0100" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>Pr</i>((1&#x2212;<i>r</i>)<i>n</i>&#x2032;&#x2264;<img id="CUSTOM-CHARACTER-00003" he="3.22mm" wi="2.79mm" file="US20230004997A1-20230105-P00002.TIF" alt="custom-character" img-content="character" img-format="tif"/>&#x2264;(1+<i>r</i>)<i>n</i>&#x2032;)&#x2265;1&#x2212;&#x3b1;&#x2003;&#x2003;Eq. 19<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0101" num="0000">which is equivalent to</p><p id="p-0102" num="0000"><maths id="MATH-US-00017" num="00017"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mfrac>      <msup>       <mi>n</mi>       <mo>&#x2032;</mo>      </msup>      <msqrt>       <mrow>        <mi>Var</mi>        <mo>[</mo>                <mo>]</mo>       </mrow>      </msqrt>     </mfrac>     <mo>&#x2265;</mo>     <mfrac>      <mi>z</mi>      <mi>r</mi>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>20</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0103" num="0000">where z is the two-sided z-score for the 1&#x2212;&#x3b1; confidence level (e.g., z=1.96 for 1&#x2212;&#x3b1;=0.95). Depending on criteria to be satisfied and variables to be solved, Equation 20 gives the inequality for which <img id="CUSTOM-CHARACTER-00004" he="3.22mm" wi="2.79mm" file="US20230004997A1-20230105-P00002.TIF" alt="custom-character" img-content="character" img-format="tif"/> can be estimated with a specified confidence and relative error.</p><p id="p-0104" num="0066">As a specific example, assume that the true cardinality of n&#x2032;=10,000 allocated to a Bloom filter array using k=4 hash functions needs to be estimated with 95% confidence (e.g., z=1.96) with a relative error of +/&#x2212;5%. In this example, the question is what is the minimum length m for the Bloom filter, to satisfy these conditions? Inasmuch as &#x3bb; is a function of m, the expression</p><p id="p-0105" num="0000"><maths id="MATH-US-00018" num="00018"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mfrac>       <msup>        <mi>n</mi>        <mo>&#x2032;</mo>       </msup>       <msqrt>        <mrow>         <mfrac>          <mi>m</mi>          <msup>           <mi>k</mi>           <mn>2</mn>          </msup>         </mfrac>         <mo>&#x2062;</mo>         <mrow>          <mo>(</mo>          <mrow>           <msup>            <mi>e</mi>            <mi>&#x3bb;</mi>           </msup>           <mo>-</mo>           <mi>&#x3bb;</mi>           <mo>-</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </mrow>       </msqrt>      </mfrac>      <mo>&#x2265;</mo>      <mrow>       <mfrac>        <mi>z</mi>        <mi>r</mi>       </mfrac>       <mo>&#x2062;</mo>       <mtext>   </mtext>       <mi>with</mi>       <mo>&#x2062;</mo>       <mtext>   </mtext>       <mi>&#x3bb;</mi>      </mrow>     </mrow>     <mo>=</mo>     <mfrac>      <msup>       <mi>kn</mi>       <mo>&#x2032;</mo>      </msup>      <mi>m</mi>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>21</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0106" num="0000">must be solved numerically. In this example, the solution is m&#x2265;8,177. Thus, a Bloom filter array that would enable the 95% confidence for estimating a cardinality with a relative error of +/&#x2212;5%, where the true cardinality was 10,000, needs to have at least 8,177 elements. As mentioned above, there is often a tradeoff between having a longer Bloom filter array (to increase user privacy) and having a shorter Bloom filter array (to reduce saturation for more reliable statistics while also reducing memory space requirements). As outlined above, determining the particular length to use when striking a balance between these tradeoffs be facilitated by calculating minimum array lengths needed for particular relative errors at particular confidence intervals.</p><p id="p-0107" num="0067">Often, the particular length of a Bloom filter array is specified in advance. Accordingly, in some examples, the reverse calculations can be made to determine the limits of inference possible using the specified length of array. For example, assume the Bloom filter array is fixed at length m=10,000 and k=4 hash functions are used. The question becomes what is the maximum value for the cardinality estimation of <img id="CUSTOM-CHARACTER-00005" he="3.22mm" wi="2.79mm" file="US20230004997A1-20230105-P00002.TIF" alt="custom-character" img-content="character" img-format="tif"/> that would still fall within a 95% confidence interval (e.g., z=1.96) with a relative error of +/&#x2212;5%? To answer this question, Equation 20 needs to be numerically solved for n&#x2032;. In this example, the solution is n&#x2032;&#x2264;13,019. Thus, as long as there are no more than 13,019 users being allocated to the Bloom filter array (using k=4 hashes each), the array length of m=10,000 is sufficient to satisfy the 95% confidence with +/&#x2212;5% relative error.</p><p id="p-0108" num="0068">As mentioned above, allocating users uniformly across a discrete set of elements in a Bloom filter array of length m (as outlined above in connection with <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>5</b></figref>) and testing whether a particular element ends up with a 0 (no user allocations) or a 1 (at least one user allocation) is directly analogous to randomly distributing balls into urns and seeing if a particular urn is empty or not. Particularly, the cardinality of a Bloom filter array can be estimated based on the number of elements in the array having a value of 0 (Equation 10) or a value of 1 (Equation 12). Equation 10 is reproduced below in Equation 22 except that a subscript for the random variable X has been added to clarify the estimation is based on the number of elements having a value of 0.</p><p id="p-0109" num="0000"><maths id="MATH-US-00019" num="00019"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>          <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>log</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mfrac>        <msub>         <mi>X</mi>         <mn>0</mn>        </msub>        <mi>m</mi>       </mfrac>       <mo>)</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>22</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0110" num="0000">where n&#x2032; is the estimate of the number of items in the Bloom filter array (e.g., the cardinality), m is the length (e.g., size) of the array, and k is the number of hash functions used to allocation each item in the array.</p><p id="p-0111" num="0069">For two Bloom filter arrays (A, B) of length m, an estimate of their respective cardinalities or number of elements n(x) for Bloom filter array x, can be estimated as</p><p id="p-0112" num="0000"><maths id="MATH-US-00020" num="00020"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mrow>       <mi>n</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <msup>        <mi>A</mi>        <mo>&#x2032;</mo>       </msup>       <mo>)</mo>      </mrow>      <mo>=</mo>      <mrow>       <mrow>        <mo>-</mo>        <mrow>         <mo>(</mo>         <mfrac>          <mi>m</mi>          <mi>k</mi>         </mfrac>         <mo>)</mo>        </mrow>       </mrow>       <mo>&#x2062;</mo>       <mrow>        <mi>log</mi>        <mo>&#x2061;</mo>        <mo>(</mo>        <mrow>         <mn>1</mn>         <mo>-</mo>         <mfrac>          <mrow>           <mi>c</mi>           <mo>&#x2061;</mo>           <mo>(</mo>           <mi>A</mi>           <mo>)</mo>          </mrow>          <mi>m</mi>         </mfrac>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mrow>     <mo>&#x2062;</mo>     <mtext></mtext>     <mi>and</mi>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>23</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00020-2" num="00020.2"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>n</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <msup>       <mi>B</mi>       <mo>&#x2032;</mo>      </msup>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>log</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mn>1</mn>        <mo>-</mo>        <mfrac>         <mrow>          <mi>c</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <mi>B</mi>          <mo>)</mo>         </mrow>         <mi>m</mi>        </mfrac>       </mrow>       <mo>)</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>24</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0113" num="0000">where c(A) and c(B) are counts of the number of elements set to 1 in the two respective Bloom filter arrays. Further, the size or cardinality of the union of the two Bloom filter arrays can be estimated as</p><p id="p-0114" num="0000"><maths id="MATH-US-00021" num="00021"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>n</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mrow>       <msup>        <mi>A</mi>        <mo>&#x2032;</mo>       </msup>       <mo>&#x22c3;</mo>       <msup>        <mi>B</mi>        <mo>&#x2032;</mo>       </msup>      </mrow>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>ln</mi>       <mo>[</mo>       <mrow>        <mn>1</mn>        <mo>-</mo>        <mfrac>         <mrow>          <mi>c</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <mrow>           <mi>A</mi>           <mo>&#x22c3;</mo>           <mi>B</mi>          </mrow>          <mo>)</mo>         </mrow>         <mi>m</mi>        </mfrac>       </mrow>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>25</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0115" num="0000">where c(A&#x222a;B) is a count of the number of elements set to 1 in a bitwise union of the two Bloom filter arrays. That is, c(A&#x222a;B) is a count of the number of elements at different indices of the Bloom filter arrays in which the corresponding element of at least one of the arrays is set to 1. Finally, the intersection of the two arrays (e.g., corresponding to the number of unique users represented in both arrays) can be estimated using the inclusion-exclusion principle by summing the cardinalities of each array individually (defined in Equations 23 and 24) and subtracting the cardinality of the union of the arrays (defined in Equation 25):</p><p id="p-0116" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i>(<i>A&#x2032;&#x2229;B</i>&#x2032;)=<i>n</i>(<i>A</i>&#x2032;)+<i>n</i>(<i>B</i>&#x2032;)&#x2212;<i>n</i>(<i>A&#x2032;&#x222a;B</i>&#x2032;)&#x2003;&#x2003;Eq. 26<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0117" num="0070">By defining c<sub>0</sub>(A), c<sub>0</sub>(B), and c<sub>0</sub>(A U B) as the number of elements set to 0 (rather than 1 as outlined above), Equations 23-25 can be simplified as follows:</p><p id="p-0118" num="0000"><maths id="MATH-US-00022" num="00022"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>n</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <msup>       <mi>A</mi>       <mo>&#x2032;</mo>      </msup>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>ln</mi>       <mo>[</mo>       <mfrac>        <mrow>         <msub>          <mi>c</mi>          <mn>0</mn>         </msub>         <mo>(</mo>         <mi>A</mi>         <mo>)</mo>        </mrow>        <mi>m</mi>       </mfrac>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>27</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00022-2" num="00022.2"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>n</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <msup>       <mi>B</mi>       <mo>&#x2032;</mo>      </msup>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>ln</mi>       <mo>[</mo>       <mfrac>        <mrow>         <msub>          <mi>c</mi>          <mn>0</mn>         </msub>         <mo>(</mo>         <mi>B</mi>         <mo>)</mo>        </mrow>        <mi>m</mi>       </mfrac>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>28</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00022-3" num="00022.3"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>n</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mrow>       <msup>        <mi>A</mi>        <mo>&#x2032;</mo>       </msup>       <mo>&#x22c3;</mo>       <msup>        <mi>B</mi>        <mo>&#x2032;</mo>       </msup>      </mrow>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>ln</mi>       <mo>[</mo>       <mfrac>        <mrow>         <msub>          <mi>c</mi>          <mn>0</mn>         </msub>         <mo>(</mo>         <mrow>          <mi>A</mi>          <mo>&#x22c3;</mo>          <mi>B</mi>         </mrow>         <mo>)</mo>        </mrow>        <mi>m</mi>       </mfrac>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>29</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0119" num="0000">As can be seen, the argument within the logarithm corresponds to a ratio of the count of 0s in the array(s) to the length m of the arrays. Further, based on the property of logarithms that log(a)+log(b)=log(ab) and that log(a)&#x2212;log(b)=log (a/b), the individual ratios in the separate expressions of Equations 27-29 can be combined into a single argument for the intersection defined in Equation 26 that simplifies to:</p><p id="p-0120" num="0000"><maths id="MATH-US-00023" num="00023"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>n</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mrow>       <msup>        <mi>A</mi>        <mo>&#x2032;</mo>       </msup>       <mo>&#x2062;</mo>       <mi>&#x2229;</mi>       <mo>&#x2062;</mo>       <msup>        <mi>B</mi>        <mo>&#x2032;</mo>       </msup>      </mrow>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>ln</mi>       <mo>[</mo>       <mfrac>        <mrow>         <mrow>          <msub>           <mi>c</mi>           <mn>0</mn>          </msub>          <mo>(</mo>          <mi>A</mi>          <mo>)</mo>         </mrow>         <mo>&#x2062;</mo>         <mrow>          <msub>           <mi>c</mi>           <mn>0</mn>          </msub>          <mo>(</mo>          <mi>B</mi>          <mo>)</mo>         </mrow>        </mrow>        <mrow>         <msub>          <mi>mc</mi>          <mn>0</mn>         </msub>         <mo>(</mo>         <mrow>          <mi>A</mi>          <mo>&#x22c3;</mo>          <mi>B</mi>         </mrow>         <mo>)</mo>        </mrow>       </mfrac>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>30</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0121" num="0000">In particular, as can be seen in Equation 30, the individual ratios in the logarithms of Equations 27-29 that correspond to cardinalities added in the inclusion-exclusion expression of Equation 26 are directly incorporated (by multiplication) into the logarithm argument in Equation 30. By contrast, for cardinalities subtracted in the inclusion-exclusion expression of Equation 26, the inverse of the ratio in the corresponding logarithms of Equations 27-29 is included into the logarithm argument in Equation 30. Stated another way, the ratio is divided instead of multiplied when incorporated into the logarithm argument of Equation 30. It is because the ratio associated with Equation 29 is inverted when included in Equation 30 that the additional m terms cancel leaving only one m in the denominator.</p><p id="p-0122" num="0071">As the union operation on Bloom filter arrays is lossless in the sense that the resulting Bloom filter array is the same as the Bloom filter array generated from scratch using the union of the two sets. Therefore, by associativity and induction the union operation on Bloom filter arrays is lossless for any number of unions. As a result, the same formula for estimating cardinality for a single Bloom filter array can be applied to a Bloom filter array generated based on the union of two or more underlying Bloom filter arrays. That is, the estimation for the cardinality of the union of three Bloom filter arrays can be expressed as</p><p id="p-0123" num="0000"><maths id="MATH-US-00024" num="00024"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>n</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mrow>       <msup>        <mi>A</mi>        <mo>&#x2032;</mo>       </msup>       <mo>&#x22c3;</mo>       <msup>        <mi>B</mi>        <mo>&#x2032;</mo>       </msup>       <mo>&#x22c3;</mo>       <msup>        <mi>C</mi>        <mo>&#x2032;</mo>       </msup>      </mrow>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>ln</mi>       <mo>[</mo>       <mfrac>        <mrow>         <msub>          <mi>c</mi>          <mn>0</mn>         </msub>         <mo>(</mo>         <mrow>          <mi>A</mi>          <mo>&#x22c3;</mo>          <mi>B</mi>          <mo>&#x22c3;</mo>          <mi>C</mi>         </mrow>         <mo>)</mo>        </mrow>        <mi>m</mi>       </mfrac>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>31</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0124" num="0000">An estimation for the union of any number of Bloom filter arrays may be similarly defined. Further, by the properties of logarithms noted above and by the inclusion-exclusion principle, it can be seen that any cardinality estimate of an unconditional union or intersection can be expressed as</p><p id="p-0125" num="0000"><maths id="MATH-US-00025" num="00025"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>n</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mi>X</mi>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>ln</mi>       <mo>[</mo>       <mrow>        <mi>f</mi>        <mo>&#x2061;</mo>        <mo>(</mo>        <mrow>         <mo>{</mo>         <msub>          <mi>c</mi>          <mrow>           <msub>            <mi>i</mi>            <mn>1</mn>           </msub>           <mo>&#x2062;</mo>           <msub>            <mi>i</mi>            <mrow>             <mn>2</mn>             <mtext>   </mtext>            </mrow>           </msub>           <mo>&#x2062;</mo>           <mo>&#x2026;</mo>           <mtext>   </mtext>          </mrow>         </msub>         <mo>}</mo>        </mrow>        <mo>)</mo>       </mrow>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>  </mtext>     <mn>32</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0126" num="0000">where X represents any cardinality of interest, and &#x192;({c<sub>i</sub><sub><sub2>1</sub2></sub><sub>i</sub><sub><sub2>2 </sub2></sub>. . . }) is a function of counts of 0, as pairs, triplets, etc. across the Bloom filter arrays. For instance, if there are three Bloom filter arrays to be analyzed, any unconditional cardinality can be estimated as a function of the set</p><p id="p-0127" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>{<i>c</i><sub>1</sub><i>,c</i><sub>2</sub><i>,c</i><sub>3</sub><i>,c</i><sub>12</sub><i>,c</i><sub>13</sub><i>,c</i><sub>23</sub><i>,c</i><sub>123</sub>}&#x2003;&#x2003;Eq. 33<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0128" num="0000">where c<sub>i</sub><sub><sub2>1</sub2></sub><sub>i</sub><sub><sub2>2 </sub2></sub>. . . is the number of tuples in which all array elements corresponding to the same indices are set to 0 (e.g., the number of elements in a bitwise union of the relevant arrays that are set to 0). For example, c<sub>13 </sub>is the number of pairs across the first and third Bloom filter arrays for which both have a value of 0.</p><p id="p-0129" num="0072">Stated differently, any unconditional union or intersection of data (e.g., users or subscribers) represented in multiple Bloom filter arrays can be defined by a particular combination or set of mutually exclusive disjoint datasets associated with the data represented in the Bloom filter arrays. For three Bloom filter arrays (representative of three sets of users), there are seven mutually exclusive disjoint datasets. These are represented in the example Venn diagram <b>600</b> shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. As shown in the illustrated example, the data represented by three Bloom filter arrays <b>602</b>, <b>604</b>, <b>606</b> is represented by three circles labelled A, B, and C. As shown in the illustrated example, the first disjoint dataset <b>608</b> corresponds to users represented only in the first Bloom filter array <b>602</b> (and not in the other two arrays <b>604</b>, <b>606</b>); the second disjoint dataset <b>610</b> corresponds to users represented only in the second Bloom filter array <b>604</b> (and not in the other two arrays <b>602</b>, <b>606</b>); and the third disjoint dataset <b>612</b> corresponds to users represented only in the first Bloom filter array <b>602</b> (and not in the other two arrays <b>602</b>, <b>604</b>). Further, the fourth disjoint dataset <b>614</b> corresponds to users represented in the first and second Bloom filter arrays <b>602</b>, <b>604</b> but not the third array <b>606</b>; the fifth disjoint dataset <b>616</b> corresponds to users represented in the first and third Bloom filter arrays <b>602</b>, <b>606</b> but not the second array <b>604</b>; and the sixth disjoint dataset <b>618</b> corresponds to users represented in the second and third Bloom filter arrays <b>604</b>, <b>606</b> but not the first array <b>602</b>. Finally, the seventh disjoint dataset <b>620</b> corresponds to users represented in all three Bloom filter arrays <b>602</b>, <b>604</b>, <b>606</b>.</p><p id="p-0130" num="0073">By defining each of the mutually exclusive disjoint datasets <b>608</b>, <b>610</b>, <b>612</b>, <b>614</b>, <b>616</b>, <b>618</b>, <b>620</b>, any combination of unions and/or intersections can be specified. For example, the union of the first two Bloom filter arrays <b>602</b>, <b>604</b> corresponds to the first, second, fourth, fifth, sixth and seventh disjoint datasets <b>608</b>, <b>610</b>, <b>614</b>, <b>616</b>, <b>618</b>, <b>620</b> (e.g., all but the third disjoint dataset <b>612</b>). As another example, the intersection of the first two Bloom filter arrays <b>602</b>, <b>604</b> corresponds to the fourth and seventh disjoint datasets <b>614</b>, <b>620</b>. Other combinations not specifically a union or intersection may also be identified. For instance, a particular grouping of users of interest may be those users that in either the first Bloom filter array <b>602</b> or the second Bloom filter array <b>604</b>, but not the third Bloom filter array. Such a grouping of users corresponds to the first, second, and fourth disjoint datasets <b>608</b>, <b>610</b>, <b>614</b>.</p><p id="p-0131" num="0074">The cardinality or audience size of any one of the above example user groups and/or any other combination of the disjoint datasets can be estimated as a function of the set of counts noted in Equation 33. Furthermore, any combination of disjoint datasets for any other number of Bloom filter arrays (e.g., 4, 5, 6, etc.) may also be identified to define a particular user group of interest and the cardinality of the user group can be estimated based on a function of counts of 0s in the corresponding Bloom filter arrays.</p><p id="p-0132" num="0075">To generalize the notation, instead of using {A, B, C, . . . } for different Bloom filters, lets be the number of Bloom filter arrays, c<sub>i</sub><sub><sub2>1</sub2></sub><sub>i</sub><sub><sub2>2 </sub2></sub>. . . be the number of tuples in which the elements of all relevant arrays at corresponding indices are set to 0 (as defined above), A<sub>i</sub><sub><sub2>1</sub2></sub><sub>i</sub><sub><sub2>2 </sub2></sub>. . . be the cardinality of the intersection of arrays given by {i<sub>1</sub>, i<sub>2</sub>, . . . } (e.g., A<sub>12 </sub>is the number of unique users represented in both the first array and the second array), A<sup>i</sup><sup><sub2>1</sub2></sup><sup>i</sup><sup><sub2>2 </sub2></sup>. . . be the cardinality of the union of arrays given by {i<sub>1</sub>, i<sub>2</sub>, . . . } (e.g., A<sup>12 </sup>is the number of users represented in either the first array or the second array or both the first and second arrays), and n<sub>b</sub><sub><sub2>1</sub2></sub><sub>b</sub><sub><sub2>2 </sub2></sub>. . . b<sub>s </sub>where b<sub>i </sub>&#x2208; {0,1} is the disjoint set across the s Bloom filter arrays of the number of users that truly belong to Boolean values of 1 within the indices (e.g., n<sub>101 </sub>is the number of users represented in both the first and third arrays, only, and not in the second array (e.g., the fifth disjoint dataset <b>616</b> in the illustrated example of <figref idref="DRAWINGS">FIG. <b>6</b></figref>). Based on the above notational definitions, Equations 27-29 can be rewritten, respectively, as follows:</p><p id="p-0133" num="0000"><maths id="MATH-US-00026" num="00026"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>          <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>ln</mi>       <mo>[</mo>       <mfrac>        <msub>         <mi>c</mi>         <mn>1</mn>        </msub>        <mi>m</mi>       </mfrac>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>34</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00026-2" num="00026.2"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>          <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>ln</mi>       <mo>[</mo>       <mfrac>        <msub>         <mi>c</mi>         <mn>2</mn>        </msub>        <mi>m</mi>       </mfrac>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>35</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00026-3" num="00026.3"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>          <mo>=</mo>     <mrow>      <mrow>       <mo>-</mo>       <mrow>        <mo>(</mo>        <mfrac>         <mi>m</mi>         <mi>k</mi>        </mfrac>        <mo>)</mo>       </mrow>      </mrow>      <mo>&#x2062;</mo>      <mrow>       <mi>ln</mi>       <mo>[</mo>       <mfrac>        <msub>         <mi>c</mi>         <mrow>          <mn>1</mn>          <mo>&#x2062;</mo>          <mn>2</mn>         </mrow>        </msub>        <mi>m</mi>       </mfrac>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>36</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0134" num="0000">Similarly, the intersection defined in Equation 30 can be rewritten as follows:</p><p id="p-0135" num="0000"><maths id="MATH-US-00027" num="00027"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>          <mo>=</mo>     <mrow>      <mrow>              <mo>+</mo>              <mo>-</mo>             </mrow>      <mo>=</mo>      <mrow>       <mrow>        <mo>-</mo>        <mrow>         <mo>(</mo>         <mfrac>          <mi>m</mi>          <mi>k</mi>         </mfrac>         <mo>)</mo>        </mrow>       </mrow>       <mo>&#x2062;</mo>       <mrow>        <mi>ln</mi>        <mo>[</mo>        <mfrac>         <mrow>          <msub>           <mi>c</mi>           <mn>1</mn>          </msub>          <mo>&#x2062;</mo>          <msub>           <mi>c</mi>           <mn>2</mn>          </msub>         </mrow>         <mrow>          <mi>m</mi>          <mo>&#x2062;</mo>          <msub>           <mi>c</mi>           <mrow>            <mn>1</mn>            <mo>&#x2062;</mo>            <mn>2</mn>           </mrow>          </msub>         </mrow>        </mfrac>        <mo>]</mo>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>37</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0136" num="0076">The above notation can be used to define the cardinality estimates for any union and any intersection across any number of Bloom filter arrays. For instance, in the example of three Bloom filter arrays, the disjoint mutually exclusive cardinalities (n<sub>b</sub><sub><sub2>1</sub2></sub><sub>b</sub><sub><sub2>2 </sub2></sub>. . . b<sub>s</sub>) (e.g., corresponding to the disjoint datasets <b>608</b>, <b>610</b>, <b>612</b>, <b>614</b>, <b>616</b>, <b>618</b>, <b>620</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>) can be used to define the following identities for each different union:</p><p id="p-0137" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sup>1</sup><i>=n</i><sub>100</sub><i>+n</i><sub>101</sub><i>+n</i><sub>110</sub><i>+n</i><sub>111 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0138" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sup>2</sup><i>=n</i><sub>010</sub><i>+n</i><sub>011</sub><i>+n</i><sub>110</sub><i>+n</i><sub>111 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0139" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sup>3</sup><i>=n</i><sub>001</sub><i>+n</i><sub>011</sub><i>+n</i><sub>101</sub><i>+n</i><sub>111 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0140" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sup>12</sup><i>=n</i><sub>010</sub><i>+n</i><sub>011</sub><i>+n</i><sub>100</sub><i>+n</i><sub>101</sub><i>+n</i><sub>110</sub><i>+n</i><sub>111 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0141" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sup>13</sup><i>=n</i><sub>001</sub><i>+n</i><sub>011</sub><i>+n</i><sub>100</sub><i>+n</i><sub>101</sub><i>+n</i><sub>110</sub><i>+n</i><sub>111 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0142" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sup>23</sup><i>=n</i><sub>001</sub><i>+n</i><sub>010</sub><i>+n</i><sub>011</sub><i>+n</i><sub>101</sub><i>+n</i><sub>110</sub><i>+n</i><sub>111 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0143" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sup>123</sup><i>=n</i><sub>001</sub><i>+n</i><sub>010</sub><i>+n</i><sub>011</sub><i>+n</i><sub>100</sub><i>+n</i><sub>101</sub><i>+n</i><sub>110</sub><i>+n</i><sub>111</sub>&#x2003;&#x2003;Eq. 38<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0144" num="0000">Similarly, the disjoint mutually exclusive cardinalities (n<sub>b</sub><sub><sub2>1</sub2></sub><sub>b</sub><sub><sub2>2 </sub2></sub>. . . b<sub>s</sub>) can be used to define the following identities for each different intersection:</p><p id="p-0145" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>1</sub><i>=n</i><sub>100</sub><i>+n</i><sub>101</sub><i>+n</i><sub>110</sub><i>+n</i><sub>111 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0146" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>2</sub><i>=n</i><sub>010</sub><i>+n</i><sub>011</sub><i>+n</i><sub>110</sub><i>+n</i><sub>111 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0147" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>3</sub><i>=n</i><sub>001</sub><i>+n</i><sub>011</sub><i>+n</i><sub>101</sub><i>+n</i><sub>111 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0148" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>12</sub><i>=n</i><sub>110</sub><i>+n</i><sub>111 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0149" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>13</sub><i>=n</i><sub>101</sub><i>+n</i><sub>111 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0150" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>23</sub><i>=n</i><sub>011</sub><i>+n</i><sub>111 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0151" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>123</sub><i>=n</i><sub>111</sub>&#x2003;&#x2003;Eq.39<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0152" num="0077">As can be seen with reference to Equations 38 and 39, the union A<sup>j </sup>is equal to the intersection A<sub>j</sub>, which corresponds to the cardinality of the j dataset. Also, A<sup>123 </sup>represents the total union across all datasets (for s=3), whereas A<sub>123 </sub>represents the cardinality of the users who belong to all datasets together (e.g., the cardinality of users in the seventh disjoint dataset <b>620</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>).</p><p id="p-0153" num="0078">Equations 38 and 39 can be inverted inasmuch as the sets {A} and {n} are linear and full rank. Thus, given any expression using one notation, an equivalent expression can be given in the other notation. The linear transformation from the union sets {A<sup>j</sup>} to the disjoint cardinality set {n} is as follows:</p><p id="p-0154" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>001</sub><i>=A</i><sup>123</sup><i>=A</i><sup>12 </sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0155" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>010</sub><i>=A</i><sup>123</sup><i>&#x2212;A</i><sup>13 </sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0156" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>011</sub><i>=A</i><sup>12</sup><i>+A</i><sup>13</sup><i>&#x2212;A</i><sup>123</sup><i>&#x2212;A</i><sup>1 </sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0157" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>100</sub><i>=A</i><sup>123</sup><i>&#x2212;A</i><sup>23 </sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0158" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>101</sub><i>=A</i><sup>12</sup><i>+A</i><sup>23</sup><i>&#x2212;A</i><sup>123</sup><i>&#x2212;A</i><sup>2 </sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0159" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>110</sub><i>=A</i><sup>13</sup><i>+A</i><sup>23</sup><i>&#x2212;A</i><sup>123</sup><i>&#x2212;A</i><sup>3 </sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0160" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>111</sub><i>=A</i><sup>1</sup><i>+A</i><sup>2</sup><i>+A</i><sup>3</sup><i>&#x2212;A</i><sup>12</sup><i>&#x2212;A</i><sup>13</sup><i>&#x2212;A</i><sup>23</sup><i>+A</i><sup>123</sup>&#x2003;&#x2003;Eq. 40<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0161" num="0000">Similarly, the linear transformation from the intersection sets {A<sub>j</sub>} to the disjoint cardinality set {n} is as follows:</p><p id="p-0162" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>001</sub><i>=A</i><sub>3</sub><i>&#x2212;A</i><sub>13</sub><i>&#x2212;A</i><sub>23</sub><i>+A</i><sub>123 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0163" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>010</sub><i>=A</i><sub>2</sub><i>&#x2212;A</i><sub>11</sub><i>&#x2212;A</i><sub>23</sub><i>+A</i><sub>123 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0164" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>011</sub><i>=A</i><sub>23</sub><i>&#x2212;A</i><sub>123 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0165" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>100</sub><i>=A</i><sub>1</sub><i>&#x2212;A</i><sub>12</sub><i>&#x2212;A</i><sub>13</sub><i>+A</i><sub>123 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0166" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>101</sub><i>=A</i><sub>13</sub><i>&#x2212;A</i><sub>123 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0167" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>110</sub><i>=A</i><sub>12</sub><i>&#x2212;A</i><sub>123 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0168" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>111</sub><i>=A</i><sub>123</sub>&#x2003;&#x2003;Eq. 41<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0169" num="0079">The set {n} as a function of union cardinalities can be substituted into the definition of intersection cardinalities and algebraically simplified to define the intersection cardinalities as a function of the union cardinalities alone:</p><p id="p-0170" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>1</sub><i>=A</i><sup>1 </sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0171" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>2</sub><i>=A</i><sup>2 </sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0172" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>3</sub><i>=A</i><sup>3 </sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0173" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>12</sub><i>=A</i><sup>1</sup><i>+A</i><sup>2</sup><i>&#x2212;A</i><sup>12 </sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0174" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>13</sub><i>=A</i><sup>1</sup><i>+A</i><sup>3</sup><i>&#x2212;A</i><sup>13 </sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0175" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>23</sub><i>=A</i><sup>2</sup><i>+A</i><sup>3</sup><i>&#x2212;A</i><sup>23 </sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0176" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>123</sub><i>=A</i><sup>1</sup><i>+A</i><sup>2</sup><i>+A</i><sup>3</sup><i>&#x2212;A</i><sup>12</sup><i>&#x2212;A</i><sup>13</sup><i>&#x2212;A</i><sup>23</sup><i>+A</i><sup>123</sup>&#x2003;&#x2003;Eq. 42<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0177" num="0080">The relationships set forth in Equation 42 are also true in general (e.g., for any number of Bloom array filters) based on the principle of inclusion-exclusion. That is, any intersection and/or any combination of disjoint sets associated with any number of Bloom filter arrays can be defined by an inclusion-exclusion expression that adds (includes) and subtracts (excludes) different cardinalities of unions of the Bloom filter arrays (and/or the cardinalities of individual arrays by themselves).</p><p id="p-0178" num="0081">Inasmuch as the estimation for any particular union cardinality can be computed, as outlined above, it is possible to calculate the cardinality associated with any combination of unions, intersections, and/or more generally, any combination of disjoint datasets associated with any number of Bloom filter arrays. For instance,</p><p id="p-0179" num="0000"><maths id="MATH-US-00028" num="00028"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>          <mo>=</mo>     <mrow>      <mrow>              <mo>+</mo>              <mo>-</mo>             </mrow>      <mo>=</mo>      <mrow>       <mrow>        <mo>-</mo>        <mrow>         <mo>(</mo>         <mfrac>          <mi>m</mi>          <mi>k</mi>         </mfrac>         <mo>)</mo>        </mrow>       </mrow>       <mo>&#x2062;</mo>       <mrow>        <mi>ln</mi>        <mo>[</mo>        <mfrac>         <mrow>          <msub>           <mi>c</mi>           <mn>1</mn>          </msub>          <mo>&#x2062;</mo>          <msub>           <mi>c</mi>           <mn>3</mn>          </msub>         </mrow>         <mrow>          <mi>m</mi>          <mo>&#x2062;</mo>          <msub>           <mi>c</mi>           <mrow>            <mn>1</mn>            <mo>&#x2062;</mo>            <mn>3</mn>           </mrow>          </msub>         </mrow>        </mfrac>        <mo>]</mo>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>43</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><heading id="h-0005" level="2">Likewise,</heading><p id="p-0180" num="0082"><maths id="MATH-US-00029" num="00029"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>          <mo>=</mo>     <mrow>      <mrow>              <mo>+</mo>              <mo>-</mo>              <mo>-</mo>             </mrow>      <mo>=</mo>      <mrow>       <mrow>        <mo>-</mo>        <mrow>         <mo>(</mo>         <mfrac>          <mi>m</mi>          <mi>k</mi>         </mfrac>         <mo>)</mo>        </mrow>       </mrow>       <mo>&#x2062;</mo>       <mrow>        <mi>ln</mi>        <mo>[</mo>        <mfrac>         <mrow>          <msub>           <mi>c</mi>           <mrow>            <mn>1</mn>            <mo>&#x2062;</mo>            <mn>2</mn>           </mrow>          </msub>          <mo>&#x2062;</mo>          <msub>           <mi>c</mi>           <mrow>            <mn>1</mn>            <mo>&#x2062;</mo>            <mn>3</mn>           </mrow>          </msub>         </mrow>         <mrow>          <mi>m</mi>          <mo>&#x2062;</mo>          <msub>           <mi>c</mi>           <mn>1</mn>          </msub>          <mo>&#x2062;</mo>          <msub>           <mi>c</mi>           <mrow>            <mn>1</mn>            <mo>&#x2062;</mo>            <mn>3</mn>           </mrow>          </msub>         </mrow>        </mfrac>        <mo>]</mo>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>44</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0181" num="0000">Further, an example set of multiple disjoint cardinalities of interest may be the cardinality of all users represents in one and only one Bloom filter array, which may be estimated as follows:</p><p id="p-0182" num="0000"><maths id="MATH-US-00030" num="00030"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>            <mo>+</mo>            <mo>+</mo>           </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mrow>        <mn>3</mn>               </mrow>       <mo>-</mo>              <mo>-</mo>              <mo>-</mo>             </mrow>      <mo>=</mo>      <mrow>       <mrow>        <mo>-</mo>        <mrow>         <mo>(</mo>         <mfrac>          <mi>m</mi>          <mi>k</mi>         </mfrac>         <mo>)</mo>        </mrow>       </mrow>       <mo>&#x2062;</mo>       <mrow>        <mi>ln</mi>        <mo>[</mo>        <mfrac>         <msubsup>          <mi>c</mi>          <mrow>           <mn>1</mn>           <mo>&#x2062;</mo>           <mn>2</mn>           <mo>&#x2062;</mo>           <mn>3</mn>          </mrow>          <mn>3</mn>         </msubsup>         <mrow>          <msub>           <mi>c</mi>           <mrow>            <mn>1</mn>            <mo>&#x2062;</mo>            <mn>2</mn>           </mrow>          </msub>          <mo>&#x2062;</mo>          <msub>           <mi>c</mi>           <mrow>            <mn>1</mn>            <mo>&#x2062;</mo>            <mn>3</mn>           </mrow>          </msub>          <mo>&#x2062;</mo>          <msub>           <mi>c</mi>           <mrow>            <mn>2</mn>            <mo>&#x2062;</mo>            <mn>3</mn>           </mrow>          </msub>         </mrow>        </mfrac>        <mo>]</mo>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>  </mtext>     <mn>45</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0183" num="0083">The rule defining the cardinality estimates shown by way of example in Equations 43-45 is general by nature. Specifically, the coefficients A<sup>{x}</sup> for arbitrary {x} is the power of c<sub>{x}</sub>/m within the logarithm. Thus, if the coefficient A<sup>{x}</sup> is added in the inclusion-exclusion expression (e.g., right hand side of first line of Equation 45), the logarithm argument (e.g., in the second line of Equation 45) includes the ratio of c<sub>{x}</sub>/m, whereas if the coefficient A<sup>{x}</sup> is subtracted in the inclusion-exclusion expression the inverse of the ratio is included. Further, when a constant in front of the coefficient A<sup>{x}</sup> is other than one, the ratio (or its inverse) includes an exponent to the power of the constant. In most cases, there is a normalization m that remains. However, in some instances, as represented in Equation 45, the normalization cancels out based on the number of ratios and inverse ratios included in the logarithm argument.</p><p id="p-0184" num="0084">While the above equations define the relationships for three Bloom filter arrays, the equations may be generalized for any number of Bloom array filters. Let M<sup>{1}</sup> be the matrix that transforms the disjoint sets into union cardinalities:</p><p id="p-0185" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>[<i>A</i><sup>&#x2022;</sup>]=[<i>M</i><sup>{1}</sup>][<i>n</i><sub>&#x2022;</sub>]&#x2003;&#x2003;Eq. 46<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0186" num="0000">where the bullet symbol (&#x2022;) represents the entire collection of sets across all Bloom filter arrays (e.g., for 3 arrays the vector of n, would be a column vector of length <b>7</b> corresponding to the seven disjoint datasets <b>608</b>, <b>610</b>, <b>612</b>, <b>614</b>, <b>616</b>, <b>618</b>, <b>620</b> represented in <figref idref="DRAWINGS">FIG. <b>6</b></figref>). Likewise, let M<sub>{1}</sub> be similarly defined for the intersections:</p><p id="p-0187" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>[<i>A</i><sub>&#x2022;</sub>]=[<i>M</i><sub>{1}</sub>][<i>n</i><sub>&#x2022;</sub>]&#x2003;&#x2003;Eq. 47<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0188" num="0000">The matrices defined in Equations 46 and 47 are relatively easy to construct, even for a relatively large number of Bloom filter arrays.</p><p id="p-0189" num="0085">Let F be defined as a row vector that yields a linear combination of a column vector. More particularly, F is a row vector that identifies the particular combination of the disjoint sets in the column vector n<sub>&#x2022;</sub> that correspond to the particular user group of interest for which the cardinality or audience size is to be estimated. As estimates of A<sup>&#x2022;</sup> are known for Bloom filter arrays (based on the equations outlined above), all expressions are defined in terms of A<sup>&#x2022;</sup> on the right hand side. Thus, for example, Equation 46 may be rewritten as</p><p id="p-0190" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>[<i>n</i><sub>&#x2022;</sub>]=[<i>M</i><sup>{1}</sup>]<sup>&#x2212;1</sup>[<i>A</i><sub>&#x2022;</sub>]&#x2003;&#x2003;Eq. 48<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0191" num="0000">and which can be modified with a linear combination:</p><p id="p-0192" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>[<i>F</i>][<i>n</i><sub>&#x2022;</sub>]=[<i>F</i>][<i>M</i><sup>{1}</sup>]<sup>&#x2212;1</sup>[<i>A</i><sub>&#x2022;</sub>]&#x2003;&#x2003;Eq. 49<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0193" num="0000">Additionally or alternatively, the intersections can be solved for and defined with respect to A<sup>&#x2022;</sup>:</p><p id="p-0194" num="0000"><maths id="MATH-US-00031" num="00031"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mo>[</mo>      <msub>       <mi>A</mi>       <mo>&#x2022;</mo>      </msub>      <mo>]</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mrow>        <mo>[</mo>        <msub>         <mi>M</mi>         <mn>1</mn>        </msub>        <mo>]</mo>       </mrow>       <mo>[</mo>       <msub>        <mi>n</mi>        <mo>&#x2022;</mo>       </msub>       <mo>]</mo>      </mrow>      <mo>=</mo>      <mrow>       <msup>        <mrow>         <mrow>          <mo>[</mo>          <msub>           <mi>M</mi>           <mrow>            <mo>{</mo>            <mn>1</mn>            <mo>}</mo>           </mrow>          </msub>          <mo>]</mo>         </mrow>         <mo>[</mo>         <msup>          <mi>M</mi>          <mrow>           <mo>{</mo>           <mn>1</mn>           <mo>}</mo>          </mrow>         </msup>         <mo>]</mo>        </mrow>        <mrow>         <mo>-</mo>         <mn>1</mn>        </mrow>       </msup>       <mo>[</mo>       <msup>        <mi>A</mi>        <mo>&#x2022;</mo>       </msup>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>50</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0195" num="0000">Further, the intersections can also be modified with a linear combination:</p><p id="p-0196" num="0000"><maths id="MATH-US-00032" num="00032"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mrow>       <mo>[</mo>       <mi>F</mi>       <mo>]</mo>      </mrow>      <mo>[</mo>      <msub>       <mi>A</mi>       <mo>&#x2022;</mo>      </msub>      <mo>]</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mrow>        <mrow>         <mo>[</mo>         <mi>F</mi>         <mo>]</mo>        </mrow>        <mo>[</mo>        <msub>         <mi>M</mi>         <mn>1</mn>        </msub>        <mo>]</mo>       </mrow>       <mo>[</mo>       <msub>        <mi>n</mi>        <mo>&#x2022;</mo>       </msub>       <mo>]</mo>      </mrow>      <mo>=</mo>      <mrow>       <msup>        <mrow>         <mrow>          <mrow>           <mo>[</mo>           <mi>F</mi>           <mo>]</mo>          </mrow>          <mo>[</mo>          <msub>           <mi>M</mi>           <mrow>            <mo>{</mo>            <mn>1</mn>            <mo>}</mo>           </mrow>          </msub>          <mo>]</mo>         </mrow>         <mo>[</mo>         <msup>          <mi>M</mi>          <mrow>           <mo>{</mo>           <mn>1</mn>           <mo>}</mo>          </mrow>         </msup>         <mo>]</mo>        </mrow>        <mrow>         <mo>-</mo>         <mn>1</mn>        </mrow>       </msup>       <mo>[</mo>       <msup>        <mi>A</mi>        <mo>&#x2022;</mo>       </msup>       <mo>]</mo>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>51</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0197" num="0086">As noted above, for any linear expression, the coefficients A<sup>{x}</sup> for arbitrary {x} is the power of c<sub>{x}</sub>/m within the logarithm. This is algebraically equal to evaluating the estimate for all terms and possibly using complicated inclusion-exclusion expressions to provide the linear expressions individually.</p><p id="p-0198" num="0087"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram of an example database proprietor apparatus <b>700</b>. The example database proprietor apparatus <b>700</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref> may correspond to any one of the database proprietors <b>106</b><i>a</i>-<i>b </i>of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. As shown in the illustrated example, the database proprietor apparatus <b>700</b> includes an example user database <b>702</b>, an example communications interface circuitry <b>704</b>, an example Bloom filter parameter database <b>706</b>, an example user data analysis circuitry <b>708</b>, and an example Bloom filter array generation circuitry <b>710</b>.</p><p id="p-0199" num="0088">The example user database <b>702</b> stores user data associated with users (e.g., subscribers) registered with the database proprietor apparatus <b>700</b>. In some examples, the user data includes a user identifier corresponding to any suitable PII. The example communications interface circuitry <b>704</b> enables the database proprietor apparatus <b>700</b> to communicate with the AME <b>102</b>.</p><p id="p-0200" num="0089">The example Bloom filter parameter database <b>706</b> stores the Bloom filter parameters used to define and/or generate one or more Bloom filter arrays representative of the users in the user database <b>702</b>. In some examples, some or all of the Bloom filter parameters are determined and/or received from the AME <b>102</b> (e.g., via the communications interface circuitry <b>704</b>). In some examples, some or all of the Bloom filter parameters are determined by one or more database proprietors <b>106</b><i>a</i>-<i>b</i>. In some examples, the Bloom filter parameters include one or more of a length (e.g., number of bits or elements) in the Bloom filter array, the identification of one or more hash function(s) used to map users to different elements of the Bloom filter array, and/or the distribution of outputs of the hash function(s) across the different bits of the Bloom filter array and the corresponding mapping of hash function outputs to the different elements in the array (e.g., parameters defining the number of different hash function outputs that map to each element and the particular outputs that map to each particular element). Regardless of how the Bloom filter parameters are set or determined (e.g., whether by the AME <b>102</b> and/or the database proprietors <b>106</b><i>a</i>-<i>b</i>), the Bloom filter array length, hash function(s), and corresponding hash function output mapping are to be agreed upon by all database proprietors <b>106</b><i>a</i>-<i>b. </i></p><p id="p-0201" num="0090">The example user data analysis circuitry <b>708</b> analyzes user data in the user database <b>702</b> to identify users that accessed media for which the AME <b>102</b> is interested in generating audience measurement metrics. The example Bloom filter array generation circuitry <b>710</b> generates Bloom filter arrays based on the Bloom filter parameters and the user information associated with users identified by the user data analysis circuitry <b>708</b> to be included in the array. In some examples, the users to be included in the Bloom filter array are identified based on whether the users were exposed to media being tracked by the AME <b>102</b>. An example process to generate a Bloom filter array in accordance with teachings disclosed herein is detailed below in connection with <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0202" num="0091">While an example manner of implementing the database proprietor apparatus <b>700</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> is illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, one or more of the elements, processes and/or devices illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref> may be combined, divided, re-arranged, omitted, eliminated and/or implemented in any other way. Further, the example user database <b>702</b>, the example communications interface circuitry <b>704</b>, the example Bloom filter parameter database <b>706</b>, the example user data analysis circuitry <b>708</b>, the example Bloom filter array generation circuitry <b>710</b> and/or, more generally, the example database proprietor apparatus <b>700</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref> may be implemented by hardware, software, firmware and/or any combination of hardware, software and/or firmware. Thus, for example, any of the example user database <b>702</b>, the example communications interface circuitry <b>704</b>, the example Bloom filter parameter database <b>706</b>, the example user data analysis circuitry <b>708</b>, the example Bloom filter array generation circuitry <b>710</b> and/or, more generally, the example database proprietor apparatus <b>700</b> could be implemented by processor circuitry, analog circuit(s), digital circuit(s), logic circuit(s), programmable processor(s), programmable microcontroller(s), graphics processing unit(s) (GPU(s)), digital signal processor(s) (DSP(s)), application specific integrated circuit(s) (ASIC(s)), programmable logic device(s) (PLD(s)), and/or field programmable logic device(s) (FPLD(s)) such as Field Programmable Gate Arrays (FPGAs). When reading any of the apparatus or system claims of this patent to cover a purely software and/or firmware implementation, at least one of the example user database <b>702</b>, the example communications interface circuitry <b>704</b>, the example Bloom filter parameter database <b>706</b>, the example user data analysis circuitry <b>708</b>, and/or the example Bloom filter array generation circuitry <b>710</b> is/are hereby expressly defined to include a non-transitory computer readable storage device or storage disk such as a memory, a digital versatile disk (DVD), a compact disk (CD), a Blu-ray disk, etc. including the software and/or firmware. Further still, the example database proprietor apparatus <b>700</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> may include one or more elements, processes and/or devices in addition to, or instead of, those illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, and/or may include more than one of any or all of the illustrated elements, processes and devices. As used herein, the phrase &#x201c;in communication,&#x201d; including variations thereof, encompasses direct communication and/or indirect communication through one or more intermediary components, and does not require direct physical (e.g., wired) communication and/or constant communication, but rather additionally includes selective communication at periodic intervals, scheduled intervals, aperiodic intervals, and/or one-time events.</p><p id="p-0203" num="0092"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram of an example implementation of the example audience metrics generator <b>112</b> of the AME <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The example audience metrics generator <b>112</b> includes an example audience population analysis circuitry <b>802</b>, an example communications interface circuitry <b>804</b>, an example Bloom filter parameter analysis circuitry <b>806</b>, an example Bloom filter parameter database <b>808</b>, an example expression generation circuitry <b>810</b>, an example argument generation circuitry <b>812</b>, an example cardinality analysis circuitry <b>814</b>, an example report generation circuitry <b>816</b>, and an example memory <b>818</b>.</p><p id="p-0204" num="0093">The example audience population analysis circuitry <b>802</b> determines a universe estimate for the size of population that may potentially be reached by a particular media based on the geographic region where the media is distributed, the platforms through which the media is distributed, and/or any other suitable factor(s). The example communications interface circuitry <b>804</b> enables the audience metrics generator <b>112</b> to communicate with the database proprietors <b>106</b><i>a</i>-<i>b. </i></p><p id="p-0205" num="0094">The example Bloom filter parameter analysis circuitry <b>806</b> determines suitable parameters for Bloom filter arrays based on the universe estimate of the audience population analysis circuitry <b>802</b>. More particularly, in some examples, the length of a Bloom filter array is determined based on a maximum expected number of users in an underlying dataset to be represented in the Bloom filter array. In some examples, the expected number of users is determined based on the universe estimate. Further, in some examples, the Bloom filter parameter analysis circuitry <b>806</b> determines the length of a Bloom filter array to provide a particular relative error (e.g., +/&#x2212;5%) for an estimate of the cardinality of the Bloom filter array at a particular confidence level (e.g., 95%). Additionally or alternatively, in some examples, the Bloom filter parameter analysis circuitry <b>806</b> determines the relative error, at a particular confidence level, of the cardinality estimate based on a set length for the Bloom filter array.</p><p id="p-0206" num="0095">In some examples, the Bloom filter parameter analysis circuitry <b>806</b> also determines parameters defining the hash function(s) used to evaluate PII data associated with particular users to be represented in the Bloom filter array. Further still, in some examples, the Bloom filter parameter analysis circuitry <b>806</b> determines parameters defining how outputs of the hash functions map to particular bits or elements of the Bloom filter array. In some examples, the parameters defining the hash function(s) and length of the Bloom filter array are stored in the Bloom filter parameter database <b>808</b>. In some examples, the Bloom filter parameters stored in the database <b>808</b> may be provided to the database proprietors <b>106</b><i>a</i>-<i>b </i>via the example communications interface circuitry <b>804</b>.</p><p id="p-0207" num="0096">The example expression generation circuitry <b>810</b> determines or generates inclusive-exclusion expressions that define an audience size (e.g., a cardinality) for a particular user group of interest across multiple Bloom filter arrays. In some examples, the particular user group of interest corresponds to the full union of all Bloom filter arrays under consideration. However, in other examples, the particular user group of interest corresponds a particular subset of mutually exclusive disjoint datasets associated with the Bloom filter arrays. The particular user group of interest can correspond to any combination of the disjoint datasets. In some examples, the terms used in the inclusion-exclusion expression generated by the expression generation circuitry <b>810</b> are limited to either cardinalities of individual Bloom filter arrays or cardinalities of the unions of two or more Bloom filter arrays. As described above, the cardinalities of individual Bloom filter arrays and the cardinalities of the union of two or more Bloom can be directly estimated based on the counts of 0s in the associated Bloom filter arrays. Accordingly, limiting the terms in the inclusion-exclusion expression enables the estimation of the cardinality (e.g., the unique audience size) of the particular user group defined by the inclusion-exclusion expression.</p><p id="p-0208" num="0097">In some examples, the expression generation circuitry <b>810</b> generates the inclusion-exclusion expression based on the relevant subset of disjoint datasets corresponding to the particular user group of interest. Thus, in some examples, the expression generation circuitry <b>810</b> first identifies the relevant subset of disjoint datasets before generating the inclusion-exclusion expression. Additionally or alternatively, in some examples, the expression generation circuitry <b>810</b> identifies a particular intersection and/or union of interest corresponding to the particular user group of interest without specifically identifying the individual disjoint sets included in the intersection.</p><p id="p-0209" num="0098">In some examples, the relationships between the disjoint datasets and the unions of the Bloom filter arrays as well as the relationships between the intersections of the arrays and the unions of the arrays for different numbers of Bloom filters arrays may be defined in advance and stored in the example memory <b>818</b> for retrieval by the expression generation circuitry <b>810</b>. For instance, in some examples, the relationships may be defined in a matrix M as defined in Equations 48 through 51. In other examples, the relationships and resulting expressions may be derived by the expression generation circuitry <b>810</b>.</p><p id="p-0210" num="0099">The example argument generation circuitry <b>812</b> determines or generates an argument for the logarithm defined in Equation 32 (e.g., &#x192;({c<sub>i</sub><sub><sub2>1</sub2></sub><sub>i</sub><sub><sub2>2 </sub2></sub>. . . })). As discussed above in connection with Equation 32, the argument of the logarithm includes counts of 0s in the individual Bloom filter arrays and/or the bitwise unions of two or more of the Bloom filter arrays. More particularly, the logarithm includes ratios of the counts to the length of the Bloom filter arrays. In some examples, the argument generation circuitry <b>812</b> determines which particular ratios of counts to array length are included in the logarithm argument based on the particular cardinality terms included in the inclusion-exclusion expression generated by the expression generation circuitry <b>810</b>. Further, the example argument generation circuitry <b>812</b> determines whether to include the ratio itself or the inverse of the ratio based on whether the corresponding cardinality term in the inclusion-exclusion expression is added or subtracted, respectively. Further still, the example argument generation circuitry <b>812</b> determines an exponent for each ratio (or inverse ratio) based on the constant coefficient in front of the corresponding cardinality term in the inclusion-exclusion expression.</p><p id="p-0211" num="0100">The example cardinality analysis circuitry <b>814</b> evaluates Equation 32 based on the argument of the logarithm as defined by the argument generation circuitry <b>812</b> to estimate the cardinality or unique audience for the particular user group of interest. The values for m and k in Equation 32 are already known and defined by the Bloom filter parameters. However, in some examples, the cardinality analysis circuitry <b>814</b> first calculates the relevant counts in the logarithm argument. In this example, the counts corresponding to the number of elements set to 0 in a single Bloom filter array or the number of elements set to 0 in the bitwise union of two or more Bloom filter arrays. As discussed above, in some examples, the counts could be based on the number of elements set to 1 instead of the number set to 0. Once the counts have been calculated, the cardinality analysis circuitry <b>814</b> can complete the evaluation of Equation 32 to determine the estimate for the cardinality of the particular user group of interest.</p><p id="p-0212" num="0101">In some examples, cardinality estimates are generated on a relatively frequent basis (e.g., once a day). Accordingly, where the Bloom filter arrays may be thousands of bits long and be representative of hundreds of thousands or even millions of users, it is necessary to implement the example process on a computer because such analysis cannot practically be performed by a human in their mind and/or using pen and paper in so short a time.</p><p id="p-0213" num="0102">The example report generation circuitry <b>816</b> generates any suitable report conveying audience measurement information and estimates. In some examples, where the Bloom filter arrays correspond to exposure to an advertisement in an advertising campaign, the report generated by the report generation circuitry <b>816</b> includes an indication of reach of the advertising campaign. That is, the report includes an indication of the total number of unique individuals that were exposed to the advertisement during a relevant period of time. In some examples, the total number of unique individuals corresponds to the cardinality estimate for the union of multiple Bloom filter arrays as described above. In some examples, the report includes an indication of the total number of unique individuals exposed to media that are associated with one or more particular database proprietors but not other database proprietors (e.g., users registered only with the first database proprietor <b>106</b><i>a </i>but not the second database proprietor <b>106</b><i>b</i>).</p><p id="p-0214" num="0103">In some examples, the audience metrics generator <b>112</b> includes means for generating an expression. For example, the means for generating an expression may be implemented by expression generation circuitry <b>810</b>. In some examples, the expression generation circuitry <b>810</b> may be implemented by machine executable instructions such as that implemented by at least blocks <b>1010</b> and <b>1012</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, and block <b>1202</b> of <figref idref="DRAWINGS">FIG. <b>12</b></figref> executed by processor circuitry, which may be implemented by the example processor circuitry <b>1412</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the example processor circuitry <b>1500</b> of <figref idref="DRAWINGS">FIG. <b>15</b></figref>, and/or the example Field Programmable Gate Array (FPGA) circuitry <b>1600</b> of <figref idref="DRAWINGS">FIG. <b>16</b></figref>. In other examples, the expression generation circuitry <b>810</b> is implemented by other hardware logic circuitry, hardware implemented state machines, and/or any other combination of hardware, software, and/or firmware. For example, the expression generation circuitry <b>810</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an Application Specific Integrated Circuit (ASIC), a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0215" num="0104">In some examples, the audience metrics generator <b>112</b> includes means for estimating an audience size. For example, the means for estimating an audience size may be implemented by cardinality analysis circuitry <b>814</b>. In some examples, the cardinality analysis circuitry <b>814</b> may be implemented by machine executable instructions such as that implemented by at least blocks <b>1016</b>, <b>1018</b>, and <b>1020</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref> and block <b>1204</b> of <figref idref="DRAWINGS">FIG. <b>12</b></figref> executed by processor circuitry, which may be implemented by the example processor circuitry <b>1412</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the example processor circuitry <b>1500</b> of <figref idref="DRAWINGS">FIG. <b>15</b></figref>, and/or the example Field Programmable Gate Array (FPGA) circuitry <b>1600</b> of <figref idref="DRAWINGS">FIG. <b>16</b></figref>. In other examples, the cardinality analysis circuitry <b>814</b> is implemented by other hardware logic circuitry, hardware implemented state machines, and/or any other combination of hardware, software, and/or firmware. For example, the cardinality analysis circuitry <b>814</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an Application Specific Integrated Circuit (ASIC), a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0216" num="0105">In some examples, the audience metrics generator <b>112</b> includes means for determining an argument. For example, the means for determining an argument may be implemented by argument generation circuitry <b>812</b>. In some examples, the argument generation circuitry <b>812</b> may be implemented by machine executable instructions such as that implemented by at least block <b>1014</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref> and blocks <b>1102</b>-<b>1122</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref> executed by processor circuitry, which may be implemented by the example processor circuitry <b>1412</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the example processor circuitry <b>1500</b> of <figref idref="DRAWINGS">FIG. <b>15</b></figref>, and/or the example Field Programmable Gate Array (FPGA) circuitry <b>1600</b> of <figref idref="DRAWINGS">FIG. <b>16</b></figref>. In other examples, the argument generation circuitry <b>812</b> is implemented by other hardware logic circuitry, hardware implemented state machines, and/or any other combination of hardware, software, and/or firmware. For example, the argument generation circuitry <b>812</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an Application Specific Integrated Circuit (ASIC), a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0217" num="0106">In some examples, the audience metrics generator <b>112</b> includes means for determining Bloom filter parameters. For example, the means for determining Bloom filter parameters may be implemented by Bloom filter parameter analysis circuitry <b>806</b>. In some examples, the Bloom filter parameter analysis circuitry <b>806</b> may be implemented by machine executable instructions such as that implemented by at least block <b>1004</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref> executed by processor circuitry, which may be implemented by the example processor circuitry <b>1412</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the example processor circuitry <b>1500</b> of <figref idref="DRAWINGS">FIG. <b>15</b></figref>, and/or the example Field Programmable Gate Array (FPGA) circuitry <b>1600</b> of <figref idref="DRAWINGS">FIG. <b>16</b></figref>. In other examples, the Bloom filter parameter analysis circuitry <b>806</b> is implemented by other hardware logic circuitry, hardware implemented state machines, and/or any other combination of hardware, software, and/or firmware. For example, the Bloom filter parameter analysis circuitry <b>806</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an Application Specific Integrated Circuit (ASIC), a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0218" num="0107">While an example manner of implementing the audience metrics generator <b>112</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> is illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, one or more of the elements, processes and/or devices illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref> may be combined, divided, re-arranged, omitted, eliminated and/or implemented in any other way. Further, the example audience population analysis circuitry <b>802</b>, the example communications interface circuitry <b>804</b>, the example Bloom filter parameter analysis circuitry <b>806</b>, the example Bloom filter parameter database <b>808</b>, the example expression generation circuitry <b>810</b>, the example argument generation circuitry <b>812</b>, the example cardinality analysis circuitry <b>814</b>, the example report generation circuitry <b>816</b>, the example memory <b>818</b> and/or, more generally, the example audience metrics generator <b>112</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> may be implemented by hardware, software, firmware and/or any combination of hardware, software and/or firmware. Thus, for example, any of the example audience population analysis circuitry <b>802</b>, the example communications interface circuitry <b>804</b>, the example Bloom filter parameter analysis circuitry <b>806</b>, the example Bloom filter parameter database <b>808</b>, the example expression generation circuitry <b>810</b>, the example argument generation circuitry <b>812</b>, the example cardinality analysis circuitry <b>814</b>, the example report generation circuitry <b>816</b>, the example memory <b>818</b> and/or, more generally, the example audience metrics generator <b>112</b> could be implemented by processor circuitry, analog circuit(s), digital circuit(s), logic circuit(s), programmable processor(s), programmable microcontroller(s), graphics processing unit(s) (GPU(s)), digital signal processor(s) (DSP(s)), application specific integrated circuit(s) (ASIC(s)), programmable logic device(s) (PLD(s)), and/or field programmable logic device(s) (FPLD(s)) such as Field Programmable Gate Arrays (FPGAs). When reading any of the apparatus or system claims of this patent to cover a purely software and/or firmware implementation, at least one of the example audience population analysis circuitry <b>802</b>, the example communications interface circuitry <b>804</b>, the example Bloom filter parameter analysis circuitry <b>806</b>, the example Bloom filter parameter database <b>808</b>, the example expression generation circuitry <b>810</b>, the example argument generation circuitry <b>812</b>, the example cardinality analysis circuitry <b>814</b>, and/or the example report generation circuitry <b>816</b>, the example memory <b>818</b> is/are hereby expressly defined to include a non-transitory computer readable storage device or storage disk such as a memory, a digital versatile disk (DVD), a compact disk (CD), a Blu-ray disk, etc. including the software and/or firmware. Further still, the example audience metrics generator <b>112</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> may include one or more elements, processes and/or devices in addition to, or instead of, those illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, and/or may include more than one of any or all of the illustrated elements, processes and devices.</p><p id="p-0219" num="0108">A flowchart representative of example hardware logic circuitry, machine readable instructions, hardware implemented state machines, and/or any combination thereof for implementing the database proprietor apparatus <b>700</b> of <figref idref="DRAWINGS">FIGS. <b>1</b> and/or <b>7</b></figref> is shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref>. The machine readable instructions may be one or more executable programs or portion(s) of an executable program for execution by processor circuitry, such as the processor circuitry <b>1312</b> shown in the example processor platform <b>1300</b> discussed below in connection with <figref idref="DRAWINGS">FIG. <b>13</b></figref> and/or the example processor circuitry discussed below in connection with <figref idref="DRAWINGS">FIGS. <b>15</b> and/or <b>16</b></figref>. The program may be embodied in software stored on one or more non-transitory computer readable storage media such as a CD, a floppy disk, a hard disk drive, a DVD, a Blu-ray disk, a volatile memory (e.g., Random Access Memory (RAM) of any type, etc.), or a non-volatile memory (e.g., FLASH memory, an HDD, etc.) associated with the processor circuitry located in one or more hardware devices, but the entire program and/or parts thereof could alternatively be executed by one or more hardware device other than the processor circuitry and/or embodied in firmware or dedicated hardware. The machine readable instructions may be distributed across multiple hardware devices and/or executed by two or more hardware devices (e.g., a server and a client hardware device). For example, the client hardware device may be implemented by an endpoint client hardware device (e.g., a hardware device associated with a user) or an intermediate client hardware device (e.g., a radio access network (RAN) gateway that may facilitate communication between a server and an endpoint client hardware device). Similarly, the non-transitory computer readable storage media may include one or more mediums located in one or more hardware devices. Further, although the example program is described with reference to the flowchart illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>, many other methods of implementing the example database proprietor apparatus <b>700</b> may alternatively be used. For example, the order of execution of the blocks may be changed, and/or some of the blocks described may be changed, eliminated, or combined. Additionally or alternatively, any or all of the blocks may be implemented by one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an ASIC, a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware. The processor circuitry may be distributed in different network locations and/or local to one or more hardware devices (e.g., a single-core processor (e.g., a single core central processor unit (CPU)), a multi-core processor (e.g., a multi-core CPU), etc.) in a single machine, multiple processors distributed across multiple servers of a server rack, multiple processors distributed across one or more server racks, a CPU and/or a FPGA located in the same package (e.g., the same integrated circuit (IC) package or in two or more separate housings, etc.).</p><p id="p-0220" num="0109">Flowcharts representative of example hardware logic circuitry, machine readable instructions, hardware implemented state machines, and/or any combination thereof for implementing the audience metrics generator <b>112</b> of <figref idref="DRAWINGS">FIGS. <b>1</b> and/or <b>8</b></figref> are shown in <figref idref="DRAWINGS">FIGS. <b>10</b>-<b>12</b></figref>. The machine readable instructions may be one or more executable programs or portion(s) of an executable program for execution by processor circuitry, such as the processor <b>1412</b> shown in the example processor platform <b>1400</b> discussed below in connection with <figref idref="DRAWINGS">FIG. <b>14</b></figref> and/or the example processor circuitry discussed below in connection with <figref idref="DRAWINGS">FIGS. <b>15</b> and/or <b>16</b></figref>. The program may be embodied in software stored on one or more non-transitory computer readable storage media such as a CD, a floppy disk, a hard disk drive, a DVD, a Blu-ray disk, a volatile memory (e.g., Random Access Memory (RAM) of any type, etc.), or a non-volatile memory (e.g., FLASH memory, an HDD, etc.) associated with the processor circuitry located in one or more hardware devices, but the entire program and/or parts thereof could alternatively be executed by one or more hardware device other than the processor circuitry and/or embodied in firmware or dedicated hardware. The machine readable instructions may be distributed across multiple hardware devices and/or executed by two or more hardware devices (e.g., a server and a client hardware device). For example, the client hardware device may be implemented by an endpoint client hardware device (e.g., a hardware device associated with a user) or an intermediate client hardware device (e.g., a radio access network (RAN) gateway that may facilitate communication between a server and an endpoint client hardware device). Similarly, the non-transitory computer readable storage media may include one or more mediums located in one or more hardware devices. Further, although the example program is described with reference to the flowcharts illustrated in <figref idref="DRAWINGS">FIGS. <b>10</b>-<b>12</b></figref>, many other methods of implementing the example audience metrics generator <b>112</b> may alternatively be used. For example, the order of execution of the blocks may be changed, and/or some of the blocks described may be changed, eliminated, or combined. Additionally or alternatively, any or all of the blocks may be implemented by one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an ASIC, a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware. The processor circuitry may be distributed in different network locations and/or local to one or more hardware devices (e.g., a single-core processor (e.g., a single core central processor unit (CPU)), a multi-core processor (e.g., a multi-core CPU), etc.) in a single machine, multiple processors distributed across multiple servers of a server rack, multiple processors distributed across one or more server racks, a CPU and/or a FPGA located in the same package (e.g., the same integrated circuit (IC) package or in two or more separate housings, etc.).</p><p id="p-0221" num="0110">The machine readable instructions described herein may be stored in one or more of a compressed format, an encrypted format, a fragmented format, a compiled format, an executable format, a packaged format, etc. Machine readable instructions as described herein may be stored as data or a data structure (e.g., as portions of instructions, code, representations of code, etc.) that may be utilized to create, manufacture, and/or produce machine executable instructions. For example, the machine readable instructions may be fragmented and stored on one or more storage devices and/or computing devices (e.g., servers) located at the same or different locations of a network or collection of networks (e.g., in the cloud, in edge devices, etc.). The machine readable instructions may require one or more of installation, modification, adaptation, updating, combining, supplementing, configuring, decryption, decompression, unpacking, distribution, reassignment, compilation, etc. in order to make them directly readable, interpretable, and/or executable by a computing device and/or other machine. For example, the machine readable instructions may be stored in multiple parts, which are individually compressed, encrypted, and/or stored on separate computing devices, wherein the parts when decrypted, decompressed, and/or combined form a set of machine executable instructions that implement one or more operations that may together form a program such as that described herein.</p><p id="p-0222" num="0111">In another example, the machine readable instructions may be stored in a state in which they may be read by processor circuitry, but require addition of a library (e.g., a dynamic link library (DLL)), a software development kit (SDK), an application programming interface (API), etc., in order to execute the machine readable instructions on a particular computing device or other device. In another example, the machine readable instructions may need to be configured (e.g., settings stored, data input, network addresses recorded, etc.) before the machine readable instructions and/or the corresponding program(s) can be executed in whole or in part. Thus, machine readable media, as used herein, may include machine readable instructions and/or program(s) regardless of the particular format or state of the machine readable instructions and/or program(s) when stored or otherwise at rest or in transit.</p><p id="p-0223" num="0112">The machine readable instructions described herein can be represented by any past, present, or future instruction language, scripting language, programming language, etc. For example, the machine readable instructions may be represented using any of the following languages: C, C++, Java, C#, Perl, Python, JavaScript, HyperText Markup Language (HTML), Structured Query Language (SQL), Swift, etc.</p><p id="p-0224" num="0113">As mentioned above, the example operations of <figref idref="DRAWINGS">FIGS. <b>9</b>-<b>12</b></figref> may be implemented using executable instructions (e.g., computer and/or machine readable instructions) stored on one or more non-transitory computer and/or machine readable media such as optical storage devices, magnetic storage devices, an HDD, a flash memory, a read-only memory (ROM), a CD, a DVD, a cache, a RAM of any type, a register, and/or any other storage device or storage disk in which information is stored for any duration (e.g., for extended time periods, permanently, for brief instances, for temporarily buffering, and/or for caching of the information). As used herein, the terms non-transitory computer readable medium and non-transitory computer readable storage medium are expressly defined to include any type of computer readable storage device and/or storage disk and to exclude propagating signals and to exclude transmission media.</p><p id="p-0225" num="0114">&#x201c;Including&#x201d; and &#x201c;comprising&#x201d; (and all forms and tenses thereof) are used herein to be open ended terms. Thus, whenever a claim employs any form of &#x201c;include&#x201d; or &#x201c;comprise&#x201d; (e.g., comprises, includes, comprising, including, having, etc.) as a preamble or within a claim recitation of any kind, it is to be understood that additional elements, terms, etc., may be present without falling outside the scope of the corresponding claim or recitation. As used herein, when the phrase &#x201c;at least&#x201d; is used as the transition term in, for example, a preamble of a claim, it is open-ended in the same manner as the term &#x201c;comprising&#x201d; and &#x201c;including&#x201d; are open ended. The term &#x201c;and/or&#x201d; when used, for example, in a form such as A, B, and/or C refers to any combination or subset of A, B, C such as (1) A alone, (2) B alone, (3) C alone, (4) A with B, (5) A with C, (6) B with C, and (7) A with B and with C. As used herein in the context of describing structures, components, items, objects and/or things, the phrase &#x201c;at least one of A and B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, and (3) at least one A and at least one B. Similarly, as used herein in the context of describing structures, components, items, objects and/or things, the phrase &#x201c;at least one of A or B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, and (3) at least one A and at least one B. As used herein in the context of describing the performance or execution of processes, instructions, actions, activities and/or steps, the phrase &#x201c;at least one of A and B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, and (3) at least one A and at least one B. Similarly, as used herein in the context of describing the performance or execution of processes, instructions, actions, activities and/or steps, the phrase &#x201c;at least one of A or B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, and (3) at least one A and at least one B.</p><p id="p-0226" num="0115">As used herein, singular references (e.g., &#x201c;a&#x201d;, &#x201c;an&#x201d;, &#x201c;first&#x201d;, &#x201c;second&#x201d;, etc.) do not exclude a plurality. The term &#x201c;a&#x201d; or &#x201c;an&#x201d; object, as used herein, refers to one or more of that object. The terms &#x201c;a&#x201d; (or &#x201c;an&#x201d;), &#x201c;one or more&#x201d;, and &#x201c;at least one&#x201d; are used interchangeably herein. Furthermore, although individually listed, a plurality of means, elements or method actions may be implemented by, e.g., the same entity or object. Additionally, although individual features may be included in different examples or claims, these may possibly be combined, and the inclusion in different examples or claims does not imply that a combination of features is not feasible and/or advantageous.</p><p id="p-0227" num="0116">In some examples, the program of <figref idref="DRAWINGS">FIG. <b>9</b></figref> is independently implemented by each database proprietor <b>106</b><i>a</i>-<i>b </i>(<figref idref="DRAWINGS">FIG. <b>1</b></figref>) that is to provide a Bloom filter array to the AME <b>102</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) in connection with a particular item of media for which exposure metrics are desired. The program of <figref idref="DRAWINGS">FIG. <b>9</b></figref> begins at block <b>902</b> where the example Bloom filter parameter database <b>706</b> (<figref idref="DRAWINGS">FIG. <b>7</b></figref>) stores Bloom filter parameters to generate a Bloom filter array. At block <b>904</b>, the example Bloom filter array generation circuitry <b>710</b> (<figref idref="DRAWINGS">FIG. <b>7</b></figref>) generates a Bloom filter array initialized to 0. In some examples, the length of the Bloom filter array is defined by and/or agreed upon between the AME <b>102</b> and each database proprietor <b>106</b><i>a</i>-<i>b</i>. In some examples, the length is defined by the Bloom filter parameters generated at block <b>1004</b> of the example process of <figref idref="DRAWINGS">FIG. <b>10</b></figref> discussed further below. At block <b>906</b>, the example user data analysis circuitry <b>708</b> (<figref idref="DRAWINGS">FIG. <b>7</b></figref>) accesses user data in the user database <b>702</b>. At block <b>908</b>, the example Bloom filter array generation circuitry <b>710</b> (<figref idref="DRAWINGS">FIG. <b>7</b></figref>) hashes a personal identifier in the user database <b>702</b> using a hash function defined in the Bloom filter parameters. At block <b>910</b>, the example Bloom filter array generation circuitry <b>710</b> maps an output of the hash to a corresponding element in the Bloom filter array. At block <b>912</b>, the example Bloom filter array generation circuitry <b>710</b> determines whether the value of the corresponding element is still 0. If so, control advances to block <b>914</b> where the example Bloom filter array generation circuitry <b>710</b> flips the value of the corresponding element to 1. Thereafter, control advances to block <b>916</b>. Returning to block <b>912</b>, if the value of the corresponding bit has already been flipped to 1, control advances directly to block <b>916</b>.</p><p id="p-0228" num="0117">At block <b>916</b>, the example Bloom filter array generation circuitry <b>710</b> determines whether there is another user. If so, control returns to block <b>908</b>. If not, control advances to block <b>918</b> where the example Bloom filter array generation circuitry <b>710</b> determines whether there is another hash function. If so, control returns to block <b>906</b>. Otherwise, control advances to block <b>918</b> where the example communications interface circuitry <b>704</b> transmits the final Bloom filter array to the AME <b>102</b>. At block <b>922</b>, the example Bloom filter array generation circuitry <b>710</b> determines whether to update the data. In some examples, data is updated on a relatively frequent basis (e.g., once a week, once a day, etc.). If the data is to be updated, control returns to block <b>904</b> to repeat the process. Otherwise, the example instructions of <figref idref="DRAWINGS">FIG. <b>9</b></figref> ends.</p><p id="p-0229" num="0118">The example program of <figref idref="DRAWINGS">FIG. <b>10</b></figref> begins at block <b>1002</b> where the example audience population analysis circuitry <b>802</b> (<figref idref="DRAWINGS">FIG. <b>8</b></figref>) determines a universe estimate for an audience size. At block <b>1004</b>, the example Bloom filter parameter analysis circuitry <b>806</b> (<figref idref="DRAWINGS">FIG. <b>8</b></figref>) determines Bloom filter parameters defining the distribution for the mapping of users to elements of a Bloom filter array. In some examples, the Bloom filter parameters include a length for the Bloom filter arrays that is determined based on the universe estimate. Additionally or alternatively, in some examples, the Bloom filter parameter analysis circuitry <b>806</b> determines the length that provides a cardinality estimate guaranteed to have a relative error no greater than a particular relative error at a particular confidence level. At block <b>1006</b>, the example communications interface circuitry <b>804</b> (<figref idref="DRAWINGS">FIG. <b>8</b></figref>) transmits the Bloom filter parameters to the database proprietors <b>106</b><i>a</i>-<i>b</i>. At block <b>1008</b>, the example communications interface circuitry <b>804</b> receives Bloom filter arrays (e.g., the sketch data <b>132</b><i>a</i>-<i>b </i>of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) from the database proprietors <b>106</b><i>a</i>-<i>b </i>(<figref idref="DRAWINGS">FIG. <b>1</b></figref>). In some examples, the Bloom filter arrays are received via the communications interface circuitry <b>804</b> in connection with the transmission of block <b>920</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0230" num="0119">At block <b>1010</b>, the example expression generation circuitry <b>810</b> identifies a set of mutually exclusive disjoint datasets corresponding to a particular user group of interest represented by the Bloom filter arrays. In some examples, instead of identifying the set of disjoint datasets, the expression generation circuitry <b>810</b> identifies a particular combination of unions and/or intersections associated with the set of disjoint datasets. At block <b>1012</b>, the example expression generation circuitry <b>810</b> determines an inclusion-exclusion expression that defines the cardinality of the particular user group of interest. In some examples, the inclusion-exclusion expression contains terms corresponding to either the cardinality associated with individual ones of the Bloom filter arrays or the cardinality associated with unions of two or more of the Bloom filter arrays. At block <b>1014</b>, the example argument generation circuitry <b>812</b> determines an argument of a logarithm (e.g., the logarithm of Equation 32) based on the inclusion-exclusion expression. Further detail regarding the implementation of block <b>1014</b> is provided below in connection with <figref idref="DRAWINGS">FIG. <b>11</b></figref>. As detailed in the example process of <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the argument of the logarithm includes counts of 0s in the individual ones of the Bloom filter arrays associated with the terms in the inclusion-exclusion express and includes counts of 0s in the bitwise union of the two or more Bloom filter arrays associated with the terms corresponding to the union of the Bloom filter arrays.</p><p id="p-0231" num="0120">At block <b>1016</b>, the example cardinality analysis circuitry <b>814</b> determines the value of the counts represented in the argument of the logarithm. At block <b>1018</b>, the example cardinality analysis circuitry <b>814</b> estimates the cardinality of users in the particular user group of interest based on the logarithm and the associated counts. More particularly, the example cardinality analysis circuitry <b>814</b> estimates the cardinality of the particular user group of interest by evaluating Equation 32. At block <b>1020</b>, the example cardinality analysis circuitry <b>814</b> determines whether another user group of interest is to be analyzed. If so, control returns to block <b>1010</b>. Otherwise, control advances to block <b>1022</b> where the example report generation circuitry <b>816</b> generates a report based on the cardinality estimate(s). At block <b>1024</b>, the example communications interface circuitry <b>804</b> transmits the report to an interested third party. At block <b>1026</b>, the example report generation circuitry <b>816</b> determines whether to generate an updated and/or new report. As mentioned above, in some examples, reports are generated on a relatively frequent basis (e.g., weekly, daily, etc.). If an updated and/or new report is to be generated, control returns to block <b>1008</b>. Otherwise, the example program of <figref idref="DRAWINGS">FIG. <b>14</b></figref> ends.</p><p id="p-0232" num="0121"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flowchart illustrating an example implementation of block <b>1014</b>. The example program begins at block <b>1102</b> where the example argument generation circuitry <b>812</b> selects a term in the inclusion-exclusion expression. As described above, the terms correspond to either cardinalities of individual Bloom filter arrays or cardinalities of the bitwise union of two or more Bloom filter arrays. At block <b>1104</b>, the example argument generation circuitry <b>812</b> determines whether the selected term corresponds to a single Bloom filter array or a union of at least two arrays. If the selected term corresponds to a single array, control advances to block <b>1106</b>. If the selected term corresponds to a union of at least two arrays, control advances to block <b>1108</b>.</p><p id="p-0233" num="0122">At block <b>1106</b> (following determination that the selected term corresponds to a single Bloom filter array), the example argument generation circuitry <b>812</b> determines whether the selected term is added or subtracted in the inclusion-exclusion expression. If added, control advances to block <b>1110</b> where the example argument generation circuitry <b>812</b> includes, in the logarithm argument, the ratio of the count of 0s in the Bloom filter array to the length of the array. Thereafter, control advances to block <b>1118</b>. Returning to block <b>1106</b>, if the example argument generation circuitry <b>812</b> determines that the selected term is subtracted, control advances to block <b>1112</b> where the example argument generation circuitry <b>812</b> includes, in the logarithm argument, the inverse of the ratio of the count of 0s in the Bloom filter array to the length of the array. Thereafter, control advances to block <b>1118</b>.</p><p id="p-0234" num="0123">At block <b>1108</b> (following determination that the selected term corresponds to at least two Bloom filter arrays), the example argument generation circuitry <b>812</b> determines whether the selected term is added or subtracted in the inclusion-exclusion expression. If added, control advances to block <b>1114</b> where the example argument generation circuitry <b>812</b> includes, in the logarithm argument, the ratio of the count of 0s in the bitwise union of the at least two Bloom filter arrays to the length of the arrays. Thereafter, control advances to block <b>1118</b>. Returning to block <b>1106</b>, if the example argument generation circuitry <b>812</b> determines that the selected term is subtracted, control advances to block <b>1116</b> where the example argument generation circuitry <b>812</b> includes, in the logarithm argument, the inverse of the ratio of the count of 0s in the bitwise union of the at least two Bloom filter array to the length of the arrays. Thereafter, control advances to block <b>1118</b>.</p><p id="p-0235" num="0124">At block <b>1118</b>, the example argument generation circuitry <b>812</b> defines an exponent to the ratio corresponding to the constant coefficient in front of the selected term. At block <b>1120</b>, the example argument generation circuitry <b>812</b> determines whether there is another term in the inclusion-exclusion expression. If so, control returns to block <b>1102</b>. Otherwise, control advances to block <b>1122</b> where the example argument generation circuitry <b>812</b> simplifies the length of array parameter(s) included in the logarithm argument. That is, inasmuch as the length is part of each ratio included in the logarithm argument and some ratios may be inverted, the length parameter may cancel out or at least simplify. Thereafter, the example process of <figref idref="DRAWINGS">FIG. <b>11</b></figref> ends and returns to complete the example process of <figref idref="DRAWINGS">FIG. <b>10</b></figref>.</p><p id="p-0236" num="0125">The example program of <figref idref="DRAWINGS">FIG. <b>12</b></figref> begins at block <b>1202</b> where the example expression generation circuitry <b>810</b> determines an inclusion-exclusion expression that defines an audience size for a particular user group of interest, terms in the inclusion-exclusion expression corresponding to either a first cardinality of a first one of at least three Bloom filter arrays or a second cardinality of a union of two or more of the Bloom filter arrays, different ones of the Bloom filter arrays representative of different sets of users who accessed media. At block <b>1204</b>, the example cardinality analysis circuitry <b>814</b> estimates, based on the inclusion-exclusion expression, a cardinality of unique users included in the user group of interest. Thereafter, the example process of <figref idref="DRAWINGS">FIG. <b>12</b></figref> ends.</p><p id="p-0237" num="0126"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a block diagram of an example processor platform <b>1300</b> structured to execute and/or instantiate the machine readable instructions and/or operations of <figref idref="DRAWINGS">FIG. <b>9</b></figref> to implement the database proprietor apparatus <b>700</b> of <figref idref="DRAWINGS">FIGS. <b>1</b> and/or <b>7</b></figref>. The processor platform <b>1300</b> can be, for example, a server, a personal computer, a workstation, a self-learning machine (e.g., a neural network), a mobile device (e.g., a cell phone, a smart phone, a tablet such as an iPad&#x2122;), a personal digital assistant (PDA), an Internet appliance, or any other type of computing device.</p><p id="p-0238" num="0127">The processor platform <b>1300</b> of the illustrated example includes processor circuitry <b>1312</b>. The processor circuitry <b>1312</b> of the illustrated example is hardware. For example, the processor circuitry <b>1312</b> can be implemented by one or more integrated circuits, logic circuits, FPGAs microprocessors, CPUs, GPUs, DSPs, and/or microcontrollers from any desired family or manufacturer. The processor circuitry may be implemented by one or more a semiconductor based (e.g., silicon based) devices. In this example, the processor circuitry <b>1312</b> implements the example user data analysis circuitry <b>708</b> and the example Bloom filter array generation circuitry <b>710</b>.</p><p id="p-0239" num="0128">The processor circuitry <b>1312</b> of the illustrated example includes a local memory <b>1313</b> (e.g., a cache, registers, etc.). The processor circuitry <b>1312</b> of the illustrated example is in communication with a main memory including a volatile memory <b>1314</b> and a non-volatile memory <b>1316</b> via a bus <b>1318</b>. The volatile memory <b>1314</b> may be implemented by Synchronous Dynamic Random Access Memory (SDRAM), Dynamic Random Access Memory (DRAM), RAMBUS&#xae; Dynamic Random Access Memory (RDRAM&#xae;) and/or any other type of random access memory device. The non-volatile memory <b>1316</b> may be implemented by flash memory and/or any other desired type of memory device. Access to the main memory <b>1314</b>, <b>1316</b> is controlled by a memory controller.</p><p id="p-0240" num="0129">The processor platform <b>1300</b> of the illustrated example also includes interface circuitry <b>1320</b>. The interface circuitry <b>1320</b> may be implemented by hardware in accordance with any type of interface standard, such as an Ethernet interface, a universal serial bus (USB) interface, a Bluetooth&#xae; interface, a near field communication (NFC) interface, a PCI interface, and/or a PCIe interface. In this example, the interface circuitry <b>1320</b> implements the example communications interface circuitry <b>704</b>.</p><p id="p-0241" num="0130">In the illustrated example, one or more input devices <b>1322</b> are connected to the interface circuitry <b>1320</b>. The input device(s) <b>1322</b> permit(s) a user to enter data and/or commands into the processor circuitry <b>1312</b>. The input device(s) can be implemented by, for example, an audio sensor, a microphone, a camera (still or video), a keyboard, a button, a mouse, a touchscreen, a track-pad, a trackball, an isopoint device, and/or a voice recognition system.</p><p id="p-0242" num="0131">One or more output devices <b>1324</b> are also connected to the interface circuitry <b>1320</b> of the illustrated example. The output devices <b>1324</b> can be implemented, for example, by display devices (e.g., a light emitting diode (LED), an organic light emitting diode (OLED), a liquid crystal display (LCD), a cathode ray tube (CRT) display, an in-place switching (IPS) display, a touchscreen, etc.), a tactile output device, a printer and/or speaker. The interface circuitry <b>1320</b> of the illustrated example, thus, typically includes a graphics driver card, a graphics driver chip and/or graphics processor circuitry such as a GPU.</p><p id="p-0243" num="0132">The interface circuitry <b>1320</b> of the illustrated example also includes a communication device such as a transmitter, a receiver, a transceiver, a modem, a residential gateway, a wireless access point, and/or a network interface to facilitate exchange of data with external machines (e.g., computing devices of any kind) via a network <b>1326</b>. The communication can be via, for example, an Ethernet connection, a digital subscriber line (DSL) connection, a telephone line connection, a coaxial cable system, a satellite system, a line-of-site wireless system, a cellular telephone system, an optical connection, etc.</p><p id="p-0244" num="0133">The processor platform <b>1300</b> of the illustrated example also includes one or more mass storage devices <b>1328</b> to store software and/or data. Examples of such mass storage devices <b>1328</b> include magnetic storage devices, optical storage devices, floppy disk drives, HDDs, CDs, Blu-ray disk drives, redundant array of independent disks (RAID) systems, solid state storage devices such as flash memory devices, and DVD drives.</p><p id="p-0245" num="0134">The machine executable instructions <b>1332</b>, which may be implemented by the machine readable instructions of <figref idref="DRAWINGS">FIG. <b>9</b></figref> may be stored in the mass storage device <b>1328</b>, in the volatile memory <b>1314</b>, in the non-volatile memory <b>1316</b>, and/or on a removable non-transitory computer readable storage medium such as a CD or DVD. In this example, the mass storage devices <b>1328</b> implement the example user database <b>702</b> and the example Bloom filter parameter database <b>706</b>.</p><p id="p-0246" num="0135"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a block diagram of an example processor platform <b>1400</b> structured to execute and/or instantiate the machine readable instructions and/or operations of <figref idref="DRAWINGS">FIGS. <b>10</b>-<b>12</b></figref> to implement the audience metrics generator <b>112</b> of <figref idref="DRAWINGS">FIGS. <b>1</b> and/or <b>8</b></figref>. The processor platform <b>1400</b> can be, for example, a server, a personal computer, a workstation, a self-learning machine (e.g., a neural network), a mobile device (e.g., a cell phone, a smart phone, a tablet such as an iPad&#x2122;), a personal digital assistant (PDA), an Internet appliance, or any other type of computing device.</p><p id="p-0247" num="0136">The processor platform <b>1400</b> of the illustrated example includes processor circuitry <b>1412</b>. The processor circuitry <b>1412</b> of the illustrated example is hardware. For example, the processor circuitry <b>1412</b> can be implemented by one or more integrated circuits, logic circuits, FPGAs microprocessors, CPUs, GPUs, DSPs, and/or microcontrollers from any desired family or manufacturer. The processor circuitry may be implemented by one or more a semiconductor based (e.g., silicon based) devices. In this example, the processor circuitry <b>1412</b> implements the example audience population analysis circuitry <b>802</b>, the example Bloom filter parameter analysis circuitry <b>806</b>, the example expression generation circuitry <b>810</b>, the example argument generation circuitry <b>812</b>, the example cardinality analysis circuitry <b>814</b>, and the example report generation circuitry <b>816</b>.</p><p id="p-0248" num="0137">The processor circuitry <b>1412</b> of the illustrated example includes a local memory <b>1413</b> (e.g., a cache, registers, etc.). The processor circuitry <b>1412</b> of the illustrated example is in communication with a main memory including a volatile memory <b>1414</b> and a non-volatile memory <b>1416</b> via a bus <b>1418</b>. The volatile memory <b>1414</b> may be implemented by Synchronous Dynamic Random Access Memory (SDRAM), Dynamic Random Access Memory (DRAM), RAMBUS&#xae; Dynamic Random Access Memory (RDRAM&#xae;) and/or any other type of random access memory device. The non-volatile memory <b>1416</b> may be implemented by flash memory and/or any other desired type of memory device. Access to the main memory <b>1414</b>, <b>1416</b> is controlled by a memory controller.</p><p id="p-0249" num="0138">The processor platform <b>1400</b> of the illustrated example also includes interface circuitry <b>1420</b>. The interface circuitry <b>1420</b> may be implemented by hardware in accordance with any type of interface standard, such as an Ethernet interface, a universal serial bus (USB) interface, a Bluetooth&#xae; interface, a near field communication (NFC) interface, a PCI interface, and/or a PCIe interface.</p><p id="p-0250" num="0139">In the illustrated example, one or more input devices <b>1422</b> are connected to the interface circuitry <b>1420</b>. The input device(s) <b>1422</b> permit(s) a user to enter data and/or commands into the processor circuitry <b>1412</b>. The input device(s) can be implemented by, for example, an audio sensor, a microphone, a camera (still or video), a keyboard, a button, a mouse, a touchscreen, a track-pad, a trackball, an isopoint device, and/or a voice recognition system.</p><p id="p-0251" num="0140">One or more output devices <b>1424</b> are also connected to the interface circuitry <b>1420</b> of the illustrated example. The output devices <b>1424</b> can be implemented, for example, by display devices (e.g., a light emitting diode (LED), an organic light emitting diode (OLED), a liquid crystal display (LCD), a cathode ray tube (CRT) display, an in-place switching (IPS) display, a touchscreen, etc.), a tactile output device, a printer and/or speaker. The interface circuitry <b>1420</b> of the illustrated example, thus, typically includes a graphics driver card, a graphics driver chip and/or graphics processor circuitry such as a GPU.</p><p id="p-0252" num="0141">The interface circuitry <b>1420</b> of the illustrated example also includes a communication device such as a transmitter, a receiver, a transceiver, a modem, a residential gateway, a wireless access point, and/or a network interface to facilitate exchange of data with external machines (e.g., computing devices of any kind) via a network <b>1426</b>. The communication can be via, for example, an Ethernet connection, a digital subscriber line (DSL) connection, a telephone line connection, a coaxial cable system, a satellite system, a line-of-site wireless system, a cellular telephone system, an optical connection, etc.</p><p id="p-0253" num="0142">The processor platform <b>1400</b> of the illustrated example also includes one or more mass storage devices <b>1428</b> to store software and/or data. Examples of such mass storage devices <b>1428</b> include magnetic storage devices, optical storage devices, floppy disk drives, HDDs, CDs, Blu-ray disk drives, redundant array of independent disks (RAID) systems, solid state storage devices such as flash memory devices, and DVD drives.</p><p id="p-0254" num="0143">The machine executable instructions <b>1432</b>, which may be implemented by the machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>10</b>-<b>12</b></figref> may be stored in the mass storage device <b>1428</b>, in the volatile memory <b>1414</b>, in the non-volatile memory <b>1416</b>, and/or on a removable non-transitory computer readable storage medium such as a CD or DVD.</p><p id="p-0255" num="0144"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a block diagram of an example implementation of the processor circuitry <b>1312</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref> or the processor circuitry <b>1412</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref>. In this example, the processor circuitry <b>1312</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref> or the processor circuitry <b>1412</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref> is implemented by a microprocessor <b>1500</b>. For example, the microprocessor <b>1500</b> may implement multi-core hardware circuitry such as a CPU, a DSP, a GPU, an XPU, etc. Although it may include any number of example cores <b>1502</b> (e.g., <b>1</b> core), the microprocessor <b>1500</b> of this example is a multi-core semiconductor device including N cores. The cores <b>1502</b> of the microprocessor <b>1500</b> may operate independently or may cooperate to execute machine readable instructions. For example, machine code corresponding to a firmware program, an embedded software program, or a software program may be executed by one of the cores <b>1502</b> or may be executed by multiple ones of the cores <b>1502</b> at the same or different times. In some examples, the machine code corresponding to the firmware program, the embedded software program, or the software program is split into threads and executed in parallel by two or more of the cores <b>1502</b>. The software program may correspond to a portion or all of the machine readable instructions and/or operations represented by the flowchart of <figref idref="DRAWINGS">FIG. <b>9</b></figref> executed and/or instantiated by processor circuitry <b>1312</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref>. Alternatively, the software program may correspond to a portion or all of the machine readable instructions and/or operations represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>10</b>-<b>12</b></figref> executed and/or instantiated by processor circuitry <b>1412</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref>.</p><p id="p-0256" num="0145">The cores <b>1502</b> may communicate by an example bus <b>1504</b>. In some examples, the bus <b>1504</b> may implement a communication bus to effectuate communication associated with one(s) of the cores <b>1502</b>. For example, the bus <b>1504</b> may implement at least one of an Inter-Integrated Circuit (I2C) bus, a Serial Peripheral Interface (SPI) bus, a PCI bus, or a PCIe bus. Additionally or alternatively, the bus <b>1504</b> may implement any other type of computing or electrical bus. The cores <b>1502</b> may obtain data, instructions, and/or signals from one or more external devices by example interface circuitry <b>1506</b>. The cores <b>1502</b> may output data, instructions, and/or signals to the one or more external devices by the interface circuitry <b>1506</b>. Although the cores <b>1502</b> of this example include example local memory <b>1520</b> (e.g., Level 1 (L1) cache that may be split into an L1 data cache and an L1 instruction cache), the microprocessor <b>1500</b> also includes example shared memory <b>1510</b> that may be shared by the cores (e.g., Level 2 (L2) cache)) for high-speed access to data and/or instructions. Data and/or instructions may be transferred (e.g., shared) by writing to and/or reading from the shared memory <b>1510</b>. The local memory <b>1520</b> of each of the cores <b>1502</b> and the shared memory <b>1510</b> may be part of a hierarchy of storage devices including multiple levels of cache memory and the main memory (e.g., the main memory <b>1314</b>, <b>1316</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref> or the main memory <b>1414</b>, <b>1416</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref>). Typically, higher levels of memory in the hierarchy exhibit lower access time and have smaller storage capacity than lower levels of memory. Changes in the various levels of the cache hierarchy are managed (e.g., coordinated) by a cache coherency policy.</p><p id="p-0257" num="0146">Each core <b>1502</b> may be referred to as a CPU, DSP, GPU, etc., or any other type of hardware circuitry. Each core <b>1502</b> includes control unit circuitry <b>1514</b>, arithmetic and logic (AL) circuitry (sometimes referred to as an ALU) <b>1516</b>, a plurality of registers <b>1518</b>, the L1 cache <b>1520</b>, and an example bus <b>1522</b>. Other structures may be present. For example, each core <b>1502</b> may include vector unit circuitry, single instruction multiple data (SIMD) unit circuitry, load/store unit (LSU) circuitry, branch/jump unit circuitry, floating-point unit (FPU) circuitry, etc. The control unit circuitry <b>1514</b> includes semiconductor-based circuits structured to control (e.g., coordinate) data movement within the corresponding core <b>1502</b>. The AL circuitry <b>1516</b> includes semiconductor-based circuits structured to perform one or more mathematic and/or logic operations on the data within the corresponding core <b>1502</b>. The AL circuitry <b>1516</b> of some examples performs integer based operations. In other examples, the AL circuitry <b>1516</b> also performs floating point operations. In yet other examples, the AL circuitry <b>1516</b> may include first AL circuitry that performs integer based operations and second AL circuitry that performs floating point operations. In some examples, the AL circuitry <b>1516</b> may be referred to as an Arithmetic Logic Unit (ALU). The registers <b>1518</b> are semiconductor-based structures to store data and/or instructions such as results of one or more of the operations performed by the AL circuitry <b>1516</b> of the corresponding core <b>1502</b>. For example, the registers <b>1518</b> may include vector register(s), SIMD register(s), general purpose register(s), flag register(s), segment register(s), machine specific register(s), instruction pointer register(s), control register(s), debug register(s), memory management register(s), machine check register(s), etc. The registers <b>1518</b> may be arranged in a bank as shown in <figref idref="DRAWINGS">FIG. <b>15</b></figref>. Alternatively, the registers <b>1518</b> may be organized in any other arrangement, format, or structure including distributed throughout the core <b>1502</b> to shorten access time. The bus <b>1522</b> may implement at least one of an I2C bus, a SPI bus, a PCI bus, or a PCIe bus</p><p id="p-0258" num="0147">Each core <b>1502</b> and/or, more generally, the microprocessor <b>1500</b> may include additional and/or alternate structures to those shown and described above. For example, one or more clock circuits, one or more power supplies, one or more power gates, one or more cache home agents (CHAs), one or more converged/common mesh stops (CMSs), one or more shifters (e.g., barrel shifter(s)) and/or other circuitry may be present. The microprocessor <b>1500</b> is a semiconductor device fabricated to include many transistors interconnected to implement the structures described above in one or more integrated circuits (ICs) contained in one or more packages. The processor circuitry may include and/or cooperate with one or more accelerators. In some examples, accelerators are implemented by logic circuitry to perform certain tasks more quickly and/or efficiently than can be done by a general purpose processor. Examples of accelerators include ASICs and FPGAs such as those discussed herein. A GPU or other programmable device can also be an accelerator. Accelerators may be on-board the processor circuitry, in the same chip package as the processor circuitry and/or in one or more separate packages from the processor circuitry.</p><p id="p-0259" num="0148"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a block diagram of another example implementation of the processor circuitry <b>1312</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref> or the processor circuitry <b>1412</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref>. In this example, the processor circuitry <b>1312</b>, <b>1412</b> is implemented by FPGA circuitry <b>1600</b>. The FPGA circuitry <b>1600</b> can be used, for example, to perform operations that could otherwise be performed by the example microprocessor <b>1500</b> of <figref idref="DRAWINGS">FIG. <b>15</b></figref> executing corresponding machine readable instructions. However, once configured, the FPGA circuitry <b>1600</b> instantiates the machine readable instructions in hardware and, thus, can often execute the operations faster than they could be performed by a general purpose microprocessor executing the corresponding software.</p><p id="p-0260" num="0149">More specifically, in contrast to the microprocessor <b>1500</b> of <figref idref="DRAWINGS">FIG. <b>15</b></figref> described above (which is a general purpose device that may be programmed to execute some or all of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>9</b>, <b>10</b>, <b>11</b></figref>, and/or <b>12</b> but whose interconnections and logic circuitry are fixed once fabricated), the FPGA circuitry <b>1600</b> of the example of <figref idref="DRAWINGS">FIG. <b>16</b></figref> includes interconnections and logic circuitry that may be configured and/or interconnected in different ways after fabrication to instantiate, for example, some or all of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>9</b>, <b>10</b>, <b>11</b></figref>, and/or <b>12</b>. In particular, the FPGA <b>1600</b> may be thought of as an array of logic gates, interconnections, and switches. The switches can be programmed to change how the logic gates are interconnected by the interconnections, effectively forming one or more dedicated logic circuits (unless and until the FPGA circuitry <b>1600</b> is reprogrammed). The configured logic circuits enable the logic gates to cooperate in different ways to perform different operations on data received by input circuitry. Those operations may correspond to some or all of the software represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>9</b>, <b>10</b>, <b>11</b></figref>, and/or <b>12</b>. As such, the FPGA circuitry <b>1600</b> may be structured to effectively instantiate some or all of the machine readable instructions of the flowcharts of <figref idref="DRAWINGS">FIGS. <b>9</b>, <b>10</b>, <b>11</b></figref>, and/or <b>12</b> as dedicated logic circuits to perform the operations corresponding to those software instructions in a dedicated manner analogous to an ASIC. Therefore, the FPGA circuitry <b>1600</b> may perform the operations corresponding to the some or all of the machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>9</b>, <b>10</b>, <b>11</b></figref>, and/or <b>12</b> faster than the general purpose microprocessor can execute the same.</p><p id="p-0261" num="0150">In the example of <figref idref="DRAWINGS">FIG. <b>16</b></figref>, the FPGA circuitry <b>1600</b> is structured to be programmed (and/or reprogrammed one or more times) by an end user by a hardware description language (HDL) such as Verilog. The FPGA circuitry <b>1600</b> of <figref idref="DRAWINGS">FIG. <b>16</b></figref>, includes example input/output (I/O) circuitry <b>1602</b> to obtain and/or output data to/from example configuration circuitry <b>1604</b> and/or external hardware (e.g., external hardware circuitry) <b>1606</b>. For example, the configuration circuitry <b>1604</b> may implement interface circuitry that may obtain machine readable instructions to configure the FPGA circuitry <b>1600</b>, or portion(s) thereof. In some such examples, the configuration circuitry <b>1604</b> may obtain the machine readable instructions from a user, a machine (e.g., hardware circuitry (e.g., programmed or dedicated circuitry) that may implement an Artificial Intelligence/Machine Learning (AI/ML) model to generate the instructions), etc. In some examples, the external hardware <b>1606</b> may implement the microprocessor <b>1500</b> of <figref idref="DRAWINGS">FIG. <b>15</b></figref>. The FPGA circuitry <b>1600</b> also includes an array of example logic gate circuitry <b>1608</b>, a plurality of example configurable interconnections <b>1610</b>, and example storage circuitry <b>1612</b>. The logic gate circuitry <b>1608</b> and interconnections <b>1610</b> are configurable to instantiate one or more operations that may correspond to at least some of the machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>9</b>, <b>10</b>, <b>11</b></figref>, and/or <b>12</b> and/or other desired operations. The logic gate circuitry <b>1508</b> shown in <figref idref="DRAWINGS">FIG. <b>16</b></figref> is fabricated in groups or blocks. Each block includes semiconductor-based electrical structures that may be configured into logic circuits. In some examples, the electrical structures include logic gates (e.g., And gates, Or gates, Nor gates, etc.) that provide basic building blocks for logic circuits. Electrically controllable switches (e.g., transistors) are present within each of the logic gate circuitry <b>1608</b> to enable configuration of the electrical structures and/or the logic gates to form circuits to perform desired operations. The logic gate circuitry <b>1608</b> may include other electrical structures such as look-up tables (LUTs), registers (e.g., flip-flops or latches), multiplexers, etc.</p><p id="p-0262" num="0151">The interconnections <b>1610</b> of the illustrated example are conductive pathways, traces, vias, or the like that may include electrically controllable switches (e.g., transistors) whose state can be changed by programming (e.g., using an HDL instruction language) to activate or deactivate one or more connections between one or more of the logic gate circuitry <b>1608</b> to program desired logic circuits.</p><p id="p-0263" num="0152">The storage circuitry <b>1612</b> of the illustrated example is structured to store result(s) of the one or more of the operations performed by corresponding logic gates. The storage circuitry <b>1612</b> may be implemented by registers or the like. In the illustrated example, the storage circuitry <b>1612</b> is distributed amongst the logic gate circuitry <b>1608</b> to facilitate access and increase execution speed.</p><p id="p-0264" num="0153">The example FPGA circuitry <b>1600</b> of <figref idref="DRAWINGS">FIG. <b>16</b></figref> also includes example Dedicated Operations Circuitry <b>1614</b>. In this example, the Dedicated Operations Circuitry <b>1614</b> includes special purpose circuitry <b>1616</b> that may be invoked to implement commonly used functions to avoid the need to program those functions in the field. Examples of such special purpose circuitry <b>1616</b> include memory (e.g., DRAM) controller circuitry, PCIe controller circuitry, clock circuitry, transceiver circuitry, memory, and multiplier-accumulator circuitry. Other types of special purpose circuitry may be present. In some examples, the FPGA circuitry <b>1600</b> may also include example general purpose programmable circuitry <b>1618</b> such as an example CPU <b>1620</b> and/or an example DSP <b>1622</b>. Other general purpose programmable circuitry <b>1618</b> may additionally or alternatively be present such as a GPU, an XPU, etc., that can be programmed to perform other operations.</p><p id="p-0265" num="0154">Although <figref idref="DRAWINGS">FIGS. <b>15</b> and <b>16</b></figref> illustrate two example implementations of the processor circuitry <b>1312</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref> and/or the processor circuitry <b>1412</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref>, many other approaches are contemplated. For example, as mentioned above, modern FPGA circuitry may include an on-board CPU, such as one or more of the example CPU <b>1620</b> of <figref idref="DRAWINGS">FIG. <b>16</b></figref>. Therefore, the processor circuitry <b>1312</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref> and/or the processor circuitry <b>1412</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref> may additionally be implemented by combining the example microprocessor <b>1500</b> of <figref idref="DRAWINGS">FIG. <b>15</b></figref> and the example FPGA circuitry <b>1600</b> of <figref idref="DRAWINGS">FIG. <b>16</b></figref>. In some such hybrid examples, a first portion of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>9</b>, <b>10</b>, <b>11</b></figref>, and/or <b>12</b> may be executed by one or more of the cores <b>1502</b> of <figref idref="DRAWINGS">FIG. <b>15</b></figref> and a second portion of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>9</b>, <b>10</b>, <b>11</b></figref>, and/or <b>12</b> may be executed by the FPGA circuitry <b>1600</b> of <figref idref="DRAWINGS">FIG. <b>16</b></figref>.</p><p id="p-0266" num="0155">In some examples, the processor circuitry <b>1312</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref> and/or the processor circuitry <b>1412</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref> may be in one or more packages. For example, the processor circuitry <b>1500</b> of <figref idref="DRAWINGS">FIG. <b>15</b></figref> and/or the FPGA circuitry <b>1600</b> of <figref idref="DRAWINGS">FIG. <b>16</b></figref> may be in one or more packages. In some examples, an XPU may be implemented by the processor circuitry <b>1312</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref> and/or the processor circuitry <b>1412</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref>, which may be in one or more packages. For example, the XPU may include a CPU in one package, a DSP in another package, a GPU in yet another package, and an FPGA in still yet another package.</p><p id="p-0267" num="0156">From the foregoing, it will be appreciated that example methods, apparatus and articles of manufacture have been disclosed that enable the estimation of the cardinality across the union of any number of Bloom filter arrays. Further, examples disclosed herein enable the estimation of the cardinality of any particular combination of disjoint datasets associated with multiple Bloom filter arrays in a memory and processor efficient manner because the cardinalities of all disjoint sets do not need to be calculated. Rather, estimations of the cardinality of the overall union of multiple Bloom filter arrays or any portion thereof defined by a particular set of disjoint sets is achieved by identifying a relevant subset of unions of the Bloom filter arrays corresponding to the user group of interest based on the inclusion-exclusion principle. Furthermore, based on principles of logarithms, the terms in an associated inclusion-exclusion expression can be combined into a single logarithm argument with the only values to be solved for being counts of 0s in particular Bloom filter arrays and/or bitwise unions of two or more such arrays, thereby enabling the estimation of cardinalities of user groups of interest in an efficient manner. The disclosed methods, apparatus and articles of manufacture are accordingly directed to one or more improvement(s) in the operation of a machine such as a computer or other electronic and/or mechanical device. Furthermore, examples disclosed herein provide the practical benefit of enabling database proprietors to share summary statistics (e.g., Bloom filter arrays) that preserve the privacy of users while still enabling reliable estimate of the cardinality of the union of such Bloom filter arrays indicative of unique audience sizes of media accessed by users represented by the Bloom filter arrays.</p><p id="p-0268" num="0157">Example 1 includes an apparatus comprising at least one memory, instructions in the apparatus, and processor circuitry to execute and/or instantiate the instructions to determine an inclusion-exclusion expression that defines an audience size for a user group of interest, terms in the inclusion-exclusion expression corresponding to either a first cardinality of a first one of at least three Bloom filter arrays or a second cardinality of a union of two or more of the Bloom filter arrays, different ones of the Bloom filter arrays representative of different sets of users who accessed media, and estimate, based on the inclusion-exclusion expression, the audience size of the user group of interest.</p><p id="p-0269" num="0158">Example 2 includes the apparatus of example 1, wherein the processor circuitry is to determine an argument for a logarithm based on the inclusion-exclusion expression, and estimate the audience size based on the logarithm.</p><p id="p-0270" num="0159">Example 3 includes the apparatus of example 2, wherein the argument includes at least one of (i) a first ratio of a first count of array elements with a particular value in the first Bloom filter array to a length of the Bloom filter arrays or (ii) a second ratio of a second count of array elements with the particular value in a bitwise union of two or more of the Bloom filter arrays.</p><p id="p-0271" num="0160">Example 4 includes the apparatus of example 3, wherein the particular value is example 0 includes example 5 includes the apparatus of example 3, wherein the argument includes the first ratio or the second ratio when the corresponding terms in the inclusion-exclusion expression are added, and the argument includes an inverse of the first ratio or an inverse of the second ratio when the corresponding terms in the inclusion-exclusion expression are subtracted.</p><p id="p-0272" num="0161">Example 6 includes the apparatus of example 3, wherein the first ratio and the second ratio include respective exponents corresponding to respective constant coefficients in front of the corresponding terms in the inclusion-exclusion expression.</p><p id="p-0273" num="0162">Example 7 includes the apparatus of example 1, wherein the processor circuitry is to identify a subset of mutually exclusive disjoint datasets associated with the different sets of users, the subset corresponding to the user group of interest, the inclusion-exclusion expression identified based on the subset.</p><p id="p-0274" num="0163">Example 8 includes the apparatus of example 7, wherein the subset corresponds to all of the mutually exclusive disjoint datasets, all of the mutually exclusive disjoint datasets corresponding to a union of all the different sets of users.</p><p id="p-0275" num="0164">Example 9 includes the apparatus of example 7, wherein the subset corresponds to less than a union of all the different sets of users.</p><p id="p-0276" num="0165">Example 10 includes the apparatus of example 1, wherein the processor circuitry is to determine a length for ones of the Bloom filter arrays that provide a relative error in the audience size estimate no greater than a relative error at a confidence level.</p><p id="p-0277" num="0166">Example 11 includes the apparatus of example 1, wherein the processor circuitry is to determine a relative error, at a confidence level, in the estimate of the audience size based on a length of ones of the Bloom filter arrays.</p><p id="p-0278" num="0167">Example 12 includes the apparatus of example 1, wherein different ones of the Bloom filter arrays are generated by different computers of different database proprietors, different ones of the different sets of users corresponding to ones of the users registered with respective ones of the different database proprietors.</p><p id="p-0279" num="0168">Example 13 includes an apparatus comprising at least one memory, and processor circuitry including one or more of at least one of a central processing unit, a graphic processing unit, or a digital signal processor, the at least one of the central processing unit, the graphic processing unit, or the digital signal processor having control circuitry to control data movement within the processor circuitry, arithmetic and logic circuitry to perform one or more first operations corresponding to instructions, and one or more registers to store a result of the one or more first operations, the instructions in the apparatus, a Field Programmable Gate Array (FPGA), the FPGA including logic gate circuitry, a plurality of configurable interconnections, and storage circuitry, the logic gate circuitry and the interconnections to perform one or more second operations corresponding to the instructions, the storage circuitry to store a result of the one or more second operations, or Application Specific Integrate Circuitry (ASIC) including logic gate circuitry to perform one or more third operations corresponding to the instructions, the processor circuitry to perform at least one of the first operations, the second operations or the third operations to instantiate expression generation circuitry to determine an inclusion-exclusion expression that defines an audience size for a user group of interest, terms in the inclusion-exclusion expression corresponding to either a first cardinality of a first one of at least three Bloom filter arrays or a second cardinality of a union of two or more of the Bloom filter arrays, different ones of the Bloom filter arrays representative of different sets of users who accessed media, and cardinality analysis circuitry to estimate, based on the inclusion-exclusion expression, the audience size of the user group of interest.</p><p id="p-0280" num="0169">Example 14 includes the apparatus of example 13, wherein the processor circuitry is to instantiate argument generation circuitry to determine an argument for a logarithm based on the inclusion-exclusion expression, the cardinality analysis circuitry to estimate the audience size based on the logarithm.</p><p id="p-0281" num="0170">Example 15 includes the apparatus of example 14, wherein the argument includes at least one of (i) a first ratio of a first count of array elements with a particular value in the first Bloom filter array to a length of the Bloom filter arrays or (ii) a second ratio of a second count of array elements with the particular value in a bitwise union of two or more of the Bloom filter arrays.</p><p id="p-0282" num="0171">Example 16 includes the apparatus of example 15, wherein the particular value is example 0 includes example 17 includes the apparatus of example 15, wherein the argument includes the first ratio or the second ratio when the corresponding terms in the inclusion-exclusion expression are added, and the argument includes an inverse of the first ratio or an inverse of the second ratio when the corresponding terms in the inclusion-exclusion expression are subtracted.</p><p id="p-0283" num="0172">Example 18 includes the apparatus of example 15, wherein the first ratio and the second ratio include respective exponents corresponding to respective constant coefficients in front of the corresponding terms in the inclusion-exclusion expression.</p><p id="p-0284" num="0173">Example 19 includes the apparatus of example 13, wherein the expression generation circuitry is to identify a subset of mutually exclusive disjoint datasets associated with the different sets of users, the subset corresponding to the user group of interest, the inclusion-exclusion expression identified based on the subset.</p><p id="p-0285" num="0174">Example 20 includes the apparatus of example 19, wherein the subset corresponds to all of the mutually exclusive disjoint datasets, all of the mutually exclusive disjoint datasets corresponding to a union of all the different sets of users.</p><p id="p-0286" num="0175">Example 21 includes the apparatus of example 19, wherein the subset corresponds to less than a union of all the different sets of users.</p><p id="p-0287" num="0176">Example 22 includes the apparatus of example 13, wherein the processor circuitry is to instantiate Bloom filter parameter analysis circuitry to determine a length for ones of the Bloom filter arrays that provide a relative error in the audience size estimate no greater than a relative error at a confidence level.</p><p id="p-0288" num="0177">Example 23 includes the apparatus of example 13, wherein the processor circuitry is to instantiate Bloom filter parameter analysis circuitry to determine a relative error, at a confidence level, in the estimate of the audience size based on a length of ones of the Bloom filter arrays.</p><p id="p-0289" num="0178">Example 24 includes the apparatus of example 13, wherein different ones of the Bloom filter arrays are generated by different computers of different database proprietors, different ones of the different sets of users corresponding to ones of the users registered with respective ones of the different database proprietors.</p><p id="p-0290" num="0179">Example 25 includes an apparatus comprising expression generation circuitry to determine an inclusion-exclusion expression that defines an audience size for a user group of interest, terms in the inclusion-exclusion expression corresponding to either a first cardinality of a first one of at least three Bloom filter arrays or a second cardinality of a union of two or more of the Bloom filter arrays, different ones of the Bloom filter arrays representative of different sets of users who accessed media, and cardinality analysis circuitry to estimate, based on the inclusion-exclusion expression, the audience size of the user group of interest.</p><p id="p-0291" num="0180">Example 26 includes the apparatus of example 25, further including argument generation circuitry to determine an argument for a logarithm based on the inclusion-exclusion expression, the cardinality analysis circuitry to estimate the audience size based on the logarithm.</p><p id="p-0292" num="0181">Example 27 includes the apparatus of example 26, wherein the argument includes at least one of (i) a first ratio of a first count of array elements with a particular value in the first Bloom filter array to a length of the Bloom filter arrays or (ii) a second ratio of a second count of array elements with the particular value in a bitwise union of two or more of the Bloom filter arrays.</p><p id="p-0293" num="0182">Example 28 includes the apparatus of example 27, wherein the particular value is example 0 includes example 29 includes the apparatus of example 27, wherein the argument includes the first ratio or the second ratio when the corresponding terms in the inclusion-exclusion expression are added, and the argument includes an inverse of the first ratio or an inverse of the second ratio when the corresponding terms in the inclusion-exclusion expression are subtracted.</p><p id="p-0294" num="0183">Example 30 includes the apparatus of example 27, wherein the first ratio and the second ratio include respective exponents corresponding to respective constant coefficients in front of the corresponding terms in the inclusion-exclusion expression.</p><p id="p-0295" num="0184">Example 31 includes the apparatus of example 25, wherein the expression generation circuitry is to identify a subset of mutually exclusive disjoint datasets associated with the different sets of users, the subset corresponding to the user group of interest, the inclusion-exclusion expression identified based on the subset.</p><p id="p-0296" num="0185">Example 32 includes the apparatus of example 31, wherein the subset corresponds to all of the mutually exclusive disjoint datasets, all of the mutually exclusive disjoint datasets corresponding to a union of all the different sets of users.</p><p id="p-0297" num="0186">Example 33 includes the apparatus of example 31, wherein the subset corresponds to less than a union of all the different sets of users.</p><p id="p-0298" num="0187">Example 34 includes the apparatus of example 25, further including Bloom filter parameter analysis circuitry to determine a length for ones of the Bloom filter arrays that provide a relative error in the audience size estimate no greater than a relative error at a confidence level.</p><p id="p-0299" num="0188">Example 35 includes the apparatus of example 25, further including Bloom filter parameter analysis circuitry to determine a relative error, at a confidence level, in the estimate of the audience size based on a length of ones of the Bloom filter arrays.</p><p id="p-0300" num="0189">Example 36 includes the apparatus of example 25, wherein different ones of the Bloom filter arrays are generated by different computers of different database proprietors, different ones of the different sets of users corresponding to ones of the users registered with respective ones of the different database proprietors.</p><p id="p-0301" num="0190">Example 37 includes At least one non-transitory computer readable medium comprising instructions that, when executed, cause at least one processor to at least determine an inclusion-exclusion expression that defines an audience size for a user group of interest, terms in the inclusion-exclusion expression corresponding to either a first cardinality of a first one of at least three Bloom filter arrays or a second cardinality of a union of two or more of the Bloom filter arrays, different ones of the Bloom filter arrays representative of different sets of users who accessed media, and estimate, based on the inclusion-exclusion expression, the audience size of the user group of interest.</p><p id="p-0302" num="0191">Example 38 includes the at least one non-transitory computer readable medium of example 37, wherein the instructions cause the at least one processor to determine an argument for a logarithm based on the inclusion-exclusion expression, and estimate the audience size based on the logarithm.</p><p id="p-0303" num="0192">Example 39 includes the at least one non-transitory computer readable medium of example 38, wherein the argument includes at least one of (i) a first ratio of a first count of array elements with a particular value in the first Bloom filter array to a length of the Bloom filter arrays or (ii) a second ratio of a second count of array elements with the particular value in a bitwise union of two or more of the Bloom filter arrays.</p><p id="p-0304" num="0193">Example 40 includes the at least one non-transitory computer readable medium of example 39, wherein the particular value is example 0 includes example 41 includes the at least one non-transitory computer readable medium of example 39, wherein the argument includes the first ratio or the second ratio when the corresponding terms in the inclusion-exclusion expression are added, and the argument includes an inverse of the first ratio or an inverse of the second ratio when the corresponding terms in the inclusion-exclusion expression are subtracted.</p><p id="p-0305" num="0194">Example 42 includes the at least one non-transitory computer readable medium of example 39, wherein the first ratio and the second ratio include respective exponents corresponding to respective constant coefficients in front of the corresponding terms in the inclusion-exclusion expression.</p><p id="p-0306" num="0195">Example 43 includes the at least one non-transitory computer readable medium of example 37, wherein the instructions cause the at least one processor to identify a subset of mutually exclusive disjoint datasets associated with the different sets of users, the subset corresponding to the user group of interest, the inclusion-exclusion expression identified based on the subset.</p><p id="p-0307" num="0196">Example 44 includes the at least one non-transitory computer readable medium of example 43, wherein the subset corresponds to all of the mutually exclusive disjoint datasets, all of the mutually exclusive disjoint datasets corresponding to a union of all the different sets of users.</p><p id="p-0308" num="0197">Example 45 includes the at least one non-transitory computer readable medium of example 43, wherein the subset corresponds to less than a union of all the different sets of users.</p><p id="p-0309" num="0198">Example 46 includes the at least one non-transitory computer readable medium of example 37, wherein the instructions cause the at least one processor to determine a length for ones of the Bloom filter arrays that provide a relative error in the audience size estimate no greater than a relative error at a confidence level.</p><p id="p-0310" num="0199">Example 47 includes the at least one non-transitory computer readable medium of example 37, wherein the instructions cause the at least one processor to determine a relative error, at a confidence level, in the estimate of the audience size based on a length of ones of the Bloom filter arrays.</p><p id="p-0311" num="0200">Example 48 includes the at least one non-transitory computer readable medium of example 37, wherein different ones of the Bloom filter arrays are generated by different computers of different database proprietors, different ones of the different sets of users corresponding to ones of the users registered with respective ones of the different database proprietors.</p><p id="p-0312" num="0201">Example 49 includes an apparatus comprising means for generating an expression to determine an inclusion-exclusion expression that defines an audience size for a user group of interest, terms in the inclusion-exclusion expression corresponding to either a first cardinality of a first one of at least three Bloom filter arrays or a second cardinality of a union of two or more of the Bloom filter arrays, different ones of the Bloom filter arrays representative of different sets of users who accessed media, and means for estimating the audience size of the user group of interest based on the inclusion-exclusion expression.</p><p id="p-0313" num="0202">Example 50 includes the apparatus of example 49, further including means for determining an argument for a logarithm based on the inclusion-exclusion expression, the estimating means to estimate the audience size based on the logarithm.</p><p id="p-0314" num="0203">Example 51 includes the apparatus of example 50, wherein the argument includes at least one of (i) a first ratio of a first count of array elements with a particular value in the first Bloom filter array to a length of the Bloom filter arrays or (ii) a second ratio of a second count of array elements with the particular value in a bitwise union of two or more of the Bloom filter arrays.</p><p id="p-0315" num="0204">Example 52 includes the apparatus of example 51, wherein the particular value is example 0 includes example 53 includes the apparatus of example 51, wherein the argument includes the first ratio or the second ratio when the corresponding terms in the inclusion-exclusion expression are added, and the argument includes an inverse of the first ratio or an inverse of the second ratio when the corresponding terms in the inclusion-exclusion expression are subtracted.</p><p id="p-0316" num="0205">Example 54 includes the apparatus of example 51, wherein the first ratio and the second ratio include respective exponents corresponding to respective constant coefficients in front of the corresponding terms in the inclusion-exclusion expression.</p><p id="p-0317" num="0206">Example 55 includes the apparatus of example 49, wherein the expression generating means is to identify a subset of mutually exclusive disjoint datasets associated with the different sets of users, the subset corresponding to the user group of interest, the inclusion-exclusion expression identified based on the subset.</p><p id="p-0318" num="0207">Example 56 includes the apparatus of example 55, wherein the subset corresponds to all of the mutually exclusive disjoint datasets, all of the mutually exclusive disjoint datasets corresponding to a union of all the different sets of users.</p><p id="p-0319" num="0208">Example 57 includes the apparatus of example 55, wherein the subset corresponds to less than a union of all the different sets of users.</p><p id="p-0320" num="0209">Example 58 includes the apparatus of example 49, further including means for determining Bloom filter parameters, the Bloom filter parameters determining means to determine a length for ones of the Bloom filter arrays that provide a relative error in the audience size estimate no greater than a relative error at a confidence level.</p><p id="p-0321" num="0210">Example 59 includes the apparatus of example 49, further including means for determining Bloom filter parameters, the Bloom filter parameters determining means to determine a relative error, at a confidence level, in the estimate of the audience size based on a length of ones of the Bloom filter arrays.</p><p id="p-0322" num="0211">Example 60 includes the apparatus of example 49, wherein different ones of the Bloom filter arrays are generated by different computers of different database proprietors, different ones of the different sets of users corresponding to ones of the users registered with respective ones of the different database proprietors.</p><p id="p-0323" num="0212">Example 61 includes a method comprising determining, by executing an instruction with at least one processor, an inclusion-exclusion expression that defines an audience size for a user group of interest, terms in the inclusion-exclusion expression corresponding to either a first cardinality of a first one of at least three Bloom filter arrays or a second cardinality of a union of two or more of the Bloom filter arrays, different ones of the Bloom filter arrays representative of different sets of users who accessed media, and estimating, based on the inclusion-exclusion expression, the audience size of the user group of interest.</p><p id="p-0324" num="0213">Example 62 includes the method of example 61, further including determining an argument for a logarithm based on the inclusion-exclusion expression, and estimating the audience size based on the logarithm.</p><p id="p-0325" num="0214">Example 63 includes the method of example 62, wherein the argument includes at least one of (i) a first ratio of a first count of array elements with a particular value in the first Bloom filter array to a length of the Bloom filter arrays or (ii) a second ratio of a second count of array elements with the particular value in a bitwise union of two or more of the Bloom filter arrays.</p><p id="p-0326" num="0215">Example 64 includes the method of example 63, wherein the particular value is example 0 includes example 65 includes the method of example 63, wherein the argument includes the first ratio or the second ratio when the corresponding terms in the inclusion-exclusion expression are added, and the argument includes an inverse of the first ratio or an inverse of the second ratio when the corresponding terms in the inclusion-exclusion expression are subtracted.</p><p id="p-0327" num="0216">Example 66 includes the method of example 63, wherein the first ratio and the second ratio include respective exponents corresponding to respective constant coefficients in front of the corresponding terms in the inclusion-exclusion expression.</p><p id="p-0328" num="0217">Example 67 includes the method of example 61, further including identifying a subset of mutually exclusive disjoint datasets associated with the different sets of users, the subset corresponding to the user group of interest, the inclusion-exclusion expression identified based on the subset.</p><p id="p-0329" num="0218">Example 68 includes the method of example 67, wherein the subset corresponds to all of the mutually exclusive disjoint datasets, all of the mutually exclusive disjoint datasets corresponding to a union of all the different sets of users.</p><p id="p-0330" num="0219">Example 69 includes the method of example 67, wherein the subset corresponds to less than a union of all the different sets of users.</p><p id="p-0331" num="0220">Example 70 includes the method of example 61, further including determining a length for ones of the Bloom filter arrays that provide a relative error in the audience size estimate no greater than a relative error at a confidence level.</p><p id="p-0332" num="0221">Example 71 includes the method of example 61, further including determining a relative error, at a confidence level, in the estimate of the audience size based on a length of ones of the Bloom filter arrays.</p><p id="p-0333" num="0222">Example 72 includes the method of example 61, wherein different ones of the Bloom filter arrays are generated by different computers of different database proprietors, different ones of the different sets of users corresponding to ones of the users registered with respective ones of the different database proprietors.</p><p id="p-0334" num="0223">Although certain example systems, methods, apparatus and articles of manufacture have been disclosed herein, the scope of coverage of this patent is not limited thereto. On the contrary, this patent covers all systems, methods, apparatus and articles of manufacture fairly falling within the scope of the claims of this patent.</p><p id="p-0335" num="0224">The following claims are hereby incorporated into this Detailed Description by this reference, with each claim standing on its own as a separate embodiment of the present disclosure.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001 MATH-US-00001-2 MATH-US-00001-3" nb-file="US20230004997A1-20230105-M00001.NB"><img id="EMI-M00001" he="26.08mm" wi="76.20mm" file="US20230004997A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230004997A1-20230105-M00002.NB"><img id="EMI-M00002" he="12.70mm" wi="76.20mm" file="US20230004997A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230004997A1-20230105-M00003.NB"><img id="EMI-M00003" he="5.67mm" wi="76.20mm" file="US20230004997A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004 MATH-US-00004-2" nb-file="US20230004997A1-20230105-M00004.NB"><img id="EMI-M00004" he="9.91mm" wi="76.20mm" file="US20230004997A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00005" nb-file="US20230004997A1-20230105-M00005.NB"><img id="EMI-M00005" he="5.67mm" wi="76.20mm" file="US20230004997A1-20230105-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00006" nb-file="US20230004997A1-20230105-M00006.NB"><img id="EMI-M00006" he="5.67mm" wi="76.20mm" file="US20230004997A1-20230105-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00007" nb-file="US20230004997A1-20230105-M00007.NB"><img id="EMI-M00007" he="5.67mm" wi="76.20mm" file="US20230004997A1-20230105-M00007.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00008 MATH-US-00008-2" nb-file="US20230004997A1-20230105-M00008.NB"><img id="EMI-M00008" he="12.02mm" wi="76.20mm" file="US20230004997A1-20230105-M00008.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00009" nb-file="US20230004997A1-20230105-M00009.NB"><img id="EMI-M00009" he="5.67mm" wi="76.20mm" file="US20230004997A1-20230105-M00009.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00010" nb-file="US20230004997A1-20230105-M00010.NB"><img id="EMI-M00010" he="5.67mm" wi="76.20mm" file="US20230004997A1-20230105-M00010.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00011" nb-file="US20230004997A1-20230105-M00011.NB"><img id="EMI-M00011" he="13.04mm" wi="76.20mm" file="US20230004997A1-20230105-M00011.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00012" nb-file="US20230004997A1-20230105-M00012.NB"><img id="EMI-M00012" he="6.35mm" wi="76.20mm" file="US20230004997A1-20230105-M00012.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00013" nb-file="US20230004997A1-20230105-M00013.NB"><img id="EMI-M00013" he="6.01mm" wi="76.20mm" file="US20230004997A1-20230105-M00013.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00014" nb-file="US20230004997A1-20230105-M00014.NB"><img id="EMI-M00014" he="7.03mm" wi="76.20mm" file="US20230004997A1-20230105-M00014.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00015" nb-file="US20230004997A1-20230105-M00015.NB"><img id="EMI-M00015" he="6.01mm" wi="76.20mm" file="US20230004997A1-20230105-M00015.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00016" nb-file="US20230004997A1-20230105-M00016.NB"><img id="EMI-M00016" he="7.03mm" wi="76.20mm" file="US20230004997A1-20230105-M00016.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00017" nb-file="US20230004997A1-20230105-M00017.NB"><img id="EMI-M00017" he="7.03mm" wi="76.20mm" file="US20230004997A1-20230105-M00017.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00018" nb-file="US20230004997A1-20230105-M00018.NB"><img id="EMI-M00018" he="9.91mm" wi="76.20mm" file="US20230004997A1-20230105-M00018.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00019" nb-file="US20230004997A1-20230105-M00019.NB"><img id="EMI-M00019" he="5.67mm" wi="76.20mm" file="US20230004997A1-20230105-M00019.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00020 MATH-US-00020-2" nb-file="US20230004997A1-20230105-M00020.NB"><img id="EMI-M00020" he="16.59mm" wi="76.20mm" file="US20230004997A1-20230105-M00020.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00021" nb-file="US20230004997A1-20230105-M00021.NB"><img id="EMI-M00021" he="6.01mm" wi="76.20mm" file="US20230004997A1-20230105-M00021.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00022 MATH-US-00022-2 MATH-US-00022-3" nb-file="US20230004997A1-20230105-M00022.NB"><img id="EMI-M00022" he="19.73mm" wi="76.20mm" file="US20230004997A1-20230105-M00022.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00023" nb-file="US20230004997A1-20230105-M00023.NB"><img id="EMI-M00023" he="6.01mm" wi="76.20mm" file="US20230004997A1-20230105-M00023.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00024" nb-file="US20230004997A1-20230105-M00024.NB"><img id="EMI-M00024" he="6.01mm" wi="76.20mm" file="US20230004997A1-20230105-M00024.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00025" nb-file="US20230004997A1-20230105-M00025.NB"><img id="EMI-M00025" he="4.91mm" wi="76.20mm" file="US20230004997A1-20230105-M00025.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00026 MATH-US-00026-2 MATH-US-00026-3" nb-file="US20230004997A1-20230105-M00026.NB"><img id="EMI-M00026" he="17.27mm" wi="76.20mm" file="US20230004997A1-20230105-M00026.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00027" nb-file="US20230004997A1-20230105-M00027.NB"><img id="EMI-M00027" he="5.67mm" wi="76.20mm" file="US20230004997A1-20230105-M00027.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00028" nb-file="US20230004997A1-20230105-M00028.NB"><img id="EMI-M00028" he="5.67mm" wi="76.20mm" file="US20230004997A1-20230105-M00028.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00029" nb-file="US20230004997A1-20230105-M00029.NB"><img id="EMI-M00029" he="5.67mm" wi="76.20mm" file="US20230004997A1-20230105-M00029.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00030" nb-file="US20230004997A1-20230105-M00030.NB"><img id="EMI-M00030" he="6.69mm" wi="76.20mm" file="US20230004997A1-20230105-M00030.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00031" nb-file="US20230004997A1-20230105-M00031.NB"><img id="EMI-M00031" he="3.56mm" wi="76.20mm" file="US20230004997A1-20230105-M00031.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00032" nb-file="US20230004997A1-20230105-M00032.NB"><img id="EMI-M00032" he="3.56mm" wi="76.20mm" file="US20230004997A1-20230105-M00032.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An apparatus comprising:<claim-text>at least one memory;</claim-text><claim-text>instructions in the apparatus; and</claim-text><claim-text>processor circuitry to execute and/or instantiate the instructions to:<claim-text>determine an inclusion-exclusion expression that defines an audience size for a user group of interest, terms in the inclusion-exclusion expression corresponding to either a first cardinality of a first one of at least three Bloom filter arrays or a second cardinality of a union of two or more of the Bloom filter arrays, different ones of the Bloom filter arrays representative of different sets of users who accessed media; and</claim-text><claim-text>estimate, based on the inclusion-exclusion expression, the audience size of the user group of interest.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor circuitry is to:<claim-text>determine an argument for a logarithm based on the inclusion-exclusion expression; and</claim-text><claim-text>estimate the audience size based on the logarithm.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The apparatus of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the argument includes at least one of (i) a first ratio of a first count of array elements with a particular value in the first Bloom filter array to a length of the Bloom filter arrays or (ii) a second ratio of a second count of array elements with the particular value in a bitwise union of two or more of the Bloom filter arrays.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The apparatus of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the particular value is 0.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The apparatus of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the argument includes the first ratio or the second ratio when the corresponding terms in the inclusion-exclusion expression are added, and the argument includes an inverse of the first ratio or an inverse of the second ratio when the corresponding terms in the inclusion-exclusion expression are subtracted.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The apparatus of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the first ratio and the second ratio include respective exponents corresponding to respective constant coefficients in front of the corresponding terms in the inclusion-exclusion expression.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor circuitry is to identify a subset of mutually exclusive disjoint datasets associated with the different sets of users, the subset corresponding to the user group of interest, the inclusion-exclusion expression identified based on the subset.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The apparatus of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the subset corresponds to all of the mutually exclusive disjoint datasets, all of the mutually exclusive disjoint datasets corresponding to a union of all the different sets of users.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The apparatus of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the subset corresponds to less than a union of all the different sets of users.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor circuitry is to determine a length for ones of the Bloom filter arrays that provide a relative error in the audience size estimate no greater than a relative error at a confidence level.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor circuitry is to determine a relative error, at a confidence level, in the estimate of the audience size based on a length of ones of the Bloom filter arrays.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein different ones of the Bloom filter arrays are generated by different computers of different database proprietors, different ones of the different sets of users corresponding to ones of the users registered with respective ones of the different database proprietors.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. An apparatus comprising:<claim-text>at least one memory; and</claim-text><claim-text>processor circuitry including one or more of:<claim-text>at least one of a central processing unit, a graphic processing unit, or a digital signal processor, the at least one of the central processing unit, the graphic processing unit, or the digital signal processor having control circuitry to control data movement within the processor circuitry, arithmetic and logic circuitry to perform one or more first operations corresponding to instructions, and one or more registers to store a result of the one or more first operations, the instructions in the apparatus;</claim-text><claim-text>a Field Programmable Gate Array (FPGA), the FPGA including logic gate circuitry, a plurality of configurable interconnections, and storage circuitry, the logic gate circuitry and the interconnections to perform one or more second operations corresponding to the instructions, the storage circuitry to store a result of the one or more second operations; or</claim-text><claim-text>Application Specific Integrate Circuitry (ASIC) including logic gate circuitry to perform one or more third operations corresponding to the instructions;</claim-text></claim-text><claim-text>the processor circuitry to perform at least one of the first operations, the second operations or the third operations to instantiate:<claim-text>expression generation circuitry to determine an inclusion-exclusion expression that defines an audience size for a user group of interest, terms in the inclusion-exclusion expression corresponding to either a first cardinality of a first one of at least three Bloom filter arrays or a second cardinality of a union of two or more of the Bloom filter arrays, different ones of the Bloom filter arrays representative of different sets of users who accessed media; and</claim-text><claim-text>cardinality analysis circuitry to estimate, based on the inclusion-exclusion expression, the audience size of the user group of interest.</claim-text></claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the processor circuitry is to instantiate argument generation circuitry to determine an argument for a logarithm based on the inclusion-exclusion expression, the cardinality analysis circuitry to estimate the audience size based on the logarithm.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The apparatus of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the argument includes at least one of (i) a first ratio of a first count of array elements with a particular value in the first Bloom filter array to a length of the Bloom filter arrays or (ii) a second ratio of a second count of array elements with the particular value in a bitwise union of two or more of the Bloom filter arrays.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. (canceled)</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. (canceled)</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. (canceled)</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the expression generation circuitry is to identify a subset of mutually exclusive disjoint datasets associated with the different sets of users, the subset corresponding to the user group of interest, the inclusion-exclusion expression identified based on the subset.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The apparatus of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the subset corresponds to all of the mutually exclusive disjoint datasets, all of the mutually exclusive disjoint datasets corresponding to a union of all the different sets of users.</claim-text></claim><claim id="CLM-21-36" num="21-36"><claim-text><b>21</b>-<b>36</b>. (canceled)</claim-text></claim><claim id="CLM-00037" num="00037"><claim-text><b>37</b>. At least one non-transitory computer readable medium comprising instructions that, when executed, cause at least one processor to at least:<claim-text>determine an inclusion-exclusion expression that defines an audience size for a user group of interest, terms in the inclusion-exclusion expression corresponding to either a first cardinality of a first one of at least three Bloom filter arrays or a second cardinality of a union of two or more of the Bloom filter arrays, different ones of the Bloom filter arrays representative of different sets of users who accessed media; and</claim-text><claim-text>estimate, based on the inclusion-exclusion expression, the audience size of the user group of interest.</claim-text></claim-text></claim><claim id="CLM-00038" num="00038"><claim-text><b>38</b>. The at least one non-transitory computer readable medium of <claim-ref idref="CLM-00037">claim 37</claim-ref>, wherein the instructions cause the at least one processor to:<claim-text>determine an argument for a logarithm based on the inclusion-exclusion expression; and</claim-text><claim-text>estimate the audience size based on the logarithm.</claim-text></claim-text></claim><claim id="CLM-00039" num="00039"><claim-text><b>39</b>. The at least one non-transitory computer readable medium of <claim-ref idref="CLM-00038">claim 38</claim-ref>, wherein the argument includes at least one of (i) a first ratio of a first count of array elements with a particular value in the first Bloom filter array to a length of the Bloom filter arrays or (ii) a second ratio of a second count of array elements with the particular value in a bitwise union of two or more of the Bloom filter arrays.</claim-text></claim><claim id="CLM-40-72" num="40-72"><claim-text><b>40</b>-<b>72</b>. (canceled)</claim-text></claim></claims></us-patent-application>