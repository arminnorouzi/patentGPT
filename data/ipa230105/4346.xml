<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004347A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004347</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17930915</doc-number><date>20220909</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>32</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2455</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>32</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>24556</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">MERGING DATABASE TABLES BY CLASSIFYING COMPARISON SIGNATURES</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16787576</doc-number><date>20200211</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11442694</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17930915</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15729990</doc-number><date>20171011</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10599395</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16787576</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>AMPERITY, INC.</orgname><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SLAGER</last-name><first-name>Derek</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>MEYLES</last-name><first-name>Stephen</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>YAN</last-name><first-name>Yan</first-name><address><city>New York</city><state>NY</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>SAKODA</last-name><first-name>Carlos</first-name><address><city>Bellevue</city><state>WA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The present disclosure relates to merging database tables. Systems and methods may involve performing a comparison between the first set of records and the second set of records and identifying a plurality of record pairs based on the comparison. Each record pair may comprise a record in the first set of records and a record in the second set of records. In addition, A feature signature may be generated for each record pair by comparing field values in each record pair. The feature signature may be classified to identify at least one related record pair. A merged database table may be generated such that it comprises the at least one related record pair and comprises a set of unique records among selected from the first set of records and the second set of records.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="99.31mm" wi="158.75mm" file="US20230004347A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="214.71mm" wi="179.75mm" orientation="landscape" file="US20230004347A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="212.51mm" wi="164.42mm" orientation="landscape" file="US20230004347A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="223.94mm" wi="167.13mm" orientation="landscape" file="US20230004347A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="232.33mm" wi="160.78mm" orientation="landscape" file="US20230004347A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="242.40mm" wi="149.69mm" orientation="landscape" file="US20230004347A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="214.21mm" wi="189.23mm" orientation="landscape" file="US20230004347A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="192.53mm" wi="155.70mm" file="US20230004347A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="122.68mm" wi="143.51mm" file="US20230004347A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED MATTERS</heading><p id="p-0002" num="0001">This application is a continuation of, and claims the benefit of, U.S. patent application Ser. No. 16/787,576, filed Feb. 11, 2020 which is a continuation of, and claims the benefit of, U.S. patent application Ser. No. 15/729,990, filed Oct. 11, 2017 (now U.S. Pat. No. 10,599,395) both of which are hereby incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">In the course of business, large amounts of data records are collected and stored in one or more databases. These data records may reflect customer information, business records, events, products, or other records pertinent to a relevant business. These records can accumulate from a number of data sources. For example, a retail company may sell products over different channels such as online e-commerce platforms as well as physical store locations. The retail company may maintain separate customer records for each of its different retail channels.</p><p id="p-0004" num="0003">Records may be maintained in separate database tables. Merging two database tables may be time consuming and costly. The present disclosure describes systems and methods of managing a database that overcomes a number of the drawbacks of prior art solutions. The advantages and benefits of the present disclosure will be discussed in further detail.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004">Many aspects of the present disclosure can be better understood with reference to the attached drawings. The components in the drawings are not necessarily drawn to scale, with emphasis instead being placed upon clearly illustrating the principles of the disclosure. Moreover, in the drawings, like reference numerals designate corresponding parts throughout several views.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a drawing of a computing system <b>100</b> according to various embodiments of the present disclosure.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an example of database tables of <figref idref="DRAWINGS">FIG. <b>1</b></figref> according to various embodiments of the present disclosure.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an is an example of merging two database tables in manner that is not dynamic.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an example of dynamically merging database tables within the computing system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> according to various embodiments of the present disclosure.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example of operations performed by the software application <b>106</b> in the computing system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> according to various embodiments of the present disclosure.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIGS. <b>6</b>A and <b>6</b>B</figref> are examples of dynamically merged database tables created within the computing system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> according to various embodiments of the present disclosure.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart illustrating an example of the functionality of the software application executed in a computing system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> according to various embodiments of the present disclosure.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a schematic block diagram that provides one example illustration of a computing system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> according to various embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0014" num="0013">Various embodiments of the present disclosure relate to dynamically merging two or more database tables based on one or more user parameters. Merging database tables can be a time consuming and burdensome process. Techniques such as extract transform load (ETL) are time intensive processes that may require significant user input and human intervention to create a merged database table. This may be the case where there is a likelihood that redundant records exist within the two or more database tables that are being merged.</p><p id="p-0015" num="0014">The present disclosure provides an effective way of dynamically merging two or more database tables. A user may specify parameters such as the desired database fields and/or a confidence level relating to the likelihood that two records represent the same real-world entity. In response to these parameters, a merged database table is dynamically generated. The original database tables are persistently stored so that they can be used to generate a variety of dynamically merged database tables as a user varies between different database parameters. Moreover, any links to relational tables continue to exist. This way, the dynamically created database table uses the preexisting links to any relational tables.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a computing system <b>100</b> according to various embodiments. The computing system <b>100</b> is made up of a combination of hardware and software. The computing system <b>100</b> includes a database <b>103</b>, software application <b>106</b>, and a classifier <b>109</b>. The computing system <b>100</b> may be connected to networks such as the Internet, intranets, extranets, wide area networks (WANs), local area networks (LANs), wired networks, wireless networks, or other suitable networks, etc., or any combination of two or more such networks.</p><p id="p-0017" num="0016">The computing system <b>100</b> may comprise, for example, a server computer or any other system providing computing capability. Alternatively, the computing system <b>100</b> may employ a plurality of computing devices that may be arranged, for example, in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example, the computing system <b>100</b> may include a plurality of computing devices that together may comprise a hosted computing resource, a grid computing resource and/or any other distributed computing arrangement. In some cases, the computing system <b>100</b> may correspond to an elastic computing resource where the allotted capacity of processing, network, storage, or other computing-related resources may vary over time. The computing system <b>100</b> may implement one or more virtual machines that use the resources of the computing system <b>100</b>.</p><p id="p-0018" num="0017">Various applications and/or other functionality may be executed in the computing system <b>100</b> according to various embodiments. Also, various data is stored in the database <b>103</b> or other memory that is accessible to the computing system <b>100</b>. The database <b>103</b> may represent one or more databases <b>103</b>.</p><p id="p-0019" num="0018">The data stored in the database <b>103</b> includes one or more database tables <b>112</b>. A database table <b>112</b> includes several records, where each record has one or more corresponding fields. A database table <b>112</b> may be linked or otherwise associated with one or more relational tables <b>115</b>. The components executed on the computing system <b>100</b> include a software application <b>106</b> and a classifier <b>109</b>, which may access the contents of the database <b>103</b>. When stored in a relational database <b>103</b>, a database table <b>112</b> may be linked to one or more relational tables <b>115</b>. For example, if an airline company maintained a database table <b>112</b> that stored customer records, there may be a relational table <b>115</b> storing the flight history for each customer. The contents of the relational table <b>115</b> links to a corresponding record.</p><p id="p-0020" num="0019">Next, a general description of the operation of the various components of the computing system <b>100</b> is provided. Various businesses or other entities utilize the computing system to store information in a database <b>103</b>. For example, businesses may want to store records reflecting customers, products, transactions, events, items, or any other piece of information relevant to the business. Records are collected over time and stored in one or more database tables <b>112</b>. For example, when a business gets a new customer, a software program may create a record reflecting the new customer. This record may include the customer's name, address, contact information, or any other information that identifies the customer. Such information is stored as fields within a database table. The values in a field may be used to calculate one or more features between records.</p><p id="p-0021" num="0020">In practice, a single record is sufficient to represent a customer. However, it is possible that duplicate or redundant records are inadvertently or unintentionally created and/or exist within one or more databases <b>103</b>. For example, a customer may register with a business via an online portal which creates a customer record for that customer. Later, the same customer may inadvertently register again with the online portal, thereby creating a redundant customer record in the database table. Also, a company may have a first database table for its brick and mortar customers and a second database table for its e-commerce customers. It is possible that the same customer has a corresponding record in these two different database tables. As another example, two businesses maintaining their own customer records may merge such that the same customer may exist in two different database tables <b>112</b>. The resulting merged database table could have redundant records reflecting the same customer.</p><p id="p-0022" num="0021">Because multiple records may represent the same real-world entity, it is desirable to group related records together. A classifier <b>109</b> may be used to determine whether two records should be classified as a match based on the degree of related or common values between the two records. The classifier <b>109</b> may be a binary classifier that determines whether a pair of records represent the same real-world entity or whether they do not represent the same real-world entity. A record pair (i.e., two records being compared) is considered to be a related record pair if it represents the same real-world entity or an unrelated pair if it does not. A classifier <b>109</b> may make decisions based on a threshold level of similarity. The classifier <b>109</b> may calculate a confidence level (e.g., a score) that quantifies the degree of similarity between two records. Then, the classifier <b>109</b> may output a binary result (e.g., yes or no) that the two records are similar enough to be deemed a related record pair if the confidence level exceeds a threshold confidence level. The classifier <b>109</b> may make its determination based on the extent that two records contain similar information.</p><p id="p-0023" num="0022">When comparing records, different combinations of field values among the two records are compared. For example, in one embodiment, the value of F1 of the first record is compared to the value of F1 of a second record, then the value of F2 of the first record is compared to the value of F2 of the second record, and so on. The comparison of two values yields a feature with respect to the record pair. A feature is a programmed calculation taking as inputs M records and/or other data, such as external metadata, and returning a numeric value as output. The variable M=2 in the case of handling a record pair. That numeric output may be, for example, a real value bounded between 0 and 1, or a binary value with two distinct outputs, 0 being considered &#x201c;false&#x201d; and 1 being considered &#x201c;true.&#x201d; A feature score is the specific output value generated by a feature for a given set of records or record pair. A feature score refers to the degree that two field values are the same.</p><p id="p-0024" num="0023">For example, comparing the first name field value of &#x201c;Joseph&#x201d; to the first name field value of &#x201c;Joe&#x201d; may yield a &#x201c;first name feature&#x201d; having a feature score of .88 on a scale of 0 to 1, where 0 means no-match and 1 means a perfect match. In other embodiments, the first name feature may be a binary value of &#x201c;true/T,&#x201d; meaning match, or &#x201c;false/F&#x201d;, meaning no-match. In addition, features may be determined based on a combination of field values. Here, a feature may be &#x201c;full name match,&#x201d; which is a feature based on concatenating a first name field value with a last name field value.</p><p id="p-0025" num="0024">The software application <b>106</b> dynamically merges two or more database tables <b>112</b> based on specified user parameters. The software application <b>106</b> uses the classifier <b>109</b> to determine whether two records appearing in two different database tables <b>112</b> should be represented as a single record in the dynamically merged database table. The software application <b>106</b> also creates the dynamically merged database table based on a user's specification of desired fields. The software application <b>106</b> may generate numerous dynamically merged database tables based on different parameters because the underlying database tables <b>112</b> are preserved along with any links to relational tables <b>115</b>.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows an example of a first database table <b>112</b><i>a </i>and a second database table <b>112</b><i>b </i>that represent examples of database tables <b>112</b> stored in the database <b>103</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> according to various embodiments of the present disclosure. A database table <b>112</b> includes a set of records <b>201</b> and one or more fields <b>213</b>. A record <b>201</b> may or may not have all its fields <b>213</b> populated with values. Each record is intended to represent an entity such as, for example, a person, thing, event, or place. Such entities reflect something that is part of the real-world. Moreover, records may contain different or possibly conflicting information even though they intend to represent the same real-world entity.</p><p id="p-0027" num="0026">For example, in the first database table <b>112</b><i>a, </i>a first record &#x201c;A1&#x201d; is intended to be the record representing an individual named &#x201c;Jane Doe.&#x201d; Record &#x201c;A2&#x201d; is intended to be the record representing &#x201c;John Smith&#x201d; and so on. A second database table <b>112</b><i>b </i>has different records <b>201</b>, but some of those records may represent the same entity that is reflected by a record <b>201</b> in the first database table <b>112</b><i>a. </i>For example, both records &#x201c;A3&#x201d; and &#x201c;B3&#x201d; may represent the same individual named &#x201c;Stephen Meyles,&#x201d; even though they are separate records <b>201</b>.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>2</b></figref> also shows how each database table <b>112</b> has its own set of fields <b>213</b>. A field <b>213</b> provides a specification of a particular attribute of a record <b>201</b>. If a record is a customer record, then a field <b>213</b> may be &#x201c;first name&#x201d; or &#x201c;last name.&#x201d; The first database table <b>112</b><i>a </i>has three fields being F1, F2, and F3 which refer to &#x201c;first name,&#x201d; &#x201c;last name,&#x201d; and &#x201c;area code,&#x201d; respectively. The second database table <b>112</b><i>b </i>has three fields being F1, F2, and F4 which refer to &#x201c;first name,&#x201d; &#x201c;last name,&#x201d; and &#x201c;zip code,&#x201d; respectively. Fields F1 and F2 are common to both the first database table <b>112</b><i>a </i>and the second database table <b>112</b><i>b. </i>Fields F3 and F4 are not.</p><p id="p-0029" num="0028">In various embodiments, the fields <b>213</b> are semantic fields such that they are normalized across several database tables <b>112</b>. For example, a first database table <b>112</b><i>a </i>may have its F2 field originally called &#x201c;last_name&#x201d; while a second database table <b>112</b><i>b </i>may have its F2 field originally called &#x201c;surname.&#x201d; By using semantic fields, the first and second database tables <b>112</b><i>a </i>and <b>112</b><i>b </i>conform to a universal format of identifying its fields. This way, the software application <b>106</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) understands that the &#x201c;last_name&#x201d; field of the first database table <b>112</b><i>a </i>maps to the &#x201c;surname&#x201d; field of second database table <b>112</b><i>b. </i>The database <b>103</b> may store a lookup table that maps original fields to semantic fields in order to normalize the fields across multiple database tables <b>112</b>.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example of merging two database tables in manner that is not dynamic. Without employing the software application <b>106</b> of the present disclosure, a first and a second database table <b>112</b><i>a </i>and <b>112</b><i>b </i>are joined together to create a merged database table <b>308</b>. This process requires significant manual input. The merged database may be scrubbed to identify duplicate records.</p><p id="p-0031" num="0030">The first database table <b>112</b><i>a </i>is linked to a first relational table <b>115</b><i>a </i>and a second relational table <b>115</b><i>b </i>while the second database table <b>112</b><i>b </i>is linked to a third relational table <b>115</b><i>c. </i>When a merged database table <b>308</b> is created, new links are created in order to associate the merged database table <b>308</b> with the new relational tables <b>315</b><i>a</i>-<i>c </i>that are derived from the original relational tables <b>115</b><i>a</i>-<i>c</i>. Once the merged database table <b>308</b> is created along with replicating the links to relational tables <b>115</b>, the first database table <b>112</b><i>a </i>and second database table <b>112</b><i>b </i>(along with any corresponding relational tables <b>115</b><i>a</i>-<i>c</i>) are no longer needed. The merged database table <b>308</b> is intended to be a comprehensive representation of all information contained within the first and second database tables <b>112</b><i>a </i>and <b>112</b><i>b. </i></p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an example of dynamically merging database tables within the computing system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> according to various embodiments of the present disclosure. <figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts the software application <b>106</b> that operates by dynamically merging a first database table <b>112</b><i>a </i>with a second database table <b>112</b><i>b </i>to create a dynamically merged database table <b>416</b>. The software application <b>106</b> receives an input from a user that specifies certain parameters, which is discussed in more detail with respect to <figref idref="DRAWINGS">FIG. <b>6</b></figref>. The parameters specify how to construct a dynamically merged database table <b>416</b>. For example, the parameters may include a threshold confidence level relating to the probability that two records represent to the same entity. As discussed in further detail below, the software application <b>106</b> may generate various dynamically merged database tables <b>416</b>, each of which are customized based on user-specified parameters.</p><p id="p-0033" num="0032">In response to receiving parameters, the software application <b>106</b> generates a dynamically merged database table <b>416</b> on the fly. In addition, the first and second database tables <b>112</b><i>a </i>and <b>112</b><i>b </i>are preserved so that more dynamically merged database tables <b>416</b> may be created by varying the parameters.</p><p id="p-0034" num="0033">In addition, the dynamically merged database table <b>416</b> is linked to preexisting relational tables <b>115</b>. In other words, the software application <b>106</b> does not need to create new relational tables <b>115</b> that are linked to the dynamically merged database table <b>416</b>. This is demonstrated in further detail with respect to <figref idref="DRAWINGS">FIGS. <b>6</b>A and <b>6</b>B</figref>.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example of operations performed by the software application <b>106</b> in the computing system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> according to various embodiments of the present disclosure. The operations shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref> demonstrate a manner of comparing two records to create a dynamically merged database table <b>416</b> (<figref idref="DRAWINGS">FIG. <b>4</b></figref>).</p><p id="p-0036" num="0035">The software application <b>106</b> is configured to access records in a first database table <b>112</b><i>a </i>and records in a second database table <b>112</b><i>b. </i>The software application <b>106</b> selects a record pair made up of a first record <b>503</b> and a second record <b>506</b> taken from a first and second database table <b>112</b><i>a </i>and <b>112</b><i>b, </i>respectively. Once a record pair is selected, the software application <b>106</b> performs a pairwise comparison <b>509</b>. This may involve comparing the field values between the two records <b>503</b> and <b>506</b>. As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, a first record <b>503</b> may be &#x201c;A1&#x201d; and a second record <b>506</b> may be &#x201c;B1.&#x201d;</p><p id="p-0037" num="0036">The pairwise comparison <b>509</b> generates a feature signature <b>512</b>, which is created using a set of features between a pair of records. The feature signature <b>512</b> reflects how two records are similar or dissimilar based on the records' contents. As an example, the feature signature may be generated using a number of features such as &#x201c;fuzzy_first_name_match&#x201d;, &#x201c;fuzzy_last_name_match&#x201d;, &#x201c;email_match&#x201d;, &#x201c;zip_code_match&#x201d;, &#x201c;last_4_SNN_digits_match&#x201d;, etc. Two different record pairs may have the same feature signature <b>512</b> even though they represent different entities. In this case, it is inferred that the records in the first pair are similar to each other in the same way that the records in the second pair are similar to each other. For example, given the trivial set of binary features &#x201c;Fuzzy Last Name match&#x201d; and &#x201c;Fuzzy First Name match&#x201d;, the record pair {&#x201c;Stephen Meyles&#x201d;, &#x201c;Steve Myles&#x201d;} will generate a feature signature of [1 1], where &#x201c;1&#x201d; refers to a binary value indicating a match. In addition, a record pair of {&#x201c;Derek Slager&#x201d;, &#x201c;Derke Slagr&#x201d;} will also generate a feature signature of [1 1]. This does not necessarily mean that the first pair of records are related to the same real-world identity as the second pair of records. Instead it suggests that the records have the same data variations (fuzzy matches of first and last name). Records with the same data variations may have the same feature signature <b>512</b>.</p><p id="p-0038" num="0037">By way of example using binary features, assume that a first record having fields F1-F5 is compared to a second record having fields F1-F5 to determine the following five features: &#x201c;F1_match&#x201d;, &#x201c;F2_match&#x201d;, &#x201c;F3_match&#x201d;, &#x201c;F4_match&#x201d;, and &#x201c;F5_match&#x201d;. In addition, assume that the values in fields F1 and F2 are the same while the values in fields F3-F5 are different between the two records. Then, a feature signature <b>512</b> may be &#x201c;11000.&#x201d; The &#x201c;1s&#x201d; in the feature signature <b>512</b> refer to fields that have common values while the &#x201c;0s&#x201d; refer to fields that have different values. Here, F1=1, F2=1, F3=0, F4=0, and F5=0, yielding &#x201c;11000.&#x201d; In other embodiments, non-binary features may be used to construct a feature signature <b>512</b>. For example, a &#x201c;fuzzy_match&#x201d; feature may yield a score ranging from 0 to 1 that correlates the strength of similarity between field values.</p><p id="p-0039" num="0038">After generating the feature signature <b>512</b>, the software application <b>106</b> uses a classifier <b>109</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) to perform a classification process <b>515</b> on the feature signature <b>512</b> to generate a result <b>518</b>. The classification process generates a confidence score <b>524</b> which represents a level of confidence that a particular record pair <b>521</b> represents the same entity. The example in <figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a confidence score <b>524</b> that ranges from 0 to 1, where 0 represents 0 percent confidence that two records are similar and where 1 represents a 100% confidence. A first record pair <b>521</b> made up of record &#x201c;A1&#x201d; and record &#x201c;B4&#x201d; (See <figref idref="DRAWINGS">FIG. <b>2</b></figref>) yields a confidence score <b>524</b> of &#x201c;0.42.&#x201d; In other words, there is a <b>42</b>% confidence that record &#x201c;A1&#x2014;Jane Doe&#x201d; refers to the same person that is referenced in record &#x201c;B4&#x2014;Janet Doe.&#x201d; Stated differently, the confidence score <b>524</b> corresponds to a confidence level that a record pair <b>521</b> represents duplicative or redundant information.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIGS. <b>6</b>A and <b>6</b>B</figref> are examples of dynamically merged database tables created within the computing system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, according to various embodiments of the present disclosure. <figref idref="DRAWINGS">FIGS. <b>6</b>A and <b>6</b>B</figref> show different examples of dynamically merged database tables <b>416</b> generated in response to different parameters <b>608</b>. The dynamically merged database tables <b>416</b> includes one or more related record pairs <b>618</b> and one or more unique records <b>622</b>. Related record pairs <b>618</b> refer to a pair of records taken from the first database table <b>112</b><i>a </i>and the second database table <b>112</b><i>b </i>that have a relatively high confidence that the record pair commonly represents the same entity, such as a person or other real-world entity. Unique records <b>622</b> are records that have a relatively high confidence that they uniquely refer to different entities, such as different people.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>6</b>A</figref> shows a software application <b>106</b> that generates a dynamically merged database table <b>416</b><i>a </i>based on parameters <b>608</b><i>a. </i>The parameters <b>608</b><i>a </i>may be specified by a user who wishes to merge a first database table <b>112</b><i>a </i>(<figref idref="DRAWINGS">FIG. <b>2</b></figref>) with a second database table <b>112</b><i>b </i>(<figref idref="DRAWINGS">FIG. <b>2</b></figref>). The parameters <b>608</b> may include a threshold confidence level and/or a database merge rule. The threshold confidence level may be a value that correlates to a degree that two records are similar or likely to be similar. In <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> the user has specified a threshold confidence level of 0.5. A lower confidence level may lead to more related record pairs <b>618</b>. This can reduce the number of entries in the dynamically merged database table <b>416</b><i>a. </i>In other words, a lower threshold confidence level means there is more tolerance when grouping together two records from different database tables <b>112</b><i>a </i>and <b>112</b><i>b. </i></p><p id="p-0042" num="0041">The parameters <b>608</b><i>a </i>also comprises a database merge rule which includes, for example, a specification of desired fields. As shown in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>, a user wishes to customize a dynamically merged database table <b>416</b><i>a </i>to include only fields F1 and F2 (as opposed to all available fields). Thus, the database merge rule indicates one or more desired field selected from fields <b>213</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) within the first database table <b>112</b><i>a </i>or the second database table <b>112</b><i>b. </i>The merge rule may also indicate a manner for consolidating variations in the information in desired fields from the related records. For example, if A4 and B2 form a related record pair <b>618</b>, a merge rule can specify how to determine field values of the dynamically merged database table based <b>416</b><i>a </i>on the field values of records A4 and B2. One example is to select the field values of the most recent record among the record pair. Here, the name of the record associated with the most recent timestamp will be selected.</p><p id="p-0043" num="0042">The use of database merge rules as a parameter <b>608</b><i>a </i>allows users to generate dynamically merged database tables <b>416</b><i>a </i>for specific purposes. If the user wishes to change the fields <b>213</b> in the dynamically merged database tables <b>416</b><i>a, </i>the user can create a new dynamically merged database table <b>416</b> with different merge rules.</p><p id="p-0044" num="0043">The dynamically merged database table <b>416</b><i>a </i>of <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> shows how a first database table <b>112</b><i>a </i>(<figref idref="DRAWINGS">FIG. <b>2</b></figref>) has been dynamically merged with a second database table <b>112</b><i>b </i>(<figref idref="DRAWINGS">FIG. <b>2</b></figref>) in response to parameters <b>608</b><i>a. </i>Rather than having a separate entry for records A1-A5 and B1-B4, the dynamically merged database table <b>416</b><i>a </i>combines record &#x201c;A3&#x201d; with &#x201c;B3&#x201d; and further combines record &#x201c;A4&#x201d; with &#x201c;B2.&#x201d; The manner of combining two records is determined according to a merge rule. Both record pairs <b>618</b> have a confidence level that exceeds a specified threshold confidence level of &#x201c;0.5.&#x201d; Records A3 and B3 form a related record pair <b>618</b> because they have relatively high confidence that they refer to the same entity, a person named &#x201c;Stephen Meyles.&#x201d; Specifically, the A3-B3 record pair <b>521</b> has a confidence score <b>524</b> of &#x201c;0.98&#x201d; which is relatively higher than the threshold confidence level of &#x201c;0.5&#x201d; of the user-specified parameters <b>608</b><i>a. </i>Similarly, the A4-B2 record pair <b>521</b> is also considered a related record pair <b>618</b> in the example of <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>.</p><p id="p-0045" num="0044">Records A1, A2, A5, B1, and B4 form a set of unique records with respect to the first and second database tables <b>112</b><i>a </i>and <b>112</b><i>b. </i>In other words, based on the threshold confidence level of &#x201c;0.5,&#x201d; records A1, A2, A5, B1, and B4 are not sufficiently similar to be part of a related record pair <b>618</b>. For example, record &#x201c;A1,&#x201d; which is in the first database table <b>112</b><i>a, </i>is not similar enough with respect to the records in the second database table <b>112</b><i>b </i>by comparing the confidence scores <b>524</b> with the threshold confidence level.</p><p id="p-0046" num="0045">The dynamically merged database table <b>416</b><i>a </i>provides each unique record <b>622</b> its own database entry. It also combines the related record pair <b>618</b> to conform to a single database entry. Thus, each related record pair <b>618</b> is treated as a single entry within the dynamically merged database table <b>416</b><i>a. </i></p><p id="p-0047" num="0046">In various embodiments, the merge rule can specify that the field values of a related record pair <b>618</b> should be equal to either one of the original field values. For example, record &#x201c;A4&#x201d; refers to a person named &#x201c;Carlos Sakoda&#x201d; and record &#x201c;B2&#x201d; refers to a person named &#x201c;Chuck Sakoda.&#x201d; The software application <b>106</b> determined that the record pair <b>521</b> of &#x201c;A4-B2&#x201d; has a confidence score of &#x201c;0.78.&#x201d; Qualitatively, that means that there is a reasonably high confidence that &#x201c;A4&#x201d; and &#x201c;B2&#x201d; refer to the same entity, which represents a particular person in the real-world. If the parameter specifies a confidence level of greater than &#x201c;0.<b>5</b>,&#x201d; the dynamically merged database table <b>416</b><i>a </i>will treat this record pair <b>521</b> as a related record pair <b>618</b> having a single database entry. Moreover, the F1 field, &#x201c;first name,&#x201d; is equal to &#x201c;Chuck&#x201d; OR &#x201c;Carlos.&#x201d; A merge rule may specify the manner in selecting to use either &#x201c;Chuck&#x201d; OR &#x201c;Carlos&#x201d; in the dynamically merged database <b>416</b><i>a. </i>Thus, the field value may be an array of values derived from the original field values in the related record pair <b>618</b>. As another example, the merge rule may choose the longer of two text strings of competing field values. In this case, &#x201c;Carlos&#x201d; would be selected over &#x201c;Chuck&#x201d; because it is longer in terms of the number of characters. In any case, the resulting database entry for a related record pair <b>618</b> is derived from the field values of the records in the related record pair <b>618</b>.</p><p id="p-0048" num="0047">In other embodiments, the merge rule may specify a format for the field values that is not necessarily used in the original records. For example, the merge rule may specify using a postal service address format for address field values. Here, an address field value in the merged database table <b>416</b> would be derived from the address field values contained within both records in the related record pair <b>618</b>.</p><p id="p-0049" num="0048">The dynamically merged database table <b>416</b><i>a </i>is linked to any relational tables <b>115</b> (<figref idref="DRAWINGS">FIG. <b>4</b></figref>) that are originally linked to the first or second database tables <b>112</b><i>a </i>or <b>112</b><i>b </i>(<figref idref="DRAWINGS">FIG. <b>4</b></figref>). This is explained in the following example. Record &#x201c;B2&#x201d; is part of the second database table <b>112</b><i>b. </i>As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the second database table is linked to relational table <b>115</b><i>c. </i>The relational table <b>115</b><i>c </i>may be used, for example, to store transaction history for each customer record in the second database table <b>112</b><i>b. </i>In this case, a customer record in the second database table <b>112</b><i>b, </i>such as &#x201c;B2,&#x201d; is linked to transaction history stored in the relational table <b>115</b><i>c. </i>Because the dynamically merged database table <b>416</b><i>a </i>has joined B2 with A4, A4 is transitively linked to the relational table <b>115</b><i>c </i>because it is part of a related record pair with respect to record &#x201c;B2.&#x201d; Thus, the transaction history for &#x201c;Chuck Sakoda&#x201d; now applies to &#x201c;Carlos Sakoda.&#x201d; By leveraging the preexisting relational table <b>115</b><i>c, </i>no new relational table needs to be created.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>6</b>B</figref> shows a different parameter <b>608</b><i>b </i>used to generate a second dynamically merged database table <b>416</b><i>b. </i>Multiple dynamically merged database tables <b>416</b> may be generated in response to different parameters <b>608</b>. This is because the underlying database tables <b>112</b> are persistently stored in a database <b>103</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>). In <figref idref="DRAWINGS">FIG. <b>6</b>B</figref> the user specifies a threshold confidence level of &#x201c;0.85.&#x201d; This is higher than the confidence level specified in the example of <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>. A user may wish to have a higher confidence level to reduce the occurrence of inaccurately identifying related record pairs <b>618</b> at the cost of increasing the size of the dynamically merged database table <b>416</b><i>b. </i>In this example, the software application <b>106</b> will likely find fewer related record pairs <b>618</b> with a higher threshold confidence level.</p><p id="p-0051" num="0050">When comparing <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>6</b>B</figref>, the second dynamically merged database table <b>416</b><i>b </i>separates out records &#x201c;A4&#x201d; and &#x201c;B2&#x201d; as two unique records <b>622</b> while the first dynamically merged database table <b>416</b><i>a </i>treated these two records as a related record pair <b>618</b>. This is because the record pair A4-B2 has a threshold confidence level of &#x201c;0.78&#x201d; which meets the parameters <b>608</b><i>a </i>in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> but not the parameters <b>608</b><i>b </i>of <figref idref="DRAWINGS">FIG. <b>6</b>B</figref>. As a result, the second dynamically merged database table <b>416</b><i>b </i>has a larger size, in terms of number of record entries.</p><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart that provides an example of the operation of the software application <b>106</b> according to various embodiments. It is understood that the flowchart of <figref idref="DRAWINGS">FIG. <b>7</b></figref> provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the software application as described herein. As an alternative, the flowchart of <figref idref="DRAWINGS">FIG. <b>7</b></figref> may be viewed as depicting an example of elements of a method implemented in the computing system <b>100</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) according to one or more embodiments.</p><p id="p-0053" num="0052">Beginning at <b>702</b> software application <b>106</b> accesses a database <b>103</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>). Here, the software application <b>106</b> selects two database tables <b>112</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) to dynamically merge. The database tables may use semantic fields to assist in the comparison of fields between a first database table <b>112</b><i>a </i>and a second database table <b>112</b><i>b </i>(<figref idref="DRAWINGS">FIG. <b>2</b></figref>). The software application <b>106</b> may have continuous access to the database <b>103</b> in order to generate dynamically merged database tables <b>416</b> (<figref idref="DRAWINGS">FIG. <b>4</b></figref>).</p><p id="p-0054" num="0053">At <b>705</b> the software application <b>106</b> waits to obtain parameters from a user. Parameters <b>608</b> are used to determine how to dynamically merge the first and second database tables <b>112</b><i>a </i>and <b>112</b><i>b. </i>A user may specify a parameter <b>608</b> (<figref idref="DRAWINGS">FIGS. <b>6</b>A and <b>6</b>B</figref>) by providing user input to the software application <b>106</b>. The user may submit user input via an online portal, client-side application, online form, or any other mechanism to transmit data within the computing system <b>100</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>). The software application <b>106</b> obtains the parameters <b>608</b> from a user's client device that interfaces with the software application <b>106</b>.</p><p id="p-0055" num="0054">At <b>708</b> the software application <b>106</b> compares the records in the first database table <b>112</b><i>a </i>and records in the second database table <b>112</b><i>b </i>to determine a confidence score <b>524</b> between different record pairs <b>521</b>. The confidence score <b>524</b> is used to identify related record pairs <b>618</b>, which are duplicative or redundant records existing within the first and second database tables <b>112</b><i>a </i>and <b>112</b><i>b. </i>For example, the software application <b>106</b> may perform a number of pairwise comparisons <b>509</b> (<figref idref="DRAWINGS">FIG. <b>5</b></figref>) on various record pairs <b>521</b> (<figref idref="DRAWINGS">FIG. <b>5</b></figref>) taken from the first and second database tables <b>112</b><i>a </i>and <b>112</b><i>b. </i>The pairwise comparison <b>509</b> may yield a feature signature <b>512</b> that quantifies the similarity between two records. The feature signature <b>512</b> may indicate which fields have related values between two records. Thereafter, the software application <b>106</b> may use a classifier <b>109</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) to evaluate the feature signature <b>512</b>.</p><p id="p-0056" num="0055">At <b>711</b> the software application generates confidence scores <b>524</b> (<figref idref="DRAWINGS">FIG. <b>5</b></figref>) for different record pairs <b>521</b>. As mentioned above, the software application <b>106</b> may invoke the classifier <b>109</b> to quantify the probability or likelihood that two records reflect the same entity. In other words, the classifier <b>109</b> may generate a confidence score <b>524</b> that corresponds to the level of confidence that a record pair <b>521</b> should be deemed a related record pair <b>618</b> (<figref idref="DRAWINGS">FIG. <b>6</b></figref>) according to a threshold.</p><p id="p-0057" num="0056">At <b>713</b> the software application <b>106</b> compares the confidence scores of various record pairs <b>521</b> to a threshold confidence level that is submitted as a parameter <b>608</b>. At <b>716</b> the software application identifies related record pairs <b>618</b> and unique records <b>622</b>. When a record pair <b>521</b> has a corresponding confidence score <b>524</b> (<figref idref="DRAWINGS">FIG. <b>5</b></figref>) that exceeds the threshold confidence level, that record pair <b>521</b> is considered to be a related record pair <b>618</b>. When a record pair <b>521</b> has a corresponding confidence score that does not exceed the threshold confidence level, the individual records in the record pair <b>521</b> are treated as unique records <b>622</b> (<figref idref="DRAWINGS">FIG. <b>6</b></figref>). Unique records <b>622</b> may include records within the first and second database tables <b>112</b><i>a </i>and <b>112</b><i>b </i>that are not part of a related record pair <b>618</b>.</p><p id="p-0058" num="0057">At <b>719</b> the software application <b>106</b> generates a dynamically merged database table <b>416</b> that includes a selected portion of the related record pairs <b>618</b> and includes the unique records. One record among the related record pairs <b>618</b> may be selected as a single table entry of the dynamically merged database table <b>416</b>. A merge rule determines a manner of selecting a record from the related record pair <b>618</b>. In one embodiment, the merge rule indicates that the more recent record among a related record pair <b>618</b> is selected. In another embodiment, the merge rule specifies that the record from the first database table <b>112</b><i>a </i>should be selected. In this respect, the merge rule specifies how to consolidate variations of information in record fields among related record pairs <b>618</b>.</p><p id="p-0059" num="0058">Once created, the dynamically merged database table <b>416</b> is stored in the database <b>103</b> for future use. In addition, the first database table <b>112</b><i>a </i>and the second database table <b>112</b><i>b </i>continue to be persistently stored after the dynamically merged database table <b>416</b> is generated. Once generated, the software application <b>106</b> waits for new parameters <b>705</b> to generate additional dynamically merged database tables <b>416</b>. This way, the software application <b>106</b> may generate a plurality of dynamically merged database tables <b>416</b> by varying the user-specified threshold confidence level or any other parameter <b>608</b>.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a schematic block diagram of the computing system <b>100</b> according to an embodiment of the present disclosure. The computing system <b>100</b> includes one or more computing devices <b>800</b> Each computing device <b>800</b> includes at least one processor circuit, for example, having a processor <b>803</b> and a memory <b>806</b>, both of which are coupled to a local interface <b>809</b> or bus. To this end, each computing device <b>800</b> may comprise, for example, at least one server computer or like device. The local interface <b>809</b> may comprise, for example, a data bus with an accompanying address/control bus or other bus structures as can be appreciated.</p><p id="p-0061" num="0060">Stored in the memory <b>806</b> are both data and several components that are executable by the processor <b>803</b>. In particular, stored in the memory <b>806</b> and executable by the processor <b>803</b> is the software application <b>106</b>. Also stored in the memory <b>806</b> may be a database <b>103</b> and other data such as, for example, dynamically merged database tables <b>416</b>, scores <b>524</b>, previously used parameters <b>608</b>, or any other data used to dynamically generate merged database tables. In addition, an operating system may be stored in the memory <b>806</b> and executable by the processor <b>803</b>.</p><p id="p-0062" num="0061">It is understood that there may be other applications that are stored in the memory <b>806</b> and are executable by the processor <b>803</b> as can be appreciated. Where any component discussed herein is implemented in the form of software, any one of a number of programming languages may be employed such as, for example, C, C++, C#, Objective C, Java&#xae;, JavaScript&#xae;, Perl, PHP, Visual Basic&#xae;, Python&#xae;, Ruby, Flash&#xae;, or other programming languages.</p><p id="p-0063" num="0062">Several software components are stored in the memory <b>806</b> and are executable by the processor <b>803</b>. In this respect, the term &#x201c;executable&#x201d; means a program file that is in a form that can ultimately be run by the processor <b>803</b>. Examples of executable programs may be, for example, a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory <b>806</b> and run by the processor <b>803</b>, source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory <b>806</b> and executed by the processor <b>803</b>, or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory <b>806</b> to be executed by the processor <b>803</b>, etc. An executable program may be stored in any portion or component of the memory <b>806</b> including, for example, random access memory (RAM), read-only memory (ROM), hard drive, solid-state drive, USB flash drive, memory card, optical disc such as compact disc (CD) or digital versatile disc (DVD), floppy disk, magnetic tape, or other memory components.</p><p id="p-0064" num="0063">The memory <b>806</b> is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus, the memory <b>806</b> may comprise, for example, random access memory (RAM), read-only memory (ROM), hard disk drives, solid-state drives, USB flash drives, memory cards accessed via a memory card reader, floppy disks accessed via an associated floppy disk drive, optical discs accessed via an optical disc drive, magnetic tapes accessed via an appropriate tape drive, and/or other memory components, or a combination of any two or more of these memory components. In addition, the RAM may comprise, for example, static random access memory (SRAM), dynamic random access memory (DRAM), or magnetic random access memory (MRAM) and other such devices. The ROM may comprise, for example, a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other like memory device.</p><p id="p-0065" num="0064">Also, the processor <b>803</b> may represent multiple processors <b>803</b> and/or multiple processor cores and the memory <b>806</b> may represent multiple memories <b>806</b> that operate in parallel processing circuits, respectively. In such a case, the local interface <b>809</b> may be an appropriate network that facilitates communication between any two of the multiple processors <b>803</b>, between any processor <b>803</b> and any of the memories <b>806</b>, or between any two of the memories <b>806</b>, etc. The local interface <b>809</b> may comprise additional systems designed to coordinate this communication, including, for example, performing load balancing. The processor <b>803</b> may be of electrical or of some other available construction.</p><p id="p-0066" num="0065">Although the software application <b>106</b> described herein may be embodied in software or code executed by general purpose hardware as discussed above, as an alternative the same may also be embodied in dedicated hardware or a combination of software/general purpose hardware and dedicated hardware. If embodied in dedicated hardware, each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include, but are not limited to, discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals, application specific integrated circuits (ASICs) having appropriate logic gates, field-programmable gate arrays (FPGAs), or other components, etc. Such technologies are generally well known by those skilled in the art and, consequently, are not described in detail herein.</p><p id="p-0067" num="0066">The flowchart of <figref idref="DRAWINGS">FIG. <b>7</b></figref> shows the functionality and operation of an implementation of the software application <b>106</b>. If embodied in software, each box may represent a module, segment, or portion of code that comprises program instructions to implement the specified logical function(s). The program instructions may be embodied in the form of source code that comprises human-readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor <b>803</b> in a computer system or other system. The machine code may be converted from the source code, etc. If embodied in hardware, each block may represent a circuit or a number of interconnected circuits to implement the specified logical function(s).</p><p id="p-0068" num="0067">Although the flowchart of <figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a specific order of execution, it is understood that the order of execution may differ from that which is depicted. For example, the order of execution of two or more boxes may be scrambled relative to the order shown. Also, two or more boxes shown in succession in <figref idref="DRAWINGS">FIG. <b>7</b></figref> may be executed concurrently or with partial concurrence. Further, in some embodiments, one or more of the boxes shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref> may be skipped or omitted. In addition, any number of counters, state variables, warning semaphores, or messages might be added to the logical flow described herein, for purposes of enhanced utility, accounting, performance measurement, or providing troubleshooting aids, etc. It is understood that all such variations are within the scope of the present disclosure.</p><p id="p-0069" num="0068">The software application <b>106</b> may also comprise software or code that can be embodied in any non-transitory computer-readable medium for use by or in connection with an instruction execution system such as, for example, a processor <b>803</b> in a computer system or other system. In this sense, the logic may comprise, for example, statements including instructions and declarations that can be fetched from the computer-readable medium and executed by the instruction execution system. In the context of the present disclosure, a &#x201c;computer-readable medium&#x201d; can be any medium that can contain, store, or maintain the logic or application described herein for use by or in connection with the instruction execution system.</p><p id="p-0070" num="0069">The computer-readable medium can comprise any one of many physical media such as, for example, magnetic, optical, or semiconductor media. More specific examples of a suitable computer-readable medium would include, but are not limited to, magnetic tapes, magnetic floppy diskettes, magnetic hard drives, memory cards, solid-state drives, USB flash drives, or optical discs. Also, the computer-readable medium may be a random access memory (RAM) including, for example, static random access memory (SRAM) and dynamic random access memory (DRAM), or magnetic random access memory (MRAM). In addition, the computer-readable medium may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other type of memory device.</p><p id="p-0071" num="0070">Further, any logic or application described herein, including software application <b>106</b>, may be implemented and structured in a variety of ways. For example, one or more applications described may be implemented as modules or components of a single application. Further, one or more applications described herein may be executed in shared or separate computing devices or a combination thereof. For example, the software application described herein may execute in the same computing device <b>800</b>, or in multiple computing devices in the same computing system <b>100</b>. Additionally, it is understood that terms such as &#x201c;application,&#x201d; &#x201c;service,&#x201d; &#x201c;system,&#x201d; &#x201c;engine,&#x201d; &#x201c;module,&#x201d; and so on may be interchangeable and are not intended to be limiting.</p><p id="p-0072" num="0071">Disjunctive language such as the phrase &#x201c;at least one of X, Y, or Z,&#x201d; unless specifically stated otherwise, is otherwise understood with the context as used in general to present that an item, term, etc., may be either X, Y, or Z, or any combination thereof (e.g., X, Y, and/or Z). Thus, such disjunctive language is not generally intended to, and should not, imply that certain embodiments require at least one of X, at least one of Y, or at least one of Z to each be present.</p><p id="p-0073" num="0072">It should be emphasized that the above-described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above-described embodiment(s) without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>We claim:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>performing a comparison between a first set of records with a second set of records;</claim-text><claim-text>identifying a set of related record pairs based on the comparison, wherein for each related record pair, field values are compared to generate a feature signature for a respective related record pair and the feature signature is classified by a classifier to generate a confidence score for the respective related record pair;</claim-text><claim-text>identifying a set of unique records among the first set of records and the second set of records; and</claim-text><claim-text>generating a merged set of records comprising at least a portion of the set of related record pairs and comprising the set of unique records.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the at least the portion of the set of related record pairs is determined by selecting field values each related record pair according to a merge rule.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising obtaining a database merge rule, the database merge rule indicating a specification of at least one desired field selected from at least one of a first plurality of fields of the first set of records or a second plurality of fields of the second set of records.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising generating a plurality of merged database tables corresponding to various user-specified threshold confidence levels.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first set of records and second set of records are stored in a first database table and second database table, respectively, and the merged set of records is stored in a third database table.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the first database table is linked to a first relational table and wherein the third database table is linked to the first relational table.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising preserving the first database table and the second database table after the third database table is generated.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A non-transitory computer-readable storage medium for tangibly storing computer program instructions capable of being executed by a computer processor, the computer program instructions defining steps of:<claim-text>performing a comparison between a first set of records with a second set of records;</claim-text><claim-text>identifying a set of related record pairs based on the comparison, wherein for each related record pair, field values are compared to generate a feature signature for a respective related record pair and the feature signature is classified by a classifier to generate a confidence score for the respective related record pair;</claim-text><claim-text>identifying a set of unique records among the first set of records and the second set of records; and</claim-text><claim-text>generating a merged set of records comprising at least a portion of the set of related record pairs and comprising the set of unique records.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the at least the portion of the set of related record pairs is determined by selecting field values each related record pair according to a merge rule.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, the steps further comprising obtaining a database merge rule, the database merge rule indicating a specification of at least one desired field selected from at least one of a first plurality of fields of the first set of records or a second plurality of fields of the second set of records.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, the steps further comprising generating a plurality of merged database tables corresponding to various user-specified threshold confidence levels.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the first set of records and second set of records are stored in a first database table and second database table, respectively, and the merged set of records is stored in a third database table.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the first database table is linked to a first relational table and wherein the third database table is linked to the first relational table.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising preserving the first database table and the second database table after the third database table is generated.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A device comprising:<claim-text>a processor; and</claim-text><claim-text>a storage medium for tangibly storing thereon logic for execution by the processor, the logic comprising instructions for:</claim-text><claim-text>performing a comparison between a first set of records with a second set of records;</claim-text><claim-text>identifying a set of related record pairs based on the comparison, wherein for each related record pair, field values are compared to generate a feature signature for a respective related record pair and the feature signature is classified by a classifier to generate a confidence score for the respective related record pair;</claim-text><claim-text>identifying a set of unique records among the first set of records and the second set of records; and</claim-text><claim-text>generating a merged set of records comprising at least a portion of the set of related record pairs and comprising the set of unique records.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the at least the portion of the set of related record pairs is determined by selecting field values each related record pair according to a merge rule.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, the instructions further comprising obtaining a database merge rule, the database merge rule indicating a specification of at least one desired field selected from at least one of a first plurality of fields of the first set of records or a second plurality of fields of the second set of records.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, the instructions further comprising generating a plurality of merged database tables corresponding to various user-specified threshold confidence levels.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the first set of records and second set of records are stored in a first database table and second database table, respectively, and the merged set of records is stored in a third database table.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The device of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the first database table is linked to a first relational table and wherein the third database table is linked to the first relational table.</claim-text></claim></claims></us-patent-application>