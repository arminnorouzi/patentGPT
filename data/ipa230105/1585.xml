<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230001586A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230001586</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17823185</doc-number><date>20220830</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>B</section><class>25</class><subclass>J</subclass><main-group>13</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20190101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>23</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>B</section><class>25</class><subclass>J</subclass><main-group>13</main-group><subgroup>006</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2379</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">ARTIFICIAL INTELLIGENCE-BASED PROCESS IDENTIFICATION, EXTRACTION, AND AUTOMATION FOR ROBOTIC PROCESS AUTOMATION</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16707564</doc-number><date>20191209</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11440201</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17823185</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62915340</doc-number><date>20191015</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>UiPath, Inc.</orgname><address><city>New York</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SINGH</last-name><first-name>Prabhdeep</first-name><address><city>Bellevue</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>BERG</last-name><first-name>Christian</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>UiPath, Inc.</orgname><role>02</role><address><city>New York</city><state>NY</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Artificial intelligence (AI)-based process identification, extraction, and automation for robotic process automation (RPA) is disclosed. Listeners may be deployed to user computing systems to collect data pertaining to user actions. The data collected by the listeners may then be sent to one or more servers and be stored in a database. This data may be analyzed by AI layers to recognize patterns of user behavioral processes therein. These recognized processes may then be distilled into respective RPA workflows and deployed to automate the processes.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="118.28mm" wi="158.75mm" file="US20230001586A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="235.63mm" wi="177.04mm" orientation="landscape" file="US20230001586A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="238.25mm" wi="174.67mm" orientation="landscape" file="US20230001586A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="209.80mm" wi="168.91mm" orientation="landscape" file="US20230001586A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="215.05mm" wi="173.48mm" orientation="landscape" file="US20230001586A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="206.16mm" wi="153.50mm" orientation="landscape" file="US20230001586A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="234.19mm" wi="165.18mm" orientation="landscape" file="US20230001586A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="231.31mm" wi="168.99mm" file="US20230001586A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="216.92mm" wi="124.46mm" file="US20230001586A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="223.52mm" wi="160.87mm" file="US20230001586A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 16/707,564 filed Dec. 9, 2019, which claims the benefit of, and priority to, U.S. Provisional Patent Application No. 62/915,340 filed Oct. 15, 2019. The subject matter of these earlier filed applications is hereby incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">The present invention generally relates to robotic process automation (RPA), and more specifically, to artificial intelligence (AI)-based process identification, extraction, and automation for RPA.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Businesses may or may not be aware of processes that could benefit from RPA. Employees perform various tasks that are likely not directly known by the employer, and these tasks may be repetitive or otherwise candidates for being automated. Furthermore, businesses may have an idea of what they would like to automate, but not know the best workflow(s) to achieve that automation. While a log of user actions could be generated by a human reviewing a video recording, for example, this does not effectively capture precisely what a user is doing and is too expensive and time consuming to be practical and effective. Furthermore, the reviewer's account of what is occurring may not be accurate (e.g., the reviewer may misidentify the application that a user is using at a given time). Accordingly, an improved mechanism for identifying beneficial automations, improving planned or existing automations, or both, may be beneficial.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0005" num="0004">Certain embodiments of the present invention may provide solutions to the problems and needs in the art that have not yet been fully identified, appreciated, or solved by current RPA techniques. For example, some embodiments of the present invention pertain to AI-based process identification, extraction, and automation for RPA.</p><p id="p-0006" num="0005">In an embodiment, a system includes a server and a plurality of user computing systems including respective listener applications. The listener applications are configured to generate logs including user interactions with their respective user computing systems and send the log data from the logs to the server. The server is configured to access log data collected from the listeners and run the log data through at least one AI layer. The at least one AI layer is configured to process the log data and identify a potential RPA process therein. The server is then configured to automatically generate a workflow including the identified RPA process.</p><p id="p-0007" num="0006">In another embodiment, a computer program is embodied on a nontransitory computer-readable medium. The program is configured to cause at least one processor to access log data collected from respective listener applications of a plurality of user computing systems. The program is also configured to cause the at least one processor to run the log data through at least one AI layer. The at least one AI layer is configured to process the log data and identify a potential RPA process therein. The program is further configured to cause the at least one processor to automatically generate an RPA workflow including the identified RPA process.</p><p id="p-0008" num="0007">In yet another embodiment, a computer-implemented method includes generating, by a listener, a log including user interactions with a user computing system and sending log data from the log to a server, by the listener. The log data includes where a user clicks on a screen and in which application, keystrokes, which button was clicked, instances of the user switching between applications, focus changes, that an email was sent and what the email pertains to, or any combination thereof. Additionally, the computer-implemented method includes using the one or more extracted processes to generate one or more respective workflows and robots.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008">In order that the advantages of certain embodiments of the invention will be readily understood, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments that are illustrated in the appended drawings. While it should be understood that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings, in which:</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an architectural diagram illustrating an RPA system, according to an embodiment of the present invention.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an architectural diagram illustrating a deployed RPA system, according to an embodiment of the present invention.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an architectural diagram illustrating the relationship between a designer, activities, and drivers, according to an embodiment of the present invention.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an architectural diagram illustrating an RPA system, according to an embodiment of the present invention.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an architectural diagram illustrating a computing system configured to perform AI-based process identification, extraction, and/or automation for RPA, according to an embodiment of the present invention.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an architectural diagram illustrating a system configured to perform AI-based process identification, extraction, and automation for RPA, according to an embodiment of the present invention.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart illustrating a process for AI-based process identification, extraction, and automation for RPA, according to an embodiment of the present invention.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart illustrating a process for developing and deploying RPA workflows based on log data, according to an embodiment of the present invention.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart illustrating a process for subject matter expert (SME)-guided process extraction, according to an embodiment of the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE EMBODIMENTS</heading><p id="p-0019" num="0018">Some embodiments pertain to AI-based process identification, extraction, and automation for RPA. Listeners may be deployed to user computing systems to collect data pertaining to user actions. The data collected by the listeners may then be sent to one or more servers and be stored in a database. This data may be analyzed by AI layers to recognize patterns of user behavioral processes therein. These recognized processes may then be distilled into respective RPA workflows and deployed to automate the processes.</p><p id="p-0020" num="0019">These multiple layers of intelligence may thus facilitate the discovery of new processes to automate and the improvement of already existing and deployed processes. Thus, some embodiments function as a &#x201c;process miner&#x201d; to find processes users perform that are good candidates for automation and then automate these processes. In certain embodiments, the users may not be aware that the processes are being extracted and automated, and the data collection and automation may occur without any actions by the users.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an architectural diagram illustrating an RPA system <b>100</b>, according to an embodiment of the present invention. RPA system <b>100</b> includes a designer <b>110</b> that allows a developer to design and implement workflows. Designer <b>110</b> may provide a solution for application integration, as well as automating third-party applications, administrative Information Technology (IT) tasks, and business IT processes. Designer <b>110</b> may facilitate development of an automation project, which is a graphical representation of a business process. Simply put, designer <b>110</b> facilitates the development and deployment of workflows and robots.</p><p id="p-0022" num="0021">The automation project enables automation of rule-based processes by giving the developer control of the execution order and the relationship between a custom set of steps developed in a workflow, defined herein as &#x201c;activities.&#x201d; One commercial example of an embodiment of designer <b>110</b> is UiPath Studio&#x2122; . Each activity may include an action, such as clicking a button, reading a file, writing to a log panel, etc. In some embodiments, workflows may be nested or embedded.</p><p id="p-0023" num="0022">Some types of workflows may include, but are not limited to, sequences, flowcharts, Finite State Machines (FSMs), and/or global exception handlers. Sequences may be particularly suitable for linear processes, enabling flow from one activity to another without cluttering a workflow. Flowcharts may be particularly suitable to more complex business logic, enabling integration of decisions and connection of activities in a more diverse manner through multiple branching logic operators. FSMs may be particularly suitable for large workflows. FSMs may use a finite number of states in their execution, which are triggered by a condition (i.e., transition) or an activity. Global exception handlers may be particularly suitable for determining workflow behavior when encountering an execution error and for debugging processes.</p><p id="p-0024" num="0023">Once a workflow is developed in designer <b>110</b>, execution of business processes is orchestrated by conductor <b>120</b>, which orchestrates one or more robots <b>130</b> that execute the workflows developed in designer <b>110</b>. One commercial example of an embodiment of conductor <b>120</b> is UiPath Orchestrator&#x2122;. Conductor <b>120</b> facilitates management of the creation, monitoring, and deployment of resources in an environment. Conductor <b>120</b> may act as an integration point with third-party solutions and applications.</p><p id="p-0025" num="0024">Conductor <b>120</b> may manage a fleet of robots <b>130</b>, connecting and executing robots <b>130</b> from a centralized point. Types of robots <b>130</b> that may be managed include, but are not limited to, attended robots <b>132</b>, unattended robots <b>134</b>, development robots (similar to unattended robots <b>134</b>, but used for development and testing purposes), and nonproduction robots (similar to attended robots <b>132</b>, but used for development and testing purposes). Attended robots <b>132</b> are triggered by user events and operate alongside a human on the same computing system. Attended robots <b>132</b> may be used with conductor <b>120</b> for a centralized process deployment and logging medium. Attended robots <b>132</b> may help the human user accomplish various tasks, and may be triggered by user events. In some embodiments, processes cannot be started from conductor <b>120</b> on this type of robot and/or they cannot run under a locked screen. In certain embodiments, attended robots <b>132</b> can only be started from a robot tray or from a command prompt. Attended robots <b>132</b> should run under human supervision in some embodiments.</p><p id="p-0026" num="0025">Unattended robots <b>134</b> run unattended in virtual environments and can automate many processes. Unattended robots <b>134</b> may be responsible for remote execution, monitoring, scheduling, and providing support for work queues. Debugging for all robot types may be run in designer <b>110</b> in some embodiments. Both attended and unattended robots may automate various systems and applications including, but not limited to, mainframes, web applications, VMs, enterprise applications (e.g., those produced by SAP&#xae;, SalesForce&#xae;, Oracle&#xae;, etc.), and computing system applications (e.g., desktop and laptop applications, mobile device applications, wearable computer applications, etc.).</p><p id="p-0027" num="0026">Conductor <b>120</b> may have various capabilities including, but not limited to, provisioning, deployment, configuration, queueing, monitoring, logging, and/or providing interconnectivity. Provisioning may include creating and maintenance of connections between robots <b>130</b> and conductor <b>120</b> (e.g., a web application). Deployment may include assuring the correct delivery of package versions to assigned robots <b>130</b> for execution. Configuration may include maintenance and delivery of robot environments and process configurations. Queueing may include providing management of queues and queue items. Monitoring may include keeping track of robot identification data and maintaining user permissions. Logging may include storing and indexing logs to a database (e.g., an SQL database) and/or another storage mechanism (e.g., ElasticSearch&#xae;, which provides the ability to store and quickly query large datasets). Conductor <b>120</b> may provide interconnectivity by acting as the centralized point of communication for third-party solutions and/or applications.</p><p id="p-0028" num="0027">Robots <b>130</b> are execution agents that run workflows built in designer <b>110</b>. One commercial example of some embodiments of robot(s) <b>130</b> is UiPath Robots&#x2122; In some embodiments, robots <b>130</b> install the Microsoft Windows&#xae; Service Control Manager (SCM)-managed service by default. As a result, such robots <b>130</b> can open interactive Windows&#xae; sessions under the local system account, and have the rights of a Windows&#xae; service.</p><p id="p-0029" num="0028">In some embodiments, robots <b>130</b> can be installed in a user mode. For such robots <b>130</b>, this means they have the same rights as the user under which a given robot <b>130</b> has been installed. This feature may also be available for High Density (HD) robots, which ensure full utilization of each machine at its maximum potential. In some embodiments, any type of robot <b>130</b> may be configured in an HD environment.</p><p id="p-0030" num="0029">Robots <b>130</b> in some embodiments are split into several components, each being dedicated to a particular automation task. The robot components in some embodiments include, but are not limited to, SCM-managed robot services, user mode robot services, executors, agents, and command line. SCM-managed robot services manage and monitor Windows&#xae; sessions and act as a proxy between conductor <b>120</b> and the execution hosts (i.e., the computing systems on which robots <b>130</b> are executed). These services are trusted with and manage the credentials for robots <b>130</b>. A console application is launched by the SCM under the local system.</p><p id="p-0031" num="0030">User mode robot services in some embodiments manage and monitor Windows&#xae; sessions and act as a proxy between conductor <b>120</b> and the execution hosts. User mode robot services may be trusted with and manage the credentials for robots <b>130</b>. A Windows&#xae; application may automatically be launched if the SCM-managed robot service is not installed.</p><p id="p-0032" num="0031">Executors may run given jobs under a Windows&#xae; session (i.e., they may execute workflows. Executors may be aware of per-monitor dots per inch (DPI) settings. Agents may be Windows&#xae; Presentation Foundation (WPF) applications that display the available jobs in the system tray window. Agents may be a client of the service. Agents may request to start or stop jobs and change settings. The command line is a client of the service. The command line is a console application that can request to start jobs and waits for their output.</p><p id="p-0033" num="0032">Having components of robots <b>130</b> split as explained above helps developers, support users, and computing systems more easily run, identify, and track what each component is executing. Special behaviors may be configured per component this way, such as setting up different firewall rules for the executor and the service. The executor may always be aware of DPI settings per monitor in some embodiments. As a result, workflows may be executed at any DPI, regardless of the configuration of the computing system on which they were created. Projects from designer <b>110</b> may also be independent of browser zoom level in some embodiments. For applications that are DPI-unaware or intentionally marked as unaware, DPI may be disabled in some embodiments.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an architectural diagram illustrating a deployed RPA system <b>200</b>, according to an embodiment of the present invention. In some embodiments, RPA system <b>200</b> may be, or may be a part of, RPA system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. It should be noted that the client side, the server side, or both, may include any desired number of computing systems without deviating from the scope of the invention. On the client side, a robot application <b>210</b> includes executors <b>212</b>, an agent <b>214</b>, and a designer <b>216</b>. However, in some embodiments, designer <b>216</b> may not be running on computing system <b>210</b>. Executors <b>212</b> are running processes. Several business projects may run simultaneously, as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Agent <b>214</b> (e.g., a Windows&#xae; service) is the single point of contact for all executors <b>212</b> in this embodiment. All messages in this embodiment are logged into conductor <b>230</b>, which processes them further via database server <b>240</b>, indexer server <b>250</b>, or both. As discussed above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, executors <b>212</b> may be robot components.</p><p id="p-0035" num="0034">In some embodiments, a robot represents an association between a machine name and a username. The robot may manage multiple executors at the same time. On computing systems that support multiple interactive sessions running simultaneously (e.g., Windows&#xae; Server 2012), there may be multiple robots running at the same time, each in a separate Windows&#xae; session using a unique username. This is referred to as HD robots above.</p><p id="p-0036" num="0035">Agent <b>214</b> is also responsible for sending the status of the robot (e.g., periodically sending a &#x201c;heartbeat&#x201d; message indicating that the robot is still functioning) and downloading the required version of the package to be executed. The communication between agent <b>214</b> and conductor <b>230</b> is always initiated by agent <b>214</b> in some embodiments. In the notification scenario, agent <b>214</b> may open a WebSocket channel that is later used by conductor <b>230</b> to send commands to the robot (e.g., start, stop, etc.).</p><p id="p-0037" num="0036">On the server side, a presentation layer (web application <b>232</b>, Open Data Protocol (OData) Representative State Transfer (REST) Application Programming Interface (API) endpoints <b>234</b>, and notification and monitoring <b>236</b>), a service layer (API implementation/business logic <b>238</b>), and a persistence layer (database server <b>240</b> and indexer server <b>250</b>) are included. Conductor <b>230</b> includes web application <b>232</b>, OData REST API endpoints <b>234</b>, notification and monitoring <b>236</b>, and API implementation/business logic <b>238</b>. In some embodiments, most actions that a user performs in the interface of conductor <b>220</b> (e.g., via browser <b>220</b>) are performed by calling various APIs. Such actions may include, but are not limited to, starting jobs on robots, adding/removing data in queues, scheduling jobs to run unattended, etc. without deviating from the scope of the invention. Web application <b>232</b> is the visual layer of the server platform. In this embodiment, web application <b>232</b> uses Hypertext Markup Language (HTML) and JavaScript (JS). However, any desired markup languages, script languages, or any other formats may be used without deviating from the scope of the invention. The user interacts with web pages from web application <b>232</b> via browser <b>220</b> in this embodiment in order to perform various actions to control conductor <b>230</b>. For instance, the user may create robot groups, assign packages to the robots, analyze logs per robot and/or per process, start and stop robots, etc.</p><p id="p-0038" num="0037">In addition to web application <b>232</b>, conductor <b>230</b> also includes service layer that exposes OData REST API endpoints <b>234</b>. However, other endpoints may be included without deviating from the scope of the invention. The REST API is consumed by both web application <b>232</b> and agent <b>214</b>. Agent <b>214</b> is the supervisor of one or more robots on the client computer in this embodiment.</p><p id="p-0039" num="0038">The REST API in this embodiment covers configuration, logging, monitoring, and queueing functionality. The configuration endpoints may be used to define and configure application users, permissions, robots, assets, releases, and environments in some embodiments. Logging REST endpoints may be used to log different information, such as errors, explicit messages sent by the robots, and other environment-specific information, for instance. Deployment REST endpoints may be used by the robots to query the package version that should be executed if the start job command is used in conductor <b>230</b>. Queueing REST endpoints may be responsible for queues and queue item management, such as adding data to a queue, obtaining a transaction from the queue, setting the status of a transaction, etc.</p><p id="p-0040" num="0039">Monitoring REST endpoints may monitor web application <b>232</b> and agent <b>214</b>. Notification and monitoring API <b>236</b> may be REST endpoints that are used for registering agent <b>214</b>, delivering configuration settings to agent <b>214</b>, and for sending/receiving notifications from the server and agent <b>214</b>. Notification and monitoring API <b>236</b> may also use WebSocket communication in some embodiments.</p><p id="p-0041" num="0040">The persistence layer includes a pair of servers in this embodiment&#x2014;database server <b>240</b> (e.g., a SQL server) and indexer server <b>250</b>. Database server <b>240</b> in this embodiment stores the configurations of the robots, robot groups, associated processes, users, roles, schedules, etc. This information is managed through web application <b>232</b> in some embodiments. Database server <b>240</b> may manages queues and queue items. In some embodiments, database server <b>240</b> may store messages logged by the robots (in addition to or in lieu of indexer server <b>250</b>).</p><p id="p-0042" num="0041">Indexer server <b>250</b>, which is optional in some embodiments, stores and indexes the information logged by the robots. In certain embodiments, indexer server <b>250</b> may be disabled through configuration settings. In some embodiments, indexer server <b>250</b> uses ElasticSearch&#xae;, which is an open source project full-text search engine. Messages logged by robots (e.g., using activities like log message or write line) may be sent through the logging REST endpoint(s) to indexer server <b>250</b>, where they are indexed for future utilization.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an architectural diagram illustrating the relationship <b>300</b> between a designer <b>310</b>, activities <b>320</b>, <b>330</b>, and drivers <b>340</b>, according to an embodiment of the present invention. Per the above, a developer uses designer <b>310</b> to develop workflows that are executed by robots. Workflows may include user-defined activities <b>320</b> and UI automation activities <b>330</b>. Some embodiments are able to identify non-textual visual components in an image, which is called computer vision (CV) herein. Some CV activities pertaining to such components may include, but are not limited to, click, type, get text, hover, element exists, refresh scope, highlight, etc. Click in some embodiments identifies an element using CV, optical character recognition (OCR), fuzzy text matching, and multi-anchor, for example, and clicks it. Type may identify an element using the above and types in the element. Get text may identify the location of specific text and scan it using OCR. Hover may identify an element and hover over it. Element exists may check whether an element exists on the screen using the techniques described above. In some embodiments, there may be hundreds or even thousands of activities that can be implemented in designer <b>310</b>. However, any number and/or type of activities may be available without deviating from the scope of the invention.</p><p id="p-0044" num="0043">UI automation activities <b>330</b> are a subset of special, lower level activities that are written in lower level code (e.g., CV activities) and facilitate interactions with the screen. UI automation activities <b>330</b> facilitate these interactions via drivers <b>340</b> that allow the robot to interact with the desired software. For instance, drivers <b>340</b> may include OS drivers <b>342</b>, browser drivers <b>344</b>, VM drivers <b>346</b>, enterprise application drivers <b>348</b>, etc.</p><p id="p-0045" num="0044">Drivers <b>340</b> may interact with the OS at a low level looking for hooks, monitoring for keys, etc. They may facilitate integration with Chrome&#xae;, IE&#xae;, Citrix&#xae;, SAP&#xae;, etc. For instance, the &#x201c;click&#x201d; activity performs the same role in these different applications via drivers <b>340</b>.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an architectural diagram illustrating an RPA system <b>400</b>, according to an embodiment of the present invention. In some embodiments, RPA system <b>400</b> may be or include RPA systems <b>100</b> and/or <b>200</b> of <figref idref="DRAWINGS">FIGS. <b>1</b> and/or <b>2</b></figref>. RPA system <b>400</b> includes multiple client computing systems <b>410</b> running robots. Computing systems <b>410</b> are able to communicate with a conductor computing system <b>420</b> via a web application running thereon. Conductor computing system <b>420</b>, in turn, is able to communicate with a database server <b>430</b> and an optional indexer server <b>440</b>.</p><p id="p-0047" num="0046">With respect to <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>3</b></figref>, it should be noted that while a web application is used in these embodiments, any suitable client/server software may be used without deviating from the scope of the invention. For instance, the conductor may run a server-side application that communicates with non-web-based client software applications on the client computing systems.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an architectural diagram illustrating a computing system <b>500</b> configured to perform AI-based process identification, extraction, and/or automation for RPA, according to an embodiment of the present invention. In some embodiments, computing system <b>500</b> may be one or more of the computing systems depicted and/or described herein. Computing system <b>500</b> includes a bus <b>505</b> or other communication mechanism for communicating information, and processor(s) <b>510</b> coupled to bus <b>505</b> for processing information. Processor(s) <b>510</b> may be any type of general or specific purpose processor, including a Central Processing Unit (CPU), an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), a Graphics Processing Unit (GPU), multiple instances thereof, and/or any combination thereof. Processor(s) <b>510</b> may also have multiple processing cores, and at least some of the cores may be configured to perform specific functions. Multi-parallel processing may be used in some embodiments. In certain embodiments, at least one of processor(s) <b>510</b> may be a neuromorphic circuit that includes processing elements that mimic biological neurons. In some embodiments, neuromorphic circuits may not require the typical components of a Von Neumann computing architecture.</p><p id="p-0049" num="0048">Computing system <b>500</b> further includes a memory <b>515</b> for storing information and instructions to be executed by processor(s) <b>510</b>. Memory <b>515</b> can be comprised of any combination of Random Access Memory (RAM), Read Only Memory (ROM), flash memory, cache, static storage such as a magnetic or optical disk, or any other types of non-transitory computer-readable media or combinations thereof. Non-transitory computer-readable media may be any available media that can be accessed by processor(s) <b>510</b> and may include volatile media, non-volatile media, or both. The media may also be removable, non-removable, or both.</p><p id="p-0050" num="0049">Additionally, computing system <b>500</b> includes a communication device <b>520</b>, such as a transceiver, to provide access to a communications network via a wireless and/or wired connection. In some embodiments, communication device <b>520</b> may be configured to use Frequency Division Multiple Access (FDMA), Single Carrier FDMA (SC-FDMA), Time Division Multiple Access (TDMA), Code Division Multiple Access (CDMA), Orthogonal Frequency Division Multiplexing (OFDM), Orthogonal Frequency Division Multiple Access (OFDMA), Global System for Mobile (GSM) communications, General Packet Radio Service (GPRS), Universal Mobile Telecommunications System (UMTS), cdma2000, Wideband CDMA (W-CDMA), High-Speed Downlink Packet Access (HSDPA), High-Speed Uplink Packet Access (HSUPA), High-Speed Packet Access (HSPA), Long Term Evolution (LTE), LTE Advanced (LTE-A), 802.11x, Wi-Fi, Zigbee, Ultra-WideB and (UWB), 802.16x, 802.15, Home Node-B (HnB), Bluetooth, Radio Frequency Identification (RFID), Infrared Data Association (IrDA), Near-Field Communications (NFC), fifth generation (5G), New Radio (NR), any combination thereof, and/or any other currently existing or future-implemented communications standard and/or protocol without deviating from the scope of the invention. In some embodiments, communication device <b>520</b> may include one or more antennas that are singular, arrayed, phased, switched, beamforming, beamsteering, a combination thereof, and or any other antenna configuration without deviating from the scope of the invention.</p><p id="p-0051" num="0050">Processor(s) <b>510</b> are further coupled via bus <b>505</b> to a display <b>525</b>, such as a plasma display, a Liquid Crystal Display (LCD), a Light Emitting Diode (LED) display, a Field Emission Display (FED), an Organic Light Emitting Diode (OLED) display, a flexible OLED display, a flexible substrate display, a projection display, a <b>4</b>K display, a high definition display, a Retina&#xae; display, an In-Plane Switching (IPS) display, or any other suitable display for displaying information to a user. Display <b>525</b> may be configured as a touch (haptic) display, a three dimensional (3D) touch display, a multi-input touch display, a multi-touch display, etc. using resistive, capacitive, surface-acoustic wave (SAW) capacitive, infrared, optical imaging, dispersive signal technology, acoustic pulse recognition, frustrated total internal reflection, etc. Any suitable display device and haptic I/O may be used without deviating from the scope of the invention.</p><p id="p-0052" num="0051">A keyboard <b>530</b> and a cursor control device <b>535</b>, such as a computer mouse, a touchpad, etc., are further coupled to bus <b>505</b> to enable a user to interface with computing system <b>500</b>. However, in certain embodiments, a physical keyboard and mouse may not be present, and the user may interact with the device solely through display <b>525</b> and/or a touchpad (not shown). Any type and combination of input devices may be used as a matter of design choice. In certain embodiments, no physical input device and/or display is present. For instance, the user may interact with computing system <b>500</b> remotely via another computing system in communication therewith, or computing system <b>500</b> may operate autonomously.</p><p id="p-0053" num="0052">Memory <b>515</b> stores software modules that provide functionality when executed by processor(s) <b>510</b>. The modules include an operating system <b>540</b> for computing system <b>500</b>. The modules further include a process identification, extraction, and automation module <b>545</b> that is configured to perform all or part of the processes described herein or derivatives thereof. Computing system <b>500</b> may include one or more additional functional modules <b>550</b> that include additional functionality.</p><p id="p-0054" num="0053">One skilled in the art will appreciate that a &#x201c;system&#x201d; could be embodied as a server, an embedded computing system, a personal computer, a console, a personal digital assistant (PDA), a cell phone, a tablet computing device, a quantum computing system, or any other suitable computing device, or combination of devices without deviating from the scope of the invention. Presenting the above-described functions as being performed by a &#x201c;system&#x201d; is not intended to limit the scope of the present invention in any way, but is intended to provide one example of the many embodiments of the present invention. Indeed, methods, systems, and apparatuses disclosed herein may be implemented in localized and distributed forms consistent with computing technology, including cloud computing systems.</p><p id="p-0055" num="0054">It should be noted that some of the system features described in this specification have been presented as modules, in order to more particularly emphasize their implementation independence. For example, a module may be implemented as a hardware circuit comprising custom very large scale integration (VLSI) circuits or gate arrays, off-the-shelf semiconductors such as logic chips, transistors, or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays, programmable array logic, programmable logic devices, graphics processing units, or the like.</p><p id="p-0056" num="0055">A module may also be at least partially implemented in software for execution by various types of processors. An identified unit of executable code may, for instance, include one or more physical or logical blocks of computer instructions that may, for instance, be organized as an object, procedure, or function. Nevertheless, the executables of an identified module need not be physically located together, but may include disparate instructions stored in different locations that, when joined logically together, comprise the module and achieve the stated purpose for the module. Further, modules may be stored on a computer-readable medium, which may be, for instance, a hard disk drive, flash device, RAM, tape, and/or any other such non-transitory computer-readable medium used to store data without deviating from the scope of the invention.</p><p id="p-0057" num="0056">Indeed, a module of executable code could be a single instruction, or many instructions, and may even be distributed over several different code segments, among different programs, and across several memory devices. Similarly, operational data may be identified and illustrated herein within modules, and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set, or may be distributed over different locations including over different storage devices, and may exist, at least partially, merely as electronic signals on a system or network.</p><p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an architectural diagram illustrating a system <b>600</b> configured to perform AI-based process identification, extraction, and automation for RPA, according to an embodiment of the present invention. System <b>600</b> includes user computing systems, such as desktop computer <b>602</b>, tablet <b>604</b>, and smart phone <b>606</b>. However, any desired computing system may be used without deviating from the scope of invention including, but not limited to, smart watches, laptop computers, Internet-of-Things (IoT) devices, vehicle computing systems, etc.</p><p id="p-0059" num="0058">Each computing system <b>602</b>, <b>604</b>, <b>606</b> has a listener <b>610</b> installed thereon. Listeners <b>610</b> may be robots generated via an RPA designer application, part of an operating system, a downloadable application for a personal computer (PC) or smart phone, or any other software and/or hardware without deviating from the scope of the invention. Indeed, in some embodiments, the logic of one or more of listeners <b>610</b> is implemented partially or completely via physical hardware.</p><p id="p-0060" num="0059">Listeners <b>610</b> generate logs of user interactions with the respective computing system <b>602</b>, <b>604</b>, <b>606</b> and send the log data via a network <b>620</b> (e.g., a local area network (LAN), a mobile communications network, a satellite communications network, the Internet, any combination thereof, etc.) to a server <b>630</b>. The data that is logged may include, but is not limited to, which buttons were clicked, where a mouse was moved, the text that was entered in a field, that one window was minimized and another was opened, the application associated with a window, etc. In some embodiments, server <b>630</b> may run a conductor application and the data may be sent periodically as part of the heartbeat message. In certain embodiments, the log data may be sent to server <b>630</b> once a predetermined amount of log data has been collected, after a predetermined time period has elapsed, or both. Server <b>630</b> stores the received log data from listeners <b>610</b> in a database <b>640</b>.</p><p id="p-0061" num="0060">When instructed by a human user (e.g., an RPA engineer or a data scientist), when a predetermined amount of log data has been collected, when a predetermined amount of time has passed since the last analysis, etc., server <b>630</b> accesses log data collected from various users by listeners <b>610</b> from database <b>640</b> and runs the log data through multiple AI layers <b>632</b>. AI layers <b>632</b> process the log data and identify one or more potential processes therein. AI layers <b>632</b> may perform statistical modeling (e.g., hidden Markov models (HMMs)) and utilize deep learning techniques (e.g., long short term memory (LSTM) deep learning, encoding of previous hidden states, etc.) and perform case identification to identify an atomic instance of a process. For invoice processing, for example, completion of one invoice may be a case. The system thus determines where one case finishes and the next case begins. Opening an email may be the start of a case, for example, and the patterns of the cases may be analyzed to determine variations and commonalities.</p><p id="p-0062" num="0061">In some embodiments, identified processes may be listed for a user to peruse, and may be sorted by various factors including, but not limited to, an RPA score indicating how suitable a given process is to RPA (e.g., based on complexity of the automation, execution time, perceived benefit to key performance indicators such as revenue generated, revenue saved, time saved, etc.), process name, total recording time, the number of users who executed the process, process execution time (e.g., least or most time), etc. The process workflow may be displayed when a user clicks on a given process, including steps, parameters, and interconnections. In certain embodiments, only process activities that appear to be important from a clustering perspective may be used.</p><p id="p-0063" num="0062">If a similar process already exists, server <b>630</b> may identify this similarity and know that the identified process should replace an existing process for a similar automation that works less optimally. For example, similarities between processes may be determined by a common beginning and end and some amount of statistical commonality in the steps taking in between. Commonality may be determined by entropy, minimization of a process detection objective function, etc. The objective function threshold may be set automatically in some embodiments, and this may be modified during training if processes that were identified as dissimilar by the system are indicated as being similar by a user. Server <b>630</b> may then automatically generate a workflow including the identified process, generate a robot implementing the workflow (or a replacement robot), and push the generated robot out to user computing systems <b>602</b>, <b>604</b>, <b>606</b> to be executed thereon.</p><p id="p-0064" num="0063">Alternatively, in certain embodiments, suggested processes from AI layers <b>632</b> may be presented to an RPA engineer via a designer application <b>652</b> on a computing system <b>650</b>. The RPA engineer can then review the workflow, make any desired changes, and then deploy the workflow via a robot to computing systems <b>602</b>, <b>604</b>, <b>606</b>, or cause the robot to be deployed. For example, deployment may occur via a conductor application running on server <b>630</b> or another server, which may push a robot implementing the process out to user computing systems <b>602</b>, <b>604</b>, <b>606</b>. In some embodiments, this workflow deployment may be realized via automation manager functionality in the designer application, and the RPA engineer may merely click a button to implement the process in a robot.</p><heading id="h-0007" level="1">LISTENERS</heading><p id="p-0065" num="0064">In order to extract data pertaining to actions taken by users on computing systems <b>602</b>, <b>604</b>, <b>606</b>, listeners <b>610</b> may be employed on the client side at the driver level (e.g., drivers <b>340</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>) to extract data from whitelisted applications. For example, listeners <b>610</b> may record where a user clicked on the screen and in what application, keystrokes, which button was clicked, instances of the user switching between applications, focus changes, that an email was sent and what the email pertains to, etc. Such data can be used to generate a high-fidelity log of the user's interactions with computing systems <b>602</b>, <b>604</b>, <b>606</b>.</p><p id="p-0066" num="0065">In some embodiments, data may be generated until a desired per-user or total volume of data and/or a maximum recording time (per user or total) is reached. This may constitute a recording goal that may be set for an individual user, for multiple users, or both. In certain embodiments, listeners <b>610</b> may stop recording once an individual or group data recording goal is reached. The data may then be uploaded to server <b>630</b> and stored in database <b>640</b>.</p><p id="p-0067" num="0066">In certain embodiments, applications for which user interactions are to be logged may be whitelisted. In other words, only interactions with certain specified applications may be of interest. For instance, interactions with a web browser and an email application may be recorded, but interactions with other applications may be ignored.</p><p id="p-0068" num="0067">In addition to or alternatively to generating log data for process extraction, some embodiments may provide insights into what users are actually doing. For instance, listeners <b>610</b> may determine which applications the users are actually using, what percentage of the time users are using a given application, which features within the application the users are using and which they are not, etc. This information may be provided to a manager to make informed decisions regarding whether to renew a license for an application, whether to not renew a license for a feature or downgrade to a less expensive version that lacks the feature, whether a user is not using applications that tend to make other employees more productive so the user can be trained appropriately, whether a user spends a large amount of time performing non-work activities (e.g., checking personal email or surfing the web) or away from his or her desk (e.g., not interacting with the computing system), etc.</p><p id="p-0069" num="0068">In some embodiments, detection updates can be pushed to the listeners to improve their driver-level user interaction detection and capture processes. In certain embodiments, listeners <b>610</b> may employ AI in their detection. In certain embodiments, robots implementing processes from automation workflows may automatically be pushed to computing systems <b>602</b>, <b>604</b>, <b>606</b> via respective listeners <b>610</b>.</p><heading id="h-0008" level="1">AI LAYERS</heading><p id="p-0070" num="0069">In some embodiments, multiple AI layers may be used. Each AI layer is an algorithm (or model) that runs on the log data, and the AI model itself may be deep learning neural networks (DLNNs) of trained artificial &#x201c;neurons&#x201d; that are trained in training data. Layers may be run in series or in parallel.</p><p id="p-0071" num="0070">The AI layers may include, but are not limited to, a sequence extraction layer, a clustering detection layer, a visual component detection layer, a text recognition layer (e.g., OCR), an audio-to-text translation layer, or any combination thereof. However, any desired number and type(s) of layers may be used without deviating from the scope of the invention. Using multiple layers may allow the system to develop a global picture of what is happening in a screen or process. For example, one AI layer could perform OCR, another could detect buttons, etc.</p><p id="p-0072" num="0071">Patterns may be determined individually by an AI layer or collectively by multiple AI layers. A probability or an output in terms of a user action could be used. For instance, to determine the particulars of a button, its text, where a user clicked, etc., the system may need to know where the button is, its text, the positioning on the screen, etc.</p><heading id="h-0009" level="1">SUBJECT MATTER EXPERT-GUIDED PROCESS EXTRACTION</heading><p id="p-0073" num="0072">In some embodiments, such as those where the user is interacting with a series of images provided by a virtual machine environment and the actual software with which the user is interacting is executed remotely, or where driver-level data from listeners <b>610</b> does not accurately or entirely capture what the user is doing, listeners <b>610</b> may capture screenshots of what the user is doing at certain times (e.g., with a predetermined frequency, when a user takes a certain action, a combination thereof, etc.).</p><p id="p-0074" num="0073">A subject matter expert (SME) may then review recorded screenshots, save the relevant screenshots, and delete those that are not relevant.</p><p id="p-0075" num="0074">After the relevant screenshots are identified, these screenshots may then be fed through a trained computer vision (CV) model (e.g., executed by server <b>630</b> or locally on the user's computing system) that uses AI to identify what the user was doing in the video. Additionally or alternatively, the screenshots may be used to train the CV model for more accurate detection. Once many actions are obtained from multiple users, the identified actions (e.g., clicked buttons, applications that were used, text that was entered, etc.) may then be fed to AI layers <b>632</b> to extract processes therefrom. Alternatively, extracted actions from a single user's screenshots could be used to automatically generate a workflow, which the SME may then edit to ensure it is correct in some embodiments. This information may be used in certain embodiments to produce a product definition document (PDD) that contains in substantial detail steps, screenshots, and flowchart(s). Such a PDD could be used for product documentation, for example.</p><p id="p-0076" num="0075">In certain embodiments, scene changes may be detected to produce the PDD. For instance, 20 different activities that a user is performing may be different scenes. The system may then use this information and log data to generate a skeleton robot that can be imported into a developer application, there the developer can then flush out the workflow contents.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart illustrating a process <b>700</b> for AI-based process identification, extraction, and automation for RPA, according to an embodiment of the present invention. The process begins with listener applications (i.e., listeners) generating generate logs of user interactions with their respective computing systems at <b>710</b>. In some embodiments, the listeners are configured to record where a user clicks on the screen and in what application, keystrokes, which button was clicked, instances of the user switching between applications, focus changes, that an email was sent and what the email pertains to, or any combination thereof. In certain embodiments, the listeners are configured to determine which applications the users are actually using, what percentage of time the users are using a given application, which features within the applications the users are using, which features the users are not using, or any combination thereof. In some embodiments, the listeners are configured to employ AI in detecting user interactions with their computing systems.</p><p id="p-0078" num="0077">In some embodiments, one or more (or potentially all) of the user computing systems are servers. For example, it may be desirable to extract processes for server management by deploying a listener on the server to monitor load balancing, server performance, corrective actions taken by administrators when server issues arise, etc. In this manner, robots may be trained to mimic administrators and automatically remedy issues that administrators typically need to address themselves.</p><p id="p-0079" num="0078">The listeners send the generated log data to the server at <b>720</b>. In some embodiments, the server or another server runs a conductor application and the log data is sent periodically to the conductor application as part of a heartbeat message. This data may include, but is not limited to, robot uptime, the workflow that is being executed, data pertaining to workflow activities (e.g., a detected total from an invoice) that could be used by a conductor application to provide certain global information in a dashboard (e.g., a total dollar amount processed by a group of robots or all robots of a certain type), etc. The heartbeat message may be sent every 3 seconds, every 5-10 seconds, every minute, or any other suitable time period or range without deviating from the scope of the invention. In certain embodiments, the log data is sent to the server once a predetermined amount of log data has been collected, after a predetermined time period has elapsed, or both. The log data is then stored in a database at <b>730</b>.</p><p id="p-0080" num="0079">The server accesses the stored log data collected from the listeners and runs the log data through at least one AI layer at <b>740</b>. In some embodiments, multiple AI layers may be used including, but not limited to, a sequence extraction layer, a clustering detection layer, a visual component detection layer, a text recognition layer, an audio-to-text translation layer, and/or any combination thereof. The AI layer(s) are configured to process the log data and identify potential RPA process(es) therein at <b>750</b>. More specifically, the identified RPA processes are those capable of automating certain user actions when implemented in an RPA workflow. The server is configured to identify similarities in existing processes implemented by existing robots (if any) at <b>760</b>. For example, similarities between processes may be determined by a common beginning and end and some amount of statistical commonality in the steps taking in between. The server is then configured to automatically generate workflow(s) including the identified RPA process(es) at <b>770</b>, generate robot(s) implementing the workflow(s) at <b>780</b>, and deploy the generated robot(s) at <b>790</b> (e.g., by pushing them out to the user's computing systems and executing the robots thereon). If a similar process is implemented by an existing robot, step <b>790</b> may include replacing the existing robot with the newly generated robot.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart illustrating a process for developing and deploying RPA workflows based on log data, according to an embodiment of the present invention. The process begins processing data via AI layer(s) to identify potential RPA process(es) at <b>810</b>. The identified process(es) are then presented to an RPA developer via a designer application on a computing system at <b>820</b>. The designer application receives and implements changes to the workflow made by the RPA developer at <b>830</b>. The designer application then generates a robot from the workflow at <b>840</b>, and the robot is deployed at <b>850</b>. In some embodiments, deployment may occur via a conductor application running on a server, which is configured to push the robot out to user computing systems. In some embodiments, this workflow deployment is realized via automation manager functionality in the designer application that implements the identified process in the robot responsive to input from the RPA developer.</p><p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart illustrating a process for subject matter expert (SME)-guided process extraction, according to an embodiment of the present invention. The process begins with a listener capturing screenshots from a user's computing system while the user interacts with the computing system at <b>910</b>. In some embodiments, the screenshots may be captured with a predetermined frequency, when a user takes a certain action, or a combination thereof. In certain embodiments, the saved screenshots are part of a video. Screenshots identified by an SME as being relevant are saved at <b>920</b> and screenshots identified as not being relevant are deleted at <b>930</b>. These screenshots may be identified is irrelevant and discarded by the SME, by a trained AI model, by an anomaly detector looking for screenshots that are dissimilar to others that have been identified as relevant, etc.</p><p id="p-0083" num="0082">The saved screenshots are then fed through a trained CV model that uses AI to identify what the user was doing in the saved screenshots at <b>940</b>. The saved screenshots are also used to train the CV model for more accurate detection at <b>950</b>. Once actions are identified by the CV model, these actions are fed to one or more AI layers to extract processes therefrom at <b>960</b>. The extracted process(es) are then used to generate respective workflows(s) and robot(s) at <b>970</b>.</p><p id="p-0084" num="0083">The process steps performed in <figref idref="DRAWINGS">FIGS. <b>7</b>-<b>9</b></figref> may be performed by a computer program, encoding instructions for the processor(s) to perform at least part of the process(es) described in <figref idref="DRAWINGS">FIGS. <b>7</b>-<b>9</b></figref>, in accordance with embodiments of the present invention. The computer program may be embodied on a non-transitory computer-readable medium. The computer-readable medium may be, but is not limited to, a hard disk drive, a flash device, RAM, a tape, and/or any other such medium or combination of media used to store data. The computer program may include encoded instructions for controlling processor(s) of a computing system (e.g., processor(s) <b>510</b> of computing system <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>) to implement all or part of the process steps described in <figref idref="DRAWINGS">FIGS. <b>7</b>-<b>9</b></figref>, which may also be stored on the computer-readable medium.</p><p id="p-0085" num="0084">The computer program can be implemented in hardware, software, or a hybrid implementation. The computer program can be composed of modules that are in operative communication with one another, and which are designed to pass information or instructions to display. The computer program can be configured to operate on a general purpose computer, an ASIC, or any other suitable device.</p><p id="p-0086" num="0085">It will be readily understood that the components of various embodiments of the present invention, as generally described and illustrated in the figures herein, may be arranged and designed in a wide variety of different configurations. Thus, the detailed description of the embodiments of the present invention, as represented in the attached figures, is not intended to limit the scope of the invention as claimed, but is merely representative of selected embodiments of the invention.</p><p id="p-0087" num="0086">The features, structures, or characteristics of the invention described throughout this specification may be combined in any suitable manner in one or more embodiments. For example, reference throughout this specification to &#x201c;certain embodiments,&#x201d; &#x201c;some embodiments,&#x201d; or similar language means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, appearances of the phrases &#x201c;in certain embodiments,&#x201d; &#x201c;in some embodiment,&#x201d; &#x201c;in other embodiments,&#x201d; or similar language throughout this specification do not necessarily all refer to the same group of embodiments and the described features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.</p><p id="p-0088" num="0087">It should be noted that reference throughout this specification to features, advantages, or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather, language referring to the features and advantages is understood to mean that a specific feature, advantage, or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus, discussion of the features and advantages, and similar language, throughout this specification may, but do not necessarily, refer to the same embodiment.</p><p id="p-0089" num="0088">Furthermore, the described features, advantages, and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize that the invention can be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances, additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.</p><p id="p-0090" num="0089">One having ordinary skill in the art will readily understand that the invention as discussed above may be practiced with steps in a different order, and/or with hardware elements in configurations which are different than those which are disclosed. Therefore, although the invention has been described based upon these preferred embodiments, it would be apparent to those of skill in the art that certain modifications, variations, and alternative constructions would be apparent, while remaining within the spirit and scope of the invention. In order to determine the metes and bounds of the invention, therefore, reference should be made to the appended claims.</p><p id="p-0091" num="0090">In an embodiment, a system includes a server and a plurality of user computing systems comprising respective listener applications. The listener applications are configured to generate logs of user interactions with their respective user computing systems and send the log data to the server. The server is configured to access log data collected from the listeners and run the log data through at least one AI layer. In some embodiments, multiple AI layers may be used including, but not limited to, a sequence extraction layer, a clustering detection layer, a visual component detection layer, a text recognition layer, an audio-to-text translation layer, and/or any combination thereof. The at least one AI layer is configured to process the log data and identify a potential RPA process therein. The server is then configured to automatically generate a workflow including the identified RPA process, generate a robot implementing the workflow, and push the generated robot out to the user computing systems to be executed thereon.</p><p id="p-0092" num="0091">In some embodiments, the server or another server runs a conductor application and the log data is sent periodically to the conductor application as part of a heartbeat message. In certain embodiments, the log data is sent to the server once a predetermined amount of log data has been collected, after a predetermined time period has elapsed, or both. In some embodiments, the server stores the received log data from the listeners in a database. In certain embodiments, the server is configured to find similarities between a previously existing RPA process executed by a robot on the user computing systems and replace the previously existing robot with the generated robot.</p><p id="p-0093" num="0092">In some embodiments, the listeners are configured to record where a user clicks on the screen and in what application, keystrokes, which button was clicked, instances of the user switching between applications, focus changes, that an email was sent and what the email pertains to, or any combination thereof. In certain embodiments, the listeners are configured to determine which applications the users are actually using, what percentage of time the users are using a given application, which features within the applications the users are using, which features the users are not using, or any combination thereof. In some embodiments, the listeners are configured to employ AI in detecting user interactions with their computing systems.</p><p id="p-0094" num="0093">In another embodiment, a computer-implemented method includes processing data, by a server, via at least one AI layer to identify one or more potential</p><p id="p-0095" num="0094">RPA processes. The computer-implemented method also includes receiving the identified potential RPA processes and presenting the one or more identified RPA processes to a developer, via a designer application on a developer computing system. The computer-implemented method further includes receiving and implementing changes to the workflow, by the designer application. Additionally, the computer-implemented method includes generating a robot from the workflow, by the designer application. The robot may then be deployed to one or more user computing systems. In some embodiments, deployment may occur via a conductor application running on a server, which is configured to push the robot out to user computing systems. In some embodiments, this workflow deployment is realized via automation manager functionality in the designer application that implements the identified process in the robot responsive to input from the RPA developer.</p><p id="p-0096" num="0095">In yet another embodiment, a computer-implemented method includes capturing screenshots, by a listener on a user computing system, while a user interacts with the user computing system. In some embodiments, the screenshots may be captured with a predetermined frequency, when a user takes a certain action, or a combination thereof. In certain embodiments, the saved screenshots are part of a video. The computer-implemented method also includes saving screenshots of the captured screenshots that are marked as relevant and deleting screenshots of the captured screenshots identified as irrelevant. The computer implemented method further includes feeding the saved screenshots through a trained CV model that uses AI to identify what the user was doing in the saved screenshots and feeding the identified actions to one or more AI layers to extract one or more processes therefrom. In some embodiments, the saved screenshots are also used to train the CV model for more accurate detection in the future. Additionally, the computer-implemented method includes using the one or more extracted processes to generate one or more respective workflows and robots.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computing system, comprising:<claim-text>memory storing computer program instructions; and</claim-text><claim-text>at least one processor configured to execute the computer program instructions, wherein the computer program instructions are configured to cause the at least one processor to:<claim-text>access log data collected from a plurality of listener applications, the log data comprising information pertaining to user interactions with user computing systems,</claim-text><claim-text>run the log data through at least one artificial intelligence (AI) layer, the at least one AI layer configured to process the log data, and</claim-text><claim-text>identify a robotic process automation (RPA) process in the log data based on output from the at least one AI layer.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer program instructions are further configured to cause the at least one processor to:<claim-text>automatically generate an RPA workflow comprising the identified RPA process.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the at least one AI layer comprises a sequence extraction layer, a clustering detection layer, a visual component detection layer, a text recognition layer, an audio-to-text translation layer, or any combination thereof.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computing system comprises a conductor application and the log data is sent periodically to the conductor application by the listener applications as part of a heartbeat message.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computing system is configured to access the log data after a predetermined amount of log data has been collected, after a predetermined time period has elapsed, or both.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the identified RPA process comprises an atomic instance of the RPA process.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer program instructions are further configured to cause the at least one processor to:<claim-text>determine similarities between the identified RPA process and a previously existing RPA process executed by an RPA robot on the user computing systems; and</claim-text><claim-text>replace an automation of the RPA robot executing the previously existing RPA process with the identified RPA process.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The computing system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein similarities between the identified RPA process and the previously existing RPA process are determined by at least one of a common beginning, a common end, and a predetermined amount of statistical commonality in steps taking in between in the RPA processes.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the listener applications are configured to record at least one of where a user clicks on a screen and in which application, keystrokes, which button was clicked, instances of the user switching between applications, focus changes, and that an email was sent and what the email pertains to.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the listener applications are configured to determine at least one of which applications users of the user computing systems are using, what percentage of time the users are using a given application, which features within the applications the users are using, and which features within the applications that the users are not using.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer program instructions are further configured to cause the at least one processor to:<claim-text>list and sort identified processes by at least one of an RPA score indicating how suitable a given process is to RPA, a process name, a total recording time, a number of users who executed the process, and a process execution time.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A non-transitory computer-readable medium storing a computer program, the computer program configured to cause at least one processor to:<claim-text>access log data collected from respective listener applications of a plurality of user computing systems;</claim-text><claim-text>run the log data through at least one artificial intelligence (AI) layer, the at least one AI layer configured to process the log data and identify one or more robotic process automation (RPA) processes therein, and</claim-text><claim-text>identify an RPA process in the log data based on output from the at least one AI layer.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the computer program is further configured to cause the at least one processor to:<claim-text>automatically generate an RPA workflow comprising the identified RPA process.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the at least one AI layer comprises a sequence extraction layer, a clustering detection layer, a visual component detection layer, a text recognition layer, an audio-to-text translation layer, or any combination thereof.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the computer program is further configured to cause the at least one processor to:<claim-text>determine similarities between the identified RPA process and a previously existing RPA process executed by an RPA robot on at least one of the user computing systems; and</claim-text><claim-text>replace an automation of the RPA robot executing the previously existing RPA process with the identified RPA process.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein similarities between the identified RPA process and the previously existing RPA process are determined by at least one of a common beginning, a common end, and a predetermined amount of statistical commonality in steps taking in between in the RPA processes.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the computer program is further configured to cause the at least one processor to:<claim-text>list and sort identified processes by at least one of an RPA score indicating how suitable a given process is to RPA, a process name, a total recording time, a number of users who executed the process, and a process execution time.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the identified RPA process comprises an atomic instance of the RPA process.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A computer-implemented method, comprising:<claim-text>generating, by a listener application, a log comprising user interactions with a user computing system; and</claim-text><claim-text>sending log data from the log to a server, by the listener application, wherein</claim-text><claim-text>the log data comprises at least one of where a user clicks on a screen and in which application, keystrokes, which button was clicked, instances of the user switching between applications of the user computing system, focus changes, and that an email was sent and what the email pertains to.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer-implemented method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein listener application periodically sends the log data to a conductor application of the server as part of a heartbeat message.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The computer-implemented method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the listener application sends the log data to the server after a predetermined amount of log data has been collected, after a predetermined time period has elapsed, or both.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The computer-implemented method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the user interactions comprise at least one of which applications the user is using, what percentage of time the user is using a given application, which features within the applications the user is using, and which features within the applications that the user is not using.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The computer-implemented method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the user interactions comprise which features within the applications of the user computing system that the user is using and which features within the applications of the user computing system that the user is not using.</claim-text></claim></claims></us-patent-application>