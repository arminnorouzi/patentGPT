<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005049A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005049</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17366451</doc-number><date>20210702</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>30</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>10</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>901</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>29</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>30</main-group><subgroup>0639</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>10</main-group><subgroup>047</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9024</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHODS AND A SYSTEM FOR IN-STORE NAVIGATION</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>NCR Corporation</orgname><address><city>Atlanta</city><state>GA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>McDaniel</last-name><first-name>Christian Lee</first-name><address><city>Atlanta</city><state>GA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Lewin</last-name><first-name>Alexander Simon</first-name><address><city>Marietta</city><state>GA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A list of items to pick for an order at a store is obtained. A hierarchical graph of the store is maintained based on regions within the store, endpoints within the store, and locations of items relative to the regions and endpoints. Each item in the list is connected to its nearest endpoint within the graph and a path is found between the endpoints. An optimized and order list of the items is found based on an optimal path through each endpoint. For each segment within the path a list of traversed endpoints is identified. The endpoints are grouped by region; a new navigation instruction is generated only when a given region is changed. The process is repeated for each pair of items in the list; the list is reduced; and translated into text as an optimal path to pick the items of the order within the store.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="181.61mm" wi="158.75mm" file="US20230005049A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="178.65mm" wi="162.22mm" file="US20230005049A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="158.07mm" wi="150.54mm" file="US20230005049A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="201.00mm" wi="175.94mm" file="US20230005049A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="193.80mm" wi="180.59mm" file="US20230005049A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">With the advancement in technologies a variety of new jobs that were never conceivable just a few years ago have emerged in the industry, such as car drivers, delivery services, shopping services, etc. Workers only have to work when the worker is available and wants to work. The worker simply activates a mobile application from the location of the work and indicates that the worker is available for jobs. The service then routes customers information and/or ordering information to the worker and the job is performed. This is extremely convenient for the customers, the workers, the businesses that benefit from increased sales, and the third-party delivery or shopping services.</p><p id="p-0003" num="0002">Yet, some of these types of jobs are more difficult and less automated than others. For example, professional shoppers that fulfill shopping lists by visiting a store on behalf of a customer, obtaining items on a shopping list of the customer at the store, paying for the items on behalf of the customer at the store, and delivering the items to the customer. These professional third-party shoppers are typically supplied an unordered list of the customer's items via their mobile application when they enter the customer-identified store. The items of the list include very little additional information that would be useful to the professional shopper in location the items within the store. At best, the professional shoppers are provided some coarse grain and general information about the locations of some items on the list within the store, such as an aisle number or a department name. These professional shoppers are expected to organize the list and find each item without any other aid.</p><p id="p-0004" num="0003">This has created large inefficiencies in professional shopping jobs, as the professional shoppers take on lengthy lists and attempt to ad-hoc organize efficient routes through the stores on their own.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0005" num="0004">In various embodiments, methods and a system for in-store navigation instructions are presented.</p><p id="p-0006" num="0005">According to an aspect, a method for in-store navigation instructions is presented. A list of item identifiers for items and a store identifier for a store are received. A hierarchical graph representing regions and endpoints relative to locations of the items within the store is obtained based on the item identifiers and the store identifier. Each item identifier is connected in the list to a nearest endpoint identified in the hierarchical graph producing a modified graph comprising relevant endpoints. An optimal path is identified through the relevant endpoints in the modified graph. Traversed endpoints are identified between each segment of the optimal path. The traversed endpoints are grouped by unique region and a navigational instruction is generated when a given unique region is changed, and the navigational instructions are provided.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> is a diagram of a system for providing in-store navigation instructions, according to an example embodiment.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> is a diagram illustrating an example labeled map data for a store, according to an example embodiment.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram of a method for providing in-store navigation instructions, according to an example embodiment.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram of another method for providing in-store navigation instructions, according to an example embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> is a diagram of a system <b>100</b> for providing in-store navigation instructions, according to an example embodiment. It is to be noted that the components are shown schematically in greatly simplified form, with only those components relevant to understanding of the embodiments being illustrated.</p><p id="p-0012" num="0011">Furthermore, the various components (that are identified in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) are illustrated and the arrangement of the components is presented for purposes of illustration only. It is to be noted that other arrangements with more or less components are possible without departing from the teachings of providing in-store navigation instructions presented herein and below.</p><p id="p-0013" num="0012">As will be discussed in the various embodiments that follow, the teachings provide that given a list of items and a store location of a store from which the items are to be obtained, optimal navigation instructions are provided back to the requester that provided the list. The compute time for generating the navigation instructions is substantially reduced from would conventionally be required for such a problem.</p><p id="p-0014" num="0013">For example, an attempt to conventionally programmatically generate an optimal path through a store would result in infeasible compute response times. One may attempt to represent the store as a strongly connected graph of items and then utilize a Traveling Sales Person (TSP) algorithm. However, given a shopping list with only 30 items, using an optimized TSP algorithm would take roughly 20 minutes to sort the items (given TSP&#x2192;O (n<sup>2</sup>*2<sup>n</sup>)).</p><p id="p-0015" num="0014">This is not an issue with the teachings provided herein and the computer time is substantially reduced. The techniques organizes information needed to solve the problem such that only a subset of the locations for the items are considered at any given time during searching, i.e. clustering. Moreover, the techniques provided do not rely on location services of the user device or the store itself, such that there is no dependency on the accuracy on reported location information.</p><p id="p-0016" num="0015">As used herein, an &#x201c;item&#x201d; is an element of a shopping list; a &#x201c;region&#x201d; is a semantic labeled section within the store (i.e., aisle, department, checkout counters, etc.); an &#x201c;endpoint&#x201d; is a specific location that is an access point for the regions, connects adjacent regions, and serves as a tether point for all items within a given region; and a &#x201c;node&#x201d; is an vertex in a graph, representing either an endpoint or an item.</p><p id="p-0017" num="0016">System <b>100</b> comprises a cloud or server <b>110</b> and a user-operated device <b>120</b>. Optionally, system <b>100</b> includes a plurality of third-party servers <b>130</b>.</p><p id="p-0018" num="0017">Cloud/Server <b>110</b> comprises at least one processor <b>111</b> and a non-transitory computer-readable storage medium <b>112</b>, Medium <b>112</b> comprises executable instructions for a navigation instructions generator <b>113</b> and an application (app) interface <b>114</b>. The executable instructions when executed by processor <b>111</b> from the medium <b>112</b> cause processor <b>111</b> to perform operations discussed herein and below with navigation instructions generator <b>113</b> and app interface <b>114</b>.</p><p id="p-0019" num="0018">Each user-operated device <b>120</b> comprises a processor <b>121</b> and a non-transitory computer-readable storage medium <b>122</b>. Medium <b>122</b> comprises executable instructions for a mobile app <b>123</b>. The executable instructions when executed by processor <b>121</b> from medium <b>122</b> cause processor <b>121</b> to perform operations discussed herein and below with respect to app <b>123</b>.</p><p id="p-0020" num="0019">Each optional third-party server <b>130</b> comprises a processor <b>131</b> and a non-transitory computer-readable storage medium <b>132</b>. Medium <b>132</b> comprises executable instructions for a third-party app service <b>133</b> and an Application Programming Interface <b>134</b>. The executable instructions when executed by processor <b>131</b> from medium <b>132</b> cause processor <b>131</b> to perform operations discussed herein and below with respect to app service <b>133</b> and API <b>134</b>.</p><p id="p-0021" num="0020">Navigation instructions generator <b>113</b> receives as input a list of items provided by app <b>123</b> or, optionally, provided via API <b>134</b> from third-party app service <b>133</b> to app interface <b>114</b>. App <b>123</b> or API <b>134</b> also provides a store identifier or store name associated with a store for which the items on the list are to be purchased by a shopper (the shopper operates device <b>120</b>).</p><p id="p-0022" num="0021">Navigation instructions generator <b>113</b> inspects the map data for a given store and connects the items on the list.</p><p id="p-0023" num="0022">The processing of the navigation instructions generated will be discussed in the context of an example store and an example 4 item shopping list illustrated in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>, according to an example embodiment.</p><p id="p-0024" num="0023">The 4 items on the shopping list are:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0024">1. La Croix Sparkling Water Variety Pack&#xae; (labeled as <b>19</b> in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>;</li>    <li id="ul0001-0002" num="0025">2. Sabra Hummus Roasted Red Peppers&#xae; (labeled as <b>12</b> in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>);</li>    <li id="ul0001-0003" num="0026">3. Dave's Organic 21 Whole Grain&#xae; (labeled as <b>25</b> in FIG. in the aisle identified as <b>6</b> (circle with <b>6</b> in it)); and</li>    <li id="ul0001-0004" num="0027">4. Cap'n Crunch Berriesweetened Corn and Oat Cereal&#xae; (labeled as <b>24</b> in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>).</li></ul></p><p id="p-0025" num="0028">Navigation instructions generator <b>113</b> constructs hierarchical map data from information maintained for the store using the store's items, regions, and endpoints as the nodes of the graph/map data. Each item in the list is then connected to that item's nearest endpoint and a pathfinding algorithm is processed to find an intermediate path between the endpoints. This results in a strongly-connect graph of the relevant endpoints (adjacency matrix).</p><p id="p-0026" num="0029">An example, adjacency matrix for the example 4-item list may appear as follows:</p><p id="p-0027" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>[</entry></row><row><entry>&#x2003;&#x2003;[999999, 67, 53, 71, 999999, 35], //item 1</entry></row><row><entry>&#x2003;&#x2003;[67, 999999, 68, 54, 999999, 82], //item 2</entry></row><row><entry>&#x2003;&#x2003;[53, 68, 999999, 32, 999999, 72], //item 3</entry></row><row><entry>&#x2003;&#x2003;[71, 54, 32, 999999, 999999, 87], //item 4</entry></row><row><entry>&#x2003;&#x2003;[47, 50, 52, 999999, 999999, 52], //entrance</entry></row><row><entry>&#x2003;&#x2003;[999999, 999999, 999999, 999999, 999999, 999999]</entry></row><row><entry>//exit</entry></row><row><entry>]</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0028" num="0030">Navigation instructions manager <b>113</b> then uses a modified TSP algorithm to generate an optimized, ordered-list of items based on the optimal path through each endpoint. The path is parameterized with a start endpoint (store entrance <b>26</b> in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>) and an end endpoint (store checkout region <b>27</b> in the <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>). For example, sorted items: [<b>26</b>, <b>25</b>, <b>24</b>, <b>19</b>, <b>12</b>, <b>27</b>] where <b>26</b> is the entrance and <b>27</b> is the exit of the store.</p><p id="p-0029" num="0031">Navigation instructions manager <b>113</b> produces the instructions from getting from item A to item B by analyzing each segment of the journey independently, such as: entrance&#x2192;item <b>0</b>, item <b>0</b>&#x2192;item <b>1</b>, item <b>1</b>&#x2192;item <b>2</b>, . . . item n&#x2192;checkout. For each segment a Dijkstra algorithm is processed on the full graph, with item A as the start and item B as the destination. This produces a list of endpoints that are hit along the journey from A&#x2192;B. For example:</p><p id="p-0030" num="0032">PATH [<b>26</b>, <b>6</b>, <b>9</b>, <b>25</b>]//entrance&#x2192;item <b>0</b></p><p id="p-0031" num="0033">PATH [<b>25</b>, <b>9</b>, <b>6</b>, <b>23</b>, <b>7</b>, <b>22</b>, <b>8</b>, <b>24</b>]//item <b>0</b>&#x2192;item <b>1</b></p><p id="p-0032" num="0034">PATH [<b>24</b>, <b>8</b>, <b>5</b>, <b>19</b>]//item <b>1</b>&#x2192;item <b>2</b></p><p id="p-0033" num="0035">PATH [<b>19</b>, <b>5</b>, <b>2</b>, <b>13</b>, <b>1</b>, <b>0</b>, <b>12</b>]//item <b>2</b>&#x2192;item <b>3</b></p><p id="p-0034" num="0036">PATH [<b>12</b>, <b>0</b>, <b>3</b>, <b>27</b>]//item <b>3</b>&#x2192;exit</p><p id="p-0035" num="0037">Next, navigation instructions manager <b>113</b> groups the lists of endpoints by region and feeds a new instruction only when changing regions. This reduces the list of endpoints to contain only the necessary nodes for producing the navigation instructions for the shopper. For example, before reduction:</p><p id="p-0036" num="0038">endpoint |<b>26</b>|<b>6</b>|<b>9</b>|<b>2</b></p><p id="p-0037" num="0039">Region|Entrance|Front of Aisles <b>4</b>-<b>5</b>|Front of Aisle 6|Item: Dave's Organic 21 Whole Grain</p><p id="p-0038" num="0040">After reduction:<ul id="ul0002" list-style="none">    <li id="ul0002-0001" num="0000">    <ul id="ul0003" list-style="none">        <li id="ul0003-0001" num="0041">Endpoint |<b>26</b>|<b>9</b>||<b>25</b></li>        <li id="ul0003-0002" num="0042">Region|Entrance|Front of Aisle <b>6</b>|Item: Dave's Organic 21 Whole Grain.</li>    </ul>    </li></ul></p><p id="p-0039" num="0043">Note the omission of Endpoint <b>6</b> following reduction, this was removed because nodes <b>6</b> and <b>9</b> are both members of the Front of Aisle region.</p><p id="p-0040" num="0044">The above-referenced approach is repeated by the navigation instructions manager <b>113</b> for every pair of items within the list of items.</p><p id="p-0041" num="0045">Finally, the list of regions are then translated into a list of intuitive instructions in text that can be read to the shopper and can be provided in any number of manners, such as through app <b>123</b>, through an existing third-party app service <b>133</b>, through a text message sent to device <b>120</b>, read by voice services of device <b>120</b>, etc. For example:</p><p id="p-0042" num="0046">Reduced List:</p><p id="p-0043" num="0047">Endpoint|<b>26</b>|<b>9</b>||<b>25</b></p><p id="p-0044" num="0048">Region|Entrance|Front of Aisle <b>6</b>|Item: Dave's Organic 21 Whole Grain.</p><p id="p-0045" num="0049">Resulting in readable instructions to the shopper as:<ul id="ul0004" list-style="none">    <li id="ul0004-0001" num="0000">    <ul id="ul0005" list-style="none">        <li id="ul0005-0001" num="0050">1) from the main entrance, head toward the end of the aisles closer to the front of the store; in the Artesian Breads section, at aisle <b>6</b>, pickup one item for Dave's Organic 21 Whole Grain;</li>        <li id="ul0005-0002" num="0051">2) From the Artesian Breads section, head toward the end of the Aisles closer to the back of the store; in the canned foods and cereals section, at aisles <b>4</b> and <b>5</b>, pick up one item&#x2014;Cap'N Crunch Berriesweetened Corn &#x26; Oat Cereal&#xae;, aisle <b>5</b>;</li>        <li id="ul0005-0003" num="0052">3) from the canned foods and cereals, head toward the nuts and waters section at aisles <b>2</b> and <b>3</b>, pickup one item&#x2014;La Croix Sparkling Water Variety Pack&#xae;, aisle <b>3</b>;</li>        <li id="ul0005-0004" num="0053">4) from the nuts and waters section, head toward the end of the aisles closer to the front of the store; in the hummus section, at aisle <b>1</b>, pickup one item&#x2014;Sabra Hummus, Roasted Red Pepper&#xae;;</li>        <li id="ul0005-0005" num="0054">5) you have completed your shopping list: head toward the checkout lanes located at the front of the store, to your left when facing the front of the store.</li>    </ul>    </li></ul></p><p id="p-0046" num="0055">Conventional approaches to indoor or venue instructions have relied on hardware and a hardware dependent. Such techniques may include Bluetooth&#xae; beacons, specialized lighting, cameras, shelf sensors, etc. These attempts are costly due to the hardware investment and software integration required to utilize the hardware.</p><p id="p-0047" num="0056">Conversely, system <b>100</b> utilizes domain-specific or store-specific knowledge of relative location of regions and items throughout a given store in order to deduce a shopper's location along a designated shopping path. This completely avoids any hardware requirements of location tracking on the shopper within the store. Moreover, once the navigation instructions are provided to the shopper, the device <b>130</b> of the shopper does not require any network connectivity and the full set of navigation instructions are available in text for reading by the shopper while at the store. Again, the instructions can be provided in its own customized app <b>123</b>, integrated within a third-party app service <b>133</b> via API <b>134</b> (such as Instacart&#xae;, and others), provided as a text message, read through the user's device speaking services, etc.</p><p id="p-0048" num="0057">In an embodiment, each step of the navigational instruction may be presented on device or communicated from device <b>120</b> to the user in an interactive manner via the app <b>123</b>, such as show me the next navigational instruction and the user instructs the app <b>123</b> to display the next navigational struct and/or speak in natural language the next instruction based on the user pressing a next-step button or speaking &#x201c;read me the next step.&#x201d; Thus, app <b>123</b> may be interactive and/or use both text and or speech to give the user the next navigational step for picking the items of the order. Furthermore, the user may have headsets or wireless ear pieces for hearing any spoken next navigational instruction from app <b>123</b>.</p><p id="p-0049" num="0058">In an embodiment, the user is a customer and not a professional shopper, such that consumers can benefit from the optimal path on their shopping lists.</p><p id="p-0050" num="0059">In an embodiment, navigation instructions manager <b>113</b> may receive multiple lists for multiple orders at a single store via app interface <b>114</b>. Each list provided a label by the shopper. As instructions are given, the instructions inform the shopper where each picked item is to go, for example bottled water goes in basket or bag A for order X and chips goes in basket B for order Y, This may also allow instore pickers to fulfill multiple orders at a time within the store using the optimal path picking techniques of instructions manager <b>113</b>.</p><p id="p-0051" num="0060">In an embodiment, app interface <b>114</b> may be further interfaced with a given store's inventory system, such that any items on the list that are known to be out-of-stock can be communicated via app <b>123</b> to the user along with a potential in-stock replacement for the out-of-stock item. This replacement item can be communicated, via app <b>123</b>, before the user is at the store to pick the items from the list and/or as the user is picking the list in real time.</p><p id="p-0052" num="0061">In an embodiment, the domain knowledge associated with any given store can be entered via app interface <b>114</b> to instructions manager <b>113</b> by employees of the store, professional shoppers, consumers, etc. In this way, more detailed landmarks or semantic information for endpoints and regions can be maintained and integrated into the processing of manager <b>113</b> for more descriptive navigational instructions produced by manager <b>113</b>.</p><p id="p-0053" num="0062">In an embodiment, the endpoints and regions are mapped to a planogram of the store based on aisle numbers and shelf numbers provided for each item by the store, When the planogram changes or an item location within the planogram (for example shelf number and aisle number), the endpoints and regions can be adjusted automatically during navigation instruction generation by manager <b>113</b> based on the reported location of the item within the updated planogram and endpoints and regions maintained in the hierarchical map for the store.</p><p id="p-0054" num="0063">The above-referenced embodiments and other embodiments are now discussed with reference to <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0055" num="0064"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram of a method <b>200</b> for providing in-store navigation instructions, according to an example embodiment. The software module(s) that implements the method <b>200</b> is referred to as a &#x201c;semantic in-store navigation manager.&#x201d; The semantic in-store navigation manager is implemented as executable instructions programmed and residing within memory and/or a non-transitory computer-readable (processor-readable) storage medium and executed by one or more processors of one or more devices. The processor(s) of the device(s) that executes the semantic in-store navigation manager are specifically configured and programmed to process the semantic in-store navigation manager. The semantic in-store navigation manager has access to one or more network connections during its processing. The connections can be wired, wireless, or a combination of wired and wireless.</p><p id="p-0056" num="0065">In an embodiment, the device that executes the semantic in-store navigation manager is cloud <b>110</b>. In an embodiment, the device that executes semantic in-store navigation manager is server <b>110</b>.</p><p id="p-0057" num="0066">In an embodiment, the semantic in-store navigation manager is all of, or some combination of navigation instructions manager <b>113</b> and/or app interface <b>114</b>.</p><p id="p-0058" num="0067">At <b>210</b>, semantic in-store navigation manager receives a list of item identifiers for items of a shopping or picking list and a store identifier for a store.</p><p id="p-0059" num="0068">In an embodiment, at <b>211</b>, the semantic in-store navigation manager receives the list and the store identifier via a mobile application <b>133</b> of a mobile device operated by a user (professional shopper, employee of the store fulfilling online orders, and/or a consumer).</p><p id="p-0060" num="0069">In an embodiment, at <b>212</b>, the semantic in-store navigation manager receives the list and the store identifier via an API <b>134</b> from a third-party service associated with employing a user to pick the items of the list for an online order being processed by a third-party service <b>133</b>.</p><p id="p-0061" num="0070">At <b>220</b>, the semantic in-store navigation manager obtains a hierarchical graph representing regions and endpoints relative to locations of the items within the store based on the item identifiers and the store identifier.</p><p id="p-0062" num="0071">In an embodiment, at <b>221</b>, the semantic in-store navigation manager represents each node of the hierarchical graph as a particular region, a particular endpoint, and a particular item identifier based on the locations.</p><p id="p-0063" num="0072">At <b>230</b>, the semantic in-store navigation manager connects each item in the list to its nearest endpoint represented in the hierarchical graph producing a modified hierarchical graph that comprises relevant endpoints.</p><p id="p-0064" num="0073">In an embodiment, at <b>231</b>, the semantic in-store navigation manager generates the modified graph as a strongly connected graph for the relevant endpoints in an adjacency matrix.</p><p id="p-0065" num="0074">At <b>240</b>, the semantic in-store navigation manager identifies an optimal path through the relevant endpoints in the modified graph.</p><p id="p-0066" num="0075">In an embodiment of <b>231</b> and <b>240</b>, at <b>241</b>, the semantic in-store navigation manager process a modified TSP algorithm with the adjacency matrix to obtain the path beginning at an entrance endpoint of the store and ending at an exit endpoint for the store.</p><p id="p-0067" num="0076">At <b>250</b>, the semantic in-store navigation manager identifies traversed endpoints between each segment of the optimal path.</p><p id="p-0068" num="0077">In an embodiment of <b>241</b> and <b>250</b>, at <b>251</b>, the semantic in-store navigation manager analyzes each segment of the path for a pair of item identifiers independently.</p><p id="p-0069" num="0078">In an embodiment of <b>251</b> and at <b>252</b>, the semantic in-store navigation manager processes a Dijkstra algorithm on a full version of the modified graph for each segment to identify the traversed endpoints.</p><p id="p-0070" num="0079">At <b>260</b>, the semantic in-store navigation manager groups the traversed endpoints by unique region and generates a navigational instruction when a given unique region is changed.</p><p id="p-0071" num="0080">In an embodiment of <b>252</b> and <b>260</b>, at <b>261</b>, the semantic in-store navigation manager removes any repeating endpoint within the path when two or more item identifiers are associated with a same endpoint.</p><p id="p-0072" num="0081">At <b>270</b>, the semantic in-store navigation manager provides the navigational instructions produced at <b>260</b> in response to having received the list and the store identifier at <b>210</b>.</p><p id="p-0073" num="0082">In an embodiment, at <b>271</b>, the semantic in-store navigation manager translates regions, endpoints, and item identifiers into natural language sentences.</p><p id="p-0074" num="0083">In an embodiment, at <b>272</b>, the semanti in-store navigation manager provides the navigational instructions as an in-app message, a text message, or an API to a third-party service.</p><p id="p-0075" num="0084">In an embodiment, at <b>273</b>, the semantic in-store navigation manager receives changes to the hierarchical graph for the store via app interface <b>114</b> and updates the graph accordingly.</p><p id="p-0076" num="0085"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram of another method <b>300</b> for providing in-store navigation instructions, according to an example embodiment. The software module(s) that implements the method <b>300</b> is referred to as an &#x201c;in-store navigation manager.&#x201d; The in-store navigation manager is implemented as executable instructions programmed and residing within memory and/or a non-transitory computer-readable (processor-readable) storage medium and executed by one or more processors of one or more devices. The processor(s) of the device(s) that executes the in-store navigation manager are specifically configured and programmed to process the in-store navigation manager. The in-store navigation manager has access to one or more network connections during its processing. The network connections can be wired, wireless, or a combination of wired and wireless,</p><p id="p-0077" num="0086">In an embodiment, the device that executes the in-store navigation manager is cloud <b>110</b>. In an embodiment, the device that executes the in-store navigation manager is server <b>110</b>.</p><p id="p-0078" num="0087">In an embodiment, the in-store navigation manager is all of, or some combination of navigation instructions manager <b>113</b>, app interface <b>114</b>, app <b>133</b>, API <b>124</b>, and/or method <b>200</b>.</p><p id="p-0079" num="0088">The processing of the in-store navigation manager represents another and, in some ways, enhanced processing perspective from that which was discussed above with <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>, and method <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0080" num="0089">At <b>310</b>, the in-store navigation manager maintains a hierarchical graph for locations of regions, endpoints, and items within a store relative to one another.</p><p id="p-0081" num="0090">In an embodiment, at <b>311</b>, the in-store navigation manager maintains the regions as semantic locations associated with given areas of the store.</p><p id="p-0082" num="0091">In an embodiment of <b>311</b> and at <b>312</b>, the in-store navigation manager maintains the endpoints as access points for the regions that connect the regions and serve as tether points for the items that are associated with each region.</p><p id="p-0083" num="0092">At <b>320</b>, the in-store navigation manager receives a list of items associated with an order from a requestor.</p><p id="p-0084" num="0093">In an embodiment, at <b>321</b>, the in-store navigation manager identifies the requestor as a mobile application of a mobile device operated by a user or as an API request from a third-party service that provided the order to the user.</p><p id="p-0085" num="0094">At <b>330</b>, the in-store navigation manager produces a modified graph comprising each endpoint nearest to each item of the list.</p><p id="p-0086" num="0095">At <b>340</b>, the in-store navigation manager generates a path through the modified graph from an entry endpoint to an exit endpoint of the store.</p><p id="p-0087" num="0096">In an embodiment, at <b>350</b>, the in-store navigation manager identifies specific endpoints in the path traversed by each segment of the path.</p><p id="p-0088" num="0097">In an embodiment, at <b>360</b>, the in-store navigation manager groups specific endpoints and retains only unique regions associated with the path.</p><p id="p-0089" num="0098">In an embodiment, at <b>361</b>, the in-store navigation manager ensures that each pair of items associated with a same region are associated with a single one of the text sentences produced at <b>370</b>.</p><p id="p-0090" num="0099">At <b>370</b>, the in-store navigation manager translates remaining regions, remaining endpoints, and the items into text sentences.</p><p id="p-0091" num="0100">At <b>380</b>, the in-store navigation manager provides the text sentences as navigational instructions for picking the order associated with the list to the requestor.</p><p id="p-0092" num="0101">In an embodiment, at <b>381</b>, the in-store navigation manager provides the text sentences as an in-app message, a text message, or an API message that is delivered to the requestor,</p><p id="p-0093" num="0102">It should be appreciated that where software is described in a particular form (such as a component or module) this is merely to aid understanding and is not intended to limit how software that implements those functions may be architected or structured. For example, modules are illustrated as separate modules, but may be implemented as homogenous code, as individual components, some, but not all of these modules may be combined, or the functions may be implemented in software structured in any other convenient manner.</p><p id="p-0094" num="0103">Furthermore, although the software modules are illustrated as executing on one piece of hardware, the software may be distributed over multiple processors or in any other convenient manner.</p><p id="p-0095" num="0104">The above description is illustrative, and not restrictive, Many other embodiments will be apparent to those of skill in the art upon reviewing the above description. The scope of embodiments should therefore be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled.</p><p id="p-0096" num="0105">In the foregoing description of the embodiments, various features are grouped together in a single embodiment for the purpose of streamlining the disclosure, This method of disclosure is not to be interpreted as reflecting that the claimed embodiments have more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus, the following claims are hereby incorporated into the Description of the Embodiments, with each claim standing on its own as a separate exemplary embodiment.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method, comprising:<claim-text>receiving a list of item identifiers for items and a store identifier for a store;</claim-text><claim-text>obtaining a hierarchical graph representing regions and endpoints relative to locations of the items within the store based on the item identifiers and the store identifier;</claim-text><claim-text>connecting each item identifier in the list to a nearest endpoint identified in the hierarchical graph producing a modified graph comprising relevant endpoints;</claim-text><claim-text>identifying an optimal path through the relevant endpoints in the modified graph;</claim-text><claim-text>identifying traversed endpoints between each segment of the optimal path;</claim-text><claim-text>grouping the traversed endpoints by unique region and generating a navigational instruction when a given unique region is changed; and</claim-text><claim-text>providing the navigational instructions.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein receiving further includes receiving the list and store identifier via a mobile application of a mobile device operated by a user. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein receiving further includes receiving the list and store identifier via an Application Programming Interface (API) from a third-party service associated with employing a user to pick the items of the list for an online order being processed by the third-party service.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein obtaining further includes representing each node in the hierarchical graph as a particular region, a particular endpoint, and a particular item identifier based on the locations.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein connecting further includes generating the modified graph as a strongly-connected graph for the relevant endpoints represented in an adjacency matrix.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein identifying the optimal path further includes processing a modified Traveling Sales Person (TSP) algorithm with the adjacency matrix to obtain the optimal path beginning at an entrance endpoint for the store and ending at an exit endpoint for the store.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein identifying the traversed endpoints further includes analyzing each segment of the optimal path for a pair of item identifiers independently.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein analyzing further includes processing a Dijkstra algorithm on a full version of the modified graph for each segment to identify the traversed endpoints.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein grouping further includes removing any repeating endpoint within the optimal path when two or more item identifiers are associated with a same corresponding endpoint.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein providing further includes translating region identifiers for the regions that remain in the navigation instructions, endpoint identifiers for the endpoints that remain in the navigation instructions, and item identifiers for the items of the list into natural language text sentences and provide the natural language text sentences as the navigation instructions.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein providing further includes providing the navigation instructions as an in-app message to a mobile application of a mobile device, as a text message to the mobile device, or as an Application Programming Interface (API) message to a third-party service .</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising, receiving changes to the hierarchical graph for the store and updating the hierarchical graph with the changes.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A method, comprising:<claim-text>maintaining hierarchical graph for locations of regions, endpoints, and items within a store relative to one another;</claim-text><claim-text>receive a list of items associated with an order from a requestor;</claim-text><claim-text>producing a modified graph comprising each endpoint nearest to each item of the list;</claim-text><claim-text>generating a path through the modified graph from an entry endpoint to an exit endpoint of the store;</claim-text><claim-text>identifying specific endpoints in the path traversed by each segment of the path;</claim-text><claim-text>grouping the specific endpoints and retaining only unique regions associated with the path;</claim-text><claim-text>translating remaining regions, remaining endpoints, and the items into text sentences; and</claim-text><claim-text>providing the text sentences as semantic navigational instructions for picking the order associated with the list to the requestor.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein maintaining further includes maintaining the regions as semantic locations associated with given areas of the store.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein maintaining further includes maintaining the endpoints as access points for the regions that connect the regions and serve as tether points for the items that are associated with each region.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein receiving the list further includes identifying the requestor as a mobile application of a mobile device operated by a user or as an Application Programming Interface (API) request from a third-party service that provided the order to the user.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein grouping further includes ensuring that each pair of items associated with a same region are associated with a single one of the text sentences.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein providing further includes providing the text sentences as an in-app message, a text message, or an Application Programming Interface (API) message.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A system, comprising:<claim-text>a cloud or a server;</claim-text><claim-text>wherein the cloud or the server is configured to: receive a list of items associated with an order that is to be picked at a store; represent the store in a hierarchical graph comprising regions, endpoints, and items relative to physical locations of the regions, the endpoints, and the items within the store; connect each item to a nearest endpoint identified in the hierarchical graph and producing a modified graph; generate an optimal path through the modified graph beginning at an entry endpoint and ending at an exit endpoint; identify specific endpoints traversed by each segment of the optimal path; group duplicate endpoints from the specific endpoints and retain only unique regions associated with the optimal path; translate remaining regions, remaining endpoints, and the items into a natural language text sentences; and provide the text sentences to a requestor that provided the list as optimal navigational instructions for picking the order at the store.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the cloud or server is further configured to provide the optimal navigational instructions as a text message to the requestor, as an in-app message to a mobile application operated by the requestor, or as an Application Programming Interface (API) message of a third-party service that generated the order for an online order of a customer of the third-party service</claim-text></claim></claims></us-patent-application>