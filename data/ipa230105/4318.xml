<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004319A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004319</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17940696</doc-number><date>20220908</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>1</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>57</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0652</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>1</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0604</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0825</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>57</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0679</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SECURELY ARMING A MEMORY DEVICE FOR SELF-DESTRUCTION BY IMPLEMENTING A SELF-DESTRUCTION COUNTDOWN TIMER USING A BATTERY BACKED REAL-TIME CLOCK</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15930963</doc-number><date>20200513</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11449264</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17940696</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Micro Technology, Inc.</orgname><address><city>Boise</city><state>ID</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Strong</last-name><first-name>Robert W.</first-name><address><city>Folsom</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A processing device receives a command to arm a memory device for self-destruction. In response to the command, a self-destruction countdown timer is commenced. An expiry of the self-destruction countdown timer and based on detecting the expiry of the self-destruction countdown timer, data stored by the memory device is destructed.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="135.72mm" wi="158.75mm" file="US20230004319A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="238.84mm" wi="140.55mm" file="US20230004319A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="152.15mm" wi="153.75mm" orientation="landscape" file="US20230004319A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="169.25mm" wi="153.75mm" orientation="landscape" file="US20230004319A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="153.50mm" wi="153.75mm" orientation="landscape" file="US20230004319A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="244.43mm" wi="138.26mm" file="US20230004319A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="244.43mm" wi="138.35mm" file="US20230004319A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="224.71mm" wi="143.43mm" file="US20230004319A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">PRIORITY APPLICATION</heading><p id="p-0002" num="0001">This application is a continuation of U.S. application Ser. No. 15/930,963, filed May 13, 2020, which is incorporated herein by reference in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">Embodiments of the disclosure relate generally to memory sub-systems and, more specifically, to securely arming a memory device for self-destruction.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">A memory sub-system can include one or more memory devices that store data. The memory components can be, for example, non-volatile memory devices and volatile memory devices. In general, a host system can utilize a memory sub-system to store data at the memory devices and to retrieve data from the memory devices.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004">The present disclosure will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the disclosure.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example computing system that includes a memory sub-system, in accordance with some embodiments of the present disclosure.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIGS. <b>2</b>A, <b>2</b>B, and <b>2</b>C</figref> is a data flow diagram illustrating interactions between components in a secure communication environment in arming and disarming a memory device for self-destruction, in accordance with some embodiments of the present disclosure.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flow diagram illustrating an example method for securely arming a memory device for self-destruction, in accordance with some embodiments of the present disclosure.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow diagram illustrating an example method for securely disarming a memory device that is armed for self-destruction, in accordance with some embodiments of the present disclosure.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram of an example computer system in which embodiments of the present disclosure may operate.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0011" num="0010">Aspects of the present disclosure are directed to securely arming a memory device in a memory sub-system for self-destruction. A memory sub-system can be a storage device, a memory module, or a hybrid of a storage device and memory module. Examples of storage devices and memory modules are described below in conjunction with <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In general, a host system can utilize a memory sub-system that includes one or more components, such as memory devices that store data. The host system can provide data to be stored at the memory sub-system and can request data to be retrieved from the memory sub-system.</p><p id="p-0012" num="0011">A memory device can be a non-volatile memory device. One example of non-volatile memory devices is a negative-and (NAND) memory device. Other examples of non-volatile memory devices are described below in conjunction with <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Data operations can be performed by the memory sub-system. The data operations can be host-initiated operations. For example, the host system can initiate a data operation (e.g., write, read, erase, etc.) on a memory sub-system. The host system can send access requests (e.g., write command, read command) to the memory sub-system, such as to store data on a memory device at the memory sub-system and to read data from the memory device on the memory sub-system.</p><p id="p-0013" num="0012">A memory device within a memory sub-system may store confidential, proprietary, or other sensitive information that should only be accessed by specifically authorized users. A memory device may be password protected to protect sensitive information stored thereon. However, loss of such a storage device (e.g., theft or accidental misplacement) can nonetheless be concerning for certain enterprises (e.g., military or intelligence community) given the sensitivity of the stored information. For example, while password protection can provide assurances of data at rest protection, given enough time and resources an entity (e.g., a nation state) could successfully breach the security countermeasures implemented on the memory device.</p><p id="p-0014" num="0013">Aspects of the present disclosure address the above and other issues by implementing a self-destruct mechanism within memory devices. In an initial phase, a memory device is armed for self-destruction in response to a self-destruction command received from a host system. In response to receiving the self-destruction command, a self-destruction component of the memory device commences a self-destruction countdown timer. The self-destruction countdown timer can be implemented with a battery backed real-time clock included with the memory device or through tracking an internal clock signal provided by the storage device ASIC. The self-destruction countdown timer measures the time between receiving the command and self-destruction of the memory device. The time can be specified in the command or a default time can be used. At the expiry of the self-destruction countdown timer, data stored by the memory device is destroyed. For example, user data can be physically or cryptographically erased, firmware of the memory device can be destroyed, or a combination of both can be performed. If an abort command is received from the host system by the memory device prior to expiry of the self-destruction countdown timer, the self-destruction component aborts the self-destruction process and the timer is stopped and reset.</p><p id="p-0015" num="0014">Consistent with some embodiments, an additional security layer can be added to the self-destruction mechanism. For example, a password can be required for commands to arm or disarm a memory device for self-destruction. As another example, an incoming command can include a security token that is digitally signed with a first cryptographic key using a cryptographic algorithm (e.g., Rivest, Shamir, and Adelman (RSA)) and the memory device can verify the security token using a second cryptographic key provisioned to the device.</p><p id="p-0016" num="0015">The self-destruction mechanism for memory devices described herein reduces vulnerabilities in a memory sub-system by preventing access of sensitive information by unauthorized parties that can occur if the memory devices is lost or stolen even if the unauthorized parties have sufficient time and resources to breach conventional security countermeasures for memory devices. Traditional memory sub-systems often support password re-tries enforcement. That is, if a password is re-entered incorrectly a specified number of consecutive times (e.g., <b>5</b>), then a power cycle of the memory sub-system is required. This protection rationale assumes that the power cycle requirement makes a brute force password guessing attack more difficult and time consuming, but not necessarily impossible. The self-destruction mechanism described herein can be used to improve and augment the re-tries mitigation by arming a memory device for self-destruction after a threshold number of password retries.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example computing system <b>100</b> that includes a memory sub-system <b>110</b>, in accordance with some embodiments of the present disclosure. The memory sub-system <b>110</b> can include media, such as one or more volatile memory devices (e.g., memory device <b>140</b>), one or more non-volatile memory devices (e.g., memory device <b>130</b>), or a combination of such.</p><p id="p-0018" num="0017">A memory sub-system <b>110</b> can be a storage device, a memory module, or a hybrid of a storage device and memory module. Examples of a storage device include a solid-state drive (SSD), a flash drive, a universal serial bus (USB) flash drive, an embedded Multi-Media Controller (eMMC) drive, a Universal Flash Storage (UFS) drive, a secure digital (SD) card, and a hard disk drive (HDD). Examples of memory modules include a dual in-line memory module (DIMM), a small outline DIMM (SO-DIMM), and various types of non-volatile dual in-line memory module (NVDIMM).</p><p id="p-0019" num="0018">The computing system <b>100</b> can be a computing device such as a desktop computer, laptop computer, network server, mobile device, a vehicle (e.g., airplane, drone, train, automobile, or other conveyance), Internet of Things (IoT) enabled device, embedded computer (e.g., one included in a vehicle, industrial equipment, or a networked commercial device), or such computing device that includes memory and a processing device.</p><p id="p-0020" num="0019">The computing system <b>100</b> can include a host system <b>120</b> that is coupled to one or more memory sub-systems <b>110</b>. In some embodiments, the host system <b>120</b> is coupled to different types of memory sub-system <b>110</b>. <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates one example of a host system <b>120</b> coupled to one memory sub-system <b>110</b>. As used herein, &#x201c;coupled to&#x201d; or &#x201c;coupled with&#x201d; generally refers to a connection between components, which can be an indirect communicative connection or direct communicative connection (e.g., without intervening components), whether wired or wireless, including connections such as electrical, optical, magnetic, and the like.</p><p id="p-0021" num="0020">The host system <b>120</b> can include a processor chipset and a software stack executed by the processor chipset. The processor chipset can include one or more cores, one or more caches, a memory controller (e.g., NVDIMM controller), and a storage protocol controller (e.g., PCIe controller, SATA controller). The host system <b>120</b> uses the memory sub-system <b>110</b>, for example, to write data to the memory sub-system <b>110</b> and read data from the memory sub-system <b>110</b>.</p><p id="p-0022" num="0021">The host system <b>120</b> can be coupled to the memory sub-system <b>110</b> via a host interface <b>102</b>. Examples of a host interface <b>102</b> include, but are not limited to, a serial advanced technology attachment (SATA) interface, a peripheral component interconnect express (PCIe) interface, USB interface, Fibre Channel, Serial Attached SCSI (SAS), Small Computer System Interface (SCSI), a double data rate (DDR) memory bus, a dual in-line memory module (DIMM) interface (e.g., DIMM socket interface that supports Double Data Rate (DDR)), Open NAND Flash Interface (ONFI), Double Data Rate (DDR), Low Power Double Data Rate (LPDDR), or any other interface. The host interface <b>102</b> can be used to transmit data between the host system <b>120</b> and the memory sub-system <b>110</b>. The host system <b>120</b> can further utilize an NVM Express (NVMe) interface to access components (e.g., memory devices <b>130</b>) when the memory sub-system <b>110</b> is coupled with the host system <b>120</b> by the PCIe interface. The host interface <b>102</b> can provide an interface for passing control, address, data, and other signals between the memory sub-system <b>110</b> and the host system <b>120</b>. <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a memory sub-system <b>110</b> as an example. In general, the host system <b>120</b> can access multiple memory sub-systems via a same communication connection, multiple separate communication connections, and/or a combination of communication connections.</p><p id="p-0023" num="0022">The memory devices <b>130</b>,<b>140</b> can include any combination of the different types of non-volatile memory devices and/or volatile memory devices. The volatile memory devices (e.g., memory device <b>140</b>) can be, but are not limited to, random access memory (RAM), such as dynamic random-access memory (DRAM) and synchronous dynamic random-access memory (SDRAM).</p><p id="p-0024" num="0023">Some examples of non-volatile memory devices (e.g., memory device <b>130</b>) include negative-and (NAND) type flash memory and write-in-place memory, such as a three-dimensional cross-point (&#x201c;3D cross-point&#x201d;) memory device, which is a cross-point array of non-volatile memory cells. A cross-point array of non-volatile memory can perform bit storage based on a change of bulk resistance, in conjunction with a stackable cross-gridded data access array. Additionally, in contrast to many flash-based memories, cross-point non-volatile memory can perform a write in-place operation, where a non-volatile memory cell can be programmed without the non-volatile memory cell being previously erased. NAND type flash memory includes, for example, two-dimensional NAND (2D NAND) and three-dimensional NAND (3D NAND).</p><p id="p-0025" num="0024">Each of the memory devices <b>130</b> can include one or more arrays of memory cells. One type of memory cell, for example, single level cells (SLC) can store one bit per cell. Other types of memory cells, such as multi-level cells (MLCs), triple level cells (TLCs), quad-level cells (QLCs), and penta-level cells (PLCs) can store multiple bits per cell. In some embodiments, each of the memory devices <b>130</b> can include one or more arrays of memory cells such as SLCs, MLCs, TLCs, QLCs, or any combination of such. In some embodiments, a particular memory device can include an SLC portion, and an MLC portion, a TLC portion, a QLC portion, or a PLC portion of memory cells. The memory cells of the memory devices <b>130</b> can be grouped as pages that can refer to a logical unit of the memory device used to store data. With some types of memory (e.g., NAND), pages can be grouped to form blocks.</p><p id="p-0026" num="0025">Although non-volatile memory components such as NAND type flash memory (e.g., 2D NAND, 3D NAND) and 3D cross-point array of non-volatile memory cells are described, the memory device <b>130</b> can be based on any other type of non-volatile memory, such as read-only memory (ROM), phase change memory (PCM), self-selecting memory, other chalcogenide based memories, ferroelectric transistor random-access memory (FeTRAM), ferroelectric random access memory (FeRAM), magneto random access memory (MRAM), Spin Transfer Torque (STT)-MRAM, conductive bridging RAM (CBRAM), resistive random access memory (RRAM), oxide based RRAM (OxRAM), NOR flash memory, and electrically erasable programmable read-only memory (EEPROM).</p><p id="p-0027" num="0026">The memory sub-system controller <b>115</b> (or controller <b>115</b> for simplicity) can communicate with the memory devices <b>130</b> to perform operations such as reading data, writing data, or erasing data at the memory devices <b>130</b> and other such operations. The memory sub-system controller <b>115</b> can include hardware such as one or more integrated circuits and/or discrete components, a buffer memory, or a combination thereof. The hardware can include digital circuitry with dedicated (i.e., hard-coded) logic to perform the operations described herein. The memory sub-system controller <b>115</b> can be a microcontroller, special purpose logic circuitry (e.g., a field programmable gate array (FPGA), an application specific integrated circuit (ASIC), etc.), or other suitable processor.</p><p id="p-0028" num="0027">The memory sub-system controller <b>115</b> can include a processor <b>117</b> (processing device) configured to execute instructions stored in a local memory <b>119</b>. In the illustrated example, the local memory <b>119</b> of the memory sub-system controller <b>115</b> includes an embedded memory configured to store instructions for performing various processes, operations, logic flows, and routines that control operation of the memory sub-system <b>110</b>, including handling communications between the memory sub-system <b>110</b> and the host system <b>120</b>.</p><p id="p-0029" num="0028">In some embodiments, the local memory <b>119</b> can include memory registers storing memory pointers, fetched data, and the like. The local memory <b>119</b> can also include ROM for storing micro-code. While the example memory sub-system <b>110</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref> has been illustrated as including the memory sub-system controller <b>115</b>, in another embodiment of the present disclosure, a memory sub-system <b>110</b> does not include a memory sub-system controller <b>115</b>, and can instead rely upon external control (e.g., provided by an external host, or by a processor or controller separate from the memory sub-system).</p><p id="p-0030" num="0029">In general, the memory sub-system controller <b>115</b> can receive commands or operations from the host system <b>120</b> and can convert the commands or operations into instructions or appropriate commands to achieve the desired access to the memory devices <b>130</b> and/or the memory device <b>140</b>. The memory sub-system controller <b>115</b> can be responsible for other operations such as wear leveling operations, garbage collection operations, error detection and error-correcting code (ECC) operations, encryption operations, caching operations, and address translations between a logical address (e.g., logical block address (LBA), namespace) and a physical address (e.g., physical block address) that are associated with the memory devices <b>130</b>. The memory sub-system controller <b>115</b> can further include host interface circuitry to communicate with the host system <b>120</b> via the physical host interface. The host interface circuitry can convert the commands received from the host system <b>120</b> into command instructions to access the memory devices <b>130</b> and/or the memory device <b>140</b> and convert responses associated with the memory devices <b>130</b> and/or the memory device <b>140</b> into information for the host system <b>120</b>.</p><p id="p-0031" num="0030">In some embodiments, the memory devices <b>130</b> include local media controller <b>135</b> that operate in conjunction with memory sub-system controller <b>115</b> to execute operations on one or more memory cells of the memory devices <b>130</b>.</p><p id="p-0032" num="0031">The memory sub-system <b>110</b> also includes a self-destruction component <b>113</b> that facilitates arming the memory device <b>130</b> for self-destruction. Once the memory device <b>130</b> is armed for self-destruction, commands directed to the memory device <b>130</b> may be rejected with the exception of a command used to abort the self-destruction of the memory device <b>130</b>.</p><p id="p-0033" num="0032">In some embodiments, the memory sub-system controller <b>115</b> includes at least a portion of the self-destruction component <b>113</b>. For example, the memory sub-system controller <b>115</b> can include a processor <b>117</b> (processing device) configured to execute instructions stored in local memory <b>119</b> for performing the operations described herein. In some embodiments, the self-destruction component <b>113</b> is part of the host system <b>120</b>, an application, or an operating system. In some embodiments, the local media controller <b>135</b> includes at least a portion of the self-destruction component <b>113</b>.</p><p id="p-0034" num="0033">As shown, the memory sub-system <b>110</b> also includes a clock <b>114</b> that is in communication with the self-destruction component <b>113</b>. In some embodiments, the clock <b>114</b> can be part of the self-destruction component <b>113</b>. The self-destruction component <b>113</b> uses the clock to implement a self-destruction countdown timer that measure a time between receiving a command to arm the memory device <b>130</b> for self-destruction and the actual self-destruction of the memory device <b>130</b>. The clock <b>114</b> can include a battery backed real-time clock or an application-specific integrated circuit (ASIC) of the memory device <b>130</b>. Further details with regards to the operations of the self-destruction component <b>113</b> are described below.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a data flow diagram illustrating interactions between components in a secure communication environment in performing an example method for securely arming a memory device for self-destruction, in accordance with some embodiments of the present disclosure.</p><p id="p-0036" num="0035">As shown, at <b>202</b>, the self-destruction component <b>113</b> receives a command to arm the memory device <b>130</b> for self-destruction. The command can, in some embodiments, include a specified time period for a self-destruction countdown timer. For example, in some embodiments, a user may specify the time period. In some embodiments, the specified time period is a factory provisioned default value (e.g., if a user does not specify the time period or if a user is not allowed to specify a time period).</p><p id="p-0037" num="0036">The self-destruction component <b>113</b> arms the device for self-destruction and commences the self-destruction countdown timer based on receiving the command (at <b>204</b>). The self-destruction component <b>113</b> can, in some embodiments, include a battery backed real-time clock that provides a clock signal that the self-destruction component <b>113</b> can utilize to implement the self-destruction timer. In other embodiments, the self-destruction component <b>113</b> can utilize a clock signal provide by an internal clock of the memory device <b>130</b> to implement the self-destruction countdown timer.</p><p id="p-0038" num="0037">At <b>206</b>, the self-destruction component <b>113</b> detects expiry of the self-destruction countdown timer (e.g., after the user specified time period has elapsed) and based on the expiry of the self-destruction countdown timer, the self-destruction component <b>113</b> destroys data stored by the memory device <b>130</b> (at <b>208</b>). In destroying the data, the self-destruction component <b>113</b> can erase user data (e.g., a physical or cryptographic erase), destroy the firmware on the memory device <b>130</b>, or a combination of both. Consistent with some embodiments, the manner of data destruction can be specified in the command to arm the memory device <b>130</b>.</p><p id="p-0039" num="0038">While the memory device <b>130</b> is armed for self-destructions, commands directed at the memory device <b>130</b> may be rejected. For example, with reference to <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, at <b>210</b>, a command is provided to the memory device <b>130</b> by the host system <b>120</b> while the memory device <b>130</b> is armed for self-destruction, and at <b>212</b> the self-destruction component <b>113</b> rejects the command because the device is armed for self-destruction.</p><p id="p-0040" num="0039">As an exception, an abort command can be used to disarm the memory device <b>130</b>. For example, as shown in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, prior to expiry of the self-destruction countdown timer, the host system <b>120</b> can send a second command to the self-destruction component <b>113</b> to abort the self-destruction of the memory device <b>130</b> (at <b>214</b>). Based on receiving the abort command (at <b>216</b>), the self-destruction countdown component <b>113</b> aborts the self-destruction of the memory device <b>130</b>, at <b>218</b>.</p><p id="p-0041" num="0040">Consistent with some embodiments, an additional security layer can be added to the self-destruction processes described herein. For example, an asymmetric key pair&#x2014;a public key and a private key&#x2014;may be pre-generated, and the self-destruction component <b>113</b> may be provisioned with the public key, while the host system <b>120</b> or other secure environment is provisioned with the private key. The public key can be used by the self-destruction component <b>113</b> to verify that commands related to self-destruction of the memory device <b>130</b> are received from a trusted source. For example, the command to arm the memory device <b>130</b> can include a security token that includes a digital signature generated with the private key using a known cryptographic algorithm (e.g., RSA) and the self-destruction component <b>113</b> may verify the digital signature of the security token with the public key using the same cryptographic algorithm prior to commencing the self-destruction countdown timer. As another example, the command to abort the self-destruction of the memory device <b>130</b> can also include security token with a digital signature generated with the private key using a known cryptographic algorithm (e.g., RSA) and the self-destruction component <b>113</b> may verify the digital signature with the public key using the same cryptographic algorithm prior to aborting the self-destruction of the memory device <b>130</b>.</p><p id="p-0042" num="0041">Consistent with some embodiments, the self-destruction process utilizes a password scheme whereby a user is required to provide a valid password as a condition for successful arming and disarming of the memory device <b>130</b>. In these embodiments, the self-destruction component <b>113</b> supports a mechanism that a user can invoke to establish a secret password for arming and disarming the memory device <b>130</b>.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flow diagram illustrating an example method <b>300</b> for securely arming a memory device for self-destruction, in accordance with some embodiments of the present disclosure. The method <b>300</b> can be performed by processing logic that can include hardware (e.g., a processing device, circuitry, dedicated logic, programmable logic, microcode, hardware of a device, an integrated circuit, etc.), software (e.g., instructions run or executed on a processing device), or a combination thereof. In some embodiments, the method <b>300</b> is performed by the self-destruction component <b>113</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Although processes are shown in a particular sequence or order, unless otherwise specified, the order of the processes can be modified. Thus, the illustrated embodiments should be understood only as examples, and the illustrated processes can be performed in a different order, and some processes can be performed in parallel. Additionally, one or more processes can be omitted in various embodiments. Thus, not all processes are required in every embodiment. Other process flows are possible.</p><p id="p-0044" num="0043">At operation <b>305</b>, the processing device receives a command to arm a memory device (e.g., the memory device <b>130</b>) for self-destruction. Consistent with some embodiments, the command can include a specified time for a self-destruction countdown timer. The specified time may be a user specified time or a default value. The granularity of the user specified time can, for example, be in months, weeks, days, hours, minutes, or seconds.</p><p id="p-0045" num="0044">In some embodiments, the command can further specify a manner of self-destruction. For example, the command can specify that user data is to be physically or cryptographically erased, that firmware of the device is to be destroyed, or a combination of both.</p><p id="p-0046" num="0045">In some embodiments, the command is received from a host system (e.g., host system <b>120</b>) via a host interface system. In some embodiments, the command is received from the host system via a communication port (e.g., a UART port or other serial communication port that supports two-way communication such as SMBus, I2C, or I3C). The command can be a vendor specific command or may be implemented using a replay protected memory block scheme. Consistent with some embodiments, the command can be supplied along with a password or digitally signed token to ensure that the command originated from a trusted source.</p><p id="p-0047" num="0046">The processing device arms the memory device for self-destruction based on the command. While armed for self-destruction, additional commands directed to the memory device may be rejected by the processing device with the exception of an abort command, which can be used to abort the self-destruction of the memory device and is discussed in further detail below. In arming the memory device for self-destruction, the processing device, at operation <b>310</b>, commences a self-destruction countdown timer based on receiving the command. The self-destruction countdown time can be set based on a user specified time specified in the command or can be set based on a default time, if a time is not specified.</p><p id="p-0048" num="0047">In some embodiments, the processing device can include or be in communication with a battery backed real time clock and the processing device can use a clock signal provided by the battery backed real time clock in commencing the self-destruction countdown. In some embodiments, the processing device may use a clock signal provided by an internal clock of the memory device (e.g., an ASIC). Consistent with these embodiments, the processing device can utilize the host system internal clock to track a total elapsed time since (e.g., by counting clock ticks) receiving the command while the host system has been powered on. That is, if the memory device is power cycled or in a low power state, the self-destruction countdown timer continues where it left off prior to the power interruption.</p><p id="p-0049" num="0048">As noted above, in some embodiments, a password is provided along with the command, and prior to arming the memory device and commencing the self-destruction countdown timer, the processing device verifies the password.</p><p id="p-0050" num="0049">In some embodiments, the command can include a digitally signed security token and the processing device may verify the security token before commencing the self-destruction countdown timer. For example, the security token may be digitally signed using a first asymmetric cryptographic key provisioned to the host system using one of several known cryptographic algorithms (e.g., RSA). The processing device may be provisioned with a second asymmetric cryptographic key that can be used to verify the security token using the same cryptographic algorithm used to generate the digital signature.</p><p id="p-0051" num="0050">At operation <b>315</b>, the processing device detects expiry of the self-destruction countdown timer. That is, the processing device determines based on the self-destruction countdown time that the default or user specified time has elapsed since receiving the command.</p><p id="p-0052" num="0051">At operation <b>320</b>, the processing device destructs data stored by the memory device based on expiry of the self-destruction countdown timer. The destructing of the data stored by the memory device includes destroying user data stored by the memory device, destroying the memory device's firmware, or a combination of both. In destroying user data stored by the memory device, the processing device can physically or cryptographically erase the user data. The manner of self-destruction may be based on the command. For example, as noted above, the command can specify the manner of self-destruction.</p><p id="p-0053" num="0052">The manner of physical erasure can vary depending on the type of memory device. For example, in embodiments in which a non-volatile memory device such as NAND type flash memory is being physically erased, the processing device performs a block erase in which the erase operation is performed on a block-by-block basis. That is, the processing device erases data from the memory device by changing the state of memory cells, blocks at a time. More specifically, on a per-block basis, the processing devices change the state of memory cells to &#x201c;1.&#x201d;</p><p id="p-0054" num="0053">In example embodiments in which the memory device is a self-encrypting memory device, the processing device can cryptographically erased stored user data. For example, a self-encrypting device uses one or more symmetric encryption keys to encrypt data stored by the device. By erasing the one or more symmetric encryption keys, the stored encrypted user data is effectively impossible to decrypt. Thus, the stored user data is rendered unrecoverable when the encryption key used to encrypt the user data is destroyed.</p><p id="p-0055" num="0054">In embodiments in which the processing device destroys the memory device's firmware, the processing device erases the firmware from the memory device. For example, the firmware may be stored in static memory component (e.g., SRAM) of the memory device and upon physically erasing the firmware from the static memory component, the memory device is unbootable. In some embodiments, the firmware can be encrypted using a symmetric encryption key stored by the memory device, and the processing device can destroy the firmware by erasing the symmetric encryption key.</p><p id="p-0056" num="0055">In some embodiments, the memory device can support recovery options that allow data to be recovered from the memory device even despite user data or firmware being destroyed. For example, a ROM component of the memory device can store data that can be used to recover the device. Consistent with these embodiments, the processing device can provide disable these recovery options to ensure that destroyed data is not recovered. Whether the processing device disables the recovery options can be based on the command to arm the device for self-destruction. For example, the command can specify whether recovery options for the memory device are to be disabled.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow diagram illustrating an example method <b>400</b> for securely disarming a memory device that is armed for self-destruction, in accordance with some embodiments of the present disclosure. The method <b>300</b> can be performed by processing logic that can include hardware (e.g., a processing device, circuitry, dedicated logic, programmable logic, microcode, hardware of a device, an integrated circuit, etc.), software (e.g., instructions run or executed on a processing device), or a combination thereof. In some embodiments, the method <b>400</b> is performed by the self-destruction component <b>113</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Although processes are shown in a particular sequence or order, unless otherwise specified, the order of the processes can be modified. Thus, the illustrated embodiments should be understood only as examples, and the illustrated processes can be performed in a different order, and some processes can be performed in parallel. Additionally, one or more processes can be omitted in various embodiments. Thus, not all processes are required in every embodiment. Other process flows are possible.</p><p id="p-0058" num="0057">At operation <b>405</b>, the processing device receives a first command to arm a memory device (e.g., the memory device <b>130</b>) for self-destruction. Consistent with some embodiments, the command can include a user specified time for a self-destruction countdown timer. In some embodiments, the command is received from the host system <b>120</b> via a host interface system. In some embodiments, the command is received from the host system <b>120</b> via a communication port (e.g., a UART port or other serial communication port that supports two-way communication).</p><p id="p-0059" num="0058">At operation <b>410</b>, the processing device commences a self-destruction countdown timer based on receiving the command. The self-destruction countdown timer can be set based on a user specified time specified in the command or can be set based on a default time, if a time is not specified. In some embodiments, the first command can include a first digital signature and the processing device may verify the first digital signature before commencing the self-destruction countdown timer.</p><p id="p-0060" num="0059">At operation <b>415</b>, the processing device receives a second command to abort the self-destruction of the memory device. The second command is received prior to expiry of the self-destruction countdown. Consistent with some embodiments, a password can be supplied with the second command to ensure that the command originated from a trusted source.</p><p id="p-0061" num="0060">At operation <b>420</b>, the processing device aborts the self-destruction of the memory device. In aborting the self-destruction, the processing device stops and resets the self-destruction countdown timer. In some embodiments, the second command can include a digital signature and the processing device may verify the digital signature before aborting the self-destruction of the memory device. In some embodiments, a password is provided along with the command, and prior to aborting the self-destruction of the memory device, the processing device verifies the password.</p><heading id="h-0006" level="1">EXAMPLES</heading><p id="p-0062" num="0061">Example 1 is memory sub-system comprising: a memory device; and a processing device, operatively coupled with the memory device, to perform operations comprising: receiving, from a host system, a command to arm the memory device for self-destruction; in response to the command, commencing a self-destruction countdown timer; detecting expiry of the self-destruction countdown timer; and based on detecting the expiry of the self-destruction countdown timer, destructing data stored by the memory device.</p><p id="p-0063" num="0062">Example 2 includes the memory-subsystem of Example 1, wherein the command comprises a user specified time for the self-destruction countdown timer; and the expiry of the self-destruction countdown timer is based on the user specified time.</p><p id="p-0064" num="0063">Example 3 includes the memory sub-systems of any one of Examples for 2, and optionally further comprises a battery backed real time clock to provide a clock signal, wherein the processing device commences the self-destruction timer using clock signal provided by the battery backed real time clock.</p><p id="p-0065" num="0064">Example 4 includes the memory sub-systems of any one of Examples 1-3, wherein the commencing of the self-destruction countdown timer comprises: tracking a total elapsed time since receiving the command using a clock signal provided by an internal clock of the host system.</p><p id="p-0066" num="0065">Example 5 includes the memory sub-systems of any one of Examples 1-4, wherein the operations further comprise: receiving a second command while the memory device is armed for self-destruction; and rejecting the second command based on the memory device being armed for self-destruction.</p><p id="p-0067" num="0066">Example 6 includes the memory sub-systems of any one of Examples 1-5, wherein destructing the data stored by the memory device comprises one of: physically erasing user data stored by the memory device; or cryptographically erasing user data stored by the memory device.</p><p id="p-0068" num="0067">Example 7 includes the memory sub-systems of any one of Examples 1-6, wherein destructing the data stored by the memory device comprises destroying firmware of the memory device.</p><p id="p-0069" num="0068">Example 8 includes the memory sub-systems of any one of Examples 1-7, wherein: the command further comprises a digital signature generated using a first asymmetric cryptographic key; and the operations further comprising verifying the digital signature using a second asymmetric cryptographic key.</p><p id="p-0070" num="0069">Example 9 is a method comprising: receiving, from a host system, a command to arm the memory device for self-destruction; in response to the command, commencing a self-destruction countdown timer; detecting expiry of the self-destruction countdown timer; and based on detecting the expiry of the self-destruction countdown timer, destructing data stored by the memory device.</p><p id="p-0071" num="0070">Example 10 includes the method of Example 9, wherein the command comprises a user specified time for the self-destruction countdown timer; and the expiry of the self-destruction countdown timer is based on the user specified time.</p><p id="p-0072" num="0071">Example 11 includes the method of any one of Examples 9 or 10, and optionally further comprises a battery backed real time clock to provide a clock signal, wherein the processing device commences the self-destruction timer using clock signal provided by the battery backed real time clock.</p><p id="p-0073" num="0072">Example 12 includes the method of any one of Examples 9-11, wherein the commencing of the self-destruction countdown timer comprises: tracking a total elapsed time since receiving the command using a clock signal provided by an internal clock of the host system.</p><p id="p-0074" num="0073">Example 13 includes the method of any one of Examples 9-12, wherein the operations further comprise: receiving a second command while the memory device is armed for self-destruction; and rejecting the second command based on the memory device being armed for self-destruction.</p><p id="p-0075" num="0074">Example 14 includes the method of any one of Examples 9-13, wherein destructing the data stored by the memory device comprises one of: physically erasing user data stored by the memory device; or cryptographically erasing user data stored by the memory device.</p><p id="p-0076" num="0075">Example 15 includes the method of any one of Examples 9-14, wherein destructing the data stored by the memory device comprises destroying firmware of the memory device.</p><p id="p-0077" num="0076">Example 16 includes the method of any one of Examples 9-15, wherein: the command further comprises a digitally signed security token generated using a first asymmetric cryptographic key; and the operations further comprising verifying the digitally signed security token using a second asymmetric cryptographic key.</p><p id="p-0078" num="0077">Example 17 is a non-transitory computer-readable storage medium comprising instructions that, when executed by a processing device, configure the processing device to perform operations comprising: receiving, from a host system, a first command to arm the memory device for self-destruction; in response to the command, commencing a self-destruction countdown timer; receiving, from the host system, a second command to abort the self-destruction of the memory device; and based on receiving the second command prior to expiry of the self-destruction countdown timer, aborting the self-destruction of the memory device.</p><p id="p-0079" num="0078">Example 18 includes the non-transitory computer-readable storage medium of Example 17, wherein the second command comprises a digitally signed security token generated using a first asymmetric cryptographic key; and the operations further comprising verifying the digitally signed security token using a second asymmetric cryptographic key before aborting the self-destruction of the memory device.</p><p id="p-0080" num="0079">Example 19 includes the non-transitory computer-readable storage medium of any one of Examples 17 or 18 wherein the first command comprises a user specified time for the self-destruction countdown timer; the expiry of the self-destruction countdown timer is based on the user specified time.</p><p id="p-0081" num="0080">Example 20 includes the non-transitory computer-readable storage medium of any one of Examples 17-19, wherein the processing device commences the self-destruction timer using a clock signal provided by one of: a battery backed real time clock or an internal clock of the host system.</p><p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example machine in the form of a computer system <b>500</b> within which a set of instructions can be executed for causing the machine to perform any one or more of the methodologies discussed herein. <figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example machine of a computer system <b>500</b> within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, can be executed. In some embodiments, the computer system <b>500</b> can correspond to a host system (e.g., the host system <b>120</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) that includes, is coupled to, or utilizes a memory sub-system (e.g., the memory sub-system <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) or can be used to perform the operations of a controller (e.g., to execute an operating system to perform operations corresponding to the self-destruction component <b>113</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). In alternative embodiments, the machine can be connected (e.g., networked) to other machines in a local area network (LAN), an intranet, an extranet, and/or the Internet. The machine can operate in the capacity of a server or a client machine in client-server network environment, as a peer machine in a peer-to-peer (or distributed) network environment, or as a server or a client machine in a cloud computing infrastructure or environment.</p><p id="p-0083" num="0082">The machine can be a personal computer (PC), a tablet PC, a set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, a web appliance, a server, a network router, a switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while a single machine is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.</p><p id="p-0084" num="0083">The example computer system <b>500</b> includes a processing device <b>502</b>, a main memory <b>504</b> (e.g., ROM, flash memory, DRAM such as SDRAM or RDRAM, etc.), a static memory <b>506</b> (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage system <b>518</b>, which communicate with each other via a bus <b>530</b>.</p><p id="p-0085" num="0084">Processing device <b>502</b> represents one or more general-purpose processing devices such as a microprocessor, a central processing unit, or the like. More particularly, the processing device can be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or a processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device <b>502</b> can also be one or more special-purpose processing devices such as an ASIC, a FPGA, a digital signal processor (DSP), network processor, or the like. The processing device <b>502</b> is configured to execute instructions <b>526</b> for performing the operations and steps discussed herein. The computer system <b>500</b> can further include a network interface device <b>508</b> to communicate over a network <b>520</b>.</p><p id="p-0086" num="0085">The data storage system <b>518</b> can include a machine-readable storage medium <b>524</b> (also known as a computer-readable medium) on which is stored one or more sets of instructions <b>526</b> or software embodying any one or more of the methodologies or functions described herein. The instructions <b>526</b> can also reside, completely or at least partially, within the main memory <b>504</b> and/or within the processing device <b>502</b> during execution thereof by the computer system <b>500</b>, the main memory <b>504</b> and the processing device <b>502</b> also constituting machine-readable storage media. The machine-readable storage medium <b>524</b>, data storage system <b>518</b>, and/or main memory <b>504</b> can correspond to the memory sub-system <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0087" num="0086">In one embodiment, the instructions <b>526</b> include instructions to implement functionality corresponding to a self-destruction component (e.g., the self-destruction component <b>113</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). While the machine-readable storage medium <b>524</b> is shown in an example embodiment to be a single medium, the term &#x201c;machine-readable storage medium&#x201d; should be taken to include a single medium or multiple media that store the one or more sets of instructions. The term &#x201c;machine-readable storage medium&#x201d; shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure. The term &#x201c;machine-readable storage medium&#x201d; shall accordingly be taken to include, but not be limited to, solid-state memories, optical media, and magnetic media.</p><p id="p-0088" num="0087">Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.</p><p id="p-0089" num="0088">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. The present disclosure can refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage systems.</p><p id="p-0090" num="0089">The present disclosure also relates to an apparatus for performing the operations herein. This apparatus can be specially constructed for the intended purposes, or it can include a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program can be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.</p><p id="p-0091" num="0090">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems can be used with programs in accordance with the teachings herein, or it can prove convenient to construct a more specialized apparatus to perform the method. The structure for a variety of these systems will appear as set forth in the description below. In addition, the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages can be used to implement the teachings of the disclosure as described herein.</p><p id="p-0092" num="0091">The present disclosure can be provided as a computer program product, or software, that can include a machine-readable medium having stored thereon instructions, which can be used to program a computer system (or other electronic devices) to perform a process according to the present disclosure. A machine-readable medium includes any mechanism for storing information in a form readable by a machine (e.g., a computer). In some embodiments, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium such as a ROM, RAM, magnetic disk storage media, optical storage media, flash memory components, etc.</p><p id="p-0093" num="0092">In the foregoing specification, embodiments of the disclosure have been described with reference to specific example embodiments thereof. It will be evident that various modifications can be made thereto without departing from the broader scope of embodiments of the disclosure as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A memory sub-system comprising:<claim-text>a memory device; and</claim-text><claim-text>a processing device, operatively coupled with the memory device, to perform operations comprising:<claim-text>receiving, from a host system, a command to arm the memory device for self-destruction;</claim-text><claim-text>in response to the command, commencing a self-destruction countdown timer, the commencing of the self-destruction countdown timer comprising using a clock signal to track a total elapsed time since receiving the command;</claim-text><claim-text>detecting expiry of the self-destruction countdown timer; and</claim-text><claim-text>based on detecting the expiry of the self-destruction countdown timer, destructing data stored by the memory device.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The memory sub-system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the command comprises a user specified time for the self-destruction countdown timer;</claim-text><claim-text>the expiry of the self-destruction countdown timer is based on the user specified time.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The memory sub-system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operations further comprise:<claim-text>receiving a password along with the command; and</claim-text><claim-text>verifying the password prior to commencing the self-destruction countdown timer.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The memory sub-system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the clock signal is provided by an internal clock of the host system.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The memory sub-system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, w herein the operations further comprise:<claim-text>receiving a second command while the memory device is armed for self-destruction; and</claim-text><claim-text>rejecting the second command based on the memory device being armed for self-destruction.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The memory sub-system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein destructing the data stored by the memory device comprises one of:<claim-text>physically erasing user data stored by the memory device; or</claim-text><claim-text>cryptographically erasing user data stored by the memory device.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The memory sub-system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein destructing the data stored by the memory device comprises:<claim-text>destroying firmware of the memory device.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The memory sub-system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the command further comprises a digitally signed security token generated using a first asymmetric cryptographic key; and</claim-text><claim-text>the operations further comprising verifying the digitally signed security token using a second asymmetric cryptographic key.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A method comprising:<claim-text>receiving, from a host system, a command to arm a memory device for self-destruction;</claim-text><claim-text>in response to the command, commencing, at the memory device, a self-destruction countdown timer, the commencing of the self-destruction countdown timer comprising using a clock signal to track a total elapsed time since receiving the command;</claim-text><claim-text>detecting expiry of the self-destruction countdown timer; and</claim-text><claim-text>based on detecting the expiry of the self-destruction countdown timer, destructing data stored by the memory device.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein:<claim-text>the command comprises a user specified time for the self-destruction countdown timer;</claim-text><claim-text>the expiry of the self-destruction countdown timer is based on the user specified time.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>receiving a password along with the command; and</claim-text><claim-text>verifying the password prior to commencing the self-destruction countdown timer.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the clock signal is provided by an internal clock of the host system.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>receiving a second command while the memory device is armed for self-destruction; and</claim-text><claim-text>rejecting the second command based on the memory device being armed for self-destruction</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein destructing the data stored by the memory device comprises one of:<claim-text>physically erasing user data stored by the memory device; or</claim-text><claim-text>cryptographically erasing user data stored by the memory device.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein destructing the data stored by the memory device comprises:<claim-text>destroying firmware of the memory device.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>,<claim-text>wherein the command further comprises a digitally signed security token generated using a first asymmetric cryptographic key; and</claim-text><claim-text>further comprising verifying the digitally signed security token using a second asymmetric cryptographic key.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A non-transitory computer-readable storage medium comprising instructions that, when executed by a processing device, configure the processing device to perform operations comprising:<claim-text>receiving, from a host system, a first command to arm a memory device for self-destruction;</claim-text><claim-text>in response to the command, commencing a self-destruction countdown timer using a clock signal, the commencing of the self-destruction countdown timer comprising using a clock signal to track a total elapsed time since receiving the command;</claim-text><claim-text>detecting expiry of the self-destruction countdown timer; and</claim-text><claim-text>based on detecting the expiry of the self-destruction countdown timer, destructing data stored by the memory device.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein<claim-text>the command comprises a digitally signed security token generated using a first asymmetric cryptographic key; and</claim-text><claim-text>the operations further comprising verifying the digitally signed security token using a second asymmetric cryptographic key.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>,<claim-text>the command comprises a user specified time for the self-destruction countdown timer;</claim-text><claim-text>the expiry of the self-destruction countdown timer is based on the user specified time.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the operations further comprise:<claim-text>receiving a password along with the command; and</claim-text><claim-text>verifying the password prior to commencing the self-destruction countdown timer.</claim-text></claim-text></claim></claims></us-patent-application>