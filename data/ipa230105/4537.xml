<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004538A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004538</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363737</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>21</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>214</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">DATABASE GATEWAY WITH MACHINE LEARNING MODEL</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Dell Products L.P.</orgname><address><city>Round Rock</city><state>TX</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Kumar</last-name><first-name>Dhilip S.</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Dasam</last-name><first-name>Lokesh</first-name><address><city>Khammam</city><country>IN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method comprises reading data from a source database, identifying one or more data types corresponding to the source database, identifying a destination database for the data, and identifying one or more data types corresponding to the destination database. In the method, a destination database model to use in connection with writing the data in the destination database is generated. The generation of the destination database model is based at least in part on the one or more data types corresponding to the destination database, and is performed using one or more machine learning algorithms.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="91.95mm" wi="158.75mm" file="US20230004538A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="250.44mm" wi="154.26mm" orientation="landscape" file="US20230004538A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="245.79mm" wi="155.36mm" orientation="landscape" file="US20230004538A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="258.66mm" wi="142.66mm" orientation="landscape" file="US20230004538A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="249.26mm" wi="143.76mm" orientation="landscape" file="US20230004538A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="207.18mm" wi="100.50mm" orientation="landscape" file="US20230004538A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="219.46mm" wi="112.86mm" orientation="landscape" file="US20230004538A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="168.49mm" wi="135.72mm" orientation="landscape" file="US20230004538A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="216.15mm" wi="132.00mm" orientation="landscape" file="US20230004538A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="172.04mm" wi="121.58mm" orientation="landscape" file="US20230004538A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="197.02mm" wi="120.73mm" orientation="landscape" file="US20230004538A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="183.56mm" wi="139.36mm" orientation="landscape" file="US20230004538A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="253.92mm" wi="121.84mm" orientation="landscape" file="US20230004538A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="175.26mm" wi="139.36mm" orientation="landscape" file="US20230004538A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="266.95mm" wi="124.29mm" orientation="landscape" file="US20230004538A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="151.47mm" wi="142.92mm" orientation="landscape" file="US20230004538A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="151.13mm" wi="83.90mm" orientation="landscape" file="US20230004538A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="177.12mm" wi="128.35mm" orientation="landscape" file="US20230004538A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">COPYRIGHT NOTICE</heading><p id="p-0002" num="0001">A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.</p><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">The field relates generally to information processing systems, and more particularly to a framework for management of data between source and destination databases.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Enterprises often create data as a strategic asset. As a result, the scale and types of data continue to increase. Different databases support different data models and data types, which creates difficulties when moving data between different databases that employ different data formats and distinct storage and access conventions.</p><p id="p-0005" num="0004">Database designs may vary based on the specific customer problems which the databases are designed to address. For example, some databases may provide better scale-out functionality by parallelizing query processing across processors and nodes, while others provide scalability at the cost of per-node performance.</p><p id="p-0006" num="0005">Current approaches for integrating and/or moving data between differently configured databases require on-demand generation of data integration and transformation tools, and are largely inefficient and prone to errors.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0007" num="0006">Illustrative embodiments provide techniques to use machine learning to integrate the data from differently configured databases.</p><p id="p-0008" num="0007">For example, in one embodiment, a method comprises reading data from a source database, identifying one or more data types corresponding to the source database, identifying a destination database for the data, and identifying one or more data types corresponding to the destination database. In the method, a destination database model to use in connection with writing the data in the destination database is generated. The generation of the destination database model is based at least in part on the one or more data types corresponding to the destination database, and is performed using one or more machine learning algorithms.</p><p id="p-0009" num="0008">Further illustrative embodiments are provided in the form of a non-transitory computer-readable storage medium having embodied therein executable program code that when executed by a processor causes the processor to perform the above steps. Still further illustrative embodiments comprise an apparatus with a processor and a memory configured to perform the above steps.</p><p id="p-0010" num="0009">These and other features and advantages of embodiments described herein will become more apparent from the accompanying drawings and the following detailed description.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts an information processing system with a database management platform for managing data movement between databases in an illustrative embodiment.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a process for moving data between source and destination databases in an illustrative embodiment.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts an operational flow for moving data between source and destination databases in an illustrative embodiment.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts an operational flow for mapping metadata between source and destination databases in an illustrative embodiment.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> depicts an example of a primary key for relational data in an illustrative embodiment.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> depicts an example of a distribution key in a column-oriented database in an illustrative embodiment.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>6</b>A</figref> depicts a decision tree based on age in an illustrative embodiment.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>6</b>B</figref> depicts a decision tree based on region in an illustrative embodiment.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates example pseudocode for using an entropy technique to select root node attributes in an illustrative embodiment.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIGS. <b>8</b>A, <b>8</b>B and <b>8</b>C</figref> illustrate different attribute splits and resulting information gain in an illustrative embodiment.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates example pseudocode for computing information gain in an illustrative embodiment.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram illustrating application of a random forest algorithm in an illustrative embodiment.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates example pseudocode for extracting data from a first database to a second database in an illustrative embodiment.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>12</b></figref> depicts an example user interface showing the creation of a collection in the second database which will receive data from the first database in an illustrative embodiment.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>13</b></figref> depicts example pseudocode for moving data from a log table of the first database to the collection in the second database in an illustrative embodiment.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>14</b></figref> depicts an example user interface illustrating data insertion into the collection in the second database in an illustrative embodiment.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>15</b></figref> depicts a process for managing data movement between databases according to an illustrative embodiment.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIGS. <b>16</b> and <b>17</b></figref> show examples of processing platforms that may be utilized to implement at least a portion of an information processing system according to illustrative embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0029" num="0028">Illustrative embodiments will be described herein with reference to exemplary information processing systems and associated computers, servers, storage devices and other processing devices. It is to be appreciated, however, that embodiments are not restricted to use with the particular illustrative system and device configurations shown. Accordingly, the term &#x201c;information processing system&#x201d; as used herein is intended to be broadly construed, so as to encompass, for example, processing systems comprising cloud computing and storage systems, as well as other types of processing systems comprising various combinations of physical and virtual processing resources. An information processing system may therefore comprise, for example, at least one data center or other type of cloud-based system that includes one or more clouds hosting tenants that access cloud resources. Such systems are considered examples of what are more generally referred to herein as cloud-based computing environments. Some cloud infrastructures are within the exclusive control and management of a given enterprise, and therefore are considered &#x201c;private clouds.&#x201d; The term &#x201c;enterprise&#x201d; as used herein is intended to be broadly construed, and may comprise, for example, one or more businesses, one or more corporations or any other one or more entities, groups, or organizations. An &#x201c;entity&#x201d; as illustratively used herein may be a person or system. On the other hand, cloud infrastructures that are used by multiple enterprises, and not necessarily controlled or managed by any of the multiple enterprises but rather respectively controlled and managed by third-party cloud providers, are typically considered &#x201c;public clouds.&#x201d; Enterprises can choose to host their applications or services on private clouds, public clouds, and/or a combination of private and public clouds (hybrid clouds) with a vast array of computing resources attached to or otherwise a part of the infrastructure. Numerous other types of enterprise computing and storage systems are also encompassed by the term &#x201c;information processing system&#x201d; as that term is broadly used herein.</p><p id="p-0030" num="0029">As used herein, &#x201c;real-time&#x201d; refers to output within strict time constraints. Real-time output can be understood to be instantaneous or on the order of milliseconds or microseconds. Real-time output can occur when the connections with a network are continuous and a user device receives messages without any significant time delay. Of course, it should be understood that depending on the particular temporal nature of the system in which an embodiment is implemented, other appropriate timescales that provide at least contemporaneous performance and output can be achieved.</p><p id="p-0031" num="0030">As used herein, &#x201c;application programming interface (API)&#x201d; or &#x201c;interface&#x201d; refers to a set of subroutine definitions, protocols, and/or tools for building software. Generally, an API defines communication between software components. APIs permit programmers to write software applications consistent with an operating environment or website.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an information processing system <b>100</b> configured in accordance with an illustrative embodiment. The information processing system <b>100</b> comprises user devices <b>102</b>-<b>1</b>, <b>102</b>-<b>2</b>, . . . <b>102</b>-M (collectively &#x201c;user devices <b>102</b>&#x201d;). The user devices <b>102</b> communicate over a network <b>104</b> with a database management platform <b>110</b>.</p><p id="p-0033" num="0032">The user devices <b>102</b> can comprise, for example, Internet of Things (IoT) devices, desktop, laptop or tablet computers, mobile telephones, or other types of processing devices capable of communicating with the database management platform <b>110</b> over the network <b>104</b>. Such devices are examples of what are more generally referred to herein as &#x201c;processing devices.&#x201d; Some of these processing devices are also generally referred to herein as &#x201c;computers.&#x201d; The user devices <b>102</b> may also or alternately comprise virtualized computing resources, such as virtual machines (VMs), containers, etc. The user devices <b>102</b> in some embodiments comprise respective computers associated with a particular company, organization or other enterprise. The variable M and other similar index variables herein such as D, K and L are assumed to be arbitrary positive integers greater than or equal to two.</p><p id="p-0034" num="0033">The terms &#x201c;client&#x201d; or &#x201c;user&#x201d; herein are intended to be broadly construed so as to encompass numerous arrangements of human, hardware, software or firmware entities, as well as combinations of such entities. Database management services may be provided for users utilizing one or more machine learning models, although it is to be appreciated that other types of infrastructure arrangements could be used. At least a portion of the available services and functionalities provided by the database management platform <b>110</b> in some embodiments may be provided under Function-as-a-Service (&#x201c;FaaS&#x201d;), Containers-as-a-Service (&#x201c;CaaS&#x201d;) and/or Platform-as-a-Service (&#x201c;PaaS&#x201d;) models, including cloud-based FaaS, CaaS and PaaS environments.</p><p id="p-0035" num="0034">Although not explicitly shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, one or more input-output devices such as keyboards, displays or other types of input-output devices may be used to support one or more user interfaces to the database management platform <b>110</b>, as well as to support communication between the database management platform <b>110</b> and connected devices (e.g., user devices <b>102</b>) and/or other related systems and devices not explicitly shown.</p><p id="p-0036" num="0035">In some embodiments, the user devices <b>102</b> are assumed to be associated with repair technicians, system administrators, information technology (IT) managers, software developers, release management personnel or other authorized personnel configured to access and utilize the database management platform <b>110</b>.</p><p id="p-0037" num="0036">The information processing system <b>100</b> further includes source databases <b>103</b>-<b>1</b>, <b>103</b>-<b>2</b>, . . . <b>103</b>-S (collectively &#x201c;source databases <b>103</b>&#x201d;) and destination databases <b>105</b>-<b>1</b>, <b>105</b>-<b>2</b>, . . . <b>105</b>-D (collectively &#x201c;destination databases <b>105</b>&#x201d;) connected to the user devices <b>102</b> and to the database management platform <b>110</b> via the network <b>104</b>. The source and destination databases <b>103</b> and <b>105</b> comprise any combination of one or more databases such as, but not necessarily limited to, hierarchical, network, online transactional processing (OLTP), online analytical processing (OLAP), document, columnar, massive parallel processing (MPP), hierarchical, network, object-oriented, NoSQL (no structured query language), graph and/or relational databases.</p><p id="p-0038" num="0037">In some non-limiting examples, in a hierarchical database, data is stored in parent-child relationships in a tree-like structure. Network databases use a network structure to create a relationship between entities. In relational databases, data is stored in a tabular form including columns and rows. An example of a relational database management system (RDBMS) is PostgreSQL. Columns in a table represent attributes and rows represent records. Fields in the table correspond to data values. SQL can be used to query relational databases, and to perform tasks such as, for example inserting, updating, deleting, and searching records. Object-oriented databases store objects, which comprise, for example, data and instructions or software programs (referred to as methods) outlining tasks to be performed on or in connection with the data. MPP databases provide scale-out by parallelizing query processing across processors and nodes using a shared-nothing architecture.</p><p id="p-0039" num="0038">NoSQL databases are databases that do not use SQL as a data access language. Graph, network, object and document databases are examples of NoSQL databases. Document databases are an example of NoSQL databases that store data in the form of documents. Each document comprises the data, the data's relationship with other data elements, and data attributes. In one or more embodiments, document databases store data in key-value form. Document databases comprise intuitive data models and flexible schema. Document databases allow for full-text searches and analytics of logs and metrics.</p><p id="p-0040" num="0039">For example, referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, source databases comprise, for example, an OLTP database <b>203</b>-<b>1</b>, a document database <b>203</b>-<b>2</b>, a columnar database <b>203</b>-<b>3</b> and an MPP database <b>203</b>-<b>4</b>. Similarly, in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the destination databases comprise an OLTP database <b>205</b>-<b>1</b>, a document database <b>205</b>-<b>2</b>, a columnar database <b>205</b>-<b>3</b> and an MPP database <b>205</b>-<b>4</b>. In another example in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the source databases comprise a document database <b>306</b>-<b>1</b> and a columnar database <b>306</b>-<b>2</b>, and the destination databases comprise a relational database <b>306</b>-<b>3</b> and an MPP database <b>306</b>-<b>4</b>. As can be understood the source and destination databases may include any combination of databases. Different user devices <b>102</b> may have different in-memory databases (e.g., memory resident databases) that primarily rely on a main memory of the user device <b>102</b> for data storage.</p><p id="p-0041" num="0040">The database management platform <b>110</b> in the present embodiment is assumed to be accessible to the user devices <b>102</b> and to the source and destination databases <b>103</b> and <b>105</b> over the network <b>104</b>. The network <b>104</b> is assumed to comprise a portion of a global computer network such as the Internet, although other types of networks can be part of the network <b>104</b>, including a wide area network (WAN), a local area network (LAN), a satellite network, a telephone or cable network, a cellular network, a wireless network such as a WiFi or WiMAX network, or various portions or combinations of these and other types of networks. The network <b>104</b> in some embodiments therefore comprises combinations of multiple different types of networks each comprising processing devices configured to communicate using Internet Protocol (IP) or other related communication protocols.</p><p id="p-0042" num="0041">As a more particular example, some embodiments may utilize one or more high-speed local networks in which associated processing devices communicate with one another utilizing Peripheral Component Interconnect express (PCIe) cards of those devices, and networking protocols such as InfiniBand, Gigabit Ethernet or Fibre Channel. Numerous alternative networking arrangements are possible in a given embodiment, as will be appreciated by those skilled in the art.</p><p id="p-0043" num="0042">The database management platform <b>110</b>, on behalf of respective infrastructure tenants each corresponding to one or more users associated with respective ones of the user devices <b>102</b> provides a platform for the distribution of data from source to destination databases. The database management platform <b>110</b> leverages the strengths of a plurality of existing databases to seamlessly integrate the databases. The database management platform <b>110</b> creates data models and identifies the data replication keys (e.g., primary key, distribution key, partition key, surrogate keys) for destination databases <b>105</b>. Advantageously, data and metadata from source and destination databases <b>103</b> and <b>105</b> is monitored, data patterns are learned, primary and secondary indexes are recommended, and data is automatically re-distributed from one or more source databases <b>103</b> to one or more destination databases <b>105</b>.</p><p id="p-0044" num="0043">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the database management platform <b>110</b> includes a data collection and mapping engine <b>120</b>, a data formatting engine <b>130</b>, a data modeling engine <b>140</b> and a data replication engine <b>150</b>. The data collection and mapping engine <b>120</b> comprises a data and metadata collection layer <b>121</b> and a metadata mapping layer <b>122</b>. The data formatting engine <b>130</b> comprises a data type identification layer <b>131</b> and a data type classification layer <b>132</b>. The data modeling engine <b>140</b> includes a key identification layer <b>141</b>, an index generation layer <b>142</b>, a class and category prediction layer <b>143</b> and a machine learning layer <b>144</b>.</p><p id="p-0045" num="0044">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and to the process <b>200</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the data collection and mapping engine <b>120</b> collects data from source databases <b>103</b> (or <b>203</b>-<b>1</b> through <b>203</b>-<b>4</b>). The data comprises data stored in the source databases <b>103</b>/<b>203</b> and is collected by the data and metadata collection layer <b>121</b> in the native format of the source database.</p><p id="p-0046" num="0045">In addition, the data and metadata collection layer <b>121</b> collects metadata defining the data from the source databases <b>103</b>/<b>203</b>. Although not shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, as explained further herein, the data and metadata collection layer <b>121</b> also collects metadata defining the data from the destination databases <b>105</b> (or <b>205</b>-<b>1</b> through <b>205</b>-<b>4</b>). Metadata from the source and destination databases <b>103</b>/<b>203</b> and <b>105</b>/<b>205</b> comprises, for example, data corresponding to database schema including, but not necessarily limited to, tables, columns, constraints, attributes, data types, keys, indexes and/or sequences, data corresponding to programs and/or applications associated with the databases including, but not necessarily limited to, views, functions, procedures and/or triggers, data corresponding to database security including, but not necessarily limited to, authorized users, authorized groups, access information and/or privileges, data corresponding to database implementation including, but not necessarily limited to, partitions, files and/or backups, and data corresponding to database storage structure including, but not necessarily limited to, sizes of tables and indexes and/or the number of rows and columns in tables.</p><p id="p-0047" num="0046">A metadata mapping layer <b>122</b> maps the collected metadata from the source databases <b>103</b> to the collected metadata from the destination databases <b>105</b>. Referring, for example, to the operational flow <b>400</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a metadata mapping layer <b>422</b> (which is the same or similar to the metadata mapping layer <b>122</b>) of a database management platform <b>410</b> maps the metadata <b>408</b>-<b>1</b>, <b>408</b>-<b>2</b>, <b>408</b>-<b>3</b> and <b>408</b>-<b>4</b> (collectively &#x201c;source metadata <b>408</b>&#x201d;) from source databases <b>403</b>-<b>1</b>, <b>403</b>-<b>2</b>, <b>403</b>-<b>3</b> and <b>403</b>-<b>4</b> (collectively &#x201c;source databases <b>403</b>&#x201d;) to the metadata <b>409</b>-<b>1</b>, <b>409</b>-<b>2</b>, <b>409</b>-<b>3</b> and <b>409</b>-<b>4</b> (collectively &#x201c;destination metadata <b>409</b>&#x201d;) from destination databases <b>405</b>-<b>1</b>, <b>405</b>-<b>2</b>, <b>405</b>-<b>3</b> and <b>405</b>-<b>4</b> (collectively &#x201c;destination databases <b>405</b>&#x201d;).</p><p id="p-0048" num="0047">The metadata mapping layer <b>422</b> (or <b>122</b>) receives the collected source and destination metadata <b>408</b> and <b>409</b> from the source and destination databases <b>403</b> and <b>405</b>, and maps the source metadata <b>408</b> to the destination metadata <b>409</b> in order to map available data types of the source databases <b>403</b> to the available data types of the destination databases <b>405</b>. For example, referring back to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a data type identification layer <b>131</b> of the data formatting engine <b>130</b> identifies available data types of the source and destination databases <b>103</b> and <b>105</b>, which are mapped to each other by the metadata mapping layer <b>122</b>. As used herein, &#x201c;data type&#x201d; or &#x201c;data types&#x201d; is to be broadly construed to refer to, for example, formats of stored data having a distinct type or range of values. Some non-limiting examples data types include, but are not necessarily limited to, integers (e.g., whole numbers), characters (e.g., a, c, $, #, 5, G, %, etc.), character strings (e.g., ordered sequences of characters such as, for example, bcd, abc123, 4gyv#$@!), floating point numbers (e.g., real numbers in decimal form), Boolean values (e.g., True, False), variable character (varchar), dates and timestamps. In general, when a database is created, data types are set for each field of the database. For example, if a database includes book titles, then characters and/or character strings are needed for the title field, while integers may be needed for a field related to the number of pages. Data types facilitate classification of data values with common properties.</p><p id="p-0049" num="0048">The source and destination data types are mapped based on data type names (e.g., integer, character, character string, floating point number, Boolean value, varchar, date and/or timestamp) identified from the source and destination metadata <b>408</b> and <b>409</b>. The data types of the different databases <b>403</b> and <b>405</b> are mapped by the metadata mapping layer <b>422</b>. When data is flowing from one or more of the databases <b>403</b> and <b>405</b>, defined data types of the databases <b>403</b> and <b>405</b> are identified. For example, in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, defined data types of the databases <b>103</b> and <b>105</b> are identified by the data type identification layer <b>131</b>.</p><p id="p-0050" num="0049">Document databases may not have defined data types. For the document databases, a pattern matching algorithm is used to identify the data types. More specifically, a data type classification layer <b>132</b> applies one or more pattern matching algorithms to identify data types for databases which do not include defined data types. Examples of pattern matching algorithms include a dictionary matching algorithm and a Baker-Bird algorithm.</p><p id="p-0051" num="0050">In the dictionary matching algorithm, a set of pattern strings D={P1, P2, . . . , Pn} referred to as a dictionary in pre-processed. Subsequently, for every input, text string T=T1T2 . . . Tz, where n and z are integers. The output comprises all locations in the text where there is a match with any pattern in the dictionary. A naive solution to the dictionary matching problem searches for each pattern in the text independently. Then, the text is scanned n times.</p><p id="p-0052" num="0051">The Baker-Bird algorithm is a first linear-time algorithm for two-dimensional pattern matching with bounded alphabets obtained independently. In a first phase of the Bird-Baker algorithm, a pattern is pre-processed, where each row of pattern P is given a unique name using an Aho-Corasick (AC) automaton for the pattern rows. P is represented as a one-dimensional (1D) vector and the 1D vector is constructed using a Knuth Morris Pratt (KMP) automaton. In a second phase of the Bird-Baker algorithm, row matching with label positions of text string T is performed using the AC automaton, where suffixes match rows of pattern P. In a third phase of the Bird-Baker algorithm, column matching on named columns of text string T to find pattern occurrences is performed using the KMP automaton. Two or more of the phases can be executed simultaneously. The Baker-Bird algorithm extends to dictionary matching. For example, if the KMP automaton is replaced with an AC automaton, the above Baker-Bird algorithm solves a two-dimensional (2D) dictionary matching problem. The embodiments are not necessarily limited to the use of the dictionary matching and/or Baker-Bird algorithms, and other pattern-matching algorithms may be used to identify data types for databases which do not include defined data types.</p><p id="p-0053" num="0052">Referring the system <b>100</b> and the process <b>200</b> in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref>, at block <b>260</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, it is determined whether database data or metadata is being read from the source databases <b>203</b>-<b>1</b>, <b>203</b>-<b>2</b>, <b>203</b>-<b>3</b> and/or <b>203</b>-<b>4</b>. At block <b>260</b>, for database data, the process proceeds to block <b>261</b> where data collection is performed by the data and metadata collection layer <b>121</b> in the native format of the source database from which the data is being collected. At block <b>260</b>, for metadata, the process proceeds to block <b>262</b>, where metadata collection is performed by the data and metadata collection layer <b>121</b>. As explained herein above, the collected metadata is used by the metadata mapping layer <b>122</b> to map data types of the source databases (e.g., <b>203</b>-<b>1</b>, <b>203</b>-<b>2</b>, <b>203</b>-<b>3</b> and/or <b>203</b>-<b>4</b>) to data types of the destination databases (e.g., <b>205</b>-<b>1</b>, <b>205</b>-<b>2</b>, <b>205</b>-<b>3</b> and/or <b>205</b>-<b>4</b>).</p><p id="p-0054" num="0053">At block <b>263</b>, one or more destination databases for the read data are identified. Destination databases <b>205</b>-<b>1</b>, <b>205</b>-<b>2</b>, <b>205</b>-<b>3</b> and/or <b>205</b>-<b>4</b> are determined based on instructions provided in a request for moving, migrating or replicating data specifying that data be moved, migrated and/or replicated from one or more of the source databases <b>203</b>-<b>1</b>, <b>203</b>-<b>2</b>, <b>203</b>-<b>3</b> and/or <b>203</b>-<b>4</b> to one or more of the destination databases <b>205</b>-<b>1</b>, <b>205</b>-<b>2</b>, <b>205</b>-<b>3</b> and/or <b>205</b>-<b>4</b>. The instructions may originate, for example, from one of the user devices <b>102</b>. As noted herein above, the data type identification and/or data type classification layers <b>131</b>, <b>132</b> of the data formatting engine <b>130</b> identify the data types of the source database(s) <b>203</b> (or <b>103</b>) and the identified destination database(s) and <b>205</b> (or <b>105</b>). The metadata mapping layer <b>122</b> maps the data types corresponding to the source database(s) <b>203</b> (or <b>103</b>) to the data types corresponding to the identified destination database(s) <b>205</b> (or <b>105</b>). Data type names are identified from the source and destination database metadata, and the mapping is based, at least in part, on the one or more data type names. At block <b>264</b>, data type conversion scripting is performed for the conversion of source data types to mapped destination data types. Data types are converted from a format of one database to a format of another database. In a non-limiting example, in a relation database a &#x201c;varchar&#x201d; data type may be used, but in an MPP database a &#x201c;Char&#x201d; or &#x201c;Text&#x201d; data type may be used. Data type conversion scripting is performed to map one datatype to another data type.</p><p id="p-0055" num="0054">The data modeling engine <b>140</b> of the database management platform <b>110</b> generates a destination database model <b>265</b> based at least in part on the data types corresponding to the destination database, and the mapping of the source database data types to the destination database data types. The destination database model is utilized to write the data in the destination database, and the generation of the destination database model is performed using one or more machine learning algorithms.</p><p id="p-0056" num="0055">In one or more embodiments, in generating the destination database model <b>265</b>, the key identification layer <b>141</b>, in conjunction with the machine learning layer <b>144</b>, predicts one or more destination database keys. The one or more destination database keys comprise, for example, a primary key, a distribution key, a partition key and a surrogate key. As used herein, a &#x201c;database key&#x201d; or &#x201c;key&#x201d; is to be broadly construed to refer to, for example, an attribute or a group of attributes that can uniquely identify a database record, such as, for example, a record in a table of relational database. In a non-limiting example, rows in a database table may include records or tuples, and columns may represent attributes. For example, in a database of employees, employee ID, last name, first name, region, age and gender are examples of attributes. Referring to the table <b>501</b> in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, in an example of a database key for relational data, a primary key relates to a unique single attribute such as, for example, employee ID that has a unique value for each row in a table. Another example of a primary key may be a social security number (SSN). Referring to the table <b>502</b> in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, in another example of a database key, a distribution key comprises a column or group of columns that is used to determine the database partition in which a particular row of data is stored. In the table <b>502</b>, the distribution key comprises employee ID, last name and region, which would comprise a group of columns of a database table of employees. A distribution key is used in, for example, a distribution database to determine how data is stored in and retrieved from multiple nodes.</p><p id="p-0057" num="0056">When the database management platform <b>110</b> replicates the relational database data into a column-oriented (columnar) database, the data's key will change to, for example, the distribution key shown in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>. Since the data moves from a row orientation database to a columnar orientation database and vice versa, the data needs to be classified. Classification is discussed further herein in connection with the class and category prediction layer <b>143</b> of the data modeling engine <b>140</b>.</p><p id="p-0058" num="0057">In another example of a database key, a surrogate key is added to a table as a prime attribute for the purpose of defining a primary key. For example, a surrogate key may comprise automatically generated integer values in increasing sequential order (e.g., 1, 2, 3, 4, 5) as a column in a table. In another example of a database key, a partition key is used to distribute data among nodes. For example, the partition key may be used in relation database to split the data for storage and retrieval. A columnar database may organize data into partitions, where each partition comprises multiple columns, and partitions are stored on a node. Nodes are generally part of a cluster where each node is responsible for a fraction of the partitions. When inserting records, the columnar database will hash the value of the inserted data's partition key, and use this hash value to determine which node is responsible for storing the data. A partition key may be the same as the primary key when the partition key comprises a single column. In one or more embodiments, in generating the destination database model, the key identification layer <b>141</b>, in conjunction with the machine learning layer <b>144</b> predicts one or more partitions for the destination database.</p><p id="p-0059" num="0058">In some cases, the data moving from a source database <b>103</b> to a destination database <b>105</b> must be classified, such as, for example, when the data moves from a row orientation database to a columnar orientation database and vice versa. The embodiments employ a structured data classification technique where the data is categorized into a given number of classes. A goal of classification is to identify the category and/or class under which the data in the destination database <b>105</b> will fall. A classification model utilized by the class and category prediction layer <b>143</b> in conjunction with the machine learning layer <b>144</b> draws conclusions from input values given from training data. According to an embodiment, classifiers of the class and category prediction layer <b>143</b> use a fit(X, y) method to fit the model for given training data X and train label y. A target is predicted given an unlabeled observation X, where predict(X) returns a predicted label y.</p><p id="p-0060" num="0059">In one or more embodiments, the combination of a decision tree and random forest algorithm classifies the data and identifies the database keys and indexes based on destination database type. In addition, the index generation layer <b>142</b> generates one or more indexes in accordance with the structure of the destination database. The decision tree algorithm constructs decision trees in which attributes are split. The decision trees end with leaf nodes (e.g., final class labels), and certain attributes are identified in order to classify database nodes.</p><p id="p-0061" num="0060">For example, in generating the destination database model, the class and category prediction layer <b>143</b> in conjunction with the machine learning layer <b>144</b> uses a decision tree algorithm to identify one or more attributes to select as nodes of the destination database. The class and category prediction layer <b>143</b> computes entropy for respective ones of the one or more attributes following a split of the respective ones of the one or more attributes, and computes information gain for respective ones of the one or more attributes. The one or more attributes with the highest information gain are selected as the nodes of the destination database.</p><p id="p-0062" num="0061">Attribute selection is performed to identify the root node's attribute in each level of a decision tree. For example, referring to the decision trees <b>601</b> and <b>602</b> in <figref idref="DRAWINGS">FIGS. <b>6</b>A and <b>6</b>B</figref>, if age is the attribute that is split as in the decision tree <b>601</b>, more node splits are required to classify the data than if region is the attribute that is split as in the decision tree <b>602</b>. Entropy is applied at each node or attribute to find purity. <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates example pseudocode <b>700</b> for using an entropy technique to select root node attributes in an illustrative embodiment. Referring to the &#x201c;If&#x201d; statements in <figref idref="DRAWINGS">FIGS. <b>6</b>A and <b>6</b>B</figref>, entropy values are applied according to the following equation (1):</p><p id="p-0063" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Entropy=&#x2212;(<i>p</i>(0)*log(<i>P</i>(0))+<i>p</i>(1)*log(<i>P</i>(1)))&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0064" num="0062">Referring to the different attribute splits <b>801</b>, <b>802</b> and <b>803</b> of <figref idref="DRAWINGS">FIGS. <b>8</b>A, <b>8</b>B and <b>8</b>C</figref>, the information gain for each attribute is calculated. In a decision tree information gain algorithm, decision trees are built based on different attribute splits. For example, in connection with the three attributes X, Y, Z, the information gain is highest when a split is performed on feature Y. The information gain for attributes X, Y and Z is 0.3112, 1 and 0, respectively. So, for the root node, the best-suited feature is feature Y. In addition, while splitting the dataset by feature Y, the child contains a pure subset of the target variable, and the dataset does not need to be broken down further. <figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates example pseudocode <b>900</b> for computing information gain in an illustrative embodiment.</p><p id="p-0065" num="0063">Referring to the block diagram <b>1000</b> illustrating application of a random forest algorithm in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the random forest algorithm uses a large number of individual decision trees (e.g., decision trees <b>1071</b>-<b>1</b>, <b>1071</b>-<b>2</b>, <b>1071</b>-<b>3</b> and <b>1071</b>-<b>4</b> that operate as an ensemble. Each tree in the random forest outputs a class prediction (<b>0</b> or <b>1</b>), and the class with the most votes (e.g., majority) becomes the model's prediction. The model combines several decision trees to produce increased predictive performance than when utilizing a single decision tree. The final attribute prediction is calculated by computing the average/mean value of the individual predictions from respective ones of the group of decision trees <b>1071</b>.</p><p id="p-0066" num="0064">The ensemble methods comprise learning algorithms that construct a set of classifiers and classify new data points by taking a weighted vote of the predictions of each classifier. Several base models are combined in order to produce one optimal predictive model. The main principle behind the ensemble model is that a group of weak learners come together to form a strong learner.</p><p id="p-0067" num="0065">According to the embodiments bootstrap aggregating, also called bagging, is performed. The bootstrap aggregating techniques use a machine learning ensemble meta-algorithm designed to improve the stability and accuracy of machine learning algorithms used in statistical classification and regression, reduce variance and further the avoidance of overfitting.</p><p id="p-0068" num="0066">Random forest is an extension over bagging. The random forest regressor algorithm used by the machine learning model includes an ensemble technique which uses a configurable set of homogenous models (e.g., decision trees) to combine the predictions of each model and generate a final prediction. In addition to taking a random subset of data, the random forest regressor algorithm also takes a random selection of features (e.g., sample rows and sample columns) to grow decision trees rather than using all features from the records set <b>1070</b>.</p><p id="p-0069" num="0067">Referring back to the process <b>200</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, based on the generated destination database model <b>265</b> generated by the data modeling engine <b>140</b>, at block <b>266</b>, the data definitions for the destination database(s) <b>205</b> are prepared, and at block <b>267</b>, the data for the destination database(s) <b>205</b> is replicated according to the generated destination database model <b>265</b> by, for example, the data replication engine <b>150</b>. As a result, the data from the source database(s) <b>203</b> can be written to the destination database(s) <b>205</b> in the format of the destination database(s) <b>205</b>. Referring to block <b>268</b>, the destination database(s) <b>205</b> for the data are determined and the data is routed to one or more of the intended destination databases <b>205</b>.</p><p id="p-0070" num="0068"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts an operational flow <b>300</b> for moving data between source and destination databases in an illustrative embodiment. In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a plurality of pluggable data connectors <b>307</b>-<b>1</b>, <b>307</b>-<b>2</b>, <b>307</b>-<b>3</b> and <b>307</b>-<b>4</b> (collectively &#x201c;data connectors <b>307</b>&#x201d;) operate as interfaces to document database <b>306</b>-<b>1</b>, columnar database <b>306</b>-<b>2</b>, relational database <b>306</b>-<b>3</b> and MPP database <b>306</b>-<b>4</b> (collectively databases <b>306</b>&#x2033;). Depending on the situation, the databases <b>306</b> may operate as source or destination databases. The data connectors <b>307</b> interface between the databases <b>306</b>, and components of the database management platform <b>310</b> that identify the database data types and indexes and predict the keys, partitions, node attributes and indexes based on the destination database types. In one or more embodiments, the data connectors <b>307</b> comprise APIs configured to connect with specific databases and push and pull data and metadata from the databases <b>306</b>.</p><p id="p-0071" num="0069">In the operational flow <b>300</b>, users via user devices <b>302</b>-<b>1</b>, <b>302</b>-<b>2</b>, <b>302</b>-<b>3</b>, <b>302</b>-<b>4</b>, <b>302</b>-<b>5</b> and <b>302</b>-<b>6</b> (collectively &#x201c;user devices <b>302</b>&#x201d;) read data from and write data to the various databases <b>306</b>. For example, user device <b>302</b>-<b>1</b> writes data to the document database <b>306</b>-<b>1</b> in a format of the document database <b>306</b>-<b>1</b>, and user device <b>302</b>-<b>4</b> sends an online transaction to the relational database <b>306</b>-<b>3</b>. In one or more embodiments, the data written to the document database <b>306</b>-<b>1</b> is processed by the database management platform <b>310</b>, which generates database models based on the formats of the databases <b>306</b> in order to replicate the data on the other databases <b>306</b>-<b>2</b>, <b>306</b>-<b>3</b> and <b>306</b>-<b>4</b>. Similarly, the online transaction sent to the relational database <b>306</b>-<b>3</b> by the user device <b>302</b>-<b>4</b> is processed by the database management platform <b>310</b>, which generates database models based on the formats of the databases <b>306</b> in order to replicate the transaction data on the other databases <b>306</b>-<b>1</b>, <b>306</b>-<b>2</b> and <b>306</b>-<b>4</b>. Like the data management platform <b>110</b>, the data management platform <b>310</b> includes a data collection and mapping engine <b>320</b>, a data formatting engine <b>330</b>, a data modeling engine <b>340</b> and a data replication engine <b>350</b>. The engines <b>320</b>, <b>330</b>, <b>340</b> and <b>350</b> are the same or similar to the engines <b>120</b>, <b>130</b>, <b>140</b> and <b>150</b> of the data management platform <b>110</b>.</p><p id="p-0072" num="0070">Following replication of the transaction data originally sourced from the relational database <b>306</b>-<b>3</b> on the document, columnar and MPP databases <b>306</b>-<b>1</b>, <b>306</b>-<b>2</b> and <b>306</b>-<b>4</b>, user device <b>302</b>-<b>2</b> reads the transaction data from the document database <b>306</b>-<b>1</b> in the format of the document database <b>306</b>-<b>1</b>, user device <b>302</b>-<b>3</b> reads the transaction data from the columnar database <b>306</b>-<b>2</b> in the format of the columnar database <b>306</b>-<b>2</b>, and user device <b>302</b>-<b>6</b> reads the transaction data from the MPP database <b>306</b>-<b>4</b> in the format of the MPP database <b>306</b>-<b>4</b>. Following replication of the document data originally sourced from the document database <b>306</b>-<b>1</b> on the relational and MPP databases <b>306</b>-<b>3</b> and <b>306</b>-<b>4</b>, user device <b>302</b>-<b>5</b> reads the document data from the relational database <b>306</b>-<b>3</b> in the format of the relational database <b>306</b>-<b>3</b>, and user device <b>302</b>-<b>6</b> reads the document data from the MPP database <b>306</b>-<b>4</b> in the format of the MPP database <b>306</b>-<b>4</b>. Accordingly, data input to any given database <b>306</b> can be replicated on one or more of the remaining databases <b>306</b> following generation of database models for the destination databases in accordance with the above-described techniques. The database management platform <b>310</b> (or <b>110</b>) generates destination database models by mapping the source database data types to the destination data types and uses one or more machine learning algorithms to generate the destination database keys needed to create the destination database data files and indexes.</p><p id="p-0073" num="0071">In an operational example, a supply chain in an enterprise builds applications for each supply chain product, such as, for example, procurement, inventory, order fulfillment, order manufacturing and/or logistics applications. Each application maintains its respective data stores, which may include differently configured databases (e.g., Oracle&#xae;, SQL server, Cassandra&#xae;, PostgreSQL, MemSQL, etc.). The database management platform <b>110</b> provides a gateway for data movement and/or replication between the differently configured databases, saving extract, transform, load (ETL) processing time and overall cost and reducing delays.</p><p id="p-0074" num="0072"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates example pseudocode <b>1100</b> for extracting data from a first database to a second database in an illustrative embodiment. For example, the pseudocode <b>1100</b> demonstrates how the database management platform <b>110</b> could extract data from an Oracle&#xae; database and replicate the data to a Mongo&#xae; database in real-time. A row will be inserted into an Oracle&#xae; table (Testing), and will be captured into a change data capture (CDC) log table, which is created by DBMS_CDC_PUBLISH, Oracle's built-in package to capture change data. The example creates a test row (1, &#x2018;abc&#x2019;) into the testing table and subsequently, CDC_LOG_TABLE gets this buffer. <figref idref="DRAWINGS">FIG. <b>12</b></figref> depicts an example user interface <b>1200</b> showing the creation of a collection in the second database which will receive data from the first database in an illustrative embodiment. For example, a collection is created and is empty in the Mongo&#xae; database, which will receive the data from the Oracle&#xae; database.</p><p id="p-0075" num="0073"><figref idref="DRAWINGS">FIG. <b>13</b></figref> depicts example pseudocode <b>1300</b> for moving data from a log table of the first database to the collection in the second database in an illustrative embodiment. For example, a replicator python demo script is created to move data from a CDC log table of Oracle&#xae; to a Mongo&#xae; test collection. <figref idref="DRAWINGS">FIG. <b>14</b></figref> depicts an example user interface <b>1400</b> illustrating data insertion into the collection in the second database in an illustrative embodiment. For example, the user interface <b>1400</b> represents a snapshot following data replication. As can be seen, the test data (1,abc) was inserted into the collection test.</p><p id="p-0076" num="0074">According to one or more embodiments, the databases referred to herein are implemented using one or more storage systems or devices, which can be associated with the database management platform <b>110</b>. In some embodiments, one or more of the storage systems utilized to implement the databases referred to herein comprise a scale-out all-flash content addressable storage array or other type of storage array.</p><p id="p-0077" num="0075">The term &#x201c;storage system&#x201d; as used herein is therefore intended to be broadly construed, and should not be viewed as being limited to content addressable storage systems or flash-based storage systems. A given storage system as the term is broadly used herein can comprise, for example, network-attached storage (NAS), storage area networks (SANs), direct-attached storage (DAS) and distributed DAS, as well as combinations of these and other storage types, including software-defined storage.</p><p id="p-0078" num="0076">Other particular types of storage products that can be used in implementing storage systems in illustrative embodiments include all-flash and hybrid flash storage arrays, software-defined storage products, cloud storage products, object-based storage products, and scale-out NAS clusters. Combinations of multiple ones of these and other storage products can also be used in implementing a given storage system in an illustrative embodiment.</p><p id="p-0079" num="0077">Although shown as elements of the database management platform <b>110</b>, the data collection and mapping engine <b>120</b>, data formatting engine <b>130</b>, data modeling engine <b>140</b> and/or data replication engine <b>150</b> in other embodiments can be implemented at least in part externally to the database management platform <b>110</b>, for example, as stand-alone servers, sets of servers or other types of systems coupled to the network <b>104</b>. For example, the data collection and mapping engine <b>120</b>, data formatting engine <b>130</b>, data modeling engine <b>140</b> and/or data replication engine <b>150</b> may be provided as cloud services accessible by the database management platform <b>110</b>.</p><p id="p-0080" num="0078">The data collection and mapping engine <b>120</b>, data formatting engine <b>130</b>, data modeling engine <b>140</b> and/or data replication engine <b>150</b> in the <figref idref="DRAWINGS">FIG. <b>1</b></figref> embodiment are each assumed to be implemented using at least one processing device. Each such processing device generally comprises at least one processor and an associated memory, and implements one or more functional modules for controlling certain features of the data collection and mapping engine <b>120</b>, data formatting engine <b>130</b>, data modeling engine <b>140</b> and/or data replication engine <b>150</b>.</p><p id="p-0081" num="0079">At least portions of the database management platform <b>110</b> and the elements thereof may be implemented at least in part in the form of software that is stored in memory and executed by a processor. The database management platform <b>110</b> and the elements thereof comprise further hardware and software required for running the database management platform <b>110</b>, including, but not necessarily limited to, on-premises or cloud-based centralized hardware, graphics processing unit (GPU) hardware, virtualization infrastructure software and hardware, Docker containers, networking software and hardware, and cloud infrastructure software and hardware.</p><p id="p-0082" num="0080">Although the data collection and mapping engine <b>120</b>, data formatting engine <b>130</b>, data modeling engine <b>140</b>, data replication engine <b>150</b> and other elements of the database management platform <b>110</b> in the present embodiment are shown as part of the database management platform <b>110</b>, at least a portion of the data collection and mapping engine <b>120</b>, data formatting engine <b>130</b>, data modeling engine <b>140</b>, data replication engine <b>150</b> and other elements of the database management platform <b>110</b> in other embodiments may be implemented on one or more other processing platforms that are accessible to the database management platform <b>110</b> over one or more networks. Such elements can each be implemented at least in part within another system element or at least in part utilizing one or more stand-alone elements coupled to the network <b>104</b>.</p><p id="p-0083" num="0081">It is assumed that the database management platform <b>110</b> in the <figref idref="DRAWINGS">FIG. <b>1</b></figref> embodiment and other processing platforms referred to herein are each implemented using a plurality of processing devices each having a processor coupled to a memory. Such processing devices can illustratively include particular arrangements of compute, storage and network resources. For example, processing devices in some embodiments are implemented at least in part utilizing virtual resources such as virtual machines (VMs) or Linux containers (LXCs), or combinations of both as in an arrangement in which Docker containers or other types of LXCs are configured to run on VMs.</p><p id="p-0084" num="0082">The term &#x201c;processing platform&#x201d; as used herein is intended to be broadly construed so as to encompass, by way of illustration and without limitation, multiple sets of processing devices and one or more associated storage systems that are configured to communicate over one or more networks.</p><p id="p-0085" num="0083">As a more particular example, the data collection and mapping engine <b>120</b>, data formatting engine <b>130</b>, data modeling engine <b>140</b>, data replication engine <b>150</b> and other elements of the database management platform <b>110</b>, and the elements thereof can each be implemented in the form of one or more LXCs running on one or more VMs. Other arrangements of one or more processing devices of a processing platform can be used to implement the data collection and mapping engine <b>120</b>, data formatting engine <b>130</b>, data modeling engine <b>140</b> and data replication engine <b>150</b>, as well as other elements of the database management platform <b>110</b>. Other portions of the system <b>100</b> can similarly be implemented using one or more processing devices of at least one processing platform.</p><p id="p-0086" num="0084">Distributed implementations of the system <b>100</b> are possible, in which certain elements of the system reside in one data center in a first geographic location while other elements of the system reside in one or more other data centers in one or more other geographic locations that are potentially remote from the first geographic location. Thus, it is possible in some implementations of the system <b>100</b> for different portions of the database management platform <b>110</b> to reside in different data centers. Numerous other distributed implementations of the database management platform <b>110</b> are possible.</p><p id="p-0087" num="0085">Accordingly, one or each of the data collection and mapping engine <b>120</b>, data formatting engine <b>130</b>, data modeling engine <b>140</b>, data replication engine <b>150</b> and other elements of the database management platform <b>110</b> can each be implemented in a distributed manner so as to comprise a plurality of distributed elements implemented on respective ones of a plurality of compute nodes of the database management platform <b>110</b>.</p><p id="p-0088" num="0086">It is to be appreciated that these and other features of illustrative embodiments are presented by way of example only, and should not be construed as limiting in any way. Accordingly, different numbers, types and arrangements of system elements such as the data collection and mapping engine <b>120</b>, data formatting engine <b>130</b>, data modeling engine <b>140</b>, data replication engine <b>150</b> and other elements of the database management platform <b>110</b>, and the portions thereof can be used in other embodiments.</p><p id="p-0089" num="0087">It should be understood that the particular sets of modules and other elements implemented in the system <b>100</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> are presented by way of example only. In other embodiments, only subsets of these elements, or additional or alternative sets of elements, may be used, and such elements may exhibit alternative functionality and configurations.</p><p id="p-0090" num="0088">For example, as indicated previously, in some illustrative embodiments, functionality for the database management platform can be offered to cloud infrastructure customers or other users as part of FaaS, CaaS and/or PaaS offerings.</p><p id="p-0091" num="0089">The operation of the information processing system <b>100</b> will now be described in further detail with reference to the flow diagram of <figref idref="DRAWINGS">FIG. <b>15</b></figref>. With reference to <figref idref="DRAWINGS">FIG. <b>15</b></figref>, a process <b>1500</b> for managing data movement between databases as shown includes steps <b>1502</b> through <b>1510</b>, and is suitable for use in the system <b>100</b> but is more generally applicable to other types of information processing systems comprising a database management platform configured for managing data movement between databases.</p><p id="p-0092" num="0090">In steps <b>1502</b> and <b>1504</b>, data is read from a source database, and one or more data types corresponding to the source database are identified. In step <b>1506</b>, a destination database for the data is identified, and in step <b>1508</b>, one or more data types corresponding to the destination database are identified.</p><p id="p-0093" num="0091">In step <b>1510</b>, a destination database model to use in connection with writing the data in the destination database is generated. The generation of the destination database model is based at least in part on the one or more data types corresponding to the destination database, and is performed using one or more machine learning algorithms. The generating of the destination database model comprises mapping the one or more data types corresponding to the source database to the one or more data types corresponding to the destination database. Metadata for the one or more data types corresponding to the source and destination databases is collected and one or more data type names are identified from the metadata. The mapping is based at least in part on the one or more data type names.</p><p id="p-0094" num="0092">According to illustrative embodiment, generating the destination database model comprises predicting one or more destination database keys, such as, for example a primary key, a distribution key, a partition key and/or a surrogate key. Generating the destination database model also comprises predicting one or more partitions for the destination database, and generating one or more indexes for the destination database.</p><p id="p-0095" num="0093">In connection with generating the destination database model, one or more attributes to select as nodes of the destination database are identified. The identification of the one or more attributes is performed using one or more machine learning algorithms, such as, for example, a decision tree algorithm and/or a random forest algorithm. The one or more machine learning algorithms compute entropy for respective ones of the one or more attributes following a split of the respective ones of the one or more attributes, and further compute information gain for respective ones of the one or more attributes. The one or more attributes with the highest information gain are selected as the nodes of the destination database.</p><p id="p-0096" num="0094">In one or more embodiments, identifying the one or more data types corresponding to at least one of the source and destination databases comprises executing a pattern matching algorithm, such as, for example, a dictionary matching algorithm and/or a Baker-Bird algorithm.</p><p id="p-0097" num="0095">It is to be appreciated that the <figref idref="DRAWINGS">FIG. <b>15</b></figref> process and other features and functionality described above can be adapted for use with other types of information systems configured to execute data movement services in a database management platform or other type of platform.</p><p id="p-0098" num="0096">The particular processing operations and other system functionality described in conjunction with the flow diagram of <figref idref="DRAWINGS">FIG. <b>15</b></figref> are therefore presented by way of illustrative example only, and should not be construed as limiting the scope of the disclosure in any way. Alternative embodiments can use other types of processing operations. For example, the ordering of the process steps may be varied in other embodiments, or certain steps may be performed at least in part concurrently with one another rather than serially. Also, one or more of the process steps may be repeated periodically, or multiple instances of the process can be performed in parallel with one another.</p><p id="p-0099" num="0097">Functionality such as that described in conjunction with the flow diagram of <figref idref="DRAWINGS">FIG. <b>15</b></figref> can be implemented at least in part in the form of one or more software programs stored in memory and executed by a processor of a processing device such as a computer or server. As will be described below, a memory or other storage device having executable program code of one or more software programs embodied therein is an example of what is more generally referred to herein as a &#x201c;processor-readable storage medium.&#x201d;</p><p id="p-0100" num="0098">Illustrative embodiments of systems with a database management platform as disclosed herein can provide a number of significant advantages relative to conventional arrangements. For example, the database management platform provides an intelligent (smart) database gateway for multiple types of databases. The database management platform is configured to automatically replicate data, identify data formats of destination databases, and, in generating a destination database model, automatically define data schemas and predict and apply required indexes, distribution keys and partitions. The embodiments advantageously provide a framework for automatic data replication processes, discovering destination databases, dynamically modeling data and identifying data patterns for data replication.</p><p id="p-0101" num="0099">The embodiments leverage the strengths of existing databases, and seamlessly integrate differently configured databases by using machine learning techniques to generate destination database models. As an additional advantage, the embodiments monitor the data and learn the data patterns to recommend and generate primary and secondary indexes, and automatically re-distribute data from source databases in destination databases.</p><p id="p-0102" num="0100">Under current approaches, in order to integrate data between differently configured databases, techniques for doing so are created on an on-demand basis in response to a need for integration, requiring manual data analysis and troubleshooting before moving data between the differently configured databases. Unlike the current approaches, the embodiments advantageously use metadata from source and destination databases to map source and destination database data types, and apply one or more machine learning techniques to generate a destination database model in real-time based on the analysis. The embodiments save computing resources and improve database management by efficiently and automatically determining accurate destination database models on which to base the replication of data from source databases in destination databases.</p><p id="p-0103" num="0101">It is to be appreciated that the particular advantages described above and elsewhere herein are associated with particular illustrative embodiments and need not be present in other embodiments. Also, the particular types of information processing system features and functionality as illustrated in the drawings and described above are exemplary only, and numerous other arrangements may be used in other embodiments.</p><p id="p-0104" num="0102">As noted above, at least portions of the information processing system <b>100</b> may be implemented using one or more processing platforms. A given such processing platform comprises at least one processing device comprising a processor coupled to a memory. The processor and memory in some embodiments comprise respective processor and memory elements of a virtual machine or container provided using one or more underlying physical machines. The term &#x201c;processing device&#x201d; as used herein is intended to be broadly construed so as to encompass a wide variety of different arrangements of physical processors, memories and other device components as well as virtual instances of such components. For example, a &#x201c;processing device&#x201d; in some embodiments can comprise or be executed across one or more virtual processors. Processing devices can therefore be physical or virtual and can be executed across one or more physical or virtual processors. It should also be noted that a given virtual device can be mapped to a portion of a physical one.</p><p id="p-0105" num="0103">Some illustrative embodiments of a processing platform that may be used to implement at least a portion of an information processing system comprise cloud infrastructure including virtual machines and/or container sets implemented using a virtualization infrastructure that runs on a physical infrastructure. The cloud infrastructure further comprises sets of applications running on respective ones of the virtual machines and/or container sets.</p><p id="p-0106" num="0104">These and other types of cloud infrastructure can be used to provide what is also referred to herein as a multi-tenant environment. One or more system elements such as the database management platform <b>110</b> or portions thereof are illustratively implemented for use by tenants of such a multi-tenant environment.</p><p id="p-0107" num="0105">As mentioned previously, cloud infrastructure as disclosed herein can include cloud-based systems. Virtual machines provided in such systems can be used to implement at least portions of one or more of a computer system and a database management platform in illustrative embodiments. These and other cloud-based systems in illustrative embodiments can include object stores.</p><p id="p-0108" num="0106">Illustrative embodiments of processing platforms will now be described in greater detail with reference to <figref idref="DRAWINGS">FIGS. <b>16</b> and <b>17</b></figref>. Although described in the context of system <b>100</b>, these platforms may also be used to implement at least portions of other information processing systems in other embodiments.</p><p id="p-0109" num="0107"><figref idref="DRAWINGS">FIG. <b>16</b></figref> shows an example processing platform comprising cloud infrastructure <b>1600</b>. The cloud infrastructure <b>1600</b> comprises a combination of physical and virtual processing resources that may be utilized to implement at least a portion of the information processing system <b>100</b>. The cloud infrastructure <b>1600</b> comprises multiple virtual machines (VMs) and/or container sets <b>1602</b>-<b>1</b>, <b>1602</b>-<b>2</b>, . . . <b>1602</b>-L implemented using virtualization infrastructure <b>1604</b>. The virtualization infrastructure <b>1604</b> runs on physical infrastructure <b>1605</b>, and illustratively comprises one or more hypervisors and/or operating system level virtualization infrastructure. The operating system level virtualization infrastructure illustratively comprises kernel control groups of a Linux operating system or other type of operating system.</p><p id="p-0110" num="0108">The cloud infrastructure <b>1600</b> further comprises sets of applications <b>1610</b>-<b>1</b>, <b>1610</b>-<b>2</b>, . . . <b>1610</b>-L running on respective ones of the VMs/container sets <b>1602</b>-<b>1</b>, <b>1602</b>-<b>2</b>, . . . <b>1602</b>-L under the control of the virtualization infrastructure <b>1604</b>. The VMs/container sets <b>1602</b> may comprise respective VMs, respective sets of one or more containers, or respective sets of one or more containers running in VMs.</p><p id="p-0111" num="0109">In some implementations of the <figref idref="DRAWINGS">FIG. <b>16</b></figref> embodiment, the VMs/container sets <b>1602</b> comprise respective VMs implemented using virtualization infrastructure <b>1604</b> that comprises at least one hypervisor. A hypervisor platform may be used to implement a hypervisor within the virtualization infrastructure <b>1604</b>, where the hypervisor platform has an associated virtual infrastructure management system. The underlying physical machines may comprise one or more distributed processing platforms that include one or more storage systems.</p><p id="p-0112" num="0110">In other implementations of the <figref idref="DRAWINGS">FIG. <b>16</b></figref> embodiment, the VMs/container sets <b>1602</b> comprise respective containers implemented using virtualization infrastructure <b>1604</b> that provides operating system level virtualization functionality, such as support for Docker containers running on bare metal hosts, or Docker containers running on VMs. The containers are illustratively implemented using respective kernel control groups of the operating system.</p><p id="p-0113" num="0111">As is apparent from the above, one or more of the processing modules or other components of system <b>100</b> may each run on a computer, server, storage device or other processing platform element. A given such element may be viewed as an example of what is more generally referred to herein as a &#x201c;processing device.&#x201d; The cloud infrastructure <b>1600</b> shown in <figref idref="DRAWINGS">FIG. <b>16</b></figref> may represent at least a portion of one processing platform. Another example of such a processing platform is processing platform <b>1700</b> shown in <figref idref="DRAWINGS">FIG. <b>17</b></figref>.</p><p id="p-0114" num="0112">The processing platform <b>1700</b> in this embodiment comprises a portion of system <b>100</b> and includes a plurality of processing devices, denoted <b>1702</b>-<b>1</b>, <b>1702</b>-<b>2</b>, <b>1702</b>-<b>3</b>, . . . <b>1702</b>-K, which communicate with one another over a network <b>1704</b>.</p><p id="p-0115" num="0113">The network <b>1704</b> may comprise any type of network, including by way of example a global computer network such as the Internet, a WAN, a LAN, a satellite network, a telephone or cable network, a cellular network, a wireless network such as a WiFi or WiMAX network, or various portions or combinations of these and other types of networks.</p><p id="p-0116" num="0114">The processing device <b>1702</b>-<b>1</b> in the processing platform <b>1700</b> comprises a processor <b>1710</b> coupled to a memory <b>1712</b>. The processor <b>1710</b> may comprise a microprocessor, a microcontroller, an application-specific integrated circuit (ASIC), a field-programmable gate array (FPGA), a central processing unit (CPU), a graphical processing unit (GPU), a tensor processing unit (TPU), a video processing unit (VPU) or other type of processing circuitry, as well as portions or combinations of such circuitry elements.</p><p id="p-0117" num="0115">The memory <b>1712</b> may comprise random access memory (RAM), read-only memory (ROM), flash memory or other types of memory, in any combination. The memory <b>1712</b> and other memories disclosed herein should be viewed as illustrative examples of what are more generally referred to as &#x201c;processor-readable storage media&#x201d; storing executable program code of one or more software programs.</p><p id="p-0118" num="0116">Articles of manufacture comprising such processor-readable storage media are considered illustrative embodiments. A given such article of manufacture may comprise, for example, a storage array, a storage disk or an integrated circuit containing RAM, ROM, flash memory or other electronic memory, or any of a wide variety of other types of computer program products. The term &#x201c;article of manufacture&#x201d; as used herein should be understood to exclude transitory, propagating signals. Numerous other types of computer program products comprising processor-readable storage media can be used.</p><p id="p-0119" num="0117">Also included in the processing device <b>1702</b>-<b>1</b> is network interface circuitry <b>1714</b>, which is used to interface the processing device with the network <b>1704</b> and other system components, and may comprise conventional transceivers.</p><p id="p-0120" num="0118">The other processing devices <b>1702</b> of the processing platform <b>1700</b> are assumed to be configured in a manner similar to that shown for processing device <b>1702</b>-<b>1</b> in the figure.</p><p id="p-0121" num="0119">Again, the particular processing platform <b>1700</b> shown in the figure is presented by way of example only, and system <b>100</b> may include additional or alternative processing platforms, as well as numerous distinct processing platforms in any combination, with each such platform comprising one or more computers, servers, storage devices or other processing devices.</p><p id="p-0122" num="0120">For example, other processing platforms used to implement illustrative embodiments can comprise converged infrastructure.</p><p id="p-0123" num="0121">It should therefore be understood that in other embodiments different arrangements of additional or alternative elements may be used. At least a subset of these elements may be collectively implemented on a common processing platform, or each such element may be implemented on a separate processing platform.</p><p id="p-0124" num="0122">As indicated previously, components of an information processing system as disclosed herein can be implemented at least in part in the form of one or more software programs stored in memory and executed by a processor of a processing device. For example, at least portions of the functionality of one or more elements of the database management platform <b>110</b> as disclosed herein are illustratively implemented in the form of software running on one or more processing devices.</p><p id="p-0125" num="0123">It should again be emphasized that the above-described embodiments are presented for purposes of illustration only. Many variations and other alternative embodiments may be used. For example, the disclosed techniques are applicable to a wide variety of other types of information processing systems and database management platforms. Also, the particular configurations of system and device elements and associated processing operations illustratively shown in the drawings can be varied in other embodiments. Moreover, the various assumptions made above in the course of describing the illustrative embodiments should also be viewed as exemplary rather than as requirements or limitations of the disclosure. Numerous other alternative embodiments within the scope of the appended claims will be readily apparent to those skilled in the art.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method, comprising:<claim-text>reading data from a source database;</claim-text><claim-text>identifying one or more data types corresponding to the source database;</claim-text><claim-text>identifying a destination database for the data;</claim-text><claim-text>identifying one or more data types corresponding to the destination database; and</claim-text><claim-text>generating a destination database model to use in connection with writing the data in the destination database;</claim-text><claim-text>wherein the generation of the destination database model is based at least in part on the one or more data types corresponding to the destination database;</claim-text><claim-text>wherein the generation of the destination database model is performed using one or more machine learning algorithms; and</claim-text><claim-text>wherein the steps of the method are executed by a processing device operatively coupled to a memory.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the destination database model comprises mapping the one or more data types corresponding to the source database to the one or more data types corresponding to the destination database.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>collecting metadata for the one or more data types corresponding to the source and destination databases; and</claim-text><claim-text>identifying one or more data type names from the metadata;</claim-text><claim-text>wherein the mapping is based at least in part on the one or more data type names.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein identifying the one or more data types corresponding to at least one of the source and destination databases comprises executing a pattern matching algorithm.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the pattern matching algorithm comprises one of a dictionary matching algorithm and a Baker-Bird algorithm.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the destination database model comprises predicting one or more destination database keys.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the one or more destination database keys comprise at least one of a primary key, a distribution key, a partition key and a surrogate key.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the destination database model comprises predicting one or more partitions for the destination database.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the destination database model comprises generating one or more indexes for the destination database.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the destination database model comprises identifying one or more attributes to select as nodes of the destination database, wherein the identifying is performed using the one or more machine learning algorithms, and the one or more machine learning algorithms comprise a decision tree algorithm.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the one or more machine learning algorithms compute entropy for respective ones of the one or more attributes following a split of the respective ones of the one or more attributes.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the one or more machine learning algorithms further compute information gain for respective ones of the one or more attributes.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the one or more attributes with the highest information gain are selected as the nodes of the destination database.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the one or more machine learning algorithms further comprises a random forest algorithm.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. An apparatus comprising:<claim-text>a processing device operatively coupled to a memory and configured to:</claim-text><claim-text>read data from a source database;</claim-text><claim-text>identify one or more data types corresponding to the source database;</claim-text><claim-text>identify a destination database for the data;</claim-text><claim-text>identify one or more data types corresponding to the destination database; and</claim-text><claim-text>generate a destination database model to use in connection with writing the data in the destination database;</claim-text><claim-text>wherein the generation of the destination database model is based at least in part on the one or more data types corresponding to the destination database; and</claim-text><claim-text>wherein the generation of the destination database model is performed using one or more machine learning algorithms.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein, in generating the destination database model, the processing device is configured to map the one or more data types corresponding to the source database to the one or more data types corresponding to the destination database.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein, in generating the destination database model, the processing device is configured to predict one or more destination database keys.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. An article of manufacture comprising a non-transitory processor-readable storage medium having stored therein program code of one or more software programs, wherein the program code when executed by at least one processing device causes said at least one processing device to perform the steps of:<claim-text>reading data from a source database;</claim-text><claim-text>identifying one or more data types corresponding to the source database;</claim-text><claim-text>identifying a destination database for the data;</claim-text><claim-text>identifying one or more data types corresponding to the destination database; and</claim-text><claim-text>generating a destination database model to use in connection with writing the data in the destination database;</claim-text><claim-text>wherein the generation of the destination database model is based at least in part on the one or more data types corresponding to the destination database; and</claim-text><claim-text>wherein the generation of the destination database model is performed using one or more machine learning algorithms.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The article of manufacture of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein, in generating the destination database model, the program code causes said at least one processing device to perform the step of mapping the one or more data types corresponding to the source database to the one or more data types corresponding to the destination database.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The article of manufacture of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein, in generating the destination database model, the program code causes said at least one processing device to perform the step of predicting one or more destination database keys.</claim-text></claim></claims></us-patent-application>