<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006695A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006695</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17778932</doc-number><date>20200922</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>CN</country><doc-number>201911212695.9</doc-number><date>20191202</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>03</class><subclass>M</subclass><main-group>13</main-group><subgroup>11</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>03</class><subclass>M</subclass><main-group>13</main-group><subgroup>45</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>M</subclass><main-group>13</main-group><subgroup>1134</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>M</subclass><main-group>13</main-group><subgroup>1128</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>M</subclass><main-group>13</main-group><subgroup>458</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">Decoding Method and Device, Apparatus, and Storage Medium</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>SANECHIPS  TECHNOLOGY CO., LTD.</orgname><address><city>Shenzhen</city><country>CH</country></address></addressbook><residence><country>CH</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>DING</last-name><first-name>Jialong</first-name><address><city>Shenzhen</city><country>CN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>SHI</last-name><first-name>Guangming</first-name><address><city>Shenzhen</city><country>CN</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/CN2020/116891</doc-number><date>20200922</date></document-id><us-371c12-date><date>20220523</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A decoding method and device are provided. The method includes: decoding grouped original data in parallel by a first decoding unit to obtain grouped decoded data; decoding merged grouped decoded data by a second decoding unit to obtain decoded data; and if the sum of the lengths of the decoded data is an integer multiple of an upper limit of the decoding times of the second decoding unit, updating the first decoding unit and the second decoding unit, and if the sum of the lengths of the decoded data is not an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data is equal to a decoding length, and merging the decoded data to serve as a decoding result of the original data.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="73.49mm" wi="101.01mm" file="US20230006695A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="221.49mm" wi="103.04mm" file="US20230006695A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="226.14mm" wi="125.56mm" file="US20230006695A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="181.53mm" wi="122.09mm" file="US20230006695A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="176.70mm" wi="129.54mm" file="US20230006695A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="173.74mm" wi="146.47mm" file="US20230006695A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">The present disclosure claims priority to Chinese patent application No. CN201911212695.9, filed on Dec. 2, 2019, and entitled &#x201c;decoding method and device, apparatus, and storage medium&#x201d;, the disclosure of which is hereby incorporated by reference in its entirety.</p><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure relates to the technical field of wireless communications, and in particular to a decoding method and device, an apparatus, and a storage medium.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">For polar codes (Polar Codes, Polar codes) used in 5th generation mobile networks (5th generation mobile networks, 5G), common decoding algorithms are a successive cancellation (Successive Cancellation, SC) decoding algorithm, and a plurality of improved algorithms based on the SC decoding algorithm. If N0 points need to be calculated in a complete decoding process, the common decoding algorithm calculates decoding results of n points every time, and performs iteration on the basis of the decoding results of the n points the next time. Since there are many cases where the length of the 5G Polar code to be decoded is NO, when the decoding length is relatively long, the decoding time delay and occupied resources are obviously increased by using the common decoding algorithm.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0005" num="0004">Embodiments of the present disclosure provide a decoding method and device, a system, and a storage medium. The reconstruction of decoding resources is realized by performing grouped decoding on original data.</p><p id="p-0006" num="0005">An embodiment of the present disclosure provides a decoding method, including: decoding grouped original data in parallel by a first decoding unit to obtain grouped decoded data; decoding merged grouped decoded data by a second decoding unit to obtain decoded data; if the sum of the lengths of the decoded data is an integer multiple of an upper limit of the decoding times of the second decoding unit, updating the first decoding unit and the second decoding unit, and if the sum of the lengths of the decoded data is not an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data is equal to a decoding length, and merging the decoded data to serve as a decoding result of the original data.</p><p id="p-0007" num="0006">An embodiment of the present disclosure provides a decoding device, including: a first decoding module, configured to decode grouped original data in parallel by a first decoding unit to obtain grouped decoded data; a second decoding module, configured to decode merged grouped decoded data by a second decoding unit to obtain decoded data; a circulation module configured to, if the sum of the lengths of the decoded data is an integer multiple of an upper limit of the decoding times of the second decoding unit, update the first decoding unit and the second decoding unit, if the sum of the lengths of the decoded data is not an integer multiple of the upper limit of the decoding times of the second decoding unit, update the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data is equal to a decoding length, and merge the decoded data to serve as a decoding result of the original data.</p><p id="p-0008" num="0007">An embodiment of the present disclosure provides an apparatus, including: one or more processors; and a storage device, configured to store one or more programs, wherein when the one or more programs are executed by the one or more processors, the one or more processors implement the decoding method in the embodiment of the present disclosure.</p><p id="p-0009" num="0008">An embodiment of the present disclosure provides a storage medium, wherein a computer program is stored in the storage medium, and when executed by a processor, the computer program implements the decoding method in the embodiment of the present disclosure.</p><p id="p-0010" num="0009">According to the decoding method and device, the apparatus, and the storage medium provided by the embodiments of the present disclosure, by means of grouping the original data, decoding the grouped original data in parallel by the first decoding unit to obtain the grouped decoded data, then decoding the merged grouped decoded data by the second decoding unit to obtain the decoded data, before the sum of the lengths of the decoded data is equal to the decoding length, repeatedly updating the first decoding unit and the second decoding unit, or updating the second decoding unit to obtain new decoded data, and finally obtaining the decoding result of the original data, the reconstruction of decoding resources is realized while maintaining the time delay basically unchanged.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic flow diagram of a decoding method according to an embodiment of the present disclosure;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic diagram of a decoding calculation process according to an embodiment of the disclosure;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic diagram of a decoding calculation process according to an embodiment of the disclosure;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic diagram of a decoding calculation process according to an embodiment of the present disclosure;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is another schematic flow diagram of a decoding method according to an embodiment of the present disclosure;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic diagram of a decoding structure of a decoding length according to an embodiment of the present disclosure;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic diagram of a decoding structure of another decoding length according to an embodiment of the present disclosure;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a decomposed schematic diagram of a decoding structure of another decoding length according to an embodiment of the present disclosure;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a schematic diagram of a decoding structure of yet another decoding length according to an embodiment of the present disclosure;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a decomposed schematic diagram of a decoding structure of yet another decoding length according to an embodiment of the present disclosure;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a schematic structural diagram of a decoding device according to an embodiment of the present disclosure;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a schematic diagram of an internal structure of a decoding device according to an embodiment of the present disclosure; and</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a schematic structural diagram of a network device provided by an embodiment of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE EMBODIMENTS</heading><p id="p-0024" num="0023">In order to make the objectives, technical solutions and advantages of the present disclosure clearer, the embodiments of the present disclosure will be described in detail below in combination with the drawings. It should be noted that, the embodiments in the present disclosure and features in the embodiments can be arbitrarily combined with each other under the condition of no conflict.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic flow diagram of a decoding method according to an embodiment of the present disclosure, and the method can be applied to the case of decoding polar code data. The method can be executed by a decoding device provided by the embodiment of the present disclosure, wherein the device is implemented by software and/or hardware, and is integrated in an apparatus that provides a decoding service. As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the method includes:</p><p id="p-0026" num="0025">Step <b>110</b>: decoding grouped original data in parallel by a first decoding unit to obtain grouped decoded data.</p><p id="p-0027" num="0026">The original data are polar code data to be decoded, the first decoding unit is used for decoding the original data, the number of the first decoding units is determined by the number of data included in the original data, when there are a plurality of first decoding units, it is necessary to averagely group the original data to obtain grouped original data corresponding to the first decoding units, and by inputting the grouped original data into the corresponding first decoding units in parallel, the grouped decoded data output by the first decoding units can be obtained.</p><p id="p-0028" num="0027">In an example, before decoding the grouped original data in parallel by the first decoding unit to obtain the grouped decoded data, the method can further include: acquiring a decoding length corresponding to the original data; and determining, according to a preset decoding resource allocation table, a first decoding unit and a second decoding unit corresponding to the decoding length.</p><p id="p-0029" num="0028">It should be noted that, since the number of data included in the original data is different, decoding resources required to complete a complete decoding process are also different. Therefore, before decoding is performed, it is necessary to acquire the decoding length corresponding to the original data at first, that is, the number of data included in the original data, and then the preset decoding resource allocation table is queried according to the decoding length, so as to determine which first decoding units and second decoding units are required to complete the decoding of the original data, wherein the preset decoding resource allocation table includes first decoding units and second decoding units corresponding to various decoding length respectively.</p><p id="p-0030" num="0029">In a specific implementation, if the decoding length of the original data is 1024, then by querying the preset decoding resource allocation table, it can be seen that when the decoding length is 1024, the first decoding unit includes the first to the 32<sup>nd </sup>minimum decoding code units, the second decoding unit includes the 33<sup>rd </sup>minimum decoding code unit, wherein each minimum decoding unit can independently complete the decoding process of a code length of 32.</p><p id="p-0031" num="0030">In an example, before decoding the grouped original data in parallel by the first decoding unit to obtain the grouped decoded data, the method can further include: determining, according to the decoding length, a second number corresponding to each first decoding unit; and for each first decoding unit, sequentially extracting a second number of original data to be decoded from the original data after every third number of original data to be decoded, and merging the extracted data to be decoded in sequence to serve as the grouped original data corresponding to the first decoding unit.</p><p id="p-0032" num="0031">The third number can be set to 32, and the second number is equal to the third number/the number of the first decoding units.</p><p id="p-0033" num="0032">In a specific implementation, since there is a plurality of first decoding units corresponding to the original data, in order to decode the original decoded data by the plurality of first decoding units, it is necessary to group the original data. For example, the original data with the decoding length <b>1024</b> include 32 corresponding first decoding units, so the original decoded data need to be divided into 32 groups on average. Specifically, the original data can be divided into a plurality of original data blocks, and each original data block includes 32 pieces of data, for example, the original data blocks divided from the original data with the decoding length <b>1024</b> includes i<b>0</b>-i<b>31</b>, i<b>32</b>-i<b>63</b> . . . i<b>992</b>-i<b>1023</b>, one piece of data to be decoded is extracted from each original data block in sequence and is merged according to an extraction sequence to obtain a group of data, for example, i<b>0</b>, i<b>32</b>, i<b>64</b> . . . i<b>992</b>, and the above process is repeated for 32 times to divide the original data into 32 groups.</p><p id="p-0034" num="0033">Step <b>120</b>: decoding merged grouped decoded data by the second decoding unit to obtain decoded data.</p><p id="p-0035" num="0034">It should be noted that, the grouped decoded data output by the first decoding unit are the input data of the second decoding unit, after the grouped decoded data output by each first decoding unit are merged in sequence, the merged grouped decoded data are input into the second decoding unit for decoding to obtain a piece of decoded data.</p><p id="p-0036" num="0035">In an example, after obtaining the decoded data, the method can further include: storing the decoded data in a register group.</p><p id="p-0037" num="0036">It should be noted that, the decoded data currently stored in a register can be used for calculating new decoded data, so as to obtain a decoding result of the original data.</p><p id="p-0038" num="0037">In an example, after storing the decoded data in the register group, the method can further include: if the sum of the lengths of the decoded data stored in the register group conforms to a preset calculation sub-unit switching rule, switching calculation sub-units in the first decoding unit or the second decoding unit.</p><p id="p-0039" num="0038">It should be noted that, both the first decoding unit and the second decoding unit include a plurality of calculation sub-units, for example, a first calculation sub-unit, a second calculation sub-unit, a fourth calculation sub-unit, an eighth calculation sub-unit and a sixteenth calculation sub-unit, but all calculation sub-units in the second decoding unit are used, and a part of the calculation sub-units in the first decoding unit may be used according to the decoding length. For example, when the decoding length is 512, the second, the fourth, the eighth and the sixteenth calculation sub-units in the first decoding unit can all be used, and the first calculation sub-unit is not used.</p><p id="p-0040" num="0039">It should be noted that, the switching of the calculation sub-units essentially refers to switching the input data of the calculation sub-units, and after the calculation sub-units in the first decoding unit or the second decoding unit are switched according to the preset calculation sub-unit switching rule, new decoded data can be calculated.</p><p id="p-0041" num="0040">In an example, the preset calculation sub-unit switching rule includes: switching the Mtn calculation sub-unit in the first decoding unit, when the sum of the lengths of the decoded data is an integer multiple of the number *2*M of the first decoding units; and switching the Nth calculation sub-unit in the second decoding unit, when the sum of the length of the decoded data is an integer multiple of 2*N, wherein the M<sup>th </sup>calculation sub-unit includes M basic calculators, and the Nth calculation sub-unit includes N basic calculators.</p><p id="p-0042" num="0041">In a specific implementation, if the decoding length is 512, the first, the second, the fourth, the eighth and the sixteenth calculation sub-units in the second decoding unit are respectively switched when the sum of the lengths of the decoded data stored in the register group is equal to an integer multiple of 2, 4, 8, 16 and 32. The second, the fourth and the eighth calculation sub-units in the first decoding unit are respectively switched when the sum of the lengths of the decoded data stored in the register group is equal to an integer multiple of 64, 128 and 256, wherein the sixteenth calculation sub-unit in the first decoding unit does not need to be switched, and the first calculation sub-unit is not used.</p><p id="p-0043" num="0042">Exemplarily, if the decoded data stored in the register group are u<b>0</b> and u<b>1</b>, then the first calculation sub-unit of the second decoding unit as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> can be switched to the first calculation sub-unit as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, so as to continue to calculate the decoded data u<b>2</b> and u<b>3</b>. If the decoded data stored in the register group are u<b>0</b> to u<b>3</b>, then the first and second calculation sub-units of the second decoding unit as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> can be switched to the first and second calculation sub-units as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, wherein the first calculation sub-unit as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> and the first calculation sub-unit as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> are actually the same calculation sub-unit with different input data.</p><p id="p-0044" num="0043">Step <b>130</b>: if the sum of the lengths of the decoded data is an integer multiple of an upper limit of the decoding times of the second decoding unit, updating the first decoding unit and the second decoding unit, if the sum of the lengths of the decoded data is not an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data is equal to the decoding length, and merging the decoded data to serve as a decoding result of the original data.</p><p id="p-0045" num="0044">It should be noted that, since the second decoding unit only outputs one decoded data at a time, after one decoded data is obtained, it is necessary to judge whether the complete decoding of the original data is completed, that is, whether the sum of the lengths of the currently obtained decoded data is equal to the decoding length, if the sum of the lengths of the currently obtained decoded data is less than the decoding length, subsequent decoded data are continuously calculated by updating the decoding resources, until the sum of the lengths of the decoded data is equal to the decoding length, and then, the current decoded data are merged to serve as the decoding result of the original data.</p><p id="p-0046" num="0045">In an example, the step: if the sum of the lengths of the decoded data is an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the first decoding unit and the second decoding unit, and if the sum of the lengths of the decoded data is not an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data is equal to the decoding length, can include: if the sum of the lengths of the decoded data stored in the register group is an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the first decoding unit and the second decoding unit, and if the sum of the lengths of the decoded data stored in the register group is not an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data stored in the register group is equal to the decoding length.</p><p id="p-0047" num="0046">The updating of the decoding unit actually refers to updating the calculation sub-units in the decoding unit.</p><p id="p-0048" num="0047">In a specific implementation, if the upper limit of the decoding times of the second decoding unit is 32, the decoded data stored in the register group is u<b>0</b>, that is, the sum of the lengths of the decoded data is 1, then it is necessary to update the first calculation sub-unit in the second decoding unit according to u<b>0</b>, so as to obtain decoded data u<b>1</b> according to the updated first calculation sub-unit, and after u<b>1</b> is obtained, the sum of the lengths of the decoded data is 2, and then the second calculation sub-unit in the second decoding unit can be updated according to the decoded data u<b>0</b> and u<b>1</b>; and if the decoded data stored in the register group are u<b>0</b>-u<b>31</b>, that is, the sum of the lengths of the decoded data is 32, then it is necessary to update the calculation sub-units in the first decoding unit and the second decoding unit according to the decoded data u<b>0</b>-u<b>31</b>, respectively.</p><p id="p-0049" num="0048">According to the decoding method and device, the apparatus, and the storage medium provided by the embodiments of the present disclosure, by means of grouping the original data, decoding the grouped original data in parallel by the first decoding unit to obtain the grouped decoded data, then decoding the merged grouped decoded data by the second decoding unit to obtain the decoded data, before the sum of the lengths of the decoded data is equal to the decoding length, repeatedly updating the first decoding unit and the second decoding unit, or updating the second decoding unit to obtain new decoded data, and finally obtaining the decoding result of the original data, the reconstruction of decoding resources is realized while maintaining the time delay basically unchanged.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is another schematic flow diagram of a decoding method according to an embodiment of the present disclosure. The method can include:</p><p id="p-0051" num="0050">Step <b>210</b>: generating a preset decoding resource allocation table.</p><p id="p-0052" num="0051">In an example, the method can include: presetting a preset number of decoding lengths; determining the number of parallel decoding paths corresponding to each decoding length; for each decoding length, selecting, from a fixed number of minimum decoding units, a first number of second decoding units and first coding units that respectively match the second decoding units; and generating the preset decoding resource allocation table according to serial numbers of the second decoding units corresponding to each decoding length and the serial numbers of the first coding units, wherein the first number is equal to the number of parallel decoding paths corresponding to the current decoding length.</p><p id="p-0053" num="0052">It should be noted that, the preset number of decoding lengths can include 6 decoding lengths with a length of 2<sup>n</sup>(n&#x2208;Z, 5&#x2264;n&#x2264;10). For limited decoding resources, that is, for the fixed number of minimum decoding units, the decoding resources required for decoding original data of each decoding length are different. Therefore, in order to improve the utilization rate of the decoding resources and the decoding efficiency, and to reduce the waste of the decoding resources, the limited decoding resources can be used for performing multiple paths of parallel decoding on the original data to be decoded.</p><p id="p-0054" num="0053">In a specific implementation, a decoding structure with the minimum decoding length can be used as the minimum decoding unit, and the decoding structures of other various decoding lengths can be realized by combining the minimum decoding units. <figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a decoding structure with a decoding length <b>32</b> according to an embodiment of the present disclosure, that is, the minimum decoding unit in the present embodiment; <figref idref="DRAWINGS">FIG. <b>7</b></figref> shows another decoding structure with a decoding length <b>1024</b> according to an embodiment of the present disclosure, and by decomposing the decoding structure as shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, it can be seen that the decoding structure with the decoding length <b>1024</b> is equivalent to 33 minimum decoding units; <figref idref="DRAWINGS">FIG. <b>9</b></figref> shows yet another decoding structure with a decoding length <b>512</b> according to an embodiment of the present disclosure, and by decomposing the decoding structure as shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, it can be seen that the decoding structure with the decoding length <b>512</b> is equivalent to a tapping result of one minimum decoding unit and 16 minimum decoding units; and so on, the decoding structures of various decoding lengths can be formed by the minimum decoding units, wherein the decoding structure represents a combination of decoding resources when the original data are decoded.</p><p id="p-0055" num="0054">In a specific implementation, by decomposing the decoding structure, it can be seen that the number of the minimum decoding units corresponding to each decoding length is C=decoding length/32+1, that is, when the original data of various decoding lengths are decoded, the number C of the minimum decoding units is shown in Table 1:</p><p id="p-0056" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="98pt" align="left"/><colspec colname="2" colwidth="119pt" align="center"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Decoding length</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="7"><colspec colname="1" colwidth="98pt" align="left"/><colspec colname="2" colwidth="14pt" align="center"/><colspec colname="3" colwidth="28pt" align="center"/><colspec colname="4" colwidth="14pt" align="center"/><colspec colname="5" colwidth="28pt" align="center"/><colspec colname="6" colwidth="14pt" align="center"/><colspec colname="7" colwidth="21pt" align="center"/><tbody valign="top"><row><entry/><entry>32</entry><entry>64</entry><entry>128</entry><entry>256</entry><entry>512</entry><entry>1024</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row><row><entry>The number C of the minimum</entry><entry>1</entry><entry>3</entry><entry>5</entry><entry>9</entry><entry>17</entry><entry>33</entry></row><row><entry>decoding units required</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0057" num="0055">As can be seen from Table 1, the decoding with the decoding length <b>1024</b> requires at least 33 minimum decoding units. If the total number of the minimum decoding units is 33, the decoding with the decoding length <b>512</b> will have idle decoding resources of 16 minimum decoding units, but in fact, two paths of 512 decoding parallel calculation can be realized by adding one minimum decoding unit, although this will correspondingly result in idle decoding resources of one minimum decoding unit in the decoding with the decoding length <b>1024</b>, the utilization rate of the decoding resources is still greatly improved. Excessive increase in the minimum decoding units will lead to a complex interconnection relationship between the minimum decoding units and increase the processing time delay, therefore, according to experience, when the total number of the minimum decoding units is 33-40, the number of wasted minimum decoding units at each decoding length is calculated, and the results are shown in Table 2.</p><p id="p-0058" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="77pt" align="center"/><colspec colname="2" colwidth="140pt" align="center"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>The total number of the</entry></row><row><entry/><entry>minimum decoding units</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="9"><colspec colname="1" colwidth="77pt" align="center"/><colspec colname="2" colwidth="21pt" align="center"/><colspec colname="3" colwidth="14pt" align="center"/><colspec colname="4" colwidth="21pt" align="center"/><colspec colname="5" colwidth="14pt" align="center"/><colspec colname="6" colwidth="21pt" align="center"/><colspec colname="7" colwidth="14pt" align="center"/><colspec colname="8" colwidth="21pt" align="center"/><colspec colname="9" colwidth="14pt" align="center"/><tbody valign="top"><row><entry/><entry>33</entry><entry>34</entry><entry>35</entry><entry>36</entry><entry>37</entry><entry>38</entry><entry>39</entry><entry>40</entry></row><row><entry namest="1" nameend="9" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="10"><colspec colname="1" colwidth="56pt" align="left"/><colspec colname="2" colwidth="21pt" align="char" char="."/><colspec colname="3" colwidth="21pt" align="char" char="."/><colspec colname="4" colwidth="14pt" align="center"/><colspec colname="5" colwidth="21pt" align="center"/><colspec colname="6" colwidth="14pt" align="center"/><colspec colname="7" colwidth="21pt" align="center"/><colspec colname="8" colwidth="14pt" align="center"/><colspec colname="9" colwidth="21pt" align="center"/><colspec colname="10" colwidth="14pt" align="center"/><tbody valign="top"><row><entry>Decoding length</entry><entry>64</entry><entry>0</entry><entry>1</entry><entry>2</entry><entry>0</entry><entry>1</entry><entry>2</entry><entry>0</entry><entry>1</entry></row><row><entry/><entry>128</entry><entry>3</entry><entry>4</entry><entry>0</entry><entry>1</entry><entry>2</entry><entry>3</entry><entry>4</entry><entry>0</entry></row><row><entry/><entry>256</entry><entry>6</entry><entry>7</entry><entry>8</entry><entry>0</entry><entry>1</entry><entry>2</entry><entry>3</entry><entry>4</entry></row><row><entry/><entry>512</entry><entry>16</entry><entry>0</entry><entry>1</entry><entry>2</entry><entry>3</entry><entry>4</entry><entry>5</entry><entry>6</entry></row><row><entry/><entry>1024</entry><entry>0</entry><entry>1</entry><entry>2</entry><entry>3</entry><entry>4</entry><entry>5</entry><entry>6</entry><entry>7</entry></row><row><entry namest="1" nameend="10" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0059" num="0056">As can be seen from Table 2, when 36 minimum decoding units are selected to decode the original data of various decoding lengths, the waste of the decoding resources is the least. Therefore, 36 minimum decoding units are utilized in the present embodiment.</p><p id="p-0060" num="0057">In an example, for each decoding length, the number of parallel decoding paths that can be supported by 36 minimum decoding units is determined in combination with Table 1, that is, a quotient of 36 and the number C of the minimum decoding units in Table 1, and then for each path of decoding, a second decoding unit and C&#x2212;1 first decoding units are respectively selected from the 36 minimum decoding units; and then, the preset decoding resource allocation table is generated according to the serial numbers of the second decoding units corresponding to each decoding length and the serial numbers of the first coding units.</p><p id="p-0061" num="0058">Step <b>220</b>: acquiring original data and a decoding length corresponding to the original data, and determining, according to the preset decoding resource allocation table, the first decoding units and the second decoding units of each path of decoding corresponding to the decoding length.</p><p id="p-0062" num="0059">It should be noted that, a plurality of original data that are independent of each other and have the same decoding length can be obtained at the same time. By querying the preset decoding resource allocation table, the number of parallel decoding paths corresponding to the decoding length can be determined, that is, the maximum number that supports the simultaneous decoding of the decoding length, as well as the first decoding units and the second decoding units of each path of decoding, so that a plurality of original data can be decoded at the same time, thereby making full use of the decoding resources, and improving the utilization rate of the decoding resources and the decoding efficiency.</p><p id="p-0063" num="0060">Exemplarily, assuming that three original data with a decoding length <b>256</b> are acquired at the same time, and by querying the preset decoding resource allocation table, it is determined that the maximum number of parallel decoding paths corresponding to the decoding length <b>256</b> is 4, that is, at most 4 paths of decoding with the decoding length <b>256</b> are supported at the same time. Therefore, the acquired 3 original data can be decoded at the same time.</p><p id="p-0064" num="0061">It should be noted that, the embodiment of the present disclosure only supports the multiple paths of parallel decoding with the same decoding length, and does not support the simultaneous parallel decoding of a plurality of original data with different decoding lengths.</p><p id="p-0065" num="0062">Step <b>230</b>: performing parallel decoding on a plurality of original data by using the first decoding units and the second decoding units of multiple paths of decoding, so as to obtain decoding results of multiple paths of original data.</p><p id="p-0066" num="0063">It should be noted that, before performing the parallel decoding on the plurality of original data, it is necessary to averagely group the corresponding original data according to the number of the first decoding units in each path of decoding, so as to obtain multiple groups of original data matching the first decoding units. The specific grouping process of the original data in each path of decoding is substantially the same as the grouping process in step <b>110</b> as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, and thus will not be described in detail herein.</p><p id="p-0067" num="0064">In an example, for a path of decoding, decoding grouped original data can include: decoding the grouped original data in parallel by the first decoding unit to obtain grouped decoded data, decoding merged grouped decoded data by the second decoding unit to obtain decoded data, if the sum of the lengths of the decoded data is an integer multiple of an upper limit of the decoding times of the second decoding unit, updating the first decoding unit and the second decoding unit, if the sum of the lengths of the decoded data is not an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data is equal to the decoding length, and merging the decoded data to serve as the decoding result of the original data.</p><p id="p-0068" num="0065">It should be noted that, the step <b>230</b> shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref> is substantially the same as the steps <b>110</b> to <b>130</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, and thus will not be repeated in the present embodiment.</p><p id="p-0069" num="0066">In the embodiment of the present disclosure, by establishing the preset decoding resource allocation table in advance, after the decoding length corresponding to the original data is obtained, the preset decoding resource allocation table can be queried to determine the first decoding units and the second decoding units of each path of decoding corresponding to the decoding length, the existing decoding resources are reconstructed while the time delay is basically unchanged, therefore multiple paths of parallel decoding is realized, and the utilization rate of the decoding resources and the decoding efficiency are improved.</p><p id="p-0070" num="0067"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a schematic structural diagram of a decoding device according to an embodiment of the present disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the device includes:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0068">a first decoding module <b>310</b>, configured to decode grouped original data in parallel by a first decoding unit to obtain grouped decoded data;</li>        <li id="ul0002-0002" num="0069">a second decoding module <b>320</b>, configured to decode merged grouped decoded data by a second decoding unit to obtain decoded data; and</li>        <li id="ul0002-0003" num="0070">a circulation module <b>330</b> configured to, if the sum of the lengths of the decoded data is an integer multiple of an upper limit of the decoding times of the second decoding unit, update the first decoding unit and the second decoding unit, if the sum of the lengths of the decoded data is not an integer multiple of the upper limit of the decoding times of the second decoding unit, update the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data is equal to a decoding length, and merge the decoded data to serve as a decoding result of the original data.</li>    </ul>    </li></ul></p><p id="p-0071" num="0071">The decoding device provided by the present embodiment is configured to implement the decoding method of the present disclosure. The implementation principles and technical effects of the decoding device provided by the present embodiment are similar to those of the decoding method of the present disclosure, and thus will not be repeated herein.</p><p id="p-0072" num="0072">In an example, the first decoding module <b>310</b> is further configured to: before decoding the grouped original data in parallel by the first decoding unit to obtain the grouped decoded data, acquire a decoding length corresponding to the original data; and determine, according to a preset decoding resource allocation table, a first decoding unit and a second decoding unit corresponding to the decoding length.</p><p id="p-0073" num="0073">In an example, the device further includes: a table establishment module configured to: before determining, according to the preset decoding resource allocation table, the first decoding unit and the second decoding unit corresponding to the decoding length, preset a preset number of decoding lengths; determine the number of parallel decoding paths corresponding to each decoding length; for each decoding length, select, from a fixed number of minimum decoding units, a first number of second decoding units and first coding units that respectively match the second decoding units; and generate the preset decoding resource allocation table according to serial numbers of the second decoding units corresponding to each decoding length and the serial numbers of the first coding units, wherein the first number is equal to the number of parallel decoding paths corresponding to the current decoding length.</p><p id="p-0074" num="0074">In an example, the device further includes: a grouping module configured to: before decoding the grouped original data in parallel by the first decoding unit to obtain the grouped decoded data, determine, according to the decoding length, a second number corresponding to each first decoding unit; and for each first decoding unit, sequentially extract a second number of original data to be decoded from the original data after every third number of original data to be decoded, and merge the extracted data to be decoded in sequence to serve as the grouped original data corresponding to the first decoding unit.</p><p id="p-0075" num="0075">In an example, the second decoding module <b>320</b> is further configured to: after obtaining the decoded data, store the decoded data in a register group; and the circulation module <b>330</b> is specifically configured to: if the sum of the lengths of the decoded data stored in the register group is an integer multiple of the upper limit of the decoding times of the second decoding unit, update the first decoding unit and the second decoding unit, and if the sum of the lengths of the decoded data stored in the register group is not an integer multiple of the upper limit of the decoding times of the second decoding unit, update the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data stored in the register group is equal to the decoding length.</p><p id="p-0076" num="0076">In an example, the device further includes: a switching module configured to: after storing the decoded data in the register group, if the sum of the lengths of the decoded data stored in the register group conforms to a preset calculation sub-unit switching rule, switch calculation sub-units in the first decoding unit or the second decoding unit.</p><p id="p-0077" num="0077">In an example, the preset calculation sub-unit switching rule includes: switching the M<sup>th </sup>calculation sub-unit in the first decoding unit, when the sum of the lengths of the decoded data is an integer multiple of the number *2*M of the first decoding units; and switching the Nth calculation sub-unit in the second decoding unit, when the sum of the length of the decoded data is an integer multiple of 2*N, wherein the M<sup>th </sup>calculation sub-unit includes M basic calculators, and the Nth calculation sub-unit includes N basic calculators.</p><p id="p-0078" num="0078"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a schematic diagram of an internal structure of a decoding device according to an embodiment of the present disclosure. The device internally includes:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0079">a task scheduling unit (encode ctrl) <b>1202</b> configured to: acquire a decoding length corresponding to original data, and obtain required parameters of each minimum decoding unit according to the decoding length;</li>    </ul>    </li></ul></p><p id="p-0079" num="0080">minimum decoding units (encode<b>32</b>_<i>x</i>) <b>1204</b> configured to: independently complete a decoding process of a decoding length <b>32</b>, wherein 36 minimum decoding units are provided in total. Each minimum decoding unit includes a set of processing core controllers, a set of calculation sub-units FG (a first calculation sub-unit FG<b>1</b>, a second calculation sub-unit FG<b>2</b>, a fourth calculation sub-unit FG<b>4</b>, an eighth calculation sub-unit FG<b>8</b> and a sixteenth calculation sub-unit FG<b>16</b>), which is capable of independently completing the decoding process of the decoding length <b>32</b>, and a set of input and output selection units. For the present device, the first to the 24<sup>th </sup>minimum decoding units do not need input selection, and the 33<sup>rd </sup>to the 36<sup>th </sup>minimum decoding units do not need output selection;<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0081">a processing core controller (32encode Ctrl) <b>1206</b> configured to: control the updating enable of each calculation sub-unit FG and the selection enable of the input and output selection units according to parameters issued by a task scheduling module;</li>        <li id="ul0006-0002" num="0082">the t<sup>th </sup>calculation sub-unit FGt configured to: complete t complete FG calculations in parallel; and</li>        <li id="ul0006-0003" num="0083">a register group <b>1208</b> configured to: store the decoded data u that has been calculated.</li>    </ul>    </li></ul></p><p id="p-0080" num="0084">In a specific implementation, according to various decoding lengths, the overall workflow of the present device is as follows:</p><p id="p-0081" num="0085">For the decoding length <b>1024</b>:<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0086">1) encode<b>32</b>_<b>0</b>-<b>31</b> are connected with encode<b>32</b>_<b>32</b> in <figref idref="DRAWINGS">FIG. <b>12</b></figref> to perform a path of decoding, wherein encode<b>32</b>_<b>32</b> represents the second decoding unit, encode<b>32</b>_<b>0</b>-<b>31</b> represent the first decoding units, and encode<b>32</b>_<b>33</b>-<b>35</b> do not participate in the decoding.</li>    </ul>    </li></ul></p><p id="p-0082" num="0087">2) According to the rule of extracting 1 piece of data after every 32 pieces of data, one original data (LLR) is divided into 32 groups, which are respectively used as input data of the first decoding units encode<b>32</b>_<b>0</b>-<b>31</b>.</p><p id="p-0083" num="0088">3) The first calculation sub-unit FG<b>1</b> of each first decoding unit outputs one grouped decoded data, and merges 32 grouped decoded data into a decoding input of the second decoding unit encode<b>32</b>_<b>32</b>. The second decoding unit obtains a decoded data (u value) during every decoding.</p><p id="p-0084" num="0089">4) Every time when a decoded data is calculated, the decoded data is updated into the 32&#xd7;36 register group, if the sum of the lengths of the decoded data stored in the register group is an integer multiple of 32, the states of the calculation sub-units FG in the first decoding unit and the second decoding unit are updated by using the decoded data in the register group, and if the sum of the lengths of the decoded data stored in the register group is not an integer multiple of 32, the states of the calculation sub-units FG in the second decoding unit are updated by using the decoded data in the register group, so as to calculate the next decoded data.</p><p id="p-0085" num="0090">FG<b>1</b>, FG<b>2</b>, FG<b>4</b>, FG<b>8</b> and FG<b>16</b> in the second decoding unit are respectively switched every time when 2, 4, 8, 16 and 32 decoded data are decoded. FG<b>1</b>, FG<b>2</b>, FG<b>4</b> and FG<b>8</b> in the first decoding unit are respectively switched every time when 64, 128, 256 and 512 decoded data are decoded, and the state of FG<b>16</b> is not switched.</p><p id="p-0086" num="0091">5) After <b>1024</b> circulations are performed to update the values of the FG and the register group, the decoding of the decoding length <b>1024</b> is completed, and <b>1024</b> decoded data stored in the register group are output as the decoding result of the original data.</p><p id="p-0087" num="0092">For the decoding length <b>512</b>:</p><p id="p-0088" num="0093">1) encode<b>32</b>_<b>0</b>-<b>15</b> are connected with encode<b>32</b>_<b>32</b> in <figref idref="DRAWINGS">FIG. <b>12</b></figref> to perform a path of decoding, encode<b>32</b>_<b>16</b>-<b>31</b> are connected with encode<b>32</b>_<b>33</b> to perform a path of decoding, the two paths of decoding are performed in parallel, and encode<b>32</b>_<b>34</b>-<b>35</b> do not participate in the decoding, wherein encode<b>32</b>_<b>32</b>-<b>33</b> represent the second decoding units, and encode<b>32</b>_<b>0</b>-<b>31</b> represent the first decoding units.</p><p id="p-0089" num="0094">2) According to the rule of extracting 2 pieces of data after every 32 pieces of data, each of 2 irrelevant original data (LLR) is divided into 16 groups, which are respectively used as input data of the first decoding units encode<b>32</b>_<b>0</b>-<b>15</b> and encode<b>32</b>_<b>16</b>-<b>31</b>.</p><p id="p-0090" num="0095">3) The second calculation sub-unit FG<b>2</b> of each first decoding unit outputs 2 grouped decoded data, and merges 16 groups of grouped decoded data of the encode<b>32</b>_<b>0</b>-<b>15</b> into the decoding input of the second decoding unit encode<b>32</b>_<b>32</b>, wherein the encode<b>32</b>_<b>32</b> obtains a decoded data (u value) during every decoding. The second calculation sub-unit FG<b>2</b> merges 16 groups of grouped decoded data of the encode<b>32</b>_<b>16</b>-<b>31</b> into the decoding input of the second decoding unit encode<b>32</b>_<b>33</b>, wherein the encode<b>32</b>_<b>33</b> obtains a decoded data (u value) during every decoding.</p><p id="p-0091" num="0096">4) Every time when a decoded data is calculated, the decoded data is updated into a corresponding portion of the 32&#xd7;36 register group, if the sum of the lengths of the decoded data stored in the register group is an integer multiple of 32, the states of the calculation sub-units FG in the first decoding unit and the second decoding unit are updated by using the decoded data stored in the portion of the register group, and if the sum of the lengths of the decoded data stored in the register group is not an integer multiple of 32, the states of the calculation sub-units FG in the second decoding unit are updated by using the decoded data stored in the portion of the register group, so as to calculate the next decoded data, wherein the 32&#xd7;36 register group is divided into two portions, which are respectively used for two paths of decoding calculation.</p><p id="p-0092" num="0097">FG<b>1</b>, FG<b>2</b>, FG<b>4</b>, FG<b>8</b> and FG<b>16</b> in the second decoding unit are respectively switched every time when 2, 4, 8, 16 and 32 decoded data are decoded. FG<b>2</b>, FG<b>4</b> and FG<b>8</b> in the first decoding unit are respectively switched every time when 64, 128 and 256 decoded data are decoded, the state of FG<b>16</b> is not switched, and FG<b>1</b> is not used.</p><p id="p-0093" num="0098">5) After <b>512</b> circulations are performed to update the values of the FG and the register group, the decoding of the decoding length <b>512</b> is completed, and two groups of decoded data stored in the register group are output as two paths of decoding results of the original data.</p><p id="p-0094" num="0099">For the decoding length <b>256</b>:</p><p id="p-0095" num="0100">1) encode<b>32</b>_<b>0</b>-<b>31</b> are connected with encode<b>32</b>_<b>32</b>-<b>35</b> in <figref idref="DRAWINGS">FIG. <b>12</b></figref> to perform 4 paths of decoding parallel processing, wherein encode<b>32</b>_<b>32</b>-<b>35</b> represent the second decoding units, and encode<b>32</b>_<b>0</b>-<b>31</b> represent the first decoding units.</p><p id="p-0096" num="0101">2) According to the rule of extracting 4 pieces of data after every 32 pieces of data, each of 4 irrelevant original data (LLR) is divided into 8 groups, which are respectively used as input data of 4 paths of first decoding units encode<b>32</b>_<b>0</b>-<b>7</b>, encode<b>32</b>_<b>8</b>-<b>15</b>, encode<b>32</b>_<b>16</b>-<b>23</b> and encode<b>32</b>_<b>24</b>-<b>31</b>.</p><p id="p-0097" num="0102">3) The fourth calculation sub-unit FG<b>4</b> of each first decoding unit outputs 4 grouped decoded data, and merges 8 groups of grouped decoded data of each path of decoding into the decoding input of the corresponding second decoding unit, wherein the second decoding unit obtains a decoded data (u value) during every decoding.</p><p id="p-0098" num="0103">4) Every time when a decoded data is calculated, the decoded data is updated into a corresponding portion of the 32&#xd7;36 register group, if the sum of the lengths of the decoded data stored in the register group is an integer multiple of 32, the states of the calculation sub-units FG in the first decoding unit and the second decoding unit are updated by using the decoded data stored in the portion of the register group, and if the sum of the lengths of the decoded data stored in the register group is not an integer multiple of 32, the states of the calculation sub-units FG in the second decoding unit are updated by using the decoded data stored in the portion of the register group, so as to calculate the next decoded data, wherein the 32&#xd7;36 register group is divided into 4 portions, which are respectively used for 4 paths of decoding calculation.</p><p id="p-0099" num="0104">FG<b>1</b>, FG<b>2</b>, FG<b>4</b>, FG<b>8</b> and FG<b>16</b> in the second decoding unit are respectively switched every time when 2, 4, 8, 16 and 32 decoded data are decoded. FG<b>4</b> and FG<b>8</b> in the first decoding unit are respectively switched every time when 64 and 128 decoded data are decoded, the state of FG<b>16</b> is not switched, and FG<b>1</b> and FG<b>2</b> are not used.</p><p id="p-0100" num="0105">5) After <b>256</b> circulations are performed to update the values of the FG and the register group, the decoding of the decoding length <b>256</b> is completed, and 4 groups of decoded data stored in the register group are output as 4 paths of decoding results of the original data.</p><p id="p-0101" num="0106">For the decoding length <b>128</b>:</p><p id="p-0102" num="0107">1) encode<b>32</b>_<b>0</b>-<b>27</b> are connected with encode<b>32</b>_<b>28</b>-<b>35</b> (encode<b>32</b>_<b>31</b> does not participate in the decoding) in <figref idref="DRAWINGS">FIG. <b>12</b></figref> to perform 7 paths of decoding parallel processing, wherein encode<b>32</b>_<b>28</b>-<b>35</b> represent the second decoding units, and encode<b>32</b>_<b>0</b>-<b>27</b> represent the first decoding units.</p><p id="p-0103" num="0108">2) According to the rule of extracting 8 pieces of data after every 32 pieces of data, each of 7 irrelevant original data (LLR) is divided into 4 groups, which are respectively used as input data of 7 paths of first decoding units.</p><p id="p-0104" num="0109">3) The eighth calculation sub-unit FG<b>8</b> of each first decoding unit outputs 8 grouped decoded data, and merges 4 groups of grouped decoded data of each path of decoding into the decoding input of the corresponding second decoding unit, wherein the second decoding unit obtains a decoded data (u value) during every decoding.</p><p id="p-0105" num="0110">4) Every time when a decoded data is calculated, the decoded data is updated into a corresponding portion of the 32&#xd7;36 register group, if the sum of the lengths of the decoded data stored in the register group is an integer multiple of 32, the states of the calculation sub-units FG in the first decoding unit and the second decoding unit are updated by using the decoded data stored in the portion of the register group, and if the sum of the lengths of the decoded data stored in the register group is not an integer multiple of 32, the states of the calculation sub-units FG in the second decoding unit are updated by using the decoded data stored in the portion of the register group, so as to calculate the next decoded data, wherein the 32&#xd7;36 register group is divided into 7 portions, which are respectively used for 7 paths of decoding calculation.</p><p id="p-0106" num="0111">FG<b>1</b>, FG<b>2</b>, FG<b>4</b>, FG<b>8</b> and FG<b>16</b> in the second decoding unit are respectively switched every time when 2, 4, 8, 16 and 32 decoded data are decoded. FG<b>8</b> in the first decoding unit is switched every time when 64 decoded data are decoded, the state of FG<b>16</b> is not switched, and FG<b>1</b>, FG<b>2</b> and FG<b>4</b> are not used.</p><p id="p-0107" num="0112">5) After <b>128</b> circulations are performed to update the values of the FG and the register group, the decoding of the decoding length <b>128</b> is completed, and 7 groups of decoded data stored in the register group are output as 7 paths of decoding results of the original data.</p><p id="p-0108" num="0113">For the decoding length <b>64</b>:</p><p id="p-0109" num="0114">1) encode<b>32</b>_<b>0</b>-<b>23</b> are connected with encode<b>32</b>_<b>24</b>-<b>35</b> in <figref idref="DRAWINGS">FIG. <b>12</b></figref> to perform 12 paths of decoding parallel processing, wherein encode<b>32</b>_<b>24</b>-<b>35</b> represent the second decoding units, and encode<b>32</b>_<b>0</b>-<b>23</b> represent the first decoding units.</p><p id="p-0110" num="0115">2) According to the rule of extracting 16 pieces of data after every 32 pieces of data, each of 12 irrelevant original data (LLR) is divided into 2 groups, which are respectively used as input data of 12 paths of first decoding units.</p><p id="p-0111" num="0116">3) The sixteenth calculation sub-unit FG<b>16</b> of each first decoding unit outputs 16 grouped decoded data, and merges 2 groups of grouped decoded data of each path of decoding into the decoding input of the corresponding second decoding unit, wherein the second decoding unit obtains a decoded data (u value) during every decoding.</p><p id="p-0112" num="0117">4) Every time when a decoded data is calculated, the decoded data is updated into a corresponding portion of the 32&#xd7;36 register group, if the sum of the lengths of the decoded data stored in the register group is an integer multiple of 32, the states of the calculation sub-units FG in the first decoding unit and the second decoding unit are updated by using the decoded data stored in the portion of the register group, and if the sum of the lengths of the decoded data stored in the register group is not an integer multiple of 32, the states of the calculation sub-units FG in the second decoding unit are updated by using the decoded data stored in the portion of the register group, so as to calculate the next decoded data, wherein the 32&#xd7;36 register group is divided into 12 portions, which are respectively used for 12 paths of decoding calculation.</p><p id="p-0113" num="0118">FG<b>1</b>, FG<b>2</b>, FG<b>4</b>, FG<b>8</b> and FG<b>16</b> in the second decoding unit are respectively switched every time when 2, 4, 8, 16 and 32 decoded data are decoded. FG<b>8</b> in the first decoding unit is switched every time when 64 decoded data are decoded, the state of FG<b>16</b> is not switched, and FG<b>1</b>, FG<b>2</b> and FG<b>4</b> are not used.</p><p id="p-0114" num="0119">5) After <b>64</b> circulations are performed to update the values of the FG and the register group, the decoding of the decoding length <b>64</b> is completed, and 12 groups of decoded data stored in the register group are output as 12 paths of decoding results of the original data.</p><p id="p-0115" num="0120">For the decoding length <b>32</b>:</p><p id="p-0116" num="0121">1) Each of encode<b>32</b>_<b>0</b>-<b>35</b> in <figref idref="DRAWINGS">FIG. <b>12</b></figref> is individually decoded to complete 36 paths of decoding processes.</p><p id="p-0117" num="0122">2) 36 irrelevant original data (LLR) are respectively used as the input data of 36 paths of minimum decoding units encode<b>32</b>_<b>0</b>-<b>35</b>, and each second decoding unit obtains a decoded data (u value).</p><p id="p-0118" num="0123">3) Every time when a decoded data is calculated, the decoded data is updated into a corresponding portion of the 32&#xd7;36 register group, and meanwhile, the states of the calculation sub-units FG in the corresponding minimum decoding unit are updated by using the decoded data stored in the portion of the register group, so as to calculate the next decoded data, wherein the 32&#xd7;36 register group is divided into 36 portions, which are respectively used for 36 paths of decoding calculation.</p><p id="p-0119" num="0124">FG<b>1</b>, FG<b>2</b>, FG<b>4</b>, FG<b>8</b> and FG<b>16</b> in the minimum decoding unit are respectively switched every time when 2, 4, 8 and 16 decoded data are decoded, and the state of FG<b>16</b> is not switched.</p><p id="p-0120" num="0125">4) After <b>32</b> circulations are performed to update the values of the FG and the register group, the decoding of the decoding length <b>32</b> is completed, and 36 groups of decoded data stored in the register group are output as 36 paths of decoding results of the original data.</p><p id="p-0121" num="0126">In the embodiment of the present disclosure, decoding units with other decoding lengths can be constructed by using the minimum decoding units with the decoding length <b>32</b>, the configuration process is simple, and the circuit structure is easy to implement. For different performance requirements, construction can be performed just by increasing the number of the minimum decoding units. For a single-path decoding processing process, the time delay in the embodiment of the present disclosure remains basically unchanged, but multiple paths of decoding processes can be performed in parallel by using the existing decoding resources, thereby greatly improving the decoding efficiency and the resource utilization rate, and improving the economic benefits.</p><p id="p-0122" num="0127"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a schematic structural diagram of a network device provided by an embodiment of the present disclosure. The device provided by the embodiment of the present disclosure includes: one or more processors <b>41</b> and a storage device <b>42</b>; the processor <b>41</b> of the device can be one or more, and one processor <b>41</b> is taken as an example in <figref idref="DRAWINGS">FIG. <b>13</b></figref>; the storage device <b>42</b> is configured to store one or more programs; and the one or more programs are executed by the one or more processors <b>41</b>, so that the one or more processors <b>41</b> implement the decoding method in the embodiment of the present disclosure.</p><p id="p-0123" num="0128">The processor <b>41</b> and the storage device <b>42</b> in the device can be connected by a bus or in other ways, and the connection by a bus is taken as an example in <figref idref="DRAWINGS">FIG. <b>13</b></figref>.</p><p id="p-0124" num="0129">As a computer-readable storage medium, the storage device <b>42</b> can be configured to store software programs, computer-executable programs and modules, such as program instructions/modules corresponding to the decoding method in the embodiment of the present disclosure. The storage device <b>42</b> can include a program storage area and a data storage area, wherein the program storage area can store an operating system, and an disclosure program required by at least one function; and the data storage area can store data created according to the use of the device, etc. In addition, the storage device <b>42</b> can include high-speed random access memory, and can also include a non-volatile memory, such as at least one magnetic disk storage device, a flash memory device, or other non-volatile solid state storage devices. In some instances, the storage device <b>42</b> optionally includes memories that are remotely disposed relative to the processor <b>41</b>, and these remote memories can be connected to the device by means of a network. Instances of the network include, but are not limited to, the Internet, an intranet, a local area network, a mobile communication network and combinations thereof.</p><p id="p-0125" num="0130">The embodiment of the present disclosure provides a storage medium, on which a computer program is stored, and when executed by a processor, the program implements any decoding method in the embodiments of the present disclosure.</p><p id="p-0126" num="0131">The decoding method includes: decoding grouped original data in parallel by a first decoding unit to obtain grouped decoded data; decoding merged grouped decoded data by a second decoding unit to obtain decoded data; and if the sum of the lengths of the decoded data is an integer multiple of an upper limit of the decoding times of the second decoding unit, updating the first decoding unit and the second decoding unit, and if the sum of the lengths of the decoded data is not an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data is equal to a decoding length, and merging the decoded data to serve as a decoding result of the original data.</p><p id="p-0127" num="0132">The above descriptions are merely exemplary embodiments of the present disclosure, and are not intended to limit the protection scope of the present disclosure.</p><p id="p-0128" num="0133">In general, a variety of embodiments of the present disclosure can be implemented in hardware or dedicated circuits, software, logic, or any combination thereof. For example, some aspects can be implemented in hardware, while other aspects can be implemented in firmware or software that can be executed by a controller, a microprocessor or other computing apparatuses, although the embodiments of the present disclosure are not limited thereto.</p><p id="p-0129" num="0134">The embodiments of the present disclosure can be implemented by a data processor of a mobile device by means of executing computer program instructions, for example, in a processor entity, or by hardware, or by a combination of software and hardware. The computer program instructions can be assembly instructions, instruction set architecture (Instruction Set Architecture, ISA) instructions, machine instructions, machine related instructions, microcodes, firmware instructions, state setting data, or source codes or target codes that are written in any combination of one or more programming languages.</p><p id="p-0130" num="0135">The block diagram of any logic flow in the drawings of the embodiments of the present disclosure can represent program steps, or can represent interconnected logic circuits, modules and functions, or can represent a combination of program steps and logic circuits, modules and functions. The computer program can be stored on the memory. The memory can be of any type suitable for the local technical environment and can be implemented by using any suitable data storage technology, for example, but not limited to, a read-only memory (Read-Only Memory, ROM), a random access memory (Random Access Memory, RAM), and an optical memory device and system (a digital video disc (Digital Video Disc (DVD) or a compact disk (Compact Disk, CD)), etc. The computer-readable medium can include a non-transitory storage medium. The data processor can be of any type suitable for the local technical environment, for example, but not limited to, a general-purpose computer, a special-purpose computer, a microprocessor, a digital signal processor (Digital Signal Processing, DSP), an disclosure specific integrated circuit (Disclosure Specific Integrated Circuit, ASIC), a field-programmable gate array (Field-Programmable Gate Array, FGPA), and a processor based on a multi-core processor architecture.</p><p id="p-0131" num="0136">The detailed description of the exemplary embodiments of the present disclosure has been provided above by way of illustrative and non-limiting examples. However, considering the drawings and claims, various modifications and adjustments to the above embodiments will be obvious to those skilled in the art, but do not deviate from the scope of the embodiments of the present disclosure. Accordingly, the proper scope of the present disclosure will be determined with reference to the claims.</p><heading id="h-0007" level="1">INDUSTRIAL APPLICABILITY</heading><p id="p-0132" num="0137">By means of grouping the original data, decoding the grouped original data in parallel by the first decoding unit to obtain the grouped decoded data, then decoding the merged grouped decoded data by the second decoding unit to obtain the decoded data, before the sum of the lengths of the decoded data is equal to the decoding length, repeatedly updating the first decoding unit and the second decoding unit, or updating the second decoding unit to obtain new decoded data, and finally obtaining the decoding result of the original data, the problems of a relatively long decoding length, and an obvious increase in the decoding time delay and the occupied resources are solved. The reconstruction of decoding resources is realized while maintaining the time delay basically unchanged.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A decoding method, comprising:<claim-text>decoding grouped original data in parallel by a first decoding unit to obtain grouped decoded data;</claim-text><claim-text>decoding merged grouped decoded data by a second decoding unit to obtain decoded data; and</claim-text><claim-text>if the sum of the lengths of the decoded data is an integer multiple of an upper limit of the decoding times of the second decoding unit, updating the first decoding unit and the second decoding unit, and if the sum of the lengths of the decoded data is not an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data is equal to a decoding length, and merging the decoded data to serve as a decoding result of the original data.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein before decoding the grouped original data in parallel by the first decoding unit to obtain the grouped decoded data, the method further comprises:<claim-text>acquiring a decoding length corresponding to the original data; and</claim-text><claim-text>determining, according to a preset decoding resource allocation table, the first decoding unit and the second decoding unit corresponding to the decoding length.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein before determining, according to the preset decoding resource allocation table, the first decoding unit and the second decoding unit corresponding to the decoding length, the method further comprises:<claim-text>presetting a preset number of decoding lengths;</claim-text><claim-text>determining the number of parallel decoding paths corresponding to each decoding length;</claim-text><claim-text>for each decoding length, selecting, from a fixed number of minimum decoding units, a first number of second decoding units and first coding units that respectively match the second decoding units; and</claim-text><claim-text>generating the preset decoding resource allocation table according to serial numbers of the second decoding units corresponding to each decoding length and the serial numbers of the first coding units,</claim-text><claim-text>wherein the first number is equal to the number of parallel decoding paths corresponding to the current decoding length.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein before decoding the grouped original data in parallel by the first decoding unit to obtain the grouped decoded data, the method further comprises:<claim-text>determining, according to the decoding length, a second number corresponding to each first decoding unit; and</claim-text><claim-text>for each first decoding unit, sequentially extracting a second number of original data to be decoded from the original data after every third number of original data to be decoded, and merging the extracted original data to be decoded in sequence to serve as the grouped original data corresponding to the first decoding unit.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein, after obtaining the decoded data, the method further comprises:<claim-text>storing the decoded data in a register group; and</claim-text><claim-text>the step: if the sum of the lengths of the decoded data is an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the first decoding unit and the second decoding unit, and if the sum of the lengths of the decoded data is not an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data is equal to the decoding length, comprises:</claim-text><claim-text>if the sum of the lengths of the decoded data stored in the register group is an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the first decoding unit and the second decoding unit, and if the sum of the lengths of the decoded data stored in the register group is not an integer multiple of the upper limit of the decoding times of the second decoding unit, updating the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data stored in the register group is equal to the decoding length.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein after storing the decoded data in the register group, the method further comprises:<claim-text>if the sum of the lengths of the decoded data stored in the register group conforms to a preset calculation sub-unit switching rule, switching calculation sub-units in the first decoding unit or the second decoding unit.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the preset calculation sub-unit switching rule comprises:<claim-text>switching the M<sup>th </sup>calculation sub-unit in the first decoding unit, when the sum of the lengths of the decoded data is an integer multiple of the number *2*M of the first decoding units; and</claim-text><claim-text>switching the Nth calculation sub-unit in the second decoding unit, when the sum of the length of the decoded data is an integer multiple of 2*N,</claim-text><claim-text>wherein the M<sup>th </sup>calculation sub-unit comprises M basic calculators, and the Nth calculation sub-unit comprises N basic calculators.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A decoding device, comprising:<claim-text>a first decoding module, configured to decode grouped original data in parallel by a first decoding unit to obtain grouped decoded data;</claim-text><claim-text>a second decoding module, configured to decode merged grouped decoded data by a second decoding unit to obtain decoded data; and</claim-text><claim-text>a circulation module configured to, if the sum of the lengths of the decoded data is an integer multiple of an upper limit of the decoding times of the second decoding unit, update the first decoding unit and the second decoding unit, if the sum of the lengths of the decoded data is not an integer multiple of the upper limit of the decoding times of the second decoding unit, update the second decoding unit to obtain the decoded data again, until the sum of the lengths of the decoded data is equal to a decoding length, and merge the decoded data to serve as a decoding result of the original data.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. An apparatus, comprising:<claim-text>one or more processors; and</claim-text><claim-text>a storage apparatus, configured to store one or more programs, wherein when the one or more programs are executed by the one or more processors, the one or more processors implement the decoding method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A non-transitory storage medium, wherein a computer program is stored in the storage medium, and when executed by a processor, the computer program implements the decoding method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. An apparatus, comprising:<claim-text>one or more processors; and</claim-text><claim-text>a storage apparatus, configured to store one or more programs, wherein when the one or more programs are executed by the one or more processors, the one or more processors implement the decoding method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. An apparatus, comprising:<claim-text>one or more processors; and</claim-text><claim-text>a storage apparatus, configured to store one or more programs, wherein when the one or more programs are executed by the one or more processors, the one or more processors implement the decoding method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. An apparatus, comprising:<claim-text>one or more processors; and</claim-text><claim-text>a storage apparatus, configured to store one or more programs, wherein when the one or more programs are executed by the one or more processors, the one or more processors implement the decoding method according to <claim-ref idref="CLM-00003">claim 3</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. An apparatus, comprising:<claim-text>one or more processors; and</claim-text><claim-text>a storage apparatus, configured to store one or more programs, wherein when the one or more programs are executed by the one or more processors, the one or more processors implement the decoding method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. An apparatus, comprising:<claim-text>one or more processors; and</claim-text><claim-text>a storage apparatus, configured to store one or more programs, wherein when the one or more programs are executed by the one or more processors, the one or more processors implement the decoding method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. An apparatus, comprising:<claim-text>one or more processors; and</claim-text><claim-text>a storage apparatus, configured to store one or more programs, wherein</claim-text><claim-text>when the one or more programs are executed by the one or more processors, the one or more processors implement the decoding method according to <claim-ref idref="CLM-00006">claim 6</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. An apparatus, comprising:<claim-text>one or more processors; and</claim-text><claim-text>a storage apparatus, configured to store one or more programs, wherein when the one or more programs are executed by the one or more processors, the one or more processors implement the decoding method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. A non-transitory storage medium, wherein a computer program is stored in the storage medium, and when executed by a processor, the computer program implements the decoding method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A non-transitory storage medium, wherein a computer program is stored in the storage medium, and when executed by a processor, the computer program implements the decoding method according to <claim-ref idref="CLM-00003">claim 3</claim-ref>.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A non-transitory storage medium, wherein a computer program is stored in the storage medium, and when executed by a processor, the computer program implements the decoding method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>.</claim-text></claim></claims></us-patent-application>