<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006894A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006894</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17930959</doc-number><date>20220909</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>22</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>34</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>30</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0484</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1097</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>22</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>3476</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>3034</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0484</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1097</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>324</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Emulating A Local Interface To A Remotely Managed Storage System</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17244698</doc-number><date>20210429</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11444849</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17930959</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16199889</doc-number><date>20181126</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10999157</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17244698</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>14504945</doc-number><date>20141002</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10164841</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16199889</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>PURE STORAGE, INC.</orgname><address><city>MOUNTAIN VIEW</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>COLGROVE</last-name><first-name>JOHN</first-name><address><city>LOS ALTOS</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>BOROWIEC</last-name><first-name>BENJAMIN</first-name><address><city>SAN JOSE</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>HASBANI</last-name><first-name>JOSEPH S.</first-name><address><city>PALO ALTO</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>NOIK</last-name><first-name>EMANUEL G.</first-name><address><city>PALO ALTO</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Systems, methods, and computer readable storage mediums for emulating a local interface to a remotely managed storage system, including: receiving a request for remote access a storage system, wherein access is provided using a user interface (&#x2018;UI&#x2019;); identifying, for a user profile, a version of the UI that is utilized when locally accessing the storage system; and presenting, a remote UI for the storage system, wherein a version of the remote UI matches the version of the UI that is utilized when the user locally accesses the storage system, wherein the remote UI provides read-only access to the storage system.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="108.80mm" wi="158.75mm" file="US20230006894A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="205.82mm" wi="156.38mm" orientation="landscape" file="US20230006894A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="220.98mm" wi="152.48mm" orientation="landscape" file="US20230006894A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="214.97mm" wi="153.16mm" orientation="landscape" file="US20230006894A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="214.97mm" wi="159.09mm" orientation="landscape" file="US20230006894A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="236.56mm" wi="143.09mm" orientation="landscape" file="US20230006894A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="223.18mm" wi="150.79mm" orientation="landscape" file="US20230006894A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="232.41mm" wi="110.91mm" file="US20230006894A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="239.52mm" wi="154.60mm" file="US20230006894A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="236.14mm" wi="100.33mm" file="US20230006894A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This is a continuation application for patent entitled to a filing date and claiming the benefit of earlier-filed U.S. Pat. No. 11,444,849, issued Sep. 13, 2022, herein incorporated by reference in its entirety, which is a continuation of U.S. Pat. No. 10,999,157, issued May 4, 2021, which is a continuation of U.S. Pat. No. 10,164,841, issued Dec. 25, 2018.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><heading id="h-0003" level="1">Technical Field</heading><p id="p-0003" num="0002">Embodiments described herein relate to storage systems, and more particularly, to techniques for generating a read-only GUI for a storage system via a cloud-based assist service.</p><heading id="h-0004" level="1">Description of the Related Art</heading><p id="p-0004" num="0003">As computer memory storage and data bandwidth increase, so does the amount and complexity of data that businesses daily manage. Large-scale distributed storage systems, such as data centers, typically run many business operations. A distributed storage system may be coupled to client computers interconnected by one or more networks. To manage and store ever increasing amounts of data, storage systems tend to grow in size and complexity over time. Due to the expanding nature of data and increasing complexity of storage systems, managing storage environments can be a difficult and complex task.</p><heading id="h-0005" level="1">SUMMARY</heading><p id="p-0005" num="0004">Various embodiments of systems and methods for using cloud-assist logic to generate a read-only GUI of the status of a storage system.</p><p id="p-0006" num="0005">In one embodiment, a storage system may comprise one or more storage subsystems (e.g., storage arrays), and the storage system may be coupled to a cloud-assist service. The storage subsystems may be configured to generate log data and phone home the log data on a periodic basis to the cloud-assist service. The cloud-assist service may be configured to save the log data and then accept a login from a customer or administrator to generate a read-only GUI which allows the user to view the status of the storage subsystem as if they were directly connected to the storage subsystem. The read-only GUI allows the user to view the status of the storage subsystem even if the storage subsystem is offline, malfunctioning, or otherwise unavailable.</p><p id="p-0007" num="0006">The first storage subsystem may be configured to generate a local GUI to allow users to view the status of the first storage subsystem when directly connected to the first storage subsystem. In one embodiment, configuration and performance data used to present the GUI locally on the first storage subsystem for a local administrator may be sent to the cloud-assist service. In one embodiment, the cloud-assist service may be configured to create the read-only GUI by simulating the responses for configuration and performance data which the first storage subsystem would normally generate for the local GUI. The cloud-assist service may simulate the responses using the configuration and performance data received as log data from the first storage subsystem.</p><p id="p-0008" num="0007">In one embodiment, if an administrator of the first storage subsystem is off-site, instead of logging in through their organization's firewall to the first storage subsystem, the administrator can login to the cloud-assist service to view the read-only GUI showing the status of the first storage subsystem. The read-only GUI may have the same appearance the administrator is accustomed to seeing when they login to the local GUI of the first storage subsystem. The read-only GUI may also recreate previous points in time if the administrator desires to see a historical view of the status of the first storage subsystem.</p><p id="p-0009" num="0008">These and other embodiments will become apparent upon consideration of the following description and accompanying drawings.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a generalized block diagram illustrating one embodiment of a storage system coupled to cloud assist logic.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a generalized block diagram illustrating one embodiment of a storage system.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates one embodiment of a local GUI for managing a storage system.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates one embodiment of a read-only GUI of the status of a storage system.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a generalized block diagram illustrating one embodiment of a cloud assist service processing storage subsystem logs.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates three examples of log data generated by a storage system.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a generalized flow diagram illustrating one embodiment of a method for enabling users to access a read-only GUI of a storage subsystem.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a generalized flow diagram illustrating one embodiment of a method for generating a read-only GUI of a storage subsystem.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a generalized flow diagram illustrating one embodiment of a method for generating a read-only GUI of a storage subsystem with a familiar interface.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0019" num="0018">While the methods and mechanisms described herein are susceptible to various modifications and alternative forms, specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that drawings and detailed description thereto are not intended to limit the methods and mechanisms to the particular form disclosed, but on the contrary, are intended to cover all modifications, equivalents and alternatives apparent to those skilled in the art once the disclosure is fully appreciated.</p><heading id="h-0007" level="1">DETAILED DESCRIPTION</heading><p id="p-0020" num="0019">In the following description, numerous specific details are set forth to provide a thorough understanding of the methods and mechanisms presented herein. However, one having ordinary skill in the art should recognize that the various embodiments may be practiced without these specific details. In some instances, well-known structures, components, signals, computer program instructions, and techniques have not been shown in detail to avoid obscuring the approaches described herein. It will be appreciated that for simplicity and clarity of illustration, elements shown in the figures have not necessarily been drawn to scale. For example, the dimensions of some of the elements may be exaggerated relative to other elements.</p><p id="p-0021" num="0020">This specification includes references to &#x201c;one embodiment&#x201d;. The appearance of the phrase &#x201c;in one embodiment&#x201d; in different contexts does not necessarily refer to the same embodiment. Particular features, structures, or characteristics may be combined in any suitable manner consistent with this disclosure. Furthermore, as used throughout this application, the word &#x201c;may&#x201d; is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words &#x201c;include&#x201d;, &#x201c;including&#x201d;, and &#x201c;includes&#x201d; mean including, but not limited to.</p><p id="p-0022" num="0021">Terminology. The following paragraphs provide definitions and/or context for terms found in this disclosure (including the appended claims):</p><p id="p-0023" num="0022">&#x201c;Comprising.&#x201d; This term is open-ended. As used in the appended claims, this term does not foreclose additional structure or steps. Consider a claim that recites: &#x201c;A system comprising a first storage subsystem . . . &#x201d; Such a claim does not foreclose the system from including additional components (e.g., a network, a server, a display device).</p><p id="p-0024" num="0023">&#x201c;Configured To.&#x201d; Various units, circuits, or other components may be described or claimed as &#x201c;configured to&#x201d; perform a task or tasks. In such contexts, &#x201c;configured to&#x201d; is used to connote structure by indicating that the units/circuits/components include structure (e.g., circuitry) that performs the task or tasks during operation. As such, the unit/circuit/component can be said to be configured to perform the task even when the specified unit/circuit/component is not currently operational (e.g., is not on). The units/circuits/components used with the &#x201c;configured to&#x201d; language include hardware&#x2014;for example, circuits, memory storing program instructions executable to implement the operation, etc. Reciting that a unit/circuit/component is &#x201c;configured to&#x201d; perform one or more tasks is expressly intended not to invoke 35 U.S.C. &#xa7; 112, paragraph (f), for that unit/circuit/component. Additionally, &#x201c;configured to&#x201d; can include generic structure (e.g., generic circuitry) that is manipulated by software and/or firmware (e.g., an FPGA or a general-purpose processor executing software) to operate in a manner that is capable of performing the task(s) at issue. &#x201c;Configured to&#x201d; may also include adapting a manufacturing process (e.g., a semiconductor fabrication facility) to fabricate devices (e.g., integrated circuits) that are adapted to implement or perform one or more tasks.</p><p id="p-0025" num="0024">&#x201c;Based On.&#x201d; As used herein, this term is used to describe one or more factors that affect a determination. This term does not foreclose additional factors that may affect a determination. That is, a determination may be solely based on those factors or based, at least in part, on those factors. Consider the phrase &#x201c;determine A based on B.&#x201d; While B may be a factor that affects the determination of A, such a phrase does not foreclose the determination of A from also being based on C. In other instances, A may be determined based solely on B.</p><p id="p-0026" num="0025">Referring now to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a generalized block diagram of one embodiment of a storage system coupled to cloud assist logic is shown. Storage system <b>105</b> may be coupled to cloud assist logic <b>110</b> via network <b>130</b>. Storage system <b>105</b> may be configured to generate log data with information associated with the performance and status of storage system <b>105</b>, and storage system <b>105</b> may be configured to convey the log data to cloud assist logic <b>110</b> on a regularly scheduled basis. Alternatively, storage system <b>105</b> may be configured to convey the log data to cloud assist logic <b>110</b> when an local administrator or other local user initiates the transfer of log data. In another embodiment, cloud assist logic <b>110</b> may be configured to request the log data from storage system <b>105</b>.</p><p id="p-0027" num="0026">In various embodiments, storage system <b>105</b> may include any number of storage controllers and any number of storage devices. Storage system <b>105</b> may be any type of storage system depending on the embodiment. For example, in one embodiment, storage system <b>105</b> may be a storage array. The storage array may utilize different types of storage device technology, depending on the embodiment. For example, in one embodiment, the storage array may utilize flash (or solid-state) storage devices and may be an all-flash storage array. In other embodiments, the storage array may utilize other types of storage device technology. It is noted that storage system <b>105</b> may also be referred to as a storage subsystem.</p><p id="p-0028" num="0027">In various embodiments, cloud assist logic <b>110</b> may include program instructions which when executed by a processor are configured to generate a read-only GUI of the status of storage system <b>105</b>. Cloud assist logic <b>110</b> may be configured to execute on a server, computer, or other computing device to perform the functions described herein. In some embodiments, cloud assist logic <b>110</b> may include hardware and/or control logic configured to perform the functions and tasks described herein. For example, cloud assist logic <b>110</b> may be implemented using any combination of dedicated hardware (e.g., application specific integrated circuit (ASIC)), configurable hardware (e.g., field programmable gate array (FPGA)), and/or software (e.g., program instructions) executing on one or more processors. It is noted that cloud assist logic <b>110</b> may also be referred to as cloud-based logic <b>110</b> or cloud assist service <b>110</b>.</p><p id="p-0029" num="0028">In one embodiment, cloud assist logic <b>110</b> may execute within a cloud computing platform provided by a web services provider (e.g., Amazon). The cloud computing platform may provide large amounts of computing assets and storage availability to cloud assist logic <b>110</b>. In another embodiment, cloud assist logic <b>110</b> may execute on a separate system or network external to the local network of storage system <b>105</b>.</p><p id="p-0030" num="0029">Storage system <b>105</b> may be configured to generate a local graphical user interface (GUI) <b>135</b> to allow a local administrator or other users to view the status of storage system <b>105</b> and to manage the performance of storage system <b>105</b>. In one embodiment, the log data generated by storage system <b>105</b> may be repurposed by cloud assist logic <b>110</b> to create read-only GUI <b>140</b> to allow a remote administrator or other user who is not able to login directly to storage system <b>105</b> to view the status of storage system <b>105</b> in the same familiar GUI presented locally on local GUI <b>135</b>. For example, a user may be travelling or off-site and may not have local access to storage system <b>105</b>. In some cases, the user may not wish to login through the local network of storage system <b>105</b> for a variety of reasons. For example, the user may be on an insecure network or insecure device and may not wish to compromise the security of storage system <b>105</b>. Therefore, the user may login to cloud assist logic <b>110</b> via network <b>120</b> to allow the user to view the read-only GUI <b>140</b> generated from the log data retrieved from storage system <b>105</b>.</p><p id="p-0031" num="0030">Turning now to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, a generalized block diagram of one embodiment of a storage system <b>200</b> is shown. Storage system <b>200</b> may include storage array <b>205</b>, clients <b>215</b> and <b>225</b>, network <b>220</b>, and cloud assist logic <b>250</b>. Storage array <b>205</b> may include storage controller <b>210</b> and storage device groups <b>230</b> and <b>240</b>, which are representative of any number of storage device groups. As shown, storage device group <b>230</b> includes storage devices <b>235</b>A-N, which are representative of any number and type of storage devices (e.g., solid-state drives (SSDs)). It should be understood that while storage system <b>200</b> is shown as including one storage array, in other embodiments, storage system <b>200</b> may include a plurality of storage arrays. It is noted that storage array <b>205</b> may also be referred to as a storage subsystem or a storage system.</p><p id="p-0032" num="0031">Storage array <b>205</b> may be configured to generate performance data and send the performance data to cloud assist logic <b>250</b>. Cloud assist logic <b>250</b> may be configured to generate a read-only GUI from the received performance data to allow users to remotely login and view the status of storage array <b>205</b>. The read-only GUI may have the same or a substantially similar view as the local GUI which storage array <b>205</b> generates for local users to manage storage array <b>205</b>.</p><p id="p-0033" num="0032">Storage controller <b>210</b> of storage array <b>205</b> may be coupled directly to client computer system <b>225</b>, and storage controller <b>210</b> may be coupled remotely over network <b>220</b> to client computer system <b>215</b>. Clients <b>215</b> and <b>225</b> are representative of any number of clients which may utilize storage system <b>200</b> for storing and accessing data. It is noted that some systems may include only a single client, connected directly or remotely to storage controller <b>210</b>. It is also noted that storage array <b>205</b> may include more than one storage controller in some embodiments.</p><p id="p-0034" num="0033">Storage controller <b>210</b> may include software and/or hardware configured to provide access to storage devices <b>235</b>A-N. Although storage controller <b>210</b> is shown as being separate from storage device groups <b>230</b> and <b>240</b>, in some embodiments, storage controller <b>210</b> may be located within one or each of storage device groups <b>230</b> and <b>240</b>. Storage controller <b>210</b> may include or be coupled to a base operating system (OS), a volume manager, and additional control logic for implementing the various techniques disclosed herein.</p><p id="p-0035" num="0034">Storage controller <b>210</b> may include and/or execute on any number of processors and may include and/or execute on a single host computing device or be spread across multiple host computing devices, depending on the embodiment. In some embodiments, storage controller <b>210</b> may generally include or execute on one or more file servers and/or block servers. Storage controller <b>210</b> may use any of various techniques for replicating data across devices <b>235</b>A-N to prevent loss of data due to the failure of a device or the failure of storage locations within a device. Storage controller <b>210</b> may also utilize any of various deduplication and/or compression techniques for reducing the amount of data stored in devices <b>235</b>A-N.</p><p id="p-0036" num="0035">Network <b>220</b> may utilize a variety of techniques including wireless connection, direct local area network (LAN) connections, wide area network (WAN) connections such as the Internet, a router, storage area network, Ethernet, and others. Network <b>220</b> may further include remote direct memory access (RDMA) hardware and/or software, transmission control protocol/internet protocol (TCP/IP) hardware and/or software, router, repeaters, switches, grids, and/or others. Protocols such as Fibre Channel, Fibre Channel over Ethernet (FCoE), iSCSI, and so forth may be used in network <b>220</b>. The network <b>220</b> may interface with a set of communications protocols used for the Internet such as the Transmission Control Protocol (TCP) and the Internet Protocol (IP), or TCP/IP.</p><p id="p-0037" num="0036">Client computer systems <b>215</b> and <b>225</b> are representative of any number of stationary or mobile computers such as desktop personal computers (PCs), servers, server farms, workstations, laptops, handheld computers, servers, personal digital assistants (PDAs), smart phones, and so forth. Generally speaking, client computer systems <b>215</b> and <b>225</b> include one or more processors comprising one or more processor cores. Each processor core includes circuitry for executing instructions according to a predefined general-purpose instruction set. For example, the x86 instruction set architecture may be selected. Alternatively, the ARM&#xae;, Alpha&#xae;, PowerPC&#xae;, SPARC&#xae;, or any other general-purpose instruction set architecture may be selected. The processor cores may access cache memory subsystems for data and computer program instructions. The cache subsystems may be coupled to a memory hierarchy comprising random access memory (RAM) and a storage device.</p><p id="p-0038" num="0037">It is noted that in alternative embodiments, the number and type of storage arrays, client computers, storage controllers, networks, storage device groups, and data storage devices is not limited to those shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. At various times one or more clients may operate offline. In addition, during operation, individual client computer connection types may change as users connect, disconnect, and reconnect to system <b>200</b>. Furthermore, the systems and methods described herein may be applied to directly attached storage systems or network attached storage systems and may include a host operating system configured to perform one or more aspects of the described methods. Numerous such alternatives are possible and are contemplated.</p><p id="p-0039" num="0038">Referring now to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, one embodiment of a local GUI for managing a storage system is shown. The GUI may be generated locally by the storage system for directly connected users or for remote users to login to and view the GUI from outside the network of the storage system. The GUI may have multiple tabs as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. For example, the dashboard tab is selected in the view shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The user may also be able to select other tabs as well, including a storage tab, analysis tab, system tab, and messages tab. By selecting these tabs, the user may change the view of what is shown in the GUI.</p><p id="p-0040" num="0039">On the left side of the dashboard, recent alerts may be listed. In the center of the dashboard, the capacity of the storage system may be listed, with the provisioned storage listed as 74.00 terabytes (TB). The total reduction of data due to compression and deduplication is also listed in the capacity view as 9.3 to 1. The total reduction of data may vary depending on the type of data being stored and the amount of compression and deduplication that can be achieved. Also, the data reduction is listed as 3.5 to 1 in the capacity section of the GUI. Additionally, the amount of storage space currently being utilized by the storage system is shown to the right of the data reduction value, with the current utilization listed as &#x201c;61% full&#x201d;.</p><p id="p-0041" num="0040">A horizontal graph showing the utilization of storage capacity may also be shown in the GUI. The capacity utilized for system data, shared space, volumes, snapshots, and empty space are shown in the GUI. In other embodiments, this information may be displayed using a bar graph, pie chart, a line graph, or any of various other types of charts.</p><p id="p-0042" num="0041">The storage system GUI also displays timeline charts of latency, input/output operations per second (IOPS), and bandwidth. A tool at the bottom of the GUI allows the user to select the range of these timeline charts and to zoom in or out. In the top right of the GUI, the user may enter in the names of hosts or volumes to search for, with the GUI returning the corresponding results depending on the user's search query.</p><p id="p-0043" num="0042">It should be understood that the local storage system GUI shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> is merely one example of a local GUI which may be used to monitor the status and manage the operations of one or more storage systems. It is noted that in other embodiments, the local storage system GUI may display other information and/or exclude some of the information shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Additionally, in other embodiments, the local storage system GUI may be organized differently and may use other types of charts and graphs to display information to the user. For example, in another embodiment, a command line interface (CLI) may be utilized rather than a GUI, with the user issuing commands to the local storage system via the CLI. In a further embodiment, the local storage system may support both a CLI and a GUI.</p><p id="p-0044" num="0043">Turning now to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, one embodiment of a read-only GUI is shown. The read-only GUI shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> has an almost identical appearance as the local GUI shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. However, one difference in the view of the GUI shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> is the indication <b>405</b> which specifies that this is a read-only GUI version. This indication <b>405</b> is not an essential part of the read-only GUI and may be omitted in some embodiments. Another difference between the read-only version of the GUI and the local version of the GUI is tab <b>410</b> for selecting historical views of the storage system status. When selecting this tab <b>410</b>, the user may specify a point in time at which they wish to view the status of the storage system.</p><p id="p-0045" num="0044">The advantages of the read-only GUI are that a user may monitor the status of a storage system without impacting the security of the storage system. For example, if the user is on an insecure network, the user may login to the cloud assist service without compromising the security of the storage system. Similarly, if the user is on a device which the user does not trust, the user can still access the read-only GUI to view the status of the storage system.</p><p id="p-0046" num="0045">In one embodiment, all the configuration and performance data which is used to generate the local GUI at the storage system may be recorded and conveyed to the cloud assist service. Then this stored data may be utilized by the cloud assist service to create the read-only GUI. This allows a user to view the status of the storage system without having to connect directly to the storage system. There may be a slight lag in time where the read-only GUI is showing the state of the storage system as of the most recently received log data.</p><p id="p-0047" num="0046">The read-only GUI will appear to the user to be the same as the local GUI, albeit with some slight differences. The main difference is that the user will not be able to make any changes to the storage system. For example, actions that the user is accustomed to being able to perform on the local GUI, such as creating a new host or deleting a volume, will be unavailable via the read-only GUI. However, the status information and performance data will be available and presented in the same manner on the read-only GUI as is presented on the local GUI.</p><p id="p-0048" num="0047">Referring now to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, a block diagram of one embodiment of a cloud assist service processing storage subsystem logs is shown. Logs generated by the storage subsystems (not shown) may traverse load balancers <b>505</b> and then may be conveyed to phone home servers <b>510</b>. The logs may be saved and queued for background processing in log storage <b>515</b> and work queue <b>520</b>. Every log in work queue <b>520</b> may trigger a playback processing task via worker virtual machines (VMs) <b>530</b>. Additionally, diagnostics generated by the storage subsystems may be saved and queued for background processing in diagnostics table <b>525</b> and work queue <b>520</b>. The worker VMs <b>530</b> may update the dashboard tables <b>540</b> during playback processing. The dashboard server <b>550</b> may pull the most recent data from dashboard tables <b>540</b>.</p><p id="p-0049" num="0048">The worker VMs <b>530</b> may retrieve Structured Query Language (SQL) logs from log storage <b>515</b> and apply the SQL logs to playback tables <b>535</b>. Playback server <b>545</b> may be configured to load playback remote procedure calls (RPC) requests and query log storage <b>515</b> for the corresponding RPC responses. Playback server <b>545</b> may include GUI server <b>555</b> and fake RPC server <b>560</b>. In one embodiment, GUI server <b>555</b> and fake RPC server <b>560</b> may be scripts or programs executing on the cloud assist service. It is noted that in other embodiments, other types of requests and responses, besides RPC requests and responses, may be utilized to query the state of the storage subsystems. For example, in another embodiment, representational state transfer (REST) requests and responses may be utilized rather than RPC requests and responses.</p><p id="p-0050" num="0049">In one embodiment, a storage subsystem may be configured to record and phone home different types of log files. The first type of log file may be a full SQL database dump, which may be performed initially and then on a regularly scheduled basis. A second type of log file which may be utilized is an incremental SQL file, and these may be generated and conveyed to the cloud assist service on a more frequent basis than the full SQL database dump. These first two types of log files may include historical capacity and performance data. The storage subsystem may maintain multiple separate tables for performance data, capacity utilization, volume data, and other information, and when these tables are updated, corresponding log files may also be sent to the cloud assist service. These tables may be used to drive the historical graphs (for IOPS, bandwidth, latency, etc.) in the local GUI. The cloud assist service may also maintain corresponding tables for each storage subsystem, and the GUI server <b>555</b> may access these tables for generating the read-only GUI. A third type of log file which may be utilized is a listing of remote procedure call (RPC) requests and responses, which may be in a serialized python object (or pickle) format. In other embodiments, alternative types of formats may be utilized.</p><p id="p-0051" num="0050">In one embodiment, each storage subsystem may execute a script which generates a plurality of RPC requests and records the corresponding responses generated by the storage subsystem. The script may use the same RPC requests that the local GUI makes in order to generate the different types of views and data shown in the local GUI. For each request made, a key may be stored and the response to the request may be recorded as the corresponding value. Once all of the RPC requests have been made and the responses recorded, the listing of key-value pairs may be sent to the cloud assist service. In one embodiment, the listing may identify volumes and hosts on the storage subsystem as well as additional information. These listings may be generated on a periodic basis (e.g., hourly, daily). In one embodiment, the listing may be stored as a serialized python object (or pickle) format file. In other embodiments, alternative types of formats may be utilized.</p><p id="p-0052" num="0051">To perform GUI playback for a given storage subsystem, the SQL log files may be processed to update the tables corresponding to the given storage subsystem in playback tables <b>535</b>. In some cases, preprocessing may be performed so that the logs may be processed more efficiently. In one embodiment, there may be one database created per storage subsystem. GUI server <b>555</b> may access the database to generate the historical capacity and performance data for the read-only GUI generated during GUI playback. GUI server <b>555</b> may also generate RPC requests for conveyance to the actual storage subsystem. However, instead of sending the RPC requests to the storage subsystem, the RPC requests may be redirected to fake RPC server <b>560</b>. Fake RPC server <b>560</b> may be configured to accept requests from GUI server <b>555</b> and to lookup responses from the most recently recorded RPC request-response listing for the given storage subsystem. The fake RPC server <b>560</b> may also be referred to as a &#x201c;subsystem simulator&#x201d;. When GUIs are run in playback mode, an extra RPC argument with the storage subsystem identifier (ID) may be sent to the fake RPC server <b>560</b>. The fake RPC server <b>560</b> may find the appropriate listing using the storage subsystem ID and may look up responses using the storage subsystem ID and a key, which may be the sorted request in JavaScript Object Notation (JSON).</p><p id="p-0053" num="0052">The fake RPC server <b>560</b> may communicate with the GUI server <b>555</b> as if the fake RPC server <b>560</b> were the selected storage subsystem. In other words, when GUI server <b>555</b> receives a response from fake RPC server <b>560</b>, GUI server <b>555</b> treats the response as if it came from the selected storage subsystem. Accordingly, the fake RPC server <b>560</b> responds as if it were the selected storage subsystem when receiving requests from the GUI server <b>555</b>. When the fake RPC server <b>560</b> receives a RPC request from the GUI server <b>555</b>, the fake RPC server <b>560</b> may look up the RPC request-response listing for the selected storage subsystem, find the key that corresponds to the received request, and return the value from the key-value pair in the listing. The GUI server <b>555</b> receives the response as if it came from the actual storage subsystem and then the GUI server <b>555</b> continues with additional requests or processes the responses to generate the read-only GUI.</p><p id="p-0054" num="0053">For example, in one embodiment, a sample GUI RPC request may be the following: &#x2018;volumelist({&#x201c;user&#x201d;:&#x201c;api&#x201d;}, &#x201c;123-456-7890&#x201d;)&#x2019;. The fake RPC server 560 may look up the latest pickle file for the storage subsystem ID: &#x201c;123-456-7890&#x201d;. The fake RPC server <b>560</b> may load the pickle file and cache it. Then, the fake RPC server <b>560</b> may remove the &#x201c;user&#x201d; key from the request JSON and lookup and return the response for &#x2018;volumelist({&#x2003;})&#x2019;. Another example of a RPC request is the following: &#x2018;volumelist({&#x201c;pending&#x201d;:False. &#x201c;space&#x201d;:True, &#x201c;total&#x201d;:False})&#x2019;. In playback mode, the GUI server <b>555</b> may be configured to keep track of one subsystem ID per session and use the ID to connect to the appropriate database in playback tables <b>535</b>. The GUI server <b>555</b> may be configured to pass the subsystem ID when executing RPC requests. The GUI server <b>555</b> may also be configured to turn off all in-memory caching of state and run mostly stateless, disable editing controls, pretend that the current time is the last recorded time of the subsystem being viewed, and turn off polling for page refreshes.</p><p id="p-0055" num="0054">In one embodiment, multiple GUI servers may be hosted by the cloud assist service, with each GUI server handling a range of storage subsystem GUI versions. Versions of every supported GUI server may be automatically downloaded and installed on instances with the playback role. When clicking on a GUI link, the launch script may pick the appropriate server to redirect to. In this way, the simulated playback GUI generated by the cloud assist service will match the local GUI generated by the storage subsystem.</p><p id="p-0056" num="0055">For example, if a first storage array has version 3 of the GUI, and a second storage array has version 4 of the GUI, then the GUI server utilized in the cloud assist service for the first storage array will be version 3, and the GUI server utilized for the second storage array will be version <b>4</b>. This prevents errors or other unintended consequences if mismatched GUI versions are paired up between the storage array and the cloud assist service. For example, version 4 of the GUI may show information that is not available (e.g., replication events) in version 3 of the GUI, and this information may be obtained from RPC responses to new RPC requests that were not included in version 3. If the first storage array uses a version 3 based script to generate the RPC request-response listing, this script will not generate the new RPC requests and will not have the corresponding responses. This listing will be stored with the cloud assist service, and if the cloud assist service were to use version 4 of the simulated playback GUI for the first storage array, then the simulated playback GUI would not be able to display the information about the replication events since this information was not captured by the script executing on the first storage array.</p><p id="p-0057" num="0056">Turning now to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, three examples of log data generated by a storage system are shown. Log data <b>600</b> is one example of log data which may be generated by a storage system and conveyed to cloud assist logic. Log data <b>600</b> may be captured over a programmable period of time and then sent to the cloud assist logic. Log data <b>600</b> may include values and metrics that can be utilized by the cloud assist logic to generate a status view in a GUI similar to the read-only GUI shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0058" num="0057">In one embodiment, log data <b>600</b> may include fields including a subsystem ID, host name, storage device count, host count, volume count, queue depth, read bandwidth (BW), read IOPS, read latency, write BW, write IOPS, write latency, and one or more other fields. In other embodiments, log data <b>600</b> may include other information and/or may be structured differently.</p><p id="p-0059" num="0058">Log data <b>605</b> is another example of log data which may be generated by a storage system and conveyed to cloud assist logic. In one embodiment, log data <b>605</b> may be automatically generated on a scheduled basis and sent to the cloud assist logic. In other embodiments, log data <b>605</b> may be manually generated by a user or the user may determine when log data <b>605</b> is generated and conveyed to the cloud assist logic.</p><p id="p-0060" num="0059">Log data <b>605</b> may include a code to identify which type of data it represents and a time stamp to identify when the data was generated. Log data <b>605</b> may also include latency data, IOPS, and bandwidth values that were captured during the most recent time period. Log data <b>605</b> may also include storage capacity utilization metrics, such as the amount of storage space utilized by system, shared space, volumes, and snapshots. In other embodiments, other storage capacity utilization metrics in addition to the above may be utilized. Log data <b>605</b> may also include one or more additional data fields.</p><p id="p-0061" num="0060">Log data <b>610</b> is another type of log data which may be sent from a storage system to the cloud assist logic. In one embodiment, the storage system may alternate between sending log data <b>600</b>, <b>605</b>, and <b>610</b> to the cloud assist logic, with the code field or subsystem ID indicating which type of packet is being sent. Other types of log data not shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> may also be sent, with these other types of log data being indicated by different codes.</p><p id="p-0062" num="0061">Log data <b>610</b> includes a code field followed by a transaction number of status ID field. Next, log data <b>610</b> may include a sequence number to indicate the most recently used sequence number. Alternatively, the sequence number field may specify a range of sequence numbers that were used over a recent period of time. Next, log data <b>610</b> may include a text descriptor field. The text descriptor field may be automatically generated text or this field may include comments inserted manually by an administrator or other user. Log data <b>610</b> may also include one or more additional data fields.</p><p id="p-0063" num="0062">The size of log data <b>605</b> and <b>610</b> may vary depending on the embodiment. In one embodiment, the log data may have a fixed size. In another embodiment, the log data may have a variable size, with the size of the data indicated in one of the data fields. In other embodiments, the log data may have a variable size which is not specified within any of the data fields. It is noted that in other embodiments, other types of log data may be captured and sent from one or more storage systems to the cloud assist logic.</p><p id="p-0064" num="0063">Referring now to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, one embodiment of a method <b>700</b> for enabling users to access a read-only GUI of a storage subsystem is shown. Any of the cloud assist services or cloud assist logic units described herein in combination with a storage controller (e.g., storage controller <b>210</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>) may generally operate in accordance with method <b>700</b>. In addition, the steps in this embodiment are shown in sequential order. However, some steps may occur in a different order than shown, some steps may be performed concurrently, some steps may be combined with other steps, and some steps may be absent in another embodiment.</p><p id="p-0065" num="0064">A first storage subsystem may generate and send log data to a cloud assist service (block <b>705</b>). The log data may include diagnostics and performance data associated with various operating conditions of the first storage subsystem. In one embodiment, the first storage subsystem may be a storage array. In some embodiments, the first storage subsystem may be coupled to one or more other storage subsystems, and the first storage subsystem may convey log data from a plurality of storage subsystems to the cloud assist service. The cloud assist service may be configured to perform any combination of various functions for the first storage subsystem, such as storage and analysis of log data, generation of alerts, replication of data, generation of read-only GUIs, as well as other functions.</p><p id="p-0066" num="0065">The first storage subsystem may also generate a local GUI for a locally connected user (block <b>710</b>). In one embodiment, a GUI library may make RPC calls to the first storage subsystem to generate the GUI. The GUI may have a familiar interface to the user, with tabs and clickable buttons, and graphs, bars, charts indicating the current performance and status of the first storage subsystem. However, this local GUI may only be available to users directly connected to the first storage subsystem or to remote users who login to the network of the first storage subsystem.</p><p id="p-0067" num="0066">The cloud assist service may receive the log data generated by the first storage subsystem (block <b>715</b>). Then, the cloud assist service may generate a read-only GUI from the log data (block <b>720</b>). The cloud assist service may generate the read-only GUI to utilize a substantially similar appearance to the local GUI so that a user will be familiar with the look and feel of the read-only GUI. The cloud assist service may allow authorized users to remotely access the read-only GUI (block <b>725</b>). After block <b>725</b>, method <b>700</b> may end.</p><p id="p-0068" num="0067">Users may be able to login and view the read-only GUI to monitor the status of the first storage subsystem. A user will be able to switch views within the GUI by selecting different tabs and access menu items the same way as the user is accustomed to using as if the user were connected to the local GUI, with the exception that the user will be unable to make changes to the first storage subsystem. For example, in one embodiment, some of the actions the user may be accustomed to seeing and clicking on may be grayed out to indicate these actions cannot be performed using the read-only GUI. Also, there may be other minor differences between the local GUI and the read-only GUI.</p><p id="p-0069" num="0068">Turning now to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, one embodiment of a method <b>800</b> for generating a read-only GUI of a storage subsystem is shown. Any of the cloud assist logic units described herein in combination with a storage controller (e.g., storage controller <b>210</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>) may generally operate in accordance with method <b>800</b>. In addition, the steps in this embodiment are shown in sequential order. However, some steps may occur in a different order than shown, some steps may be performed concurrently, some steps may be combined with other steps, and some steps may be absent in another embodiment.</p><p id="p-0070" num="0069">A first storage subsystem may generate and send log files to the cloud assist logic on a periodic basis (block <b>805</b>). The log files may include database files and request-response listings. In one embodiment, the database files may include historical capacity and performance data while the request-response listings may include information regarding the objects utilized by the first storage subsystem. The cloud assist logic may receive and store the log files generated by the first storage subsystem (block <b>810</b>). In one embodiment, the cloud assist logic may maintain a database corresponding to the first storage subsystem, and the cloud assist logic may update the first storage subsystem's database using the received database files.</p><p id="p-0071" num="0070">Next, the cloud assist logic may determine if it has received a request from an authorized user to login and access the read-only GUI of the first storage subsystem (conditional block <b>815</b>). If no authorized users have requested access to the read-only GUI of the first storage subsystem (conditional block <b>815</b>, &#x201c;no&#x201d; leg), then method <b>800</b> may return to block <b>805</b> with the first storage subsystem generating additional log files.</p><p id="p-0072" num="0071">If an authorized user has requested access to the read-only GUI of the first storage subsystem (conditional block <b>815</b>, &#x201c;yes&#x201d; leg), then the cloud assist logic may launch a GUI server for generating the read-only GUI (block <b>820</b>). The GUI server may access the first storage subsystem's cloud-based database for the data (e.g., historical capacity, performance data) needed to generate the read-only GUI (block <b>825</b>). The GUI server may also generate requests which may be conveyed to a subsystem simulator (block <b>830</b>). In one embodiment, the requests may be RPC requests and the subsystem simulator may be a fake RPC server. The GUI server may generate requests with the intention of sending the requests to the first storage subsystem. However, a redirection layer may instead route the requests to the subsystem simulator.</p><p id="p-0073" num="0072">Next, the subsystem simulator may look up the most recent request-response listing stored in the cloud for the first storage subsystem (block <b>835</b>). Then, the subsystem simulator may generate corresponding responses from the listing as if the subsystem simulator were the first storage subsystem (block <b>840</b>). Then, the GUI server may utilize the responses when generating the read-only GUI (block <b>845</b>). At a later point in time, the cloud assist logic may terminate the read-only GUI session in response to detecting that the user has logged out (block <b>850</b>). After block <b>850</b>, method <b>800</b> may return to block <b>805</b> with the first storage subsystem generating additional logs.</p><p id="p-0074" num="0073">Referring now to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, one embodiment of a method <b>900</b> for generating a read-only GUI of a storage subsystem with a familiar interface is shown. Any of the cloud assist logic units described herein in combination with a storage controller (e.g., storage controller <b>210</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>) may generally operate in accordance with method <b>900</b>. In addition, the steps in this embodiment are shown in sequential order. However, some steps may occur in a different order than shown, some steps may be performed concurrently, some steps may be combined with other steps, and some steps may be absent in another embodiment.</p><p id="p-0075" num="0074">An authorized user may remotely login to cloud assist logic (block <b>905</b>). In response to the user logging in, the cloud assist logic may determine the version of the GUI which resides on the storage subsystem with which the user is associated (block <b>910</b>). Different storage subsystems may have different versions of the GUI as the GUI evolves over time, and the user may be accustomed to using the specific version of the GUI they see when they are able to login to their storage subsystem.</p><p id="p-0076" num="0075">After determining the version of the GUI which is running on the storage subsystem associated with the user, the cloud assist logic may initiate a GUI server of the same version as the user's storage subsystem (block <b>915</b>). The GUI server may access the cloud-based database corresponding to the user's storage subsystem (block <b>920</b>). Also, the GUI server may generate RPC requests and then receive the corresponding RPC responses from a fake RPC server (block <b>925</b>). Then, the GUI server may generate a read-only GUI of the user's storage subsystem using the data from the corresponding database and RPC responses (block <b>930</b>). After block <b>930</b>, method <b>900</b> may end.</p><p id="p-0077" num="0076">It is noted that the above-described embodiments may comprise software. In such an embodiment, the program instructions that implement the methods and/or mechanisms may be conveyed or stored on a non-transitory computer readable medium. Numerous types of media which are configured to store program instructions are available and include hard disks, floppy disks, CD-ROM, DVD, flash memory, Programmable ROMs (PROM), random access memory (RAM), and various other forms of volatile or non-volatile storage.</p><p id="p-0078" num="0077">In various embodiments, one or more portions of the methods and mechanisms described herein may form part of a cloud-computing environment. In such embodiments, resources may be provided over the Internet as services according to one or more various models. Such models may include Infrastructure as a Service (IaaS), Platform as a Service (PaaS), and Software as a Service (SaaS). In IaaS, computer infrastructure is delivered as a service. In such a case, the computing equipment is generally owned and operated by the service provider. In the PaaS model, software tools and underlying equipment used by developers to develop software solutions may be provided as a service and hosted by the service provider. SaaS typically includes a service provider licensing software as a service on demand. The service provider may host the software, or may deploy the software to a customer for a given period of time. Numerous combinations of the above models are possible and are contemplated.</p><p id="p-0079" num="0078">Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system comprising:<claim-text>a cloud-based system that includes a non-transitory computer readable medium and a computer processor, wherein the non-transitory computer readable medium includes computer program instructions that when executed by the computer processor cause the cloud-based system to carry out the steps of:</claim-text><claim-text>receiving a request for remote access a storage system, wherein access is provided using a user interface (&#x2018;UI&#x2019;);</claim-text><claim-text>identifying, for a user profile, a version of the UI that is utilized when locally accessing the storage system; and</claim-text><claim-text>presenting, a remote UI for the storage system, wherein a version of the remote UI matches the version of the UI that is utilized when the user locally accesses the storage system, wherein the remote UI provides read-only access to the storage system.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the non-transitory computer readable medium further includes computer program instructions that when executed by the computer processor cause the cloud-based system to carry out the steps of:<claim-text>generating, by a cloud-based system using historical status information associated with one or more storage systems, responses to a plurality of requests directed to the one or more storage systems as if the cloud-based system was the one or more storage systems associated with the historical status information; and</claim-text><claim-text>presenting, via the remote UI and using the generated responses to the plurality of requests, a historical view of a status of the one or more storage systems.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the one or more storage systems are configured to generate a local GUI presenting a view of the status of the one or more storage systems, and wherein an appearance of the remote UI is substantially similar to an appearance of the local GUI.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the non-transitory computer readable medium further includes computer program instructions that when executed by the computer processor cause the cloud-based system to carry out the step of generating, by the cloud-based system, the remote UI to match the local GUI.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the authorized user is unable to make changes to the one or more storage systems using the remote UI.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the historical status information includes at least one of volume count, queue depth, read bandwidth, read input/output operations per second (IOPS), read latency, write bandwidth, write IOPS, and write latency.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the cloud-based system is further configured to generate the GUI when the one or more storage systems is offline.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A method comprising:<claim-text>receiving a request for remote access a storage system, wherein access is provided using a user interface (&#x2018;UI&#x2019;);</claim-text><claim-text>identifying, for a user profile, a version of the UI that is utilized when locally accessing the storage system; and</claim-text><claim-text>presenting, a remote UI for the storage system, wherein a version of the remote UI matches the version of the UI that is utilized when the user locally accesses the storage system, wherein the remote UI provides read-only access to the storage system.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> further comprising:<claim-text>generating, by a cloud-based system using historical status information associated with one or more storage systems, responses to a plurality of requests directed to the one or more storage systems as if the cloud-based system was the one or more storage systems associated with the historical status information; and</claim-text><claim-text>presenting, via the remote UI and using the generated responses to the plurality of requests, a historical view of a status of the one or more storage systems.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the one or more storage systems are configured to generate a local GUI presenting a view of the status of the one or more storage systems, and wherein an appearance of the remote UI is substantially similar to an appearance of the local GUI.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> further comprising generating, by the cloud-based system, the remote UI to match the local GUI.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the authorized user is unable to make changes to the one or more storage systems using the remote UI.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the historical status information includes at least one of volume count, queue depth, read bandwidth, read input/output operations per second (IOPS), read latency, write bandwidth, write IOPS, and write latency.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the cloud-based system is further configured to generate the remote UI when the one or more storage systems is offline.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer readable storage medium storing program instructions, wherein the program instructions are executable by a processor to carry out the steps of:<claim-text>receiving a request for remote access a storage system, wherein access is provided using a user interface (&#x2018;UI&#x2019;);</claim-text><claim-text>identifying, for a user profile, a version of the UI that is utilized when locally accessing the storage system; and</claim-text><claim-text>presenting, a remote UI for the storage system, wherein a version of the remote UI matches the version of the UI that is utilized when the user locally accesses the storage system, wherein the remote UI provides read-only access to the storage system.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein the program instructions are executable by a processor to carry out the steps of:<claim-text>generating, by a cloud-based system using historical status information associated with one or more storage systems, responses to a plurality of requests directed to the one or more storage systems as if the cloud-based system was the one or more storage systems associated with the historical status information; and</claim-text><claim-text>presenting, via the remote UI and using the generated responses to the plurality of requests, a historical view of a status of the one or more storage systems.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein the one or more storage systems are configured to generate a local GUI presenting a view of the status of the one or more storage systems, and wherein an appearance of the remote UI is substantially similar to an appearance of the local GUI.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref> further comprising program instructions to carry out the step of generating, by the cloud-based system, the remote UI to match the local GUI.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein the authorized user is unable to make changes to the one or more storage systems using the remote UI.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein the historical status information includes at least one of volume count, queue depth, read bandwidth, read input/output operations per second (IOPS), read latency, write bandwidth, write IOPS, and write latency.</claim-text></claim></claims></us-patent-application>