<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004300A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004300</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17944470</doc-number><date>20220914</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>03</class><subclass>M</subclass><main-group>13</main-group><subgroup>15</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>067</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0683</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0614</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>102</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0655</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>M</subclass><main-group>13</main-group><subgroup>1515</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0644</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">System, Method, and Computer Program Product for Generating a Data Storage Server Distribution Pattern</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16531803</doc-number><date>20190805</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11481159</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17944470</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Visa International Service Association</orgname><address><city>San Francisco</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Payton</last-name><first-name>Paul Max</first-name><address><city>San Carlos</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Described are a system, method, and computer program product for generating a data storage server distribution pattern. The method includes determining a set of servers and raw data to be stored. The method also includes transforming the raw data according to an error-correcting code scheme to produce distributable data. The method further includes determining a server reliability of each server in the set of servers. The method further includes generating the data storage server distribution pattern based on maximizing a system reliability relative to maximizing a system entropy. System reliability may be based on a minimum reliability of the set of servers, and system entropy may be based on a cumulated information entropy of each server of the set of servers. The method further includes distributing the distributable data to be stored across at least two servers of the set of servers according to the data storage server distribution pattern.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="110.74mm" wi="158.75mm" file="US20230004300A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="202.01mm" wi="155.28mm" orientation="landscape" file="US20230004300A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="227.75mm" wi="154.94mm" orientation="landscape" file="US20230004300A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="227.67mm" wi="154.94mm" orientation="landscape" file="US20230004300A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="227.84mm" wi="154.94mm" orientation="landscape" file="US20230004300A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="217.17mm" wi="156.21mm" orientation="landscape" file="US20230004300A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="220.73mm" wi="167.98mm" orientation="landscape" file="US20230004300A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="203.20mm" wi="156.21mm" orientation="landscape" file="US20230004300A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation application of U.S. patent application Ser. No. 16/531,803 filed on Aug. 5, 2019, the entire disclosure of which is hereby incorporated by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><heading id="h-0003" level="1">1. Technical Field</heading><p id="p-0003" num="0002">Disclosed embodiments or aspects relate generally to networked data storage, and, in one particular embodiment or aspect, to a system, method, and computer program product for generating a data storage server distribution pattern across multiple servers.</p><heading id="h-0004" level="1">2. Technical Considerations</heading><p id="p-0004" num="0003">To increase the reliability of data backups, data may be distributed across multiple servers. However, duplicating data on multiple servers may be memory intensive and inefficient, particularly if a set of data is duplicated in full on each individual backup server. Moreover, if a backup server belongs to a third party, there is also the risk of the third party accessing the stored data, which may be a security concern. To mitigate memory inefficiencies and the risk of third party access to stored data, portions of the data may be partially on each individual server, so that the overall memory use is reduced and so that no one third party has access to all the data. However, this reduces the usefulness of the backup system,</p><p id="p-0005" num="0004">Error-correcting code schemes may be used to transform and store a portion of data in a manner that the entirety of the data can be determined, or &#x201c;reconstructed,&#x201d; from the portion alone by a central data distributor, thereby reducing memory requirements. However, such error-correcting code schemes do not provide for a method of storing the transformed data across a set of available servers, nor do they provide a motivation for creating a server distribution pattern that might further improve storage efficiencies, increase system reliability, and reduce security risks.</p><p id="p-0006" num="0005">There is a need in the art for a system and method of generating a data storage server distribution pattern, particularly one that leverages the advantages of error-correcting code schemes. There is a need for such a system and method that minimizes data storage requirements, maximizes system reliability, prevents third party reverse-engineering of data, and allows for data to be recovered and redistributed if a server of a set of servers becomes inoperative.</p><heading id="h-0005" level="1">SUMMARY</heading><p id="p-0007" num="0006">Accordingly, and generally, provided is an improved system, method, and computer program product for generating a data storage server distribution pattern. Preferably, provided is a system, method, and computer program product for determining a set of servers and raw data to be stored. Preferably, provided is a system, method, and computer program product for transforming the raw data according to an error-correcting code scheme to produce distributable data and determine a server reliability of each server in the set of servers. Preferably, provided is a system, method, and computer program product for generating the data storage server distribution pattern based on maximizing a system reliability relative to maximizing a system entropy and distributing the distributable data across at least two servers of the set of servers according to the data storage server distribution pattern.</p><p id="p-0008" num="0007">According to non-limiting embodiments or aspects, provided is a computer-implemented method for generating a data storage server distribution pattern. The method includes determining, with at least one processor, a set of servers. The method also includes determining, with at least one processor, raw data to be stored. The method further includes transforming, with at least one processor, the raw data according to an error-correcting code scheme to produce distributable data. The method further includes determining, with at least one processor, a server reliability of each server in the set of servers. The method further includes generating, with at least one processor, the data storage server distribution pattern based on maximizing a system reliability relative to maximizing a system entropy. The system reliability is determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the distributable data across the set of servers. The system entropy is determined at least partly by a cumulated information entropy of each server of the set of servers using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the distributable data. The method further includes distributing, with at least one processor, the distributable data to be stored across at least two servers of the set of servers according to the data storage server distribution pattern.</p><p id="p-0009" num="0008">In some non-limiting embodiments or aspects, the error-correcting code scheme may be a Reed-Solomon error-correcting code scheme. The number of bits in the distributable data may be at least twice a number of bits in the raw data.</p><p id="p-0010" num="0009">In some non-limiting embodiments or aspects, the data storage server distribution pattern may be generated by weighting the system reliability and the system entropy to determine a pattern of distributed bits having a maximum value for the combined system reliability and system entropy. The maximum value for the combined system reliability and system entropy may be determined by iterating over all possible partitions of the distributable data across the set of servers. The maximum value for the combined system reliability and system entropy may be determined by iterating over permutations of partitions of bit allocations to identify an optimal assignment of bits to the set of servers. The maximum value for the combined system reliability and system entropy may be determined by a genetic algorithm permuting over a random subset of partitions of the distributable data.</p><p id="p-0011" num="0010">In some non-limiting embodiments or aspects, the method may include encrypting, with at least one processor, the raw data prior to transforming the raw data according to the error-correcting code scheme to produce the distributable data.</p><p id="p-0012" num="0011">In some non-limiting embodiments or aspects, the method may include, in response to a server of the at least two servers becoming inoperative, retrieving, with at least one processor, a portion of the distributable data from at least one operative server. The method may also include determining, with at least one processor, the raw data from the portion of the distributable data using the error-correcting code scheme. The method may further include transforming, with at least one processor, the raw data according to an error-correcting code scheme to produce new distributable data. The method may further include generating, with at least one processor, a new data storage server distribution pattern based on maximizing the system reliability relative to maximizing the system entropy. The system reliability may be determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the new distributable data across the set of servers excluding the inoperative server. The system entropy may be determined at least partly by a cumulated information entropy of each server of the set of servers excluding the inoperative server using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the new distributable data. The method may further include distributing, with at least one processor, the new distributable data to be stored across at least two servers of the set of servers excluding the inoperative server according to the new data storage server distribution pattern.</p><p id="p-0013" num="0012">According to non-limiting embodiments or aspects, provided is a system for generating a data storage server distribution pattern, the system comprising a server comprising at least one processor, the server being programmed and/or configured to determine a set of servers and determine raw data to be stored. The server is also programmed and/or configured to transform the raw data according to an error-correcting code scheme to produce distributable data. The server is further programmed and/or configured to determine a server reliability of each server in the set of servers. The server is further programmed and/or configured to generate the data storage server distribution pattern based on maximizing a system reliability relative to maximizing a system entropy. The system reliability is determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the distributable data across the set of servers. The system entropy is determined at least partly by a cumulated information entropy of each server of the set of servers using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the distributable data. The server is further programmed and/or configured to distribute the distributable data to be stored across at least two servers of the set of servers according to the data storage server distribution pattern.</p><p id="p-0014" num="0013">In some non-limiting embodiments or aspects, the data storage server distribution pattern may be generated by weighting the system reliability and the system entropy to determine a pattern of distributed bits having a maximum value for the combined system reliability and system entropy.</p><p id="p-0015" num="0014">In some non-limiting embodiments or aspects, the maximum value for the combined system reliability and system entropy may be determined by a genetic algorithm permuting over a random subset of partitions of the distributable data.</p><p id="p-0016" num="0015">In some non-limiting embodiments or aspects, the server may be further programmed and/or configured to encrypt the raw data prior to transforming the raw data according to the error-correcting code scheme to produce the distributable data.</p><p id="p-0017" num="0016">In some non-limiting embodiments or aspects, the server may be further programmed and/or configured to, in response to a server of the at least two servers becoming inoperative, retrieve a portion of the distributable data from at least one operative server. The server may be further programmed and/or configured to determine the raw data from the portion of the distributable data using the error-correcting code scheme. The server may be further programmed and/or configured to transform the raw data according to an error-correcting code scheme to produce new distributable data. The server may be further programmed and/or configured to generate a new data storage server distribution pattern based on maximizing the system reliability relative to maximizing the system entropy. The system reliability may be determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the new distributable data across the set of servers excluding the inoperative server. The system entropy may be determined at least partly by a cumulated information entropy of each server of the set of servers excluding the inoperative server using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the new distributable data. The server may be further programmed and/or configured to distribute the new distributable data to be stored across at least two servers of the set of servers excluding the inoperative server according to the new data storage server distribution pattern.</p><p id="p-0018" num="0017">According to non-limiting embodiments or aspects, provided is a computer program product for generating a data storage server distribution pattern, the computer program product comprising at least one non-transitory computer-readable medium including program instructions that, when executed by at least one processor, cause the at least one processor to determine a set of servers and raw data to be stored. The program instructions also cause the at least one processor to transform the raw data according to an error-correcting code scheme to produce distributable data. The program instructions further cause the at least one processor to determine a server reliability of each server in the set of servers. The program instructions also cause the at least one processor to generate the data storage server distribution pattern based on maximizing a system reliability relative to maximizing a system entropy. The system reliability is determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the distributable data across the set of servers. The system entropy is determined at least partly by a cumulated information entropy of each server of the set of servers using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the distributable data. The program instructions further cause the at least one processor to distribute the distributable data to be stored across at least two servers of the set of servers according to the data storage server distribution pattern.</p><p id="p-0019" num="0018">In some non-limiting embodiments or aspects, the data storage server distribution pattern may be generated by weighting the system reliability and the system entropy to determine a pattern of distributed bits having a maximum value for the combined system reliability and system entropy.</p><p id="p-0020" num="0019">In some non-limiting embodiments or aspects, the maximum value for the combined system reliability and system entropy may be determined by a genetic algorithm permuting over a random subset of partitions of the distributable data.</p><p id="p-0021" num="0020">In some non-limiting embodiments or aspects, the program instructions may further cause the at least one processor to, in response to a server of the at least two servers becoming inoperative, retrieve a portion of the distributable data from at least one operative server. The program instructions may further cause the at least one processor to determine the raw data from the portion of the distributable data using the error-correcting code scheme. The program instructions may further cause the at least one processor to transform the raw data according to an error-correcting code scheme to produce new distributable data. The program instructions may further cause the at least one processor to generate a new data storage server distribution pattern based on maximizing the system reliability relative to maximizing the system entropy. The system reliability may be determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the new distributable data across the set of servers excluding the inoperative server. The system entropy may be determined at least partly by a cumulated information entropy of each server of the set of servers excluding the inoperative server using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the new distributable data. The program instructions may further cause the at least one processor to distribute the new distributable data to be stored across at least two servers of the set of servers excluding the inoperative server according to the new data storage server distribution pattern.</p><p id="p-0022" num="0021">Other non-limiting embodiments or aspects of the present disclosure will be set forth in the following numbered clauses:</p><p id="p-0023" num="0022">Clause 1: A computer-implemented method for generating a data storage server distribution pattern, the method comprising: determining, with at least one processor, a set of servers; determining, with at least one processor, raw data to be stored; transforming, with at least one processor, the raw data according to an error-correcting code scheme to produce distributable data; determining, with at least one processor, a server reliability of each server in the set of servers; generating, with at least one processor, the data storage server distribution pattern based on maximizing a system reliability relative to maximizing a system entropy, wherein the system reliability is determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the distributable data across the set of servers, and wherein the system entropy is determined at least partly by a cumulated information entropy of each server of the set of servers using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the distributable data; and distributing, with at least one processor, the distributable data to be stored across at least two servers of the set of servers according to the data storage server distribution pattern.</p><p id="p-0024" num="0023">Clause 2: The method of clause 1, wherein the error-correcting code scheme is a Reed-Solomon error-correcting code scheme and a number of bits in the distributable data is at least twice a number of bits in the raw data.</p><p id="p-0025" num="0024">Clause 3: The method of clause 1 or 2, wherein the data storage server distribution pattern is generated by weighting the system reliability and the system entropy to determine a pattern of distributed bits having a maximum value for the combined system reliability and system entropy.</p><p id="p-0026" num="0025">Clause 4: The method of any of clauses 1-3, wherein the maximum value for the combined system reliability and system entropy is determined by iterating over all possible partitions of the distributable data across the set of servers.</p><p id="p-0027" num="0026">Clause 5: The method of any of clauses 1-4, wherein the maximum value for the combined system reliability and system entropy is determined by iterating over permutations of partitions of bit allocations to identify an optimal assignment of bits to the set of servers.</p><p id="p-0028" num="0027">Clause 6: The method of any of clauses 1-5, wherein the maximum value for the combined system reliability and system entropy is determined by a genetic algorithm permuting over a random subset of partitions of the distributable data.</p><p id="p-0029" num="0028">Clause 7: The method of any of clauses 1-6, further comprising encrypting, with at least one processor, the raw data prior to transforming the raw data according to the error-correcting code scheme to produce the distributable data.</p><p id="p-0030" num="0029">Clause 8: The method of any of clauses 1-7, further comprising, in response to a server of the at least two servers becoming inoperative: retrieving, with at least one processor, a portion of the distributable data from at least one operative server; and determining, with at least one processor, the raw data from the portion of the distributable data using the error-correcting code scheme.</p><p id="p-0031" num="0030">Clause 9: The method of any of clauses 1-8, further comprising: transforming, with at least one processor, the raw data according to an error-correcting code scheme to produce new distributable data; generating, with at least one processor, a new data storage server distribution pattern based on maximizing the system reliability relative to maximizing the system entropy, wherein the system reliability is determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the new distributable data across the set of servers excluding the inoperative server, and wherein the system entropy is determined at least partly by a cumulated information entropy of each server of the set of servers excluding the inoperative server using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the new distributable data; and distributing, with at least one processor, the new distributable data to be stored across at least two servers of the set of servers excluding the inoperative server according to the new data storage server distribution pattern.</p><p id="p-0032" num="0031">Clause 10: A system for generating a data storage server distribution pattern, the system comprising a server comprising at least one processor, the server being programmed and/or configured to: determine a set of servers; determine raw data to be stored; transform the raw data according to an error-correcting code scheme to produce distributable data; determine a server reliability of each server in the set of servers; generate the data storage server distribution pattern based on maximizing a system reliability relative to maximizing a system entropy, wherein the system reliability is determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the distributable data across the set of servers, and wherein the system entropy is determined at least partly by a cumulated information entropy of each server of the set of servers using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the distributable data; and distribute the distributable data to be stored across at least two servers of the set of servers according to the data storage server distribution pattern.</p><p id="p-0033" num="0032">Clause 11: The system of clause 10, wherein the data storage server distribution pattern is generated by weighting the system reliability and the system entropy to determine a pattern of distributed bits having a maximum value for the combined system reliability and system entropy.</p><p id="p-0034" num="0033">Clause 12: The system of clause 10 or 11, wherein the maximum value for the combined system reliability and system entropy is determined by a genetic algorithm permuting over a random subset of partitions of the distributable data.</p><p id="p-0035" num="0034">Clause 13: The system of any of clauses 10-12, wherein the server is further programmed and/or configured to encrypt the raw data prior to transforming the raw data according to the error-correcting code scheme to produce the distributable data.</p><p id="p-0036" num="0035">Clause 14: The system of any of clauses 10-13, wherein the server is further programmed and/or configured to, in response to a server of the at least two servers becoming inoperative: retrieve a portion of the distributable data from at least one operative server; and determine the raw data from the portion of the distributable data using the error-correcting code scheme.</p><p id="p-0037" num="0036">Clause 15: The system of any of clauses 10-14, wherein the server is further programmed and/or configured to: transform the raw data according to an error-correcting code scheme to produce new distributable data; generate a new data storage server distribution pattern based on maximizing the system reliability relative to maximizing the system entropy, wherein the system reliability is determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the new distributable data across the set of servers excluding the inoperative server, and wherein the system entropy is determined at least partly by a cumulated information entropy of each server of the set of servers excluding the inoperative server using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the new distributable data; and distribute the new distributable data to be stored across at least two servers of the set of servers excluding the inoperative server according to the new data storage server distribution pattern.</p><p id="p-0038" num="0037">Clause 16: A computer program product for generating a data storage server distribution pattern, the computer program product comprising at least one non-transitory computer-readable medium including program instructions that, when executed by at least one processor, cause the at least one processor to: determine a set of servers; determine raw data to be stored; transform the raw data according to an error-correcting code scheme to produce distributable data; determine a server reliability of each server in the set of servers; generate the data storage server distribution pattern based on maximizing a system reliability relative to maximizing a system entropy, wherein the system reliability is determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the distributable data across the set of servers, and wherein the system entropy is determined at least partly by a cumulated information entropy of each server of the set of servers using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the distributable data; and distribute the distributable data to be stored across at least two servers of the set of servers according to the data storage server distribution pattern.</p><p id="p-0039" num="0038">Clause 17: The computer program product of clause 16, wherein the data storage server distribution pattern is generated by weighting the system reliability and the system entropy to determine a pattern of distributed bits having a maximum value for the combined system reliability and system entropy.</p><p id="p-0040" num="0039">Clause 18: The computer program product of clause 16 or 17, wherein the maximum value for the combined system reliability and system entropy is determined by a genetic algorithm permuting over a random subset of partitions of the distributable data.</p><p id="p-0041" num="0040">Clause 19: The computer program product of any of clauses 16-18, wherein the program instructions further cause the at least one processor to, in response to a server of the at least two servers becoming inoperative: retrieve a portion of the distributable data from at least one operative server; and determine the raw data from the portion of the distributable data using the error-correcting code scheme.</p><p id="p-0042" num="0041">Clause 20: The computer program product of any of clauses 16-19, wherein the program instructions further cause the at least one processor to: transform the raw data according to an error-correcting code scheme to produce new distributable data; generate a new data storage server distribution pattern based on maximizing the system reliability relative to maximizing the system entropy, wherein the system reliability is determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the new distributable data across the set of servers excluding the inoperative server, and wherein the system entropy is determined at least partly by a cumulated information entropy of each server of the set of servers excluding the inoperative server using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the new distributable data; and distribute the new distributable data to be stored across at least two servers of the set of servers excluding the inoperative server according to the new data storage server distribution pattern.</p><p id="p-0043" num="0042">These and other features and characteristics of the present disclosure, as well as the methods of operation and functions of the related elements of structures and the combination of parts and economies of manufacture, will become more apparent upon consideration of the following description and the appended claims with reference to the accompanying drawings, all of which form a part of this specification, wherein like reference numerals designate corresponding parts in the various figures. It is to be expressly understood, however, that the drawings are for the purpose of illustration and description only and are not intended as a definition of the limits of the present disclosure. As used in the specification and the claims, the singular form of &#x201c;a,&#x201d; &#x201c;an,&#x201d; and &#x201c;the&#x201d; include plural referents unless the context clearly dictates otherwise.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0044" num="0043">Additional advantages and details of the disclosure are explained in greater detail below with reference to the exemplary embodiments that are illustrated in the accompanying schematic figures, in which:</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram of one embodiment or aspect of a system and method for generating a data storage server distribution pattern;</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic diagram of one embodiment or aspect of a system and method for generating a data storage server distribution pattern;</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic diagram of one embodiment or aspect of a system and method for generating a data storage server distribution pattern;</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic diagram of one embodiment or aspect of a system and method for generating a data storage server distribution pattern;</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a process diagram of one embodiment or aspect of a system and method for generating a data storage server distribution pattern;</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a process diagram of one embodiment or aspect of a system and method for generating a data storage server distribution pattern; and</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a process diagram of one embodiment or aspect of a system and method for generating a data storage server distribution pattern.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0007" level="1">DETAILED DESCRIPTION</heading><p id="p-0052" num="0051">For purposes of the description hereinafter, the terms &#x201c;upper&#x201d;, &#x201c;lower&#x201d;, &#x201c;right&#x201d;, &#x201c;left&#x201d;, &#x201c;vertical&#x201d;, &#x201c;horizontal&#x201d;, &#x201c;top&#x201d;, &#x201c;bottom&#x201d;, &#x201c;lateral&#x201d;, &#x201c;longitudinal,&#x201d; and derivatives thereof shall relate to non-limiting embodiments as they are oriented in the drawing figures. However, it is to be understood that non-limiting embodiments may assume various alternative variations and step sequences, except where expressly specified to the contrary. It is also to be understood that the specific devices and processes illustrated in the attached drawings, and described in the following specification, are simply exemplary embodiments. Hence, specific dimensions and other physical characteristics related to the embodiments disclosed herein are not to be considered as limiting.</p><p id="p-0053" num="0052">No aspect, component, element, structure, act, step, function, instruction, and/or the like used herein should be construed as critical or essential unless explicitly described as such. Also, as used herein, the articles &#x201c;a&#x201d; and &#x201c;an&#x201d; are intended to include one or more items and may be used interchangeably with &#x201c;one or more&#x201d; and &#x201c;at least one.&#x201d; Furthermore, as used herein, the term &#x201c;set&#x201d; is intended to include one or more items (e.g., related items, unrelated items, a combination of related and unrelated items, etc.) and may be used interchangeably with &#x201c;one or more&#x201d; or &#x201c;at least one.&#x201d; Where only one item is intended, the term &#x201c;one&#x201d; or similar language is used. Also, as used herein, the terms &#x201c;has,&#x201d; &#x201c;have,&#x201d; &#x201c;having,&#x201d; or the like are intended to be open-ended terms. Further, the phrase &#x201c;based on&#x201d; is intended to mean &#x201c;based at least partly on&#x201d; unless explicitly stated otherwise.</p><p id="p-0054" num="0053">Some non-limiting embodiments are described herein in connection with thresholds. As used herein, satisfying a threshold may refer to a value being greater than the threshold, more than the threshold, higher than the threshold, greater than or equal to the threshold, less than the threshold, fewer than the threshold, lower than the threshold, less than or equal to the threshold, equal to the threshold, and/or the like.</p><p id="p-0055" num="0054">As used herein, the terms &#x201c;communication&#x201d; and &#x201c;communicate&#x201d; may refer to the reception, receipt, transmission, transfer, provision, and/or the like, of information (e.g., data, signals, messages, instructions, commands, and/or the like). For one unit (e.g., a device, a system, a component of a device or system, combinations thereof, and/or the like) to be in communication with another unit means that the one unit is able to directly or indirectly receive information from and/or transmit information to the other unit. This may refer to a direct or indirect connection (e.g., a direct communication connection, an indirect communication connection, and/or the like) that is wired and/or wireless in nature. Additionally, two units may be in communication with each other even though the information transmitted may be modified, processed, relayed, and/or routed between the first and second unit. For example, a first unit may be in communication with a second unit even though the first unit passively receives information and does not actively transmit information to the second unit. As another example, a first unit may be in communication with a second unit if at least one intermediary unit (e.g., a third unit located between the first unit and the second unit) processes information received from the first unit and communicates the processed information to the second unit. In some non-limiting embodiments, a message may refer to a network packet (e.g., a data packet, and/or the like) that includes data. Any known electronic communication protocols and/or algorithms may be used such as, for example, TCP/IP (including HTTP and other protocols), WLAN (including 802.11 and other radio frequency-based protocols and methods), analog transmissions, cellular networks (e.g., Global System for Mobile Communications (GSM), Code Division Multiple Access (CDMA), Long-Term Evolution (LTE), Worldwide Interoperability for Microwave Access (WiMAX), etc.), and/or the like. It will be appreciated that numerous other arrangements are possible.</p><p id="p-0056" num="0055">As used herein, the term &#x201c;mobile device&#x201d; may refer to one or more portable electronic devices configured to communicate with one or more networks. As an example, a mobile device may include a cellular phone (e.g., a smartphone or standard cellular phone), a portable computer (e.g., a tablet computer, a laptop computer, etc.), a wearable device (e.g., a watch, pair of glasses, lens, clothing, and/or the like), a personal digital assistant (PDA), and/or other like devices. The term &#x201c;client device,&#x201d; as used herein, refers to any electronic device that is configured to communicate with one or more servers or remote devices and/or systems. A client device may include a mobile device, a network-enabled appliance (e.g., a network-enabled television, refrigerator, thermostat, and/or the like), a computer, a POS (&#x201c;point-of-sale&#x201d;) system, and/or any other device or system capable of communicating with a network.</p><p id="p-0057" num="0056">As used herein, the term &#x201c;computing device&#x201d; may refer to one or more electronic devices that are configured to directly or indirectly communicate with or over one or more networks. The computing device may be a mobile device. As an example, a mobile device may include a cellular phone (e.g., a smartphone or standard cellular phone), a portable computer, a wearable device (e.g., watches, glasses, lenses, clothing, and/or the like), a personal digital assistant (PDA), and/or other like devices. The computing device may not be a mobile device, such as a desktop computer. Furthermore, the term &#x201c;computer&#x201d; may refer to any computing device that includes the necessary components to receive, process, and output data, and normally includes a display, a processor, a memory, an input device, and a network interface. An &#x201c;application&#x201d; or &#x201c;application program interface&#x201d; (API) refers to computer code or other data sorted on a computer-readable medium that may be executed by a processor to facilitate the interaction between software components, such as a client-side front-end and/or server-side back-end for receiving data from the client. An &#x201c;interface&#x201d; refers to a generated display, such as one or more graphical user interfaces (GUIs) with which a user may interact, either directly or indirectly (e.g., through a keyboard, mouse, etc.).</p><p id="p-0058" num="0057">As used herein, the term &#x201c;transaction service provider&#x201d; may refer to an entity that receives transaction authorization requests from merchants or other entities and provides guarantees of payment, in some cases through an agreement between the transaction service provider and an issuer institution. For example, a transaction service provider may include a payment network such as Visa&#xae; or any other entity that processes transactions. The term &#x201c;transaction processing system&#x201d; may refer to one or more computer systems operated by or on behalf of a transaction service provider, such as a transaction processing server executing one or more software applications, a token service executing one or more software applications, and/or the like. A transaction processing server may include one or more processors and, in some non-limiting embodiments, may be operated by or on behalf of a transaction service provider.</p><p id="p-0059" num="0058">As used herein, the term &#x201c;account identifier&#x201d; may include one or more PANs, tokens, or other identifiers associated with a customer account. The term &#x201c;token&#x201d; may refer to an identifier that is used as a substitute or replacement identifier for an original account identifier, such as a PAN. Account identifiers may be alphanumeric or any combination of characters and/or symbols. Tokens may be associated with a PAN or other original account identifier in one or more data structures (e.g., one or more databases and/or the like) such that they may be used to conduct a transaction without directly using the original account identifier. In some examples, an original account identifier, such as a PAN, may be associated with a plurality of tokens for different individuals or purposes.</p><p id="p-0060" num="0059">As used herein, the term &#x201c;server&#x201d; or &#x201c;server computer&#x201d; may refer to or include one or more processors or computers, storage devices, or similar computer arrangements that are operated by or facilitate communication and processing for multiple parties in a network environment, such as the Internet, although it will be appreciated that communication may be facilitated over one or more public or private network environments and that various other arrangements are possible. Further, multiple computers, e.g., servers, or other computerized devices, e.g., POS devices, directly or indirectly communicating in the network environment may constitute a &#x201c;system,&#x201d; such as a cloud provider system. Reference to &#x201c;a server&#x201d; or &#x201c;a processor,&#x201d; as used herein, may refer to a previously-recited server and/or processor that is recited as performing a previous step or function, a different server and/or processor, and/or a combination of servers and/or processors. For example, as used in the specification and the claims, a first server and/or a first processor that is recited as performing a first step or function may refer to the same or different server and/or a processor recited as performing a second step or function. A configuration of bits of data to be stored across one or more server may be referred to herein as a &#x201c;data storage distribution pattern.&#x201d;</p><p id="p-0061" num="0060">Non-limiting embodiments or aspects of the present disclosure are directed to a system, method, and computer program product for generating a data storage server distribution pattern. The described arrangement of network architecture and components therein are configured to transform raw data to be stored into distributable data by an error-correcting code scheme, to allow for non-overlapping portions of the data to be distributed across a plurality of servers, minimizing data storage requirements while also allowing for the entire data to be reconstructed by the data distributor from less than the entire data. Moreover, the data may be encrypted prior to applying an error-correcting code scheme, further providing additional layers of security against third party server hosts from reconstructing the entire data or interpreting portions of the data. The portions of data distributed across servers may be intentionally segmented so that no one server stores the entirety of any data parameter or field.</p><p id="p-0062" num="0061">The described systems and methods further provide a technically improved data storage server distribution pattern by maximizing a system reliability (e.g., an evaluation of system uptime, availability, likelihood of a server not becoming inoperative, and the like) relative to maximizing a system entropy (e.g., an evaluation of the data segmentation distribution minimizing occurrences of any one server having a greater proportion of data). The balance of objectives of procedurally maximizing system reliability while also maximizing system entropy provides the technical benefit of simultaneously improved system security and improved storage network accessibility. Moreover, the various permutations of partitions of bits of distributable data may be iterated to assure an absolute combined maximum system reliability and system entropy. Additionally, a genetic algorithm may be employed to more quickly determine a relative or absolute combined maximum system reliability and system entropy, allowing for such an improved data storage server distribution pattern to be generated at faster rates, thereby reducing system delay in executing a distribution and shortening the time for subsequent data recall. These advantages, among others, are demonstrated by the detailed technical non-limiting embodiments below.</p><p id="p-0063" num="0062">Error-correcting codes are a class of techniques that take data and add redundancy so that the data may be transmitted in the presence of noise. The redundancy is added so that, if a part of the data is missing, transposed, etc., the entire sequence of data may be reconstructed. For example, a Hamming code known as a checksum pad may add parity bits for row and column sums, allowing for single error correction/double error detection.</p><p id="p-0064" num="0063">Error-correcting code schemes may be used to allow data to be stored reliably for recall and backup. For example, a piece of data such as a PAN may be encoded using an error-correcting code scheme, which expands the data with redundant information. The encoded PAN may then be segmented across multiple servers so that no one server has enough information to reproduce the original data (e.g., the full PAN). Also, in the case where one or more servers become unavailable, e.g., due to outages, the error-correcting code allows for reconstruction of the original data if sufficient data are present in the available servers.</p><p id="p-0065" num="0064">An error correction scheme may be applied to a single data item consisting of k bits. For example, an error correction scheme may be applied to a PAN consisting of 16 decimal digits. This would require 64 bits to store/transmit (16 digits&#xd7;4 bits/digit) while un-encoded. The resultant encoded data may have size n bits, where n&#x2265;k. Further, these n encoded bits may be distributed over a set of servers, having total number C servers, with each server having a reliability n, where the index i ranges from 0 to C&#x2212;1. Assume an objective of minimum system reliability R. The data distributor may determine L out of the C servers (where L&#x2264;C) in order to produce sufficient obfuscation of the data item (e.g., to partition the data item into portions so no one server has enough of the data item to deduce the data item content). It may be an objective to meet or exceed R overall reliability (typically stated in &#x201c;nines,&#x201d; e.g., &#x201c;six nines&#x201d; equals 99.999999%) in total.</p><p id="p-0066" num="0065">Many different error correction schemes operate on either the symbol level (digit or character) or the bit level. These are generally divided into two classe: block and convolutional codes. Block codes are a large family of error-correcting codes that encode data in blocks. Examples of block codes include Reed-Solomon codes, Hamming codes, Hadamard codes, Expander codes, Golay codes, and Reed-Muller codes. These may be referred to as algebraic block codes or cyclic block codes, because such codes can be generated using Boolean polynomials. Algebraic block codes are typically hard-decoded using algebraic decoders. The term block code may also refer to any error-correcting code that acts on a block of k bits of input data to produce n bits of output data. By contrast, convolutional codes work on bit or symbol streams of arbitrary length. Convolutional codes may be decoded with the Viterbi algorithm, though other algorithms may be used. Viterbi decoding allows asymptotically optimal decoding efficiency with increasing constraint length of the convolutional code, but at the expense of exponentially increasing complexity (e.g., time). A terminated convolutional code is a block code in that it encodes a block of input data but the block size of a convolutional code is arbitrary. Block codes have a fixed size, dictated by their algebraic characteristics.</p><p id="p-0067" num="0066">Both block code and convolutional code families can be represented as (n,k,d)<sub>q</sub>, where q is the size of the alphabet of symbols (e.g., 2<sup>M </sup>. . . where M is 4 for decimal/hexadecimal, 8 for ASCII characters, and 16 for UNICODE wide characters), n is the block length (e.g., encoded message length), k is the pure message length (e.g., un-encoded message length), and d (distance) is the minimum number of positions in which any two distinct code words can differ in terms of Hamming distance. This value of d determines the number of errors, &#x2514;(d&#x2212;1)/2&#x2518;, that can be corrected in the coded message. For the maximum distance separable code, distance may be defined to be d=n&#x2212;k+1. However, the precise distance may not be known, non-trivial to prove or state, or not needed. For the present disclosure, d may be predetermined.</p><p id="p-0068" num="0067">The probability of a single bit error occurring in data may be defined using bit error rate (BER), where a bit error is a bit improperly stored/retrieved (e.g., on one or more stored media or retrieved from a cloud network) or sent/received (e.g., over a telecommunications system). The BER may be in the range of 10<sup>&#x2212;6 </sup>to 10<sup>&#x2212;9</sup>, yielding a reliability value (a complement of the BER) between 0.999999 (e.g., 99.9999% &#x201c;four nines&#x201d;) to 0.999999999 (e.g., 99.9999999%, &#x201c;seven nines&#x201d;), respectively. The reliability of N bits all being sent/received or stored/retrieved correctly is given as the product of each bit remaining intact: 1&#x2212;(1&#x2212;BER)<sup>N</sup>.</p><p id="p-0069" num="0068">By extension, the total reliability of k bits out of n is given by the binomial sum of all possible combinations of 0 . . . k garbled bits out of n bits:</p><p id="p-0070" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <munderover>      <mo>&#x2211;</mo>      <mrow>       <mi>i</mi>       <mo>=</mo>       <mn>0</mn>      </mrow>      <mi>k</mi>     </munderover>     <mrow>      <mrow>       <mo>(</mo>       <mtable>        <mtr>         <mtd>          <mi>n</mi>         </mtd>        </mtr>        <mtr>         <mtd>          <mi>i</mi>         </mtd>        </mtr>       </mtable>       <mo>)</mo>      </mrow>      <mo>&#x2062;</mo>      <msup>       <mrow>        <mo>(</mo>        <mrow>         <mn>1</mn>         <mo>-</mo>         <mrow>          <mi>B</mi>          <mo>&#x2062;</mo>          <mi>E</mi>          <mo>&#x2062;</mo>          <mi>R</mi>         </mrow>        </mrow>        <mo>)</mo>       </mrow>       <mrow>        <mi>n</mi>        <mo>-</mo>        <mi>i</mi>       </mrow>      </msup>      <mo>&#x2062;</mo>      <mi>B</mi>      <mo>&#x2062;</mo>      <mi>E</mi>      <mo>&#x2062;</mo>      <msup>       <mi>R</mi>       <mi>i</mi>      </msup>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Formula</mi>     <mo>&#x2062;</mo>     <mtext>   </mtext>     <mn>1</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0071" num="0000">In terms of reliability (r=1&#x2212;BER), this quantity is given by:</p><p id="p-0072" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <munderover>      <mo>&#x2211;</mo>      <mrow>       <mi>i</mi>       <mo>=</mo>       <mn>0</mn>      </mrow>      <mi>k</mi>     </munderover>     <mrow>      <mrow>       <mo>(</mo>       <mtable>        <mtr>         <mtd>          <mi>n</mi>         </mtd>        </mtr>        <mtr>         <mtd>          <mi>i</mi>         </mtd>        </mtr>       </mtable>       <mo>)</mo>      </mrow>      <mo>&#x2062;</mo>      <msup>       <mrow>        <msup>         <mi>r</mi>         <mrow>          <mi>n</mi>          <mo>-</mo>          <mi>i</mi>         </mrow>        </msup>        <mo>(</mo>        <mrow>         <mn>1</mn>         <mo>-</mo>         <mi>r</mi>        </mrow>        <mo>)</mo>       </mrow>       <mi>i</mi>      </msup>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Formula</mi>     <mo>&#x2062;</mo>     <mtext>   </mtext>     <mn>2</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0073" num="0069">Given a data item of k bits, the desired solution (e.g., allocation of bits) may be a choice of n encoded bits (k+d), along with a vector of C values, L of which are non-zero. This vector may represent how many of those n bits get allocated to each server. The sum of these integer components of the vector will be n. The choice of n and the vector solution will meet at least two objectives: (1) efficiently maximize the use of available servers; and (2) produce an overall reliability of a data item of at least R or greater.</p><p id="p-0074" num="0070">One goal may be efficiently maximizing the use of the available servers (e.g., distributing the n bits across L or more servers) to obfuscate the encoding of a data item so that no one server will contain enough of the data item to reconstruct or deduce the underlying data item (e.g., exploiting personally identifiable information). The distribution may be described as being the entropy of the signal. Mathematically, this may define a function that describes the smear/distribution of bits across available servers. Thus, if the total number of bits is n and the number of bits assigned to server i is the probability mass function (denoted p<sub>i</sub>) is b<sub>i</sub>/n and the entropy of the distributed bits may be represented as:</p><p id="p-0075" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mi>E</mi>     <mo>=</mo>     <mrow>      <mo>-</mo>      <mrow>       <munderover>        <mo>&#x2211;</mo>        <mrow>         <mi>i</mi>         <mo>=</mo>         <mn>0</mn>        </mrow>        <mrow>         <mi>C</mi>         <mo>-</mo>         <mn>1</mn>        </mrow>       </munderover>       <mrow>        <msub>         <mi>p</mi>         <mi>i</mi>        </msub>        <mo>&#x2062;</mo>        <msub>         <mi>log</mi>         <mn>2</mn>        </msub>        <mo>&#x2062;</mo>        <msub>         <mi>p</mi>         <mi>i</mi>        </msub>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Formula</mi>     <mo>&#x2062;</mo>     <mtext>   </mtext>     <mn>3</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0076" num="0000">with the objective of maximizing the value of E.</p><p id="p-0077" num="0071">For example: if k=16 bits and d is predetermined to be 17 (e.g., only &#x2514;(d&#x2212;1)/2&#x2518; or eight bit errors are correctible), then n may be 16+17&#x2212;1=32 bits (k+d&#x2212;1). If there are C=7 servers in the set of available servers and the data distributor determines to use L=5 providers, consider a vector such as [0,7,7,4,7,7,0] for the bit allocation vector b<sub>i </sub>yielding a probability mass vector of [0, 0.21875, 0.21875, 0.125, 0.21875, 0.21875, 0.0]. This produces a total entropy value E of 2.2935644432 for this example. The entropy E could be increased by selecting a more uniform distribution (e.g., &#x201c;smear&#x201d;) across all the servers available (e.g., [5,5,5,2,5,5,5], yielding an E of 2.760692411).</p><p id="p-0078" num="0072">Another goal may be, given known reliabilities n of a collection of servers C, to select an encoding (n,k,d) that produces an overall reliability of a data item of at least R or greater when the encoded data is stored across a proper subset L (L&#x2264;C) of servers. Mathematically, the &#x201c;best worst case&#x201d; is to be ensured, that the collection of selected servers yield reliability better than R, subject to the entropy constraint. This constraint may not be met; it is possible that no combination of servers results in an overall &#x201c;best worst case&#x201d; that meets or exceeds R. In such case, the data distributor may seek the maximum achievable reliability. The constraints may also be weighted to give greater or lesser importance to the objectives.</p><p id="p-0079" num="0073">In order for the encoded message (of length n) to be properly decoded, no more than (n&#x2212;k)/2 or d bit errors may occur. These d errors are distributed across servers, which requires consideration of partitioning, e.g., determining how many ways d can be written as the sum of L positive non-zero integers.</p><p id="p-0080" num="0074">By way of continuing the prior example, consider that if d is 17, no more than &#x2514;(d&#x2212;1)/2&#x2518; or eight bit errors are correctible. This is a worst-case scenario. Also, as before, for C=7 (seven servers to choose from) and L=5 (at least five servers of the possible seven must be chosen), there are only three possible non-zero partitions of the eight bit errors. In lexicographic order:</p><p id="p-0081" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>[4, 1, 1, 1, 1]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0082" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>[3, 2, 1, 1, 1]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0083" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>[2, 2, 2, 1, 1]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0084" num="0075">A data distributor would be interested in ensuring the overall worst-case reliability remains above R, which requires the consideration of permutations. For example, if L is 5 and the number of available servers C is 7, then two servers are assigned zero bits (they are unused). In such a case, two servers would be omitted from being allocated data. The data distributor would therefore discard the two least reliable servers. This is a factor of the reliabilities of the individual servers. If the server reliabilities are [0.999, 0.99995, 0.99997, 0.99995, 0.99996, 0.999998, 0.9993], assigning the first and last servers zero bits makes sense. However, another permutation of [0,7,7,4,7,7,0] might be used for a different set of reliability numbers. Determining which servers are unused and which servers are assigned bits is important in computing the overall reliability. For each of those five non-zero partitions, there are five factorial (5! or 120) permutations possible (some of which will be duplicates).</p><p id="p-0085" num="0076">Servers may be sorted in the order of their reliability, and the bottom-scoring servers, in terms of reliability numbers, may be dropped and/or ignored. This may be adopted as a general pre-conditioning practice to maximize reliability and to reduce and possibly eliminate the need to examine all those many permutations.</p><p id="p-0086" num="0077">By way of further definition, the number of bits assigned to the servers may be represented as an integer vector b<sub>i </sub>(as before) and the number of bit errors occurring in the servers may be represented as another integer vector e<sub>i</sub>. The sum of all the components of b<sub>i </sub>should equal the total number of bits n. In other words, the n bits are somehow distributed over the servers. Every component of b<sub>i </sub>is an integer between 0 and n. Likewise, the sum of all the components of the error vector e<sub>i </sub>must be less than or equal to &#x2514;(d&#x2212;1)/2&#x2518; or the data item cannot be recovered. Finally, there is an upper limit for all the values of e<sub>i</sub>; every component of e<sub>i </sub>must be less than or equal to its corresponding component in b<sub>i </sub>(namely, a server cannot have more bit errors than the number of bits stored thereon).</p><p id="p-0087" num="0078">The reliabilities of all the servers may be represented by a floating-point vector r<sub>i</sub>. All the values of this vector may be between 0.0 and 1.0 (e.g., ideally all extremely close to 1.0). The values may be sorted in decreasing order of reliability, with the most reliable provider first and the least reliable provider last. The value &#x2514;(d&#x2212;1)/2&#x2518; may be denoted as the variable m (for maximum number of bit errors tolerable). Let Part(v,k) be a sequence of k-wise partitions of the integer v. In other words, the various ways of splitting up the integer v into k components may be determined, in which some of the components may be zero, and in which the k components add up to v. To illustrate, the three-wise partitions of three may be represented as Partition(3,3)={[3,0,0], [2,1,0], [1,1,1]}.</p><p id="p-0088" num="0079">Let Len(v) be the number of elements of a vector v. To illustrate, if v=[1,2,3], then Len([1,2,3])=3. Let Perm(s) be all the permutations of a vector of integers. To illustrate, the six ordered permutations [3!=6] of Perm([0,1,2]) are {[0,1,2], [0,2,1], [1,0,2], [1,2,0], [2,0,1], [2,1,0]}.</p><p id="p-0089" num="0080">The number of bits in the data, k, may be known. The data distributor may select m, the number of tolerable bit errors, which determines d. An allocation of bits to servers b<sub>i </sub>vector may be determined using some algorithm (discussed further below). That allocation vector b<sub>i </sub>may be scored against r<sub>i</sub>, the reliability vector. The data distributor may iterate over all possible error vectors e<sub>i</sub>, which are L-wise partitions of d across C servers with (C&#x2212;L) zeroes. For each of these partitions, the reliability may be computed for all allowable vector permutations of that partition (e.g., ones where the e<sub>i </sub>components are less than or equal to the b<sub>i </sub>components). The lowest score may be taken as a metric. Formulaically, this is:</p><p id="p-0090" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mi>R</mi>     <mo>=</mo>     <mrow>      <mtable>       <mtr>        <mtd>         <mi>min</mi>        </mtd>       </mtr>       <mtr>        <mtd>         <mrow>          <mi>e</mi>          <mo>&#x2208;</mo>          <mrow>           <mi>Perm</mi>           <mo>&#x2061;</mo>           <mo>(</mo>           <mrow>            <mi>Part</mi>            <mo>&#x2061;</mo>            <mo>(</mo>            <mrow>             <mi>m</mi>             <mo>,</mo>             <mi>L</mi>            </mrow>            <mo>)</mo>           </mrow>           <mo>)</mo>          </mrow>         </mrow>        </mtd>       </mtr>      </mtable>      <mover>       <munder>        <mo>&#x2227;</mo>        <mrow>         <mi>i</mi>         <mo>=</mo>         <mrow>          <mrow>           <mn>0</mn>           <mo>&#x2062;</mo>           <mtext>  </mtext>           <mo>&#x2026;</mo>           <mo>&#x2062;</mo>           <mtext>  </mtext>           <mi>L</mi>          </mrow>          <mo>-</mo>          <mn>1</mn>         </mrow>        </mrow>       </munder>       <mrow>        <mi>e</mi>        <mo>&#x2264;</mo>        <mi>b</mi>       </mrow>      </mover>      <mrow>       <munderover>        <mo>&#x220f;</mo>        <mrow>         <mi>i</mi>         <mo>=</mo>         <mn>0</mn>        </mrow>        <mi>L</mi>       </munderover>       <mrow>        <munderover>         <mo>&#x2211;</mo>         <mrow>          <mi>j</mi>          <mo>=</mo>          <mn>0</mn>         </mrow>         <msub>          <mi>e</mi>          <mi>i</mi>         </msub>        </munderover>        <mrow>         <mrow>          <mo>(</mo>          <mtable>           <mtr>            <mtd>             <msub>              <mi>b</mi>              <mi>i</mi>             </msub>            </mtd>           </mtr>           <mtr>            <mtd>             <mi>j</mi>            </mtd>           </mtr>          </mtable>          <mo>)</mo>         </mrow>         <mo>&#x2062;</mo>         <msup>          <mrow>           <msubsup>            <mi>r</mi>            <mi>i</mi>            <mrow>             <msub>              <mi>b</mi>              <mi>i</mi>             </msub>             <mo>-</mo>             <mi>j</mi>            </mrow>           </msubsup>           <mo>(</mo>           <mrow>            <mn>1</mn>            <mo>-</mo>            <msub>             <mi>r</mi>             <mi>i</mi>            </msub>           </mrow>           <mo>)</mo>          </mrow>          <mi>j</mi>         </msup>        </mrow>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Formula</mi>     <mo>&#x2062;</mo>     <mtext>   </mtext>     <mn>4</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0091" num="0081">By way of further explanation, for a fixed value of m, all permutations (e.g., rearrangements) of all L-wise partitions of m (e.g., the &#x201c;min&#x201d; operator) are produced. This is may be a sequence of e vectors. For all e vectors whose components are less than or equal to their corresponding components in the b vector (e.g., the inverted V symbol, meaning &#x201c;AND&#x201d;), the products of the reliability functions may be computed across the set of servers (e.g., a product of sums). So, each e vector may produce an associated reliability. Of all those reliability values, the minimum value may be used as the reliability metric R.</p><p id="p-0092" num="0082">In view of the foregoing, provided are two computable metrics, E (entropy) and R (reliability), which pull the solution space in opposite directions. To obtain a larger value for E (e.g., to segment the data into chunks to obfuscate the data), the data distributor could distribute the allocation of bits across the b vector uniformly (e.g., allocate the same number of bits to as many servers as possible to maximize entropy). To obtain a larger value for R (e.g., to ensure recovery of the original k bits of data in the presence of bit errors), the data distributor could assign larger numbers of bits to the components of the b vector that are associated with the servers with high reliability. Since servers may be sorted in decreasing order of reliability, larger b<sub>i </sub>numbers would be arranged early on in the vector. It will be appreciated that it may not be possible to fully satisfy both objectives simultaneously. The data distributor might need to increase/decrease m and retry the entire process. Or the data distributor may wish to weight the E and/or R functions to give greater or lesser priority to one or the other function, where the E function measures obfuscation of the data and the R function measures reliability of recovering the data from the distributed encoding. The design of this approach allows for adjustment, customization, and dynamic implementation.</p><p id="p-0093" num="0083">With two metrics and approaches to choosing or weighting one over the other, an algorithm may be determined. With k, the number of bits in the data, the data distributor may select a minimum value for m, the number of tolerable bit errors, which determines d. The data distributor may increase m by one until arriving at a solution that produces an E and R that meets the system needs, or the data distributor may stop at some point where m is a reasonable factor of k. Then, the data distributor may decide on some allocation of bits to the set of servers&#x2014;the b<sub>i </sub>vector.</p><p id="p-0094" num="0084">In one approach, the data distributor may iterate over all C-wise partitions of n (with zeroes allowed) and run those partitions through the E and R computation process. While this process may take more computation time, the computation may be completed only once before the actual encoding and storage of bits in the servers is done. This approach may also guarantee a best-possible set of values for E and R.</p><p id="p-0095" num="0085">Another approach may be to generate a random subset of C-wise partitions of n and use a genetic algorithm to permute these values in search of maximizing the E and R objective functions. To do this, the data distributor may encode a population of solutions in the form {m,[b<sub>0</sub>,b<sub>1</sub>, . . . , b<sub>C-2</sub>, b<sub>C-1</sub>]}, compute the E and R objective functions for this population, and apply operations (e.g., permutation, grafting, etc.) on individual putative solutions to converge on the most optimal (e.g., high value) solution. This approach has the advantage of likely reducing the computation time of a fully iterative approach.</p><p id="p-0096" num="0086">It will be appreciated that many approaches, or combinations thereof, may be possible to this maximization problem in integer space. The outcome of any given approach (e.g., algorithm) may be a choice for m (e.g., how many bits are needed to augment the original k bits to obtain an n bit encoding with high reliability) and a choice for b<sub>i </sub>(e.g., the allocation of those n bits to servers that assure obfuscation and high reliability).</p><p id="p-0097" num="0087">With specific reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, and in some non-limiting embodiments or aspects, provided is a system <b>100</b> for generating a data storage server distribution pattern. The system <b>100</b> includes a data distributor system <b>102</b> having one or more servers for receiving data to be stored. The data distributor system <b>102</b> may be programmed and/or configured to generate one or more data storage server distribution pattern and communicate data to and from a set of servers <b>108</b>. The data distributor system <b>102</b> may be communicatively connected to other sets of servers other than the exemplary illustrated set of servers <b>108</b>. The set of servers <b>108</b> may include two or more servers, e.g., a first server (S<b>1</b>), a second server (S<b>2</b>), a third server (S<b>3</b>), and up to and including an nth server (SN). The data distributor system <b>102</b> may receive raw data to be stored on the set of servers <b>108</b>. The data distributor system <b>102</b> may receive the raw data from a database <b>104</b>, which may store the raw data as an additional storage medium or may temporarily store the raw data until it is distributed among the set of servers <b>108</b>. Other servers and systems may populate the database <b>104</b> with raw data to be distributed. The data distributor system <b>102</b> may also receive the raw data from a data stream <b>106</b>, such as a data stream of transaction data representing processed transactions from a transaction service provider system. A database <b>104</b> source of raw data may be considered to include any source of at least temporarily stored data from a data storage medium. A data stream <b>106</b> source of raw data may be considered to include directly or indirectly communicated data that is transmitted to the data distributor system <b>102</b> after generation. Raw data may be communicated to the data distributor system <b>102</b> through a combination of databases <b>104</b> or data streams <b>106</b>.</p><p id="p-0098" num="0088">The data distributor system <b>102</b> may determine the set of servers <b>108</b> (e.g., two or more servers), on which raw data (transformed or non-transformed) may be stored. The raw data may be transformed by the data distributor system <b>102</b> according to an error-correcting code scheme to produce distributable data for storage on the set of servers <b>108</b>. The raw data may also be transformed by another server prior to being communicated to the data distributor system <b>102</b> via a database <b>104</b> or a data stream <b>106</b>. The raw data may also be encrypted prior to transformation by an error-correcting code scheme. The data distributor system <b>102</b> may also determine a server reliability of each server in the set of servers <b>108</b>. Server reliability may be computed, such as by determining an actual or projected server uptime, likelihood of failure, rate of data communication success, and/or similar metrics. Server reliability may also be reported, such as from one or more cloud providers associated with one or more servers of the set of servers <b>108</b>. Server reliability for each server in the set of servers <b>108</b> may also be determined by a server reliability evaluation system <b>110</b>. The server reliability evaluation system <b>110</b> may monitor activity on one or more servers to determine a reliability score for each server. The server reliability evaluation system <b>110</b> may be coextensive with the data distributor system <b>102</b>.</p><p id="p-0099" num="0089">The data distributor system <b>102</b> may then generate a data storage server distribution pattern of the distributable data. Portions of the distributable data (e.g., bits) may be allocated to two or more servers of the set of servers <b>108</b>. Not all of the servers <b>108</b> need be selected for storing portions of the distributable data. The data storage server distribution pattern may be based on maximizing a system reliability of the set of servers <b>108</b> relative to maximizing a system entropy of the set of servers <b>108</b>. The system reliability may be determined (by the server reliability evaluation system <b>110</b>, the data distributor system <b>102</b>, etc.) at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the distributable data across the set of servers <b>108</b>. The system entropy may be determined (by the server reliability evaluation system <b>110</b>, the data distributor system <b>102</b>, etc.) at least partly by a cumulated information entropy of each server of the set of servers <b>108</b> using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the distributable data. A non-limiting method of determining system reliability and system entropy is described herein.</p><p id="p-0100" num="0090">Given a generated data storage server distribution pattern, the data distributor system <b>102</b> may distribute the distributable data for storage across two or more servers of the set of servers <b>108</b> according to the data storage server distribution pattern. If one or more servers of the set of servers <b>108</b> become inoperative, the data distribution server <b>102</b> may retrieve a portion of the distributable data from one or more other operative servers. Using the error-correcting code scheme that was used to transform the raw data into the distributable data, the data distributor system <b>102</b> may determine the raw data from the portion of the distributable data. Thereafter, the data distributor system <b>102</b> may attempt a new distribution of the data based on the remaining operative servers in the set of servers <b>108</b>.</p><p id="p-0101" num="0091">The raw data determined from the portion of distributable data may be transformed again by the data distributor system <b>102</b> to produce new distributable data, according to an error-correcting code scheme. A same or different error-correcting code scheme may be employed to generate the new distributable data. The data distributor system <b>102</b> may then generate a new data storage server distribution pattern across two or more operative servers of the set of servers <b>108</b>. The new data storage server distribution pattern may be based on maximizing the system reliability relative to maximizing the system entropy. The system reliability may be determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the new distributable data across the set of servers excluding the one or more inoperative servers. The system entropy may be determined at least partly by a cumulated information entropy of each server of the set of servers excluding the one or more inoperative servers using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the new distributable data. After generating the new data storage server distribution pattern, the data distributor system <b>102</b> may distribute the new distributable data for storage across at least two servers of the set of servers, excluding the one or more inoperative servers.</p><p id="p-0102" num="0092">With specific reference to <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>4</b></figref>, and in some non-limiting embodiments or aspects, provided are relational diagrams <b>200</b>, <b>300</b>, <b>400</b> of a system and method for generating a data storage server distribution pattern. Illustrated for ease of understanding is a data distributor system <b>102</b>, a set of servers <b>108</b> including four servers S<b>1</b>-S<b>4</b>, and raw data <b>202</b> having four bits r<b>1</b>-r<b>4</b>, which is transformed into distributable data d<b>1</b>-d<b>8</b>. It will be appreciated that various other arrangements are possible.</p><p id="p-0103" num="0093">With continued reference to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and in further non-limiting embodiments or aspects, the data distributor system <b>102</b> may determine the set of servers <b>108</b> on two or more servers of which data will be stored. The data distributor system <b>102</b> may be communicatively connected to each server of the set of servers <b>108</b>, or a system associated therewith, e.g., a cloud provider system. The data distributor system <b>102</b> may also determine the raw data <b>202</b> to be stored (e.g., by receiving a communication including data for data storage, by accessing a database containing stored data, etc.). The data distributor system <b>102</b> may transform the raw data <b>202</b> according to an error-correcting code scheme to produce distributable data d<b>1</b>-d<b>8</b>. The data distributor system <b>102</b> may determine a server reliability of search server in the set of servers. For illustrative purposes, server S<b>3</b> may be assumed to have a lower reliability score than server S<b>2</b>, which may be assumed to have a lower reliability score than server S<b>1</b> or server S<b>4</b>. The data distributor system <b>102</b> may also determine how many servers of the set of servers <b>108</b> on which to store data. For illustrative purposes in this non-limiting example, only three of the four servers S<b>1</b>-S<b>4</b> will be used in an initial round of data storage. The determination of how many servers may be used may be always maximized, may be predetermined by system parameters, may be dynamically determined according to server availability, cost, etc., and/or other similar methods.</p><p id="p-0104" num="0094">The data distributor system <b>102</b> may then generate the data storage server distribution pattern based on maximizing a system reliability relative to maximizing a system entropy. For illustrative purposes, system entropy may be maximized by achieving a relatively uniform distribution of bits across the three servers S<b>1</b>, S<b>2</b>, and S<b>4</b>, and system reliability may be maximized relative to system entropy by eliminating the lowest reliability server S<b>3</b> from consideration as one of the three servers for storage, and then distributing fewer bits (d<b>4</b>, d<b>5</b>) to the second-lowest reliable server S<b>2</b>. As such, three bits of distributable data d<b>1</b>, d<b>2</b>, d<b>3</b> are assigned to server S<b>1</b>, two bits of distributable data d<b>4</b>, d<b>5</b> are assigned to server S<b>2</b>, and three bits of distributable data d<b>6</b>, d<b>7</b>, d<b>8</b> are assigned to server S<b>4</b>. It will be appreciated that the size of the raw data <b>202</b>, the number of servers in the set of servers <b>108</b>, and the number of servers chosen for storage may be scaled up or down as a given situation requires.</p><p id="p-0105" num="0095">With continued reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and in further non-limiting embodiments or aspects, shown is an example scenario where the lowest-reliability server S<b>2</b> has become inoperative. As such, distributable data bits d<b>4</b>, d<b>5</b> are not recoverable. In response to S<b>2</b> becoming inoperative, the data distributor system <b>102</b> may retrieve a portion of the distributable data from one or more of the remaining operative servers. As illustrated in this non-limiting example, distributable data bits d<b>1</b>, d<b>2</b>, d<b>3</b>, d<b>6</b>, d<b>7</b>, d<b>8</b> may be retrieved by the data distributor system <b>102</b>. From the retrieved portion of distributable data, the data distributor system <b>102</b> may determine the raw data <b>202</b> using the error-correcting code scheme that was used to transform the raw data <b>202</b> into the distributable data.</p><p id="p-0106" num="0096">With continued reference to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, and in further non-limiting embodiments or aspects, once the raw data <b>202</b> is determined, the data distributor system <b>102</b> may transform the raw data <b>202</b> into new distributable data n<b>1</b>-n<b>8</b> using an error-correcting code scheme, which may be the same or different from the previously applied error-correcting code scheme. The data distributor system <b>102</b> may then generate a new data storage server distribution pattern based on maximizing the system reliability relative to maximizing the system entropy. After one or more servers become inoperative, the system reliability may be determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the new distributable data n<b>1</b>-n<b>8</b> across the set of servers excluding the one or more inoperative servers. The system entropy may be determined at least partly by a cumulated information entropy of each server of the set of servers excluding the one or more inoperative servers, using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the new distributable data n<b>1</b>-n<b>8</b>. The data distributor system <b>102</b> may then distribute the new distributable data n<b>1</b>-n<b>8</b> across at least two servers of the set of servers (excluding the one or more inoperative servers) according to the new data storage server distribution pattern.</p><p id="p-0107" num="0097">For illustrative purposes, after server S<b>2</b> becomes inoperative, system entropy is maximized by achieving a relatively uniform distribution of bits across the three servers S<b>1</b>, S<b>3</b>, and S<b>4</b>. System reliability is maximized relative to system entropy by distributing fewer bits (n<b>4</b>, n<b>5</b>) to the least reliable server S<b>3</b>. As such, three bits of new distributable data n<b>1</b>, n<b>2</b>, n<b>3</b> are assigned to server S<b>1</b>, two bits of new distributable data n<b>4</b>, n<b>5</b> are assigned to server S<b>3</b>, and three bits of new distributable data n<b>6</b>, n<b>7</b>, n<b>8</b> are assigned to server S<b>4</b>.</p><p id="p-0108" num="0098">With continued reference to <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>4</b></figref>, and in further non-limiting embodiments or aspects, it will be appreciated that multiple servers may become inoperative at any one time. It will also be appreciated that one or more bit errors in stored distributable data may occur without a server becoming inoperative, such that even while a given server can be communicated with, one or more bits of distributable data stored thereon cannot be retrieved or are not transmitted correctly. Bit errors may occur across more than one server. By transforming raw data intro distributable data using an error-correcting code scheme, one or more bit errors may occur, and one or more servers may become inoperative, while the raw data remains recoverable from the remaining portion of accessible distributable data.</p><p id="p-0109" num="0099">With specific reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, and in some non-limiting embodiments or aspects, provided is a method <b>500</b> for generating a data storage server distribution pattern. The steps shown in method <b>500</b> may be completed by a data distributor system, a server reliability evaluation system, and/or one or more other servers communicatively connected to one or more servers for data storage. In step <b>502</b>, the data distributor system may determine a set of servers, one or more of which may be used to store portions of distributed data. In step <b>504</b>, the data distributor system may determine raw data to be stored. In step <b>506</b>, the data distributor system may transform the raw data according to an error-correcting code scheme to produce distributable data. In step <b>508</b>, the data distributor system may determine a server reliability of each server in the set of servers, which may be used for generation of the data storage server distribution pattern.</p><p id="p-0110" num="0100">In step <b>510</b>, the data distributor system may generate the data storage server distribution pattern. The data storage server distribution pattern may be based on maximizing a system reliability (step <b>509</b>) relative to maximizing a system entropy (step <b>511</b>). System reliability may be determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the distributable data across the set of servers. System entropy may be determined at least partly by a cumulated information entropy of each server of the set of servers using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the distributable data. After generating the data storage server distribution pattern, the data distributor system may distribute, in step <b>514</b>, the distributable data for storage across two or more servers of the set of servers according to the data storage server distribution pattern.</p><p id="p-0111" num="0101">With specific reference to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, and in some non-limiting embodiments or aspects, provided is a method <b>600</b> for generating a data storage server distribution pattern. The steps shown in method <b>600</b> may be completed by a data distributor system, a server reliability evaluation system, and/or one or more other servers communicatively connected to one or more servers for data storage. The method <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref> may include the method of <b>600</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. In step <b>506</b>, the data distributor system may transform the raw data according to an error-correcting code scheme to produce distributable data. Associated with step <b>506</b>, the data distributor system may apply a Reed-Solomon error-correcting code scheme in step <b>602</b>, and may generate a number of distributable bits that is at least twice a number of bits in the raw data in step <b>604</b>. In step <b>508</b>, the data distributor system may determine a server reliability of each server in the set of servers, which may be used for generation of the data storage server distribution pattern.</p><p id="p-0112" num="0102">In step <b>510</b>, the data distributor system may generate the data storage server distribution pattern. The data storage server distribution pattern may be based on maximizing a system reliability (step <b>509</b>) relative to maximizing a system entropy (step <b>511</b>). Associated with step <b>510</b>, the data distributor system may also weight reliability (in step <b>606</b>) and/or weight entropy (step <b>608</b>) to give greater significance to one or the other when maximizing one score relative to another. System reliability may be determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the distributable data across the set of servers. System entropy may be determined at least partly by a cumulated information entropy of each server of the set of servers using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the distributable data. In step <b>610</b>, the data distributor system may determine a maximum value for the combined system reliability and system entropy by iterating over all possible partitions of the distributable data across the set of servers. In step <b>612</b>, the data distributor system may determine maximum value for the combined system reliability and system entropy by iterating over permutations of partitions of bit allocations to identify an optimal assignment of bits to the set of servers. In step <b>614</b>, the data distributor may determine the maximum value for the combined system reliability and system entropy by applying a genetic algorithm to permute over a random subset of partitions of the distributable data. After generating the data storage server distribution pattern, the data distributor system may distribute the distributable data for storage across two or more servers of the set of servers according to the data storage server distribution pattern.</p><p id="p-0113" num="0103">With specific reference to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, and in some non-limiting embodiments or aspects, provided is a method <b>700</b> for generating a data storage server distribution pattern. The steps shown in method <b>700</b> may be completed by a data distributor system, a server reliability evaluation system, and/or one or more other servers communicatively connected to one or more servers for data storage. In step <b>702</b>, the data distributor system may detect an inoperative server. The data distributor system may monitor the communicative status of one or more servers, and/or may be configured to receive operational status communications from one or more servers. In response to detecting an inoperative server, in step <b>702</b>, the data distributor system may retrieve a portion of the distributable data from one or more operative servers, in step <b>704</b>. In step <b>706</b>, the data distributor system may determine the raw data from the portion of the distributable data using the error-correcting code scheme. In step <b>708</b>, the data distributor system may transform the raw data into new distributable data with a new error-correcting code scheme or parameters thereof. The new error-correcting code scheme may also be the same as the previously applied error-correcting code scheme.</p><p id="p-0114" num="0104">In step <b>708</b>, the data distributor system may generate a new data storage server distribution pattern. The new data storage server distribution pattern may also be based on maximizing a system reliability relative to maximizing a system entropy. System reliability may be determined at least partly by a minimum reliability yielded from permuting error vectors over various partitions of the new distributable data across the set of servers, excluding the one or more inoperative servers. System entropy may be determined at least partly by a cumulated information entropy of each server of the set of servers (excluding the one or more inoperative servers) using a probability mass function based on a ratio of bits stored on a given server relative to a total number of bits in the new distributable data. After generating the new data storage server distribution pattern, the data distributor system may distribute, in step <b>712</b>, the new distributable data for storage across two or more servers of the set of servers according to the new data storage server distribution pattern.</p><p id="p-0115" num="0105">Although the disclosure has been described in detail for the purpose of illustration based on what is currently considered to be the most practical and non-limiting embodiments, it is to be understood that such detail is solely for that purpose and that the disclosure is not limited to the disclosed embodiments, but, on the contrary, is intended to cover modifications and equivalent arrangements that are within the spirit and scope of the appended claims. For example, it is to be understood that the present disclosure contemplates that, to the extent possible, one or more features of any embodiment can be combined with one or more features of any other embodiment.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230004300A1-20230105-M00001.NB"><img id="EMI-M00001" he="8.13mm" wi="76.20mm" file="US20230004300A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230004300A1-20230105-M00002.NB"><img id="EMI-M00002" he="8.13mm" wi="76.20mm" file="US20230004300A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230004300A1-20230105-M00003.NB"><img id="EMI-M00003" he="8.13mm" wi="76.20mm" file="US20230004300A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004" nb-file="US20230004300A1-20230105-M00004.NB"><img id="EMI-M00004" he="8.47mm" wi="76.20mm" file="US20230004300A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method comprising:<claim-text>transforming, with at least one processor, raw data according to an error-correcting code scheme to produce distributable data;</claim-text><claim-text>generating, with at least one processor, a data storage server distribution pattern for storing the distributable data across a subset of at least two servers from a set of available servers, wherein the data storage server distribution pattern comprises partitions such that no one server of the subset of at least two servers stores an entirety of the distributable data, and wherein generating the data storage server distribution pattern is based on maximizing a value of a combination of a system reliability and a system entropy by iteratively:<claim-text>determining the system reliability based on permuting error vectors over various partitions of the distributable data across the set of available servers;</claim-text><claim-text>determining the system entropy based on a cumulated information entropy of each server of the set of available servers; and</claim-text><claim-text>determining the value of the combination of the system reliability and the system entropy; and</claim-text></claim-text><claim-text>storing, with at least one processor, the distributable data across the subset of at least two servers according to the data storage server distribution pattern.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the error-correcting code scheme is a Reed-Solomon error-correcting code scheme and a number of bits in the distributable data is at least twice a number of bits in the raw data.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein maximizing the value of the combination of the system reliability and the system entropy further comprises weighting the system reliability and the system entropy to prioritize the system reliability or the system entropy.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein maximizing the value of the combination of the system reliability and the system entropy further comprises iterating over all possible partitions of the distributable data across the set of available servers.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein maximizing the value of the combination of the system reliability and the system entropy further comprises iterating over permutations of partitions of bit allocations to identify an optimal assignment of bits to the set of available servers.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein maximizing the value of the combination of the system reliability and the system entropy further comprises permuting over a random subset of partitions of the distributable data using a genetic algorithm.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising encrypting, with at least one processor, the raw data prior to transforming the raw data according to the error-correcting code scheme to produce the distributable data.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising, in response to a server of the subset of at least two servers becoming inoperative:<claim-text>retrieving, with at least one processor, a portion of the distributable data from at least one operative server of the subset of at least two servers; and</claim-text><claim-text>determining, with at least one processor, the raw data from the portion of the distributable data using the error-correcting code scheme.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:<claim-text>transforming, with at least one processor, the raw data according to the error-correcting code scheme to produce new distributable data;</claim-text><claim-text>generating, with at least one processor, a new data storage server distribution pattern for storing the new distributable data across a new subset of at least two servers from the set of available servers, wherein the new data storage server distribution pattern comprises partitions such that no one server of the new subset of at least two servers stores an entirety of the distributable data, and wherein generating the new data storage server distribution pattern is based on maximizing the value of the combination of the system reliability and the system entropy; and</claim-text><claim-text>storing, with at least one processor, the new distributable data across the new subset of at least two servers according to the new data storage server distribution pattern.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A system comprising at least one server comprising at least one processor, the at least one server being programmed and/or configured to:<claim-text>transform raw data according to an error-correcting code scheme to produce distributable data;</claim-text><claim-text>generate a data storage server distribution pattern for storing the distributable data across a subset of at least two servers from a set of available servers, wherein the data storage server distribution pattern comprises partitions such that no one server of the subset of at least two servers stores an entirety of the distributable data, and wherein generating the data storage server distribution pattern is based on maximizing a value of a combination of a system reliability and a system entropy by iteratively:<claim-text>determining the system reliability based on permuting error vectors over various partitions of the distributable data across the set of available servers;</claim-text><claim-text>determining the system entropy based on a cumulated information entropy of each server of the set of available servers; and</claim-text><claim-text>determining the value of the combination of the system reliability and the system entropy; and</claim-text></claim-text><claim-text>store the distributable data across the subset of at least two servers according to the data storage server distribution pattern.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the error-correcting code scheme is a Reed-Solomon error-correcting code scheme and a number of bits in the distributable data is at least twice a number of bits in the raw data.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein maximizing the value of the combination of the system reliability and the system entropy further comprises weighting the system reliability and the system entropy to prioritize the system reliability or the system entropy.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the at least one server is further programmed and/or configured to encrypt the raw data prior to transforming the raw data according to the error-correcting code scheme to produce the distributable data.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the at least one server is further programmed and/or configured to, in response to a server of the subset of at least two servers becoming inoperative:<claim-text>retrieve a portion of the distributable data from at least one operative server of the subset of at least two servers; and</claim-text><claim-text>determine the raw data from the portion of the distributable data using the error-correcting code scheme.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the at least one server is further programmed and/or configured to:<claim-text>transform the raw data according to the error-correcting code scheme to produce new distributable data;</claim-text><claim-text>generate a new data storage server distribution pattern for storing the new distributable data across a new subset of at least two servers from the set of available servers, wherein the new data storage server distribution pattern comprises partitions such that no one server of the new subset of at least two servers stores an entirety of the distributable data, and wherein generating the new data storage server distribution pattern is based on maximizing the value of the combination of the system reliability and the system entropy; and</claim-text><claim-text>store the new distributable data across the new subset of at least two servers according to the new data storage server distribution pattern.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A computer program product comprising at least one non-transitory computer-readable medium comprising program instructions that, when executed by at least one processor, cause the at least one processor to:<claim-text>transform raw data according to an error-correcting code scheme to produce distributable data;</claim-text><claim-text>generate a data storage server distribution pattern for storing the distributable data across a subset of at least two servers from a set of available servers, wherein the data storage server distribution pattern comprises partitions such that no one server of the subset of at least two servers stores an entirety of the distributable data, and wherein generating the data storage server distribution pattern is based on maximizing a value of a combination of a system reliability and a system entropy by iteratively:<claim-text>determining the system reliability based on permuting error vectors over various partitions of the distributable data across the set of available servers;</claim-text><claim-text>determining the system entropy based on a cumulated information entropy of each server of the set of available servers; and</claim-text><claim-text>determining the value of the combination of the system reliability and the system entropy; and</claim-text></claim-text><claim-text>store the distributable data across the subset of at least two servers according to the data storage server distribution pattern.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer program product of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the error-correcting code scheme is a Reed-Solomon error-correcting code scheme and a number of bits in the distributable data is at least twice a number of bits in the raw data.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer program product of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein maximizing the value of the combination of the system reliability and the system entropy further comprises weighting the system reliability and the system entropy to prioritize the system reliability or the system entropy.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer program product of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the program instructions further cause the at least one processor to, in response to a server of the subset of at least two servers becoming inoperative:<claim-text>retrieve a portion of the distributable data from at least one operative server of the subset of at least two servers; and</claim-text><claim-text>determine the raw data from the portion of the distributable data using the error-correcting code scheme.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer program product of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the program instructions further cause the at least one processor to:<claim-text>transform the raw data according to the error-correcting code scheme to produce new distributable data;</claim-text><claim-text>generate a new data storage server distribution pattern for storing the new distributable data across a new subset of at least two servers from the set of available servers, wherein the new data storage server distribution pattern comprises partitions such that no one server of the new subset of at least two servers stores an entirety of the distributable data, and wherein generating the new data storage server distribution pattern is based on maximizing the value of the combination of the system reliability and the system entropy; and</claim-text><claim-text>store the new distributable data across the new subset of at least two servers according to the new data storage server distribution pattern.</claim-text></claim-text></claim></claims></us-patent-application>