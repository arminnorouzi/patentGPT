<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004526A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004526</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17940730</doc-number><date>20220908</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>11</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>15</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>13</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>178</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>18</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>182</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1095</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>122</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>15</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>13</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>128</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>178</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>1873</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>182</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1095</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">ARCHITECTURE FOR MANAGEMENT OF DIGITAL FILES ACROSS DISTRIBUTED NETWORK</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17306548</doc-number><date>20210503</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17940730</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16361641</doc-number><date>20190322</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11003622</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17306548</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16017348</doc-number><date>20180625</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10289607</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16361641</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>14860289</doc-number><date>20150921</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10067942</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16017348</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>12267852</doc-number><date>20081110</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>9143561</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>14860289</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>60986896</doc-number><date>20071109</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Topia Technology, Inc.</orgname><address><city>Tacoma</city><state>WA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>MANZANO</last-name><first-name>Michael R.</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>HAAGER</last-name><first-name>John C.</first-name><address><city>Buckley</city><state>WA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Topia Technology, Inc.</orgname><role>02</role><address><city>Tacoma</city><state>WA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A server system selectively executes a first application and receives from a second application executable on a first electronic device a copy of a first electronic file automatically transferred from the second application in response to a modification to content of the first electronic file and receives from a third application a copy of a second electronic file automatically transferred from the third application in response to a modification to content of the second electronic file. The server system automatically transfers the copy of the first electronic file to a second electronic device to provide a newer version of the first electronic file to the second electronic device and automatically transfers the copy of the second electronic file to the first electronic device to provide a newer version of the second electronic file to the first electronic device.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="97.96mm" wi="158.75mm" file="US20230004526A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="200.91mm" wi="159.00mm" orientation="landscape" file="US20230004526A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="190.50mm" wi="166.88mm" orientation="landscape" file="US20230004526A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="212.68mm" wi="156.21mm" orientation="landscape" file="US20230004526A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 17/306,548, filed May 3, 2021, which is a continuation of Ser. No. 16/361,641 filed Mar. 22, 2019, now issued as U.S. Pat. No. 11,003,622 on May 11, 2021, which is a continuation of Ser. No. 16/017,348 filed Jun. 25, 2018, now issued as U.S. Pat. No. 10,289,607 on May 14, 2019, which is a continuation of U.S. application Ser. No. 14/860,289 filed Sep. 21, 2015, now issued as U.S. Pat. No. 10,067,942 on Sep. 4, 2018, which is a continuation of U.S. patent application Ser. No. 12/267,852, filed Nov. 10, 2008, now issued as U.S. Pat. No. 9,143,561 which claims priority to U.S. Provisional Application No. 60/986,896 entitled &#x201c;ARCHITECTURE FOR MANAGEMENT OF DIGITAL FILES ACROSS DISTRIBUTED NETWORK&#x201d; and filed Nov. 9, 2007, and the contents of the aforementioned applications are hereby incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD OF THE INVENTION</heading><p id="p-0003" num="0002">This invention relates generally to computer-implemented processes and, more specifically, to sharing of electronic files among electronic devices.</p><heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading><p id="p-0004" num="0003">Users of modem computing systems are increasingly finding themselves in constantly-connected, high-speed networked environments. The Web continues to be a killer application, second only to email, on the Internet. Further, customers are increasingly using more than one computing device; a customer may have a desktop computer at home, one at work, and a constantly connected &#x201c;smart phone&#x201d;. Due to the confluence of these two trends, file management across these devices has become a problem.</p><p id="p-0005" num="0004">Although modem devices are easily connected, they do not provide the customer a seamless environment; the customer must manually handle many aspects of that connection. With regards to file management, customers must manually move files between their devices using some protocol like email, ftp, or by posting them on the Web. These practices lead to problems that include:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0005">The proliferation of redundant file copies. This proliferation creates a confusing environment where the customer is unclear where the &#x201c;official&#x201d; or newest version of a file exists.</li>        <li id="ul0002-0002" num="0006">The creation of an error-prone environment. Some documents, such as those associated with word processing and desktop publishing, externally reference other files. Copying such a document can break these references causing errors that the customer has to handle manually. An example of such a document is a desktop publishing document that contains a reference to an image. If that image file is not transferred along with the desktop publishing file, the image will appear as a broken link.</li>        <li id="ul0002-0003" num="0007">Unnecessary complexity. Because devices tend to have their own filing system, customers must manage a different filing model on each of his devices. For example, instead of having a single &#x201c;Movies&#x201d; folder, he may have to deal with many &#x201c;Movies&#x201d; folders, which may be in different locations on each of his devices. Each device may also have its own security model, further complicating the matter.</li>    </ul>    </li></ul></p><p id="p-0006" num="0008">That a customer has to manually move files around to ensure their accessibility on his devices is unnecessary, and is an indicator of a lack of customer-focused design in modern file systems. File systems in use today are direct offspring of systems used when graphical customer interfaces were nonexistent. Modern file system customer interfaces, such as Windows&#xae; Explorer and Mac OS X's Finder are just now starting to provide experiences that are more in line to a customer's workflow. Whereas, before, these interfaces were concerned with representing files with abstracted icons, the file's actual contents are becoming paramount in how files are organized and presented.</p><p id="p-0007" num="0009">Problems still exist with how these newer customer interfaces are implemented. They are not completely integrated with applications, suffer from performance problems, and do not generally work well outside of a device's local file system.</p><p id="p-0008" num="0010">There are several solutions to this problem that are in one way or another inadequate to the task:</p><p id="p-0009" num="0011">Remote Desktop software allows a customer to remotely &#x201c;see&#x201d; his desktop. Remote desktop software screen-scrapes a remote machine's screen (a &#x201c;server&#x201d;) and displays it on a screen local to the customer (a &#x201c;client&#x201d;). Remote desktop gives a customer access to not only his files, but also to his applications. However, this approach requires that the host machine be turned on and connected to the internet at all times. Consequently, this approach would not be appropriate for mobile hosts such as laptops. Remote desktop does not use the resources of a local machine. For full accessibility, the customer would have to keep all files and application on the host machine as any files stored on a client are not guaranteed to be accessible.</p><p id="p-0010" num="0012">Distributed File Systems, like remote desktop software, place data on an always-connected host machine. Unlike remote desktop software, the host machine is not one on which the customer performs computing tasks. The host machine is used as a storage mechanism, and any computation performed on that machine serves to supports its use as such. Distributed file systems generally provide the right functionality for customers to share files between their devices. However, distributed file systems are usually deployed as a shared resource; that is, other customers have access to it. Because of this sharing, a customer's files may be buried deep in a filing structure, and it may not always be immediately evident to customers what kind of access they have to a particular file. Further, to use a distributed file system, the customer must always be connected to it. Files stored on a distributed file system are generally inaccessible if the customer's machine is not connected to it, unless the customer has copied or moved the files to his machine's local hard drive. However, doing so immediately creates the problem of having two filing systems for the same file, creating a mental burden on the customer.</p><p id="p-0011" num="0013">Additionally, accessing a file located on a distributed file system tends to be slower than accessing files on the local hard drive. Modern applications are usually written to assume that the files they access are located locally, and thus are not optimized to access remote files. When these applications are used with remote files, they can lose performance by an order of magnitude. This problem can be fixed by automatically caching often-used files on the local file system, and only synchronizing them when they have been changed. However, this separate synchronization step introduces another problem: because the synchronization process can be lengthy, the customer is never entirely sure if the file he is remotely accessing is the latest version of the file, versus an earlier one that has been marked to be updated. Further, the directory may not reflect the existence of the file at all until synchronization finishes.</p><p id="p-0012" num="0014">FTP is similar to a distributed file system with regards to files being hosted on a remote server. However FTP generally does manifest as a &#x201c;disk drive&#x201d; on the customer's desktop; the customer must use special FTP client software to access an FTP server. It shares the same problem as distributed file systems, with the additional problem of weak integration with applications. Applications can generally write and read files directly to and from a distributed file system. This is not the case with FTP, as the customer has to manually use the client software to perform these operations as a separate task.</p><p id="p-0013" num="0015">Email was originally invented for messaging. From the beginning, the model it employs to make files accessible remotely is necessarily inefficient. Email's model for making files accessible is in the form of an email &#x201c;attachment&#x201d;. Attachments are so named because they piggy-back on a message sent from one customer to another. A customer can make a file remotely available using email by attaching the file to an email and sending it to himself. He can then retrieve the file from a remote location by accessing the message on the email server. Email used in this way is even worse than FTP as the process is even more manual: a customer must find the message containing the file before he can even access it. Further, the location in which the attachment lives is read only. If the customer, for example, were to open the file, change it, then save it back out, the results would be ambiguous to the user because the email application, not the user, specified its location. Usually, the saved file would end up buried in an email file cache in an undisclosed area of the file system.</p><p id="p-0014" num="0016">Flash Drives and External Disk Drives, although seemingly the most &#x201c;primitive&#x201d; way to ensure file availability, avoid all the problems related to network latency. However, these devices must be physically connected to the computer on which the files will be accessed. These restrictions preclude the customer from employing several effective work-flows including: using more than one computer to complete a single task (the files can only be accessed on one computer) and setting up an automated backup (the computer running the backup can't guarantee that the storage device will be connected come backup time). Further, to ensure full availability of the files, the customer must carry the device with them at all times, and must follow the associated protocols for mounting and dismounting the device.</p><p id="p-0015" num="0017">Other problems with the prior art not described above can also be overcome using the teachings of embodiments of the present invention, as would be readily apparent to one of ordinary skill in the art after reading this disclosure.</p><heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0016" num="0018">In an embodiment, a system includes a first application executable on a first electronic device. The system further includes a second application executable on a second electronic device in communication with the first electronic device. The second electronic device is configured to store a first electronic file. Subsequent to a user modifying the first electronic file, the second application is operable to automatically transfer the modified first electronic file, or a copy thereof, to the first electronic device. The system further includes a third application executable on a third electronic device in communication with the first electronic device. The third electronic device is configured to store a second electronic file. Subsequent to the user modifying the second electronic file, the third application is operable to automatically transfer the modified second electronic file, or a copy thereof, to the first electronic device. The first application is operable to automatically transfer the modified first electronic file or copy to the third electronic device, and automatically transfer the modified second electronic file or copy to the second electronic device.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWING</heading><p id="p-0017" num="0019">Preferred and alternative embodiments of the present invention are described in detail below with reference to the following drawings.</p><p id="p-0018" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic view of an exemplary operating environment in which an embodiment of the invention can be implemented;</p><p id="p-0019" num="0021"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a functional block diagram of an exemplary operating environment in which an embodiment of the invention can be implemented; and</p><p id="p-0020" num="0022"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a functional block diagram illustrating file sharing and/or synchronization according to an embodiment of the invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading><p id="p-0021" num="0023">An embodiment of the invention leverages remote programming concepts by utilizing processes called mobile agents (sometimes referred to as mobile objects or agent objects). Generally speaking, these concepts provide the ability for an object (the mobile agent object) existing on a first (&#x201c;host&#x201d;) computer system to transplant itself to a second (&#x201c;remote host&#x201d;) computer system while preserving its current execution state. The operation of a mobile agent object is described briefly below.</p><p id="p-0022" num="0024">The instructions of the mobile agent object, its preserved execution state, and other objects owned by the mobile agent object are packaged, or &#x201c;encoded,&#x201d; to generate a string of data that is configured so that the string of data can be transported by all standard means of communication over a computer network. Once transported to the remote host, the string of data is decoded to generate a computer process, still called the mobile agent object, within the remote host system. The decoded mobile agent object includes those objects encoded as described above and remains in its preserved execution state. The remote host computer system resumes execution of the mobile agent object which is now operating in the remote host environment.</p><p id="p-0023" num="0025">While now operating in the new environment, the instructions of the mobile agent object are executed by the remote host to perform operations of any complexity, including defining, creating, and manipulating data objects and interacting with other remote host computer objects.</p><p id="p-0024" num="0026">File transfer and/or synchronization, according to an embodiment, may be accomplished using some or all of the concepts described in commonly owned U.S. patent application Ser. No. 11/739,083, entitled &#x201c;Electronic File Sharing,&#x201d; the entirety of which is incorporated by reference as if fully set forth herein.</p><p id="p-0025" num="0027"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of a suitable computing system environment <b>100</b> in which one or more embodiments of the invention may be implemented. The computing system environment <b>100</b> is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing environment <b>100</b> be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment <b>100</b>.</p><p id="p-0026" num="0028">Embodiments of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.</p><p id="p-0027" num="0029">Embodiments of the invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer and/or by computer-readable media on which such instructions or modules can be stored. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.</p><p id="p-0028" num="0030">With reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer <b>110</b>. Components of computer <b>110</b> may include, but are not limited to, a processing unit <b>120</b>, a system memory <b>130</b>, and a system bus <b>121</b> that couples various system components including the system memory to the processing unit <b>120</b>. The system bus <b>121</b> may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.</p><p id="p-0029" num="0031">Computer <b>110</b> typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer <b>110</b> and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer <b>110</b>. Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.</p><p id="p-0030" num="0032">The system memory <b>130</b> includes computer storage media in the form of volatile and/or nonvolatile memory such as read only memory (ROM) <b>131</b> and random access memory (RAM) <b>132</b>. A basic input/output system <b>133</b> (BIOS), containing the basic routines that help to transfer information between elements within computer <b>110</b>, such as during start-up, is typically stored in ROM <b>131</b>. RAM <b>132</b> typically contains data and/or program modules that are immediately accessible to and/or presently being operated on by processing unit <b>120</b>. By way of example, and not limitation, <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates operating system <b>134</b>, application programs <b>135</b>, other program modules <b>136</b>, and program data <b>137</b>.</p><p id="p-0031" num="0033">The computer <b>110</b> may also include other removable/non-removable, volatile/nonvolatile computer storage media. By way of example only, <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a hard disk drive <b>140</b> that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive <b>151</b> that reads from or writes to a removable, nonvolatile magnetic disk <b>152</b>, and an optical disk drive <b>155</b> that reads from or writes to a removable, nonvolatile optical disk <b>156</b> such as a CD ROM or other optical media. Other removable/non-removable, volatile/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive <b>141</b> is typically connected to the system bus <b>121</b> through a non-removable memory interface such as interface <b>140</b>, and magnetic disk drive <b>151</b> and optical disk drive <b>155</b> are typically connected to the system bus <b>121</b> by a removable memory interface, such as interface <b>150</b>.</p><p id="p-0032" num="0034">The drives and their associated computer storage media discussed above and illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, provide storage of computer readable instructions, data structures, program modules and other data for the computer <b>110</b>. In <figref idref="DRAWINGS">FIG. <b>1</b></figref>, for example, hard disk drive <b>141</b> is illustrated as storing operating system <b>144</b>, application programs <b>145</b>, other program modules <b>146</b>, and program data <b>147</b>. Note that these components can either be the same as or different from operating system <b>134</b>, application programs <b>135</b>, other program modules <b>136</b>, and program data <b>137</b>. Operating system <b>144</b>, application programs <b>145</b>, other program modules <b>146</b>, and program data <b>147</b> are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer <b>20</b> through input devices such as a keyboard <b>162</b> and pointing device <b>161</b>, commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit <b>120</b> through a user input interface <b>160</b> that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor <b>191</b> or other type of display device is also connected to the system bus <b>121</b> via an interface, such as a video interface <b>190</b>. In addition to the monitor, computers may also include other peripheral output devices such as speakers <b>197</b> and printer <b>196</b>, which may be connected through an output peripheral interface <b>190</b>.</p><p id="p-0033" num="0035">The computer <b>110</b> may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer <b>180</b>. The remote computer <b>180</b> may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer <b>110</b>, although only a memory storage device <b>181</b> has been illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The logical connections depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> include a local area network (LAN) <b>171</b> and a wide area network (WAN) <b>173</b>, but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.</p><p id="p-0034" num="0036">When used in a LAN networking environment, the computer <b>110</b> is connected to the LAN <b>171</b> through a network interface or adapter <b>170</b>. When used in a WAN networking environment, the computer <b>110</b> typically includes a modem <b>172</b> or other means for establishing communications over the WAN <b>173</b>, such as the Internet. The modem <b>172</b>, which may be internal or external, may be connected to the system bus <b>121</b> via the user input interface <b>160</b>, or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer <b>110</b>, or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation, <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates remote application programs <b>185</b> as residing on memory device <b>181</b>. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.</p><p id="p-0035" num="0037">Referring now to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, an embodiment of the present invention can be described in the context of an exemplary computer network system <b>200</b> as illustrated. System <b>200</b> includes electronic user devices <b>210</b>, <b>280</b>, such as personal computers or workstations, that are linked via a communication medium, such as a network <b>220</b> (e.g., the Internet), to an electronic device or system, such as a server <b>230</b>. The server <b>230</b> may further be coupled, or otherwise have access, to a database <b>240</b>, electronic storage <b>270</b> and a computer system <b>260</b>. Although the embodiment illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes one server <b>230</b> coupled to two user devices <b>210</b>, <b>280</b> via the network <b>220</b>, it should be recognized that embodiments of the invention may be implemented using two or more such user devices coupled to one or more such servers.</p><p id="p-0036" num="0038">In an embodiment, each of the user devices <b>210</b>, <b>280</b> and server <b>230</b> may include all or fewer than all of the features associated with the computer <b>110</b> illustrated in and discussed with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. User devices <b>210</b>, <b>280</b> include or are otherwise coupled to a computer screen or display <b>250</b>, <b>290</b>, respectively. User devices <b>210</b>, <b>280</b> can be used for various purposes including both network- and local-computing processes.</p><p id="p-0037" num="0039">The user devices <b>210</b>, <b>280</b> are linked via the network <b>220</b> to server <b>230</b> so that computer programs, such as, for example, a browser or other applications, running on one or more of the user devices <b>210</b>, <b>280</b> can cooperate in two-way communication with server <b>230</b> and one or more applications running on server <b>230</b>. Server <b>230</b> may be coupled to database <b>240</b> and/or electronic storage <b>270</b> to retrieve information therefrom and to store information thereto. Additionally, the server <b>230</b> may be coupled to the computer system <b>260</b> in a manner allowing the server to delegate certain processing functions to the computer system.</p><p id="p-0038" num="0040">Referring now to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, illustrated is functionality of an embodiment of the invention allowing a user (not shown) who owns or otherwise controls devices <b>210</b>, <b>280</b> to automatically maintain file synchronization between at least devices <b>210</b>, <b>280</b>, or any other user devices on which principles of the present invention are implemented. In an embodiment, an administrator (not shown) of the server <b>230</b> or other appropriate electronic device transfers a file-transfer and/or synchronization application to the user devices <b>210</b>, <b>280</b> for installation thereon. Once installed on the user devices <b>210</b>, <b>280</b>, the file-transfer application provides file-transfer clients <b>310</b>, <b>320</b> executable by the user devices <b>210</b>, <b>280</b>, respectively. Each of the file-transfer clients <b>310</b>, <b>320</b> may, but need not, include a respective mobile-agent runtime environment <b>330</b>, <b>340</b>. The mobile-agent runtime environment <b>330</b>, <b>340</b> include portions of memory of the user devices <b>210</b>, <b>280</b> dedicated to allowing a mobile object the ability to perform operations that the mobile object is programmed to carry out. Also included in the file-transfer application are user interfaces <b>350</b>, <b>360</b> that are displayable on the displays <b>250</b>, <b>290</b>, respectively. In an embodiment, the interfaces <b>350</b>, <b>360</b> allow a user to view, access and/or organize files to be synched among the various user devices.</p><p id="p-0039" num="0041">Generally, all files that the user desires to be synched or shared may at some point be uploaded by one or more of the user devices <b>210</b>, <b>280</b> and stored in storage <b>270</b>. Upon receiving the files to be synched, the server <b>230</b> can store such files in the storage <b>270</b> and/or transfer the files to one or more of the respective hard drives of the user devices <b>210</b>, <b>280</b>, thereby enabling each respective user device to access such files. In this manner, the server <b>230</b> is operable to treat each hard drive of the respective user devices <b>210</b>, <b>280</b> as a local document cache for files received by the server. Typically, the server <b>230</b> will store one or more of the received files to the storage <b>270</b> only if the destination user device is offline or otherwise temporarily not in communication with the server <b>230</b>. Upon resuming communication with the destination user device, the server <b>230</b> will transfer the temporarily stored files to the destination device.</p><p id="p-0040" num="0042">In operation, according to an embodiment, the user may open and modify a file <b>370</b>, such as a word-processing document or other electronic file. Alternatively, the user may create a first instance of the file <b>370</b>. The user may have previously have associated, or may now associate, the file <b>370</b> with the transfer client <b>310</b>. Upon a predetermined and user-configurable triggering event, the transfer client <b>310</b> transfers the modified file <b>370</b>, or a copy of the modified file, to the server <b>230</b>. Such a triggering event may include, but be not limited to, the user saving the file, the elapsing of a predetermined amount of time during which the file has been opened, or the re-initiation of a communication session between the device <b>210</b> and the server <b>230</b>.</p><p id="p-0041" num="0043">The file <b>370</b> is transferred to the server <b>230</b> on which is executing a synchronization application <b>380</b>, which may include a mobile-agent runtime environment. Through user configuration, the synch application <b>380</b> monitors a set of user devices to which the file <b>370</b> should be transferred to effect file synchronization. In the illustrated embodiment, this set of user devices includes the user device <b>280</b>. The synch application <b>380</b> polls the device <b>280</b> to determine whether the device <b>280</b> is in communication with the server <b>230</b>. If the device <b>280</b> is in communication with the server <b>230</b>, the synch application <b>380</b> transfers the file <b>370</b> to the device <b>280</b>, whereupon the transfer client <b>320</b> resident on the device <b>280</b> replaces the previous version of the file <b>370</b>, previously cached on the device <b>280</b>, with the latest version of the file <b>370</b> modified on the user device <b>210</b>. If the device <b>280</b> is not currently in communication with the server <b>230</b>, the synch application <b>380</b> may store the file <b>370</b> in the storage <b>270</b> until such time as communication between the device <b>280</b> and server <b>230</b> is reestablished. As illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a similar reverse-direction synchronization process may be performed by the synch application <b>380</b> and the transfer clients <b>310</b>, <b>320</b> with regard to a file <b>315</b> modified on device <b>280</b> and synchronized to device <b>210</b>.</p><p id="p-0042" num="0044">In an embodiment, the user interfaces <b>350</b>, <b>360</b> may include a list of the customer's documents and related metadata, as well as any one-to-one or one-to-many relationships between the documents and metadata. An embodiment can always provide customers with an accurate &#x201c;picture&#x201d; of their document collection, regardless of whether their devices physically contain the documents. As alluded to earlier, a problem with distributed file systems and FTP is the latency between a file being put onto a file system and it showing up on a remote machine. To prevent this problem, an embodiment directory is decoupled from the movement of files. An embodiment's directory update system updates at a higher priority than the documents to be synchronized. This feature ensures that when a customer browses or searches through his set of documents, they appear even if they have not yet been cached locally on the user device. An indicator signifying a document's availability may be prominently displayed adjacent to the document's representation so that customers are aware of the document's availability.</p><p id="p-0043" num="0045">An embodiment may include a stand-alone application that allows customers to find and manage documents associated with transfer clients <b>310</b>, <b>320</b> by visualizing relationships between documents and their metadata. It allows customers to tag documents with any number of identifiers. Customers can relate both documents and tags with each other in any number of user-specified one-to-one and one-to-many relationships, and an embodiment provides a user interface to browse and search on these relationships. To mitigate the customers' learning curve, an embodiment can implement relationships common to contemporary file systems, including a folder hierarchy. In addition to this, an embodiment provides direct support for methods that the customer uses to organize documents by manifesting them as user interface idioms. This is unlike conventional document filing systems which require the customer to work within a strict folder metaphor for organization.</p><p id="p-0044" num="0046">Some alternate methods that an embodiment supports for organizing documents include:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0047">Allow customers to organize their documents by application. Many times customers remember the application used to create a document instead of the document's name or its location in a hierarchy.</li>        <li id="ul0004-0002" num="0048">Allow customers to organize their documents by most recent access. Customers are likely to access a document they've accessed in the near past. Usually, such documents are part of a task that the customer is actively working.</li>        <li id="ul0004-0003" num="0049">Allow customers to organize their documents by project or subproject.</li>        <li id="ul0004-0004" num="0050">Allow customers to organize their documents by people. Many times, especially in the context of a collaboration, a document is directly related to one or more people other than the customer.</li>        <li id="ul0004-0005" num="0051">Allow the customer to organize their document by process stage. Documents may represent one or more stages of a process. Customers need a method for organizing documents by process stage, and a mechanism for moving the document through a set of predefined stages.</li>        <li id="ul0004-0006" num="0052">Allow customers to organize their documents by any of the aforementioned methods concurrently. These organization methods are not mutually exclusive.</li>    </ul>    </li></ul></p><p id="p-0045" num="0053">An embodiment presents an interface that allows a customer to locate one or more documents associated with the transfer clients <b>310</b>, <b>320</b> and open such document into a separate software application. Since this interface is intended to be used from within the separate application, that application may need to know how to invoke such interface. Advantageously, this invocation behavior can be provided to the application using the application's plug-in API.</p><p id="p-0046" num="0054">An embodiment presents an interface that allows a customer to synchronize a currently opened document according to processes described elsewhere herein. This interface can be invoked within an application and can be made available to the application in the manner described above in connection with the application's plug-in API.</p><p id="p-0047" num="0055">Some files associated with the transfer clients <b>310</b>, <b>320</b> are dependent on other files associated with the transfer clients <b>310</b>, <b>320</b>. For example, a desktop publishing document may include images that are stored in files separate from the main document. Previous file-synching solutions treat these files as separate. Because of this, for example, a document synchronized from the device <b>210</b> to the device <b>280</b> may be opened by the user of the device <b>280</b> before the image files have been fully transferred to the device <b>280</b>. This causes the document to fail to open, or break, since the image files don't exist or are incomplete. An embodiment prevents this by: (1) always ensuring the file catalog (e.g., the stand-alone application that allows customers to find and manage documents associated with transfer clients <b>310</b>, <b>320</b>, as discussed above herein) is synchronized before any file data is synchronized, and (2) pausing any file access by any program until the file contents have been fully synchronized. In such an embodiment, if a user attempts, using a software program, to open a file whose related files haven't yet finished transferring to the local (hard drive) cache, if that software attempts to open the related files, the software program is blocked by an embodiment until the requested files are downloaded and ready to access.</p><p id="p-0048" num="0056">Other file sending and synchronizing software requires the user to upload their data to a storage device owned by the operator of the service. An embodiment treats storage as a participant in the synchronization process; this means that the user can choose the service or device where their files will be stored. The file transfer/synching is abstracted from the storage system allowing any storage to be used. An embodiment treats storage like any other synch target, such as a desktop computer, or a cell phone. As such, any device owned or otherwise controlled by the user and running a synch application, such as synch application <b>380</b>, as provided in an embodiment of the invention can perform the storage and/or synching functions described elsewhere herein. That is, the user device <b>280</b> or user device <b>210</b>, rather than the server <b>230</b>, may perform such functions.</p><p id="p-0049" num="0057">While a preferred embodiment of the invention has been illustrated and described, as noted above, many changes can be made without departing from the spirit and scope of the invention. For example, as an alternative to the approach described with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, wherein the transfer clients <b>310</b>, <b>320</b> function to &#x201c;push&#x201d; modified or created files to the synch application <b>380</b>, the synch application <b>380</b> may instead function to periodically &#x201c;pull&#x201d; or otherwise actively retrieve such files from the transfer clients <b>310</b>, <b>320</b> Instead, the invention should be determined entirely by reference to the claims that follow.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A server system, comprising:<claim-text>at least one memory storing one or more instructions; and</claim-text><claim-text>at least one processor configured to execute the one or more instructions to:<claim-text>selectively execute a first application, the first application configured to communicate with a second application executable on a first electronic device and a third application executable on a second electronic device, each of the first application, the second application and the third application associated with a user account;</claim-text><claim-text>receive from the second application a copy of a first electronic file automatically transferred from the second application in response to a modification to content of the first electronic file;</claim-text><claim-text>receive from the third application a copy of a second electronic file automatically transferred from the third application in response to a modification to content of the second electronic file;</claim-text><claim-text>automatically transfer the copy of the first electronic file to the second electronic device to provide a newer version of the first electronic file to the second electronic device, the newer version of the first electronic file having the modified content of the first electronic file; and</claim-text><claim-text>automatically transfer the copy of the second electronic file to the first electronic device to provide a newer version of the second electronic file to the first electronic device, the newer version of the second electronic file having the modified content of the second electronic file.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The server according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to execute the one or more instructions to automatically receive the copy of the first electronic file from the second application in response to a save operation performed on the modified first electronic file.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The server according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least one of the first electronic device or the second electronic device is a laptop or a mobile phone.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The server according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first electronic file and the second electronic file are word processing documents.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The server according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the newer version of the first electronic file is transmitted to the second electronic device based on the second electronic device being selected as a destination by the user account.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The server according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the newer version of the second electronic file is transmitted to the first electronic device based on the first electronic device being selected as a destination by the user account.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The server according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the newer version of the first electronic file is transmitted to the second electronic device based on a user initiated event.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The server according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the user initiated event is a saving operation performing of the first electronic file.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The server according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the newer version of the first electronic file is transmitted to the second electronic device based on a system initiated event.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The server according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the system initiated event is re-initiation of a communication session between the server system and the second electronic device.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. An apparatus comprising:<claim-text>at least one memory storing one or more instructions; and</claim-text><claim-text>at least one processor configured to execute the one or more instructions to:<claim-text>execute a first application, the first application configured to communicate with a second application executable on a first mobile electronic device and a third application executable on a second mobile electronic device, each of the first application, the second application and the third application,</claim-text><claim-text>receive from the second application a copy of a first electronic file automatically transferred from the second application based on a modification to content of the first electronic file;</claim-text><claim-text>receive from the third application a copy of a second electronic file automatically transferred from the third application based on a modification to content of the second electronic file;</claim-text><claim-text>transfer the copy of the first electronic file copy to the second mobile electronic device to provide a newer version of the first electronic file corresponding to the first electronic file stored on the second mobile electronic device, the newer version of the first electronic file having the modified content of the first electronic file; and</claim-text><claim-text>transfer the copy of the second electronic file copy to the first mobile electronic device to provide a newer version of the second electronic file corresponding to the second electronic file stored on the first mobile electronic device, the newer version of the second electronic file having the modified content of the second electronic file.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>