<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007106A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007106</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17930696</doc-number><date>20220908</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>22</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>49</main-group><subgroup>90</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>49</main-group><subgroup>60</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>74</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>2425</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>182</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>245</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>13</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>90</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>25</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2458</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>903</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>22</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>49</main-group><subgroup>90</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>49</main-group><subgroup>602</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>38</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>74</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>2433</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>182</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>245</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>134</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>90</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>254</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2471</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>90344</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>1</main-group><subgroup>0066</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">CONFIGURABLE PARSER AND A METHOD FOR PARSING INFORMATION UNITS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17247147</doc-number><date>20201201</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11445051</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17930696</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16435266</doc-number><date>20190607</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10863009</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17247147</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>14594137</doc-number><date>20150111</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10320956</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16435266</doc-number></document-id></child-doc></relation></continuation><continuation-in-part><relation><parent-doc><document-id><country>US</country><doc-number>14027257</doc-number><date>20130916</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>9444914</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>14594137</doc-number></document-id></child-doc></relation></continuation-in-part></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Amazon Technologies, Inc.</orgname><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Naaman</last-name><first-name>Ofer</first-name><address><city>Hod-Hasharon</city><country>IL</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Izenberg</last-name><first-name>Erez</first-name><address><city>Tel Aviv</city><country>IL</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Bshara</last-name><first-name>Nafea</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A packet processing technique can include receiving a packet, and parsing the packet based on a protocol field to generate a parse result vector. The parse result vector is used to select between forwarding the packet to a virtual machine executing on a host processing integrated circuit, forwarding the packet to a physical media access controller, multicasting the packet to multiple virtual machines executing on the host processing integrated circuit, and sending the packet to a hypervisor.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="108.03mm" wi="158.75mm" file="US20230007106A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="240.71mm" wi="172.47mm" file="US20230007106A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="246.97mm" wi="141.90mm" orientation="landscape" file="US20230007106A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="246.97mm" wi="147.49mm" orientation="landscape" file="US20230007106A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="252.81mm" wi="129.12mm" orientation="landscape" file="US20230007106A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="238.76mm" wi="152.48mm" orientation="landscape" file="US20230007106A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="233.43mm" wi="157.48mm" orientation="landscape" file="US20230007106A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="239.69mm" wi="112.52mm" orientation="landscape" file="US20230007106A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="160.95mm" wi="135.30mm" orientation="landscape" file="US20230007106A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="212.94mm" wi="165.02mm" file="US20230007106A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="251.54mm" wi="129.88mm" orientation="landscape" file="US20230007106A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="222.84mm" wi="152.48mm" file="US20230007106A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="184.15mm" wi="182.63mm" file="US20230007106A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="198.37mm" wi="103.04mm" orientation="landscape" file="US20230007106A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="201.85mm" wi="132.84mm" orientation="landscape" file="US20230007106A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="200.24mm" wi="133.18mm" orientation="landscape" file="US20230007106A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="185.76mm" wi="154.43mm" orientation="landscape" file="US20230007106A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="235.37mm" wi="169.67mm" file="US20230007106A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 17/247,147, filed Dec. 1, 2020, issued as U.S. Pat. No. 11,445,051 on Sep. 13, 2022, and titled &#x201c;CONFIGURABLE PARSER AND A METHOD FOR PARSING INFORMATION UNITS&#x201d;, which is a continuation of U.S. patent application Ser. No. 16/435,266, filed Jun. 7, 2019, issued as U.S. Pat. No. 10,863,009 on Dec. 8, 2020, and titled &#x201c;GENERIC DATA INTEGRITY CHECK&#x201d;, which is a continuation of U.S. patent application Ser. No. 14/594,137, filed Jan. 11, 2015, issued as U.S. Pat. No. 10,320,956 on Jun. 11, 2019, and titled &#x201c;GENERIC DATA INTEGRITY CHECK&#x201d;, which is a continuation-in-part of U.S. patent application Ser. No. 14/027,257, filed Sep. 16, 2013, issued as U.S. Pat. No. 9,444,914 on Sep. 13, 2016, and titled &#x201c;CONFIGURABLE PARSER AND A METHOD FOR PARSING INFORMATION UNITS&#x201d;, all of which are incorporated herein by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Converged Network Adapter supports reception and transmission of multiple protocols at the same time, in some cases the protocols are encapsulated using tunneling protocols (for example Fibre Channel over Ethernet (FCoE), Internet Protocol (IP) over IP, Generic Routing Encapsulation (GRE), and the like), proprietary protocols and packet formats are also used together with standard protocols.</p><p id="p-0004" num="0003">There is a growing need to provide protection to data transmitted and to provide end-to-end data integrity using a protocol out of a plurality of available protocols.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0005" num="0004">According to an embodiment of the invention various methods may be provided and may be described in the specification. Additional embodiments of the invention include a system configured to execute any or all of the methods.</p><p id="p-0006" num="0005">According to an embodiment of the invention a system may be provide and may include a configurable parser that may include one or more configurable parsing engines, wherein the configurable parser may be arranged to receive a packet and to extract from the packet headers associated with a set of protocols that may include at least one protocol; a packet type detection unit that may be arranged to determine a type of the packet in response to the set of protocols; and a configurable data integrity unit that may include a configuration unit and at least one configurable data integrity engine; wherein the configuration unit may be arranged to configure the at least one configurable data integrity engine according to the set of protocols; and wherein the at least one configurable data integrity engine may be arranged to perform data integrity processing of the packet to provide at least one data integrity result. The parser may be a hardware processor (CPU, DSP, FPGA) or be executed by such a hardware processor.</p><p id="p-0007" num="0006">The at least one configurable data integrity engine may include multiple configurable data integrity engines.</p><p id="p-0008" num="0007">The set of protocol may include a plurality of protocols and wherein the configuration unit may be arranged to configure different configurable data integrity engines of the multiple configurable data integrity engines to different protocols of the plurality of protocols.</p><p id="p-0009" num="0008">The at least two configurable data integrity engines of the multiple configurable data integrity engines may be arranged to perform data integrity processing in parallel to each other.</p><p id="p-0010" num="0009">The configuration unit may be arranged to configure the multiple configurable data integrity engines by providing to each configurable data engine configuration information.</p><p id="p-0011" num="0010">The configuration information may include masking information for masking bits of the packet.</p><p id="p-0012" num="0011">The configuration information may include masking information for (a) masking variant bits of the packet that may be changed during a propagation of the packet through a network, and for (b) unmasking non-variant bits of the packet.</p><p id="p-0013" num="0012">The system may be arranged to perform an end-to-end data integrity check.</p><p id="p-0014" num="0013">The system may be arranged to perform the end-to-end data integrity check by ignoring variant bits of the packet that may be changed during a propagation of the packet through a network and processing non-variant bits of the packet that may be expected not to be changed during the propagation of the packet through the network.</p><p id="p-0015" num="0014">The configurable data integrity unit may be coupled between a media access control module and a communication endpoint adaptor.</p><p id="p-0016" num="0015">The configurable parser may include multiple configurable parsing engines; wherein different portions of an information unit may be processed by different configurable parsing engines; and wherein at least one configurable parsing engine may be configured to (a) process of a portion of the information unit in response to at least previous processing result provided from a previous configurable parsing engine; and to (b) generate a current processing result to be used by a next configurable parsing engine.</p><p id="p-0017" num="0016">The multiple configurable parsing engines and concatenating modules form a first interleaved sequence; wherein each parsing engine may be followed by a concatenating module.</p><p id="p-0018" num="0017">According to an embodiment of the invention there may be provided a method that may include receiving a packet; detecting, by a configurable parser, a type of the packet that may be indicative of a protocol set that may be associated with the packet; wherein the configurable parser may include a configurable data integrity unit; extracting and parsing, by the configurable parser, each header of each protocol of the set of protocols; configuring one or more data integrity engines of the configurable data integrity unit according to the type of the packet; wherein the configuring may be executed by a configuration unit of the configurable data integrity unit; extracting from the packet at least one packet portion to be data integrity processed; performing, by at least one configurable data engine of the configurable parser, data integrity processing of the extracted one or more portion of the packet to provide data integrity results; and responding to the data integrity results.</p><p id="p-0019" num="0018">The set of protocol may include a plurality of protocols; wherein the one or more data integrity engines may include multiple data integrity engines; wherein the configuring of the one or more configurable data integrity engine may include configuring different configurable data integrity engines of the plurality of configurable data integrity engines to different protocols of the multiple protocols.</p><p id="p-0020" num="0019">The performing of the data integrity processing may include performing by at least two configurable data integrity engines of the multiple configurable data integrity engines integrity processing in parallel to each other.</p><p id="p-0021" num="0020">The method may include configuring the multiple configurable data integrity engines by providing to each configurable data engine configuration information.</p><p id="p-0022" num="0021">The configuration information may include masking information for masking bits of the packet.</p><p id="p-0023" num="0022">The configuration information may include masking information for (a) masking variant bits of the packet that may be changed during a propagation of the packet through a network, and for (b) unmasking non-variant bits of the packet.</p><p id="p-0024" num="0023">The data integrity results may be indicative of an outcome of an end-to-end data integrity check.</p><p id="p-0025" num="0024">The method may include ignoring variant bits of the packet that may be changed during a propagation of the packet through a network and processing non-variant bits of the packet that may be expected not to be changed during the propagation of the packet through the network.</p><p id="p-0026" num="0025">The configurable parser may include multiple configurable parsing engines; wherein different portions of an information unit may be processed by different configurable parsing engines; and the method may include (a) processing, by a configurable parsing engine, a portion of the information unit in response to at least previous processing result provided from a previous configurable parsing engine; and to (b) generating, by the configurable parsing engine, a current processing result to be used by a next configurable parsing engine.</p><p id="p-0027" num="0026">The multiple configurable parsing engines and concatenating modules may form a first interleaved sequence; wherein each parsing engine may be followed by a concatenating module.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0028" num="0027">The subject matter regarded as the invention is particularly pointed out and distinctly claimed in the concluding portion of the specification. The invention, however, both as to organization and method of operation, together with objects, features, and advantages thereof, may best be understood by reference to the following detailed description when read with the accompanying drawings in which:</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a system according to an embodiment of the invention;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref> illustrate various Direct Memory Access Controllers (DMAs) of the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref> and their environments according to various embodiments of the invention;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an Ethernet Parsing Engine according to an embodiment of the invention;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>4</b></figref> provides an example of a processing operation of an information unit that is a TCP/IP frame that is processed by multiple configurable parsing engines;</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a configurable parsing engine <b>280</b>(<b>1</b>,<b>1</b>) according to an embodiment if the invention;</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a Ethernet Segmentation Engine according to an embodiment of the invention;</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates programmable header builder according to an embodiment of the invention;</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates various examples of frames that were modified by the programmable header builder according to various embodiments of the invention;</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates an Ethernet flow steering engine according to an embodiment of the invention;</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates a method according to an embodiment of the invention;</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a method according to an embodiment of the invention;</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a packet that includes an outer header and an inner header;</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates a packet that includes an outer header and an inner header and a parsing and packet type detection process according to an embodiment of the invention;</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates a data integrity unit that includes a configuration unit and multiple data integrity engines according to an embodiment of the invention;</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates a packet and a data integrity process according to an embodiment of the invention; and</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>16</b></figref> illustrates an offset calculator according to an embodiment of the invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0045" num="0044">It will be appreciated that for simplicity and clarity of illustration, elements shown in the figures have not necessarily been drawn to scale. For example, the dimensions of some of the elements may be exaggerated relative to other elements for clarity. Further, where considered appropriate, reference numerals may be repeated among the figures to indicate corresponding or analogous elements.</p><heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE DRAWINGS</heading><p id="p-0046" num="0045">In the following detailed description, numerous specific details are set forth in order to provide a thorough understanding of the invention. However, it will be understood by those skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known methods, procedures, and components have not been described in detail so as not to obscure the present invention.</p><p id="p-0047" num="0046">The subject matter regarded as the invention is particularly pointed out and distinctly claimed in the concluding portion of the specification. The invention, however, both as to organization and method of operation, together with objects, features, and advantages thereof, may best be understood by reference to the following detailed description when read with the accompanying drawings.</p><p id="p-0048" num="0047">It will be appreciated that for simplicity and clarity of illustration, elements shown in the figures have not necessarily been drawn to scale. For example, the dimensions of some of the elements may be exaggerated relative to other elements for clarity. Further, where considered appropriate, reference numerals may be repeated among the figures to indicate corresponding or analogous elements.</p><p id="p-0049" num="0048">Because the illustrated embodiments of the present invention may for the most part, be implemented using electronic components and circuits known to those skilled in the art, details will not be explained in any greater extent than that considered necessary as illustrated above, for the understanding and appreciation of the underlying concepts of the present invention and in order not to obfuscate or distract from the teachings of the present invention.</p><p id="p-0050" num="0049">Any reference in the specification to a method should be applied mutatis mutandis to a system capable of executing the method.</p><p id="p-0051" num="0050">Any reference in the specification to a system should be applied mutatis mutandis to a method that may be executed by the system.</p><p id="p-0052" num="0051">MAC stands for media access control.</p><p id="p-0053" num="0052">DMA stands for direct access memory.</p><p id="p-0054" num="0053">PCS stands for</p><p id="p-0055" num="0054">PCI stands for Peripheral Component Interconnect.</p><p id="p-0056" num="0055">PMA stands for program memory area.</p><p id="p-0057" num="0056">TX stands for transmit.</p><p id="p-0058" num="0057">RX stands for receive.</p><p id="p-0059" num="0058">TCP stands for transmission control protocol.</p><p id="p-0060" num="0059">UDP stands for user datagram protocol.</p><p id="p-0061" num="0060">IPv4 stands for Internet Protocol version 4.</p><p id="p-0062" num="0061">CPU stands for central processing unit.</p><p id="p-0063" num="0062">ALU stands for algorithmic processing unit.</p><p id="p-0064" num="0063">OS stands for operating system.</p><p id="p-0065" num="0064">VLAN stands for virtual local access network.</p><p id="p-0066" num="0065">In the following text some examples refer to Cyclic Redundancy Check (CRC). The CRC is provided only as a non-limiting example of a data integrity process.</p><p id="p-0067" num="0066">Network equipment that uses the network adapter as end user (such as compute or storage servers) and network equipment that forward packets (such as switches and routers) sometimes preforms packet processing which include modification of some packet fields.</p><p id="p-0068" num="0067">Network equipment can also calculate and modify Cyclic Redundancy Check (CRC) and checksum fields when performing packet processing.</p><p id="p-0069" num="0068">It is common for network adapter to perform byte crunching operations like CRC and checksum to reduce software and/or Central Processing Unit (CPU) and memory load. For example:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0069">a. Ethernet layer two frame check sequence (L2 PCS) is calculated in the Media Access Control (MAC) logic in the network adapter (inserted in a transmitted packet and verified in a received packet).</li>    <li id="ul0001-0002" num="0070">b. Layer 3 Internet protocol version 4&#x2014;(L3 Pv4) checksum.</li>    <li id="ul0001-0003" num="0071">c. Layer 4 Transmission Control Protocol (L4 TCP) checksum.</li></ul></p><p id="p-0070" num="0072">Additional network protocols adds more CRC fields that are used to protect the packet header and payload, these protocol can be used together with standard L2/L3/L4 protocols and can also be encapsulated with tunneling protocols (such as GRE).</p><p id="p-0071" num="0073">Examples for such additional protocols include FCoE (Fiber Channel over Ethernet) and RoCE (RDMA over converged Ethernet).</p><p id="p-0072" num="0074">Different protocols may also use different CRC calculations (polynomials) for example&#x2014;CRC32 vs CRC32c.</p><p id="p-0073" num="0075">There may be also a need to add additional fields that can also be used for end-to-end integrity checks, these are used to verify that the payload and some of the header fields are not changed when the packet is forwarded through the network.</p><p id="p-0074" num="0076">Note that some of the packet data and header fields can be modified, the end-to-end integrity check is used to verify that the while some fields are modified the relevant fields (data and header) are not changed.</p><p id="p-0075" num="0077">The integrity function can be CRC or HMAC (Hash based Message Authentication Code), Secure Hash Algorithm (SHA) etc.</p><p id="p-0076" num="0078">Any additional standard or proprietary protocol can introduce additional protection (or data integrity) fields with different integrity functions such as CRC, HMAC, etc. The usage of these additional protection fields is to provide more protection for specific fields, payload or both.</p><p id="p-0077" num="0079">Additional protection fields can be inserted also to provide end to end data integrity and protection, in some examples these protection (or data integrity) fields can be part of the payload, this ensures that standard equipment will not modify these fields and only the end user uses it to validate the payload. These fields can also include other protection information and not just CRC.</p><p id="p-0078" num="0080">Current Network adapters which support RDMA or other protocols which use DDP (direct data placement) implement standard RDMA protocol or proprietary RDMA or DDP with dedicated logic, these implementations targeting specific markets with a selected protocols. A network processor or general purpose CPU can also be used to process these protocols, in this case the implementation can be more generic but reduces the performance, increase the latency, require much more power, and not cost effective.</p><p id="p-0079" num="0081">Converged Network Adapter supports reception and transmission of multiple protocols at the same time, in some cases the protocols are encapsulated using tunneling protocols (for example FCoE, IP over IP, GRE, etc.) these network adapter can also support full implementation or acceleration for RDMA protocols and DDP (direct data placement).</p><p id="p-0080" num="0082">There is provided a method for performing data integrity processing by a configurable data integrity unit that is generic and may be configured to perform data integrity processing of any protocol (including standard protocols and/or proprietary protocols). Due to its configurable nature the data integrity unit may support future protocol, future protocol extensions and future protocol modifications.</p><p id="p-0081" num="0083">The data integrity unit may be configured according to one out of multiple configurations&#x2014;depending upon the received data to be data integrity processed. Any configuration may determine how the data integrity unit operates.</p><p id="p-0082" num="0084">The configuration may include one or more configuration parameters that can be adjusted to support any protocol and packet format. Non-limiting examples of configuration parameters may include:<ul id="ul0002" list-style="none">    <li id="ul0002-0001" num="0085">a. Offset from start of a packet that marks the start point of data to be data integrity processed.</li>    <li id="ul0002-0002" num="0086">b. Offset from end of a packet that marks the end point of data to be data integrity processed.</li>    <li id="ul0002-0003" num="0087">c. Initial values of any data integrity algorithm to be applied during the data integrity processing.</li>    <li id="ul0002-0004" num="0088">d. One or more masks&#x2014;that may mask one or more portions of the packet and prevent the one or more portions from being data integrity processed. Alternatively&#x2014;a mask may define one or more portions to be data integrity processed.</li>    <li id="ul0002-0005" num="0089">e. Location of one or more data integrity fields that are included in the packet.</li>    <li id="ul0002-0006" num="0090">f. Data integrity processing type (CRC, CRC type, HASH, HMAC, SHA, MD5 etc.).</li></ul></p><p id="p-0083" num="0091">According to an embodiment of the invention there is provided a system that includes (a) a configurable parser that comprises one or more configurable parsing engines, wherein the configurable parser is arranged to receive a packet and to extract from the packet headers associated with a set of protocols that comprises at least one protocol; (b) a packet type detection unit that is arranged to determine a type of the packet in response to the set of protocols; and (c) a configurable data integrity unit that comprises a configuration unit and at least one configurable data integrity engine.</p><p id="p-0084" num="0092">The configuration unit may be arranged to configure the at least one configurable data integrity engine according to the set of protocols.</p><p id="p-0085" num="0093">At least one configurable data integrity engine is arranged to perform data integrity processing of the packet to provide at least one data integrity result.</p><p id="p-0086" num="0094">The configurable parser may be configured to determine the packet type of every received packet&#x2014;based on the parsing result and the combination of all the detected protocols, L2/L3/L4, encapsulation/tunneling protocols, and the configuration unit may configure the configurable data integrity unit according to the type of the packet. The configuration unit can generate different configuration and parameters for each received packet based on the detected packet type.</p><p id="p-0087" num="0095">The data integrity unit may include one or more configurable data integrity engines. In case there are multiple configurable data integrity engines&#x2014;they may work in parallel to each other, independently from each other, in dependency, in serial, and the like. The configuration unit may configure each of the configurable data integrity engines. Alternatively, more than a single configurable data integrity engine may share a same configuration in at least some points in time.</p><p id="p-0088" num="0096">A packet of a certain type may be associated with a set of protocols and there may be provided one or more configurable data integrity engines for the set of protocol. For example&#x2014;each protocol of the set of protocols may be associated with a single protocol of the set of protocols. Yet for another example, one or more configurable data integrity engine may be configured to perform data integrity processing of one protocol of the set of protocols and at another point in time be further configured and perform data integrity processing of another protocol of the set of protocols.</p><p id="p-0089" num="0097">Using multiple data integrity engines in parallel may speed up the processing of packets associated with a set of protocols that includes multiple protocols. This enables supporting multiple packet formats with encapsulations and/or multiple protocols that uses different formats and methods of data protection and data integrity check. The multiple engines can be used for both standard and non-standard protocols concurrently.</p><p id="p-0090" num="0098">According to an embodiment of the invention the method may be applied for providing end-to-end data integrity checks. In some cases where the packets are forwarded between multiple network elements (such as switches and routers) some of the fields of the packets are allowed to be modified. These fields (also called variant fields) may not be data integrity processed during an end-to-end data integrity check.</p><p id="p-0091" num="0099">Examples of variant fields may include (a) Time To Live (TTL) field that is modified by routers, and (b) TCP ports which can be modified when packet goes through NAT (network address and port translation).</p><p id="p-0092" num="0100">On the other hand fields which are not allowed to modified (unless they are corrupted) (are also called invariant fields) can be data integrity processed during end-to-end data integrity checks.</p><p id="p-0093" num="0101">According to an embodiment of the invention one of the configuration parameter relates to a mask. The mask that is described later in the specification may be used to mask (or skip) the variant fields and leave the masked invariant fields to be data integrity processed.</p><p id="p-0094" num="0102">According to an embodiment of the invention end-to-end integrity checks can be executed by configuring the data integrity unit to mask variable fields and process invariable fields.</p><p id="p-0095" num="0103"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates method <b>1000</b> according to an embodiment of the invention. Method <b>1000</b> may include the following stages:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0104">a. Receiving a packet. (<b>1010</b>).</li>    <li id="ul0003-0002" num="0105">b. Detecting a type of the packet (which protocol set is associated with the packet) and extracting and parsing each header of each protocol of the set of protocols. This may include performing different parsing for each protocol of the set of protocols. (<b>1020</b>).</li>    <li id="ul0003-0003" num="0106">c. Configuring one or more data integrity engines of a data integrity unit according to the type of the packet. (<b>1030</b>).</li>    <li id="ul0003-0004" num="0107">d. Extracting from the packet all the packet portions (one or more) to be data integrity processed. (<b>1040</b>).</li>    <li id="ul0003-0005" num="0108">e. Performing data integrity processing of the extracted one or more portion of the packet to provide data integrity results. (<b>1050</b>).</li>    <li id="ul0003-0006" num="0109">f. Responding to the data integrity results. (<b>1060</b>).</li></ul></p><p id="p-0096" num="0110">The responding may include, for example:<ul id="ul0004" list-style="none">    <li id="ul0004-0001" num="0111">i. Forwarding the data integrity results to be used by a next processing entity (a processing engine and/or software) that follows the data integrity unit.</li>    <li id="ul0004-0002" num="0112">ii. For each protocol of the set of protocols, forwarding or trimming the integrity check result related to the protocol to the next processing entity.</li>    <li id="ul0004-0003" num="0113">iii. Forwarding the integrity check results, together with the data, trimming and use for validation, forward to the software.</li>    <li id="ul0004-0004" num="0114">iv. Trimming a portion of the packet that was found to be invalid to reduce memory foot-print or to allow the data to be aligned (for example page-aligned in storage applications).</li></ul></p><p id="p-0097" num="0115"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates method <b>1100</b> according to another embodiment of the invention.</p><p id="p-0098" num="0116">Method <b>1100</b> may include the following stages:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0117">a. Receiving a new packet. (<b>1101</b>).</li>    <li id="ul0005-0002" num="0118">b. Parsing the packet. (<b>1102</b>). This may include, for example&#x2014;detecting L2/L3/L4 protocols (outer header), detecting if the packet is encapsulated/Tunneled and if yes detecting L2/L3/L4 protocols of the inner header. The parsing may also include extracting the offsets of all the headers are also extracted.</li>    <li id="ul0005-0003" num="0119">c. Detecting the packet type and assign a protocol set identifier (<b>1103</b>). The protocol set includes protocols associated with the type of the packet. The assigning may be based on combination of all the detected headers/protocols of the packet.</li>    <li id="ul0005-0004" num="0120">d. Using the assigned protocol set identifier to access a configuration unit. (<b>1104</b>). The configuration unit includes configuration for one or more configurable data integrity engines for this specific set of protocols. The configuration unit can include different configurations for multiple data integrity engines.</li>    <li id="ul0005-0005" num="0121">e. Performing (<b>1105</b>) the data integrity processing (CRC, HASH, etc.). This may involve using the configurations received form the configuration unit.</li>    <li id="ul0005-0006" num="0122">f. Using (<b>1106</b>) data integrity results. This may include one or more or neither one of (a) Inserting calculated CRC in the configurable offset in the packet; (b) Removing a CRC field from the configurable offset in the packet; (c) Comparing the calculated CRC with the received CRC from a configurable offset in the packet; and (d) forwarding the CRC and check result for processing of the next engine or the software.</li></ul></p><p id="p-0099" num="0123"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a packet <b>1200</b> that includes a packet header <b>1201</b>, packet data <b>1210</b> and optional data or CRC field <b>1203</b>. The packet header <b>1201</b> is illustrates as including an outer header <b>1204</b> and an inner header <b>1205</b>. The outer header <b>1204</b> is illustrated as including a L2 header <b>1211</b>, L3 header <b>1212</b>, L4 header <b>1213</b> of a tunneling protocol. The inner header <b>1205</b> is illustrated as including a L2 header <b>1214</b>, L3 header <b>1215</b>, a proprietary header <b>1216</b> and an inner header CRC (denoted &#x201c;optional header CRC) <b>1217</b>.</p><p id="p-0100" num="0124"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates packet header <b>1201</b> and a parsing and packet type detection process according to an embodiment of the invention.</p><p id="p-0101" num="0125">The packet that includes the packet header <b>1210</b> is fed to the parsing engine <b>1301</b> that parses the packet to detect its headers. An example of such a parser is illustrated in <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>4</b></figref>.</p><p id="p-0102" num="0126">The parsing engine (<b>1301</b>) is a configurable parser and may be used to detect all the packet headers, it is used to extract the L2/L3/L4 protocols (standard and non-standard protocol detection), in this process the RDMA can also be identified in one of the network headers.</p><p id="p-0103" num="0127">When tunneling or any other encapsulation method is detected, the inner headers are also parsed and the inner protocols are also detected.</p><p id="p-0104" num="0128">The output of the parser is fed to a packet type detection unit <b>1302</b> that may be (or may include) a CAM memory. The packet type detection unit <b>1302</b> determines the type of the packet based upon the set of protocols associated with the packet&#x2014;each protocol of the set has a header that is identified by the parsing engine <b>1301</b>.</p><p id="p-0105" num="0129">This may involve accessing a protocol sets data structure <b>1303</b> and comparing the protocols associated with the packet with predetermined sets of protocols.</p><p id="p-0106" num="0130">The packet type detection unit <b>1302</b> outputs a protocol set identifier (also referred to a packet type identifier) that is indicative of the type of the packet&#x2014;of the set of protocols associated with the packet.</p><p id="p-0107" num="0131"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates a data integrity unit <b>1400</b> that includes a configuration unit <b>1410</b> and multiple data integrity engines <b>1420</b>(<b>1</b>)-<b>1420</b>(N) according to an embodiment of the invention. N is a positive integer.</p><p id="p-0108" num="0132">The data integrity unit <b>1400</b> may belong to a controller such as Ethernet controller <b>120</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. It may belong, for example, to Ethernet Checksum Engine (ECSE) <b>122</b> and/or to Ethernet forwarding engine (EFE) of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0109" num="0133">The protocol set identifier <b>1310</b> is fed to the configuration unit <b>1410</b> and in turn the configuration unit send configurations (<b>1415</b>(<b>1</b>)-<b>1415</b>(N)) to the N data integrity engines <b>1420</b>(<b>1</b>)-<b>1420</b>(N)&#x2014;thereby configuring each of the data integrity engines to perform data integrity processing on up to N portions of the packet&#x2014;according to up to N protocols associated with the packet.</p><p id="p-0110" num="0134">The N data integrity engines <b>1420</b>(<b>1</b>)-<b>1420</b>(N) may output up to N data integrity results <b>1430</b>(<b>1</b>)-<b>1430</b>(N). Each result may be, for example, a calculated CRC value.</p><p id="p-0111" num="0135">New configurations can be provided to the N data integrity engines <b>1420</b>(<b>1</b>)-<b>1420</b>(N)&#x2014;each packet.</p><p id="p-0112" num="0136">The N data integrity engines <b>1420</b>(<b>1</b>)-<b>1420</b>(N) can be used simultaneously with different configurations on the same packet.</p><p id="p-0113" num="0137">Each of the configurations (<b>1415</b>(<b>1</b>)-<b>1415</b>(N)) may include one or more data integrity parameters:<ul id="ul0006" list-style="none">    <li id="ul0006-0001" num="0138">a. Header offset</li>    <li id="ul0006-0002" num="0139">b. offset</li>    <li id="ul0006-0003" num="0140">c. Function select (for example CRC32/CRC32c/HMAC/SHA/etc.)</li>    <li id="ul0006-0004" num="0141">d. init_value</li>    <li id="ul0006-0005" num="0142">e. trail_size</li>    <li id="ul0006-0006" num="0143">f. header_size+sign</li>    <li id="ul0006-0007" num="0144">g. data_byte_swap</li>    <li id="ul0006-0008" num="0145">h. data_bit_swap</li>    <li id="ul0006-0009" num="0146">l. Result byte_swap</li>    <li id="ul0006-0010" num="0147">J. Result bit_swap</li>    <li id="ul0006-0011" num="0148">k. Result bit_comp (NOT)</li>    <li id="ul0006-0012" num="0149">l. mask+polarity</li></ul></p><p id="p-0114" num="0150"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates a packet <b>1200</b> and a data integrity engine according to an embodiment of the invention.</p><p id="p-0115" num="0151"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates a packet that includes packet data (raw data) <b>1354</b>, a CRC value <b>1355</b> and a header <b>1350</b>. The location of the header is indicated by header offset <b>1351</b> (indicative of the offset from the end of the header to the start of the packet) and a header size field <b>1352</b>. The packet includes a CRC value <b>1355</b>. The location of the CRC value <b>1355</b> is indicated by CRC offset <b>1356</b> (indicative of the offset from the end of the CRC value to the end of the packet).</p><p id="p-0116" num="0152">The raw data <b>1354</b> includes initially selected data <b>1360</b> that is located between a start point pointed by the header offset <b>1353</b> and between an end point pointed by trailer size <b>1353</b>.</p><p id="p-0117" num="0153">The initially selected data <b>1360</b> is masked (black box indicates data that is masked) by mask <b>1361</b> to provide selected data for CRC calculation <b>1362</b> that is fed (with CRC type polynomial <b>1363</b> to CRC calculator <b>1364</b>. The CRC calculator <b>1364</b> outputs a calculated CRC <b>1365</b> that may be compared (by compare unit <b>1366</b>) to the CRC value <b>1355</b> included in the packet to provide CRC validation result <b>1367</b>.</p><p id="p-0118" num="0154">The calculated CRC and/or the CRC validation result <b>1367</b> may be a data integrity result.</p><p id="p-0119" num="0155">Items <b>1351</b>, <b>1352</b>, <b>1353</b>, <b>1356</b>, <b>1361</b> and <b>1363</b> may be a part of the configuration that is sent from the configuration unit <b>1410</b>.</p><p id="p-0120" num="0156">Header Offset and Masking</p><p id="p-0121" num="0157">In some protocols, the offset where to start the data integrity calculation is dynamic and depends on some of the header fields (for example when one or more of the detected headers has variable header size).</p><p id="p-0122" num="0158">In these cases the offset where to start the calculation can be calculated based on the parsing parameters (such as L3/L4 offset, L3/L4 header size, etc.) and additional values that can be protocol specific and can be configured in the configuration unit.</p><p id="p-0123" num="0159">The mask <b>1361</b> may be used to skip (or mask with configurable values) the variant fields while keeping the invariant fields in the calculations.</p><p id="p-0124" num="0160">A variable offset calculation may use a generic ALU engine which can be configured with different commands for each protocol.</p><p id="p-0125" num="0161"><figref idref="DRAWINGS">FIG. <b>16</b></figref> describes a generic ALU which can be used to calculate variable offsets, according to an embodiment of the invention.</p><p id="p-0126" num="0162">The generic ALU may include multiple data inputs that are used as the command arguments, these data inputs can include some of the parsing results (L2/3/4 headers offset, length) and can include additional values which are output of the configuration unit and can vary between different packets with different protocol types.</p><p id="p-0127" num="0163">The ALU also has command (OpCode) inputs which determines which calculation to perform on the data inputs, these commands/OpCodes can be output of the configuration unit and determine different calculation for every packet based on the packet type and the detected protocols.</p><p id="p-0128" num="0164">Either one of method <b>1000</b> and <b>1100</b> may support at least one of the following:<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0165">a. Support data integrity processing of any data integrity function in any protocol (such as multiple CRC types, HASH, etc.).</li>    <li id="ul0007-0002" num="0166">b. Support simultaneous data integrity processing related to multiple protocols related to the same packet.</li>    <li id="ul0007-0003" num="0167">c. Support for data integrity processing of proprietary protocols and proprietary packet formats.</li>    <li id="ul0007-0004" num="0168">d. Support end-to-end data protection.</li>    <li id="ul0007-0005" num="0169">e. Supports differentiating between for variant and invariant fields.</li></ul></p><p id="p-0129" num="0170">Any one of method <b>1000</b> and <b>1100</b> may be implemented in a hardware data path without any CPU intervention and without duplicated hardware as the same hardware engine supports any protocol and headers.</p><p id="p-0130" num="0171">The Parser</p><p id="p-0131" num="0172">There may be provided a system that may include a parser that is configured to handle the dynamic network environment, that is flexible to support multi protocols simultaneously, that is configurable to support any known, proprietary and future protocols. The parser can support multi-layer encapsulation without increasing the complexity of the implementation. The parser may be modular and may support any line rate (from 1 Gbps to hundreds of Gbps), can provide efficient software offload, have a small silicon area and consume low energy.</p><p id="p-0132" num="0173">The parser may include multiple configurable parser engines and concatenating modules. The parser may be configured to perform deeper packet parsing, may increase the number of supported protocols and may keep line rate performance. The parser may include a distribution module for performing load balancing between the configurable parsing engines and enable scaling of the supported data rate.</p><p id="p-0133" num="0174">Each configurable parsing engine may be configurable and enable multi-protocol support. Each configurable parsing engine may be fed with an offset (from initial phase or previous parsing engine), may check a selected portion of an information unit (a protocol payload) in a configurable offset, preform any arithmetic logic on the protocol payload to determine next protocol, checks for header length in a configurable offset, perform any processing (such as arithmetic logic) on the header length to determine the next offset, update a result vector with different header fields, can select which field (configurable offset and length) to store in a result vector to be used by next engine or another module, update control information and statistics to be used by the next engine or another module.</p><p id="p-0134" num="0175">The result vector can hold information such as addresses, priority, etc.</p><p id="p-0135" num="0176">The results vector can hold command for the next parser or a next module (for example a forwarding engine).</p><p id="p-0136" num="0177">The parser may be included in a communication controller such as an Ethernet Controller that may be a high-performance unit responsible for connecting host processor and its memory with the Ethernet world.</p><p id="p-0137" num="0178"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a system <b>100</b> that includes an Ethernet controller <b>120</b> according to an embodiment of the invention.</p><p id="p-0138" num="0179">The system <b>100</b> may include four major blocks: (a) An Ethernet MAC <b>110</b>, with integrated PCS and PMA layer in most cases (Ethernet MAC and PCS); (b) An Ethernet controller <b>120</b> that processes Ethernet packets, and offloads the host to boost system performance; (c) A bus-master scatter-gather DMAs <b>130</b>(<b>1</b>)-<b>130</b>(<b>4</b>) based on the common Universal DMA (UDMA) architecture, The UDMA performs rate shaping and scheduling functions as well, and (d) A PCI Integrated End Point (IEP) unit interface <b>140</b> to the internal I/O fabric.</p><p id="p-0139" num="0180"><figref idref="DRAWINGS">FIG. <b>1</b></figref> also shows XMII <b>101</b> and SERDES <b>102</b> modules as being coupled to Ethernet MAC <b>110</b>.</p><p id="p-0140" num="0181">The IEP unit interface <b>140</b> is shown as including a power management module <b>141</b>, an error management module <b>142</b>, a bus master arbiter towards 1/0 fabric module <b>143</b>, a PCI configuration header module <b>144</b> and a configuration but module <b>145</b>. The configuration bus module <b>145</b> is connected to a configuration bus <b>150</b> that is connected to the DMAs <b>103</b>(<b>1</b>)-<b>130</b>(<b>4</b>) and to the Ethernet MAC <b>110</b>.</p><p id="p-0141" num="0182"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> illustrates part of the connectivity, according to an embodiment of the invention, between the DMAs <b>130</b>(<b>1</b>)-<b>130</b>(<b>4</b>) and the integrated PCI endpoint adaptor <b>140</b> to I/O fabric <b>210</b> and to a CPU complex <b>220</b> that hosts multiple virtual machines VMO-VM<b>3</b> <b>230</b>(<b>0</b>)-<b>230</b>(<b>3</b>).</p><p id="p-0142" num="0183"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> illustrates part of the connectivity, according to an embodiment of the invention, between the DMAs <b>130</b>(<b>1</b>)-<b>130</b>(<b>4</b>) and the integrated PCI endpoint adaptor <b>140</b> to I/O fabric <b>210</b> and to a CPU complex <b>220</b> that includes multiple CPUs <b>240</b>(<b>0</b>)-<b>240</b>(<b>3</b>).</p><p id="p-0143" num="0184">In <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> each DMA is illustrates as including four queues <b>1310</b>-<b>1313</b>, <b>1320</b>-<b>1323</b>, <b>1330</b>-<b>1333</b> and <b>1340</b>-<b>1343</b> respectively. A selection of a destination (CPU or virtual machine) may select which queue will be used to store information units destined to the destination.</p><p id="p-0144" num="0185">Referring back to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the Ethernet controller performs various packet-processing functions to offload the host processor, improve performance, and enforce security.</p><p id="p-0145" num="0186">The HOST processor can be on chip CPU (CPU complex, <b>220</b>) or can be external CPU which is connected to the chip through (for example) PCie interface.</p><p id="p-0146" num="0187">There are two versions of the Ethernet controllers: Standard Ethernet controller and Advanced Ethernet controller.</p><p id="p-0147" num="0188">Standard Ethernet Controller</p><p id="p-0148" num="0189">The Standard Ethernet controller provides common Ethernet functionality in common usage cases, specifically for home, consumer, small to medium business, and development environments.</p><p id="p-0149" num="0190">It supports the functionality described in the following subsections, at all speeds.</p><p id="p-0150" num="0191">Ethernet Checksum Engine (ECSE) <b>122</b></p><p id="p-0151" num="0192">The Ethernet Checksum Engine (ECSE) offloads the host by calculating the IPv4 header checksum and the TCP/UDP checksum.</p><p id="p-0152" num="0193">In the TX direction, The IPv4 and TCP/UDP checksum is inserted to the transmitted packet in a pre-configured offsets based on the parsing information.</p><p id="p-0153" num="0194">Note that when the software sends consecutive packets with the same characteristics, the offsets and control information from the first packet can be stored and used for the next packets.</p><p id="p-0154" num="0195">In the RX direction, the parsing engine provides all the information required for checksum calculation (detected protocols and offsets), the checksum engine calculate the IPv4 and TCP/UDP checksum and compare it to the received value, the result is forwarded to the software in the completion descriptor.</p><p id="p-0155" num="0196">When tunneling is used, the checksum engine can perform the checksum offload for outer packet or the inner packet.</p><p id="p-0156" num="0197">Ethernet Forwarding Engine (EFE) <b>123</b></p><p id="p-0157" num="0198">The Ethernet forwarding engine includes a filtering engine and a flow steering engine.</p><p id="p-0158" num="0199">The Ethernet Filtering Engine performs basic MAC Address and VLAN filtering, permitting only desired traffic to hit host memory. It is responsible for MAC/VLAN spoofing prevention.</p><p id="p-0159" num="0200">Ethernet Flow steering Engine (EFSE)&#x2014;For packets received from the Physical Ethernet MAC in a virtualized environment, the EFSE decides to which virtual machine/OS this packet should go, including multicasting the packet to multiple virtual machines, or sending it to the hypervisor only. In AMP environment the flow steering engine decides to which CPU each packet should go.</p><p id="p-0160" num="0201">The flow steering engine can also perform load balancing to assist performance of a single operation system or single virtual machine that runs on multiple processors (or threads). The ELBE distributes incoming packets from the physical Ethernet ports to the different DMAs, based on pre-defined criteria or based on a load-balancing hash. This distributes traffic loads to multiple processors based on hash or desired affinity.</p><p id="p-0161" num="0202">The EFSE also classifies the packets to traffic classes and Quality of Service (QoS), enabling appropriate QoS treatment.</p><p id="p-0162" num="0203">The output of the parsing engine is used to determine the packet priority, both L2 (VLAN priority) and L3 (IP DSCP/TOS) can be used to determine the packet priority and the target queue.</p><p id="p-0163" num="0204">The output of the forwarding engine is the target DMA and target queue.</p><p id="p-0164" num="0205">Ethernet Modification Engine (EME) <b>124</b> may include an Ethernet VLAN Engine (EVE) <b>125</b>.</p><p id="p-0165" num="0206">The EVE <b>125</b> performs VLAN header modification, generation, and removal.</p><p id="p-0166" num="0207">The VLAN modification command is forwarded to the modification engine in the metadata, the same command can be used to consecutive packets transmitted from the same queue, this feature enables the software to determine one VLAN modification configuration for a specific flow, send it once through a metadata descriptor and the hardware will implement the same command for all consecutive packets without any software load.</p><p id="p-0167" num="0208">Ethernet Switching Engine (ESE) <b>126</b></p><p id="p-0168" num="0209">ESE functionality is required only in a virtualized environment or in an asymmetric multi-processor (AMP) environment. The purpose of the ESE is to provide packet switching between the various Virtual Machines or Operating systems running on the same chip, and the Physical Ethernet MAC.</p><p id="p-0169" num="0210">For packets received from the Physical Ethernet MAC, the ESE decides to which virtual machine/OS this packet should go, including multicasting the packet to multiple virtual machines, or sending it to the hypervisor only.</p><p id="p-0170" num="0211">For an outbound packet, i.e., a packet being transmitted by a given virtual machine or operating system, the ESE decides whether to forward the packet to the physical Ethernet MAC, to another Virtual Machine, or to multicast it to several or all of them.</p><p id="p-0171" num="0212">The ESE and EFSE functionalities are different and complementary: ESE distributes to different operating systems or virtual machines, while EFSE distributes traffic to multiple processors running the same operating system or virtual machine.</p><p id="p-0172" num="0213">Ethernet Inline Cryptography Processor (EICE) <b>127</b></p><p id="p-0173" num="0214">The Ethernet Inline Cryptography Processor (EICE) performs Ethernet traffic encryption and decryption, to ensure confidentiality and/or authenticity of the packets. It supports both 802.1AE as well as CAPWAP crypto frameworks.</p><p id="p-0174" num="0215">Traditionally this function was not performed or was performed by the host processor or a co-processor inside the device, which is not optimal from the performance aspect, due to software involvement, as well as multiple memory copies, and the fact that it wastes power.</p><p id="p-0175" num="0216">The inline cryptographic implementation provides the ideal performance and power saving.</p><p id="p-0176" num="0217">Ethernet Segmentation Engine (ESGE) <b>128</b></p><p id="p-0177" num="0218">The Ethernet controller performs packet segmentation to offload the software driver. The segmentation process is configurable; the offsets of the L2 and L3 headers and the protocol information are forwarded through the metadata.</p><p id="p-0178" num="0219">The software driver may be running on the CPU, in <figref idref="DRAWINGS">FIG. <b>2</b></figref> it can be the CPU complex (<b>220</b>) or the VM&#x2014;virtual machines (<b>230</b>) which are running on the CPUs and also has their own software drivers.</p><p id="p-0179" num="0220">The Segmentation engine stores the original packet header, it is used to build new header with updated fields for each transmitted packet, the engine builds new packet by combining the new generated header and the transmitted data based on the selected Max Segment Size MSS.</p><p id="p-0180" num="0221">The protocols indication inside the descriptor (protocol index) indicates the L3/4 protocol of the packet and determines the type of segmentation.</p><p id="p-0181" num="0222">The Segmentation engine may perform packet segmentation to offload software when transmitting long packets or short packets.</p><p id="p-0182" num="0223">The segmentation engine stores the original header and generates new header for each transmitted packet, the original packet data is segmented to multiple packets based on the configured Maximum Segment Size (MSS). The new headers and segmented data are packetized to generate new packets for transmission.</p><p id="p-0183" num="0224">The Segmented packets may go through the same data path and engines used for standard packets (e.g. checksum, modification etc.).</p><p id="p-0184" num="0225">The segmentation engine is (a) programmable and that will handle the dynamic network environment, (b) flexible to support multi protocols simultaneously, (c) configurable to support any known, proprietary and future protocols, (d) capable of supporting multi-layer encapsulation without increasing the complexity of the implementation, (e) provides efficient software offload, requires small silicon area and has a low power consumption. This achieved by using configurable opcodes which can add/remove/replace/increment the data of the packet header with configurable offsets. So based on the packet information and the L2/3/4 protocols, a different sets of commands is selected to modify the packet header and perform the segmentation.</p><p id="p-0185" num="0226"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates ESGE <b>129</b> according to an embodiment of the invention. It includes (A) a configurable splitter engine <b>610</b> that separates the header form the data (this configurable splitting engine can be included in EPE <b>121</b> ore receiving information about the locations of headers from EPE <b>121</b>), (b) a programmable header builder <b>640</b> that builds new headers for the segmented packet, (c) memory modules <b>620</b> and <b>630</b> for storing headers and data respectively, and (d) generic packet assembler <b>650</b> that combines the new header and data into a new valid packet.</p><p id="p-0186" num="0227">The programmable header builder <b>640</b> may perform a set of generic operations to support any protocol. It detects the packet protocol and split the header information and the payload information. It may receive or generate configurable information per protocol to support for multiple protocol with different offsets, lengths and alignments simultaneously.</p><p id="p-0187" num="0228">The programmable header builder <b>640</b> may take a generic header (with any format, offset and length) and builds a new header using a set of configurable rules. The configurable rules are set of commands that can be used to generate new fields and insert them into the packet header, replace existing fields and delete existing fields.</p><p id="p-0188" num="0229">Each command may support configurable offset and length. Each command can be configured to use existing packet data, new packet data, counters, and stored register information.</p><p id="p-0189" num="0230">The set of commands includes both arithmetic and logic commands.</p><p id="p-0190" num="0231">Any header can be build using multiple sets of commands.</p><p id="p-0191" num="0232">Using different configuration of the command sets and their variables, any protocol can be supported and any header can be build.</p><p id="p-0192" num="0233">This enable supports for:<ul id="ul0008" list-style="none">    <li id="ul0008-0001" num="0234">a. Multiple protocols simultaneously on the same system.</li>    <li id="ul0008-0002" num="0235">b. Standard and proprietary protocols.</li>    <li id="ul0008-0003" num="0236">c. Protocol encapsulation.</li>    <li id="ul0008-0004" num="0237">d. Support for future protocols.</li></ul></p><p id="p-0193" num="0238">The packet assembler <b>650</b> may be configured to read the new header and remaining data to generate new valid packet.</p><p id="p-0194" num="0239"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates programmable header builder <b>640</b> according to an embodiment of the invention.</p><p id="p-0195" num="0240">Programmable header builder <b>640</b> includes: (a) buffer <b>651</b> for storing the current headers of an information unit (such as a sequence of headers <b>661</b>, <b>662</b>, <b>663</b> and <b>664</b>), (b) buffer <b>654</b> for storing the new headers of the information unit (sequence of headers <b>661</b>, <b>662</b>, <b>671</b> and <b>664</b>&#x2014;as header <b>671</b> replaced header <b>663</b>, (c) modification engine ALU <b>652</b> and (d) stored registers and counters <b>653</b>.</p><p id="p-0196" num="0241"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates various examples of frames that were modified by the programmable header builder <b>640</b>.</p><p id="p-0197" num="0242">Ethernet Flow Control Engine (EFCE) <b>129</b></p><p id="p-0198" num="0243">Ethernet defined flow control to support drop-less links. A later standard for supporting Data Center Ethernet (DCE) added support for priority-based flow control (PFC) To support drop-less Ethernet on certain traffic classes only, and enable native FC-o-Ethernet, RDMA-over-Ethernet (RoCE) etc., the Ethernet standards committee added support for priority-flow control, enabling flow control on selected traffic classes, while allowing normal behavior without flow control on traditional Ethernet traffic.</p><p id="p-0199" num="0244">Priority flow control is supported in advanced mode.</p><p id="p-0200" num="0245">Received PFC packet stops transmission for specific queues, the mapping between the priority in the PFC packet and the DMA queues is configurable.</p><p id="p-0201" num="0246">The flow control engine works in both Tx and Rx directions and coordinates between queue status and queue pause in the UDMA, and generation and reception of flow control packets in the Ethernet MAC.</p><p id="p-0202" num="0247">The Ethernet Flow Steering engine selects the target UDMA and target queue to which to forward the received Ethernet packet.</p><p id="p-0203" num="0248">The Target UDMA can be connected to different host or different virtual machines.</p><p id="p-0204" num="0249">The Flow Steering engine uses the output from the parsing engine for the forwarding decisions. It uses information for both the outer and inner packet when tunneling is detected.</p><p id="p-0205" num="0250"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates Ethernet Flow Steering engine <b>900</b> according to an embodiment of the invention.</p><p id="p-0206" num="0251">The Flow steering engine receives the parser information and use it to select where to forward the packet based on the parsing information. It selects the target CPU/OS/Queue. The forwarding control tables (<b>910</b>) gets the protocol information (From the parser) as an input address and the output of these tables are sets of control signals which controls which are used by the selection logic (<b>920</b>) as input to the selection MUXs to select the target CPU and target queue for each packet.</p><p id="p-0207" num="0252">The output of the control tables (<b>910</b>) can also be used for other acceleration engines such as CRC offload to indicate how to process the received packet.</p><p id="p-0208" num="0253">Tx Operation</p><p id="p-0209" num="0254">When the host has an Ethernet packet for transmission it prepares a list of M2S Descriptors and writes them to the selected Tx descriptor ring of the M2S UDMA. Each packet can be represented by one or more descriptors. The packet can include two types of descriptors: buffer descriptors and metadata descriptors. The buffer descriptor includes control information, metadata and a 64-bit pointer to the data buffer. The metadata descriptor includes control information and metadata that can be used for processing the packet.</p><p id="p-0210" num="0255">The UDMA forwards the metadata and the packet data to the Ethernet controller through the stream interface.</p><p id="p-0211" num="0256">The Ethernet controller performs the following operations in the Tx data path.</p><p id="p-0212" num="0257">Tx packet parsing is based on descriptor information.</p><p id="p-0213" num="0258">The software driver writes the parsing parameters and forwarding information in the metadata of the first buffer descriptor (first buffer descriptor, Word_1_metadata[31:0]).</p><p id="p-0214" num="0259">An additional metadata descriptor can be used to write additional parsing and forwarding information for a packet. When the metadata section in the buffer descriptor is not sufficient, the driver prepares these metadata descriptors before the buffer descriptors.</p><p id="p-0215" num="0260">The Ethernet controller stores the last Tx parsing information for each queue (from each UDMA). This information can be used for the following packets that don't include metadata descriptors. (This mode of operation reduces the number of descriptors used when the same metadata is used for consecutive packets).</p><p id="p-0216" num="0261">TX Parsing Engine</p><p id="p-0217" num="0262">The TX Parsing engine receives the metadata information forwarded from the buffer and metadata descriptors.</p><p id="p-0218" num="0263">It has a cache memory per TX Queue (for example the queues of <figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref>) to store the information received from the application in the metadata, the software can modify this memory through register file access or using the M2S metadata descriptors.</p><p id="p-0219" num="0264">This feature can offload the software when transmitting multiple packets in the same queue with the same characteristics, in this case, the software only need to initialize this memory for the first transmitted packet (using metadata descriptor) and the same commands and offsets will be used for the consecutive packets which will only include buffer descriptors.</p><p id="p-0220" num="0265">Ethernet Parsing Engine (EPE) <b>121</b></p><p id="p-0221" num="0266">The Ethernet Parsing Engine (EPE) performs packet parsing to detect packet type, detect all headers (and their offsets) and forward all parsing information to the following processors.</p><p id="p-0222" num="0267">RX Parser</p><p id="p-0223" num="0268">The Parsing engine performs packet parsing to detect the protocol fields and information of the packet. The parser is configurable and can detect up to 32 pre-configured protocols.</p><p id="p-0224" num="0269">The parser engine implements multistage parsing engines to detect tunneling protocol. When tunneling is detected, the information of the outer packet is stored and the next stage of parsing is activated, the next stage parse the inner packet as if it was a standalone packet and can detect any preconfigured protocol.</p><p id="p-0225" num="0270">The parsing information for both outer and inner header is stored and forwarded to the flow steering engine to determine the target queue/host and is forwarded to the software driver through the S2M completion metadata.</p><p id="p-0226" num="0271">The parsing engine starts with an initial configuration and search for configurable data at a configurable offset in the packet. The data shift register is loaded until the selected offset is reached and then the selected data is compared to the preconfigured data. When a match is detected, the command output for this match is used for further processing. The command data includes information about the detected protocol and commands for the next step.</p><p id="p-0227" num="0272">Once a protocol has been detected with end_of_parsing asserted in the command data, the parsing engine completes its operation and forwards the parsed data to the next engine.</p><p id="p-0228" num="0273">The software driver performs the configuration of the compare logic and command output to detect L2/3/4 protocol detection and generate the output parsing information.</p><p id="p-0229" num="0274"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates EPE <b>121</b> according to an embodiment of the invention.</p><p id="p-0230" num="0275">EPE <b>121</b> includes distribution module <b>271</b>, multiple interleaved sequences of configurable parsing engines and concatenating modules and an aggregation module <b>272</b> that collects the output from the multiple interleaved sequences.</p><p id="p-0231" num="0276"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates J interleaved sequences, each includes K concatenating modules and K configurable parsing engines. J and K are positive integers.</p><p id="p-0232" num="0277">The notation <b>280</b>(<i>k,j</i>) refers to the k'th configurable parsing engine of the j'th interleaved sequence (k ranges between 1 and K while j ranges between 1 and J). <figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates configurable parsing engines <b>280</b>(<b>1</b>,<b>1</b>)-<b>280</b>(K,J).</p><p id="p-0233" num="0278">The notation <b>290</b>(<i>k,j</i>) refers to the k'th concatenating module of the j'th interleaved sequence (k ranges between 1 and K while j ranges between 1 and J). <figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates concatenating module <b>290</b>(<b>1</b>,<b>1</b>)-<b>290</b>(K,J).</p><p id="p-0234" num="0279">The distribution module may be configured to distribute information units between the multiple interleaved sequences of configurable parsing engines and concatenating modules. It may apply load balancing or other considerations.</p><p id="p-0235" num="0280">Different portions of an information unit are processed by different configurable parsing engines of a certain interleaved sequence.</p><p id="p-0236" num="0281">At least one configurable parsing engine is configured to (a) process of a portion of the information unit in response to a previous processing result provided from a previous configurable parting engine; and to (b) generate a current processing result to be used by a next configurable parsing engine. The current processing result comprises a command directed to the next configurable parsing engine. A current processing result may be used by anther module of a communication controller. The current processing result may be indicative of an offset to a header length indicator included in a portion of the information unit to be processed by the next configurable parsing engine.</p><p id="p-0237" num="0282"><figref idref="DRAWINGS">FIG. <b>4</b></figref> provides an example of a processing operation of an information unit that is a TCP/IP frame <b>320</b> that is processed by multiple configurable parsing engines.</p><p id="p-0238" num="0283">Each configurable parsing engine may be configured to be configured by receiving information unit portion limit metadata indicative of a location of an information unit portion to be processed by the configurable parsing engine.</p><p id="p-0239" num="0284">Each configurable parsing engine may be configured to be configured by receiving processing metadata indicative of a manner in which the information unit portion should be processed by the configurable parsing engine. The system according to claim <b>1</b>, wherein different configurable parsing engines are configured to process information unit portions that relate to different protocol suit levels.</p><p id="p-0240" num="0285">The TX Direction</p><p id="p-0241" num="0286">All the parsing information is received from the descriptor or pre-configured per queue.</p><p id="p-0242" num="0287">The controllers holds a per queue database with all the parsing information, this information can be dynamically updated by the software driver using metadata descriptor at the head of the transmitted packet or configured using register access.</p><p id="p-0243" num="0288">The controller can also store the metadata information from one packet to be used for following packets, this feature can be used by the software driver when it send multiple packets with the same characteristics to reduce CPU load and memory access load.</p><p id="p-0244" num="0289">In the Rx direction,</p><p id="p-0245" num="0290">The parsing is performed by the hardware, based on received data , pre-configured detected protocol values and offsets.</p><p id="p-0246" num="0291">The parsing engine is preconfigured, it detects the received protocols and write them to the next parsing engine, the detected protocols are also written into the completion descriptor and can be used by the software to detect the L3 and L4 protocols and offsets without doing additional memory access for parsing the packet.</p><p id="p-0247" num="0292">The protocols are forwarded using protocol_index number, which is configured for each detected protocol.</p><p id="p-0248" num="0293">The protocol_index can have the following values:</p><p id="p-0249" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Protocol_index example</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="56pt" align="center"/><colspec colname="2" colwidth="70pt" align="left"/><colspec colname="3" colwidth="91pt" align="left"/><tbody valign="top"><row><entry>Protocol_index</entry><entry/><entry/></row><row><entry>value</entry><entry>Detected protocol</entry><entry>Comments</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="56pt" align="char" char="."/><colspec colname="2" colwidth="70pt" align="left"/><colspec colname="3" colwidth="91pt" align="left"/><tbody valign="top"><row><entry>0</entry><entry>Not Used</entry><entry>Protocol not detected</entry></row><row><entry>1</entry><entry>mac_802_3</entry><entry>Standard 802.3 packet</entry></row><row><entry>2</entry><entry>mac_802_3_ms_8</entry><entry>Standard 802.3 packet, with</entry></row><row><entry/><entry/><entry>MACSEC (8 bytes header)</entry></row><row><entry>3</entry><entry>mac_802_3_ms_16</entry><entry>Standard 802.3 packet, with</entry></row><row><entry/><entry/><entry>MACSEC (16 bytes header)</entry></row><row><entry>4</entry><entry>vlan_1_1</entry><entry>First VLAN detected (one</entry></row><row><entry/><entry/><entry>type, for example 0x8100)</entry></row><row><entry>5</entry><entry>vlan_1_2</entry><entry>First VLAN detected (one</entry></row><row><entry/><entry/><entry>type, for example 0x9100)</entry></row><row><entry>6</entry><entry>vlan_2_1</entry><entry>Second VLAN detected (one</entry></row><row><entry/><entry/><entry>type, for example 0x8100)</entry></row><row><entry>7</entry><entry>vlan_2_2</entry><entry>Second VLAN detected (one</entry></row><row><entry/><entry/><entry>type, for example 0x9100)</entry></row><row><entry>8</entry><entry>ipv4_frag_check</entry><entry>Internal, lPv4 detected</entry></row><row><entry>9</entry><entry>ipv4_no_frag</entry><entry>lPv4 without fragmentation</entry></row><row><entry>10</entry><entry>ipv4_frag</entry><entry>lPv4 with fragmentation</entry></row><row><entry>11</entry><entry>ipv6</entry><entry>lPv6</entry></row><row><entry>12</entry><entry>TCP</entry><entry>TCP</entry></row><row><entry>13</entry><entry>UDP</entry></row><row><entry>14</entry><entry>GRE</entry><entry>GRE</entry></row><row><entry>15</entry><entry>IPv6_over_IPv4</entry><entry>lPv6 over lPv4 detected</entry></row><row><entry>16</entry><entry>LLC</entry></row><row><entry>31</entry><entry>not detected</entry><entry>Protocol not detected</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0250" num="0294">The Ethernet parsing Engine (EPE) performs receive packet parsing to packet type, detect all headers (and their offsets) and forward all parsing information to the next engines in the Ethernet controller pipeline.</p><p id="p-0251" num="0295">The detected L3 and L4 protocols are also written into the Rx Completion Descriptor, and can be used by the software to detect the L3 and L4 protocols and offsets without doing additional memory access for parsing the packet. The EPE can be configured to recognize proprietary protocols that typical Ethernet Switches or FPGA would add to the packet.</p><p id="p-0252" num="0296">The Parser database includes 3 sets of memory structures (see <figref idref="DRAWINGS">FIG. <b>4</b></figref>):<ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0297">a. Compare logic array <b>331</b> an array of values, masks and commands. each line is used to detect a preconfigured protocol.</li>    <li id="ul0009-0002" num="0298">b. Parser control table <b>332</b>&#x2014;a table which includes commands how to process the detected protocol and how to generate the inputs for the next iteration.</li>    <li id="ul0009-0003" num="0299">c. Parse result vector <b>333</b>&#x2014;stores all the parsed information that was saved during the parsing process</li></ul></p><p id="p-0253" num="0300">The parser works in iterative mode, each iteration performs the following operations:</p><p id="p-0254" num="0301">A 16-bit protocol field is selected from the packet (the offset to this field is the result of the previous iteration).</p><p id="p-0255" num="0302">The protocol field along with other result fields from the previous iteration are used as an input to the compare logic array.</p><p id="p-0256" num="0303">The output of the compare logic array is the matching line number which is used as an address to read the parsing command from the parse control table.</p><p id="p-0257" num="0304">Note that if there is no match, the last line is saved as a default for undetected protocols.</p><p id="p-0258" num="0305">The data read from the parse control table is used to process the header, save parsing information to the parse result vector and generate inputs for the next parsing iteration.</p><p id="p-0259" num="0306">Note&#x2014;the parsing command from the parse control table includes an &#x201c;end of parse&#x201d; bit which indicates the end of the parsing process.</p><p id="p-0260" num="0307">The output of the parser is a parse result vector which includes all the parsing information (for example, MAC DA, MAC SA, VLAN tag, IP-SIP, IP-DIP, L3 protocol index, L4 protocol index), this information is used by the forwarding engine and some of the fields are forwarded to the software driver in the metadata fields of the descriptor.</p><p id="p-0261" num="0308">Referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>&#x2014;an information unit <b>320</b> is processed by three configurable parsing engines during first, second and third iterations <b>311</b>, <b>312</b> and <b>313</b>. The information unit includes the following fields: DA <b>321</b>, SA <b>322</b>, VLAN <b>323</b>, ETYPE <b>324</b>, IPv4 Header <b>325</b>, TCP Header <b>326</b> and payload <b>327</b>.</p><p id="p-0262" num="0309">DA <b>321</b> and SA <b>322</b> are detected during processing executed during the first iteration and are sent to the parse result vector <b>333</b>. The first iteration includes determining an offset (Offset to the next protocol=12) to the next protocol (a part of the current processing result) that is fed (by a first concatenating module) a next (second) configurable parsing engine. The first iteration may also include retrieving a current header length from the parser control table <b>332</b>.</p><p id="p-0263" num="0310">VLAN information is detected during processing executed during the second iteration and it is sent to the parse result vector <b>333</b>. The second iteration includes receiving the offset and/or current head length calculated during the first iteration and processing the VLAN information. The second iteration also includes determining an offset (Offset to the next protocol=2) to the next protocol (a part of the current processing result of the second iteration) that is fed (by a second concatenating module) a next (third) configurable parsing engine. The second iteration may also include retrieving a current header length from the parser control table <b>332</b>.</p><p id="p-0264" num="0311">IPv4 header <b>325</b> is detected during processing executed during the third iteration and it is sent to the parse result vector <b>333</b>. The third iteration includes receiving the offset and/or current head length calculated during the second iteration and processing the PIv4 header <b>325</b>. The third iteration also includes determining an offset (Offset to the next protocol=9) to the next protocol (a part of the current processing result of the third iteration) that is fed (by a third concatenating module) a next (fourth) configurable parsing engine. The third iteration may also include retrieving a current header length from the parser control table <b>332</b>.</p><p id="p-0265" num="0312"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a configurable parsing engine <b>280</b>(<b>1</b>,<b>1</b>) according to an embodiment if the invention.</p><p id="p-0266" num="0313">The configurable parsing engine <b>280</b>(<b>1</b>,<b>1</b>) includes parser engine control module <b>410</b>, compare logic and command input module <b>408</b>, built protocol and control data module <b>406</b>, offset select for MUX <b>404</b> and data shift register <b>420</b>.</p><p id="p-0267" num="0314">The data memory (<b>402</b>) stores the packet information (<figref idref="DRAWINGS">FIG. <b>4</b>, <b>320</b></figref>), the Offset select MUX (<b>404</b>) selects the data from the current offset in the packet payload (<b>320</b>) and build the input information (<b>406</b>) which include protocol data and control information to the compare logic and (<b>408</b>) which includes the protocol value table (<b>331</b>) and parse control table (<b>332</b>), the output from this tables is forwarded to the parse engine control (<b>410</b>) which generates the information for the next iterations and the output for the next engine and the result vector (<b>333</b>).</p><p id="p-0268" num="0315">In the transmit (Tx) direction, all the parsing information is coming from the Tx Descriptor or pre-configured per queue.</p><p id="p-0269" num="0316">The Ethernet controller holds a per-queue database with all the parsing information: this information can be dynamically overridden and/or updated by the software driver using metadata Descriptor at the head of the transmitted packet or configured using register access.</p><p id="p-0270" num="0317">The Ethernet controller can also store the metadata information from one transmitted packet to be used for following packets, this feature can be used by the software driver when it is transmitting multiple packets with the same characteristics to reduce CPU load and memory access.</p><p id="p-0271" num="0318">In the advanced Ethernet controller, tunnel packets can be detected and both outer and inner header can be parsed.</p><p id="p-0272" num="0319">The inner packet parsing is performed by a second parsing engine which start header parsing where the first parser detected a tunneling protocol, the first parser forward the initial offset and protocol which is used for the first iteration of the second parser. The first parsing engine can be a configurable parsing engine and the second parsing engine can be a configurable parsing engine that follows it (as illustrated, for example, in <figref idref="DRAWINGS">FIG. <b>3</b></figref>).</p><p id="p-0273" num="0320">The parsing engine performs packet parsing to detect the protocol fields and information of the packet. The parser is configurable and can detect up to 32 pre-configured protocols.</p><p id="p-0274" num="0321">The parser engine implements multistage parsing engines to detect tunneling protocol. When tunneling is detected, the information of the outer packet is stored and the next stage of parsing is activated, the next stage parse the inner packet as if it was a standalone packet and can detect any preconfigured protocol.</p><p id="p-0275" num="0322">The parsing information for both outer and inner header is stored and forwarded to the flow steering engine to determine the target queue/host and is forwarded to the software driver through the S2M completion metadata.</p><p id="p-0276" num="0323">The parsing engine starts with an initial configuration and search for configurable data at a configurable offset in the packet. The data shift register is loaded until the selected offset is reached and then the selected data is compared to the preconfigured data. When a match is detected, the command output for this match is used for further processing. The command data includes information about the detected protocol and commands for the next step.</p><p id="p-0277" num="0324">Once a protocol has been detected with end_of_parsing asserted in the command data, the parsing engine completes its operation and forwards the parsed data to the next engine, the number of iteration is configurable and can't exceed 32 iterations. The software driver performs the configuration of the compare logic and command output to detect L2/3/4 protocol detection and generate the output parsing information using the XXX API and YYY data structuring.</p><p id="p-0278" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Compare logic array</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="77pt" align="left"/><colspec colname="2" colwidth="21pt" align="center"/><colspec colname="3" colwidth="119pt" align="left"/><tbody valign="top"><row><entry/><entry>Size</entry><entry/></row><row><entry>Name</entry><entry>[bits]</entry><entry>Description</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="77pt" align="left"/><colspec colname="2" colwidth="21pt" align="char" char="."/><colspec colname="3" colwidth="119pt" align="left"/><tbody valign="top"><row><entry>Valid</entry><entry>1</entry><entry>Indicates that this line is valid and can</entry></row><row><entry/><entry/><entry>be sued for comparison</entry></row><row><entry>Data_1</entry><entry>16</entry><entry>Data for logic operation</entry></row><row><entry>Mask_1</entry><entry>16</entry><entry>Mask for logic operation</entry></row><row><entry>CMD_1</entry><entry>2</entry><entry>Logic operation:</entry></row><row><entry/><entry/><entry>00 - compare</entry></row><row><entry/><entry/><entry>01 - &#x3c;=</entry></row><row><entry/><entry/><entry>10 - &#x3e;=</entry></row><row><entry/><entry/><entry>11 - ignore</entry></row><row><entry>Branch_id</entry><entry>6</entry><entry>Branch_id value for comparison,</entry></row><row><entry/><entry/><entry>Branch_id data is output from previous</entry></row><row><entry/><entry/><entry>iteration.</entry></row><row><entry/><entry/><entry>The Branch_id can be used to create</entry></row><row><entry/><entry/><entry>branches within the protocol detection</entry></row><row><entry/><entry/><entry>process (for example to distinguish</entry></row><row><entry/><entry/><entry>between first and second VLAN</entry></row><row><entry/><entry/><entry>detection)</entry></row><row><entry/><entry/><entry>Branch_id field is saved between</entry></row><row><entry/><entry/><entry>iteration and each iteration command</entry></row><row><entry/><entry/><entry>can set/clear each bit separately</entry></row><row><entry>Branch_id_mask</entry><entry>6</entry><entry>Mask for the Branch_id comparison</entry></row><row><entry>Stage</entry><entry>3</entry><entry>Stage value for comparison,</entry></row><row><entry/><entry/><entry>Stage data is output from previous</entry></row><row><entry/><entry/><entry>iteration.</entry></row><row><entry/><entry/><entry>The Stage can be used to mark the</entry></row><row><entry/><entry/><entry>protocol layer that is currently being</entry></row><row><entry/><entry/><entry>processed and to distinguish between</entry></row><row><entry/><entry/><entry>protocol values that are used in each</entry></row><row><entry/><entry/><entry>layer.</entry></row><row><entry/><entry/><entry>The stage field is set in each iteration.</entry></row><row><entry>Stage_mask</entry><entry>3</entry><entry>Mask for the Stage comparison</entry></row><row><entry>Output_protocol_index</entry><entry>5</entry><entry>This is the output of the compare logic,</entry></row><row><entry/><entry/><entry>it is used as an address to the parse</entry></row><row><entry/><entry/><entry>control table and used as an value to</entry></row><row><entry/><entry/><entry>mark and signal protocols in the system.</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0279" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="343pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Parse control table</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="105pt" align="left"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="168pt" align="left"/><tbody valign="top"><row><entry/><entry>Size</entry><entry/><entry/></row><row><entry>Name</entry><entry>[bits]</entry><entry>Units</entry><entry>Description</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="343pt" align="center"/><tbody valign="top"><row><entry>Next protocol command</entry></row><row><entry>Indicates how to generate the 16-bits of protocol data for the next iteration comparison</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="105pt" align="left"/><colspec colname="2" colwidth="35pt" align="char" char="."/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="168pt" align="left"/><tbody valign="top"><row><entry>Offset_to_next_protoco 1</entry><entry>6</entry><entry>bytes</entry><entry>Offset to the location of the next protocol data</entry></row><row><entry/><entry/><entry/><entry>The offset is relative to the start location of the</entry></row><row><entry/><entry/><entry/><entry>current header</entry></row><row><entry/><entry/><entry/><entry>(for example, for IPv4, the offset is 7)</entry></row><row><entry>Next_protocol_avail</entry><entry>1</entry><entry>N/A</entry><entry>Indicates that the next protocol data is available</entry></row><row><entry/><entry/><entry/><entry>in the current header</entry></row><row><entry/><entry/><entry/><entry>(for example, for IPv4, the protocol is available,</entry></row><row><entry/><entry/><entry/><entry>&#x2018;1&#x2019;)</entry></row><row><entry>Default_next_protoco1</entry><entry>5</entry><entry>N/A</entry><entry>Protocol index which is used as the next protocol</entry></row><row><entry/><entry/><entry/><entry>index (for next iteration) in case that</entry></row><row><entry/><entry/><entry/><entry>Next_protocol_avail = 0, and the next protocol is</entry></row><row><entry/><entry/><entry/><entry>not available inside the current header</entry></row><row><entry>Prot_wr</entry><entry>1</entry><entry>N/A</entry><entry>Indicates if the protocol index should be written</entry></row><row><entry/><entry/><entry/><entry>into the parse result vector</entry></row><row><entry/><entry/><entry/><entry>(for example, for IPv4, this field is &#x2018;1&#x2019;, the protocol</entry></row><row><entry/><entry/><entry/><entry>index will be written as the L3 protocol index)</entry></row><row><entry>Prot_wr_pointer</entry><entry>10</entry><entry>bytes</entry><entry>Offset where to write the protocol index in the</entry></row><row><entry/><entry/><entry/><entry>parse result vector</entry></row><row><entry>Select_prot_index</entry><entry>1</entry><entry>N/A</entry><entry>Selects which protocol index to write in the parse</entry></row><row><entry/><entry/><entry/><entry>result vector.</entry></row><row><entry/><entry/><entry/><entry>0 - next protocol index</entry></row><row><entry/><entry/><entry/><entry>1 - current protocol index</entry></row><row><entry>Select_header_length</entry><entry>1</entry><entry>N/A</entry><entry>Selects which header length to write in the parse</entry></row><row><entry/><entry/><entry/><entry>result vector.</entry></row><row><entry/><entry/><entry/><entry>0 - next header length</entry></row><row><entry/><entry/><entry/><entry>1 - current header length</entry></row><row><entry>Select_header_offset</entry><entry>1</entry><entry>N/A</entry><entry>Selects which header offset to write in the parse</entry></row><row><entry/><entry/><entry/><entry>result vector.</entry></row><row><entry/><entry/><entry/><entry>0 - next header offset</entry></row><row><entry/><entry/><entry/><entry>1 - current header offset</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="343pt" align="center"/><tbody valign="top"><row><entry>Data command 1</entry></row><row><entry>Select data from the current parsed header and write it to the parse result vector</entry></row><row><entry>(for example when parsing IPv4 header, write the source IP - SIP and destination IP - DIP into the parse result vector)</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="105pt" align="left"/><colspec colname="2" colwidth="35pt" align="char" char="."/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="168pt" align="left"/><tbody valign="top"><row><entry>Offset_to_data_1</entry><entry>9</entry><entry>bits</entry><entry>Offset to the location of the data that should be</entry></row><row><entry/><entry/><entry/><entry>stored,</entry></row><row><entry/><entry/><entry/><entry>The offset is relative to the start location of the</entry></row><row><entry/><entry/><entry/><entry>current header</entry></row><row><entry/><entry/><entry/><entry>(for example, for lPv4, to store the SIP and DIP,</entry></row><row><entry/><entry/><entry/><entry>the offset is 12)</entry></row><row><entry>Data_size_1</entry><entry>9</entry><entry>bits</entry><entry>Size of the field that should be written to the</entry></row><row><entry/><entry/><entry/><entry>parse result vector</entry></row><row><entry/><entry/><entry/><entry>(for example, for lPv4, to store the SIP and DIP,</entry></row><row><entry/><entry/><entry/><entry>the size is 8)</entry></row><row><entry>Data_wr_1</entry><entry>1</entry><entry>N/A</entry><entry>Indicates if the data should be written into the</entry></row><row><entry/><entry/><entry/><entry>parser result vector</entry></row><row><entry>Data_wr_pointer_1</entry><entry>10</entry><entry>bytes</entry><entry>Offset where to write the data in the parse result</entry></row><row><entry/><entry/><entry/><entry>vector</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="343pt" align="center"/><tbody valign="top"><row><entry>Data command 2</entry></row><row><entry>Same as data command 1, allows to write additional field per header into the parse result vector</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="105pt" align="left"/><colspec colname="2" colwidth="35pt" align="char" char="."/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="168pt" align="left"/><tbody valign="top"><row><entry>Offset_to_data_2</entry><entry>9</entry><entry>bits</entry><entry>Offset to the location of the data that should be</entry></row><row><entry/><entry/><entry/><entry>stored,</entry></row><row><entry/><entry/><entry/><entry>The offset is relative to the start location of the</entry></row><row><entry/><entry/><entry/><entry>current header</entry></row><row><entry>Data_size_2</entry><entry>9</entry><entry>bits</entry><entry>Size of the field that should be written to the</entry></row><row><entry/><entry/><entry/><entry>parse result vector</entry></row><row><entry>Data_wr_2</entry><entry>1</entry><entry>N/A</entry><entry>Indicates if the data should be written into the</entry></row><row><entry/><entry/><entry/><entry>parser result vector</entry></row><row><entry>Data_wr_pointer_2</entry><entry>10</entry><entry>bytes</entry><entry>Offset where to write the data in the parse result</entry></row><row><entry/><entry/><entry/><entry>vector</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="343pt" align="center"/><tbody valign="top"><row><entry>Header length command</entry></row><row><entry>Indicates how to calculate the length of the current header (used as an offset for the next header)</entry></row><row><entry>The header length information can come from the current parsed header or the parse control table</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="105pt" align="left"/><colspec colname="2" colwidth="35pt" align="char" char="."/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="168pt" align="left"/><tbody valign="top"><row><entry>Offset_to_header_len</entry><entry>8</entry><entry>bits</entry><entry>Offset to the location of the header length in the</entry></row><row><entry/><entry/><entry/><entry>current header,</entry></row><row><entry/><entry/><entry/><entry>The offset is relative to the start location of the</entry></row><row><entry/><entry/><entry/><entry>current header.</entry></row><row><entry/><entry/><entry/><entry>(for example, for lPv4, the offset is 4)</entry></row><row><entry>Header length size</entry><entry>5</entry><entry>bits</entry><entry>Size of the header length field</entry></row><row><entry/><entry/><entry/><entry>(for example, for lPv4, the size is 4)</entry></row><row><entry>Header_length_units</entry><entry>3</entry><entry>Bit</entry><entry>Indicates how to shift the header length value</entry></row><row><entry/><entry/><entry>shift</entry><entry>from the packet to get header length in units of</entry></row><row><entry/><entry/><entry/><entry>bytes</entry></row><row><entry/><entry/><entry/><entry>(for example, for lPv4, shift will be 2,</entry></row><row><entry/><entry/><entry/><entry>multiplication of 4 because the IHL is in 32-bits</entry></row><row><entry/><entry/><entry/><entry>words)</entry></row><row><entry>Header_length_cmd</entry><entry>4</entry><entry>N/A</entry><entry>Command how to calculate the header length:</entry></row><row><entry/><entry/><entry/><entry>Bit [3] - reserved</entry></row><row><entry/><entry/><entry/><entry>Bit [2] - indicates if the default header length</entry></row><row><entry/><entry/><entry/><entry>from the parse control table should be added or</entry></row><row><entry/><entry/><entry/><entry>not:</entry></row><row><entry/><entry/><entry/><entry>0 - add default</entry></row><row><entry/><entry/><entry/><entry>Bits [1:0] - header length selector:</entry></row><row><entry/><entry/><entry/><entry>00 - use 0</entry></row><row><entry/><entry/><entry/><entry>01 - use from packet data</entry></row><row><entry/><entry/><entry/><entry>10 - use the packet header length data as address</entry></row><row><entry/><entry/><entry/><entry>to header length table 1</entry></row><row><entry/><entry/><entry/><entry>11 - use the packet header length data as address</entry></row><row><entry/><entry/><entry/><entry>to header length table 2</entry></row><row><entry/><entry/><entry/><entry>(if bits [3:0] == &#x2018;0000&#x2019; than the default header</entry></row><row><entry/><entry/><entry/><entry>length is used)</entry></row><row><entry/><entry/><entry/><entry>(for example, for lPv4, the configuration is</entry></row><row><entry/><entry/><entry/><entry>&#x2018;0001&#x2019;)</entry></row><row><entry/><entry/><entry/><entry>(for example, for VLAN, the configuration is</entry></row><row><entry/><entry/><entry/><entry>&#x2018;0000)</entry></row><row><entry>Default_header_length</entry><entry>8</entry><entry>bytes</entry><entry>Default header length value,</entry></row><row><entry/><entry/><entry/><entry>Used based on the Header_length_cmd command</entry></row><row><entry/><entry/><entry/><entry>field.</entry></row><row><entry/><entry/><entry/><entry>(for example, for lPv4, the default header length</entry></row><row><entry/><entry/><entry/><entry>is 0)</entry></row><row><entry/><entry/><entry/><entry>(for example, for VLAN, the default header</entry></row><row><entry/><entry/><entry/><entry>length is 4)</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="343pt" align="center"/><tbody valign="top"><row><entry>Parse control</entry></row><row><entry>Commands and controls for the parser operation</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="105pt" align="left"/><colspec colname="2" colwidth="35pt" align="char" char="."/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="168pt" align="left"/><tbody valign="top"><row><entry>End_of_parsing</entry><entry>1</entry><entry>N/A</entry><entry>End of parsing indication</entry></row><row><entry/><entry/><entry/><entry>1 - Indicates that this is the last header that should</entry></row><row><entry/><entry/><entry/><entry>be parsed</entry></row><row><entry>Next_stage</entry><entry>3</entry><entry>N/A</entry><entry>Next_stage value for the next parsing iteration</entry></row><row><entry>Next_branch_id_set</entry><entry>6</entry><entry>N/A</entry><entry>Indicates how to change the Branch_id field for</entry></row><row><entry/><entry/><entry/><entry>the next iteration</entry></row><row><entry/><entry/><entry/><entry>The Branch_id field is saved between iteration</entry></row><row><entry/><entry/><entry/><entry>and each iteration can change each bit of this</entry></row><row><entry/><entry/><entry/><entry>field.</entry></row><row><entry/><entry/><entry/><entry>The command is per bit</entry></row><row><entry/><entry/><entry/><entry>0 - don't change this bit</entry></row><row><entry/><entry/><entry/><entry>1 - change this bit to the value indicated in</entry></row><row><entry/><entry/><entry/><entry>Next_branch_id_val</entry></row><row><entry>Next_branch_id_val</entry><entry>6</entry><entry>N/A</entry><entry>Indicated the value that should be used if the</entry></row><row><entry/><entry/><entry/><entry>Next_branch_id_set is &#x2018;1&#x2019; (per bit)</entry></row><row><entry>Control_bit_set</entry><entry>8</entry><entry>N/A</entry><entry>Indicates how to change the control field.</entry></row><row><entry/><entry/><entry/><entry>The control field is saved between iteration and</entry></row><row><entry/><entry/><entry/><entry>each iteration can change each bit of this field.</entry></row><row><entry/><entry/><entry/><entry>The command is per bit</entry></row><row><entry/><entry/><entry/><entry>0 - don't change this bit</entry></row><row><entry/><entry/><entry/><entry>1 - change this bit to the value indicated in</entry></row><row><entry/><entry/><entry/><entry>Next_branch_id_val</entry></row><row><entry/><entry/><entry/><entry>At the end of the parsing, The control field (8</entry></row><row><entry/><entry/><entry/><entry>bits) is written into the result vector.</entry></row><row><entry/><entry/><entry/><entry>(for example, A bit can be set in the control field</entry></row><row><entry/><entry/><entry/><entry>to indicate if a VLAN is detected)</entry></row><row><entry>Control_bit_val</entry><entry>8</entry><entry>N/A</entry><entry>Indicated the value that should be used if the</entry></row><row><entry/><entry/><entry/><entry>Control_bit_set is &#x2018;1&#x2019; (per bit)</entry></row><row><entry>Wr_header_length</entry><entry>1</entry><entry>N/A</entry><entry>Indicates if the header length should be written</entry></row><row><entry/><entry/><entry/><entry>into the parse result vector</entry></row><row><entry/><entry/><entry/><entry>(for example, for IPv4, this field is &#x2018;l&#x2019;, the header</entry></row><row><entry/><entry/><entry/><entry>length will be written as the L3_header_len)</entry></row><row><entry>Header_length_pointer</entry><entry>10</entry><entry>bytes</entry><entry>Offset where to write the header length in the</entry></row><row><entry/><entry/><entry/><entry>parse result vector</entry></row><row><entry>Wr_header_offset</entry><entry>1</entry><entry>N/A</entry><entry>Indicates if the header offset should be written</entry></row><row><entry/><entry/><entry/><entry>into the parse result vector</entry></row><row><entry/><entry/><entry/><entry>(for example, for IPv4, this field is &#x2018;l&#x2019;, the header</entry></row><row><entry/><entry/><entry/><entry>offset will be written as the L3_offset)</entry></row><row><entry>Header_offset_pointer</entry><entry>10</entry><entry>bytes</entry><entry>Offset where to write the header offset in the</entry></row><row><entry/><entry/><entry/><entry>parse result vector</entry></row><row><entry>Next_parse_en</entry><entry>1</entry><entry>N/A</entry><entry>Indicates if the next parser is enabled</entry></row><row><entry/><entry/><entry/><entry>This enables the tunnelled packet parsing, when</entry></row><row><entry/><entry/><entry/><entry>tunnelling protocol is detected this bit enables the</entry></row><row><entry/><entry/><entry/><entry>next parser operation to parse the inner header of</entry></row><row><entry/><entry/><entry/><entry>the packet.</entry></row><row><entry/><entry/><entry/><entry>Note: This is only applicable for advanced</entry></row><row><entry/><entry/><entry/><entry>Ethernet controller</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0280" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 4</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Parser output, Parse result vector</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="77pt" align="left"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="105pt" align="center"/><tbody valign="top"><row><entry/><entry>Width</entry><entry/></row><row><entry>Name</entry><entry>[bits]</entry><entry>Description</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="77pt" align="left"/><colspec colname="2" colwidth="35pt" align="char" char="."/><colspec colname="3" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>input_prot_index</entry><entry>5</entry><entry>Input for the next parsing engine.</entry></row><row><entry/><entry/><entry>First protocol for detection.</entry></row><row><entry>input offset</entry><entry>8</entry><entry>Input for the next parsing engine.</entry></row><row><entry/><entry/><entry>Offset for start of parsing.</entry></row><row><entry>input parse_en</entry><entry>1</entry><entry>Input for the next parsing engine.</entry></row><row><entry/><entry/><entry>Enable parsing.</entry></row><row><entry>ctrl_bits</entry><entry>8</entry><entry>Control bits:</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="126pt" align="left"/><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="63pt" align="left"/><tbody valign="top"><row><entry/><entry>0</entry><entry>VLAN 1 exists</entry></row><row><entry/><entry>1</entry><entry>VLAN 2 exists</entry></row><row><entry/><entry>2</entry><entry>Tunnel detection</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="154pt" align="left"/><colspec colname="1" colwidth="63pt" align="left"/><tbody valign="top"><row><entry/><entry>IPv4</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="126pt" align="left"/><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="63pt" align="left"/><tbody valign="top"><row><entry/><entry>3</entry><entry>fragmentation</entry></row><row><entry/><entry>4</entry><entry>L4 found</entry></row><row><entry/><entry>5</entry><entry>Reserved</entry></row><row><entry/><entry>6</entry><entry>Reserved</entry></row><row><entry/><entry>7</entry><entry>Packet drop</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="77pt" align="left"/><colspec colname="2" colwidth="35pt" align="char" char="."/><colspec colname="3" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>p_13_prot_index</entry><entry>5</entry><entry>L3 Protocol index</entry></row><row><entry>p_14_prot_index</entry><entry>5</entry><entry>L4 Protocol index</entry></row><row><entry>p_da</entry><entry>48</entry><entry>MAC DA</entry></row><row><entry>p_sa</entry><entry>48</entry><entry>MAC SA</entry></row><row><entry>p_vlan_l_data</entry><entry>16</entry><entry>First VLAN tag</entry></row><row><entry>p_vlan_2_data</entry><entry>16</entry><entry>Second VLAN tag</entry></row><row><entry>p_l3_sip</entry><entry>128</entry><entry>L3 Source IP address</entry></row><row><entry>p_l3_dip</entry><entry>128</entry><entry>L3 destination IP address</entry></row><row><entry>p_l4_src_port</entry><entry>16</entry><entry>L4 source port</entry></row><row><entry>p_l4_dst_port</entry><entry>16</entry><entry>L4 destination port</entry></row><row><entry>P_13_offset</entry><entry>16</entry><entry>Offset to the L3 header</entry></row><row><entry>P_13_header_length</entry><entry>16</entry><entry>Length of the L3 header</entry></row><row><entry>P_14_offset</entry><entry>16</entry><entry>Offset to the L4 header</entry></row><row><entry>P_14_header_length</entry><entry>16</entry><entry>Length of the L4 header</entry></row><row><entry>P_13_priority</entry><entry>8</entry><entry>L3 priority value (IP DSCP/TOS)</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0281" num="0325">The next table shows the pre-configured Protocol_Index values that is defined the default drivers for the Ethernet Controller. This is configurable and can be written:</p><p id="p-0282" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Protocol_index example</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="49pt" align="center"/><colspec colname="2" colwidth="70pt" align="left"/><colspec colname="3" colwidth="98pt" align="left"/><tbody valign="top"><row><entry>Protocol_index</entry><entry/><entry/></row><row><entry>value</entry><entry>Detected protocol</entry><entry>Comments</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="49pt" align="char" char="."/><colspec colname="2" colwidth="70pt" align="left"/><colspec colname="3" colwidth="98pt" align="left"/><tbody valign="top"><row><entry>0</entry><entry>Not Used</entry><entry>Protocol not detected</entry></row><row><entry>1</entry><entry>mac_802_3</entry><entry>Standard 802.3 packet</entry></row><row><entry>2</entry><entry>mac_802_3_ms_8</entry><entry>Standard 802.3 packet, with</entry></row><row><entry/><entry/><entry>MACSEC (8 bytes header)</entry></row><row><entry/><entry/><entry>Only used with Advanced</entry></row><row><entry/><entry/><entry>Ethernet Controller</entry></row><row><entry>3</entry><entry>mac_802_3_ms_l6</entry><entry>Standard 802.3 packet, with</entry></row><row><entry/><entry/><entry>MACSEC (16 bytes header)</entry></row><row><entry/><entry/><entry>My be used with Advanced</entry></row><row><entry/><entry/><entry>Ethernet Controller but this</entry></row><row><entry/><entry/><entry>is not necessarily so</entry></row><row><entry>4</entry><entry>vlan_l_l</entry><entry>First VLAN detected (with</entry></row><row><entry/><entry/><entry>preconfigured VLAN</entry></row><row><entry/><entry/><entry>EthernetType #1, for example</entry></row><row><entry/><entry/><entry>Ox8100)</entry></row><row><entry>5</entry><entry>vlan_l_2</entry><entry>First VLAN detected (with</entry></row><row><entry/><entry/><entry>preconfigured VLAN</entry></row><row><entry/><entry/><entry>EthernetType #2, for example</entry></row><row><entry/><entry/><entry>Ox9100)</entry></row><row><entry>6</entry><entry>vlan_2_1</entry><entry>Second VLAN detected (with</entry></row><row><entry/><entry/><entry>preconfigured VLAN</entry></row><row><entry/><entry/><entry>EthernetType #1, for example</entry></row><row><entry/><entry/><entry>Ox8100)</entry></row><row><entry>7</entry><entry>vlan_2_2</entry><entry>Second VLAN detected (with</entry></row><row><entry/><entry/><entry>preconfigured VLAN</entry></row><row><entry/><entry/><entry>EthernetType #12, for example</entry></row><row><entry/><entry/><entry>Ox9100)</entry></row><row><entry>8</entry><entry>ipv4_frag_check</entry><entry>Internal, 1Pv4 detected</entry></row><row><entry>9</entry><entry>ipv4_no_frag</entry><entry>1Pv4 without fragmentation</entry></row><row><entry>10</entry><entry>ipv4_frag</entry><entry>1Pv4 with fragmentation</entry></row><row><entry>11</entry><entry>ipv6</entry><entry>1Pv6</entry></row><row><entry>12</entry><entry>TCP</entry><entry>TCP</entry></row><row><entry>13</entry><entry>UDP</entry></row><row><entry>14</entry><entry>GRE Tunnel</entry><entry>GRE Tunnel</entry></row><row><entry/><entry/><entry>Only used with Advanced</entry></row><row><entry/><entry/><entry>Ethernet Controller</entry></row><row><entry>15</entry><entry>IPv6_over_IPv4</entry><entry>1Pv6 over 1Pv4 Tunnel</entry></row><row><entry/><entry>Tunnel</entry><entry>Only used with Advanced</entry></row><row><entry/><entry/><entry>Ethernet Controller</entry></row><row><entry>16</entry><entry>Ethernet with LLC</entry></row><row><entry/><entry>SNAP</entry></row><row><entry/><entry>encapsulation</entry></row><row><entry>31</entry><entry>not detected</entry><entry>Protocol not detected</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0283" num="0326">Note: The protocol_index values are configurable, the parser can be configured to map any detected protocol to any protocol_index value, see compare logic array database description above. Note that the software driver configures the compare logic array and the parser control table with a default set of protocols during initialization.</p><p id="p-0284" num="0327">In the foregoing specification, the invention has been described with reference to specific examples of embodiments of the invention. It will, however, be evident that various modifications and changes may be made therein without departing from the broader spirit and scope of the invention as set forth in the appended claims.</p><p id="p-0285" num="0328">Moreover, the terms &#x201c;front,&#x201d; &#x201c;back,&#x201d; &#x201c;top,&#x201d; &#x201c;bottom,&#x201d; &#x201c;over,&#x201d; &#x201c;under&#x201d; and the like in the description and in the claims, if any, are used for descriptive purposes and not necessarily for describing permanent relative positions. It is understood that the terms so used are interchangeable under appropriate circumstances such that the embodiments of the invention described herein are, for example, capable of operation in other orientations than those illustrated or otherwise described herein.</p><p id="p-0286" num="0329">The connections as discussed herein may be any type of connection suitable to transfer signals from or to the respective nodes, units or devices, for example via intermediate devices. Accordingly, unless implied or stated otherwise, the connections may for example be direct connections or indirect connections. The connections may be illustrated or described in reference to being a single connection, a plurality of connections, unidirectional connections, or bidirectional connections. However, different embodiments may vary the implementation of the connections. For example, separate unidirectional connections may be used rather than bidirectional connections and vice versa. Also, plurality of connections may be replaced with a single connection that transfers multiple signals serially or in a time multiplexed manner. Likewise, single connections carrying multiple signals may be separated out into various different connections carrying subsets of these signals. Therefore, many options exist for transferring signals.</p><p id="p-0287" num="0330">Although specific conductivity types or polarity of potentials have been described in the examples, it will be appreciated that conductivity types and polarities of potentials may be reversed.</p><p id="p-0288" num="0331">Each signal described herein may be designed as positive or negative logic. In the case of a negative logic signal, the signal is active low where the logically true state corresponds to a logic level zero. In the case of a positive logic signal, the signal is active high where the logically true state corresponds to a logic level one. Note that any of the signals described herein may be designed as either negative or positive logic signals. Therefore, in alternate embodiments, those signals described as positive logic signals may be implemented as negative logic signals, and those signals described as negative logic signals may be implemented as positive logic signals.</p><p id="p-0289" num="0332">Furthermore, the terms &#x201c;assert&#x201d; or &#x201c;set&#x201d; and &#x201c;negate&#x201d; (or &#x201c;deassert&#x201d; or &#x201c;clear&#x201d;) are used herein when referring to the rendering of a signal, status bit, or similar apparatus into its logically true or logically false state, respectively. If the logically true state is a logic level one, the logically false state is a logic level zero. And if the logically true state is a logic level zero, the logically false state is a logic level one.</p><p id="p-0290" num="0333">Those skilled in the art will recognize that the boundaries between logic blocks are merely illustrative and that alternative embodiments may merge logic blocks or circuit bbelements or impose an alternate decomposition of functionality upon various logic blocks or circuit elements. Thus, it is to be understood that the architectures depicted herein are merely exemplary, and that in fact many other architectures may be implemented which achieve the same functionality.</p><p id="p-0291" num="0334">Any arrangement of components to achieve the same functionality is effectively &#x201c;associated&#x201d; such that the desired functionality is achieved. Hence, any two components herein combined to achieve a particular functionality may be seen as &#x201c;associated with&#x201d; each other such that the desired functionality is achieved, irrespective of architectures or intermedial components. Likewise, any two components so associated can also be viewed as being &#x201c;operably connected,&#x201d; or &#x201c;operably coupled,&#x201d; to each other to achieve the desired functionality.</p><p id="p-0292" num="0335">Furthermore, those skilled in the art will recognize that boundaries between the above described operations merely illustrative. The multiple operations may be combined into a single operation, a single operation may be distributed in additional operations and operations may be executed at least partially overlapping in time. Moreover, alternative embodiments may include multiple instances of a particular operation, and the order of operations may be altered in various other embodiments.</p><p id="p-0293" num="0336">Also for example, in one embodiment, the illustrated examples may be implemented as circuitry located on a single integrated circuit or within a same device. Alternatively, the examples may be implemented as any number of separate integrated circuits or separate devices interconnected with each other in a suitable manner.</p><p id="p-0294" num="0337">However, other modifications, variations and alternatives are also possible. The specifications and drawings are, accordingly, to be regarded in an illustrative rather than in a restrictive sense.</p><p id="p-0295" num="0338">In the claims, any reference signs placed between parentheses shall not be construed as limiting the claim. The word &#x2018;comprising&#x2019; does not exclude the presence of other elements or steps then those listed in a claim. Furthermore, the terms &#x201c;a&#x201d; or &#x201c;an,&#x201d; as used herein, are defined as one or more than one. Also, the use of introductory phrases such as &#x201c;at least one&#x201d; and &#x201c;one or more&#x201d; in the claims should not be construed to imply that the introduction of another claim element by the indefinite articles &#x201c;a&#x201d; or &#x201c;an&#x201d; limits any particular claim containing such introduced claim element to inventions containing only one such element, even when the same claim includes the introductory phrases &#x201c;one or more&#x201d; or &#x201c;at least one&#x201d; and indefinite articles such as &#x201c;a&#x201d; or &#x201c;an.&#x201d; The same holds true for the use of definite articles. Unless stated otherwise, terms such as &#x201c;first&#x201d; and &#x201c;second&#x201d; are used to arbitrarily distinguish between the elements such terms describe. Thus, these terms are not necessarily intended to indicate temporal or other prioritization of such elements. The mere fact that certain measures are recited in mutually different claims does not indicate that a combination of these measures cannot be used to advantage.</p><p id="p-0296" num="0339">While certain features of the invention have been illustrated and described herein, many modifications, substitutions, changes, and equivalents will now occur to those of ordinary skill in the art. It is, therefore, to be understood that the appended claims are intended to cover all such modifications and changes as fall within the true spirit of the invention.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computing system comprising:<claim-text>a host processing integrated circuit capable of executing a plurality of virtual machines;</claim-text><claim-text>a network adapter coupled to the host processing integrated circuit; and</claim-text><claim-text>a set of direct memory access (DMA) controllers implementing a plurality of queues operable to transfer data between the plurality of virtual machines and the network adapter,</claim-text><claim-text>wherein the network adapter includes:<claim-text>a configurable parsing engine operable to parse a packet based on a protocol field to generate a parse result vector; and</claim-text><claim-text>a packet engine operable to provide packet data from the packet to a virtual machine executing on the host processing integrated circuit based on the parse result vector.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of virtual machines are executed on the same processor of the host processing integrated circuit, and the packet engine is operable to provide packet switching between the plurality of virtual machines executed on the same processor.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the packet engine is operable to multicast the packet to the plurality of virtual machines.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the packet engine is operable to determine whether to send a received packet to a hypervisor.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the packet engine is operable to forward packet data received from one virtual machine to another virtual machine.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of virtual machines includes virtual machines running different operating systems.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the virtual machine is executed on multiple processors, and the packet engine is operable to distribute packets to the multiple processors.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The computing system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the packets are distributed to the multiple processors to load-balance the multiple processors.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the parse result vector is used by the packet engine to select a target DMA controller and a target queue to forward the packet data.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the set of direct memory access (DMA) controllers includes a DMA controller that is connected to multiple virtual machines.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. An integrated circuit device comprising:<claim-text>a configurable parsing engine operable to parse a packet based on a protocol field to generate a parse result vector; and</claim-text><claim-text>a packet engine operable to select, based on the parse result vector, between:<claim-text>forwarding the packet to a virtual machine executing on a host processing integrated circuit;</claim-text><claim-text>forwarding the packet to a physical media access controller;</claim-text><claim-text>multicasting the packet to multiple virtual machines executing on the host processing integrated circuit; and</claim-text><claim-text>sending the packet to a hypervisor.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The integrated circuit device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the host processing integrated circuit includes multiple processors executing corresponding virtual machines.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The integrated circuit device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the host processing integrated circuit includes multiple processors that are used to execute one virtual machine.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The integrated circuit device of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the packet engine is operable to distribute packets to the multiple processors to perform load-balancing of the multiple processors.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The integrated circuit device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the parse result vector is used by the packet engine to select a target DMA controller and a target queue to forward the packet.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A method comprising:<claim-text>receiving a packet;</claim-text><claim-text>parsing the packet based on a protocol field to generate a parse result vector; and</claim-text><claim-text>selecting, based on the parse result vector, between:<claim-text>forwarding the packet to a virtual machine executing on a host processing integrated circuit;</claim-text><claim-text>forwarding the packet to a physical media access controller;</claim-text><claim-text>multicasting the packet to multiple virtual machines executing on the host processing integrated circuit; and</claim-text><claim-text>sending the packet to a hypervisor.</claim-text></claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the host processing integrated circuit includes multiple processors executing corresponding virtual machines.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the host processing integrated circuit includes multiple processors that are used to execute one virtual machine.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the parse result vector is used to select a target DMA controller and a target queue to forward the packet.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising distributing packets to multiple processors to perform load-balancing of the multiple processors.</claim-text></claim></claims></us-patent-application>