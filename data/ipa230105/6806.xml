<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006807A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006807</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364734</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>7</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>7</main-group><subgroup>0008</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc></classifications-cpc><invention-title id="d2e43">METHODS AND SYSTEMS FOR PROVIDING A DISTRIBUTED CLOCK AS A SERVICE</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Pensando Systems Inc.</orgname><address><city>Milpitas</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Hubbe</last-name><first-name>Allen</first-name><address><city>Durham</city><state>NC</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Chandrasekaran</last-name><first-name>Varagur</first-name><address><city>Fremont</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Vaidya</last-name><first-name>Shrikant</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Tenants in data centers may want access to high precision clocks without having to run their own PTP stacks or reference clocks. Furthermore, different tenants may want their workloads synchronized to their own secured clock domain. PTP, the currently dominant synchronization protocol, allows for only 256 clock domains (CDs). Virtual CDs (vCDs) virtualize the concept of clock domains by maintaining a hardware clock within a host computer, receiving a network clock domain packet that includes a clock domain identifier and an origin timestamp produced by a reference clock, using the network clock domain packet to synchronize the hardware clock to the reference clock, and using the hardware clock to provide a hardware timestamp value to a virtual machine (VM) running on the host computer or to a process running on the host computer, wherein the hardware clock is secured from manipulation by the VM or by the process.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="204.55mm" wi="158.75mm" file="US20230006807A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="229.02mm" wi="167.47mm" file="US20230006807A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="233.93mm" wi="173.74mm" file="US20230006807A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="226.65mm" wi="169.25mm" file="US20230006807A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="240.96mm" wi="164.00mm" file="US20230006807A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="144.70mm" wi="99.91mm" file="US20230006807A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="232.16mm" wi="174.92mm" file="US20230006807A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="226.82mm" wi="171.70mm" file="US20230006807A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="161.46mm" wi="156.29mm" file="US20230006807A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="241.81mm" wi="162.05mm" file="US20230006807A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="242.65mm" wi="159.00mm" file="US20230006807A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="174.07mm" wi="162.05mm" file="US20230006807A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="152.65mm" wi="155.79mm" file="US20230006807A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="184.91mm" wi="126.15mm" orientation="landscape" file="US20230006807A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">The embodiments relate to precision time protocol, computer networks, local area networks, network appliances such as routers, switches, network interface cards (NICs), smart NICs, distributed service cards (DSCs), and providing synchronized clocks within virtualized clock domains as a service.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">The precision time protocol (PTP) has been standardized by the Institute of Electrical and Electronics Engineers (IEEE) in standards including IEEE-1588-2002, IEEE 1588-2008, and IEEE 1588-2019. PTP is used to synchronize clocks throughout a computer network. Such synchronization is used in many applications such as synchronizing output signals, timestamping or synchronizing measurements at disparate locations, coordinating events, etc. Using PTP a number of ordinary clocks can be synchronized to a reference clock. The synchronization can be sub microsecond. The PTP standard also provides for clock domains (CDs). PTP message headers include a 1-byte clock domain identifier field and, as such, there may be up to 256 reference clocks for 256 CDs each having numerous clocks synchronized within their respective clock domains.</p><heading id="h-0003" level="1">BRIEF SUMMARY OF SOME EXAMPLES</heading><p id="p-0004" num="0003">The following presents a summary of one or more aspects of the present disclosure, in order to provide a basic understanding of such aspects. This summary is not an extensive overview of all contemplated features of the disclosure and is intended neither to identify key or critical elements of all aspects of the disclosure nor to delineate the scope of any or all aspects of the disclosure. Its sole purpose is to present some concepts of one or more aspects of the disclosure as a prelude to the more detailed description that is presented later.</p><p id="p-0005" num="0004">One aspect of the subject matter described in this disclosure can be implemented in a method. The method can include maintaining a hardware clock within a host computer, receiving a network clock domain packet that includes a clock domain identifier and an origin timestamp produced by a reference clock, using the network clock domain packet to synchronize the hardware clock to the reference clock, and using the hardware clock to provide a hardware timestamp value to a virtual machine (VM) running on the host computer or to a process running on the host computer, wherein the hardware clock is secured from manipulation by the VM or by the process.</p><p id="p-0006" num="0005">Another aspect of the subject matter described in this disclosure can be implemented by a method. The method can include maintaining a plurality of clock domains on a plurality of hardware clocks in a plurality of network interface cards (NICs) installed in a plurality of host computers, wherein a plurality of clock domain identifiers identify the plurality of clock domains, the NICs are configured to use a network communications protocol to synchronize the hardware clocks within the clock domains, the NICs are configured to associate the clock domain identifiers with a plurality of virtual clock domain identifiers that identify a plurality of virtual clock domains, and a plurality of virtual machines (VMs) running on the host computers obtain hardware timestamp values from the NICs via the virtual clock domain identifiers.</p><p id="p-0007" num="0006">Yet another aspect of the subject matter described in this disclosure can be implemented by a peripheral component card. The peripheral component card be configured to implement a plurality of hardware clocks, be installed in a host computer, use a network communications protocol to synchronize the hardware clocks within a plurality of clock domains identified by a plurality of clock domain identifiers, associate the clock domain identifiers with a plurality of virtual clock domain identifiers that identify a plurality of virtual clock domains, and provide a hardware timestamp value to a virtual machine running on the host computer based on the one of the virtual clock domains associated with the virtual machine.</p><p id="p-0008" num="0007">In some implementations of the methods and devices, the method can include providing a local hardware clock quality metric to the VM. In some implementations of the methods and devices, a network interface card (NIC) that includes the hardware clock is installed in the host computer, the NIC receives the network clock domain packet, and the NIC synchronizes the hardware clock to the reference clock. In some implementations of the methods and devices, the hardware clock is secured from manipulation by any process or VM running on the host computer. In some implementations of the methods and devices, the NIC associates a virtual clock domain identifier with the clock domain identifier, and the VM uses the virtual clock domain identifier to obtain the hardware timestamp value. In some implementations of the methods and devices, the VM and the clock domain identifier are associated with a virtual clock domain identifier, the virtual clock domain identifier identifies a virtual clock domain of the VM. In some implementations of the methods and devices, a plurality of VMs running on a plurality of host computers are associated with a virtual clock domain identifier that identifies a virtual clock domain, a plurality of NICs installed in the host computers synchronize a plurality of hardware clocks in the virtual clock domain, and the VMs obtain a plurality of hardware timestamp values from the plurality of hardware clocks.</p><p id="p-0009" num="0008">In some implementations of the methods and devices, the VM is associated with a virtual clock domain identifier that identifies a virtual clock domain, a second NIC is installed in a second host computer, and migrating the VM to the second host computer includes instantiating the virtual clock domain at the second NIC. In some implementations of the methods and devices, the NIC associates a virtual clock domain identifier with the clock domain identifier, a second NIC is installed in a second host computer and includes a second hardware clock, the hardware clock and the second hardware clock are synchronized within a virtual clock domain identified by the virtual clock domain identifier, and the second NIC associates the virtual clock domain identifier with a second clock domain identifier that is different from the clock domain identifier. In some implementations of the methods and devices, the network clock domain packet is received on a first virtual local area network, a second network clock domain packet is received on a second virtual local area network, the second network clock domain packet and the network clock domain packet include the same clock domain identifier, the clock domain identifier of the network clock domain packet identifies a first clock domain, the clock domain identifier of the network clock domain packet identifies a second clock domain that is different from the first clock domain. In some implementations of the methods and devices, the hardware clock is secured from manipulation by the host computer.</p><p id="p-0010" num="0009">In some implementations of the methods and devices, each one of the NICs is configured to instantiate the virtual clock domains based on virtual clock domain instantiation data received from another one of the NICs. In some implementations of the methods and devices, the VMs are prevented from manipulating the hardware clocks. In some implementations of the methods and devices, the NICs are configured to use a virtual local area network (VLAN) to synchronize the hardware clocks, the VLAN is configured to exclude network traffic to or from any one of the VMs.</p><p id="p-0011" num="0010">In some implementations of the methods and devices, the peripheral component card is configured to receive virtual clock domain instantiation data for an additional virtual clock domain, and provide an additional hardware timestamp value based on the additional virtual clock domain. In some implementations of the methods and devices, the peripheral component card is configured to produce virtual clock domain instantiation data based on one the virtual clock domains, and transmit the virtual clock domain instantiation data to an additional peripheral component card. In some implementations of the methods and devices, the peripheral component card is configured to provide a local hardware clock quality metric to the VMs. In some implementations of the methods and devices, the peripheral component card is a network interface card configured to provide network communications to the host computer.</p><p id="p-0012" num="0011">These and other aspects will become more fully understood upon a review of the detailed description, which follows. Other aspects, features, and embodiments will become apparent to those of ordinary skill in the art, upon reviewing the following description of specific, exemplary embodiments in conjunction with the accompanying figures. While features may be discussed relative to certain embodiments and figures below, all embodiments can include one or more of the advantageous features discussed herein. In other words, while one or more embodiments may be discussed as having certain advantageous features, one or more of such features may also be used in accordance with the various embodiments discussed herein. In similar fashion, while exemplary embodiments may be discussed below as device, system, or method embodiments such exemplary embodiments can be implemented in various devices, systems, and methods.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a functional block diagram of virtual machines (VMs) obtaining timestamps from virtual clock domains according to some aspects.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a high-level diagram illustrating a mapping between virtual clock domains (vCDs), clock domains (CDs), and hardware clocks according to some aspects.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a high-level diagram illustrating local hardware clock quality metrics gathered for a hardware clock according to some aspects.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a functional block diagram of a network appliance having an ASIC (application specific integrated circuit), according to some aspects.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates packet headers and payloads of packets for network traffic flows including layer 7 fields according to some aspects.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a PTP sync packet that can be used in accordance with certain aspects.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a high-level diagram illustrating a virtual machine accessing a hardware clock via a virtual clock domain (vCD) access point according to some aspects.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a high-level diagram illustrating vCDs distributed across multiple local area networks (LANs) according to some aspects.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a high-level diagram illustrating VMs on different host computers accessing vCDs on different virtual LANs (VLANs) according to some aspects.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a high-level diagram illustrating VMs on different host computers accessing vCDs according to some aspects.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a high-level diagram illustrating host computers sharing vCD instantiation data in preparation for virtual machine (VM) migration according to some aspects.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a high-level diagram illustrating a host computer instantiating a vCD in preparation for virtual machine (VM) migration according to some aspects.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a high-level diagram illustrating a VM in a vCD that has migrated between host computers according to some aspects.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a high-level flow diagram illustrating a method for providing a distributed clock as a service according to some aspects.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a high-level flow diagram illustrating another method for providing a distributed clock as a service according to some aspects.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>16</b></figref> illustrates a layer 2 PTP packet that can be used in accordance with certain aspects.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0029" num="0028">Throughout the description, similar reference numbers may be used to identify similar elements.</p><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0030" num="0029">It will be readily understood that the components of the embodiments as generally described herein and illustrated in the appended figures could be arranged and designed in a wide variety of different configurations. Thus, the following more detailed description of various embodiments, as represented in the figures, is not intended to limit the scope of the present disclosure, but is merely representative of various embodiments. While the various aspects of the embodiments are presented in drawings, the drawings are not necessarily drawn to scale unless specifically indicated.</p><p id="p-0031" num="0030">The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by this detailed description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.</p><p id="p-0032" num="0031">Reference throughout this specification to features, advantages, or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather, language referring to the features and advantages is understood to mean that a specific feature, advantage, or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus, discussions of the features and advantages, and similar language, throughout this specification may, but do not necessarily, refer to the same embodiment.</p><p id="p-0033" num="0032">Furthermore, the described features, advantages, and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize, in light of the description herein, that the invention can be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances, additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.</p><p id="p-0034" num="0033">Reference throughout this specification to &#x201c;one embodiment&#x201d;, &#x201c;an embodiment&#x201d;, or similar language means that a particular feature, structure, or characteristic described in connection with the indicated embodiment is included in at least one embodiment of the present invention. Thus, the phrases &#x201c;in one embodiment&#x201d;, &#x201c;in an embodiment&#x201d;, and similar language throughout this specification may, but do not necessarily, all refer to the same embodiment.</p><p id="p-0035" num="0034">The precision time protocol (PTP) has been standardized by the Institute of Electrical and Electronics Engineers (IEEE) in standards including IEEE-1588-2002, IEEE 1588-2008, and IEEE 1588-2019. PTP is used to synchronize clocks throughout a computer network. Using PTP a number of ordinary clocks can be synchronized to a reference clock. The synchronization can be sub microsecond. The PTP standard also provides for clock domains (CDs). PTP message headers have a 1-byte clock domain identifier and, as such, there may be up to 256 reference clocks for 256 CDs each having numerous clocks synchronized within their respective clock domains. Data centers, however, can have tens of thousands of servers running hundreds of thousands or millions of virtual machines on tens of thousands of subnets. Furthermore, a tenant's workloads may be in different areas of the data center or even in different data centers. The tenant's workloads can include numerous VMs that may migrate from one server to a different server. The servers can be physically separated in different racks or data centers.</p><p id="p-0036" num="0035">The timing requirements of advanced data centers can be met using virtual CDs. A tenant's VMs can use a vCD that is dedicated to that particular tenant. The vCDs can map to CDs within a LAN such that VMs on different LANs can access the same vCD and receive time values or timestamps provided by local clocks. The local clocks within a LAN or a server can be assigned to a vCD such that they are synchronized across the data center to other local clocks assigned to the same vCD. vCD coordination and synchronization can be provided as a service within a data center with guaranteed quality of service parameters (e.g., synchronized to less than 1 microsecond across servers in North American data centers). Such precise synchronization can provide for precision in making and coordinating measurements, timestamping transactions, coordinating events, and other uses.</p><p id="p-0037" num="0036">One advantage of using vCDs is that millions or billions of vCDs can be used thereby providing many orders of magnitude improvement over the 256 CDs currently available. Another advantage is that a virtual machine can be migrated between servers without losing synchronization with the other VMs in a workload. Another advantage is that by providing vCDs as a service, the tenant is freed from running and maintaining PTP stacks. A vCD service provider can run PTP stacks on bare metal (bare metal means not a VM) or in dedicated hardware such as a distributed service card or smartNIC, thereby improving reliability and precision. A vCD service provider can secure the vCDs such that a tenant's vCD cannot be snooped on or modified by interlopers or even the tenants themselves. For example, the service provider's PTP traffic can be communicated on a VLAN to which VMs and host processes do not have access. SmartNICs can implement such security by firewalling VM and host computer traffic from the secured VLAN. In such implementations, the secured VLAN may carry SmartNIC traffic while using other VLANs for host computer and VM traffic. Communications for synchronizing, orchestrating, and maintaining the vCDs may also be secured via encryption. Providing encrypted network communications is well known in the art of computer networking.</p><p id="p-0038" num="0037">In the field of data networking, the functionality of network appliances such as switches, routers, and NICs are often described in terms of functionality that is associated with a &#x201c;control plane&#x201d; and functionality that is associated with a &#x201c;data plane.&#x201d; In general, the control plane refers to components and/or operations that are involved in managing forwarding information and the data plane refers to components and/or operations that are involved in forwarding packets from an input interface to an output interface according to the forwarding information provided by the control plane. The data plane may also refer to components and/or operations that implement packet processing operations related to encryption, decryption, compression, decompression, firewalling, and telemetry.</p><p id="p-0039" num="0038">Aspects described herein process packets using match-action pipelines. A match-action pipeline is a part of the data plane that can process network traffic flows extremely quickly if the match-action pipeline is configured to process those traffic flows. Upon receiving a packet of a network traffic flow, the match-action pipeline can generate an index from data in the packet header. Finding a flow table entry for the network traffic flow at the index location in the flow table is the &#x201c;match&#x201d; portion of &#x201c;match-action&#x201d;. If there is a &#x201c;match&#x201d;, the &#x201c;action&#x201d; is performed to thereby process the packet. If there is no flow table entry for the network traffic flow, it is a new network traffic flow that the match-action pipeline is not yet configured to process. If there is no match, then the match-action pipeline can perform a default action.</p><p id="p-0040" num="0039">The high-volume and rapid decision-making that occurs at the data plane is often implemented in fixed function application specific integrated circuits (ASICs). Although fixed function ASICs enable high-volume and rapid packet processing, fixed function ASICs typically do not provide enough flexibility to adapt to changing needs. Data plane processing can also be implemented in field programmable gate arrays (FPGAs) to provide a high level of flexibility in data plane processing.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a functional block diagram of virtual machines (VMs) obtaining timestamps from virtual clock domains according to some aspects. A reference clock <b>101</b> can send network clock domain packets <b>102</b> (e.g., PTP or network time protocol (NTP) packets) to a network interface card <b>103</b> (NIC) installed in a host computer <b>114</b>. The NIC can be a distributed service card or a smartNIC. The NIC <b>103</b> can include numerous hardware clocks <b>105</b> such as hardware clock <b>1</b> <b>106</b>, hardware clock <b>2</b> <b>107</b>, and hardware clock N <b>108</b>. &#x201c;N&#x201d; is used herein to refer to integral values in general and different uses of &#x201c;N&#x201d; may be the same or different values. Hardware clock synchronization executable code <b>104</b> is computer code that can be executed to thereby synchronize one or more of the hardware clocks <b>105</b> to one or more reference clocks. For example, and as is well known in the art, the reference clock can be the reference clock for a specific CD, PTP packets can be used for synchronization within that CD, and PTP stacks can process the PTP packets to thereby synchronize one or more of the HW clocks <b>105</b> to the reference clock <b>101</b>. A virtual clock domain (vCD) to clock domain (CD) to hardware (HW) clock mapping table <b>109</b> can indicate which HW clock is in which CD such that the hardware clock synchronization executable code <b>104</b> can synchronize the HW clocks within the correct CDs.</p><p id="p-0042" num="0041">The vCD to CD to HW clock mapping table <b>109</b> can also indicate which HW clock corresponds to each vCD. CDs and vCDs are therefore also associated via the vCD to CD to HW clock mapping table <b>109</b>. Processes and VMs running on the host computer can obtain HW timestamp values via vCD access points that may be provided by the NIC <b>103</b>. Host process <b>1</b> and host process <b>2</b> can obtain vCD <b>1</b> timestamps via a vCD <b>1</b> access point <b>110</b>. VM <b>1</b> can obtain vCD <b>2</b> timestamps via a vCD <b>2</b> access point <b>111</b>. VM <b>2</b> can obtain vCD <b>4</b> timestamps via a vCD <b>4</b> access point <b>113</b>. The vCD <b>3</b> access point <b>112</b> is shown as not in use.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a high-level diagram illustrating a mapping between virtual clock domains (vCDs), clock domains (CDs), and hardware clocks according to some aspects. More specifically, an exemplary vCD to CD to HW clock mapping table <b>109</b> is illustrated that provides a mapping between virtual clock domains (vCDs), clock domains (CDs), and hardware clocks. The vCD to CD to HW clock mapping table <b>109</b> can associate vCD identifiers <b>202</b>, CD identifiers <b>203</b>, VLAN identifiers <b>204</b>, and HW clock identifiers <b>205</b>. As discussed above, CD identifiers in PTP are 8-bit values. As such, each LAN can have up to 256 CDs. The infrastructure (e.g., cables, layer 2 switches, and NICs) supporting a LAN may also support a number of VLANs. Each VLAN may also support up to 256 CDs. Observing the entries in the vCD to CD to HW clock mapping table <b>109</b>, the first row indicates that HW clock <b>1</b> is synchronized to CD <b>1</b> on VLAN <b>1</b> and that time values for vCD <b>1</b> can be obtained by reading HW clock <b>1</b>. The second row indicates that HW clock <b>2</b> is synchronized to CD <b>2</b> on VLAN <b>1</b> and that time values for vCD <b>2</b> can be obtained by reading HW clock <b>2</b>. The third row indicates that HW clock <b>3</b> is synchronized to CD <b>3</b> on VLAN <b>2</b> and that time values for vCD <b>1</b> can be obtained by reading HW clock <b>3</b>. It therefore appears that values for vCD<b>1</b> can be obtained from HW clock <b>1</b> or HW clock <b>3</b>. The NIC may select which HW clock to use based on the HW clocks' synchronization states or local HW clock quality metrics.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a high-level diagram illustrating local hardware clock quality metrics <b>310</b> gathered for a hardware clock according to some aspects. A reference clock <b>101</b> can provide network clock domain packets <b>102</b> (e.g., PTP or network time protocol (NTP) packets) that can be used for synchronizing HW clocks within a clock domain. The network clock domain packets <b>102</b> can indicate a CD for that synchronization. The vCD to CD to HW clock mapping table <b>109</b> can indicate that HW clock I <b>302</b> is to be synchronized within that CD. The HW clock synchronization executable code <b>301</b> can therefore use the network clock domain packets <b>102</b> to synchronize HW clock I <b>302</b> within the CD (this synchronizes HW clock I <b>302</b> to the reference clock <b>101</b>). HW clock I <b>302</b> has a current time value <b>303</b> that can be read to obtain HW Clock I timestamp values <b>304</b>. The HW clock synchronization executable code <b>301</b> can also produce local HW clock quality metrics <b>310</b> for local clocks such as HW clock I <b>302</b>. The quality metrics can include a time correction maximum value <b>311</b>, a time correction mean value <b>312</b>, a time correction variance value <b>313</b>, a rate correction maximum value <b>314</b>, a rate correction mean value <b>315</b>, and a rate correction variance value <b>316</b>.</p><p id="p-0045" num="0044">A HW clock has a current time value and advances at a rate. The rate can be proportional to a timing signal such as pulses in a clock signal. The HW clock synchronization executable code <b>301</b> can detect that the HW clock is ahead of or behind the reference clock. As such, a time correction can set the HW clock to the correct value. The HW clock synchronization executable code <b>301</b> can detect that the HW clock is advancing too quickly or too slowly with respect to the reference clock. As such, a rate correction can adjust the rate at which the HW clock advances. Those practiced in clock synchronization or PTP stacks are familiar with time corrections and rate corrections. Statistics such as the maximum, mean, and variance can be determined for the time corrections and the rate corrections. Algorithms for calculating maximum, mean, and variance are well known in the programming arts. The local HW clock quality metrics <b>310</b> can be stored locally, such as on the NIC <b>103</b>. The local HW clock quality metrics <b>310</b> can be exported to or read by the host machine in which the NIC (or other device providing HW clocks) is installed. The local HW clock quality metrics <b>310</b> can be exported to a remote data collector that may be collecting similar metrics from a plethora of devices. For example, a service provider that provides distributed clocks or vCDs as a service may collect the metrics for display on a centralized dashboard or for analyzing the performance of the distributed clock service.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a functional block diagram of a network appliance <b>430</b> having an application specific integrated circuit (ASIC) <b>401</b>, according to some aspects. If the network appliance is a network interface card (NIC) then the NIC can be installed in a host computer and can act as a network appliance for the host computer and for virtual machines running on the host computer. Such a NIC can have a peripheral component interconnect express (PCIe) connection <b>431</b> for communicating with the host computer. The network appliance <b>430</b> can have an ASIC <b>401</b>, off-ASIC memory <b>432</b>, and ethernet ports <b>433</b>. The off-ASIC memory <b>432</b> can be one of the widely available memory modules or chips such as double data rate 4 (DDR4) synchronous dynamic random-access memory (SDRAM) such that the ASIC has access to many gigabytes of memory on the network appliance <b>430</b>. The ethernet ports <b>433</b> provide physical connectivity to a computer network such as the internet.</p><p id="p-0047" num="0046">The ASIC <b>401</b> is a semiconductor chip having many core circuits interconnected by an on-chip communications fabric, sometimes called a network on a chip (NOC) <b>402</b>. NOCs are often implementations of standardized communications fabrics such as the widely used AXI bus. The ASIC's core circuits can include a PCIe interface <b>427</b>, CPU cores <b>403</b>, P4 packet processing pipeline <b>408</b> elements, memory interface <b>415</b>, on ASIC memory (e.g., SRAM) <b>416</b>, service processing offloads <b>417</b>, a packet buffer <b>423</b>, and packet ingress/egress circuits <b>414</b>. The PCIe interface <b>427</b> can be used to communicate with a host computer via the PCIe connection <b>431</b>. The CPU cores <b>403</b> can include numerous CPU cores such as CPU <b>1</b> <b>405</b>, CPU <b>2</b> <b>406</b>, and CPU <b>3</b> <b>407</b>. The P4 packet processing pipeline <b>408</b> can include a pipeline ingress circuit <b>413</b>, a parser circuit <b>412</b>, match-action units <b>411</b>, a deparser circuit <b>410</b>, and a pipeline egress circuit <b>409</b>. The service processing offloads <b>417</b> are circuits implementing functions that the ASIC uses so often that the designer has chosen to provide hardware for offloading those functions from the CPUs. The service processing offloads can include a compression circuit <b>418</b>, decompression circuit <b>419</b>, a crypto/PKA circuit <b>420</b>, and a CRC calculation circuit <b>421</b>. The specific core circuits implemented within the non-limiting example of ASIC <b>401</b> can be selected such that the ASIC implements many, perhaps all, of the functionality of an InfiniBand channel adapter, of an NVMe card, and of a network appliance that processes network traffic flows carried by IP (internet protocol) packets.</p><p id="p-0048" num="0047">A network device can include clocks such as a precision clock that outputs a precise time, and clocks that are synchronized to remote authoritative clocks (e.g., reference clock) via PTP (e.g., HW clocks). The precision clock <b>426</b> can be synchronized to a remote authoritative clock via PTP, NTP, or some other technique. The network device can include an ASIC clock <b>424</b> that provides a timing signal (e.g., a series of pulses or a square wave). A cycle counter <b>425</b> can count cycles of the ASIC clock <b>424</b>. A cycle count can indicate an elapsed time (e.g., clock period times number of cycles). In some implementations, a rate correction may be applied to a clock producing a time signal, such as the ASIC clock <b>424</b>, to thereby adjust the rate at which the cycle counter <b>425</b> advances. The precision clock <b>426</b>, cycle counter <b>425</b>, and ASIC clock <b>424</b> can be used as timing sources for derived hardware clocks <b>443</b>.</p><p id="p-0049" num="0048">The P4 packet processing pipeline <b>408</b> is a specialized set of elements for processing network packets such as IP (internet protocol) packets and InfiniBand PDUs (protocol data units). The P4 pipeline can be configured using a domain-specific language. The concept of a domain-specific language for programming protocol-independent packet processors, known simply as &#x201c;P4,&#x201d; has developed as a way to provide some flexibility at the data plane of a network appliance. The P4 domain-specific language for programming the data plane of network appliances is defined in the &#x201c;P4<sub>16 </sub>Language Specification,&#x201d; version 1.2.1, as published by the P4 Language Consortium on Oct. 12, 2020. P4 (also referred to herein as the &#x201c;P4 specification,&#x201d; the &#x201c;P4 language,&#x201d; and the &#x201c;P4 program&#x201d;) is designed to be implementable on a large variety of targets including switches, routers, programmable NICs, software switches, FPGAs, and ASICs. As described in the P4 specification, the primary abstractions provided by the P4 language relate to header types, parsers, tables, actions, match-action units, control flow, extern objects, user-defined metadata, and intrinsic metadata.</p><p id="p-0050" num="0049">The network appliance <b>430</b> can include a memory <b>432</b> for running Linux or some other operating system and for storing data used by the processes implementing network services. A network appliance that implements and maintains virtual clock domains can store hardware clock quality metrics <b>440</b>, vCD to CD to HW clock mappings <b>441</b>, hardware clock parameters <b>442</b>, and derived HW clocks <b>443</b>. The derived HW clocks can provide current time values within a clock domain and can be specified in reference to a different timing source such as the ASIC clock, cycle timer, precision clock, a different derived HW clock, etc. The HW clock parameters can define the relationships between the derived HW clocks and their timing sources. For example, HW clock <b>1</b> can be specified as having a +1.3 millisecond offset from HW clock <b>2</b>. HW clock <b>2</b> can be specified in reference to the precision clock <b>426</b> as having a &#x2212;1.1 microsecond offset at a specific time and to have a +0.001 rate difference. Those practiced in synchronizing clock signals are familiar with a wide variety of methods for implementing and maintaining derived clocks.</p><p id="p-0051" num="0050">The CPU cores <b>403</b> can be general purpose processor cores, such as ARM processor cores, MIPS processor cores, and/or x86 processor cores, as is known in the field. Each CPU core can include a memory interface, an ALU, a register bank, an instruction fetch unit, and an instruction decoder, which are configured to execute instructions independently of the other CPU cores. The CPU cores may be Reduced Instruction Set Computers (RISC) CPU cores that are programmable using a general-purpose programming language such as C.</p><p id="p-0052" num="0051">The CPU cores <b>403</b> can also include a bus interface, internal memory, and a memory management unit (MMU) and/or memory protection unit. For example, the CPU cores may include internal cache, e.g., L1 cache and/or L2 cache, and/or may have access to nearby L2 and/or L3 cache. Each CPU core may include core-specific L1 cache, including instruction-cache and data-cache and L2 cache that is specific to each CPU core or shared amongst a small number of CPU cores. L3 cache may also be available to the CPU cores.</p><p id="p-0053" num="0052">There may be multiple CPU cores <b>403</b> available for control plane functions and for implementing aspects of a slow data path that includes software implemented packet processing functions. The CPU cores may be used to implement discrete packet processing operations such as L7 applications (e.g., HTTP load balancing, L7 firewalling, and/or L7 telemetry), certain InfiniBand channel adapter functions, flow table insertion or table management events, connection setup/management, multicast group join, deep packet inspection (DPI) (e.g., URL inspection), storage volume management (e.g., NVMe volume setup and/or management), encryption, decryption, compression, and decompression, which may not be readily implementable through a domain-specific language such as P4, in a manner that provides fast path performance as is expected of data plane processing.</p><p id="p-0054" num="0053">The packet buffer <b>423</b> can act as a central on-chip packet switch that delivers packets from the network interfaces <b>433</b> to packet processing elements of the data plane and vice-versa. The packet processing elements can include a slow data path implemented in software and a fast data path implemented by packet processing circuitry <b>408</b>.</p><p id="p-0055" num="0054">The packet processing circuitry <b>408</b> can be a specialized circuit or part of a specialized circuit using one or more ASICs or FPGAs to implement programmable packet processing pipelines <b>1</b>. Some embodiments include ASICs or FPGAs implementing a P4 pipeline as a fast data path within the network appliance. The fast data path is called the fast data path because it processes packets faster than a slow data path that can also be implemented within the network appliance. An example of a slow data path is a software implemented data path wherein the CPU cores <b>403</b> and memory <b>432</b> are configured via software to implement a slow data path. A network appliance having two data paths has a fast data path and a slow data path when one of the data paths processes packets faster than the other data path.</p><p id="p-0056" num="0055">All memory transactions in the network appliance <b>430</b>, including host memory transactions, on board memory transactions, and register reads/writes may be performed via a coherent interconnect <b>402</b>. In one non-limiting example, the coherent interconnect can be provided by a network on a chip (NOC) &#x201c;IP core&#x201d;. Semiconductor chip designers may license and use prequalified IP cores within their designs. Prequalified IP cores may be available from third parties for inclusion in chips produced using certain semiconductor fabrication processes. A number of vendors provide NOC IP cores. The NOC may provide cache coherent interconnect between the NOC masters, including the packet processing pipeline circuits <b>408</b>, CPU cores <b>403</b>, memory interface <b>415</b>, and PCIe interface <b>427</b>. The interconnect may distribute memory transactions across a plurality of memory interfaces using a programmable hash algorithm. All traffic targeting the memory may be stored in a NOC cache (e.g., 1 MB cache). The NOC cache may be kept coherent with the CPU core caches.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates packet headers and payloads of packets for network traffic flows <b>500</b> including layer 7 fields according to some aspects. A network traffic flow <b>500</b> can have numerous packets such as a first packet <b>550</b>, a second packet <b>551</b>, a third packet <b>552</b>, a fourth packet <b>553</b>, and a final packet <b>554</b> with many more packets between the fourth packet <b>553</b> and the final packet <b>554</b>. The term &#x201c;the packet&#x201d; or &#x201c;a packet&#x201d; may refer to any of the packets in a network traffic flow.</p><p id="p-0058" num="0057">Packets can be constructed and interpreted in accordance with the internet protocol suite. The Internet protocol suite is the conceptual model and set of communications protocols used in the Internet and similar computer networks. A packet can be transmitted and received as a raw bit stream over a physical medium at the physical layer, sometimes called layer 1. Ethernet ports <b>433</b> can send and receive packets as raw bit streams.</p><p id="p-0059" num="0058">The link layer is often called layer 2. The protocols of the link layer operate within the scope of the local network connection to which a host is attached and includes all hosts accessible without traversing a router. The link layer is used to move packets between the interfaces of two different hosts on the same link. The packet has a layer 2 header <b>501</b>, a layer 2 payload <b>502</b>, and a layer 2 frame check sequence (FCS) <b>503</b>. The layer 2 header can contain a source MAC address <b>504</b>, a destination MAC address <b>505</b>, an optional 802.1Q header <b>506</b>, optional VLAN tag information <b>507</b>, and other layer 2 header data <b>508</b>. The input ports and output ports of a network appliance can have MAC addresses. A network appliance can have a MAC address that is applied to all or some of the ports. Alternatively, a network appliance may have one or more ports that each have their own MAC address. In general, each port can send and receive packets. Ethernet, also known as Institute of Electrical and Electronics Engineers (IEEE) 802.3, is a layer 2 protocol. IEEE 802.11 (WiFi) is another widely used layer 2 protocol. The layer 2 payload <b>502</b> can include a Layer 3 packet. The layer 2 FCS <b>503</b> can include a CRC (cyclic redundancy check) calculated from the layer 2 header and layer 2 payload. The layer 2 FCS can be used to verify that the packet has been received without errors.</p><p id="p-0060" num="0059">IEEE 802.1Q is the networking standard that supports VLANs on IEEE 802.3 networks. The optional 802.1Q header <b>506</b> and VLAN tag information <b>507</b> are specified by the IEEE 802.1Q standard. The 802.1Q header is the two-octet value 0x8100 that indicates that VLAN tag information <b>507</b> is present. The VLAN tag information includes a 12-bit VLAN identifier. As such, a LAN can be configured to have 4094 VLANs (0x000 and 0xFFF are reserved values).</p><p id="p-0061" num="0060">The internet layer, often called layer 3, is the network layer where layer 3 packets can be routed from a first node to a second node across multiple intermediate nodes. The nodes can be network appliances such as network appliance <b>430</b>. Internet protocol (IP) is a commonly used layer 3 protocol. The layer 3 packet can have a layer 3 header <b>510</b> and a layer 3 payload <b>511</b>. The layer 3 header <b>510</b> can have a source IP address <b>512</b>, a destination IP address <b>513</b>, a protocol indicator <b>514</b>, and other layer 3 header data <b>515</b>. As an example, a first node can send an IP packet to a second node via an intermediate node. The IP packet therefore has a source IP address indicating the first node and a destination IP address indicating the second node. The first node makes a routing decision that the IP packet should be sent to the intermediate node. The first node therefore sends the IP packet to the intermediate node in a first layer 2 packet. The first layer 2 packet has a source MAC address <b>504</b> indicating the first node, a destination MAC address <b>505</b> indicating the intermediate node, and has the IP packet as a payload. The intermediate node receives the first layer 2 packet. Based on the destination IP address, the intermediate node determines that the IP packet is to be sent to the second node. The intermediate node sends the IP packet to the second node in a second layer 2 packet having a source MAC address <b>504</b> indicating the intermediate node, a destination MAC address <b>505</b> indicating the second node, and the IP packet as a payload. The layer 3 payload <b>511</b> can include headers and payloads for higher layers in accordance with higher layer protocols such as transport layer protocols.</p><p id="p-0062" num="0061">The transport layer, often called layer 4, can establish basic data channels that applications use for task-specific data exchange and can establish host-to-host connectivity. A layer 4 protocol can be indicated in the layer 3 header <b>510</b> using protocol indicator <b>514</b>. Transmission control protocol (TCP), user datagram protocol (UDP), and internet control message protocol (ICMP) are common layer 4 protocols. TCP is often referred to as TCP/IP. TCP is connection oriented and can provide reliable, ordered, and error-checked delivery of a stream of bytes between applications running on hosts communicating via an IP network. When carrying TCP data, a layer 3 payload <b>511</b> includes a TCP header and a TCP payload. UDP can provide for computer applications to send messages, often called datagrams, to other hosts on an IP network using a connectionless model. When carrying UDP data, a layer 3 payload <b>511</b> includes a UDP header and a UDP payload. ICMP is used by network devices, including routers, to send error messages and operational information indicating success or failure when communicating with another IP address. ICMP uses a connectionless model.</p><p id="p-0063" num="0062">A layer 4 packet can have a layer 4 header <b>520</b> and a layer 4 payload <b>521</b>. The layer 4 header <b>520</b> can include a source port <b>522</b>, destination port <b>523</b>, layer 4 flags <b>524</b>, and other layer 4 header data <b>525</b>. The source port and the destination port can be integer values used by host computers to deliver packets to application programs configured to listen to and send on those ports. The layer 4 flags <b>524</b> can indicate a status of or action for a network traffic flow. A layer 4 payload <b>521</b> can contain a layer 7 packet.</p><p id="p-0064" num="0063">The application layer, often called layer 7, includes the protocols used by most applications for providing user services or exchanging application data over the network connections established by the lower-level protocols. Examples of application layer protocols include Precision Time Protocol (PTP), Hypertext Transfer Protocol (HTTP), File Transfer Protocol (FTP), Simple Mail Transfer Protocol (SMTP), and Dynamic Host Configuration (DHCP). Data coded according to application layer protocols can be encapsulated into transport layer protocol units (such as TCP or UDP messages), which in turn use lower layer protocols to effect actual data transfer.</p><p id="p-0065" num="0064">A layer 4 payload <b>521</b> may include a layer 7 packet <b>530</b>. A layer 7 packet can have a layer 7 header <b>531</b> and a layer 7 payload <b>532</b>. The illustrated layer 7 packet is a PTP packet. The IEEE published the specification IEEE 1588-2019 that describes and standardized the PTP protocol. PTP can be carried by UDP packets at layer 3 or by layer 2 packets such as ethernet packets.</p><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a PTP sync packet <b>601</b> that can be used in accordance with some aspects. The PTP packet includes a PTP header <b>602</b> and PTP data <b>603</b>. The PTP header includes a message type field, a message length field, a clock domain identifier, flags, a correction field, a source porty identity, a sequence identifier, a control field, and a log message interval. The message type field can indicate the type of message (e.g., sync, delay request, delay response, etc.). The message length field indicates the full length of the PTP message. The clock domain identifier indicates the clock domain the PTP message belongs to. A clock domain is a logical grouping of clocks that synchronize to each other using PTP. The clocks in one domain are not necessarily synchronized to those in another domain. The flags field can indicate status. The correction field includes a correction value in nanoseconds that indicates residence time within a transparent clock and, for peer-to-peer transparent clocks, includes the path delay. The source port identity field identifies the originating port for the PTP message. The sequence identifier field can contain a sequence number for individual message types. The control field may contain a value that depends on the message type. The log message interval field is determined by the type of the message. The PTP data <b>603</b> includes an origin timestamp. The origin timestamp indicates the time that the PTP packet was transmitted by its originator.</p><p id="p-0067" num="0066">Devices (e.g., a PCIe card and a host computer) can communicate over a PCIe bus using PCIe messages and PCIe protocols in accordance with standards published by PCI-SIG. A PCIe device, such as NIC <b>430</b>, can implement PCIe physical functions (PFs) and PCIe virtual functions (VFs). In general, host processes using the host's device drivers access the PCIe PFs while VMs running on the host computer can use the VMs' device drivers to access the PCIe VFs. The VM's are typically prevented from directly accessing the PCIe PFs. PCIe SR-IOV is a technology that was standardized in &#x201c;Single Root I/O Virtualization and Sharing Specification Revision 1.1&#x201d; published by PCI-SIG on Jan. 20, 2010. In accordance with the standard, a SR-IOV capable PCIe card can provide PFs and numerous VFs. A smartNIC or other device implementing vCDs can provide access to HW clocks via PCIe PFs and VFs.</p><p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a high-level diagram illustrating a virtual machine <b>701</b> accessing a hardware clock <b>708</b> via a virtual clock domain (vCD) access point <b>703</b> according to some aspects. A process running in a VM <b>701</b> can attempt to read a time value from a HW clock. The process can use the VM's device driver <b>702</b> to access a VF that functions as a vCD access point. From the VM's perspective, the device driver may be providing access to a system's only hardware clock. From the perspective of the PCIe device (e.g., smartNIC <b>430</b>) the VM can be accessing a vCD access point <b>703</b> that is implemented as a PCIe VF. The vCD access point can be configured with a vCD identifier <b>704</b> that identifies the vCD associated with the VM. In this manner, the VM can use the vCD to read a HW clock. For example, the VM may be one of a group of VMs implementing a tenant's workload that is synchronized via the vCD. The VM, attempting to read the system clock, tries to read a time value via a VF implementing a vCD access point. The PCIe device can use the vCD to CD to HW clock mapping table <b>705</b> and the vCD identifier <b>704</b> to identify a HW clock. The current time <b>709</b> of the hardware clock <b>708</b> can be provided to the VM's device driver <b>702</b>.</p><p id="p-0069" num="0068">An advantage of providing distributed clocks as a service is that tenants have no need to run their own PTP stacks within their own VMs and have no need to provide reference clocks. Instead, the tenants' VMs can simply read system clocks. Many operating systems already have device drivers for reading system clocks. PCIe devices implementing vCDs can be configured to provide the functions (PF and VF) of system clocks. As such, current operating systems can benefit from the implementation of vCDs because such implementation happens within the PCIe device and is transparent to the operating system. Certain capabilities, however, may be disabled. VMs and, in some cases, host computers may have read only access <b>706</b> to the HW clocks via the vCD access points. Read only access prevents conditions such as a VM running a PTP stack and modifying a HW clock while the PCIe device also runs a PTP stack that maintains the same HW clock. The VMs and, in some cases, host computer processes may have read only access to the local hardware clock quality metrics <b>710</b>. Alternatively, write access may be granted to some aspects of the local hardware clock metrics. For example, the statistics may be initialized, gathering statistics may be halted or restarted, and periods over which to gather statistics may be set, etc. Administrators/orchestrators of the data center or vCD service may have write access to the PCIe device. For example, the PCIe device may be accessed using a terminal service, graphical user interface, or application program interface (API) calls. Administrative access to the PCIe device can be restricted by, for example, allowing such access only on certain VLANS.</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a high-level diagram illustrating vCDs distributed across multiple local area networks (LANs) according to some aspects. LAN <b>1</b> <b>810</b> and LAN <b>2</b> <b>811</b> can be connected via switch <b>1</b> <b>801</b> and switch <b>2</b> <b>802</b>. The LANs may be networks within server racks in a data warehouse. The LANs may be in different data warehouses or in any combination of data warehouses and tenant facilities. Two virtual clock domains are shown. On LAN <b>1</b>, vCD <b>1</b> uses CD <b>3</b>. On LAN <b>2</b>, vCD <b>1</b> uses CD <b>5</b>. On LAN <b>1</b>, vCD <b>2</b> uses CD <b>9</b>. On LAN <b>2</b>, vCD <b>2</b> uses CD <b>7</b>. In some implementations, the switches are configured to translate packets, such as PTP packets as follows. CD <b>3</b> packets on LAN <b>1</b> are translated to CD <b>5</b> packets on LAN <b>2</b>. CD <b>5</b> packets on LAN <b>2</b> are translated to CD <b>3</b> packets on LAN <b>1</b>. CD <b>9</b> packets on LAN <b>1</b> are translated to CD <b>7</b> packets on LAN <b>2</b>. CD <b>7</b> packets on LAN <b>2</b> are translated to CD <b>9</b> packets on LAN <b>1</b>. Translation can be accomplished by, for example, rewriting the clock domain field in PTP packets moving from one LAN to another. In other implementations, the clock domains on different LANs or VLANs may be synchronized via other techniques. For example, each CD may be synchronized to a different reference clock and the reference clocks may be synchronized using any technique that is appropriate for the implementation. A vCD may be associated with PTP, NTP, or another technology. Additionally, different vCDs may be associated with different synchronization technologies depending on where they are used. Furthering the example, in one LAN or data center, synchronization of a vCD can be accomplished with PTP and in another data center the same vCD may be synchronized via NTP.</p><p id="p-0071" num="0070">Host computer <b>1</b> <b>804</b>, host computer <b>2</b> <b>806</b>, and reference clock <b>1</b> are on LAN <b>1</b> <b>810</b>. Host computer <b>3</b> <b>808</b> and reference clock <b>2</b> are on LAN <b>2</b> <b>811</b>. A first workload can include VM <b>1</b>, VM <b>2</b>, VM <b>3</b>, and VM <b>5</b>. VM <b>1</b>, VM <b>2</b>, VM <b>3</b>, and VM <b>5</b> are all synchronized within vCD <b>1</b>. Reference clock <b>1</b> is the reference clock for vCD <b>1</b>. A second workload can include VM <b>4</b> and VM <b>6</b>. VM <b>4</b> and VM <b>6</b> are synchronized within vCD <b>2</b>. Reference clock <b>2</b> is the reference clock for vCD <b>2</b>.</p><p id="p-0072" num="0071">NIC <b>1</b> <b>803</b>, installed in host computer <b>1</b> <b>804</b>, includes HW clock A and synchronizes HW clock A to reference clock <b>1</b>. NIC <b>2</b> <b>805</b>, installed in host computer <b>2</b> <b>806</b>, includes HW clock B and HW clock C. NIC <b>2</b> synchronizes HW clock B to reference clock <b>1</b> and synchronizes HW clock C to reference clock <b>2</b>. NIC <b>3</b> <b>807</b>, installed on host computer <b>3</b> <b>808</b>, includes HW clock D and HW clock E. NIC <b>3</b> synchronizes HW clock D to reference clock <b>1</b> and synchronizes HW clock E to reference clock <b>2</b>. VM <b>1</b> and VM <b>2</b> can read time values from HW clock A via vCD access points provided by NIC <b>1</b>. VM <b>3</b> can read time values from HW clock B via a vCD access point provided by NIC <b>2</b>. VM <b>4</b> can read time values from HW clock C via a vCD access point provided by NIC <b>2</b>. VM <b>5</b> can read time values from HW clock D via a vCD access point provided by NIC <b>3</b>. VM <b>6</b> can read time values from HW clock E via a vCD access point provided by NIC <b>3</b>. Note that LAN <b>2</b> could have its own CD <b>3</b> and CD <b>9</b> that may be unrelated to the CD <b>3</b> and CD <b>9</b> of LAN <b>1</b>.</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a high-level diagram illustrating VMs on different host computers accessing vCDs on different virtual LANs (VLANs) according to some aspects. vCD <b>1</b> maps to CD <b>8</b> on VLAN <b>1</b>. vCD <b>2</b> maps to CD <b>8</b> on VLAN <b>2</b>. Clock domains on different VLANs can be completely unrelated to one another. For example, the clock domain CD <b>23</b> on VLAN <b>10</b> may be completely unrelated to the clock domain CD <b>23</b> on VLAN <b>11</b>. Reference clock <b>1</b> <b>901</b> is the reference clock for vCD <b>1</b>. Reference clock <b>2</b> <b>902</b> is the reference clock for vCD <b>2</b>. NIC <b>1</b> <b>904</b>, installed in host computer <b>1</b> <b>905</b>, synchronizes HW clock A to reference clock <b>1</b>. NIC <b>2</b> <b>906</b>, installed in host computer <b>2</b>, synchronizes HW clock B to reference clock <b>1</b> and synchronizes HW clock C to reference clock <b>2</b>. VM <b>1</b> and VM <b>2</b> can read time values from HW clock A via vCD access points provided by NIC <b>1</b>. VM <b>3</b> can read time values from HW clock B via a vCD access point provided by NIC <b>2</b>. VM <b>4</b> can read time values from HW clock C via a vCD access point provided by NIC <b>2</b>.</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIGS. <b>10</b>-<b>13</b></figref> illustrate a VM migrating from one host to another. An aspect of migrating a VM is that the vCD for the VM may need to be instantiated on the destination host computer. <figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates the initial state of the VMs and hosts. <figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates vCD instantiation data being transferred to the destination host. <figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates the host computer implementing the vCD for the migrating VM. <figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates the VM migrated to the destination host.</p><p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a high-level diagram illustrating VMs on different host computers accessing vCDs according to some aspects. vCD <b>1</b> maps to CD <b>5</b>. vCD <b>2</b> maps to CD <b>6</b>. Reference clock <b>1</b> <b>1001</b> is the reference clock for vCD <b>1</b>. Reference clock <b>2</b> <b>1002</b> is the reference clock for vCD <b>2</b>. NIC <b>1</b> <b>1004</b>, installed in host computer <b>1</b> <b>1005</b>, synchronizes HW clock A to reference clock <b>1</b>. NIC <b>2</b> <b>1006</b>, installed in host computer <b>2</b> <b>1007</b>, synchronizes HW clock C to reference clock <b>2</b>. VM <b>1</b> and VM <b>2</b> can read time values from HW clock A via vCD access points provided by NIC <b>1</b>. VM <b>3</b> can read time values from HW clock C via a vCD access point provided by NIC <b>2</b>.</p><p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a high-level diagram illustrating host computers sharing vCD instantiation data <b>1101</b> in preparation for virtual machine (VM) migration according to some aspects. The vCD instantiation data can include information from a row of the vCD to CD to HW clock mapping table. In this example, the CD identifier and the vCD identifier are sufficient. Additional data may be needed if the destination for the VM is on a different LAN or VLAN. That additional data can include identifiers for one or more of the source CD, destination CD, source LAN, destination LAN, source VLAN, and destination VLAN. In some implementations, communicating the vCD may be sufficient. A SmartNIC or other device can query a data store, such as a vCD orchestration data store, using the vCD. A vCD orchestration data store can associate the vCD with vCD instantiation data that can include the CD, LAN, reference clock, and other information. The vCD orchestration data store can return the vCD instantiation data in response to a query that includes the vCD identifier.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a high-level diagram illustrating a host computer instantiating a vCD in preparation for virtual machine (VM) migration according to some aspects. NIC <b>2</b> has instantiated vCD <b>1</b> and is synchronizing HW clock B to reference clock <b>1</b>. A PCIe VF is configured as a vCD access point for the migrating VM. VM <b>2</b> is shown as migrating. The process for migrating a VM (without a vCD) from one host to another is understood by those practiced in cloud infrastructure or hypervisors.</p><p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a high-level diagram illustrating a VM in a vCD that has migrated between host computers according to some aspects. VM <b>2</b> is running on host computer <b>2</b> <b>1007</b>. VM <b>2</b> can read time values from HW clock B via a vCD access point provided by NIC <b>2</b>. HW clock B is synchronized with vCD <b>1</b> which has reference clock <b>1</b> as the reference clock.</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a high-level flow diagram illustrating a method for providing a distributed clock as a service according to some aspects. After the start, at block <b>1401</b> the method can maintain a hardware clock within a host computer. At block <b>1402</b> the method can receive a network clock domain packet that includes a clock domain identifier and an origin timestamp produced by a reference clock. At block <b>1403</b>, the method can use the network clock domain packet to synchronize the hardware clock to the reference clock. At block <b>1404</b>, the method can use the hardware clock to provide a hardware timestamp value to a virtual machine (VM) running on the host computer or to a process running on the host computer, wherein the hardware clock is secured from manipulation by the VM or by the process.</p><p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a high-level flow diagram illustrating another method for providing a distributed clock as a service according to some aspects. At block <b>1501</b>, the method can maintain a plurality of clock domains on a plurality of hardware clocks in a plurality of network interface cards (NICs) installed in a plurality of host computers, wherein a plurality of clock domain identifiers identify the plurality of clock domains, the NICs are configured to use a network communications protocol to synchronize the hardware clocks within the clock domains, the NICs are configured to associate the clock domain identifiers with a plurality of virtual clock domain identifiers that identify a plurality of virtual clock domains, and a plurality of virtual machines (VMs) running on the host computers obtain hardware timestamp values from the NICs via the virtual clock domain identifiers.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>16</b></figref> illustrates a layer 2 PTP packet <b>1601</b> that can be used in accordance with certain aspects. As discussed above, PTP packets can be the payloads of UDP packets. The PTP specification also provides for carrying PTP packets as ethernet payloads. The PTP over ethernet packet <b>1601</b> includes a PTP over ethernet layer 2 header <b>1602</b> and a layer 2 payload <b>502</b>. Ethernet headers include an EtherType field <b>1603</b>. A value of 0x88F7 in the EtherType field <b>1603</b> indicates that the packet is a PTP over ethernet packet having a PTP packet <b>530</b> as the layer 2 payload <b>502</b>.</p><p id="p-0082" num="0081">The previous discussion described aspects using PTP as an enabling technology for illustrative purposes only. Those practiced in the arts of computer networking and clock synchronization are aware of numerous other technologies that may be used instead of PTP. A vCD identifier may be associated with a specifier for a synchronization technology. For example, a vCD may be associated with PTP, NTP, or another technology. Furthermore, different vCDs may be associated with different synchronization technologies depending on where they are used. For example, in one LAN or data center, synchronization of a vCD can be accomplished with PTP and in another data center the same vCD may be synchronized via NTP. More specifically, a vCD associated with PTP in a first LAN can be synchronized via PTP in that first LAN. That same vCD can be associated with another synchronization technology, such as NTP, in a second LAN and will therefore be synchronized via that other synchronization technology in that second LAN.</p><p id="p-0083" num="0082">Aspects described above can be ultimately implemented in a network appliance that includes physical circuits that implement digital data processing, storage, and communications. The network appliance can include processing circuits, ROM, RAM, CAM, and at least one interface (interface(s)). The CPU cores described above are implemented in processing circuits and memory that is integrated into the same integrated circuit (IC) device as ASIC circuits and memory that are used to implement the programmable packet processing pipeline. For example, the CPU cores and ASIC circuits are fabricated on the same semiconductor substrate to form a System-on-Chip (SoC). The network appliance may be embodied as a single IC device (e.g., fabricated on a single substrate) or the network appliance may be embodied as a system that includes multiple IC devices connected by, for example, a printed circuit board (PCB). The interfaces may include network interfaces (e.g., Ethernet interfaces and/or InfiniBand interfaces) and/or PCI Express (PCIe) interfaces. The interfaces may also include other management and control interfaces such as I2C, general purpose IOs, USB, UART, SPI, and eMMC.</p><p id="p-0084" num="0083">As used herein the terms &#x201c;packet&#x201d; and &#x201c;frame&#x201d; may be used interchangeably to refer to a protocol data unit (PDU) that includes a header portion and a payload portion and that is communicated via a network protocol or protocols. A PDU may be referred to as a &#x201c;frame&#x201d; in the context of Layer 2 (the data link layer) and as a &#x201c;packet&#x201d; in the context of Layer 3 (the network layer). For reference, according to the P4 specification: a network packet is a formatted unit of data carried by a packet-switched network; a packet header is formatted data at the beginning of a packet in which a given packet may contain a sequence of packet headers representing different network protocols; a packet payload is packet data that follows the packet headers; a packet-processing system is a data-processing system designed for processing network packets, which, in general, implement control plane and data plane algorithms; and a target is a packet-processing system capable of executing a P4 program.</p><p id="p-0085" num="0084">Although the operations of the method(s) herein are shown and described in a particular order, the order of the operations of each method may be altered so that certain operations may be performed in an inverse order or so that certain operations may be performed, at least in part, concurrently with other operations. Instructions or sub-operations of distinct operations may be implemented in an intermittent and/or alternating manner.</p><p id="p-0086" num="0085">It should also be noted that at least some of the operations for the methods described herein may be implemented using software instructions stored on a computer usable storage medium for execution by a computer. As an example, an embodiment of a computer program product includes a computer usable storage medium to store a computer readable program.</p><p id="p-0087" num="0086">The computer-usable or computer-readable storage medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device). Examples of non-transitory computer-usable and computer-readable storage media include a semiconductor or solid-state memory, magnetic tape, a removable computer diskette, a random-access memory (RAM), a read-only memory (ROM), a rigid magnetic disk, and an optical disk. Current examples of optical disks include a compact disk with read only memory (CD-ROM), a compact disk with read/write (CD-R/W), and a digital video disk (DVD).</p><p id="p-0088" num="0087">Although specific embodiments of the invention have been described and illustrated, the invention is not to be limited to the specific forms or arrangements of parts so described and illustrated. The scope of the invention is to be defined by the claims appended hereto and their equivalents.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>maintaining a hardware clock within a host computer;</claim-text><claim-text>receiving a network clock domain packet that includes a clock domain identifier and an origin timestamp produced by a reference clock;</claim-text><claim-text>using the network clock domain packet to synchronize the hardware clock to the reference clock; and</claim-text><claim-text>using the hardware clock to provide a hardware timestamp value to a virtual machine (VM) running on the host computer or to a process running on the host computer,</claim-text><claim-text>wherein the hardware clock is secured from manipulation by the VM or by the process.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further including providing a local hardware clock quality metric to the VM.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein<claim-text>a network interface card (NIC) that includes the hardware clock is installed in the host computer,</claim-text><claim-text>the NIC receives the network clock domain packet, and</claim-text><claim-text>the NIC synchronizes the hardware clock to the reference clock.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein<claim-text>the hardware clock is secured from manipulation by any process or VM running on the host computer.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein<claim-text>the NIC associates a virtual clock domain identifier with the clock domain identifier, and</claim-text><claim-text>the VM uses the virtual clock domain identifier to obtain the hardware timestamp value.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein<claim-text>the VM and the clock domain identifier are associated with a virtual clock domain identifier,</claim-text><claim-text>the virtual clock domain identifier identifies a virtual clock domain of the VM.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein:<claim-text>a plurality of VMs running on a plurality of host computers are associated with a virtual clock domain identifier that identifies a virtual clock domain,</claim-text><claim-text>a plurality of NICs installed in the host computers synchronize a plurality of hardware clocks in the virtual clock domain, and</claim-text><claim-text>the VMs obtain a plurality of hardware timestamp values from the plurality of hardware clocks.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein<claim-text>the VM is associated with a virtual clock domain identifier that identifies a virtual clock domain,</claim-text><claim-text>a second NIC is installed in a second host computer, and</claim-text><claim-text>migrating the VM to the second host computer includes instantiating the virtual clock domain at the second NIC.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein<claim-text>the NIC associates a virtual clock domain identifier with the clock domain identifier,</claim-text><claim-text>a second NIC is installed in a second host computer and includes a second hardware clock,</claim-text><claim-text>the hardware clock and the second hardware clock are synchronized within a virtual clock domain identified by the virtual clock domain identifier, and</claim-text><claim-text>the second NIC associates the virtual clock domain identifier with a second clock domain identifier that is different from the clock domain identifier.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein<claim-text>the network clock domain packet is received on a first virtual local area network,</claim-text><claim-text>a second network clock domain packet is received on a second virtual local area network,</claim-text><claim-text>the second network clock domain packet and the network clock domain packet include the same clock domain identifier,</claim-text><claim-text>the clock domain identifier of the network clock domain packet identifies a first clock domain, and</claim-text><claim-text>the clock domain identifier of the network clock domain packet identifies a second clock domain that is different from the first clock domain.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein the hardware clock is secured from manipulation by the host computer.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A method comprising:<claim-text>maintaining a plurality of clock domains on a plurality of hardware clocks in a plurality of network interface cards (NICs) installed in a plurality of host computers, wherein</claim-text><claim-text>a plurality of clock domain identifiers identify the plurality of clock domains,</claim-text><claim-text>the NICs are configured to use a network communications protocol to synchronize the hardware clocks within the clock domains,</claim-text><claim-text>the NICs are configured to associate the clock domain identifiers with a plurality of virtual clock domain identifiers that identify a plurality of virtual clock domains, and</claim-text><claim-text>a plurality of virtual machines (VMs) running on the host computers obtain hardware timestamp values from the NICs via the virtual clock domain identifiers.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein each one of the NICs is configured to instantiate the virtual clock domains based on virtual clock domain instantiation data received from another one of the NICs.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the VMs are prevented from manipulating the hardware clocks.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein<claim-text>the NICs are configured to use a virtual local area network (VLAN) to synchronize the hardware clocks,</claim-text><claim-text>the VLAN is configured to exclude network traffic to or from any one of the VMs.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A peripheral component card configured to:<claim-text>implement a plurality of hardware clocks;</claim-text><claim-text>be installed in a host computer;</claim-text><claim-text>use a network communications protocol to synchronize the hardware clocks within a plurality of clock domains identified by a plurality of clock domain identifiers;</claim-text><claim-text>associate the clock domain identifiers with a plurality of virtual clock domain identifiers that identify a plurality of virtual clock domains; and</claim-text><claim-text>provide a hardware timestamp value to a virtual machine running on the host computer based on the one of the virtual clock domains associated with the virtual machine.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The peripheral component card of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the peripheral component card is configured to:<claim-text>receive virtual clock domain instantiation data for an additional virtual clock domain; and</claim-text><claim-text>provide an additional hardware timestamp value based on the additional virtual clock domain.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The peripheral component card of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the peripheral component card is configured to:<claim-text>produce virtual clock domain instantiation data based on one the virtual clock domains; and</claim-text><claim-text>transmit the virtual clock domain instantiation data to an additional peripheral component card.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The peripheral component card of <claim-ref idref="CLM-00016">claim 16</claim-ref> wherein the peripheral component card is configured to provide a local hardware clock quality metric to the VMs.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The peripheral component card of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the peripheral component card is a network interface card configured to provide network communications to the host computer.</claim-text></claim></claims></us-patent-application>