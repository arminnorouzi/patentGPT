<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004404A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004404</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17902572</doc-number><date>20220902</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>445</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>44505</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2255</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">TECHNIQUES FOR MODIFYING A COMPUTE INSTANCE</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17125802</doc-number><date>20201217</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11481230</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17902572</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only"><addressbook><orgname>Oracle International Corporation</orgname><address><city>Redwood Shores</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Lindholm</last-name><first-name>Jacob M.</first-name><address><city>Londonderry</city><state>NH</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Pryde</last-name><first-name>Andrew James</first-name><address><city>Bristol</city><country>GB</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Horwitz</last-name><first-name>Joshua Aaron</first-name><address><city>Centreville</city><state>VA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Oracle International Corporation</orgname><role>02</role><address><city>Redwood Shores</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Systems, devices, and methods discussed herein are directed to modifying aspects of a compute instance. A user may request a change to the compute instance. The system may derive a state object indicating a future state of the compute instance were the change to be applied. A hash of a subset of the state object's attributes may be computed and provided to the requesting computing component. The system may subsequently proceed with applying the change. A current state object indicating a current state of the compute instance may be derived based on applying the change. An additional hash of the subset of the current state object's attributes may be computed and provided to the requesting computing component. The two hashes may be configured to enable the requesting computing component to verify the change to the compute instance has been implemented.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="86.36mm" wi="158.75mm" file="US20230004404A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="186.69mm" wi="130.05mm" orientation="landscape" file="US20230004404A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="198.20mm" wi="155.62mm" orientation="landscape" file="US20230004404A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="86.36mm" wi="136.74mm" orientation="landscape" file="US20230004404A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="91.69mm" wi="136.74mm" orientation="landscape" file="US20230004404A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="200.58mm" wi="155.62mm" orientation="landscape" file="US20230004404A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="196.17mm" wi="155.62mm" orientation="landscape" file="US20230004404A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="253.92mm" wi="157.14mm" file="US20230004404A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="241.98mm" wi="168.91mm" orientation="landscape" file="US20230004404A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="242.99mm" wi="169.08mm" orientation="landscape" file="US20230004404A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="246.04mm" wi="171.79mm" orientation="landscape" file="US20230004404A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="239.86mm" wi="170.77mm" orientation="landscape" file="US20230004404A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="243.84mm" wi="168.32mm" orientation="landscape" file="US20230004404A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 17/125,802, entitled &#x201c;TECHNIQUES FOR MODIFYING A COMPUTE INSTANCE,&#x201d; filed Dec. 17, 2020, the entirety of which is incorporated by reference for all purposes.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Cloud computing providers may manage many compute instances on behalf of a variety of users. Typically, a user may not modify aspects of those computing instances. Additionally, it can be difficult to ascertain when a change to a compute instance has converged. Embodiments described herein address these and other problems, individually and collectively.</p><heading id="h-0003" level="1">BRIEF SUMMARY</heading><p id="p-0004" num="0003">Techniques are provided (e.g., a method, a system, non-transitory computer-readable medium storing code or instructions executable by one or more processors) for modifying aspects of a compute instance that is managed by a cloud computing infrastructure (CII) provider. Various embodiments are described herein, including methods, systems, non-transitory computer-readable storage media storing programs, code, or instructions executable by one or more processors, and the like.</p><p id="p-0005" num="0004">One embodiment is directed to a method. The method may comprise managing, by a computing system, a compute instance of a cloud computing environment based at least in part on management of a first state object corresponding to the compute instance. In some embodiments, the first state object comprises a set of attributes indicating a current state of the compute instance. The method may further comprise receiving, by the computing system from a requesting computing component, change request data indicating a requested change to a particular attribute of the compute instance. The method may further comprise deriving, by the computing system, a second state object of the compute instance based at least in part on the requested change and the first state object indicating the current state of the compute instance. The method may further comprise calculating, by the computing system, a first hash value based at least in part on a first subset of attributes of a set of attributes of the second state object. The method may further comprise providing, by the computing system to the requesting computing component, the first hash value. The method may further comprise executing, by the computing system, the requested change to the compute instance. The method may further comprise updating, by the computing system, the first state object based at least in part on executing the requested change to the compute instance. The method may further comprise calculating, by the computing system, a second hash value based at least in part on a second subset of the set of attributes of the first state object. The method may further comprise providing, by the computing system, the second hash value to the requesting computing component. In some embodiments, the first hash value and the second hash value are configured to be utilized by the requesting computing component to verify that the requested change has been implemented at the compute instance.</p><p id="p-0006" num="0005">Another embodiment is directed to a computing device. The computing device may comprise a computer-readable medium storing non-transitory computer-executable program instructions. The computing device may further comprise a processing device communicatively coupled to the computer-readable medium for executing the non-transitory computer-executable program instructions. Executing the non-transitory computer-executable program instructions with the processing device causes the computing device to perform the method above.</p><p id="p-0007" num="0006">Yet another embodiment is directed to a non-transitory computer-readable storage medium storing computer-executable program instructions that, when executed by a processing device of a computing device, cause the computing device to perform the method above.</p><p id="p-0008" num="0007">The foregoing, together with other features and embodiments will become more apparent upon referring to the following specification, claims, and accompanying drawings.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008">Various embodiments in accordance with the present disclosure will be described with reference to the drawings, in which:</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example environment in which the disclosed techniques for modifying a compute instance may be implemented, according to at least one embodiment;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram illustrating an example method for deriving a hash value representing a requested change to a compute instance, according to at least one embodiment.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example current state object, according to at least one embodiment;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example desired state object, according to at least one embodiment;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flow diagram illustrating an example method for applying a requested change to a compute instance, according to at least one embodiment.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow diagram illustrating an example method for identifying that a previously-requested change has been made to a compute instance, according to at least one embodiment.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts a flowchart illustrating an example of a method for modifying an attribute of a compute instance, according to at least one embodiment.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram illustrating one pattern for implementing a cloud infrastructure as a service system, according to at least one embodiment.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a block diagram illustrating another pattern for implementing a cloud infrastructure as a service system, according to at least one embodiment.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram illustrating another pattern for implementing a cloud infrastructure as a service system, according to at least one embodiment.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a block diagram illustrating another pattern for implementing a cloud infrastructure as a service system, according to at least one embodiment.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a block diagram illustrating an example computer system, according to at least one embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0022" num="0021">In the following description, for the purposes of explanation, specific details are set forth in order to provide a thorough understanding of certain embodiments. However, it will be apparent that various embodiments may be practiced without these specific details. The figures and description are not intended to be restrictive. The word &#x201c;exemplary&#x201d; is used herein to mean &#x201c;serving as an example, instance, or illustration.&#x201d; Any embodiment or design described herein as &#x201c;exemplary&#x201d; is not necessarily to be construed as preferred or advantageous over other embodiments or designs.</p><p id="p-0023" num="0022">The present disclosure relates to a system and techniques for enabling user modification of a compute instance managed by one or more cloud-computing provider computers (referred to herein as &#x201c;cloud computing computer(s)&#x201d; for brevity). A user may wish to change some aspect of a compute instance. By way of example, the user may wish to request a name change for a component of a compute instance. Accordingly, the user may submit, via an application programming interface exposed by the cloud computing computer(s), a request to modify an attribute of the compute instance (e.g., an attribute corresponding to the name of a component of the compute instance). The cloud computing computer(s) may receive the request and retrieve a current state of the compute instance. The current state of the compute instance may be maintained in a state object (referred to as a &#x201c;current state object&#x201d;). The cloud computing computer(s) may compute a future state of the compute instance should the change be implemented. By way of example, the state object may be copied and its attributes may be modified in accordance with the request change. These modified set of attributes may be stored as a separate state object (referred to as a &#x201c;requested state object&#x201d;) for subsequent use.</p><p id="p-0024" num="0023">Each compute instance may be associated with any suitable number of attributes. These attributes may include an image version running on the instance (e.g., an image version corresponding to an operating system, a software package, a default configuration, or the like), a number of central processing units (CPUs), an amount of memory allocated to the host, an expiration time of one or more security tokens, an address indicating which compute instance to use, and the like. Although examples herein discuss a user's modification of a component name, it should be appreciated that the examples equally apply to other changes the user may request. These changes requested by the user may relate to one or more modifications of any suitable combination of attributes associated with the compute instance.</p><p id="p-0025" num="0024">A hash value may be calculated from a subset of the set of attributes of the requested state object. The particular set of attributes hashed may be predefined and vary depending on the requestor (or the computing component utilized to initiate the change request). It may be the case that different users may be interested in different aspects of the compute instance. Thus, a hash value computed for one user may utilize a different set of attributes/data fields of the object then a set of attributes/data fields of the object used for computing a hash for another user.</p><p id="p-0026" num="0025">The hash value (e.g., a hash value corresponding to the requested change) may be provided to a component that provided the change request (e.g., a requesting computing component) and stored for subsequent verification. Periodically, the current state object of the compute instance may be retrieved and a hash value corresponding to the current state of the compute instances may be computed from that object and provided to the requesting computing component. The hash values may be utilized by the requesting computing component to determine that the requested change has been applied to the compute instance. By way of example, the requesting computing component may compare the hash value corresponding to the requested change and the hash value corresponding to the current state of the compute instance. If the hash values match, the requesting computing component may be configured to determine that the requested change has been applied to the compute instance.</p><p id="p-0027" num="0026">The disclosed techniques provide improvements over conventional systems. Conventional systems may restrict user's from modifying aspects of a compute instance and/or it may be difficult to ascertain when a particular change has been made to a compute instance. By utilizing the techniques described herein, the requesting computing component need not compare attributes of the requested state object to those of the state object that maintains the current state of the compute instance. Rather, the requesting computing component need only compare two hash values to ascertain whether the requested change has been implemented. A management plane of the cloud-computing provider computer(s) can be utilized to enact the requested change, update the current state of the compute instance, and calculate the hash values. In this manner, although the particular attributes associated with a requesting computing component and/or the exact implementation may change in the management plane, the requesting computing component (e.g., a control plane of the cloud-computing provider computer(s)) need not be modified. By maintaining the logic corresponding to modifying compute instances and calculating hash values in the management plane, the implementation of the requesting computing component (e.g., the control plane of the computing system) is greatly simplified and decoupled from changes made to the management plane.</p><p id="p-0028" num="0027">Moving on to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, which illustrates an example environment <b>100</b> in which the disclosed techniques for modifying a compute instance may be implemented, according to at least one embodiment. Environment <b>100</b> may include cloud infrastructure system <b>102</b> that is configured to manage, on behalf of a user, one or more infrastructure components (e.g., infrastructure component(s) <b>104</b>). A cloud-computing provider can host the cloud-computing environment <b>102</b> which provides infrastructure component(s) <b>104</b> (e.g., servers, storage devices, network nodes (e.g., hardware), deployment software, platform virtualization (e.g., a hypervisor layer), or the like). The one or more infrastructure components may include any suitable number of compute instances that are configured to provide a particular infrastructure component. A compute instance may include one or more bare metal compute instances that provides dedicate physical server access for high performance and strong isolation and/or one or more virtual machines. A virtual machine is an independent computing environment that runs on top of physical bare metal hardware. The infrastructure component(s) <b>104</b> may be configured to provide computing resources to any suitable number of users. In some embodiments, the cloud-computing provider may also supply a variety of services to accompany those infrastructure components (e.g., billing, monitoring, logging, security, load balancing and clustering, etc.). Thus, as these services may be policy-driven, users may be able to implement policies to drive load balancing to maintain application availability and performance.</p><p id="p-0029" num="0028">In some instances, user device <b>106</b> may be utilized to access (e.g., via user interface <b>108</b>) resources and services of the cloud infrastructure system <b>102</b>. The user device <b>106</b> may be any suitable type of computing device such as, but not limited to, a mobile phone, a hand-held scanner, a touch screen device, a smartphone, a personal digital assistant (PDA), a laptop computer, a desktop computer, a thin-client device, a tablet PC, or the like. In some examples, the user device <b>106</b> may be in communication with the cloud infrastructure system <b>102</b> via the network(s) <b>110</b>, or via other network connections. In some examples, the network(s) <b>110</b> may include any one or a combination of many different types of networks, such as cable networks, the Internet, wireless networks, cellular networks, and other private and/or public networks. The user device <b>106</b> can be utilized to invoke functionality of the cloud infrastructure system <b>102</b> to create virtual machines (VMs) (e.g., compute instances), install operating systems (OSs) in the VMs, deploy middleware, such as databases, create storage buckets for workloads and backups, and/or install enterprise software onto that VM. User device <b>106</b> may further be utilized to request provider's services to perform various functions, including balancing network traffic, troubleshooting application issues, monitoring performance, managing disaster recovery, etc.</p><p id="p-0030" num="0029">The cloud infrastructure system <b>102</b> may include a control plane <b>112</b> and a data plane <b>114</b>. In some embodiments, the control plane <b>112</b> may expose one or more application programming interfaces with which the functionality of the cloud infrastructure system <b>102</b> may be invoked (e.g., by the user device <b>106</b>). The control plane <b>112</b> may be configured to receive requests (e.g., from user device <b>106</b>) and, in response to those requests, provide data to the data plane <b>114</b> for performing operations corresponding to those requests. In some embodiments, the control plane <b>112</b> may be configured to provide status updates to user device <b>106</b> regarding status of one or more requests initiated by user device <b>106</b>. Some of the requests received by the control plane <b>112</b> may request modification to existing infrastructure component(s) <b>104</b>.</p><p id="p-0031" num="0030">The cloud infrastructure system <b>102</b> may include data plane <b>114</b>. In some embodiments, the data plane <b>114</b> may be configured to perform any suitable operations for provisioning, deploying, and maintaining the infrastructure component(s) <b>104</b> according to the requests provided by the control plane <b>112</b>. In some embodiments, data plane <b>114</b> may utilize one or more computing processes (e.g., worker(s) <b>116</b>) to perform various operations related to provisioning infrastructure component(s) <b>104</b>, deploying software artifacts to the infrastructure component(s) <b>104</b>, modifying aspects of the infrastructure component(s) <b>104</b>, or the like.</p><p id="p-0032" num="0031">The data plane <b>114</b> may be configured to maintain state objects corresponding to a current state of each of the infrastructure component(s) <b>104</b>. These state object may be periodically updated by the monitoring service <b>120</b> on change, according to a predefined periodicity, according to a schedule, or at any suitable time. In some embodiment, the data plane <b>114</b> may maintain additional state objects each corresponding to requested change submitted for a given infrastructure component. These additional state object may be referred to herein as &#x201c;desired state objects&#x201d;. Examples of current state objects and desired state objects are provided in connection with <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>4</b></figref>, respectively. In some embodiments, these objects may be stored in state information data store <b>118</b>.</p><p id="p-0033" num="0032">The data plane <b>114</b> may, at any suitable time, calculate a hash of one or more attributes of a state object. The particular attributes used to calculate a hash may, in some embodiments, depend on the requestor and/or the requesting computing component that requested a change in the infrastructure component. In some embodiments, the data plane <b>114</b> may be configured with a mapping that identify a corresponding set of attributes from a state object that are to be utilized to calculate a hash value for a particular requestor/requesting computing component. The data plane <b>114</b> may compute hash values corresponding to a desired state and a current state of the infrastructure component. By way of example, the data plane <b>114</b> may maintain attributes corresponding to a current state of an infrastructure in a current state object stored in state information data store <b>118</b>. The data plane <b>114</b> may retrieve the current state object and modify its attributes according to a requested change received from the control plane <b>112</b> (and, in some embodiments, initiated from the user device <b>106</b>). The data plane <b>114</b> may calculate a hash value corresponding to the desired state and provide this hash value to the control plane <b>112</b>, which in turn may store the hash value for subsequent use. The control plane <b>112</b> may be configured to request the current state hash value from the data plane <b>114</b> according to a predefined periodicity and/or schedule.</p><p id="p-0034" num="0033">The data plane <b>114</b> may be configured to instantiate and/or task worker(s) <b>116</b> with executing operations for applying a requested change to a given infrastructure component. In some embodiments, the data plane <b>114</b> may store data corresponding to various tasks associated with managing and/or modifying the infrastructure component(s) <b>104</b> in state information data store <b>118</b> (or another suitable location). The worker(s) <b>116</b> may be configured to retrieve this data sequentially (e.g., in the order in which the data was stored) and execute any suitable operations for performing the task (e.g., modifying an attribute of an infrastructure component). The monitoring service <b>120</b> may monitor the state of an infrastructure component and, upon determining a change has occurred, may update a current state object corresponding to the current state of that infrastructure component. This updated object may continue to be stored in the state information data store <b>118</b>. The monitoring service <b>120</b> may invoke functionality of the data plane <b>114</b>, and/or the monitoring service <b>120</b> may be configured, to calculate a hash value corresponding to the current state object as modified by the requested change. The hash values calculated by the data plane <b>114</b> and/or components of the data plane <b>114</b> (e.g., the monitoring service <b>120</b>) may be provided to the control plane <b>112</b> at any suitable time (e.g., immediately, or upon the next request received from the control plane <b>112</b> for a current state hash value). The control plane <b>112</b> may be configured to perform reconciliation operations such as comparing the desired state hash value provided earlier to each current state hash value obtained from the data plane <b>114</b>. When the control plane <b>112</b> determines that the desired state hash value and the current state hash value match, it may be configured to provide status data to the user device <b>106</b> via the user interface <b>108</b> that indicates the requested change has been completed. In some embodiments, once a requested change is completed, the data plane <b>114</b> (or a component of the data plane <b>114</b> such as worker(s) <b>116</b> may perform operations to delete any data pertaining to the requested change, while the current state object persists in the state information data store <b>118</b> continuing to be updated by the monitoring service <b>120</b> over time.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram illustrating an example method <b>200</b> for deriving a hash value representing a requested change to a compute instance, according to at least one embodiment. The method <b>200</b> may be performed by user device <b>202</b> (e.g., the user device <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), control plane <b>204</b> (e.g., the control plane <b>112</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), data plane <b>206</b> (e.g., the data plane <b>114</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), and state information data store <b>208</b> (e.g., the state information data store <b>118</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). The method <b>200</b> may include more or fewer operations that those illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. These operations may be performed in any suitable order. In some embodiments, one or more operations performed by a multiple components may be performed by a single component and/or operations performed by a single component may be split and provided by multiple components.</p><p id="p-0036" num="0035">The method <b>200</b> may begin at <b>210</b>, where the user device <b>202</b> may initiate (e.g., via a user interface such as the user interface <b>108</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) a request to modify an aspect of an existing infrastructure component. By way of example, the user device <b>202</b> may be utilized to initiate a request (e.g., a change request) to modify a component name (or another attribute such as image version, number of CPUs, amount of memory, an expiration time corresponding to one or more security tokens, an address, etc.) of a particular infrastructure component. The change request may include any suitable data such as an identifier of the user device <b>202</b> and/or an entity (e.g., a user) associated with the user device <b>202</b>, any suitable data for indicating the requested change(s), and any suitable data that indicates the infrastructure component(s) (e.g., one or more of the infrastructure component(s) <b>104</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) to which the change request applies.</p><p id="p-0037" num="0036">At <b>212</b>, the control plane <b>204</b> may utilize any suitable application programming interface exposed by the data plane <b>206</b> to pass the change request to the data plane <b>206</b>. At <b>214</b>, in response to receiving the change request, the data plane <b>206</b> may be configured to obtain a state object from the state information data store <b>208</b> corresponding to the infrastructure component(s) identified in the change request. For illustrative purposes, an example change request may indicate a change (e.g., a name change, image version change, a change to the number of CPUs, a change to the amount of memory, a change to an expiration time, an address change, or the like) for a single infrastructure component. In this example, the state object that is used by the data plane <b>206</b> to maintain current state attributes associated with that infrastructure component may be obtained from the state information data store <b>208</b>. In some embodiments, an identifier for the infrastructure component may be obtained from the change request and utilized to retrieve a corresponding state object from the state information data store <b>208</b>.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example current state object (e.g., current state object <b>300</b>, a state object that maintains a set of attributes corresponding to the current state of the infrastructure component being modified in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>), according to at least one embodiment. The current state object may include any suitable number of attributes. Each attribute may include an attribute identifier (e.g., &#x201c;attribute 1,&#x201d; &#x201c;attribute 2,&#x201d; etc.) and a corresponding value (e.g., value 1, value 2, etc.). The current state object <b>300</b> may be utilized to store a superset of the attributes associated with the current state of a particular infrastructure component. In some embodiments, at least one of the attributes of the set may include an identifier corresponding to the infrastructure component to which the object pertains. This identifier may be utilized to search for and retrieve the object from a set of objects, each one corresponding to different infrastructure components.</p><p id="p-0039" num="0038">In some embodiments, it may be the case that a particular requestor is not interested in every attribute of the current state. Rather, one change requestor may be interested in a subset of attributes (e.g., attribute subset <b>302</b>) while a different change requestor may be interested in a different subset of attributes (e.g., attribute subset <b>304</b>). In some embodiments, these subsets may be mutually exclusive or two or more subsets may share one or more attributes among them. The data plane <b>206</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be configured with a mapping that indicates the particular subset of attribute that pertains to a particular requestor. In some embodiments, this mapping may be preloaded prior to run time as part of configuration efforts associated with the data plane.</p><p id="p-0040" num="0039">Returning to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the data plane <b>206</b> may identify, from the mapping, a subset of attributes associated with the change requestor. As a non-limiting example, the mapping may identify subset <b>302</b> as pertaining to the change requestor. The data plane <b>206</b> may generate a new state object (e.g., a desired state object) and copy the attributes of current state object <b>300</b> to this new state object. The desired state object may then be modified in accordance with the change request. Said another way, the data plane <b>206</b> may modify one or more attributes of the desired state object to values that should exist in the current state object after the change to the infrastructure component is complete. These attributes and corresponding values, including any changes made with respect to the change request, may be referred to as &#x201c;desired state data&#x201d; and may be used to indicate a desired and/or future state of the infrastructure component.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example desired state object (e.g., desired state object <b>400</b>), according to at least one embodiment. The desired state object <b>400</b> may be substantially similar to the current state object <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> in that it may include the same attributes as the current state object <b>300</b>, although the respective values of those attributes may differ between the objects. The desired state object <b>400</b> may also include a superset of attributes that indicate a state of an infrastructure component. While the current state object maintains data (e.g., current state data) that indicates a current state of the infrastructure component, the desired state object <b>400</b> may be utilized to maintain data indicating a desired and/or future state corresponding to a change request. The desired state object <b>400</b> may also include attribute subset <b>402</b> and attribute subset <b>404</b> which corresponding with attribute subset <b>302</b> and attribute subset <b>304</b>, respectively.</p><p id="p-0042" num="0041">Returning to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the method <b>200</b> may proceed to <b>218</b>, where the data plane <b>206</b> may identify from the mapping it stores, an attribute subset (e.g., attribute subset <b>402</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>) that corresponds to the requesting computing component (e.g., an entity associated with the user device <b>106</b>. By way of example, the data plane <b>206</b> may obtain the identifier of the user device <b>202</b> and/or an entity (e.g., a user) associated with the user device <b>202</b> from the change request data received at <b>212</b> and utilize this identifier to identify attribute subset <b>402</b>. Using the attributes of the attribute subset <b>402</b>, the data plane <b>206</b> may compute a hash value using a predefined hashing algorithm and attribute subset <b>402</b> as input. The particular operations performed to calculate hash values using any suitable number of attributes may be identified according to a predefined scheme known to and enforced by the data plane <b>206</b>. In some embodiments, the change request data may be stored at the state information data store <b>208</b> at <b>220</b>. For example, in some embodiments, the change request data and the computed hash value may be stored in the desired state object which in turn is stored in the state information data store <b>208</b>. In some embodiments, the state information data store <b>208</b> may serve as a queue for pending changes to be made. Thus, the change request data may be stored in any suitable manner that indicates operations for the change have yet to be made.</p><p id="p-0043" num="0042">At <b>222</b>, the data plane <b>206</b> may provide the hash value calculated from the desired state data to the control plane <b>204</b> which in turn may store the hash value in local memory at <b>224</b>. This hash value may be referred to herein as the &#x201c;desired state hash value.&#x201d;</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flow diagram illustrating an example method <b>500</b> for applying a requested change to a compute instance (e.g., a particular infrastructure component of the infrastructure component(s) <b>104</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), according to at least one embodiment. The method <b>500</b> may be performed with the state information data store <b>502</b> (e.g., the state information data store <b>118</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), worker <b>504</b> (e.g., one of the worker(s) <b>116</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), compute instance <b>506</b> (e.g., the particular infrastructure component to which the change request of <figref idref="DRAWINGS">FIG. <b>2</b></figref> pertains, one of the infrastructure component(s) <b>104</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), and monitoring service <b>508</b> (e.g., the monitoring service <b>120</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). The method <b>500</b> may include more or fewer operations than those shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The operations of method <b>500</b> may be performed in any suitable order. In some embodiments, one or more operations performed by a multiple components may be performed by a single component and/or operations performed by a single component may be split and provided by multiple components.</p><p id="p-0045" num="0044">The method <b>500</b> may begin at <b>510</b>, where a worker <b>504</b> may be instantiated and request, from the state information data store <b>502</b>, change request data corresponding to the next change to be made to an infrastructure component. In some embodiments, the state information data store <b>502</b> may maintain a queue of one or more change requests that have yet to be applied. In some embodiments, the worker <b>504</b> may be configured to obtain the oldest change request from the state information data store <b>502</b>.</p><p id="p-0046" num="0045">The worker may be configured to access logic for identifying particular operations to be performed to apply the requested change as indicated by the change request data. At <b>512</b>, the worker <b>504</b> may perform these operations to apply the change to compute instance <b>506</b> (the particular infrastructure component to which the change request relates).</p><p id="p-0047" num="0046">At <b>514</b>, the monitoring service <b>508</b> may be configured to request state data corresponding to the compute instance <b>506</b>. In some embodiments, the monitoring service <b>508</b> may be configured to request state data from compute instance <b>506</b> according to a predefined periodicity, schedule, or the like.</p><p id="p-0048" num="0047">At <b>516</b>, the monitoring service <b>508</b> may receive current state data indicating a current state of the compute instance <b>506</b>. Additionally, or alternatively, the compute instance <b>506</b> may report its current state data as a result of the operations performed by the worker at <b>512</b>. Additionally, or alternatively, the worker <b>504</b> may report the change to the monitoring service <b>508</b> (for example, upon completion of the change requested).</p><p id="p-0049" num="0048">At <b>518</b>, the monitoring service <b>508</b> may request access to the current state object corresponding to the compute instance <b>506</b>. By way of example, the monitoring service <b>508</b> may submit a request to the state information data store <b>502</b> for a current state object corresponding to an identifier associated with the compute instance <b>506</b> and, in response to this request, the state information data store <b>502</b> may return the current state object.</p><p id="p-0050" num="0049">At <b>520</b>, the monitoring service <b>508</b> may perform any suitable operations for updating the current state object with the current state data received at <b>516</b>. In some embodiments, these operations may include overwriting one or more previous attribute values stored in the current state object with different values obtained from the current state data received at <b>516</b>.</p><p id="p-0051" num="0050">At <b>522</b>, the monitoring service <b>508</b> may perform operations to store newly-modified current state object in the state information data store <b>502</b>. By storing the newly-modified current state object in the state information data store <b>502</b>, the monitoring service <b>508</b> may make the current state data accessible to the data plane <b>114</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> and/or any suitable component of the data plane <b>114</b>.</p><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow diagram illustrating an example method <b>600</b> for identifying that a previously-requested change has been made to a compute instance, according to at least one embodiment. The method <b>500</b> may be performed with the user device <b>602</b> (e.g., the user device <b>202</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>), the control plane <b>604</b> (e.g., the control plane <b>204</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>), the data plane <b>606</b> (e.g., the data plane <b>206</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>), and the state information data store <b>608</b> (e.g., the state information data store <b>502</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>). The method <b>600</b> may include more or fewer operations than those shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. The operations of method <b>600</b> may be performed in any suitable order. In some embodiments, one or more operations performed by a multiple components may be performed by a single component and/or operations performed by a single component may be split and provided by multiple components. In some embodiments, the method <b>600</b> may be performed after the method <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> has been performed.</p><p id="p-0053" num="0052">The method <b>600</b> may begin at <b>610</b>, wherein the control plane <b>604</b> may submit a request for current state data to the data plane <b>606</b>. In some embodiments, the control plane <b>604</b> may submit this request according to a predefined periodicity, according to a predefined schedule, or at any suitable time. As a non-limiting example, once the method <b>200</b> has been performed, the control plane <b>604</b> may be configured to request current state data for the corresponding infrastructure component associated with the change request of <figref idref="DRAWINGS">FIG. <b>2</b></figref> at a periodic rate (e.g., every five minutes, two minute, 30 seconds, daily, nightly, etc.). In some embodiments, this request may indicate the requestor (e.g., the user device <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> and/or an entity associated with that device) of the change request of <figref idref="DRAWINGS">FIG. <b>2</b></figref> and an identifier for the infrastructure component to which the change request pertained.</p><p id="p-0054" num="0053">At <b>612</b>, the data plane <b>606</b> may access the current state object corresponding to the identifier for the infrastructure component to which the change request pertained. At <b>614</b>, the state information data store <b>608</b> may return the current state object for that infrastructure component.</p><p id="p-0055" num="0054">At <b>616</b>, using the identifier for the requestor provided by the control plane <b>604</b> at <b>610</b>, the data plane <b>606</b> may consult its locally stored mapping to identify an attribute subset (e.g., the attribute subset <b>302</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>) to which the requestor is associated. Using only the attributes of that subset and a predefined hashing algorithm, the data plane <b>606</b> may be configured to compute another hash value representing a current state of the infrastructure component with respect to that subset of attributes. The particular operations performed to calculate this hash value may be identified according to a predefined scheme known and enforced by the data plane <b>206</b>.</p><p id="p-0056" num="0055">At <b>618</b>, the hash value calculated at <b>616</b> (referred to as the current state hash value) may be provided to the control plane <b>604</b> in response to the request submitted at <b>610</b>.</p><p id="p-0057" num="0056">At <b>620</b>, the control plane <b>604</b> may be configured to compare the desired state hash value received at <b>222</b> as part of performing the method <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. In some embodiments, if the current state hash value provided at <b>618</b> does not match the desired state hash value received at <b>222</b> during the method <b>200</b>, the method <b>600</b> may proceed back to <b>610</b> when, at a subsequent time, a new request for current state data is submitted resulting in a new current state hash value being computed and compared to the desired state hash value. This method may be repeated any suitable number of times until the comparison indicates the current state hash value and the desired state hash value match. A match, in this context, indicates that the requested change to the corresponding infrastructure component has been completed.</p><p id="p-0058" num="0057">At <b>622</b>, the control plane <b>604</b> may provide an indication to the user device <b>602</b> that the requested change was completed. In some embodiments, this indication may be presented at the user interface <b>108</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Although not depicted, it should be appreciated that the user interface <b>108</b> may provide one or more options for cancelling a previously submitted change request. This option may be exercised by a user at any suitable time (e.g., after a relatively substantial time period has passed after a change request was submitted, for example, 30 minutes for a change that should have taken approximately two minutes to complete).</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts a flowchart illustrating an example of a method <b>700</b> for modifying an attribute of a compute instance, according to at least one embodiment. The method <b>700</b> may be performed by one or more components of the cloud infrastructure system <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The method <b>700</b> may include more or fewer operations than those depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. These operations may be performed in any suitable order.</p><p id="p-0060" num="0059">The method <b>700</b> may being at <b>701</b>, where a compute instance (e.g., an infrastructure component of the infrastructure component(s) <b>104</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) of a cloud computing environment (e.g., environment <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) may be managed by a computing system (e.g., by the cloud infrastructure system <b>102</b>). In some embodiments, the compute instance may be managed based at least in part on management of a first state object corresponding to the compute instance (e.g., the current state object <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>). In some embodiments, the first state object comprises a set of attributes indicating a current state of the compute instance (e.g., attributes 1-N of <figref idref="DRAWINGS">FIG. <b>3</b></figref>).</p><p id="p-0061" num="0060">At <b>702</b>, change request data indicating a requested change to a particular attribute of the compute instance may be received by the computing system (e.g., by the control plane <b>204</b>, by the data plane <b>206</b>, etc.) from a requesting computing component (e.g., the user device <b>202</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, an example of the user device <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the control plane <b>204</b>, etc.).</p><p id="p-0062" num="0061">At <b>703</b>, a second state object of the compute instance (e.g., the desired state object <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>) may be derived (e.g., by the data plane <b>206</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>) based at least in part on the requested change and the first state object indicating the current state of the compute instance. An example of this derivation is discussed at <b>216</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0063" num="0062">At <b>704</b>, a first hash value (e.g., a desired state hash value) is calculated by the computing system (e.g., the data plane <b>206</b>). In some embodiments, the first hash value is calculated based at least in part on a first subset of attributes (e.g., attribute subset <b>402</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>) of a set of attributes of the second state object. An example of this calculation is discussed above at <b>218</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0064" num="0063">At <b>705</b>, the first hash value (e.g., the desired state hash value) is provided by the computing system (e.g., the data plane <b>206</b>) to the requesting computing component (e.g., the control plane <b>204</b>, the user device <b>202</b> via the control plane <b>204</b>).</p><p id="p-0065" num="0064">At <b>706</b>, the computing system executes the requested change to the compute instance. Executing the requested change can comprise initiating a separate computing process (e.g., worker <b>504</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, an example of the worker(s) <b>116</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) to perform one or more operations for applying the change request to the compute instance.</p><p id="p-0066" num="0065">At <b>707</b>, the first state object (e.g., the current state object associated with the compute instance) may be updated by the computing system (e.g., the monitoring service <b>508</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>) based at least in part on executing the requested change to the compute instance. An example of this update is discussed above at <b>520</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0067" num="0066">At <b>708</b>, a second hash value is calculated (e.g., by the data plane <b>606</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>, an example of the data plane <b>114</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). In some embodiments, the second hash value (e.g., a current state hash value) is calculated based at least in part on a second subset of the set of attributes of the first state object (e.g., attribute subset <b>302</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> which correspond to the attribute subset <b>402</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>).</p><p id="p-0068" num="0067">At <b>709</b>, the second hash value (e.g., the current state hash value) is provided by the computing system to the requesting computing component (e.g., the control plane <b>604</b>, the user device <b>602</b> via the control plane <b>604</b>). In some embodiments, the first hash value and the second hash value are configured to be utilized by the requesting computing component to verify that the requested change has been implemented at the compute instance. By way of example, the control plane <b>604</b> may be configured to compare the first hash value (e.g., the desired state hash value received at <b>222</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>) with the second hash value (e.g., the current state hash value received at <b>618</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>). The requesting computing component may identify the change requested as being completed when the two hash values match. If the hash values do not match, the requesting computing component (e.g., the control plane <b>604</b>) may subsequently request new current state data (e.g., a new current state hash value representing attributes of a later state) and perform the comparison again. This process may be repeated any suitable number of times until a match is identified and/or the change request is cancelled (e.g., via the user interface <b>108</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>).</p><p id="p-0069" num="0068">As noted above, infrastructure as a service (IaaS) is one particular type of cloud computing. IaaS can be configured to provide virtualized computing resources over a public network (e.g., the Internet). In an IaaS model, a cloud computing provider can host the infrastructure components (e.g., servers, storage devices, network nodes (e.g., hardware), deployment software, platform virtualization (e.g., a hypervisor layer), or the like). In some cases, an IaaS provider may also supply a variety of services to accompany those infrastructure components (e.g., billing, monitoring, logging, security, load balancing and clustering, etc.). Thus, as these services may be policy-driven, IaaS users may be able to implement policies to drive load balancing to maintain application availability and performance.</p><p id="p-0070" num="0069">In some instances, IaaS customers may access resources and services through a wide area network (WAN), such as the Internet, and can use the cloud provider's services to install the remaining elements of an application stack. For example, the user can log in to the IaaS platform to create virtual machines (VMs), install operating systems (OSs) on each VM, deploy middleware such as databases, create storage buckets for workloads and backups, and even install enterprise software into that VM. Customers can then use the provider's services to perform various functions, including balancing network traffic, troubleshooting application issues, monitoring performance, managing disaster recovery, etc.</p><p id="p-0071" num="0070">In most cases, a cloud computing model will require the participation of a cloud provider. The cloud provider may, but need not be, a third-party service that specializes in providing (e.g., offering, renting, selling) IaaS. An entity might also opt to deploy a private cloud, becoming its own provider of infrastructure services.</p><p id="p-0072" num="0071">In some examples, IaaS deployment is the process of putting a new application, or a new version of an application, onto a prepared application server or the like. It may also include the process of preparing the server (e.g., installing libraries, daemons, etc.). This is often managed by the cloud provider, below the hypervisor layer (e.g., the servers, storage, network hardware, and virtualization). Thus, the customer may be responsible for handling (OS), middleware, and/or application deployment (e.g., on self-service virtual machines (e.g., that can be spun up on demand) or the like.</p><p id="p-0073" num="0072">In some examples, IaaS provisioning may refer to acquiring computers or virtual hosts for use, and even installing needed libraries or services on them. In most cases, deployment does not include provisioning, and the provisioning may need to be performed first.</p><p id="p-0074" num="0073">In some cases, there are two different problems for IaaS provisioning. First, there is the initial challenge of provisioning the initial set of infrastructure before anything is running. Second, there is the challenge of evolving the existing infrastructure (e.g., adding new services, changing services, removing services, etc.) once everything has been provisioned. In some cases, these two challenges may be addressed by enabling the configuration of the infrastructure to be defined declaratively. In other words, the infrastructure (e.g., what components are needed and how they interact) can be defined by one or more configuration files. Thus, the overall topology of the infrastructure (e.g., what resources depend on which, and how they each work together) can be described declaratively. In some instances, once the topology is defined, a workflow can be generated that creates and/or manages the different components described in the configuration files.</p><p id="p-0075" num="0074">In some examples, an infrastructure may have many interconnected elements. For example, there may be one or more virtual private clouds (VPCs) (e.g., a potentially on-demand pool of configurable and/or shared computing resources), also known as a core network. In some examples, there may also be one or more security group rules provisioned to define how the security of the network will be set up and one or more virtual machines (VMs). Other infrastructure elements may also be provisioned, such as a load balancer, a database, or the like. As more and more infrastructure elements are desired and/or added, the infrastructure may incrementally evolve.</p><p id="p-0076" num="0075">In some instances, continuous deployment techniques may be employed to enable deployment of infrastructure code across various virtual computing environments. Additionally, the described techniques can enable infrastructure management within these environments. In some examples, service teams can write code that is desired to be deployed to one or more, but often many, different production environments (e.g., across various different geographic locations, sometimes spanning the entire world). However, in some examples, the infrastructure on which the code will be deployed must first be set up. In some instances, the provisioning can be done manually, a provisioning tool may be utilized to provision the resources, and/or deployment tools may be utilized to deploy the code once the infrastructure is provisioned.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram <b>800</b> illustrating an example pattern of an IaaS architecture, according to at least one embodiment. Service operators <b>802</b> can be communicatively coupled to a secure host tenancy <b>804</b> that can include a virtual cloud network (VCN) <b>806</b> and a secure host subnet <b>808</b>. In some examples, the service operators <b>802</b> may be using one or more client computing devices, which may be portable handheld devices (e.g., an iPhone&#xae;, cellular telephone, an iPad&#xae;, computing tablet, a personal digital assistant (PDA)) or wearable devices (e.g., a Google Glass&#xae; head mounted display), running software such as Microsoft Windows Mobile&#xae;, and/or a variety of mobile operating systems such as iOS, Windows Phone, Android, BlackBerry 8, Palm OS, and the like, and being Internet, e-mail, short message service (SMS), Blackberry&#xae;, or other communication protocol enabled. Alternatively, the client computing devices can be general purpose personal computers including, by way of example, personal computers and/or laptop computers running various versions of Microsoft Windows&#xae;, Apple Macintosh&#xae;, and/or Linux operating systems. The client computing devices can be workstation computers running any of a variety of commercially-available UNIX&#xae; or UNIX-like operating systems, including without limitation the variety of GNU/Linux operating systems, such as for example, Google Chrome OS. Alternatively, or in addition, client computing devices may be any other electronic device, such as a thin-client computer, an Internet-enabled gaming system (e.g., a Microsoft Xbox gaming console with or without a Kinect&#xae; gesture input device), and/or a personal messaging device, capable of communicating over a network that can access the VCN <b>806</b> and/or the Internet.</p><p id="p-0078" num="0077">The VCN <b>806</b> can include a local peering gateway (LPG) <b>810</b> that can be communicatively coupled to a secure shell (SSH) VCN <b>812</b> via an LPG <b>810</b> contained in the SSH VCN <b>812</b>. The SSH VCN <b>812</b> can include an SSH subnet <b>814</b>, and the SSH VCN <b>812</b> can be communicatively coupled to a control plane VCN <b>816</b> via the LPG <b>810</b> contained in the control plane VCN <b>816</b>. Also, the SSH VCN <b>812</b> can be communicatively coupled to a data plane VCN <b>818</b> via an LPG <b>810</b>. The control plane VCN <b>816</b> and the data plane VCN <b>818</b> can be contained in a service tenancy <b>819</b> that can be owned and/or operated by the IaaS provider.</p><p id="p-0079" num="0078">The control plane VCN <b>816</b> can include a control plane demilitarized zone (DMZ) tier <b>820</b> that acts as a perimeter network (e.g., portions of a corporate network between the corporate intranet and external networks). The DMZ-based servers may have restricted responsibilities and help keep security breaches contained. Additionally, the DMZ tier <b>820</b> can include one or more load balancer (LB) subnet(s) <b>822</b>, a control plane app tier <b>824</b> that can include app subnet(s) <b>826</b>, a control plane data tier <b>828</b> that can include database (DB) subnet(s) <b>830</b> (e.g., frontend DB subnet(s) and/or backend DB subnet(s)). The LB subnet(s) <b>822</b> contained in the control plane DMZ tier <b>820</b> can be communicatively coupled to the app subnet(s) <b>826</b> contained in the control plane app tier <b>824</b> and an Internet gateway <b>834</b> that can be contained in the control plane VCN <b>816</b>, and the app subnet(s) <b>826</b> can be communicatively coupled to the DB subnet(s) <b>830</b> contained in the control plane data tier <b>828</b> and a service gateway <b>836</b> and a network address translation (NAT) gateway <b>838</b>. The control plane VCN <b>816</b> can include the service gateway <b>836</b> and the NAT gateway <b>838</b>.</p><p id="p-0080" num="0079">The control plane VCN <b>816</b> can include a data plane mirror app tier <b>840</b> that can include app subnet(s) <b>826</b>. The app subnet(s) <b>826</b> contained in the data plane mirror app tier <b>840</b> can include a virtual network interface controller (VNIC) <b>842</b> that can execute a compute instance <b>844</b>. The compute instance <b>844</b> can communicatively couple the app subnet(s) <b>826</b> of the data plane mirror app tier <b>840</b> to app subnet(s) <b>826</b> that can be contained in a data plane app tier <b>846</b>.</p><p id="p-0081" num="0080">The data plane VCN <b>818</b> can include the data plane app tier <b>846</b>, a data plane DMZ tier <b>848</b>, and a data plane data tier <b>850</b>. The data plane DMZ tier <b>848</b> can include LB subnet(s) <b>822</b> that can be communicatively coupled to the app subnet(s) <b>826</b> of the data plane app tier <b>846</b> and the Internet gateway <b>834</b> of the data plane VCN <b>818</b>. The app subnet(s) <b>826</b> can be communicatively coupled to the service gateway <b>836</b> of the data plane VCN <b>818</b> and the NAT gateway <b>838</b> of the data plane VCN <b>818</b>. The data plane data tier <b>850</b> can also include the DB subnet(s) <b>830</b> that can be communicatively coupled to the app subnet(s) <b>826</b> of the data plane app tier <b>846</b>.</p><p id="p-0082" num="0081">The Internet gateway <b>834</b> of the control plane VCN <b>816</b> and of the data plane VCN <b>818</b> can be communicatively coupled to a metadata management service <b>852</b> that can be communicatively coupled to public Internet <b>854</b>. Public Internet <b>854</b> can be communicatively coupled to the NAT gateway <b>838</b> of the control plane VCN <b>816</b> and of the data plane VCN <b>818</b>. The service gateway <b>836</b> of the control plane VCN <b>816</b> and of the data plane VCN <b>818</b> can be communicatively couple to cloud services <b>856</b>.</p><p id="p-0083" num="0082">In some examples, the service gateway <b>836</b> of the control plane VCN <b>816</b> or of the data plane VCN <b>818</b> can make application programming interface (API) calls to cloud services <b>856</b> without going through public Internet <b>854</b>. The API calls to cloud services <b>856</b> from the service gateway <b>836</b> can be one-way: the service gateway <b>836</b> can make API calls to cloud services <b>856</b>, and cloud services <b>856</b> can send requested data to the service gateway <b>836</b>. But, cloud services <b>856</b> may not initiate API calls to the service gateway <b>836</b>.</p><p id="p-0084" num="0083">In some examples, the secure host tenancy <b>804</b> can be directly connected to the service tenancy <b>819</b>, which may be otherwise isolated. The secure host subnet <b>808</b> can communicate with the SSH subnet <b>814</b> through an LPG <b>810</b> that may enable two-way communication over an otherwise isolated system. Connecting the secure host subnet <b>808</b> to the SSH subnet <b>814</b> may give the secure host subnet <b>808</b> access to other entities within the service tenancy <b>819</b>.</p><p id="p-0085" num="0084">The control plane VCN <b>816</b> may allow users of the service tenancy <b>819</b> to set up or otherwise provision desired resources. Desired resources provisioned in the control plane VCN <b>816</b> may be deployed or otherwise used in the data plane VCN <b>818</b>. In some examples, the control plane VCN <b>816</b> can be isolated from the data plane VCN <b>818</b>, and the data plane mirror app tier <b>840</b> of the control plane VCN <b>816</b> can communicate with the data plane app tier <b>846</b> of the data plane VCN <b>818</b> via VNICs <b>842</b> that can be contained in the data plane mirror app tier <b>840</b> and the data plane app tier <b>846</b>.</p><p id="p-0086" num="0085">In some examples, users of the system, or customers, can make requests, for example create, read, update, or delete (CRUD) operations, through public Internet <b>854</b> that can communicate the requests to the metadata management service <b>852</b>. The metadata management service <b>852</b> can communicate the request to the control plane VCN <b>816</b> through the Internet gateway <b>834</b>. The request can be received by the LB subnet(s) <b>822</b> contained in the control plane DMZ tier <b>820</b>. The LB subnet(s) <b>822</b> may determine that the request is valid, and in response to this determination, the LB subnet(s) <b>822</b> can transmit the request to app subnet(s) <b>826</b> contained in the control plane app tier <b>824</b>. If the request is validated and requires a call to public Internet <b>854</b>, the call to public Internet <b>854</b> may be transmitted to the NAT gateway <b>838</b> that can make the call to public Internet <b>854</b>. Memory that may be desired to be stored by the request can be stored in the DB subnet(s) <b>830</b>.</p><p id="p-0087" num="0086">In some examples, the data plane mirror app tier <b>840</b> can facilitate direct communication between the control plane VCN <b>816</b> and the data plane VCN <b>818</b>. For example, changes, updates, or other suitable modifications to configuration may be desired to be applied to the resources contained in the data plane VCN <b>818</b>. Via a VNIC <b>842</b>, the control plane VCN <b>816</b> can directly communicate with, and can thereby execute the changes, updates, or other suitable modifications to configuration to, resources contained in the data plane VCN <b>818</b>.</p><p id="p-0088" num="0087">In some embodiments, the control plane VCN <b>816</b> and the data plane VCN <b>818</b> can be contained in the service tenancy <b>819</b>. In this case, the user, or the customer, of the system may not own or operate either the control plane VCN <b>816</b> or the data plane VCN <b>818</b>. Instead, the IaaS provider may own or operate the control plane VCN <b>816</b> and the data plane VCN <b>818</b>, both of which may be contained in the service tenancy <b>819</b>. This embodiment can enable isolation of networks that may prevent users or customers from interacting with other users', or other customers', resources. Also, this embodiment may allow users or customers of the system to store databases privately without needing to rely on public Internet <b>854</b>, which may not have a desired level of security, for storage.</p><p id="p-0089" num="0088">In other embodiments, the LB subnet(s) <b>822</b> contained in the control plane VCN <b>816</b> can be configured to receive a signal from the service gateway <b>836</b>. In this embodiment, the control plane VCN <b>816</b> and the data plane VCN <b>818</b> may be configured to be called by a customer of the IaaS provider without calling public Internet <b>854</b>. Customers of the IaaS provider may desire this embodiment since database(s) that the customers use may be controlled by the IaaS provider and may be stored on the service tenancy <b>819</b>, which may be isolated from public Internet <b>854</b>.</p><p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a block diagram <b>900</b> illustrating another example pattern of an IaaS architecture, according to at least one embodiment. Service operators <b>902</b> (e.g. service operators <b>802</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) can be communicatively coupled to a secure host tenancy <b>904</b> (e.g. the secure host tenancy <b>804</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can include a virtual cloud network (VCN) <b>906</b> (e.g. the VCN <b>806</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) and a secure host subnet <b>908</b> (e.g. the secure host subnet <b>808</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). The VCN <b>906</b> can include a local peering gateway (LPG) <b>910</b> (e.g. the LPG <b>810</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can be communicatively coupled to a secure shell (SSH) VCN <b>912</b> (e.g. the SSH VCN <b>812</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) via an LPG <b>810</b> contained in the SSH VCN <b>912</b>. The SSH VCN <b>912</b> can include an SSH subnet <b>914</b> (e.g. the SSH subnet <b>814</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), and the SSH VCN <b>912</b> can be communicatively coupled to a control plane VCN <b>916</b> (e.g. the control plane VCN <b>816</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) via an LPG <b>910</b> contained in the control plane VCN <b>916</b>. The control plane VCN <b>916</b> can be contained in a service tenancy <b>919</b> (e.g. the service tenancy <b>819</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), and the data plane VCN <b>918</b> (e.g. the data plane VCN <b>818</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) can be contained in a customer tenancy <b>921</b> that may be owned or operated by users, or customers, of the system.</p><p id="p-0091" num="0090">The control plane VCN <b>916</b> can include a control plane DMZ tier <b>920</b> (e.g. the control plane DMZ tier <b>820</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can include LB subnet(s) <b>922</b> (e.g. LB subnet(s) <b>822</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), a control plane app tier <b>924</b> (e.g. the control plane app tier <b>824</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can include app subnet(s) <b>926</b> (e.g. app subnet(s) <b>826</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), a control plane data tier <b>928</b> (e.g. the control plane data tier <b>828</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can include database (DB) subnet(s) <b>930</b> (e.g. similar to DB subnet(s) <b>830</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). The LB subnet(s) <b>922</b> contained in the control plane DMZ tier <b>920</b> can be communicatively coupled to the app subnet(s) <b>926</b> contained in the control plane app tier <b>924</b> and an Internet gateway <b>934</b> (e.g. the Internet gateway <b>834</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can be contained in the control plane VCN <b>916</b>, and the app subnet(s) <b>926</b> can be communicatively coupled to the DB subnet(s) <b>930</b> contained in the control plane data tier <b>928</b> and a service gateway <b>936</b> (e.g. the service gateway of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) and a network address translation (NAT) gateway <b>938</b> (e.g. the NAT gateway <b>838</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). The control plane VCN <b>916</b> can include the service gateway <b>936</b> and the NAT gateway <b>938</b>.</p><p id="p-0092" num="0091">The control plane VCN <b>916</b> can include a data plane mirror app tier <b>940</b> (e.g. the data plane mirror app tier <b>840</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can include app subnet(s) <b>926</b>. The app subnet(s) <b>926</b> contained in the data plane mirror app tier <b>940</b> can include a virtual network interface controller (VNIC) <b>942</b> (e.g. the VNIC of <b>842</b>) that can execute a compute instance <b>944</b> (e.g. similar to the compute instance <b>844</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). The compute instance <b>944</b> can facilitate communication between the app subnet(s) <b>926</b> of the data plane mirror app tier <b>940</b> and the app subnet(s) <b>926</b> that can be contained in a data plane app tier <b>946</b> (e.g. the data plane app tier <b>846</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) via the VNIC <b>942</b> contained in the data plane mirror app tier <b>940</b> and the VNIC <b>942</b> contained in the data plane app tier <b>946</b>.</p><p id="p-0093" num="0092">The Internet gateway <b>934</b> contained in the control plane VCN <b>916</b> can be communicatively coupled to a metadata management service <b>952</b> (e.g. the metadata management service <b>852</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can be communicatively coupled to public Internet <b>954</b> (e.g. public Internet <b>854</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). Public Internet <b>954</b> can be communicatively coupled to the NAT gateway <b>938</b> contained in the control plane VCN <b>916</b>. The service gateway <b>936</b> contained in the control plane VCN <b>916</b> can be communicatively couple to cloud services <b>956</b> (e.g. cloud services <b>856</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>).</p><p id="p-0094" num="0093">In some examples, the data plane VCN <b>918</b> can be contained in the customer tenancy <b>921</b>. In this case, the IaaS provider may provide the control plane VCN <b>916</b> for each customer, and the IaaS provider may, for each customer, set up a unique compute instance <b>944</b> that is contained in the service tenancy <b>919</b>. Each compute instance <b>944</b> may allow communication between the control plane VCN <b>916</b>, contained in the service tenancy <b>919</b>, and the data plane VCN <b>918</b> that is contained in the customer tenancy <b>921</b>. The compute instance <b>944</b> may allow resources, that are provisioned in the control plane VCN <b>916</b> that is contained in the service tenancy <b>919</b>, to be deployed or otherwise used in the data plane VCN <b>918</b> that is contained in the customer tenancy <b>921</b>.</p><p id="p-0095" num="0094">In other examples, the customer of the IaaS provider may have databases that live in the customer tenancy <b>921</b>. In this example, the control plane VCN <b>916</b> can include the data plane mirror app tier <b>940</b> that can include app subnet(s) <b>926</b>. The data plane mirror app tier <b>940</b> can reside in the data plane VCN <b>918</b>, but the data plane mirror app tier <b>940</b> may not live in the data plane VCN <b>918</b>. That is, the data plane mirror app tier <b>940</b> may have access to the customer tenancy <b>921</b>, but the data plane mirror app tier <b>940</b> may not exist in the data plane VCN <b>918</b> or be owned or operated by the customer of the IaaS provider. The data plane mirror app tier <b>940</b> may be configured to make calls to the data plane VCN <b>918</b> but may not be configured to make calls to any entity contained in the control plane VCN <b>916</b>. The customer may desire to deploy or otherwise use resources in the data plane VCN <b>918</b> that are provisioned in the control plane VCN <b>916</b>, and the data plane mirror app tier <b>940</b> can facilitate the desired deployment, or other usage of resources, of the customer.</p><p id="p-0096" num="0095">In some embodiments, the customer of the IaaS provider can apply filters to the data plane VCN <b>918</b>. In this embodiment, the customer can determine what the data plane VCN <b>918</b> can access, and the customer may restrict access to public Internet <b>954</b> from the data plane VCN <b>918</b>. The IaaS provider may not be able to apply filters or otherwise control access of the data plane VCN <b>918</b> to any outside networks or databases. Applying filters and controls by the customer onto the data plane VCN <b>918</b>, contained in the customer tenancy <b>921</b>, can help isolate the data plane VCN <b>918</b> from other customers and from public Internet <b>954</b>.</p><p id="p-0097" num="0096">In some embodiments, cloud services <b>956</b> can be called by the service gateway <b>936</b> to access services that may not exist on public Internet <b>954</b>, on the control plane VCN <b>916</b>, or on the data plane VCN <b>918</b>. The connection between cloud services <b>956</b> and the control plane VCN <b>916</b> or the data plane VCN <b>918</b> may not be live or continuous. Cloud services <b>956</b> may exist on a different network owned or operated by the IaaS provider. Cloud services <b>956</b> may be configured to receive calls from the service gateway <b>936</b> and may be configured to not receive calls from public Internet <b>954</b>. Some cloud services <b>956</b> may be isolated from other cloud services <b>956</b>, and the control plane VCN <b>916</b> may be isolated from cloud services <b>956</b> that may not be in the same region as the control plane VCN <b>916</b>. For example, the control plane VCN <b>916</b> may be located in &#x201c;Region 1,&#x201d; and cloud service &#x201c;Deployment 8,&#x201d; may be located in Region 1 and in &#x201c;Region 2.&#x201d; If a call to Deployment 8 is made by the service gateway <b>936</b> contained in the control plane VCN <b>916</b> located in Region 1, the call may be transmitted to Deployment 8 in Region 1. In this example, the control plane VCN <b>916</b>, or Deployment 8 in Region 1, may not be communicatively coupled to, or otherwise in communication with, Deployment 8 in Region 2.</p><p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram <b>1000</b> illustrating another example pattern of an IaaS architecture, according to at least one embodiment. Service operators <b>1002</b> (e.g. service operators <b>802</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) can be communicatively coupled to a secure host tenancy <b>1004</b> (e.g. the secure host tenancy <b>804</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can include a virtual cloud network (VCN) <b>1006</b> (e.g. the VCN <b>806</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) and a secure host subnet <b>1008</b> (e.g. the secure host subnet <b>808</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). The VCN <b>1006</b> can include an LPG <b>1010</b> (e.g. the LPG <b>810</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can be communicatively coupled to an SSH VCN <b>1012</b> (e.g. the SSH VCN <b>812</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) via an LPG <b>1010</b> contained in the SSH VCN <b>1012</b>. The SSH VCN <b>1012</b> can include an SSH subnet <b>1014</b> (e.g. the SSH subnet <b>814</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), and the SSH VCN <b>1012</b> can be communicatively coupled to a control plane VCN <b>1016</b> (e.g. the control plane VCN <b>816</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) via an LPG <b>1010</b> contained in the control plane VCN <b>1016</b> and to a data plane VCN <b>1018</b> (e.g. the data plane <b>818</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) via an LPG <b>1010</b> contained in the data plane VCN <b>1018</b>. The control plane VCN <b>1016</b> and the data plane VCN <b>1018</b> can be contained in a service tenancy <b>1019</b> (e.g. the service tenancy <b>819</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>).</p><p id="p-0099" num="0098">The control plane VCN <b>1016</b> can include a control plane DMZ tier <b>1020</b> (e.g. the control plane DMZ tier <b>820</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can include load balancer (LB) subnet(s) <b>1022</b> (e.g. LB subnet(s) <b>822</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), a control plane app tier <b>1024</b> (e.g. the control plane app tier <b>824</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can include app subnet(s) <b>1026</b> (e.g. similar to app subnet(s) <b>826</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), a control plane data tier <b>1028</b> (e.g. the control plane data tier <b>828</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can include DB subnet(s) <b>1030</b>. The LB subnet(s) <b>1022</b> contained in the control plane DMZ tier <b>1020</b> can be communicatively coupled to the app subnet(s) <b>1026</b> contained in the control plane app tier <b>1024</b> and to an Internet gateway <b>1034</b> (e.g. the Internet gateway <b>834</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can be contained in the control plane VCN <b>1016</b>, and the app subnet(s) <b>1026</b> can be communicatively coupled to the DB subnet(s) <b>1030</b> contained in the control plane data tier <b>1028</b> and to a service gateway <b>1036</b> (e.g. the service gateway of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) and a network address translation (NAT) gateway <b>1038</b> (e.g. the NAT gateway <b>838</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). The control plane VCN <b>1016</b> can include the service gateway <b>1036</b> and the NAT gateway <b>1038</b>.</p><p id="p-0100" num="0099">The data plane VCN <b>1018</b> can include a data plane app tier <b>1046</b> (e.g. the data plane app tier <b>846</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), a data plane DMZ tier <b>1048</b> (e.g. the data plane DMZ tier <b>848</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), and a data plane data tier <b>1050</b> (e.g. the data plane data tier <b>850</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). The data plane DMZ tier <b>1048</b> can include LB subnet(s) <b>1022</b> that can be communicatively coupled to trusted app subnet(s) <b>1060</b> and untrusted app subnet(s) <b>1062</b> of the data plane app tier <b>1046</b> and the Internet gateway <b>1034</b> contained in the data plane VCN <b>1018</b>. The trusted app subnet(s) <b>1060</b> can be communicatively coupled to the service gateway <b>1036</b> contained in the data plane VCN <b>1018</b>, the NAT gateway <b>1038</b> contained in the data plane VCN <b>1018</b>, and DB subnet(s) <b>1030</b> contained in the data plane data tier <b>1050</b>. The untrusted app subnet(s) <b>1062</b> can be communicatively coupled to the service gateway <b>1036</b> contained in the data plane VCN <b>1018</b> and DB subnet(s) <b>1030</b> contained in the data plane data tier <b>1050</b>. The data plane data tier <b>1050</b> can include DB subnet(s) <b>1030</b> that can be communicatively coupled to the service gateway <b>1036</b> contained in the data plane VCN <b>1018</b>.</p><p id="p-0101" num="0100">The untrusted app subnet(s) <b>1062</b> can include one or more primary VNICs <b>1064</b>(<b>1</b>)-(N) that can be communicatively coupled to tenant virtual machines (VMs) <b>1066</b>(<b>1</b>)-(N). Each tenant VM <b>1066</b>(<b>1</b>)-(N) can be communicatively coupled to a respective app subnet <b>1067</b>(<b>1</b>)-(N) that can be contained in respective container egress VCNs <b>1068</b>(<b>1</b>)-(N) that can be contained in respective customer tenancies <b>1070</b>(<b>1</b>)-(N). Respective secondary VNICs <b>1072</b>(<b>1</b>)-(N) can facilitate communication between the untrusted app subnet(s) <b>1062</b> contained in the data plane VCN <b>1018</b> and the app subnet contained in the container egress VCNs <b>1068</b>(<b>1</b>)-(N). Each container egress VCNs <b>1068</b>(<b>1</b>)-(N) can include a NAT gateway <b>1038</b> that can be communicatively coupled to public Internet <b>1054</b> (e.g. public Internet <b>854</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>).</p><p id="p-0102" num="0101">The Internet gateway <b>1034</b> contained in the control plane VCN <b>1016</b> and contained in the data plane VCN <b>1018</b> can be communicatively coupled to a metadata management service <b>1052</b> (e.g. the metadata management system <b>852</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can be communicatively coupled to public Internet <b>1054</b>. Public Internet <b>1054</b> can be communicatively coupled to the NAT gateway <b>1038</b> contained in the control plane VCN <b>1016</b> and contained in the data plane VCN <b>1018</b>. The service gateway <b>1036</b> contained in the control plane VCN <b>1016</b> and contained in the data plane VCN <b>1018</b> can be communicatively couple to cloud services <b>1056</b>.</p><p id="p-0103" num="0102">In some embodiments, the data plane VCN <b>1018</b> can be integrated with customer tenancies <b>1070</b>. This integration can be useful or desirable for customers of the IaaS provider in some cases such as a case that may desire support when executing code. The customer may provide code to run that may be destructive, may communicate with other customer resources, or may otherwise cause undesirable effects. In response to this, the IaaS provider may determine whether to run code given to the IaaS provider by the customer.</p><p id="p-0104" num="0103">In some examples, the customer of the IaaS provider may grant temporary network access to the IaaS provider and request a function to be attached to the data plane tier app <b>1046</b>. Code to run the function may be executed in the VMs <b>1066</b>(<b>1</b>)-(N), and the code may not be configured to run anywhere else on the data plane VCN <b>1018</b>. Each VM <b>1066</b>(<b>1</b>)-(N) may be connected to one customer tenancy <b>1070</b>. Respective containers <b>1071</b>(<b>1</b>)-(N) contained in the VMs <b>1066</b>(<b>1</b>)-(N) may be configured to run the code. In this case, there can be a dual isolation (e.g., the containers <b>1071</b>(<b>1</b>)-(N) running code, where the containers <b>1071</b>(<b>1</b>)-(N) may be contained in at least the VM <b>1066</b>(<b>1</b>)-(N) that are contained in the untrusted app subnet(s) <b>1062</b>), which may help prevent incorrect or otherwise undesirable code from damaging the network of the IaaS provider or from damaging a network of a different customer. The containers <b>1071</b>(<b>1</b>)-(N) may be communicatively coupled to the customer tenancy <b>1070</b> and may be configured to transmit or receive data from the customer tenancy <b>1070</b>. The containers <b>1071</b>(<b>1</b>)-(N) may not be configured to transmit or receive data from any other entity in the data plane VCN <b>1018</b>. Upon completion of running the code, the IaaS provider may kill or otherwise dispose of the containers <b>1071</b>(<b>1</b>)-(N).</p><p id="p-0105" num="0104">In some embodiments, the trusted app subnet(s) <b>1060</b> may run code that may be owned or operated by the IaaS provider. In this embodiment, the trusted app subnet(s) <b>1060</b> may be communicatively coupled to the DB subnet(s) <b>1030</b> and be configured to execute CRUD operations in the DB subnet(s) <b>1030</b>. The untrusted app subnet(s) <b>1062</b> may be communicatively coupled to the DB subnet(s) <b>1030</b>, but in this embodiment, the untrusted app subnet(s) may be configured to execute read operations in the DB subnet(s) <b>1030</b>. The containers <b>1071</b>(<b>1</b>)-(N) that can be contained in the VM <b>1066</b>(<b>1</b>)-(N) of each customer and that may run code from the customer may not be communicatively coupled with the DB subnet(s) <b>1030</b>.</p><p id="p-0106" num="0105">In other embodiments, the control plane VCN <b>1016</b> and the data plane VCN <b>1018</b> may not be directly communicatively coupled. In this embodiment, there may be no direct communication between the control plane VCN <b>1016</b> and the data plane VCN <b>1018</b>. However, communication can occur indirectly through at least one method. An LPG <b>1010</b> may be established by the IaaS provider that can facilitate communication between the control plane VCN <b>1016</b> and the data plane VCN <b>1018</b>. In another example, the control plane VCN <b>1016</b> or the data plane VCN <b>1018</b> can make a call to cloud services <b>1056</b> via the service gateway <b>1036</b>. For example, a call to cloud services <b>1056</b> from the control plane VCN <b>1016</b> can include a request for a service that can communicate with the data plane VCN <b>1018</b>.</p><p id="p-0107" num="0106"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a block diagram <b>1100</b> illustrating another example pattern of an IaaS architecture, according to at least one embodiment. Service operators <b>1102</b> (e.g. service operators <b>802</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) can be communicatively coupled to a secure host tenancy <b>1104</b> (e.g. the secure host tenancy <b>804</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can include a virtual cloud network (VCN) <b>1106</b> (e.g. the VCN <b>806</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) and a secure host subnet <b>1108</b> (e.g. the secure host subnet <b>808</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). The VCN <b>1106</b> can include an LPG <b>1110</b> (e.g. the LPG <b>810</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can be communicatively coupled to an SSH VCN <b>1112</b> (e.g. the SSH VCN <b>812</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) via an LPG <b>1110</b> contained in the SSH VCN <b>1112</b>. The SSH VCN <b>1112</b> can include an SSH subnet <b>1114</b> (e.g. the SSH subnet <b>814</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), and the SSH VCN <b>1112</b> can be communicatively coupled to a control plane VCN <b>1116</b> (e.g. the control plane VCN <b>816</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) via an LPG <b>1110</b> contained in the control plane VCN <b>1116</b> and to a data plane VCN <b>1118</b> (e.g. the data plane <b>818</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) via an LPG <b>1110</b> contained in the data plane VCN <b>1118</b>. The control plane VCN <b>1116</b> and the data plane VCN <b>1118</b> can be contained in a service tenancy <b>1119</b> (e.g. the service tenancy <b>819</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>).</p><p id="p-0108" num="0107">The control plane VCN <b>1116</b> can include a control plane DMZ tier <b>1120</b> (e.g. the control plane DMZ tier <b>820</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can include LB subnet(s) <b>1122</b> (e.g. LB subnet(s) <b>822</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), a control plane app tier <b>1124</b> (e.g. the control plane app tier <b>824</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can include app subnet(s) <b>1126</b> (e.g. app subnet(s) <b>826</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), a control plane data tier <b>1128</b> (e.g. the control plane data tier <b>828</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can include DB subnet(s) <b>1130</b> (e.g. DB subnet(s) <b>1030</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>). The LB subnet(s) <b>1122</b> contained in the control plane DMZ tier <b>1120</b> can be communicatively coupled to the app subnet(s) <b>1126</b> contained in the control plane app tier <b>1124</b> and to an Internet gateway <b>1134</b> (e.g. the Internet gateway <b>834</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can be contained in the control plane VCN <b>1116</b>, and the app subnet(s) <b>1126</b> can be communicatively coupled to the DB subnet(s) <b>1130</b> contained in the control plane data tier <b>1128</b> and to a service gateway <b>1136</b> (e.g. the service gateway of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) and a network address translation (NAT) gateway <b>1138</b> (e.g. the NAT gateway <b>838</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). The control plane VCN <b>1116</b> can include the service gateway <b>1136</b> and the NAT gateway <b>1138</b>.</p><p id="p-0109" num="0108">The data plane VCN <b>1118</b> can include a data plane app tier <b>1146</b> (e.g. the data plane app tier <b>846</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), a data plane DMZ tier <b>1148</b> (e.g. the data plane DMZ tier <b>848</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>), and a data plane data tier <b>1150</b> (e.g. the data plane data tier <b>850</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). The data plane DMZ tier <b>1148</b> can include LB subnet(s) <b>1122</b> that can be communicatively coupled to trusted app subnet(s) <b>1160</b> (e.g. trusted app subnet(s) <b>1060</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>) and untrusted app subnet(s) <b>1162</b> (e.g. untrusted app subnet(s) <b>1062</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>) of the data plane app tier <b>1146</b> and the Internet gateway <b>1134</b> contained in the data plane VCN <b>1118</b>. The trusted app subnet(s) <b>1160</b> can be communicatively coupled to the service gateway <b>1136</b> contained in the data plane VCN <b>1118</b>, the NAT gateway <b>1138</b> contained in the data plane VCN <b>1118</b>, and DB subnet(s) <b>1130</b> contained in the data plane data tier <b>1150</b>. The untrusted app subnet(s) <b>1162</b> can be communicatively coupled to the service gateway <b>1136</b> contained in the data plane VCN <b>1118</b> and DB subnet(s) <b>1130</b> contained in the data plane data tier <b>1150</b>. The data plane data tier <b>1150</b> can include DB subnet(s) <b>1130</b> that can be communicatively coupled to the service gateway <b>1136</b> contained in the data plane VCN <b>1118</b>.</p><p id="p-0110" num="0109">The untrusted app subnet(s) <b>1162</b> can include primary VNICs <b>1164</b>(<b>1</b>)-(N) that can be communicatively coupled to tenant virtual machines (VMs) <b>1166</b>(<b>1</b>)-(N) residing within the untrusted app subnet(s) <b>1162</b>. Each tenant VM <b>1166</b>(<b>1</b>)-(N) can run code in a respective container <b>1167</b>(<b>1</b>)-(N), and be communicatively coupled to an app subnet <b>1126</b> that can be contained in a data plane app tier <b>1146</b> that can be contained in a container egress VCN <b>1168</b>. Respective secondary VNICs <b>1172</b>(<b>1</b>)-(N) can facilitate communication between the untrusted app subnet(s) <b>1162</b> contained in the data plane VCN <b>1118</b> and the app subnet contained in the container egress VCN <b>1168</b>. The container egress VCN can include a NAT gateway <b>1138</b> that can be communicatively coupled to public Internet <b>1154</b> (e.g. public Internet <b>854</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>).</p><p id="p-0111" num="0110">The Internet gateway <b>1134</b> contained in the control plane VCN <b>1116</b> and contained in the data plane VCN <b>1118</b> can be communicatively coupled to a metadata management service <b>1152</b> (e.g. the metadata management system <b>852</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) that can be communicatively coupled to public Internet <b>1154</b>. Public Internet <b>1154</b> can be communicatively coupled to the NAT gateway <b>1138</b> contained in the control plane VCN <b>1116</b> and contained in the data plane VCN <b>1118</b>. The service gateway <b>1136</b> contained in the control plane VCN <b>1116</b> and contained in the data plane VCN <b>1118</b> can be communicatively couple to cloud services <b>1156</b>.</p><p id="p-0112" num="0111">In some examples, the pattern illustrated by the architecture of block diagram <b>1100</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref> may be considered an exception to the pattern illustrated by the architecture of block diagram <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref> and may be desirable for a customer of the IaaS provider if the IaaS provider cannot directly communicate with the customer (e.g., a disconnected region). The respective containers <b>1167</b>(<b>1</b>)-(N) that are contained in the VMs <b>1166</b>(<b>1</b>)-(N) for each customer can be accessed in real-time by the customer. The containers <b>1167</b>(<b>1</b>)-(N) may be configured to make calls to respective secondary VNICs <b>1172</b>(<b>1</b>)-(N) contained in app subnet(s) <b>1126</b> of the data plane app tier <b>1146</b> that can be contained in the container egress VCN <b>1168</b>. The secondary VNICs <b>1172</b>(<b>1</b>)-(N) can transmit the calls to the NAT gateway <b>1138</b> that may transmit the calls to public Internet <b>1154</b>. In this example, the containers <b>1167</b>(<b>1</b>)-(N) that can be accessed in real-time by the customer can be isolated from the control plane VCN <b>1116</b> and can be isolated from other entities contained in the data plane VCN <b>1118</b>. The containers <b>1167</b>(<b>1</b>)-(N) may also be isolated from resources from other customers.</p><p id="p-0113" num="0112">In other examples, the customer can use the containers <b>1167</b>(<b>1</b>)-(N) to call cloud services <b>1156</b>. In this example, the customer may run code in the containers <b>1167</b>(<b>1</b>)-(N) that requests a service from cloud services <b>1156</b>. The containers <b>1167</b>(<b>1</b>)-(N) can transmit this request to the secondary VNICs <b>1172</b>(<b>1</b>)-(N) that can transmit the request to the NAT gateway that can transmit the request to public Internet <b>1154</b>. Public Internet <b>1154</b> can transmit the request to LB subnet(s) <b>1122</b> contained in the control plane VCN <b>1116</b> via the Internet gateway <b>1134</b>. In response to determining the request is valid, the LB subnet(s) can transmit the request to app subnet(s) <b>1126</b> that can transmit the request to cloud services <b>1156</b> via the service gateway <b>1136</b>.</p><p id="p-0114" num="0113">It should be appreciated that IaaS architectures <b>800</b>, <b>900</b>, <b>1000</b>, <b>1100</b> depicted in the figures may have other components than those depicted. Further, the embodiments shown in the figures are only some examples of a cloud infrastructure system that may incorporate an embodiment of the disclosure. In some other embodiments, the IaaS systems may have more or fewer components than shown in the figures, may combine two or more components, or may have a different configuration or arrangement of components.</p><p id="p-0115" num="0114">In certain embodiments, the IaaS systems described herein may include a suite of applications, middleware, and database service offerings that are delivered to a customer in a self-service, subscription-based, elastically scalable, reliable, highly available, and secure manner. An example of such an IaaS system is the Oracle Cloud Infrastructure (OCI) provided by the present assignee.</p><p id="p-0116" num="0115"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates an example computer system <b>1200</b>, in which various embodiments may be implemented. The system <b>1200</b> may be used to implement any of the computer systems described above. As shown in the figure, computer system <b>1200</b> includes a processing unit <b>1204</b> that communicates with a number of peripheral subsystems via a bus subsystem <b>1202</b>. These peripheral subsystems may include a processing acceleration unit <b>1206</b>, an I/O subsystem <b>1208</b>, a storage subsystem <b>1218</b> and a communications subsystem <b>1224</b>. Storage subsystem <b>1218</b> includes tangible computer-readable storage media <b>1222</b> and a system memory <b>1210</b>.</p><p id="p-0117" num="0116">Bus subsystem <b>1202</b> provides a mechanism for letting the various components and subsystems of computer system <b>1200</b> communicate with each other as intended. Although bus subsystem <b>1202</b> is shown schematically as a single bus, alternative embodiments of the bus subsystem may utilize multiple buses. Bus subsystem <b>1202</b> may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. For example, such architectures may include an Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus, which can be implemented as a Mezzanine bus manufactured to the IEEE P1386.1 standard.</p><p id="p-0118" num="0117">Processing unit <b>1204</b>, which can be implemented as one or more integrated circuits (e.g., a conventional microprocessor or microcontroller), controls the operation of computer system <b>1200</b>. One or more processors may be included in processing unit <b>1204</b>. These processors may include single core or multicore processors. In certain embodiments, processing unit <b>1204</b> may be implemented as one or more independent processing units <b>1232</b> and/or <b>1234</b> with single or multicore processors included in each processing unit. In other embodiments, processing unit <b>1204</b> may also be implemented as a quad-core processing unit formed by integrating two dual-core processors into a single chip.</p><p id="p-0119" num="0118">In various embodiments, processing unit <b>1204</b> can execute a variety of programs in response to program code and can maintain multiple concurrently executing programs or processes. At any given time, some or all of the program code to be executed can be resident in processing unit <b>1204</b> and/or in storage subsystem <b>1218</b>. Through suitable programming, processing unit <b>1204</b> can provide various functionalities described above. Computer system <b>1200</b> may additionally include a processing acceleration unit <b>1206</b>, which can include a digital signal processor (DSP), a special-purpose processor, and/or the like.</p><p id="p-0120" num="0119">I/O subsystem <b>1208</b> may include user interface input devices and user interface output devices. User interface input devices may include a keyboard, pointing devices such as a mouse or trackball, a touchpad or touch screen incorporated into a display, a scroll wheel, a click wheel, a dial, a button, a switch, a keypad, audio input devices with voice command recognition systems, microphones, and other types of input devices. User interface input devices may include, for example, motion sensing and/or gesture recognition devices such as the Microsoft Kinect&#xae; motion sensor that enables users to control and interact with an input device, such as the Microsoft Xbox&#xae; 360 game controller, through a natural user interface using gestures and spoken commands. User interface input devices may also include eye gesture recognition devices such as the Google Glass&#xae; blink detector that detects eye activity (e.g., &#x2018;blinking&#x2019; while taking pictures and/or making a menu selection) from users and transforms the eye gestures as input into an input device (e.g., Google Glass&#xae;). Additionally, user interface input devices may include voice recognition sensing devices that enable users to interact with voice recognition systems (e.g., Siri&#xae; navigator), through voice commands.</p><p id="p-0121" num="0120">User interface input devices may also include, without limitation, three dimensional (3D) mice, joysticks or pointing sticks, gamepads and graphic tablets, and audio/visual devices such as speakers, digital cameras, digital camcorders, portable media players, webcams, image scanners, fingerprint scanners, barcode reader 3D scanners, 3D printers, laser rangefinders, and eye gaze tracking devices. Additionally, user interface input devices may include, for example, medical imaging input devices such as computed tomography, magnetic resonance imaging, position emission tomography, medical ultrasonography devices. User interface input devices may also include, for example, audio input devices such as MIDI keyboards, digital musical instruments and the like.</p><p id="p-0122" num="0121">User interface output devices may include a display subsystem, indicator lights, or non-visual displays such as audio output devices, etc. The display subsystem may be a cathode ray tube (CRT), a flat-panel device, such as that using a liquid crystal display (LCD) or plasma display, a projection device, a touch screen, and the like. In general, use of the term &#x201c;output device&#x201d; is intended to include all possible types of devices and mechanisms for outputting information from computer system <b>1200</b> to a user or other computer. For example, user interface output devices may include, without limitation, a variety of display devices that visually convey text, graphics and audio/video information such as monitors, printers, speakers, headphones, automotive navigation systems, plotters, voice output devices, and modems.</p><p id="p-0123" num="0122">Computer system <b>1200</b> may comprise a storage subsystem <b>1218</b> that comprises software elements, shown as being currently located within a system memory <b>1210</b>. System memory <b>1210</b> may store program instructions that are loadable and executable on processing unit <b>1204</b>, as well as data generated during the execution of these programs.</p><p id="p-0124" num="0123">Depending on the configuration and type of computer system <b>1200</b>, system memory <b>1210</b> may be volatile (such as random access memory (RAM)) and/or non-volatile (such as read-only memory (ROM), flash memory, etc.) The RAM typically contains data and/or program modules that are immediately accessible to and/or presently being operated and executed by processing unit <b>1204</b>. In some implementations, system memory <b>1210</b> may include multiple different types of memory, such as static random access memory (SRAM) or dynamic random access memory (DRAM). In some implementations, a basic input/output system (BIOS), containing the basic routines that help to transfer information between elements within computer system <b>1200</b>, such as during start-up, may typically be stored in the ROM. By way of example, and not limitation, system memory <b>1210</b> also illustrates application programs <b>1212</b>, which may include client applications, Web browsers, mid-tier applications, relational database management systems (RDBMS), etc., program data <b>1214</b>, and an operating system <b>1216</b>. By way of example, operating system <b>1216</b> may include various versions of Microsoft Windows&#xae;, Apple Macintosh&#xae;, and/or Linux operating systems, a variety of commercially-available UNIX&#xae; or UNIX-like operating systems (including without limitation the variety of GNU/Linux operating systems, the Google Chrome&#xae; OS, and the like) and/or mobile operating systems such as iOS, Windows&#xae; Phone, Android&#xae; OS, BlackBerry&#xae; 12 OS, and Palm&#xae; OS operating systems.</p><p id="p-0125" num="0124">Storage subsystem <b>1218</b> may also provide a tangible computer-readable storage medium for storing the basic programming and data constructs that provide the functionality of some embodiments. Software (programs, code modules, instructions) that when executed by a processor provide the functionality described above may be stored in storage subsystem <b>1218</b>. These software modules or instructions may be executed by processing unit <b>1204</b>. Storage subsystem <b>1218</b> may also provide a repository for storing data used in accordance with the present disclosure.</p><p id="p-0126" num="0125">Storage subsystem <b>1218</b> may also include a computer-readable storage media reader <b>1220</b> that can further be connected to computer-readable storage media <b>1222</b>. Together and, optionally, in combination with system memory <b>1210</b>, computer-readable storage media <b>1222</b> may comprehensively represent remote, local, fixed, and/or removable storage devices plus storage media for temporarily and/or more permanently containing, storing, transmitting, and retrieving computer-readable information.</p><p id="p-0127" num="0126">Computer-readable storage media <b>1222</b> containing code, or portions of code, can also include any appropriate media known or used in the art, including storage media and communication media, such as but not limited to, volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage and/or transmission of information. This can include tangible computer-readable storage media such as RAM, ROM, electronically erasable programmable ROM (EEPROM), flash memory or other memory technology, CD-ROM, digital versatile disk (DVD), or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or other tangible computer readable media. This can also include nontangible computer-readable media, such as data signals, data transmissions, or any other medium which can be used to transmit the desired information and which can be accessed by computing system <b>1200</b>.</p><p id="p-0128" num="0127">By way of example, computer-readable storage media <b>1222</b> may include a hard disk drive that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive that reads from or writes to a removable, nonvolatile magnetic disk, and an optical disk drive that reads from or writes to a removable, nonvolatile optical disk such as a CD ROM, DVD, and Blu-Ray&#xae; disk, or other optical media. Computer-readable storage media <b>1222</b> may include, but is not limited to, Zip&#xae; drives, flash memory cards, universal serial bus (USB) flash drives, secure digital (SD) cards, DVD disks, digital video tape, and the like. Computer-readable storage media <b>1222</b> may also include, solid-state drives (SSD) based on non-volatile memory such as flash-memory based SSDs, enterprise flash drives, solid state ROM, and the like, SSDs based on volatile memory such as solid state RAM, dynamic RAM, static RAM, DRAM-based SSDs, magnetoresistive RAM (MRAM) SSDs, and hybrid SSDs that use a combination of DRAM and flash memory based SSDs. The disk drives and their associated computer-readable media may provide non-volatile storage of computer-readable instructions, data structures, program modules, and other data for computer system <b>1200</b>.</p><p id="p-0129" num="0128">Communications subsystem <b>1224</b> provides an interface to other computer systems and networks. Communications subsystem <b>1224</b> serves as an interface for receiving data from and transmitting data to other systems from computer system <b>1200</b>. For example, communications subsystem <b>1224</b> may enable computer system <b>1200</b> to connect to one or more devices via the Internet. In some embodiments communications subsystem <b>1224</b> can include radio frequency (RF) transceiver components for accessing wireless voice and/or data networks (e.g., using cellular telephone technology, advanced data network technology, such as 3G, 4G or EDGE (enhanced data rates for global evolution), WiFi (IEEE 802.11 family standards, or other mobile communication technologies, or any combination thereof), global positioning system (GPS) receiver components, and/or other components. In some embodiments communications subsystem <b>1224</b> can provide wired network connectivity (e.g., Ethernet) in addition to or instead of a wireless interface.</p><p id="p-0130" num="0129">In some embodiments, communications subsystem <b>1224</b> may also receive input communication in the form of structured and/or unstructured data feeds <b>1226</b>, event streams <b>1228</b>, event updates <b>1230</b>, and the like on behalf of one or more users who may use computer system <b>1200</b>.</p><p id="p-0131" num="0130">By way of example, communications subsystem <b>1224</b> may be configured to receive data feeds <b>1226</b> in real-time from users of social networks and/or other communication services such as Twitter&#xae; feeds, Facebook&#xae; updates, web feeds such as Rich Site Summary (RSS) feeds, and/or real-time updates from one or more third party information sources.</p><p id="p-0132" num="0131">Additionally, communications subsystem <b>1224</b> may also be configured to receive data in the form of continuous data streams, which may include event streams <b>1228</b> of real-time events and/or event updates <b>1230</b>, that may be continuous or unbounded in nature with no explicit end. Examples of applications that generate continuous data may include, for example, sensor data applications, financial tickers, network performance measuring tools (e.g. network monitoring and traffic management applications), clickstream analysis tools, automobile traffic monitoring, and the like.</p><p id="p-0133" num="0132">Communications subsystem <b>1224</b> may also be configured to output the structured and/or unstructured data feeds <b>1226</b>, event streams <b>1228</b>, event updates <b>1230</b>, and the like to one or more databases that may be in communication with one or more streaming data source computers coupled to computer system <b>1200</b>.</p><p id="p-0134" num="0133">Computer system <b>1200</b> can be one of various types, including a handheld portable device (e.g., an iPhone&#xae; cellular phone, an iPad&#xae; computing tablet, a PDA), a wearable device (e.g., a Google Glass&#xae; head mounted display), a PC, a workstation, a mainframe, a kiosk, a server rack, or any other data processing system.</p><p id="p-0135" num="0134">Due to the ever-changing nature of computers and networks, the description of computer system <b>1200</b> depicted in the figure is intended only as a specific example. Many other configurations having more or fewer components than the system depicted in the figure are possible. For example, customized hardware might also be used and/or particular elements might be implemented in hardware, firmware, software (including applets), or a combination. Further, connection to other computing devices, such as network input/output devices, may be employed. Based on the disclosure and teachings provided herein, a person of ordinary skill in the art will appreciate other ways and/or methods to implement the various embodiments.</p><p id="p-0136" num="0135">Although specific embodiments have been described, various modifications, alterations, alternative constructions, and equivalents are also encompassed within the scope of the disclosure. Embodiments are not restricted to operation within certain specific data processing environments, but are free to operate within a plurality of data processing environments. Additionally, although embodiments have been described using a particular series of transactions and steps, it should be apparent to those skilled in the art that the scope of the present disclosure is not limited to the described series of transactions and steps. Various features and aspects of the above-described embodiments may be used individually or jointly.</p><p id="p-0137" num="0136">Further, while embodiments have been described using a particular combination of hardware and software, it should be recognized that other combinations of hardware and software are also within the scope of the present disclosure. Embodiments may be implemented only in hardware, or only in software, or using combinations thereof. The various processes described herein can be implemented on the same processor or different processors in any combination. Accordingly, where components or modules are described as being configured to perform certain operations, such configuration can be accomplished, e.g., by designing electronic circuits to perform the operation, by programming programmable electronic circuits (such as microprocessors) to perform the operation, or any combination thereof. Processes can communicate using a variety of techniques including but not limited to conventional techniques for inter process communication, and different pairs of processes may use different techniques, or the same pair of processes may use different techniques at different times.</p><p id="p-0138" num="0137">The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that additions, subtractions, deletions, and other modifications and changes may be made thereunto without departing from the broader spirit and scope as set forth in the claims. Thus, although specific disclosure embodiments have been described, these are not intended to be limiting. Various modifications and equivalents are within the scope of the following claims.</p><p id="p-0139" num="0138">The use of the terms &#x201c;a&#x201d; and &#x201c;an&#x201d; and &#x201c;the&#x201d; and similar referents in the context of describing the disclosed embodiments (especially in the context of the following claims) are to be construed to cover both the singular and the plural, unless otherwise indicated herein or clearly contradicted by context. The terms &#x201c;comprising,&#x201d; &#x201c;having,&#x201d; &#x201c;including,&#x201d; and &#x201c;containing&#x201d; are to be construed as open-ended terms (i.e., meaning &#x201c;including, but not limited to,&#x201d;) unless otherwise noted. The term &#x201c;connected&#x201d; is to be construed as partly or wholly contained within, attached to, or joined together, even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range, unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples, or exemplary language (e.g., &#x201c;such as&#x201d;) provided herein, is intended merely to better illuminate embodiments and does not pose a limitation on the scope of the disclosure unless otherwise claimed. No language in the specification should be construed as indicating any non-claimed element as essential to the practice of the disclosure.</p><p id="p-0140" num="0139">Disjunctive language such as the phrase &#x201c;at least one of X, Y, or Z,&#x201d; unless specifically stated otherwise, is intended to be understood within the context as used in general to present that an item, term, etc., may be either X, Y, or Z, or any combination thereof (e.g., X, Y, and/or Z). Thus, such disjunctive language is not generally intended to, and should not, imply that certain embodiments require at least one of X, at least one of Y, or at least one of Z to each be present.</p><p id="p-0141" num="0140">Preferred embodiments of this disclosure are described herein, including the best mode known for carrying out the disclosure. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. Those of ordinary skill should be able to employ such variations as appropriate and the disclosure may be practiced otherwise than as specifically described herein. Accordingly, this disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover, any combination of the above-described elements in all possible variations thereof is encompassed by the disclosure unless otherwise indicated herein.</p><p id="p-0142" num="0141">All references, including publications, patent applications, and patents, cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.</p><p id="p-0143" num="0142">In the foregoing specification, aspects of the disclosure are described with reference to specific embodiments thereof, but those skilled in the art will recognize that the disclosure is not limited thereto. Various features and aspects of the above-described disclosure may be used individually or jointly. Further, embodiments can be utilized in any number of environments and applications beyond those described herein without departing from the broader spirit and scope of the specification. The specification and drawings are, accordingly, to be regarded as illustrative rather than restrictive.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. (canceled)</claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. A computer-implemented method, comprising:<claim-text>receiving, by a computing component of a cloud computing environment and from a requesting computing component, change request data indicating a requested change to an attribute of a virtual machine compute instance of the cloud computing environment;</claim-text><claim-text>obtaining a first state object comprising a first set of attributes indicating a current state of the virtual machine compute instance;</claim-text><claim-text>deriving, by the computing component, a second state object of the virtual machine compute instance based at least in part on the requested change and the first state object;</claim-text><claim-text>calculating, by the computing component, a first hash value based at least in part on a first subset of attributes of a second set of attributes of the second state object;</claim-text><claim-text>updating, by the computing component, the first state object based at least in part on executing the requested change to the virtual machine compute instance;</claim-text><claim-text>calculating, by the computing component, a second hash value based at least in part on a second subset of the first set of attributes of the first state object; and</claim-text><claim-text>transmitting, by the computing component to the requesting computing component, the first hash value and the second hash value, the requesting computing component being configured to compare the first hash value and the second hash value to verify that the requested change has been implemented at the virtual machine compute instance.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computer-implemented method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein each attribute of the first set of attributes of the first state object and each attribute of the second set of attributes of the second state object individually comprise an attribute identifier and a value corresponding to the attribute identifier.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computer-implemented method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising identifying the first subset of attributes from the second set of attributes of the second state object based at least in part on mapping between the requesting computing component and one or more attribute identifiers.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computer-implemented method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the requesting computing component is a control plane component of a cloud computing system, and wherein the computing component is a management plane component of the cloud computing system.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computer-implemented method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>receiving, by the computing component from a different requesting computing component, a second change request indicating a second requested change to one or more attributes of the virtual machine compute instance;</claim-text><claim-text>deriving, by the computing component, a third state object of the virtual machine compute instance based at least in part on the first state object and the second requested change;</claim-text><claim-text>calculating, by the computing component, a third hash value based at least in part on a third subset of attributes of a third set of attributes of the third state object, the third subset of attributes having attributes that differ from the first subset of attributes; and</claim-text><claim-text>providing, by the computing component to the different requesting computing component, the third hash value being configured to be utilized by the different requesting computing component to verify that the second requested change has been implemented at the virtual machine compute instance.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computer-implemented method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:<claim-text>executing, by the computing component, the second requested change to the virtual machine compute instance;</claim-text><claim-text>updating, by the computing component, the first state object based at least in part on executing the second requested change to the virtual machine compute instance;</claim-text><claim-text>calculating, by the computing component, a fourth hash value based at least in part on a fourth subset of attributes of the first set of attributes of the first state object, the fourth subset of attributes having attributes that differ from the second subset of the set of attributes; and</claim-text><claim-text>providing, by the computing component to the different requesting computing component, the fourth hash value, the fourth hash value being configured to be utilized by the different requesting computing component to verify that the second requested change has been implemented at the virtual machine compute instance.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The computer-implemented method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the second state object represents a desired state of the virtual machine compute instance after the requested change is made to the virtual machine compute instance.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A computing device of a cloud computing environment, the computing device, comprising;<claim-text>a processing device communicatively coupled to a non-transitory computer-readable medium storing computer-executable program instructions that, when executed by the processing device, cause the computing device to:<claim-text>receive, from a requesting computing component, change request data indicating a requested change to an attribute of a virtual machine compute instance of the cloud computing environment;</claim-text><claim-text>obtain a first state object comprising a first set of attributes indicating a current state of the virtual machine compute instance;</claim-text><claim-text>derive a second state object of the virtual machine compute instance based at least in part on the requested change and the first state object;</claim-text><claim-text>calculate a first hash value based at least in part on a first subset of attributes of a second set of attributes of the second state object;</claim-text><claim-text>update the first state object based at least in part on executing the requested change to the virtual machine compute instance;</claim-text><claim-text>calculate a second hash value based at least in part on a second subset of the first set of attributes of the first state object; and</claim-text><claim-text>transmit, to the requesting computing component, the first hash value and the second hash value, the requesting computing component being configured to compare the first hash value and the second hash value to verify that the requested change has been implemented at the virtual machine compute instance.</claim-text></claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computing device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein each attribute of the first set of attributes of the first state object and each attribute of the second set of attributes of the second state object individually comprise an attribute identifier and a value corresponding to the attribute identifier.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computing device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein executing the instructions further causes the computing device to identify the first subset of attributes from the second set of attributes of the second state object based at least in part on mapping between the requesting computing component and one or more attribute identifiers.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computing device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the requesting computing component is a control plane component of a cloud computing system, and wherein the computing component is a management plane component of the cloud computing system.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computing device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein executing the instructions further causes the computing device to:<claim-text>receive, from a different requesting computing component, a second change request indicating a second requested change to one or more attributes of the virtual machine compute instance;</claim-text><claim-text>derive a third state object of the virtual machine compute instance based at least in part on the first state object and the second requested change;</claim-text><claim-text>calculate a third hash value based at least in part on a third subset of attributes of a third set of attributes of the third state object, the third subset of attributes having attributes that differ from the first subset of attributes; and</claim-text><claim-text>provide, to the different requesting computing component, the third hash value being configured to be utilized by the different requesting computing component to verify that the second requested change has been implemented at the virtual machine compute instance.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computing device of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein executing the instructions further causes the computing device to:<claim-text>execute the second requested change to the virtual machine compute instance;</claim-text><claim-text>update the first state object based at least in part on executing the second requested change to the virtual machine compute instance;</claim-text><claim-text>calculate a fourth hash value based at least in part on a fourth subset of attributes of the first set of attributes of the first state object, the fourth subset of attributes having attributes that differ from the second subset of the set of attributes; and</claim-text><claim-text>provide, to the different requesting computing component, the fourth hash value, the fourth hash value being configured to be utilized by the different requesting computing component to verify that the second requested change has been implemented at the virtual machine compute instance.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The computing device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the second state object represents a desired state of the virtual machine compute instance after the requested change is made to the virtual machine compute instance.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A non-transitory computer-readable storage medium storing computer-executable program instructions that, when executed by a processing device of a computing device, cause the computing device to:<claim-text>receive, from a requesting computing component, change request data indicating a requested change to an attribute of a virtual machine compute instance of the cloud computing environment;</claim-text><claim-text>obtain a first state object comprising a first set of attributes indicating a current state of the virtual machine compute instance;</claim-text><claim-text>derive a second state object of the virtual machine compute instance based at least in part on the requested change and the first state object;</claim-text><claim-text>calculate a first hash value based at least in part on a first subset of attributes of a second set of attributes of the second state object;</claim-text><claim-text>update the first state object based at least in part on executing the requested change to the virtual machine compute instance;</claim-text><claim-text>calculate a second hash value based at least in part on a second subset of the first set of attributes of the first state object; and</claim-text><claim-text>transmit, to the requesting computing component, the first hash value and the second hash value, the requesting computing component being configured to compare the first hash value and the second hash value to verify that the requested change has been implemented at the virtual machine compute instance.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein each attribute of the first set of attributes of the first state object and each attribute of the second set of attributes of the second state object individually comprise an attribute identifier and a value corresponding to the attribute identifier.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein executing the instructions further causes the computing device to identify the first subset of attributes from the second set of attributes of the second state object based at least in part on mapping between the requesting computing component and one or more attribute identifiers.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the requesting computing component is a control plane component of a cloud computing system, and wherein the computing component is a management plane component of the cloud computing system.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein executing the instructions further causes the computing device to:<claim-text>receive, from a different requesting computing component, a second change request indicating a second requested change to one or more attributes of the virtual machine compute instance;</claim-text><claim-text>derive a third state object of the virtual machine compute instance based at least in part on the first state object and the second requested change;</claim-text><claim-text>calculate a third hash value based at least in part on a third subset of attributes of a third set of attributes of the third state object, the third subset of attributes having attributes that differ from the first subset of attributes; and</claim-text><claim-text>provide, to the different requesting computing component, the third hash value being configured to be utilized by the different requesting computing component to verify that the second requested change has been implemented at the virtual machine compute instance.</claim-text></claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the second state object represents a desired state of the virtual machine compute instance after the requested change is made to the virtual machine compute instance.</claim-text></claim></claims></us-patent-application>