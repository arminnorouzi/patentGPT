<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004406A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004406</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17780866</doc-number><date>20201117</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>CN</country><doc-number>201911194739.X</doc-number><date>20191128</date></priority-claim><priority-claim sequence="02" kind="national"><country>CN</country><doc-number>201911245165.4</doc-number><date>20191206</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>451</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20180201</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>451</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>542</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e79">Energy-Efficient Display Processing Method and Device</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Huawei Technologies Co., Ltd.</orgname><address><city>Zhejiang</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Hu</last-name><first-name>Zhengyuan</first-name><address><city>Xi'an</city><country>CN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Li</last-name><first-name>Bing</first-name><address><city>Shenzhen</city><country>CN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Liu</last-name><first-name>Wen</first-name><address><city>Xi'an</city><country>CN</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Gong</last-name><first-name>Shuqiang</first-name><address><city>Dongguan</city><country>CN</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Xie</last-name><first-name>Zichen</first-name><address><city>Shanghai</city><country>CN</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/CN2020/129327</doc-number><date>20201117</date></document-id><us-371c12-date><date>20220527</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An electronic device includes a first graphics processing subsystem, a second graphics processing subsystem, and a screen. The first graphics processing subsystem includes a first application processor, a first graphics processing unit, and a first memory. The second graphics processing subsystem includes a second application processor, a second graphics processing unit, and a second memory. The first graphics processing unit renders a first GUI. The screen displays the first GUI. The second graphics processing unit renders a second GUI, and the second GUI and the first GUI belong to different interface types. The screen displays the second GUI. A display processing method applied to the electronic device is also provided, wherein the first graphics processing subsystem can be switched to the second graphics processing subsystem based on complexity of a to-be-displayed GUI.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="67.56mm" wi="105.49mm" file="US20230004406A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="160.61mm" wi="107.53mm" file="US20230004406A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="79.33mm" wi="107.53mm" file="US20230004406A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="219.71mm" wi="157.82mm" file="US20230004406A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="214.71mm" wi="147.74mm" orientation="landscape" file="US20230004406A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="221.83mm" wi="157.23mm" orientation="landscape" file="US20230004406A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="136.06mm" wi="154.52mm" file="US20230004406A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="119.13mm" wi="152.40mm" file="US20230004406A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="150.79mm" wi="159.77mm" file="US20230004406A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="160.70mm" wi="103.29mm" file="US20230004406A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="215.98mm" wi="154.52mm" orientation="landscape" file="US20230004406A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="215.56mm" wi="157.31mm" orientation="landscape" file="US20230004406A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="202.52mm" wi="138.77mm" file="US20230004406A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="211.24mm" wi="154.18mm" orientation="landscape" file="US20230004406A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="214.63mm" wi="146.81mm" file="US20230004406A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="156.04mm" wi="154.43mm" file="US20230004406A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><p id="p-0002" num="0001">This application claims priority to Chinese Patent Application No. 201911194739.X, filed with the China National Intellectual Property Administration on Nov. 28, 2019 and entitled &#x201c;ENERGY-EFFICIENT GRAPHICS DISPLAY SOLUTION AND ELECTRONIC DEVICE&#x201d;, and Chinese Patent Application No. 201911245165.4, filed with the China National Intellectual Property Administration on Dec. 6, 2019 and entitled &#x201c;ENERGY-EFFICIENT DISPLAY PROCESSING METHOD AND DEVICE&#x201d;, which are incorporated herein by reference in their entireties.</p><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">Embodiments of this application relate to the field of electronic technologies, and in particular, to an energy-efficient display processing method and a device.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0004" num="0003">With the development of electronic technologies, more types and functions of electronic devices such as wearable devices and mobile phones emerge. The electronic device may display various graphical user interfaces (graphical user interface, GUI) for a user via a screen, to help the user browse information or perform interface interaction with the electronic device.</p><p id="p-0005" num="0004">In a process of using the electronic device by the user, the electronic device may need to display a complex GUI, for example, a game interface or a three-dimensional (3 dimensions, 3D) watch face. To meet a drawing requirement of the complex GUI, the electronic device needs to be provided with a high-performance graphics processing unit (graphics processing unit, GPU) for graphics display processing. However, power consumption of the high-performance GPU is relatively high. Consequently, power consumption of the electronic device is relatively high, and energy efficiency is relatively low.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0006" num="0005">Embodiments of this application provide an energy-efficient display processing method and a device, so that graphics processing subsystems with different performance and power consumption can be switched to based on complexity of different to-be-displayed GUIs, to perform GUI display processing. This can reduce overall power consumption of an electronic device and improve energy efficiency of the electronic device.</p><p id="p-0007" num="0006">To achieve the foregoing objective, the following technical solutions are used in embodiments of this application.</p><p id="p-0008" num="0007">According to one aspect, an embodiment of this application provides a display processing method, and the method may be applied to an electronic device. The electronic device includes a first graphics processing subsystem, a second graphics processing subsystem, and a screen. The first graphics processing subsystem includes a first graphics processing unit, a first application processor, and a first memory used in cooperation with the first application processor and the first graphics processing unit. The second graphics processing subsystem includes a second graphics processing unit, a second application processor, and a second memory used in cooperation with the second application processor and the second graphics processing unit. The method includes: The first graphics processing subsystem renders a first graphical user interface GUI. Then, the screen displays the rendered first GUI. The first application processor sends a switching notification to the second application processor after the first application processor determines that a preset condition is met. After receiving the switching notification, the second application processor notifies the second graphics processing unit to render a to-be-displayed second GUI, where the second GUI and the first GUI correspond to different interface types. The second graphics processing unit renders the second GUI. Then, the screen displays the rendered second GUI.</p><p id="p-0009" num="0008">In this way, for to-be-displayed GUIs of different interface types, the electronic device can switch to use graphics processing subsystems with different performance and different power consumption for display processing, instead of using a unified graphics processing subsystem with high performance and high power consumption for processing. The to-be-displayed GUIs of the different interface types have different complexity. Therefore, the electronic device may balance display processing performance and power consumption of different to-be-displayed GUIs, to implement optimal energy efficiency for the different to-be-displayed GUIs. The plurality of graphics processing subsystems in the electronic device have relatively low average power consumption and relatively high average energy efficiency. In addition, the plurality of graphics processing subsystems have relatively high overall energy efficiency and relatively low overall power consumption. Therefore, energy efficiency of the electronic device for graphics display processing is relatively high, and overall power consumption of the electronic device is relatively low.</p><p id="p-0010" num="0009">In a possible design, that the first application processor sends a switching notification to the second application processor after the first application processor determines that a preset condition is met includes: The first application processor sends the switching notification to the second application processor after the first application processor determines that a first input operation is detected and the preset condition is met.</p><p id="p-0011" num="0010">That is, the electronic device determines, only after detecting triggering of an input operation of a user, whether to perform graphics processing subsystem switching.</p><p id="p-0012" num="0011">In another possible design, the electronic device further includes a memory, and the memory stores a preset application corresponding to the second graphics processing subsystem. That the first application processor determines that a preset condition is met includes: The first application processor determines that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type. A GUI of the first interface type includes a GUI corresponding to the preset application, and a GUI of the second interface type includes a GUI other than the GUI corresponding to the preset application.</p><p id="p-0013" num="0012">In this solution, the electronic device may prestore the preset application corresponding to the second graphics processing subsystem. If the to-be-displayed second GUI corresponds to the preset application, the electronic device may perform display processing by using the second graphics processing subsystem.</p><p id="p-0014" num="0013">For example, the preset application includes a payment application, a camera application, a music application, a call application, or a game application; the preset application has a function associated with remote network communication; or the preset application is a third-party application.</p><p id="p-0015" num="0014">In another possible design, the electronic device further includes a memory, and the memory stores a preset function corresponding to the second graphics processing subsystem. That the first application processor determines that a preset condition is met includes: The first application processor determines that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type. A GUI of the first interface type includes a GUI corresponding to the preset function, and a GUI of the second interface type includes a GUI other than the GUI corresponding to the preset function.</p><p id="p-0016" num="0015">In this solution, the electronic device may prestore the preset function corresponding to the second graphics processing subsystem. If the to-be-displayed second GUI corresponds to the preset function, the electronic device may perform display processing by using the second graphics processing subsystem.</p><p id="p-0017" num="0016">For example, the preset function may be associated with remote network communication.</p><p id="p-0018" num="0017">In a possible design, the electronic device further includes a memory, and the memory stores a preset GUI corresponding to the second graphics processing subsystem. That the first application processor determines that a preset condition is met includes: The first application processor determines that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type. A GUI of the first interface type includes a preset GUI, and a GUI of the second interface type includes a GUI other than the preset GUI.</p><p id="p-0019" num="0018">In this solution, the electronic device may prestore the preset GUI corresponding to the second graphics processing subsystem. If the to-be-displayed second GUI matches the preset GUI, the electronic device may perform display processing by using the second graphics processing subsystem.</p><p id="p-0020" num="0019">In a possible design, the second GUI and the first GUI are respectively of a 3D interface type and a 2D interface type.</p><p id="p-0021" num="0020">In other words, the electronic device may separately render a GUI of the 3D interface type and a GUI of the 2D interface type by using different graphics processing subsystems. For example, the GUI of the 3D interface type may be a 3D watch face interface, and the GUI of the 2D interface type may be a 2D watch face interface.</p><p id="p-0022" num="0021">In a possible design, the electronic device further includes a memory, the memory stores at least one preset parameter group corresponding to the second graphics processing subsystem, and the preset parameter group includes a preset GUI and a preset input operation. That the first application processor determines that a preset condition is met includes: The first application processor determines that a second input operation is detected. The first GUI and the second input operation match the preset GUI and the preset input operation in the preset parameter group.</p><p id="p-0023" num="0022">In this solution, the electronic device may adaptively switch, in real time based on a currently displayed interface and a to-be-displayed GUI corresponding to an input operation, to use a corresponding graphics processing subsystem, so that complexity of the to-be-displayed GUI can match, in real time, performance and power consumption of the graphics processing subsystem that is switched to. This can reduce overall power consumption of the graphics processing subsystem and the electronic device, and improve energy efficiency of the graphics processing subsystem and the electronic device.</p><p id="p-0024" num="0023">In another possible design, that the first application processor determines that a preset condition is met includes: The first application processor determines that a third input operation is detected. The third input operation is used to indicate to perform graphics processing subsystem switching, or the third input operation is used to indicate to use the second graphics processing subsystem.</p><p id="p-0025" num="0024">In this solution, the electronic device may determine, based on an input operation of a user, a target graphics processing subsystem or whether to perform graphics processing subsystem switching.</p><p id="p-0026" num="0025">In another possible design, after the first application processor determines that the preset condition is met, and before the screen displays the rendered second GUI, the method further includes: The first graphics processing subsystem renders a transition interface, and the screen displays the rendered transition interface.</p><p id="p-0027" num="0026">In this way, the transition interface may continuously provide interface display for the user in a graphics processing subsystem switching process, to avoid a phenomenon such as interruption, a black screen, or screen flickering on an interface viewed by the user, and improve visual experience of the user.</p><p id="p-0028" num="0027">In another possible design, the first graphics processing subsystem further includes a first communications bus configured to connect internal components of the first graphics processing subsystem. The second graphics processing subsystem further includes a second communications bus configured to connect internal components of the second graphics processing subsystem.</p><p id="p-0029" num="0028">In other words, different graphics processing subsystems may include different communications buses. For example, the communications buses have different dominant frequencies and communication rates. In this way, the different graphics processing subsystems have different performance, power consumption, and energy efficiency.</p><p id="p-0030" num="0029">In another possible design, the first input operation, the second input operation, and the third input operation include a touchscreen-based input operation, a button-based operation, or a voice input operation.</p><p id="p-0031" num="0030">That is, the user may interact with the electronic device by using a touchscreen, a button, or voice.</p><p id="p-0032" num="0031">In another possible design, the electronic device is a wearable device.</p><p id="p-0033" num="0032">According to another aspect, an embodiment of this application provides an electronic device, including a first graphics processing subsystem, a second graphics processing subsystem, and a screen. The first graphics processing subsystem includes a first graphics processing unit, a first application processor, and a first memory used in cooperation with the first application processor and the first graphics processing unit. The second graphics processing subsystem includes a second graphics processing unit, a second application processor, and a second memory used in cooperation with the second application processor and the second graphics processing unit. The first graphics processing subsystem is configured to render a first graphical user interface GUI. The screen is configured to display the rendered first GUI. The first application processor is configured to send a switching notification to the second application processor after the first application processor determines that a preset condition is met. The second application processor is configured to: after receiving the switching notification from the first application processor, notify the second graphics processing unit to render a to-be-displayed second GUI. The second GUI and the first GUI correspond to different interface types. The second graphics processing unit is configured to render the second GUI. The screen is further configured to display the rendered second GUI.</p><p id="p-0034" num="0033">In a possible design, that the first application processor is configured to send a switching notification to the second application processor after the first application processor determines that a preset condition is met specifically includes: The first application processor is configured to send the switching notification to the second application processor after the first application processor determines that a first input operation is detected and the preset condition is met.</p><p id="p-0035" num="0034">In another possible design, the electronic device further includes a memory. The memory is configured to store a preset application corresponding to the second graphics processing subsystem. That the first application processor is configured to determine that a preset condition is met specifically includes: The first application processor is configured to determine that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type. A GUI of the first interface type includes a GUI corresponding to the preset application, and a GUI of the second interface type includes a GUI other than the GUI corresponding to the preset application.</p><p id="p-0036" num="0035">In another possible design, the preset application includes a payment application, a camera application, a music application, a call application, or a game application; the preset application has a function associated with remote network communication; or the preset application is a third-party application.</p><p id="p-0037" num="0036">In another possible design, the electronic device further includes a memory. The memory is configured to store a preset function corresponding to the second graphics processing subsystem. That the first application processor is configured to determine that a preset condition is met specifically includes: The first application processor is configured to determine that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type. A GUI of the first interface type includes a GUI corresponding to the preset function, and a GUI of the second interface type includes a GUI other than the GUI corresponding to the preset function.</p><p id="p-0038" num="0037">In another possible design, the electronic device further includes a memory. The memory is configured to store a preset GUI corresponding to the second graphics processing subsystem. That the first application processor is configured to determine that a preset condition is met specifically includes: The first application processor is configured to determine that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type. A GUI of the first interface type includes a preset GUI, and a GUI of the second interface type includes a GUI other than the preset GUI.</p><p id="p-0039" num="0038">In another possible design, the electronic device further includes a memory. The memory is configured to store at least one preset parameter group corresponding to the second graphics processing subsystem, and the preset parameter group includes a preset GUI and a preset input operation. That the first application processor is configured to determine that a preset condition is met specifically includes: The first application processor is configured to determine that a second input operation is detected. The first GUI and the second input operation match the preset GUI and the preset input operation in the preset parameter group.</p><p id="p-0040" num="0039">In another possible design, that the first application processor is configured to determine that a preset condition is met specifically includes: The first application processor is configured to determine that a third input operation is detected. The third input operation is used to indicate to perform graphics processing subsystem switching, or the third input operation is used to indicate to use the second graphics processing subsystem.</p><p id="p-0041" num="0040">In another possible design, the first graphics processing unit is further configured to render a transition interface after the first application processor determines that the preset condition is met and before the screen displays the rendered second GUI. The screen is further configured to display the rendered transition interface.</p><p id="p-0042" num="0041">In another possible design, the second graphics processing subsystem is further configured to: receive a display request signal periodically sent by the screen; and after the second GUI is rendered, send image data corresponding to the rendered second GUI to the screen within a receiving interval between two display request signals. That the screen is configured to display the rendered second GUI specifically includes: The screen is configured to display the rendered second GUI based on the image data.</p><p id="p-0043" num="0042">In another possible design, the first graphics processing subsystem further includes a first communications bus configured to connect internal components of the first graphics processing subsystem, and the second graphics processing subsystem further includes a second communications bus configured to connect internal components of the second graphics processing subsystem.</p><p id="p-0044" num="0043">In another possible design, the electronic device is a wearable device.</p><p id="p-0045" num="0044">According to another aspect, an embodiment of this application provides a display processing apparatus. The apparatus is included in an electronic device. The apparatus has a function of implementing behavior of the electronic device in any method according to the foregoing aspects and the possible designs. The function may be implemented by hardware, or may be implemented by hardware by executing corresponding software. The hardware or the software includes at least one module or unit corresponding to the function, for example, a rendering module/unit, a display module/unit, or a processing module/unit.</p><p id="p-0046" num="0045">According to still another aspect, an embodiment of this application provides an electronic device, including one or more processors and a memory. The memory stores code. When the code is executed by the electronic device, the electronic device is enabled to perform the display processing method performed by the electronic device in any possible design of the foregoing aspects.</p><p id="p-0047" num="0046">According to another aspect, an embodiment of this application provides a computer-readable storage medium, including computer instructions. When the computer instructions are run on an electronic device, the electronic device is enabled to perform the display processing method according to any possible design of the foregoing aspects.</p><p id="p-0048" num="0047">According to still another aspect, an embodiment of this application provides a computer program product. When the computer program product is run on a computer, the computer is enabled to perform the display processing method performed by the electronic device in any possible design of the foregoing aspects.</p><p id="p-0049" num="0048">According to another aspect, an embodiment of this application provides a chip system, and the chip system is used in an electronic device. The chip system includes one or more interface circuits and one or more processors. The interface circuit and the processor are interconnected through a line. The interface circuit is configured to receive a signal from a memory of the electronic device, and send the signal to the processor. The signal includes computer instructions stored in the memory. When the processor executes the computer instructions, the electronic device is enabled to perform the display processing method in any possible design of the foregoing aspects.</p><p id="p-0050" num="0049">For beneficial effects corresponding to the foregoing other aspects, refer to the descriptions of the beneficial effects in the method aspects. Details are not described herein again.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>1</b>C</figref> are schematic diagrams of architectures of a group of graphics processing systems according to the conventional technology;</p><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic diagram of a structure of an electronic device according to an embodiment of this application,</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic diagram of a structure of a processor according to an embodiment of this application;</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic diagram of a structure of a plurality of graphics processing subsystems according to an embodiment of this application:</p><p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic diagram of a connection of graphics processing subsystems according to an embodiment of this application;</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a processing flowchart of a graphics processing subsystem according to an embodiment of this application;</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic diagram of a group of interfaces of a smartwatch according to an embodiment of this application;</p><p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a schematic diagram of another group of interfaces of a smartwatch according to an embodiment of this application;</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>9</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>9</b>B</figref> are a flowchart of a display processing method according to an embodiment of this application;</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a schematic diagram of another group of interfaces of a smartwatch according to an embodiment of this application;</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a schematic diagram of another group of interfaces of a smartwatch according to an embodiment of this application;</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a schematic diagram of another group of interfaces of a smartwatch according to an embodiment of this application:</p><p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a schematic diagram of another group of interfaces of a smartwatch according to an embodiment of this application:</p><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a schematic diagram of another group of interfaces of a smartwatch according to an embodiment of this application; and</p><p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a flowchart of a display processing method according to an embodiment of this application.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DESCRIPTION OF EMBODIMENTS</heading><p id="p-0066" num="0065">The following describes technical solutions in embodiments of this application with reference to the accompanying drawings in embodiments of this application. In the descriptions of embodiments of this application, &#x201c;/&#x201d; means &#x201c;or&#x201d; unless otherwise specified. For example, A/B may represent A or B. In this specification, &#x201c;and/or&#x201d; describes only an association relationship for describing associated objects and represents that three relationships may exist. For example. A and/or B may represent the following three cases: Only A exists, both A and B exist, and only B exists. In addition, in the descriptions in embodiments of this application, &#x201c;a plurality of&#x201d; means two or more.</p><p id="p-0067" num="0066">The following terms &#x201c;first&#x201d; and &#x201c;second&#x201d; are merely intended for a purpose of description, and shall not be understood as an indication or implication of relative importance or implicit indication of a quantity of indicated technical features. Therefore, a feature limited by &#x201c;first&#x201d; or &#x201c;second&#x201d; may explicitly or implicitly include one or more features. In the descriptions of the embodiments, unless otherwise specified, &#x201c;a plurality of&#x201d; means two or more than two.</p><p id="p-0068" num="0067">An electronic device such as a wearable device or a mobile phone may display a GUI for a user, to help the user browse information or perform interface interaction with the electronic device. The GUI displayed by the electronic device may be a complex GUI such as a game interface, or may be a simple GUI such as a home screen. In other words, the electronic device does not always display a complex GUI, and does not always display a simple GUI.</p><p id="p-0069" num="0068">To display a complex GUI, the electronic device has a graphics display processing capability of the complex GUI. For example, refer to <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. The electronic device has a high-performance GPU for displaying a complex GUI. In some conventional technologies, the electronic device uniformly uses the high-performance GPU to perform graphics display processing on a complex GUI and a simple GUI. In this way, power consumption of the GPU and the electronic device is relatively high, and energy efficiency of the GPU and the electronic device is relatively low.</p><p id="p-0070" num="0069">In particular, for the electronic device having a relatively small screen, such as the wearable device, only a simple GUI needs to be displayed in most cases, and a complex GUI is displayed in a few cases. Therefore, if the high-performance GPU is uniformly used to perform graphics display processing, power consumption of the GPU and the electronic device is relatively high, and energy efficiency of the electronic device is relatively low.</p><p id="p-0071" num="0070">In some other conventional technologies, refer to <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>. The electronic device includes a GPU having a relatively high graphics display processing capability, and the GPU has a high performance mode and a low performance mode. The electronic device may select to perform graphics display processing in different modes of the GPU. To cooperate with the high performance mode of the GPU, power consumption of an application processor used in cooperation with the GPU is relatively high, and power consumption of a basic system such as a memory, a communications bus (also referred to as a bus), a dominant frequency clock, or a power supply used in cooperation with the GPU is also relatively high. Therefore, even if the low performance mode of the GPU is used, power consumption of the basic system used in cooperation with the GPU is still relatively high, overall power consumption of the electronic device is still relatively high, and energy efficiency of the electronic device is still relatively low.</p><p id="p-0072" num="0071">In some other conventional technologies, refer to <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>. The electronic device includes a high-performance first GPU and a low-performance second GPU. The electronic device may use, through allocating, the first GPU or the second GPU to perform graphics display processing. However, both the first GPU and the second GPU use a same basic system such as a memory, a communications bus, a dominant frequency clock, or a power supply. To cooperate with the high-performance first GPU, the basic system such as the memory, the communications bus, the clock, or the power supply has relatively good performance and relatively high power consumption. Therefore, even if the electronic device uses a low-performance GPU to perform graphics display processing, power consumption of the basic system is still relatively high, overall power consumption of the electronic device is still relatively high, and energy efficiency of the electronic device is still relatively low.</p><p id="p-0073" num="0072">An embodiment of this application provides an energy-efficient display processing method, and the method may be applied to an electronic device. The electronic device may include a plurality of graphics processing subsystems. Different graphics processing subsystems may include graphics processing units with different performance, and application processors and basic systems that are used in cooperation with the graphics processing units. In the different graphics processing subsystems, the graphics processing units have different performance, and usually have different power consumption, and the application processors and the basic systems that are used in cooperation with the graphics processing units usually have different performance and power consumption. That is, different graphics processing subsystems have different performance and power consumption.</p><p id="p-0074" num="0073">Usually, better performance indicates higher power consumption; and poorer performance indicates lower power consumption. A high-performance graphics processing subsystem includes a high-performance graphics processing unit, application processor, and basic system. The high-performance graphics processing subsystem also has high power consumption. A low-performance graphics processing subsystem includes a low-performance graphics processing unit, application processor, and basic system. The low-performance graphics processing subsystem also has low power consumption. Compared with the high-performance graphics processing subsystem, the low-performance graphics processing subsystem requires a lower power supply voltage, and therefore, power consumption may be reduced exponentially.</p><p id="p-0075" num="0074">In this embodiment of this application, for to-be-displayed GUIs of different complexity, the electronic device can switch to use graphics processing subsystems with different performance and different power consumption for display processing. However, different power consumption of graphics processing subsystems used in the electronic device indicates different overall power consumption of the electronic device. For example, for a high-complexity GUI, the electronic device may use a graphics processing subsystem with high performance and high power consumption to perform processing; and for a low-complexity GUI, the electronic device may use a graphics processing subsystem with low performance and low power consumption to perform processing, instead of using a unified graphics processing subsystem with high performance and high power consumption to perform processing. In other words, the electronic device may balance display processing performance and power consumption of different to-be-displayed GUIs, to implement optimal energy efficiency for the different to-be-displayed GUIs. Therefore, the plurality of graphics processing subsystems in the electronic device have relatively low average power consumption and relatively high average energy efficiency. In addition, the plurality of graphics processing subsystems have relatively high overall energy efficiency and relatively low overall power consumption. Therefore, energy efficiency of the electronic device for graphics display processing is relatively high, and overall power consumption of the electronic device is relatively low.</p><p id="p-0076" num="0075">GUIs of different complexity correspond to different display task magnitudes. A complex GUI is a GUI having a heavyweight display task, and a simple GUI is a GUI having a lightweight display task. The complexity of the GUI is associated with one or more of the following: a quantity of graphic elements included in the GUI, resolution of the GUI, whether the GUI includes a 3D image, whether the GUI rotates, whether the GUI is scaled up or down, whether a graphic included in the GUI is moved, whether the GUI includes a dynamic graph, or the like. For example, a GUI with a relatively small quantity of graphic elements may be a simple GUI, and a GUI with a relatively large quantity of graphic elements may be a complex GUI. For another example, a GUI with low resolution may be a simple GUI, and a GUI with high resolution may be a complex GUI. For another example, a simple GUI includes a static graph; a relatively complex GUI includes a movable, scalable, or 2D rotatable dynamic graph, or the like; and a more complex GUI includes a 3D stereoscopic graph, a 3D rotatable or 3D dynamically changing graph, or the like.</p><p id="p-0077" num="0076">For example, the electronic device in this embodiment of this application may be a wearable device, a mobile phone, an augmented reality (augmented reality, AR)/virtual reality (virtual reality, VR) device, a tablet computer, a notebook computer, a vehicle-mounted device, an ultra-mobile personal computer (ultra-mobile personal computer, UMPC), a netbook, a personal digital assistant (personal digital assistant. PDA), or the like. A specific type of the electronic device is not limited in this embodiment of this application. In particular, the electronic device may be an electronic device that displays a complex GUI in some scenarios and displays a simple GUI in some other scenarios.</p><p id="p-0078" num="0077">For example, <figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic diagram of a structure of an electronic device <b>100</b>. The electronic device <b>100</b> may include a processor <b>110</b>, an external memory interface <b>120</b>, an internal memory <b>121</b>, a universal serial bus (universal serial bus, USB) interface <b>130</b>, a charging management module <b>140</b>, a power management module <b>141</b>, a battery <b>142</b>, an antenna 1, an antenna 2, a mobile communications module <b>150</b>, a wireless communications module <b>160</b>, an audio module <b>170</b>, a speaker <b>170</b>A, a receiver <b>170</b>B, a microphone <b>170</b>C, a headset jack <b>170</b>D, a sensor module <b>180</b>, a button <b>190</b>, a motor <b>191</b>, an indicator <b>192</b>, a camera <b>193</b>, a display <b>194</b>, a subscriber identification module (subscriber identification module, SIM) card interface <b>195</b>, and the like. The sensor module <b>180</b> may include a pressure sensor <b>180</b>A, a gyro sensor <b>180</b>B, a barometric pressure sensor <b>180</b>C, a magnetic sensor <b>180</b>D, an acceleration sensor <b>180</b>E, a distance sensor <b>180</b>F, an optical proximity sensor <b>180</b>G, a fingerprint sensor <b>180</b>H, a temperature sensor <b>180</b>J, a touch sensor <b>180</b>K, an ambient light sensor <b>180</b>L, a bone conduction sensor <b>180</b>M, and the like.</p><p id="p-0079" num="0078">The processor <b>110</b> may include one or more processing units. For example, refer to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The processor <b>110</b> may include a plurality of graphics processing subsystems, a modem processor, an image signal processor (image signal processor, ISP), a controller, a memory, a video codec, a digital signal processor (digital signal processor. DSP), a baseband processor, a neural-network processing unit (neural-network processing unit, NPU), a voice subsystem, a display subsystem, a sensor subsystem, a clock/voltage domain subsystem, a system power management (power management, PM) core, a secure element (secure element, SE) and/or a short-distance processor, and/or the like. Different processing units may be independent components, or may be integrated into one or more processors.</p><p id="p-0080" num="0079">The graphics processing subsystem includes a graphics processing unit (for example, a graphics processing unit, GPU), an application processor (application processor. AP) and a basic system that are used in cooperation with the graphics processing unit, and the like. The basic system may include a communications bus, a memory, a dominant frequency clock, a power supply, or the like that are used in cooperation with the graphics processing unit. Performance, power consumption, and energy efficiency of application processors, graphics processing units, and basic systems in different graphics processing subsystems are different. That is, different graphics processing subsystems have different performance, power consumption, and energy efficiency. Different graphics processing subsystems may be on a same chip, or may be on different chips.</p><p id="p-0081" num="0080">The controller may be a nerve center and a command center of the electronic device <b>100</b>. The controller may generate an operation control signal based on instruction operation code and a time sequence signal, to complete control of instruction fetching and instruction execution.</p><p id="p-0082" num="0081">A memory may be further disposed in the processor <b>110</b>, and is configured to store instructions and data. In some embodiments, the memory in the processor <b>110</b> is a cache. The memory may store instructions or data just used or cyclically used by the processor <b>110</b>. If the processor <b>110</b> needs to use the instructions or the data again, the processor <b>110</b> may directly invoke the instructions or the data from the memory. This avoids repeated access and reduces waiting time of the processor <b>110</b>, thereby improving system efficiency.</p><p id="p-0083" num="0082">In some embodiments, the processor <b>110</b> may include one or more interfaces. The interface may include an inter-integrated circuit (inter-integrated circuit, I2C) interface, an inter-integrated circuit sound (inter-integrated circuit sound, I2S) interface, a pulse code modulation (pulse code modulation, PCM) interface, a universal asynchronous receiver/transmitter (universal asynchronous receiver/transmitter, UART) interface, a mobile industry processor interface (mobile industry processor interface, MIPI), a general-purpose input/output (general-purpose input/output, GPIO) interface, a subscriber identification module (subscriber identification module, SIM) interface, a universal serial bus (universal serial bus, USB) interface, and/or the like.</p><p id="p-0084" num="0083">The charging management module <b>140</b> is configured to receive charging input from a charger. The charger may be a wireless charger or a wired charger. In some embodiments of wired charging, the charging management module <b>140</b> may receive charging input of the wired charger through the USB interface <b>130</b>. In some embodiments of wireless charging, the charging management module <b>140</b> may receive wireless charging input through a wireless charging coil of the electronic device <b>100</b>. The charging management module <b>140</b> may further supply power to the electronic device through the power management module <b>141</b> while charging the battery <b>142</b>.</p><p id="p-0085" num="0084">The power management module <b>141</b> is configured to connect to the battery <b>142</b>, the charging management module <b>140</b>, and the processor <b>110</b>. The power management module <b>141</b> receives input of the battery <b>142</b> and/or the charging management module <b>140</b>, and supplies power to the processor <b>110</b>, the internal memory <b>121</b>, an external memory, the display <b>194</b>, the camera <b>193</b>, the wireless communications module <b>160</b>, and the like. The power management module <b>141</b> may be further configured to monitor parameters such as a battery capacity, a battery cycle count, and a battery health status (electric leakage or impedance). In some other embodiments, the power management module <b>141</b> may alternatively be disposed in the processor <b>110</b>. In some other embodiments, the power management module <b>141</b> and the charging management module <b>140</b> may alternatively be disposed in a same device.</p><p id="p-0086" num="0085">The clock/voltage domain subsystem is also referred to as a clock/power network. The processor <b>110</b> may be a system on a chip (system on a chip, SoC). The clock/voltage domain subsystem may receive a clock and a voltage that are sent by an off-chip power management module of the SoC, and further generate, based on the clock and the voltage, a working clock and a working voltage that are required by each component/module (for example, the graphics processing unit or the application processor) in the SoC. Optionally, each component/module may have an independent clock/voltage domain subsystem.</p><p id="p-0087" num="0086">The system PM core is also referred to as a PM processor or a system controller. Different from an external power management module of the SoC, the system PM core performs binary processing on a digital signal. A core of the system PM core is usually a processor, namely, a core configured to control power consumption. The system PM core may run power consumption management software, and allocate a working-required clock and working voltage to each component in the SoC, to control a domain clock and a domain voltage of each component. The system PM core can control a total clock and voltage that are generated by the power management module and that serve the entire system, and can also control the clock/voltage domain subsystem to generate a working clock and voltage that belong to each component (for example, the graphics processing unit or the application processor).</p><p id="p-0088" num="0087">A wireless communications function of the electronic device <b>100</b> may be implemented through the antenna 1, the antenna 2, the mobile communications module <b>150</b>, the wireless communications module <b>160</b>, the modem processor, the baseband processor, and the like.</p><p id="p-0089" num="0088">The antenna 1 and the antenna 2 are configured to transmit and receive electromagnetic wave signals. Each antenna in the electronic device <b>100</b> may be configured to cover one or more communication frequency bands. Different antennas may further be multiplexed to improve antenna utilization. For example, the antenna 1 may be multiplexed as a diversity antenna of a wireless local area network. In some other embodiments, an antenna may be used in combination with a tuning switch.</p><p id="p-0090" num="0089">The mobile communications module <b>150</b> may provide a solution, applied to the electronic device <b>100</b>, to wireless communication including 2G, 3G, 4G, 5G, and the like. The mobile communications module <b>150</b> may include at least one filter, a switch, a power amplifier, a low noise amplifier (low noise amplifier, LNA), and the like. The mobile communications module <b>150</b> may receive an electromagnetic wave through the antenna 1, perform processing such as filtering and amplification on the received electromagnetic wave, and transmit the electromagnetic wave to the modem processor for demodulation. The mobile communications module <b>150</b> may further amplify a signal modulated by the modem processor, and convert the signal into an electromagnetic wave for radiation through the antenna 1. In some embodiments, at least some functional modules of the mobile communications module <b>150</b> may be disposed in the processor <b>110</b>. In some embodiments, at least some functional modules of the mobile communications module <b>150</b> may be disposed in the same device as at least some modules of the processor <b>110</b>.</p><p id="p-0091" num="0090">The modem processor may include a modulator and a demodulator. The modulator is configured to modulate a to-be-sent low-frequency baseband signal into a medium/high-frequency signal. The demodulator is configured to demodulate a received electromagnetic wave signal into a low-frequency baseband signal. Then, the demodulator transmits the low-frequency baseband signal obtained through demodulation to the baseband processor for processing. The baseband processor processes the low-frequency baseband signal, and then transfers an obtained signal to the application processor. The application processor outputs a sound signal by using an audio device (which is not limited to the speaker <b>170</b>A, the receiver <b>170</b>B, and the like), or displays an image or a video on the display <b>194</b>. In some embodiments, the modem processor may be an independent component. In some other embodiments, the modem processor may be independent of the processor <b>110</b>, and is disposed in the same device as the mobile communications module <b>150</b> or another functional module.</p><p id="p-0092" num="0091">The wireless communications module <b>160</b> may provide a wireless communication solution that includes a wireless local area network (wireless local area network, WLAN) (for example, a wireless fidelity (wireless fidelity, Wi-Fi) network), Bluetooth (Bluetooth, BT), a global navigation satellite system (global navigation satellite system. GNSS), frequency modulation (frequency modulation, FM), a near field communication (near field communication, NFC) technology, Zigbee, an infrared (infrared, IR) technology, or the like and that is applied to the electronic device <b>100</b>. The wireless communications module <b>160</b> may be one or more components integrating at least one communications processing module. The wireless communications module <b>160</b> receives an electromagnetic wave through the antenna 2, performs frequency modulation and filtering processing on an electromagnetic wave signal, and sends a processed signal to the processor <b>110</b>. The wireless communications module <b>160</b> may further receive a to-be-sent signal from the processor <b>110</b>, perform frequency modulation and amplification on the signal, and convert the signal into an electromagnetic wave for radiation through the antenna 2.</p><p id="p-0093" num="0092">The short-distance processor, namely, a short-distance baseband communications processing unit, may include a central processing unit (central processing unit, CPU) or a DSP, and runs short-distance communications protocol software. The short-distance processor may further include a hardware accelerator. Alternatively, the short-range processor may be integrated with a short-range communications chip in the wireless communications module, to perform all short-range communications processing such as analog, radio frequency, digital, and communications protocol processing.</p><p id="p-0094" num="0093">The electronic device <b>100</b> implements a display function by using the graphical processing unit, the display <b>194</b>, the application processor, and the like. The graphical processing unit is a microprocessor for image processing, and is connected to the display <b>194</b> and the application processor. The graphical processing unit is configured to: perform mathematical and geometric calculation, and render an image. The processor <b>110</b> may include one or more graphical processing units that execute program instructions to generate or change display information.</p><p id="p-0095" num="0094">The display <b>194</b> is configured to display an image, a video, or the like. The display <b>194</b> includes a display panel. The display panel may use a liquid crystal display (liquid crystal display, LCD), an organic light-emitting diode (organic light-emitting diode, OLED), an active-matrix organic light-emitting diode (active-matrix organic light-emitting diode, AMOLED), a flexible light-emitting diode (flexible light-emitting diode, FLED), a mini LED, a micro LED, a micro OLED, a quantum dot light-emitting diode (quantum dot light-emitting diode, QLED), or the like.</p><p id="p-0096" num="0095">The display subsystem is configured to interconnect to the display <b>194</b> to perform display processing on a to-be-displayed image generated by the CPU or the GPU. Different from specific display image pixel-level processing performed by the GPU, this component performs desktop-level display processing such as brightness and contrast adjustment and overlay (overlay) of a plurality of graphics layers/windows.</p><p id="p-0097" num="0096">The electronic device <b>100</b> can implement a photographing function by using the ISP, the camera <b>193</b>, the video codec, the graphical processing unit, the display <b>194</b>, the application processor, and the like.</p><p id="p-0098" num="0097">The ISP is configured to process data fed back by the camera <b>193</b>. For example, during photographing, a shutter is pressed, a ray of light is transmitted to a photosensitive element of the camera through a lens, and an optical signal is converted into an electrical signal. The photosensitive element of the camera transmits the electrical signal to the ISP for processing, to convert the electrical signal into a visible image. The ISP may further perform algorithm optimization on noise, brightness, and complexion of the image. The ISP may further optimize parameters such as exposure and color temperature of a photographing scenario. In some embodiments, the ISP may be disposed in the camera <b>193</b>.</p><p id="p-0099" num="0098">The camera <b>193</b> is configured to capture a static image or a video. An optical image of an object is generated through the lens, and is projected to the photosensitive element. The photosensitive element may be a charge coupled device (charge coupled device, CCD) or a complementary metal-oxide-semiconductor (complementary metal-oxide-semiconductor, CMOS) photoelectric transistor. The photosensitive element converts an optical signal into an electrical signal, and then transmits the electrical signal to the ISP for converting the electrical signal into a digital image signal. The ISP outputs the digital image signal to the DSP for processing. The DSP converts the digital image signal into an image signal in a standard format such as RGB or YUV. In some embodiments, the electronic device <b>100</b> may include one or N cameras <b>193</b>, where N is a positive integer greater than 1.</p><p id="p-0100" num="0099">The digital signal processor is configured to process a digital signal, and may process another digital signal in addition to the digital image signal. For example, when the electronic device <b>100</b> selects a frequency, the digital signal processor is configured to perform Fourier transform or the like on frequency energy.</p><p id="p-0101" num="0100">The video codec is configured to compress or decompress a digital video. The electronic device <b>100</b> may support one or more types of video codecs. In this way, the electronic device <b>100</b> can play or record videos in a plurality of coding formats, for example, moving picture experts group (moving picture experts group, MPEG)-1, MPEG-2, MPEG-3, and MPEG-4.</p><p id="p-0102" num="0101">The NPU is a neural-network (neural-network, NN) computing processor, quickly processes input information by referring to a structure of a biological neural network, for example, by referring to a transfer mode between human brain neurons, and may further continuously perform self-learning. Applications such as intelligent cognition of the electronic device <b>100</b>, for example, image recognition, facial recognition, speech recognition, and text understanding, can be implemented through the NPU.</p><p id="p-0103" num="0102">The external memory interface <b>120</b> may be configured to connect to an external memory card, for example, a micro SD card, to extend a storage capability of the electronic device <b>100</b>. The external storage card communicates with the processor <b>110</b> through the external memory interface <b>120</b>, to implement a data storage function. For example, files such as music and videos are stored in the external memory card.</p><p id="p-0104" num="0103">The internal memory <b>121</b> may be configured to store computer-executable program code, and the executable program code includes instructions. The processor <b>110</b> runs the instructions stored in the internal memory <b>121</b> to implement various function applications and data processing of the electronic device <b>100</b>. The internal memory <b>121</b> may include a program storage area and a data storage area. The program storage area may store an operating system, an application required by at least one function (for example, a voice playing function or an image playing function), and the like. The data storage area may store data (such as audio data and a phone book) created during use of the electronic device <b>100</b>, and the like. In addition, the internal memory <b>121</b> may include a high-speed random access memory, and may further include a nonvolatile memory, for example, at least one magnetic disk storage device, a flash memory device, or a universal flash storage (universal flash storage, UFS).</p><p id="p-0105" num="0104">The electronic device <b>100</b> may implement an audio function, for example, music playing and recording, through the audio module <b>170</b>, the speaker <b>170</b>A, the receiver <b>170</b>B, the microphone <b>170</b>C, the headset jack <b>170</b>D, the application processor, and the like.</p><p id="p-0106" num="0105">The audio module <b>170</b> is configured to convert digital audio information into an analog audio signal for output, and is also configured to convert analog audio input into a digital audio signal. The audio module <b>170</b> may be further configured to code and decode audio signals. In some embodiments, the audio module <b>170</b> may be disposed in the processor <b>110</b>, or some functional modules of the audio module <b>170</b> are disposed in the processor <b>110</b>.</p><p id="p-0107" num="0106">The speaker <b>170</b>A, also referred to as a &#x201c;loudspeaker&#x201d;, is configured to convert an audio electrical signal into a sound signal. The electronic device <b>100</b> may be used to listen to music or answer functional module through the speaker <b>170</b>A.</p><p id="p-0108" num="0107">The receiver <b>170</b>B, also referred to as an &#x201c;earpiece&#x201d;, is configured to convert an audio electrical signal into a sound signal. When a call is answered or speech information is received through the electronic device <b>100</b>, the receiver <b>170</b>B may be put close to a human ear to listen to a voice.</p><p id="p-0109" num="0108">The microphone <b>170</b>C, also referred to as a &#x201c;mike&#x201d; or a &#x201c;mic&#x201d;, is configured to convert a sound signal into an electrical signal. When making a call or sending speech information, a user may place the mouth of the user near the microphone <b>170</b>C to make a sound, to input a sound signal to the microphone <b>170</b>C. At least one microphone <b>170</b>C may be disposed in the electronic device <b>100</b>. In some other embodiments, two microphones <b>170</b>C may be disposed in the electronic device <b>100</b>, to collect a sound signal and further implement a noise reduction function. In some other embodiments, three, four, or more microphones <b>170</b>C may alternatively be disposed in the electronic device <b>100</b>, to collect a sound signal, implement noise reduction, and identify a sound source, to implement a directional recording function and the like.</p><p id="p-0110" num="0109">The headset jack <b>170</b>D is configured to connect to a wired headset. The headset jack <b>170</b>D may be a USB interface <b>130</b>, or may be a 3.5 mm open mobile terminal platform (open mobile terminal platform, OMTP) standard interface or a cellular telecommunications industry association of the USA (cellular telecommunications industry association of the USA, CTIA) standard interface.</p><p id="p-0111" num="0110">The voice subsystem is configured to perform digital voice signal processing, for example, voice effect enhancement and voice encoding/decoding, and may include an independent CPU or DSP, or may include a necessary hardware accelerator. The encoding herein may include voice encoding, to further compress and encode a voice signal to obtain a signal suitable for communications, for example, adaptive multi-rate audio compression (adaptive multi-rate compression, AMR) and enhanced voice service (enhanced voice service, EVS) voice signals. The encoding may further include audio encoding, to obtain an encoding format suitable for music storage or playback, for example, an mp<sup>3 </sup>format.</p><p id="p-0112" num="0111">The pressure sensor <b>180</b>A is configured to sense a pressure signal, and may convert the pressure signal into an electrical signal. In some embodiments, the pressure sensor <b>180</b>A may be disposed on the display <b>194</b>. There are a plurality of types of pressure sensors <b>180</b>A, such as a resistive pressure sensor, an inductive pressure sensor, and a capacitive pressure sensor. The capacitive pressure sensor may include at least two parallel plates made of conductive materials. When a force is applied to the pressure sensor <b>180</b>A, capacitance between electrodes changes. The electronic device <b>100</b> determines pressure intensity based on a capacitance change. When a touch operation is applied to the display <b>194</b>, the electronic device <b>100</b> detects intensity of the touch operation based on the pressure sensor <b>180</b>A. The electronic device <b>100</b> may also calculate a touch location based on a detection signal of the pressure sensor <b>180</b>A. In some embodiments, touch operations that are performed at a same touch location but have different touch operation intensity may correspond to different operation instructions. For example, when a touch operation whose touch operation strength is less than a first pressure threshold is performed on an SMS message application icon, an instruction for viewing an SMS message is executed, or when a touch operation whose touch operation strength is greater than or equal to a first pressure threshold is performed on an SMS message application icon, an instruction for creating an SMS message is executed.</p><p id="p-0113" num="0112">The gyro sensor <b>180</b>B may be configured to determine a motion posture of the electronic device <b>100</b>. In some embodiments, an angular velocity of the electronic device <b>100</b> around three axes (namely, axes x, y, and z) may be determined by using the gyro sensor <b>180</b>B. The gyro sensor <b>180</b>B may be configured to implement image stabilization during photographing. For example, when the shutter is pressed, the gyro sensor <b>180</b>B detects an angle at which the electronic device <b>100</b> shakes, calculates, based on the angle, a distance for which a lens module needs to compensate, and allows the lens to eliminate the shake of the electronic device <b>100</b> through reverse motion, to implement image stabilization. The gyro sensor <b>180</b>B may also be used in navigation and motion sensing game scenarios.</p><p id="p-0114" num="0113">The barometric pressure sensor <b>180</b>C is configured to measure barometric pressure. In some embodiments, the electronic device <b>100</b> calculates an altitude based on a barometric pressure value measured by the barometric pressure sensor <b>180</b>C, to assist in positioning and navigation.</p><p id="p-0115" num="0114">The magnetic sensor <b>180</b>D includes a Hall sensor. The electronic device <b>100</b> may detect opening and closing of a flip cover by using the magnetic sensor <b>180</b>D. In some embodiments, when the electronic device <b>100</b> is a flip phone, the electronic device <b>100</b> may detect opening and closing of a flip cover based on the magnetic sensor <b>180</b>D. Further, a feature such as automatic unlocking upon opening of the flip cover is set based on a detected opening or closing state of the leather case or a detected opening or closing state of the flip cover.</p><p id="p-0116" num="0115">The acceleration sensor <b>180</b>E may detect accelerations in various directions (usually on three axes) of the electronic device <b>100</b>. When the electronic device <b>100</b> is still, magnitude and a direction of gravity may be detected. The acceleration sensor <b>180</b>E may be further configured to recognize a posture of the electronic device, and is used in screen switching between a landscape mode and a portrait mode, a pedometer, or another application.</p><p id="p-0117" num="0116">The distance sensor <b>180</b>F is configured to measure a distance. The electronic device <b>100</b> may measure the distance in an infrared manner or a laser manner. In some embodiments, in a photographing scenario, the electronic device <b>100</b> may measure a distance by using the distance sensor <b>180</b>F, to implement quick focusing.</p><p id="p-0118" num="0117">The optical proximity sensor <b>180</b>G may include a light-emitting diode (LED) and an optical detector, for example, a photodiode. The light-emitting diode may be an infrared light-emitting diode. The electronic device <b>100</b> emits infrared light by using the light-emitting diode. The electronic device <b>100</b> detects infrared reflected light from a nearby object by using the photodiode. When sufficient reflected light is detected, the electronic device <b>100</b> may determine that there is an object near the electronic device <b>100</b>. When insufficient reflected light is detected, the electronic device <b>100</b> may determine that there is no object near the electronic device <b>100</b>. The electronic device <b>100</b> may detect, by using the optical proximity sensor <b>180</b>G, that the user holds the electronic device <b>100</b> close to an ear for a call, to automatically turn off a screen for power saving. The optical proximity sensor <b>180</b>G may also be configured to automatically unlock and lock a screen in a flip cover mode and a pocket mode.</p><p id="p-0119" num="0118">The ambient light sensor <b>180</b>L is configured to sense ambient light brightness. The electronic device <b>100</b> may adaptively adjust brightness of the display <b>194</b> based on the sensed ambient light brightness. The ambient light sensor <b>180</b>L may also be configured to automatically adjust white balance during photographing. The ambient light sensor <b>180</b>L may also cooperate with the optical proximity sensor <b>180</b>G to detect whether the electronic device <b>100</b> is in a pocket, to avoid an accidental touch.</p><p id="p-0120" num="0119">The fingerprint sensor <b>180</b>H is configured to collect a fingerprint. The electronic device <b>100</b> may use a feature of the collected fingerprint to implement fingerprint-based unlocking, application access locking, fingerprint-based photographing, fingerprint-based call answering, and the like.</p><p id="p-0121" num="0120">The temperature sensor <b>180</b>J is configured to detect a temperature. In some embodiments, the electronic device <b>100</b> executes a temperature processing policy based on the temperature detected by the temperature sensor <b>1803</b>. For example, when the temperature reported by the temperature sensor <b>180</b>J exceeds a threshold, the electronic device <b>100</b> lowers performance of a processor close to the temperature sensor <b>180</b>J, to reduce power consumption and implement thermal protection. In some other embodiments, when the temperature is less than another threshold, the electronic device <b>100</b> heats the battery <b>142</b> to prevent the electronic device <b>100</b> from being shut down abnormally due to a low temperature. In some other embodiments, when the temperature is less than still another threshold, the electronic device <b>100</b> boosts an output voltage of the battery <b>142</b> to avoid abnormal shutdown due to a low temperature.</p><p id="p-0122" num="0121">The touch sensor <b>180</b>K is also referred to as a &#x201c;touch panel&#x201d;. The touch sensor <b>180</b>K may be disposed on the display <b>194</b>, and the touch sensor <b>180</b>K and the display <b>194</b> form a touchscreen, which is also referred to as a &#x201c;touch screen&#x201d;. The touch sensor <b>180</b>K is configured to detect a touch operation on or near the touch sensor <b>180</b>K. The touch sensor may transfer the detected touch operation to the application processor, to determine a type of a touch event. A visual output related to the touch operation may be provided through the display <b>194</b>. In some other embodiments, the touch sensor <b>180</b>K may alternatively be disposed on a surface of the electronic device <b>100</b> at a location different from a location of the display <b>194</b>.</p><p id="p-0123" num="0122">The bone conduction sensor <b>180</b>M may obtain a vibration signal. In some embodiments, the bone conduction sensor <b>180</b>M may obtain a vibration signal of a vibration bone of a human vocal-cord part. The bone conduction sensor <b>180</b>M may also be in contact with a human pulse to receive a blood pressure beating signal. In some embodiments, the bone conduction sensor <b>180</b>M may alternatively be disposed in a headset to form a bone conduction headset. The audio module <b>170</b> may parse out a voice signal based on the vibration signal of the vibration bone of the vocal-cord part that is obtained by the bone conduction sensor <b>180</b>M, to implement a voice function. The application processor may parse heart rate information based on the blood pressure beating signal obtained by the bone conduction sensor <b>180</b>M, to implement a heart rate detection function.</p><p id="p-0124" num="0123">The sensor subsystem is connected to a sensor, and includes a processor for processing sensor data. The processor may be a CPU or a DSP, and is configured to collect, classify, identify, and process the sensor data. Optionally, the sensor subsystem may share a same processor with the voice subsystem. For example, one DSP may be used to process a sensor signal and a voice signal.</p><p id="p-0125" num="0124">The SE is configured to process confidential information, for example, run bank card payment software or perform identity authentication, and has an independent memory and processor (different from a main CPU) inside.</p><p id="p-0126" num="0125">The button <b>190</b> includes a power button, a volume button, and the like. The button <b>190</b> may be a mechanical button, or may be a touch button. The electronic device <b>100</b> may receive a button input, and generate a button signal input related to user settings and function control of the electronic device <b>100</b>.</p><p id="p-0127" num="0126">The motor <b>191</b> may generate a vibration prompt. The motor <b>191</b> may be configured to produce an incoming call vibration prompt and a touch vibration feedback. For example, touch operations performed on different applications (for example, a photographing application and an audio playing application) may correspond to different vibration feedback effects. The motor <b>191</b> may also correspond to different vibration feedback effects for touch operations performed on different areas of the display <b>194</b>. Different application scenarios (for example, time reminding, information receiving, an alarm clock, and a game) may also correspond to different vibration feedback effects. A touch vibration feedback effect may further be customized.</p><p id="p-0128" num="0127">The indicator <b>192</b> may be an indicator light, and may be configured to indicate a charging status and a power change, or may be configured to indicate a message, a missed call, a notification, and the like.</p><p id="p-0129" num="0128">The SIM card interface <b>195</b> is configured to connect to a SIM card. The SIM card may be inserted into the SIM card interface <b>195</b> or removed from the SIM card interface <b>195</b>, to implement contact with or separation from the electronic device <b>100</b>.</p><p id="p-0130" num="0129">It may be understood that the structure shown in this embodiment of this application does not constitute a specific limitation on the electronic device <b>100</b>. In some other embodiments of this application, the electronic device <b>100</b> may include more or fewer components than those shown in the figure, some components may be combined, or some components may be split, or different component arrangements may be used. The components shown in the figure may be implemented by hardware, software, or a combination of software and hardware.</p><p id="p-0131" num="0130">In this embodiment of this application, as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the processor <b>110</b> may include a plurality of graphics processing subsystems with different performance, power consumption, and energy efficiency. The electronic device <b>100</b> may use, based on complexity (or a display task magnitude) of a to-be-displayed GUI, a graphics processing subsystem whose performance and power consumption match the complexity of the GUI. For example, for a high-complexity GUI, the electronic device <b>100</b> may use a graphics processing subsystem with high performance and high power consumption to perform processing; and for a low-complexity GUI, the electronic device <b>100</b> may use a graphics processing subsystem with low performance and low power consumption to perform processing, instead of using the graphics processing subsystem with high performance and high power consumption to perform processing. In other words, the processor <b>110</b> may balance display processing performance and power consumption of different to-be-displayed GUIs, to implement optimal energy efficiency for the different to-be-displayed GUIs. This processing manner can improve overall energy efficiency (or referred to as average energy efficiency) of the plurality of graphics processing subsystems in the electronic device <b>100</b>, improve energy efficiency of the electronic device <b>100</b> for graphics display processing, and reduce overall power consumption of the electronic device <b>100</b>.</p><p id="p-0132" num="0131">For example, <figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic diagram of a structure of the plurality of graphics processing subsystems in the processor <b>110</b>. The processor <b>110</b> includes a graphics processing subsystem 1, a graphics processing subsystem 2, a graphics processing subsystem n, and the like. Different graphics processing subsystems include application processors, graphics processing units, and basic systems that have different performance and power consumption. For example, performance and power consumption of the graphics processing subsystem 1 and internal components thereof are relatively high, and performance and power consumption of the graphics processing subsystem 2 and internal components thereof are relatively low. For example, a graphics processing unit in a high-performance graphics processing subsystem may be a GPU, and a graphics processing unit in a low-performance graphics processing subsystem may be a hardware graphics rendering unit, a graphics accelerator, or the like.</p><p id="p-0133" num="0132">In a graphics processing subsystem with relatively high performance, a display controller may be further configured to cooperate with a graphics processing unit to perform display control. Caches (cache) (for example, L2 caches) or the like may be further configured for an application processor and the graphics processing unit. A high-speed bus and a low-speed bus have different data transmission rates, and correspond to different dominant frequencies, different performance and power consumption of dominant frequency clocks, and different power consumption of power supplies. In addition, the high-performance graphics processing subsystem 1 is provided with a high-speed memory, which may be, for example, a low power double data rate 4 (low power double data rate 4, LPDDR4x) or a double data rate synchronous dynamic random access memory (double data rate synchronous dynamic random access memory, DDR SDRAM). The low-performance graphics processing subsystem 2 is provided with a low-speed memory, which may be, for example, a built-in random access memory (random access memory, RAM), a static random access memory (static random access memory, SRAM), or a pseudo static random access memory (pseudo static random access memory, PSRAM).</p><p id="p-0134" num="0133">For example, for related parameters of the application processors and the graphics processing units in the different graphics processing subsystems, refer to Table 1.</p><p id="p-0135" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="287pt" align="center"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Parameter</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="9"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="42pt" align="center"/><colspec colname="3" colwidth="42pt" align="center"/><colspec colname="4" colwidth="35pt" align="center"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="35pt" align="center"/><colspec colname="7" colwidth="28pt" align="center"/><colspec colname="8" colwidth="35pt" align="center"/><colspec colname="9" colwidth="35pt" align="center"/><tbody valign="top"><row><entry/><entry/><entry/><entry/><entry>Dominant</entry><entry/><entry/><entry/><entry/></row><row><entry/><entry/><entry>Dominant</entry><entry/><entry>frequency</entry><entry>Dominant</entry><entry/><entry/><entry/></row><row><entry/><entry/><entry>frequency</entry><entry/><entry>of the</entry><entry>frequency</entry><entry>Bit</entry><entry/><entry/></row><row><entry/><entry/><entry>of the</entry><entry>Graphics</entry><entry>graphics</entry><entry>of a</entry><entry>width of</entry><entry/><entry>Bandwidth</entry></row><row><entry/><entry>Application</entry><entry>application</entry><entry>processing</entry><entry>processing</entry><entry>memory</entry><entry>a</entry><entry/><entry>of the</entry></row><row><entry>System </entry><entry>processor</entry><entry>processor</entry><entry>unit</entry><entry>unit</entry><entry>bus</entry><entry>memory</entry><entry>Memory</entry><entry>memory</entry></row><row><entry namest="1" nameend="9" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="10"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="42pt" align="center"/><colspec colname="3" colwidth="21pt" align="right"/><colspec colname="4" colwidth="21pt" align="left"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="35pt" align="center"/><colspec colname="7" colwidth="35pt" align="center"/><colspec colname="8" colwidth="28pt" align="center"/><colspec colname="9" colwidth="35pt" align="center"/><colspec colname="10" colwidth="35pt" align="center"/><tbody valign="top"><row><entry>Graphics</entry><entry>Ctx-A53</entry><entry>1.7 </entry><entry>GHz</entry><entry>MailG51</entry><entry>800 MHz</entry><entry>1666</entry><entry>64 bits</entry><entry>LPDDR</entry><entry>&#x2009;13 GBps</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="9"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="42pt" align="center"/><colspec colname="3" colwidth="42pt" align="left"/><colspec colname="4" colwidth="35pt" align="center"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="35pt" align="center"/><colspec colname="7" colwidth="28pt" align="center"/><colspec colname="8" colwidth="35pt" align="center"/><colspec colname="9" colwidth="35pt" align="center"/><tbody valign="top"><row><entry>processing</entry><entry/><entry/><entry/><entry/><entry>MHz</entry><entry/><entry>4&#xd7;</entry><entry/></row><row><entry>subsystem</entry><entry/><entry/><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>1</entry><entry/><entry/><entry/><entry/><entry/><entry/><entry/><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="10"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="42pt" align="center"/><colspec colname="3" colwidth="21pt" align="right"/><colspec colname="4" colwidth="21pt" align="left"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="35pt" align="center"/><colspec colname="7" colwidth="35pt" align="center"/><colspec colname="8" colwidth="28pt" align="center"/><colspec colname="9" colwidth="35pt" align="center"/><colspec colname="10" colwidth="35pt" align="center"/><tbody valign="top"><row><entry>Graphics</entry><entry>M33</entry><entry>200 </entry><entry>MHz</entry><entry>MailT650</entry><entry>400 MHz</entry><entry>400 MHz</entry><entry>64 bits</entry><entry>RAM/</entry><entry>3.2 GBps</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="9"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="42pt" align="center"/><colspec colname="3" colwidth="42pt" align="left"/><colspec colname="4" colwidth="35pt" align="center"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="35pt" align="center"/><colspec colname="7" colwidth="28pt" align="center"/><colspec colname="8" colwidth="35pt" align="center"/><colspec colname="9" colwidth="35pt" align="center"/><tbody valign="top"><row><entry>processing</entry><entry/><entry/><entry/><entry/><entry/><entry/><entry>SRAM/</entry><entry/></row><row><entry>subsystem</entry><entry/><entry/><entry/><entry/><entry/><entry/><entry>PSRAM</entry><entry/></row><row><entry>2</entry><entry/><entry/><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="10"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="42pt" align="center"/><colspec colname="3" colwidth="21pt" align="right"/><colspec colname="4" colwidth="21pt" align="left"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="35pt" align="center"/><colspec colname="7" colwidth="35pt" align="center"/><colspec colname="8" colwidth="28pt" align="center"/><colspec colname="9" colwidth="35pt" align="center"/><colspec colname="10" colwidth="35pt" align="center"/><tbody valign="top"><row><entry>Graphics</entry><entry>M33</entry><entry>96 </entry><entry>MHz</entry><entry>Hardware</entry><entry>200 MHz</entry><entry>200 MHz</entry><entry>32 bits</entry><entry>PSRAM/</entry><entry>0.8 GBps</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="9"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="42pt" align="center"/><colspec colname="3" colwidth="42pt" align="center"/><colspec colname="4" colwidth="35pt" align="center"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="35pt" align="center"/><colspec colname="7" colwidth="28pt" align="center"/><colspec colname="8" colwidth="35pt" align="center"/><colspec colname="9" colwidth="35pt" align="center"/><tbody valign="top"><row><entry>processing</entry><entry/><entry/><entry>graphics</entry><entry/><entry/><entry/><entry>DRAM</entry><entry/></row><row><entry>subsystem</entry><entry/><entry/><entry>rendering</entry><entry/><entry/><entry/><entry/><entry/></row><row><entry>n</entry><entry/><entry/><entry>unit such</entry><entry/><entry/><entry/><entry/><entry/></row><row><entry/><entry/><entry/><entry>as</entry><entry/><entry/><entry/><entry/><entry/></row><row><entry/><entry/><entry/><entry>DMA2D</entry></row><row><entry namest="1" nameend="9" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0136" num="0134">For a connection relationship between the graphics processing subsystem and another component of the electronic device <b>100</b>, refer to <figref idref="DRAWINGS">FIG. <b>5</b></figref>. As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the electronic device <b>100</b> may further include an interaction component, configured to perform an interaction operation between a user and the electronic device <b>100</b>. For example, the interaction component may include a touchscreen component, a button component, a voice component, or the like. The interaction component may be connected to the different graphics processing subsystems through switching via a switch (for example, a single pole double throw (single pole double throw, SPDT) switch) or another logic switching circuit. Information may be exchanged between the touchscreen component and the SPDT switch or the another logic switching circuit, and between the SPDT switch or the another logic switching circuit and the graphics processing subsystem through a touchscreen data interface (for example, an I2C interface).</p><p id="p-0137" num="0135">In some other embodiments, the electronic device <b>100</b> may use software rather than the SPDT switch or the another logic switching circuit to control the interaction component to be connected to the different graphics processing subsystems through switching.</p><p id="p-0138" num="0136">As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the electronic device <b>100</b> may further include a display component. The display component includes a screen configured to display a GUI. In some technical solutions, the display component may be connected to the different graphics processing subsystems through switching via an SPDT switch or another logic switching circuit. Information may be exchanged between the SPDT switch or the another logic switching circuit and the graphics processing subsystem, or between the SPDT switch or the another logic switching circuit and the display component through a display interface (for example, an MIPI-DSI interface or a QSPI interface). In some other technical solutions, the display component may keep connected to each graphics processing subsystem.</p><p id="p-0139" num="0137">As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the different graphics processing subsystems are connected through a bus, so that the different graphics processing subsystems exchange information such as a graphics processing subsystem switching notification. In this way, the electronic device <b>100</b> may switch to use the different graphics processing subsystems to display GUIs with different complexity.</p><p id="p-0140" num="0138">In this embodiment of this application, the electronic device <b>100</b> includes an input component. The input component may include the foregoing interaction component, and may further include a trigger component such as a sensor, a wireless connection component, or a camera. For example, the sensor may include an action sensor, an acceleration sensor, or a barometric pressure sensor. The wireless connection component may include a short-range wireless communications module, for example, a Bluetooth module, an NFC module, a Zigbee module, an infrared communications module, or a Wi-Fi module.</p><p id="p-0141" num="0139">In some embodiments of this application, the interaction component may be connected to a currently used graphics processing subsystem. The trigger component may be connected to a specific graphics processing subsystem. The sensor and the wireless connection component in the trigger component may be connected to a graphics processing subsystem with low power consumption by default. The camera in the trigger component may be configured to capture an image, and may be connected to a graphics processing subsystem with high power consumption by default.</p><p id="p-0142" num="0140">For example, the electronic device <b>100</b> includes a graphics processing subsystem 1 and a graphics processing subsystem 2. <figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram of a control procedure of a data processing method according to an embodiment of this application. An interaction component in an input component may be specifically connected to an application processor 1 in the graphics processing subsystem 1 that is currently used. A trigger component in the input component may be connected to an application processor (for example, an application processor 2) in a specific graphics processing subsystem (for example, the graphics processing subsystem 2). A display component may include a screen and a data stream display control unit. The screen may be connected to the application processor 1 that is currently used. The data stream display control unit may be connected to the application processor 1 and a first graphics processing unit in the graphics processing subsystem 1.</p><p id="p-0143" num="0141">In the control procedure shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, after detecting an input operation, the interaction component in the input component reports the input operation to the application processor in the currently used graphics processing subsystem. After detecting an input operation, the trigger component in the input component reports the input operation to the specific application processor in the specific graphics processing subsystem that is connected to the trigger component. If the specific graphics processing subsystem is different from the graphics processing subsystem 1 that is currently used, the specific application processor notifies the application processor 1 of the input operation.</p><p id="p-0144" num="0142">If the application processor 1 determines, based on the input operation, that graphics processing subsystem switching does not need to be performed, the application processor 1 performs processing such as rendering on a to-be-displayed GUI by using the graphics processing unit 1. The display component periodically sends a display request signal based on a preset display period. The display request signal reaches the graphics processing unit 1 through the application processor 1. The graphics processing unit 1 sends image data of the rendered to-be-displayed GUI to the screen for display.</p><p id="p-0145" num="0143">If the application processor 1 determines, based on the input operation, that switching to the graphics processing subsystem 2 needs to be performed, the application processor 1 releases a connection to the interaction component, controls the data stream control unit to release a connection to the display component, and notifies the application processor 2 to perform graphics processing subsystem switching. The application processor 2 establishes a connection to the interaction component, and controls the data stream control unit to establish a connection between the graphics processing subsystem 2 and the display component. The application processor 2 performs processing such as rendering on the to-be-displayed GUI by using a graphics processing unit 2 in the graphics processing subsystem 2. The display component periodically sends a display request signal based on the preset display period. The display request signal reaches the graphics processing unit 2 through the application processor 2. The graphics processing unit 2 sends image data of the rendered to-be-displayed GUI to the screen for display.</p><p id="p-0146" num="0144">The following describes an energy-efficient display processing method provided in an embodiment of this application by using an example in which an electronic device is a smartwatch having the structure shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> to <figref idref="DRAWINGS">FIG. <b>5</b></figref> and the smartwatch includes a high-performance graphics processing subsystem 1 and a low-performance graphics processing subsystem 2.</p><p id="p-0147" num="0145">The smartwatch may have a plurality of functions. For example, the smartwatch may have a plurality of functions such as displaying time, answering/making calls, reminding through an alarm clock, performing translation, taking photos, recording videos, playing music, playing videos, synchronizing messages received/sent by a mobile phone through Bluetooth, recording exercise, performing navigation, serving as a compass, monitoring sleep, monitoring a heart rate, making an emergency call, or serving as a pedometer. The smartwatch may implement these functions by using a system application supported by a system of the smartwatch or by using a third-party application.</p><p id="p-0148" num="0146">In some embodiments of this application, after an input component of the smartwatch detects an input operation, an application processor in a currently used graphics processing subsystem may be triggered to determine whether to perform graphics processing subsystem switching. As described above, after an interaction component in the input component detects an input operation, the interaction component in the input component may report the input operation to a currently used application processor; or a trigger component in the input component reports the input operation to a connected specific application processor, and then the specific application processor notifies a currently used application processor of the input operation. After learning of the input operation, the currently used application processor may determine, based on complexity of a to-be-displayed GUI, whether to perform graphics processing subsystem switching.</p><p id="p-0149" num="0147">Therefore, the smartwatch can adaptively switch, in response to triggering of the input operation, to a graphics processing subsystem whose performance and power consumption match the complexity of the to-be-displayed GUI. For example, higher complexity of the to-be-displayed GUI indicates higher performance and power consumption of a graphics processing subsystem that the smartwatch switches to; and lower complexity of the to-be-displayed GUI indicates lower performance and power consumption of a graphics processing subsystem that the smartwatch switches to. In this way, unlike that in the conventional technology, the smartwatch does not need to always use a same GPU with high performance and high power consumption to display all GUIs.</p><p id="p-0150" num="0148">In other words, the electronic device may balance display processing performance and power consumption of different to-be-displayed GUIs, to implement optimal energy efficiency for the different to-be-displayed GUIs. Therefore, in the solution provided in this embodiment of this application, graphics processing subsystems with different performance and power consumption may be switched to in real time based on complexity of to-be-displayed GUIs. This reduces overall power consumption of a plurality of graphics processing subsystems, improves overall energy efficiency (or referred to as average energy efficiency) of the plurality of graphics processing subsystems, reduces overall power consumption of the smartwatch, and improves overall energy efficiency of the smartwatch.</p><p id="p-0151" num="0149">Complexity of to-be-displayed GUIs corresponding to different operating scenarios of the smartwatch is different. In some embodiments of this application, a first correspondence is preset in an application processor of each graphics processing subsystem. For example, the first correspondence may be set in a task list in a memory of each application processor. The first correspondence is used to indicate a correspondence between a target graphics processing subsystem and both an operating scenario and an input operation.</p><p id="p-0152" num="0150">In the first correspondence, complexity of a to-be-displayed GUI corresponding to an operating scenario and an input operation matches performance and power consumption of a corresponding target graphics processing subsystem. That is, higher complexity of the to-be-displayed GUI corresponding to the operating scenario and the input operation in the first correspondence indicates higher performance and power consumption of the corresponding target graphics processing subsystem in the first correspondence. Lower complexity of the to-be-displayed GUI corresponding to the operating scenario and the input operation in the first correspondence indicates lower performance and power consumption of the corresponding target graphics processing subsystem in the first correspondence.</p><p id="p-0153" num="0151">In this way, the smartwatch may adaptively switch, based on the first correspondence, to use the target graphics processing subsystem whose performance and power consumption match the complexity of the to-be-displayed GUI. In other words, the smartwatch may switch, in real time based on complexity of to-be-displayed GUIs, to use graphics processing subsystems with different performance and power consumption. This reduces overall power consumption of a plurality of graphics processing subsystems and overall power consumption of the smartwatch, and improves overall energy efficiency of the plurality of graphics processing subsystems and overall energy efficiency of the smartwatch.</p><p id="p-0154" num="0152">In some embodiments, a current operating scenario of the smartwatch may be represented by using a currently displayed interface, and the first correspondence may be a correspondence between a target graphics processing subsystem and both a display interface and an input operation. After the input component detects a current first input operation, a currently used application processor is triggered to determine, based on the first correspondence, a target graphics processing subsystem corresponding to a current first display interface and the current first input operation.</p><p id="p-0155" num="0153">If the target graphics processing subsystem is different from the currently used graphics processing subsystem, the currently used application processor determines to switch to the target graphics processing subsystem. Alternatively, if the target graphics processing subsystem is the same as the currently used graphics processing subsystem, the currently used application processor determines not to perform graphics processing subsystem switching, and continues to use the current graphics processing subsystem to perform processing such as rendering on the to-be-displayed GUI.</p><p id="p-0156" num="0154">In this solution, a graphics processing subsystem can be adaptively switched to in real time based on the complexity of the to-be-displayed GUI corresponding to the currently displayed interface and the input operation, so that the complexity of the to-be-displayed GUI can match in real time performance and power consumption of the graphics processing subsystem that is switched to. This can reduce overall power consumption of the graphics processing subsystem and the smartwatch, and improve energy efficiency of the graphics processing subsystem and the smartwatch.</p><p id="p-0157" num="0155">For example, for the first correspondence preset in each application processor, refer to Table 2.</p><p id="p-0158" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="210pt" align="center"/><colspec colname="2" colwidth="56pt" align="center"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>First correspondence</entry><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="70pt" align="center"/><colspec colname="2" colwidth="77pt" align="center"/><colspec colname="3" colwidth="63pt" align="center"/><colspec colname="4" colwidth="56pt" align="center"/><tbody valign="top"><row><entry/><entry/><entry>Target graphics</entry><entry>To-be-displayed</entry></row><row><entry>Displayed interface</entry><entry>Input operation</entry><entry>processing subsystem</entry><entry>GUI</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>No interface displayed</entry><entry>Operation of pressing a</entry><entry>Graphics processing</entry><entry>3D watch face</entry></row><row><entry>in a power-off state</entry><entry>power button</entry><entry>subsystem 1</entry><entry>interface</entry></row><row><entry>3D watch face</entry><entry>Touch and hold operation</entry><entry>Graphics processing</entry><entry>2D watch face</entry></row><row><entry>interface</entry><entry>on a screen</entry><entry>subsystem 2</entry><entry>interface</entry></row><row><entry>2D watch face</entry><entry>Touch and hold operation</entry><entry>Graphics processing</entry><entry>3D watch face</entry></row><row><entry>interface</entry><entry>on the screen</entry><entry>subsystem 1</entry><entry>interface</entry></row><row><entry>No interface displayed</entry><entry>Operation of raising wrist</entry><entry>Graphics processing</entry><entry>2D watch face</entry></row><row><entry>while the screen is off</entry><entry/><entry>subsystem 2</entry><entry>interface</entry></row><row><entry>after power-on</entry><entry/><entry/><entry/></row><row><entry>2D watch face</entry><entry>Operation of a voice</entry><entry>Graphics processing</entry><entry>3D watch face</entry></row><row><entry>interface</entry><entry>indication to display a 3D</entry><entry>subsystem 1</entry><entry>interface</entry></row><row><entry/><entry>watch face</entry><entry/><entry/></row><row><entry>2D watch face</entry><entry>Swipe operation on the</entry><entry>Graphics processing</entry><entry>Application list</entry></row><row><entry>interface</entry><entry>screen</entry><entry>subsystem 2</entry><entry>interface</entry></row><row><entry>Application list</entry><entry>Operation of tapping a</entry><entry>Graphics processing</entry><entry>Payment process</entry></row><row><entry>interface</entry><entry>payment icon</entry><entry>subsystem 1</entry><entry>interface</entry></row><row><entry>Application list</entry><entry>Operation of tapping a</entry><entry>Graphics processing</entry><entry>Music playback</entry></row><row><entry>interface</entry><entry>music icon</entry><entry>subsystem 1</entry><entry>screen</entry></row><row><entry>Application list</entry><entry>Operation of tapping a</entry><entry>Graphics processing</entry><entry>Game interface</entry></row><row><entry>interface</entry><entry>game icon</entry><entry>subsystem 1</entry><entry/></row><row><entry>Game interface</entry><entry>Operation for exiting a</entry><entry>Graphics processing</entry><entry>Application list</entry></row><row><entry/><entry>game application</entry><entry>subsystem 2</entry><entry>interface</entry></row><row><entry>Monitoring</entry><entry>Operation for establishing</entry><entry>Graphics processing</entry><entry>Monitoring</entry></row><row><entry>application interface</entry><entry>a wireless connection to</entry><entry>subsystem 1</entry><entry>image</entry></row><row><entry/><entry>an intelligent surveillance</entry><entry/><entry/></row><row><entry/><entry>camera in the LAN</entry><entry/><entry/></row><row><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0159" num="0156">The following describes the first correspondence shown in Table 2 by using an example.</p><p id="p-0160" num="0157">For example, the smartwatch does not display an interface in a power-off state. For example, for a schematic diagram of the smartwatch in a power-off state, refer to (a) in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. To improve visual experience of a user, as shown in (b) in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, a cool startup animation may be displayed in a startup process. A GUI corresponding to the startup animation is relatively complex, and needs to be processed by the graphics processing subsystem 1 with high performance and high power consumption. In some embodiments, the smartwatch uses the high-performance graphics processing subsystem 1 to perform display processing by default in the startup process. A display component and an interaction component are connected to the graphics processing subsystem 1 by default. After detecting an operation of pressing a power button by the user, a button component in the interaction component reports the operation to an application processor 1 in the high-performance graphics processing subsystem 1. The application processor 1 controls the graphics processing unit 1 to perform processing such as rendering on the GUI in the startup process, and then sends image data of the generated GUI to the screen for display. The screen may be a display, or may be a touchscreen combined by a display and a touch sensor.</p><p id="p-0161" num="0158">After the startup is completed, the to-be-displayed GUI may be a preset interface, for example, a simple GUI such as an operation guide animation after the first startup, a watch face interface, a digital time display interface, or an application list interface.</p><p id="p-0162" num="0159">An example in which the to-be-displayed GUI is a complex operation guide animation after the startup is completed (for example, the smartwatch is powered on for the first time) is used for description. After the startup is completed, the application processor 1 does not detect an input operation used to trigger graphics processing subsystem switching. Therefore, the application processor 1 may continue to control the current graphics processing subsystem 1 to perform processing such as rendering on the to-be-displayed operation guide animation, and control the screen to display a GUI corresponding to the operation guide animation. For example, for the GUI corresponding to the operation guide animation, refer to (c) in <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0163" num="0160">An example in which the to-be-displayed GUI is a watch face interface after the startup is completed (for example, the smartwatch is not powered on for the first time) is used for description. After the startup is completed, the application processor 1 does not detect an input operation used to trigger graphics processing subsystem switching. Therefore, the application processor 1 may continue to control the current graphics processing subsystem 1 to perform processing such as rendering on the to-be-displayed watch face interface, and control the screen to display the watch face interface.</p><p id="p-0164" num="0161">An example in which the smartwatch displays a 3D watch face interface with light and shadow rendering shown in (d) in <figref idref="DRAWINGS">FIG. <b>7</b></figref> after the startup is completed is used for description. Refer to (a) and (b) in <figref idref="DRAWINGS">FIG. <b>8</b></figref>. After displaying the 3D watch face interface, the smartwatch may switch the 3D watch face interface to a 2D watch face interface in response to an operation of the user. For a switching procedure, refer to <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>. As shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, after the screen of the smartwatch displays the 3D watch face interface, if a touchscreen component detects a touch and hold operation performed by the user on the 3D watch face interface, the touchscreen component reports the touch and hold operation to the application processor 1. As shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, the application processor 1 determines, based on the first correspondence, the 3D watch face interface that is currently displayed, and the touch and hold operation on the 3D watch face interface, that the target graphics processing subsystem is the graphics processing subsystem 2, the to-be-displayed GUI is a simple 2D watch face interface, and graphics processing subsystem switching needs to be performed. Therefore, as shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, the application processor 1 may send a switching notification to an application processor 2, to indicate to switch to the graphics processing subsystem 2 for display processing.</p><p id="p-0165" num="0162">In a graphics processing subsystem switching process, it takes a period of time to complete the graphics processing subsystem switching, and only after the graphics processing subsystem switching is completed, the to-be-displayed GUI may be displayed. Therefore, after determining, based on the first correspondence, that the target graphics processing subsystem is the graphics processing subsystem 2 with low power consumption, the application processor 1 may control the graphics processing unit 1 to render a transition interface in the graphics processing subsystem switching process, as shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>. The graphics processing unit 1 may send rendered image data to the screen for display. In other words, in the switching process before the to-be-displayed GUI is displayed, the smartwatch may display the transition interface on the screen. For example, for the transition interface, refer to (c) and (d) in <figref idref="DRAWINGS">FIG. <b>8</b></figref>. The transition interface may continuously provide interface display for the user in the graphics processing subsystem switching process, to avoid a phenomenon such as interruption, a black screen, or screen flickering on an interface viewed by the user, and improve visual experience of the user.</p><p id="p-0166" num="0163">The transition interface may be a preset interface, or may be an interface randomly selected from a plurality of preset interfaces, or may be a plurality of interfaces corresponding to a scale animation of a current interface. Transition interfaces corresponding to different current interfaces may be the same or may be different. Alternatively, transition interfaces corresponding to different to-be-displayed interfaces may be the same or may be different. For example, the transition interface may be a plurality of interfaces corresponding to a scale animation showing that a currently displayed interface is gradually scaled down to disappear, for example, the currently displayed interface may be scaled down to a lower right corner to disappear or scaled down to the center of the screen to disappear. In this way, the transition interface can provide continuous and dynamic visual experience for the user in the graphics processing subsystem switching process. After the to-be-displayed GUI is prepared, the smartwatch may stop displaying the transition interface, and display the prepared GUI on the screen.</p><p id="p-0167" num="0164">After the smartwatch displays the transition interface, as shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, the application processor 1 may disconnect the graphics processing subsystem 1 from the display component. In some embodiments, as shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, after determining, based on the first correspondence, that the target graphics processing subsystem is the graphics processing subsystem 2, the application processor 1 may further release a connection to the interaction component. In some embodiments, after the graphics processing subsystem 2 is switched to, as shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, the graphics processing subsystem 1 may enter a sleep state.</p><p id="p-0168" num="0165">After receiving the switching notification from the application processor 1, the application processor 2 takes over a subsequent process of the smartwatch. As shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, the application processor 2 connects the graphics processing subsystem 2 to the display component and the interaction component.</p><p id="p-0169" num="0166">Then, as shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, the application processor 2 controls the graphics processing unit 2 to render the to-be-displayed 2D watch face interface, and the display component sends a display request signal based on a preset display period. The display request signal reaches the graphics processing unit 2 through the application processor 2. Because rendering and sending of an image frame consume a period of time, if the graphics processing unit 2 can send image data of a to-be-displayed GUI of a current frame to the display component before a next display request signal arrives, the graphics processing unit 2 may send the image data of the to-be-displayed GUI of the current frame to the display component. If the graphics processing unit 2 cannot send the image data of the to-be-displayed GUI of the current frame to the display component before the next display request signal arrives, to avoid an image data transmission error, the graphics processing unit 2 may send the image data of the to-be-displayed GUI of the current frame to the display component after the next display request signal arrives. Subsequently, the graphics processing unit 2 may send image data of a rendered GUI to the display component in each display period. The display component displays the GUI based on the image data received from the graphics processing unit 2.</p><p id="p-0170" num="0167">After the smartwatch displays the 2D watch face interface, if the user does not use the smartwatch for a long time, or the user taps a screen-off control, the smartwatch turns off the screen, and the smartwatch may stop interface display. Subsequently, after the user raises wrist, a component such as an acceleration sensor may detect an input operation of raising the wrist by the user. After the user raises the wrist, a corresponding to-be-displayed GUI may still be the 2D watch face interface. The acceleration sensor may be connected to the specific graphics processing subsystem 2. The acceleration sensor may report the operation of raising the wrist by the user to the application processor 2. The application processor 2 determines, based on the stored first correspondence, a screen-off interface, and the operation of raising the wrist by the user, that the target graphics processing subsystem is the graphics processing subsystem 2 with low power consumption, the to-be-displayed GUI is a simple GUI, and graphics processing subsystem switching does not need to be performed. Therefore, the smartwatch continues to render the to-be-displayed GUI by using the graphics processing subsystem 2 that is used before the screen is turned off, and sends image data of the rendered GUI to the screen for display.</p><p id="p-0171" num="0168">When the smartwatch displays the 2D watch face interface, if a voice component detects a wakeup keyword (for example, &#x201c;xiaoyi, xiaoyi&#x201d;) of a voice indication of the user, the voice component reports the voice indication operation to the application processor 2. The application processor 2 wakes up the high-performance graphics processing subsystem 1, to perform subsequent voice analysis by using the high-performance application processor 1 in the high-performance graphics processing subsystem 1. If the application processor 1 performs semantic analysis on the voice indication operation of the user, and determines that the user indicates, by using a voice, to display the 3D watch face interface, the application processor 1 notifies the application processor 2 of a semantic analysis result. The application processor 2 determines, based on the first correspondence, the currently displayed 2D watch face interface, and the user voice indication operation, that the target graphics processing subsystem is the high-performance graphics processing subsystem 1, the to-be-displayed GUI is a complex GUI, and graphics processing subsystem switching needs to be performed. The application processor 2 controls rendering and displaying of the transition interface. The application processor 2 notifies the application processor 1 to perform graphics processing subsystem switching.</p><p id="p-0172" num="0169">Refer to (a) and (b) in <figref idref="DRAWINGS">FIG. <b>10</b></figref>. After displaying the 2D watch face interface, the smartwatch may further display an application list interface in response to an operation of the user. The application list interface may be a static and simple GUI. For example, after the smartwatch displays the 2D watch face interface, if the touchscreen component detects an operation of swiping leftwards on the interface by the user, the operation may be reported to the application processor 2. The application processor 2 determines, based on the first correspondence, the currently displayed 2D watch face interface, and the input operation of swiping leftwards on the 2D watch face interface, that the target graphics processing subsystem is the low-performance graphics processing subsystem 2, the to-be-displayed GUI is a simple GUI, and graphics processing subsystem switching does not need to be performed. The application processor 2 controls the graphics processing unit 2 to render a to-be-displayed application list interface, and display the to-be-displayed application list interface on the screen.</p><p id="p-0173" num="0170">Refer to (a) and (b) in <figref idref="DRAWINGS">FIG. <b>11</b></figref>. After displaying the application list interface, the smartwatch may enter a payment procedure and display a payment interface in response to an operation of the user. A payment process usually involves a third-party application, or needs to interact with a device such as a server of a third-party application over a network. The third-party application may display a complex GUI or may display a simple GUI. Therefore, the smartwatch needs to provide a sufficient graphics processing capability for the third-party application by using a high-performance graphics processing subsystem, so that the third-party application can normally display an interface in the payment process based on the high-performance graphics processing subsystem provided by the smartwatch. Therefore, a to-be-displayed GUI corresponding to the payment process may be a complex GUI, and a corresponding target graphics processing subsystem is the high-performance graphics processing subsystem 1.</p><p id="p-0174" num="0171">For example, after the smartwatch displays the application list interface, if the touchscreen component detects an operation of tapping a payment icon (for example, a Huawei Pay icon) on the application list interface by the user, the input operation may be reported to the application processor 2. The application processor 2 determines the corresponding high-performance graphics processing subsystem 1 based on the first correspondence, the current application list interface, and the operation of tapping the payment icon by the user. Then, the application processor 2 controls displaying of a transition interface. The application processor 2 notifies the application processor 1 to perform graphics processing subsystem switching. The application processor 1 controls the graphics processing unit 1 to render the to-be-displayed GUI in the payment process, and sends rendered image data to the screen for display.</p><p id="p-0175" num="0172">After displaying the application list interface, the smartwatch may further display a music interface and play music in response to an operation of the user. In some embodiments, that the smartwatch plays music includes playing local music or playing online music. If to-be-played music is the local music, the to-be-displayed GUI is a locally downloaded interface. Refer to (a) to (c) in <figref idref="DRAWINGS">FIG. <b>12</b></figref>, the to-be-displayed GUI may be displayed by using the low-performance graphics processing subsystem 2. If to-be-played music is the online music, complexity of the to-be-displayed GUI cannot be determined, and the complexity of the to-be-displayed GUI may be relatively high or may be relatively low. Therefore, refer to (a), (d), and (e) in <figref idref="DRAWINGS">FIG. <b>12</b></figref>. The to-be-displayed GUI needs to be processed by using the high-performance graphics processing subsystem 1, so that when the to-be-displayed GUI is relatively complex, a sufficient display processing capability can also be provided to render the to-be-displayed GUI.</p><p id="p-0176" num="0173">In some other embodiments, in a music playing scenario, the to-be-played music may be the local music or the online music. Therefore, refer to (a) and (b) in <figref idref="DRAWINGS">FIG. <b>13</b></figref>. Based on the first correspondence, the target graphics processing subsystem corresponding to the to-be-displayed GUI in the music playing scenario is the high-performance graphics processing subsystem 1, so that when the to-be-displayed GUI is relatively complex, the to-be-displayed GUI can be rendered normally.</p><p id="p-0177" num="0174">For example, after the smartwatch displays the application list interface, if the touchscreen component detects an operation of tapping a music icon by the user on the interface, the input operation may be reported to the application processor 2. The application processor 2 determines, based on the first correspondence, the current application list interface, and the operation of tapping the music icon by the user, that the target graphics processing subsystem is the high-performance graphics processing subsystem 1. Then, the application processor 2 controls displaying of a transition interface. The application processor 2 notifies the application processor 1 to perform graphics processing subsystem switching. The application processor 1 controls the graphics processing unit 1 to render a to-be-displayed GUI in a music playing process, and sends rendered image data to the screen for display.</p><p id="p-0178" num="0175">Refer to (a) and (b) in <figref idref="DRAWINGS">FIG. <b>14</b></figref>. After displaying the application list interface, the smartwatch may enter a game application and display a game interface in response to an operation of the user. The game interface usually includes a complex GUI, and a graphics processing subsystem corresponding to the game interface is the high-performance graphics processing subsystem 1. For example, after the smartwatch displays an interface of a game icon list, if the touchscreen component detects an operation of tapping a game icon (for example, a Huawei Pay icon) on the application list interface, the input operation may be reported to the application processor 2. The application processor 2 determines the corresponding high-performance graphics processing subsystem 1 based on the first correspondence, the current application list interface, and the operation of tapping the game icon by the user. Then, the application processor 2 controls displaying of a transition interface. The application processor 2 notifies the application processor 1 to perform graphics processing subsystem switching. The application processor 1 controls the graphics processing unit 1 to render a to-be-displayed GUI in a game process, and sends rendered image data to the screen for display.</p><p id="p-0179" num="0176">In some other embodiments, the Bluetooth module in the wireless connection component of the smartwatch may keep connected to the low-performance graphics processing subsystem 2 by default. An example in which the graphics processing subsystem 2 is currently used and the screen is in a screen-off state is used for description. After the Bluetooth module detects an operation of receiving an SMS message sent by a mobile phone through Bluetooth, the operation may be reported to the application processor 2 in the graphics processing subsystem 2. The application processor 2 determines, based on the first correspondence, the SMS message receiving operation detected by the Bluetooth connection module, and the current screen-off state, that the target graphics processing subsystem is the graphics processing subsystem 2. Then, the smartwatch prompts the user with information about the SMS message, the graphics processing subsystem 2 renders an SMS message prompt interface, and the smartwatch displays the SMS message prompt interface on the screen.</p><p id="p-0180" num="0177">For another example, the Bluetooth module in the wireless connection component of the smartwatch may keep connected to the low-performance graphics processing subsystem 2 by default. An example in which the graphics processing subsystem 1 is currently used and a currently displayed interface is a game interface is used for description. After the Bluetooth module detects an operation of receiving an SMS message sent by a mobile phone through Bluetooth, the operation may be reported to the application processor 2 in the graphics processing subsystem 2. The application processor 2 reports the operation to the application processor 1 in the currently used graphics processing subsystem 1. The application processor 1 determines, based on the first correspondence, the SMS message receiving operation detected by the Bluetooth connection module, and the currently displayed game interface, that the target graphics processing subsystem is the graphics processing subsystem 1. In some technical solutions, the smartwatch continues to render the game interface by using the graphics processing subsystem 1, but does not display an SMS message prompt interface, to avoid disturbing or interrupting a game. Subsequently, after detecting an input operation performed by the user to indicate to exit a game application, the smartwatch determines, based on the first correspondence, to switch to the graphics processing subsystem 2 to render the SMS message prompt interface. The smartwatch displays the SMS message prompt interface on the screen, to prompt the user with content of the SMS message.</p><p id="p-0181" num="0178">In some other embodiments, the Wi-Fi module in the wireless connection component of the smartwatch keeps connected to the low-performance graphics processing subsystem 2 by default. An example in which the graphics processing subsystem 2 is currently used to perform graphics processing and an interface of a monitoring application is currently displayed is used for description. After the Wi-Fi module detects an operation of establishing a Wi-Fi connection to an intelligent surveillance camera in a smart home device in the local area network, the operation may be reported to the application processor 2 in the graphics processing subsystem 2. The application processor 2 determines, based on the first correspondence, the currently displayed interface of the monitoring application, and the detected operation of establishing the wireless connection to the intelligent surveillance camera, that the target graphics processing subsystem is the graphics processing subsystem 1. Therefore, the application processor 2 notifies the application processor 1 to perform graphics processing subsystem switching. The application processor 1 controls the graphics processing unit 1 to render a monitoring image received from the intelligent surveillance camera, and displays a rendered image on the screen.</p><p id="p-0182" num="0179">It should be noted that the foregoing is described by using an example in which the graphics processing subsystem 1 is used by default during startup. In some other embodiments, when the smartwatch is powered on, another graphics processing subsystem may also be used for processing. For example, when the smartwatch is powered on, a historical graphics processing subsystem recently used before the smartwatch is powered off is used by default to perform display processing. After a button component detects an operation of pressing a power button by the user, the operation is reported to an application processor in the historical graphics processing subsystem. If the historical graphics processing subsystem is the same as a target graphics processing subsystem, namely, the graphics processing subsystem 1, determined by the smartwatch based on the first correspondence, the smartwatch uses the graphics processing subsystem 1 to perform processing such as rendering on a GUI in a startup process, and then sends generated image data of the GUI to the screen for display. If the historical graphics processing subsystem is different from a target graphics processing subsystem, namely, the graphics processing subsystem 1, determined by the smartwatch based on the first correspondence, the smartwatch switches to use the graphics processing subsystem 1 to perform processing such as rendering on a GUI in a startup process, and then sends generated image data of the GUI to the screen for display.</p><p id="p-0183" num="0180">In some other embodiments, the smartwatch may not display a transition interface when performing graphics processing subsystem switching. In this way, in a graphics processing subsystem switching process, the smartwatch no longer displays an interface, and the screen of the smartwatch seen by the user in the switching process may be in a black screen state, and the user may feel that the screen flickers. Therefore, visual experience of the user is relatively poor. Therefore, compared with not displaying the transition interface, displaying the transition interface by the smartwatch can make interface display more continuous, and an interface viewed by the user more coherent. This can improve visual experience of the user.</p><p id="p-0184" num="0181">It may be understood that, because a graphics processing subsystem is a system including an application processor and a graphics processing unit, the target graphics processing subsystem in the first correspondence may be replaced with a target application processor and/or a target graphics processing unit. An input operation and an operating scenario correspond to the target application processor and/or the target graphics processing unit, that is, correspond to a target graphics processing subsystem in which the target application processor and/or the target graphics processing unit are/is located.</p><p id="p-0185" num="0182">It can be learned from the foregoing descriptions that different operating scenarios and different input operations correspond to different to-be-displayed GUIs, and the smartwatch uses different target graphics processing subsystems. Performance and power consumption of the used target graphics processing subsystems match the different operating scenarios and the different input operations, namely, match to-be-displayed GUIs corresponding to the different operating scenarios and input operations. Unlike the conventional technology, a same GPU with high performance and high power consumption is continuously used to perform display processing on all GUIs.</p><p id="p-0186" num="0183">In other words, the smartwatch may adaptively switch to a graphics processing subsystem in real time based on complexity of a to-be-displayed GUI corresponding to a display interface and an input operation, so that the complexity of the to-be-displayed GUI matches performance and power consumption of the switched graphics processing subsystem, and a graphics display processing capability and power consumption are not wasted. Therefore, the smartwatch may balance display processing performance and power consumption of different to-be-displayed GUIs, to implement optimal energy efficiency for the different to-be-displayed GUIs. This can reduce overall power consumption of the graphics processing subsystem and the smartwatch, and improve energy efficiency of the graphics processing subsystem and the smartwatch.</p><p id="p-0187" num="0184">In some other embodiments, a current operating scenario of the smartwatch may be represented by a currently detected input event. A second correspondence between an input event and a target graphics processing subsystem is preset in each application processor of the smartwatch. The application processor may determine, based on the second correspondence and the currently detected input event, whether to perform graphics processing subsystem switching. For example, for the second correspondence stored in the application processor, refer to Table 3.</p><p id="p-0188" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="168pt" align="center"/><colspec colname="2" colwidth="49pt" align="center"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>Second correspondence</entry><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="98pt" align="center"/><colspec colname="2" colwidth="70pt" align="center"/><colspec colname="3" colwidth="49pt" align="center"/><tbody valign="top"><row><entry/><entry>Target graphics</entry><entry>To-be-displayed </entry></row><row><entry>Input event</entry><entry>processing subsystem</entry><entry>GUI</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>Event of pressing a power button </entry><entry>Graphics processing</entry><entry>3D watch face</entry></row><row><entry>in a power-off state</entry><entry>subsystem 1</entry><entry>interface</entry></row><row><entry>Touch and hold event on the </entry><entry>Graphics processing</entry><entry>2D watch face</entry></row><row><entry>3D watch face interface</entry><entry>subsystem 2</entry><entry>interface</entry></row><row><entry>Event of raising wrist in a </entry><entry>Graphics processing</entry><entry>2D watch face</entry></row><row><entry>screen-off state</entry><entry>subsystem 2</entry><entry>interface</entry></row><row><entry>Event of a voice indication to </entry><entry>Graphics processing</entry><entry>3D watch face</entry></row><row><entry>switch to a 3D watch face</entry><entry>subsystem 1</entry><entry>interface</entry></row><row><entry>Event of swiping on the 2D </entry><entry>Graphics processing</entry><entry>Application list</entry></row><row><entry>watch face interface</entry><entry>subsystem 2</entry><entry>interface</entry></row><row><entry>Event of establishing a wireless </entry><entry>Graphics processing</entry><entry>Monitoring </entry></row><row><entry>connection to an intelligent </entry><entry>subsystem 1</entry><entry>image</entry></row><row><entry>surveillance camera after a</entry><entry/><entry/></row><row><entry>monitoring application is started</entry><entry/><entry/></row><row><entry>. . .</entry><entry>. . .</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0189" num="0185">For example, after detecting the event of raising the wrist in a screen-off state by a user, the smartwatch determines, based on the second correspondence, that the target graphics processing subsystem is the graphics processing subsystem 2 and the to-be-displayed GUI is the 2D watch face interface. Then, the smartwatch determines whether a graphics processing subsystem used before a screen is turned off is the same as the graphics processing subsystem 2. If the graphics processing subsystem used before the screen is turned off is the same as the graphics processing subsystem 2, the smartwatch continues to perform processing such as rendering and displaying on the to-be-displayed GUI by using the graphics processing subsystem 2. If the graphics processing subsystem used before the screen is turned off is different from the graphics processing subsystem 2, the smartwatch switches to use the graphics processing subsystem 2 to perform processing such as rendering and displaying on the to-be-displayed GUI.</p><p id="p-0190" num="0186">In some other embodiments of this application, a third correspondence between an input operation and a graphics processing subsystem is preset in each application processor of the smartwatch. The application processor may determine, based on the third correspondence and a currently detected input operation, whether to perform graphics processing subsystem switching. That is, the smartwatch may determine a target graphics processing subsystem based on an input operation of a user, and determine whether to perform graphics processing subsystem switching. For example, for the third correspondence preset in each application processor, refer to Table 4.</p><p id="p-0191" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 4</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Third correspondence</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="98pt" align="left"/><colspec colname="2" colwidth="105pt" align="left"/><tbody valign="top"><row><entry/><entry/><entry>Target graphics processing </entry></row><row><entry/><entry>Input operation</entry><entry>subsystem</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Operation of shaking wrist</entry><entry>Graphics processing subsystem 1</entry></row><row><entry/><entry>Operation of raising and putting </entry><entry>Graphics processing subsystem 2</entry></row><row><entry/><entry>down the wrist for a plurality</entry><entry/></row><row><entry/><entry>of consecutive times</entry><entry/></row><row><entry/><entry>Operation of a voice indication </entry><entry>Graphics processing subsystem 1</entry></row><row><entry/><entry>to use the graphics processing</entry><entry/></row><row><entry/><entry>subsystem 1</entry><entry/></row><row><entry/><entry>Operation of a voice indication </entry><entry>Graphics processing subsystem 2</entry></row><row><entry/><entry>to use the graphics processing</entry><entry/></row><row><entry/><entry>subsystem 2</entry><entry/></row><row><entry/><entry>. . .</entry><entry>. . .</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0192" num="0187">For example, after detecting the operation of shaking the wrist by the user, the smartwatch may determine to use the high-performance graphics processing subsystem 1 to perform graphics display processing. After detecting the operation of raising and putting down the wrist for the plurality of consecutive times by the user, the smartwatch determines to use the low-performance graphics processing subsystem 2 to perform graphics display processing. For another example, the smartwatch determines, based on a voice indication operation of the user, to use the high-performance graphics processing subsystem 1 or the low-performance graphics processing subsystem 2. The user may determine complexity of a to-be-displayed GUI based on an actual situation, to indicate, by using an input operation, the smartwatch to use a corresponding graphics processing subsystem to perform display processing.</p><p id="p-0193" num="0188">In some other embodiments of this application, each application processor of the smartwatch stores a fourth correspondence, and the fourth correspondence is a correspondence between an application corresponding to a to-be-displayed GUI and a target graphics processing subsystem. The application processor may determine, based on the fourth correspondence and an application corresponding to a currently to-be-displayed GUI, whether to perform graphics processing subsystem switching. For example, for the fourth correspondence stored in each application processor, refer to Table 5.</p><p id="p-0194" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 5</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Fourth correspondence</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="98pt" align="left"/><colspec colname="2" colwidth="105pt" align="left"/><tbody valign="top"><row><entry/><entry>Application corresponding </entry><entry>Target graphics processing </entry></row><row><entry/><entry>to a to-be-displayed GUI</entry><entry>subsystem</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Game application</entry><entry>Graphics processing subsystem 1</entry></row><row><entry/><entry>Camera application</entry><entry>Graphics processing subsystem 1</entry></row><row><entry/><entry>Phone application</entry><entry>Graphics processing subsystem 1</entry></row><row><entry/><entry>Setting application</entry><entry>Graphics processing subsystem 1</entry></row><row><entry/><entry>Alarm clock application</entry><entry>Graphics processing subsystem 2</entry></row><row><entry/><entry>Fitness and health application</entry><entry>Graphics processing subsystem 2</entry></row><row><entry/><entry>. . .</entry><entry>. . .</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0195" num="0189">In some implementations, the smartwatch may determine, in real time, the application corresponding to the to-be-displayed GUI, to determine, based on Table 5, whether to perform graphics processing subsystem switching. In some other implementations, the smartwatch determines the application corresponding to the to-be-displayed GUI only when the smartwatch detects an input operation of a user and the input operation is used to indicate to start the application, to determine, based on Table 5, whether to perform graphics processing subsystem switching.</p><p id="p-0196" num="0190">In some technical solutions, if a function of the application (for example, the camera application) corresponding to the to-be-displayed GUI is associated with a camera, the to-be-displayed GUI corresponds to the graphics processing subsystem 1.</p><p id="p-0197" num="0191">In some other technical solutions, if a function of the application corresponding to the to-be-displayed GUI is associated with remote network communication, the to-be-displayed GUI corresponds to the graphics processing subsystem 1, or if a function of the application corresponding to the to-be-displayed GUI is not associated with remote network communication, the to-be-displayed GUI corresponds to the graphics processing subsystem 2.</p><p id="p-0198" num="0192">Network communication may include near field communication and remote network communication. The near field communication may include communication technologies with a relatively short communication distance, such as Bluetooth, Wi-Fi, Zigbee, and infrared, and a communication task amount is small. The remote network communication includes 2G to 5G long-distance mobile network communication and network communication that requires TCP/IP resolution through a router. Wi-Fi communication may be classified into two types. One is remote network communication that is accessed to a wide area network, and in this case, communication is actually performed by using Ethernet. The other is near field communication that is accessed to a local area network of an IoT device. For example, a remote network communication scenario may include a 2G/3G/4G/5G-based video call, Internet-based data downloading, an Internet-based video call, or the like. For example, for the fourth correspondence stored in each application processor, refer to Table 6.</p><p id="p-0199" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 6</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Fourth correspondence</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="112pt" align="left"/><colspec colname="2" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>Application corresponding </entry><entry>Target graphics processing</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>to a to-be-displayed GUI</entry><entry>subsystem</entry></row><row><entry>Music application (including </entry><entry>Graphics processing subsystem 1</entry></row><row><entry>functions of downloading</entry><entry/></row><row><entry>and playing online music)</entry><entry/></row><row><entry>WeChat application </entry><entry>Graphics processing subsystem 1</entry></row><row><entry>(including a video call function)</entry><entry/></row><row><entry>Setting application</entry><entry>Graphics processing subsystem 2</entry></row><row><entry>Alarm clock application</entry><entry>Graphics processing subsystem 2</entry></row><row><entry>Phone application </entry><entry>Graphics processing subsystem 1</entry></row><row><entry>(including a video call function)</entry><entry/></row><row><entry>. . .</entry><entry>. . .</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0200" num="0193">Because a complex GUI may need to be displayed in a remote network communication process, the high-performance graphics processing subsystem 1 may be used to perform display processing, so that the smartwatch has a sufficient display processing capability for an interface related to the remote network communication. In addition, because a network disconnection problem and a network re-access problem may occur during graphics processing subsystem switching, and a network re-access process is complex and takes a relatively long time period, the smartwatch may perform graphics processing subsystem switching for the application corresponding to the to-be-displayed GUI based on whether the function of the application is associated with the remote network communication, and does not perform graphics processing subsystem switching in the application. This can avoid problems of frequent network disconnection and poor Internet access experience of the user that are caused by frequent graphics processing subsystem switching in the application.</p><p id="p-0201" num="0194">In some implementations, the smartwatch may determine, in real time, whether the application corresponding to the to-be-displayed GUI is the application that has the function associated with the remote network communication, to determine, based on Table 6, whether to perform graphics processing subsystem switching. In some other implementations, only when the smartwatch detects the input operation of the user and the input operation is used to indicate to start the application, the smartwatch determines whether the application corresponding to the to-be-displayed GUI is the application that has the function associated with the remote network communication, to determine, based on Table 6, whether to perform graphics processing subsystem switching.</p><p id="p-0202" num="0195">In some other technical solutions, if the application corresponding to the to-be-displayed GUI is a third-party application, the to-be-displayed GUI corresponds to the graphics processing subsystem 1; or if the application corresponding to the to-be-displayed GUI is a system application, the to-be-displayed GUI corresponds to the graphics processing subsystem 2. For example, for the fourth correspondence stored in each application processor, refer to Table 7.</p><p id="p-0203" num="0000"><tables id="TABLE-US-00007" num="00007"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 7</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Fourth correspondence</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="112pt" align="left"/><colspec colname="2" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>Application corresponding </entry><entry>Target graphics processing</entry></row><row><entry>to a to-be-displayed GUI</entry><entry>subsystem</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="63pt" align="left"/><colspec colname="2" colwidth="49pt" align="left"/><colspec colname="3" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>Third-party </entry><entry>Game</entry><entry>Graphics processing subsystem 1</entry></row><row><entry>application</entry><entry>WeChat</entry><entry>Graphics processing subsystem 1</entry></row><row><entry/><entry>. . .</entry><entry>Graphics processing subsystem 1</entry></row><row><entry>System application</entry><entry>Alarm clock</entry><entry>Graphics processing subsystem 2</entry></row><row><entry/><entry>Settings</entry><entry>Graphics processing subsystem 2</entry></row><row><entry/><entry>. . .</entry><entry>Graphics processing subsystem 2</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0204" num="0196">A third-party application may display a complex GUI, or may display a simple GUI. Therefore, the smartwatch needs to open a high-performance graphics processing capability for the third-party application, so that the third-party application can normally display the complex GUI by using the high-performance graphics processing capability. For example, if the application corresponding to the to-be-displayed GUI is a third-party game application, the target graphics processing subsystem corresponding to the to-be-displayed GUI is the graphics processing subsystem 1. The smartwatch may determine, according to whether the target graphics processing subsystem is the same as a currently used graphics processing subsystem, whether to perform graphics processing subsystem switching.</p><p id="p-0205" num="0197">In some implementations, the smartwatch may determine, in real time, whether the application corresponding to the to-be-displayed GUI is a third-party application (also referred to as a third-party application), to determine, based on Table 7, whether to perform graphics processing subsystem switching. In some other implementations, only when the smartwatch detects the input operation of the user and the input operation is used to start the application, the smartwatch determines whether the application corresponding to the to-be-displayed GUI is a third-party application, to determine, based on Table 7, whether to perform graphics processing subsystem switching.</p><p id="p-0206" num="0198">In some other technical solutions, if the application corresponding to the to-be-displayed GUI is a third-party application, the to-be-displayed GUI corresponds to the graphics processing subsystem 1. If the application corresponding to the to-be-displayed GUI is a system application, and a function of the system application is associated with remote network communication, the to-be-displayed GUI corresponds to the graphics processing subsystem 1. Alternatively, if the application corresponding to the to-be-displayed GUI is a system application, and a function of the system application is not associated with remote network communication, the smartwatch only needs to perform processing locally or perform processing through near field communication, and the to-be-displayed GUI corresponds to the graphics processing subsystem 2. For example, for the fourth correspondence stored in each application processor, refer to Table 8.</p><p id="p-0207" num="0000"><tables id="TABLE-US-00008" num="00008"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 8</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Fourth correspondence</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="112pt" align="left"/><colspec colname="2" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>Application corresponding </entry><entry>Target graphics processing</entry></row><row><entry>to a to-be-displayed GUI</entry><entry>subsystem</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="63pt" align="left"/><colspec colname="3" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>Third-party</entry><entry>Game</entry><entry>Graphics processing subsystem 1</entry></row><row><entry>application</entry><entry>WeChat</entry><entry>Graphics processing subsystem 1</entry></row><row><entry/><entry>. . .</entry><entry>Graphics processing subsystem 1</entry></row><row><entry>System</entry><entry>Messages</entry><entry>Graphics processing subsystem 2</entry></row><row><entry>application</entry><entry>Settings</entry><entry>Graphics processing subsystem 2</entry></row><row><entry/><entry>Phone (a video call </entry><entry>Graphics processing subsystem 1</entry></row><row><entry/><entry>associated with a </entry><entry/></row><row><entry/><entry>network)</entry><entry/></row><row><entry/><entry>. . .</entry><entry>. . .</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0208" num="0199">In some other embodiments of this application, each application processor of the smartwatch stores a fifth correspondence, and the fifth correspondence is a correspondence between an application function corresponding to a to-be-displayed GUI and a target graphics processing subsystem. The application processor may determine, based on the fifth correspondence and an application function corresponding to a currently to-be-displayed GUI, whether to perform graphics processing subsystem switching. For example, for the fifth correspondence stored in each application processor, refer to Table 9.</p><p id="p-0209" num="0000"><tables id="TABLE-US-00009" num="00009"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 9</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Fifth correspondence</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="91pt" align="left"/><colspec colname="2" colwidth="112pt" align="left"/><tbody valign="top"><row><entry/><entry>Function corresponding </entry><entry>Target graphics processing </entry></row><row><entry/><entry>to a to-be-displayed GUI</entry><entry>subsystem</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Voice call</entry><entry>Graphics processing subsystem 2</entry></row><row><entry/><entry>Video call</entry><entry>Graphics processing subsystem 1</entry></row><row><entry/><entry>Play local music</entry><entry>Graphics processing subsystem 2</entry></row><row><entry/><entry>Play online music</entry><entry>Graphics processing subsystem 1</entry></row><row><entry/><entry>. . .</entry><entry>. . .</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0210" num="0200">In some implementations, the smartwatch may determine, in real time, a function corresponding to the to-be-displayed GUI, to determine, based on Table 6, whether to perform graphics processing subsystem switching. In some other implementations, only when the smartwatch detects an input operation of a user and the input operation is used to indicate to use a service function, the smartwatch determines the function corresponding to the to-be-displayed GUI, to determine, based on Table 6, whether to perform graphics processing subsystem switching.</p><p id="p-0211" num="0201">In some other embodiments of this application, a sixth correspondence between a to-be-displayed GUI and a graphics processing subsystem is preset in an application processor. The application processor may determine, based on the sixth correspondence and a currently to-be-displayed GUI, whether to perform graphics processing subsystem switching. For example, for the sixth correspondence stored in each application processor, refer to Table 10.</p><p id="p-0212" num="0000"><tables id="TABLE-US-00010" num="00010"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 10</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Sixth correspondence</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="91pt" align="left"/><colspec colname="2" colwidth="126pt" align="left"/><tbody valign="top"><row><entry>To-be-displayed GUI</entry><entry>Target graphics processing subsystem</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>Startup animation</entry><entry>Graphics processing subsystem 1</entry></row><row><entry>2D watch face interface</entry><entry>Graphics processing subsystem 2</entry></row><row><entry>3D watch face interface</entry><entry>Graphics processing subsystem 1</entry></row><row><entry>Payment interface</entry><entry>Graphics processing subsystem 1</entry></row><row><entry>Game interface</entry><entry>Graphics processing subsystem 1</entry></row><row><entry>Calendar interface</entry><entry>Graphics processing subsystem 2</entry></row><row><entry>. . .</entry><entry>. . .</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0213" num="0202">For example, if the to-be-displayed GUI is the game interface, the to-be-displayed GUI corresponds to the graphics processing subsystem 1. If a currently used graphics processing subsystem is the graphics processing subsystem 1, the smartwatch continues to render the to-be-displayed GUI by using the graphics processing subsystem 1. If a currently used graphics processing subsystem is not the graphics processing subsystem 1, the smartwatch switches to the graphics processing subsystem 1 to render the to-be-displayed GUI.</p><p id="p-0214" num="0203">In some other embodiments of this application, a switching operation is preset in each application processor of the smartwatch, and the switching operation is one or more of input operations. If the smartwatch detects a switching operation, the smartwatch switches to another graphics processing subsystem.</p><p id="p-0215" num="0204">For example, the smartwatch includes two graphics processing subsystems. If the smartwatch detects a switching operation by using an input component, switching is performed between the two graphics processing subsystems. For example, the switching operation may be an operation of shaking the smartwatch, an operation of tapping a switching control on a screen by a user, an operation of a voice indication of a user to perform graphics processing subsystem switching, or the like.</p><p id="p-0216" num="0205">It should be noted that the smartwatch may need a specific processing time period to perform graphics processing subsystem switching. When the smartwatch triggers, based on an input operation of the user by using an interaction component, to determine whether to perform graphics processing subsystem switching, because the smartwatch also needs a specific time period to respond to the input operation of the user, the graphics processing subsystem switching and the response are synchronously performed. Therefore, it is not easy for the user to feel a delay caused by a switching process. When the smartwatch triggers, based on an input operation of a trigger component such as a wireless connection module, to determine whether to perform graphics processing subsystem switching, the switching is performed without user awareness. Therefore, the user does not perceive a time period consumed for performing the graphics processing subsystem switching.</p><p id="p-0217" num="0206">In some other embodiments of this application, a target graphics processing subsystem may be associated with configuration information of a to-be-displayed interface. The configuration information may be configuration information corresponding to a previous setting operation of a user. For example, in a process of displaying a startup animation, the smartwatch performs display processing by using the graphics processing subsystem 1. After the startup animation is displayed, the to-be-displayed interface is a watch face interface. A watch face interface previously set by the user is a 2D watch face interface and corresponds to the graphics processing subsystem 2. Configuration information that corresponds to the watch face interface and that is stored in the smartwatch is a 2D watch face mode. After the startup process is completed, the smartwatch queries the configuration information corresponding to the watch face interface, and determines, based on the configuration information, that the target graphics processing subsystem corresponding to the to-be-displayed GUI is the graphics processing subsystem 2, and that the to-be-displayed GUI is a simple GUI. Therefore, the smartwatch may switch to use the graphics processing subsystem 2 to performing processing such as rendering and displaying on the to-be-displayed 2D watch face interface.</p><p id="p-0218" num="0207">In some other embodiments of this application, the smartwatch may determine complexity of each to-be-displayed GUI in real time, to determine, in real time based on the complexity of the to-be-displayed GUI, whether to perform graphics processing subsystem switching.</p><p id="p-0219" num="0208">For example, the smartwatch may learn and predict complexity of each to-be-displayed GUI by using an artificial intelligence (artificial intelligence, AI) module, and determine a corresponding target graphics processing subsystem based on the complexity of the to-be-displayed GUI, to determine whether to perform graphics processing subsystem switching. For example, if the smartwatch is currently using the high-performance graphics processing subsystem 1 to perform display processing on a complex game interface, the smartwatch determines, by using the AI module, that a to-be-displayed GUI of a next frame or next several frames is a simple game interface. In this case, the smartwatch switches to the low-performance graphics processing subsystem 2 for display processing.</p><p id="p-0220" num="0209">The foregoing is described by using an example in which the interaction component in the input component is connected to the currently used graphics processing subsystem, and the trigger component is connected to a specific graphics processing subsystem. In some other embodiments, both the interaction component and the trigger component in the input component may be connected to the currently used graphics processing subsystem. If a graphics processing subsystem used by the smartwatch is switched, the input component is connected to a graphics processing subsystem that is switched to.</p><p id="p-0221" num="0210">The foregoing is mainly described by using an example in which the electronic device is a smartwatch. The display processing method provided in embodiments of this application may be further applied to another electronic device such as a mobile phone, a tablet, or a vehicle-mounted device. Details are not described herein.</p><p id="p-0222" num="0211">It should be noted that the foregoing is mainly described by using an example in which the electronic device includes the graphics processing subsystem 1 and the graphics processing subsystem 2. It may be understood that the electronic device may also include more than two graphics processing subsystems. For example, as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the electronic device may further include another graphics processing subsystem such as a graphics processing subsystem n.</p><p id="p-0223" num="0212">For example, in addition to the high-performance graphics processing subsystem 1 and the low-performance graphics processing subsystem 2, the electronic device may further include a graphics processing subsystem n with lower performance and lower power consumption. For related parameters of an application processor and a graphics processing unit in the graphics processing subsystem n, refer to Table 1.</p><p id="p-0224" num="0213">For another example, in addition to the high-performance graphics processing subsystem 1 and the low-performance graphics processing subsystem 2, the electronic device may further include a graphics processing subsystem 3 whose performance and power consumption are between the performance and power consumption of the graphics processing subsystem 1 and the performance and power consumption of the graphics processing subsystem 2. For example, the high-performance graphics processing subsystem 1 supports a 3D rendering capability, the low-performance graphics processing subsystem 2 supports static graphics processing, and the graphics processing subsystem 3 with middle performance and power consumption supports two-dimensional graphics display processing such as 2D rotation and fade-in/fade-out.</p><p id="p-0225" num="0214">For another example, in addition to the high-performance graphics processing subsystem 1 and the low-performance graphics processing subsystem 2, the electronic device such as a mobile phone, an AR device, or a VR device may further include a graphics processing subsystem 4 with higher performance and power consumption that is used to display 3D graphics in an AR scenario or a VR scenario.</p><p id="p-0226" num="0215">With reference to the foregoing embodiments and related accompanying drawings, an embodiment provides a display processing method. The method may be implemented in the electronic device (for example, a smartwatch or a smart band) that has a screen and that is shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> to <figref idref="DRAWINGS">FIG. <b>6</b></figref>. The electronic device may include a plurality of graphics processing subsystems, for example, may include a first graphics processing subsystem and a second graphics processing subsystem.</p><p id="p-0227" num="0216">The first graphics processing subsystem includes a first graphics processing unit, a first application processor, and a first memory used in cooperation with the first application processor and the first graphics processing unit. The second graphics processing subsystem includes a second graphics processing unit, a second application processor, and a second memory used in cooperation with the second application processor and the second graphics processing unit. In addition, the first graphics processing subsystem and the second graphics processing subsystem each may further include a communications bus configured to connect components in the graphics processing subsystem. That is, different graphics processing subsystems may include different components and different basic systems. Different graphics processing subsystems have different performance, power consumption, and energy efficiency.</p><p id="p-0228" num="0217">Refer to <figref idref="DRAWINGS">FIG. <b>15</b></figref>. The display processing method may include the following steps.</p><p id="p-0229" num="0218">Step <b>1501</b>: The first graphics processing subsystem renders a first GUI.</p><p id="p-0230" num="0219">For example, the electronic device may be a wearable device. For example, the electronic device may be the smartwatch in the foregoing embodiments, the first graphics processing subsystem may be the graphics processing subsystem 1 with relatively high performance and power consumption shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, and the first GUI may be a 3D watch face interface.</p><p id="p-0231" num="0220">Step <b>1502</b>: The screen displays the rendered first GUI.</p><p id="p-0232" num="0221">For example, when the first GUI is the 3D watch face interface, for a schematic diagram of the 3D watch face interface displayed on the screen, refer to (a) in <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0233" num="0222">Step <b>1503</b>: The first application processor sends a switching notification to the second application processor after the first application processor determines that a preset condition is met.</p><p id="p-0234" num="0223">After determining that the preset condition is met, the first application processor may send the switching notification to the second application processor to indicate to switch to the second graphics processing subsystem for display processing.</p><p id="p-0235" num="0224">For example, the preset condition may be that the electronic device detects a touch and hold operation performed by a user on the 3D watch face interface, and the second graphics processing subsystem may be the graphics processing subsystem 2 with relatively low performance and power consumption shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> to <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0236" num="0225">Step <b>1504</b>: After receiving the switching notification, the second application processor notifies the second graphics processing unit to render a to-be-displayed second GUI, where the second GUI and the first GUI correspond to different interface types.</p><p id="p-0237" num="0226">GUIs of different interface types have different complexity. To be specific, complexity of the second GUI is different from complexity of the first GUI. After leaning of the graphics processing subsystem switching notification, the second application processor may control the second graphics processing unit to render the to-be-displayed second GUI. For example, the first GUI may be the 3D watch face interface, and the to-be-displayed second GUI may be a 2D watch face interface.</p><p id="p-0238" num="0227">Step <b>1505</b>: The second graphics processing unit renders the second GUI.</p><p id="p-0239" num="0228">Step <b>1506</b>: The screen displays the rendered second GUI.</p><p id="p-0240" num="0229">For example, for a schematic diagram of the 2D watch face interface displayed on the screen, refer to (b) in <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0241" num="0230">In this solution, for to-be-displayed GUIs of different interface types, the electronic device can switch to use graphics processing subsystems with different performance and different power consumption for display processing. GUIs of different interface types have different complexity. For example, for a high-complexity GUI, the electronic device may use a graphics processing subsystem with high performance and high power consumption to perform processing; and for a low-complexity GUI, the electronic device may use a graphics processing subsystem with low performance and low power consumption to perform processing, instead of using a unified graphics processing subsystem with high performance and high power consumption to perform processing. In other words, the electronic device may balance display processing performance and power consumption of different to-be-displayed GUIs, to implement optimal energy efficiency for the different to-be-displayed GUIs. Therefore, the plurality of graphics processing subsystems in the electronic device have relatively low average power consumption and relatively high average energy efficiency. In addition, the plurality of graphics processing subsystems have relatively high overall energy efficiency and relatively low overall power consumption. Therefore, energy efficiency of the electronic device for graphics display processing is relatively high, and overall power consumption of the electronic device is relatively low.</p><p id="p-0242" num="0231">In some embodiments, refer to <figref idref="DRAWINGS">FIG. <b>15</b></figref>. After the electronic device determines that the preset condition is met, and before the rendered second GUI is displayed, the method further includes the following steps.</p><p id="p-0243" num="0232">Step <b>1507</b>: The first graphics processing unit renders a transition interface.</p><p id="p-0244" num="0233">Step <b>1508</b>: The screen displays the rendered transition interface.</p><p id="p-0245" num="0234">In this way, the transition interface may continuously provide interface display for the user in a graphics processing subsystem switching process, to avoid a phenomenon such as interruption, a black screen, or screen flickering on an interface viewed by the user, and improve visual experience of the user. For example, in a scenario in which the first GUI is the 3D watch face interface, and the second GUI is the 2D watch face interface, for the transition interface, refer to (c) and (d) in <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0246" num="0235">In some embodiments, that the first application processor sends a switching notification to the second application processor after the first application processor determines that a preset condition is met includes: The first application processor sends the switching notification to the second application processor after the first application processor determines that a first input operation is detected and the preset condition is met. The first input operation may include a touchscreen-based input operation, a button-based operation, a voice input operation, or the like. That is, the electronic device determines, only after detecting triggering of an input operation of the user, whether to perform graphics processing subsystem switching.</p><p id="p-0247" num="0236">For example, the electronic device may further include a memory. The memory stores prestored information such as a preset application, an application function, or a preset GUI corresponding to the second graphics processing subsystem. If an application or a function of the to-be-displayed second GUI, or the second GUI corresponds to the prestored information, the electronic device may perform display processing by using the second graphics processing subsystem.</p><p id="p-0248" num="0237">In some technical solutions, the memory stores a preset application corresponding to the second graphics processing subsystem. That the first application processor determines that a preset condition is met includes: The first application processor determines that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type. A GUI of the first interface type includes a GUI corresponding to the preset application, and a GUI of the second interface type includes a GUI other than the GUI corresponding to the preset application.</p><p id="p-0249" num="0238">For example, the second graphics processing subsystem may be the graphics processing subsystem 1 in Table 5. The GUI of the first interface type may include a GUI of a preset application corresponding to the graphics processing subsystem 1 in Table 5. For example, the preset application includes a payment application, a camera application, a music application, a call application, a game application, or the like. The GUI of the second interface type may include a GUI other than a GUI of an application corresponding to the graphics processing subsystem 2 in Table 5. For example, the GUI of the second interface type may include a GUI of a preset application corresponding to the graphics processing subsystem 2 in Table 5.</p><p id="p-0250" num="0239">Alternatively, the preset application may be an application shown in Table 6 that has a function associated with remote network communication.</p><p id="p-0251" num="0240">Alternatively, the preset application may be a third-party application shown in Table 7.</p><p id="p-0252" num="0241">In some other technical solutions, the memory stores a preset function corresponding to the second graphics processing subsystem. That the first application processor determines that a preset condition is met includes: The first application processor determines that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type. A GUI of the first interface type includes a GUI corresponding to the preset function, and a GUI of the second interface type includes a GUI other than the GUI corresponding to the preset function. For example, the preset function may be associated with remote network communication.</p><p id="p-0253" num="0242">For example, the second graphics processing subsystem may be the graphics processing subsystem 1 in Table 9. The preset function may be a function corresponding to the graphics processing subsystem 1 in Table 9. The GUI of the first interface type may include a GUI of the preset function corresponding to the graphics processing subsystem 1 in Table 9. The GUI of the second interface type may include a GUI other than the GUI of the preset function corresponding to the graphics processing subsystem 1 in Table 9. For example, the GUI of the second interface type may be a GUI of a function corresponding to the graphics processing subsystem 2 in Table 9.</p><p id="p-0254" num="0243">In some other technical solutions, the memory stores a preset GUI corresponding to the second graphics processing subsystem. That the first application processor determines that a preset condition is met includes: The first application processor determines that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type. A GUI of the first interface type includes the preset GUI, and a GUI of the second interface type includes a GUI other than the preset GUI. For example, the second graphics processing subsystem may be the graphics processing subsystem 1 in Table 10, and the preset GUI may be a GUI corresponding to the graphics processing subsystem 1 in Table 10.</p><p id="p-0255" num="0244">In some other embodiments, the second GUI and the first GUI are respectively of a 3D interface type and a 2D interface type.</p><p id="p-0256" num="0245">In some other embodiments, the memory stores at least one preset parameter group corresponding to the second graphics processing subsystem, and the preset parameter group includes a preset GUI and a preset input operation. That the first application processor determines that a preset condition is met includes: The first application processor determines that a second input operation is detected. The first GUI and the second input operation match the preset GUI and the preset input operation in the preset parameter group. The second input operation may include a touchscreen-based input operation, a button-based operation, a voice input operation, or the like.</p><p id="p-0257" num="0246">For example, the second graphics processing subsystem may be the graphics processing subsystem 1 in Table 2, and the preset parameter group may be a preset parameter group including a displayed interface and an input operation corresponding to the graphics processing subsystem 1 in the correspondence shown in Table 2.</p><p id="p-0258" num="0247">In some other embodiments, that the first application processor determines that a preset condition is met includes: The first application processor determines that a third input operation is detected. The third input operation is used to indicate to perform graphics processing subsystem switching, or the third input operation is used to indicate to use the second graphics processing subsystem. The third input operation may include a touchscreen-based input operation, a button-based operation, a voice input operation, or the like. For example, the input operation may be the input operation shown in Table 4.</p><p id="p-0259" num="0248">It may be understood that, to implement the foregoing functions, the electronic device includes corresponding hardware and/or a software module for performing each function. With reference to algorithm steps of each example described in the embodiments disclosed in this specification, this application may be implemented in a hardware form or in a form of combining hardware with computer software. Whether a function is performed by hardware or hardware driven by computer software depends on particular applications and design constraints of the technical solutions. A person skilled in the art may use different methods to implement the described functions for each particular application with reference to the embodiments, but it should not be considered that the implementation goes beyond the scope of this application.</p><p id="p-0260" num="0249">In the embodiments, the electronic device may be divided into functional modules based on the foregoing method examples. For example, each functional module corresponding to each function may be obtained through division, or two or more functions may be integrated into one processing module. The integrated module may be implemented in a form of hardware. It should be noted that, in this embodiment, division into modules is an example and is merely logical function division. During actual implementation, there may be another division manner.</p><p id="p-0261" num="0250">An embodiment of this application further provides an electronic device, including one or more processors and one or more memories. The one or more memories are coupled to the one or more processors, the one or more memories are configured to store computer program code, and the computer program code includes computer instructions. When the one or more processors execute the computer instructions, the electronic device is enabled to perform the steps performed by the electronic device in the method embodiments, to implement the display processing method.</p><p id="p-0262" num="0251">An embodiment of this application further provides a computer-readable storage medium. The computer-readable storage medium stores computer instructions. When the computer instructions are run on an electronic device, the electronic device is enabled to perform the related method steps, to implement the display processing method in the foregoing embodiments.</p><p id="p-0263" num="0252">An embodiment of this application further provides a computer program product. When the computer program product is run on a computer, the computer is enabled to perform the related steps, to implement the display processing method performed by the electronic device in the foregoing embodiments.</p><p id="p-0264" num="0253">In addition, an embodiment of this application further provides an apparatus. The apparatus may be specifically a chip, a component, or a module. The apparatus may include a processor and a memory that are connected. The memory is configured to store computer-executable instructions, and when the apparatus runs, the processor may execute the computer-executable instructions stored in the memory, so that the chip performs the display processing method performed by the electronic device in the foregoing method embodiments.</p><p id="p-0265" num="0254">The electronic device, the computer-readable storage medium, the computer program product, or the chip provided in the embodiments is configured to perform the corresponding method provided above. Therefore, for beneficial effects that can be achieved, refer to the beneficial effects in the corresponding method provided above. Details are not described herein again.</p><p id="p-0266" num="0255">The foregoing descriptions about implementations allow a person skilled in the art to understand that, for the purpose of convenient and brief description, division of the foregoing functional modules is taken as an example for illustration. In actual application, the foregoing functions can be allocated to different modules and implemented according to a requirement, that is, an inner structure of an apparatus is divided into different functional modules to implement all or some of the functions described above.</p><p id="p-0267" num="0256">In the several embodiments provided in this application, it should be understood that the disclosed apparatus and method may be implemented in other manners. For example, the described apparatus embodiment is merely an example. For example, the module or unit division is merely logical function division and may be other division during actual implementation. For example, a plurality of units or components may be combined or integrated into another apparatus, or some features may be ignored or not performed. In addition, the displayed or discussed mutual couplings or direct couplings or communication connections may be implemented by using some interfaces. The indirect couplings or communication connections between the apparatuses or units may be implemented in electronic, mechanical, or other forms.</p><p id="p-0268" num="0257">The units described as separate parts may or may not be physically separate, and parts displayed as units may be one or more physical units, that is, may be located in one place, or may be distributed to different places. Some or all of the units may be selected based on an actual requirement to achieve the objectives of the solutions of embodiments.</p><p id="p-0269" num="0258">In addition, functional units in embodiments of this application may be integrated into one processing unit, each of the units may exist alone physically, or two or more units may be integrated into one unit. The integrated unit may be implemented in a form of hardware, or may be implemented in a form of a software functional unit.</p><p id="p-0270" num="0259">When the integrated unit is implemented in the form of a software functional unit and sold or used as an independent product, the integrated unit may be stored in a readable storage medium. Based on such an understanding, the technical solutions of embodiments of this application essentially, the part contributing to the conventional technology, or all or some of the technical solutions may be implemented in a form of a software product. The software product is stored in a storage medium and includes several instructions for enabling a device (which may be a single-chip microcomputer, a chip or the like) or a processor (processor) to perform all or some of the steps of the methods described in embodiments of this application. The foregoing storage medium includes: any medium that can store program code, for example, a USB flash drive, a removable hard disk, a read-only memory (read-only memory, ROM), a RAM, a magnetic disk, or an optical disc.</p><p id="p-0271" num="0260">The foregoing descriptions are merely specific implementations of this application, but are not intended to limit the protection scope of this application. Any variation or replacement readily figured out by a person skilled in the art in the technical scope disclosed in this application shall fall within the protection scope of this application. Therefore, the protection scope of this application shall be subject to the protection scope of the claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-01-25" num="01-25"><claim-text><b>1</b>.-<b>25</b>. (canceled)</claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. A display processing method implemented by an electronic device, wherein the display processing method comprises:<claim-text>rendering, by a first graphics processing subsystem of the electronic device, a first graphical user interface (GUI);</claim-text><claim-text>displaying, by a screen of the electronic device, the first GUI;</claim-text><claim-text>determining, by a first application processor of the first graphics processing subsystem, that a preset condition is met;</claim-text><claim-text>sending, by the first application processor and after determining that the preset condition is met, a switching notification to a second application processor of a second graphics processing subsystem of the electronic device;</claim-text><claim-text>notifying, by the second application processor and after receiving the switching notification, a second graphics processor of the second graphics processing subsystem, to render a second GUI, wherein the second GUI and the first GUI correspond to different interface types;</claim-text><claim-text>rendering, by the second graphics processor, the second GUI; and</claim-text><claim-text>displaying, by the screen, the second GUI.</claim-text></claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The display processing method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, further comprising:<claim-text>detecting, by the first application processor, a first input operation; and</claim-text><claim-text>further sending, by the first application processor, the switching notification to the second application processor after detecting the first input operation.</claim-text></claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The display processing method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein determining that the preset condition is met comprises determining, by the first application processor, that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type, wherein the first interface type corresponds to a preset application corresponding to the second graphics processing subsystem and stored in a memory of the electronic device, and wherein the second interface type corresponds to any GUI other than a third GUI of the preset application.</claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The display processing method of <claim-ref idref="CLM-00028">claim 28</claim-ref>,<claim-text>wherein the preset application comprises a payment application, a camera application, a music application, a call application, or a game application,</claim-text><claim-text>wherein the preset application has a function associated with remote network communication, or</claim-text><claim-text>wherein the preset application is a third-party application.</claim-text></claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The display processing method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein determining that the preset condition is met comprises determining, by the first application processor, that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type, wherein the first interface type corresponds to a preset function corresponding to the second graphics processing subsystem, and wherein the second interface type comprises any GUI other than a third GUI corresponding to the preset function.</claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. The display processing method of <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein the preset function is associated with remote network communication.</claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The display processing method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein determining that the preset condition is met comprises determining, by the first application processor, that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type, wherein the first interface type corresponds to a preset GUI of the second graphics processing subsystem, and wherein the second interface type comprises any GUI other than the preset GUI.</claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The display processing method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein determining that the preset condition is met comprises:<claim-text>determining, by the first application processor, that the second GUI is of a three-dimensional (3D) interface type and the first GUI is of a two-dimensional (2D) interface type; or</claim-text><claim-text>determining, by the first application processor, that the second GUI is of a 2D interface type and the first GUI is of a 3D interface type.</claim-text></claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The display processing method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein determining that the preset condition is met comprises detecting, by the first application processor, a second input operation, wherein the first GUI and the second input operation match a preset GUI and a preset input operation in a preset parameter group corresponding to the second graphics processing subsystem.</claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. The display processing method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein determining that the preset condition is met comprises detecting, by the first application processor, a third input operation, wherein the third input operation indicates to perform graphics processing subsystem switching, or wherein the third input operation indicates to use the second graphics processing subsystem.</claim-text></claim><claim id="CLM-00036" num="00036"><claim-text><b>36</b>. The display processing method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, further comprising, after determining that the preset condition is met and before displaying the second GUI:<claim-text>rendering, by a first graphics processor of the first graphics processing subsystem, a transition interface; and</claim-text><claim-text>displaying, by the screen, the transition interface.</claim-text></claim-text></claim><claim id="CLM-00037" num="00037"><claim-text><b>37</b>. The display processing method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the first graphics processing subsystem further comprises a first communications bus configured to connect internal components of the first graphics processing subsystem, and wherein the second graphics processing subsystem further comprises a second communications bus configured to connect internal components of the second graphics processing subsystem.</claim-text></claim><claim id="CLM-00038" num="00038"><claim-text><b>38</b>. An electronic device, comprising:<claim-text>a first graphics processing subsystem comprising a first graphics processor, a first application processor, and a first memory configured for use by the first application processor and the first graphics processing unit, wherein the first graphics processing subsystem is configured to render a first graphical user interface (GUI);</claim-text><claim-text>a screen coupled to the first graphics processing subsystem and configured to display the first GUI; and</claim-text><claim-text>a second graphics processing subsystem coupled to the screen and comprising a second graphics processor, a second application processor, and a second memory configured for use by the second application processor and the second graphics processing unit,</claim-text><claim-text>wherein the first application processor is configured to:<claim-text>determine that a preset condition is met; and</claim-text><claim-text>send a switching notification to the second application processor after determining that the preset condition is met,</claim-text></claim-text><claim-text>wherein the second application processor is configured to notify, after receiving the switching notification from the first application processor, the second graphics processor to render a second GUI, wherein the second GUI and the first GUI correspond to different interface types,</claim-text><claim-text>wherein the second graphics processor is configured to render the second GUI, and</claim-text><claim-text>wherein the screen is further configured to display the second GUI.</claim-text></claim-text></claim><claim id="CLM-00039" num="00039"><claim-text><b>39</b>. The electronic device of <claim-ref idref="CLM-00038">claim 38</claim-ref>, wherein the first application processor is configured to:<claim-text>detect a first input operation; and</claim-text><claim-text>further send the switching notification to the second application processor after detecting the first input operation.</claim-text></claim-text></claim><claim id="CLM-00040" num="00040"><claim-text><b>40</b>. The electronic device of <claim-ref idref="CLM-00038">claim 38</claim-ref>, further comprising a third memory configured to store a preset application corresponding to the second graphics processing subsystem,<claim-text>wherein the first application processor is configured to determine that the preset condition is met by being configured to determine that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type,</claim-text><claim-text>wherein the first interface type corresponds to the preset application, and</claim-text><claim-text>wherein the second interface type comprises any GUI other than a third GUI corresponding to the preset application.</claim-text></claim-text></claim><claim id="CLM-00041" num="00041"><claim-text><b>41</b>. The electronic device of <claim-ref idref="CLM-00040">claim 40</claim-ref>,<claim-text>wherein the preset application comprises a payment application, a camera application, a music application, a call application, or a game application,</claim-text><claim-text>wherein the preset application has a function associated with remote network communication, or</claim-text><claim-text>wherein the preset application is a third-party application.</claim-text></claim-text></claim><claim id="CLM-00042" num="00042"><claim-text><b>42</b>. The electronic device of <claim-ref idref="CLM-00038">claim 38</claim-ref>, further comprising a third memory configured to store a preset function corresponding to the second graphics processing subsystem,<claim-text>wherein the first application processor is configured to determine that the preset condition is met by being configured to determine that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type,</claim-text><claim-text>wherein the first interface type corresponds to the preset function, and</claim-text><claim-text>wherein the second interface type comprises any GUI other than a third GUI corresponding to the preset function.</claim-text></claim-text></claim><claim id="CLM-00043" num="00043"><claim-text><b>43</b>. The electronic device of <claim-ref idref="CLM-00038">claim 38</claim-ref>, further comprising a third memory configured to store a preset GUI corresponding to the second graphics processing subsystem,<claim-text>wherein the first application processor is configured to determine that the preset condition is met by being configured to determine that the second GUI corresponds to a first interface type and the first GUI corresponds to a second interface type,</claim-text><claim-text>wherein a GUI of the first interface type comprises the preset GUI, and</claim-text><claim-text>wherein the second interface type comprises any GUI other than the preset GUI.</claim-text></claim-text></claim><claim id="CLM-00044" num="00044"><claim-text><b>44</b>. The electronic device according to <claim-ref idref="CLM-00038">claim 38</claim-ref>, wherein the first application processor is configured to determine that the preset condition is met by being configured to:<claim-text>determine that the second GUI is of a three-dimensional (3D) interface type and the first GUI is of a two-dimensional (2D) interface type; or</claim-text><claim-text>determine that the second GUI is of a 2D interface type and the first GUI is of a 3D interface type.</claim-text></claim-text></claim><claim id="CLM-00045" num="00045"><claim-text><b>45</b>. A computer program product comprising instructions that are stored on a computer-readable medium and that, when executed by one or more processors, cause an electronic device to:<claim-text>render, by a first graphics processing subsystem of the electronic device, a first graphical user interface (GUI);</claim-text><claim-text>display, using a screen of the electronic device, the first GUI;</claim-text><claim-text>determine, by a first application processor of the first graphics processing subsystem, that a preset condition is met;</claim-text><claim-text>send, by the first application processor and after determining that the preset condition is met, a switching notification to a second application processor of a second graphics processing subsystem of the electronic device;</claim-text><claim-text>notify, by the second application processor and after receiving the switching notification, a second graphics processor of the second graphics processing subsystem, to render a second GUI, wherein the second GUI and the first GUI correspond to different interface types;</claim-text><claim-text>render, by the second graphics processor, the second GUI; and</claim-text><claim-text>display, by the screen, the second GUI.</claim-text></claim-text></claim></claims></us-patent-application>