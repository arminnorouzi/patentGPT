<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007105A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007105</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17757079</doc-number><date>20191210</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>163</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>61</main-group><subgroup>4511</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>163</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>61</main-group><subgroup>4511</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>166</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">MECHANISM TO ENABLE THIRD PARTY SERVICES AND APPLICATIONS DISCOVERY IN DISTRIBUTED EDGE COMPUTING ENVIRONMENT</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Telefonaktiebolaget LM Ericsson  (publ)</orgname><address><city>Stockholm</city><country>SE</country></address></addressbook><residence><country>SE</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>HADDAD</last-name><first-name>Wassim</first-name><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>HALPERN</last-name><first-name>Joel</first-name><address><city>Leesburg</city><state>VA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Telefonaktiebolaget LM Ericsson  (publ)</orgname><role>03</role><address><city>Stockholm</city><country>SE</country></address></addressbook></assignee></assignees><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/IB2019/060636</doc-number><date>20191210</date></document-id><us-371c12-date><date>20220609</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method and system support communication between a service executed by an edge server and a mobile application. The method includes receiving a transmission control protocol (TCP) handshake with an Internet Protocol (IP) anycast address from the mobile application; replying to the TCP handshake with an IP unicast address for the service to be utilized for a transport layer security (TLS) session; and establishing the TLS session between the service and the mobile application using the IP unicast address.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="176.02mm" wi="97.79mm" file="US20230007105A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="165.52mm" wi="159.77mm" file="US20230007105A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="232.92mm" wi="143.09mm" orientation="landscape" file="US20230007105A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="200.91mm" wi="99.82mm" file="US20230007105A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="156.97mm" wi="99.74mm" file="US20230007105A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="232.66mm" wi="162.98mm" file="US20230007105A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="246.38mm" wi="162.22mm" file="US20230007105A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="244.26mm" wi="155.28mm" file="US20230007105A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">Embodiments of the invention relate to the field of distributed edge computing; and more specifically, to the process of application service discovery and third party application and service support for edge computing environments.</p><heading id="h-0002" level="1">BACKGROUND ART</heading><p id="p-0003" num="0002">Edge computing is a form of distributed computing where computational resources and storage are located closer to user devices in comparison to cloud computing and similar computing paradigms. Edge computing is intended to improve latency and reduce bandwidth utilization. Edge computing is often utilized by telecommunication company networks such as a part of cellular communication networks. Edge computing can be utilized to position content closer to users. Edge computing can also be utilized to offer services or computing resources to applications running on user devices. Edge computing can further offer virtualization of functions and operating environments that make it easier to deploy and run a wider range of applications on edge computing devices at edge computing sites.</p><p id="p-0004" num="0003">Edge computing is expected to play an important role in the deployment of 5th Generation cellular mobile communications (5G) technology. 5G cellular telecommunication company distributed edge computing deployment requires running components of a 5G core, e.g., a User Plane Function (UPF), at each edge computing site. In order to communicate with mobile users, third party applications (i.e., applications not provided or developed by the telecommunication company, network operator, or the user) running on the edge computing resources get their packets routed to the mobile user's associated UPF. Third party applications and services deployed at edge computing sites will be packaged in different forms, e.g., virtual machines, containers, Unikernels, and similar forms. These applications and services can also migrate between different edge computing sites. Application deployment at a particular edge computing site is constrained mostly by computing resources. Such constraint may be caused by multi-tenancy requirements and/or service level agreements (SLAs), and similar considerations. Whether a third party application or service is deployed in all edge computing sites or selected ones depends on the application or service characteristics (e.g., SLA) as well as edge computing resource availability.</p><p id="p-0005" num="0004">DNS over HTTPS (DoH) is a protocol for performing remote Domain Name System (DNS) resolution over the hypertext transport protocol secure (HTTPS) protocol. DoH is designed to increase user privacy and security by preventing eavesdropping and manipulation of DNS data by using the HTTPS protocol to encrypt the data between the DoH client and the DoH server, which is a DNS service. DoH is also designed to improve performance relative to traditional internet service provider (ISP) based DNS services. DoH services are expected to be deployed in edge computing sites in a 5G network.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0006" num="0005">In one embodiment, a method of supporting communication between a service executed by an edge server and a mobile application is provided. The method includes receiving a transmission control protocol, TCP, handshake with an Internet Protocol, IP, anycast address from the mobile application; replying to the TCP handshake with an IP unicast address for the service to be utilized for a transport layer security, TLS, session; and establishing the TLS session between the service and the mobile application using the IP unicast address.</p><p id="p-0007" num="0006">In further embodiments, a machine-readable medium includes computer program code which when executed by a computer carries out the method of supporting communication between the service executed by the edge server and the mobile application. The further embodiments also include an electronic device configured to execute the method for supporting communication between the service executed by the edge server and the mobile application. In some embodiments, the electronic device is configured to execute a plurality of virtual machines, where the plurality of virtual machines implements the service using network function virtualization (NFV). In some embodiments, the electronic device is a control plane device configured to implement a control plane of a software defined networking (SDN) network that supports the service.</p><p id="p-0008" num="0007">In another embodiment, another method is provided of supporting communication between a mobile application executed by a mobile device and an edge service, where the another method includes sending a transmission control protocol, TCP, handshake with an Internet Protocol, IP, anycast address to the edge service; receiving a reply to the TCP handshake with an IP unicast address for the edge service to be utilized for a transport layer security, TLS, session; and establishing the TLS session between the edge service and the mobile application using the IP unicast address.</p><p id="p-0009" num="0008">In further embodiments, another machine-readable medium includes computer program code which when executed by a computer carries out the another method of supporting communication between the mobile application executed by the mobile device and the edge service. The further embodiments also include an electronic device configured to execute the another method for supporting communication between the mobile application executed by the mobile device and the edge service according to the another method. In some embodiments, the electronic device is configured to execute a plurality of virtual machines, where the plurality of virtual machines implements the service implementing the another method using network function virtualization (NFV). In some embodiments, the electronic device is a control plane device configured to implement a control plane of a software defined networking (SDN) network that supports the service implementing the another method.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0010" num="0009">The invention may best be understood by referring to the following description and accompanying drawings that are used to illustrate embodiments of the invention. In the drawings:</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram of one embodiment of a network with edge computing resources.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram of one example embodiment of domain name system (DNS) over hypertext transfer protocol secure (HTTPS) (DoH) implemented in an edge computing system to support third party applications and services.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart of one embodiment of a process of a third party application using the DoH service at an edge device.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of one embodiment of a process of a third party DoH service at an edge computing device.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> illustrates connectivity between network devices (NDs) within an exemplary network, as well as three exemplary implementations of the NDs, according to some embodiments of the invention.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> illustrates an exemplary way to implement a special-purpose network device according to some embodiments of the invention.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>5</b>C</figref> illustrates various exemplary ways in which virtual network elements (VNEs) may be coupled according to some embodiments of the invention.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>5</b>D</figref> illustrates a network with a single network element (NE) on each of the NDs, and within this straight forward approach contrasts a traditional distributed approach (commonly used by traditional routers) with a centralized approach for maintaining reachability and forwarding information (also called network control), according to some embodiments of the invention.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>5</b>E</figref> illustrates the simple case of where each of the NDs implements a single NE, but a centralized control plane has abstracted multiple of the NEs in different NDs into (to represent) a single NE in one of the virtual network(s), according to some embodiments of the invention.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>5</b>F</figref> illustrates a case where multiple VNEs are implemented on different NDs and are coupled to each other, and where a centralized control plane has abstracted these multiple VNEs such that they appear as a single VNE within one of the virtual networks, according to some embodiments of the invention.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a general purpose control plane device with centralized control plane (CCP) software <b>650</b>), according to some embodiments of the invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0022" num="0021">The following description describes methods and apparatus for utilizing domain name system (DNS) over hypertext transfer protocol secure (HTTPS) (DoH) services to support third party applications and services in a network with edge computing. In the following description, numerous specific details such as logic implementations, opcodes, means to specify operands, resource partitioning/sharing/duplication implementations, types and interrelationships of system components, and logic partitioning/integration choices are set forth in order to provide a more thorough understanding of the present invention. It will be appreciated, however, by one skilled in the art that the invention may be practiced without such specific details. In other instances, control structures, gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art, with the included descriptions, will be able to implement appropriate functionality without undue experimentation.</p><p id="p-0023" num="0022">References in the specification to &#x201c;one embodiment,&#x201d; &#x201c;an embodiment,&#x201d; &#x201c;an example embodiment,&#x201d; etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to affect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.</p><p id="p-0024" num="0023">Bracketed text and blocks with dashed borders (e.g., large dashes, small dashes, dot-dash, and dots) may be used herein to illustrate optional operations that add additional features to embodiments of the invention. However, such notation should not be taken to mean that these are the only options or optional operations, and/or that blocks with solid borders are not optional in certain embodiments of the invention.</p><p id="p-0025" num="0024">In the following description and claims, the terms &#x201c;coupled&#x201d; and &#x201c;connected,&#x201d; along with their derivatives, may be used. It should be understood that these terms are not intended as synonyms for each other. &#x201c;Coupled&#x201d; is used to indicate that two or more elements, which may or may not be in direct physical or electrical contact with each other, co-operate or interact with each other. &#x201c;Connected&#x201d; is used to indicate the establishment of communication between two or more elements that are coupled with each other.</p><p id="p-0026" num="0025">An electronic device stores and transmits (internally and/or with other electronic devices over a network) code (which is composed of software instructions and which is sometimes referred to as computer program code or a computer program) and/or data using machine-readable media (also called computer-readable media), such as machine-readable storage media (e.g., magnetic disks, optical disks, solid state drives, read only memory (ROM), flash memory devices, phase change memory) and machine-readable transmission media (also called a carrier) (e.g., electrical, optical, radio, acoustical or other form of propagated signals&#x2014;such as carrier waves, infrared signals). Thus, an electronic device (e.g., a computer) includes hardware and software, such as a set of one or more processors (e.g., wherein a processor is a microprocessor, controller, microcontroller, central processing unit, digital signal processor, application specific integrated circuit, field programmable gate array, other electronic circuitry, a combination of one or more of the preceding) coupled to one or more machine-readable storage media to store code for execution on the set of processors and/or to store data. For instance, an electronic device may include non-volatile memory containing the code since the non-volatile memory can persist code/data even when the electronic device is turned off (when power is removed), and while the electronic device is turned on that part of the code that is to be executed by the processor(s) of that electronic device is typically copied from the slower non-volatile memory into volatile memory (e.g., dynamic random access memory (DRAM), static random access memory (SRAM)) of that electronic device. Typical electronic devices also include a set or one or more physical network interface(s) (NI(s)) to establish network connections (to transmit and/or receive code and/or data using propagating signals) with other electronic devices. For example, the set of physical NIs (or the set of physical NI(s) in combination with the set of processors executing code) may perform any formatting, coding, or translating to allow the electronic device to send and receive data whether over a wired and/or a wireless connection. In some embodiments, a physical NI may comprise radio circuitry capable of receiving data from other electronic devices over a wireless connection and/or sending data out to other devices via a wireless connection. This radio circuitry may include transmitter(s), receiver(s), and/or transceiver(s) suitable for radiofrequency communication. The radio circuitry may convert digital data into a radio signal having the appropriate parameters (e.g., frequency, timing, channel, bandwidth, etc.). The radio signal may then be transmitted via antennas to the appropriate recipient(s). In some embodiments, the set of physical NI(s) may comprise network interface controller(s) (NICs), also known as a network interface card, network adapter, or local area network (LAN) adapter. The NIC(s) may facilitate in connecting the electronic device to other electronic devices allowing them to communicate via wire through plugging in a cable to a physical port connected to a NIC. One or more parts of an embodiment of the invention may be implemented using different combinations of software, firmware, and/or hardware.</p><p id="p-0027" num="0026">A network device (ND) is an electronic device that communicatively interconnects other electronic devices on the network (e.g., other network devices, end-user devices). Some network devices are &#x201c;multiple services network devices&#x201d; that provide support for multiple networking functions (e.g., routing, bridging, switching, Layer 2 aggregation, session border control, Quality of Service, and/or subscriber management), and/or provide support for multiple application services (e.g., data, voice, and video).</p><p id="p-0028" num="0027">The embodiments overcome disadvantages of the prior art. In certain telecommunication network deployment models of the prior art, during an ongoing session between a third party application on a mobile user device and a third party application service deployed at a particular edge computing site, the third party application on the mobile user device may have to re-attach to another edge computing site causing the session to drop, e.g., because of an Internet Protocol (IP) address change. This means the third party application running on the mobile user device will need to re-establish communication with the third party application service running on the new edge computing site. In addition, if an instance of the same third party application service is running at the new edge computing site, it may be better for the third party application on the mobile device to connect to it. The prior art does not provide a process where the third party application on the mobile user device is able to discover the third party application service at the new edge computing site.</p><p id="p-0029" num="0028">The embodiments improve the initial communication between applications and services that benefit from localization of computation. There is no need for a special protocol to allow the services to determine the location of the user, then to determine where the application instance is to be located, and then to redirect the client to that instance. Instead, by directing the DoH traffic to the local instance of the DNS resolution server, the determination of the correct service location is inherent.</p><p id="p-0030" num="0029">The embodiments provide a process and system to overcome the problems of the prior art. In some embodiments, a mobility requirement embeds a discovery phase during which, the third party application running on the mobile user device gets to learn the third party application service IP address and (re)-establish connectivity. In the embodiments, the process and system provide a discovery phase for the third party application. The embodiments provide a discovery process that provides advantages that are desirable because the current (third generation partnership project (3GPP)) specification suggests that telecommunication network operators play an active role whereby the network operator provides the third party applications and services with the exact location of a mobile user device. Using such info, the third party application services is expected to be able to send a DNS reply that would point the third party application on the mobile user device to a third party application service instance running at a convenient edge computing site. However, such a procedure that would be consistent with this telecommunication network provider provision of location information puts additional complexities and requirements on both the telecommunication network and the operation of third party applications.</p><p id="p-0031" num="0030">The embodiments provide a process and system where third party services and applications have a discovery process using DoH in distributed edge computing environments including in telecommunication network edge computing deployment scenarios. The advantages of the embodiments include reducing application level communication complexities between telecommunication network infrastructure and third party applications and services. Such communication without the embodiments is too costly on both sides and makes the third party applications and services tightly dependent on the telecommunication network operator, which is a disincentive for third party application and service developers to utilize the edge computing resources. The embodiments reduce the burden on small and medium sized enterprises to deploy applications at telecommunication network edge computing sites by removing the dependency requirement on telecommunication network infrastructure to track the mobile user devices. The embodiments enable telecommunication network operators to offer distributed edge computing solutions in the near future, e.g., no need to wait for 5G components to be deployed.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram of one embodiment of a network with edge computing resources. In the example network, the elements have been abstracted to illustrate those aspects most relevant to the embodiments. One skilled in the art would understand that other similar networks that provide edge computing resources can also be utilized in conjunction with the embodiments described herein. The example network of <figref idref="DRAWINGS">FIG. <b>1</b></figref> is provided by way of example and not limitation.</p><p id="p-0033" num="0032">The network <b>100</b> can be provided and administered by a telecommunications network operator. The network <b>100</b> can include a core telecommunication network <b>111</b> that can include any combination and number of network resources and technologies that enable the mobile user devices <b>115</b>A-C to communicate with the core telecommunication network <b>111</b>, edge computing resources <b>117</b>A-C, cloud service resources <b>103</b>A-C and similar devices and resources. The mobile user devices <b>115</b>A-C can be any type of computing device (e.g., smartphones, handheld devices, and similar computing devices) capable of communicating with the network <b>100</b>. The mobile user devices <b>115</b>A-C can communicate via a radio access network (RAN) or similar medium with any one of a set of edge computing sites <b>101</b>A-C. The edge computing sites <b>101</b>A-C can be geographically distributed to locations (e.g., locations X-Z) that enable positioning of edge computing resources <b>117</b>A-C in proximity to mobile user devices <b>115</b>A-C.</p><p id="p-0034" num="0033">The edge computing sites <b>101</b>A-C can each house any amount or type of edge computing resources <b>117</b>A-C including computing, storage, networking, virtualization, and similar resources. The edge computing resources <b>117</b>A-C can be used by third party application and services providers to position applications and services in proximity to mobile user devices <b>115</b>A-C through multi-tenant virtualized environments administered by the telecommunication network providers to service the third party applications executed at mobile user devices <b>115</b>A-C.</p><p id="p-0035" num="0034">The network <b>100</b> can also enable communication and access to cloud services <b>103</b>A-C by the telecommunication network core <b>111</b>, edge computing sites <b>101</b>A-C, and mobile user devices <b>115</b>A-C. Third party applications and service providers can position services and applications both in cloud services <b>103</b>A-C and in the edge computing sites <b>101</b>A-C. Third party applications and services can migrate between edge computing sites <b>101</b>A-C, cloud services <b>103</b>A-C, and similar locations in the network <b>100</b>. In some embodiments, a portal <b>105</b> enables third party application and service providers to instantiate and manage the instances of their services and application at edge computing sites <b>101</b>A-C.</p><p id="p-0036" num="0035">As used herein, a third party application is a program that can execute in a mobile user device, an edge computing site, or other location in the network <b>100</b>. A third party application executing on a mobile user device can interact with a third party service or application instance at an edge computing site <b>101</b>A-C or similar location in the network <b>100</b>. Third party services or application services including instances thereof are functions and programs that are executed in a computing device (e.g., in an edge computing site) or similar location in the network and generally provide services to third party applications on the mobile user devices.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram of one example embodiment of domain name system (DNS) over hypertext transfer protocol secure (HTTPS) (DoH) implemented in an edge computing system to support third party applications and services. In this example, a third party application is executing on a mobile user device <b>115</b>A-C. The mobile user device <b>115</b>A-C has connected with a new edge computing site <b>101</b>A-C that is more proximate than a prior edge computing site <b>101</b>A-C or in a case of initial connection to the network. The edge computing site <b>101</b>A-C can offer a set of services including services of the third party application and service provider. In the example, the third party application and service provider provides services in a virtual execution environment <b>201</b>. The virtual execution environment can include any number of services that support the applications of the third party application and service provider that are executing at connected mobile user devices <b>115</b>A-C. The services can include a DoH server <b>205</b>, such as a DoH server <b>205</b> that supports Internet Protocol Anycast (IPA).</p><p id="p-0038" num="0037">When the mobile user device <b>115</b>A-C initially connects to a new edge computing location <b>101</b>A-C, due to migration or initial system connection with the network, the third party application can initiate a DoH handshake using an IPA address known to the third party application. The IPA address can be provided to the third party application as part of its installation, configuration, or similar process. In some embodiments, the DoH server IPA address is provided to the third party application at the mobile user device after being installed on the mobile user device (e.g., via DNS).</p><p id="p-0039" num="0038">When the mobile device attaches to a new edge computing site, it changes its anchor point and obtains different IP addresses. The third party application at the mobile user device may try to discover the IP address of an application service instance at the new edge computing site. For this, it probes the closest (topologically) DoH server by using IPA. If an application instance is running at the new edge computing site, it means a co-located DoH server should be able to respond to the third party application request.</p><p id="p-0040" num="0039">The IPA address is general to the DoH server at any edge computing site <b>101</b>A-C for a given third party application and service provider. However, the IPA address cannot be utilized in the reply of the DoH server, as discussed further herein below. The third party application sends the DoH handshake request using the IPA address to the edge computing site <b>101</b>A-C where it is initially processed by the telecommunication network functions provided in an operating environment <b>203</b>. The telecommunication network functions include a user plane function (UPF) that determines how the packet received from the mobile user device <b>115</b>A-C is forwarded. The UPF forwards the received packet based on the IPA address to the local DoH server or the closest DoH server when not available in the same edge computing site <b>101</b>A-C. If no application service instance is running at the new edge computing site <b>101</b>A-C, the UPF can route the IP anycast message to another edge computing site, which may or may not be the previous one the third party application was using.</p><p id="p-0041" num="0040">The DoH server receives the DoH handshake request and prepares a DoH reply that includes an IP address for the specific DoH server that is responding to enable further communication that will allow the third party application at the mobile user device <b>115</b>A-C to establish the location and continue communication with the third party application services at the edge computing site <b>101</b>A-C. For a specific third party application and service provider, a DoH server can respond to all DNS queries regarding all application instances running at the same edge computing site <b>101</b>A-C. This can include different applications and services from the same third party application and services provider. For a specific third party application and service provider, the DoH servers running at one particular edge computing cite can exchange messages between themselves, in order to provider an answer to a DNS query. To obtain information about third party applications, a corresponding DoH server of the third party applications and service provider may query application instances about its IP address or may be remotely configured.</p><p id="p-0042" num="0041">In some embodiments, e.g., in a microservices-oriented architecture, it is possible to have a DoH server instance associated only with one third party application instance at a time. In this deployment, only one DoH server is assigned an IPA address and this DoH sever will also offer DNS-type of service to other DoH servers that can be local to the edge computing site. For example, the DoH server can select and include the unicast IP address of a local DoH server in the TCP option which would direct the third party application to establish a transport layer security (TLS) session with it. In this case, the TLS session may provide different sessions keys to communicate with both the local DoH server as well as with the application service instance.</p><p id="p-0043" num="0042">The operations in the flow diagrams will be described with reference to the exemplary embodiments of the other figures. However, it should be understood that the operations of the flow diagrams can be performed by embodiments of the invention other than those discussed with reference to the other figures, and the embodiments of the invention discussed with reference to these other figures can perform operations different than those discussed with reference to the flow diagrams.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart of one embodiment of a process of a third party application using the DoH service at an edge device. When a third party application at a user mobile device needs DNS information to locate third party applications services, the third party application will initiate a DoH query (Block <b>301</b>) that will be directed to a DoH server. The third party application first sends a transmission control protocol (TCP) handshake to an IPA address of the DoH server (Block <b>303</b>). This TCP handshake will be inherent to establishing a transport layer security (TLS) session. However, an IP anycast address cannot be used as source address, which prevents the DoH server from using the IP anycast address to respond to the TCP handshake using standard TCP handshake response. The DoH server can respond with an IP unicast address (i.e., an IP address specific to the responding DoH server instance) (Block <b>305</b>). The IP unicast address can be provided using different methods. In one example embodiment, the TCP handshake response can be modified to insert a field carrying an IP unicast address assigned to a DOH server instance. In this scenario, the TLS session that is subsequently established using the IP unicast address and all following messages will use the DoH server's IP unicast address. In another embodiment, both endpoints (i.e., the third party application and the DoH server instance) use multipoint TCP (MPTCP). In this embodiment, during the initial TCP handshake, the DoH server instance will use its IP unicast address to respond to the mobile device as an additional IP address (Block <b>307</b>).</p><p id="p-0045" num="0044">Once the third party application receives the IP unicast address of the DoH server instance, then the third party application can complete the establishment of a TLS session with the DoH server using the IP unicast address (Block <b>309</b>). With the TLS session established, the DoH query for third party application services can be sent to the DoH server (Block <b>311</b>). The DoH server can then provide the third party application with a DNS reply over HTTPS (i.e., a DoH reply) (Block <b>313</b>) that can be utilized to maintain or start communication between the third party application at the mobile user device with the third party application services at the edge computing site.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of one embodiment of a process of a third party DoH service at an edge device. The DoH service is provided by a third party application and service provider and can service all applications of the third party application and service provider or any subset of the applications of the third party application and service provider. The process can be initiated by receiving a TCP handshake destined for an IP anycast address associated with DoH service (Block <b>401</b>). The DoH server can reply to the TCP handshake with a TCP handshake reply that specifies an IP unicast address specific to the DoH server instance (Block <b>403</b>). The IP unicast address can be provided by an added field or similar modification to the TCP handshake reply or by use of MPTCP where the reply uses the IP unicast address.</p><p id="p-0047" num="0046">After the TCP session is established, then a TLS session can be set up using TCP between the DoH server instance and the mobile application (Block <b>405</b>). The mobile application can use the TLS session to send a DoH query to identify a location of other services of the third party application and service provider relevant to the mobile application (Block <b>407</b>). The DoH server can then reply with the requested information via a DoH reply to the mobile application (Block <b>409</b>).</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> illustrates connectivity between network devices (NDs) within an exemplary network, as well as three exemplary implementations of the NDs, according to some embodiments of the invention. <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> shows NDs <b>500</b>A-H, and their connectivity by way of lines between <b>500</b>A-<b>500</b>B, <b>500</b>B-<b>500</b>C, <b>500</b>C-<b>500</b>D, <b>500</b>D-<b>500</b>E, <b>500</b>E-<b>500</b>F, <b>500</b>F-<b>500</b>G, and <b>500</b>A-<b>500</b>G, as well as between <b>500</b>H and each of <b>500</b>A, <b>500</b>C, <b>500</b>D, and <b>500</b>G. These NDs are physical devices, and the connectivity between these NDs can be wireless or wired (often referred to as a link). An additional line extending from NDs <b>500</b>A, <b>500</b>E, and <b>500</b>F illustrates that these NDs act as ingress and egress points for the network (and thus, these NDs are sometimes referred to as edge NDs; while the other NDs may be called core NDs).</p><p id="p-0049" num="0048">Two of the exemplary ND implementations in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> are: 1) a special-purpose network device <b>502</b> that uses custom application&#x2014;specific integrated&#x2014;circuits (ASICs) and a special-purpose operating system (OS); and 2) a general purpose network device <b>504</b> that uses common off-the-shelf (COTS) processors and a standard OS.</p><p id="p-0050" num="0049">The special-purpose network device <b>502</b> includes networking hardware <b>510</b> comprising a set of one or more processor(s) <b>512</b>, forwarding resource(s) <b>514</b> (which typically include one or more ASICs and/or network processors), and physical network interfaces (NIs) <b>516</b> (through which network connections are made, such as those shown by the connectivity between NDs <b>500</b>A-H), as well as non-transitory machine readable storage media <b>518</b> having stored therein networking software <b>520</b>. During operation, the networking software <b>520</b> may be executed by the networking hardware <b>510</b> to instantiate a set of one or more networking software instance(s) <b>522</b>. Each of the networking software instance(s) <b>522</b>, and that part of the networking hardware <b>510</b> that executes that network software instance (be it hardware dedicated to that networking software instance and/or time slices of hardware temporally shared by that networking software instance with others of the networking software instance(s) <b>522</b>), form a separate virtual network element <b>530</b>A-R. Each of the virtual network element(s) (VNEs) <b>530</b>A-R includes a control communication and configuration module <b>532</b>A-R (sometimes referred to as a local control module or control communication module) and forwarding table(s) <b>534</b>A-R, such that a given virtual network element (e.g., <b>530</b>A) includes the control communication and configuration module (e.g., <b>532</b>A), a set of one or more forwarding table(s) (e.g., <b>534</b>A), and that portion of the networking hardware <b>510</b> that executes the virtual network element (e.g., <b>530</b>A).</p><p id="p-0051" num="0050">The networking software <b>520</b> can include the DoH Server or Client <b>565</b>, which implement the processes as described herein above (e.g., in relation to <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>4</b></figref>, respectively). In other embodiments, the DoH Server or Client <b>565</b> can be implemented in a user equipment having similar architecture including non-transitory machine readable storage media, processors, and similar resources.</p><p id="p-0052" num="0051">The special-purpose network device <b>502</b> is often physically and/or logically considered to include: 1) a ND control plane <b>524</b> (sometimes referred to as a control plane) comprising the processor(s) <b>512</b> that execute the control communication and configuration module(s) <b>532</b>A-R; and 2) a ND forwarding plane <b>526</b> (sometimes referred to as a forwarding plane, a data plane, or a media plane) comprising the forwarding resource(s) <b>514</b> that utilize the forwarding table(s) <b>534</b>A-R and the physical NIs <b>516</b>. By way of example, where the ND is a router (or is implementing routing functionality), the ND control plane <b>524</b> (the processor(s) <b>512</b> executing the control communication and configuration module(s) <b>532</b>A-R) is typically responsible for participating in controlling how data (e.g., packets) is to be routed (e.g., the next hop for the data and the outgoing physical NI for that data) and storing that routing information in the forwarding table(s) <b>534</b>A-R, and the ND forwarding plane <b>526</b> is responsible for receiving that data on the physical NIs <b>516</b> and forwarding that data out the appropriate ones of the physical NIs <b>516</b> based on the forwarding table(s) <b>534</b>A-R.</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> illustrates an exemplary way to implement the special-purpose network device <b>502</b> according to some embodiments of the invention. <figref idref="DRAWINGS">FIG. <b>5</b>B</figref> shows a special-purpose network device including cards <b>538</b> (typically hot pluggable). While in some embodiments the cards <b>538</b> are of two types (one or more that operate as the ND forwarding plane <b>526</b> (sometimes called line cards), and one or more that operate to implement the ND control plane <b>524</b> (sometimes called control cards)), alternative embodiments may combine functionality onto a single card and/or include additional card types (e.g., one additional type of card is called a service card, resource card, or multi-application card). A service card can provide specialized processing (e.g., Layer 4 to Layer 7 services (e.g., firewall, Internet Protocol Security (IPsec), Secure Sockets Layer (SSL)/Transport Layer Security (TLS), Intrusion Detection System (IDS), peer-to-peer (P2P), Voice over IP (VoIP) Session Border Controller, Mobile Wireless Gateways (Gateway General Packet Radio Service (GPRS) Support Node (GGSN), Evolved Packet Core (EPC) Gateway)). By way of example, a service card may be used to terminate IPsec tunnels and execute the attendant authentication and encryption algorithms. These cards are coupled together through one or more interconnect mechanisms illustrated as backplane <b>536</b> (e.g., a first full mesh coupling the line cards and a second full mesh coupling all of the cards).</p><p id="p-0054" num="0053">Returning to <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, the general purpose network device <b>504</b> includes hardware <b>540</b> comprising a set of one or more processor(s) <b>542</b> (which are often COTS processors) and physical NIs <b>546</b>, as well as non-transitory machine readable storage media <b>548</b> having stored therein software <b>550</b>. During operation, the processor(s) <b>542</b> execute the software <b>550</b> to instantiate one or more sets of one or more applications <b>564</b>A-R. While one embodiment does not implement virtualization, alternative embodiments may use different forms of virtualization. For example, in one such alternative embodiment the virtualization layer <b>554</b> represents the kernel of an operating system (or a shim executing on a base operating system) that allows for the creation of multiple instances <b>562</b>A-R called software containers that may each be used to execute one (or more) of the sets of applications <b>564</b>A-R; where the multiple software containers (also called virtualization engines, virtual private servers, or jails) are user spaces (typically a virtual memory space) that are separate from each other and separate from the kernel space in which the operating system is run; and where the set of applications running in a given user space, unless explicitly allowed, cannot access the memory of the other processes. In another such alternative embodiment the virtualization layer <b>554</b> represents a hypervisor (sometimes referred to as a virtual machine monitor (VMM)) or a hypervisor executing on top of a host operating system, and each of the sets of applications <b>564</b>A-R is run on top of a guest operating system within an instance <b>562</b>A-R called a virtual machine (which may in some cases be considered a tightly isolated form of software container) that is run on top of the hypervisor&#x2014;the guest operating system and application may not know they are running on a virtual machine as opposed to running on a &#x201c;bare metal&#x201d; host electronic device, or through para-virtualization the operating system and/or application may be aware of the presence of virtualization for optimization purposes. In yet other alternative embodiments, one, some or all of the applications are implemented as unikernel(s), which can be generated by compiling directly with an application only a limited set of libraries (e.g., from a library operating system (LibOS) including drivers/libraries of OS services) that provide the particular OS services needed by the application. As a unikernel can be implemented to run directly on hardware <b>540</b>, directly on a hypervisor (in which case the unikernel is sometimes described as running within a LibOS virtual machine), or in a software container, embodiments can be implemented fully with unikernels running directly on a hypervisor represented by virtualization layer <b>554</b>, unikernels running within software containers represented by instances <b>562</b>A-R, or as a combination of unikernels and the above-described techniques (e.g., unikernels and virtual machines both run directly on a hypervisor, unikernels and sets of applications that are run in different software containers).</p><p id="p-0055" num="0054">The networking software <b>550</b> can include the DoH Server or Client <b>565</b>, which implement the processes as described herein above (e.g., in relation to <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>4</b></figref>, respectively). In other embodiments, the DoH Server or Client <b>565</b> can be implemented as virtual network functions in any location in communication with each other.</p><p id="p-0056" num="0055">The instantiation of the one or more sets of one or more applications <b>564</b>A-R, as well as virtualization if implemented, are collectively referred to as software instance(s) <b>552</b>. Each set of applications <b>564</b>A-R, corresponding virtualization construct (e.g., instance <b>562</b>A-R) if implemented, and that part of the hardware <b>540</b> that executes them (be it hardware dedicated to that execution and/or time slices of hardware temporally shared), forms a separate virtual network element(s) <b>560</b>A-R.</p><p id="p-0057" num="0056">The virtual network element(s) <b>560</b>A-R perform similar functionality to the virtual network element(s) <b>530</b>A-R&#x2014;e.g., similar to the control communication and configuration module(s) <b>532</b>A and forwarding table(s) <b>534</b>A (this virtualization of the hardware <b>540</b> is sometimes referred to as network function virtualization (NFV)). Thus, NFV may be used to consolidate many network equipment types onto industry standard high volume server hardware, physical switches, and physical storage, which could be located in Data centers, NDs, and customer premise equipment (CPE). While embodiments of the invention are illustrated with each instance <b>562</b>A-R corresponding to one VNE <b>560</b>A-R, alternative embodiments may implement this correspondence at a finer level granularity (e.g., line card virtual machines virtualize line cards, control card virtual machine virtualize control cards, etc.); it should be understood that the techniques described herein with reference to a correspondence of instances <b>562</b>A-R to VNEs also apply to embodiments where such a finer level of granularity and/or unikernels are used.</p><p id="p-0058" num="0057">In certain embodiments, the virtualization layer <b>554</b> includes a virtual switch that provides similar forwarding services as a physical Ethernet switch. Specifically, this virtual switch forwards traffic between instances <b>562</b>A-R and the physical NI(s) <b>546</b>, as well as optionally between the instances <b>562</b>A-R; in addition, this virtual switch may enforce network isolation between the VNEs <b>560</b>A-R that by policy are not permitted to communicate with each other (e.g., by honoring virtual local area networks (VLANs)).</p><p id="p-0059" num="0058">The third exemplary ND implementation in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> is a hybrid network device <b>506</b>, which includes both custom ASICs/special-purpose OS and COTS processors/standard OS in a single ND or a single card within an ND. In certain embodiments of such a hybrid network device, a platform VM (i.e., a VM that that implements the functionality of the special-purpose network device <b>502</b>) could provide for para-virtualization to the networking hardware present in the hybrid network device <b>506</b>.</p><p id="p-0060" num="0059">Regardless of the above exemplary implementations of an ND, when a single one of multiple VNEs implemented by an ND is being considered (e.g., only one of the VNEs is part of a given virtual network) or where only a single VNE is currently being implemented by an ND, the shortened term network element (NE) is sometimes used to refer to that VNE. Also in all of the above exemplary implementations, each of the VNEs (e.g., VNE(s) <b>530</b>A-R, VNEs <b>560</b>A-R, and those in the hybrid network device <b>506</b>) receives data on the physical NIs (e.g., <b>516</b>, <b>546</b>) and forwards that data out the appropriate ones of the physical NIs (e.g., <b>516</b>, <b>546</b>). For example, a VNE implementing IP router functionality forwards IP packets on the basis of some of the IP header information in the IP packet; where IP header information includes source IP address, destination IP address, source port, destination port (where &#x201c;source port&#x201d; and &#x201c;destination port&#x201d; refer herein to protocol ports, as opposed to physical ports of a ND), transport protocol (e.g., user datagram protocol (UDP), Transmission Control Protocol (TCP), and differentiated services code point (DSCP) values.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>5</b>C</figref> illustrates various exemplary ways in which VNEs may be coupled according to some embodiments of the invention. <figref idref="DRAWINGS">FIG. <b>5</b>C</figref> shows VNEs <b>570</b>A.<b>1</b>-<b>570</b>A.P (and optionally VNEs <b>570</b>A.Q-<b>570</b>A.R) implemented in ND <b>500</b>A and VNE <b>570</b>H.<b>1</b> in ND <b>500</b>H. In <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>, VNEs <b>570</b>A.<b>1</b>-P are separate from each other in the sense that they can receive packets from outside ND <b>500</b>A and forward packets outside of ND <b>500</b>A; VNE <b>570</b>A.<b>1</b> is coupled with VNE <b>570</b>H.<b>1</b>, and thus they communicate packets between their respective NDs; VNE <b>570</b>A.<b>2</b>-<b>570</b>A.<b>3</b> may optionally forward packets between themselves without forwarding them outside of the ND <b>500</b>A; and VNE <b>570</b>A.P may optionally be the first in a chain of VNEs that includes VNE <b>570</b>A.Q followed by VNE <b>570</b>A.R (this is sometimes referred to as dynamic service chaining, where each of the VNEs in the series of VNEs provides a different service&#x2014;e.g., one or more layer 4-7 network services). While <figref idref="DRAWINGS">FIG. <b>5</b>C</figref> illustrates various exemplary relationships between the VNEs, alternative embodiments may support other relationships (e.g., more/fewer VNEs, more/fewer dynamic service chains, multiple different dynamic service chains with some common VNEs and some different VNEs).</p><p id="p-0062" num="0061">The NDs of <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, for example, may form part of the Internet or a private network; and other electronic devices (not shown; such as end user devices including workstations, laptops, netbooks, tablets, palm tops, mobile phones, smartphones, phablets, multimedia phones, Voice Over Internet Protocol (VOIP) phones, terminals, portable media players, GPS units, wearable devices, gaming systems, set-top boxes, Internet enabled household appliances) may be coupled to the network (directly or through other networks such as access networks) to communicate over the network (e.g., the Internet or virtual private networks (VPNs) overlaid on (e.g., tunneled through) the Internet) with each other (directly or through servers) and/or access content and/or services. Such content and/or services are typically provided by one or more servers (not shown) belonging to a service/content provider or one or more end user devices (not shown) participating in a peer-to-peer (P2P) service, and may include, for example, public webpages (e.g., free content, store fronts, search services), private webpages (e.g., username/password accessed webpages providing email services), and/or corporate networks over VPNs. For instance, end user devices may be coupled (e.g., through customer premise equipment coupled to an access network (wired or wirelessly)) to edge NDs, which are coupled (e.g., through one or more core NDs) to other edge NDs, which are coupled to electronic devices acting as servers. However, through compute and storage virtualization, one or more of the electronic devices operating as the NDs in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> may also host one or more such servers (e.g., in the case of the general purpose network device <b>504</b>, one or more of the software instances <b>562</b>A-R may operate as servers; the same would be true for the hybrid network device <b>506</b>; in the case of the special-purpose network device <b>502</b>, one or more such servers could also be run on a virtualization layer executed by the processor(s) <b>512</b>); in which case the servers are said to be co-located with the VNEs of that ND.</p><p id="p-0063" num="0062">A virtual network is a logical abstraction of a physical network (such as that in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>) that provides network services (e.g., L2 and/or L3 services). A virtual network can be implemented as an overlay network (sometimes referred to as a network virtualization overlay) that provides network services (e.g., layer 2 (L2, data link layer) and/or layer 3 (L3, network layer) services) over an underlay network (e.g., an L3 network, such as an Internet Protocol (IP) network that uses tunnels (e.g., generic routing encapsulation (GRE), layer 2 tunneling protocol (L2TP), IPSec) to create the overlay network).</p><p id="p-0064" num="0063">A network virtualization edge (NVE) sits at the edge of the underlay network and participates in implementing the network virtualization; the network-facing side of the NVE uses the underlay network to tunnel frames to and from other NVEs; the outward-facing side of the NVE sends and receives data to and from systems outside the network. A virtual network instance (VNI) is a specific instance of a virtual network on a NVE (e.g., a NE/VNE on an ND, a part of a NE/VNE on a ND where that NE/VNE is divided into multiple VNEs through emulation); one or more VNIs can be instantiated on an NVE (e.g., as different VNEs on an ND). A virtual access point (VAP) is a logical connection point on the NVE for connecting external systems to a virtual network; a VAP can be physical or virtual ports identified through logical interface identifiers (e.g., a VLAN ID).</p><p id="p-0065" num="0064">Examples of network services include: 1) an Ethernet LAN emulation service (an Ethernet-based multipoint service similar to an Internet Engineering Task Force (IETF) Multiprotocol Label Switching (MPLS) or Ethernet VPN (EVPN) service) in which external systems are interconnected across the network by a LAN environment over the underlay network (e.g., an NVE provides separate L2 VNIs (virtual switching instances) for different such virtual networks, and L3 (e.g., IP/MPLS) tunneling encapsulation across the underlay network); and 2) a virtualized IP forwarding service (similar to IETF IP VPN (e.g., Border Gateway Protocol (BGP)/MPLS IPVPN) from a service definition perspective) in which external systems are interconnected across the network by an L3 environment over the underlay network (e.g., an NVE provides separate L3 VNIs (forwarding and routing instances) for different such virtual networks, and L3 (e.g., IP/MPLS) tunneling encapsulation across the underlay network)). Network services may also include quality of service capabilities (e.g., traffic classification marking, traffic conditioning and scheduling), security capabilities (e.g., filters to protect customer premises from network&#x2014;originated attacks, to avoid malformed route announcements), and management capabilities (e.g., full detection and processing).</p><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>5</b>D</figref> illustrates a network with a single network element on each of the NDs of <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, and within this straight forward approach contrasts a traditional distributed approach (commonly used by traditional routers) with a centralized approach for maintaining reachability and forwarding information (also called network control), according to some embodiments of the invention. Specifically, <figref idref="DRAWINGS">FIG. <b>5</b>D</figref> illustrates network elements (NEs) <b>570</b>A-H with the same connectivity as the NDs <b>500</b>A-H of <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>.</p><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>5</b>D</figref> illustrates that the distributed approach <b>572</b> distributes responsibility for generating the reachability and forwarding information across the NEs <b>570</b>A-H; in other words, the process of neighbor discovery and topology discovery is distributed.</p><p id="p-0068" num="0067">For example, where the special-purpose network device <b>502</b> is used, the control communication and configuration module(s) <b>532</b>A-R of the ND control plane <b>524</b> typically include a reachability and forwarding information module to implement one or more routing protocols (e.g., an exterior gateway protocol such as Border Gateway Protocol (BGP), Interior Gateway Protocol(s) (IGP) (e.g., Open Shortest Path First (OSPF), Intermediate System to Intermediate System (IS-IS), Routing Information Protocol (RIP), Label Distribution Protocol (LDP), Resource Reservation Protocol (RSVP) (including RSVP-Traffic Engineering (TE): Extensions to RSVP for LSP Tunnels and Generalized Multi-Protocol Label Switching (GMPLS) Signaling RSVP-TE)) that communicate with other NEs to exchange routes, and then selects those routes based on one or more routing metrics. Thus, the NEs <b>570</b>A-H (e.g., the processor(s) <b>512</b> executing the control communication and configuration module(s) <b>532</b>A-R) perform their responsibility for participating in controlling how data (e.g., packets) is to be routed (e.g., the next hop for the data and the outgoing physical NI for that data) by distributively determining the reachability within the network and calculating their respective forwarding information. Routes and adjacencies are stored in one or more routing structures (e.g., Routing Information Base (RIB), Label Information Base (LIB), one or more adjacency structures) on the ND control plane <b>524</b>. The ND control plane <b>524</b> programs the ND forwarding plane <b>526</b> with information (e.g., adjacency and route information) based on the routing structure(s). For example, the ND control plane <b>524</b> programs the adjacency and route information into one or more forwarding table(s) <b>534</b>A-R (e.g., Forwarding Information Base (FIB), Label Forwarding Information Base (LFIB), and one or more adjacency structures) on the ND forwarding plane <b>526</b>. For layer 2 forwarding, the ND can store one or more bridging tables that are used to forward data based on the layer 2 information in that data. While the above example uses the special-purpose network device <b>502</b>, the same distributed approach <b>572</b> can be implemented on the general purpose network device <b>504</b> and the hybrid network device <b>506</b>.</p><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>5</b>D</figref> illustrates that a centralized approach <b>574</b> (also known as software defined networking (SDN)) that decouples the system that makes decisions about where traffic is sent from the underlying systems that forwards traffic to the selected destination. The illustrated centralized approach <b>574</b> has the responsibility for the generation of reachability and forwarding information in a centralized control plane <b>576</b> (sometimes referred to as a SDN control module, controller, network controller, OpenFlow controller, SDN controller, control plane node, network virtualization authority, or management control entity), and thus the process of neighbor discovery and topology discovery is centralized. The centralized control plane <b>576</b> has a south bound interface <b>582</b> with a data plane <b>580</b> (sometime referred to the infrastructure layer, network forwarding plane, or forwarding plane (which should not be confused with a ND forwarding plane)) that includes the NEs <b>570</b>A-H (sometimes referred to as switches, forwarding elements, data plane elements, or nodes). The centralized control plane <b>576</b> includes a network controller <b>578</b>, which includes a centralized reachability and forwarding information module <b>579</b> that determines the reachability within the network and distributes the forwarding information to the NEs <b>570</b>A-H of the data plane <b>580</b> over the south bound interface <b>582</b> (which may use the OpenFlow protocol). Thus, the network intelligence is centralized in the centralized control plane <b>576</b> executing on electronic devices that are typically separate from the NDs.</p><p id="p-0070" num="0069">For example, where the special-purpose network device <b>502</b> is used in the data plane <b>580</b>, each of the control communication and configuration module(s) <b>532</b>A-R of the ND control plane <b>524</b> typically include a control agent that provides the VNE side of the south bound interface <b>582</b>. In this case, the ND control plane <b>524</b> (the processor(s) <b>512</b> executing the control communication and configuration module(s) <b>532</b>A-R) performs its responsibility for participating in controlling how data (e.g., packets) is to be routed (e.g., the next hop for the data and the outgoing physical NI for that data) through the control agent communicating with the centralized control plane <b>576</b> to receive the forwarding information (and in some cases, the reachability information) from the centralized reachability and forwarding information module <b>579</b> (it should be understood that in some embodiments of the invention, the control communication and configuration module(s) <b>532</b>A-R, in addition to communicating with the centralized control plane <b>576</b>, may also play some role in determining reachability and/or calculating forwarding information&#x2014;albeit less so than in the case of a distributed approach; such embodiments are generally considered to fall under the centralized approach <b>574</b>, but may also be considered a hybrid approach).</p><p id="p-0071" num="0070">While the above example uses the special-purpose network device <b>502</b>, the same centralized approach <b>574</b> can be implemented with the general purpose network device <b>504</b> (e.g., each of the VNE <b>560</b>A-R performs its responsibility for controlling how data (e.g., packets) is to be routed (e.g., the next hop for the data and the outgoing physical NI for that data) by communicating with the centralized control plane <b>576</b> to receive the forwarding information (and in some cases, the reachability information) from the centralized reachability and forwarding information module <b>579</b>; it should be understood that in some embodiments of the invention, the VNEs <b>560</b>A-R, in addition to communicating with the centralized control plane <b>576</b>, may also play some role in determining reachability and/or calculating forwarding information&#x2014;albeit less so than in the case of a distributed approach) and the hybrid network device <b>506</b>. In fact, the use of SDN techniques can enhance the NFV techniques typically used in the general purpose network device <b>504</b> or hybrid network device <b>506</b> implementations as NFV is able to support SDN by providing an infrastructure upon which the SDN software can be run, and NFV and SDN both aim to make use of commodity server hardware and physical switches.</p><p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. <b>5</b>D</figref> also shows that the centralized control plane <b>576</b> has a north bound interface <b>584</b> to an application layer <b>586</b>, in which resides application(s) <b>588</b>. The centralized control plane <b>576</b> has the ability to form virtual networks <b>592</b> (sometimes referred to as a logical forwarding plane, network services, or overlay networks (with the NEs <b>570</b>A-H of the data plane <b>580</b> being the underlay network)) for the application(s) <b>588</b>. Thus, the centralized control plane <b>576</b> maintains a global view of all NDs and configured NEs/VNEs, and it maps the virtual networks to the underlying NDs efficiently (including maintaining these mappings as the physical network changes either through hardware (ND, link, or ND component) failure, addition, or removal).</p><p id="p-0073" num="0072">The applications <b>588</b> can include the DoH Server or Client <b>581</b>, which implement the processes as described herein above (e.g., in relation to <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>4</b></figref>, respectively). In other embodiments, the DoH Server or Client <b>565</b> can be implemented in other components of the SDN including in the network controller <b>578</b>, in the data plane <b>580</b>, in switches <b>570</b>A-H and in similar locations.</p><p id="p-0074" num="0073">While <figref idref="DRAWINGS">FIG. <b>5</b>D</figref> shows the distributed approach <b>572</b> separate from the centralized approach <b>574</b>, the effort of network control may be distributed differently or the two combined in certain embodiments of the invention. For example: 1) embodiments may generally use the centralized approach (SDN) <b>574</b>, but have certain functions delegated to the NEs (e.g., the distributed approach may be used to implement one or more of fault monitoring, performance monitoring, protection switching, and primitives for neighbor and/or topology discovery); or 2) embodiments of the invention may perform neighbor discovery and topology discovery via both the centralized control plane and the distributed protocols, and the results compared to raise exceptions where they do not agree. Such embodiments are generally considered to fall under the centralized approach <b>574</b>, but may also be considered a hybrid approach.</p><p id="p-0075" num="0074">While <figref idref="DRAWINGS">FIG. <b>5</b>D</figref> illustrates the simple case where each of the NDs <b>500</b>A-H implements a single NE <b>570</b>A-H, it should be understood that the network control approaches described with reference to <figref idref="DRAWINGS">FIG. <b>5</b>D</figref> also work for networks where one or more of the NDs <b>500</b>A-H implement multiple VNEs (e.g., VNEs <b>530</b>A-R, VNEs <b>560</b>A-R, those in the hybrid network device <b>506</b>). Alternatively or in addition, the network controller <b>578</b> may also emulate the implementation of multiple VNEs in a single ND. Specifically, instead of (or in addition to) implementing multiple VNEs in a single ND, the network controller <b>578</b> may present the implementation of a VNE/NE in a single ND as multiple VNEs in the virtual networks <b>592</b> (all in the same one of the virtual network(s) <b>592</b>, each in different ones of the virtual network(s) <b>592</b>, or some combination). For example, the network controller <b>578</b> may cause an ND to implement a single VNE (a NE) in the underlay network, and then logically divide up the resources of that NE within the centralized control plane <b>576</b> to present different VNEs in the virtual network(s) <b>592</b> (where these different VNEs in the overlay networks are sharing the resources of the single VNE/NE implementation on the ND in the underlay network).</p><p id="p-0076" num="0075">On the other hand, <figref idref="DRAWINGS">FIGS. <b>5</b>E and <b>5</b>F</figref> respectively illustrate exemplary abstractions of NEs and VNEs that the network controller <b>578</b> may present as part of different ones of the virtual networks <b>592</b>. <figref idref="DRAWINGS">FIG. <b>5</b>E</figref> illustrates the simple case of where each of the NDs <b>500</b>A-H implements a single NE <b>570</b>A-H (see <figref idref="DRAWINGS">FIG. <b>5</b>D</figref>), but the centralized control plane <b>576</b> has abstracted multiple of the NEs in different NDs (the NEs <b>570</b>A-C and G-H) into (to represent) a single NE <b>5701</b> in one of the virtual network(s) <b>592</b> of <figref idref="DRAWINGS">FIG. <b>5</b>D</figref>, according to some embodiments of the invention. <figref idref="DRAWINGS">FIG. <b>5</b>E</figref> shows that in this virtual network, the NE <b>5701</b> is coupled to NE <b>570</b>D and <b>570</b>F, which are both still coupled to NE <b>570</b>E.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>5</b>F</figref> illustrates a case where multiple VNEs (VNE <b>570</b>A.<b>1</b> and VNE <b>570</b>H.<b>1</b>) are implemented on different NDs (ND <b>500</b>A and ND <b>500</b>H) and are coupled to each other, and where the centralized control plane <b>576</b> has abstracted these multiple VNEs such that they appear as a single VNE <b>570</b>T within one of the virtual networks <b>592</b> of <figref idref="DRAWINGS">FIG. <b>5</b>D</figref>, according to some embodiments of the invention. Thus, the abstraction of a NE or VNE can span multiple NDs.</p><p id="p-0078" num="0077">While some embodiments of the invention implement the centralized control plane <b>576</b> as a single entity (e.g., a single instance of software running on a single electronic device), alternative embodiments may spread the functionality across multiple entities for redundancy and/or scalability purposes (e.g., multiple instances of software running on different electronic devices).</p><p id="p-0079" num="0078">Similar to the network device implementations, the electronic device(s) running the centralized control plane <b>576</b>, and thus the network controller <b>578</b> including the centralized reachability and forwarding information module <b>579</b>, may be implemented a variety of ways (e.g., a special purpose device, a general-purpose (e.g., COTS) device, or hybrid device). These electronic device(s) would similarly include processor(s), a set or one or more physical NIs, and a non-transitory machine-readable storage medium having stored thereon the centralized control plane software. For instance, <figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates, a general purpose control plane device <b>604</b> including hardware <b>640</b> comprising a set of one or more processor(s) <b>642</b> (which are often COTS processors) and physical NIs <b>646</b>, as well as non-transitory machine readable storage media <b>648</b> having stored therein centralized control plane (CCP) software <b>650</b>.</p><p id="p-0080" num="0079">The non-transitory machine readable medium <b>648</b> can also store the DoH Server or Client <b>565</b>, which implement the processes as described herein above (e.g., in relation to <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>4</b></figref>, respectively). In other embodiments, the DoH Server or Client <b>565</b> can be implemented in network controller instances <b>678</b>, Applications layers <b>680</b> and in similar locations in the control plane device <b>604</b>.</p><p id="p-0081" num="0080">In embodiments that use compute virtualization, the processor(s) <b>642</b> typically execute software to instantiate a virtualization layer <b>654</b> (e.g., in one embodiment the virtualization layer <b>654</b> represents the kernel of an operating system (or a shim executing on a base operating system) that allows for the creation of multiple instances <b>662</b>A-R called software containers (representing separate user spaces and also called virtualization engines, virtual private servers, or jails) that may each be used to execute a set of one or more applications; in another embodiment the virtualization layer <b>654</b> represents a hypervisor (sometimes referred to as a virtual machine monitor (VMM)) or a hypervisor executing on top of a host operating system, and an application is run on top of a guest operating system within an instance <b>662</b>A-R called a virtual machine (which in some cases may be considered a tightly isolated form of software container) that is run by the hypervisor; in another embodiment, an application is implemented as a unikernel, which can be generated by compiling directly with an application only a limited set of libraries (e.g., from a library operating system (LibOS) including drivers/libraries of OS services) that provide the particular OS services needed by the application, and the unikernel can run directly on hardware <b>640</b>, directly on a hypervisor represented by virtualization layer <b>654</b> (in which case the unikernel is sometimes described as running within a LibOS virtual machine), or in a software container represented by one of instances <b>662</b>A-R). Again, in embodiments where compute virtualization is used, during operation an instance of the CCP software <b>650</b> (illustrated as CCP instance <b>676</b>A) is executed (e.g., within the instance <b>662</b>A) on the virtualization layer <b>654</b>. In embodiments where compute virtualization is not used, the CCP instance <b>676</b>A is executed, as a unikernel or on top of a host operating system, on the &#x201c;bare metal&#x201d; general purpose control plane device <b>604</b>. The instantiation of the CCP instance <b>676</b>A, as well as the virtualization layer <b>654</b> and instances <b>662</b>A-R if implemented, are collectively referred to as software instance(s) <b>652</b>.</p><p id="p-0082" num="0081">In some embodiments, the CCP instance <b>676</b>A includes a network controller instance <b>678</b>. The network controller instance <b>678</b> includes a centralized reachability and forwarding information module instance <b>679</b> (which is a middleware layer providing the context of the network controller <b>578</b> to the operating system and communicating with the various NEs), and an CCP application layer <b>680</b> (sometimes referred to as an application layer) over the middleware layer (providing the intelligence required for various network operations such as protocols, network situational awareness, and user&#x2014;interfaces). At a more abstract level, this CCP application layer <b>680</b> within the centralized control plane <b>576</b> works with virtual network view(s) (logical view(s) of the network) and the middleware layer provides the conversion from the virtual networks to the physical view.</p><p id="p-0083" num="0082">The centralized control plane <b>576</b> transmits relevant messages to the data plane <b>580</b> based on CCP application layer <b>680</b> calculations and middleware layer mapping for each flow. A flow may be defined as a set of packets whose headers match a given pattern of bits; in this sense, traditional IP forwarding is also flow-based forwarding where the flows are defined by the destination IP address for example; however, in other implementations, the given pattern of bits used for a flow definition may include more fields (e.g., 10 or more) in the packet headers. Different NDs/NEs/VNEs of the data plane <b>580</b> may receive different messages, and thus different forwarding information. The data plane <b>580</b> processes these messages and programs the appropriate flow information and corresponding actions in the forwarding tables (sometime referred to as flow tables) of the appropriate NE/VNEs, and then the NEs/VNEs map incoming packets to flows represented in the forwarding tables and forward packets based on the matches in the forwarding tables.</p><p id="p-0084" num="0083">Standards such as OpenFlow define the protocols used for the messages, as well as a model for processing the packets. The model for processing packets includes header parsing, packet classification, and making forwarding decisions. Header parsing describes how to interpret a packet based upon a well-known set of protocols. Some protocol fields are used to build a match structure (or key) that will be used in packet classification (e.g., a first key field could be a source media access control (MAC) address, and a second key field could be a destination MAC address).</p><p id="p-0085" num="0084">Packet classification involves executing a lookup in memory to classify the packet by determining which entry (also referred to as a forwarding table entry or flow entry) in the forwarding tables best matches the packet based upon the match structure, or key, of the forwarding table entries. It is possible that many flows represented in the forwarding table entries can correspond/match to a packet; in this case the system is typically configured to determine one forwarding table entry from the many according to a defined scheme (e.g., selecting a first forwarding table entry that is matched). Forwarding table entries include both a specific set of match criteria (a set of values or wildcards, or an indication of what portions of a packet should be compared to a particular value/values/wildcards, as defined by the matching capabilities&#x2014;for specific fields in the packet header, or for some other packet content), and a set of one or more actions for the data plane to take on receiving a matching packet. For example, an action may be to push a header onto the packet, for the packet using a particular port, flood the packet, or simply drop the packet. Thus, a forwarding table entry for IPv4/IPv6 packets with a particular transmission control protocol (TCP) destination port could contain an action specifying that these packets should be dropped.</p><p id="p-0086" num="0085">Making forwarding decisions and performing actions occurs, based upon the forwarding table entry identified during packet classification, by executing the set of actions identified in the matched forwarding table entry on the packet.</p><p id="p-0087" num="0086">However, when an unknown packet (for example, a &#x201c;missed packet&#x201d; or a &#x201c;match-miss&#x201d; as used in OpenFlow parlance) arrives at the data plane <b>580</b>, the packet (or a subset of the packet header and content) is typically forwarded to the centralized control plane <b>576</b>. The centralized control plane <b>576</b> will then program forwarding table entries into the data plane <b>580</b> to accommodate packets belonging to the flow of the unknown packet. Once a specific forwarding table entry has been programmed into the data plane <b>580</b> by the centralized control plane <b>576</b>, the next packet with matching credentials will match that forwarding table entry and take the set of actions associated with that matched entry.</p><p id="p-0088" num="0087">While the invention has been described in terms of several embodiments, those skilled in the art will recognize that the invention is not limited to the embodiments described, can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of supporting communication between a service executed by an edge server and a mobile application, the method comprising:<claim-text>receiving a transmission control protocol (TCP) handshake with an Internet Protocol (IP) anycast address from the mobile application;</claim-text><claim-text>replying to the TCP handshake with an IP unicast address for the service to be utilized for a transport layer security (TLS) session; and</claim-text><claim-text>establishing the TLS session between the service and the mobile application using the IP unicast address.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the IP unicast address is provided in a modified TCP handshake reply.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the IP unicast address is provided to the mobile application by multipath TCP.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>receiving a domain name system (DNS) over hypertext transfer protocol secure (HTTPS) (DoH) query from the mobile application.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:<claim-text>replying to the DNS query with DNS information via a DoH reply.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. (canceled)</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. An electronic device for supporting communication between a service executed by an edge server and a mobile application, the electronic device comprising:<claim-text>one or more processors; and</claim-text><claim-text>a memory comprising instructions which, when executed by the one or more processors, cause the electronic device to:<claim-text>receive a transmission control protocol (TCP) handshake with an Internet Protocol (IP) anycast address from the mobile application;</claim-text><claim-text>reply to the TCP handshake with an IP unicast address for the service to be utilized for a transport layer security (TLS) session; and</claim-text><claim-text>establish the TLS session between the service and the mobile application using the IP unicast address.</claim-text></claim-text></claim-text></claim><claim id="CLM-008-9" num="008-9"><claim-text><b>8</b>-<b>9</b>. (canceled)</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A method of supporting communication between a mobile application executed by a mobile device and an edge service, the method comprising:<claim-text>sending a transmission control protocol (TCP) handshake with an Internet Protocol (IP) anycast address to the edge service;</claim-text><claim-text>receiving a reply to the TCP handshake with an IP unicast address for the edge service to be utilized for a transport layer security (TLS) session; and</claim-text><claim-text>establishing the TLS session between the edge service and the mobile application using the IP unicast address.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the IP unicast address is received in a modified TCP handshake reply.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the IP unicast address is received via multipath TCP.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:<claim-text>sending a domain name system (DNS) over hypertext transfer protocol secure (HTTPS) (DoH) query to the edge service.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:<claim-text>receiving a DoH reply to the DNS query with DNS information.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. (canceled)</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. An electronic device for supporting communication between a mobile application executed by a mobile device and an edge service, the electronic device comprising:<claim-text>one or more processors; and</claim-text><claim-text>a memory comprising instructions which, when executed by the one or more processors, cause the electronic device to:<claim-text>send a transmission control protocol (TCP) handshake with an Internet Protocol (IP) anycast address to the edge service;</claim-text><claim-text>receive a reply to the TCP handshake with an IP unicast address for the edge service to be utilized for a transport layer security (TLS) session; and</claim-text><claim-text>establish the TLS session between the edge service and the mobile application using the IP unicast address.</claim-text></claim-text></claim-text></claim><claim id="CLM-17-18" num="17-18"><claim-text><b>17</b>-<b>18</b>. (canceled)</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The electronic device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the IP unicast address is provided in a modified TCP handshake reply.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The electronic device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the IP unicast address is provided to the mobile application by multipath TCP.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The electronic device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further to:<claim-text>receive a domain name system (DNS) over hypertext transfer protocol secure (HTTPS) (DoH) query from the mobile application.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The electronic device of <claim-ref idref="CLM-00021">claim 21</claim-ref>, further to:<claim-text>reply to the DNS query with DNS information via a DoH reply.</claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The electronic device of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the IP unicast address is received in a modified TCP handshake reply.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The electronic device of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the IP unicast address is received via multipath TCP.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The electronic device of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further to:<claim-text>send a domain name system (DNS) over hypertext transfer protocol secure (HTTPS) (DoH) query to the edge service.</claim-text></claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The electronic device of <claim-ref idref="CLM-00025">claim 25</claim-ref>, further to:<claim-text>receive a DoH reply to the DNS query with DNS information.</claim-text></claim-text></claim></claims></us-patent-application>