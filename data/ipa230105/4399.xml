<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004400A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004400</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17943265</doc-number><date>20220913</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20180101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4401</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20190101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>1</main-group><subgroup>3234</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20160101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>0804</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20190101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>1</main-group><subgroup>3287</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4418</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>1</main-group><subgroup>3268</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>0804</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>1</main-group><subgroup>3287</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2212</main-group><subgroup>1032</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEM AND METHOD FOR PROVIDING SYSTEM LEVEL SLEEP STATE POWER SAVINGS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16718656</doc-number><date>20191218</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11449346</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17943265</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>ADVANCED MICRO DEVICES, INC.</orgname><address><city>SANTA CLARA</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>RAHEJA</last-name><first-name>JYOTI</first-name><address><city>BOXBOROUGH</city><state>MA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>KANAYAMA</last-name><first-name>HIDEKI</first-name><address><city>SANTA CLARA</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>KRISHNAN</last-name><first-name>GUHAN</first-name><address><city>BOXBOROUGH</city><state>MA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>PENG</last-name><first-name>RUIHUA</first-name><address><city>SANTA CLARA</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A system for providing system level sleep state power savings includes a plurality of memory channels and corresponding plurality of memories coupled to respective memory channels. The system includes one or more processors operative to receive information indicating that a system level sleep state is to be entered and in response to receiving the system level sleep indication, moves data stored in at least a first of the plurality of memories to at least a second of the plurality of memories. In some implementations, in response to moving the data to the second memory, the processor causes power management logic to shut off power to: at least the first memory, to a corresponding first physical layer device operatively coupled to the first memory and to a first memory controller operatively coupled to the first memory and place the second memory in a self-refresh mode of operation.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="116.42mm" wi="158.75mm" file="US20230004400A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="248.24mm" wi="169.25mm" orientation="landscape" file="US20230004400A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="171.20mm" wi="117.69mm" file="US20230004400A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="222.00mm" wi="116.08mm" file="US20230004400A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="233.09mm" wi="115.49mm" file="US20230004400A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="190.25mm" wi="115.15mm" file="US20230004400A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND OF THE DISCLOSURE</heading><p id="p-0002" num="0001">Portable devices such as laptops, smart devices, wearables and other portable devices require improved power saving to increase battery life. Other devices such as game consoles, servers and computer systems also may require power savings to save energy costs and reduce heat generation. Many devices have systems that support multiple power states that correspond to power states defined, for example, in the Advanced Configuration and Power Interface (ACPI) specification or other adopted specifications. System level power states describe the power consumption of the system as a whole. Operating systems typically support multiple system power states that may have different levels of power consumption, different software resumption techniques, hardware latency considerations and system hardware data management. Data can include context information in volatile processor registers, memory caches, random-access memory and must be managed so that the operating system can reboot or return to the working state in an appropriate manner.</p><p id="p-0003" num="0002">When a device is in a system level sleep state, such as an &#x201c;S3&#x201d; power state as defined by the ACPI Standard, processors are off and after a wakeup event, control starts from the processor's reset vector. For example, with some devices, a &#x201c;sleep&#x201d; button may be activated from an operating system menu which puts the systems in the S3 power savings state. The system sleep state saves system level state information to memory and powers off most of the system components except the physical layer memory channel interface (e.g., physical layer interface) power rails and the dynamic random-access memory (DRAM) (e.g., DIMMS) attached to the physical interfaces. The physical layer memory channel interfaces are kept in a low power state (power is still provided to the circuits, but they operate in a low power state) and memory is kept in a self-refresh mode to keep channels on, but in a low power state until the user or any system event, like a power button press or USB device connection, requests a system to come back to an active or working state. As such, even during a system sleep state, the channels, through the physical memory channel interfaces and the memories themselves, consume some power which can add up over the course of a duration of the system inactiveness. Memory controllers that are connected to the physical layer memory channel interfaces are also typically shut off since their voltage rail is typically shut off but the physical layer memory channel interfaces and memories themselves are still drawing power. This can add up to significant amounts of power consumption for computers, game consoles and other devices and may lead to eventual system shutdown for battery operated devices. In addition, as devices become more and more complex, an increasing number of memory channels are being used with high bandwidth memory (HBM) which are high performance random-access memory interfaces for 3D-stacked SDRAM so during S3 sleep state, more and more power is consumed as the added high bandwidth memories are in self-refresh mode and the physical layer memory channel interfaces are also still consuming power in a low power mode.</p><p id="p-0004" num="0003">Therefore, a need exists for methods and systems to provide improved power savings during a system level sleep state mode.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004">The implementations will be more readily understood in view of the following description when accompanied by the below figures, wherein like reference numerals represent like elements, and wherein:</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating a device that employs system level sleep state power savings in accordance with one example set forth in the disclosure;</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart illustrating a method for providing system level sleep state power savings and illustrates entry operations of a sleep power state in accordance with one example set forth in the disclosure;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart illustrating a method for providing system level sleep state power savings and illustrates entry operations of a sleep power state in accordance with one example set forth in the disclosure;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart illustrating a method for providing system level sleep state power savings and illustrates exit operations of a sleep power state in accordance with one example set forth in the disclosure; and</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart illustrating a method for providing system level sleep state power savings and illustrates moving data in accordance with one example set forth in the disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DETAILED DESCRIPTION OF IMPLEMENTATIONS</heading><p id="p-0011" num="0010">In some implementations, during a system level sleep state mode, data such as system state information is moved from current memories to a fewer number of memories to reduce the number of memories and physical layer memory channel interfaces that are in low power mode and in self-refresh mode. In these implementations, the power is turned off for all the physical layer memory channel interfaces and corresponding memories that have their state information moved to other memories. Power savings is improved by shutting power off to memory channels in a system level sleep mode.</p><p id="p-0012" num="0011">In certain implementations, a method for providing system level sleep state power savings in a system that employs a plurality of memory channels and corresponding plurality of memories coupled to respective memory channels, includes receiving information indicating a system level sleep state is to be entered and in response to receiving the information indicating the system level sleep state is to be entered, moving data stored in at least a first memory to at least a second memory of the plurality of memories. The method includes, in response to moving the data to the second memory, shutting off power at least: to the first memory, to a corresponding first physical layer interface forming a first channel associated with the first memory and to a first memory controller operatively coupled to the first memory, and placing the second memory corresponding to a second channel in a self-refresh mode of operation.</p><p id="p-0013" num="0012">In some examples, the method further includes receiving an indication to enter a system level working state and a powering on the first memory, the corresponding first physical layer device and the first memory controller. In certain examples, the method includes and changing the second memory from a self-refresh mode to a normal operating mode. In certain examples, each of the plurality of memories are dynamic random-access memories and the data includes context data for one or more processes of the one or more processors of the system.</p><p id="p-0014" num="0013">In some examples, moving data stored in at least the first of the plurality of memories to at least a second of the plurality of memories includes determining a plurality of dirty pages in the first memory associated with the first channel, moving the determined dirty pages to available physical pages of memory in the second memory associated with the second channel, and remapping page table entries associated with the moved dirty pages for one or more processes that were using the dirty pages prior to movement of the page tables.</p><p id="p-0015" num="0014">In certain examples, moving data stored in at least the first memory to at least the second memory of the plurality of memories includes causing a data transport network, under control of a controller, to copy data from the first memory to the second memory. In some examples, the method includes shutting off power at least to the first memory, to the first physical layer device and to the first memory controller includes configuring the first memory controller to cause power to be shut off to the first memory and to the first physical layer device. In some examples, the method includes using the moved data stored in the second of the plurality of memories to restart processes of a processor when waking up out of the system level sleep state.</p><p id="p-0016" num="0015">In certain implementations, a system for providing system level sleep state power savings includes a plurality of memory channels and corresponding plurality of memories coupled to respective memory channels. The system includes one or more processors that receive information indicating that a system level sleep state is to be entered and in response to receiving the system level sleep indication, moves data stored in at least a first memory to at least a second memory of the plurality of memories. In some implementations, in response to moving the data to the second memory, the processor causes power management logic to shut off power to: at least the first memory, to a corresponding first physical layer device, and to a first memory controller and place the second memory in a self-refresh mode of operation.</p><p id="p-0017" num="0016">In certain implementations, one or more processors receives an indication to enter a system level working state and in response to the system level working state indication, causes the power management logic to power on the first memory, the corresponding first physical layer device and the first memory controller, and change the second memory from a self-refresh mode to a normal operating mode. In some examples, each of the plurality of memories are dynamic random-access memories.</p><p id="p-0018" num="0017">In certain examples, one or more processors move data stored in the first memory to the second memory of the plurality of memories by at least determining a plurality of dirty pages in the first memory associated with the first channel. The processor moves the determined dirty pages to available physical pages of memory in the second memory associated with the second channel and remaps page table entries associated with the moved dirty pages for one or more processes that were using the dirty pages prior to movement of the page tables. In some examples, the processor uses the moved data stored in the second memory of the plurality of memories to restart processes when waking up out of the system level sleep state.</p><p id="p-0019" num="0018">In certain examples, the system includes a data transport network that moves the data stored in the first memory to the second memory of the plurality of memories by copying data from the first memory to the second memory. In some examples, memory controller configuration logic configures the memory controller to shut off power at least to the first memory and to the first physical layer device.</p><p id="p-0020" num="0019">In some examples, the one or more processors includes at least one central processing core and another of the processors includes at least one graphics processing core. In certain examples, the first and second memories are used as main memory of the system. In some examples, the system further includes a display that displays data from the first and second memories during normal operation. In certain examples, the system is comprised of a system on chip (SoC). In some examples, the processor executes a stored operating system from system memory that provides the information indicating a system level sleep state is to be entered.</p><p id="p-0021" num="0020">In certain implementations, a non-transitory storage medium stores executable instructions that when executed by one or more processors causes the one or more processors to receive information indicating a system level sleep state is to be entered and in response to receiving the system level sleep indication, move data stored in at least a first memory to at least a second memory of the plurality of memories. The storage medium stores instructions that when executed by the one or more processors, causes the one or more processors to cause power management logic to shut off power at least: to the first memory, to a corresponding first physical layer device operatively coupled to the first memory and to a first memory controller operatively coupled to the first memory, and place the second memory in a self-refresh mode of operation.</p><p id="p-0022" num="0021">In some implementations, the non-transitory storage medium includes stored executable instructions that when executed by one or more processors causes the one or more processors to receive an indication to enter a system level working state, in response to the system level working state indication, cause the power management logic to power on the first memory, the corresponding first physical layer device and the first memory controller, and change the second memory from a self-refresh mode to a normal operating mode.</p><p id="p-0023" num="0022">In certain examples, the non-transitory storage medium includes stored executable instructions that when executed by one or more processors causes the one or more processors to move data stored in at least the first memory to at least the second memory of the plurality of memories by at least determining a plurality of dirty pages in the first memory associated with the first channel, moving the determined dirty pages to available physical pages of memory in the second memory associated with the second channel, and remapping page table entries associated with the moved dirty pages for one or more processes that were using the dirty pages prior to movement of the page tables.</p><p id="p-0024" num="0023">In some examples, the non-transitory storage medium includes stored executable instructions that when executed by one or more processors causes the one or more processors to use the moved data stored in the second memory of the plurality of memories to restart processes when waking up out of the system level sleep state.</p><p id="p-0025" num="0024">In certain examples, the non-transitory storage medium includes stored executable instructions that when executed by one or more processors causes the one or more processors to cause a data transport network to copy data from the first memory to the second memory and configuring a first memory controller to cause power to be shut off to the first memory and to the first physical layer interface.</p><p id="p-0026" num="0025">In some implementations, only selected physical layer memory channel interfaces are allowed to operate in a low power state and corresponding memories are in self-refresh mode while power rails to other physical layer memory channel interfaces are shut off and corresponding memories are completely shut off. Among other technical benefits, power savings is improved by completely shutting off power to some memory channels while leaving certain other memory channels in low power mode resulting in longer device battery life and/or reduced heat generation.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates one example of a system <b>100</b> that includes a plurality of memory channels <b>102</b>, <b>104</b>, <b>106</b>, <b>108</b> and corresponding plurality of memories <b>110</b>, <b>112</b>, <b>114</b>, <b>116</b> that are coupled to the respective memory channels. In this example, each of the memories includes DRAM. Each of the memories <b>110</b>-<b>116</b> is coupled to a respective physical layer interface such as a physical layer memory channel interface <b>118</b>, <b>120</b>, <b>122</b>, <b>124</b> respectively. The system <b>100</b>, in this example, includes a plurality of processors <b>126</b> and <b>128</b> such as one or more central processing unit (CPU) cores, graphics processing unit (GPU) cores or any other suitable digital processing logic. The system <b>100</b> includes memory controllers (UMCs) <b>130</b> and <b>132</b> that are, in this example, unified memory controllers that allow both CPU cores and GPU cores to store and retrieve data from the memories. In this example, memory controller <b>130</b> uses channel <b>1</b> and channel <b>2</b> to access memories <b>110</b> and <b>112</b> respectively, whereas memory controller <b>132</b> controls data access for memories <b>114</b> and <b>116</b> using channel <b>3</b> and channel <b>4</b> such that in some implementations one channel is used to control one DRAM. It will be recognized that any suitable number of channels may be provided by respective memory controllers and that any suitable number of memories may also be employed as needed.</p><p id="p-0028" num="0027">A data transport network <b>134</b>, such as a scalable data fabric, provides data <b>136</b> and <b>138</b> (e.g., using a data transport communication protocol) to or from data providing and data consuming devices such as the processors <b>126</b>, <b>128</b> as well as any other suitable devices. In this example, a multimedia device <b>140</b> and display controller <b>142</b> are also shown and generate or consume data that is stored to or retrieved from the memories <b>110</b>-<b>116</b> through the respective memory controllers <b>130</b> and <b>132</b>.</p><p id="p-0029" num="0028">In this example, the system <b>100</b> also includes power management logic (PML) <b>144</b>, also referred to as a power management unit (PMU), that includes memory controller configuration logic <b>146</b> and physical layer interface power control logic <b>148</b>. The memory controller configuration logic <b>146</b> provides memory controller configuration data <b>150</b> and <b>152</b> (e.g., using a system management network protocol) and any other suitable information to control the memory controllers <b>130</b> and <b>132</b>. The physical layer interface power control logic <b>148</b> provides power control information <b>149</b> to control power to physical layer memory channel interfaces, in this example using switch <b>151</b>. In some implementations, the power management logic is accessed through a scalable control fabric that transports control/configuration information, but no such fabric is needed.</p><p id="p-0030" num="0029">In this example, the switch <b>151</b> is controlled to provide power to respective physical layer memory channel interfaces <b>122</b> and <b>124</b>. For example, power supply <b>156</b> (e.g., a VDD rail) supplies power to physical layer memory channel interfaces <b>118</b> and <b>120</b> and to physical layer memory channel interfaces <b>122</b> and <b>124</b> through switch <b>151</b>. In certain implementations, different power rails are used for each physical layer memory channel interface or groups of interfaces as needed so that desired interfaces can be turned off while others are kept on when attached memory is in self refresh mode. In some implementations, each of the memory controllers <b>130</b> and <b>132</b> include power controllers <b>170</b> and <b>172</b> that send power up and power down commands to the memories <b>110</b>-<b>116</b>. In one example, the power down commands to the memories cause particular DRAMs (e.g., DDRS or DDR<b>4</b> compliant DDRAMs) to go into a self-refresh mode for those channels that are left in a low power state as further described below. In some implementations, two separate voltage supply domains are used to supply power to the memories <b>110</b>-<b>116</b>, through multiple voltage regulators (e.g., off-chip regulators) shown as memory power rails <b>158</b>. One domain or rail for the memories <b>114</b> and <b>116</b> is turned off through one or more switches <b>163</b> and <b>165</b> and one that is kept on for memories <b>110</b> and <b>112</b>. For example, a power rail for memories <b>110</b> and <b>112</b> is always on but the memories <b>110</b> and <b>112</b> are controlled to enter a self-refresh state during the system sleep state whereas the power rail to memories <b>114</b> and <b>116</b> is switchable to be on or off and switched to an off state by the power management logic <b>144</b> via power control information <b>166</b> from the physical layer interface power control logic <b>148</b> during the system sleep state. In certain implementations, the physical layer interface power control logic <b>148</b> sends the power control information <b>166</b> through a southbridge circuit to the switches <b>163</b> and <b>165</b>, however any suitable mechanism may be employed to shut off power to the memories <b>114</b> and <b>116</b> during the sleep state.</p><p id="p-0031" num="0030">In this example, the processor <b>128</b> (e.g., part of a hybrid processor, multicore processor or any other suitable processor) executes an operating system and power state control driver. In one example, the processor executes a driver that when executed, serves as a system level sleep state memory channel power shutoff controller <b>180</b>.</p><p id="p-0032" num="0031">In one example, the system <b>100</b> includes memory <b>103</b> which in this example, is shown as system memory, however any suitable memory may be employed. The memory <b>103</b> in some implementations stores executable instructions that when executed by the one or more processors <b>128</b> and <b>126</b>, cause the one or more processors to carry out the operations as described herein. The memory <b>103</b> may be any suitable memory including ROM, RAM, persistent memory, distributed memory that is available across multiple devices, servers, may be cloud based memory accessible by the one or more processors or any other suitable storage medium.</p><p id="p-0033" num="0032">The data transport network <b>134</b> in one example, is a scalable data fabric as known in the art which serves as a data communication plane such that data from and to the processor cores and to other peripherals such as the memory controllers and input/output devices such as USB, PCI Express or other peripherals, are routed. The data transport network can extend over multiple dies as well as multiple sockets over PCI Express links.</p><p id="p-0034" num="0033">The power management logic <b>144</b> in one example, connects to other components, such as scalable communication fabrics, as needed. In other examples, the power management logic can be implemented as any suitable hardware, circuitry or processing logic that executes instructions that when executed, cause the memory controller configuration logic and physical layer interface power control logic to carry out the operations as described herein. The data transport network <b>134</b> also may be any suitable structure that routes data or may not be needed depending on the architecture.</p><p id="p-0035" num="0034">The system level sleep state memory channel power shutoff controller <b>180</b> in one example, is implemented as one or more processing cores executing code, such as a driver, stored in memory <b>103</b> that when executed, causes the one or more processing cores to operate as described herein. Alternatively, the system level sleep state memory channel power shutoff controller <b>180</b> may be implemented as part of application specific integrated circuit, dedicated hardware, or any other suitable structure as desired.</p><p id="p-0036" num="0035">The memories are shown as being dynamic random-access memories but may be any suitable memories and the data that is moved in this example, is context data for one or more processes that are operational on the one or more processors <b>128</b> and <b>126</b> and needed for proper wakeup of the system from a sleep state. Other data may also be moved. For example, one or more applications, applets, firmware or any other processes operating on the processors store context data in the memories and the context data and any other required data for wakeup is moved corresponding to certain channels so that only certain channels are left on while other channels are completely shut off. The context data is saved for use in coming out of the sleep state so that the system may boot up in a proper fashion. As such, the system <b>100</b> uses the moved data that is stored in memory <b>110</b> and/or memory <b>112</b> to restart processes of a processor when waking up out of the system level sleep state.</p><p id="p-0037" num="0036">Referring also to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, a method <b>200</b> for providing system level sleep state power savings is shown and may be performed, for example, by the processor <b>128</b> and in particular, the system level sleep state memory channel power shutoff controller <b>180</b>, however any suitable structure may be employed. In certain embodiments, the method includes receiving information indicating a system level sleep state is to be entered as shown in block <b>202</b>. For example, the operating system executing on processor <b>128</b> detects that a system level sleep state is to be entered and sets a register or otherwise informs the system level sleep state memory channel power shutoff controller <b>180</b> of the system level sleep state condition. As such, the information may be a software call, register bits, or any other data indicating a system level sleep state is to be entered. As shown in block <b>204</b>, the method includes moving data that is stored in at least a first of the plurality of memories <b>114</b> and <b>116</b> to at least a second of the plurality of memories such as memory <b>110</b> and/or memory <b>112</b>. For purposes of illustration and not limitation, the operation will be described wherein four channels are provided by the system <b>100</b> each through a physical layer memory channel interface <b>118</b>-<b>124</b> to four sets of memories <b>110</b>-<b>116</b>. As noted above, the memories <b>110</b>-<b>116</b> can include, for example, 3D stacked memories such as high bandwidth memories or any other suitable memories as desired. Accordingly, in normal operation, four channels are used by the system through two memory controllers <b>130</b> and <b>132</b>. In response to a system level sleep state being entered, in this example data is moved from channel <b>3</b> and channel <b>4</b> from memories <b>114</b> and <b>116</b> respectively to channels <b>1</b> and <b>2</b> for storage in memories <b>110</b> and <b>112</b> respectively. In one example, moving of the data includes running software (e.g. a driver) that will result in data movement using the data transport network from memories <b>114</b> and <b>116</b> to one or more of memories <b>110</b> and <b>112</b> through channels <b>1</b> and/or <b>2</b>. This is done, for example, by the system level sleep state memory channel power shutoff controller <b>180</b> sending requisite control information <b>186</b> to cause the moving (e.g., copying) of data.</p><p id="p-0038" num="0037">As shown in block <b>206</b>, the method includes shutting off power to the first memory, such as memory <b>114</b> and/or memory <b>116</b>, and to corresponding physical layer memory channel interface <b>122</b> and <b>124</b>. In one implementation this is done under the control of system level power management logic <b>144</b>. All system level voltage rails/power domains are controlled by PML <b>144</b>. In this example, the system level sleep state memory channel power shutoff controller <b>180</b> sends power control information <b>188</b> to the power management logic <b>144</b> to cause the physical layer memory channel interfaces <b>122</b> and <b>124</b> to have their voltages shutoff via control of switch <b>151</b>. In this example, the physical layer interface power control logic <b>148</b> sends power control information <b>149</b> to shutoff the power supply <b>156</b> to the physical layer memory channel interfaces <b>122</b> and <b>124</b> by opening up the switch <b>151</b>. In this example, the power control information <b>188</b> also informs the physical layer interface power control logic <b>148</b> to cause the switches <b>163</b> and <b>165</b> to shutoff power to memories <b>114</b> and <b>116</b>. For example, the physical layer interface power control logic <b>148</b> sends power down commands to the switches <b>163</b> and <b>165</b> after the physical layer memory channel interfaces <b>122</b> and <b>124</b> have been shut down, or in any suitable order. Any other suitable approach may also be employed to shutoff power of the memories. As such, power is shutoff as part of a system level sleep state, to the memories and corresponding physical layer interfaces associated with the memories for channels <b>3</b>-<b>4</b>. Stated another way, power to channel <b>3</b> through channel <b>4</b> are completely turned off. The data that was in memories<b>114</b>-<b>116</b> are moved to memory <b>110</b> and/or memory <b>112</b> prior to power being turned off.</p><p id="p-0039" num="0038">As shown in block <b>208</b>, the method includes placing the second memory, in this example, memory <b>110</b> and/or memory <b>112</b>, corresponding to a second channel such as channel <b>1</b> and/or channel <b>2</b>, in a self-refresh mode of operation and placing the physical layer memory channel interfaces <b>118</b> and <b>120</b> in a low power state. The memory controllers <b>130</b> and <b>132</b> in one example are also powered off via their respective power controllers <b>170</b> and <b>172</b> along with power off to the processors <b>126</b> and <b>128</b> and other components of the system as desired. In some examples, the memories <b>110</b> and <b>112</b> and physical layer memory channel interfaces <b>118</b> and <b>120</b> have a power rail that is always on, but the memories are placed in self-refresh operation during the system sleep state.</p><p id="p-0040" num="0039">Accordingly, unlike prior systems that kept all the DRAMs in a self-refresh state and their corresponding physical layer interfaces in low power state (e.g., all channels in low power state), the system <b>100</b> moves data from channels <b>3</b>-<b>4</b> (their data stored in respective memories) to one or more of channel <b>1</b> and/or channel <b>2</b> (their respective DRAMs) and shuts off power to memories <b>114</b>, <b>116</b> and physical layer memory channel interfaces <b>122</b> and <b>124</b>. In some examples, when high bandwidth memory channels are employed, power savings can range from 17.5 milliwatts to 140 milliwatts per channel depending upon the technology and the DRAM features. This power savings can be significant for high bandwidth memory and as the number of channels increase in a system, the power savings also increases. Other advantages will be recognized by those of ordinary skill in the art.</p><p id="p-0041" num="0040">The system <b>100</b> may be any suitable system including, but not limited to, a system on-chip (SoC), laptop device, wearable, smart phone, game console, server machine, desktop device, or any other suitable device. The processors <b>126</b> and <b>128</b> may be implemented in any suitable fashion and may include one or more processing cores, APUs, or any other configuration. The various components are interconnected through suitable communication paths that may include buses, configuration registers and any other suitable mechanisms. In one example, the system level sleep state memory channel power shutoff controller <b>180</b> sets configuration registers associated with the power management logic <b>144</b> to cause the power management logic to remove power, reduce power as needed for the memory controllers, physical layer interfaces and DRAMs. However, any suitable mechanism may be employed.</p><p id="p-0042" num="0041">When the system <b>100</b> comes out of the system level sleep state and wants to enter a working state or normal state, the method includes receiving an indication to enter a system level working state. For example, the system level sleep state memory channel power shutoff controller <b>180</b> which when implemented as a driver executing on the processor, receives notification from the operating system that the system <b>100</b> has been changed to operate in a working state. In response to the system level working state indication, the method includes powering on the first memory such as memory <b>114</b> and/or memory <b>116</b> and their corresponding physical layer memory channel interfaces <b>122</b> and <b>124</b> and changing the memory <b>110</b> and/or <b>112</b> from a self-refresh mode to a normal operating mode. For example, the system level sleep state memory channel power shutoff controller <b>180</b> serves as a power on controller and sets the appropriate registers of the power management logic and/or sends appropriate power control information <b>188</b> to cause the physical layer interface power control logic to provide normal power to the physical layer memory channel interfaces <b>122</b> and <b>124</b> as well as inform the memory controller configuration logic <b>146</b> to have the memory controller <b>132</b> provide the requisite power control information to the DRAMs to apply power to memories <b>114</b> and <b>116</b>. Any other suitable mechanism may be employed to power on the memory corresponding physical layer devices so that the channels <b>3</b>-<i>n </i>are in normal operating mode.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates one example of a method for providing system level sleep state power savings in a system that employs a plurality of memory channels and corresponding plurality of memories coupled to respective memory channels. In one example, as shown in block <b>300</b>, the operating system determines to go into a system sleep state, such as sleep state S3, when the system <b>100</b> is idle. As shown in block <b>302</b>, the driver and in this example, the system level sleep state memory channel power shutoff controller <b>180</b> moves the data from the DRAMs and in this example, the state of all of the high bandwidth memory channels from channels <b>3</b>-<i>n </i>to channel <b>1</b> and/or channel <b>2</b>. In this example, channels <b>1</b> and <b>2</b> are set as default, to be left in lower power mode, but any suitable channel scan be selected as desired.</p><p id="p-0044" num="0043">As shown in block <b>304</b>, when a SLP_typex is written with the S3 value, such as a power management logic register, the power management logic <b>144</b> carries out the operations to enact the S3 sleep state power saving level per the ACPI standard. As shown in block <b>306</b>, the system level sleep state memory channel power shutoff controller <b>180</b> causes the power management logic <b>144</b> to place the selected memories, in this example memories <b>110</b> and/or <b>112</b>, into low power auto refresh or self-refresh state while shutting off power to memory channels <b>3</b>-<i>n </i>which means shutting off power to the physical layer memory channel interfaces <b>122</b>-<b>124</b> and to memories <b>114</b>-<b>116</b>. As such, instead of keeping all the memory channels in self-refresh operation, only channels <b>1</b> and/or <b>2</b> are kept in self-refresh operation and all other channels are powered down by the system level sleep state memory channel power shutoff controller <b>180</b> using the power management logic <b>144</b>. This is done using the power supply separation such that individual power supply control is provided to allow shutting off of power to channels <b>3</b>-<i>n </i>and allowing a low power state to be provided to the physical layer memory channel interfaces <b>118</b> and <b>120</b> and/or memories <b>110</b> and <b>112</b>. As shown in block <b>308</b>, the method includes removing other power from the system <b>100</b>. For example, the power from the processors <b>126</b> and <b>128</b> may be shut off as well as to the memory controllers <b>130</b>, <b>132</b>, data transport network <b>134</b> and any other suitable systems or subsystems. As such, at this point, only the devices supporting the memory channels <b>1</b> and/or <b>2</b> are powered but in a low power state.</p><p id="p-0045" num="0044">Referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a method <b>400</b> for providing system level sleep state power savings is illustrated for when the system is woken up from a system sleep state. As shown in block <b>402</b>, in one example, the operating system detects a wakeup event that causes the system <b>100</b> to wake and the powered off memories <b>114</b> and <b>112</b> and physical layer memory channel interfaces <b>112</b> and <b>124</b> are also powered up. In one example, the power management logic <b>144</b> causes the powering up of the memories <b>114</b> and <b>116</b> and physical layer memory channel interfaces <b>122</b> and <b>124</b> that were previously powered off during the system level sleep state. Other components are also put in their normal operating mode. For example, the memories <b>110</b> and <b>112</b> are taken out of self-refresh mode and memory controllers are put in normal operating mode. As shown in block <b>404</b>, the method includes the operating system programming an initial boot configuration of the processor <b>128</b>, such as the model specific (MSR) and memory type range (MTRR) registers. As shown in block <b>406</b>, the method includes initializing a cache controller to an initial boot size and configuration. As shown in block <b>408</b>, the method includes the power management logic <b>144</b> initializing the memories <b>114</b>, <b>116</b> and physical layer memory channel interfaces <b>122</b> and <b>124</b> that were powered off. As shown in block <b>410</b>, the method includes enabling the memory controller to accept memory accesses from the data transport network. As shown in block <b>412</b>, the method includes jumping to the waking vector. As shown in block <b>414</b>, the method includes performing a boot sequence and as shown in block <b>416</b>, the method includes using the data that was moved to the channels <b>1</b> and/or <b>2</b> by processes in the processor <b>128</b> and/or <b>126</b>.</p><p id="p-0046" num="0045">As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, moving data stored in at least a first plurality of memories to at least a second of the plurality of memories includes determining a plurality of dirty pages in the first memory associated with the first channel as shown in block <b>502</b>. By way of example, the system level sleep state memory channel power shutoff controller <b>180</b> finds out the list of dirty pages in channels <b>3</b>-<i>n</i>. Dirty pages in physical memory have been updated by a process but not written to disk or permanent memory. Context data or process state data is stored in a page format. In one example, each channel handles <b>1</b> gigabit per second and the memories are partitioned in <b>4</b>k size pages and each page is allocated to a process being carried out by the system, such as an application being executed by one or more processors. However, any suitable channel speed and page size may be employed. For each process, a virtual page table is used to map to physical page locations.</p><p id="p-0047" num="0046">As shown in block <b>504</b>, the method includes moving the determined dirty pages to available physical pages of memory in the second memory (i.e., memory <b>110</b>) associated with the second channel (i.e., channel <b>1</b>). In one example, the system level sleep state memory channel power shutoff controller <b>180</b> sends control information <b>186</b> to the data transport network <b>134</b> to move the dirty pages to available physical pages of memory in channels <b>1</b> and/or <b>2</b>. As shown in block <b>506</b>, the method includes remapping page table entries associated with the new dirty pages for the one or more processes that were using the dirty pages, prior to movement of the page tables. Stated another way, for each dirty page that is moved, the system level sleep state memory channel power shutoff controller <b>180</b> (e.g., driver executing on the processor <b>128</b>) determines the processes that were using the physical memory pages that were moved, using reverse mapping operations through physical table entry chain information stored for each physical page. However, any suitable technique may be employed. As shown in block <b>508</b>, the method includes updating the page table entries for those processes so that the page tables are remapped reflecting the movement of the page tables to channels <b>1</b> and/or <b>2</b> from channels <b>3</b>-<i>n. </i></p><p id="p-0048" num="0047">As described above, a system for providing system level sleep state power savings receives information indicating a system level sleep state is to be entered and in response to receiving the system level sleep indication, moves data stored in at least a first of the plurality of memories to at least a second of the plurality of memories, in response to moving the data to the second memory causing power management logic to shut off power to: at least the first memory, to a corresponding first physical layer device operatively coupled to the first memory and to a first memory controller operatively coupled to the first memory, and place the second memory in a self-refresh mode of operation.</p><p id="p-0049" num="0048">In some implementations, the system of one or more processors (e.g., a driver executing on the process) receives an indication to enter a system level working state and in response to the system level working state indication, causes the power management logic to power on the first memory, the corresponding first physical layer device and the first memory controller, and change the second memory from a self-refresh mode to a normal operating mode.</p><p id="p-0050" num="0049">In certain implementations, one or more processors move data stored in at least the first of the plurality of memories to at least a second of the plurality of memories by at least determining a plurality of dirty pages in the first memory associated with the first channel, moving the determined dirty pages to available physical pages of memory in the second memory associated with the second channel, and remapping page table entries associated with the moved dirty pages for one or more processes that were using the dirty pages prior to movement of the page tables.</p><p id="p-0051" num="0050">In some implementations, one or processors use the moved data stored in the second of the plurality of memories to restart processes when the system is waking up out of the system level sleep state.</p><p id="p-0052" num="0051">In certain implementations, a data transport network under control of a controller, moves the data stored in at least the first of the plurality of memories to at least the second of the plurality of memories by copying data from the first memory to the second memory, and memory controller configuration logic configures the first memory controller to shut off power at least to the first memory and to the first physical layer device.</p><p id="p-0053" num="0052">In some implementations, the one or more processors includes at least one central processing core and another of the processors includes at least one graphics processing core, and wherein the first and second memories are used as main memory of the system and wherein the system further includes a display that displays data from at least one of the first and second memories during normal operation. In certain implementations, the processor executes a stored operating system from system memory that provides the information indicating a system level sleep state is to be entered.</p><p id="p-0054" num="0053">In some implementations, a non-transitory storage medium stores executable instructions that when executed by one or more processors causes the one or more processors to receive information indicating a system level sleep state is to be entered. In response to receiving the system level sleep indication, move data stored in at least a first of the plurality of memories to at least a second of the plurality of memories. In response to moving the data to the second memory, causing power management logic to shut off power at least: to the first memory, to a corresponding first physical layer device operatively coupled to the first memory and to a first memory controller operatively coupled to the first memory, and place the second memory in a self-refresh mode of operation.</p><p id="p-0055" num="0054">In certain implementations, the non-transitory storage medium stores executable instructions that when executed by one or more processors causes the one or more processors to receive an indication to enter a system level working state, in response to the system level working state indication, cause the power management logic to power on the first memory, the corresponding first physical layer device and the first memory controller, and change the second memory from a self-refresh mode to a normal operating mode.</p><p id="p-0056" num="0055">In some implementations, the non-transitory storage medium stores executable instructions that when executed by one or more processors causes the one or more processors to move data stored in at least the first of the plurality of memories to at least a second of the plurality of memories by at least determining a plurality of dirty pages in the first memory associated with the first channel, moving the determined dirty pages to available physical pages of memory in the second memory associated with the second channel, and remapping page table entries associated with the moved dirty pages for one or more processes that were using the dirty pages prior to movement of the page tables.</p><p id="p-0057" num="0056">In certain implementations, the non-transitory storage medium stores executable instructions that when executed by one or more processors causes the one or more processors to use the moved data stored in the second of the plurality of memories to restart processes when waking up out of the system level sleep state.</p><p id="p-0058" num="0057">In some implementations, the non-transitory storage medium stores executable instructions that when executed by one or more processors causes the one or more processors to cause a data transport network to copy data from the first memory to the second memory and configuring a first memory controller to cause power to be shut off to the first memory and to the first physical layer interface.</p><p id="p-0059" num="0058">In certain embodiments as described above, during a system level sleep state mode, data such as system state information is moved from current memories to a fewer number of memories to reduce the number of memories and physical layer memory channel interfaces that are in low power mode and in self-refresh mode. In these implementations, the power is turned off for all the other physical layer memory channel interfaces and corresponding memories that have their state information moved to other memories. Power savings is improved by shutting power off to memory channels in a system level sleep mode instead of having all memories operate in a self-refresh mode.</p><p id="p-0060" num="0059">The above detailed description and the examples described therein have been presented for the purposes of illustration and description only and not for limitation. For example, the operations described are done in any suitable manner. It is therefore contemplated that the present implementations cover any and all modifications, variations or equivalents that fall within the scope of the basic underlying principles disclosed above and claimed herein. Furthermore, while the above description describes hardware in the form of a processor executing code, hardware in the form of a state machine or dedicated logic capable of producing the same effect, other structures are also contemplated.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-01-20" num="01-20"><claim-text><b>1</b>.-<b>20</b>. (canceled)</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. Power management logic comprising:<claim-text>logic operative to:</claim-text><claim-text>shut off power at least to a first memory, to all of a corresponding first physical layer interface operatively coupled to the first memory and to a first memory controller operatively coupled to the first memory; and</claim-text><claim-text>place a second memory in a self-refresh mode of operation after data is moved from the first memory to the second memory.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The power management logic of <claim-ref idref="CLM-00021">claim 21</claim-ref> wherein the logic is operative to send power control information to shutoff power to the physical layer interface, to the first memory controller and to cause a shutoff of power to the first memory.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The power management logic of <claim-ref idref="CLM-00022">claim 22</claim-ref> wherein the power control information comprises control information that controls a switch and wherein shutting off power to all of the first physical layer interface comprises controlling the switch to remove a power voltage from the first physical layer interface.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. A system comprising:<claim-text>instruction memory comprising executable instructions; and</claim-text><claim-text>one or more processors operative to execute the executable instructions, that cause the one or more processors to:<claim-text>receive information indicating a system level sleep state is to be entered;</claim-text><claim-text>in response to receiving the system level sleep indication, move data stored in at least a first memory to at least a second memory;</claim-text><claim-text>in response to moving the data to the second memory, causing power management logic to:<claim-text>shut off power at least to the first memory, to all of a corresponding first physical layer interface operatively coupled to the first memory and to a first memory controller operatively coupled to the first memory; and</claim-text><claim-text>place the second memory in a self-refresh mode of operation.</claim-text></claim-text></claim-text></claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The system of <claim-ref idref="CLM-00024">claim 24</claim-ref> comprising the power management logic and comprising a switch controllable by the power management logic and wherein shutting off power to all of the first physical layer interface comprises controlling the switch to remove a power voltage from the first physical layer interface, and wherein the one or more processors is operative to:<claim-text>receive an indication to enter a system level working state;</claim-text><claim-text>in response to the system level working state indication, cause the power management logic to power on the first memory, the corresponding first physical layer interface and the first memory controller; and</claim-text><claim-text>change the second memory from a self-refresh mode to a normal operating mode.</claim-text></claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The system of <claim-ref idref="CLM-00024">claim 24</claim-ref> wherein the one or more processors are operative to move data stored in at least the first memory to at least the second memory of the plurality of memories by at least:<claim-text>determining a plurality of dirty pages in the first memory associated with the first channel;</claim-text><claim-text>moving the determined dirty pages to available physical pages of memory in the second memory associated with the second channel; and</claim-text><claim-text>remapping page table entries associated with the moved dirty pages for one or more processes that were using the dirty pages prior to movement of the page tables.</claim-text></claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The system of <claim-ref idref="CLM-00024">claim 24</claim-ref> wherein the one or processors are operative to use the moved data stored in the second memory of the plurality of memories to restart processes when waking up out of the system level sleep state.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The system of <claim-ref idref="CLM-00024">claim 24</claim-ref> comprising:<claim-text>a data transport network, operatively coupled to the one or more processors, operative to move the data stored in at least the first memory to at least the second memory of the plurality of memories by copying data from the first memory to the second memory as controlled by the one or more processors; and</claim-text><claim-text>memory controller configuration logic operatively coupled to the one or more processors and to the first memory controller, operative to configure the first memory controller to shut off power at least to the first memory and to the first physical layer interface.</claim-text></claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The system of <claim-ref idref="CLM-00024">claim 24</claim-ref> wherein the one or more processors comprises at least one central processing core and another of the processors comprises at least one graphics processing core, and wherein the first and second memories are used as main memory of the system and wherein the system further comprises a display operatively coupled to display data from at least one of the first and second memories during normal operation.</claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The system of <claim-ref idref="CLM-00024">claim 24</claim-ref> wherein the system is comprised of a system on chip (SoC).</claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. The system of <claim-ref idref="CLM-00024">claim 24</claim-ref> wherein the processor is operative to execute a stored operating system from system memory that provides the information indicating a system level sleep state is to be entered.</claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. A method for providing system level sleep state power savings in a system, the method comprising:<claim-text>shutting off power at least to a first memory, to all of a corresponding first physical layer interface operatively coupled to the first memory and to a first memory controller operatively coupled to the first memory; and</claim-text><claim-text>placing a second memory in a self-refresh mode of operation after data is moved from the first memory to the second memory.</claim-text></claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The method of <claim-ref idref="CLM-00032">claim 32</claim-ref> further comprising sending power control information to shutoff power to the physical layer interface, to the first memory controller and to cause a shutoff of power to the first memory.</claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The method of <claim-ref idref="CLM-00033">claim 33</claim-ref> wherein the power control information comprises control information that controls a switch and wherein shutting off power to all of the first physical layer interface comprises controlling the switch to remove a power voltage from the first physical layer interface.</claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. The method of <claim-ref idref="CLM-00032">claim 32</claim-ref> further comprising:<claim-text>receiving information indicating that a system level sleep state is to be entered;</claim-text><claim-text>in response to receiving the system level sleep indication, moving data stored in at least the first memory to at least a second memory; and wherein</claim-text><claim-text>shut offing power at least to the first memory, to all of the corresponding first physical layer interface and to the first memory controller is performed in response to moving the data to the second memory.</claim-text></claim-text></claim><claim id="CLM-00036" num="00036"><claim-text><b>36</b>. The method of <claim-ref idref="CLM-00035">claim 35</claim-ref> further comprising:<claim-text>receiving an indication to enter a system level working state;</claim-text><claim-text>in response to the system level working state indication, powering on the first memory, the corresponding first physical layer interface and the first memory controller; and</claim-text><claim-text>changing the second memory from a self-refresh mode to a normal operating mode.</claim-text></claim-text></claim><claim id="CLM-00037" num="00037"><claim-text><b>37</b>. The method of <claim-ref idref="CLM-00035">claim 35</claim-ref> further comprising:<claim-text>determining a plurality of dirty pages in the first memory associated with a first channel;</claim-text><claim-text>moving the determined dirty pages to available physical pages of memory in the second memory associated with a second channel; and</claim-text><claim-text>remapping page table entries associated with the moved dirty pages for one or more processes that were using the dirty pages prior to movement of the page tables.</claim-text></claim-text></claim><claim id="CLM-00038" num="00038"><claim-text><b>38</b>. The method of <claim-ref idref="CLM-00032">claim 32</claim-ref> further comprising using the moved data stored in the second memory to restart processes when waking up out of the system level sleep state.</claim-text></claim><claim id="CLM-00039" num="00039"><claim-text><b>39</b>. The method of <claim-ref idref="CLM-00032">claim 32</claim-ref> further comprising executing a stored operating system from system memory that provides the information indicating a system level sleep state is to be entered.</claim-text></claim><claim id="CLM-00040" num="00040"><claim-text><b>40</b>. The method of <claim-ref idref="CLM-00035">claim 35</claim-ref> wherein moving data comprises copying data from the first memory to the second memory using one or more processors; and<claim-text>wherein the method further comprises using memory controller configuration logic operatively coupled to the one or more processors and to the first memory controller, to configure the first memory controller to shut off power at least to the first memory and to the first physical layer interface.</claim-text></claim-text></claim></claims></us-patent-application>