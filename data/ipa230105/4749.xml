<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004750A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004750</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363147</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>62</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>18</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9032</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>906</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6223</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>1805</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>90332</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>906</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6256</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">ABNORMAL LOG EVENT DETECTION AND PREDICTION</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>International Business Machines Corporation</orgname><address><city>Armonk</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Wang</last-name><first-name>Yi Ming</first-name><address><city>Xian</city><country>CN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Dong</last-name><first-name>Hui</first-name><address><city>Xian</city><country>CN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Yuan</last-name><first-name>Zhong Fang</first-name><address><city>Xian</city><country>CN</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Liu</last-name><first-name>Tong</first-name><address><city>Xian</city><country>CN</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Liu</last-name><first-name>Yan Fen</first-name><address><city>Tianjin</city><country>CN</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Chen</last-name><first-name>Ling</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The embodiments of the present disclosure disclose a computer-implemented method, computer system and a computer program product for detecting and predicting an abnormal log event. In the method, a current event cluster from a plurality of event clusters for a log line in a log file is determined. The plurality of event clusters include at least one abnormal event cluster. Then, a time of event transition from the current event cluster to at least one abnormal event cluster is predicted.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="183.64mm" wi="128.52mm" file="US20230004750A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="141.48mm" wi="129.71mm" file="US20230004750A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="135.30mm" wi="127.42mm" file="US20230004750A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="156.97mm" wi="143.93mm" file="US20230004750A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="191.77mm" wi="133.86mm" file="US20230004750A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="198.20mm" wi="130.56mm" file="US20230004750A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="175.34mm" wi="134.96mm" file="US20230004750A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">The present invention relates to detecting and predicting an abnormal log event of, for example, an internet technology (IT) system.</p><p id="p-0003" num="0002">At present, IT systems have been used in many fields. Some online IT systems may randomly encounter system failures. If an IT system fails, it may cause serious economic losses. With the trend of increasing use of computers worldwide, increasing attention is paid to the risks caused by system failures.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0004" num="0003">According to one embodiment of the present invention, there is provided a computer-implemented method. In the method, a current event cluster from a plurality of event clusters for a log line in a log file is determined. The plurality of event clusters includes at least one abnormal event cluster. Then, a time of event transition from the current event cluster to at least one abnormal event cluster is predicted.</p><p id="p-0005" num="0004">According to another embodiment of the present invention, there is provided a computer system. The computer system includes one or more processors, a memory coupled to the one or more processors, and a set of computer program instructions stored in the memory and executed by the one or more processors to implement the method according to the one embodiment of the present invention as described above.</p><p id="p-0006" num="0005">According to still another embodiment of the present disclosure, there is provided a computer program product. The computer program product comprises a computer readable storage medium having program instructions embodied therewith. The program instructions are executable by one or more processors to implement the method according to the one embodiment of the present disclosure as described above.</p><p id="p-0007" num="0006">According to an aspect of the present invention, there is a method, computer program product and/or system that performs the following operations (not necessarily in the following order): (i) receiving a plurality of event clusters; (ii) receiving an indication that the plurality of event clusters includes an abnormal event cluster; (iii) determining a current event cluster for a current log line in a current log file from the plurality of event clusters; and (iv) predicting, by machine logic, a predicted time of event transition from the current event cluster to the abnormal event cluster.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading><p id="p-0008" num="0007">Through the more detailed description of some embodiments of the present disclosure in the accompanying drawings, the above and other objects, features and advantages of the present disclosure will become more apparent, wherein the same reference generally refers to the same components in the embodiments of the present disclosure.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a cloud computing node according to an embodiment of the present invention.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a cloud computing environment according to an embodiment of the present invention.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts abstraction model layers according to an embodiment of the present invention.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a schematic flowchart of the method for detecting and predicting an abnormal log event according to some embodiments of the present disclosure.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts a schematic flowchart for illustrating an example process of determining a current event cluster from a plurality of event clusters for a log line in a log file in the method depicted by <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts a schematic flowchart for illustrating an example process of training a sentence2vec model according to some embodiments of the present disclosure.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts a schematic flowchart for illustrating an example process of predicting a time of event transition from the current event cluster to at least one abnormal event cluster in the method depicted by <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0016" num="0015">Some embodiments will be described in more detail with reference to the accompanying drawings, in which the embodiments of the present disclosure have been illustrated. However, the present disclosure can be implemented in various manners, and thus should not be construed to be limited to the embodiments disclosed herein.</p><p id="p-0017" num="0016">It is to be understood that although this disclosure includes a detailed description on cloud computing, implementation of the teachings recited herein are not limited to a cloud computing environment. Rather, embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.</p><p id="p-0018" num="0017">Cloud computing is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services) that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics, at least three service models, and at least four deployment models.</p><p id="p-0019" num="0018">Characteristics are as follows:</p><p id="p-0020" num="0019">On-demand self-service: a cloud consumer can unilaterally provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction with the service's provider.</p><p id="p-0021" num="0020">Broad network access: capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (for example, mobile phones, laptops, and PDAs).</p><p id="p-0022" num="0021">Resource pooling: the provider's computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (for example, country, state, or datacenter).</p><p id="p-0023" num="0022">Rapid elasticity: capabilities can be rapidly and elastically provisioned, in some cases automatically, to quickly scale out and rapidly released to quickly scale in. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.</p><p id="p-0024" num="0023">Measured service: cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported providing transparency for both the provider and consumer of the utilized service.</p><p id="p-0025" num="0024">Service Models are as follows:</p><p id="p-0026" num="0025">Software as a Service (SaaS): the capability provided to the consumer is to use the provider's applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser (e.g., web-based e-mail). The consumer does not manage or control the underlying cloud infrastructure including network, servers, operating systems, storage, or even individual application capabilities, with the possible exception of limited user-specific application configuration settings.</p><p id="p-0027" num="0026">Platform as a Service (PaaS): the capability provided to the consumer is to deploy onto the cloud infrastructure consumer-created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks, servers, operating systems, or storage, but has control over the deployed applications and possibly application hosting environment configurations.</p><p id="p-0028" num="0027">Infrastructure as a Service (IaaS): the capability provided to the consumer is to provision processing, storage, networks, and other fundamental computing resources where the consumer is able to deploy and run arbitrary software, which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems, storage, deployed applications, and possibly limited control of select networking components (e.g., host firewalls).</p><p id="p-0029" num="0028">Deployment Models are as follows:</p><p id="p-0030" num="0029">Private cloud: the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on-premises or off-premises.</p><p id="p-0031" num="0030">Community cloud: the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns (e.g., mission, security requirements, policy, and compliance considerations). It may be managed by the organizations or a third party and may exist on-premises or off-premises.</p><p id="p-0032" num="0031">Public cloud: the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.</p><p id="p-0033" num="0032">Hybrid cloud: the cloud infrastructure is a composition of two or more clouds (private, community, or public) that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability (e.g., cloud bursting for load-balancing between clouds).</p><p id="p-0034" num="0033">A cloud computing environment is service oriented with a focus on statelessness, low coupling, modularity, and semantic interoperability. At the heart of cloud computing is an infrastructure that includes a network of interconnected nodes.</p><p id="p-0035" num="0034">Referring now to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a schematic of an example of a cloud computing node is shown. Cloud computing node <b>10</b> is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless, cloud computing node <b>10</b> is capable of being implemented and/or performing any of the functionality set forth hereinabove.</p><p id="p-0036" num="0035">In cloud computing node <b>10</b> there is a computer system/server <b>12</b> or a portable electronic device such as a communication device, which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and/or configurations that may be suitable for use with computer system/server <b>12</b> include, but are not limited to, personal computer systems, server computer systems, thin clients, thick clients, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputer systems, mainframe computer systems, and distributed cloud computing environments that include any of the above systems or devices, and the like.</p><p id="p-0037" num="0036">Computer system/server <b>12</b> may be described in the general context of computer system-executable instructions, such as program modules, being executed by a computer system. Generally, program modules may include routines, programs, objects, components, logic, data structures, and so on that perform particular tasks or implement particular abstract data types. Computer system/server <b>12</b> may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment, program modules may be located in both local and remote computer system storage media including memory storage devices.</p><p id="p-0038" num="0037">As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, computer system/server <b>12</b> in cloud computing node <b>10</b> is shown in the form of a general-purpose computing device. The components of computer system/server <b>12</b> may include, but are not limited to, one or more processors or processing units <b>16</b>, a system memory <b>28</b>, and a bus <b>18</b> that couples various system components including system memory <b>28</b> to processor <b>16</b>.</p><p id="p-0039" num="0038">Bus <b>18</b> represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus.</p><p id="p-0040" num="0039">Computer system/server <b>12</b> typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system/server <b>12</b>, and it includes both volatile and non-volatile media, removable and non-removable media.</p><p id="p-0041" num="0040">System memory <b>28</b> can include computer system readable media in the form of volatile memory, such as random access memory (RAM) <b>30</b> and/or cache memory <b>32</b>. Computer system/server <b>12</b> may further include other removable/non-removable, volatile/non-volatile computer system storage media. By way of example only, storage system <b>34</b> can be provided for reading from and writing to a non-removable, non-volatile magnetic media (not shown and typically called a &#x201c;hard drive&#x201d;). Although not shown, a magnetic disk drive for reading from and writing to a removable, non-volatile magnetic disk (e.g., a &#x201c;floppy disk&#x201d;), and an optical disk drive for reading from or writing to a removable, non-volatile optical disk such as a CD-ROM, DVD-ROM or other optical media can be provided. In such instances, each can be connected to bus <b>18</b> by one or more data media interfaces. As will be further depicted and described below, memory <b>28</b> may include at least one program product having a set (e.g., at least one) of program modules that are configured to carry out the functions of embodiments of the invention.</p><p id="p-0042" num="0041">Program/utility <b>40</b>, having a set (at least one) of program modules <b>42</b>, may be stored in memory <b>28</b> by way of example, and not limitation, as well as an operating system, one or more application programs, other program modules, and program data. Each of the operating system, one or more application programs, other program modules, and program data or some combination thereof, may include an implementation of a networking environment. Program modules <b>42</b> generally carry out the functions and/or methodologies of embodiments of the invention as described herein.</p><p id="p-0043" num="0042">Computer system/server <b>12</b> may also communicate with one or more external devices <b>14</b> such as a keyboard, a pointing device, a display <b>24</b>, etc.; one or more devices that enable a user to interact with computer system/server <b>12</b>; and/or any devices (e.g., network card, modem, etc.) that enable computer system/server <b>12</b> to communicate with one or more other computing devices. Such communication can occur via Input/Output (I/O) interfaces <b>22</b>. Still yet, computer system/server <b>12</b> can communicate with one or more networks such as a local area network (LAN), a general wide area network (WAN), and/or a public network (e.g., the Internet) via network adapter <b>20</b>. As depicted, network adapter <b>20</b> communicates with the other components of computer system/server <b>12</b> via bus <b>18</b>. It should be understood that although not shown, other hardware and/or software components could be used in conjunction with computer system/server <b>12</b>. Examples, include, but are not limited to: microcode, device drivers, redundant processing units, external disk drive arrays, RAID systems, tape drives, and data archival storage systems, etc.</p><p id="p-0044" num="0043">Referring now to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, illustrative cloud computing environment <b>50</b> is depicted. As shown, cloud computing environment <b>50</b> includes one or more cloud computing nodes <b>10</b> with which local computing devices used by cloud consumers, such as, for example, personal digital assistant (PDA) or cellular telephone <b>54</b>A, desktop computer <b>54</b>B, laptop computer <b>54</b>C, and/or automobile computer system <b>54</b>N may communicate. Nodes <b>10</b> may communicate with one another. They may be grouped (not shown) physically or virtually, in one or more networks, such as Private, Community, Public, or Hybrid clouds as described hereinabove, or a combination thereof. This allows cloud computing environment <b>50</b> to offer infrastructure, platforms and/or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices <b>54</b>A-N shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> are intended to be illustrative only and that computing nodes <b>10</b> and cloud computing environment <b>50</b> can communicate with any type of computerized device over any type of network and/or network addressable connection (e.g., using a web browser).</p><p id="p-0045" num="0044">Referring now to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a set of functional abstraction layers provided by cloud computing environment <b>50</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) is shown. It should be understood in advance that the components, layers, and functions shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted, the following layers and corresponding functions are provided:</p><p id="p-0046" num="0045">Hardware and software layer <b>60</b> includes hardware and software components. Examples of hardware components include: mainframes <b>61</b>; RISC (Reduced Instruction Set Computer) architecture based servers <b>62</b>; servers <b>63</b>; blade servers <b>64</b>; storage devices <b>65</b>; and networks and networking components <b>66</b>. In some embodiments, software components include network application server software <b>67</b> and database software <b>68</b>.</p><p id="p-0047" num="0046">Virtualization layer <b>70</b> provides an abstraction layer from which the following examples of virtual entities may be provided: virtual servers <b>71</b>; virtual storage <b>72</b>; virtual networks <b>73</b>, including virtual private networks; virtual applications and operating systems <b>74</b>; and virtual clients <b>75</b>.</p><p id="p-0048" num="0047">In one example, management layer <b>80</b> may provide the functions described below. Resource provisioning <b>81</b> provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing <b>82</b> provide cost tracking as resources are utilized within the cloud computing environment, and billing or invoicing for consumption of these resources. In one example, these resources may include application software licenses. Security provides identity verification for cloud consumers and tasks, as well as protection for data and other resources. User portal <b>83</b> provides access to the cloud computing environment for consumers and system administrators. Service level management <b>84</b> provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement (SLA) planning and fulfillment <b>85</b> provide pre-arrangement for, and procurement of, cloud computing resources for which a future requirement is anticipated in accordance with an SLA.</p><p id="p-0049" num="0048">Workloads layer <b>90</b> provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include: mapping and navigation <b>91</b>; software development and lifecycle management <b>92</b>; virtual classroom education delivery <b>93</b>; data analytics processing <b>94</b>; transaction processing <b>95</b>; and abnormal log event detection and prediction <b>96</b>.</p><p id="p-0050" num="0049">As mentioned above, how to effectively prevent system failures has become an important object for many enterprises. Nowadays, failure predictions are still mainly based on expert experience and traditional machine learning methods to implement expert systems, and rely heavily on manual review by experienced personnel. The process of traditional failure prediction requires quite a lot of manpower to participate in formulating rules, but the formulated rules are often difficult to directly apply to failure predictions in other IT fields dealing with other types of computer systems or different software.</p><p id="p-0051" num="0050">With reference to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a schematic flowchart of method <b>400</b>, for detecting and predicting an abnormal log event according to some embodiments of the present disclosure, is shown.</p><p id="p-0052" num="0051">In method <b>400</b> as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, at block <b>402</b>, a current event cluster is determined from a plurality of event clusters for a log line in a log file. In an embodiment of the present disclosure, the log line in the log file may refer to any log line in any row of the log file. In another embodiment, the log line in the log file may refer to the newly generated log line in the log file in real time. The log line may be regarded as a log event. The log event may be assigned to one of the pluralities of event clusters based on a predetermined criterion or rule. The predetermined criterion or rule is described in detail later with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0053" num="0052">The assigned event cluster for the log event is referred to as the current event cluster in the context. Each of the plurality of event clusters may include one or more log events. In an embodiment, the plurality of event clusters may include at least one abnormal event cluster, which may include one or more abnormal log events. If the current event cluster is determined as the abnormal event cluster, it is determined that an abnormal log event is detected.</p><p id="p-0054" num="0053">In an example, the plurality of event clusters may include the following event clusters, such as, CPU normal, CPU abnormal, memory normal, memory abnormal, disk normal, disk abnormal, and other event clusters. CPU abnormal, memory abnormal, and disk abnormal event clusters are examples of the abnormal event clusters. It is noted that the plurality of event clusters may include other number or kind of event clusters.</p><p id="p-0055" num="0054">An example process of determining the current event cluster from the plurality of event clusters for the log line in the log file is now described below with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0056" num="0055">At block <b>502</b>, the log line is converted into a sentence vector. In an example, the log line may be converted into the sentence vector based on a sentence2vec model. The sentence2vec model may be a skip-thoughts model. Those of ordinary skill in the art will appreciate that the details about the skip-thoughts model are known in currently conventional technology. According to the above document, the skip-thoughts model includes an encoder, which maps words to a sentence vector. Generally, the skip-thoughts model is used for processing natural language, but the inventors of the present application creatively find that it is also suitable for processing log files.</p><p id="p-0057" num="0056">The sentence2vec model may be trained by a training method in advance. An example process of the training method <b>600</b> according to some embodiments of the present disclosure is shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0058" num="0057">In training method <b>600</b> as shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, at block <b>602</b>, each log line in a training log file is converted into a sentence vector based on a mapping of the log lines in the training log file to sentence vectors. In the first iteration of the training process, the mapping may be an initial mapping based on experience data, for example.</p><p id="p-0059" num="0058">Then the operations at blocks <b>604</b>-<b>612</b> are performed on each log line in the training log file in sequence.</p><p id="p-0060" num="0059">At block <b>604</b>, a log sequence number (LSN) M is obtained, which indicates the row number of the log line in the training log file to be processed currently. In an example, M may denote any integer number less than the number N of rows of the training log file. In another example, M may denote any integer number less than or equal to N. In this case, a dummy log line may be added to the end of the training log file. Therefore, the training log file may appear like having (N+1) log lines.</p><p id="p-0061" num="0060">Then, at block <b>606</b>, a sentence vector is predicted based on at least one sentence vector corresponding to at least one log line adjacent to the log line. For example, the sentence vector corresponding to the Mth log line may be predicted based on the sentence vector corresponding to the (M&#x2212;1)th log line and the sentence vector corresponding to the (M+1)th log line. Those of ordinary skill in the art will appreciate that in an embodiment, the sentence vector may be predicted by using the aforementioned skip-thoughts model.</p><p id="p-0062" num="0061">Next, at block <b>608</b>, a difference between the converted sentence vector corresponding to the log line and the predicted sentence vector is calculated. In an example, the difference may be calculated as a distance from the converted sentence vector to the predicted sentence vector in a vector space of the sentence2vec model. The difference may be expected to be as small as possible, because it means the log line is well matched to the converted sentence vector.</p><p id="p-0063" num="0062">At block <b>610</b>, the LSN is increased. Generally, the LSN may be increased by, for example, 1. As mentioned above, a dummy log line may be added to the training log file. If the dummy log line is added, then the maximum value of the LSN is (N+1). Alternatively, if the dummy log line is not added, then the maximum value of the LSN is N.</p><p id="p-0064" num="0063">At block <b>612</b>, it is determined whether the end of the training log file is reached. In an example, whether the end of the training log file is reached depends on whether the LSN reaches its maximum value. If the LSN reaches its maximum value, then the end of the training log file is reached. In the case of having the dummy log line, if the LSN=(N+1), the end of the training log file is reached. In the case of having no dummy log line, if the LSN=N, the end of the training log file is reached.</p><p id="p-0065" num="0064">If the end of the training log file is not reached (&#x201c;NO&#x201d; at block <b>612</b>), then the training process goes back to block <b>604</b> to process the next log line. If the end of the training log file is reached (&#x201c;YES&#x201d; at block <b>612</b>), then the calculated differences for the respective log lines in the training log file is summed up together at block <b>614</b>.</p><p id="p-0066" num="0065">At block <b>616</b>, it is determined whether the summed differences are higher than a difference threshold. If the summed differences are higher than the difference threshold (&#x201c;YES&#x201d; at block <b>616</b>), then the mapping of the log lines in the training log file to sentence vectors is adjusted at block <b>618</b> and the training process goes back to block <b>602</b> to start the next iteration.</p><p id="p-0067" num="0066">If the summed differences are lower than or equal to the difference threshold (&#x201c;NO&#x201d; at block <b>616</b>), then the training process ends at block <b>620</b>. It means the log lines are well matched to the converted sentence vectors, and the mapping is good enough.</p><p id="p-0068" num="0067">In this way, the context information of the training log files is utilized to adjust the accuracy of the mapping.</p><p id="p-0069" num="0068">Turning back to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, after converting the log line into the sentence vector at block <b>502</b>, relevance between the converted sentence vector and the plurality of event clusters is determined at block <b>504</b>. Next, at block <b>506</b>, the current event cluster is determined based on the relevance between the converted sentence vector and the plurality of event clusters.</p><p id="p-0070" num="0069">In an example, the operations at blocks <b>504</b> and <b>506</b> may be performed based on a K-Nearest Neighbor (KNN) algorithm. As known by those skilled in the art, the KNN algorithm is widely used for classification. The input of the KNN model consists of the K closest training examples in data set. The output of the KNN model is a class membership. An object is classified by a plurality vote of its neighbors, with the object being assigned to the class most common among its K nearest neighbors. Here, K is a positive integer.</p><p id="p-0071" num="0070">Through the process described above with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the current event cluster is determined for the log line.</p><p id="p-0072" num="0071">Turning back to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, at block <b>404</b>, a time of event transition from the current event cluster to at least one abnormal event cluster is predicted. The time of event transition from the current event cluster to at least one abnormal event cluster may be used to alert at what time an abnormal log event would happen.</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a schematic flowchart for illustrating an example process of predicting the time of event transition from the current event cluster to at least one abnormal event cluster.</p><p id="p-0074" num="0073">At block <b>702</b>, a probability of an event transition from the current event cluster to each of the plurality of event clusters is obtained. In the example where the plurality of event clusters include seven event clusters, these seven event clusters may be denoted as E1-E7 respectively. The probabilities of the respective event transitions may be illustrated by the following probability matrix. For example, as shown in the probability matrix, the probability of the event transition from E2 to E1 may be f, the probability of the event transition from E3 to E2 may be c, and the probability of the event transition from E7 to E5 may be r.</p><p id="p-0075" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mtext>           </mtext>  <mrow>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>1</mn>   <mo>&#x2062;</mo>   <mtext>  </mtext>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>2</mn>   <mo>&#x2062;</mo>   <mtext>  </mtext>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>3</mn>   <mo>&#x2062;</mo>   <mtext>  </mtext>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>4</mn>   <mo>&#x2062;</mo>   <mtext>  </mtext>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>5</mn>   <mo>&#x2062;</mo>   <mtext>  </mtext>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>6</mn>   <mo>&#x2062;</mo>   <mtext>  </mtext>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>7</mn>  </mrow> </mrow></math></maths><maths id="MATH-US-00001-2" num="00001.2"><math overflow="scroll"> <mrow>  <mtable>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>1</mn>     </mrow>    </mtd>   </mtr>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>2</mn>     </mrow>    </mtd>   </mtr>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>3</mn>     </mrow>    </mtd>   </mtr>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>4</mn>     </mrow>    </mtd>   </mtr>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>5</mn>     </mrow>    </mtd>   </mtr>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>6</mn>     </mrow>    </mtd>   </mtr>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>7</mn>     </mrow>    </mtd>   </mtr>  </mtable>  <mo>&#x2062;</mo>  <mrow>   <mo>(</mo>   <mtable>    <mtr>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>p</mi>     </mtd>     <mtd>      <mi>q</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>    <mtr>     <mtd>      <mi>f</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>y</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>b</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>    <mtr>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>c</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>e</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>    <mtr>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>g</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>h</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>    <mtr>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>a</mi>     </mtd>     <mtd>      <mi>e</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>    <mtr>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>1</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>    <mtr>     <mtd>      <mi>u</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>w</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>r</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>   </mtable>   <mo>)</mo>  </mrow> </mrow></math></maths></p><p id="p-0076" num="0074">In an example, the above probability matrix may be obtained based on the statistical probability of the event transition in history. For example, in the operation history of the IT system, f event cluster E2 transit to event cluster E1, y event cluster E2 transit to event cluster E3, and b event cluster E2 transit to event cluster E5, where f+y+b=1. Therefore, in the probability matrix, the probability of the event transition from E2 to E1 is f, the probability of the event transition from E2 to E3 is y, and the probability of the event transition from E2 to E5 is b. In an example, f may be 25%, y may be 40%, and b may be 35%.</p><p id="p-0077" num="0075">In a further example, the above probability matrix may be obtained further based on experience value. For instance, from the experience of an expert, the probability of the event transition from E2 to E3 may not exceed an upper limit value TH (30% for example), which is lower than y, and thus the probability of the event transition from E2 to E3 is reduced to TH. Therefore, the probability matrix should be amended as below.</p><p id="p-0078" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mrow>  <mtext>           </mtext>  <mrow>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>1</mn>   <mo>&#x2062;</mo>   <mtext>  </mtext>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>2</mn>   <mo>&#x2062;</mo>   <mtext>  </mtext>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>3</mn>   <mo>&#x2062;</mo>   <mtext>  </mtext>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>4</mn>   <mo>&#x2062;</mo>   <mtext>  </mtext>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>5</mn>   <mo>&#x2062;</mo>   <mtext>  </mtext>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>6</mn>   <mo>&#x2062;</mo>   <mtext>  </mtext>   <mi>E</mi>   <mo>&#x2062;</mo>   <mn>7</mn>  </mrow> </mrow></math></maths><maths id="MATH-US-00002-2" num="00002.2"><math overflow="scroll"> <mrow>  <mtable>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>1</mn>     </mrow>    </mtd>   </mtr>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>2</mn>     </mrow>    </mtd>   </mtr>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>3</mn>     </mrow>    </mtd>   </mtr>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>4</mn>     </mrow>    </mtd>   </mtr>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>5</mn>     </mrow>    </mtd>   </mtr>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>6</mn>     </mrow>    </mtd>   </mtr>   <mtr>    <mtd>     <mrow>      <mi>E</mi>      <mo>&#x2062;</mo>      <mn>7</mn>     </mrow>    </mtd>   </mtr>  </mtable>  <mo>&#x2062;</mo>  <mrow>   <mo>(</mo>   <mtable>    <mtr>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>p</mi>     </mtd>     <mtd>      <mi>q</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>    <mtr>     <mtd>      <mi>f</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>TH</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>b</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>    <mtr>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>c</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>e</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>    <mtr>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>g</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>h</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>    <mtr>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>a</mi>     </mtd>     <mtd>      <mi>e</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>    <mtr>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>1</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>    <mtr>     <mtd>      <mi>u</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>w</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mi>r</mi>     </mtd>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mn>0</mn>     </mtd>    </mtr>   </mtable>   <mo>)</mo>  </mrow> </mrow></math></maths></p><p id="p-0079" num="0076">Next, at block <b>704</b>, an event transition having the highest probability is determined. In the above example where the current event cluster is E2, the probability of the event transition from E2 to E1 is f, the probability of the event transition from E2 to E3 is y, and the probability of the event transition from E2 to E5 is b, given b&#x3e;TH&#x3e;f, the event transition having the highest probability is the event transition from E2 to E5.</p><p id="p-0080" num="0077">Then, it is determined whether the event transition having the highest probability is directed to the abnormal event cluster at block <b>706</b>. In the above example where the event transition having the highest probability is the event transition from E2 to E5, it is determined whether E5 is the abnormal event cluster.</p><p id="p-0081" num="0078">If the event transition having the highest probability is not directed to the abnormal event cluster (&#x201c;NO&#x201d; at block <b>706</b>), the next log line is processed at block <b>708</b>, where the next log line is obtained, and the process goes back to block <b>402</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0082" num="0079">In an embodiment, a Markov Chain model may be used to assist the calculation of the probability matrix. Those of ordinary skill in the art will appreciate that the Markov Chain model is known in the prior art. In the Markov Chain model, the probability matrix may be represented by P=(p_ij). The rows of the probability matrix X_t represent the state at time t (for example, the current event cluster), and the columns of the probability matrix X_t+1 represent the state at time t+1 (for example, the next event cluster). p_ij=P(X_t+1=j|X_t=i). In the Markov Chain model, the future depends only upon the present, not the past. Therefore, P(X_t+1=s|X_t=s_t, X_t&#x2212;1=s_t&#x2212;1, . . . , X_0=s_0)=P(X_t+1=s|X_t=s_t), for all t=1, 2, 3, . . . and for all states s_0, . . . , s_t&#x2212;1, s_t, s. P(X_n=j|X_0=i)=(Pn)_ij for any n, where X_t+n represent the state at time t+n. In this way, the probability matrix for any later transitions (for the subsequent log lines) can be calculated accordingly.</p><p id="p-0083" num="0080">If the event transition having the highest probability is directed to the abnormal event cluster (&#x201c;YES&#x201d; at block <b>706</b>), a mean time of the event transition having the highest probability in history is calculated as the predicted time at block <b>710</b>. In the above example, the event transition having the highest probability is from E2 to E5. In an embodiment, the mean time may be calculated based on the Markov Chain model. In the Markov Chain model, miA=E(TA|X_0=i), where TA represent the hitting time of A, i=E2 and A=E5 in this example, and miA can be calculated by the following formula.</p><p id="p-0084" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mrow>  <msub>   <mi>m</mi>   <mi>iA</mi>  </msub>  <mo>=</mo>  <mrow>   <mo>{</mo>   <mtable>    <mtr>     <mtd>      <mn>0</mn>     </mtd>     <mtd>      <mrow>       <mrow>        <mrow>         <mi>for</mi>         <mo>&#x2062;</mo>         <mtext>   </mtext>         <mi>i</mi>        </mrow>        <mo>&#x2208;</mo>        <mi>A</mi>       </mrow>       <mo>,</mo>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mn>1</mn>       <mo>+</mo>       <mrow>        <munder>         <mo>&#x2211;</mo>         <mrow>          <mi>j</mi>          <mo>&#x2209;</mo>          <mi>A</mi>         </mrow>        </munder>        <mrow>         <msub>          <mi>p</mi>          <mi>ij</mi>         </msub>         <mo>&#x2062;</mo>         <msub>          <mi>m</mi>          <mi>jA</mi>         </msub>        </mrow>       </mrow>      </mrow>     </mtd>     <mtd>      <mrow>       <mrow>        <mi>for</mi>        <mo>&#x2062;</mo>        <mtext>   </mtext>        <mi>i</mi>       </mrow>       <mo>&#x2209;</mo>       <mrow>        <mi>A</mi>        <mo>.</mo>       </mrow>      </mrow>     </mtd>    </mtr>   </mtable>  </mrow> </mrow></math></maths></p><p id="p-0085" num="0081">In an embodiment, it is determined whether a criterion for providing an alert is met at block <b>712</b>. In an example, the criterion may be the predicted time being lower than a time threshold value. If the abnormal log event is going to take place after a long time (after two days for example), the daily operations of the user of the IT system may introduce other influence factors to reduce the probability of event transition to the abnormal event cluster. Therefore, this issue may be ignored.</p><p id="p-0086" num="0082">In an alternative example, the criterion may be the highest probability being higher than a probability threshold and the predicted time being lower than the time threshold. Here, in addition to the predicted time, the probability of event transition to the abnormal event cluster is also taken into account. If the probability of event transition to the abnormal event cluster is low (2% for example), this event transition may probably not happen. Therefore, this issue may be ignored.</p><p id="p-0087" num="0083">If the criterion is met (&#x201c;YES&#x201d; at block <b>712</b>), the alert is provided at block <b>714</b>. In the example where the criterion is the predicted time being lower than a time threshold, the predicted time may be provided in the alert. In the example where the criterion is the highest probability being higher than a probability threshold and the predicted time being lower than the time threshold, the highest probability and the predicted time may be provided in the alert.</p><p id="p-0088" num="0084">The embodiments of the present disclosure are able to detect and predict abnormal log events automatically, such that the user of the IT system can be notified of system failures in advance. Further, the embodiments of the present disclosure improve the efficiency of failure prediction and save manpower and material resources in the IT operation and maintenance process.</p><p id="p-0089" num="0085">It should be noted that the processing of abnormal log event detection and prediction according to embodiments of this disclosure could be implemented by computer system/server <b>12</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0090" num="0086">Under the same inventive concept, another embodiment of the present invention can provide a computer system for detecting and predicting an abnormal log event. The computer system may comprise one or more processors, a memory coupled to at least one of the processors, and a set of computer program instructions stored in the memory. The set of computer program instructions are executed by at least one of the processors to determine a current event cluster from a plurality of event clusters for a log line in a log file, the plurality of event clusters comprising at least one abnormal event cluster; and predict a time of event transition from the current event cluster to at least one abnormal event cluster.</p><p id="p-0091" num="0087">Similarly, under the same inventive concept, another embodiment of the present invention can provide a computer program product for detecting and predicting an abnormal log event. The computer program product comprises a computer readable storage medium having program instructions embodied therewith. The program instructions are executable by a processor to determine a current event cluster from a plurality of event clusters for a log line in a log file, the plurality of event clusters comprising at least one abnormal event cluster; and predict a time of event transition from the current event cluster to at least one abnormal event cluster.</p><p id="p-0092" num="0088">The present invention may be a system, a method, and/or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.</p><p id="p-0093" num="0089">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (for example, light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0094" num="0090">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0095" num="0091">Computer readable program instructions for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, configuration data for integrated circuitry, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++, or the like, and procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present invention.</p><p id="p-0096" num="0092">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0097" num="0093">These computer readable program instructions may be provided to a processor of a computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0098" num="0094">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0099" num="0095">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the blocks may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be accomplished as one step, executed concurrently, substantially concurrently, in a partially or wholly temporally overlapping manner, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0100" num="0096">The descriptions of the various embodiments of the present invention have been presented for purposes of illustration, but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments, the practical application or technical improvement over technologies found in the marketplace, or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001 MATH-US-00001-2" nb-file="US20230004750A1-20230105-M00001.NB"><img id="EMI-M00001" he="26.08mm" wi="76.20mm" file="US20230004750A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002 MATH-US-00002-2" nb-file="US20230004750A1-20230105-M00002.NB"><img id="EMI-M00002" he="26.08mm" wi="76.20mm" file="US20230004750A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230004750A1-20230105-M00003.NB"><img id="EMI-M00003" he="9.48mm" wi="76.20mm" file="US20230004750A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method comprising:<claim-text>receiving a plurality of event clusters;</claim-text><claim-text>receiving an indication that the plurality of event clusters includes an abnormal event cluster;</claim-text><claim-text>determining a current event cluster for a current log line in a current log file from the plurality of event clusters; and</claim-text><claim-text>predicting, by machine logic, a predicted time of event transition from the current event cluster to the abnormal event cluster.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer code further includes instructions for causing the processor(s) set to perform the following operation(s):<claim-text>determining that the predicted time is lower than a time threshold value; and</claim-text><claim-text>responsive to the determination that the predicted time is lower than a time threshold value, providing the predicted time.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the determination of the current event cluster from the plurality of event clusters includes:<claim-text>converting the current log line into a converted sentence vector;</claim-text><claim-text>determining relevance between the converted sentence vector and the plurality of event clusters; and</claim-text><claim-text>determining the current event cluster based on the relevance between the converted sentence vector and the plurality of event clusters.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the converting the log line into the sentence vector is based on a sentence2vec model, and the method further comprises training the sentence2vec model by:<claim-text>converting, by one or more processors, each log line in a training log file into a sentence vector based on a mapping of the log lines in the training log file to sentence vectors;</claim-text><claim-text>performing, by one or more processors, the following operations on each log line in the training log file:<claim-text>predicting, by one or more processors, a sentence vector based on at least one sentence vector corresponding to at least one log line adjacent to the log line, and</claim-text><claim-text>calculating, by one or more processors, a difference between the converted sentence vector corresponding to the log line and the predicted sentence vector;</claim-text></claim-text><claim-text>summing, by one or more processors, the calculated differences for the respective log lines in the training log file; and</claim-text><claim-text>in response to the summed differences being higher than a difference threshold,<claim-text>adjusting, by one or more processors, the mapping, and</claim-text><claim-text>repeating, by one or more processors, the above operations.</claim-text></claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the sentence2vec model is a skip-thoughts model.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the predicting the time of event transition from the current event cluster to at least one abnormal event cluster comprises:<claim-text>obtaining, by one or more processors, a probability of an event transition from the current event cluster to each of the plurality of event clusters;</claim-text><claim-text>determining, by one or more processors, an event transition having the highest probability; and</claim-text><claim-text>in response to the event transition having the highest probability being directed to at least one abnormal event cluster,<claim-text>calculating, by one or more processors, a mean time of the event transition having the highest probability in history as the predicted time.</claim-text></claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the computer code further includes instructions for causing the processor(s) set to perform the following operation(s):<claim-text>in response to the event transition having the highest probability not being directed to at least one abnormal event cluster;</claim-text><claim-text>determining, by one or more processors, a next event cluster from the plurality of event clusters for a next log line in the log file; and</claim-text><claim-text>predicting, by one or more processors, a time of event transition from the next event cluster to at least one abnormal event cluster.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A computer program product comprising:<claim-text>a set of storage device(s); and</claim-text><claim-text>computer code stored collectively in the set of storage device(s), with the computer code including data and instructions to cause a processor(s) set to perform at least the following operations:<claim-text>receiving a plurality of event clusters,</claim-text><claim-text>receiving an indication that the plurality of event clusters includes an abnormal event cluster,</claim-text><claim-text>determining a current event cluster for a current log line in a current log file from the plurality of event clusters, and</claim-text><claim-text>predicting, by machine logic, a predicted time of event transition from the current event cluster to the abnormal event cluster.</claim-text></claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the computer code further includes instructions for causing the processor(s) set to perform the following operation(s):<claim-text>determining that the predicted time is lower than a time threshold value; and</claim-text><claim-text>responsive to the determination that the predicted time is lower than a time threshold value, providing the predicted time.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the determination of the current event cluster from the plurality of event clusters includes:<claim-text>converting the current log line into a converted sentence vector;</claim-text><claim-text>determining relevance between the converted sentence vector and the plurality of event clusters; and</claim-text><claim-text>determining the current event cluster based on the relevance between the converted sentence vector and the plurality of event clusters.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer program product of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the converting the log line into the sentence vector is based on a sentence2vec model, and the method further comprises training the sentence2vec model by:<claim-text>converting, by one or more processors, each log line in a training log file into a sentence vector based on a mapping of the log lines in the training log file to sentence vectors;</claim-text><claim-text>performing, by one or more processors, the following operations on each log line in the training log file:<claim-text>predicting, by one or more processors, a sentence vector based on at least one sentence vector corresponding to at least one log line adjacent to the log line, and</claim-text><claim-text>calculating, by one or more processors, a difference between the converted sentence vector corresponding to the log line and the predicted sentence vector;</claim-text></claim-text><claim-text>summing, by one or more processors, the calculated differences for the respective log lines in the training log file; and</claim-text><claim-text>in response to the summed differences being higher than a difference threshold,<claim-text>adjusting, by one or more processors, the mapping, and</claim-text><claim-text>repeating, by one or more processors, the above operations.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer program product of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the sentence2vec model is a skip-thoughts model.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the predicting the time of event transition from the current event cluster to at least one abnormal event cluster comprises:<claim-text>obtaining, by one or more processors, a probability of an event transition from the current event cluster to each of the plurality of event clusters;</claim-text><claim-text>determining, by one or more processors, an event transition having the highest probability; and</claim-text><claim-text>in response to the event transition having the highest probability being directed to at least one abnormal event cluster,<claim-text>calculating, by one or more processors, a mean time of the event transition having the highest probability in history as the predicted time.</claim-text></claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the computer code further includes instructions for causing the processor(s) set to perform the following operation(s):<claim-text>in response to the event transition having the highest probability not being directed to at least one abnormal event cluster;</claim-text><claim-text>determining, by one or more processors, a next event cluster from the plurality of event clusters for a next log line in the log file; and</claim-text><claim-text>predicting, by one or more processors, a time of event transition from the next event cluster to at least one abnormal event cluster.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A computer system comprising:<claim-text>a processor(s) set;</claim-text><claim-text>a set of storage device(s); and</claim-text><claim-text>computer code stored collectively in the set of storage device(s), with the computer code including data and instructions to cause the processor(s) set to perform at least the following operations:<claim-text>receiving a plurality of event clusters,</claim-text><claim-text>receiving an indication that the plurality of event clusters includes an abnormal event cluster,</claim-text><claim-text>determining a current event cluster for a current log line in a current log file from the plurality of event clusters, and</claim-text><claim-text>predicting, by machine logic, a predicted time of event transition from the current event cluster to the abnormal event cluster.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the computer code further includes instructions for causing the processor(s) set to perform the following operation(s):<claim-text>determining that the predicted time is lower than a time threshold value; and</claim-text><claim-text>responsive to the determination that the predicted time is lower than a time threshold value, providing the predicted time.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the determination of the current event cluster from the plurality of event clusters includes:<claim-text>converting the current log line into a converted sentence vector;</claim-text><claim-text>determining relevance between the converted sentence vector and the plurality of event clusters; and</claim-text><claim-text>determining the current event cluster based on the relevance between the converted sentence vector and the plurality of event clusters.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the converting the log line into the sentence vector is based on a sentence2vec model, and the method further comprises training the sentence2vec model by:<claim-text>converting, by one or more processors, each log line in a training log file into a sentence vector based on a mapping of the log lines in the training log file to sentence vectors;</claim-text><claim-text>performing, by one or more processors, the following operations on each log line in the training log file:<claim-text>predicting, by one or more processors, a sentence vector based on at least one sentence vector corresponding to at least one log line adjacent to the log line, and</claim-text><claim-text>calculating, by one or more processors, a difference between the converted sentence vector corresponding to the log line and the predicted sentence vector;</claim-text></claim-text><claim-text>summing, by one or more processors, the calculated differences for the respective log lines in the training log file; and</claim-text><claim-text>in response to the summed differences being higher than a difference threshold,<claim-text>adjusting, by one or more processors, the mapping, and</claim-text><claim-text>repeating, by one or more processors, the above operations.</claim-text></claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the sentence2vec model is a skip-thoughts model.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the predicting the time of event transition from the current event cluster to at least one abnormal event cluster comprises:<claim-text>obtaining, by one or more processors, a probability of an event transition from the current event cluster to each of the plurality of event clusters;</claim-text><claim-text>determining, by one or more processors, an event transition having the highest probability; and</claim-text><claim-text>in response to the event transition having the highest probability being directed to at least one abnormal event cluster,<claim-text>calculating, by one or more processors, a mean time of the event transition having the highest probability in history as the predicted time.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>