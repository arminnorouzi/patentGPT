<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004363A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004363</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17784454</doc-number><date>20200727</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>CN</country><doc-number>202010074558.X</doc-number><date>20200122</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>41</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>30</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>41</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>31</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">STREAM COMPUTING JOB PROCESSING METHOD, STREAM COMPUTING SYSTEM AND ELECTRONIC DEVICE</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Beijing Baidu Netcom Science Technology Co., Ltd.</orgname><address><city>Beijing</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Yuan</last-name><first-name>Youjun</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Beijing Baidu Netcom Science Technology Co., Ltd.</orgname><role>03</role><address><city>Beijing</city><country>CN</country></address></addressbook></assignee></assignees><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/CN2020/104873</doc-number><date>20200727</date></document-id><us-371c12-date><date>20220610</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">This application discloses a stream computing job processing method, a stream computing system and an electronic device, and the method includes: obtaining a stream computing job; running the stream computing job in a process-based manner, where the stream computing job includes at least one process.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="95.76mm" wi="71.46mm" file="US20230004363A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="146.47mm" wi="107.27mm" file="US20230004363A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="184.32mm" wi="66.46mm" file="US20230004363A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="184.07mm" wi="130.39mm" file="US20230004363A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">The present application claims a priority to Chinese Patent Application No. 202010074558.X filed in China on Jan. 22, 2020, a disclosure of which is incorporated in its entirety by reference herein.</p><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present application relates to the field of data processing technologies, in particular to the field of cloud computing technologies, and specifically to a stream computing job processing method, a stream computing system and an electronic device.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Stream computing refers to real-time processing of continuously generated data streams, and has stronger timeliness than batch&#x2014;processing-based computing. As Internet technologies continue to evolve, computing resources are usually limited in computing fields represented by edge computing and the like, and more stringent requirements on resource consumption are put forward.</p><p id="p-0005" num="0004">At present, open source stream computing systems represented by Apache Storm/Spark/Flink have been developed considerably. Stream computing jobs are usually processed in parallel in these open source stream computing systems. For example, in a Master/Worker structure, the Master is responsible for accepting, scheduling and monitoring a job, and the Worker is responsible for job execution and status reporting, etc. The Master and the Worker process in parallel, and system resource consumption is high.</p><p id="p-0006" num="0005">As can be seen, the stream computing job processing method in the related art suffers from high resource consumption.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0007" num="0006">Embodiments of the present application provide a stream computing job processing method, a stream computing system and an electronic device, so as to solve the problem of large resource consumption of the stream computing job processing method in the related art.</p><p id="p-0008" num="0007">To solve the above technical problem, the present application is realized as follows.</p><p id="p-0009" num="0008">In a first aspect, an embodiment of the present application provides a stream computing job processing method, and the method includes following steps: obtaining a stream computing job; running the stream computing job in a process-based manner, where the stream computing job includes at least one process.</p><p id="p-0010" num="0009">Due to the use of the above mentioned technical means, the stream computing job is run directly as a process. Compared with the parallel processing approach for stream computing jobs such as the Master/Worker structure in the prior art, this can avoid the problem of large resource consumption in the parallel processing approach, and can greatly reduce the resource consumption of the stream computing system, which is especially suitable for scenarios with limited number of jobs and limited computing capability.</p><p id="p-0011" num="0010">Optionally, prior to obtaining the stream computing job, the method further includes: receiving the stream computing job sent by a cloud server, where the stream computing job is generated by the cloud server.</p><p id="p-0012" num="0011">In the implementation, a generation environment and a running environment of the stream computing job are separated. The cloud server complies the continuously generated stream computing jobs, while the system can directly run compiled stream computing jobs, which improves the efficiency of the system in processing stream computing jobs and reduces system resource consumption at the same time.</p><p id="p-0013" num="0012">Optionally, the running the stream computing job in the process-based manner includes: running the stream computing job in the process-based manner by using a compiled language as an implementation language.</p><p id="p-0014" num="0013">Further, the compiled language includes Golang language.</p><p id="p-0015" num="0014">In the implementation, the compiled language, such as Golang, is used as the implementation language to complete compilation of the stream computing job without relying on other modules or the base environment, thus the stream computing job is processed with high efficiency. Meanwhile executable codes can be produced directly by the compiled language, which reduces unnecessary operations during compilation, thereby further reducing system resource consumption.</p><p id="p-0016" num="0015">Optionally, the stream computing job includes multiple processes; the running the stream computing job in the process-based manner includes: allocating running resources for the different processes of the stream computing job, respectively; running the processes on respective running resources of the multiple processes, where the multiple processes communicate with each other.</p><p id="p-0017" num="0016">Further, the multiple processes communicate with each other based on interprocess communication (IPC).</p><p id="p-0018" num="0017">In the implementation, the multiple processes of the stream computing job run on allocated running resources, respectively, while the multiple processes can communicate with each other. Further, the multiple processes can communicate with each other based on IPC without the need for communication through network transmission, thereby reducing the serialization and deserialization of data objects in network transmission. While multiple processes run independently, the multiple processes can exchange information with each other to jointly complete running of one stream computing job in conjunction, which improves data transmission efficiency, in turn improves the efficiency of stream computing job processing, and meanwhile further reduces consumption of resources such as memory.</p><p id="p-0019" num="0018">In a second aspect, the present application provides a stream computing system, and the stream computing system includes: an obtaining module, configured to obtain a stream computing job; a running module, configured to run the stream computing job in a process-based manner, where the stream computing job includes at least one process.</p><p id="p-0020" num="0019">Optionally, the system further includes: a reception module, configured to receive the stream computing job sent by a cloud server, where the stream computing job is generated by the cloud server.</p><p id="p-0021" num="0020">Optionally, the running module is specifically configured to run the stream computing job in the process-based manner by using a compiled language as an implementation language.</p><p id="p-0022" num="0021">Optionally, the compiled language includes Golang language.</p><p id="p-0023" num="0022">Optionally, the stream computing job includes multiple processes; and the running module includes: an allocation unit, configured to allocate running resources for the different processes of the stream computing job, respectively; a running unit, configured to run the processes on respective running resources of the processes, where the multiple processes communicate with each other.</p><p id="p-0024" num="0023">Optionally, the multiple processes communicate with each other based on interprocess communication (IPC).</p><p id="p-0025" num="0024">In a third aspect, the present application provides an electronic device, and the electronic device includes: at least one processor; and a memory communicatively connected to the at least one processor, where, the memory stores therein an instruction executable by the at least one processor, and the at least one processor is configured to execute the instruction to implement any method in the first aspect.</p><p id="p-0026" num="0025">In a fourth aspect, the present application provides a non-transitory computer readable storage medium storing therein computer instructions, where the computer instructions are used for causing a computer to implement any method in the first aspect.</p><p id="p-0027" num="0026">The embodiment of the present application has the following advantages or beneficial effects. The stream computing job is run directly as a process. Compared with the parallel processing approach for stream computing jobs such as the Master/Worker structure in the prior art, this can avoid the problem of large resource consumption in the parallel processing approach, and can greatly reduce the resource consumption of the stream computing system, which is especially suitable for scenarios with limited number of jobs and limited computing capability.</p><p id="p-0028" num="0027">The advantages or beneficial effects of embodiments of the present application will be described in the following with reference to specific embodiments.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0029" num="0028">The drawings are used to better understand the solutions of the present application and constitute no limitation on the present application. Where,</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a flowchart of a stream computing job processing method provided in an embodiment of the present application;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is another flowchart of a stream computing job processing method provided in an embodiment of the present application;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a first structural diagram of a stream computing system provided in an embodiment of the present application;</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a second structural diagram of a stream computing system provided in an embodiment of the present application;</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a third structural diagram of a stream computing system provided in an embodiment of the present application;</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram of an electronic device for implementing a stream computing job processing method of an embodiment of the present application.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0036" num="0035">In the following description, numerous details of the embodiments of the present application, which should be deemed merely as exemplary, are set forth with reference to accompanying drawings to provide thorough understanding of the embodiments of the present application. Therefore, those skilled in the art will appreciate that modifications and replacements may be made in the described embodiments without departing from the scope and the spirit of the present application. Further, for clarity and conciseness, descriptions of known functions and structures are omitted hereinafter.</p><p id="p-0037" num="0036">Stream data refers to an aggregation of a series of dynamic data infinite in time distribution and quantity. Due to strong timeliness of the data, a computation in real-time must be performed and rapid analysis and response must be performed. The stream computation is real-time processing of continuously generated data stream.</p><p id="p-0038" num="0037">Conventional stream computing job processing usually includes several to several thousand clusters, which provide unified computing resources for thousands of jobs and adopt parallel processing approach such as Master/Worker structure. The Master manages and schedules resources and jobs uniformly, and when the Master receives a request from a user for starting a stream computing task, the Master divides the stream computing task into multiple jobs and assigns them to different Workers for execution, and the Workers compile the received jobs before execution. A management mode such as Master/Worker structure entails high management cost, and the parallel processing approach thereof brings about large fixed resource consumption, which is especially uneconomical for computing scenarios with limited number of jobs and limited computing resources.</p><p id="p-0039" num="0038">According to an embodiment of the present application, the present application provides a stream computing job processing method.</p><p id="p-0040" num="0039">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a flowchart of a stream computing job processing method provided in an embodiment of the present application, and the method is applicable to a stream computing system. The stream computing system may be a computer, a server, or other device or data platform having data processing functions, which is not limited herein.</p><p id="p-0041" num="0040">In an embodiment of the present application, the stream computing job processing method includes Step <b>101</b> and Step <b>102</b>.</p><p id="p-0042" num="0041">Step <b>101</b>, obtaining a stream computing job.</p><p id="p-0043" num="0042">When the stream computing system needs to run a stream computing task, a stream computing job is obtained firstly. One stream computing job in the embodiment of the present application may correspond to one executable file generated by compilation, which includes one stream computing job logic. The stream computing job logic includes programs of the stream computing job, a data set, and specification for running the stream computing job, and after obtaining the executable file the system can run it according to the job logic.</p><p id="p-0044" num="0043">Step <b>102</b>, running the stream computing job in a process-based manner, where the stream computing job includes at least one process.</p><p id="p-0045" num="0044">In the embodiment of the present application, the stream computing job includes at least one process. When the system receives the stream computing job, the system can run a corresponding process directly according to a process list of the stream computing job. Specifically, one stream computing job may include one or more processes, stream data continuously input to the system may trigger a corresponding process to start execution of corresponding programs, and then output computing results continuously. Once the data stream triggers a stream computing job, the job can be run immediately and the computing results can be output.</p><p id="p-0046" num="0045">The embodiment of the present application has the following advantages or beneficial effects. The stream computing job is run directly in a process-based manner. Compared with the parallel processing approach for stream computing jobs such as the Master/Worker structure in the prior art, this can avoid the problem of large resource consumption in the parallel processing approach, and can greatly reduce the resource consumption of the stream computing system, which is especially suitable for scenarios with limited number of jobs and limited computing capability such as edge computing.</p><p id="p-0047" num="0046">Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, <figref idref="DRAWINGS">FIG. <b>2</b></figref> is another flowchart of a stream computing job processing method provided in an embodiment of the present application, and the method is applied to a stream computing system. The stream computing system may be a computer, a server, or other device or data platform having data processing functions, which is not limited herein.</p><p id="p-0048" num="0047">In the embodiment of the present application, the stream computing job processing method includes Step <b>201</b> to Step <b>203</b>.</p><p id="p-0049" num="0048">Step <b>201</b>, receiving the stream computing job sent by a cloud server, where the stream computing job is generated by the cloud server.</p><p id="p-0050" num="0049">After receiving a stream computing request from a user, the stream computing system needs to compile the stream computing job into executable machine codes. In conventional stream computing job processing methods, the procedure is carried out within the system, i.e., both the generation and running of stream computing job are implemented within the stream computing system. But for some stream computing jobs that consume more resources, compilation thereof will causes large resource consumption.</p><p id="p-0051" num="0050">In the embodiment of the present application, the stream computing jobs are generated by a cloud server, thus generation environment and running environment of the stream computing jobs are separated. In the cloud server, the stream computing job is compiled into executable machine codes to generate a corresponding executable file, and then the executable file is directly deployed to a target stream computing system for running. When the system obtains the stream computing job, the stream computing job can be run directly based on the compiled executable file. During the course, the cloud server complies the continuously generated stream computing jobs, while the system only runs the continuously received stream computing jobs directly in a process-based manner, which improves the efficiency of stream computing job processing and reduces system resource consumption at the same time.</p><p id="p-0052" num="0051">Step <b>202</b>, obtaining the stream computing job.</p><p id="p-0053" num="0052">In the embodiment of the present application, the compilation of the streaming computing job has been completed at the cloud server, and the system only needs to obtain the compiled stream computing job. One complied stream computing job may correspond to one executable file, which includes one stream computing job logic. The stream computing job logic includes programs of the stream computing job, a data set, and specification for the stream computing job, and the system can start to run stream computing jobs once triggered by the data stream.</p><p id="p-0054" num="0053">Step <b>203</b>, running the stream computing job in a process-based manner, where the stream computing job includes at least one process.</p><p id="p-0055" num="0054">For a specific implementation of this step, reference can be made to the description of Step <b>102</b> in the embodiment shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and a repeated description is omitted here.</p><p id="p-0056" num="0055">Optionally, Step <b>203</b> includes: running the stream computing job in the process-based manner by using a compiled language as an implementation language.</p><p id="p-0057" num="0056">Further, the compiled language includes Golang language.</p><p id="p-0058" num="0057">Java is used as the implementation language in conventional stream computing job processing methods. Java is an interpreted language and relies on JVM (Java Virtual Machine) to run. Real-time compilation and execution of Java programs are performed by the JVM, which means that the JVM needs to be pre-installed in the stream computing system. Loading the entire JVM into the memory occupies significant memory resources. In addition, since Java is an interpreted language, during compilation, source codes cannot be directly translated into machine language, and needs to be translated into intermediate codes firstly; and then the intermediate codes are interpreted and run by an interpreter, which also increases the system resource consumption.</p><p id="p-0059" num="0058">In embodiments of the present application, the compiled language is taken as the implementation language, the stream computing job is run in the process-based manner, and the compiled language may include Golang language. Golang, abbreviated as Go, is a lightweight compiled language. Compiled languages such as Golang can compile the programs that need to be executed in the stream computing job directly into an executable file, and do not depend on an underlying environment such as JVM. The stream computing job can be run directly based on the executable file.</p><p id="p-0060" num="0059">It should be noted that, other lightweight compiled languages such as C or C++ can also be used in embodiments of the present application, without any limitation here.</p><p id="p-0061" num="0060">The above embodiment of the present application has the following advantages or beneficial effects: the compiled language is used as the implementation language to run the stream computing job in a process-based manner, so that the stream computing job is directly compiled into an executable file without relying on modules such as JVM or a underlying environment, and stream computing jobs are processed with high efficiency. Meanwhile, since the compiled language generates executable codes, unnecessary operations during compilation when using interpreted languages are reduced, thereby further reducing resource consumption such as memory.</p><p id="p-0062" num="0061">It should be noted that, the technical solutions in the embodiments of the present application are also applicable to the embodiment as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and can achieve the same beneficial effect, a repeated description is omitted here.</p><p id="p-0063" num="0062">Optionally, the stream computing job includes multiple processes; Step <b>203</b> includes: allocating running resources for the different processes of the stream computing job, respectively; running the processes on the respective running resources of the processes, where the multiple processes communicate with each other.</p><p id="p-0064" num="0063">The stream computing job may include only one process or may include multiple processes, and each of processes may include multiple threads of program execution. The system may allocate corresponding running resources for each process, the running resources include an address space corresponding to each process, where the address space represents a size of memory which can be occupied by the process while the process is running, and the address space includes a physical space and a virtual space. Each process runs on corresponding running resources, and the processes run independent of each other. In a case that one stream computing job includes multiple processes, when running the stream computing job, the multiple processes need to cooperate with each other and perform data communication and resource sharing, to jointly complete the stream computing job.</p><p id="p-0065" num="0064">Further, the multiple processes communicate with each other based on interprocess communication (IPC).</p><p id="p-0066" num="0065">In conventional stream computing frameworks, data transfer is achieved through network transmission between operators of different processes. In network transmission, in order to ensure integrity and transferability of data, a data object needs to be serialized and converted into a byte sequence at a sender firstly; and when the serialized byte stream is transmitted to a receiver, the receiver reconstructs the object by deserialization of the byte stream. Thus, transmission efficiency is low and the resource consumption is increased during the serialization and deserialization.</p><p id="p-0067" num="0066">In the embodiment of the present application, the stream computing job is run in a process-based manner, and communication between the processes can be guaranteed based on IPC (interprocess communication). IPC is a set of programming interfaces that can coordinate operation of different processes, so that the multiple processes of the stream computing job can run independently of each other while passing and exchanging information with each other, so as to coordinate operation of a single stream computing job. IPC includes features such as pipelines, message queues, shared memory, and semaphores, and can achieve data sharing between the multiple processes of the stream computing job as well as data transmission, notification time, resource sharing, and process control. IPC eliminates the need for network transmission of the data object, reduces serialization and deserialization of data objects, and improves the efficiency of data transmission between the multiple processes of the stream computing job, while further reducing resource consumption.</p><p id="p-0068" num="0067">Specifically, the multiple processes can communicate with each other by sharing memory, and pass data objects directly in the memory. The multiple processes of the stream computing job have address spaces that are independent of each other, but the multiple processes can access a shared memory zone at the same time. Each process has its own process control block, address space and one page table corresponding to the address space, and the page table is responsible for mapping a virtual address of the current process to a physical address. When the multiple processes map a virtual address to a physical address through a page table, there is a shared memory zone in the physical address space, and the multiple processes can access the shared memory zone. In this way, when any process writes data to the shared memory zone, data changes caused by the data written by the process are instantly known to other processes that share memory with the process, and the other processes can read the data.</p><p id="p-0069" num="0068">It should be noted that, in the embodiment of the present application, communication between the multiple processes of the stream computing job may also be achieved through other IPC features other than the shared memory, or communication can be implemented by utilizing more than two IPC features in conjunction, which is not limited here.</p><p id="p-0070" num="0069">It should be noted that, in the embodiment of the present application, multiple processes run on respective running resources, and communication between the multiple processes based on IPC is coordinated with each other, and there is no precedence order in terms of execution.</p><p id="p-0071" num="0070">The embodiment of the present application has the following advantages or beneficial effects: multiple processes of a stream computing job run on allocated respective running resources, while the multiple processes can communicate with each other. Further, the multiple processes can communicate with each other based on IPC, without the need for communication through network transmission, thus the serialization and deserialization of data objects during network transmission are reduced. While multiple processes run independently, the multiple processes can pass and exchange information with each other to jointly coordinate running of one stream computing job, which improves data transmission efficiency, in turn improves the efficiency of stream computing job processing, and while further reduces resource consumption such as memory.</p><p id="p-0072" num="0071">It should be noted that, the technical solutions in the embodiments of the present application are also applicable to the embodiment as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and can achieve the same beneficial effect, which will not be repeated here to avoid repetition.</p><p id="p-0073" num="0072">The stream computing job processing method provided in the embodiment of the present disclosure adds a number of optional implementations to the embodiment shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, which can further reduce resource consumption.</p><p id="p-0074" num="0073">The present application further provides a stream computing system. As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the stream computing system <b>300</b> includes: an obtaining module <b>301</b>, configured to obtain a stream computing job; a running module <b>302</b>, configured to run the stream computing job in a process-based manner, where the stream computing job includes at least one process.</p><p id="p-0075" num="0074">Optionally, as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the stream computing system <b>300</b> further includes: a reception module <b>303</b>, configured to receive the stream computing job sent by a cloud server, where the stream computing job is generated by the cloud server.</p><p id="p-0076" num="0075">Optionally, the running module <b>302</b> is specifically configured to run the stream computing job in the process-based manner by using a compiled language as an implementation language.</p><p id="p-0077" num="0076">Optionally, the compiled language includes Golang language.</p><p id="p-0078" num="0077">Optionally, the stream computing job includes multiple processes; as shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the running module <b>302</b> includes: an allocation unit <b>3021</b>, configured to allocate running resources for the different processes of the stream computing job, respectively; a running unit <b>3022</b>, configured to run the processes on respective running resources of the processes, where the multiple processes communicate with each other.</p><p id="p-0079" num="0078">Optionally, the multiple processes communicate with each other based on interprocess communication (IPC).</p><p id="p-0080" num="0079">In the embodiment of the present application, the stream computing system <b>300</b> is capable of implementing various processes implemented in the method embodiments shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and achieves the same beneficial effects. To avoid repetition, details are not described herein again.</p><p id="p-0081" num="0080">According to embodiments of the present application, an electronic device and a readable storage medium are further provided.</p><p id="p-0082" num="0081">As shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, a block diagram of an electronic device for implementing a stream computing job processing method according to an embodiment of the present application is illustrated. The electronic device is intended to represent all kinds of digital computers, such as a laptop computer, a desktop computer, a work station, a personal digital assistant, a server, a blade server, a main frame or other suitable computers. The electronic device may also represent all kinds of mobile devices, such as a personal digital assistant, a cell phone, a smart phone, a wearable device and other similar computing devices. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the present application described and/or claimed herein.</p><p id="p-0083" num="0082">As shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the electronic device includes: one or more processors <b>601</b>, a memory <b>602</b>, and interfaces for connecting various components, including a high-speed interface and a low-speed interface. The various components are interconnected using different buses and may be mounted on a common motherboard or mounted in another manner as desired. The processors may process instructions configured to be executed in the electronic device, and the instructions include instructions stored in the memory or on the memory to display graphical information of GUI on an external input/output device (such as a display device coupled to the interface). In other embodiments, multiple processors and/or multiple buses may be used with multiple memories, if necessary. Also, multiple electronic devices may be connected, and each electronic device provides some of the necessary operations (e.g., in a server array, a group of blade servers, or a multi-processor system). <figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a single processor <b>601</b> as an example.</p><p id="p-0084" num="0083">The memory <b>602</b> is a non-transitory computer-readable storage medium provided herein. The memory stores therein instructions executable by at least one processor to cause the at least one processor to implement the stream computing job processing method according to the present application. The non-transitory computer-readable storage medium of the present application stores therein computer instructions for causing a computer to implement the stream computing job processing method according to the present application.</p><p id="p-0085" num="0084">The memory <b>602</b>, as a non-transitory computer-readable storage medium, may be used to store non-transitory software programs, non-transitory computer-executable programs, and modules, such as program instructions/modules (e.g., the obtaining module <b>301</b> and the running module <b>302</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>) corresponding to the stream computing job processing method in the embodiments of the present application. By executing the non-transitory software programs, instructions and modules stored in the memory <b>602</b>, the processor <b>601</b> performs various functional applications and data processing of the server, i.e., implements the stream computing job processing method in the method embodiment described above.</p><p id="p-0086" num="0085">The memory <b>602</b> may include a program storage area and a data storage area, where the program storage area may store an operating system, and an application program required for at least one function; and the data storage area may store data created according to the usage of the electronic device for implementing the stream computing job processing method. In addition, the memory <b>602</b> may include a high speed random access memory, and may also include a non-transitory memory, such as at least one magnetic disk storage device, flash memory device, or other non-transitory solid state storage device. In some embodiments, the memory <b>602</b> may optionally include a memory remotely located with respect to the processor <b>601</b>. These remote memories may be connected via a network to the stream computing system. Examples of the network mentioned above include, but are not limited to, the Internet, an intranet, a local area network, a mobile communication network, and a combination thereof.</p><p id="p-0087" num="0086">The electronic device for implementing the stream computing job processing method may further include: an input device <b>603</b> and an output device <b>604</b>. The processor <b>601</b>, the memory <b>602</b>, the input device <b>603</b>, and the output device <b>604</b> may be connected to each other via a bus or in other ways. In <figref idref="DRAWINGS">FIG. <b>6</b></figref>, a connection by a bus is taken as an example.</p><p id="p-0088" num="0087">The input device <b>603</b> may receive inputted numeric or character information and generate key signal inputs related to user settings and functional controls of the electronic device for implementing the stream computing job processing method. For example, the input device may include a touch screen, a keypad, a mouse, a trackpad, a touch pad, a pointing stick, one or more mouse buttons, a trackball, a joystick, etc. The output device <b>604</b> may include a display device, an auxiliary lighting device (e.g., LED), a tactile feedback device (e.g., a vibration motor), etc. The display device may include, but is not limited to, a liquid crystal display (LCD), a light emitting diode (LED) display, and a plasma display. In some embodiments, the display device may be a touch screen.</p><p id="p-0089" num="0088">Various embodiments of the systems and techniques described herein can be implemented in a digital electronic circuit system, an integrated circuit system, an ASIC (application specific integrated circuit), computer hardware, firmware, software, and/or combinations thereof. These various implementations may include implementation in one or more computer programs that may be executed and/or interpreted on a programmable system including at least one programmable processor. The programmable processor may be a dedicated or general purpose programmable processor, and may receive data and instructions from a storage system, at least one input device and at least one output device, and transmit data and instructions to the storage system, the at least one input device and the at least one output device.</p><p id="p-0090" num="0089">These computing programs (also referred to as programs, software, software applications, or codes) include machine instructions for a programmable processor, and may be implemented using high-level procedural and/or object-oriented programming languages, and/or assembly/machine languages. As used herein, the terms &#x201c;machine-readable medium&#x201d; and &#x201c;computer-readable medium&#x201d; refer to any computer program product, apparatus, and/or device (e.g., magnetic disk, optical disc, memory, programmable logic device (PLD)) for providing machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions implemented as machine-readable signals. The term &#x201c;machine-readable signal&#x201d; refers to any signal used to provide machine instructions and/or data to a programmable processor.</p><p id="p-0091" num="0090">To facilitate user interaction, the system and technique described herein may be implemented on a computer. The computer is provided with a display device (for example, a cathode ray tube (CRT) or liquid crystal display (LCD) monitor) for displaying information to a user, a keyboard and a pointing device (for example, a mouse or a track ball). The user may provide an input to the computer through the keyboard and the pointing device. Other kinds of devices may be provided for user interaction, for example, a feedback provided to the user may be any manner of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user may be received by any means (including sound input, voice input, or tactile input).</p><p id="p-0092" num="0091">The system and technique described herein may be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middle-ware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the system and technique), or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (LAN), a wide area network (WAN) and the Internet.</p><p id="p-0093" num="0092">The computer system can include a client and a server. The client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on respective computers and having a client-server relationship with each other.</p><p id="p-0094" num="0093">According to technical solutions of embodiments of the present application, a stream computing job is obtained; the stream computing job is run in a process-based manner, where the stream computing job includes at least one process. The stream computing job is run directly as a process. Compared with the parallel processing approach for stream computing jobs such as the Master/Worker structure in the prior art, this can avoid the problem of large resource consumption in the parallel processing approach, and can greatly reduce the resource consumption of the stream computing system, which is especially suitable for scenarios with limited number of jobs and limited computing capability.</p><p id="p-0095" num="0094">It is appreciated, all forms of processes shown above may be used, and steps thereof may be reordered, added or deleted. For example, as long as expected results of the technical solutions of the present application can be achieved, steps set forth in the present application may be performed in parallel, performed sequentially, or performed in a different order, and there is no limitation in this regard.</p><p id="p-0096" num="0095">The foregoing specific implementations constitute no limitation on the scope of the present application. It is appreciated by those skilled in the art, various modifications, combinations, sub-combinations and replacements may be made according to design requirements and other factors. Any modifications, equivalent replacements and improvements made without deviating from the spirit and principle of the present application shall be deemed as falling within the scope of the present application.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A stream computing job processing method, comprising:<claim-text>obtaining a stream computing job;</claim-text><claim-text>running the stream computing job in a process-based manner, wherein the stream computing job comprises at least one process.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The stream computing job processing method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein, prior to obtaining the stream computing job, the method further comprises:<claim-text>receiving the stream computing job sent by a cloud server, wherein the stream computing job is generated by the cloud server.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The stream computing job processing method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the running the stream computing job in the process-based manner comprises:<claim-text>running the stream computing job in the process-based manner by using a compiled language as an implementation language.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The stream computing job processing method according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the compiled language comprises Golang language.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The stream computing job processing method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the stream computing job comprises multiple processes;<claim-text>the running the stream computing job in the process-based manner comprises:</claim-text><claim-text>allocating running resources for the processes of the stream computing job, respectively;</claim-text><claim-text>running the processes on respective running resources of the processes, wherein the multiple processes communicate with each other.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The stream computing job processing method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the multiple processes communicate with each other based on interprocess communication (IPC).</claim-text></claim><claim id="CLM-07-12" num="07-12"><claim-text><b>7</b>.-<b>12</b>. (canceled)</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. An electronic device, comprising:<claim-text>at least one processor; and</claim-text><claim-text>a memory communicatively connected to the at least one processor, wherein,</claim-text><claim-text>the memory stores therein an instruction executable by the at least one processor, and the at least one processor is configured to execute the instruction to implement a stream computing job processing method comprising:</claim-text><claim-text>obtaining a stream computing job;</claim-text><claim-text>running the stream computing job in a process-based manner, wherein the stream computing job comprises at least one process.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A non-transitory computer readable storage medium storing therein a computer instruction, wherein the computer instruction is configured to be executed by a computer, to implement a stream computing job processing method comprising:<claim-text>obtaining a stream computing job;</claim-text><claim-text>running the stream computing job in a process-based manner, wherein the stream computing job comprises at least one process.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The electronic device according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein, prior to obtaining the stream computing job, the method further comprises:<claim-text>receiving the stream computing job sent by a cloud server, wherein the stream computing job is generated by the cloud server.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The electronic device according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the running the stream computing job in the process-based manner comprises:<claim-text>running the stream computing job in the process-based manner by using a compiled language as an implementation language.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The electronic device according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the compiled language comprises Golang language.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The electronic device according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the stream computing job comprises multiple processes;<claim-text>the running the stream computing job in the process-based manner comprises:</claim-text><claim-text>allocating running resources for the processes of the stream computing job, respectively;</claim-text><claim-text>running the processes on respective running resources of the processes, wherein the multiple processes communicate with each other.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The electronic device according to <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the multiple processes communicate with each other based on interprocess communication (IPC).</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer readable storage medium according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein, prior to obtaining the stream computing job, the method further comprises:<claim-text>receiving the stream computing job sent by a cloud server, wherein the stream computing job is generated by the cloud server.</claim-text></claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The non-transitory computer readable storage medium according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the running the stream computing job in the process-based manner comprises:<claim-text>running the stream computing job in the process-based manner by using a compiled language as an implementation language.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The non-transitory computer readable storage medium according to <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the compiled language comprises Golang language.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The non-transitory computer readable storage medium according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the stream computing job comprises multiple processes;<claim-text>the running the stream computing job in the process-based manner comprises:</claim-text><claim-text>allocating running resources for the processes of the stream computing job, respectively;</claim-text><claim-text>running the processes on respective running resources of the processes, wherein the multiple processes communicate with each other.</claim-text></claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The non-transitory computer readable storage medium according to <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the multiple processes communicate with each other based on interprocess communication (IPC).</claim-text></claim></claims></us-patent-application>