<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007292A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007292</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17941691</doc-number><date>20220909</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>46</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>174</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>169</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>46</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>174</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>188</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>82</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHOD FOR SIGNALING MIXED NAL UNIT TYPE AND SUBPICTURE PARTITIONING CODED VIDEO STREAM</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17095289</doc-number><date>20201111</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17941691</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>63003137</doc-number><date>20200331</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>TENCENT AMERICA LLC</orgname><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>CHOI</last-name><first-name>Byeongdoo</first-name><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>WENGER</last-name><first-name>Stephan</first-name><address><city>Hillsborough</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>LIU</last-name><first-name>Shan</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>TENCENT AMERICA LLC</orgname><role>02</role><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method, computer program, and computer system is provided for coding video data. Video data including one or more subpictures is received. A network abstraction layer (NAL) unit type associated with each of the one or more subpictures is identified based on checking a flag corresponding to mixed NAL units in the one or more subpictures. The video data is decoded based on the identified NAL unit types.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="121.16mm" wi="158.75mm" file="US20230007292A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="241.89mm" wi="185.00mm" orientation="landscape" file="US20230007292A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="241.64mm" wi="183.98mm" orientation="landscape" file="US20230007292A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="235.03mm" wi="162.05mm" orientation="landscape" file="US20230007292A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="219.20mm" wi="162.48mm" orientation="landscape" file="US20230007292A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="224.54mm" wi="174.75mm" orientation="landscape" file="US20230007292A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="221.74mm" wi="175.60mm" orientation="landscape" file="US20230007292A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="238.08mm" wi="184.74mm" orientation="landscape" file="US20230007292A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="234.53mm" wi="174.41mm" orientation="landscape" file="US20230007292A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="217.76mm" wi="153.75mm" file="US20230007292A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="163.41mm" wi="185.00mm" orientation="landscape" file="US20230007292A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="190.50mm" wi="178.82mm" orientation="landscape" file="US20230007292A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="228.94mm" wi="149.61mm" orientation="landscape" file="US20230007292A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="194.48mm" wi="164.76mm" orientation="landscape" file="US20230007292A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="199.81mm" wi="176.53mm" orientation="landscape" file="US20230007292A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="241.81mm" wi="178.31mm" orientation="landscape" file="US20230007292A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="233.51mm" wi="179.32mm" orientation="landscape" file="US20230007292A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="196.17mm" wi="153.75mm" file="US20230007292A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="164.85mm" wi="153.75mm" file="US20230007292A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="193.12mm" wi="113.28mm" orientation="landscape" file="US20230007292A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="193.12mm" wi="136.99mm" orientation="landscape" file="US20230007292A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="197.27mm" wi="156.13mm" orientation="landscape" file="US20230007292A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="195.16mm" wi="155.45mm" orientation="landscape" file="US20230007292A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="184.07mm" wi="179.24mm" orientation="landscape" file="US20230007292A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="168.74mm" wi="106.00mm" orientation="landscape" file="US20230007292A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This application is a Continuation application of U.S. application Ser. No. 17/095,289 filed on Nov. 11, 2020, which claims priority from U.S. Provisional Patent Application No. 63/003,137, filed on Mar. 31, 2020, in the U.S. Patent and Trademark Office, which are incorporated herein by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">This disclosure relates generally to field of data processing, and more particularly to video encoding and decoding.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Video coding and decoding using inter-picture prediction with motion compensation has been known for decades. Uncompressed digital video can consist of a series of pictures, each picture having a spatial dimension of, for example, 1920&#xd7;1080 luminance samples and associated chrominance samples. The series of pictures can have a fixed or variable picture rate (informally also known as frame rate), of, for example 60 pictures per second or 60 Hz. Uncompressed video has significant bitrate requirements. For example, 1080p60 4:2:0 video at 8 bit per sample (1920&#xd7;1080 luminance sample resolution at 60 Hz frame rate) requires close to 1.5 Gbit/s bandwidth. An hour of such video requires more than 600 GByte of storage space.</p><p id="p-0005" num="0004">One purpose of video coding and decoding can be the reduction of redundancy in the input video signal, through compression. Compression can help reducing aforementioned bandwidth or storage space requirements, in some cases by two orders of magnitude or more. Both lossless and lossy compression, as well as a combination thereof can be employed. Lossless compression refers to techniques where an exact copy of the original signal can be reconstructed from the compressed original signal. When using lossy compression, the reconstructed signal may not be identical to the original signal, but the distortion between original and reconstructed signal is small enough to make the reconstructed signal useful for the intended application. In the case of video, lossy compression is widely employed. The amount of distortion tolerated depends on the application; for example, users of certain consumer streaming applications may tolerate higher distortion than users of television contribution applications. The compression ratio achievable can reflect that: higher allowable/tolerable distortion can yield higher compression ratios.</p><p id="p-0006" num="0005">A video encoder and decoder can utilize techniques from several broad categories, including, for example, motion compensation, transform, quantization, and entropy coding, some of which will be introduced below.</p><p id="p-0007" num="0006">Historically, video encoders and decoders tended to operate on a given picture size that was, in most cases, defined and stayed constant for a coded video sequence (CVS), Group of Pictures (GOP), or a similar multi-picture timeframe. For example, in MPEG-2, system designs are known to change the horizontal resolution (and, thereby, the picture size) dependent on factors such as activity of the scene, but only at I pictures, hence typically for a GOP. The resampling of reference pictures for use of different resolutions within a CVS is known, for example, from ITU-T Rec. H.263 Annex P. However, here the picture size does not change, only the reference pictures are being resampled, resulting potentially in only parts of the picture canvas being used (in case of downsampling), or only parts of the scene being captured (in case of upsampling). Further, H.263 Annex Q allows the resampling of an individual macroblock by a factor of two (in each dimension), upward or downward. Again, the picture size remains the same. The size of a macroblock is fixed in H.263, and therefore does not need to be signaled.</p><p id="p-0008" num="0007">Changes of picture size in predicted pictures became more mainstream in modern video coding. For example, VP9 allows reference picture resampling and change of resolution for a whole picture. Similarly, certain proposals made towards VVC (including, for example, Hendry, et. al, &#x201c;On adaptive resolution change (ARC) for VVC&#x201d;, Joint Video Team document JVET-M0135-v1, Jan. 9-19, 2019, incorporated herein in its entirety) allow for resampling of whole reference pictures to different-higher or lower-resolutions. In that document, different candidate resolutions are suggested to be coded in the sequence parameter set and referred to by per-picture syntax elements in the picture parameter set.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0009" num="0008">Embodiments relate to a method, system, and computer readable medium for coding video data. According to one aspect, a method for coding video data is provided. The method may include receiving video data including one or more subpictures. A network abstraction layer (NAL) unit type associated with each of the one or more subpictures is identified based on checking a flag corresponding to mixed NAL units in the one or more subpictures. The video data is decoded based on the identified NAL unit types.</p><p id="p-0010" num="0009">According to another aspect, a computer system for coding video data is provided. The computer system may include one or more processors, one or more computer-readable memories, one or more computer-readable tangible storage devices, and program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories, whereby the computer system is capable of performing a method. The method may include receiving video data including one or more subpictures. A network abstraction layer (NAL) unit type associated with each of the one or more subpictures is identified based on checking a flag corresponding to mixed NAL units in the one or more subpictures. The video data is decoded based on the identified NAL unit types.</p><p id="p-0011" num="0010">According to yet another aspect, a computer readable medium for coding video data is provided. The computer readable medium may include one or more computer-readable storage devices and program instructions stored on at least one of the one or more tangible storage devices, the program instructions executable by a processor. The program instructions are executable by a processor for performing a method that may accordingly include receiving video data including one or more subpictures. A network abstraction layer (NAL) unit type associated with each of the one or more subpictures is identified based on checking a flag corresponding to mixed NAL units in the one or more subpictures. The video data is decoded based on the identified NAL unit types.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0012" num="0011">These and other objects, features and advantages will become apparent from the following detailed description of illustrative embodiments, which is to be read in connection with the accompanying drawings. The various features of the drawings are not to scale as the illustrations are for clarity in facilitating the understanding of one skilled in the art in conjunction with the detailed description. In the drawings:</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic illustration of a simplified block diagram of a communication system in accordance with an embodiment.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic illustration of a simplified block diagram of a communication system in accordance with an embodiment.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic illustration of a simplified block diagram of a decoder in accordance with an embodiment.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic illustration of a simplified block diagram of an encoder in accordance with an embodiment.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic illustration of options for signaling ARC parameters in accordance with prior art or an embodiment, as indicated.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an example of a syntax table in accordance with an embodiment.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic illustration of a computer system in accordance with an embodiment.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is an example of prediction structure for scalability with adaptive resolution change.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is an example of a syntax table in accordance with an embodiment.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a schematic illustration of a simplified block diagram of parsing and decoding poc cycle per access unit and access unit count value.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a schematic illustration of a video bitstream structure comprising multi-layered sub-pictures.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a schematic illustration of a display of the selected sub-picture with an enhanced resolution.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a block diagram of the decoding and display process for a video bitstream comprising multi-layered sub-pictures.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a schematic illustration of 360 video display with an enhancement layer of a sub-picture.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is an example of a layout information of sub-pictures and its corresponding layer and picture prediction structure.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is an example of a layout information of sub-pictures and its corresponding layer and picture prediction structure, with spatial scalability modality of local region.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is an example of a syntax table for sub-picture layout information</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is an example of a syntax table of SEI message for sub-picture layout information.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is an example of a syntax table to indicate output layers and profile/tier/level information for each output layer set.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is an example of a syntax table to indicate output layer mode on for each output layer set.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is an example of a syntax table to indicate the present subpicture of each layer for each output layer set.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>22</b></figref> is an example of a syntax table to indicate the subpicture identifier.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>23</b></figref> is an example of a syntax table to indicate the subpicture partitioning information.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>24</b></figref> is an example of a syntax table to indicate the mixed NAL unit type and the associated subpicture partitioning information.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0037" num="0036">Detailed embodiments of the claimed structures and methods are disclosed herein; however, it can be understood that the disclosed embodiments are merely illustrative of the claimed structures and methods that may be embodied in various forms. Those structures and methods may, however, be embodied in many different forms and should not be construed as limited to the exemplary embodiments set forth herein. Rather, these exemplary embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope to those skilled in the art. In the description, details of well-known features and techniques may be omitted to avoid unnecessarily obscuring the presented embodiments.</p><p id="p-0038" num="0037">As previously described, video encoders and decoders tended to operate on a given picture size that was, in most cases, defined and stayed constant for a coded video sequence. However, a picture can be partitioned into one or more subpictures. Each subpicture can be further partitioned into one or more slices. Two or more independently coded sub-pictures may be merged into a coded picture, decoded by a decoder, and displayed as a single output picture. It may be advantageous, therefore, to specify some encoding or decoding constraints when two or more independently coded pictures are merged into a coded picture.</p><p id="p-0039" num="0038">Aspects are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer readable media according to the various embodiments. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a simplified block diagram of a communication system (<b>100</b>) according to an embodiment of the present disclosure. The system (<b>100</b>) may include at least two terminals (<b>110</b>-<b>120</b>) interconnected via a network (<b>150</b>). For unidirectional transmission of data, a first terminal (<b>110</b>) may code video data at a local location for transmission to the other terminal (<b>120</b>) via the network (<b>150</b>). The second terminal (<b>120</b>) may receive the coded video data of the other terminal from the network (<b>150</b>), decode the coded data and display the recovered video data. Unidirectional data transmission may be common in media serving applications and the like.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a second pair of terminals (<b>130</b>, <b>140</b>) provided to support bidirectional transmission of coded video that may occur, for example, during videoconferencing. For bidirectional transmission of data, each terminal (<b>130</b>, <b>140</b>) may code video data captured at a local location for transmission to the other terminal via the network (<b>150</b>). Each terminal (<b>130</b>, <b>140</b>) also may receive the coded video data transmitted by the other terminal, may decode the coded data and may display the recovered video data at a local display device.</p><p id="p-0042" num="0041">In <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the terminals (<b>110</b>-<b>140</b>) may be illustrated as servers, personal computers and smart phones but the principles of the present disclosure may be not so limited. Embodiments of the present disclosure find application with laptop computers, tablet computers, media players and/or dedicated video conferencing equipment. The network (<b>150</b>) represents any number of networks that convey coded video data among the terminals (<b>110</b>-<b>140</b>), including for example wireline and/or wireless communication networks. The communication network (<b>150</b>) may exchange data in circuit-switched and/or packet-switched channels. Representative networks include telecommunications networks, local area networks, wide area networks and/or the Internet. For the purposes of the present discussion, the architecture and topology of the network (<b>150</b>) may be immaterial to the operation of the present disclosure unless explained herein below.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates, as an example for an application for the disclosed subject matter, the placement of a video encoder and decoder in a streaming environment. The disclosed subject matter can be equally applicable to other video enabled applications, including, for example, video conferencing, digital TV, storing of compressed video on digital media including CD, DVD, memory stick and the like, and so on.</p><p id="p-0044" num="0043">A streaming system may include a capture subsystem (<b>213</b>), that can include a video source (<b>201</b>), for example a digital camera, creating a for example uncompressed video sample stream (<b>202</b>). That sample stream (<b>202</b>), depicted as a bold line to emphasize a high data volume when compared to encoded video bitstreams, can be processed by an encoder (<b>203</b>) coupled to the camera (<b>201</b>). The encoder (<b>203</b>) can include hardware, software, or a combination thereof to enable or implement aspects of the disclosed subject matter as described in more detail below. The encoded video bitstream (<b>204</b>), depicted as a thin line to emphasize the lower data volume when compared to the sample stream, can be stored on a streaming server (<b>205</b>) for future use. One or more streaming clients (<b>206</b>, <b>208</b>) can access the streaming server (<b>205</b>) to retrieve copies (<b>207</b>, <b>209</b>) of the encoded video bitstream (<b>204</b>). A client (<b>206</b>) can include a video decoder (<b>210</b>) which decodes the incoming copy of the encoded video bitstream (<b>207</b>) and creates an outgoing video sample stream (<b>211</b>) that can be rendered on a display (<b>212</b>) or other rendering device (not depicted). In some streaming systems, the video bitstreams (<b>204</b>, <b>207</b>, <b>209</b>) can be encoded according to certain video coding/compression standards. Examples of those standards include ITU-T Recommendation H.265. Under development is a video coding standard informally known as Versatile Video Coding or VVC. The disclosed subject matter may be used in the context of VVC.</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>3</b></figref> may be a functional block diagram of a video decoder (<b>210</b>) according to an embodiment.</p><p id="p-0046" num="0045">A receiver (<b>310</b>) may receive one or more codec video sequences to be decoded by the decoder (<b>210</b>); in the same or another embodiment, one coded video sequence at a time, where the decoding of each coded video sequence is independent from other coded video sequences. The coded video sequence may be received from a channel (<b>312</b>), which may be a hardware/software link to a storage device which stores the encoded video data. The receiver (<b>310</b>) may receive the encoded video data with other data, for example, coded audio data and/or ancillary data streams, that may be forwarded to their respective using entities (not depicted). The receiver (<b>310</b>) may separate the coded video sequence from the other data. To combat network jitter, a buffer memory (<b>315</b>) may be coupled in between receiver (<b>310</b>) and entropy decoder/parser (<b>320</b>) (&#x201c;parser&#x201d; henceforth). When receiver (<b>310</b>) is receiving data from a store/forward device of sufficient bandwidth and controllability, or from an isosychronous network, the buffer (<b>315</b>) may not be needed, or can be small. For use on best effort packet networks such as the Internet, the buffer (<b>315</b>) may be required, can be comparatively large and can advantageously of adaptive size.</p><p id="p-0047" num="0046">The video decoder (<b>210</b>) may include an parser (<b>320</b>) to reconstruct symbols (<b>321</b>) from the entropy coded video sequence. Categories of those symbols include information used to manage operation of the decoder (<b>210</b>), and potentially information to control a rendering device such as a display (<b>212</b>) that is not an integral part of the decoder but can be coupled to it, as was shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The control information for the rendering device(s) may be in the form of Supplementary Enhancement Information (SEI messages) or Video Usability Information (VUI) parameter set fragments (not depicted). The parser (<b>320</b>) may parse/entropy-decode the coded video sequence received. The coding of the coded video sequence can be in accordance with a video coding technology or standard, and can follow principles well known to a person skilled in the art, including variable length coding, Huffman coding, arithmetic coding with or without context sensitivity, and so forth. The parser (<b>320</b>) may extract from the coded video sequence, a set of subgroup parameters for at least one of the subgroups of pixels in the video decoder, based upon at least one parameters corresponding to the group. Subgroups can include Groups of Pictures (GOPs), pictures, tiles, slices, macroblocks, Coding Units (CUs), blocks, Transform Units (TUs), Prediction Units (PUs) and so forth. The entropy decoder/parser may also extract from the coded video sequence information such as transform coefficients, quantizer parameter values, motion vectors, and so forth.</p><p id="p-0048" num="0047">The parser (<b>320</b>) may perform entropy decoding/parsing operation on the video sequence received from the buffer (<b>315</b>), so to create symbols (<b>321</b>).</p><p id="p-0049" num="0048">Reconstruction of the symbols (<b>321</b>) can involve multiple different units depending on the type of the coded video picture or parts thereof (such as: inter and intra picture, inter and intra block), and other factors. Which units are involved, and how, can be controlled by the subgroup control information that was parsed from the coded video sequence by the parser (<b>320</b>). The flow of such subgroup control information between the parser (<b>320</b>) and the multiple units below is not depicted for clarity.</p><p id="p-0050" num="0049">Beyond the functional blocks already mentioned, decoder <b>210</b> can be conceptually subdivided into a number of functional units as described below. In a practical implementation operating under commercial constraints, many of these units interact closely with each other and can, at least partly, be integrated into each other. However, for the purpose of describing the disclosed subject matter, the conceptual subdivision into the functional units below is appropriate.</p><p id="p-0051" num="0050">A first unit is the scaler/inverse transform unit (<b>351</b>). The scaler/inverse transform unit (<b>351</b>) receives quantized transform coefficient as well as control information, including which transform to use, block size, quantization factor, quantization scaling matrices, etc. as symbol(s) (<b>321</b>) from the parser (<b>320</b>). It can output blocks comprising sample values, that can be input into aggregator (<b>355</b>).</p><p id="p-0052" num="0051">In some cases, the output samples of the scaler/inverse transform (<b>351</b>) can pertain to an intra coded block; that is: a block that is not using predictive information from previously reconstructed pictures, but can use predictive information from previously reconstructed parts of the current picture. Such predictive information can be provided by an intra picture prediction unit (<b>352</b>). In some cases, the intra picture prediction unit (<b>352</b>) generates a block of the same size and shape of the block under reconstruction, using surrounding already reconstructed information fetched from the current (partly reconstructed) picture (<b>356</b>). The aggregator (<b>355</b>), in some cases, adds, on a per sample basis, the prediction information the intra prediction unit (<b>352</b>) has generated to the output sample information as provided by the scaler/inverse transform unit (<b>351</b>).</p><p id="p-0053" num="0052">In other cases, the output samples of the scaler/inverse transform unit (<b>351</b>) can pertain to an inter coded, and potentially motion compensated block. In such a case, a Motion Compensation Prediction unit (<b>353</b>) can access reference picture memory (<b>357</b>) to fetch samples used for prediction. After motion compensating the fetched samples in accordance with the symbols (<b>321</b>) pertaining to the block, these samples can be added by the aggregator (<b>355</b>) to the output of the scaler/inverse transform unit (in this case called the residual samples or residual signal) so to generate output sample information. The addresses within the reference picture memory form where the motion compensation unit fetches prediction samples can be controlled by motion vectors, available to the motion compensation unit in the form of symbols (<b>321</b>) that can have, for example X, Y, and reference picture components. Motion compensation also can include interpolation of sample values as fetched from the reference picture memory when sub-sample exact motion vectors are in use, motion vector prediction mechanisms, and so forth.</p><p id="p-0054" num="0053">The output samples of the aggregator (<b>355</b>) can be subject to various loop filtering techniques in the loop filter unit (<b>356</b>). Video compression technologies can include in-loop filter technologies that are controlled by parameters included in the coded video bitstream and made available to the loop filter unit (<b>356</b>) as symbols (<b>321</b>) from the parser (<b>320</b>), but can also be responsive to meta-information obtained during the decoding of previous (in decoding order) parts of the coded picture or coded video sequence, as well as responsive to previously reconstructed and loop-filtered sample values.</p><p id="p-0055" num="0054">The output of the loop filter unit (<b>356</b>) can be a sample stream that can be output to the render device (<b>212</b>) as well as stored in the reference picture memory (<b>356</b>) for use in future inter-picture prediction.</p><p id="p-0056" num="0055">Certain coded pictures, once fully reconstructed, can be used as reference pictures for future prediction. Once a coded picture is fully reconstructed and the coded picture has been identified as a reference picture (by, for example, parser (<b>320</b>)), the current reference picture (<b>356</b>) can become part of the reference picture buffer (<b>357</b>), and a fresh current picture memory can be reallocated before commencing the reconstruction of the following coded picture.</p><p id="p-0057" num="0056">The video decoder <b>320</b> may perform decoding operations according to a predetermined video compression technology that may be documented in a standard, such as ITU-T Rec. H.265. The coded video sequence may conform to a syntax specified by the video compression technology or standard being used, in the sense that it adheres to the syntax of the video compression technology or standard, as specified in the video compression technology document or standard and specifically in the profiles document therein. Also necessary for compliance can be that the complexity of the coded video sequence is within bounds as defined by the level of the video compression technology or standard. In some cases, levels restrict the maximum picture size, maximum frame rate, maximum reconstruction sample rate (measured in, for example megasamples per second), maximum reference picture size, and so on. Limits set by levels can, in some cases, be further restricted through Hypothetical Reference Decoder (HRD) specifications and metadata for HRD buffer management signaled in the coded video sequence.</p><p id="p-0058" num="0057">In an embodiment, the receiver (<b>310</b>) may receive additional (redundant) data with the encoded video. The additional data may be included as part of the coded video sequence(s). The additional data may be used by the video decoder (<b>320</b>) to properly decode the data and/or to more accurately reconstruct the original video data. Additional data can be in the form of, for example, temporal, spatial, or SNR enhancement layers, redundant slices, redundant pictures, forward error correction codes, and so on.</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>4</b></figref> may be a functional block diagram of a video encoder (<b>203</b>) according to an embodiment of the present disclosure.</p><p id="p-0060" num="0059">The encoder (<b>203</b>) may receive video samples from a video source (<b>201</b>) (that is not part of the encoder) that may capture video image(s) to be coded by the encoder (<b>203</b>).</p><p id="p-0061" num="0060">The video source (<b>201</b>) may provide the source video sequence to be coded by the encoder (<b>203</b>) in the form of a digital video sample stream that can be of any suitable bit depth (for example: 8 bit, 10 bit, 12 bit, . . . ), any colorspace (for example, BT.601 Y CrCB, RGB, . . . ) and any suitable sampling structure (for example Y CrCb 4:2:0, Y CrCb 4:4:4). In a media serving system, the video source (<b>201</b>) may be a storage device storing previously prepared video. In a videoconferencing system, the video source (<b>203</b>) may be a camera that captures local image information as a video sequence. Video data may be provided as a plurality of individual pictures that impart motion when viewed in sequence. The pictures themselves may be organized as a spatial array of pixels, wherein each pixel can comprise one or more sample depending on the sampling structure, color space, etc. in use. A person skilled in the art can readily understand the relationship between pixels and samples. The description below focusses on samples.</p><p id="p-0062" num="0061">According to an embodiment, the encoder (<b>203</b>) may code and compress the pictures of the source video sequence into a coded video sequence (<b>443</b>) in real time or under any other time constraints as required by the application. Enforcing appropriate coding speed is one function of Controller (<b>450</b>). Controller controls other functional units as described below and is functionally coupled to these units. The coupling is not depicted for clarity. Parameters set by controller can include rate control related parameters (picture skip, quantizer, lambda value of rate-distortion optimization techniques, . . . ), picture size, group of pictures (GOP) layout, maximum motion vector search range, and so forth. A person skilled in the art can readily identify other functions of controller (<b>450</b>) as they may pertain to video encoder (<b>203</b>) optimized for a certain system design.</p><p id="p-0063" num="0062">Some video encoders operate in what a person skilled in the are readily recognizes as a &#x201c;coding loop&#x201d;. As an oversimplified description, a coding loop can consist of the encoding part of an encoder (<b>430</b>) (&#x201c;source coder&#x201d; henceforth) (responsible for creating symbols based on an input picture to be coded, and a reference picture(s)), and a (local) decoder (<b>433</b>) embedded in the encoder (<b>203</b>) that reconstructs the symbols to create the sample data a (remote) decoder also would create (as any compression between symbols and coded video bitstream is lossless in the video compression technologies considered in the disclosed subject matter). That reconstructed sample stream is input to the reference picture memory (<b>434</b>). As the decoding of a symbol stream leads to bit-exact results independent of decoder location (local or remote), the reference picture buffer content is also bit exact between local encoder and remote encoder. In other words, the prediction part of an encoder &#x201c;sees&#x201d; as reference picture samples exactly the same sample values as a decoder would &#x201c;see&#x201d; when using prediction during decoding. This fundamental principle of reference picture synchronicity (and resulting drift, if synchronicity cannot be maintained, for example because of channel errors) is well known to a person skilled in the art.</p><p id="p-0064" num="0063">The operation of the &#x201c;local&#x201d; decoder (<b>433</b>) can be the same as of a &#x201c;remote&#x201d; decoder (<b>210</b>), which has already been described in detail above in conjunction with <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Briefly referring also to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, however, as symbols are available and en/decoding of symbols to a coded video sequence by entropy coder (<b>445</b>) and parser (<b>320</b>) can be lossless, the entropy decoding parts of decoder (<b>210</b>), including channel (<b>312</b>), receiver (<b>310</b>), buffer (<b>315</b>), and parser (<b>320</b>) may not be fully implemented in local decoder (<b>433</b>).</p><p id="p-0065" num="0064">An observation that can be made at this point is that any decoder technology except the parsing/entropy decoding that is present in a decoder also necessarily needs to be present, in substantially identical functional form, in a corresponding encoder. For this reason, the disclosed subject matter focusses on decoder operation. The description of encoder technologies can be abbreviated as they are the inverse of the comprehensively described decoder technologies. Only in certain areas a more detail description is required and provided below.</p><p id="p-0066" num="0065">As part of its operation, the source coder (<b>430</b>) may perform motion compensated predictive coding, which codes an input frame predictively with reference to one or more previously-coded frames from the video sequence that were designated as &#x201c;reference frames.&#x201d; In this manner, the coding engine (<b>432</b>) codes differences between pixel blocks of an input frame and pixel blocks of reference frame(s) that may be selected as prediction reference(s) to the input frame.</p><p id="p-0067" num="0066">The local video decoder (<b>433</b>) may decode coded video data of frames that may be designated as reference frames, based on symbols created by the source coder (<b>430</b>). Operations of the coding engine (<b>432</b>) may advantageously be lossy processes. When the coded video data may be decoded at a video decoder (not shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>), the reconstructed video sequence typically may be a replica of the source video sequence with some errors. The local video decoder (<b>433</b>) replicates decoding processes that may be performed by the video decoder on reference frames and may cause reconstructed reference frames to be stored in the reference picture cache (<b>434</b>). In this manner, the encoder (<b>203</b>) may store copies of reconstructed reference frames locally that have common content as the reconstructed reference frames that will be obtained by a far-end video decoder (absent transmission errors).</p><p id="p-0068" num="0067">The predictor (<b>435</b>) may perform prediction searches for the coding engine (<b>432</b>). That is, for a new frame to be coded, the predictor (<b>435</b>) may search the reference picture memory (<b>434</b>) for sample data (as candidate reference pixel blocks) or certain metadata such as reference picture motion vectors, block shapes, and so on, that may serve as an appropriate prediction reference for the new pictures. The predictor (<b>435</b>) may operate on a sample block-by-pixel block basis to find appropriate prediction references. In some cases, as determined by search results obtained by the predictor (<b>435</b>), an input picture may have prediction references drawn from multiple reference pictures stored in the reference picture memory (<b>434</b>).</p><p id="p-0069" num="0068">The controller (<b>450</b>) may manage coding operations of the video coder (<b>430</b>), including, for example, setting of parameters and subgroup parameters used for encoding the video data.</p><p id="p-0070" num="0069">Output of all aforementioned functional units may be subjected to entropy coding in the entropy coder (<b>445</b>). The entropy coder translates the symbols as generated by the various functional units into a coded video sequence, by loss-less compressing the symbols according to technologies known to a person skilled in the art as, for example Huffman coding, variable length coding, arithmetic coding, and so forth.</p><p id="p-0071" num="0070">The transmitter (<b>440</b>) may buffer the coded video sequence(s) as created by the entropy coder (<b>445</b>) to prepare it for transmission via a communication channel (<b>460</b>), which may be a hardware/software link to a storage device which would store the encoded video data. The transmitter (<b>440</b>) may merge coded video data from the video coder (<b>430</b>) with other data to be transmitted, for example, coded audio data and/or ancillary data streams (sources not shown).</p><p id="p-0072" num="0071">The controller (<b>450</b>) may manage operation of the encoder (<b>203</b>). During coding, the controller (<b>450</b>) may assign to each coded picture a certain coded picture type, which may affect the coding techniques that may be applied to the respective picture. For example, pictures often may be assigned as one of the following frame types:</p><p id="p-0073" num="0072">An Intra Picture (I picture) may be one that may be coded and decoded without using any other frame in the sequence as a source of prediction. Some video codecs allow for different types of Intra pictures, including, for example Independent Decoder Refresh Pictures. A person skilled in the art is aware of those variants of I pictures and their respective applications and features.</p><p id="p-0074" num="0073">A Predictive picture (P picture) may be one that may be coded and decoded using intra prediction or inter prediction using at most one motion vector and reference index to predict the sample values of each block.</p><p id="p-0075" num="0074">A Bi-directionally Predictive Picture (B Picture) may be one that may be coded and decoded using intra prediction or inter prediction using at most two motion vectors and reference indices to predict the sample values of each block. Similarly, multiple-predictive pictures can use more than two reference pictures and associated metadata for the reconstruction of a single block.</p><p id="p-0076" num="0075">Source pictures commonly may be subdivided spatially into a plurality of sample blocks (for example, blocks of 4&#xd7;4, 8&#xd7;8, 4&#xd7;8, or 16&#xd7;16 samples each) and coded on a block-by-block basis. Blocks may be coded predictively with reference to other (already coded) blocks as determined by the coding assignment applied to the blocks' respective pictures. For example, blocks of I pictures may be coded non-predictively or they may be coded predictively with reference to already coded blocks of the same picture (spatial prediction or intra prediction). Pixel blocks of P pictures may be coded non-predictively, via spatial prediction or via temporal prediction with reference to one previously coded reference pictures. Blocks of B pictures may be coded non-predictively, via spatial prediction or via temporal prediction with reference to one or two previously coded reference pictures.</p><p id="p-0077" num="0076">The video coder (<b>203</b>) may perform coding operations according to a predetermined video coding technology or standard, such as ITU-T Rec. H.265. In its operation, the video coder (<b>203</b>) may perform various compression operations, including predictive coding operations that exploit temporal and spatial redundancies in the input video sequence. The coded video data, therefore, may conform to a syntax specified by the video coding technology or standard being used.</p><p id="p-0078" num="0077">In an embodiment, the transmitter (<b>440</b>) may transmit additional data with the encoded video. The video coder (<b>430</b>) may include such data as part of the coded video sequence. Additional data may comprise temporal/spatial/SNR enhancement layers, other forms of redundant data such as redundant pictures and slices, Supplementary Enhancement Information (SEI) messages, Visual Usability Information (VUI) parameter set fragments, and so on.</p><p id="p-0079" num="0078">Before describing certain aspects of the disclosed subject matter in more detail, a few terms need to be introduced that will be referred to in the remainder of this description.</p><p id="p-0080" num="0079">Sub-Picture henceforth refers to an, in some cases, rectangular arrangement of samples, blocks, macroblocks, coding units, or similar entities that are semantically grouped, and that may be independently coded in changed resolution. One or more sub-pictures may for a picture. One or more coded sub-pictures may form a coded picture. One or more sub-pictures may be assembled into a picture, and one or more sub pictures may be extracted from a picture. In certain environments, one or more coded sub-pictures may be assembled in the compressed domain without transcoding to the sample level into a coded picture, and in the same or certain other cases, one or more coded sub-pictures may be extracted from a coded picture in the compressed domain.</p><p id="p-0081" num="0080">Adaptive Resolution Change (ARC) henceforth refers to mechanisms that allow the change of resolution of a picture or sub-picture within a coded video sequence, by the means of, for example, reference picture resampling. ARC parameters henceforth refer to the control information required to perform adaptive resolution change, that may include, for example, filter parameters, scaling factors, resolutions of output and/or reference pictures, various control flags, and so forth.</p><p id="p-0082" num="0081">Above description is focused on coding and decoding a single, semantically independent coded video picture. Before describing the implication of coding/decoding of multiple sub pictures with independent ARC parameters and its implied additional complexity, options for signaling ARC parameters shall be described.</p><p id="p-0083" num="0082">Referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, shown are several novel options for signaling ARC parameters. As noted with each of the options, they have certain advantages and certain disadvantages from a coding efficiency, complexity, and architecture viewpoint. A video coding standard or technology may choose one or more of these options, or options known from previous art, for signaling ARC parameters. The options may not be mutually exclusive, and conceivably may be interchanged based on application needs, standards technology involved, or encoder's choice.</p><p id="p-0084" num="0083">Classes of ARC parameters may include:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0084">up/downsample factors, separate or combined in X and Y dimension</li>        <li id="ul0002-0002" num="0085">up/downsample factors, with an addition of a temporal dimension, indicating constant speed zoom in/out for a given number of pictures</li>        <li id="ul0002-0003" num="0086">Either of the above two may involve the coding of one or more presumably short syntax elements that may point into a table containing the factor(s).</li>        <li id="ul0002-0004" num="0087">resolution, in X or Y dimension, in units of samples, blocks, macroblocks, CUs, or any other suitable granularity, of the input picture, output picture, reference picture, coded picture, combined or separately. If there are more than one resolution (such as, for example, one for input picture, one for reference picture) then, in certain cases, one set of values may be inferred to from another set of values. Such could be gated, for example, by the use of flags. For a more detailed example, see below.</li>        <li id="ul0002-0005" num="0088">&#x201c;warping&#x201d; coordinates akin those used in H.263 Annex P, again in a suitable granularity as described above. H.263 Annex P defines one efficient way to code such warping coordinates, but other, potentially more efficient ways could conceivably also be devised. For example, the variable length reversible, &#x201c;Huffman&#x201d;-style coding of warping coordinates of Annex P could be replaced by a suitable length binary coding, where the length of the binary code word could, for example, be derived from a maximum picture size, possibly multiplied by a certain factor and offset by a certain value, so to allow for &#x201c;warping&#x201d; outside of the maximum picture size's boundaries.</li>        <li id="ul0002-0006" num="0089">up or downsample filter parameters. In the easiest case, there may be only a single filter for up and/or downsampling. However, in certain cases, it can be advantageous to allow more flexibility in filter design, and that may require to signaling of filter parameters. Such parameters may be selected through an index in a list of possible filter designs, the filter may be fully specified (for example through a list of filter coefficients, using suitable entropy coding techniques), the filter may be implicitly selected through up/downsample ratios according which in turn are signaled according to any of the mechanisms mentioned above, and so forth.</li>    </ul>    </li></ul></p><p id="p-0085" num="0090">Henceforth, the description assumes the coding of a finite set of up/downsample factors (the same factor to be used in both X and Y dimension), indicated through a codeword. That codeword can advantageously be variable length coded, for example using the Ext-Golomb code common for certain syntax elements in video coding specifications such as H.264 and H.265. One suitable mapping of values to up/downsample factors can, for example, be according to the following table</p><p id="p-0086" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="56pt" align="center"/><colspec colname="2" colwidth="56pt" align="center"/><colspec colname="3" colwidth="105pt" align="center"/><thead><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>Codeword</entry><entry>Ext-Golomb Code</entry><entry>Original/Target resolution</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="56pt" align="center"/><colspec colname="2" colwidth="56pt" align="char" char="."/><colspec colname="3" colwidth="105pt" align="center"/><tbody valign="top"><row><entry>0</entry><entry>1</entry><entry>1/1</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="56pt" align="center"/><colspec colname="2" colwidth="56pt" align="char" char="."/><colspec colname="3" colwidth="28pt" align="right"/><colspec colname="4" colwidth="77pt" align="left"/><tbody valign="top"><row><entry>1</entry><entry>010</entry><entry>1/1.5</entry><entry>(upscale by 50%)</entry></row><row><entry>2</entry><entry>011</entry><entry>1.5/1</entry><entry>(downscale by 50%)</entry></row><row><entry>3</entry><entry>00100</entry><entry>1/2</entry><entry>(upscale by 100%)</entry></row><row><entry>4</entry><entry>00101</entry><entry>2/1</entry><entry>(downscale by 100%)</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0087" num="0091">Many similar mappings could be devised according to the needs of an application and the capabilities of the up and downscale mechanisms available in a video compression technology or standard. The table could be extended to more values. Values may also be represented by entropy coding mechanisms other than Ext-Golomb codes, for example using binary coding. That may have certain advantages when the resampling factors were of interest outside the video processing engines (encoder and decoder foremost) themselves, for example by MANEs. It should be noted that, for the (presumably) most common case where no resolution change is required, an Ext-Golomb code can be chosen that is short; in the table above, only a single bit. That can have a coding efficiency advantage over using binary codes for the most common case.</p><p id="p-0088" num="0092">The number of entries in the table, as well as their semantics may be fully or partially configurable. For example, the basic outline of the table may be conveyed in a &#x201c;high&#x201d; parameter set such as a sequence or decoder parameter set. Alternatively or in addition, one or more such tables may be defined in a video coding technology or standard, and may be selected through for example a decoder or sequence parameter set.</p><p id="p-0089" num="0093">Henceforth, we describe how an upsample/downsample factor (ARC information), coded as described above, may be included in a video coding technology or standard syntax. Similar considerations may apply to one, or a few, codewords controlling up/downsample filters. See below for a discussion when comparatively large amounts of data are required for a filter or other data structures.</p><p id="p-0090" num="0094">H.263 Annex P includes the ARC information <b>502</b> in the form of four warping coordinates into the picture header <b>501</b>, specifically in the H.263 PLUSPTYPE (<b>503</b>) header extension. This can be a sensible design choice when a) there is a picture header available, and b) frequent changes of the ARC information are expected. However, the overhead when using H.263-style signaling can be quite high, and scaling factors may not pertain among picture boundaries as picture header can be of transient nature.</p><p id="p-0091" num="0095">JVCET-M135-v1, cited above, includes the ARC reference information (<b>505</b>) (an index) located in a picture parameter set (<b>504</b>), indexing a table (<b>506</b>) including target resolutions that in turn is located inside a sequence parameter set (<b>507</b>). The placement of the possible resolution in a table (<b>506</b>) in the sequence parameter set (<b>507</b>) can, according to verbal statements made by the authors, be justified by using the SPS as an interoperability negotiation point during capability exchange. Resolution can change, within the limits set by the values in the table (<b>506</b>) from picture to picture by referencing the appropriate picture parameter set (<b>504</b>).</p><p id="p-0092" num="0096">Still referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the following additional options may exist to convey ARC information in a video bitstream. Each of those options has certain advantages over existing art as described above. The options may be simultaneously present in the same video coding technology or standard.</p><p id="p-0093" num="0097">In an embodiment, ARC information (<b>509</b>) such as a resampling (zoom) factor may be present in a slice header, GOB header, tile header, or tile group header (tile group header henceforth) (<b>508</b>). This can be adequate of the ARC information is small, such as a single variable length ue(v) or fixed length codeword of a few bits, for example as shown above. Having the ARC information in a tile group header directly has the additional advantage of the ARC information may be applicable to a sub picture represented by, for example, that tile group, rather than the whole picture. See also below. In addition, even if the video compression technology or standard envisions only whole picture adaptive resolution changes (in contrast to, for example, tile group based adaptive resolution changes), putting the ARC information into the tile group header vis a vis putting it into an H.263-style picture header has certain advantages from an error resilience viewpoint.</p><p id="p-0094" num="0098">In the same or another embodiment, the ARC information (<b>512</b>) itself may be present in an appropriate parameter set (<b>511</b>) such as, for example, a picture parameter set, header parameter set, tile parameter set, adaptation parameter set, and so forth (Adaptation parameter set depicted). The scope of that parameter set can advantageously be no larger than a picture, for example a tile group. The use of the ARC information is implicit through the activation of the relevant parameter set. For example, when a video coding technology or standard contemplates only picture-based ARC, then a picture parameter set or equivalent may be appropriate.</p><p id="p-0095" num="0099">in the same or another embodiment, ARC reference information (<b>513</b>) may be present in a Tile Group header (<b>514</b>) or a similar data structure. That reference information (<b>513</b>) can refer to a subset of ARC information (<b>515</b>) available in a parameter set (<b>516</b>) with a scope beyond a single picture, for example a sequence parameter set, or decoder parameter set.</p><p id="p-0096" num="0100">The additional level of indirection implied activation of a PPS from a tile group header, PPS, SPS, as used in JVET-M0135-v1 appears to be unnecessary, as picture parameter sets, just as sequence parameter sets, can (and have in certain standards such as RFC3984) be used for capability negotiation or announcements. If, however, the ARC information should be applicable to a sub picture represented, for example, by a tile groups also, a parameter set with an activation scope limited to a tile group, such as the Adaptation Parameter set or a Header Parameter Set may be the better choice. Also, if the ARC information is of more than negligible size&#x2014;for example contains filter control information such as numerous filter coefficients&#x2014;then a parameter may be a better choice than using a header (<b>508</b>) directly from a coding efficiency viewpoint, as those settings may be reusable by future pictures or sub-pictures by referencing the same parameter set.</p><p id="p-0097" num="0101">When using the sequence parameter set or another higher parameter set with a scope spanning multiple pictures, certain considerations may apply:</p><p id="p-0098" num="0102">1. The parameter set to store the ARC information table (<b>516</b>) can, in some cases, be the sequence parameter set, but in other cases advantageously the decoder parameter set. The decoder parameter set can have an activation scope of multiple CVSs, namely the coded video stream, i.e. all coded video bits from session start until session teardown. Such a scope may be more appropriate because possible ARC factors may be a decoder feature, possibly implemented in hardware, and hardware features tend not to change with any CVS (which in at least some entertainment systems is a Group of Pictures, one second or less in length). That said, putting the table into the sequence parameter set is expressly included in the placement options described herein, in particular in conjunction with point 2 below.</p><p id="p-0099" num="0103">2. The ARC reference information (<b>513</b>) may advantageously be placed directly into the picture/slice tile/GOB/tile group header (tile group header henceforth) (<b>514</b>) rather than into the picture parameter set as in JVCET-M0135-v1, The reason is as follows: when an encoder wants to change a single value in a picture parameter set, such as for example the ARC reference information, then it has to create a new PPS and reference that new PPS. Assume that only the ARC reference information changes, but other information such as, for example, the quantization matrix information in the PPS stays. Such information can be of substantial size, and would need to be retransmitted to make the new PPS complete. As the ARC reference information may be a single codeword, such as the index into the table (<b>513</b>) and that would be the only value that changes, it would be cumbersome and wasteful to retransmit all the, for example, quantization matrix information. Insofar, can be considerably better from a coding efficiency viewpoint to avoid the indirection through the PPS, as proposed in JVET-M0135-v1. Similarly, putting the ARC reference information into the PPS has the additional disadvantage that the ARC information referenced by the ARC reference information (<b>513</b>) necessarily needs to apply to the whole picture and not to a sub-picture, as the scope of a picture parameter set activation is a picture.</p><p id="p-0100" num="0104">In the same or another embodiment, the signaling of ARC parameters can follow a detailed example as outlined in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. <figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts syntax diagrams in a representation as used in video coding standards since at least 1993. The notation of such syntax diagrams roughly follows C-style programming. Lines in boldface indicate syntax elements present in the bitstream, lines without boldface often indicate control flow or the setting of variables.</p><p id="p-0101" num="0105">A tile group header (<b>601</b>) as an exemplary syntax structure of a header applicable to a (possibly rectangular) part of a picture can conditionally contain, a variable length, Exp-Golomb coded syntax element dec_pic_size_idx (<b>602</b>) (depicted in boldface). The presence of this syntax element in the tile group header can be gated on the use of adaptive resolution (<b>603</b>)&#x2014;here, the value of a flag not depicted in boldface, which means that flag is present in the bitstream at the point where it occurs in the syntax diagram. Whether or not adaptive resolution is in use for this picture or parts thereof can be signaled in any high level syntax structure inside or outside the bitstream. In the example shown, it is signaled in the sequence parameter set as outlined below.</p><p id="p-0102" num="0106">Still referring to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, shown is also an excerpt of a sequence parameter set (<b>610</b>). The first syntax element shown is adaptive_pic_resolution_change_flag (<b>611</b>). When true, that flag can indicate the use of adaptive resolution which, in turn may require certain control information. In the example, such control information is conditionally present based on the value of the flag based on the if(statement in the parameter set (<b>612</b>) and the tile group header (<b>601</b>).</p><p id="p-0103" num="0107">When adaptive resolution is in use, in this example, coded is an output resolution in units of samples (<b>613</b>). The numeral <b>613</b> refers to both output_pic_width_in_luma_samples and output_pic_height_in_luma_samples, which together can define the resolution of the output picture. Elsewhere in a video coding technology or standard, certain restrictions to either value can be defined. For example, a level definition may limit the number of total output samples, which could be the product of the value of those two syntax elements. Also, certain video coding technologies or standards, or external technologies or standards such as, for example, system standards, may limit the numbering range (for example, one or both dimensions must be divisible by a power of 2 number), or the aspect ratio (for example, the width and height must be in a relation such as 4:3 or 16:9). Such restrictions may be introduced to facilitate hardware implementations or for other reasons, and are well known in the art.</p><p id="p-0104" num="0108">In certain applications, it can be advisable that the encoder instructs the decoder to use a certain reference picture size rather than implicitly assume that size to be the output picture size. In this example, the syntax element reference_pic_size_present_flag (<b>614</b>) gates the conditional presence of reference picture dimensions (<b>615</b>) (again, the numeral refers to both width and height).</p><p id="p-0105" num="0109">Finally, shown is a table of possible decoding picture width and heights. Such a table can be expressed, for example, by a table indication (num_dec_pic_size_in_luma_samples_minus1) (<b>616</b>). The &#x201c;minus1&#x201d; can refer to the interpretation of the value of that syntax element. For example, if the coded value is zero, one table entry is present. If the value is five, six table entries are present. For each &#x201c;line&#x201d; in the table, decoded picture width and height are then included in the syntax (<b>617</b>).</p><p id="p-0106" num="0110">The table entries presented (<b>617</b>) can be indexed using the syntax element dec_pic_size_idx (<b>602</b>) in the tile group header, thereby allowing different decoded sizes in effect, zoom factors-per tile group.</p><p id="p-0107" num="0111">Certain video coding technologies or standards, for example VP9, support spatial scalability by implementing certain forms of reference picture resampling (signaled quite differently from the disclosed subject matter) in conjunction with temporal scalability, so to enable spatial scalability. In particular, certain reference pictures may be upsampled using ARC-style technologies to a higher resolution to form the base of a spatial enhancement layer. Those upsampled pictures could be refined, using normal prediction mechanisms at the high resolution, so to add detail.</p><p id="p-0108" num="0112">The disclosed subject matter can be used in such an environment. In certain cases, in the same or another embodiment, a value in the NAL unit header, for example the Temporal ID field, can be used to indicate not only the temporal but also the spatial layer. Doing so has certain advantages for certain system designs; for example, existing Selected Forwarding Units (SFU) created and optimized for temporal layer selected forwarding based on the NAL unit header Temporal ID value can be used without modification, for scalable environments. In order to enable that, there may be a requirement for a mapping between the coded picture size and the temporal layer is indicated by the temporal ID field in the NAL unit header.</p><p id="p-0109" num="0113">In some video coding technologies, an Access Unit (AU) can refer to coded picture(s), slice(s), tile(s), NAL Unit(s), and so forth, that were captured and composed into a the respective picture/slice/tile/NAL unit bitstream at a given instance in time. That instance in time can be the composition time.</p><p id="p-0110" num="0114">In HEVC, and certain other video coding technologies, a picture order count (POC) value can be used for indicating a selected reference picture among multiple reference picture stored in a decoded picture buffer (DPB). When an access unit (AU) comprises one or more pictures, slices, or tiles, each picture, slice, or tile belonging to the same AU may carry the same POC value, from which it can be derived that they were created from content of the same composition time. In other words, in a scenario where two pictures/slices/tiles carry the same given POC value, that can be indicative of the two picture/slice/tile belonging to the same AU and having the same composition time. Conversely, two pictures/tiles/slices having different POC values can indicate those pictures/slices/tiles belonging to different AUs and having different composition times.</p><p id="p-0111" num="0115">In an embodiment of the disclosed subject matter, aforementioned rigid relationship can be relaxed in that an access unit can comprise pictures, slices, or tiles with different POC values. By allowing different POC values within an AU, it becomes possible to use the POC value to identify potentially independently decodable pictures/slices/tiles with identical presentation time. That, in turn, can enable support of multiple scalable layers without a change of reference picture selection signaling (e.g. reference picture set signaling or reference picture list signaling), as described in more detail below.</p><p id="p-0112" num="0116">It is, however, still desirable to be able to identify the AU a picture/slice/tile belongs to, with respect to other picture/slices/tiles having different POC values, from the POC value alone. This can be achieved, as described below.</p><p id="p-0113" num="0117">In the same or other embodiments, an access unit count (AUC) may be signaled in a high-level syntax structure, such as NAL unit header, slice header, tile group header, SEI message, parameter set or AU delimiter. The value of AUC may be used to identify which NAL units, pictures, slices, or tiles belong to a given AU. The value of AUC may be corresponding to a distinct composition time instance. The AUC value may be equal to a multiple of the POC value. By diving the POC value by an integer value, the AUC value may be calculated. In certain cases, division operations can place a certain burden on decoder implementations. In such cases, small restrictions in the numbering space of the AUC values may allow to substitute the division operation by shift operations. For example, the AUC value may be equal to a Most Significant Bit (MSB) value of the POC value range.</p><p id="p-0114" num="0118">In the same embodiment, a value of POC cycle per AU (poc_cycle_au) may be signaled in a high-level syntax structure, such as NAL unit header, slice header, tile group header, SEI message, parameter set or AU delimiter. The poc_cycle_au may indicate how many different and consecutive POC values can be associated with the same AU. For example, if the value of poc_cycle_au is equal to 4, the pictures, slices or tiles with the POC value equal to 0-3, inclusive, are associated with the AU with AUC value equal to 0, and the pictures, slices or tiles with POC value equal to 4-7, inclusive, are associated with the AU with AUC value equal to 1. Hence, the value of AUC may be inferred by dividing the POC value by the value of poc_cycle_au.</p><p id="p-0115" num="0119">In the same or another embodiment, the value of poc_cyle_au may be derived from information, located for example in the video parameter set (VPS), that identifies the number of spatial or SNR layers in a coded video sequence. Such a possible relationship is briefly described below. While the derivation as described above may save a few bits in the VPS and hence may improves coding efficiency, it can be advantageous to explicitly code poc_cycle_au in an appropriate high level syntax structure hierarchically below the video parameter set, so to be able to minimize poc_cycle_au for a given small part of a bitstream such as a picture. This optimization may save more bits than can be saved through the derivation process above because POC values (and/or values of syntax elements indirectly referring to POC) may be coded in low level syntax structures.</p><p id="p-0116" num="0120">The techniques for signaling adaptive resolution parameters described above, can be implemented as computer software using computer-readable instructions and physically stored in one or more computer-readable media. For example, <figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a computer system <b>700</b> suitable for implementing certain embodiments of the disclosed subject matter.</p><p id="p-0117" num="0121">The computer software can be coded using any suitable machine code or computer language, that may be subject to assembly, compilation, linking, or like mechanisms to create code comprising instructions that can be executed directly, or through interpretation, micro-code execution, and the like, by computer central processing units (CPUs), Graphics Processing Units (GPUs), and the like.</p><p id="p-0118" num="0122">The instructions can be executed on various types of computers or components thereof, including, for example, personal computers, tablet computers, servers, smartphones, gaming devices, internet of things devices, and the like.</p><p id="p-0119" num="0123">The components shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref> for computer system <b>700</b> are exemplary in nature and are not intended to suggest any limitation as to the scope of use or functionality of the computer software implementing embodiments of the present disclosure. Neither should the configuration of components be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary embodiment of a computer system <b>700</b>.</p><p id="p-0120" num="0124">Computer system <b>700</b> may include certain human interface input devices. Such a human interface input device may be responsive to input by one or more human users through, for example, tactile input (such as: keystrokes, swipes, data glove movements), audio input (such as: voice, clapping), visual input (such as: gestures), olfactory input (not depicted). The human interface devices can also be used to capture certain media not necessarily directly related to conscious input by a human, such as audio (such as: speech, music, ambient sound), images (such as: scanned images, photographic images obtain from a still image camera), video (such as two-dimensional video, three-dimensional video including stereoscopic video).</p><p id="p-0121" num="0125">Input human interface devices may include one or more of (only one of each depicted): keyboard <b>701</b>, mouse <b>702</b>, trackpad <b>703</b>, touch screen <b>710</b>, data-glove <b>704</b>, joystick <b>705</b>, microphone <b>706</b>, scanner <b>707</b>, camera <b>708</b>.</p><p id="p-0122" num="0126">Computer system <b>700</b> may also include certain human interface output devices. Such human interface output devices may be stimulating the senses of one or more human users through, for example, tactile output, sound, light, and smell/taste. Such human interface output devices may include tactile output devices (for example tactile feedback by the touch-screen <b>710</b>, data-glove <b>704</b>, or joystick <b>705</b>, but there can also be tactile feedback devices that do not serve as input devices), audio output devices (such as: speakers <b>709</b>, headphones (not depicted)), visual output devices (such as screens <b>710</b> to include CRT screens, LCD screens, plasma screens, OLED screens, each with or without touch-screen input capability, each with or without tactile feedback capability-some of which may be capable to output two dimensional visual output or more than three dimensional output through means such as stereographic output; virtual-reality glasses (not depicted), holographic displays and smoke tanks (not depicted)), and printers (not depicted).</p><p id="p-0123" num="0127">Computer system <b>700</b> can also include human accessible storage devices and their associated media such as optical media including CD/DVD ROM/RW <b>720</b> with CD/DVD or the like media <b>721</b>, thumb-drive <b>722</b>, removable hard drive or solid state drive <b>723</b>, legacy magnetic media such as tape and floppy disc (not depicted), specialized ROM/ASIC/PLD based devices such as security dongles (not depicted), and the like.</p><p id="p-0124" num="0128">Those skilled in the art should also understand that term &#x201c;computer readable media&#x201d; as used in connection with the presently disclosed subject matter does not encompass transmission media, carrier waves, or other transitory signals.</p><p id="p-0125" num="0129">Computer system <b>700</b> can also include interface to one or more communication networks. Networks can for example be wireless, wireline, optical. Networks can further be local, wide-area, metropolitan, vehicular and industrial, real-time, delay-tolerant, and so on. Examples of networks include local area networks such as Ethernet, wireless LANs, cellular networks to include GSM, 3G, 4G, 5G, LTE and the like, TV wireline or wireless wide area digital networks to include cable TV, satellite TV, and terrestrial broadcast TV, vehicular and industrial to include CANBus, and so forth. Certain networks commonly require external network interface adapters that attached to certain general purpose data ports or peripheral buses (<b>749</b>) (such as, for example USB ports of the computer system <b>700</b>; others are commonly integrated into the core of the computer system <b>700</b> by attachment to a system bus as described below (for example Ethernet interface into a PC computer system or cellular network interface into a smartphone computer system). Using any of these networks, computer system <b>700</b> can communicate with other entities. Such communication can be uni-directional, receive only (for example, broadcast TV), uni-directional send-only (for example CANbus to certain CANbus devices), or bi-directional, for example to other computer systems using local or wide area digital networks. Certain protocols and protocol stacks can be used on each of those networks and network interfaces as described above.</p><p id="p-0126" num="0130">Aforementioned human interface devices, human-accessible storage devices, and network interfaces can be attached to a core <b>740</b> of the computer system <b>700</b>.</p><p id="p-0127" num="0131">The core <b>740</b> can include one or more Central Processing Units (CPU) <b>741</b>, Graphics Processing Units (GPU) <b>742</b>, specialized programmable processing units in the form of Field Programmable Gate Areas (FPGA) <b>743</b>, hardware accelerators for certain tasks <b>744</b>, and so forth. These devices, along with Read-only memory (ROM) <b>745</b>, Random-access memory <b>746</b>, internal mass storage such as internal non-user accessible hard drives, SSDs, and the like <b>747</b>, may be connected through a system bus <b>748</b>. In some computer systems, the system bus <b>748</b> can be accessible in the form of one or more physical plugs to enable extensions by additional CPUs, GPU, and the like. The peripheral devices can be attached either directly to the core's system bus <b>748</b>, or through a peripheral bus <b>749</b>. Architectures for a peripheral bus include PCI, USB, and the like.</p><p id="p-0128" num="0132">CPUs <b>741</b>, GPUs <b>742</b>, FPGAs <b>743</b>, and accelerators <b>744</b> can execute certain instructions that, in combination, can make up the aforementioned computer code. That computer code can be stored in ROM <b>745</b> or RAM <b>746</b>. Transitional data can be also be stored in RAM <b>746</b>, whereas permanent data can be stored for example, in the internal mass storage <b>747</b>. Fast storage and retrieve to any of the memory devices can be enabled through the use of cache memory, that can be closely associated with one or more CPU <b>741</b>, GPU <b>742</b>, mass storage <b>747</b>, ROM <b>745</b>, RAM <b>746</b>, and the like.</p><p id="p-0129" num="0133">The computer readable media can have computer code thereon for performing various computer-implemented operations. The media and computer code can be those specially designed and constructed for the purposes of the present disclosure, or they can be of the kind well known and available to those having skill in the computer software arts.</p><p id="p-0130" num="0134">As an example and not by way of limitation, the computer system having architecture <b>700</b>, and specifically the core <b>740</b> can provide functionality as a result of processor(s) (including CPUs, GPUs, FPGA, accelerators, and the like) executing software embodied in one or more tangible, computer-readable media. Such computer-readable media can be media associated with user-accessible mass storage as introduced above, as well as certain storage of the core <b>740</b> that are of non-transitory nature, such as core-internal mass storage <b>747</b> or ROM <b>745</b>. The software implementing various embodiments of the present disclosure can be stored in such devices and executed by core <b>740</b>. A computer-readable medium can include one or more memory devices or chips, according to particular needs. The software can cause the core <b>740</b> and specifically the processors therein (including CPU, GPU, FPGA, and the like) to execute particular processes or particular parts of particular processes described herein, including defining data structures stored in RAM <b>746</b> and modifying such data structures according to the processes defined by the software. In addition or as an alternative, the computer system can provide functionality as a result of logic hardwired or otherwise embodied in a circuit (for example: accelerator <b>744</b>), which can operate in place of or together with software to execute particular processes or particular parts of particular processes described herein. Reference to software can encompass logic, and vice versa, where appropriate. Reference to a computer-readable media can encompass a circuit (such as an integrated circuit (IC)) storing software for execution, a circuit embodying logic for execution, or both, where appropriate. The present disclosure encompasses any suitable combination of hardware and software.</p><p id="p-0131" num="0135"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows an example of a video sequence structure with combination of temporal_id, layer_id, POC and AUC values with adaptive resolution change. In this example, a picture, slice or tile in the first AU with AUC=0 may have temporal_id=0 and layer_id=0 or 1, while a picture, slice or tile in the second AU with AUC=1 may have temporal_id=1 and layer_id=0 or 1, respectively. The value of POC is increased by 1 per picture regardless of the values of temporal_id and layer_id. In this example, the value of poc_cycle_au can be equal to 2. Preferably, the value of poc_cycle_au may be set equal to the number of (spatial scalability) layers. In this example, hence, the value of POC is increased by 2, while the value of AUC is increased by 1.</p><p id="p-0132" num="0136">In the above embodiments, all or sub-set of inter-picture or inter-layer prediction structure and reference picture indication may be supported by using the existing reference picture set (RPS) signaling in HEVC or the reference picture list (RPL) signaling. In RPS or RPL, the selected reference picture is indicated by signaling the value of POC or the delta value of POC between the current picture and the selected reference picture. For the disclosed subject matter, the RPS and RPL can be used to indicate the inter-picture or inter-layer prediction structure without change of signaling, but with the following restrictions. If the value of temporal_id of a reference picture is greater than the value of temporal_id current picture, the current picture may not use the reference picture for motion compensation or other predictions. If the value of layer_id of a reference picture is greater than the value of layer_id current picture, the current picture may not use the reference picture for motion compensation or other predictions.</p><p id="p-0133" num="0137">In the same and other embodiments, the motion vector scaling based on POC difference for temporal motion vector prediction may be disabled across multiple pictures within an access unit. Hence, although each picture may have a different POC value within an access unit, the motion vector is not scaled and used for temporal motion vector prediction within an access unit. This is because a reference picture with a different POC in the same AU is considered a reference picture having the same time instance. Therefore, in the embodiment, the motion vector scaling function may return <b>1</b>, when the reference picture belongs to the AU associated with the current picture.</p><p id="p-0134" num="0138">In the same and other embodiments, the motion vector scaling based on POC difference for temporal motion vector prediction may be optionally disabled across multiple pictures, when the spatial resolution of the reference picture is different from the spatial resolution of the current picture. When the motion vector scaling is allowed, the motion vector is scaled based on both POC difference and the spatial resolution ratio between the current picture and the reference picture.</p><p id="p-0135" num="0139">In the same or another embodiment, the motion vector may be scaled based on AUC difference instead of POC difference, for temporal motion vector prediction, especially when the poc_cycle_au has non-uniform value (when vps_contant_poc_cycle_per_au==0). Otherwise (when vps_contant_poc_cycle_per_au==1), the motion vector scaling based on AUC difference may be identical to the motion vector scaling based on POC difference.</p><p id="p-0136" num="0140">In the same or another embodiment, when the motion vector is scaled based on AUC difference, the reference motion vector in the same AU (with the same AUC value) with the current picture is not scaled based on AUC difference and used for motion vector prediction without scaling or with scaling based on spatial resolution ratio between the current picture and the reference picture.</p><p id="p-0137" num="0141">In the same and other embodiments, the AUC value is used for identifying the boundary of AU and used for hypothetical reference decoder (HRD) operation, which needs input and output timing with AU granularity. In most cases, the decoded picture with the highest layer in an AU may be outputted for display. The AUC value and the layer_id value can be used for identifying the output picture.</p><p id="p-0138" num="0142">In an embodiment, a picture may consist of one or more sub-pictures. Each sub-picture may cover a local region or the entire region of the picture. The region supported by a sub-picture may or may not be overlapped with the region supported by another sub-picture. The region composed by one or more sub-pictures may or may not cover the entire region of a picture. If a picture consists of a sub-picture, the region supported by the sub-picture is identical to the region supported by the picture.</p><p id="p-0139" num="0143">In the same embodiment, a sub-picture may be coded by a coding method similar to the coding method used for the coded picture. A sub-picture may be independently coded or may be coded dependent on another sub-picture or a coded picture. A sub-picture may or may not have any parsing dependency from another sub-picture or a coded picture.</p><p id="p-0140" num="0144">In the same embodiment, a coded sub-picture may be contained in one or more layers. A coded sub-picture in a layer may have a different spatial resolution. The original sub-picture may be spatially re-sampled (up-sampled or down-sampled), coded with different spatial resolution parameters, and contained in a bitstream corresponding to a layer.</p><p id="p-0141" num="0145">In the same or another embodiment, a sub-picture with (W, H), where W indicates the width of the sub-picture and H indicates the height of the sub-picture, respectively, may be coded and contained in the coded bitstream corresponding to layer 0, while the up-sampled (or down-sampled) sub-picture from the sub-picture with the original spatial resolution, with (W*S<sub>w,k</sub>, H*S<sub>h,k</sub>), may be coded and contained in the coded bitstream corresponding to layer k, where S<sub>w,k</sub>, S<sub>h,k </sub>indicate the resampling ratios, horizontally and vertically. If the values of S<sub>w,k</sub>, S<sub>h,k </sub>are greater than 1, the resampling is equal to the up-sampling. Whereas, if the values of S<sub>w,k</sub>, S<sub>h,k </sub>are smaller than 1, the resampling is equal to the down-sampling.</p><p id="p-0142" num="0146">In the same or another embodiment, a coded sub-picture in a layer may have a different visual quality from that of the coded sub-picture in another layer in the same sub-picture or different subpicture. For example, sub-picture i in a layer, n, is coded with the quantization parameter, Q<sub>i,n</sub>, while a sub-picture j in a layer, m, is coded with the quantization parameter, Q<sub>j,m</sub>.</p><p id="p-0143" num="0147">In the same or another embodiment, a coded sub-picture in a layer may be independently decodable, without any parsing or decoding dependency from a coded sub-picture in another layer of the same local region. The sub-picture layer, which can be independently decodable without referencing another sub-picture layer of the same local region, is the independent sub-picture layer. A coded sub-picture in the independent sub-picture layer may or may not have a decoding or parsing dependency from a previously coded sub-picture in the same sub-picture layer, but the coded sub-picture may not have any dependency from a coded picture in another sub-picture layer.</p><p id="p-0144" num="0148">In the same or another embodiment, a coded sub-picture in a layer may be dependently decodable, with any parsing or decoding dependency from a coded sub-picture in another layer of the same local region. The sub-picture layer, which can be dependently decodable with referencing another sub-picture layer of the same local region, is the dependent sub-picture layer. A coded sub-picture in the dependent sub-picture may reference a coded sub-picture belonging to the same sub-picture, a previously coded sub-picture in the same sub-picture layer, or both reference sub-pictures.</p><p id="p-0145" num="0149">In the same or another embodiment, a coded sub-picture consists of one or more independent sub-picture layers and one or more dependent sub-picture layers. However, at least one independent sub-picture layer may be present for a coded sub-picture. The independent sub-picture layer may have the value of the layer identifier (layer_id), which may be present in NAL unit header or another high-level syntax structure, equal to 0. The sub-picture layer with the layer_id equal to 0 is the base sub-picture layer.</p><p id="p-0146" num="0150">In the same or another embodiment, a picture may consist of one or more foreground sub-pictures and one background sub-picture. The region supported by a background sub-picture may be equal to the region of the picture. The region supported by a foreground sub-picture may be overlapped with the region supported by a background sub-picture. The background sub-picture may be a base sub-picture layer, while the foreground sub-picture may be a non-base (enhancement) sub-picture layer. One or more non-base sub-picture layer may reference the same base layer for decoding. Each non-base sub-picture layer with layer_id equal to a may reference a non-base sub-picture layer with layer_id equal to b, where a is greater than b.</p><p id="p-0147" num="0151">In the same or another embodiment, a picture may consist of one or more foreground sub-pictures with or without a background sub-picture. Each sub-picture may have its own base sub-picture layer and one or more non-base (enhancement) layers. Each base sub-picture layer may be referenced by one or more non-base sub-picture layers. Each non-base sub-picture layer with layer_id equal to a may reference a non-base sub-picture layer with layer_id equal to b, where a is greater than b.</p><p id="p-0148" num="0152">In the same or another embodiment, a picture may consist of one or more foreground sub-pictures with or without a background sub-picture. Each coded sub-picture in a (base or non-base) sub-picture layer may be referenced by one or more non-base layer sub-pictures belonging to the same sub-picture and one or more non-base layer sub-pictures, which are not belonging to the same sub-picture.</p><p id="p-0149" num="0153">In the same or another embodiment, a picture may consist of one or more foreground sub-pictures with or without a background sub-picture. A sub-picture in a layer a may be further partitioned into multiple sub-pictures in the same layer. One or more coded sub-pictures in a layer b may reference the partitioned sub-picture in a layer a.</p><p id="p-0150" num="0154">In the same or another embodiment, a coded video sequence (CVS) may be a group of the coded pictures. The CVS may consist of one or more coded sub-picture sequences (CSPS), where the CSPS may be a group of coded sub-pictures covering the same local region of the picture. A CSPS may have the same or a different temporal resolution than that of the coded video sequence.</p><p id="p-0151" num="0155">In the same or another embodiment, a CSPS may be coded and contained in one or more layers. A CSPS may consist of one or more CSPS layers. Decoding one or more CSPS layers corresponding to a CSPS may reconstruct a sequence of sub-pictures corresponding to the same local region.</p><p id="p-0152" num="0156">In the same or another embodiment, the number of CSPS layers corresponding to a CSPS may be identical to or different from the number of CSPS layers corresponding to another CSPS.</p><p id="p-0153" num="0157">In the same or another embodiment, a CSPS layer may have a different temporal resolution (e.g. frame rate) from another CSPS layer. The original (uncompressed) sub-picture sequence may be temporally re-sampled (up-sampled or down-sampled), coded with different temporal resolution parameters, and contained in a bitstream corresponding to a layer.</p><p id="p-0154" num="0158">In the same or another embodiment, a sub-picture sequence with the frame rate, F, may be coded and contained in the coded bitstream corresponding to layer 0, while the temporally up-sampled (or down-sampled) sub-picture sequence from the original sub-picture sequence, with F*S<sub>t,k</sub>, may be coded and contained in the coded bitstream corresponding to layer k, where S<sub>t,k </sub>indicates the temporal sampling ratio for layer k. If the value of S<sub>t,k </sub>is greater than 1, the temporal resampling process is equal to the frame rate up conversion. Whereas, if the value of S<sub>t,k </sub>is smaller than 1, the temporal resampling process is equal to the frame rate down conversion.</p><p id="p-0155" num="0159">In the same or another embodiment, when a sub-picture with a CSPS layer a is reference by a sub-picture with a CSPS layer b for motion compensation or any inter-layer prediction, if the spatial resolution of the CSPS layer a is different from the spatial resolution of the CSPS layer b, decoded pixels in the CSPS layer a are resampled and used for reference. The resampling process may need an up-sampling filtering or a down-sampling filtering.</p><p id="p-0156" num="0160">In the same or another embodiment, <figref idref="DRAWINGS">FIG. <b>9</b></figref> shows an example of syntax tables to signal the syntax element of vps_poc_cycle_au in VPS (or SPS), which indicates the poc_cycle_au used for all picture/slices in a coded video sequence, and the syntax element of slice_poc_cycle_au, which indicates the poc_cycle_au of the current slice, in slice header. If the POC value increases uniformly per AU, vps_contant_poc_cycle_per_au in VPS is set equal to 1 and vps_poc_cycle_au is signaled in VPS. In this case, slice_poc_cycle_au is not explicitly signaled, and the value of AUC for each AU is calculated by dividing the value of POC by vps_poc_cycle_au. If the POC value does not increase uniformly per AU, vps_contant_poc_cycle_per_au in VPS is set equal to 0. In this case, vps_access_unit_cnt is not signaled, while slice_access_unit_cnt is signaled in slice header for each slice or picture. Each slice or picture may have a different value of slice_access_unit_cnt. The value of AUC for each AU is calculated by dividing the value of POC by slice_poc_cycle_au. <figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a block diagram illustrating the relevant work flow.</p><p id="p-0157" num="0161">In the same or other embodiments, even though the value of POC of a picture, slice, or tile may be different, the picture, slice, or tile corresponding to an AU with the same AUC value may be associated with the same decoding or output time instance. Hence, without any inter-parsing/decoding dependency across pictures, slices or tiles in the same AU, all or subset of pictures, slices or tiles associated with the same AU may be decoded in parallel, and may be outputted at the same time instance.</p><p id="p-0158" num="0162">In the same or other embodiments, even though the value of POC of a picture, slice, or tile may be different, the picture, slice, or tile corresponding to an AU with the same AUC value may be associated with the same composition/display time instance. When the composition time is contained in a container format, even though pictures correspond to different AUs, if the pictures have the same composition time, the pictures can be displayed at the same time instance.</p><p id="p-0159" num="0163">In the same or other embodiments, each picture, slice, or tile may have the same temporal identifier (temporal_id) in the same AU. All or subset of pictures, slices or tiles corresponding to a time instance may be associated with the same temporal sub-layer. In the same or other embodiments, each picture, slice, or tile may have the same or a different spatial layer id (layer_id) in the same AU. All or subset of pictures, slices or tiles corresponding to a time instance may be associated with the same or a different spatial layer.</p><p id="p-0160" num="0164"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows an example video stream including a background video CSPS with layer_id equal to 0 and multiple foreground CSPS layers. While a coded sub-picture may consist of one or more CSPS layers, a background region, which does not belong to any foreground CSPS layer, may consist of a base layer. The base layer may contain a background region and foreground regions, while an enhancement CSPS layer contain a foreground region. An enhancement CSPS layer may have a better visual quality than the base layer, at the same region. The enhancement CSPS layer may reference the reconstructed pixels and the motion vectors of the base layer, corresponding to the same region.</p><p id="p-0161" num="0165">In the same or another embodiment, the video bitstream corresponding to a base layer is contained in a track, while the CSPS layers corresponding to each sub-picture are contained in a separated track, in a video file.</p><p id="p-0162" num="0166">In the same or another embodiment, the video bitstream corresponding to a base layer is contained in a track, while CSPS layers with the same layer_id are contained in a separated track. In this example, a track corresponding to a layer k includes CSPS layers corresponding to the layer k, only.</p><p id="p-0163" num="0167">In the same or another embodiment, each CSPS layer of each sub-picture is stored in a separate track. Each trach may or may not have any parsing or decoding dependency from one or more other tracks.</p><p id="p-0164" num="0168">In the same or another embodiment, each track may contain bitstreams corresponding to layer i to layer j of CSPS layers of all or a subset of sub-pictures, where 0&#x3c;i=&#x3c;j=&#x3c;k, k being the highest layer of CSPS.</p><p id="p-0165" num="0169">In the same or another embodiment, a picture consists of one or more associated media data including depth map, alpha map, 3D geometry data, occupancy map, etc. Such associated timed media data can be divided to one or multiple data sub-stream each of which corresponding to one sub-picture.</p><p id="p-0166" num="0170">In the same or another embodiment, <figref idref="DRAWINGS">FIG. <b>12</b></figref> shows an example of video conference based on the multi-layered sub-picture method. In a video stream, one base layer video bitstream corresponding to the background picture and one or more enhancement layer video bitstreams corresponding to foreground sub-pictures are contained. Each enhancement layer vide bitstream is corresponding to a CSPS layer. In a display, the picture corresponding to the base layer is displayed by default. It contains one or more user's picture in a picture (PIP). When a specific user is selected by a client's control, the enhancement CSPS layer corresponding to the selected user is decoded and displayed with the enhanced quality or spatial resolution. <figref idref="DRAWINGS">FIG. <b>13</b></figref> shows the diagram for the operation.</p><p id="p-0167" num="0171">In the same or another embodiment, a network middle box (such as router) may select a subset of layers to send to a user depending on its bandwidth. The picture/subpicture organization may be used for bandwidth adaptation. For instance, if the user doesn't have the bandwidth, the router strips of layers or selects some subpictures due to their importance or based on used setup and this can be done dynamically to adopt to bandwidth.</p><p id="p-0168" num="0172"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows a use case of 360 video. When a spherical 360 picture is projected onto a planar picture, the projection 360 picture may be partitioned into multiple sub-pictures as a base layer. An enhancement layer of a specific sub-picture may be coded and transmitted to a client. A decoder may be able to decode both the base layer including all sub-pictures and an enhancement layer of a selected sub-picture. When the current viewport is identical to the selected sub-picture, the displayed picture may have a higher quality with the decoded sub-picture with the enhancement layer. Otherwise, the decoded picture with the base layer can be displayed, with a low quality.</p><p id="p-0169" num="0173">In the same or another embodiment, any layout information for display may be present in a file, as supplementary information (such as SEI message or metadata). One or more decoded sub-pictures may be relocated and displayed depending on the signaled layout information. The layout information may be signaled by a streaming server or a broadcaster, or may be regenerated by a network entity or a cloud server, or may be determined by a user's customized setting.</p><p id="p-0170" num="0174">In an embodiment, when an input picture is divided into one or more (rectangular) sub-region(s), each sub-region may be coded as an independent layer. Each independent layer corresponding to a local region may have a unique layer_id value. For each independent layer, the sub-picture size and location information may be signaled. For example, picture size (width, height), the offset information of the left-top corner (x_offset, y_offset). <figref idref="DRAWINGS">FIG. <b>15</b></figref> shows an example of the layout of divided sub-pictures, its sub-picture size and position information and its corresponding picture prediction structure. The layout information including the sub-picture size(s) and the sub-picture position(s) may be signaled in a high-level syntax structure, such as parameter set(s), header of slice or tile group, or SEI message.</p><p id="p-0171" num="0175">In the same embodiment, each sub-picture corresponding to an independent layer may have its unique POC value within an AU. When a reference picture among pictures stored in DPB is indicated by using syntax element(s) in RPS or RPL structure, the POC value(s) of each sub-picture corresponding to a layer may be used.</p><p id="p-0172" num="0176">In the same or another embodiment, in order to indicate the (inter-layer) prediction structure, the layer_id may not be used and the POC (delta) value may be used.</p><p id="p-0173" num="0177">In the same embodiment, a sub-picture with a POC vale equal to N corresponding to a layer (or a local region) may or may not be used as a reference picture of a sub-picture with a POC value equal to N+K, corresponding to the same layer (or the same local region) for motion compensated prediction. In most cases, the value of the number K may be equal to the maximum number of (independent) layers, which may be identical to the number of sub-regions.</p><p id="p-0174" num="0178">In the same or another embodiment, <figref idref="DRAWINGS">FIG. <b>16</b></figref> shows the extended case of <figref idref="DRAWINGS">FIG. <b>15</b></figref>. When an input picture is divided into multiple (e.g. four) sub-regions, each local region may be coded with one or more layers. In the case, the number of independent layers may be equal to the number of sub-regions, and one or more layers may correspond to a sub-region. Thus, each sub-region may be coded with one or more independent layer(s) and zero or more dependent layer(s).</p><p id="p-0175" num="0179">In the same embodiment, in <figref idref="DRAWINGS">FIG. <b>16</b></figref>, the input picture may be divided into four sub-regions. The right-top sub-region may be coded as two layers, which are layer 1 and layer 4, while the right-bottom sub-region may be coded as two layers, which are layer 3 and layer 5. In this case, the layer 4 may reference the layer 1 for motion compensated prediction, while the layer 5 may reference the layer 3 for motion compensation.</p><p id="p-0176" num="0180">In the same or another embodiment, in-loop filtering (such as deblocking filtering, adaptive in-loop filtering, reshaper, bilateral filtering or any deep-learning based filtering) across layer boundary may be (optionally) disabled.</p><p id="p-0177" num="0181">In the same or another embodiment, motion compensated prediction or intra-block copy across layer boundary may be (optionally) disabled.</p><p id="p-0178" num="0182">In the same or another embodiment, boundary padding for motion compensated prediction or in-loop filtering at the boundary of sub-picture may be processed optionally. A flag indicating whether the boundary padding is processed or not may be signaled in a high-level syntax structure, such as parameter set(s) (VPS, SPS, PPS, or APS), slice or tile group header, or SEI message.</p><p id="p-0179" num="0183">In the same or another embodiment, the layout information of sub-region(s) (or sub-picture(s)) may be signaled in VPS or SPS. <figref idref="DRAWINGS">FIG. <b>17</b></figref> shows an example of the syntax elements in VPS and SPS. In this example, vps_sub_picture_dividing_flag is signalled in VPS. The flag may indicate whether input picture(s) are divided into multiple sub-regions or not. When the value of vps_sub_picture_dividing_flag is equal to 0, the input picture(s) in the coded video sequence(s) corresponding to the current VPS may not be divided into multiple sub-regions. In this case, the input picture size may be equal to the coded picture size (pic_width_in_luma_samples, pic_height_in_luma_samples), which is signaled in SPS. When the value of vps_sub_picture_dividing_flag is equal to 1, the input picture(s) may be divided into multiple sub-regions. In this case, the syntax elements vps_full_pic_width_in_luma_samples and vps_full_pic_height_in_luma_samples are signaled in VPS. The values of vps_full_pic_width_in_luma_samples and vps_full_pic_height_in_luma_samples may be equal to the width and height of the input picture(s), respectively.</p><p id="p-0180" num="0184">In the same embodiment, the values of vps_full_pic_width_in_luma_samples and vps_full_pic_height_in_luma_samples may not be used for decoding, but may be used for composition and display.</p><p id="p-0181" num="0185">In the same embodiment, when the value of vps_sub_picture_dividing_flag is equal to 1, the syntax elements pic_offset_x and pic_offset_y may be signaled in SPS, which corresponds to (a) specific layer(s). In this case, the coded picture size (pic_width_in_luma_samples, pic_height_in_luma_samples) signaled in SPS may be equal to the width and height of the sub-region corresponding to a specific layer. Also, the position (pic_offset_x, pic_offset_y) of the left-top corner of the sub-region may be signaled in SPS.</p><p id="p-0182" num="0186">In the same embodiment, the position information (pic_offset_x, pic_offset_y) of the left-top corner of the sub-region may not be used for decoding, but may be used for composition and display.</p><p id="p-0183" num="0187">In the same or another embodiment, the layout information (size and position) of all or sub-set sub-region(s) of (an) input picture(s), the dependency information between layer(s) may be signaled in a parameter set or an SEI message. <figref idref="DRAWINGS">FIG. <b>18</b></figref> shows an example of syntax elements to indicate the information o the layout of sub-regions, the dependency between layers, and the relation between a sub-region and one or more layers. In this example, the syntax element num_sub_region indicates the number of (rectangular) sub-regions in the current coded video sequence. the syntax element num_layers indicates the number of layers in the current coded video sequence. The value of num_layers may be equal to or greater than the value of num_sub_region. When any sub-region is coded as a single layer, the value of num_layers may be equal to the value of num_sub_region. When one or more sub-regions are coded as multiple layers, the value of num_layers may be greater than the value of num_sub_region. The syntax element direct_dependency_flag[i][j] indicates the dependency from the j-th layer to the i-th layer. num_layers_for_region[i] indicates the number of layers associated with the i-th sub-region. sub_region_layer_id[i][j] indicates the layer_id of the j-th layer associated with the i-th sub-region. The sub_region_offset_x[i] and sub_region_offset_y[i] indicate the horizontal and vertical location of the left-top corner of the i-th sub-region, respectively. The sub_region_width [i] and sub_region height[i] indicate the width and height of the i-th sub-region, respectively.</p><p id="p-0184" num="0188">In one embodiment, one or more syntax elements that specify the output layer set to indicate one of more layers to be outputted with or without profile tier level information may be signaled in a high-level syntax structure, e.g. VPS, DPS, SPS, PPS, APS or SEI message. Referring to <figref idref="DRAWINGS">FIG. <b>19</b></figref>, the syntax element num_output_layer_sets indicating the number of output layer set (OLS) in the coded vide sequence referring to the VPS may be signaled in the VPS. For each output layer set, output_layer_flag may be signaled as many as the number of output layers.</p><p id="p-0185" num="0189">In the same embodiment, output_layer_flag[i] equal to 1 specifies that the i-th layer is output. vps_output_layer_flag[i] equal to 0 specifies that the i-th layer is not output.</p><p id="p-0186" num="0190">In the same or another embodiment, one or more syntax elements that specify the profile tier level information for each output layer set may be signaled in a high-level syntax structure, e.g. VPS, DPS, SPS, PPS, APS or SEI message. Still referring to <figref idref="DRAWINGS">FIG. <b>19</b></figref>, the syntax element num_profile_tile_level indicating the number of profile tier level information per OLS in the coded vide sequence referring to the VPS may be signaled in the VPS. For each output layer set, a set of syntax elements for profile tier level information or an index indicating a specific profile tier level information among entries in the profile tier level information may be signaled as many as the number of output layers.</p><p id="p-0187" num="0191">In the same embodiment, profile_tier_level_idx[i][j] specifies the index, into the list of profile_tier_level( ) syntax structures in the VPS, of the profile_tier_level( ) syntax structure that applies to the j-th layer of the i-th OLS.</p><p id="p-0188" num="0192">In the same or another embodiment, referring to <figref idref="DRAWINGS">FIG. <b>20</b></figref>, the syntax elements num_profile_tile_level and/or num_output_layer_sets may be signaled when the number of maximum layers is greater than 1 (vps_max_layers_minus1&#x3e;0).</p><p id="p-0189" num="0193">In the same or another embodiment, referring to <figref idref="DRAWINGS">FIG. <b>20</b></figref>, the syntax element vps_output_layers_mode[i] indicating the mode of output layer signaling for the i-th output layer set may be present in VPS.</p><p id="p-0190" num="0194">In the same embodiment, vps_output_layers_mode[i] equal to 0 specifies that only the highest layer is output with the i-th output layer set. vps_output_layer_mode[i] equal to 1 specifies that all layers are output with the i-th output layer set. vps_output_layer_mode[i] equal to 2 specifies that the layers that are output are the layers with vps_output_layer_flag[i][j] equal to 1 with the i-th output layer set. More values may be reserved.</p><p id="p-0191" num="0195">In the same embodiment, the output_layer_flag[i][j] may or may not be signaled depending on the value of vps_output_layers_mode[i] for the i-th output layer set.</p><p id="p-0192" num="0196">In the same or another embodiment, referring to <figref idref="DRAWINGS">FIG. <b>20</b></figref>, the flag vps_ptl_signal_flag[i] may be present for the i-th output layer set. Depending the value of vps_ptl_signal_flag[i], the profile tier level information for the i-th output layer set may or may not be signaled.</p><p id="p-0193" num="0197">In the same or another embodiment, referring to <figref idref="DRAWINGS">FIG. <b>21</b></figref>, the number of subpicture, max_subpics_minus1, in the current CVS may be signalled in a high-level syntax structure, e.g. VPS, DPS, SPS, PPS, APS or SEI message.</p><p id="p-0194" num="0198">In the same embodiment, referring to <figref idref="DRAWINGS">FIG. <b>21</b></figref>, the subpicture identifier, sub_pic_id[i], for the i-th subpicture may be signalled, when the number of subpictures is greater than 1 (max_subpics_minus1&#x3e;0).</p><p id="p-0195" num="0199">In the same or another embodiment, one or more syntax elements indicating the subpicture identifier belonging to each layer of each output layer set may be signalled in VPS. Referring to <figref idref="DRAWINGS">FIG. <b>22</b></figref>, the sub_pic_id_layer[i][j][k], which indicates the k-th subpicture present in the j-th layer of the i-th output layer set. With those information, a decoder may recognize which sub-picture may be decoded and outputted for each layer of a specific output layer set.</p><p id="p-0196" num="0200">In an embodiment, picture header (PH) is a syntax structure containing syntax elements that apply to all slices of a coded picture. A picture unit (PU) is a set of NAL units that are associated with each other according to a specified classification rule, are consecutive in decoding order, and contain exactly one coded picture. A PU may contain a picture header (PH) and one or more video coding layer (VCL) NAL units composing a coded picture.</p><p id="p-0197" num="0201">In an embodiment, an SPS (RBSP) may be available to the decoding process prior to it being referenced, included in at least one AU with TemporalId equal to 0 or provided through external means.</p><p id="p-0198" num="0202">In an embodiment, an SPS (RBSP) may be available to the decoding process prior to it being referenced, included in at least one AU with TemporalId equal to 0 in the CVS, which contains one or more PPS referring to the SPS, or provided through external means.</p><p id="p-0199" num="0203">In an embodiment, an SPS (RBSP) may be available to the decoding process prior to it being referenced by one or more PPS, included in at least one PU with nuh_layer_id equal to the lowest nuh_layer_id value of the PPS NAL units that refer to the SPS NAL unit in the CVS, which contains one or more PPS referring to the SPS, or provided through external means.</p><p id="p-0200" num="0204">In an embodiment, an SPS (RBSP) may be available to the decoding process prior to it being referenced by one or more PPS, included in at least one PU with TemporalId equal to 0 and nuh_layer_id equal to the lowest nuh_layer_id value of the PPS NAL units that refer to the SPS NAL unit or provided through external means.</p><p id="p-0201" num="0205">In an embodiment, an SPS (RBSP) may be available to the decoding process prior to it being referenced by one or more PPS, included in at least one PU with TemporalId equal to 0 and nuh_layer_id equal to the lowest nuh_layer_id value of the PPS NAL units that refer to the SPS NAL unit in the CVS, which contains one or more PPS referring to the SPS, or provided through external means or provided through external means.</p><p id="p-0202" num="0206">In the same or another embodiment, pps_seq_parameter_set_id specifies the value of sps_seq_parameter_set_id for the referenced SPS. The value of pps_seq_parameter_set_id may be the same in all PPSs that are referred to by coded pictures in a CLVS.</p><p id="p-0203" num="0207">In the same or another embodiment, all SPS NAL units with a particular value of sps_seq_parameter_set_id in a CVS may have the same content.</p><p id="p-0204" num="0208">In the same or another embodiment, regardless of the nuh_layer_id values, SPS NAL units may share the same value space of sps_seq_parameter_set_id.</p><p id="p-0205" num="0209">In the same or another embodiment, the nuh_layer_id value of a SPS NAL unit may be equal to the lowest nuh_layer_id value of the PPS NAL units that refer to the SPS NAL unit.</p><p id="p-0206" num="0210">In an embodiment, when an SPS with nuh_layer_id equal to m is referred to by one or more PPS with nuh_layer_id equal to n. the layer with nuh_layer_id equal to m may be the same as the layer with nuh_layer_id equal to n or a (direct or indirect) reference layer of the layer with nuh_layer_id equal to m.</p><p id="p-0207" num="0211">In an embodiment, a PPS (RBSP) shall be available to the decoding process prior to it being referenced, included in at least one AU with TemporalId equal to the TemporalId of the PPS NAL unit or provided through external means.</p><p id="p-0208" num="0212">In an embodiment, a PPS (RBSP) may be available to the decoding process prior to it being referenced, included in at least one AU with TemporalId equal to the TemporalId of the PPS NAL unit in the CVS, which contains one or more PHs (or coded slice NAL units) referring to the PPS, or provided through external means.</p><p id="p-0209" num="0213">In an embodiment, a PPS (RBSP) may be available to the decoding process prior to it being referenced by one or more PHs (or coded slice NAL units), included in at least one PU with nuh_layer_id equal to the lowest nuh_layer_id value of the coded slice NAL units that refer to the PPS NAL unit in the CVS, which contains one or more PHs (or coded slice NAL units) referring to the PPS, or provided through external means.</p><p id="p-0210" num="0214">In an embodiment, a PPS (RBSP) may be available to the decoding process prior to it being referenced by one or more PHs (or coded slice NAL units), included in at least one PU with TemporalId equal to the TemporalId of the PPS NAL unit and nuh_layer_id equal to the lowest nuh_layer_id value of the coded slice NAL units that refer to the PPS NAL unit in the CVS, which contains one or more PHs (or coded slice NAL units) referring to the PPS, or provided through external means.</p><p id="p-0211" num="0215">In the same or another embodiment, ph_pic_parameter_set_id in PH specifies the value of pps_pic_parameter_set_id for the referenced PPS in use. The value of pps_seq_parameter_set_id may be the same in all PPSs that are referred to by coded pictures in a CLVS.</p><p id="p-0212" num="0216">In the same or another embodiment, All PPS NAL units with a particular value of pps_pic_parameter_set_id within a PU shall have the same content.</p><p id="p-0213" num="0217">In the same or another embodiment, regardless of the nuh_layer_id values, PPS NAL units may share the same value space of pps_pic_parameter_set_id.</p><p id="p-0214" num="0218">In the same or another embodiment, the nuh_layer_id value of a PPS NAL unit may be equal to the lowest nuh_layer_id value of the coded slice NAL units that refer to the NAL unit that refer to the PPS NAL unit.</p><p id="p-0215" num="0219">In an embodiment, when a PPS with nuh_layer_id equal to m is referred to by one or more coded slice NAL units with nuh_layer_id equal to n. the layer with nuh_layer_id equal to m may be the same as the layer with nuh_layer_id equal to n or a (direct or indirect) reference layer of the layer with nuh_layer_id equal to m.</p><p id="p-0216" num="0220">In an embodiment, a PPS (RBSP) shall be available to the decoding process prior to it being referenced, included in at least one AU with TemporalId equal to the TemporalId of the PPS NAL unit or provided through external means.</p><p id="p-0217" num="0221">In an embodiment, a PPS (RBSP) may be available to the decoding process prior to it being referenced, included in at least one AU with TemporalId equal to the TemporalId of the PPS NAL unit in the CVS, which contains one or more PHs (or coded slice NAL units) referring to the PPS, or provided through external means.</p><p id="p-0218" num="0222">In an embodiment, a PPS (RBSP) may be available to the decoding process prior to it being referenced by one or more PHs (or coded slice NAL units), included in at least one PU with nuh_layer_id equal to the lowest nuh_layer_id value of the coded slice NAL units that refer to the PPS NAL unit in the CVS, which contains one or more PHs (or coded slice NAL units) referring to the PPS, or provided through external means.</p><p id="p-0219" num="0223">In an embodiment, a PPS (RBSP) may be available to the decoding process prior to it being referenced by one or more PHs (or coded slice NAL units), included in at least one PU with TemporalId equal to the TemporalId of the PPS NAL unit and nuh_layer_id equal to the lowest nuh_layer_id value of the coded slice NAL units that refer to the PPS NAL unit in the CVS, which contains one or more PHs (or coded slice NAL units) referring to the PPS, or provided through external means.</p><p id="p-0220" num="0224">In the same or another embodiment, ph_pic_parameter_set_id in PH specifies the value of pps_pic_parameter_set_id for the referenced PPS in use. The value of pps_seq_parameter_set_id may be the same in all PPSs that are referred to by coded pictures in a CLVS.</p><p id="p-0221" num="0225">In the same or another embodiment, All PPS NAL units with a particular value of pps_pic_parameter_set_id within a PU shall have the same content.</p><p id="p-0222" num="0226">In the same or another embodiment, regardless of the nuh_layer_id values, PPS NAL units may share the same value space of pps_pic_parameter_set_id.</p><p id="p-0223" num="0227">In the same or another embodiment, the nuh_layer_id value of a PPS NAL unit may be equal to the lowest nuh_layer_id value of the coded slice NAL units that refer to the NAL unit that refer to the PPS NAL unit.</p><p id="p-0224" num="0228">In an embodiment, when a PPS with nuh_layer_id equal to m is referred to by one or more coded slice NAL units with nuh_layer_id equal to n. the layer with nuh_layer_id equal to m may be the same as the layer with nuh_layer_id equal to n or a (direct or indirect) reference layer of the layer with nuh_layer_id equal to m.</p><p id="p-0225" num="0229">In an embodiment, as shown in <figref idref="DRAWINGS">FIG. <b>22</b></figref>, pps_subpic_id[i] in picture parameter set specifies the subpicture ID of the i-th subpicture. The length of the pps_subpic_id[i] syntax element is pps_subpic_id_len_minus1+1 bits.</p><p id="p-0226" num="0230">The variable SubpicIdVal[i], for each value of i in the range of 0 to sps_num_subpics_minus1, inclusive, is derived as follows:</p><p id="p-0227" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>for(<i>i</i>=0<i>;i</i>&#x3c;=sps_num_subpics_minus1<i>;i</i>++)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0228" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>if(subpic_id_mapping_explicitly_signalled_flag)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0229" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>SubpicIdVal[<i>i</i>]=subpic_id_mapping_in_pps_flag?pps_subpic_id[<i>i</i>]: sps_subpic_id[<i>i</i>]<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0230" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>else<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0231" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>SubpicIdVal[<i>i</i>]=<i>i</i>&#x2003;&#x2003;(80)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0232" num="0231">In the same or another embodiment, for any two different values of i and j in the range of 0 to sps_num_subpics_minus1, inclusive, SubpicIdVal[i] may not be equal to SubpicIdVal[j].</p><p id="p-0233" num="0232">In the same or another embodiment, when the current picture is not the first picture of the CLVS, for each value of i in the range of 0 to sps_num_subpics_minus1, inclusive, if the value of SubpicIdVal[i] is not equal to the value of SubpicIdVal[i] of the previous picture in decoding order in the same layer, the nal_unit_type for all coded slice NAL units of the subpicture in the current picture with subpicture index i may be equal to a particular value in the range of IDR_W_RADL to CRA_NUT, inclusive.</p><p id="p-0234" num="0233">In the same or another embodiment, when the current picture is not the first picture of the CLVS, for each value of i in the range of 0 to sps_num_subpics_minus1, inclusive, if the value of SubpicIdVal[i] is not equal to the value of SubpicIdVal[i] of the previous picture in decoding order in the same layer, sps_independent_subpics_flag may be equal to 1.</p><p id="p-0235" num="0234">In the same or another embodiment, when the current picture is not the first picture of the CLVS, for each value of i in the range of 0 to sps_num_subpics_minus1, inclusive, if the value of SubpicIdVal[i] is not equal to the value of SubpicIdVal[i] of the previous picture in decoding order in the same layer, subpic_treated_as_pic_flag[i] and loop_filter_across_subpic_enabled_flag[i] may be equal to 1.</p><p id="p-0236" num="0235">In the same or another embodiment, when the current picture is not the first picture of the CLVS, for each value of i in the range of 0 to sps_num_subpics_minus1, inclusive, if the value of SubpicIdVal[i] is not equal to the value of SubpicIdVal[i] of the previous picture in decoding order in the same layer, sps_independent_subpics_flag shall be equal to 1 or subpic_treated_as_pic_flag[i] and loop_filter_across_subpic_enabled_flag[i] shall be equal to 1.</p><p id="p-0237" num="0236">In the same or another embodiment, when a subpicture is independently encoded without any reference to another subpicture, the value of subpicture identifier of a region may be changed within a coded video sequence.</p><p id="p-0238" num="0237">The samples are processed in units of CTBs. The array size for each luma CTB in both width and height is CtbSizeY in units of samples. The width and height of the array for each chroma CTB are CtbWidthC and CtbHeightC, respectively, in units of samples. Each CTB is assigned a partition signalling to identify the block sizes for intra or inter prediction and for transform coding. The partitioning is a recursive quadtree partitioning. The root of the quadtree is associated with the CTB. The quadtree is split until a leaf is reached, which is referred to as the quadtree leaf. When the component width is not an integer number of the CTB size, the CTBs at the right component boundary are incomplete. When the component height is not an integer multiple of the CTB size, the CTBs at the bottom component boundary are incomplete.</p><p id="p-0239" num="0238">The width and height information of each subpicture may be signaled in SPS in units of CtbSizeY. In <figref idref="DRAWINGS">FIG. <b>23</b></figref>, for example, subpic_width_minus1[i] plus 1 specifies the width of the i-th subpicture in units of CtbSizeY. The length of the syntax element is Ceil(Log2((pic_width_max_in_luma_samples+CtbSizeY&#x2212;1)&#x3e;&#x3e;CtbLog2SizeY)) bits. When not present, the value of subpic_width_minus1[i] is inferred to be equal to ((pic_width_max_in_luma_samples+CtbSizeY&#x2212;1)&#x3e;&#x3e;CtbLog2SizeY)&#x2212;subpic_ctu_top_left_x[i]&#x2212;1. subpic_height_minus1[i] plus 1 specifies the height of the i-th subpicture in units of CtbSizeY. The length of the syntax element is Ceil(Log2((pic_height_max_in_luma_samples+CtbSizeY&#x2212;1)&#x3e;&#x3e;CtbLog2SizeY)) bits. When not present, the value of subpic_height_minus1[i] is inferred to be equal to ((pic_height_max_in_luma_samples+CtbSizeY&#x2212;1)&#x3e;&#x3e;CtbLog2SizeY)&#x2212;subpic_ctu_top_left_y[i]&#x2212;1.</p><p id="p-0240" num="0239">The width of each subpicture may be greater than or equal to CtbSizeY, when the picture width is greater than or equal to CtbSizeY. The height of each subpicture may be greater than or equal to CtbSizeY, when the picture height is greater than or equal to CtbSizeY.</p><p id="p-0241" num="0240">If the picture width is not greater than CtbSizeY and the picture height is not greater than CtbSizeY, the picture may not be partitioned into more than one subpicture. In the case, the number of subpictures may be equal to 1.</p><p id="p-0242" num="0241">When pic_width_max_in_luma_samples is not greater than CtbSizeY and pic_height_max_in_luma_samples is not greater than CtbSizeY, the value of subpic_info_present_flag shall be equal to 0. When subpic_info_present_flag is equal to 0, no explicit signaling is present for subpicture partitioning information and the number of subpicture in the picture is equal to 1.</p><p id="p-0243" num="0242">In the same or another embodiment, sps_subpic_id_len_minus1 plus 1 specifies the number of bits used to represent the syntax element sps_subpic_id[i], the syntax elements pps_subpic_id[i], when present, and the syntax element slice_subpic_id, when present. The value of sps_subpic_id_len_minus1 may be in the range of 0 to 15, inclusive. The value of 1&#x3c;&#x3c;(sps_subpic_id_len_minus1) may be greater than or equal to sps_num_subpics_minus1+1.</p><p id="p-0244" num="0243">In the same or another embodiment, when the number of subpictures is equal to 1, subpic_info_present_flag may be equal to 0 and the subpicture partitioning information may not be explicitly signalled, because the subpicture width and height information is equal to the picture width and height information and the left-top position of the subpicture is equal to the left-top position of the picture in that case.</p><p id="p-0245" num="0244">For example, subpic_ctu_top_left_x[i] specifies horizontal position of top left CTU of i-th subpicture in unit of CtbSizeY. The length of the syntax element is Ceil(Log2((pic_width_max_in_luma_samples+CtbSizeY&#x2212;1)&#x3e;&#x3e;CtbLog2SizeY)) bits. When not present, the value of subpic_ctu_top_left_x[i] is inferred to be equal to 0. subpic_ctu_top_left_y[i] specifies vertical position of top left CTU of i-th subpicture in unit of CtbSizeY. The length of the syntax element is Ceil(Log2((pic_height_max_in_luma_samples+CtbSizeY&#x2212;1)&#x3e;&#x3e;CtbLog2SizeY)) bits. When not present, the value of subpic_ctu_top_left_y[i] is inferred to be equal to 0. subpic_width_minus1[i] plus 1 specifies the width of the i-th subpicture in units of CtbSizeY. The length of the syntax element is Ceil(Log2((pic_width_max_in_luma_samples+CtbSizeY&#x2212;1)&#x3e;&#x3e;CtbLog2SizeY)) bits. When not present, the value of subpic_width_minus1[i] is inferred to be equal to ((pic_width_max_in_luma_samples+CtbSizeY&#x2212;1)&#x3e;&#x3e;CtbLog2SizeY)&#x2212;subpic_ctu_top_left_x[i]&#x2212;1. subpic_height_minus1[i] plus 1 specifies the height of the i-th subpicture in units of CtbSizeY. The length of the syntax element is Ceil(Log2((pic_height_max_in_luma_samples+CtbSizeY&#x2212;1)&#x3e;&#x3e;CtbLog2SizeY)) bits. When not present, the value of subpic_height_minus1[i] is inferred to be equal to ((pic_height_max_in_luma_samples+CtbSizeY&#x2212;1)&#x3e;&#x3e;CtbLog2SizeY)&#x2212;subpic_ctu_top_left_y[i]&#x2212;1.</p><p id="p-0246" num="0245">In the same or another embodiment, when the number of subpictures is greater than 1, subpic_info_present_flag may be equal to 1 and the subpicture partitioning information may be explicitly signaled in a parameter set, as shown in <figref idref="DRAWINGS">FIG. <b>23</b></figref>.</p><p id="p-0247" num="0246">For example, in <figref idref="DRAWINGS">FIG. <b>23</b></figref>, sps_num_subpics_minus2 plus 2 specifies the number of subpictures in each picture in the CLVS. The value of sps_num_subpics_minus2 may be in the range of 0 to Ceil(pic_width_max_in_luma_samples+CtbSizeY)*Ceil(pic_height_max_in_luma_samples+CtbSizeY)&#x2212;2, inclusive. When not present, the value of sps_num_subpics_minus2 is inferred to be equal to 0.</p><p id="p-0248" num="0247">In the same embodiment, the lists SubpicWidthInTiles[i] and SubpicHeightInTiles[i], for i ranging from 0 to sps_num_subpics_minus1, inclusive, specifying the width and the height of the i-th subpicture in tile columns and rows, respectively, and the list subpicHeightLessThanOneTileFlag[i], for i ranging from 0 to sps_num_subpics_minus1, inclusive, specifying whether the height of the i-th subpicture is less than one tile row, are derived as follows:</p><p id="p-0249" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="259pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>for( i = 0; i &#x3c;= sps_num_subpics_minus2 + 1; i++ ) {</entry></row><row><entry>&#x2003;leftX = subpic_ctu_top_left_x[ i ]</entry></row><row><entry>&#x2003;rightX = leftX + subpic_width_minus1[ i ]</entry></row><row><entry>&#x2003;SubpicWidthInTiles[ i ] = ctbToTileColIdx[ rightX ] + 1 &#x2212; ctbToTileColIdx[ leftX ]</entry></row><row><entry>&#x2003;(29)</entry></row><row><entry>&#x2003;topY = subpic_ctu_top_left_y[ i ]</entry></row><row><entry>&#x2003;bottomY = topY + subpic_height_minus1[ i ]</entry></row><row><entry>&#x2003;SubpicHeightInTiles[ i ] =</entry></row><row><entry>ctbToTileRowIdx[ bottomY ] + 1 &#x2212; ctbToTileRowIdx[ topY ]</entry></row><row><entry>&#x2003;if( SubpicHeightInTiles[ i ] = = 1 &#x26;&#x26;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;subpic_height_minus1[ i ] + 1 &#x3c;</entry></row><row><entry>&#x2003;RowHeight[ ctbToTileRowIdx[ topY ] ] )</entry></row><row><entry>&#x2003;&#x2003;subpicHeightLessThanOneTileFlag[ i ] = 1</entry></row><row><entry>else</entry></row><row><entry>&#x2003;&#x2003;subpicHeightLessThanOneTileFlag[ i ] = 0</entry></row><row><entry>}</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0250" num="0248">When rect_slice_flag is equal to 1, the list NumCtusInSlice[i] for i ranging from 0 to num_slices_in_pic_minus1, inclusive, specifying the number of CTUs in the i-th slice, the list SliceTopLeftTileIdx[i] for i ranging from 0 to num_slices_in_pic_minus1, inclusive, specifying the tile index of the tile containing the first CTU in the slice, and the matrix CtbAddrlnSlice[i][j] for i ranging from 0 to num_slices_in_pic_minus1, inclusive, and j ranging from 0 to NumCtusInSlice[i]&#x2212;1, inclusive, specifying the picture raster scan address of the j-th CTB within the i-th slice, and the variable NumSlicesInTile[i], specifying the number of slices in the tile containing the i-th slice, are derived as follows:</p><p id="p-0251" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="259pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>if( single_slice_per_subpic_flag ) {</entry></row><row><entry>&#x2003;for( i = 0; i &#x3c;= sps_num_subpics_minus2 + 1; i++ ) {</entry></row><row><entry>&#x2003;&#x2003;NumCtusInSlice[ i ] = 0</entry></row><row><entry>&#x2003;&#x2003;if( subpicHeightLessThanOneTileFlag[ i ] ) /* The slice consists of a number of</entry></row><row><entry>CTU rows in a tile. */</entry></row><row><entry>&#x2003;&#x2003;&#x2003;AddCtbsToSlice( i, subpic_ctu_top_left_x[ i ],</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;subpic_ctu_top_left_x[ i ] + subpic_width_minus1[ i ] + 1,</entry></row><row><entry>subpic_ctu_top_left_y[ i ],</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;subpic_ctu_top_left_y[ i ] + subpic_height_minus1[ i ] + 1 )</entry></row><row><entry>&#x2003;&#x2003;else { /* The slice consists of a number of complete tiles covering a rectangular</entry></row><row><entry>region. */</entry></row><row><entry>&#x2003;&#x2003;&#x2003;tileX = CtbToTileColBd[ subpic_ctu_top_left_x[ i ] ]</entry></row><row><entry>&#x2003;&#x2003;&#x2003;tileY = CtbToTileRowBd[ subpic_ctu_top_left_y[ i ] ]</entry></row><row><entry>&#x2003;&#x2003;&#x2003;for( j = 0; j &#x3c; SubpicHeightInTiles[ i ]; j++ )</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;for( k = 0; k &#x3c; SubpicWidthInTiles[ i ]; k++ )</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;AddCtbsToSlice( i, tileColBd[ tileX + k ],</entry></row><row><entry>tileColBd[ tileX + k + 1 ], tileRowBd[ tileY + j ],</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;tileRowBd[ tileY + j + 1 ] )</entry></row><row><entry>&#x2003;&#x2003;}</entry></row><row><entry>&#x2003;}</entry></row><row><entry>} else {</entry></row><row><entry>&#x2003;tileIdx = 0</entry></row><row><entry>&#x2003;for( i = 0; i &#x3c;= num_slices_in_pic minus1; i++ )</entry></row><row><entry>&#x2003;&#x2003;NumCtusInSlice[ i ] = 0</entry></row><row><entry>&#x2003;for( i = 0; i &#x3c;= num_slices_in_pic_minus1; i++ ) {</entry></row><row><entry>&#x2003;&#x2003;SliceTopLeftTileIdx[ i ] = tileIdx</entry></row><row><entry>&#x2003;&#x2003;tileX = tileIdx % NumTileColumns</entry></row><row><entry>&#x2003;&#x2003;tileY = tileIdx / NumTileColumns</entry></row><row><entry>&#x2003;&#x2003;if( i &#x3c; num_slices_in_pic_minus1 ) {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;sliceWidthInTiles[ i ] = slice_width_in_tiles_minus1[ i ] + 1</entry></row><row><entry>&#x2003;&#x2003;&#x2003;sliceHeightInTiles[ i ] = slice_height_in_tiles_minus1[ i ] + 1</entry></row><row><entry>&#x2003;&#x2003;} else {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;sliceWidthInTiles[ i ] = NumTileColumns &#x2212; tileX</entry></row><row><entry>&#x2003;&#x2003;&#x2003;sliceHeightInTiles[ i ] = NumTileRows &#x2212; tileY</entry></row><row><entry>&#x2003;&#x2003;&#x2003;NumSlicesInTile[ i ] = 1</entry></row><row><entry>&#x2003;&#x2003;}</entry></row><row><entry>&#x2003;&#x2003;if( slicWidthInTiles[ i ] = = 1 &#x26;&#x26; sliceHeightInTiles[ i ] = = 1 ) {&#x2003;(30)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;if( num_exp_slices_in_tile[ i ] = = 0 ) {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;NumSlicesInTile[ i ] = 1</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;sliceHeightInCtus[ i ] =</entry></row><row><entry>RowHeight[ SliceTopLeftTileIdx[ i ] / NumTileColumns ]</entry></row><row><entry>&#x2003;&#x2003;&#x2003;} else {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;remainingHeightInCtbsY =</entry></row><row><entry>RowHeight[ SliceTopLeftTileIdx[ i ] / NumTileColumns ]</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;for( j = 0; j &#x3c; num_exp_slices_in_tile[ i ] &#x2212; 1; j++ ) {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;sliceHeightInCtus[ i + j ] =</entry></row><row><entry>exp_slice_height_in_ctus_minus1[ i ][ j ] + 1</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;remainingHeightInCtbsY &#x2212;= sliceHeightInCtus[ i + j ]</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;}</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;uniformSliceHeight = exp_slice_height_in_ctus_minus1[ i ][ j ] + 1</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;while( remainingHeightInCtbsY &#x3e;= uniformSliceHeight ) {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;sliceHeightInCtus[ i + j ] = uniformSliceHeight</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;remainingHeightInCtbsY &#x2212;= uniformSliceHeight</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;j++</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;}</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( remainingHeightInCtbsY &#x3e; 0 ) {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;sliceHeightInCtus[ i + j ] = remainingHeightInCtbsY</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;j++</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;}</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;NumSlicesInTile[ i ] = j</entry></row><row><entry>&#x2003;&#x2003;&#x2003;}</entry></row><row><entry>&#x2003;&#x2003;&#x2003;ctbY = tileRowBd[ tileY ]</entry></row><row><entry>&#x2003;&#x2003;&#x2003;for( j = 0; j &#x3c; NumSlicesInTile[ i ]; j++ ) {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;AddCtbsToSlice( i + j, tileColBd[ tileX ], tileColBd[ tileX + 1 ],</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;ctbY, ctbY + sliceHeightInCtus[ i + j ] )</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;ctbY += sliceHeightInCtus[ i + j ]</entry></row><row><entry>&#x2003;&#x2003;&#x2003;}</entry></row><row><entry>&#x2003;&#x2003;&#x2003;i += NumSlicesInTile[ i ] &#x2212; 1</entry></row><row><entry>&#x2003;&#x2003;} else</entry></row><row><entry>&#x2003;&#x2003;&#x2003;for( j = 0; j &#x3c; sliceHeightInTiles[ i ]; j++ )</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;for( k = 0; k &#x3c; sliceWidthInTiles[ i ]; k++ )</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;AddCtbsToSlice( i, tileColBd[ tileX + k ],</entry></row><row><entry>tileColBd[ tileX + k + 1 ],</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;tileRowBd[ tileY + j ], tileRowBd[ tileY + j + 1 ] )</entry></row><row><entry>&#x2003;&#x2003;if( i &#x3c; num_slices_in_pic_minus1 ) {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;if( tile_idx_delta_present_flag )</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;tileIdx += tile_idx_delta[ i ]</entry></row><row><entry>&#x2003;&#x2003;&#x2003;else {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;tileIdx += sliceWidthInTiles[ i ]</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;if( tileIdx % NumTileColumns = = 0 )</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;tileIdx +=</entry></row><row><entry>( sliceHeightInTiles[ i ] &#x2212; 1 ) * NumTileColumns</entry></row><row><entry>&#x2003;&#x2003;&#x2003;}</entry></row><row><entry>&#x2003;&#x2003;}</entry></row><row><entry>&#x2003;}</entry></row><row><entry>}</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0252" num="0249">Two or more independently coded subpictures may be merged into a coded picture, so that the coded picture may be decoded and outputted as a single picture.</p><p id="p-0253" num="0250">When two or more independently coded subpictures are merged into a coded picture, a coded picture may consist of VCL NAL units with two or more different NAL unit types.</p><p id="p-0254" num="0251">In <figref idref="DRAWINGS">FIG. <b>23</b></figref>, a flag mixed_nalu_types_in_pic_flag may be signaled in a parameter set (e.g. PPS, SPS). mixed_nalu_types_in_pic_flag equal to 1 specifies that each picture referring to the PPS has more than one VCL NAL unit and the VCL NAL units do not have the same value of nal_unit_type. mixed_nalu_types_in_pic_flag equal to 0 specifies that each picture referring to the PPS has one or more VCL NAL units and the VCL NAL units of each picture referring to the PPS have the same value of nal_unit_type.</p><p id="p-0255" num="0252">When mixed_nalu_types_in_pic_flag in a PPS is equal to 1, each picture with mixed_nalu_types_in_pic_flag is equal to 1 is handled as a trailing picture. Hence, a coded picture with two or more different NAL unit types may be decoded as a trailing picture. When the picture is referenced by the subsequent pictures in decoding order, the picture may be handled as a trailing picture.</p><p id="p-0256" num="0253">In <figref idref="DRAWINGS">FIG. <b>23</b></figref>, sps_independent_subpics_flag equal to 1 specifies that all subpicture boundaries in the CLVS are treated as picture boundaries and there is no loop filtering across the subpicture boundaries. sps_independent_subpics_flag equal to 0 does not impose such a constraint. When not present, the value of sps_independent_subpics_flag is inferred to be equal to 0.</p><p id="p-0257" num="0254">In <figref idref="DRAWINGS">FIG. <b>23</b></figref>, subpic_treated_as_pic_flag[i] equal to 1 specifies that the i-th subpicture of each coded picture in the CLVS is treated as a picture in the decoding process excluding in-loop filtering operations. subpic_treated_as_pic_flag[i] equal to 0 specifies that the i-th subpicture of each coded picture in the CLVS is not treated as a picture in the decoding process excluding in-loop filtering operations. When not present, the value of subpic_treated_as_pic_flag[i] is inferred to be equal to sps_independent_subpics_flag. When subpic_treated_as_pic_flag[i] is equal to 1, it is a requirement of bitstream conformance that all of the following conditions are true for each output layer and its reference layers in an OLS that includes the layer containing the i-th subpicture as an output layer:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0255">All pictures in the output layer and its reference layers shall have the same value of pic_width_in_luma_samples and the same value of pic_height_in_luma_samples.</li>        <li id="ul0004-0002" num="0256">All the SPSs referred to by the output layer and its reference layers shall have the same value of sps_num_subpics_minus1 and shall have the same values of subpic_ctu_top_left_x[j], subpic_ctu_top_left_y[j], subpic_width_minus1[j], subpic_height_minus1[j], and loop_filter_across_subpic_enabled_flag[j], respectively, for each value of j in the range of 0 to sps_num_subpics_minus1, inclusive.</li>        <li id="ul0004-0003" num="0257">All pictures in each access unit in the output layer and its reference layers shall have the same value of SubpicIdVal[j] for each value of j in the range of 0 to sps_num_subpics_minus1, inclusive.</li>    </ul>    </li></ul></p><p id="p-0258" num="0258">In <figref idref="DRAWINGS">FIG. <b>23</b></figref>, loop_filter_across_subpic_enabled_flag[i] equal to 1 specifies that in-loop filtering operations may be performed across the boundaries of the i-th subpicture in each coded picture in the CLVS. loop_filter_across_subpic_enabled_flag[i] equal to 0 specifies that in-loop filtering operations are not performed across the boundaries of the i-th subpicture in each coded picture in the CLVS. When not present, the value of loop_filter_across_subpic_enabled_pic_flag[i] is inferred to be equal to 1&#x2212;sps_independent_subpics_flag.</p><p id="p-0259" num="0259">When two or more coded subpictures are merged into a coded picture, those coded subpictures may not have any parsing or decoding dependency from each other.</p><p id="p-0260" num="0260">In an embodiment, when a mixed_nalu_types_in_pic_flag in a PPS is equal to 1, the values of subpic_treated_as_pic_flag[ ] of subpictures referring to the PPS may be equal to 1.</p><p id="p-0261" num="0261">In an embodiment, when sps_independent_subpics_flag is equal to 0 and one or more subpic_treated_as_pic_flag[ ] values are not equal to 1, mixed_nalu_types_in_pic_flag may be equal to 0.</p><p id="p-0262" num="0262">In an embodiment, when mixed_nalu_types_in_pic_flag is equal to 1, the value of sps_independent_subpics_flag may be equal to 1.</p><p id="p-0263" num="0263">In an embodiment, when mixed_nalu_types_in_pic_flag in a PPS is equal to 1, the values of subpic_treated_as_pic_flag[ ] of subpictures referring to the PPS is inferred to equal to 1.</p><p id="p-0264" num="0264">In an embodiment, when two or more neighboring subpictures with different NAL unit types within a picture shall have the value of subpic_treated_as_pic_flag[ ] equal to 1.</p><p id="p-0265" num="0265">In an embodiment, <figref idref="DRAWINGS">FIG. <b>24</b></figref>, the subpicture partitioning information may be signaled in PPS. For example, pps_independent_subpics_flag equal to 1 specifies that all boundaries subpictures referring to the PPS are treated as picture boundaries and there is no loop filtering across the subpicture boundaries. pps_independent_subpics_flag equal to 0 does not impose such a constraint. When not present, the value of pps_independent_subpics_flag is inferred to be equal to 0. pps_subpic_treated_as_pic_flag[i] equal to 1 specifies that the i-th subpicture of each coded picture referring to the PPS is treated as a picture in the decoding process excluding in-loop filtering operations. pps_subpic_treated_as_pic_flag[i] equal to 0 specifies that the i-th subpicture of each coded picture referring to the PPS is not treated as a picture in the decoding process excluding in-loop filtering operations. When not present, the value of pps_subpic_treated_as_pic_flag[i] is inferred to be equal to pps_independent_subpics_flag. pps_loop_filter_across_subpic_enabled_flag[i] equal to 1 specifies that in-loop filtering operations may be performed across the boundaries of the i-th subpicture in each coded picture referring to the PPS. pps_loop_filter_across_subpic_enabled_flag[i] equal to 0 specifies that in-loop filtering operations are not performed across the boundaries of the i-th subpicture in each coded picture referring to the PPS. When not present, the value of pps_loop_filter_across_subpic_enabled_pic_flag[i] is inferred to be equal to 1&#x2212;pps_independent_subpics_flag.</p><p id="p-0266" num="0266">In the same embodiment, when a mixed_nalu_types_in_pic_flag in a PPS is equal to 1, the values of pps_subpic_treated_as_pic_flag[ ] shall be equal to 1.</p><p id="p-0267" num="0267">In the same or another embodiment, when mixed_nalu_types_in_pic_flag is equal to 1, pps_independent_subpics_flag shall be equal to 1.</p><p id="p-0268" num="0268">In the same or another embodiment, when mixed_nalu_types_in_pic_flag is equal to 1, pps_subpic_treated_as_pic_flag[ ] shall be equal to 1.</p><p id="p-0269" num="0269">In an embodiment, when mixed_nalu_types_in_pic_flag is equal to 1 and at least a VCL NAL unit of a picture has nal_unit_type equal to CRA_NUT, the CRA subpicture or picture may not be handled as a CVS start picture.</p><p id="p-0270" num="0270">In an embodiment, when mixed_nalu_types_in_pic_flag is equal to 1 and at least a VCL NAL unit of a picture has nal_unit_type equal to CRA_NUT, the leading picture associated with the CRA subpicture or picture may be outputted.</p><p id="p-0271" num="0271">In the same embodiment, when mixed_nalu_types_in_pic_flag is equal to 1 and at least a VCL NAL unit of a picture has nal_unit_type equal to CRA_NUT, HandleCraAsCvsStartFlag and NoOutputBeforeRecoveryFlag for the picture are both set equal to 0.</p><p id="p-0272" num="0272">While this disclosure has described several exemplary embodiments, there are alterations, permutations, and various substitute equivalents, which fall within the scope of the disclosure. It will thus be appreciated that those skilled in the art will be able to devise numerous systems and methods which, although not explicitly shown or described herein, embody the principles of the disclosure and are thus within the spirit and scope thereof.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for decoding video data, executable by a processor, comprising:<claim-text>receiving video data comprising one or more pictures;</claim-text><claim-text>determining whether motion vector scaling is disabled across multiple pictures;</claim-text><claim-text>based on determining that motion vector scaling is not disabled, determining a motion vector scaling process for a current picture based on at least one of an access unit associated with the current picture or a picture order count associated with the current picture; and</claim-text><claim-text>decoding the video data based on the determined motion vector scaling process.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining whether motion vector scaling is disabled comprises determining that motion vector scaling is disabled across multiple pictures associated with a same access unit.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein based on determining that motion vector scaling is disabled across multiple pictures associated with the same access unit, the method further comprises:<claim-text>determining that a reference picture associated with the current picture is associated with the same access unit as the current picture; and</claim-text><claim-text>based on determining that the reference picture associated with the current picture is associated with the same access unit as the current picture, disabling the motion vector scaling process for temporal motion vector prediction for the current picture.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein disabling that the motion vector scaling process for the temporal motion vector prediction for the current picture comprises a motion vector scaling function for the current picture returning a value of one.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein motion vector scaling is disabled based on determining that a spatial resolution of a reference picture is different from a spatial resolution of the current picture.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein based on determining that motion vector scaling is not disabled, the motion vector scaling process is based on a picture order count difference between the reference picture and the current picture and a ratio of the spatial resolution of the reference picture to the spatial resolution of the current picture.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining the motion vector scaling process for the current picture comprises:<claim-text>based on determining that a poc_cycle_au associated with the access unit associated with the current picture has a non-uniform value, the motion vector scaling process for the current picture is based on a difference in the access unit associated the current picture and an access unit associated with a reference picture; and</claim-text><claim-text>based on determining that the poc_cycle_au associated with the access unit associated with the current picture has a uniform value, the motion vector scaling process for the current picture is based on a picture order count difference between the reference picture and the current picture.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. An apparatus for decoding video data, the apparatus comprising:<claim-text>at least one memory configured to store program code; and</claim-text><claim-text>at least one processor configured to read the program code and operate as instructed by the program code, the program code comprising:<claim-text>receiving code configured to cause the at least one processor to receive video data comprising one or more pictures;</claim-text><claim-text>first determining code configured to cause the at least one processor to determine whether motion vector scaling is disabled across multiple pictures;</claim-text><claim-text>second determining code configured to cause the at least one processor to determine, based on determining that motion vector scaling is not disabled, a motion vector scaling process for a current picture based on at least one of an access unit associated with the current picture or a picture order count associated with the current picture; and</claim-text><claim-text>decoding code configured to cause the at least one processor to decode the video data based on the determined motion vector scaling process.</claim-text></claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, determining whether motion vector scaling is disabled comprises determining that motion vector scaling is disabled across multiple pictures associated with a same access unit.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein based on determining that motion vector scaling is disabled across multiple pictures associated with the same access unit, the program code further comprises:<claim-text>third determining code configured to cause the at least one processor to determine that a reference picture associated with the current picture is associated with the same access unit as the current picture; and</claim-text><claim-text>disabling code configured to cause the at least one processor to disable, based on determining that the reference picture associated with the current picture is associated with the same access unit as the current picture, the motion vector scaling process for temporal motion vector prediction for the current picture.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the disabling code comprises a motion vector scaling function for the current picture returning a value of one.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein motion vector scaling is disabled based on determining that a spatial resolution of a reference picture is different from a spatial resolution of the current picture.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The apparatus of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein based on determining that motion vector scaling is not disabled, the motion vector scaling process is based on a picture order count difference between the reference picture and the current picture and a ratio of the spatial resolution of the reference picture to the spatial resolution of the current picture.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the second determining code further comprises:<claim-text>based on determining that a poc_cycle_au associated with the access unit associated with the current picture has a non-uniform value, the motion vector scaling process for the current picture is based on a difference in the access unit associated the current picture and an access unit associated with a reference picture; and</claim-text><claim-text>based on determining that the poc_cycle_au associated with the access unit associated with the current picture has a uniform value, the motion vector scaling process for the current picture is based on a picture order count difference between the reference picture and the current picture.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer readable medium storing instructions that, when executed by at least one processor for decoding video data, cause the at least one processor to:<claim-text>receive video data comprising one or more pictures;</claim-text><claim-text>determine whether motion vector scaling is disabled across multiple pictures;</claim-text><claim-text>based on determining that motion vector scaling is not disabled, determine a motion vector scaling process for a current picture based on at least one of an access unit associated with the current picture or a picture order count associated with the current picture; and</claim-text><claim-text>decode the video data based on the determined motion vector scaling process.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein determining whether motion vector scaling is disabled comprises determining that motion vector scaling is disabled across multiple pictures associated with a same access unit.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein based on determining that motion vector scaling is disabled across multiple pictures associated with the same access unit, the instructions further comprise:<claim-text>determining that a reference picture associated with the current picture is associated with the same access unit as the current picture; and</claim-text><claim-text>based on determining that the reference picture associated with the current picture is associated with the same access unit as the current picture, disabling the motion vector scaling process for temporal motion vector prediction for the current picture.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein motion vector scaling is disabled based on determining that a spatial resolution of a reference picture is different from a spatial resolution of the current picture.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein based on determining that motion vector scaling is not disabled, the motion vector scaling process is based on a picture order count difference between the reference picture and the current picture and a ratio of the spatial resolution of the reference picture to the spatial resolution of the current picture.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein determining the motion vector scaling process for the current picture comprises:<claim-text>based on determining that a poc_cycle_au associated with the access unit associated with the current picture has a non-uniform value, the motion vector scaling process for the current picture is based on a difference in the access unit associated the current picture and an access unit associated with a reference picture; and</claim-text><claim-text>based on determining that the poc_cycle_au associated with the access unit associated with the current picture has a uniform value, the motion vector scaling process for the current picture is based on a picture order count difference between the reference picture and the current picture.</claim-text></claim-text></claim></claims></us-patent-application>