<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004820A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004820</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364521</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>02</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>215</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>901</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>02</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>215</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9024</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">DEFINING AND DEBUGGING MODULE COMPLETENESS GRAPHS BASED ON INTERACTIVE USER INTERFACE CHECKLIST ELEMENTS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>INTUIT INC.</orgname><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>HANEKAMP, JR.</last-name><first-name>David Alan</first-name><address><city>Carlsbad</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>KNUDTSON</last-name><first-name>Eric</first-name><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>MAKWANA</last-name><first-name>Anoop</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Certain aspects of the present disclosure provide techniques for defining a completeness of input, including receiving a first input, comprising: a set of fields associated with an operation; a set of indicators, wherein at least one indicator in the set of indicators is associated with a field in the set of fields; and a set of modifiers, wherein each modifier is associated with at least one indicator in the set of indicators, wherein a combination of the set of indicators and the set of modifiers indicates fields of the set of fields that require input to execute the operation; receiving a second input associated with the set of indicators and the set of modifiers; receiving, from the knowledge engine, a result based on the second input; and determining whether the second input contains required input to the fields that require input based on the result.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="104.73mm" wi="158.75mm" file="US20230004820A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="249.17mm" wi="166.54mm" orientation="landscape" file="US20230004820A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="258.66mm" wi="167.89mm" orientation="landscape" file="US20230004820A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="248.33mm" wi="168.40mm" orientation="landscape" file="US20230004820A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="251.29mm" wi="168.15mm" orientation="landscape" file="US20230004820A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="250.95mm" wi="168.06mm" orientation="landscape" file="US20230004820A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="260.86mm" wi="168.23mm" orientation="landscape" file="US20230004820A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="261.37mm" wi="168.40mm" orientation="landscape" file="US20230004820A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="254.42mm" wi="167.72mm" orientation="landscape" file="US20230004820A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="182.88mm" wi="142.58mm" file="US20230004820A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="210.31mm" wi="150.54mm" file="US20230004820A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="217.34mm" wi="146.30mm" file="US20230004820A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="209.21mm" wi="146.30mm" file="US20230004820A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">INTRODUCTION</heading><p id="p-0002" num="0001">Aspects of the present disclosure relate to defining, generating, and testing a completeness graph of a knowledge engine through input to a user interface (UI) in order to determine if all required fields of a module received required user input in an application.</p><p id="p-0003" num="0002">Knowledge engines contain programs called modules that may execute one or more operations by referencing one or more graphs of the knowledge engine, such as calculation graphs and completeness graphs. Generally, a calculation graph of a module may be used to perform the one or more operations, and a completeness graph of a module may be used to ensure that all input needed for the operations to be completed has been received.</p><p id="p-0004" num="0003">Knowledge engines allow experts to encode rules for programs in a machine-readable way. The various types of rules about a topic define what data is needed under certain circumstances and how to calculate results from that data. These rules can be bundled together into a set of rules that define the module.</p><p id="p-0005" num="0004">However, conventional methods for adding and/or modifying completeness graphs of modules are resource-intensive (e.g., time, money, computing, personnel, etc.) and can require a deep understanding of how to write programming code. For example, when defining a completeness graph by conventional methods, a user must specifically account for each and every way to complete the application, which can implicate millions of options. Consequently, it will not only take the user extreme amounts of time to account for every way, but will in turn lead to extra processing requirements, and thus, power requirements, as more code must be analyzed, more input must be processed, and more processing cycles must be run. Where large and/or complex knowledge engines are used, the computational resources necessary to complete conventional methods is significant.</p><p id="p-0006" num="0005">Therefore, a solution is needed that can overcome the shortcomings of the conventional methods so as to allow for users to more easily define completeness graphs and reduce the processing requirements of executing the completeness graphs.</p><heading id="h-0002" level="1">BRIEF SUMMARY</heading><p id="p-0007" num="0006">Certain embodiments provide a method for defining a completeness of input. The method generally includes receiving a first input, comprising: a set of fields associated with an operation; a set of indicators, wherein at least one indicator in the set of indicators is associated with a field in the set of fields; and a set of modifiers, wherein each modifier is associated with at least one indicator in the set of indicators, wherein a combination of the set of indicators and the set of modifiers indicates fields of the set of fields that require input to execute the operation; receiving a second input associated with the set of indicators and the set of modifiers; receiving, from the knowledge engine, a result based on the second input; and determining whether the second input contains required input to the fields that require input based on the result.</p><p id="p-0008" num="0007">Other embodiments provide processing systems configured to perform the aforementioned method as well as those described here; non-transitory, computer-readable media comprising instructions that, when executed by one or more processors of a processing system, cause the processing system to perform the aforementioned method as well as those described here; a computer program product embodied on a computer-readable storage medium comprising code for performing the aforementioned method as well as those further described here; and a processing system comprising means for performing the aforementioned method as well as those further described herein.</p><p id="p-0009" num="0008">The following description and the related drawings set forth in detail certain illustrative features of one or more embodiments.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0010" num="0009">The appended figures depict certain aspects of the one or more embodiments and are therefore not to be considered limiting of the scope of this disclosure.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts an example computing environment for defining a completeness graph of a module.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts an example user interface receiving builder input defining a calculation graph of a module.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts an example user interface receiving builder input defining a completeness graph of a module.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts an example user interface displaying one or more symbols associated with runner input, where the runner input contains the required input to complete the module.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts an example user interface displaying one or more symbols associated with runner input, where one or more lists do not need to receive certain input in order for the module to be considered complete.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts an example user interface displaying one or more symbols associated with runner input, where the runner input causes the module to short-circuit.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts an example user interface displaying one or more symbols associated with runner input, where the runner input does not contain the required input to complete the module.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>8</b></figref> depicts an example user interface displaying one or more symbols associated with runner input, where an &#x201c;any of&#x201d; indicator defines a condition where only one list out of multiple lists must be considered complete for the module to be considered complete.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>9</b></figref> depicts an example method of defining a completeness of a module.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>10</b></figref> depicts an example method of debugging a completeness graph based on builder input.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>11</b></figref> depicts an example processing device that may be configured to perform the methods described herein.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>12</b></figref> depicts an example computing device.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0023" num="0022">To facilitate understanding, identical reference numerals have been used, where possible, to designate identical elements that are common to the drawings. It is contemplated that elements and features of one embodiment may be beneficially incorporated in other embodiments without further recitation.</p><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0024" num="0023">Aspects of the present disclosure provide apparatuses, methods, processing systems, and computer-readable mediums for defining and debugging a completeness graph of a module by using fields within the module and using rules and modifiers to specify which input is required when conditions are satisfied.</p><p id="p-0025" num="0024">A user can define a module that can perform one or more operations, as well as how those operations are completed, by coding rules about the operations and their completeness. For example, certain applications allow users to define calculation graphs and completeness graphs for the module's operations to be executed by a knowledge engine, where the calculation graph is defined as which operations will be performed when the application receives certain data, and the completeness graph defines which of that certain data that the application needs to receive in order to fully execute the operations of the module. When executing the calculation graph and completeness graphs, the knowledge engine takes the rules of the calculation and completeness graphs and applies them to a set of input data to produce a set of results.</p><p id="p-0026" num="0025">By conventional methods, the calculation graphs and completeness graphs would be defined by writing software code, and thus, would require extensive knowledge of coding as well as extensive amounts of time for writing the code. Additionally, to define a completeness graph in such a way would require not only the writer to account for every possible input combination for the operation, which results in more code to be processed in order to run the completeness graph, and thus making defining and using a completeness graph for large operations extremely time consuming and resource intensive. However, a completeness graph that has not been properly defined will cause the module to run improperly, and thus, in order to have a properly working module, a user would need to spend said time and resources. Embodiments described herein leverage the technical capabilities of modern devices to provide an improved method of defining the calculation and completeness graphs for an operation, and therefore overcome the technical and experiential limitations with conventional methods.</p><p id="p-0027" num="0026">Generally, embodiments described herein may leverage various technical capabilities to provide an improved user interface for defining a completeness graph through various elements. In particular, embodiments herein provide a technical solution to the technical problem of increased resource requirements of coding a module, increased processing requirements for performing the operations of a module, and increased processing requirements for processing the completeness graph of the module.</p><p id="p-0028" num="0027">Embodiments described herein may receive, for example, builder input referencing one or more fields of a module and defining conditions of which operational input (called &#x201c;runner input&#x201d;) to the fields of the module must (or must not) satisfy in order for the module to be considered complete, meaning that all data required to fully process an operation has been provided to the fields of the module. Thus, the user may define the completeness graph with builder input referencing specific fields of the module and choosing other builder input that defines conditions, and running an artifact based on those fields and conditions against the knowledge engine. Beneficially, the user can choose specific indicators and modifiers that define the conditions which allows the server to generate an artifact based on the conditions, allowing the knowledge engine to check the input against the condition instead of checking for every possible input, thus decreasing the size of the artifact than what it would have been if the user writing a code that must account for every possible input. Thus, the processing requirements of generating and executing the artifact are significantly lower than if they were based on other codes due to decreased size, and thus increases the efficiency of the server and knowledge engine as well as decreasing the amount of memory required to generate and execute the artifact.</p><p id="p-0029" num="0028">In these ways and others as described herein, the embodiments herein improve upon conventional methods of defining and implementing completeness graphs by requiring significantly less space and less processing for creating and processing the completeness graphs.</p><p id="p-0030" num="0029">As described in more detail below, receiving builder input referencing fields and defining conditions of completeness not only allows for more efficiently defining the completeness graph but also reducing the processing requirements and saving memory by decreasing the amount of possibilities that the knowledge engine must account for when executing an artifact based on the builder input. For example, the server and knowledge engine allow for a user to debug the completeness graph that has been defined by the builder input to an associated user interface. A user may define the completeness graph by referencing fields and defining conditions through indicators and modifiers input to a user interface, and then may allow the completeness graph to be tested to see if it performs as intended. In doing so, the knowledge engine executes an artifact created by the server based on the user's definition, instead of all possible combinations of input, therefore saving processing power and memory space. The server can then use the knowledge engine's execution to indicate to the user whether the completeness graph performs as intended. Thus, the method of defining a completeness graph described herein allows the server to reduce the processing requirements of each test by only checking whether certain conditions are satisfied and therefore, allowing the server and knowledge engine to run more efficiently than conventional methods allow.</p><heading id="h-0005" level="1">Example System of Computing Devices and Server for Defining Completeness Graphs</heading><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts an example computing environment <b>100</b> for defining one or more completeness graphs and calculation graphs.</p><p id="p-0032" num="0031">As illustrated, the example computing environment <b>100</b> includes a server <b>102</b> interacting with computing devices <b>104</b> and <b>106</b>. In this depicted example, the server further includes a module builder <b>110</b>, a knowledge engine <b>120</b>, a client UI component <b>130</b>, and application programming interfaces (APIs) <b>140</b>. In some embodiments, the knowledge engine may be implemented outside of server <b>102</b>, such as implemented on multiple devices in a distributed computing environment, or as a cloud service, or the like.</p><p id="p-0033" num="0032">A computing device, such as computing device <b>104</b> or computing device <b>106</b>, can include a computer, laptop, tablet, smartphone, a smart device, a virtual machine, a container, or other types of computing device as are known.</p><p id="p-0034" num="0033">In some cases, the computing device <b>104</b> can be associated with a user. The user can, via the computing device <b>104</b>, input data to define one or more modules (e.g., builder input as described below with respect to <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>8</b></figref>). For example, the computing device <b>104</b> can access and/or receive UI views from a module builder <b>110</b> in a user application and/or an editing application that may receive builder input. In some cases, the UI views may be tabular. In those cases, the UI views may consist of multiple rows and columns containing fields that may receive input data. In other embodiments, the UI views may not be tabular, and may be presented through a graphical editing application. Through the UI views, the user can input the builder input that defines a completeness graph which the server <b>102</b> can use to generate an artifact and verify if runner input for performing the one or more defined operations includes the required input necessary to execute the one or more operations. In this embodiment, a computing device sends one or more runner inputs to the server <b>102</b>. In some embodiments, the computing device <b>104</b> may send the runner input to the server <b>102</b> for debugging the completeness graph. In other embodiments, the computing device <b>106</b> may send input from a client user as the runner input to the server <b>102</b>. In yet another embodiment, the server <b>102</b> may use input stored on the server <b>102</b> or otherwise received at the server <b>102</b> as the one or more runner inputs.</p><p id="p-0035" num="0034">As shown in this example, the server <b>102</b> includes module builder <b>110</b>, knowledge engine <b>120</b>, client UI component <b>130</b>, and APIs <b>140</b>.</p><p id="p-0036" num="0035">In this depicted example, the module builder <b>110</b> includes UI component <b>112</b>, generating component <b>114</b>, and feedback component <b>116</b>.</p><p id="p-0037" num="0036">The UI component <b>112</b> may generate UI interfaces that may be provided to one or more computing devices and may receive builder input and/or runner input from the one or more computing devices. The builder input provided may be used to define at least one completeness graph for a module, and may further define at least one calculation graph for the module. Examples of builder input defining the completeness graph are described below with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, whereas examples of builder input defining the calculation graph are described below with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0038" num="0037">The UI component <b>112</b> may additionally contain data related to one or more calculation graphs and/or completeness graphs that can be used to define certain aspects of input to the UI interfaces. For example, the UI component <b>112</b> may contain data listing all fields of the module, all indicators, and all modifiers that may be used as input to a UI interface, such as user interface <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In some embodiments, such data may be stored in a network or on a separate server that may be accessed by module builder <b>110</b>.</p><p id="p-0039" num="0038">The generating component <b>114</b> can generate a set of artifact files corresponding to the module (e.g., a &#x201c;module code&#x201d;) defining the calculation graphs, completeness graphs, and UI views for the module based on the builder input to the module interface. In some embodiments, each of the calculation graph, completeness graph, and client UI view for the module correspond to a respective artifact file. Further, each artifact may be an XML, files, JSON files, or other structured data files. The generating component <b>114</b> can further include an algorithm that reviews the builder input to the module interface to create a module code based on the builder input. Each module code or parts of the module code may be stored in the knowledge engine at calculation graphs <b>122</b>, completeness graphs, <b>124</b>, and/or artifacts <b>126</b>. In other embodiments, the artifacts may be stored in a network or another server that may be accessed by server <b>102</b> to retrieve artifacts that will be executed by the knowledge engine.</p><p id="p-0040" num="0039">As illustrated, knowledge engine <b>120</b> includes calculation graphs <b>122</b>, completeness graphs <b>124</b>, and artifacts <b>126</b>. As previously noted, the knowledge engine <b>120</b> may also receive one or more artifact files defining one or more calculation graphs, completeness graphs, and UI views that it may store in artifacts <b>126</b>. With the artifact files, the knowledge engine <b>120</b> may generate and/or update the calculation graphs and completeness graphs which may be stored in calculation graphs <b>122</b> and completeness graphs <b>124</b>, respectively. In some embodiments, the knowledge engine <b>120</b> does not update the calculation graphs or completeness graphs, and instead, the module builder <b>110</b> updates the artifacts defining the calculation graphs and completeness graphs, which the knowledge engine <b>120</b> uses to generate new calculation graphs and completeness graphs. The module builder <b>110</b> may have access to the knowledge engine <b>120</b> and may retrieve calculation graphs and completeness graphs if needed to define the one or more UI views provided to a computing device, such as computing device <b>104</b>. In this depicted example, the knowledge engine is part of the server <b>102</b>. In other embodiments, the knowledge engine may be implemented elsewhere.</p><p id="p-0041" num="0040">As shown in this depicted example, the server <b>102</b> further includes client UI component <b>130</b>. The client UI component <b>130</b> may generate one or more client views to provide a computing device, such as computing device <b>104</b> or computing device <b>106</b>. The client UI component <b>130</b> may also receive runner input from the computing devices <b>104</b>. The client UI component <b>130</b>, after receiving runner input, may provide the runner input to the server <b>102</b> so that the server <b>102</b> can generate an artifact based, at least in part, the runner input for the knowledge engine <b>120</b> to execute against the appropriate calculation graph and completeness graph. The knowledge engine <b>120</b> may provide results of executing the artifact against the calculation graph and completeness graph to one or more of the computing devices. The results of executing the artifact against the calculation graph would indicate specific calculations made based on the received runner input and operations associated with the calculation graph. The results of executing the runner input against the completeness graph would indicate if the received runner input contained all input required in order to complete the operation of the module.</p><p id="p-0042" num="0041">Server <b>102</b> further includes APIs <b>140</b>, which may be used by the server <b>102</b> in order to determine if the module has been properly defined. In some embodiments, a user can call one or more APIs of APIs <b>140</b> corresponding to a particular artifact file of the module code in order to cause knowledge engine <b>120</b> to execute the artifact file (e.g., calculation graph, completeness graphs, and/or a client UI view) based on received runner input. In some embodiments, an API can cause the knowledge engine <b>120</b> to run the calculations of the calculation graph based on runner input, cause the knowledge engine <b>108</b> to run the completeness graph to make sure all required runner input was input to the collection interface, and/or cause the knowledge engine <b>108</b> to display an associated client UI view to the user. In another embodiment, an API can cause the module builder <b>110</b> to generate client UI views after the executing certain artifact files. The server may receive a result based on that execution and display one or more symbols based on that result, so that the user can debug a completeness graph. In some embodiments, the explanation may be further defined by input received at the server <b>102</b>. By running the APIs, the user can make sure that all desired rules and regulations of the module collection have been implemented and all necessary data has been input.</p><heading id="h-0006" level="1">Example User Interface for Defining a Calculation Graph of a Module</heading><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts an example user interface <b>200</b>, which is one of the UI views that may receive builder input for defining a calculation graph of a module or runner input to test that calculation graph. In some embodiments, the user interface <b>200</b> is provided by a server, such as server <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, to a computing device, such as computing device <b>104</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0044" num="0043">As illustrated, this particular user interface <b>200</b> includes a tabular interface for a user to enter builder input regarding a calculation graph (e.g., how to perform a new and/or modified operation) of the module or the runner input to test the module. User interface <b>200</b> includes one or more tuples, such as a particular set of user interface elements (e.g., a set of cells), that may receive builder input. Input to each tuple may define a node of the knowledge graph and/or an operation associated with the node. In this depicted example, the tuples may be columns of cells and rows of cells, however, columns of cells and rows of cells are exemplary tuples, and other tuples may be used in other embodiments. For example, each column of the user interface may have a textual description of the data contained in the column (e.g., &#x201c;role&#x201d; and &#x201c;type&#x201d;). Each row can receive builder input representing a description of a respective node in the calculation graph or an operation to be performed by the node. Together, the rows represent multiple nodes of the calculation graph that will perform one or more operations to generate a result.</p><p id="p-0045" num="0044">For example, a user can input builder data (e.g., &#x201c;builder input&#x201d;) to a first cell (e.g., cell <b>214</b>) in a first row to define a first node with a node description of &#x201c;User Name&#x201d; (e.g., as input by the user to cell <b>218</b>), and builder input to a second cell (e.g., cell <b>216</b>) in the first row to include in the description the type of data (e.g., &#x201c;string&#x201d;, &#x201c;decimal&#x201d;, &#x201c;checkbox&#x201d;, or &#x201c;date&#x201d;), to be entered in a UI view. The user may additionally input a field name (e.g., &#x201c;Name&#x201d;) for the first node in cell <b>220</b>, which may further be used when inputting information defining the completeness graph, as described with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The field name may refer to a field of the module that may receive test data input (e.g., &#x201c;runner input&#x201d;) in order to perform an operation of the module. Lastly, the user interface <b>200</b> may receive runner input to be run against the calculation graph, such as data related to the node (e.g., &#x201c;John Smith&#x201d; in cell <b>222</b>).</p><p id="p-0046" num="0045">In some embodiments, the builder input may be chosen from a dropdown menu or may be typed in by the user. In other embodiments, certain cells may be automatically filled in by the server and cannot receive user input. In some embodiments, the runner input may be typed into an appropriate cell of the user interface <b>200</b>.</p><p id="p-0047" num="0046">The user may further input data to the remaining fields in the user interface (e.g., the remaining fields in set of cells <b>204</b>, set of cells <b>206</b>, set of cells <b>208</b>, set of cells <b>210</b>, and set of cells <b>212</b>), where each row of the remaining cells corresponds to a node in the calculation graph. The server may then generate an artifact file defining the calculation graph, which may be used to execute the builder input and runner input to user interface <b>200</b> against a knowledge engine, such as knowledge engine <b>120</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0048" num="0047">In some embodiments, the builder input to user interface <b>200</b> may be stored by the server, and later accessed by the server (e.g., by UI component <b>112</b>), in order to define other user interfaces of the module, such as user interface <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><heading id="h-0007" level="1">Example User Interface for Defining a Completeness Graph of a Module</heading><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts an example user interface <b>300</b>, which is one of the UI views that may receive builder input for defining a completeness graph of a module. In some embodiments, the user interface <b>300</b> is provided by a server, such as server <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, to a computing device such as computing device <b>104</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0050" num="0049">As shown, the user interface <b>300</b> is tabular and has one or more tuples of cells that may receive builder input defining the completeness graph of the module. Similarly to user interface <b>200</b>, the tuples in this depicted example are rows and columns, however, rows and columns are exemplary, and other types of tuples may be used. In other embodiments, the user interface may be a graphical user interface or a user interface that receives plain text using a domain specific language. After receiving builder input to at least one cell, the server may create an artifact based on the builder input that may be executed by the knowledge engine in order to determine the completeness of input to the module. For example, in some cases, a user may define the completeness graph by using builder input related to the input to another user interface view, such as the user interface <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and the server may use the builder input to user interface <b>300</b> to create an artifact that may be run against the knowledge engine. In some embodiments, the server may create and run the artifact against the knowledge engine through an API (e.g., an API of APIs <b>140</b>), which in some cases may be done in response to a user selection. Additionally, the server may also receive builder input for debugging the module or client input to the fields of the module in order to determine the completeness of input, which an artifact may further be based on.</p><p id="p-0051" num="0050">Each column may be associated with a type of data of the builder input. For example, a set of cells may cover input required for the entire module to be complete or for a subset of the module, called a &#x201c;list&#x201d; of fields, to be complete (e.g., cells in column A having data referencing a field of the module, a specific set of fields referenced by a list, or the entire module). As another example, a set of cells may contain references specific fields or specific lists (e.g., cells in column B receiving builder input to each cell of set of cells <b>308</b>, set of cells <b>314</b>, and set of cells <b>320</b> referencing specific fields of the module, as well as set of cells <b>304</b> and set of cells <b>306</b> defining lists). Further, a set of cells may include one or more indicators denoting whether there is a condition associated with a field in the same row and when that condition needs to be satisfied (e.g., cells of column C having data indicating whether or not a field must always receive input in set of cells <b>310</b>, set of cells <b>316</b>, and set of cells <b>322</b>). Also, certain cells may also receive a modifier defining the condition for the field in the same row (e.g., cells in columns D-G defining conditions of when a field must receive input, such as set of cells <b>312</b>, set of cells <b>318</b>, and set of cells <b>324</b>). Thus, together, a combination of one or more indicators and modifiers may define a condition and when that condition applies.</p><p id="p-0052" num="0051">In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the cells of row 3 receive builder input to each of cells 3B-3F defining when a field (e.g., cell 3B defining the &#x201c;Email&#x201d; field of the module &#x201c;Legal Age&#x201d;) requires input for the module to be considered complete. More specifically, cell 3B of row 3 denotes the field of the module (e.g., &#x201c;Email&#x201d;, corresponding to a field in set of cells <b>220</b> as described with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>), cell 3C of row 3 denotes that the &#x201c;Email&#x201d; field &#x201c;MUST BE ASKED WHEN&#x201d; a condition is satisfied, where the condition is defined by cells 3D-3G of row 3 (e.g., when the &#x201c;Name&#x201d; field in set of cells <b>220</b> did not receive corresponding input, and therefore is &#x201c;UNKNOWN&#x201d;).</p><p id="p-0053" num="0052">As noted above, rows of user interface <b>300</b> may also receive builder input indicating that the entire module or a certain list of the module is required to receive runner input in order for the module to be completed. For example, set of cells <b>302</b> corresponding to row 1 (also referred to as &#x201c;module row <b>302</b>&#x201d;) defines that the entire module named &#x201c;Legal Age&#x201d; is complete when all of the fields defined by set of cells <b>308</b> receive input, based on whether conditions defined by indicators in set of cells <b>310</b> and modifiers in set of cells <b>312</b> are satisfied.</p><p id="p-0054" num="0053">Similarly, builder input to the rows may define that one or more fields referenced by one or more lists are required to receive runner input in order for the list to be completed based on whether certain preceding conditions are satisfied. For example, set of cells <b>304</b> corresponding to row 10 (also referred to as &#x201c;list row <b>304</b>&#x201d;) may receive builder input that defines that the &#x201c;Parent&#x201d; list is required to receive runner input to each referenced field in the list, as defined by set of cells <b>314</b>, in order for the list to be completed, subject to conditions defined by an indicator of cell 10C and modifiers of cells 10D-10G. Additionally, the rows corresponding to the list may have their own cells of fields, indicators, and modifiers that define when the fields of the rows must receive runner input. For example, row 13 may receive input defining that the &#x201c;Parent&#x201d; list is complete when the field referenced by cell 13B (&#x201c;Psign&#x201d;) receives input, subject to certain conditions defined by the indicators in set of cells <b>316</b> and the modifiers in set of cells <b>318</b>. In certain embodiments, when defining a list, no indicators or modifiers are necessary to define a condition for the list, and instead, may be defined in the cell referencing the list. For example, in those embodiments, cell 10A may receive builder input defining that all of the referenced fields of the list must receive runner input (e.g., cell 10A would receive builder input showing &#x201c;List&#x2014;All of&#x201d;) or alternatively, that only one of the referenced fields of the list must receive runner input (e.g., cell 10A would receive would receive builder input showing &#x201c;List&#x2014;Any of&#x201d;). After defining the fields of a list, builder input referencing the list may be input to certain cells (e.g., cells 6B and 7B). Thus, lists may be used as builder input to define when other lists or the module may be complete, which allows the module or lists to be broken up into logical chunks.</p><p id="p-0055" num="0054">As an additional example, the user interface <b>300</b> may receive builder input that defines that the &#x201c;Guardian&#x201d; list, as denoted by input to cell 17B, requires runner input to each referenced field of the list defined by set of cells <b>320</b>, in order for the list to be completed, where the input must be received subject to certain conditions as defined by the indicator of cell 17C and modifiers of cells 17D-17G.</p><p id="p-0056" num="0055">Thus, the builder input to the cells of user interface <b>300</b> defines when certain fields of the module as defined in user interface <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> must receive runner input, and may define that certain fields must receive input subject to not only the conditions defined in the row referencing the field, but other conditions as well. In doing so, the builder input may link certain fields or lists together, making certain fields only require runner input when multiple conditions are satisfied.</p><p id="p-0057" num="0056">For example, in order for row 21 to be considered complete, the field referenced by input to cell 21B (e.g., &#x201c;Gday&#x201d;) of row 21 must receive runner input based on the condition defined by the indicator of cell 21C and modifiers of cells 21D-21G. However, row 21 is within the &#x201c;Guardian&#x201d; list as defined in row 17, and thus, &#x201c;Gday&#x201d; must also receive runner input for the condition defined by the indicator of cell 17C and modifiers of cells 17D-17G to be satisfied. Additionally, the &#x201c;Guardian&#x201d; list is also input to set of cells <b>308</b>, and thus, for the &#x201c;Legal Age&#x201d; module to be considered complete, the fields defined by the &#x201c;Guardian&#x201d; list (e.g., fields input to set of cells <b>320</b>) must only receive input if the condition defined by the indicators of cells 7C and 8C and modifiers of cells 7D-7G and 8D-8G is satisfied.</p><p id="p-0058" num="0057">In this way, a user may use builder input defining when a module has received the necessary input subject to certain indicators and identifiers, which may include defining when one or more lists or fields have received the necessary input as well.</p><heading id="h-0008" level="1">Referencing Fields within the Module</heading><p id="p-0059" num="0058">The builder input to each cell in set of cells <b>308</b>, set of cells <b>314</b>, and set of cells <b>320</b> may reference one or more fields (as defined in user interface <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>) of the module that require runner input, subject to certain conditions associated with the row that references the field, as described below. The input to a cell may reference a field of the module (e.g., &#x201c;Name&#x201d;, &#x201c;Email&#x201d;, &#x201c;Bday&#x201d;, etc., as defined by set of cells <b>220</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>). In this depicted example, a field of the module that requires input may be defined by a user in a separate user interface view, as described with respect to user interface <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0060" num="0059">The builder input to one or more cells may further indicate what fields of the module must receive runner input in order for the module itself to be considered complete. Like the lists, the module itself may be indicated in its own row of cells (a &#x201c;module row&#x201d;), for example, module row <b>302</b> for the &#x201c;Legal Age&#x201d; module. In some embodiments, the module or list names may be defined by text input of the user. In some embodiment, like the other rows, module row <b>302</b> may receive builder input defining its own condition through indicators and modifiers (e.g., the indicator of cell 1C and the modifiers of cells 1D-1G), meaning that the module may only be considered complete when the condition is satisfied. In other embodiments, the module row <b>302</b> may not receive any builder input defining its indicators and modifiers, and may instead be complete when all referenced fields have received input if the associated conditions are satisfied. In this depicted example, the fields that must receive input for the module to be complete are shown as the cells directly beneath the row defining the module (e.g., the &#x201c;Legal Age&#x201d; module indicated by module row <b>302</b> receives input that certain fields of the module defined by set of cells <b>308</b> must receive runner input for the &#x201c;Legal Age&#x201d; module to be complete, subject to conditions defined by associated indicators and modifiers).</p><p id="p-0061" num="0060">The builder input to one or more cells may further define a list of fields of the module (e.g., &#x201c;List-Parent&#x201d; and &#x201c;List-Guardian&#x201d;). The cells defining a list of fields of the module may receive builder input referencing one or more fields of the module that must receive runner input in order for the list to be complete, based on whether condition(s) of the row referencing each field are satisfied. Additionally, the list itself may be indicated in its own row of cells (a &#x201c;list row&#x201d;), for example, list row <b>304</b> for the &#x201c;Parent&#x201d; list or list row <b>306</b> for the &#x201c;Guardian&#x201d; list. Like other rows, the cells of the row that indicates the list may receive builder input defining indicators and modifiers of the row. In this depicted example, the fields of the list are defined by the cells directly beneath the list row (e.g., the &#x201c;Parent&#x201d; list indicated by row <b>304</b> includes all fields defined by builder input to the set of cells <b>314</b>). In other embodiments, the fields of the list may be defined in a separate user interface view or may be in a separate location within the user interface <b>300</b>.</p><p id="p-0062" num="0061">After a list is defined within user interface <b>300</b>, for example, by list row <b>304</b> and set of cells <b>314</b> along with the corresponding indicators and modifiers, the list may be referenced like a field of the module by builder input to other cells of user interface <b>300</b>. For example, the set of cells <b>308</b> includes cell 6B, which corresponds to the &#x201c;Parent&#x201d; list. Thus, in order for the &#x201c;Legal Age&#x201d; module to be considered complete, the &#x201c;Parent&#x201d; list must also be considered complete, based on the conditions associated with row 1 (defining when the entire &#x201c;Legal Age&#x201d; module is complete), row 6 (defining when the &#x201c;Parent&#x201d; list specifically must be completed for the &#x201c;Legal Age&#x201d; to be complete), row 10 (defining when the entire &#x201c;Parent&#x201d; list is complete), and the rows 11-15 (defining when each field defined by the set of cells <b>318</b> must receive for the &#x201c;Parent&#x201d; list to be complete).</p><p id="p-0063" num="0062">In this depicted example, the fields that must receive runner input are defined input to a drop down menu. For instance, in response to a user selection, a cell in the set of cells <b>308</b>, set of cells <b>314</b>, or set of cells <b>320</b> may display a drop down menu of all available fields and lists to receive runner input (e.g., all fields defined by the set of cells <b>220</b> as described with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref> as well as lists defined in user interface <b>300</b>). In other embodiments, text input to cells corresponding to one or more of the available fields may be used to indicate which fields must receive runner input.</p><p id="p-0064" num="0063">Further, in this depicted example, there is no limit to the amount of times a certain field chosen from the available fields may be used in defining the completeness of the module or lists of the module. For example, the field &#x201c;Psign&#x201d; as indicated by builder input to cell 13C must receive runner input for the &#x201c;Parent&#x201d; list to be completed, however, the user could also define other lists that required Psign to receive runner input in order for the list to be completed.</p><heading id="h-0009" level="1">Indicators Labelling Fields in the User Interface</heading><p id="p-0065" num="0064">In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, rows reference fields of the module through input to cells in the set of cells <b>308</b>, set of cells <b>314</b>, and set of cells <b>320</b> may be considered complete subject to conditions defined in part by indicators input to cells of the set of cells <b>310</b>, set of cells <b>316</b>, and set of cells <b>322</b>, respectively. An indicator defines when a field referenced in a cell of the same row or a corresponding row must receive runner input based on whether a condition defined by the corresponding modifiers of the same row is satisfied. For example, the field &#x201c;Email&#x201d; as defined by cell 3B must receive runner input only in certain circumstances as defined by the indicator of cell 3C for the module to be considered complete.</p><p id="p-0066" num="0065">In this depicted example, each row contains an indicator (e.g., input to a corresponding cell in column C) corresponding to the field referenced by the builder input. Further, in this depicted example, the indicator of each cell in set of cells <b>310</b>, set of cells <b>316</b>, and set of cells <b>322</b>, is defined whether or not the cell receives input. For example, if a cell receives builder input, the indicator is defined by that input, but if the cell does not receive input, the indicator becomes a default indicator (a &#x201c;blank indicator&#x201d;) in this example. In other embodiments, rows may not require input to a cell defining an indicator corresponding to the referenced field. In another embodiment, the cells must receive input in order to define the indicator of the cell.</p><p id="p-0067" num="0066">In some embodiments, the indicator may be chosen from a set of indicators. For example, an indicator may be &#x201c;WHEN&#x201d; as shown by indicator of cell 6C, or may be &#x201c;MUST BE ASKED WHEN&#x201d; as shown by indicator of cell 3C. Additional examples of indicators in the set of indicators include &#x201c;MUST BE ASKED&#x201d;, &#x201c;is complete when&#x201d;, and a blank indicator.</p><p id="p-0068" num="0067">The &#x201c;WHEN&#x201d; indicator indicates that, for a module or list referencing a corresponding field to be considered complete, the referenced field requires runner input only &#x201c;WHEN&#x201d; the condition defined by corresponding modifiers is satisfied. Thus, in this depicted example, the &#x201c;Legal Age&#x201d; module will only be considered complete &#x201c;when&#x201d; the &#x201c;Parent&#x201d; list as defined by cell 6B receives required runner input, as long as the condition defined by the modifiers of cells 6D-6G is satisfied.</p><p id="p-0069" num="0068">The &#x201c;MUST BE ASKED WHEN&#x201d; indicator indicates that, for a module or list referencing a corresponding field to be complete, the referenced field must be presented to a user when the condition defined by the corresponding modifiers is satisfied. Thus, in the depicted example, the &#x201c;Legal Age&#x201d; module will only be considered complete when the &#x201c;Email&#x201d; field, as referenced by cell 3B, is displayed to a client user when the condition defined by the modifiers of cells 3D-3G is satisfied. In some embodiments, the corresponding field may be complete even when the referenced field does not receive any runner input from the user.</p><p id="p-0070" num="0069">The &#x201c;MUST BE ASKED (BLANK IS ALLOWED)&#x201d; indicator indicates that a referenced field must be displayed to a client user in all cases. The field corresponding to the indicator will be considered complete as long as the referenced field is displayed, regardless of whether the referenced field receives runner input.</p><p id="p-0071" num="0070">The &#x201c;is complete when&#x201d; indicator indicates that a module or list associated with the indicator is complete only when referenced field or fields receive input, as long as the conditions defined by the modifiers associated with those certain fields are satisfied. In some embodiments, a blank indicator may also indicate that a module or list associated with the indicator is complete only when referenced field or fields receive input, as long as the conditions defined by the modifiers associated with those certain fields are satisfied.</p><p id="p-0072" num="0071">In this depicted example, the blank indicator indicates that either no builder input was received at the cell or the builder input to the cell indicated a blank indicator. The blank indicator further indicates that the referenced field always requires input for the field, list, or module, regardless of any conditions defined by the modifiers associated with the certain field. In this depicted example, the &#x201c;Name&#x201d; field defined by cell 2B is associated with a blank indicator input to cell 2C, indicating that the &#x201c;Name&#x201d; field must always receive input for the &#x201c;Legal Age&#x201d; module to be complete, regardless of if any conditions are defined by the modifiers of cells 2D-2G. In some embodiments, if the modifiers of cells 2D-2G are not blank modifiers but the indicator of cell 2C is a blank indicator, the server may display an error message indicating that the user should adjust the current builder input.</p><p id="p-0073" num="0072">A field associated with a blank indicator may not require builder input for the entire module to be complete if the list referencing the field is not required to be complete. For instance, in this depicted example, the &#x201c;Parent&#x201d; list only requires certain input &#x201c;when&#x201d; the condition defined by modifiers input to cells 6D-6G is satisfied. Further, fields referenced by the &#x201c;Parent&#x201d; list are also associated with a blank indicator (e.g., in cell 11C). Thus, if the &#x201c;Parent&#x201d; list does not need to be considered complete for the module to be considered complete, the fields referenced by the list that are associated with the blank indicator may not require input for the &#x201c;Legal Age&#x201d; module to be complete.</p><p id="p-0074" num="0073">In some embodiments, a referenced field may be associated with two or more conditions. In those embodiments, the field may require runner input only if one condition of the two or more conditions is satisfied or all conditions of the two or more conditions are satisfied, as described below.</p><p id="p-0075" num="0074">A user may input an indicator to a cell through a selection to drop down menu. For instance, in response to a user selection, an indicator input to the set of cells <b>310</b>, set of cells <b>316</b>, or set of cells <b>322</b> may display a drop drown menu of all available indicators to receive builder input. In other embodiments, text input to the cells may be used to define which indicators are input to the cells.</p><p id="p-0076" num="0075">Further, in this depicted example, there is no limit to the amount of times a certain indicator may be used when defining the completeness of a module or lists of the module.</p><p id="p-0077" num="0076">While certain indicators may be shown and defined in this depicted example, those indicators are exemplary, and other indicators may be used when defining a completeness graph.</p><heading id="h-0010" level="1">Modifiers Defining Conditions for when Referenced Fields Must Receive Input</heading><p id="p-0078" num="0077">In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the builder input to cells in the set of cells <b>308</b>, set of cells <b>314</b>, and set of cells <b>320</b>, referenced fields that must be complete when conditions as defined by builder input to cells in the set of cells <b>312</b>, set of cells <b>318</b>, and set of cells <b>324</b> are satisfied. One or more modifiers input to cells define a condition of a row referencing a corresponding field. For example, the field &#x201c;Email&#x201d; as defined by cell 3B must be presented when the &#x201c;Name&#x201d; field equals &#x201c;UNKNOWN&#x201d; (as shown by modifiers in cells 3D-3F) in order for the module to be complete.</p><p id="p-0079" num="0078">In this depicted example, certain cells of each row receive certain modifiers as builder input corresponding to the field and the indicator of the row. Further, in this depicted example, the modifiers input to the cells of a row define a condition that, in conjunction with the indicator of the row, indicates when the field associated with the row must receive runner input. For example, the fields associated with the &#x201c;Parent&#x201d; list, as referenced by input to cell 6B, must only receive runner input &#x201c;when&#x201d;, as defined by the indicator of cell 6C, the condition of defined by modifiers of cells 6D-6G. However, when the condition defined by the modifiers is not satisfied, the indicator does not apply, and the referenced field or fields do not require runner input for the module to be considered complete. Further, in this depicted example, the condition defined by the input to cells 6D-6G shows that the indicator is only applicable when the value associated with the &#x201c;Age&#x201d; field of the module &#x201c;is less than&#x201d; &#x201c;18&#x201d;. Thus, &#x201c;when&#x201d; the value associated with the &#x201c;Age&#x201d; field is &#x201c;less than&#x201d; &#x201c;18&#x201d;, as defined by the modifiers of cells 6D-6G and the indicator of cell 6C, the field (e.g., the &#x201c;Parent&#x201d; list) of the module referenced by cell 6B will require input. Alternatively, &#x201c;when&#x201d; the value associated with the &#x201c;Age&#x201d; field is not &#x201c;less than&#x201d; &#x201c;18&#x201d;, the &#x201c;Parent&#x201d; list does not need to be complete for the module to be considered complete. In other embodiments, the values of specific modifiers may be defined in another interface and referenced in user interface <b>300</b>. For example, instead of the modifier &#x201c;18&#x201d; in cell 6F, the modifier &#x201c;AdultAge&#x201d; could be used in cell 6F, where &#x201c;AdultAge&#x201d; may be defined as a constant in user interface <b>200</b>.</p><p id="p-0080" num="0079">A modifier may be chosen from a set of modifiers. Further, there may be multiple types of modifiers.</p><p id="p-0081" num="0080">A first type of modifiers may correspond to fields of the module, such as fields referenced in set of cells <b>210</b> as described with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref> (e.g., the &#x201c;Age&#x201d; field as input to cell 6D). A second type of modifiers may correspond to operators, such as operators determining if one value &#x201c;IS LESS THAN&#x201d;, &#x201c;IS GREATER THAN&#x201d;, &#x201c;EQUALS&#x201d;, &#x201c;DOES NOT EQUAL&#x201d;, &#x201c;IS LESS THAN OR EQUAL TO&#x201d;, or &#x201c;IS GREATER THAN OR EQUAL TO&#x201d; another value. While the text describing the operators have been described above, the equivalent mathematical symbols may also be input as a modifier.</p><p id="p-0082" num="0081">A second type of modifiers may further include operators determining if one value is &#x201c;ONE OF&#x201d; an array of values, is &#x201c;NOT ONE OF&#x201d; an array of values, or is a blank or unknown value.</p><p id="p-0083" num="0082">A third type of modifier may define a value to which another value needs to be compared. In some embodiments, the value of the field may be defined by runner input to a referenced field. The value may be a numerical value, a string value, a Boolean value, or another type of value.</p><p id="p-0084" num="0083">A fourth type of modifier indicates whether certain conditions associated with the referenced field must be satisfied. For example, the fourth type of modifier may be &#x201c;and&#x201d;, as shown by modifier of cell 7G in this depicted example, indicating that both a first condition defined at least in part by builder input to cells 7D-7F &#x201c;and&#x201d; a second condition defined by the builder input to cells 8D-8F must be satisfied in order for the corresponding field to require input. In another example, the fourth type of modifier may be &#x201c;or&#x201d;, indicating that either a first condition &#x201c;or&#x201d; a second condition must be satisfied in order for the referenced field to require runner input in order to be considered complete. In this depicted embodiment, only two conditions are linked by the &#x201c;and&#x201d; modifier input to cell 7G. In other embodiments, any number of conditions may be related by the &#x201c;and&#x201d; or &#x201c;or&#x201d; modifiers. For example, a set of conditions within parentheses may be linked by &#x201c;and&#x201d; modifiers, and those conditions within the parenthesis may be separated from another condition or a set of conditions by &#x201c;or&#x201d; modifiers, so that only one set of conditions must be satisfied in order for the referenced field to be considered complete.</p><p id="p-0085" num="0084">Certain types of modifiers may further correspond to conditions defining when a referenced module or a list of fields is complete.</p><p id="p-0086" num="0085">For example, a fifth type of modifiers may include the &#x201c;all of&#x201d; modifier, which indicates that a module or list is complete when &#x201c;all of&#x201d; the listed fields corresponding to the module or list receive runner input, as long as the corresponding conditions associated with the fields are satisfied. In this depicted example, modifiers of cells 1D, 10D, and 17D show that all fields listed below require input subject to indicators and modifiers for the &#x201c;Legal Age&#x201d; module, the &#x201c;Parent&#x201d; list, and the &#x201c;Guardian&#x201d; list, respectively. Alternatively, the fifth type of modifiers may also include the &#x201c;any of&#x201d; modifier, which indicates that a module or list is complete when only one of the referenced fields corresponding to the module or list receives runner input, as long as the corresponding conditions are satisfied (as shown by cell 11F of <figref idref="DRAWINGS">FIG. <b>8</b></figref>).</p><p id="p-0087" num="0086">Additionally, a sixth type of modifier may also correspond to conditions defining when a referenced module or a list of fields is complete. For example, the sixth type of modifier may include the &#x201c;these are complete&#x201d; modifier, as shown in modifiers of cells 1E, 10E, and 17E, which indicates that a module or list is complete when all of the fields listed for the module or list receive input, as long as the corresponding conditions are satisfied. In some embodiments, a blank modifier in column E may also indicate that a module or list is complete when all of the fields listed for the module or list receive input, as long as the corresponding conditions are satisfied.</p><p id="p-0088" num="0087">While certain modifiers may be shown and defined in this depicted example, those modifiers are exemplary, and other modifiers may be used when defining a completeness graph.</p><p id="p-0089" num="0088">Thus, the combination of the indicators and the modifiers for each row defines when corresponding fields must receive input in order for certain modules or lists to be considered complete.</p><heading id="h-0011" level="1">Short-Circuit Cells</heading><p id="p-0090" num="0089">The builder input defining the completeness graph of a module may cause the module or list to &#x201c;short-circuit&#x201d;, meaning that the knowledge engine executing the completeness graph does not need to evaluate the rest of the runner input to fields of the module or list.</p><p id="p-0091" num="0090">In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, cell 5B displays &#x201c;THIS LIST WILL SHORT CIRCUIT&#x201d; subject to whether an associated condition is satisfied. Therefore, in the depicted example, the list will short-circuit if the condition defined by the modifiers is satisfied, and thus, if the knowledge engine evaluates row 5 and determines that the condition defined by modifiers 5D-5G is satisfied, the knowledge engine will short-circuit the module and consider it complete regardless of the required runner input of to the fields referenced by rows that have not yet been evaluated. Thus, if the knowledge engine short-circuits evaluating the module at row 5, the knowledge engine will not need to further evaluate the runner input to fields corresponding to fields referenced by cells 6B and 7B. In some embodiments, the knowledge engine may continue to evaluate the input to rows or lists that have not yet been evaluated, and provide results indicating if the row, list, or module would have been complete if the knowledge engine had not short-circuited. In other embodiments, the knowledge engine may stop evaluating the module or list and will not provide results based on the unevaluated lists, thus saving time and processing power because it has not been required to evaluate the extra input. For instance, in those embodiments, if the module itself short-circuits before a list is evaluated, the entire list may not be evaluated at all by the knowledge engine.</p><p id="p-0092" num="0091">In some embodiments, the rows with conditions associated with short-circuiting are evaluated before the other rows within a corresponding list or module. In those embodiments, if the list or module short-circuits because the condition is satisfied (or not satisfied), the knowledge engine does not evaluate any other rows of the list or module, and thus, saves times and processing power by evaluating fewer rows than normally required.</p><p id="p-0093" num="0092">Additionally, a seventh type of modifier may correspond to a condition defining that a referenced field must receive required runner input when a module or list short-circuits or does not short-circuit. For example, the condition defined by the modifier may only require that a first list receives input to corresponding fields if a second list has short-circuited, or alternatively, not short-circuited, for the module to be considered complete. Thus, the builder input may define conditions that make a first list or the module short-circuit based on if a second list has short-circuited.</p><p id="p-0094" num="0093">Thus, when a referenced field receives or does not receive certain runner input, the knowledge engine may short-circuit evaluating the module or list, thereby saving time and processing power by only evaluating a portion of the input when determining completeness of the input.</p><heading id="h-0012" level="1">Dead-Ends Occurring when a Field does not Receive Required Input</heading><p id="p-0095" num="0094">In some embodiments, when debugging the module or evaluating runner input, the knowledge engine may &#x201c;dead-end&#x201d; evaluating the module in response to the runner input. &#x201c;Dead-ending&#x201d; occurs when the knowledge engine has partially evaluated the runner input and determined that a module or list cannot be completed due to runner input to one field or a value associated with that field, regardless of runner input to other fields. For example, a dead-end may occur if input to a cell in a row references &#x201c;THIS LIST WILL ONLY BE COMPLETE&#x201d; when a corresponding condition of the row is satisfied, but the runner input does not satisfy the condition. Thus, no matter what other input may be required for the list or module to be complete, the list or module cannot be completed, and the list or module will dead-end.</p><p id="p-0096" num="0095">Therefore, in this depicted example, dead-ending would occur if runner input to the fields of the module caused the value associated with the &#x201c;Page&#x201d; field to be less than &#x201c;18&#x201d;. Since the condition of row 15, which is associated with the &#x201c;Page&#x201d; value, would not be satisfied, the &#x201c;Parent&#x201d; list could never be complete, regardless of runner input to the other referenced fields. Thus, the &#x201c;Parent&#x201d; list would dead-end. In some embodiments, when the knowledge engine determines that a list or module dead-ends, it does not evaluate the other referenced fields of the list or module, and returns a result indicating that it did not evaluate those other referenced fields.</p><p id="p-0097" num="0096">Thus, by inputting certain fields, indicators, and modifiers to the cells of the user interface <b>300</b>, a user may define the required runner input for a module to be completed. The combination of the indicators and the modifiers may define conditions that determine exactly when fields require runner input or do not require runner input, when a list or module will short-circuit, and when a list or module may dead-end. Further, lists of fields may be defined by the user, which may have associated conditions of their own defining when the lists need to be receive required runner input. After receiving all of the builder input defining the completeness graph, the server may create an artifact based on the builder input and run the artifact against the knowledge engine when determining if the runner input completes the module.</p><heading id="h-0013" level="1">Debugging a Module Based on the Fields, Indicators, and Modifiers and Debugging Input</heading><p id="p-0098" num="0097">With the user interfaces associated with the module, a user may input (1) builder input defining the calculation graph, such as the input to user interface <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, (2) builder input defining the completeness graph, such as the input to user interface <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and (3) runner input used to test the completeness of the module based on the runner input and the builder input defining the completeness graph, such as described below with respect to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>8</b></figref>. The runner input used to test the completeness graph may be input in a user interface for defining the calculation graph, such as user interface <b>200</b>, a user interface for defining the completeness graph, such as user interface <b>300</b>, or a separate user interface. Runner input may be considered any input to a field of a module that is used or referenced when executing one or more operations of the module. In some embodiments, the runner input may be input to a user interface associated with the module (e.g., user interface <b>200</b> or user interface <b>300</b>) for debugging the module. In other embodiments, the runner input may be input to a user interface displayed to a user on a client device.</p><p id="p-0099" num="0098">Based on the builder input defining the completeness graph and the runner input to the fields of the module, a server, such as server <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, may create an artifact to execute against a knowledge engine, such as knowledge engine <b>120</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The artifact may then be executed against the knowledge engine, which may return a result based on the completeness of the module with respect to the builder input defining the completeness graph and runner input, as described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0100" num="0099">Based on the result of the completeness of the builder input, the server may display one or more symbols associated with the completeness of one or more the rows in the user interface by determining if a referenced field, list, or module is complete based on if runner input satisfied an associated condition. Each symbol may indicate one or more aspects associated with the completeness of a tuple of input.</p><p id="p-0101" num="0100">In order to communicate the aspects associated with the completeness of the module, the server may display the symbols (e.g., such as symbols <b>446</b><i>a</i>, <b>446</b><i>c</i>-<i>e</i>, <b>446</b><i>a</i>, and <b>450</b> and sets of symbols <b>446</b><i>b </i>and <b>448</b><i>b </i>of <figref idref="DRAWINGS">FIG. <b>4</b></figref>) in the user interface that received builder input with extra rows and columns for displaying the symbols and runner input. For example, user interface <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, which received the builder input, may display extra rows and columns with the symbols and runner input in order to show the one or more aspects that were determined. Thus, the symbols and runner input may be displayed in the same user interface that received the builder input (e.g., as described with respect to user interface <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, user interface <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, user interface <b>600</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>, user interface <b>700</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, and user interface <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). The rows may further be highlighted with a color of a plurality of colors, where the highlighted color of the row is associated with the symbol displayed for the row.</p><p id="p-0102" num="0101">In some cases, the extra rows and columns with the symbols and runner input may be displayed in response to a user request received by the server. Further, in those cases, the extra rows and columns may be hidden in response to another user request received at the server. In other embodiments, the symbols and runner input may be displayed in an entirely separate user interface or user interface view.</p><p id="p-0103" num="0102">As noted above, the user interface may display one or more symbols associated with the completeness of the one or more tuples, which indicate the completeness of an associated field, list, or module. In the embodiments described below, the tuples are rows of cells of a user interface. In other embodiments, the tuples may be a different type of container, such as a column of cells, a box of cells, or another arrangement of cells. In another embodiment, the tuples may not include cells and may comprise certain a graphical arrangement. In other embodiments, the tuples may be defined in a text interface.</p><p id="p-0104" num="0103">The symbols may further indicate one or more aspects of corresponding fields, lists, or modules based on the builder input and the input defining the completeness graph, and may be displayed next to a row associated with that aspect and corresponding field, list, or module. For example, the symbols may indicate that the runner input to the field referenced by the row is complete because the runner input satisfies a condition of the row, as described with respect to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>8</b></figref>, or may indicate that a row is not complete because the runner input to a field reference in the row does not satisfy the condition of the row, as described below with respect to <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>8</b></figref>.</p><p id="p-0105" num="0104">As another example, the symbols may indicate whether a module or list referenced by the row has short-circuited based on whether the runner input associated with the module or list satisfies the condition of the row, as described below with respect to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>8</b></figref>, and may also indicate if a first row is considered complete due to a short-circuit regardless of runner input to a referenced field, as described further below with respect to <figref idref="DRAWINGS">FIG. <b>6</b></figref>. The symbols may also indicate whether a row is complete based on whether a field, list, or module was not evaluated due to a dead-end, as described with respect to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, or may indicate whether a first row is considered complete because the row did not need to be evaluated based on a satisfied condition of a second row, as described further below with respect to <figref idref="DRAWINGS">FIGS. <b>5</b> and <b>8</b></figref>.</p><p id="p-0106" num="0105">The server may analyze the result returned by the knowledge engine and determine symbols to display based on the completeness of the runner input and the one or more aspects in order to help the user determine whether to adjust the builder input, the runner input, or both. In some cases, after displaying the symbols indicating the completeness of the module, the server may receive new builder input or new runner input. In response to a user request received through an interface element, the server may generate an artifact based on the new input and receive a new result from the knowledge engine, and may update what symbols are displayed in the interface. It should further be noted that the aspects determined and symbols as described with respect to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>8</b></figref> are exemplary, and other aspects and symbols may be determined and shown.</p><p id="p-0107" num="0106">Even further, in order to determine if the runner input completes the fields, lists, or module, the server may use an API (e.g., an API of APIs <b>140</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) in order to provide the artifact generated based on the builder input and runner input to the knowledge engine. An API may further return the result indicating the completeness and one or more aspects from the knowledge engine to the server.</p><heading id="h-0014" level="1">Example Debugging a Module that Has Received the Required Input</heading><p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts an example user interface <b>400</b> displaying one or more symbols based on the results of executing an artifact based on the builder input defining a completeness graph, such as the builder input to user interface <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and runner input to the fields of the module, that may be input to a user interface such as user interface <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. For example, the runner input may be based on input data to the set of cells <b>212</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0109" num="0108">In this depicted example, based on the result of the completeness of the builder input returned by the knowledge engine, the user interface <b>400</b> displays one or more symbols (e.g., such as symbols <b>446</b><i>a</i>, <b>446</b><i>c</i>-<i>e</i>, <b>446</b><i>a</i>, and <b>450</b> and sets of symbols <b>446</b><i>b </i>and <b>448</b><i>b</i>) associated with the completeness of one or more rows 1-25. The rows of user interface <b>400</b> may correspond to the rows of other user interfaces, such as user interface <b>200</b> and/or user interface <b>300</b>. In this depicted example, the row 5 references data from row 2 of user interface <b>200</b>, where the field of the module (e.g., the &#x201c;Name&#x201d; field) is defined, and row 2 of user interface <b>300</b> where the completeness requirements for the field are defined.</p><p id="p-0110" num="0109">Additionally, some rows of user interface <b>400</b> refer to specific lists of the module that are defined in another user interface, such as user interface <b>300</b>. In this depicted example, row 4 refers to the &#x201c;Legal Age&#x201d; module defined by row 1 of user interface <b>300</b> (e.g., module row <b>302</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>), and further includes the corresponding indicators and modifiers. Additionally, row 13 refers to the &#x201c;Parent&#x201d; list defined by row 10 of user interface <b>300</b> (e.g., list row <b>304</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>), and further includes the corresponding indicators and modifiers. Even further, row 20 refers to the &#x201c;Guardian&#x201d; list defined by row 17 of user interface <b>300</b> (e.g., list row <b>306</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>), and further includes the corresponding indicators and modifiers.</p><p id="p-0111" num="0110">The symbols <b>446</b><i>a</i>, <b>446</b><i>c</i>-<i>e</i>, <b>446</b><i>a</i>, and <b>450</b> and sets of symbols <b>446</b><i>b </i>and <b>448</b><i>b </i>are determined by the server based on the result of executing an artifact against a knowledge engine, such as knowledge engine <b>120</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, where the artifact is based on the completeness of runner input (e.g., the input data to set of cells <b>220</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>) as defined by the builder input defining the completeness graph (e.g., the input data to user interface <b>300</b>). For example, the server may determine the symbols based on a table mapping portions of a result to certain symbols. Thus, the knowledge engine checks to see if the one more fields, lists, and modules referenced by the rows are complete by executing the artifact. In this depicted example, the knowledge engine would start by checking to see if the &#x201c;Legal Age&#x201d; module of as referenced by row 4 is complete by checking if the runner input satisfies the conditions of the rows 5-11. In doing so, the knowledge engine may check if the referenced fields and lists associated with the module, such as the fields and lists referenced by the builder input to set of cells <b>408</b>, are complete. In some cases, this requires the knowledge engine to evaluate a list with respect to more than one condition associated with the list. Thus, in this depicted example, the &#x201c;Parent&#x201d; list of row 9 only needs to be evaluated when the runner input causes the &#x201c;Age&#x201d; value to be &#x201c;less than&#x201d; &#x201c;18&#x201d;; however, if the runner input causes the &#x201c;Age&#x201d; value to be &#x201c;less than&#x201d; &#x201c;18&#x201d;, the knowledge engine must evaluate the completeness of the &#x201c;Parent&#x201d; list. In those cases, the &#x201c;Parent&#x201d; list &#x201c;is complete when&#x201d; &#x201c;all of&#x201d; its referenced fields (e.g., as defined by set of cells <b>418</b>) receive runner input, as long as the conditions defined by the indicators (e.g., as defined by set of cells <b>420</b>) and modifiers (e.g., as defined by set of cells <b>422</b>) that are associated with the rows are satisfied.</p><p id="p-0112" num="0111">In this depicted example, the symbol <b>446</b><i>a </i>indicates that the runner input to the fields associated with the rows 5-11 contains the required input because the runner input satisfies certain condition of the rows 5-11, and therefore, each row is considered complete. Thus, the server determined that, based on the result of the knowledge engine, the &#x201c;Legal Age&#x201d; module and the &#x201c;Parent&#x201d; list were complete because all associated fields received required input based on the associated conditions.</p><p id="p-0113" num="0112">For example, based on the result, the server determined the &#x201c;Legal Age&#x201d; module received all required input at least in part because the &#x201c;Name&#x201d;, &#x201c;Email&#x201d;, and &#x201c;Bday&#x201d; fields of the module received the required input from the builder data that is indicated by set of symbols <b>446</b><i>b</i>. The builder input data to the &#x201c;Name&#x201d; (e.g., &#x201c;John Smith&#x201d;), &#x201c;Email&#x201d; (e.g., &#x201c;jsmith@intuit.com&#x201d;), and &#x201c;Bday&#x201d; (e.g., &#x201c;4/20/2003&#x201d;) fields is further displayed in set of cells <b>416</b> in order to show the user what input was used to determine the completeness of those fields. In particular, the &#x201c;Name&#x201d; field and the &#x201c;Bday&#x201d; field are associated with a checkmark symbol because the runner input received satisfied the condition associated with the row (e.g., the conditions of rows 5 and 7 are associated with blank indicators and modifiers, meaning that the &#x201c;Name&#x201d; and &#x201c;Bday&#x201d; fields must receive runner input under all circumstances). The &#x201c;Email&#x201d; field is instead associated with the triangular symbol because the condition associated with the row not satisfied, and thus, the &#x201c;Email&#x201d; field did not need to receive runner input, and even did not need to be presented to the user. In other embodiments, the &#x201c;Email&#x201d; may also be associated with the checkmark symbol, as it still received input and is considered complete, even though the associated condition was not satisfied. Thus, each of rows 5-7 are considered complete, and the server displays set of symbols <b>446</b><i>b </i>indicating the completeness of those rows. If a row was not considered complete, the server would display an &#x201c;X&#x201d; symbol for that row indicating that the row was not complete.</p><p id="p-0114" num="0113">After determining the &#x201c;Name&#x201d;, &#x201c;Email&#x201d;, and &#x201c;Bday&#x201d; fields are considered complete, the server determines that the &#x201c;Legal Age&#x201d; module does not short-circuit based on the result because the &#x201c;Age&#x201d; value associated with the runner input (e.g., &#x201c;17.97&#x201d;) is not &#x201c;less than&#x201d; &#x201c;13&#x201d;. Thus, the server displays symbol <b>446</b><i>c </i>based on that determination, which is a single rectangle representing that the module did not short-circuit based on the condition of row 8.</p><p id="p-0115" num="0114">Next, the server determines whether the &#x201c;Parent&#x201d; list, as shown in cell 9D, needs to receive input based on the result. Thus, since the &#x201c;Age&#x201d; value associated with the runner input (e.g., <b>17</b>.<b>97</b> as shown in cell 9J) is &#x201c;less than&#x201d; &#x201c;18&#x201d; (as defined by the modifiers of cells 9F-<b>9</b>I), the &#x201c;Parent&#x201d; list requires certain input. Therefore, based on the result, the server determines one or more aspects about the &#x201c;Parent&#x201d; list in order to determine whether it has received the required input.</p><p id="p-0116" num="0115">For example, a determined aspect may be that the &#x201c;Parent&#x201d; list must receive input for the &#x201c;Legal Age&#x201d; module to be complete, as shown by row 9. The required input for the &#x201c;Parent&#x201d; list is defined by rows 13-18; thus, in order for the &#x201c;Parent&#x201d; list to be considered complete, &#x201c;all of&#x201d; (as shown by the modifier input to cell 13F) the fields referenced in set of cells <b>418</b> must receive input based on whether the condition of the corresponding row is satisfied, and additionally, the condition associated with row 13 must also be satisfied. Based on the result, the server can determine that the &#x201c;Pname&#x201d;, &#x201c;Pemail&#x201d;, &#x201c;Psign&#x201d;, and &#x201c;Pday&#x201d; fields all received runner input (e.g., as shown in cells <b>426</b>). Further, the server may also determine that the conditions for each row of rows 13-17 have been satisfied because the rows only contained blank indicators and modifiers, meaning that any input to the field would satisfy the condition. Lastly, the server may further determine that the list may still be complete because the &#x201c;Page&#x201d; value is not less than 18, as indicated by the condition of row 18. Thus, the server displays set of symbols <b>448</b><i>b </i>to indicate that the rows 14-18 have received the required input. Additionally, based on the result, the server determines that row 13 is complete based on the runner input satisfying the condition associated with row 13.</p><p id="p-0117" num="0116">After determining that the &#x201c;Parent&#x201d; list has received the required input, the server determines whether the &#x201c;Guardian&#x201d; list needs to receive input based on the result and displays an associated symbol. Since the &#x201c;Age&#x201d; value associated with the runner input (e.g., &#x201c;17.97&#x201d; as shown by cell 10K) is &#x201c;less than&#x201d; &#x201c;18&#x201d;, but the &#x201c;Pname&#x201d; field received runner input and therefore is not &#x201c;UNKNOWN&#x201d;, the server determines that the &#x201c;Guardian&#x201d; list does not need to receive input because at least one of the conditions associated with row 10 was not satisfied. Thus, the server displays symbol <b>446</b><i>e </i>(e.g., a triangular symbol) to denote an aspect indicating that the &#x201c;Guardian&#x201d; list was complete, regardless of any input to the fields of the &#x201c;Guardian&#x201d; list.</p><p id="p-0118" num="0117">Further, while the user interface <b>400</b> contains the list defining what fields must receive input for the &#x201c;Guardian&#x201d; list to be complete, the server determines an aspect based on the result that the &#x201c;Guardian&#x201d; list does not need to be analyzed because one of the conditions associated with row 10 was not satisfied. Thus, in this depicted example, the server displays symbol <b>450</b> (e.g., a triangular symbol) corresponding to row 20 in order to denote that the &#x201c;Guardian&#x201d; list is considered complete because at least one of the conditions associated with the &#x201c;Guardian&#x201d; list was not satisfied (e.g., and thus, the referenced fields of the &#x201c;Guardian&#x201d; list did not need to receive input in order to be considered complete). In other embodiments, the server may further display symbols, such as an &#x201c;?&#x201d;, for each row of rows 21-25 denoting that each specific field within the &#x201c;Guardian&#x201d; list was not evaluated, and thus, the server did not determine whether the fields of the row required runner input based on their associated conditions.</p><p id="p-0119" num="0118">Thus, based on the result returned by the knowledge engine and the aspects determined by the server, the server displays symbol <b>446</b><i>a </i>indicating the completeness of the module, including the completeness of the lists and fields within the module.</p><p id="p-0120" num="0119">In this depicted embodiment, the knowledge engine evaluates the completeness of the rows in the order that the rows are shown (e.g., from top to bottom). In other embodiments, the knowledge engine evaluates and rows, in a specific order defined in another user interface, such as user interface <b>300</b>. For example, in that embodiment, the knowledge engine may wait to evaluate a specific field or list until a separate list has been evaluated (e.g., the knowledge engine may evaluate row 9 on whether the &#x201c;Parent&#x201d; list should be evaluated, and subsequently, may evaluate rows 13-18 to determine if the &#x201c;Parent&#x201d; list is complete, before evaluating row 10 on whether the &#x201c;Guardian&#x201d; list should be evaluated). Thus, the result for each of those embodiments may be different, and may cause the server to display one or more extra symbols than are shown in the depicted embodiment. In yet another embodiment, the knowledge engine evaluates the completeness of rows in an arbitrary order.</p><p id="p-0121" num="0120">Further, in this depicted embodiment, certain conditions may define a constant that the value of a field may be compared to, such as &#x201c;UNKNOWN&#x201d; of cell 6H or 11H, &#x201c;13&#x201d; of cell 8H, and &#x201c;18&#x201d; of cell 9H or 10H. In other embodiments, instead of constants, the input to those cells may reference fields. In those embodiments, the knowledge engine will use the value of the referenced field when evaluating the condition of that row, and will indicate that in the result.</p><p id="p-0122" num="0121"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts an example user interface <b>500</b> displaying one or more symbols based on the results of executing an artifact based on the builder input defining a completeness graph of a module and runner input to the fields of the module. For example, input to user interface <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> may define the completeness graph, while builder input may be input to user interface <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. In this depicted example, user interface <b>500</b> is based on the builder input to user interface <b>300</b> as well as builder input defining an extra &#x201c;Address&#x201d; list defined by fields of the module, as shown by row 12 and rows 28-31. As similarly discussed with respect to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the server generates an artifact based on the builder input and the runner input, which the knowledge engine may execute to return a result to the server indicating one or more aspects of the rows defined by the builder input.</p><p id="p-0123" num="0122">As shown in this depicted example, in order for the module to be considered complete, (1) the &#x201c;Name&#x201d;, &#x201c;Email&#x201d;, and &#x201c;Bday&#x201d; fields must be considered complete based on the conditions of rows 5-7, and (2) the &#x201c;Parent&#x201d; list, the &#x201c;Guardian&#x201d; list, and the &#x201c;Address&#x201d; list must receive required input in order to be considered complete if the module does not short-circuit.</p><p id="p-0124" num="0123">As shown by the builder input data in set of cells <b>518</b>, the &#x201c;Name&#x201d;, &#x201c;Email&#x201d;, and &#x201c;Bday&#x201d; fields received runner input, and thus the server determines that the fields are complete based on the result returned by the knowledge engine. In this depicted example, the server displays a checkmark symbol for both the &#x201c;Name&#x201d; and the &#x201c;Bday&#x201d; field because the associated conditions are satisfied, while the server displays the triangular symbol because the associated condition is not satisfied and thus the &#x201c;Email&#x201d; field did not need to receive input. Since the fields are complete, the server determines the set of symbols <b>550</b><i>b </i>corresponding to rows 5-7, indicating the fields of the rows received all required input, and thus, the rows are considered complete.</p><p id="p-0125" num="0124">Next, the server determines a symbol for the row 8 based on if the module short-circuited or not. Based on the result, the server determines that the module did not short-circuit because the &#x201c;Age&#x201d; value associated with the builder input (e.g., <b>18</b>) is not &#x201c;less than&#x201d; &#x201c;13&#x201d;, and therefore, does not satisfy the condition defined by the indicators and modifiers of row 8. Thus, the server determines the single rectangle as the symbol to display for row 8, and displays symbol <b>550</b><i>c </i>to indicate the module did not short-circuit based on the evaluation of that row.</p><p id="p-0126" num="0125">The server further evaluates whether or not the &#x201c;Parent&#x201d; and &#x201c;Guardian&#x201d; lists are considered complete based on the result. Based on the result, the server determines that the &#x201c;Parent&#x201d; list does not need to receive input in order to be considered complete because the &#x201c;Age&#x201d; value is associated with the runner input is not &#x201c;less than&#x201d; &#x201c;18&#x201d;, and therefore, the condition of row 9 is not satisfied. Thus, since the row references a list that is complete regardless of whether it is evaluated, the server displays the triangular symbol <b>550</b><i>d </i>to denote that the &#x201c;Parent&#x201d; list is complete regardless of whether it received input. Further, the server also displays question mark symbol <b>552</b><i>a </i>corresponding to row 14, which defines that the &#x201c;Parent&#x201d; list is complete subject to the &#x201c;Pname&#x201d;, &#x201c;Pemail&#x201d;, &#x201c;Psign&#x201d;, and &#x201c;Pday&#x201d; fields receiving input, in order to further show that the &#x201c;Parent&#x201d; list does not need to receive input in order to be considered complete because the condition associated with row 14 was not satisfied. Thus, even though the builder input did not receive runner input to the &#x201c;Pname&#x201d;, &#x201c;Pemail&#x201d;, &#x201c;Psign&#x201d;, and &#x201c;Pday&#x201d; fields (as indicated by set of cells <b>528</b>, where the runner input for each field is &#x201c;UNKNOWN&#x201d;) and the server displays set of symbols <b>552</b><i>b </i>to denote that those fields did not receive runner input, the &#x201c;Parent&#x201d; list is still considered complete.</p><p id="p-0127" num="0126">Additionally, based on the result, the server determines that the &#x201c;Guardian&#x201d; list does not need to receive input in order to be considered complete because the &#x201c;Age&#x201d; value associated with the runner input is not &#x201c;less than&#x201d; &#x201c;18&#x201d;, and therefore, does not satisfy the conditions of rows 10 and 11. Thus, since the row references a list that is complete regardless of whether it is evaluated, the server displays the triangular symbol <b>550</b><i>e </i>to denote that the &#x201c;Guardian&#x201d; list is complete regardless of whether it received input. Further, the server displays triangular symbol <b>554</b><i>a </i>to indicate the condition of row 11 was already determined to not be satisfied, and the &#x201c;Guardian&#x201d; list only needed to receive input to be considered complete if both conditions were satisfied. The server also displays questions mark symbol <b>554</b><i>a </i>corresponding to row 21, where row 21 defines that the &#x201c;Guardian&#x201d; list is complete subject to the &#x201c;Gname&#x201d;, &#x201c;Gemail&#x201d;, &#x201c;Gsign&#x201d;, and &#x201c;Gday&#x201d; fields receiving input, in order to further show that the &#x201c;Guardian&#x201d; list does not need to be evaluated because it does not need to receive input in order to considered complete since the condition associated with row 11 was not satisfied. Thus, even though the runner input did not contain input to the &#x201c;Gname&#x201d;, &#x201c;Gemail&#x201d;, &#x201c;Gsign&#x201d;, and &#x201c;Gday&#x201d; fields (as indicated by set of cells <b>538</b>, where the runner input for each field is &#x201c;UNKNOWN&#x201d;) and the server displays set of symbols <b>554</b><i>b </i>to denote that those fields did not receive input, the &#x201c;Guardian&#x201d; list is still considered complete.</p><p id="p-0128" num="0127">Since the &#x201c;Parent&#x201d; list and &#x201c;Guardian&#x201d; list were determined to be complete regardless of receiving input, and thus do not affect the completeness of the module, the module only further needs to receive input to the &#x201c;Address&#x201d; list as indicated by row 12, based on the condition of row 12. Since the indicators and modifiers of row 12 are blank indicators, the &#x201c;Address&#x201d; list must always be evaluated unless the module either short-circuits or dead-ends before evaluating the address list in order for the condition to be satisfied.</p><p id="p-0129" num="0128">As the server determines, based on the result, that the module neither short-circuited nor dead-ended (e.g., because the condition associated with row 8 was not satisfied), the server also evaluates whether the &#x201c;Address&#x201d; list is considered complete. Based on the result, the server determines that certain fields referenced by the &#x201c;Address&#x201d; list require input in order to be considered complete because the indicators and modifiers of row 12 are blank, indicating that there is no condition for which the &#x201c;Address&#x201d; list does not require runner input. Thus, the server further evaluates, based on the result, whether the fields referenced in rows 29-31 received the required runner input and displays symbols set of symbols <b>556</b><i>b </i>indicating that the rows are complete since they have received the required input based on associated conditions. In addition, since all required input for the &#x201c;Address&#x201d; list was received, the server further displays symbol <b>550</b><i>g </i>corresponding to row 12 and symbol <b>556</b><i>a </i>corresponding to list row <b>508</b> to indicate that the &#x201c;Address&#x201d; list is complete.</p><p id="p-0130" num="0129">Thus, as indicated by symbol <b>550</b><i>a</i>, the &#x201c;Legal Age&#x201d; module is considered complete because it has received all required runner input. More specifically, the server determined, based on the result, that the &#x201c;Name&#x201d;, &#x201c;Email&#x201d;, and &#x201c;Bday&#x201d; fields all received the required input, as indicated by set of symbols <b>550</b><i>b</i>. Further, the server determined, based on the result, that the module did not short-circuit based on the condition associated with row 8, as indicated by symbol <b>550</b><i>c</i>. The server also determined, based on the result, that the module did not need to evaluate either the &#x201c;Parent&#x201d; list or the &#x201c;Guardian&#x201d; list because they would be complete regardless of whether they received input, and displayed symbols <b>550</b><i>d </i>and <b>550</b><i>e</i>. Lastly, the server determined, based on the result, that the &#x201c;Address&#x201d; list received the required input, as indicated by symbol <b>550</b><i>g. </i></p><heading id="h-0015" level="1">Example of Debugging a Module where the Runner Input Caused a Short-Circuit</heading><p id="p-0131" num="0130"><figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts an example user interface <b>600</b> displaying one or more symbols <b>608</b><i>a</i>, <b>608</b><i>c</i>-<i>e</i>, <b>610</b><i>a</i>, and <b>612</b><i>a</i>, and sets of symbols <b>608</b><i>b</i>, <b>610</b><i>b</i>, and <b>612</b><i>b </i>based on the results of executing an artifact based on the builder input defining a completeness graph, such as the input to user interface <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and runner input to the fields of the module, that may be input to a user interface such as user interface <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0132" num="0131">In this depicted example, as similarly described with respect to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the &#x201c;Name&#x201d;, &#x201c;Email&#x201d;, and &#x201c;Bday&#x201d; fields of rows 5-7 received the required input as shown by the runner input in set of cells <b>614</b>. Thus, based on the result returned by the knowledge engine, the server determines the fields referenced by rows 5-7 are complete and displays set of symbols <b>608</b><i>b. </i></p><p id="p-0133" num="0132">Next, as similarly described with respect to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the server determines a symbol for the row 8 based on if the module short-circuited or not. Based on the result, the server determines that the module did short-circuit because the &#x201c;Age&#x201d; value associated with the builder input (e.g., &#x201c;10&#x201d; as shown in cell 8J) is &#x201c;less than&#x201d; &#x201c;13&#x201d;, and therefore, satisfies the condition of row 8. Thus, the server determines and displays phi CO symbols <b>608</b><i>a </i>and <b>608</b><i>c </i>to indicate the module short-circuited.</p><p id="p-0134" num="0133">As described above with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, when a module short-circuits, the remaining rows of the module that have not been evaluated do not need to receive input in order for the module to be considered complete. Thus, in the depicted example, the server determines the &#x201c;Parent&#x201d; list and the &#x201c;Guardian&#x201d; list do not need to receive input in order for the module to be considered complete and displays the double rectangular symbols <b>608</b><i>d </i>and <b>608</b><i>e </i>to indicate that the lists did not need to be evaluated. Further, in this depicted example, the server displays symbol <b>610</b><i>a </i>and symbol <b>612</b><i>a </i>corresponding to rows 13 and row 20, respectively, to indicate that the lists associated rows did not have to be evaluated.</p><p id="p-0135" num="0134">In this depicted embodiment, the set of rows 14-18 and set of rows 21-25 associated with the &#x201c;Parent&#x201d; list and &#x201c;Guardian&#x201d; list, respectively, were evaluated even though they were not required to be evaluated. In other embodiments, the server may not evaluate set of rows 14-18 and set of rows 21-25, which may reduce processing requirements and save time, and thus, power, used by the server.</p><heading id="h-0016" level="1">Example of Debugging a Module where the Runner Input Caused a Dead-End</heading><p id="p-0136" num="0135"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts an example user interface <b>700</b> displaying one or more symbols <b>712</b><i>a</i>, <b>712</b><i>c</i>, <b>714</b>, and <b>716</b>, and sets of symbols <b>712</b><i>b </i>and <b>712</b><i>d </i>based on the results of executing an artifact based on the builder input defining a completeness graph of a module and runner input to the fields of the module. For example, input to user interface <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> may define the completeness graph, while runner input may be input to user interface <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0137" num="0136">As shown in this depicted example and as similarly described with respect to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>5</b></figref>, in order for the module to be considered complete, (1) the &#x201c;Name&#x201d; and &#x201c;Email&#x201d; fields must receive required input subject to the indicators and modifiers of rows 5-6 if the module does not short-circuit, (2) the &#x201c;Age&#x201d; value must not equal &#x201c;UNKNOWN&#x201d; as defined by the condition of row 7 if the module does not short-circuit, and (3) the &#x201c;Parent&#x201d; list and the &#x201c;Guardian&#x201d; list must be considered complete if the module does not short-circuit.</p><p id="p-0138" num="0137">In this depicted example, as similarly described with respect to <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>6</b></figref>, the &#x201c;Name&#x201d; and &#x201c;Email&#x201d; fields referenced by rows 5-6 received the required input as shown by the builder input in set of cells <b>710</b>. Thus, the server determines and displays set of symbols <b>712</b><i>b </i>indicating that the &#x201c;Name&#x201d; and &#x201c;Email&#x201d; fields are complete.</p><p id="p-0139" num="0138">However, unlike as described with respect to <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>6</b></figref>, the &#x201c;Bday&#x201d; field did not receive input, and thus, the &#x201c;Age&#x201d; value associated with the runner input cannot be calculated, making it &#x201c;UNKNOWN&#x201d;. Thus, the knowledge engine generates a result indicating that the &#x201c;Age&#x201d; value is unknown, and based on the result, the server displays the &#x201c;UNKNOWN&#x201d; value of cell 7B in set of cells <b>710</b>. Since the row 7 does not reference a field in cell 7D, and instead indicates &#x201c;THIS LIST WILL BE COMPLETE ONLY&#x201d;, the module dead-ends if the associated condition of the row is not satisfied. Since the &#x201c;Age&#x201d; value associated with the runner input equals &#x201c;UNKNOWN&#x201d;, the condition is not satisfied. Thus, the server determines that the module dead-ended and displays symbol <b>712</b><i>c </i>(e.g., the &#x201c;X&#x201d; symbol) to indicate that the module dead-ended because the condition of row 7 was not satisfied.</p><p id="p-0140" num="0139">In addition, since the module dead-ended and cannot be completed based on the received runner input, the server also determines that the &#x201c;Legal Age&#x201d; module is incomplete, and displays symbol skull-and-crossbones symbol <b>712</b><i>a </i>in order to indicate that the module is incomplete due to a dead end.</p><p id="p-0141" num="0140">In this depicted example, after determining that the module is incomplete, the server does not evaluate the remaining rows 8-10 and displays set of symbols <b>712</b><i>d </i>as well as symbols <b>714</b> and <b>716</b> (e.g., &#x201c;?&#x201d; symbols) in order to indicate that those rows were not evaluated due to the dead-end caused by row 7. In other embodiments, the server may still evaluate the rows that did not need to be evaluated due to the dead-end, and may still display symbols indicating whether the fields or lists would have been complete if the module had not dead-ended.</p><p id="p-0142" num="0141">Thus, in this depicted example, as indicated by symbol <b>712</b><i>a</i>, the &#x201c;Legal Age&#x201d; module has not received all required input and is considered incomplete. More specifically, since the &#x201c;Age&#x201d; value associated with the runner input did not satisfy the condition of row 7 and the module dead-ended, as indicated by symbol <b>712</b><i>c</i>, the &#x201c;Legal Age&#x201d; module could not be completed.</p><heading id="h-0017" level="1">Example of Debugging a Module where the Builder Input Includes an &#x201c;Any Of&#x201d; Modifier</heading><p id="p-0143" num="0142"><figref idref="DRAWINGS">FIG. <b>8</b></figref> depicts an example user interface <b>800</b> displaying one or more symbols <b>850</b><i>a</i>, <b>852</b><i>a</i>, <b>854</b><i>a</i>, and <b>856</b><i>a</i>, and sets of symbols <b>850</b><i>b</i>, <b>852</b><i>b</i>, <b>854</b><i>b</i>, and <b>856</b><i>b </i>based on the results of executing an artifact based on the builder input defining a completeness graph, such as the input to user interface <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and runner input to the fields of the module, that may be input to a user interface such as user interface <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. In this depicted example, user interface <b>800</b> is based on the input to user interface <b>300</b> where the &#x201c;Legal Age&#x201d; module requires the &#x201c;Adult&#x201d; list to be completed instead of both the &#x201c;Parent&#x201d; list and the &#x201c;Guardian&#x201d; list to be completed, based on whether associated conditions are satisfied.</p><p id="p-0144" num="0143">As shown in this depicted example, in order for the module to be considered complete, (1) the &#x201c;Name&#x201d;, &#x201c;Email&#x201d;, and &#x201c;Bday&#x201d; fields must receive required input subject to the indicators and modifiers of rows 5-7, and (2) the &#x201c;Adult&#x201d; list must be considered complete if the module does not short-circuit. In order for the &#x201c;Adult&#x201d; list to be considered complete at least one of the &#x201c;Parent&#x201d; list or the &#x201c;Guardian&#x201d; needs to be considered complete, as shown by the indicator of cell 11E and modifier of cell 11F (e.g., &#x201c;any of&#x201d;).</p><p id="p-0145" num="0144">As shown by the builder input to cells <b>818</b>, the &#x201c;Name&#x201d;, &#x201c;Email&#x201d;, and &#x201c;Bday&#x201d; fields received builder input, and thus the server determines that the fields are complete and displays the appropriate symbols. Further, based on the result, the server displays the appropriate symbol after determining that the module did not short-circuit because the &#x201c;Age&#x201d; value associated with the builder input (e.g., <b>18</b>) is not &#x201c;less than&#x201d; &#x201c;13&#x201d;, and therefore, does not satisfy the condition associated with the row.</p><p id="p-0146" num="0145">The server then evaluates the &#x201c;Adult&#x201d; list based on the result returned by the knowledge engine. Thus, according to the condition of row 11, only one of the &#x201c;Parent&#x201d; list and the &#x201c;Guardian&#x201d; list needs to be completed in order for the &#x201c;Adult&#x201d; list to be considered complete. In this depicted example, based on the result, the server determines that the &#x201c;Guardian&#x201d; list is complete based on the builder input indicated in set of cells, and displays the appropriate symbols. Thus, since at least one of the &#x201c;Parent&#x201d; list and the &#x201c;Guardian&#x201d; list is satisfied, the server determines that the &#x201c;Adult&#x201d; list is also satisfied, and thus displays symbol <b>852</b><i>a </i>indicating that the &#x201c;Adult&#x201d; list is complete. In particular, the server further displays set of symbols <b>852</b><i>b </i>in order to indicate that the &#x201c;Parent&#x201d; list was incomplete and the &#x201c;Guardian&#x201d; list was complete, showing that the &#x201c;Parent&#x201d; list may be incomplete while the &#x201c;Adult&#x201d; list is still complete.</p><p id="p-0147" num="0146">In this depicted example, the server evaluates the &#x201c;Parent&#x201d; list even though only the &#x201c;Guardian&#x201d; list was already completed, and displays the appropriate symbols. In other examples, if the server already determined that the &#x201c;Adult&#x201d; list was completed, the server may not evaluate the other requirements of the &#x201c;Adult&#x201d; list.</p><p id="p-0148" num="0147">Thus, as indicated by symbol <b>850</b><i>a</i>, the &#x201c;Legal Age&#x201d; module has received all required input and is considered complete, which is based at least in part on the &#x201c;Adult&#x201d; list receiving the required input.</p><heading id="h-0018" level="1">Example Method of Defining a Completeness of a Module</heading><p id="p-0149" num="0148"><figref idref="DRAWINGS">FIG. <b>9</b></figref> depicts an example method <b>900</b> of determining whether a module is complete based on builder input defining the completeness graph (e.g., input to user interface <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>) and runner input associated with the fields of the module (e.g., that may be input to user interface <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>).</p><p id="p-0150" num="0149">At <b>902</b>, a server (e.g., server <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) receives a first input at a user interface, such as user interface <b>300</b>. The first input (e.g., builder input as described with respect to <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>8</b></figref>) may define the completeness graph of a module associated with performing an operation, where the completeness graph indicates what data needs to be received in order for the module to be considered complete. The first input may include data referencing a set of fields of the module, as well as a set of indicators and set of modifiers defining when the fields of the module are required to receive input when performing the operation. Thus, a combination of the set of indicators and set of modifiers define conditions for when certain fields of the set of fields require input.</p><p id="p-0151" num="0150">In some embodiments, each field may correspond to at least one indicator and at least one modifier. A field may further correspond to multiple conditions defined by certain indicators and modifiers, where the condition indicates when the field must receive input. In some embodiments, the fields, indicators, and modifiers may be chosen from a drop down menu displayed in response to a user selection, while in other embodiments, the fields, indicators, and modifiers may be typed by the user.</p><p id="p-0152" num="0151">The first input may further include one or more lists of fields of the module. For example, a list of fields may include data referencing one or more fields of the module that must receive input for the list to be complete, subject to the associated conditions of both the list and the fields within the list. In turn, certain lists may need to be considered complete in order for the entire module to be considered complete.</p><p id="p-0153" num="0152">In some embodiments, the first input may be based in part on input defining a calculation graph of the module, such as input to user interface <b>200</b>. The fields of the module that define the calculation graph of the module may be a part of the first input defining what fields require input in order for the module to be completed.</p><p id="p-0154" num="0153">Certain referenced fields, indicators, and modifiers of the first input may indicate when the fields of the module require input, as described above with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. For example, certain indicators may indicate that a certain field, list, or module must receive input subject to a condition defined by associated modifiers (e.g., the &#x201c;when&#x201d; indicator as described with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>&#x2033;. Other indicators may indicate that a field of the module must be presented for a user, but does not require input (e.g., the &#x201c;must be asked&#x201d; indicator as described with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>). Further, certain modifiers may define a condition that each field in a set of fields must receive input for a module or list to be complete (e.g., the &#x201c;All of&#x201d; modifier as described with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>). Certain other modifiers may define a condition that only one field in a set of fields must receive input for a module or list to be complete (e.g., the &#x201c;Any of&#x201d; modifier as described with respect to <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>8</b></figref>). Some modifiers may be combined in order to compare values associated with certain fields to other values defined by the first input (e.g., the &#x201c;IS LESS THAN&#x201d;, &#x201c;IS GREATER THAN&#x201d;, &#x201c;EQUALS&#x201d;, &#x201c;DOES NOT EQUAL&#x201d;, &#x201c;IS LESS THAN OR EQUAL TO&#x201d;, or &#x201c;IS GREATER THAN OR EQUAL TO&#x201d; modifiers as described with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>). Certain modifiers may connect conditions defined by other modifiers in the conjunctive or disjunctive so that a field must receive input when (1) both conditions are satisfied, or (2) either condition is satisfied, respectively (e.g., the &#x201c;and&#x201d; and &#x201c;or&#x201d; modifiers as described with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>).</p><p id="p-0155" num="0154">Even further, the first input may include information indicating that a module or list will short-circuit if an associated condition is satisfied (e.g., the &#x201c;THIS LIST WILL SHORT CIRCUIT&#x201d; field as described with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0156" num="0155">Thus, the first input received at the server defines which fields of the module require input under certain conditions, where there may be multiple fields, and multiple conditions defined by indicators and modifiers that indicate when those fields require input.</p><p id="p-0157" num="0156">At <b>904</b>, the server receives a second input (e.g., runner input as described with respect to <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>8</b></figref>) at a user interface. In some embodiments, the second input may be received at a different user interface or a different user interface view, such as user interface <b>200</b>, than the first input. In other embodiments, the second input may be received at the same user interface as the first input. The second input includes data input to the fields of the module. In some embodiments, the data may be runner input to a user interface, such as input to user interface <b>200</b>. In other embodiments, the data may be client input received from a computing device (such as computing device <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). The second input may be analyzed in order to determine if the second input to the module contains all required input to the fields of the module that require input.</p><p id="p-0158" num="0157">In some embodiments, the server may generate an artifact based on the first input and the second input that may be executed by a knowledge engine. In some embodiments, the server may generate the artifact based on just the first input. The knowledge engine may execute the artifact and return a result based on the artifact. In some embodiments, the knowledge engine may determine if the module is complete based on the second input and include that determination in the result. The server may use an application programming interface (API) in order to provide the artifact to the knowledge engine.</p><p id="p-0159" num="0158">At <b>906</b>, the server receives the result from the knowledge engine. In some cases, the server may receive the result through an API.</p><p id="p-0160" num="0159">At <b>908</b>, the server determines whether the second input contains required input to the fields that require input based on the result received from the knowledge engine. The server analyzes the result to determine one or more aspects associated with any combination of the module, each list of the module, and/or each field of the module. For example, the server may determine that each field of the module and each list of the module has received the required input through the second input, subject to the conditions defined by the combination of indicators and modifiers of the first input. The server may also determine, based on the result, that the module did not receive the required input, and therefore is not complete, because the second input did not contain the required input as defined by the combination of indicators and modifiers of the first input.</p><p id="p-0161" num="0160">The server may further determine, based on the result, that the module or certain lists of the module short-circuited because one or more conditions were or were not satisfied, and therefore, certain other lists or fields did not need to be evaluated. The server may further determine, based on the result, that certain fields or lists of the module were not evaluated because the evaluation of the module or a list dead-ended based on the conditions of the first input.</p><p id="p-0162" num="0161">Thus, with the referenced fields and the conditions defined by the indicators and modifiers, a user may more quickly define a completeness graph using fewer resources than conventional methods. As a result, the generated artifact based on the builder input and runner input requires fewer resources to generate and less processing requirements to execute, thus increasing the efficiency and decreasing the amount of resources needed to generate and test the completeness graph.</p><p id="p-0163" num="0162">Additionally, analyzing the result, the server may display one or more symbols indicating aspects of the result, such as if certain referenced fields received the required input based on the associated conditions. For example, the server may display symbols indicating that certain fields, lists, or modules are complete, not complete, or were not required to be complete, based on associated conditions. The server may also display symbols indicating that certain fields or lists were not evaluated because the module or a list dead-ended. Additionally, the server may display symbols indicating if certain lists or fields were not required to be complete based on associated conditions. Thus, after receiving and analyzing the result, the server may display symbols in order to show if the completeness graph is working properly, and help refine the definition of the completeness graph if it is properly defined.</p><p id="p-0164" num="0163">Note that <figref idref="DRAWINGS">FIG. <b>9</b></figref> is just one example of a method, and other methods including fewer, additional, or alternative steps are possible consistent with this disclosure.</p><heading id="h-0019" level="1">Example Method of Debugging a Completeness Graph of a Module</heading><p id="p-0165" num="0164"><figref idref="DRAWINGS">FIG. <b>10</b></figref> depicts an example method <b>1000</b> of debugging a module based on builder input defining the completeness graph (e.g., input to user interface <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>) and runner input to the fields of the module (e.g., input to set of cells <b>220</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>). The builder input and the runner input may be input to one or more user interfaces, such as user interface <b>300</b>, of one or more computing devices (e.g., computing device <b>104</b> and computing device <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) associated with a server (e.g., server <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>).</p><p id="p-0166" num="0165">At <b>1002</b>, the server receives a first input (e.g., builder input as described with respect to <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>8</b></figref>) comprising one or more fields of a module and associated indicators and modifiers defining conditions associated with the one or more fields, where each field and corresponding indicators and modifiers create an input tuple, as described with respect to <figref idref="DRAWINGS">FIGS. <b>3</b>-<b>8</b></figref>. In some embodiments, a single field may correspond to multiple indicators and multiple modifiers. In some embodiments, a tuple may be a row of cells. In other embodiments, a tuple may be another combination of cells or an arrangement that does not include cells. Together, the tuples of fields, indicators, and modifiers define the completeness of the module, such as when certain fields require input based on the conditions defined by the indicators and modifiers.</p><p id="p-0167" num="0166">Each indicator may be from a plurality of indicators and each modifier may be from a plurality of modifiers, as described above with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0168" num="0167">At <b>1004</b>, the server receives a second input (e.g., runner input as described with respect to <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>8</b></figref>) associated with the one or more tuples, such as test input to one or more fields for the module. In some embodiments, the second input may be input to a separate user interface (such as user interface <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>) than the user interface receiving the first input. In other embodiments, the second input may be input to the same user interface as the first input.</p><p id="p-0169" num="0168">At <b>1006</b>, the server may provide the first input defining the completeness and the second input testing the completeness to a knowledge engine. The server may provide the inputs to the knowledge engine by way of an artifact created based on both inputs, as described with respect to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>3</b></figref>. The knowledge engine may receive and execute the artifact in order to determine if certain fields received input and if the input was required based on the conditions defined by the first input. Based on the determination, the knowledge engine may generate and return a result to the server indicating one or more aspects of each tuple. For example, the result may indicate that a tuple is complete, incomplete, or another aspect of the tuple because one or more fields, one or more lists, and/or the entire module is received (or did not receive) certain input.</p><p id="p-0170" num="0169">At <b>1008</b>, the server may receive the result based on the first input and the second input from the knowledge engine, as described with respect to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>3</b></figref>. The result may indicate one or more aspects of each tuple of the first input. In some embodiments, the result may indicate one or more aspects of only one or more certain subsets of tuples of the first input. The one or more aspects for a tuple may include an indication that tuple received required input and therefore is considered complete, did not receive the required input and therefore is not considered complete, that the input to the tuple caused the module or a list to short-circuit, that the input to the tuple caused the module or a list to dead-end, that a tuple or a set of tuples was not evaluated, that a tuple or a set of tuple did not need to be evaluated for the module to be considered complete, or another aspect. In addition, the result may indicate one or more aspects for a list tuple of the module.</p><p id="p-0171" num="0170">At <b>1010</b>, the server determines, based on the result, a first symbol associated with a first tuple of the first input based on an aspect of the first tuple. In some embodiments, the first symbol may indicate if the first tuple is considered complete (e.g., because it received the required input). Further, the server may determine symbols associated with other tuples of the first input based on aspects associated with those tuples. Additionally, the server may determine more than one symbol for a tuple if the result indicates more than one aspect for the tuple.</p><p id="p-0172" num="0171">At <b>1012</b>, the server displays the first symbol indicating an aspect of the first tuple, such as whether the first tuple is considered complete. In some embodiments, the server may display more than one symbol for a tuple based on if the server determined more than one aspect associated with the tuple.</p><p id="p-0173" num="0172">In some embodiments, after displaying the one or more symbols associated with the tuples based on input associated with the one or more fields, lists, and/or modules, the server may receive new builder input and/or new test input to a user interface, such as user interface <b>200</b> or user interface <b>300</b>, and generate a new artifact based on the one or more new inputs. The server may provide the new artifact to the knowledge engine, which may return a new result indicating that the tuples and referenced fields, lists, and/or module are considered complete based on the new inputs. The server may then receive the new result, determine that the tuples and referenced fields, lists, and/or module are considered complete, and display one or more new symbols indicating that the fields, lists, and/or module are considered complete.</p><p id="p-0174" num="0173">For example, the server may display one or more symbols indicating that certain tuples are complete, as described with respect to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>8</b></figref>, or that tuples are incomplete, as described with respect to <figref idref="DRAWINGS">FIGS. <b>7</b>-<b>8</b></figref>, because certain input was not received. Additionally, the server may display one or more symbols indicating that certain tuples caused the module or a list of the module to short-circuit, while displaying other symbols indicating that certain tuples did not need to be evaluated based on that short-circuiting, as described with respect to <figref idref="DRAWINGS">FIG. <b>6</b></figref>. Even further, the server may display one or more symbols indicating that certain tuples dead-ended, and may also display other symbols indicating that other tuples were not evaluated due to that dead-end, as described with respect to <figref idref="DRAWINGS">FIGS. <b>7</b>-<b>8</b></figref>. As another example, the server may further display one or more symbols indicating that a certain tuple is complete based on an associated condition even though an associated field did not receive input.</p><p id="p-0175" num="0174">Thus, by using the fields and conditions defined by the second input, the server requires less time and processing power to run the completeness graph against the knowledge engine because it must only check if certain conditions are satisfied or not satisfied rather than having to check if every possible combination of input has been entered. Additionally, by displaying the symbols, the server further creates a more efficient way for a user to determine if the completeness graph has been defined as desired, and as a result, can continue to test the completeness graph by running it against the knowledge engine multiple times, which, as described above, requires less time and processing power than conventional methods.</p><p id="p-0176" num="0175">Note that <figref idref="DRAWINGS">FIG. <b>10</b></figref> is just one example of a method, and other methods including fewer, additional, or alternative steps are possible consistent with this disclosure.</p><heading id="h-0020" level="1">Example Processing Device for Defining and Debugging a Completeness Graph</heading><p id="p-0177" num="0176"><figref idref="DRAWINGS">FIG. <b>11</b></figref> depicts an example processing device <b>1100</b> that may perform the methods described herein with respect to <figref idref="DRAWINGS">FIGS. <b>9</b>-<b>10</b></figref>. For example, the processing device <b>1100</b> can be a physical processing device or virtual server and is not limited to a single processing device that performs the methods described above.</p><p id="p-0178" num="0177">Processing device <b>1100</b> includes a central processing unit (CPU) <b>1102</b> connected to a data bus <b>1112</b>. CPU <b>1102</b> is configured to process computer-executable instructions, e.g., stored in memory <b>1114</b>, and to cause the processing device <b>1100</b> to perform methods described above. CPU <b>1102</b> is included to be representative of a single CPU, multiple CPUs, a single CPU having multiple processing cores, and other forms of processing architecture capable of executing computer-executable instructions.</p><p id="p-0179" num="0178">Processing device <b>1100</b> further includes input/output (I/O) device(s) <b>1108</b> and I/O device interfaces <b>1104</b>, which allows processing device <b>1100</b> to interface with input/output devices <b>1108</b>, such as, for example, keyboards, displays, mouse devices, pen input, and other devices that allow for interaction with processing device <b>1100</b>. Note that processing device <b>1100</b> may connect with external I/O devices through physical and wireless connections (e.g., an external display device).</p><p id="p-0180" num="0179">Processing device <b>1100</b> further includes a network interface <b>1106</b>, which provides processing device <b>1100</b> with access to external network <b>1110</b> and thereby external personal devices.</p><p id="p-0181" num="0180">Processing device <b>1100</b> further includes memory <b>1114</b>, which in this example includes a module builder <b>1120</b>, a knowledge engine <b>1130</b>, a client UI view component <b>1140</b>, and APIs <b>1150</b>.</p><p id="p-0182" num="0181">In this example, module builder <b>1120</b> may further include UI component <b>1122</b>, generating component <b>1124</b>, and feedback component <b>1126</b>. UI component <b>1122</b> may display one or more user interfaces that may receive builder input defining a calculation graph, a completeness graph, or a user interface view. UI component <b>1122</b> may further receive runner input for testing a completeness graph. Generating component <b>1124</b> may use the user input received at UI component <b>1122</b> to generate one or more artifacts based on the builder input. The one or more artifacts may further be based on the runner input. The feedback component <b>1126</b> may receive one or more results from the knowledge engine indicating one or more aspects associated with the builder input and the runner input. Further, the feedback component <b>1126</b> may determine one or more symbols to display based on the one or more aspects associated with the input and may provide the one or more symbols to the UI component <b>1122</b> for display on a user interface.</p><p id="p-0183" num="0182">Further, in this example, the knowledge engine <b>1130</b> may further include calculation graphs <b>1132</b>, completeness graphs <b>1134</b>, and artifacts <b>1136</b>. Calculation graphs <b>1132</b> may include calculation graphs associated with modules of the knowledge engine, and may further create or update calculation graphs for modules based on the artifacts generated by generating component <b>1124</b>. Completeness graphs <b>1134</b> may include completeness graphs associated with modules of the knowledge engine, and may further create or update completeness graphs for modules based on the artifacts generated by generating component <b>1124</b>. Artifacts <b>1136</b> may receive and store artifacts generated by generating component <b>1124</b> for use by the knowledge engine <b>1130</b>. For example, the knowledge engine may execute an artifact generated by generating component <b>1124</b> or stored in artifacts <b>1136</b> against a calculation graph of calculation graphs <b>1132</b> and/or a completeness graph of completeness graphs <b>1134</b> in order to generate a result.</p><p id="p-0184" num="0183">Additionally, in this example, client UI view component <b>1140</b> may generate a user interface view to send to a computing device. Additionally, client UI view component <b>1140</b> may receive input from the computing device for use by the module builder <b>1120</b> and/or knowledge engine <b>1130</b>.</p><p id="p-0185" num="0184">In this example, APIs <b>1150</b> may provide the artifacts generated by generating component <b>1124</b> to the knowledge engine based on input received at the UI component <b>1122</b>. Further APIs <b>1150</b> may provide the results generated by knowledge engine <b>1130</b> to the module builder <b>1120</b>.</p><p id="p-0186" num="0185">Note that while shown as a single memory <b>1114</b> in <figref idref="DRAWINGS">FIG. <b>11</b></figref> for simplicity, the various aspects stored in memory <b>1114</b> may be stored in different physical memories, but all accessible by CPU <b>1102</b> via internal data connections such as bus <b>1112</b>. While not depicted, other aspects may be included in memory <b>1114</b>.</p><p id="p-0187" num="0186">Note that <figref idref="DRAWINGS">FIG. <b>11</b></figref> is just one example of a processing system, and other processing systems including fewer, additional, or alternative aspects are possible consistent with this disclosure.</p><heading id="h-0021" level="1">Example Computing Device</heading><p id="p-0188" num="0187"><figref idref="DRAWINGS">FIG. <b>12</b></figref> depicts an example processing device <b>1200</b> that may perform the methods described herein. For example, the processing device <b>1200</b> can be a physical processing device such as a laptop, tablet, or smartphone, and is not limited to a single processing device that performs the methods herein.</p><p id="p-0189" num="0188">Processing device <b>1200</b> includes a central processing unit (CPU) <b>1202</b> connected to a data bus <b>1212</b>. CPU <b>1202</b> is configured to process computer-executable instructions, e.g., stored in memory <b>1214</b>, and to cause the processing device <b>1200</b> to perform methods described above. CPU <b>1202</b> is included to be representative of a single CPU, multiple CPUs, a single CPU having multiple processing cores, and other forms of processing architecture capable of executing computer-executable instructions.</p><p id="p-0190" num="0189">Processing device <b>1200</b> further includes input/output (I/O) device(s) <b>1208</b> and I/O device interfaces <b>1204</b>, which allows processing device <b>1200</b> to interface with input/output devices <b>1208</b>, such as, for example, pen input, microphones, and other devices that allow for interaction with processing device <b>1200</b>. Note that processing device <b>1200</b> may connect with external I/O devices through physical and wireless connections (e.g., an external display device).</p><p id="p-0191" num="0190">Processing device <b>1200</b> further includes a network interface <b>1206</b>, which provides processing device <b>1200</b> with access to external network <b>1210</b> and thereby other processing devices.</p><p id="p-0192" num="0191">Processing device <b>1200</b> further includes memory <b>1214</b>, which in this example includes UI component <b>1216</b>. UI component <b>1216</b> may display one or more user interfaces each with one or more user interface views that may receive user input that may be used for defining a calculation graph, completeness graph, or client UI view for a module.</p><p id="p-0193" num="0192">Note that while shown as a single memory <b>1214</b> in <figref idref="DRAWINGS">FIG. <b>12</b></figref> for simplicity, the various aspects stored in memory <b>1214</b> may be stored in different physical memories, but all accessible by CPU <b>1202</b> via internal data connections such as bus <b>1212</b>. While not depicted, other aspects may be included in memory <b>1214</b>.</p><heading id="h-0022" level="1">Example Clauses</heading><p id="p-0194" num="0193">Implementation examples are described in the following numbered clauses:</p><p id="p-0195" num="0194">Clause 1: A method for defining a completeness of input, comprising: receiving a first input, comprising: a set of fields associated with an operation; a set of indicators, wherein at least one indicator in the set of indicators is associated with a field in the set of fields; and a set of modifiers, wherein each modifier is associated with at least one indicator in the set of indicators, wherein a combination of the set of indicators and the set of modifiers indicates fields of the set of fields that require input to execute the operation; receiving a second input associated with the set of indicators and the set of modifiers; receiving, from a knowledge engine, a result based on the second input; and determining whether the second input contains required input to the fields that require input based on the result.</p><p id="p-0196" num="0195">Clause 2: The method of Clause 1, further comprising: determining, based on the combination, that a first subset of fields of the set of fields does not require input to execute the operation; wherein determining whether the second input contains the required input comprises determining that the second input contains values for the fields of the set of fields that require input to execute the operation.</p><p id="p-0197" num="0196">Clause 3: The method of Clause 2, wherein determining whether the second input contains the required input further comprises determining that the second input does not contain values for the first subset of fields.</p><p id="p-0198" num="0197">Clause 4: The method of any one of Clauses 1-3, wherein determining whether the second input contains the required input comprises determining if a value of the second input satisfies a condition defined by a modifier in the set of modifiers.</p><p id="p-0199" num="0198">Clause 5: The method of any one of Clauses 1-4, further comprising: determining that the first input indicates that a value for each field in the set of fields is required; and determining whether the second input contains the required input comprises determining if the second input comprises a value for each field in the set of fields.</p><p id="p-0200" num="0199">Clause 6: The method of any one of Clauses 1-5, further comprising: determining that the first input indicates that only a value to any field in the set of fields is required; and determining whether the second input contains the required input comprises determining if the second input comprises the value.</p><p id="p-0201" num="0200">Clause 7: The method of any one of Clauses 1-6, further comprising: determining that the first input indicates that: a first value to a first field in the set of fields is required; a second value to a second field in the set of fields is not required; and determining whether the second input contains the required input comprises determining if the second input comprises the first value.</p><p id="p-0202" num="0201">Clause 8: The method of any one of Clauses 1-7, further comprising: dividing the set of fields associated with the operation into one or more lists of fields; and evaluating the one or more lists of fields based on the combination.</p><p id="p-0203" num="0202">Clause 9: The method of Clause 8, wherein the one or more lists of fields are defined by the first input.</p><p id="p-0204" num="0203">Clause 10: The method of any one of Clauses 8-9, wherein determining whether the second input contains the required input comprises: evaluating a first list to determine if the second input contains values required by the first list; and determining whether to evaluate a second list based on determining if the second input contains the values required by the first list.</p><p id="p-0205" num="0204">Clause 11: A processing system, comprising: a memory comprising computer-executable instructions; one or more processors configured to execute the computer-executable instructions and cause the processing system to perform a method in accordance with any one of Clauses 1-10.</p><p id="p-0206" num="0205">Clause 12: A processing system, comprising means for performing a method in accordance with any one of Clauses 1-10.</p><p id="p-0207" num="0206">Clause 13: A non-transitory computer-readable medium comprising computer-executable instructions that, when executed by one or more processors of a processing system, cause the processing system to perform a method in accordance with any one of Clauses 1-10.</p><p id="p-0208" num="0207">Clause 14: A computer program product embodied on a computer-readable storage medium comprising code for performing a method in accordance with any one of Clauses 1-10.</p><heading id="h-0023" level="1">Additional Considerations</heading><p id="p-0209" num="0208">The preceding description is provided to enable any person skilled in the art to practice the various embodiments described herein. The examples discussed herein are not limiting of the scope, applicability, or embodiments set forth in the claims. Various modifications to these embodiments will be readily apparent to those skilled in the art, and the generic principles defined herein may be applied to other embodiments. For example, changes may be made in the function and arrangement of elements discussed without departing from the scope of the disclosure. Various examples may omit, substitute, or add various procedures or components as appropriate. For instance, the methods described may be performed in an order different from that described, and various steps may be added, omitted, or combined. Also, features described with respect to some examples may be combined in some other examples. For example, an apparatus may be implemented or a method may be practiced using any number of the aspects set forth herein. In addition, the scope of the disclosure is intended to cover such an apparatus or method that is practiced using other structure, functionality, or structure and functionality in addition to, or other than, the various aspects of the disclosure set forth herein. It should be understood that any aspect of the disclosure disclosed herein may be embodied by one or more elements of a claim.</p><p id="p-0210" num="0209">As used herein, the word &#x201c;exemplary&#x201d; means &#x201c;serving as an example, instance, or illustration.&#x201d; Any aspect described herein as &#x201c;exemplary&#x201d; is not necessarily to be construed as preferred or advantageous over other aspects.</p><p id="p-0211" num="0210">As used herein, a phrase referring to &#x201c;at least one of&#x201d; a list of items refers to any combination of those items, including single members. As an example, &#x201c;at least one of: a, b, or c&#x201d; is intended to cover a, b, c, a-b, a-c, b-c, and a-b-c, as well as any combination with multiples of the same element (e.g., a-a, a-a-a, a-a-b, a-a-c, a-b-b, a-c-c, b-b, b-b-b, b-b-c, c-c, and c-c-c or any other ordering of a, b, and c).</p><p id="p-0212" num="0211">As used herein, the term &#x201c;determining&#x201d; encompasses a wide variety of actions. For example, &#x201c;determining&#x201d; may include calculating, computing, processing, deriving, investigating, looking up (e.g., looking up in a table, a database or another data structure), ascertaining and the like. Also, &#x201c;determining&#x201d; may include receiving (e.g., receiving information), accessing (e.g., accessing data in a memory) and the like. Also, &#x201c;determining&#x201d; may include resolving, selecting, choosing, establishing and the like.</p><p id="p-0213" num="0212">The methods disclosed herein comprise one or more steps or actions for achieving the methods. The method steps and/or actions may be interchanged with one another without departing from the scope of the claims. In other words, unless a specific order of steps or actions is specified, the order and/or use of specific steps and/or actions may be modified without departing from the scope of the claims. Further, the various operations of methods described above may be performed by any suitable means capable of performing the corresponding functions. The means may include various hardware and/or software component(s) and/or module(s), including, but not limited to a circuit, an application specific integrated circuit (ASIC), or processor. Generally, where there are operations illustrated in figures, those operations may have corresponding counterpart means-plus-function components with similar numbering.</p><p id="p-0214" num="0213">The following claims are not intended to be limited to the embodiments shown herein, but are to be accorded the full scope consistent with the language of the claims. Within a claim, reference to an element in the singular is not intended to mean &#x201c;one and only one&#x201d; unless specifically so stated, but rather &#x201c;one or more.&#x201d; Unless specifically stated otherwise, the term &#x201c;some&#x201d; refers to one or more. No claim element is to be construed under the provisions of 35 U.S.C. &#xa7; 112(f) unless the element is expressly recited using the phrase &#x201c;means for&#x201d; or, in the case of a method claim, the element is recited using the phrase &#x201c;step for.&#x201d; All structural and functional equivalents to the elements of the various aspects described throughout this disclosure that are known or later come to be known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the claims. Moreover, nothing disclosed herein is intended to be dedicated to the public regardless of whether such disclosure is explicitly recited in the claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for defining a completeness of input, comprising:<claim-text>receiving a first input, comprising:<claim-text>a set of fields associated with an operation;</claim-text><claim-text>a set of indicators, wherein at least one indicator in the set of indicators is associated with a field in the set of fields; and</claim-text><claim-text>a set of modifiers, wherein each modifier is associated with at least one indicator in the set of indicators,</claim-text><claim-text>wherein a combination of the set of indicators and the set of modifiers indicates fields of the set of fields that require input to execute the operation;</claim-text></claim-text><claim-text>receiving a second input associated with the set of indicators and the set of modifiers;</claim-text><claim-text>receiving, from a knowledge engine, a result based on the second input; and</claim-text><claim-text>determining whether the second input contains required input to the fields that require input based on the result.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining, based on the combination, that a first subset of fields of the set of fields does not require input to execute the operation;</claim-text><claim-text>wherein determining whether the second input contains the required input comprises determining that the second input contains values for the fields of the set of fields that require input to execute the operation.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein determining whether the second input contains the required input further comprises determining that the second input does not contain values for the first subset of fields.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining whether the second input contains the required input comprises determining if a value of the second input satisfies a condition defined by a modifier in the set of modifiers.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining that the first input indicates that a value for each field in the set of fields is required; and</claim-text><claim-text>determining whether the second input contains the required input comprises determining if the second input comprises a value for each field in the set of fields.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining that the first input indicates that only a value to any field in the set of fields is required; and</claim-text><claim-text>determining whether the second input contains the required input comprises determining if the second input comprises the value.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining that the first input indicates that:<claim-text>a first value to a first field in the set of fields is required;</claim-text><claim-text>a second value to a second field in the set of fields is not required; and</claim-text></claim-text><claim-text>determining whether the second input contains the required input comprises determining if the second input comprises the first value.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>dividing the set of fields associated with the operation into one or more lists of fields; and</claim-text><claim-text>evaluating the one or more lists of fields based on the combination.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the one or more lists of fields are defined by the first input.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein determining whether the second input contains the required input comprises:<claim-text>evaluating a first list to determine if the second input contains values required by the first list; and</claim-text><claim-text>determining whether to evaluate a second list based on determining if the second input contains the values required by the first list.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A processing system, comprising:<claim-text>a memory storing executable instructions; and</claim-text><claim-text>a processor configured to execute the executable instructions and cause the processing system to:<claim-text>receive a first input, comprising:<claim-text>a set of fields associated with an operation;</claim-text><claim-text>a set of indicators, wherein at least one indicator in the set of indicators is associated with a field in the set of fields; and</claim-text><claim-text>a set of modifiers, wherein each modifier is associated with at least one indicator in the set of indicators,</claim-text><claim-text>wherein a combination of the set of indicators and the set of modifiers indicates fields of the set of fields that require input to execute the operation;</claim-text></claim-text><claim-text>receive a second input associated with the set of indicators and the set of modifiers;</claim-text><claim-text>receive, from a knowledge engine, a result based on the second input; and</claim-text><claim-text>determine whether the second input contains required input to the fields that require input based on the result.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The processing system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the processor is further configured to cause the processing system to:<claim-text>determine, based on the combination, that a first subset of fields of the set of fields does not require input to execute the operation;</claim-text><claim-text>wherein in order to determine whether the second input contains the required input, the processor is further configured to cause the processing system to determine that the second input contains values for the fields of the set of fields that require input to execute the operation.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The processing system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the processor being configured to cause the processing system to determine whether the second input contains the required input further comprises the processor being configured to cause the processing system to determine that the second input does not contain values for the first subset of fields.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The processing system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the processor being configured to cause the processing system to determine whether the second input contains the required input comprises the processor being configured to cause the processing system to determine if a value of the second input satisfies a condition defined by a modifier in the set of modifiers.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The processing system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the processor is further configured to cause the processing system to:<claim-text>determine that the first input indicates that a value for each field in the set of fields is required; and</claim-text><claim-text>the processor being configured to cause the processing system to determine whether the second input contains the required input comprises the processor being configured to cause the processing system to determine if the second input comprises a value for each field in the set of fields.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The processing system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the processor is further configured to cause the processing system to:<claim-text>determine that the first input indicates that only a value to any field in the set of fields is required; and</claim-text><claim-text>the processor being configured to cause the processing system to determine whether the second input contains the required input comprises the processor being configured to cause the processing system to determine if the second input comprises the value.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The processing system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the processor is further configured to cause the processing system to:<claim-text>determine that the first input indicates that:<claim-text>a first value to a first field in the set of fields is required;</claim-text><claim-text>a second value to a second field in the set of fields is not required; and</claim-text><claim-text>the processor being configured to cause the processing system to determine whether the second input contains the required input comprises the processor being configured to cause the processing system to determine if the second input comprises the first value.</claim-text></claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The processing system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the processor is further configured to cause the processing system to:<claim-text>divide the set of fields associated with the operation into one or more lists of fields; and</claim-text><claim-text>evaluate the one or more lists of fields based on the combination.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The processing system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the one or more lists of fields are defined by the first input.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A method for defining a completeness of input, comprising:<claim-text>providing, to a user interface of a computing device, a first input, comprising:<claim-text>a set of fields associated with an operation;</claim-text><claim-text>a set of indicators, wherein at least one indicator in the set of indicators is associated with a field in the set of fields; and</claim-text><claim-text>a set of modifiers, wherein each modifier is associated with at least one indicator in the set of indicators,</claim-text><claim-text>wherein a combination of the set of indicators and the set of modifiers indicates fields of the set of fields that require input to execute the operation;</claim-text></claim-text><claim-text>providing, to the user interface of the mobile device, a second input associated with the set of indicators and the set of modifiers;<claim-text>receiving, a result based on the first input and the second input;</claim-text><claim-text>receiving a determination of completeness based on the result; and</claim-text><claim-text>providing, by to the user interface of the mobile device, a third input based on the result and the determination.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>