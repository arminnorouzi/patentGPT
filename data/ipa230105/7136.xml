<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007137A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007137</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17853221</doc-number><date>20220629</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>JP</country><doc-number>2021-110760</doc-number><date>20210702</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>1</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>1</main-group><subgroup>23</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>61</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>1</main-group><subgroup>00949</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>1</main-group><subgroup>00798</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>1</main-group><subgroup>2338</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>63</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">INFORMATION PROCESSING SYSTEM AND APPARATUS TO MANAGE COMBINED APPLICATION</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>CANON KABUSHIKI KAISHA</orgname><address><city>Tokyo</city><country>JP</country></address></addressbook><residence><country>JP</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Kumagai</last-name><first-name>Sora</first-name><address><city>Chiba</city><country>JP</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Kogure</last-name><first-name>Takeshi</first-name><address><city>Ibaraki</city><country>JP</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Ikeda</last-name><first-name>Atsushi</first-name><address><city>Ibaraki</city><country>JP</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Koike</last-name><first-name>Hiroaki</first-name><address><city>Tokyo</city><country>JP</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An information processing system that manages an application executed by an image processing apparatus with an application identifier includes one or more controllers configured to provide combined information of a reproduction application that reproduces a description file for defining operation procedures and a first description file as a first combined application, provide combined information of the reproduction application and a second description file as a second combined application, manage a first description identifier corresponding to the first description file and a second description identifier corresponding to the second description file, and manage the first combined application and the second combined application in a distinguishable manner based on the first description identifier and the second description identifier.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="143.85mm" wi="158.75mm" file="US20230007137A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="173.99mm" wi="161.21mm" orientation="landscape" file="US20230007137A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="183.64mm" wi="166.96mm" orientation="landscape" file="US20230007137A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="141.73mm" wi="153.67mm" file="US20230007137A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="205.57mm" wi="167.05mm" orientation="landscape" file="US20230007137A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="162.39mm" wi="148.34mm" file="US20230007137A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="208.62mm" wi="151.47mm" file="US20230007137A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="244.52mm" wi="166.62mm" file="US20230007137A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="239.18mm" wi="144.44mm" orientation="landscape" file="US20230007137A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="217.34mm" wi="168.99mm" file="US20230007137A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="251.21mm" wi="168.32mm" orientation="landscape" file="US20230007137A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="209.38mm" wi="160.95mm" file="US20230007137A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="151.55mm" wi="107.70mm" file="US20230007137A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="243.59mm" wi="169.33mm" file="US20230007137A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="247.31mm" wi="169.33mm" file="US20230007137A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="239.78mm" wi="149.01mm" orientation="landscape" file="US20230007137A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="246.30mm" wi="168.66mm" file="US20230007137A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="246.89mm" wi="168.66mm" file="US20230007137A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="223.60mm" wi="166.12mm" file="US20230007137A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="245.87mm" wi="113.71mm" orientation="landscape" file="US20230007137A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><heading id="h-0002" level="1">Technical Field</heading><p id="p-0002" num="0001">One disclosed aspect of the embodiments relates to a system which edits an application installed in an information processing apparatus. In particular, the disclosure is related to an authoring system.</p><heading id="h-0003" level="1">Description of the Related Art</heading><p id="p-0003" num="0002">A mechanism for installing an application in an information processing apparatus such as a multifunction peripheral (MFP) to expand functions thereof has been known. Japanese Patent Application Laid-Open No. 2016-2470 discusses a management technique using an identifier (ID) of an application installed in an information processing apparatus.</p><p id="p-0004" num="0003">Clients who operate information processing apparatuses have various needs. Thus, a function which satisfies the needs of each client is preferably provided as an application. Further, in order to promptly respond to the demand of a client, it is preferable to allow a person in charge, such as a service engineer or a sales representative, to customize an application that is to be provided to the client.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0005" num="0004">One aspect of the disclosed embodiments is directed to a system capable of appropriately managing a custom application based on a description file and application data.</p><p id="p-0006" num="0005">According to an aspect of the disclosure, an information processing system that manages an application executed by an image processing apparatus with an application identifier includes one or more controllers configured to provide combined information of a reproduction application that reproduces a description file for defining operation procedures and a first description file as a first combined application, provide combined information of the reproduction application and a second description file as a second combined application, manage a first description identifier corresponding to the first description file and a second description identifier corresponding to the second description file, and manage the first combined application and the second combined application in a distinguishable manner based on the first description identifier and the second description identifier.</p><p id="p-0007" num="0006">Further features of the disclosure will become apparent from the following description of exemplary embodiments with reference to the attached drawings.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram illustrating an authoring system.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a diagram illustrating a software configuration of the authoring system, and <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram illustrating a hardware configuration of a server apparatus used for the authoring system.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> is a block diagram illustrating a hardware configuration of a multifunction peripheral (MFP), and <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> is a block diagram illustrating a software configuration of the MFP.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram illustrating a hierarchical structure of software installed in the MFP.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> is a block diagram illustrating a hardware configuration of a client terminal, and <figref idref="DRAWINGS">FIG. <b>5</b>B</figref> is a block diagram illustrating a software configuration of a description editor executed by the client terminal.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram illustrating a hierarchical structure of software relating to the description editor.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref> is a diagram illustrating a screen of the description editor, and <figref idref="DRAWINGS">FIG. <b>7</b>B</figref> is a diagram illustrating an execution screen of a custom application displayed on the MFP.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a sequence diagram illustrating a sequence of processing executed by software modules of the description editor.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a sequence diagram illustrating processing for using the authoring system.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram illustrating a data structure of the custom application.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIGS. <b>11</b>, <b>11</b>A and <b>11</b>B</figref> are collectively a diagram illustrating a description.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a diagram illustrating a structure of the custom application installed in the MFP.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart illustrating processing for installing an application.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a sequence diagram illustrating details of processing for generating a description.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>15</b>A</figref> is a diagram illustrating management of meta data of an application package and application data of the MFP, and <figref idref="DRAWINGS">FIG. <b>15</b>B</figref> is a table illustrating a correspondence between meta data and data within the MFP.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a management table of descriptions.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DESCRIPTION OF THE EMBODIMENTS</heading><p id="p-0024" num="0023">Hereinafter, exemplary embodiments embodying disclosure will be specifically described with reference to the appended drawings. A scope of the disclosure is not limited to the configurations described in the exemplary embodiments. Further, various changes and modifications are possible within a scope where a similar effect can be acquired, so that a part of the configurations and processing may be omitted or replaced with configurations and processing equivalent thereto. In the following, the term &#x201c;unit&#x201d; may refer to a software context, a hardware context, or a combination of software and hardware contexts. In the software context, the term &#x201c;unit&#x201d; refers to a functionality, an application, a software module, a function, a routine, a set of instructions, or a program that can be executed by a programmable processor such as a microprocessor, a central processing unit (CPU), or a specially designed programmable device or controller. In the hardware context, the term &#x201c;unit&#x201d; refers to a hardware element, a circuit, an assembly, a physical structure, a system, a module, or a subsystem. It may include mechanical, optical, or electrical components, or any combination of them. It may include active (e.g., transistors) or passive (e.g., capacitor) components. It may include semiconductor devices having a substrate and other layers of materials having various concentrations of conductivity. It may include a CPU or a programmable processor that can execute a program stored in a memory to perform specified functions. It may include logic elements (e.g., AND, OR) implemented by transistor circuits or any other switching circuits. In the combination of software and hardware contexts, the term &#x201c;unit&#x201d; refers to any combination of the software and hardware contexts as described above.</p><heading id="h-0007" level="2">&#x3c;Authoring System&#x3e;</heading><p id="p-0025" num="0024">A first exemplary embodiment will be described. <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram illustrating an authoring system. An authoring system <b>0101</b> is an information processing system that provides an editing environment of a custom application executed by a multifunction peripheral (MFP) <b>0203</b>. In the present exemplary embodiment, a person in charge, such as a service engineer or a sales representative, is allowed to customize an application by using the authoring system <b>0101</b>. With this configuration, it is possible to promptly provide a custom application which satisfies the demand of a client. Further, it is possible to appropriately manage custom applications of which the types are increased in number in proportion to the number of demands of clients.</p><p id="p-0026" num="0025">The authoring system <b>0101</b> is a system established on a general-purpose cloud service, and various apparatuses can access the authoring system <b>0101</b> via a network. All of managers and users who use the authoring system <b>0101</b> are managed by a user authentication system when they log in to the authoring system <b>0101</b>. In other words, at the time of using the authoring system <b>0101</b>, managers and users go through the procedures of user authentication using user IDs and passwords. In the present exemplary embodiment, a function provided by a general-purpose cloud service is used as a mechanism for executing the user authentication, and thus detailed descriptions thereof will be omitted. Alternatively, the authoring system <b>0101</b> may have a unique user authentication function.</p><p id="p-0027" num="0026">The authoring system <b>0101</b> includes a tenant issuance site <b>0106</b>, so that a user can create a plurality of tenants depending on purposes. <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a state where at least a tenant A <b>0107</b>, a tenant B <b>0108</b>, and a tenant C <b>0109</b> are issued. For example, a system manager <b>0102</b> can create tenants for respective group sales companies in various country by accessing the tenant issuance site <b>0106</b> from a client terminal <b>0240</b> via a web browser. A tenant may be issued to a system integrator instead of a group sales company.</p><p id="p-0028" num="0027">In a case where tenants are issued, one or more managers who manages the each tenant are allocated thereto. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, at least a tenant-A manager <b>0103</b> who manages the tenant A <b>0107</b>, a tenant-B manager <b>0104</b> who manages the tenant B <b>0108</b>, and a tenant-C manager <b>0105</b> who manages the tenant C <b>0109</b> exist. A tenant manager of one tenant can set or delete another tenant manager.</p><p id="p-0029" num="0028">A tenant manager can access a tenant managed thereby from a client terminal <b>0240</b> via a web browser to create a plurality of user accounts of users who use the tenant. In <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the tenant-A manager <b>0103</b> creates accounts of a technical sales A<b>1</b> <b>0110</b>, a technical sales A<b>2</b> <b>0111</b>, . . . , and a technical sales An <b>0122</b>. A description pool for storing descriptions is allocated to each of the accounts. Herein, &#x201c;description&#x201d; refers to a file (description file) which describes behavior (operation procedures) of a custom application, and the user can create a description by using the authoring system <b>0101</b>. A configuration of the custom application and the description will be described below in detail.</p><p id="p-0030" num="0029">In <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a description pool is allocated to each of the accounts of the technical sales A<b>1</b> <b>0110</b>, the technical sales A<b>2</b> <b>0111</b>, . . . , and the technical sales An <b>0112</b>. A description pool A<b>1</b> <b>0113</b>, a description pool A<b>2</b> <b>0114</b>, . . . , and a description pool An <b>0115</b> (&#x201c;n&#x201d; is a natural number) are allocated to the respective accounts. Similarly, the tenant-B manager <b>0104</b> and the tenant-C manager <b>0105</b> can also create accounts of respective users of the tenants B and C as appropriate, although these accounts are not illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Further, by arranging a shared description pool in a tenant, the tenant manager allows a plurality of accounts within the tenant to share one description. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a shared description pool A <b>0116</b> is arranged in the tenant A <b>0107</b>, so that descriptions can be shared within the tenant A <b>0107</b>. Similarly, as a configuration for sharing descriptions within a tenant, a shared description pool B <b>0117</b> and a shared description pool C <b>0118</b> are respectively arranged in the tenant B <b>0108</b> and the tenant C <b>0109</b>.</p><p id="p-0031" num="0030">In the present exemplary embodiment, the configuration will be described based on a condition that a shared description pool is arranged so that all of accounts within the tenant can read and write descriptions. Further, the settings on the shared description pool may be changed, so that the reading and writing operations of descriptions are limited depending on the accounts. Furthermore, the authoring system <b>0101</b> may provide a shared description pool accessible from the accounts of all of the tenants. The above-described limitation may also be placed on this shared description pool depending on the accounts.</p><heading id="h-0008" level="2">&#x3c;Processing for Using Authoring System&#x3e;</heading><p id="p-0032" num="0031">Main processing for using the authoring system <b>0101</b> will be described with reference to <figref idref="DRAWINGS">FIG. <b>9</b></figref>. <figref idref="DRAWINGS">FIG. <b>9</b></figref> is a sequence diagram illustrating the processing for using the authoring system <b>0101</b>.</p><p id="p-0033" num="0032">In step S<b>901</b>, the system manager <b>0102</b> executes processing for creating a tenant in the authoring system <b>0101</b> and processing for registering a reproduction application in the authoring system <b>0101</b>. The information about a normal application is registered in the authoring system <b>0101</b> in addition to information about a reproduction application used for a custom application. These applications are managed based on uniquely-identifiable information, so that one application can be distinguished from another application. In step S<b>902</b>, the system user <b>0202</b> uses the client terminal <b>0240</b> to access a web tool based on the tenant information. The client terminal <b>0240</b> acquires the web tool from the authoring system <b>0101</b> via the network.</p><p id="p-0034" num="0033">In steps S<b>904</b> to S<b>907</b>, according to an instruction from the system user <b>0202</b>, the client terminal <b>0240</b> executes processing for generating and registering a description by using the web tool. Step S<b>904</b> executes the customization setting and generates the description. Step S<b>905</b> executes the operation checking and emulation. Step S<b>906</b> transmits the description. In step S<b>907</b>, upon receiving the description, the authoring system <b>0101</b> registers the description. The descriptions registered in the authoring system <b>0101</b> are managed in a distinguishable manner based on the uniquely-identifiable information. The processing for generating and registering a description will be described below in detail with reference to <figref idref="DRAWINGS">FIG. <b>14</b></figref>.</p><p id="p-0035" num="0034">In step S<b>908</b>, with respect to a custom application that uses the registered description, the client terminal <b>0240</b> transmits an issuance request of an installation code to the authoring system <b>0101</b>.</p><p id="p-0036" num="0035">In step S<b>914</b>, upon receiving the issuance request of the installation code, the authoring system <b>0101</b> affixes signature information to a description <b>0219</b> through the use of a description signature affixation <b>0211</b> described below by using signature key information <b>0218</b>. The signature key information <b>0218</b> is information different from the key information used for affixing a signature to a reproduction application described below. The key information used for affixing a signature to a reproduction application is managed in a development environment of the system developer <b>0201</b>.</p><p id="p-0037" num="0036">In step S<b>915</b>, the authoring system <b>0101</b> executes processing for packaging a signed description and a signed reproduction application through the use of a custom application packaging <b>0212</b> described below.</p><p id="p-0038" num="0037">In step S<b>909</b>, the authoring system <b>0101</b> issues an installation code through the use of an installation code issuance system <b>0214</b>, and registers the packaged custom application in a custom application distribution system <b>0213</b>. The issued installation code is transmitted to a client <b>0230</b> from the system user <b>0202</b> via telephone, e-mail and other transmission methods.</p><p id="p-0039" num="0038">In step S<b>910</b>, when the client <b>0230</b> inputs the installation code to the MFP <b>0203</b>, the MFP <b>0203</b> transmits the installation code to the authoring system <b>0101</b>.</p><p id="p-0040" num="0039">In step S<b>911</b>, the authoring system <b>0101</b> provides a custom application corresponding to the received installation code to the MFP <b>0203</b> through the use of the custom application distribution system <b>0213</b>.</p><p id="p-0041" num="0040">In step S<b>912</b>, the MFP <b>0203</b> receives and installs the custom application. When installation is completed normally, then in step S<b>913</b>, the custom application is executed, so that the client <b>0230</b> can use a function provided by the custom application.</p><heading id="h-0009" level="2">&#x3c;Software Configuration of Authoring System&#x3e;</heading><p id="p-0042" num="0041">Next, a software configuration of the authoring system <b>0101</b> will be described. <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a diagram illustrating a software configuration of the authoring system <b>0101</b>.</p><p id="p-0043" num="0042">In <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the authoring system <b>0101</b>, the tenant A <b>0107</b>, the technical sales A<b>1</b> <b>0110</b> as a user account, and the description pool A<b>1</b> <b>0113</b> are the same as those illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0044" num="0043">The authoring system <b>0101</b> includes software modules such as a front-end resource <b>0204</b>, a back-end program <b>0205</b>, and a reproduction application resource <b>0206</b>.</p><p id="p-0045" num="0044">The front-end resource <b>0204</b> contains resources such as a description editor <b>0207</b>, a framework emulator <b>0208</b>, and an installation code issuance screen <b>0209</b>. Each of the resources is a program described in a language such as JavaScript, and operates on a web browser used when the user <b>0202</b> accesses the authoring system <b>0101</b>.</p><p id="p-0046" num="0045">The description editor <b>0207</b> is a program (editing program) operating on the web browser when the user <b>0202</b> of the tenant creates or edits a description. A description created by the description editor <b>0207</b> can be stored in a description pool associated with a user account. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the technical sales A<b>1</b> <b>0110</b> regarded as the user <b>0202</b> logs in to the authoring system <b>0101</b> to access the front-end resource <b>0204</b>. Further, as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the description <b>0219</b> that is created by the technical sales A<b>1</b> <b>0110</b>, i.e., the user <b>0202</b>, through the use of the description editor <b>0207</b> contained in the front-end resource <b>0204</b> is stored in the description pool A<b>1</b> <b>0113</b>. As described above, the description pool A<b>1</b> <b>0113</b> is associated with the user account of the technical sales A<b>1</b> <b>0110</b> created in the tenant A <b>0107</b>.</p><p id="p-0047" num="0046">The framework emulator <b>0208</b> is a program called when behavior of the description which is being created (edited) or has been created on the description editor <b>0207</b> is checked by the description editor <b>0207</b>. The framework emulator <b>0208</b> is configured to operate on a web browser. The framework emulator <b>0208</b> emulates the operation of an application framework of a device to visualize the behavior of the custom application including the created description by outputting the behavior as screen information.</p><p id="p-0048" num="0047">The installation code issuance screen <b>0209</b> is a program which displays an installation code on the web browser used by the user. The installation code is used when the custom application is installed in the device.</p><p id="p-0049" num="0048">The back-end program <b>0205</b> contains programs such as a description number management <b>0210</b>, the description signature affixation <b>0211</b>, the custom application packaging <b>0212</b>, the custom application distribution system <b>0213</b>, and the installation code issuance system <b>0214</b>.</p><p id="p-0050" num="0049">Each of the programs contained in the back-end program <b>0205</b> is executed by a server apparatus <b>0220</b> on a cloud where the authoring system <b>0101</b> is arranged, and operates in cooperation with a program contained in the front-end resource <b>0204</b>.</p><p id="p-0051" num="0050">The description number management <b>0210</b> is a program which issues a unique serial number used for identifying each of the descriptions. The description number management <b>0210</b> is called when the user <b>0202</b> starts creating a new description through the use of the description editor <b>0207</b>. The description number management <b>0210</b> is also called when the user <b>0202</b> discards a description created in the past. In a case where the description that the user <b>0202</b> desires to discard is not used as a custom application, the description number management <b>0210</b> restores the serial number which is allocated thereto when the description is created to a reusable state.</p><p id="p-0052" num="0051">The description signature affixation <b>0211</b> is a program which affixes a signature to a description to guarantee that the description is not altered. For example, the signature is affixed when an installation package of the custom application including the created description is generated. The description signature affixation <b>0211</b> includes the signature key information <b>0218</b> used when the signature is affixed. In <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the description <b>0219</b> stored in the description pool A<b>1</b> <b>0113</b> is used as an example of a description to which a signature is affixed by the description signature affixation <b>0211</b>.</p><p id="p-0053" num="0052">The custom application packaging <b>0212</b> is a program for generating an installation package of a custom application. The installation package collectively includes a signed description generated by the description signature affixation <b>0211</b> and a specific reproduction application described below. By generating the installation package, the custom application can be installed in an optional device. A structure of the installation package will be described below in detail.</p><p id="p-0054" num="0053">The custom application distribution system <b>0213</b> is a program of a system which distributes one or more installation packages of the custom applications previously associated with the installation codes issued by the installation code issuance screen <b>0209</b>, to the device. Herein, one or more installation packages of the custom applications are called &#x201c;installation package archive&#x201d;. When the custom application distribution system <b>0213</b> receives a distribution request including the installation code from the device together, the custom application distribution system <b>0213</b> transmits an installation package archive of the custom application associated with that installation code to the device. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the MFP <b>0203</b> regarded as an example of the device is connected to the back-end program <b>0205</b> of the authoring system <b>0101</b>, so that the installation packages of the custom applications are sequentially transmitted to the MFP <b>0203</b>.</p><p id="p-0055" num="0054">The installation code issuance system <b>0214</b> is a program which operates in cooperation with the installation code issuance screen <b>0209</b> to issue an installation code to one or more custom applications selected by the user. Further, the installation code issuance system <b>0214</b> internally retains a table which describes a relationship between the one or more selected custom applications (i.e., an installation package archive of custom applications) and issued installation codes. Details thereof will be described below.</p><p id="p-0056" num="0055">Herein, the installation package archive of the custom applications may be generated on demand, or may be generated previously.</p><p id="p-0057" num="0056">In a case where the installation package archive is configured to be generated on demand, the installation package archive is generated by the custom application packaging <b>0212</b> after the custom application distribution system <b>0213</b> receives a distribution request including the installation code from the device. On the other hand, in a case where the installation package archive is configured to be generated previously, the installation package archive is generated by the custom application packaging <b>0212</b> when the installation code issuance system <b>0214</b> issues the installation code. Then, the installation package archive is retained in the installation code issuance system <b>0214</b> together with the table describing a relationship with the issued installation code.</p><p id="p-0058" num="0057">The reproduction application resource <b>0206</b> contains a signed reproduction application as a signed package, to which a signature has been affixed in advance, for reproducing a created description. The number of reproduction applications managed by the reproduction application resource <b>0206</b> is not limited to one. For example, a plurality of reproduction applications may separately be managed for each version. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the reproduction application resource <b>0206</b> contains a reproduction application ver<b>1</b> <b>0215</b>, a reproduction application ver<b>2</b> <b>0216</b>, . . . , and a reproduction application verN <b>0217</b> together with the signatures affixed in advance. Corresponding signatures, &#x201c;Signature <b>1</b>&#x201d;, &#x201c;Signature <b>2</b>&#x201d;, . . . , and &#x201c;Signature N&#x201d;, are affixed to the respective reproduction applications. Each of the reproduction applications is developed by a system developer <b>0201</b>. Further, the signature is affixed in advance to the reproduction application in a development environment of the system developer <b>0201</b> where key information used for affixing the signature is managed strictly. Then, the reproduction application signed in advance is uploaded to the reproduction application resource <b>0206</b> by the system developer <b>0201</b> as appropriate. Each of the reproduction applications contained in the reproduction application resource <b>0206</b> includes customizable information. The user <b>0202</b> selects a version of the reproduction application when the user <b>0202</b> starts creating a description through the use of the description editor <b>0207</b>. Then, the description editor <b>0207</b> acquires the customizable information unique to the reproduction application from the reproduction application of the selected version. In this way, the description editor <b>0207</b> does not need to statistically retain the information such as a menu item necessary to execute customization.</p><heading id="h-0010" level="2">&#x3c;Server Apparatus&#x3e;</heading><p id="p-0059" num="0058">A hardware configuration for executing the software configuration of the authoring system <b>0101</b> illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> will be described. The authoring system <b>0101</b> is a system established on the cloud, and a load thereof is allocated to and borne by a plurality of apparatuses. For the sake of simplicity, in the present exemplary embodiment, a configuration thereof is described based on a case where the processing is executed by a single server apparatus <b>0220</b>. <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram illustrating a hardware configuration of the server apparatus <b>0220</b> used for the authoring system <b>0101</b>.</p><p id="p-0060" num="0059">The server apparatus <b>0220</b> includes a controller unit or circuit <b>250</b>, and functions as an information processing apparatus for executing the authoring system <b>0101</b>. The controller unit <b>250</b> includes a central processing unit (CPU) <b>252</b>, a random access memory (RAM) <b>253</b>, a hard disk drive (HDD) <b>255</b>, a read only memory (ROM) <b>256</b>, and a network interface (I/F) <b>257</b>. The CPU <b>252</b>, the RAM <b>253</b>, the HDD <b>255</b>, the ROM <b>256</b>, and the network I/F <b>257</b> are connected to each other via a system bus <b>259</b>.</p><p id="p-0061" num="0060">The CPU <b>252</b> operates based on a program stored in the RAM <b>253</b> and controls the operations of the server apparatus <b>0220</b>. In essence, the RAM <b>253</b> stored the program which includes instructions that, when executed by the CPU <b>252</b>, cause the CPU <b>252</b> to perform operations described in the following. As mentioned above, these operations may correspond to functions, units, or modules. The ROM <b>256</b> is a boot ROM which stores a boot program of a system. The network I/F <b>257</b> is connected to a local area network (LAN) to receive and output various types of information via a network. Various programs including system software are stored in the HDD <b>255</b>. A program stored in the HDD <b>255</b> is loaded on the RAM <b>253</b>, and the CPU <b>252</b> controls the operations of the server apparatus <b>0220</b> based on the program.</p><p id="p-0062" num="0061">The above-described information about the accounts of managers and users and the information about tenants, e.g., the tenant A <b>0107</b> in the example of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, are entirely stored in and managed by the HDD <b>255</b>. The front-end resource <b>0204</b>, the back-end program <b>0205</b>, and the reproduction application resource <b>0206</b> illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> are also stored in the HDD <b>255</b>. In addition, a program for implementing the user authentication mechanism of the managers and the users described with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> is also stored in the HDD <b>255</b> although it is not illustrated. The program for implementing the user authentication mechanism is automatically loaded on the RAM <b>253</b> and executed by the CPU <b>252</b> when the server apparatus <b>0220</b> is activated. For example, when the system developer <b>0201</b> or the user <b>0202</b> (technical sales A<b>1</b> <b>0110</b>) illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> accesses the authoring system <b>0101</b> to log in to the system, a log-in request is transmitted to a user authentication program via the network I/F <b>257</b>. Then, the user authentication program displays a log-in screen on a web browser of a personal computer (PC) operated by the system developer <b>0201</b> or the user <b>0202</b> (technical sales A<b>1</b> <b>0110</b>). The description editor <b>0207</b> contained in the front-end resource <b>0204</b> is also stored in the HDD <b>255</b>. For example, when the user <b>0202</b> (technical sales A<b>1</b> <b>0110</b>) logs in to the authoring system <b>0101</b> to access a uniform resource locator (URL) of the description editor <b>0207</b>, this request is transmitted to the server apparatus <b>0220</b> via the network I/F <b>257</b>. Then, a program of the description editor <b>0207</b> is returned to the web browser of the PC operated by the user <b>0202</b> (technical sales A<b>1</b> <b>0110</b>) and operates on the web browser. Processing similar to the above-described processing is executed with respect to the framework emulator <b>0208</b> and the installation code issuance screen <b>0209</b>.</p><p id="p-0063" num="0062">The description editor <b>0207</b> contained in the back-end program <b>0205</b> is also stored in the HDD <b>255</b>. As described above, the back-end program <b>0205</b> is driven in cooperation with the program contained in the front-end resource <b>0204</b>. Each of the modules including the description number management <b>0210</b> contained in the back-end program <b>0205</b> is loaded on the RAM <b>253</b> from the HDD <b>255</b> and executed by the CPU <b>252</b> when a driving request is transmitted.</p><heading id="h-0011" level="2">&#x3c;MFP&#x3e;</heading><p id="p-0064" num="0063">The MFP <b>0203</b> serves as an information processing apparatus for processing information, an image processing apparatus for processing an image, and an image forming apparatus for forming an image on a sheet. <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> is a block diagram illustrating a hardware configuration of the MFP <b>0203</b>. <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> is a block diagram illustrating a software configuration of the MFP <b>0203</b>.</p><p id="p-0065" num="0064">The MFP <b>0203</b> includes a controller unit <b>300</b>, a printer <b>395</b>, a scanner <b>370</b>, an operation unit <b>312</b>, and a universal serial bus (USB) storage <b>314</b>. The controller unit <b>300</b> executes control processing for executing a copy function to cause the printer <b>395</b> to print and output image data read by the scanner <b>370</b>. The scanner <b>370</b> is an image reading unit, circuit, or device which reads an image from a document. The printer <b>395</b> is an image forming unit, circuit, or device which forms an image on a sheet (paper). The operation unit <b>312</b> is a receiving unit configured to receive an instruction from a user, and also functions as a display unit configured to display information to the user.</p><p id="p-0066" num="0065">The controller unit <b>300</b> includes a CPU <b>301</b>, and the CPU <b>301</b> boots an operating system (OS) by executing a boot program stored in a ROM <b>303</b>.</p><p id="p-0067" num="0066">The CPU <b>301</b> executes various types of processing on the OS by executing a program stored in the storage <b>304</b>. The execution of the CPU <b>301</b> is similar to the CPU <b>252</b> described above. A RAM <b>302</b> is used as a work area of the CPU <b>301</b>. The RAM <b>302</b> provides an image memory area for temporarily storing image data in addition to providing a work area. The storage <b>304</b> stores a program and image data.</p><p id="p-0068" num="0067">The ROM <b>303</b>, the RAM <b>302</b>, an operation unit I/F <b>306</b>, a network I/F <b>310</b>, a USB host I/F <b>313</b>, an image bus I/F <b>305</b> are connected to the CPU <b>301</b> via a system bus <b>307</b>. The operation unit I/F <b>306</b> is an interface with the operation unit <b>312</b> having a touch panel, and outputs image data to be displayed on the operation unit <b>312</b> to the operation unit <b>312</b>. Further, the operation unit I/F <b>306</b> transmits the information input by the user via the operation unit <b>312</b> to the CPU <b>301</b>. The network I/F <b>310</b> is an interface for connecting the MFP <b>0203</b> to the LAN. The USB host I/F <b>313</b> is an interface for communicating with the USB storage <b>314</b>. The USB host I/F <b>313</b> functions as an output unit configured to store data stored in the storage <b>304</b> in the USB storage <b>314</b>. Further, the USB host I/F <b>313</b> receives data stored in the USB storage <b>314</b> and transmits the data to the CPU <b>301</b>. The USB storage <b>314</b> is an external storage device for storing data, attachable to and detachable from the USB host I/F <b>313</b>. A plurality of USB devices including the USB storage <b>314</b> can be connected to the USB host I/F <b>313</b>. A real-time clock (RTC) <b>315</b> controls the current time. Time information controlled by the RTC <b>315</b> is used when a job input time is recorded. The image bus I/F <b>305</b> is a bus bridge which connects the system bus <b>307</b> with an image bus <b>308</b> for transmitting image data at high speed to convert a data format. The image bus <b>308</b> is configured of a peripheral component interconnect (PCI) bus or a bus compliant with a standard of the Institute of Electrical and Electronics Engineers (IEEE) 3394. A device I/F <b>320</b>, a scanner image processing unit <b>380</b>, and a printer image processing unit <b>390</b> are connected to the image bus <b>308</b>. The scanner <b>370</b> and the printer <b>395</b> are connected to the device I/F <b>320</b>, and the device I/F <b>320</b> executes synchronous/non-synchronous conversion of image data. The scanner image processing unit <b>380</b> corrects, processes, and edits image data input thereto. The printer image processing unit <b>390</b> executes correction and resolution conversion appropriate to the printer <b>395</b> on the image data to be printed and output.</p><p id="p-0069" num="0068">The CPU <b>301</b> loads a program stored in the storage <b>304</b> on the RAM <b>302</b>, and executes the program to implement each individual module illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>. <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> is a block diagram illustrating a software configuration of the MFP <b>0203</b>.</p><p id="p-0070" num="0069">As a software configuration of the MFP <b>0203</b>, the MFP <b>0203</b> includes a servlet service <b>354</b>, a user interface (UI) control unit <b>353</b>, an application execution control unit <b>355</b>, a storage control unit <b>356</b>, an application management unit <b>352</b>, a standard function control unit <b>351</b>, and a timer management unit <b>359</b>.</p><p id="p-0071" num="0070">The servlet service <b>354</b> accepts a request when the user accesses the MFP <b>0203</b> via the network I/F <b>310</b> by using the hyper-text transfer protocol (HTTP). The servlet service <b>354</b> functions as a module which allocates processing to a module (either the application management unit <b>352</b> or the standard function control unit <b>351</b>) depending on the URL accessed by the user.</p><p id="p-0072" num="0071">The UI control unit <b>353</b> is a module which displays a screen on the operation unit <b>312</b> and accepts an operation issued by the user. Then, the UI control unit <b>353</b> notifies the information about the operation to an appropriate module (either the application management unit <b>352</b> or the standard function control unit <b>351</b>). The application management unit <b>352</b> is a module which manages installation and activation of an expansion application <b>440</b> installed in the MFP <b>0203</b>.</p><p id="p-0073" num="0072">The application execution control unit <b>355</b> is a module which controls execution of an application activated by the application management unit <b>352</b>. Specifically, the application execution control unit <b>355</b> controls a virtual machine (VM) thread <b>415</b>, a VM system service <b>420</b>, a VM <b>430</b>, and the expansion application <b>440</b>.</p><p id="p-0074" num="0073">The storage control unit <b>356</b> is a module which records and manages a program of the expansion application <b>440</b> and setting information.</p><p id="p-0075" num="0074">The application execution control unit <b>355</b> accesses the storage control unit <b>356</b> to read out a program of an application. Further, each of the modules accesses the storage control unit <b>356</b> to refer to a setting value and execute setting.</p><p id="p-0076" num="0075">The standard function control unit <b>351</b> is a module which controls standard functions of the MFP <b>0203</b> such as a copy function and a fax function, and executes other controls necessary for the MFP <b>0203</b>, e.g., control of the USB host I/F <b>313</b>. Further, the standard function control unit <b>351</b> manages the executed copy function and the facsimile function as jobs, and requests the job execution history control unit <b>357</b> to record execution results of the jobs. In order to store the execution result of a job as a history in a storage, the job execution history control unit <b>357</b> requests the storage control unit <b>356</b> to record the history.</p><p id="p-0077" num="0076">The timer management unit <b>359</b> acquires current time information from the RTC <b>315</b> to detect passage of a specified time, and notifies the application management unit <b>352</b> of the information. Upon receipt of the notification from the timer management unit <b>359</b>, the application management unit <b>352</b> requests the application execution control unit <b>355</b> to execute timer processing of the application.</p><p id="p-0078" num="0077">Herein, a relationship between the OS, the VM, and the application will be described in detail. <figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram illustrating a hierarchical structure of the software installed in the MFP <b>0203</b>.</p><p id="p-0079" num="0078">A native program <b>410</b> for controlling the image processing units such as the printer, the fax, and the scanner operates on an OS <b>401</b> as an operating system. Further, the VM <b>430</b> serving as an execution environment of the expansion application <b>440</b> operates on the OS <b>401</b> as an operating system. The VM <b>430</b> is a module which understands and executes a program for controlling the expansion application <b>440</b>. The expansion application <b>440</b> always operates on the VM <b>430</b>. Different from a program operating on the CPU <b>301</b>, a program operating on the VM <b>430</b> operates according to an instruction dedicated to the VM <b>430</b>. This instruction is called &#x201c;bytecode&#x201d;. On the other hand, an instruction dedicated to the CPU <b>301</b> is called &#x201c;native code&#x201d;. The VM <b>430</b> sequentially interprets and processes the bytecode, so that the native code and the bytecode dedicated to the VM <b>430</b> are executed on the CPU <b>301</b>. There are a VM of one type which sequentially interprets and processes the bytecode as it is and a VM of another type which converts the bytecode into the native code to execute the converted code. Although the VM <b>430</b> according to the present exemplary embodiment is a VM of the former type, the VM <b>430</b> can also be of the latter type.</p><p id="p-0080" num="0079">Generally, an instruction executed on one CPU is not compatible with an instruction executed on a certain CPU if types of the CPUs are different. Similarly, an instruction executed on a certain VM is not compatible with an instruction executed by another VM if types of the VMs are different. Although the present exemplary embodiment is described based on the condition that the expansion application <b>440</b> is described in a language called &#x201c;Lua&#x201d;, the expansion application <b>440</b> may be described in another language. When Lua is used, a script described in Lua is converted into a bytecode dedicated to Lua, and this bytecode is executed on the VM <b>430</b> dedicated to Lua. Naturally, the bytecode dedicated to Lua cannot directly be executed by the CPU <b>301</b> because the bytecode is different from the instruction code directly executable by the CPU <b>301</b>. The VM <b>430</b> dedicated to Lua is configured of the instruction code dedicated to the CPU <b>301</b>, and function as a software module which sequentially interprets and executes the bytecode dedicated to Lua. Naturally, dedicated hardware which interprets and executes the bytecode dedicated to Lua can also be employed.</p><p id="p-0081" num="0080">The native program <b>410</b> includes native threads <b>414</b> for controlling the image processing units such as the printer, the fax, and the scanner and VM threads <b>415</b> for operating the VM <b>430</b>. The number of VM threads <b>415</b> corresponds to the number of VMs <b>430</b> exist. Herein, three threads, i.e., a VM thread A-<b>1</b> <b>411</b>, a VM thread A-<b>2</b> <b>412</b>, and a VM thread B-<b>1</b> <b>413</b>, are generated.</p><p id="p-0082" num="0081">A VM system service <b>420</b> is a utility library shared and used by the expansion applications <b>440</b>. A development speed of the expansion application <b>440</b> can be accelerated by calling a function of the VM system service <b>420</b> from the expansion application <b>440</b>. Further, the VM system service <b>420</b> can access each of the modules of the MFP <b>0203</b>. The VM system service <b>420</b> includes a standard VM system service <b>421</b> for providing a minimum operation of the VM and an expansion VM system service <b>422</b> for providing an access to each of the modules of the MFP <b>0203</b> and a function of the OS. The standard VM system service <b>421</b> also includes a function of loading the expansion application <b>440</b>. When the VM <b>430</b> executes an application programming interface (API) specified by a bytecode within the expansion application <b>440</b>, the VM system service <b>420</b> associated with that API is called. A rendering API for executing optional rendering on a screen of the operation unit <b>312</b> and a job control API for requesting execution of an optional job of the MFP <b>0203</b> such as a copy job or a scan job are provided to the expansion VM system service <b>422</b>.</p><p id="p-0083" num="0082">The VM <b>430</b> executes the expansion application <b>440</b>. The VM <b>430</b> is generated for each of the threads of the expansion application <b>440</b>. In <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a VM A-<b>1</b> <b>431</b> and a VM A-<b>2</b> <b>432</b> for executing two threads on an expansion application A <b>441</b> are generated. Further, in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a VM B-<b>1</b> <b>433</b> for executing one thread on an expansion application B <b>442</b> is generated.</p><p id="p-0084" num="0083">An icon of each expansion application <b>440</b> is displayed on a main menu screen displayed on the operation unit <b>312</b> of the MFP <b>0203</b>. The operation unit I/F <b>306</b> detects that the user has selected an icon via the operation unit <b>312</b> and transmits information on the detection to the CPU <b>301</b>. The CPU <b>301</b> receives the information and starts the expansion application <b>440</b> selected by the user.</p><p id="p-0085" num="0084">In the below-described exemplary embodiment, this mechanism (i.e., the VM system service <b>420</b> and the VM <b>430</b>) for executing the expansion application <b>440</b> on the MFP <b>0203</b> is called &#x201c;application framework&#x201d;.</p><heading id="h-0012" level="2">&#x3c;Client Terminal&#x3e;</heading><p id="p-0086" num="0085">The client terminal <b>0240</b> used by the user <b>0202</b> will be described as a representative example of the commonly-used client terminals included in the system according to the present exemplary embodiment. In addition, a configuration described hereinafter can also be applied to the client terminals used by the system manager <b>0102</b>, the tenant-A manager <b>0103</b>, the tenant-B manager <b>0104</b>, the tenant-C manager <b>0105</b>, and the system developer <b>0201</b>. <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> is a block diagram illustrating a hardware configuration of the client terminal <b>0240</b>.</p><p id="p-0087" num="0086">The client terminal <b>0240</b> is an external terminal which accesses the authoring system <b>0101</b>. The client terminal <b>0240</b> includes a controller unit <b>500</b>, an operation unit <b>510</b>, and a display unit <b>512</b>. The controller unit <b>500</b> is connected to and exchanges information with each piece of hardware via a system bus <b>509</b>. The controller unit <b>500</b> loads a program such as an OS or a web browser stored in a ROM <b>506</b> or a HDD <b>505</b> on a RAM <b>503</b>. The loaded program is sequentially processed by a CPU <b>502</b>. The operation unit <b>510</b> is a receiving unit configured to receive an operation performed by the user <b>0202</b>. The operation unit <b>510</b> is connected to an operation unit I/F <b>501</b>, so that information about the user operation received by the operation unit <b>510</b> is notified to the CPU <b>502</b> via the operation unit I/F <b>501</b>. The information about the operation is processed by a program executed by the CPU <b>502</b>. Through the above-described processing, the operation performed by the user <b>0202</b> is processed, and an operation result is displayed on the display unit <b>512</b> connected to the display unit I/F <b>504</b>, or output to the network connected to the network I/F <b>507</b>.</p><p id="p-0088" num="0087">In the present exemplary embodiment, a web browser is executed on the client terminal <b>0240</b>, and the user <b>0202</b> accesses the authoring system <b>0101</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> via the web browser. This client terminal <b>0240</b> may be a general PC or a mobile terminal such as a smartphone.</p><p id="p-0089" num="0088">Next, a case in which a description editor is executed by the client terminal <b>0240</b> on the web browser will be described. <figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram of a web browser which displays a description editor.</p><p id="p-0090" num="0089">A web browser <b>601</b> is software for connecting the client terminal <b>0240</b> to a web server, and can display a web page and execute a program. The web browser <b>601</b> can execute a JavaScript VM <b>603</b> on a web browser native program <b>602</b> serving as a native program for operating the web browser <b>601</b> itself. The JavaScript VM <b>603</b> is a program for executing JavaScript on the web browser <b>601</b>.</p><p id="p-0091" num="0090">A description editor <b>604</b> is a program described in JavaScript. The description editor <b>604</b> is an example of the description editor <b>0207</b> illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. The description editor <b>604</b> is executed on the JavaScript VM <b>603</b>. The description editor <b>604</b> is a program which provides an editing environment of the application.</p><p id="p-0092" num="0091">The description editor <b>604</b> also functions as an application framework emulator <b>605</b>. The application framework emulator <b>605</b> emulates an application framework for executing a program described in a language different from JavaScript on the web browser <b>601</b>. The application framework emulator <b>605</b> is an example of the framework emulator <b>0208</b> illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. In the present exemplary embodiment, the application framework emulator <b>605</b> emulates the execution environment of a language the same as the language of the application executed on the MFP <b>0203</b>. In addition, the application framework emulator <b>605</b> includes a VM system service emulator <b>607</b> and a VM emulator <b>606</b>. These emulators <b>606</b> and <b>607</b> are programs described in JavaScript, and the VM emulator <b>606</b> and the VM system service emulator <b>607</b> respectively emulate the operations of the VM <b>430</b> and the VM system service <b>420</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref> in JavaScript.</p><p id="p-0093" num="0092">A reproduction application <b>608</b> is an application (reproduction application) which operates based on a description customized by the user <b>0202</b>. The reproduction application <b>608</b> is configured in a same way as the application executed on the application framework of the MFP <b>0203</b>. In <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the reproduction application <b>608</b> is executed on the application framework emulator <b>605</b>. The reproduction application <b>608</b> includes a customizable information control <b>610</b> which executes processing with respect to an inquiry about customizable information from the VM system service <b>420</b>. The reproduction application <b>608</b> further includes a customizable information definition <b>611</b> and a description reproduction control <b>609</b> for reproducing a given description.</p><p id="p-0094" num="0093">A description <b>612</b> is data which retains the customization information edited by the user <b>0202</b> in a format reproducible by the reproduction application <b>608</b>. When the user <b>0202</b> inputs content of editing instructions to an edit screen provided by the description editor <b>604</b>, a description <b>612</b> is generated by the description editor <b>604</b>. The description editor <b>604</b> reproduces the generated description <b>612</b> through the use of the reproduction application <b>608</b> operating on the application framework emulator <b>605</b>. Through the above-described processing, a screen for checking the operation of the customized application is provided to the user <b>0202</b> via the web browser <b>601</b>.</p><p id="p-0095" num="0094">In the present exemplary embodiment, JavaScript is used as a programming language for describing the description editor <b>604</b>. However, the description editor <b>604</b> may be configured of another code such as WebAssembly directly executable on the web browser <b>601</b>.</p><p id="p-0096" num="0095">Further, the reproduction application executed by the description editor <b>604</b> needs not be the same as the reproduction application executed by the MFP <b>0203</b>. For example, only a description reproduction control portion of the reproduction application, which directly relates to customization, may be extracted and loaded as the application for checking the operation.</p><p id="p-0097" num="0096">Next, the description editor <b>604</b> is described in detail. <figref idref="DRAWINGS">FIG. <b>5</b>B</figref> is a block diagram illustrating a software configuration of the description editor <b>604</b> executed by the client terminal <b>0240</b>.</p><p id="p-0098" num="0097">The description editor <b>604</b> is a program described in JavaScript, which is downloaded by the web browser <b>601</b> by accessing a predetermined URL and executed by the web browser <b>601</b>. The description editor <b>604</b> is configured of an overall control unit <b>551</b>, a screen structure unit <b>552</b>, a framework emulator control unit <b>556</b>, a server communication unit <b>557</b>, a description generation unit <b>555</b>, a customization component information management unit <b>553</b>, and a customization component information editing unit <b>554</b>.</p><p id="p-0099" num="0098">The overall control unit <b>551</b> controls the entire description editor <b>604</b>. The overall control unit <b>551</b> operates in cooperation with each of the blocks to control the description editor <b>604</b>. The screen structure unit <b>552</b> controls a screen structure of the description editor <b>604</b>. The screen structure unit <b>552</b> updates a hyper-text markup language (HTML) element and cascading style sheets (CSS) (screen information), which constitute the screen illustrated in <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>. Further, the screen structure unit <b>552</b> receives an operation performed by the user <b>0202</b> and notifies the overall control unit <b>551</b> of the content of the operation (editing operation). Upon receipt of the notification of the content of the operation, the overall control unit <b>551</b> executes control appropriately. In a case where the notification of the operation is the information about the operation performed on a display area <b>701</b> of the application screen image, the overall control unit <b>551</b> notifies the framework emulator control unit <b>556</b> of the information about the operation. For example, when the user <b>0202</b> clicks the display area <b>701</b> of the application screen image, information about a click operation performed on a predetermined place in the application execution screen is notified the framework emulator control unit <b>556</b>. The framework emulator control unit <b>556</b> executes a reproduction application which reproduces a customized description on the web browser <b>601</b>. Because the reproduction application is configured to operate on the application framework of the MFP <b>0203</b>, the reproduction application cannot directly be executed on the web browser <b>601</b>. The framework emulator control unit <b>556</b> executes emulation to enable the application for the MFP <b>0203</b> to be executed on the web browser <b>601</b>. The framework emulator control unit <b>556</b> receives the notification of a screen operation from the overall control unit <b>551</b>, and notifies the application executed within the emulator of the information about the operation. The application notified of the information about the operation updates a screen according to the operation. The screen is updated through the use of a screen rendering API within the application framework. This API is replaced with a screen image rendering API within the web browser <b>601</b> by the framework emulator, so that a display screen of the application is displayed on the display area <b>701</b> of the application screen image in <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>. The customization component information editing unit <b>554</b> acquires information about customizable components from the reproduction application, converts the component information into a format usable by the description editor <b>604</b> based on the information, and retains the converted component information. Based on the information about components, the screen structure unit <b>552</b> configures a component list <b>702</b> and a display area <b>706</b> of the customization setting information. The customization component information management unit <b>553</b> manages the setting information about customization components currently set. Based on this information, the screen structure unit <b>552</b> configures the display area <b>706</b> for the customization setting information. The description generation unit <b>555</b> generates a description based on the current setting information retained by the customization component information editing unit <b>554</b>. This description is notified the reproduction application via the framework emulator control unit <b>556</b>. Through the above-described configuration, the reproduction application reproduces the description, so that the display area <b>701</b> of the application screen image in <figref idref="DRAWINGS">FIG. <b>7</b>A</figref> is updated.</p><p id="p-0100" num="0099">The server communication unit <b>557</b> controls communication with the server apparatus. Through the communication with the server apparatus, the component setting information retained by the customization component information editing unit <b>554</b> is saved in the server apparatus, and a reproduction application executed by the framework emulator control unit <b>556</b> is downloaded. With this configuration, even if the number of pieces of customizable information of the reproduction application is increased or decreased or operations thereof are changed, editing functions appropriate for the reproduction application can be provided without changing the editing environment provided by the description editor <b>604</b>.</p><heading id="h-0013" level="2">&#x3c;Management of Description&#x3e;</heading><p id="p-0101" num="0100">Generation and registration of the description in steps S<b>904</b> to S<b>907</b> in <figref idref="DRAWINGS">FIG. <b>9</b></figref> will be described in detail. <figref idref="DRAWINGS">FIG. <b>14</b></figref> is a sequence diagram illustrating details of generation of the description in steps S<b>904</b> to S<b>907</b>.</p><p id="p-0102" num="0101">In the processing illustrated in <figref idref="DRAWINGS">FIG. <b>14</b></figref>, when the client terminal <b>0240</b> accesses the authoring system <b>0101</b> via the web browser <b>601</b>, in step S<b>903</b>, the authoring system <b>0101</b> provides the description editor <b>0207</b> and the framework emulator <b>0208</b> contained in the front-end resource <b>0204</b> to the client terminal <b>0240</b>. In a case where a description is to be newly created, in step S<b>1401</b>, the description editor <b>0207</b> transmits a notification of creation of a new description to the description number management <b>0210</b> contained in the back-end program <b>0205</b> of the authoring system <b>0101</b>. In step S<b>1402</b>, the description number management <b>0210</b> that receives the notification generates identifier information which does not overlap with identification information about any existing application and identification information about any existing description. Next, in step S<b>1403</b>, the back-end program <b>0205</b> identifies the tenant of the system user <b>0202</b> based on the access information and determines a storage destination of the description. Then, in step S<b>1404</b>, the back-end program <b>0205</b> acquires version information about the reproduction application corresponding to the description to be created. In step S<b>1405</b>, the back-end program <b>0205</b> generates meta data from the identifier information and the version information about the reproduction application. Then, in step S<b>1406</b>, the back-end program <b>0205</b> transmits the meta data to the description editor <b>0207</b> of the client terminal <b>0240</b>. When the existing description is to be edited, in step S<b>1410</b>, the description editor <b>0207</b> transmits a reading request of the description to the description pool A<b>1</b> <b>0113</b>. Then, in step S<b>1411</b>, the authoring system <b>0101</b> transmits the specified description and meta data to the description editor <b>0207</b>. When a new description is to be created based on the existing description, meta data is created in a same way as the processing in steps S<b>1401</b> to S<b>1406</b> executed when a description is newly created.</p><p id="p-0103" num="0102">After a description is newly created or a description is read, in steps S<b>1420</b> to S<b>1424</b>, customization of the description and operation checking are executed by the description editor <b>0207</b> and the framework emulator <b>0208</b>. Customization of the description will be described below in detail.</p><p id="p-0104" num="0103">After the description is customized, in step S<b>1407</b>, the system user <b>0202</b> performs an operation for storing the customized description. In step S<b>1408</b>, the description editor <b>0207</b> accepts the storage operation and transmits the description to the authoring system <b>0101</b>. The authoring system <b>0101</b> stores the description in a corresponding storing destination.</p><p id="p-0105" num="0104">As described above, the description is managed by the authoring system <b>0101</b>. <figref idref="DRAWINGS">FIG. <b>16</b></figref> is a diagram illustrating an example of a management table of the description number management <b>0210</b>.</p><p id="p-0106" num="0105">As illustrated in the management table in <figref idref="DRAWINGS">FIG. <b>16</b></figref>, the authoring system <b>0101</b> stores the information related to the description and appropriately manages the description.</p><p id="p-0107" num="0106">The pieces information described in respective columns, a description number column <b>1606</b>, a description name column <b>1607</b>, a version column <b>1608</b>, a date of update column <b>1609</b>, a version of reproduction application column <b>1610</b>, an author column <b>1611</b>, a publication range column <b>1612</b>, and an installation record column <b>1613</b> are managed with the management table.</p><p id="p-0108" num="0107">The pieces of information described in the description number column <b>1606</b>, the author column <b>1611</b>, and the version of reproduction application column <b>1610</b> are registered when a new description number is issued. The information issued by the description number management <b>0210</b> is stored in the description number column <b>1606</b>. The information about the user who has requested issuance of the description number and operated the description editor <b>0207</b> is registered in the author column <b>1611</b>. The information about a version of the current reproduction application corresponding to the description is registered in the version of reproduction application column <b>1610</b>.</p><p id="p-0109" num="0108">The pieces of information described in the description name column <b>1607</b>, the date of update column <b>1609</b>, and the version of reproduction application column <b>1610</b> are updated when the description is edited and stored. A name specified by the user <b>0202</b> is registered in the description name column <b>1607</b>. A numerical value that expresses a date of update of the description is registered in the date of update column <b>1609</b>.</p><p id="p-0110" num="0109">The information about a range of allowed users who can access a stored description and edit or duplicate the description is registered in the publication range column <b>1612</b>. For example, ranges such as &#x201c;all of users&#x201d;, &#x201c;users belonging to the same tenant&#x201d;, and &#x201c;only one individual&#x201d;, can be specified as the publication range. The information registered in the publication range column <b>1612</b> can be changed at an optional timing, e.g., a timing when the description is stored.</p><p id="p-0111" num="0110">A numerical value that expresses the number of times the application using a registered description is issued and installed in the apparatus used by the client is registered in the installation record column <b>1613</b>. The information registered in the installation record column <b>1613</b> can be used as a material for understanding the market needs and can be also used for stocktaking processing of description numbers. For example, the authoring system <b>0101</b> checks the installation record column <b>1613</b> of the management table when a description stored in the description pool A<b>1</b> <b>0113</b> is to be deleted. Then, the description number is released if a numerical value registered in the installation record column <b>1613</b> is &#x201c;0&#x201d;. If that numerical value is not &#x201c;0&#x201d;, the description number is maintained without being released. The released description number can be allocated to e new description when the new description is generated. In other words, the description number can be used again.</p><p id="p-0112" num="0111">For example, because description information <b>1603</b> has no record of installation, a description number &#x201c;F<b>00</b>C&#x201d; is released when the description is deleted. Then, the description number &#x201c;F<b>00</b>C&#x201d; is used again when another description information <b>1605</b> is created. On the other hand, a description number will not be used again if description information (i.e., description information <b>1601</b>, <b>1602</b>, or <b>1604</b>) having a record of installation is deleted.</p><heading id="h-0014" level="2">&#x3c;Processing of Editing Description&#x3e;</heading><p id="p-0113" num="0112">First, an execution screen of the description editor <b>604</b> for creating a custom application will be described. <figref idref="DRAWINGS">FIG. <b>7</b>A</figref> is a diagram illustrating a screen of the description editor <b>604</b>. When the user <b>0202</b> accesses the authoring system <b>0101</b> via the web browser <b>601</b> and starts customization of the application, a screen <b>700</b> is displayed on the web browser <b>601</b>. The screen <b>700</b> is configured of HTML, JavaScript, and css downloaded from the server apparatus, so that the web browser <b>601</b> interprets the respective pieces of information and executes rendering. As a result, the screen <b>700</b> is displayed thereon. In the present exemplary embodiment, creation of a custom application for displaying an easy-to-select copy execution button will be described as an example of the processing executed in response to a demand of a client. A plurality of items (objects) is arranged on the screen <b>700</b>, and an editing environment of the application is provided to the user <b>0202</b>. Main constituent elements of the screen <b>700</b> will be described below.</p><p id="p-0114" num="0113">The display area <b>701</b> displays an image in a case where the application (application being edited) which reflects the content customized by the user <b>0202</b> is executed. In the present exemplary embodiment, although the display area <b>701</b> is configured of an HTML canvas element, the display area <b>701</b> may be configured of another HTML element which can be rendered. Through the above-described configuration, the user <b>0202</b> can customize the application while looking at the display area <b>701</b> to check whether desired customization is executed.</p><p id="p-0115" num="0114">The component list <b>702</b> is a pull-down display object which displays a list of customizable (addable) display components. The user <b>0202</b> can customize the application by selecting a desired component from the component list <b>702</b> and adding the component to the application. Examples of the editable components include a button that can be associated with a function, title information, and message information.</p><p id="p-0116" num="0115">A result obtained by adding the component is promptly reflected on the display area <b>701</b>, so that the user <b>0202</b> can easily check the customization state.</p><p id="p-0117" num="0116">The display area <b>706</b> is an area for displaying customization setting information, and a component being currently set and information set to the component are displayed on the display area <b>706</b>. <figref idref="DRAWINGS">FIG. <b>7</b>A</figref> illustrates a state where a title component <b>703</b>, a message component <b>704</b>, and a button component <b>705</b> are being set. The user <b>0202</b> can customize the component by editing the information about the component displayed on the display area <b>706</b>. For example, it is assumed that a character string &#x201c;Custom Application&#x201d; displayed on the title component <b>703</b> is edited and changed to &#x201c;Test Application&#x201d;. In this case, the edited content is reflected on the display area <b>701</b>, so that the character string &#x201c;Custom Application&#x201d; is updated with a character string &#x201c;Test Application&#x201d;. Further, a size or a layout of the component can also be changed by editing the parameter of the component.</p><p id="p-0118" num="0117">Next, processing for executing the description editor <b>604</b> will be described. <figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram illustrating a sequence of processing executed by the software modules of the description editor <b>604</b>. The respective pieces of processing are implemented by the controller unit <b>500</b>. More specifically, the CPU <b>502</b> acquires a program of the web browser <b>601</b> from the ROM <b>506</b>, loads the program on the RAM <b>503</b> and executes the description editor <b>604</b> via the JavaScript VM <b>603</b>, so that the respective pieces of processing can be implemented.</p><p id="p-0119" num="0118">In the processing executed by the description editor <b>604</b>, first in step S<b>800</b>, the overall control unit <b>551</b> requests the screen structure unit <b>552</b> to configure a screen. The screen structure unit <b>552</b> configures an editing screen as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>. At this time, the component list <b>702</b> and the display area <b>706</b> for the customization setting information are configured with empty spaces because the information about customizable components has not been fixed. Next, in step S<b>801</b>, the overall control unit <b>551</b> requests the server communication unit <b>557</b> to download a reproduction application. The server communication unit <b>557</b> receives the request and downloads the reproduction application from the server apparatus. In step S<b>802</b>, the server communication unit <b>557</b> notifies the downloaded reproduction application to the overall control unit <b>551</b>. In step S<b>803</b>, the overall control unit <b>551</b> requests the framework emulator control unit <b>556</b> to execute the reproduction application. The framework emulator control unit <b>556</b> executes the requested reproduction application. In step S<b>804</b>, the overall control unit <b>551</b> requests the framework emulator control unit <b>556</b> to acquire the information about customizable components. In step S<b>805</b>, the framework emulator control unit <b>556</b> receives the request, and requests the reproduction application to provide the information about customizable components. Then, the framework emulator control unit <b>556</b> returns the acquired information about customizable components to the overall control unit <b>551</b>. In step S<b>806</b>, the overall control unit <b>551</b> notifies the customization component information management unit <b>553</b> of the acquired information about customizable components. Based on the notified information, the customization component information management unit <b>553</b> converts the component information into data in a format processible by the description editor <b>604</b>. Next, in step S<b>807</b>, the overall control unit <b>551</b> requests the screen structure unit <b>552</b> to update the screen. At this time, because the information about customizable components is fixed, the information is reflected on the component list <b>702</b> and the display area <b>706</b> for the customization setting information, so that the user can starts customizing the application. In step S<b>808</b>, the user adds a component from the component list <b>702</b>. In step S<b>809</b>, the screen structure unit <b>552</b> receives the notification of change, and notifies the overall control unit <b>551</b> of information about the user operation. In step S<b>810</b>, the overall control unit <b>551</b> notifies the customization component information editing unit <b>554</b> of a change of the setting value. In step S<b>811</b>, the customization component information editing unit <b>554</b> checks the set value, and notifies the current setting value to the overall control unit <b>551</b>. In step S<b>812</b>, the overall control unit <b>551</b> requests the description generation unit <b>555</b> to generate a description based on the current setting value. In step S<b>813</b>, the description generation unit <b>555</b> generates a description based on the current setting value and notifies the overall control unit <b>551</b> of the description. In step S<b>814</b>, the overall control unit <b>551</b> notifies the framework emulator control unit <b>556</b> of the description. The framework emulator control unit <b>556</b> reproduces the description through the use of the reproduction application, so that the display area <b>701</b> of the application screen image is updated Lastly, the overall control unit <b>551</b> requests the server communication unit <b>557</b> to store the edited customization component setting information. Upon receipt of the request, the server communication unit <b>557</b> requests the server apparatus to store the customization component setting information. Through the above-described processing, customization information about the application set by the user <b>0202</b> is stored in the server apparatus. This information is loaded when the user <b>0202</b> executes customization of the application next time, so that the user <b>0202</b> can customize the application in a state where the information edited by the user <b>0202</b> is reflected thereon.</p><p id="p-0120" num="0119">Next, a structure of a description will be described. <figref idref="DRAWINGS">FIGS. <b>11</b>A and <b>11</b>B</figref> are collectively a diagram illustrating a description. <figref idref="DRAWINGS">FIGS. <b>11</b>A and <b>11</b>B</figref> collectively illustrate an example of a description corresponding to the application setting information customized in <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>. In other words, <figref idref="DRAWINGS">FIGS. <b>11</b>A and <b>11</b>B</figref> collectively illustrate a description corresponding to the application which displays a copy execution confirmation screen and executes a copy job when an &#x201c;OK&#x201d; button is pressed. In the present exemplary embodiment, the content of the description is described in a JavaScript Object Notation (JSON) format having high compatibility with a web browser. Another format can also be used as a format of the description.</p><p id="p-0121" num="0120">The description generally consists of panel information <b>1101</b> and <b>1102</b>. Component information and customization information of each component are stored in the panel information <b>1101</b>. Component information such as title component information <b>1103</b>, message component information <b>1109</b>, OK button component information <b>1110</b>, and cancel button component information <b>1111</b> are included in the panel information <b>1101</b>. Customization information of each component such as component ID information <b>1104</b>, component setting information <b>1105</b>, component parameter information <b>1106</b>, component parameter data type <b>1107</b>, and component parameter data <b>1108</b> are included in the panel information <b>1101</b>. The component ID information <b>1104</b> is identification information indicating what component the customization information is about. In this example, the component ID information <b>1104</b> describes that the customization information is about a &#x201c;title&#x201d; component. The component setting information <b>1105</b> describes setting information about the component. The component parameter information <b>1106</b> describes customization information about a parameter of the component. The component parameter data type <b>1107</b> describes a data type of the parameter of the component. The component parameter data <b>1108</b> describes a setting value of the parameter of the component. When &#x201c;string&#x201d; is set to data_type of the component parameter data type <b>1107</b>, information about a localized character string is specified thereby.</p><p id="p-0122" num="0121">Accordingly, the title component information <b>1103</b> describes the &#x201c;title&#x201d; component and the &#x201c;title&#x201d; parameter, and a localized character string &#x201c;Custom Application&#x201d; is set as a setting value of the &#x201c;title&#x201d; parameter. Customization information is similarly set with respect to the message component information <b>1109</b>, the OK button component information <b>1110</b>, and the cancel button component information <b>1111</b>.</p><p id="p-0123" num="0122">The information for executing a job is stored in the panel information <b>1102</b>. In job execution component information <b>1112</b>, &#x201c;execute_job&#x201d; is specified as a component for executing a job <b>1113</b>. As the information about the job execution component information <b>1112</b>, parameter setting values such as a job identification ID <b>1114</b> which describes a type of a job to be executed and a job parameter <b>1115</b> of the job are included in the panel information <b>1102</b>. <figref idref="DRAWINGS">FIG. <b>11</b></figref> shows a combination of <figref idref="DRAWINGS">FIGS. <b>11</b>A and <b>11</b>B</figref>. In <figref idref="DRAWINGS">FIGS. <b>11</b>A and <b>11</b>B</figref>, because an application for executing a copy job is illustrated as the example, &#x201c;copy&#x201d; is specified in the job identification ID <b>1114</b>. A parameter applied when that job is executed can be registered in the job parameter <b>1115</b>. Herein, the number of copies <b>1116</b> and a color mode <b>1117</b> are registered.</p><p id="p-0124" num="0123">For example, the description described as an example is read by the description reproduction control <b>609</b> of the reproduction application. Then, the reproduction application configures a screen according to the description, and shifts a screen or controls execution of a job according to the user operation.</p><heading id="h-0015" level="2">&#x3c;Installation of Custom Application&#x3e;</heading><p id="p-0125" num="0124">Processing for installing a custom application, executed in step S<b>912</b> in <figref idref="DRAWINGS">FIG. <b>9</b></figref>, will be described in detail. A description registered in the authoring system <b>0101</b> is packaged in step S<b>915</b>, provided to the MFP <b>0203</b> as a custom application in step S<b>911</b>, and installed in the MFP <b>0203</b> in step S<b>912</b>. When the custom application is installed, the reproduction application is executed on the MFP <b>0203</b>, and the description is read by a script, so that the information specified by the description is reproduced. Then, an execution screen illustrated in <figref idref="DRAWINGS">FIG. <b>7</b>B</figref> is displayed thereon. <figref idref="DRAWINGS">FIG. <b>7</b>B</figref> is a diagram illustrating an execution screen of the custom application displayed on the MFP <b>0203</b>. This execution screen is identical to the execution screen displayed on the display area <b>701</b> when the description is edited. This indicates that the custom application operates normally. Hereinafter, processing relating to installation of the custom application will be described in detail.</p><p id="p-0126" num="0125">First, a structure of an installation package provided to the MFP <b>0203</b> from the authoring system <b>0101</b> will be described. <figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram illustrating a data structure of the installation package.</p><p id="p-0127" num="0126">An installation package <b>1000</b> is package data which includes a signed description <b>1052</b> and a signed application <b>1001</b>.</p><p id="p-0128" num="0127">The signed application <b>1001</b> includes a reproduction application <b>1002</b> consisting of a script <b>1004</b>, a resource <b>1005</b>, and meta information <b>1006</b>, and an application signature <b>1003</b>. In the present exemplary embodiment, the reproduction application the same as the reproduction application retained by the description editor <b>604</b> is used.</p><p id="p-0129" num="0128">The signed description <b>1052</b> consists of a description <b>1053</b>, a description meta information <b>1054</b>, and a description signature <b>1055</b>. The description <b>1053</b> is data generated by the description editor <b>604</b>, which defines behavior of the application customized by the user. Details of the description <b>1053</b> has been described in the above with reference to <figref idref="DRAWINGS">FIGS. <b>11</b>A and <b>11</b>B</figref>. The description meta information <b>1054</b> is information which describes an identifier (description identifier), a version, and an application name of the custom application. The description signature <b>1055</b> is signature data which guarantees integrity of the description <b>1053</b> and the description meta information <b>1054</b>. The description signature <b>1055</b> is generated by using a signature key different from the signature key used for the application signature <b>1003</b>. This signature key is retained by the authoring system <b>0101</b>, and signature data, i.e., the description signature <b>1055</b>, is generated by the description signature affixation <b>0211</b>.</p><p id="p-0130" num="0129">The processing for installing the above-described installation package <b>1000</b> in the MFP <b>0203</b> will be described in detail. <figref idref="DRAWINGS">FIG. <b>12</b></figref> is a diagram illustrating an application structure retained in the storage of the MFP <b>0203</b> after the custom application is installed in the MFP <b>0203</b> and an installation package corresponding thereto. An installation package <b>1000</b> is illustrated on the left side in <figref idref="DRAWINGS">FIG. <b>12</b></figref>, and an installed application <b>1200</b> is illustrated on the right side in <figref idref="DRAWINGS">FIG. <b>12</b></figref>. A structure of the installation package <b>1000</b> has been described as the above. The installed application <b>1200</b> consists of a script <b>1201</b>, a resource <b>1202</b>, a description <b>1203</b>, a meta information <b>1204</b>, and a second meta information <b>1205</b>. In the installation processing of the application executed by the MFP <b>0203</b>, data within the installation package <b>1000</b> is read out and reconfigured on the storage of the MFP <b>0203</b>. Specifically, the script <b>1004</b> within the installation package <b>1000</b> is arranged as the script <b>1201</b>. The resource <b>1005</b> within the installation package <b>1000</b> is arranged as the installed resource <b>1202</b>. Further, the description <b>1053</b> within the installation package <b>1000</b> is arranged as the installed description <b>1203</b>.</p><p id="p-0131" num="0130">In addition, the meta information <b>1204</b> is stored as the information (identifier) which uniquely identifies the installed application. In other words, the meta information <b>1204</b> is used for distinguishing the application from another application installed in the MFP <b>0203</b>. Moreover, the meta information <b>1204</b> is used for specifying the application as a target of version upgrade when a version of the application is upgraded.</p><p id="p-0132" num="0131"><figref idref="DRAWINGS">FIG. <b>15</b>A</figref> is a diagram illustrating management of meta data of the application package and application data of the MFP <b>0204</b>. <figref idref="DRAWINGS">FIG. <b>15</b>B</figref> is a table illustrating the correspondence between the meta data and data within the MFP <b>0203</b>. The MFP <b>0203</b> uniquely and identifiably manages each of the applications by retaining data illustrated in <figref idref="DRAWINGS">FIG. <b>15</b>B</figref>. In a case where a standard application is to be installed, meta information associated with the application within the installation package can be stored as the meta information <b>1204</b>. In other words, the standard application refers to an application different from the custom application in which a description is combined with a reproduction application. For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>15</b>B</figref>, applications <b>1</b> and <b>2</b> respectively retain &#x201c;AppNo: <b>0001</b>&#x201d; and &#x201c;AppNo: <b>0002</b>&#x201d; as the information (application identifier (ID)) described in an application meta data column <b>1504</b>, so that the applications <b>1</b> and <b>2</b> can be distinguished from one another. Thus, the applications <b>1</b> and <b>2</b> can uniquely be identified by storing the application meta data in the meta information <b>1204</b>.</p><p id="p-0133" num="0132">On the other hand, in a case where a custom application created by the authoring system <b>0101</b> is to be installed, the application cannot uniquely be identified by meta information associated with the application. For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>15</b>B</figref>, both of custom applications A and B retain &#x201c;AppNo: FFFF&#x201d; as the information described in the application meta data column <b>1504</b>. Thus, the custom applications A and B cannot be distinguished from one another. This phenomenon arises because the custom applications A and B use the same reproduction application. Therefore, in the present exemplary embodiment, in a case where the custom application is to be installed, the meta information <b>1006</b> of the application stored in the meta information <b>1204</b> is rewritten and changed with the description meta information <b>1054</b>. As illustrated in <figref idref="DRAWINGS">FIG. <b>15</b>B</figref>, because the custom applications A and B respectively retain &#x201c;DesNo: F<b>00</b>A&#x201d; and &#x201c;DesNo: F<b>00</b>B&#x201d; as the information described in the description meta data column <b>1505</b>, the custom applications A and B can be distinguished from one another. Thus, the application meta data written into the meta information <b>1204</b> is rewritten and changed with the description meta data. In this way, the custom applications A and B can uniquely be distinguished from one another. Further, in the present exemplary embodiment, as illustrated in the data column <b>1506</b> within MFP <b>0203</b>, the directory of the application is generated based on the information described in the meta information <b>1204</b>. Thus, the directories of a plurality of applications overlap with each other if the information described in the meta information <b>1204</b> of the plurality of applications overlaps with each other. However, because the above-described rewriting processing is executed previously, all of the applications can appropriately be managed with different directories.</p><p id="p-0134" num="0133">Further, when the custom application is to be installed, the meta information <b>1006</b> of the application is stored as the second meta information <b>1205</b> in addition to the meta information <b>1204</b> used as an identifier of the installed application. The meta information <b>1006</b> is stored for the purpose of retaining the version information and the application name of the reproduction application.</p><p id="p-0135" num="0134">Next, control processing executed when the application package is installed will be described. <figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart illustrating processing for installing the application package. The processing in <figref idref="DRAWINGS">FIG. <b>13</b></figref> is processing of the application management unit <b>352</b>. In other words, the processing is implemented by the controller unit <b>300</b>. More specifically, the CPU <b>301</b> loads a program stored in the ROM <b>303</b> on the RAM <b>302</b> and executes the program to implement the processing.</p><p id="p-0136" num="0135">First, in step S<b>1302</b>, the application management unit <b>352</b> transmits an installation request through the use of an optional installation unit.</p><p id="p-0137" num="0136">In a case where installation is started through the use of the custom application distribution system <b>0213</b> in step S<b>1311</b>, then in step S<b>1312</b>, the application management unit <b>352</b> starts a custom application installer. In step S<b>1313</b>, the application management unit <b>352</b> accepts an installation code input by the system user <b>0202</b> or a user of the MFP <b>0203</b>.</p><p id="p-0138" num="0137">This processing corresponds to the processing in step S<b>910</b>. In step S<b>1314</b>, the application management unit <b>352</b> transmits an installation request to the custom application distribution system <b>0213</b> by using the input installation code. The installation code can be input through the use of an input method using a software keyboard of the operation unit <b>312</b>, for example. However, the installation code may be input through the use of another method. For example, the user may access the web page provided by the MFP <b>0203</b> from an information processing apparatus such as a PC and transmit the content input via a keyboard to the MFP <b>0203</b>. Alternatively, the user may input the installation code by reading a sheet on which the installation code or information corresponding to the installation code is described through the use of the scanner <b>370</b>.</p><p id="p-0139" num="0138">When installation of a standard application is started in step S<b>1315</b>, then in step S<b>1316</b>, the application management unit <b>352</b> starts an application installer. In step S<b>1317</b>, the application management unit <b>352</b> accepts selection of the application to be installed from the user of the MFP <b>0203</b>. In step S<b>1318</b>, the application management unit <b>352</b> transmits an installation request for installing the selected application to the application server.</p><p id="p-0140" num="0139">When installation using a preinstalled application is started in step S<b>1319</b>, then in step S<b>1320</b>, the application management unit <b>352</b> executes a pre-installer. In step S<b>1321</b>, the activated pre-installer transmits an installation request to an internal storage. As a response to the installation request transmitted in step S<b>1302</b>, in step S<b>1303</b>, the application management unit <b>352</b> receives the installation package of the application. In step S<b>1304</b>, the application management unit <b>352</b> determines a configuration of the application included in the received installation package.</p><p id="p-0141" num="0140">If the configuration of the application cannot be determined (FAIL IN DETERMINATION in step S<b>1304</b>), the application management unit <b>352</b> determines that installation has failed, and the processing ends with an error.</p><p id="p-0142" num="0141">If the configuration of the application is a standard application (FIRST CONFIGURATION in step S<b>1304</b>), the processing proceeds to step S<b>1305</b>. In step S<b>1305</b>, the application management unit <b>352</b> executes verification of the application. In the verification, the application management unit <b>352</b> uses the application signature <b>1003</b> to check whether unauthorized information is included in the script <b>1004</b>, the resource <b>1005</b>, and the meta information <b>1006</b> of the application.</p><p id="p-0143" num="0142">If verification has failed (NO in step S<b>1305</b>), the application management unit <b>352</b> determines that installation has failed, and the processing ends with an error. If verification has succeeded (YES in step S<b>1305</b>), the processing proceeds to step S<b>1306</b>. In step S<b>1306</b>, the application management unit <b>352</b> executes installation of the application.</p><p id="p-0144" num="0143">If the configuration of the application is the application created by the authoring system <b>0101</b> (SECOND CONFIGURATION in step S<b>1304</b>), the processing proceeds to step S<b>1307</b>. In step S<b>1307</b>, the application management unit <b>352</b> executes verification of the application. In the verification, the application management unit <b>352</b> uses the application signature <b>1003</b> of the reproduction application to check whether the description <b>1053</b> and the description meta information <b>1054</b> of the reproduction application are authorized information.</p><p id="p-0145" num="0144">If verification has failed (NO in step S<b>1307</b>), the application management unit <b>352</b> determines that installation has failed, and the processing ends with an error. If verification has succeeded (YES in step S<b>1307</b>), the processing proceeds to step S<b>1308</b>. In step S<b>1308</b>, the application management unit <b>352</b> uses the description signature <b>1055</b> to verify whether unauthorized information is included in the description <b>1303</b> and the description meta information <b>1304</b>. If verification has failed (NO in step S<b>1308</b>), the application management unit <b>352</b> determines that installation has failed, and the processing ends with an error. If verification has succeeded (YES in step S<b>1308</b>), the processing proceeds to step S<b>1309</b>. In step S<b>1309</b>, the application management unit <b>352</b> executes processing for replacing &#x201c;AppNo&#x201d; acquired from the meta data of the reproduction application with &#x201c;DesNo&#x201d; described in the meta data of the description. In step S<b>1310</b>, the application management unit <b>352</b> executes installation of the reproduction application and the description.</p><heading id="h-0016" level="2">&#x3c;Remarks&#x3e;</heading><p id="p-0146" num="0145">As described above, the authoring system <b>0101</b> provides an environment where the application can easily be edited and distributed. With this configuration, a person in charge such as a service engineer or a technical sales person can create a custom application, so that an application desired by a client can be provided promptly.</p><p id="p-0147" num="0146">Further, the authoring system <b>0101</b> manages the information (specifically, an identifier) of the description in addition to the information (specifically, an identifier) of the reproduction application. Therefore, it is possible to appropriately manage the custom applications even if the types of the custom applications are increased in number in proportion to the number of demands of the clients.</p><p id="p-0148" num="0147">Embodiment(s) of the disclosure can also be realized by a computer of a system or apparatus that reads out and executes computer executable instructions (e.g., one or more programs) recorded on a storage medium (which may also be referred to more fully as a &#x2018;non-transitory computer-readable storage medium&#x2019;) to perform the functions of one or more of the above-described embodiment(s) and/or that includes one or more circuits (e.g., application specific integrated circuit (ASIC)) for performing the functions of one or more of the above-described embodiment(s), and by a method performed by the computer of the system or apparatus by, for example, reading out and executing the computer executable instructions from the storage medium to perform the functions of one or more of the above-described embodiment(s) and/or controlling the one or more circuits to perform the functions of one or more of the above-described embodiment(s). The computer may comprise one or more processors (e.g., central processing unit (CPU), micro processing unit (MPU)) and may include a network of separate computers or separate processors to read out and execute the computer executable instructions. The computer executable instructions may be provided to the computer, for example, from a network or the storage medium. The storage medium may include, for example, one or more of a hard disk, a random-access memory (RAM), a read only memory (ROM), a storage of distributed computing systems, an optical disk (such as a compact disc (CD), digital versatile disc (DVD), or Blu-ray Disc (BD)&#x2122;), a flash memory device, a memory card, and the like.</p><p id="p-0149" num="0148">While the disclosure has been described with reference to exemplary embodiments, it is to be understood that the disclosure is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.</p><p id="p-0150" num="0149">This application claims the benefit of Japanese Patent Application No. 2021-110760, filed Jul. 2, 2021, which is hereby incorporated by reference herein in its entirety.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An information processing system that manages an application executed by an image processing apparatus with an application identifier, the information processing system comprising:<claim-text>one or more controllers configured to:</claim-text><claim-text>provide combined information of a reproduction application that reproduces a description file for defining operation procedures and a first description file as a first combined application;</claim-text><claim-text>provide combined information of the reproduction application and a second description file as a second combined application;</claim-text><claim-text>manage a first description identifier corresponding to the first description file and a second description identifier corresponding to the second description file; and</claim-text><claim-text>manage the first combined application and the second combined application in a distinguishable manner based on the first description identifier and the second description identifier.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The information processing system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the reproduction application included in the first combined application and the reproduction application included in the second combined application are managed with a same application identifier.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The information processing system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first combined application is installed in the image processing apparatus based on package data that includes the reproduction application and the first description file.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The information processing system according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the image processing apparatus registers the application by using the first description identifier instead of using the application identifier of the reproduction application when installation processing is executed based on the package data.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The information processing system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more controllers are further configured to:<claim-text>create the first description file; and</claim-text><claim-text>issue the first description identifier based on a notification of the creation.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The information processing system according to <claim-ref idref="CLM-00005">claim 5</claim-ref>,<claim-text>wherein the first description file is created by an editing program executed on a web browser of an external terminal, and</claim-text><claim-text>wherein the editing program outputs screen information for accepting an editing operation performed by a user.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The information processing system according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the screen information includes information for checking of operation of an application being edited.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The information processing system according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the screen information includes information about a component addable to the application being edited.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The information processing system according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the screen information includes information for editing a display component used for the application being edited.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The information processing system according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the editing program includes a reproduction program that reproduces the first description file.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The information processing system according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the reproduction program is based on a language that is same as a language of the reproduction application and different from JavaScript.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The information processing system according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the reproduction program is a program same as the reproduction application.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The information processing system according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the language different from JavaScript is a Lua language.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The information processing system according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the editing program includes an emulator that executes the reproduction program.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The information processing system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first description file is data described in a JavaScript Object Notation (JSON) format.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The information processing system according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the package data includes information about a version of the reproduction application.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The information processing system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more controllers are further configured to manage signature information of the reproduction application and signature information of the first description file.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The information processing system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the image processing apparatus includes an image forming device configured to form an image on a sheet.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The information processing system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the image processing apparatus includes an image reading device configured to read an image from a document.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. An information processing apparatus that manages an application executed by an image processing apparatus with an application identifier, the information processing apparatus comprising:<claim-text>a processor; and</claim-text><claim-text>a memory containing instructions that, when executed by the processor, cause the processor to perform operations comprising:</claim-text><claim-text>providing combined information of a reproduction application that reproduces a description file for defining operation procedures and a first description file as a first combined application;</claim-text><claim-text>providing combined information of the reproduction application and a second description file as a second combined application;</claim-text><claim-text>managing a first description identifier corresponding to the first description file and a second description identifier corresponding to the second description file; and</claim-text><claim-text>managing the first combined application and the second combined application in a distinguishable manner based on the first description identifier and the second description identifier.</claim-text></claim-text></claim></claims></us-patent-application>