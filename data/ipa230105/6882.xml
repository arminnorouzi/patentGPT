<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006883A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006883</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17942653</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>0896</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>0829</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>167</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>326</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>0896</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>0835</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>167</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>161</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>326</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SERVICE CONTINUITY FOR NETWORK MANAGEMENT SYSTEMS IN IPV6 NETWORKS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17487718</doc-number><date>20210928</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11496367</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17942653</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16899340</doc-number><date>20200611</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11165652</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17487718</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>T-Mobile USA, Inc.</orgname><address><city>Bellevue</city><state>WA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Byrne</last-name><first-name>Cameron</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Systems and methods for reducing bandwidth loss in IPv6 packet switching networks. A network appliance is configured to sample IPv6 packets and mirror sampled packets to a working memory or memory structure, such as a queue. A transport layer payload is extracted from each sampled packet and a transport layer checksum validation operation is performed. Upon detecting an error, the network appliance updates a dropped packet rate or other metric.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="134.45mm" wi="158.75mm" file="US20230006883A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="181.53mm" wi="106.43mm" file="US20230006883A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="149.18mm" wi="164.00mm" file="US20230006883A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="109.90mm" wi="95.84mm" file="US20230006883A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="139.11mm" wi="95.42mm" file="US20230006883A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This application is a continuation patent application of U.S. patent application Ser. No. 17/487,718, filed Sep. 28, 2021 and titled &#x201c;Service Continuity for Network Management Systems in IPv6 Networks,&#x201d; which is a continuation patent application of U.S. patent application Ser. No. 16/899,340, filed Jun. 11, 2020, and titled &#x201c;Service Continuity for Network Management Systems in IPv6 Networks,&#x201d; now U.S. Pat. No. 11,165,652, the disclosures of which are hereby incorporated by reference herein in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">Embodiments described herein relate to computer networks and, in particular, to maintaining service continuity for network management systems leveraging network transport metrics of IPv4 networks shifting to IPv6 network technologies.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Computing networks are regularly monitored by software and hardware tools for maintenance and performance continuity purposes. Network monitoring tools implemented in physical networking appliances (e.g., routers) configured for legacy IPv4 networks leverage header checksums for error detection at the network layer.</p><p id="p-0005" num="0004">However, IPv6 intentionally omits header checksums at the network layer and instead relies on error checking/verification operations at the transport layer and the link layer. As a result, as adoption of and demand for IPv6 support advances, legacy network monitoring tools must be replaced, updated, or phased-out. For organizations managing large-scale wide-area networks, replacing and/or upgrading monitoring tools can be cost prohibitive.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">Embodiments described herein relate to methods for reducing bandwidth waste when operating a network appliance in a computer network such as an IPv6 network. Such embodiments may also be leveraged to support existing network management systems that leverage network layer statistics and data items to trigger one or more operations or workflows. In particular, in one embodiment, a method includes operations of: receiving a packet at an input of the network appliance; mirroring the packet to a working memory as a duplicate packet; forwarding the packet to a destination address of the packet extracting a transport layer payload from the duplicate packet; verifying a checksum of the extracted transport layer payload to determine whether an error may be present in the extracted transport layer payload; and, in response to determining that the error may be present, updating a dropped packet rate of the network appliance.</p><p id="p-0007" num="0006">Related and additional embodiments may include a configuration in which the transport layer payload conforms to a transport layer protocol, such as the Transmission Control Protocol (&#x201c;TCP&#x201d;) or the User Datagram Protocol (&#x201c;UDP&#x201d;).</p><p id="p-0008" num="0007">Related and additional embodiments may include a configuration in which extracting the transport layer payload from the duplicate packet may be performed when the network appliance is idle. Other examples may include a configuration in which extracting the transport layer payload from the duplicate packet occurs at an interval which may be based, at least in part, on the dropped packet rate.</p><p id="p-0009" num="0008">In some examples, the method can advance by alerting a network management system, communicably coupled to the network appliance, upon determining that the dropped packet rate satisfies a threshold. The network management system can be local to the network appliance (e.g., a separate software process executing over a processor of the network appliance) or may be remote to the network appliance.</p><p id="p-0010" num="0009">Some embodiments described herein take the form of a method for reducing bandwidth waste when operating a network appliance in an IPv6 computer network. Such methods can include operations such as: receiving an IPv6 packet at an input of the network appliance from a source; determining that an interval has lapsed and, in response mirroring the IPv6 packet as a duplicate packet; and adding the duplicate packet to a processing queue. Thereafter, iteratively, the method can advance by: popping a respective duplicate packet from the processing queue and extracting a transport layer payload from that duplicate packet; verifying a checksum of the extracted transport layer payload and, in response to a failed validation of the checksum, updating a dropped packet rate associated with the source; and, upon determining that the dropped packet rate satisfies a threshold, throttling IPv6 packets received from the source.</p><p id="p-0011" num="0010">In some embodiments, throttling IPv6 packets received from the source includes dropping all IPv6 packets received from the source.</p><p id="p-0012" num="0011">In certain configurations and architectures, updating the dropped packet rate includes: determining a first rate of IPv6 packets received from the source; determining a second rate of duplicate packets popped from the processing queue that fail validation; determining a third rate based on the first rate and the second rate; and setting the dropped packet rate associated with the source to the third rate. In some examples, the third rate can be determined by scaling the second rate by the first rate.</p><p id="p-0013" num="0012">Certain embodiments described herein can take the form of a network appliance for a packet switching network configured for IPv6 addressing. The network appliance can include at least an input port, a memory configured to store executable instructions, and a processor operably coupled to the memory. The processor can be configured to access the memory to retrieve the executable instructions to instantiate an instance of a network service application. The network service application can be configured to receive a set of packets via the input port and sample the received packets at a sampling rate. In addition, for each sampled/mirrored packet, the network service application can be configured to determine whether a transport layer payload of the mirrored packet fails a checksum validation. Likewise, for each determined failed checksum validation, the network service application can be configured to update an IPv4 packet loss rate metric accessed by one or more network management systems.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0014" num="0013">Reference will now be made to representative embodiments illustrated in the accompanying figures. It should be understood that the following descriptions are not intended to limit this disclosure to one included embodiment. To the contrary, the disclosure provided herein is intended to cover alternatives, modifications, and equivalents as may be included within the spirit and scope of the described embodiments, and as defined by the appended claims.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a system diagram of a network appliance, such as described herein.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart depicting example operations of a method of operating a network appliance in a packet switching network, such as described herein.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart depicting example operations of a method of sampling IPv6 packets received at an input of a network appliance in a packet switching network, such as described herein.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart depicting example operations of a method of processing sampled IPv6 packets to recover bandwidth in a packet switching network.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0019" num="0018">The use of the same or similar reference numerals in different figures indicates similar, related, or identical items.</p><p id="p-0020" num="0019">Additionally, it should be understood that the proportions and dimensions (either relative or absolute) of the various features and elements (and collections and groupings thereof) and the boundaries, separations, and positional relationships presented therebetween, are provided in the accompanying figures merely to facilitate an understanding of the various embodiments described herein and, accordingly, may not necessarily be presented or illustrated to scale, and are not intended to indicate any preference or requirement for an illustrated embodiment to the exclusion of embodiments described with reference thereto.</p><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0021" num="0020">Embodiments described herein relate to computer networks, and in particular, to systems and methods for instrumenting legacy network transport performance metric and management systems (herein, simply, &#x201c;network management systems&#x201d;) configured for use with network layer checksums with transport layer checksums and/or other higher-layer error data. As a result of these constructions, deployed systems configured to monitor Internet Protocol version 4 (&#x201c;IPv4&#x201d;) network transport metrics can continue to operate to additionally monitor Internet Protocol version 6 (&#x201c;IPv6&#x201d;) network transport metrics.</p><p id="p-0022" num="0021">In addition, systems described herein can be leveraged to recover at least a portion of bandwidth lost in conventional IPv6 systems that prioritize packet forwarding speed (e.g., by reducing router computational overhead) over network layer error correction. More specifically, as may be appreciated by a person of skill in the art, conventional IPv6 packet routing systems rely on link layer and transport layer error detection only. Link layer checksum verification can be used to detect physical network transmission errors (e.g., which may be caused by faulty equipment or transmission media).</p><p id="p-0023" num="0022">Similarly, transport layer error detection (performed at a destination device) may be relied upon to detect data corruption in datagram payloads and/or network layer headers. However, despite that data corruption and logical errors within a datagram payload or a network layer header (e.g., an incorrect source or destination address) are intentionally ignored/discarded by destination devices of a conventional IPv6 network, bandwidth and computational overhead is required to forward those packets to the identified destination.</p><p id="p-0024" num="0023">More simply, as a result of systems described herein, bandwidth utilization of IPv6 networks can be improved by dropping certain packets with payloads containing errors at the network layer and, in addition, existing network monitoring tools and automated network management and maintenance workflows configured to receive IPv4 checksum validation alarms as input can continue to operate, uninterrupted, while transitioning a network and its respective network appliances to IPv6. As may be appreciated by a person of skill in the art, systems and methods described herein dramatically simplify process(es) associated with updating network management/monitoring systems and workflows to quickly react to transport errors, from the network level, in IPv4 and IPv6 networks.</p><p id="p-0025" num="0024">For example, a packet switching network can include a number of routers and switches each configured for IPv4 addressing. Upon receiving an IPv4 packet, a router in the network verifies that a network layer error has not occurred by calculating a ones' complement sum of each header word, including a received checksum. If the ones' complement of the calculated sum is non-zero (or, alternatively, if the sum equals 0&#xd7;FFFF), the router determines that a transmission error and/or formatting error has occurred, and drops the packet.</p><p id="p-0026" num="0025">In response to a dropped packet, in some constructions, a router increments an internal error counter, updates one or more statistics or metadata, and/or generates a message, signal, or alarm to another system or process, such as a network management system, to report the dropped packet. Such a signal can be referred to as an &#x201c;error signal&#x201d; or an &#x201c;alarm.&#x201d; An alarm can be directed to any suitable instance of software executing on a processor of the router and/or can be directed to a separate appliance or application within the packet switching network. For example, an alarm (and/or metadata) can be displayed in a graphical user interface of a network management system for review by a network operations manager.</p><p id="p-0027" num="0026">In some cases, in response to receiving an alarm relating to dropped packets or other transmission errors at the network level, one or more network management or maintenance workflows can be automatically triggered. In one simple example, if a dropped packet rate reported by a particular router or switch across a particular link exceeds a threshold, a workflow may be triggered that causes the router, and/or another appliance such as a switch, to reboot or power cycle.</p><p id="p-0028" num="0027">In another example, if a packet drop rate for a given network appliance exceeds a threshold, certain resource utilization metrics (e.g., processor utilization, memory utilization, and so on) may be captured and/or sampled from that network appliance to determine whether the network appliance has appropriate resources to process all incoming packets. In another example, if a packet drop rate for a given network appliance increases beyond a threshold, a workflow may be triggered to determine if that network appliance was recently updated (e.g., configuration change, firmware update, and so on) and, further, to roll back the update automatically.</p><p id="p-0029" num="0028">In another example, if an error rate/packet drop rate associated with a particular source address exceeds a threshold, a workflow may be triggered that causes the router to reject or deprioritize packets from that address. In yet another example, if an error rate associated with a particular link between appliances in a packet switching network exceeds a threshold, one or more appliances associated with that link may be automatically rebooted and/or a service ticket may be automatically generated.</p><p id="p-0030" num="0029">It may be appreciated that the foregoing simplified examples are not exhaustive of the automatic operations, tasks, and workflows that may be triggered in response to detecting one or more IPv4 packet transport errors. More generally, any suitable network or device management operation may be possible. Further, it may be appreciated that a packet switching network is merely one example network in which packets are exchanged or transported from appliance to appliance.</p><p id="p-0031" num="0030">Continuing the preceding example, the packet switching network may be upgraded to support IPv<i><b>6</b> </i>routing, which as noted above intentionally omits network layer checksums for packet header integrity validation. Instead, IPv6 networks rely on higher-layer and lower-layer checksums, such as checksums verified at the transport layer or the link layer.</p><p id="p-0032" num="0031">As such, none of the aforementioned example workflows that leverage packet loss/IPv4 checksum data will be triggered promptly if a received IPv6 packet suffers a transport error. In other words, existing network level triggers and workflows (and/or operations associated therewith) configured to react to IPv4 checksum errors are not capable to respond to IPv6 transport errors.</p><p id="p-0033" num="0032">As a result, performance of a packet-switching network can suffer while workflows to automatically perform network maintenance operations (e.g., based on real-time network performance statistics) are updated to support IPv6. In another non-limiting phrasing, because IPv6 transport errors are not reported at the network layer, workflows that are configured to consume network layer checksum-based verification data must be updated.</p><p id="p-0034" num="0033">In other words, as IPv6 adoption advances, such workflows quickly become obsolete and networks that previously automatically self-corrected issues causing transport errors will require manual maintenance and monitoring until new IPv6 compatible tools and automations can be deployed.</p><p id="p-0035" num="0034">Embodiments described herein account for these and other issues by instrumenting existing workflows triggered by IPv4 checksum verification data with transport layer checksum data extracted from Transmission Control Protocol (&#x201c;TCP&#x201d;) and/or User Datagram Protocol (&#x201c;UDP&#x201d;) payloads of IPv6 packets at a variable sampling rate. As a result, individual networking appliances (e.g., routers, switches, and the like) can report transport data errors to existing network management systems and such systems can continue to operate, uninterrupted, while upgrades and updates to support IPv6 are performed.</p><p id="p-0036" num="0035">As may be appreciated by a person of skill in the art, embodiments described herein can provide for rapid identification of a source, with a packet switched network, of a network fault. In other cases, embodiments described herein can provide for multi-protocol error reporting on a per-appliance basis without affecting latency, jitter, or other data transfer characteristics.</p><p id="p-0037" num="0036">In particular, transport level checksum data from TCP and UDP payloads (among other protocols) of IPv6 packets can be sampled at a selected and/or variable sampling rate, stored in a queue or other memory structure, and validated at a later time by the appliance that routed each packet. Upon detecting a TCP or UDP checksum validation error, the appliance can update an internal dropped packet count (or other statistic or metadata) and/or generate an alarm directed to a network management system communicably coupled to that appliance. As a result of this construction, each appliance in a packet switching network or other internetworking topology can report multi-protocol aggregated transport statistics and/or protocol-specific transport statistics.</p><p id="p-0038" num="0037">For example, in an embodiment, a router of a packet switching network is configured to receive both IPv4 packets and IPv6 packets. As described above, the router may maintain and regularly update dropped packet counts when an IPv4 packet fails a network level header checksum validation operation. In addition, the router can maintain and regularly update dropped packet counts when an IPv6 packet contains a TCP or UDP payload that, in turn, includes a transport layer checksum that fails validation.</p><p id="p-0039" num="0038">In this example, the router can report to a network management system one or more packet drop counts including, without limitation: a dropped packet rate for IPv6 packets; a dropped packet rate for IPv4 packets; an aggregate dropped packet rate for both IPv6 and IPv4 packets; and so on. As a result of the availability of these statistics, and in particular multiprotocol aggregate statistics, the network management system can present more accurate and complete visibility into operation of that router within the network to network operations personnel. In addition, as noted above, the network management system can automatically perform one or more workflows in response to more accurate aggregate data.</p><p id="p-0040" num="0039">For example, at a given time, the router may receive some quantity of IPv6 packets and some quantity of IPv4 packets. In a conventional construction, the router verifies each header checksum of each IPv4 packet, and can readily detect transport errors that may be caused by network or router issues such as, but not limited to: over-allocation of the router's computing resources (e.g., processor, memory, and so on); traffic volume; misconfiguration; and so on. In the example conventional configuration, however, because IPv6 packets do not include a header checksum, IPv6 packets with malformed data will either be detected and discarded at the link layer (as dropped frames typically resulting from physical transmission errors) or will be detected, and rejected, at the transport layer by a destination device, which may be an unintended destination device if the IPv6 header contains errors. As a result, conventional IPv6 systems do not have visibility at the network layer.</p><p id="p-0041" num="0040">These foregoing and other embodiments are discussed below with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>4</b></figref>. However, those skilled in the art will readily appreciate that the detailed description given herein with respect to these figures is for explanation only and should not be construed as limiting.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a system diagram of a network appliance, such as described herein. The network appliance is communicably coupled to, and a portion of, a packet switching network <b>100</b>. In the illustrated embodiment, the network appliance is identified as the network appliance <b>102</b>.</p><p id="p-0043" num="0042">The network appliance <b>102</b> can be any suitable network appliance configured to communicably couple to and/or participate in a packet switching network such as the packet switching network <b>100</b>. Examples include but are not limited to switches, routers, firewalls, gateways, and the like.</p><p id="p-0044" num="0043">The packet switching network <b>100</b> can be configured to exchange packetized information between nodes of that network. In some cases, the packet switching network <b>100</b> can be a multiprotocol label switching (&#x201c;MPLS&#x201d;) network, whereas in other cases, the packet switching network <b>100</b> can be configured to implement IPv6 and/or IPv4 addressing. A person of skill in the art will readily appreciate that a number of suitable packet switching or data exchange systems can leverage the systems and methods described herein.</p><p id="p-0045" num="0044">The network appliance <b>102</b> is configured to receive packets from a source <b>104</b>. Upon receiving a packet <b>108</b> from the source <b>104</b>, the network appliance <b>102</b> forwards the packet <b>108</b> to a destination <b>106</b> that is defined by the packet <b>108</b> itself. In particular, the packet <b>108</b> includes a network layer header <b>108</b><i>a </i>and a payload <b>108</b><i>b</i>. The network layer header <b>108</b><i>a </i>identifies the source <b>104</b> and the destination <b>106</b> and the payload <b>108</b><i>b </i>includes transport layer information intended to be consumed by an electronic device or network appliance associated with the destination <b>106</b>.</p><p id="p-0046" num="0045">More specifically, the network appliance <b>102</b> includes an input port <b>110</b> and an output port <b>112</b>. The input port <b>110</b> receives the packet <b>108</b> from the source <b>104</b> and, correspondingly, the output port <b>112</b> forwards that packet to the destination <b>106</b>.</p><p id="p-0047" num="0046">The network appliance <b>102</b> can be implemented in hardware or software and may be associated with one or more computational resources that can be allocated to perform, coordinate, or schedule one or more tasks or operations of the network appliance <b>102</b>. The resource allocations assigned to the network appliance <b>102</b> can include virtual and/or physical hardware. For simplicity of description, the network appliance <b>102</b> described below is a physical hardware appliance, but it may be appreciated that, in other implementations, the network appliance <b>102</b> may be partially or entirely virtualized, containerized, or otherwise implemented.</p><p id="p-0048" num="0047">In the illustrated embodiment, the network appliance <b>102</b> includes a processor <b>114</b> and a memory <b>116</b>. The memory <b>116</b> can be a nonvolatile memory configured to store executable instructions and other computational assets that can be accessed by the processor <b>114</b>. In particular, the processor <b>114</b> can be configured to access the memory <b>116</b> in order to retrieve one or more executable instructions that, when executed by the processor <b>114</b> cause the processor <b>114</b> to instantiate an instance of software configured to provide a networking service. In some embodiments, the instance of software can be referred to as a network service application. A network service application, such as described herein can be configured to leverage resources allocated to the network appliance <b>102</b> in order to provide a networking function such as routing, packet shaping, firewall functions, and so on.</p><p id="p-0049" num="0048">The processor <b>114</b> can leverage a working memory <b>118</b> to support one or more instances of software, such as a network service application. The working memory <b>118</b> can be a volatile memory that can be accessed and used by the processor <b>114</b> at high speed.</p><p id="p-0050" num="0049">While performing a networking function such as routing, the processor <b>114</b> can maintain one or more metrics and/or counters that describe one or more operational characteristics of the network appliance <b>102</b>. For example, as noted above, the network appliance <b>102</b> can be configured as a router and may maintain one or more dropped packet counters.</p><p id="p-0051" num="0050">The metric(s) maintained by the processor <b>114</b> can be accessed via an application programming interface (&#x201c;API&#x201d;) leveraged by a network management system <b>120</b>. The network management system <b>120</b> can be configured to monitor performance of the network appliance <b>102</b> and can be configured to automatically perform one or more tasks or operations and/or trigger one or more workflows in response to and based on those metrics.</p><p id="p-0052" num="0051">For example, as noted above, the network management system <b>120</b> can be configured to monitor a dropped packet rate of the network appliance <b>102</b>. If the dropped packet rate exceeds a threshold, the network management system <b>120</b> can send an instruction to the network appliance <b>102</b> to change one or more operational parameters of its operation. In one example, the network appliance <b>102</b> can throttle traffic from a particular source and/or can throttle traffic to a particular destination and/or can stop transporting data across a particular link, and so on. In other cases, physical hardware operations may be performed in response to an instruction received by the network appliance <b>102</b> from the network management system <b>120</b>. For example, the network appliance <b>102</b> may be rebooted if a dropped packet rate is too high.</p><p id="p-0053" num="0052">As with other embodiments described herein, the network appliance <b>102</b> can be configured to extract the payload <b>108</b><i>b </i>from the packet <b>108</b> in order to evaluate whether that packet's transport layer datagram contains a checksum error. More specifically, the network appliance <b>102</b>, or more particularly, the processor <b>114</b> of the network appliance <b>102</b>, can be configured to receive IPv6 packets from the source <b>104</b>. Once an IPv6 packet is received, the processor <b>114</b> can extract the payload <b>108</b><i>b </i>and can perform a checksum validation operation against that payload <b>108</b><i>b </i>prior to forwarding the payload <b>108</b><i>b </i>to the destination <b>106</b>.</p><p id="p-0054" num="0053">Upon determining that the payload <b>108</b><i>b </i>fails checksum validation, the processor <b>114</b> can drop the packet <b>108</b>, preventing the packet <b>108</b> from being delivered to the destination <b>106</b>. As may be appreciated by a person of skill in the art, the IPv6 protocol is intentionally designed without any requirement that a network layer appliance, such as a router, perform a checksum validation. Instead, IPv6 relies on downstream devices to perform transport layer checksum validations and, in turn, to drop erroring datagrams. This, as described above, wastes bandwidth by forwarding packets that contain errors and will eventually be dropped. As such, embodiments described herein can recover that bandwidth by not forwarding packets containing transport layer errors.</p><p id="p-0055" num="0054">In other embodiments, the network appliance <b>102</b> may conform to the IPv6 protocol in that the packet <b>108</b> may be immediately forwarded to the destination <b>106</b>. In these examples, the packet <b>108</b> may be mirrored (duplicated) to the working memory <b>118</b>. In particular, the processor <b>114</b> can duplicate the packet <b>108</b> into a queue or other memory structure within the working memory <b>118</b>. Thereafter, duplicate packets can be analyzed as described above and checksum validation failures can be used to inform changes to one or more metrics reported by the network appliance <b>102</b> to, as one example, the network management system <b>120</b>.</p><p id="p-0056" num="0055">These foregoing embodiments depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and the various alternatives thereof and variations thereto are presented, generally, for purposes of explanation, and to facilitate an understanding of various configurations and constructions of a system, such as described herein. However, it will be apparent to one skilled in the art that some of the specific details presented herein may not be required in order to practice a particular described embodiment, or an equivalent thereof.</p><p id="p-0057" num="0056">For example, as noted above, it may be appreciated that any suitable network layer appliance or set of appliances can leverage the systems and methods described herein to recover bandwidth otherwise lost due to IPv6 implementations that rely on transport layer and link layer checksum validation to drop packets from particular sources and/or directed to particular destinations. Example network appliances that can leverage systems and methods described herein include but are not limited to: routers; firewalls; switches; gateways; bridges; and so on.</p><p id="p-0058" num="0057">More particularly, a network appliance as described herein can be configured to facilitate continuity of service to one or more network monitoring systems. For example, as noted above, an example network monitoring or management system can be configured to leverage network layer packet transport statistics (e.g., packet drop rates) to inform one or more routing decisions. For example, if an IPv4 link coupling a first router to a second router begins to fail (as indicated by an increase in dropped packets), a network management system communicably coupled to each router may be configured to cause either or both the first router or the second router to disable that link until maintenance and/or diagnostics can be performed.</p><p id="p-0059" num="0058">However, as noted above, because IPv6 packets do not contain any network layer checksums, network layer appliances do not, by design, make any determinations about the validity of data contained in a received IPv6 packet&#x2014;such packets are simply forwarded according to the destination address which, in turn, is relied upon to reject the transport layer datagram for failing checksum validation. As noted above, forwarding such packets that contain errors wastes IPv6 bandwidth that might otherwise be allocated to other packets. Bandwidth waste may be a greater concern in particularly large packet switching networks, as a single error may be forwarded by multiple routers before that packet is rejected at its destination.</p><p id="p-0060" num="0059">As such, embodiments described herein inspect transport layer payloads at network layer appliances in order to glean information about whether those payloads contain errors. If an error in the transport layer payload is detected, then a packet can be dropped in lieu of being forwarded along to the packet's original destination. In these examples, networking appliances configured to forward IPv6 packets can buffer IPv6 packets received at input ports thereof in order to inspect transport layer payloads for checksum validation failures. If a particular packet fails a checksum validation of its payload, that packet can be rejected by the appliance and a dropped packet metric can be incremented.</p><p id="p-0061" num="0060">In other embodiments, as described above, a network appliance configured for IPv6 networking/addressing can be configured to sample IPv6 packets at a particular sampling rate. In these examples, IPv6 packets sent through a particular link can be mirrored to a working memory (also referred to herein as a processing queue) at a particular rate. The rate may be based on an interval or the rate may be based on a packet count. In other examples, the rate may be based on both an interval and a packet count. For example, a sampling rate in some embodiments may be one packet sampled for every ten packets received. In other examples, one packet may be sampled every two seconds. In yet other examples, a packet may be sampled at least once every one hundred packets and at least every five seconds. A person of skill in the art will readily appreciate that these example sampling rate bases are not exhaustive. In other embodiments, other means of selecting or modifying a sampling rate may be used.</p><p id="p-0062" num="0061">Once one or more packets are sampled, a separate process executing as an instance of software supported by a processor and/or one or more memory allocations of or available to the network appliance can iteratively or otherwise extract transport layer payloads from enqueued/mirrored packets. The same or a different process can thereafter perform a checksum validation operation against those mirrored packets to determine whether the original packet (which has already been forwarded to its destination) contained an error. This delayed error recognition can be used to update one or more dropped packet metrics stored by and/or reported by the network appliance. As a result, a network management system in communication with the network appliance can determine whether to perform one or more network maintenance operations (e.g., triggering one or more predefined workflows). For example, as noted above, the management system may be configured to instruct the network appliance to throttle traffic transported across a link exhibiting high dropped packet rates. In some cases, traffic from a particular source, directed to a particular destination, and/or transported along a particular link, can be throttled entirely; future packets may be dropped regardless whether such packets contain a transport layer error or not.</p><p id="p-0063" num="0062">In some examples, a network appliance as described herein can be configured for IPv6 over IPv4 operation in which IPv6 packets are encapsulated in IPv4 packets. In these examples, the network appliance can be configured to inject an intentionally incorrect network layer header checksum upon determining that the encapsulated IPv6 packet fails a transport layer checksum validation operation. As a result of these operations, the IPv4 packet encapsulating the IPv6 packet can be dropped at the network layer (because it will fail IPv4 checksum validation).</p><p id="p-0064" num="0063">These foregoing examples are not exhaustive of the various techniques that can be leveraged by a system as described herein to instrument IPv4-compliant network diagnostic systems, such as network management systems, with IPv6 error information. A person of skill in the art may readily appreciate that any suitable operation can be performed to improve network performance if a greater quantity of error information is presented to existing, well-tested, and robust automated network management systems.</p><p id="p-0065" num="0064">As such, generally and broadly, it may be appreciated that embodiments described herein leverage higher-layer checksum validation checks to inform network layer operations, diagnostics, and maintenance. In some cases, IPv6 transport layer checksum validation failures can be added to IPv6 dropped packet statistics. In other cases, IPv6 transport layer checksum validation failures can be prorated based on a sampling rate in order to approximate and/or infer a true error rate. For example, if one error is detected per ten packets sampled, a 10% error rate can be predicted presuming errors conform to a normal distribution. In other cases, other distributions may be presumed. In yet further embodiments, sampling rates can be increased or decreased in a deterministic manner. For example, as error rates increase, sampling rates can likewise increase. In some cases, a system as described herein can be configured to transition from a mirroring or sampling mode into a buffering mode in which all IPv6 packets are processed as described herein (e.g., transport layer payloads are extracted and are validated).</p><p id="p-0066" num="0065">In yet further embodiments, packets may be mirrored to other networking appliances. For example, a dedicated processing queue can be maintained at a dedicated network appliance. In such examples, multiple appliances can communicate with a single appliance configured to receive mirrored packets and to detect errors in transport layer payloads thereof. In such examples, the dedicated appliance can be communicably coupled to (and/or may be) a network management system as described herein.</p><p id="p-0067" num="0066">In view of the foregoing, it is understood that the foregoing and following descriptions of specific embodiments are presented for the limited purposes of illustration and description. These descriptions are not targeted to be exhaustive or to limit the disclosure to the precise forms recited herein. To the contrary, it will be apparent to one of ordinary skill in the art that many modifications and variations are possible in view of the above teachings.</p><p id="p-0068" num="0067">Generally and broadly, <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>4</b></figref> are flowcharts depicting various operations associated with a system described herein. In particular, these methods and operations depicted and described serve to reduce bandwidth waste and/or to increase service continuity for existing/legacy network management systems configured to inform one or more of their operations based on IPv4 metrics.</p><p id="p-0069" num="0068">For example, <figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart depicting example operations of a method of operating a network appliance in a packet switching network, such as described herein. The method <b>200</b> can be performed, in whole or in part, by a network appliance and/or a network service application instance, such as described herein. In some example constructions, a network appliance is a router and/or a network service application performs a routing function.</p><p id="p-0070" num="0069">As noted with respect to other embodiments described herein, a network appliance can include a housing that encloses and supports one or more operational components often referred to as computing resources. Such computing resources can include a processor and a memory. The memory in many example constructions can take multiple forms such as a persistent memory suitable for storing executable instructions that can be accessed by the processor to instantiate one or more purpose-configured instances of software that may, in some embodiments, perform or facilitate one or more virtual or physical networking functions. Another example memory is a working memory that can be communicably coupled to the processor and may be leveraged by the processor when instantiating software as described herein and as may be known to a person of skill in the art.</p><p id="p-0071" num="0070">A network appliance as described herein may further include, in some examples, one or more inputs and/or one or more outputs. Conventionally, such inputs and outputs are referred to as input ports and output ports. The input and output ports of a network appliance can be communicably coupled to the processor and/or to the memory and can be configured to physically and/or communicably couple to one or more other networking appliances.</p><p id="p-0072" num="0071">The method <b>200</b> includes operation <b>202</b> at which a packet is received at an input port of a networking appliance. The packet can confirm to IPv4 addressing or IPv6 addressing. For simplicity of description, however, the packet as described in reference to this embodiment is presumed to confirm to IPv6 addressing.</p><p id="p-0073" num="0072">Upon receiving the packet at operation <b>202</b>, the method <b>200</b> advances to two operations in parallel or, in some embodiments, in sequence. In particular, the method <b>200</b> advances to operation <b>204</b> to mirror the packet received at operation <b>202</b> to working memory. In these examples, as described above, mirroring a packet is an operation in which a packet is duplicated from one memory location to another.</p><p id="p-0074" num="0073">The method <b>200</b> can further advance from operation <b>202</b> to operation <b>206</b> at which the packet received at operation <b>202</b> is forwarded to a destination address defined by the packet itself.</p><p id="p-0075" num="0074">The method <b>200</b> advances from operation <b>204</b> to operation <b>208</b> at which the mirrored packet is processed. In particular, as noted with respect to other embodiments described herein, a transport layer payload (also referred to as a datagram) can be extracted from a payload data unit of the network layer packet received at operation <b>202</b>. The payload can conform to any suitable transport layer protocol, such as TCP or UDP. Other examples are possible.</p><p id="p-0076" num="0075">Next, at operation <b>210</b>, a validation operation can be performed. In particular, the datagram/data payload extracted at operation <b>208</b> can be analyzed to determine what protocol it conforms to. Thereafter, a checksum validation operation selected based on the datagram type can be performed to determine whether the packet mirrored at operation <b>204</b> contains a transport layer error.</p><p id="p-0077" num="0076">If the payload passes checksum validation, the mirrored packet can be discarded and/or otherwise removed from memory. Alternatively, if the payload fails checksum validation, the method <b>200</b> can advance to operation <b>212</b> at which a dropped packet metric and/or other suitable metric can be updated, typically increased.</p><p id="p-0078" num="0077">In this manner and as a result of this method, an IPv6 packet that contains an error identified at the network layer by a checksum in its payload can be detected by a network layer appliance and can be tallied as an IPv4 dropped packet. In this manner, the network appliance can continue to be managed by a network management system that leverages statistics such as dropped packet rates for management purposes. For example, such a system may power cycle a network appliance that is dropping packets at a high rate, may disconnect and/or reestablish one or more links associated with a high packet drop rate, and so on. As may be appreciated by a person of skill in the art, an IPv4 packet drop rate (or any other similar statistics) updated as described herein can include information derived from IPv4 and IPv6 errors and, in that manner, provides a more complete view of a quantity of packets&#x2014;regardless of protocol&#x2014;that contain errors. Once drop rates exceed and/or otherwise satisfy one or more thresholds, alarms can be generated and/or workflows can be triggered. These alarms and triggered workflows enable faster action to prevent error-prone packet sources, links, or destinations from being allocated bandwidth in a packet switching network.</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart depicting example operations of a method of sampling IPv6 packets received at an input of a network appliance in a packet switching network, such as described herein. The network appliance can be configured as described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>2</b></figref>; this description is not repeated.</p><p id="p-0080" num="0079">The method <b>300</b> includes operation <b>302</b> in which a packet is received at an input of a network appliance and forwarded to a destination defined by a destination address. The example operation <b>302</b> can be performed, in whole or in part, by a network appliance such as a router or a switch.</p><p id="p-0081" num="0080">The method <b>300</b> includes operation <b>304</b> at which it is determined that an interval has lapsed since a previous sample of input (received) packets occurred. As noted above, an interval expiration is merely one example of a method operation by which a system as described herein can leverage to collect a subsequent sample. In other cases, subsequent samples can be collected at specific times, on demand, at particular sample-count rates, and so on.</p><p id="p-0082" num="0081">The method <b>300</b> further includes operation <b>306</b> at which a sample of an IPv6 packet is taken. In particular, the next packet received after operation <b>304</b> is mirrored as a duplicated packet and added to a processing queue or other memory structure. In this manner, IPv6 packets can be inspected without delaying forwarding and/or routing of packets received by the network appliance.</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart depicting example operations of a method of processing sampled IPv6 packets to recover bandwidth in a packet switching network. The method <b>400</b> can be operated in parallel with the method <b>300</b> described in reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In some cases, the methods <b>300</b> and <b>400</b> can be performed by the same network appliance and/or the same processor of the same network appliance. However, this is not required. In other architectures, the method <b>300</b> can be performed by a first processor of a network appliance whereas the method <b>400</b> can be performed by a second processor of the same network appliance. In other examples, the method <b>300</b> can be performed by a first network appliance and the method <b>400</b> can be performed by a second network appliance communicably coupled to the first network appliance. These foregoing example architectures are not exhaustive.</p><p id="p-0084" num="0083">The method <b>400</b> includes operation <b>402</b> at which a packet, having previously been created as a duplicated packet mirroring a packet received by a network appliance, is selected from a memory structure storing such duplicated packets. As with the method <b>300</b>, any suitable memory structure may be used and can include one or more caches, queues, databases, and so on. For simplicity of description and illustration, the method embodiment depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> is described in reference to a processing queue. Accordingly, at operation <b>402</b>, a duplicated packet may be popped from the processing queue.</p><p id="p-0085" num="0084">Once a duplicate packet is obtained at operation <b>402</b>, the method <b>400</b> advances to operation <b>404</b> at which a transport layer payload of that packet can be extracted. Once the payload is extracted and it is determined to which transport layer protocol the packet conforms, a checksum validation operation can be carried out. As noted with respect to other embodiments described herein, a checksum validation operation can be performed in a number of ways and may be protocol dependent. In some embodiments, a checksum validation operation is carried out by performing a ones' complement summation of all header fields of a particular extracted payload to determine whether that sum equals 0xFFFF. In other cases, the ones' complement of the sum itself may be calculated to determine whether a resulting value equals 0x0000. In yet further embodiments, a checksum validation can be performed in another manner.</p><p id="p-0086" num="0085">In some embodiments, a checksum validation can be performed in hardware, such as with shift registers and purpose-configured circuitry. In other cases, checksum validations can be performed by software.</p><p id="p-0087" num="0086">In many cases, a checksum validation operation passes meaning that no errors are predicted by checksum validation. In such examples, the method <b>400</b> can drop or otherwise discard the duplicate packet obtained at operation <b>402</b>.</p><p id="p-0088" num="0087">Alternatively, if an error is detected, the method <b>400</b> advances to operation <b>406</b> at which, in response to the detected failed packet, a metric internal to or otherwise associated with the network appliance can be updated. An example metric that can be updated at operation <b>406</b> is a dropped packet rate.</p><p id="p-0089" num="0088">Optionally, the method <b>400</b> can advance thereafter to operation <b>408</b>. At operation <b>408</b>, it may be determined whether the metric updated at operation <b>406</b> exceeds or otherwise satisfies a threshold. For example, a dropped packet rate updated at operation <b>406</b> can be compared against an acceptable dropped packet threshold. In response to determining that the threshold has been satisfied, the method <b>400</b> can perform a task such as throttling packets from the source.</p><p id="p-0090" num="0089">As used herein, the phrase &#x201c;at least one of&#x201d; preceding a series of items, with the term &#x201c;and&#x201d; or &#x201c;or&#x201d; to separate any of the items, modifies the list as a whole, rather than each member of the list. The phrase &#x201c;at least one of&#x201d; does not require selection of at least one of each item listed; rather, the phrase allows a meaning that includes at a minimum one of any of the items, and/or at a minimum one of any combination of the items, and/or at a minimum one of each of the items. By way of example, the phrases &#x201c;at least one of A, B, and C&#x201d; or &#x201c;at least one of A, B, or C&#x201d; each refer to only A, only B, or only C; any combination of A, B, and C; and/or one or more of each of A, B, and C. Similarly, it may be appreciated that an order of elements presented for a conjunctive or disjunctive list provided herein should not be construed as limiting the disclosure to only that order provided.</p><p id="p-0091" num="0090">One may appreciate that although many embodiments are disclosed above, that the operations and steps presented with respect to methods and techniques described herein are meant as exemplary and accordingly are not exhaustive. One may further appreciate that alternate step order or fewer or additional operations may be required or desired for particular embodiments.</p><p id="p-0092" num="0091">Although the disclosure above is described in terms of various exemplary embodiments and implementations, it should be understood that the various features, aspects and functionality described in one or more of the individual embodiments are not limited in their applicability to the particular embodiment with which they are described, but instead can be applied, alone or in various combinations, to one or more of the some embodiments of the invention, whether or not such embodiments are described and whether or not such features are presented as being a part of a described embodiment. Thus, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments but is instead defined by the claims herein presented.</p><p id="p-0093" num="0092">As used herein, the terms &#x201c;networking resource&#x201d; and/or &#x201c;computing resource&#x201d; (along with other similar terms and phrases, including, but not limited to, &#x201c;network appliance&#x201d; and &#x201c;computing network&#x201d;) refer to any physical and/or virtual electronic device or machine component, or set or group of interconnected and/or communicably coupled physical and/or virtual electronic devices or machine components, suitable to execute or cause to be executed one or more arithmetic or logical operations on digital data.</p><p id="p-0094" num="0093">Example computing resources contemplated herein include, but are not limited to: single or multi-core processors; single or multi-thread processors; purpose-configured co-processors (e.g., graphics processing units, motion processing units, sensor processing units, and the like); volatile or non-volatile memory; application-specific integrated circuits; field-programmable gate arrays; input/output devices and systems and components thereof (e.g., keyboards, mice, trackpads, generic human interface devices, video cameras, microphones, speakers, and the like); networking appliances and systems and components thereof (e.g., routers, switches, firewalls, packet shapers, content filters, network interface controllers or cards, access points, modems, and the like); embedded devices and systems and components thereof (e.g., system(s)-on-chip, Internet-of-Things devices, and the like); industrial control or automation devices and systems and components thereof (e.g., programmable logic controllers, programmable relays, supervisory control and data acquisition controllers, discrete controllers, and the like); vehicle or aeronautical control devices systems and components thereof (e.g., navigation devices, safety devices or controllers, security devices, and the like); corporate or business infrastructure devices or appliances (e.g., private branch exchange devices, voice-over internet protocol hosts and controllers, end-user terminals, and the like); personal electronic devices and systems and components thereof (e.g., cellular phones, tablet computers, desktop computers, laptop computers, wearable devices); personal electronic devices and accessories thereof (e.g., peripheral input devices, wearable devices, implantable devices, medical devices and so on); and so on. It may be appreciated that the foregoing examples are not exhaustive.</p><p id="p-0095" num="0094">As described herein, the term &#x201c;processor&#x201d; refers to any software and/or hardware-implemented data processing device or circuit physically and/or structurally configured to instantiate one or more classes or objects that are purpose-configured to perform specific transformations of data including operations represented as code and/or instructions included in a program that can be stored within, and accessed from, a memory. This term is meant to encompass a single processor or processing unit, multiple processors, multiple processing units, analog or digital circuits, or other suitably configured computing element or combination of elements.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for reducing bandwidth waste when operating a network appliance in a computer network, the method comprising:<claim-text>receiving a packet at an input of the network appliance;</claim-text><claim-text>mirroring the packet to a working memory as a duplicate packet;</claim-text><claim-text>forwarding the packet to a destination address of the packet; and</claim-text><claim-text>after forwarding the packet to the destination address of the packet:<claim-text>extracting a transport layer payload from the duplicate packet;</claim-text><claim-text>verifying an extracted checksum to determine whether an error is present in the extracted checksum, the extracted checksum being for an entirety of the transport layer payload; and</claim-text><claim-text>in response to determining that the error is present, updating a dropped packet rate of the network appliance.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the network appliance reboots if the dropped packet rate exceeds a threshold.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the network appliance performs the operations of forwarding the packet and verifying the extracted transport layer payload checksum.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the network appliance is operable to route packets using Internet Protocol version 6 (IPv6).</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the network appliance determines to extract the transport layer payload from the duplicate packet after determining that the network appliance is idle.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a single device performs the operations of forwarding the packet and verifying the extracted transport layer payload checksum.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising transmitting an alert upon determining that the dropped packet rate satisfies a threshold.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the packet is a first packet;</claim-text><claim-text>the extracted transport layer payload checksum is a first extracted transport layer payload checksum;</claim-text><claim-text>the error is a first error; and</claim-text><claim-text>the method comprises:<claim-text>receiving a second packet at the input of the network appliance;</claim-text><claim-text>verifying a second extracted transport layer payload checksum of a header of the second packet to determine whether a second error is present in the second packet; and</claim-text><claim-text>in response to determining that the second error is present, updating the dropped packet rate of the network appliance.</claim-text></claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the first packet is an Internet Protocol version 6 (IPv6) packet and the second packet is an Internet Protocol version 4 (IPv4) packet.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the network appliance is operable to route packets using both Internet Protocol version 4 (IPv4) and Internet Protocol version 6 (IPv6).</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising maintaining a dropped packet counter.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising sending an instruction to the network appliance to change an operational parameter upon determining that the dropped packet rate exceeds a threshold.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the instruction causes the network appliance to throttle packets from a particular source.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the instruction causes the network appliance to throttle packets to a particular destination.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the instruction causes the network appliance to stop transporting data across a particular link.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A network appliance, comprising:<claim-text>a non-transitory storage medium storing instructions; and</claim-text><claim-text>a processor that executes the instructions to:<claim-text>receive a packet at an input of the network appliance;</claim-text><claim-text>mirror the packet to a working memory as a duplicate packet;</claim-text><claim-text>forward the packet to a destination address of the packet; and</claim-text><claim-text>after forwarding the packet to the destination address of the packet:<claim-text>extract a transport layer payload from the duplicate packet;</claim-text><claim-text>verify an extracted checksum to determine whether an error is present in the extracted checksum, the extracted checksum being for an entirety of the transport layer payload; and</claim-text><claim-text>in response to determining that the error is present, update a dropped packet rate of the network appliance.</claim-text></claim-text></claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The network appliance of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the processor transmits an alert upon determining that the dropped packet rate satisfies a threshold.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The network appliance of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the processor is operable to route packets using both Internet Protocol version 4 (IPv4) and Internet Protocol version 6 (IPv6).</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The network appliance of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the processor determines to extract the transport layer payload from the duplicate packet after determining that the network appliance is idle.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The network appliance of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the processor maintains a dropped packet counter.</claim-text></claim></claims></us-patent-application>