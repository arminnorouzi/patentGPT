<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007020A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007020</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17793657</doc-number><date>20201026</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>JP</country><doc-number>PCT/JP2020/001781</doc-number><date>20200120</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>901</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9538</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>1416</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9027</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9538</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">ESTIMATION SYSTEM, ESTIMATION METHOD, AND ESTIMATION PROGRAM</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>NIPPON TELEGRAPH AND TELEPHONE CORPORATION</orgname><address><city>Tokyo</city><country>JP</country></address></addressbook><residence><country>JP</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>KUROKI</last-name><first-name>Kotomi</first-name><address><city>Musashino-shi, Tokyo</city><country>JP</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>KANEMOTO</last-name><first-name>Yo</first-name><address><city>Musashino-shi, Tokyo</city><country>JP</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>AOKI</last-name><first-name>Kazufumi</first-name><address><city>Musashino-shi, Tokyo</city><country>JP</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>NIPPON TELEGRAPH AND TELEPHONE CORPORATION</orgname><role>03</role><address><city>Tokyo</city><country>JP</country></address></addressbook></assignee></assignees><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/JP2020/040152</doc-number><date>20201026</date></document-id><us-371c12-date><date>20220719</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An estimation unit (<b>136</b>) retrieves a subtree that matches a query to be estimated, from subtrees included in a syntax tree created from a query inserted into a Web request. In addition, the estimation unit (<b>136</b>) presents information for specifying the type of damage of an attack and an attack target, the information being associated in advance with the subtree obtained by the retrieval of the retrieval unit.</p><p id="p-0002" num="0000">An estimation unit retrieves a subtree that matches a query to be estimated, from subtrees included in a syntax tree created from a query inserted into a Web request. In addition, the estimation unit presents information for specifying the type of damage of an attack and an attack target, the information being associated in advance with the subtree obtained by the retrieval of the retrieval unit.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="93.81mm" wi="149.01mm" file="US20230007020A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="96.86mm" wi="152.23mm" file="US20230007020A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="229.53mm" wi="152.99mm" file="US20230007020A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="79.76mm" wi="150.11mm" file="US20230007020A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="90.09mm" wi="151.30mm" file="US20230007020A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="235.97mm" wi="60.11mm" orientation="landscape" file="US20230007020A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="72.22mm" wi="153.67mm" file="US20230007020A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="58.17mm" wi="153.84mm" file="US20230007020A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="57.83mm" wi="153.75mm" file="US20230007020A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="135.97mm" wi="154.86mm" file="US20230007020A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="82.38mm" wi="146.22mm" file="US20230007020A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="104.99mm" wi="154.86mm" file="US20230007020A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="234.95mm" wi="72.39mm" orientation="landscape" file="US20230007020A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="236.98mm" wi="84.41mm" orientation="landscape" file="US20230007020A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="236.22mm" wi="115.82mm" orientation="landscape" file="US20230007020A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="236.98mm" wi="92.46mm" orientation="landscape" file="US20230007020A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="127.51mm" wi="153.75mm" file="US20230007020A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="140.04mm" wi="153.33mm" file="US20230007020A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="121.16mm" wi="153.59mm" file="US20230007020A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="139.95mm" wi="152.99mm" file="US20230007020A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="141.22mm" wi="153.16mm" file="US20230007020A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="52.83mm" wi="153.08mm" file="US20230007020A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="69.34mm" wi="152.32mm" file="US20230007020A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="70.27mm" wi="153.59mm" file="US20230007020A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="53.68mm" wi="153.16mm" file="US20230007020A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="35.22mm" wi="132.59mm" file="US20230007020A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="28.70mm" wi="153.33mm" file="US20230007020A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="27.26mm" wi="154.86mm" file="US20230007020A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="43.77mm" wi="152.23mm" file="US20230007020A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="34.97mm" wi="135.89mm" file="US20230007020A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="239.35mm" wi="150.88mm" file="US20230007020A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="199.64mm" wi="153.59mm" file="US20230007020A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00032" num="00032"><img id="EMI-D00032" he="239.10mm" wi="152.06mm" file="US20230007020A1-20230105-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00033" num="00033"><img id="EMI-D00033" he="239.01mm" wi="155.02mm" file="US20230007020A1-20230105-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00034" num="00034"><img id="EMI-D00034" he="212.01mm" wi="152.74mm" file="US20230007020A1-20230105-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00035" num="00035"><img id="EMI-D00035" he="236.56mm" wi="73.41mm" orientation="landscape" file="US20230007020A1-20230105-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00036" num="00036"><img id="EMI-D00036" he="128.10mm" wi="152.32mm" file="US20230007020A1-20230105-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00037" num="00037"><img id="EMI-D00037" he="204.39mm" wi="155.53mm" orientation="landscape" file="US20230007020A1-20230105-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0001">The present disclosure relates to an estimation system, an estimation method, and an estimation program.</p><heading id="h-0002" level="1">BACKGROUND ART</heading><p id="p-0004" num="0002">In the related art, a technique for taking countermeasures for an SQL injection is known. Here, an SQL injection is an attack for causing a Web server to execute a fraudulent SQL query. SQL injections are particularly numerous among attacks on Web servers because of the large number of Web applications that use a Web server including a database and the ease of the attack itself.</p><p id="p-0005" num="0003">For example, as a technique for detecting an SQL injection, a Web application firewall (WAF) that detects or blocks traffic matching a rule, such as a previously prepared regular expression, as an attack is known (see, for example, NPL 1). In addition, a technique for detecting an attack by applying a support vector machine (SVM) to an SQL query executed in a database is known (see, for example, NPL 2).</p><p id="p-0006" num="0004">In addition, a technique for determining whether an attack of an SQL injection has been successful based on emulated results and responses is known (see, for example, PTL 1).</p><p id="p-0007" num="0005">In addition, a technique for classifying and detecting an attack type of an SQL injection using machine learning is known (see, for example, NPL 3). In addition, a technique for classifying an attack type of an SQL injection using a regular expression and extracting a character string leaked from a payload of a response is known (see, for example, NPL 4).</p><heading id="h-0003" level="1">CITATION LIST</heading><heading id="h-0004" level="1">Patent Literature</heading><p id="p-0008" num="0006">PTL 1: WO 2019/013266</p><heading id="h-0005" level="1">Non Patent Literature</heading><p id="p-0009" num="0000"><ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0007">NPL 1: OWASP ModSecurity Core Rule Set:https://coreruleset.org/</li>    <li id="ul0001-0002" num="0008">NPL 2: D. Kar, S. Panigrahi, and S. Sundararajan, &#x201c;SQLiGoT:Detecting SQL injection attacks using graph of tokens and SVM,&#x201d; Comput. Secur., vol. 60, pp. 206-225, 2016.</li>    <li id="ul0001-0003" num="0009">NPL 3: Naghmeh Moradpoor Sheykhkanloo, &#x201c;A Learning-based Neural Network Model for the Detection and Classification of SQL Injection Attacks,&#x201d; International Journal of Cyber Warfare and Terrorism (IJCWT), 2017.</li>    <li id="ul0001-0004" num="0010">NPL 4: Haifeng Gu, Jianning Zhang, Tian Liu, Ming Hu, Junlong Zhou, Tongquan Wei and Mingsong Chen, &#x201c;DIAVA:A Traffic-Based Framework for Detection of SQL Injection Attacks and Vulnerability Analysis of Leaked Data,&#x201d; IEEE Transactions on Reliability, 2019.</li></ul></p><heading id="h-0006" level="1">SUMMARY OF THE INVENTION</heading><heading id="h-0007" level="1">Technical Problem</heading><p id="p-0010" num="0011">However, the related art has a problem in that it may be difficult to specify an attack target of an SQL injection. The details of countermeasures when it is unclear which database (DB) or system has become an attack target even though an SQL injection has been detected are not considered to have been efficiently examined.</p><p id="p-0011" num="0012">For example, in a WAF and an SVM disclosed in NPL 1 and NPL 2, even when an attack has been detected, an attack method and an attack target may not be able to be specified. In addition, the technique disclosed in PTL 1 is a technique for determining whether an attack has been successful. Further, the techniques disclosed in NPL 3 and NPL 4 are techniques for specifying an attack type. Thus, in the related art, it is difficult to specify an attack target of an SQL injection.</p><heading id="h-0008" level="1">Means for Solving the Problem</heading><p id="p-0012" num="0013">In order to solve the above-described problems and achieve an object, an estimation system includes a retrieval unit configured to retrieve a subtree that matches a query to be estimated, from subtrees included in a syntax tree created from a query inserted into a Web request, and a presentation unit configured to present information for specifying the type of damage of an attack and an attack target, the information being associated in advance with the subtree obtained by the retrieval unit in the retrieval.</p><heading id="h-0009" level="1">Effects of the Invention</heading><p id="p-0013" num="0014">According to the present disclosure, it is possible to specify an attack target of an SQL injection.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0010" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0014" num="0015"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram illustrating a configuration example of an estimation system according to a first embodiment.</p><p id="p-0015" num="0016"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram illustrating a configuration example of an estimation apparatus according to the first embodiment.</p><p id="p-0016" num="0017"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram illustrating an example of an attack query.</p><p id="p-0017" num="0018"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram illustrating an example of an attack query.</p><p id="p-0018" num="0019"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a diagram illustrating an example of another attack query.</p><p id="p-0019" num="0020"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram illustrating an example of attack queries in which quotation marks and parentheses are supplemented.</p><p id="p-0020" num="0021"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram illustrating an example of a quotation mark supplementation method.</p><p id="p-0021" num="0022"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram illustrating an example of a parenthesis supplementation method.</p><p id="p-0022" num="0023"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a diagram showing details of a parenthesis supplementation method.</p><p id="p-0023" num="0024"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram illustrating a legend of a node.</p><p id="p-0024" num="0025"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a diagram illustrating an example of a syntax tree.</p><p id="p-0025" num="0026"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a diagram illustrating an example of a type node.</p><p id="p-0026" num="0027"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a diagram illustrating an example of a token node.</p><p id="p-0027" num="0028"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a diagram illustrating an example of a syntax tree transformation method.</p><p id="p-0028" num="0029"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a diagram illustrating an example of a semantic analysis rule.</p><p id="p-0029" num="0030"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a diagram illustrating an example of a subtree that satisfies rule <b>2</b>.</p><p id="p-0030" num="0031"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a diagram illustrating an example of a subtree that satisfies rule <b>3</b>.</p><p id="p-0031" num="0032"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a diagram illustrating an example of a subtree that satisfies rule <b>4</b>.</p><p id="p-0032" num="0033"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a diagram illustrating an example of a subtree that satisfies rule <b>5</b>.</p><p id="p-0033" num="0034"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is a diagram illustrating an example of a subtree that satisfies rule <b>6</b>.</p><p id="p-0034" num="0035"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a diagram illustrating an example of a subtree in which an attack type is Boolean-based blind.</p><p id="p-0035" num="0036"><figref idref="DRAWINGS">FIG. <b>22</b></figref> is a diagram illustrating an example of a subtree in which an attack type is Time-based blind.</p><p id="p-0036" num="0037"><figref idref="DRAWINGS">FIG. <b>23</b></figref> is a diagram illustrating an example of a subtree in which an attack type is Union-based.</p><p id="p-0037" num="0038"><figref idref="DRAWINGS">FIG. <b>24</b></figref> is a diagram illustrating an example of a subtree in which an attack type is Stacked queries.</p><p id="p-0038" num="0039"><figref idref="DRAWINGS">FIG. <b>25</b></figref> is a diagram illustrating an example of a rule for identifying investigation of vulnerability.</p><p id="p-0039" num="0040"><figref idref="DRAWINGS">FIG. <b>26</b></figref> is a diagram illustrating an example of a rule for identifying leakage of system information.</p><p id="p-0040" num="0041"><figref idref="DRAWINGS">FIG. <b>27</b></figref> is a diagram illustrating an example of a rule for identifying leakage of system information.</p><p id="p-0041" num="0042"><figref idref="DRAWINGS">FIG. <b>28</b></figref> is a diagram illustrating an example of a rule for identifying leakage of table content.</p><p id="p-0042" num="0043"><figref idref="DRAWINGS">FIG. <b>29</b></figref> is a diagram illustrating an example of a rule for identifying falsification.</p><p id="p-0043" num="0044"><figref idref="DRAWINGS">FIG. <b>30</b></figref> is a flowchart illustrating a flow of processing of the estimation apparatus according to the first embodiment.</p><p id="p-0044" num="0045"><figref idref="DRAWINGS">FIG. <b>31</b></figref> is a flowchart illustrating a flow of parenthesis supplementation processing.</p><p id="p-0045" num="0046"><figref idref="DRAWINGS">FIG. <b>32</b></figref> is a flowchart illustrating a flow of analysis processing.</p><p id="p-0046" num="0047"><figref idref="DRAWINGS">FIG. <b>33</b></figref> is a flowchart illustrating a flow of identification processing.</p><p id="p-0047" num="0048"><figref idref="DRAWINGS">FIG. <b>34</b></figref> is a diagram illustrating a configuration example of an estimation apparatus according to a second embodiment.</p><p id="p-0048" num="0049"><figref idref="DRAWINGS">FIG. <b>35</b></figref> is a diagram illustrating an attack target estimation method.</p><p id="p-0049" num="0050"><figref idref="DRAWINGS">FIG. <b>36</b></figref> is a flowchart illustrating a flow of processing of the estimation apparatus according to the second embodiment.</p><p id="p-0050" num="0051"><figref idref="DRAWINGS">FIG. <b>37</b></figref> is a diagram illustrating an example of a computer that executes an estimation program.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0011" level="1">DESCRIPTION OF EMBODIMENTS</heading><p id="p-0051" num="0052">Hereinafter, embodiments of an estimation system, an estimation method, and an estimation program according to the present application will be described in detail based on the drawings. Note that the present disclosure is not limited to the embodiments described below.</p><heading id="h-0012" level="1">First Embodiment</heading><heading id="h-0013" level="2">Configuration of First Embodiment</heading><p id="p-0052" num="0053">First, a configuration of an estimation system according to a first embodiment will be described using <figref idref="DRAWINGS">FIG. <b>1</b></figref>. <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram illustrating a configuration example of the estimation system according to the first embodiment. As illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, an estimation system <b>1</b> includes a server <b>3</b>, a detection apparatus <b>4</b>, and an estimation apparatus <b>10</b>. In addition, the server <b>3</b> is connected to the Internet <b>2</b> via the detection apparatus <b>4</b>.</p><p id="p-0053" num="0054">The server <b>3</b> is a Web server for executing a Web application. The server <b>3</b> executes a database or a Web application using a database. The server <b>3</b> receives a Web request via the Internet <b>2</b>, executes processing in accordance with the Web request, and returns a response. Here, the server <b>3</b> can construct an SQL query based on a predetermined query included in the Web request and execute the SQL query on the database.</p><p id="p-0054" num="0055">The detection apparatus <b>4</b> detects a Web request that has been sent via the Internet <b>2</b>, the Web request being intended for an attack on the server <b>3</b>. For example, the detection apparatus <b>4</b> functions as a WAF and can perform detection using the technique disclosed in NPL 1.</p><p id="p-0055" num="0056">The estimation apparatus <b>10</b> performs estimation related to damage that occurs when the server <b>3</b> executes processing in response to the Web request, based on the Web request detected by the detection apparatus <b>4</b>. In particular, the estimation apparatus <b>10</b> can estimate the content of damage that occurs due to an SQL injection.</p><p id="p-0056" num="0057">A configuration of the estimation apparatus <b>10</b> will be described using <figref idref="DRAWINGS">FIG. <b>2</b></figref>. <figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram illustrating a configuration example of the estimation apparatus. As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the estimation apparatus <b>10</b> includes an interface unit <b>11</b>, a storage unit <b>12</b>, and a control unit <b>13</b>.</p><p id="p-0057" num="0058">The interface unit <b>11</b> is an interface for inputting and outputting data and performing communication of data. For example, the interface unit <b>11</b> receives an input of data from an input device such as a keyboard or a mouse. In addition, for example, the interface unit <b>11</b> may output data to an output device such as a display or a speaker. In addition, for example, the interface unit <b>11</b> may be a network interface card (NIC).</p><p id="p-0058" num="0059">The storage unit <b>12</b> is a storage device such as a Hard Disk Drive (HDD), a Solid State Drive (SSD), or an optical disc. Note that the storage unit <b>12</b> may be a semiconductor memory capable of rewriting data, such as a Random Access Memory (RAM) or a flash memory, and a Non Volatile Static Random Access Memory (NVSRAM). The storage unit <b>12</b> stores an operating system (OS) or various programs that are executed in the estimation apparatus <b>10</b>. The storage unit <b>12</b> stores a semantic analysis rule <b>121</b>, an attack type identification rule <b>122</b>, and a damage identification rule <b>123</b>.</p><p id="p-0059" num="0060">The semantic analysis rule <b>121</b> is a rule for performing semantic analysis of an attack query. The attack type identification rule <b>122</b> is a rule for identifying the type of attack according to an attack query. The damage identification rule <b>123</b> is a rule for identifying damage occurring in association with an attack according to an attack query.</p><p id="p-0060" num="0061">The control unit <b>13</b> controls the entire estimation apparatus <b>10</b>. The control unit <b>13</b> may be an electronic circuit such as a Central Processing Unit (CPU) or a Micro Processing Unit (MPU), or an integrated circuit such as an Application Specific Integrated Circuit (ASIC) or a Field Programmable Gate Array (FPGA). In addition, the control unit <b>13</b> includes an internal memory for storing programs defining various processing procedures and control data, and executes each of the processing operations using the internal memory. Further, the control unit <b>13</b> functions as various processing units by operating various programs. For example, the control unit <b>13</b> includes an extraction unit <b>131</b>, a supplementation unit <b>132</b>, a creating unit <b>133</b>, an impartation unit <b>134</b>, and an identification unit <b>135</b>.</p><p id="p-0061" num="0062">The extraction unit <b>131</b> extracts an attack query from a Web request that is detected to be an attack. Here, the attack query is a query that has been inserted into a Web request that is detected to be an attack. For example, an SQL query generated based on an attack query may actually execute an attack. The attack query may also be called &#x201c;a query suspected to be used for an attack.&#x201d;</p><p id="p-0062" num="0063"><figref idref="DRAWINGS">FIGS. <b>3</b> and <b>4</b></figref> are diagrams illustrating an example of an attack query. A Web request of a GET method in <figref idref="DRAWINGS">FIG. <b>3</b></figref> and a Web request of a POST method in <figref idref="DRAWINGS">FIG. <b>4</b></figref> are Web requests detected by the detection apparatus <b>4</b>. For example, as illustrated in <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>4</b></figref>, the extraction unit <b>131</b> may extract the value of a variable in an attack query of a Web request. That is, the extraction unit <b>131</b> extracts a character string after &#x201c;id=&#x201d; that is shown after &#x201c;?&#x201d; of the Web request illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref> as an attack query. In addition, the extraction unit <b>131</b> extracts a character string after &#x201c;id=&#x201d; that is shown after &#x201c;?&#x201d; and before &#x201c;&#x26;&#x201d; of the Web request illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref> as an attack query.</p><p id="p-0063" num="0064">In the example of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the extraction unit <b>131</b> extracts &#x201c;a&#x2032; OR 1=1&#x2014;&#x201d; as an attack query. Further, in the example of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the extraction unit <b>131</b> extracts &#x201c;1; WAITFOR DELAY &#x2018;0:0:5&#x2019;&#x2014;&#x201d; as an attack query. In addition, the extraction unit <b>131</b> extracts an attack query as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. In addition, the extraction unit <b>131</b> may extract an attack query using an existing regular expression or the like.</p><p id="p-0064" num="0065">The supplementation unit <b>132</b> adds quotation marks and parentheses that are missing from an attack query to facilitate syntax analysis of the attack query. <figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram illustrating an example of an attack query in which quotation marks and parentheses are supplemented. As illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the supplementation unit <b>132</b> can supplement various quotation marks, parentheses, and the like. Note that the quotation marks include a single quote &#x201c;,&#x201d; a double quote &#x201c;&#x2033;,&#x201d; a back quote &#x201c;&#x2032;,&#x201d; and the like.</p><p id="p-0065" num="0066"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram illustrating an example of a quotation mark supplementation method. As illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, in a case where quotation marks are included in an attack query, the supplementation unit <b>132</b> adds the same quotation marks included in the attack query before and after the attack query. On the other hand, in a case where quotation marks are not included in an attack query, the supplementation unit <b>132</b> does not supplement quotation marks.</p><p id="p-0066" num="0067"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram illustrating an example of a parenthesis supplementation method. As illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, in a case where no corresponding opposite parenthesis is present in an attack query among parentheses included in the attack query, the supplementation unit <b>132</b> adds the corresponding parenthesis before and after the attack query. On the other hand, in a case where the corresponding parenthesis is present in the attack query, the supplementation unit <b>132</b> regards a portion surrounded by the parentheses as complete and does not supplement a parenthesis.</p><p id="p-0067" num="0068"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a diagram showing details of a parenthesis supplementation method. As illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>, first, the supplementation unit <b>132</b> extracts only parentheses from an attack query. Then, the supplementation unit <b>132</b> deletes complete parentheses from the extracted parentheses. Here, in the example of <figref idref="DRAWINGS">FIG. <b>9</b></figref>, two closing parentheses &#x201c;))&#x201d; remain as parentheses having no corresponding parentheses, and thus the supplementation unit <b>132</b> adds two opening parentheses &#x201c;((&#x201d; at the head of the attack query.</p><p id="p-0068" num="0069">The creating unit <b>133</b> creates a syntax tree in accordance with a rule defined in advance from the attack query extracted by the extraction unit <b>131</b>. For example, the creating unit <b>133</b> may create a syntax tree having a first node representing the type of text included in the attack query extracted by the extraction unit <b>131</b> and a second node representing a character string included in the text. In this manner, the creating unit <b>133</b> performs syntax analysis of the attack query to generate a syntax tree.</p><p id="p-0069" num="0070">In the present embodiment, the first node and the second node are referred to as a type node and a token node, respectively. The type node represents the type of text included in the attack query. In addition, the token node represents a character string included in the text.</p><p id="p-0070" num="0071"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram illustrating a legend of a node. In the following description, a type node is represented by a rounded corner square. In addition, a token node is represented by a quadrangle divided into two regions by a partition. The type of token is described in a left region of the token node. In addition, the value of a token is described in a right region of the token node.</p><p id="p-0071" num="0072"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a diagram illustrating an example of a syntax tree. The syntax tree illustrated in <figref idref="DRAWINGS">FIG. <b>11</b></figref> is created by the creating unit <b>133</b> from an attack query &#x201c;&#x2018;a&#x2032; OR 1=1&#x2014;&#x2019;&#x201d; that has been supplemented by the supplementation unit <b>132</b>. The &#x201c;sqli-query,&#x201d; &#x201c;statement,&#x201d; and &#x201c;condition&#x201d; in <figref idref="DRAWINGS">FIG. <b>11</b></figref> are examples of the type of text included in the attack query. In addition, &#x201c;STRING,&#x201d; &#x201c;SQL-WORD,&#x201d; &#x201c;NUMBER,&#x201d; and the like in <figref idref="DRAWINGS">FIG. <b>11</b></figref> are examples of the type of token. Further, &#x201c;&#x2018;a&#x2019;,&#x201d; &#x201c;OR,&#x201d; &#x201c;1,&#x201d; and the like in <figref idref="DRAWINGS">FIG. <b>11</b></figref> are examples of the value of the token.</p><p id="p-0072" num="0073">For example, the creating unit <b>133</b> creates a syntax tree having a character string that is classified as at least any one type of a word, an operator, a character string surrounded by quotation marks, a numerical value, a variable name, and a comment, which are included in a syntax of SQL, as a second node and having a combination of types of second nodes matching a predefined grammar as a first node.</p><p id="p-0073" num="0074"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a diagram illustrating an example of a type node. <figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a grammar for creating a syntax tree. The creating unit <b>133</b> creates a type node according to the grammar illustrated in <figref idref="DRAWINGS">FIG. <b>12</b></figref>. For example, the creating unit <b>133</b> may create a subtree having a type node &#x3c;statement&#x3e; as a root from a portion matching a grammar of &#x201c;&#x3c;items&#x3e;|(&#x3c;SQL-WORD&#x3e;[&#x3c;items&#x3e;[&#x3c;NAME&#x3e;]])+&#x201d; in an attack query. Then, the creating unit <b>133</b> creates a token node located below the type node &#x3c;statement&#x3e; from character strings corresponding to &#x3c;SQL-WORD&#x3e; and &#x3c;NAME&#x3e;. Note that &#x201c;SQL-WORD&#x201d; and &#x201c;NAME&#x201d; are types of tokens. Note that it is assumed that a subtree also includes a single node.</p><p id="p-0074" num="0075"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a diagram illustrating an example of a token node. As illustrated in <figref idref="DRAWINGS">FIG. <b>13</b></figref>, &#x3c;SQL-WORD&#x3e; is a word included in the syntax of SQL, and is, for example, &#x201c;SELECT,&#x201d; &#x201c;FROM,&#x201d; and the like. Further, &#x3c;NAME&#x3e; is a variable name, a table name, or the like, and is any character string such as &#x201c;abc&#x201d; or &#x201c;a1.&#x201d; Note that, in the following description, the token node may be written as &#x3c;type:value&#x3e;. For example, the token node is written as &#x3c;SQL-WORD:SELECT&#x3e;, &#x3c;NAME:abc&#x3e;, or &#x3c;STRING:&#x2018;abc&#x2019;&#x3e;.</p><p id="p-0075" num="0076">The impartation unit <b>134</b> imparts a label to a subtree having a first node as a root based on results obtained in a case where a partial query corresponding to the subtree is executed. The impartation unit <b>134</b> imparts a label to a subtree which is a part of a syntax tree based on results obtained in a case where a partial query corresponding to the subtree has been executed. In this manner, the impartation unit <b>134</b> performs semantic analysis of an attack query and imparts a label.</p><p id="p-0076" num="0077">Further, the impartation unit <b>134</b> may perform transformation of a syntax tree before imparting a label. <figref idref="DRAWINGS">FIG. <b>14</b></figref> is a diagram illustrating an example of a syntax tree transformation method. As illustrated in <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the impartation unit <b>134</b> performs transformation based on results of emulation for each subtree.</p><p id="p-0077" num="0078">First, the impartation unit <b>134</b> couples a token included in a subtree having a type node close to a terminus as a root. In the example of <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the impartation unit <b>134</b> couples the values &#x201c;1,&#x201d; &#x201c;=,&#x201d; and &#x201c;1&#x201d; of a token node included in a subtree having a type node &#x3c;condition&#x3e; as a root. Further, the impartation unit <b>134</b> adds &#x201c;SELECT&#x201d; to the head of a character string obtained by the coupling, and adds &#x201c;;&#x201d; to the tail.</p><p id="p-0078" num="0079">At this time, the impartation unit <b>134</b> obtains an SQL query of &#x201c;SELECT 1=1.&#x201d; The SQL query &#x201c;SELECT 1=1&#x201d; obtained here is an example of a partial query. That is, the partial query is a part of an SQL query constituted by the entire syntax tree. When &#x201c;SELECT 1=1;&#x201d; is executed on an emulator, &#x201c;1&#x201d; is obtained, and thus the impartation unit <b>134</b> converts a subtree having a type node &#x3c;condition&#x3e; as a root into a token node &#x3c;NUMBER:1&#x3e; as illustrated in <figref idref="DRAWINGS">FIG. <b>14</b></figref>. In this manner, the impartation unit <b>134</b> can simplify the syntax tree.</p><p id="p-0079" num="0080">The impartation unit <b>134</b> performs conversion of each subtree and impartation of a label in accordance with the semantic analysis rule <b>121</b>. <figref idref="DRAWINGS">FIG. <b>15</b></figref> is a diagram illustrating an example of a semantic analysis rule. Conditions (1) to (5) are as follows.<ul id="ul0002" list-style="none">    <li id="ul0002-0001" num="0081">(1) All child nodes of a root are token nodes.</li>    <li id="ul0002-0002" num="0082">(2) An environment-dependent label is present in a subtree.</li>    <li id="ul0002-0003" num="0083">(3) An emulation result is an error.</li>    <li id="ul0002-0004" num="0084">(4) An emulation result is an error having no table or the like.</li>    <li id="ul0002-0005" num="0085">(5) An emulation result refers to an existing table.</li></ul></p><p id="p-0080" num="0086">(1) and (2) can be conditions related to a tree structure. In addition, (3) to (5) can be information regarding emulation results. In addition, &#x201c;GOOD&#x201d; in <figref idref="DRAWINGS">FIG. <b>15</b></figref> means that a condition is satisfied. In addition, &#x201c;-&#x201d; in <figref idref="DRAWINGS">FIG. <b>15</b></figref> means that a condition is not determined. In addition, &#x201c;POOR&#x201d; in <figref idref="DRAWINGS">FIG. <b>15</b></figref> means that the condition is not satisfied.</p><p id="p-0081" num="0087">In a case where a root of a subtree is a type node &#x3c;statement&#x3e; and a parent node of the root is a type node &#x3c;sqli-query&#x3e;, the impartation unit <b>134</b> determines that rule <b>1</b> is satisfied. In this case, the impartation unit <b>134</b> does not perform conversion and impartation of a label.</p><p id="p-0082" num="0088"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a diagram illustrating an example of a subtree that satisfies rule <b>2</b>. In a case where condition (1) is satisfied and conditions (2), (3), and (5) are not satisfied, the impartation unit <b>134</b> determines that rule <b>2</b> is satisfied. In other words, in a case where all child nodes of the root are token nodes (condition (1), GOOD), an environment-dependent label is not present in the subtree (condition (2), POOR), an emulation result is not an error (condition (3), POOR), and an emulation result does not refer to an existing table (condition (5), POOR), the impartation unit <b>134</b> determines that rule <b>2</b> is satisfied. In this case, the impartation unit <b>134</b> converts a subtree into an execution result. In the example of <figref idref="DRAWINGS">FIG. <b>16</b></figref>, the impartation unit <b>134</b> converts a subtree having a type node &#x3c;function&#x3e; as a root into a token node &#x3c;STRING:&#x2018;a&#x2019;&#x3e;.</p><p id="p-0083" num="0089"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a diagram illustrating an example of a subtree that satisfies rule <b>3</b>. In a case where conditions (1) and (3) are satisfied and conditions (2) and (4) are not satisfied, the impartation unit <b>134</b> determines that rule <b>3</b> is satisfied. That is, in a case where all child nodes of the root are token nodes (condition (1), GOOD), an environment-dependent label is not present in the subtree (condition (2), POOR), an emulation result is an error (condition (3), GOOD), and an emulation result is not an error there being no table or the like (condition (4), POOR), the impartation unit <b>134</b> determines that rule <b>3</b> is satisfied. In this case, the impartation unit <b>134</b> sets a character string of a partial query as a token node, and imparts a label representing an error. In the example of <figref idref="DRAWINGS">FIG. <b>17</b></figref>, the impartation unit <b>134</b> converts a subtree having a type node &#x3c;function&#x3e; as a root into a token node &#x3c;QUERY:EXP (<b>10000</b>)&#x3e; and imparts a label &#x201c;ERROR.&#x201d;</p><p id="p-0084" num="0090"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a diagram illustrating an example of a subtree that satisfies rule <b>4</b>. In a case where the root of the subtree is a type node &#x3c;function&#x3e;, the number of child nodes is three, condition (1) is satisfied, and condition (3) is not satisfied, the impartation unit <b>134</b> determines that rule <b>4</b> is satisfied. That is, in a case where the root of the subtree is a type node &#x3c;function&#x3e;, the number of child nodes is three, and all child nodes of the root are token nodes (condition (1), GOOD), and an emulation result is not an error (condition (3), POOR), the impartation unit <b>134</b> determines that rule <b>4</b> is satisfied. In this case, the impartation unit <b>134</b> sets a character string of a partial query as a token node, and imparts a label representing an environment-dependent function. In the example of <figref idref="DRAWINGS">FIG. <b>18</b></figref>, the impartation unit <b>134</b> converts a subtree having a type node &#x3c;function&#x3e; as a root into a token node &#x3c;QUERY:VERSION ( )&#x3e; and imparts a label &#x201c;environment-dependent function.&#x201d;</p><p id="p-0085" num="0091"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a diagram illustrating an example of a subtree that satisfies rule <b>5</b>. In a case where conditions (1) and (5) are satisfied and condition (2) is not satisfied, the impartation unit <b>134</b> determines that rule <b>5</b> is satisfied. That is, in a case where all child nodes of a root are token nodes (condition (1), GOOD), an environment-dependent label is not present in the subtree (condition (2), POOR), and an emulation result refers to an existing table (condition (6), POOR), the impartation unit <b>134</b> determines that the rule <b>5</b> is satisfied. In this case, the impartation unit <b>134</b> sets a character string of a partial query as a token node and imparts a label representing access to an environment-dependent system table. In the example of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, the impartation unit <b>134</b> converts a subtree having a type node &#x3c;statement&#x3e; as a root into a token node &#x3c;QUERY:SELECT*FROM sys.user&#x3e; and imparts a label &#x201c;environment-dependent system table.&#x201d;</p><p id="p-0086" num="0092"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is a diagram illustrating an example of a subtree that satisfies rule <b>6</b>. In a case where conditions (1), (3), and (4) are satisfied and condition (2) is not satisfied, the impartation unit <b>134</b> determines that rule <b>5</b> is satisfied. That is, in a case where all child nodes of a root are token nodes (condition (1), GOOD), an environment-dependent label is not present in a subtree (condition (2), POOR), an emulation result is a normal error (condition (3), GOOD) and the error is an error of there being no table or the like (condition (4), GOOD), the impartation unit <b>134</b> determines that rule <b>6</b> is satisfied. In this case, the impartation unit <b>134</b> sets a character string of a partial query as a token node and imparts a label representing access to a server-specific table. In the example of <figref idref="DRAWINGS">FIG. <b>20</b></figref>, the impartation unit <b>134</b> converts a subtree having a type node &#x3c;statement&#x3e; as a root into a token node &#x3c;QUERY:SELECT*FROM abc&#x3e; and imparts a label &#x201c;environment-dependent table.&#x201d;</p><p id="p-0087" num="0093">In this manner, the impartation unit <b>134</b> can impart any one of a label representing an error, a label representing an environment-dependent function, a label representing access to an environment-dependent system table, and a label representing access to an environment-dependent server specific table to a subtree.</p><p id="p-0088" num="0094">The identification unit <b>135</b> identifies the type of damage of an attack according to a Web request based on the label imparted by the impartation unit <b>134</b>. The identification unit <b>135</b> identifies the type of attack according to a Web request based on a label imparted by the impartation unit <b>134</b>.</p><p id="p-0089" num="0095">In a case where at least a portion of a syntax tree matches a tree structure associated in advance with the type of attack, the identification unit <b>135</b> identifies the type of attack as the type of attack according to a Web request and identifies the type of damage of an attack according to the Web request based on a label imparted to a subtree located at a position designated in advance in the tree structure.</p><p id="p-0090" num="0096"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a diagram illustrating an example of a subtree in which an attack type is Boolean-based blind. <figref idref="DRAWINGS">FIG. <b>22</b></figref> is a diagram illustrating an example of a subtree in which an attack type is Time-based blind. <figref idref="DRAWINGS">FIG. <b>23</b></figref> is a diagram illustrating an example of a subtree in which an attack type is Union-based. <figref idref="DRAWINGS">FIG. <b>24</b></figref> is a diagram illustrating an example of a subtree in which an attack type is Stacked queries. In addition, the identification unit <b>135</b> identifies the type of damage due to an attack based on a node or a subtree located at a position described as a &#x201c;damage identification target&#x201d; in <figref idref="DRAWINGS">FIGS. <b>21</b> to <b>24</b></figref>. Such a node or subtree is referred to as a damage identification target subtree. In addition, it is assumed that the rules related to the types of attacks as illustrated in <figref idref="DRAWINGS">FIGS. <b>21</b> to <b>24</b></figref> are stored in the storage unit <b>12</b> as the attack type identification rule <b>122</b>.</p><p id="p-0091" num="0097"><figref idref="DRAWINGS">FIG. <b>25</b></figref> is a diagram illustrating an example of a rule for identifying investigation of vulnerability. In a case where an environment-dependent label is not imparted to a damage identification target subtree, the identification unit <b>135</b> identifies damage of an attack according to an attack query including the damage identification target subtree as investigation of vulnerability. Such an attack is characterized in that an output does not include information such as a specific character string that is dependent on an environment.</p><p id="p-0092" num="0098"><figref idref="DRAWINGS">FIGS. <b>26</b> and <b>27</b></figref> are diagrams illustrating an example of a rule for identifying leakage of system information. In a case where a label &#x201c;environment-dependent function&#x201d; or a label &#x201c;environment-dependent system table&#x201d; is imparted to a damage identification target subtree, the identification unit <b>135</b> identifies damage of an attack according to an attack query including the damage identification target subtree as leakage of system information. Such an attack is characterized in that a function for outputting access to a table for a system which is present by default and system information is executed.</p><p id="p-0093" num="0099"><figref idref="DRAWINGS">FIG. <b>28</b></figref> is a diagram illustrating an example of a rule for identifying leakage of table content. In a case where a label &#x201c;environment-dependent table&#x201d; is imparted to a damage identification target subtree, the identification unit <b>135</b> identifies damage of an attack according to an attack query including the damage identification target subtree as leakage of table content. Such an attack is characterized in that content of a server-specific table is leaked.</p><p id="p-0094" num="0100"><figref idref="DRAWINGS">FIG. <b>29</b></figref> is a diagram illustrating an example of a rule for identifying falsification. In a case where a damage identification target subtree is a token node &#x3c;SQL-WORD:DROP&#x3e;, the identification unit <b>135</b> identifies damage of an attack according to an attack query including the damage identification target subtree as falsification. Such an attack is characterized in that content of a database is rewritten.</p><p id="p-0095" num="0101">In this manner, in a case where a label is not imparted to a subtree, the identification unit <b>135</b> identifies the type of damage as investigation of vulnerability. In a case where a label representing an environment-dependent function or a label representing access to an environment-dependent system table is imparted to a subtree, the identification unit <b>135</b> identifies the type of damage as leakage of system information. In a case where a label representing access to an environment-dependent server specific table is imparted to a subtree, the identification unit <b>135</b> identifies the type of damage as leakage of table content. In addition, it is assumed that the rules for identifying damage as illustrated in <figref idref="DRAWINGS">FIGS. <b>25</b> to <b>29</b></figref> are stored in the storage unit <b>12</b> as the damage identification rule <b>123</b>.</p><p id="p-0096" num="0102">Flow of Processing in First Embodiment</p><p id="p-0097" num="0103"><figref idref="DRAWINGS">FIG. <b>30</b></figref> is a flowchart illustrating a flow of processing of the estimation apparatus according to the first embodiment. As illustrated in <figref idref="DRAWINGS">FIG. <b>30</b></figref>, first, the estimation apparatus <b>10</b> supplements an acquired attack query (step S<b>10</b>). The estimation apparatus <b>10</b> supplements parentheses (step S<b>11</b>). Then, the estimation apparatus <b>10</b> performs syntax analysis (step S<b>20</b>). Here, in a case where syntax analysis could be performed (step S<b>21</b>, Yes), the estimation apparatus <b>10</b> proceeds to step S<b>30</b>. On the other hand, in a case where syntax analysis could not be performed (step S<b>21</b>, No), the estimation apparatus <b>10</b> proceeds to step S<b>12</b>.</p><p id="p-0098" num="0104">The estimation apparatus <b>10</b> repeats the processing between step S<b>12</b> and step S<b>16</b> for each quotation mark included in an attack query. In a case where no quotation mark is included in an attack query (step S<b>13</b>, No), the estimation apparatus <b>10</b> returns to step S<b>12</b> and repeats the processing. On the other hand, in a case where quotation marks are included in the attack query (step S<b>13</b>, Yes), the estimation apparatus <b>10</b> supplements quotation marks (step S<b>14</b>). Further, the estimation apparatus <b>10</b> supplements parentheses (step S<b>15</b>).</p><p id="p-0099" num="0105">Further, after the supplementation has been finished, the estimation apparatus <b>10</b> performs syntax analysis (step S<b>22</b>). Here, in a case where syntax analysis could be performed (step S<b>23</b>, Yes), the estimation apparatus <b>10</b> proceeds to step S<b>30</b>. On the other hand, in a case where syntax analysis could not be performed (step S<b>23</b>, No), the estimation apparatus <b>10</b> proceeds to step S<b>16</b>.</p><p id="p-0100" num="0106">A flow of parenthesis supplementation processing (steps S<b>11</b> and S<b>15</b> in <figref idref="DRAWINGS">FIG. <b>30</b></figref>) will be described using <figref idref="DRAWINGS">FIG. <b>31</b></figref>. <figref idref="DRAWINGS">FIG. <b>31</b></figref> is a flowchart illustrating a flow of the parenthesis supplementation processing. First, the estimation apparatus <b>10</b> extracts all parentheses from an attack query (step S<b>101</b>). Here, the estimation apparatus <b>10</b> deletes closing parentheses &#x201c;( )&#x201d; until no parentheses &#x201c;( )&#x201d; remain in the extracted parenthesis string (steps S<b>102</b>, S<b>103</b>, and S<b>104</b>).</p><p id="p-0101" num="0107">Then, the estimation apparatus <b>10</b> adds an opening parenthesis &#x201c;(&#x201d; to the head of the attack query by the number of closing parentheses &#x201c;)&#x201d; remaining in the extraction parenthesis string (step S<b>105</b>). In addition, the estimation apparatus <b>10</b> adds a closing parenthesis &#x201c;)&#x201d; to the tail of the attack query by the number of opening parentheses &#x201c;(&#x201d; remaining in the extracted parenthesis string (step S<b>106</b>).</p><p id="p-0102" num="0108">A flow of analysis processing (steps S<b>20</b>, S<b>22</b>, <b>30</b> in <figref idref="DRAWINGS">FIG. <b>30</b></figref>) will be described using <figref idref="DRAWINGS">FIG. <b>32</b></figref>. <figref idref="DRAWINGS">FIG. <b>32</b></figref> is a flowchart illustrating a flow of the analysis processing. Here, description is given on the assumption that syntax analysis and semantic analysis are continuously performed. The estimation apparatus <b>10</b> repeatedly performs processing for all type nodes in order from a type node close to the terminus (steps S<b>201</b> and S<b>210</b>).</p><p id="p-0103" num="0109">The estimation apparatus <b>10</b> acquires a character string (partial query) that connects tokens included in a subtree having a selected type node as a root (step S<b>202</b>). Here, in a case where the head of a partial query is &#x201c;SELECT&#x201d; (step S<b>203</b>, Yes), the estimation apparatus <b>10</b> proceeds to step S<b>205</b>. On the other hand, in a case where the head of the partial query is not &#x201c;SELECT&#x201d; (step S<b>203</b>, No), the estimation apparatus <b>10</b> adds &#x201c;SELECT&#x201d; to the head of the partial query (step S<b>204</b>). Further, the estimation apparatus <b>10</b> adds &#x201c;;&#x201d; to the tail of an additional query to execute emulation (step S<b>205</b>).</p><p id="p-0104" num="0110">Here, the estimation apparatus <b>10</b> repeats, for each semantic analysis rule, processing for determining whether a condition of the rule is matched(steps S<b>206</b>, S<b>207</b>, and S<b>208</b>). In a case where the condition of the rule is matched(step S<b>207</b>, Yes), the estimation apparatus <b>10</b> converts a subtree according to a rule conversion method (step S<b>209</b>).</p><p id="p-0105" num="0111">A flow of identification processing will be described using <figref idref="DRAWINGS">FIG. <b>33</b></figref>. <figref idref="DRAWINGS">FIG. <b>33</b></figref> is a flowchart illustrating a flow of the identification processing. The identification processing may be performed, for example, after step S<b>16</b> in <figref idref="DRAWINGS">FIG. <b>30</b></figref>. The estimation apparatus <b>10</b> repeats, for each attack type rule, the processing between steps S<b>301</b> and S<b>310</b>.</p><p id="p-0106" num="0112">The estimation apparatus <b>10</b> acquires a list of subtrees that match a tree structure designated in the rule (step S<b>302</b>). Here, the estimation apparatus <b>10</b> repeats, for each subtree in the list, the processing between step S<b>303</b> and step S<b>309</b>. The estimation apparatus <b>10</b> extracts a subtree which is a damage identification target according to the rule (step S<b>304</b>).</p><p id="p-0107" num="0113">Here, the estimation apparatus <b>10</b> repeats, for each damage rule, the processing for determining whether a subtree matching a damage rule is present in a damage identification target subtree(steps S<b>305</b>, S<b>306</b>, and S<b>307</b>). In a case where a condition of the damage rule is matched (step S<b>306</b>, Yes), the estimation apparatus <b>10</b> outputs an attack type and a damage (step S<b>308</b>).</p><p id="p-0108" num="0114">Effects of First Embodiment</p><p id="p-0109" num="0115">As described so far, the extraction unit <b>131</b> of the estimation apparatus <b>10</b> extracts an attack query that has been inserted into a Web request that is detected to be an attack. The creating unit <b>133</b> creates a syntax tree from the attack query extracted by the extraction unit <b>131</b> in accordance with a rule defined in advance. The impartation unit <b>134</b> imparts a label to a subtree which is a part of the syntax tree based on results obtained in a case where an attack query corresponding to the subtree has been executed. The identification unit <b>135</b> identifies the type of damage of an attack according to a Web request based on the label imparted by the impartation unit <b>134</b>. In this manner, the estimation apparatus <b>10</b> identifies the type of damage from the attack query of the Web request. As a result, according to the present embodiment, a damage occurring by an SQL injection can be estimated.</p><p id="p-0110" num="0116">Further, the creating unit <b>133</b> creates a syntax tree having a first node representing the type of text included in the attack query extracted by the extraction unit <b>131</b> and a second node representing a character string included in the text. The impartation unit <b>134</b> imparts a label to a subtree having the first node as a root based on results obtained in a case where an attack query corresponding to the subtree has been executed. In this manner, the estimation apparatus <b>10</b> generates a tree structure including text and a character string included in the text as nodes. As a result, according to the present embodiment, it is possible to further accurately estimate a damage by clarifying a relationship between character strings included in an attack query.</p><p id="p-0111" num="0117">In addition, the creating unit <b>133</b> creates a syntax tree having a character string that is classified as at least any one type of a word, an operator, a character string surrounded by quotation marks, a numerical value, a variable name, and a comment, which are included in a syntax of SQL, as a second node and having a combination of types of second nodes, the combination matching a predefined grammar, as a first node. In this manner, the estimation apparatus <b>10</b> creates a syntax tree in which a role in SQL of each character string of an attack query becomes clear. As a result, according to the present embodiment, it is possible to further accurately estimate results of an attack.</p><p id="p-0112" num="0118">In a case where at least a portion of a syntax tree matches a tree structure associated in advance with the type of attack, the identification unit <b>135</b> identifies the type of attack as the type of attack according to a Web request and identifies the type of damage of an attack according to a Web request based on a label imparted to a subtree located at a position designated in advance in the tree structure. In this manner, the estimation apparatus <b>10</b> identifies an attack type. Thereby, according to the present embodiment, it is possible to further accurately estimate a damage based on an attack query.</p><p id="p-0113" num="0119">The impartation unit <b>134</b> imparts any one of a label representing an error, a label representing an environment-dependent function, a label representing access to an environment-dependent system table, and a label representing access to an environment-dependent server specific table to a subtree. In this manner, according to the present embodiment, it is possible to clarify the role of each portion of an attack query.</p><p id="p-0114" num="0120">In a case where a label is not imparted to a subtree, the identification unit <b>135</b> identifies the type of damage as investigation of vulnerability. In a case where a label representing an environment-dependent function or a label representing access to an environment-dependent system table is imparted to a subtree, the identification unit <b>135</b> identifies the type of damage as leakage of system information. In a case where a label representing access to an environment-dependent server specific table is imparted to a subtree, the identification unit <b>135</b> identifies the type of damage as leakage of table contents. In this manner, according to the present embodiment, it is possible to classify a damage according to an attack query in a manner that is easy to understand.</p><heading id="h-0014" level="1">Second Embodiment</heading><p id="p-0115" num="0121">An estimation system may further estimate a specific attack target according to an SQL injection and output the estimated results. An estimation system according to a second embodiment can not only identify the type of damage using a syntax tree, but also specify a specific attack target. Examples of the attack target include a DB, a system, and the like. For example, the estimation system may specify a table name included in the DB as an attack target.</p><p id="p-0116" num="0122">Configuration of Second Embodiment</p><p id="p-0117" num="0123">A configuration of the second embodiment will be described. Here, the second embodiment may be realized by replacing the estimation apparatus <b>10</b> in the estimation system <b>1</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> with an estimation apparatus <b>10</b><i>a. </i></p><p id="p-0118" num="0124"><figref idref="DRAWINGS">FIG. <b>34</b></figref> is a diagram illustrating a configuration example of the estimation apparatus according to the second embodiment. As illustrated in <figref idref="DRAWINGS">FIG. <b>34</b></figref>, the estimation apparatus <b>10</b><i>a </i>according to the second embodiment includes an interface unit <b>11</b>, a storage unit <b>12</b>, and a control unit <b>13</b>.</p><p id="p-0119" num="0125">The estimation apparatus <b>10</b><i>a </i>includes an estimation unit <b>136</b> in addition to the same configuration as that of the estimation apparatus <b>10</b> according to the first embodiment. The estimation unit <b>136</b> retrieves information for specifying an attack target and presents the results. Note that the estimation unit <b>136</b> is equivalent to a retrieval unit and a presentation unit.</p><p id="p-0120" num="0126">The estimation unit <b>136</b> retrieves a subtree that matches a query to be estimated from subtrees included in a syntax tree created from a query inserted into a Web request. Further, the estimation unit <b>136</b> presents information for specifying the type of damage of an attack and an attack target, the information being associated in advance with a subtree obtained by retrieval performed by the estimation unit <b>136</b>. As a result, according to the second embodiment, it is possible to specify an attack target of an SQL injection.</p><p id="p-0121" num="0127">Note that, in the first embodiment, a syntax tree including a subtree is constructed from a query of a Web request. In contrast, in the second embodiment, a subtree included in a syntax tree is retrieved from a query. Thus, the retrieval of a subtree by the estimation unit <b>136</b> may be referred to as reverse retrieval.</p><p id="p-0122" num="0128"><figref idref="DRAWINGS">FIG. <b>35</b></figref> is a diagram illustrating an attack target estimation method. As illustrated in <figref idref="DRAWINGS">FIG. <b>35</b></figref>, first, the estimation unit <b>136</b> retrieves a subtree that matches a query included in the original request. Then, the estimation unit <b>136</b> acquires information for specifying an attack target with reference to a damage target subtree obtained by retrieval and with reference to a node in which a specific table name and the like are described.</p><p id="p-0123" num="0129">For example, the estimation unit <b>136</b> may specify a table name or the like of an attack target with reference to &#x3c;NAME&#x3e; among the token nodes illustrated in <figref idref="DRAWINGS">FIG. <b>13</b></figref>. Further, in a query, it is conceivable that a table name or a system name is surrounded by quotation marks. In this case, the estimation unit <b>136</b> can also specify an attack target with reference to &#x3c;STRING&#x3e;.</p><p id="p-0124" num="0130">In the example of <figref idref="DRAWINGS">FIG. <b>35</b></figref>, the estimation unit <b>136</b> obtains a damage identification target subtree that matches &#x201c;SELECT*FROM users&#x201d; as a retrieval result. Then, the estimation unit <b>136</b> specifies a character string &#x201c;users&#x201d; representing a table name described in &#x3c;NAME&#x3e;.</p><p id="p-0125" num="0131">The estimation unit <b>136</b> generates data associated with an attack target host, a damage, and an attack target table as attack target estimation results. The damage mentioned here is the type of damage identified by the identification unit <b>135</b>. In addition, the estimation unit <b>136</b> may accumulate the generated data in the storage unit <b>12</b>, or may output the generated data via the interface unit <b>11</b>.</p><p id="p-0126" num="0132">The estimation apparatus <b>10</b><i>a </i>has the same function as that of the estimation apparatus <b>10</b> according to the first embodiment. That is, the extraction unit <b>131</b> extracts an attack query that has been inserted into a Web request that is detected to be an attack. The creating unit <b>133</b> creates a syntax tree in accordance with a rule defined in advance from the attack query extracted by the extraction unit <b>131</b>. The impartation unit <b>134</b> imparts a label to a subtree which is a part of the syntax tree based on results obtained in a case where an attack query corresponding to the subtree has been executed. The identification unit <b>135</b> identifies the type of damage of an attack according to a Web request based on the label imparted by the impartation unit <b>134</b>. The estimation unit <b>136</b> retrieves a subtree matching a query to be estimated from subtrees included in the syntax tree created by the creating unit. The estimation unit <b>136</b> presents information for specifying the type of damage of an attack and an attack target based on a subtree obtained by retrieval performed by the estimation unit <b>136</b> and a label imparted to the subtree. Thus, in the second embodiment, it is possible to consistently perform the generation of a syntax tree and the specification of an attack target.</p><p id="p-0127" num="0133">Flow of Processing in Second Embodiment</p><p id="p-0128" num="0134"><figref idref="DRAWINGS">FIG. <b>36</b></figref> is a flowchart illustrating a flow of processing of the estimation apparatus according to the second embodiment. As illustrated in <figref idref="DRAWINGS">FIG. <b>36</b></figref>, first, the estimation apparatus <b>10</b><i>a </i>reversely retrieves a subtree from a query of a request (step S<b>501</b>).</p><p id="p-0129" num="0135">Then, the estimation apparatus <b>10</b><i>a </i>specifies an attack target based on the reversely retrieved subtree (step S<b>502</b>). For example, the estimation apparatus <b>10</b><i>a </i>may specify a table name or a system name of the attack target with reference to a predetermined node included in the subtree.</p><p id="p-0130" num="0136">Further, the estimation apparatus <b>10</b><i>a </i>outputs the specified attack target (step S<b>503</b>). In this case, the estimation apparatus <b>10</b><i>a </i>can output the attack target together with the type of damage due to an attack.</p><p id="p-0131" num="0137">System Configuration and the Like</p><p id="p-0132" num="0138">Further, each component of each of the illustrated apparatuses is configured with a functional concept and does not necessarily have to be physically configured as illustrated in the drawing. That is, the specific form of distribution and integration of each apparatus is not limited to the one illustrated in the drawing and all or part of them can be functionally or physically distributed or integrated in arbitrary units according to various loads, usage conditions, and the like. Further, all or any portion of each processing function performed by each apparatus may be realized by a CPU and a program analyzed and executed by the CPU or may be realized as hardware by wired logic.</p><p id="p-0133" num="0139">In addition, all or some of the processes described as being performed automatically among the processes described in this embodiment can be performed manually, or all or some of the processes described as being performed manually can be performed automatically by a known method. In addition, information including the processing procedures, control procedures, specific names, and various types of data or parameters illustrated in the above document or drawings can be arbitrarily changed unless otherwise specified.</p><p id="p-0134" num="0140">Program</p><p id="p-0135" num="0141">In one embodiment, the estimation apparatus <b>10</b><i>a </i>can be implemented by installing an estimation program that executes the aforementioned estimation processing as package software or online software on a desired computer. For example, it is possible to cause an information processing apparatus to function as the estimation apparatus <b>10</b><i>a </i>by causing the information processing apparatus to execute the aforementioned estimation program. Here, the information processing apparatus includes a desktop or laptop personal computer. In addition, examples of the information processing apparatus include a smartphone, a mobile communication terminal such as a mobile phone or a personal handyphone system (PHS), and a slate terminal such as a personal digital assistant (PDA).</p><p id="p-0136" num="0142">Further, the estimation apparatus <b>10</b><i>a </i>can also be implemented as an estimation server apparatus that provides to services regarding the above-described estimation processing to a client by using a terminal apparatus to be used by a user as the client. For example, the estimation server apparatus is implemented as a server apparatus that provides an estimation service that uses a Web request as an input and uses information for specifying an identification result of a damage due to an attack and an attack target as outputs. In this case, the estimation server apparatus may be implemented as a web server or may be implemented as a cloud that provides services regarding the above-described estimation processing through outsourcing.</p><p id="p-0137" num="0143"><figref idref="DRAWINGS">FIG. <b>37</b></figref> is a diagram illustrating an example of a computer that executes an estimation program. A computer <b>1000</b> includes, for example, a memory <b>1010</b> and a CPU <b>1020</b>. Further, the computer <b>1000</b> includes a hard disk drive interface <b>1030</b>, a disc drive interface <b>1040</b>, a serial port interface <b>1050</b>, a video adapter <b>1060</b>, and a network interface <b>1070</b>. These units are connected by a bus <b>1080</b>.</p><p id="p-0138" num="0144">The memory <b>1010</b> includes a read only memory (ROM) <b>1011</b> and a RAM <b>1012</b>. The ROM <b>1011</b> stores a boot program such as, for example, a basic input output system (BIOS). The hard disk drive interface <b>1030</b> is connected to a hard disk drive <b>1090</b>. The disc drive interface <b>1040</b> is connected to a disc drive <b>1100</b>. A removable storage medium such as, for example, a magnetic disc or an optical disc is inserted into the disc drive <b>1100</b>. The serial port interface <b>1050</b> is connected to, for example, a mouse <b>1110</b> and a keyboard <b>1120</b>. The video adapter <b>1060</b> is connected to, for example, a display <b>1130</b>.</p><p id="p-0139" num="0145">The hard disk drive <b>1090</b> stores, for example, an OS <b>1091</b>, an application program <b>1092</b>, a program module <b>1093</b>, and program data <b>1094</b>. That is, a program defining each processing of the estimation apparatus <b>10</b><i>a </i>is implemented as the program module <b>1093</b> in which a computer executable code is described. The program module <b>1093</b> is stored in, for example, the hard disk drive <b>1090</b>. For example, the program module <b>1093</b> for executing similar processing as for the functional configurations of the estimation apparatus <b>10</b><i>a </i>is stored in the hard disk drive <b>1090</b>. The hard disk drive <b>1090</b> may be replaced with an SSD.</p><p id="p-0140" num="0146">Further, setting data used in the process of the embodiment described above is stored as the program data <b>1094</b> in the memory <b>1010</b> or the hard disk drive <b>1090</b>, for example. The CPU <b>1020</b> reads the program module <b>1093</b> and the program data <b>1094</b> stored in the memory <b>1010</b> and the hard disk drive <b>1090</b> into the RAM <b>1012</b> as necessary, and executes the processing of the above-described embodiments.</p><p id="p-0141" num="0147">The program module <b>1093</b> and the program data <b>1094</b> are not necessarily stored in the hard disk drive <b>1090</b>, and may be stored in, for example, a removable storage medium and be read out by the CPU <b>1020</b> through the disc drive <b>1100</b> or the like. Alternatively, the program module <b>1093</b> and the program data <b>1094</b> may be stored in another computer connected via a network (a local area network (LAN), a wide area network (WAN), or the like). The program module <b>1093</b> and the program data <b>1094</b> may be read from another computer via the network interface <b>1070</b> by the CPU <b>1020</b>.</p><heading id="h-0015" level="1">REFERENCE SIGNS LIST</heading><p id="p-0142" num="0000"><ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0148"><b>1</b> Estimation system</li>    <li id="ul0003-0002" num="0149"><b>2</b> Internet</li>    <li id="ul0003-0003" num="0150"><b>3</b> Server</li>    <li id="ul0003-0004" num="0151"><b>4</b> Detection apparatus</li>    <li id="ul0003-0005" num="0152"><b>10</b> Estimation apparatus</li>    <li id="ul0003-0006" num="0153"><b>11</b> Interface unit</li>    <li id="ul0003-0007" num="0154"><b>12</b> Storage unit</li>    <li id="ul0003-0008" num="0155"><b>13</b> Control unit</li>    <li id="ul0003-0009" num="0156"><b>121</b> Semantic analysis rule</li>    <li id="ul0003-0010" num="0157"><b>122</b> Attack type identification rule</li>    <li id="ul0003-0011" num="0158"><b>123</b> Damage identification rule</li>    <li id="ul0003-0012" num="0159"><b>131</b> Extraction unit</li>    <li id="ul0003-0013" num="0160"><b>132</b> Supplementation unit</li>    <li id="ul0003-0014" num="0161"><b>133</b> Creating unit</li>    <li id="ul0003-0015" num="0162"><b>134</b> Impartation unit</li>    <li id="ul0003-0016" num="0163"><b>135</b> Identification unit</li>    <li id="ul0003-0017" num="0164"><b>136</b> Estimation unit</li></ul></p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An estimation system comprising:<claim-text>retrieval circuitry configured to retrieve a subtree that matches a query to be estimated, from subtrees included in a syntax tree created from a query inserted into a Web request; and</claim-text><claim-text>presentation circuitry configured to present information for specifying a type of damage of an attack and an attack target, the information being associated in advance with the subtree obtained by the retrieval circuitry in the retrieval.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The estimation system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the presentation circuitry presents a table name as information for specifying the attack target.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The estimation system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>extraction circuitry configured to extract a query inserted into a Web request that is detected to be an attack;</claim-text><claim-text>creating circuitry configured to create a syntax tree from the query extracted by the extraction circuitry in accordance with a rule defined in advance;</claim-text><claim-text>impartation circuitry configured to impart a label to a subtree that is a part of the syntax tree based on a result obtained in a case where a query corresponding to the subtree has been executed; and</claim-text><claim-text>identification circuitry configured to identify the type of damage of the attack according to the Web request based on the label imparted by the impartation circuitry,</claim-text><claim-text>wherein the retrieval circuitry retrieves a subtree that matches a query to be estimated, from subtrees included in the syntax tree created by the creating circuitry, and</claim-text><claim-text>the presentation circuitry presents information for specifying the type of damage of the attack and the attack target, based on the subtree obtained by the retrieval circuitry in the retrieval and the label imparted to the subtree.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. An estimation method at an estimation system, the estimation method comprising:<claim-text>retrieving a subtree that matches a query to be estimated, from subtrees included in a syntax tree created from a query inserted into a Web request; and</claim-text><claim-text>presenting information for specifying a type of damage of an attack and an attack target, the information being associated in advance with the subtree obtained in the retrieving.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. A non-transitory computer readable medium including an estimation program which when executed causes a computer to:<claim-text>retrieve a subtree that matches a query to be estimated, from subtrees included in a syntax tree created from a query inserted into a Web request; and</claim-text><claim-text>present information for specifying a type of damage of an attack and an attack target, the information being associated in advance with the subtree obtained in the retrieving.</claim-text></claim-text></claim></claims></us-patent-application>