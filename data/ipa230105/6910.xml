<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006911A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006911</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364178</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>12</main-group><subgroup>26</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>50</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>106</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">DETECTION OF NETWORK MEASUREMENT INACCURACIES</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Juniper Networks, Inc.</orgname><address><city>Sunnyvale</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Friman</last-name><first-name>Marcus Jan</first-name><address><city>Lulea</city><country>SE</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Kers</last-name><first-name>Fredrik Anders</first-name><address><city>Lulea</city><country>SE</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The disclosure describes techniques for detecting network measurement inaccuracies through the detection of sender delays or packet drops. For example, a sender device of a test packet may determine whether the sender device is experiencing any issues in sending the test packet to a receiver device and notify a controller of the issues such that the controller may generate an indication that one or more Key Performance Indicator (KPI) measurements based on the test packets from the sender device are inaccurate and/or untrustworthy, remove the inaccurate KPI measurements, and/or adjust the inaccurate KPI measurements.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="108.46mm" wi="158.75mm" file="US20230006911A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="243.50mm" wi="170.52mm" orientation="landscape" file="US20230006911A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="220.73mm" wi="180.26mm" orientation="landscape" file="US20230006911A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="210.57mm" wi="170.77mm" orientation="landscape" file="US20230006911A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="229.11mm" wi="175.34mm" file="US20230006911A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="234.02mm" wi="173.48mm" orientation="landscape" file="US20230006911A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="246.30mm" wi="171.37mm" orientation="landscape" file="US20230006911A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="248.16mm" wi="173.06mm" orientation="landscape" file="US20230006911A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">The disclosure relates to computer networks, and more specifically, to measuring network performance.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">A computer network is a collection of interconnected computing devices that can exchange data and share resources. In some examples, the computing devices may provide services to measure network performance of a computer network. For example, the computing devices may exchange data to compute key performance indicators (KPIs), such as latency, inter frame gap (Inter Frame Delay Variation), jitter, packet loss, throughput, and the like.</p><p id="p-0004" num="0003">For example, to measure the KPIs, computing devices may exchange test packets including timestamps to indicate the time at which the test packet is sent or received. For instance, to compute latency between devices, a sender device sends a test packet including a timestamp indicating the time at which the message is sent, and the receiver device may generate a timestamp indicating the time in which the message was received. The timestamps are used to compute latency and/or other KPIs for the network performance between the computing devices.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0005" num="0004">In general, the disclosure describes techniques for detecting network measurement inaccuracies through the detection of sender delays or packet drops. Computing devices of a network are configured as measurement points (e.g., test agents) to measure network performance. For example, a test agent of a sender computing device (referred to herein as &#x201c;sender device&#x201d;) may send a test packet to a test agent of a receiving device (referred to herein as &#x201c;receiver device&#x201d;), which in turn may use the test packet to compute one or more KPIs. As one example, the sender device may send a test packet including a timestamp indicating the time at which the test packet is sent (referred to herein as &#x201c;sending timestamp&#x201d;). When the receiver device receives the test packet, the receiver device generates a timestamp indicating the time at which the test packet is received (referred to herein as &#x201c;receiving timestamp&#x201d;). The receiver device may use the timestamps to compute one or more KPIs, such as latency. A controller may obtain the measured KPIs from the receiver device, and may output for display, e.g., via a graphical user interface, the measurements to a user or network administrator.</p><p id="p-0006" num="0005">In some instances, a sender device may experience issues with sending the test packet, which may result in inaccurate and/or untrustworthy KPI measurements. For example, when sending a sending timestamp to a receiver device, an application of the sender device generates a test packet including a first timestamp indicating a time at which the test packet is generated by the application. The sender device forwards the test packet to a network interface (e.g., network interface card) of the sender device to output the test packet to the receiver device. The network interface may, in some instances, be delayed in sending the test packet including the sending timestamp to the receiver device. In another example, the sender device may experience a pause in the measurement process (referred to herein as &#x201c;scheduling pauses&#x201d;), such as when applications other than the test application are running on the sender device and need CPU cycles, where such pauses may cause the sender device to drop test packets due to queue overflows, for example. The receiver device may compute one or more KPI measurements based on the test packet without accounting for the sender delay or packet drops due to scheduling pauses, which may result in the controller presenting the one or more KPI measurements without any indication that the KPI measurements are not attributed to the network performance, but instead to sender issues.</p><p id="p-0007" num="0006">In accordance with the techniques described herein, the sender device may determine whether the sender device is experiencing any issues in sending the test packet to the receiver device and notify the controller of the issues such that the controller may generate an indication that the one or more KPI measurements based on the test packets from the sender device are inaccurate and/or untrustworthy, remove the inaccurate KPI measurements, and/or adjust the inaccurate KPI measurements.</p><p id="p-0008" num="0007">In examples where the sender device may experience delay in sending the test packet, the techniques describe the sender device obtaining a second timestamp from a kernel or hardware component of the network interface that indicates a time at which the test packet is actually output from the sender device (also referred to herein as &#x201c;actual sending timestamp&#x201d;). The sender device may compute a time difference value (also referred to herein as &#x201c;delta&#x201d;) between the first timestamp (time test packet generated by application) and the second timestamp (time test packet output from sender device), and compare the time difference value with a threshold time value. If the sender device determines there is a sender delay issue (e.g., time difference value exceeds the threshold time value), the sender device sends a message to notify the controller of the sender delay issue, which in turn may, for example, generate and output for display a visual indication within the graphical user interface to indicate the one or more KPI measurements based on the test packets from the sender device are inaccurate and/or untrustworthy, or remove the KPI measurements.</p><p id="p-0009" num="0008">In examples where the sender device experiences packet drops (e.g., due to scheduling pauses), the techniques describe the sender device obtaining from the network interface a count of test packets sent or dropped from the network interface. The sender device compares the number of sent packets from the network interface counter with the number of test packets sent from the test application, and sends a message to notify the controller of the result of the comparison.</p><p id="p-0010" num="0009">For example, if the number of sent packets from the network interface counter is less than the number of packets sent from the test application, the sender device may notify the controller that the one or more KPI measurements based on test packets sent from the sender device are inaccurate, which in turn may generate and output for display an indication on the graphical user interface to indicate the KPI measurements are inaccurate and/or untrustworthy, or remove the KPI measurements. If the number of sent packets from the network interface counter is greater than the number of packets sent from the test application and the sender device detects one or more packet drops from the network interface, the sender device may notify the controller that the one or more KPI measurements based on test packets sent from the sender device may be inaccurate, which in turn may generate and output for display an indication (e.g., warning) on the graphical user interface to indicate the KPI measurements may be inaccurate and/or untrustworthy.</p><p id="p-0011" num="0010">The techniques described herein may provide one or more technical advantages. For example, by implementing a device that detects sender issues and notifies a controller of the sender issues, the controller may present a user or network administrator with additional information to enable the user or network administrator to better assess the accuracy of the network measurements. This gives the user or network administrator the assurance that the network measurements accurately reflect the performance of the network and to doubt measurements that may seemingly be attributed to the network when the issue is actually attributed to the sender device.</p><p id="p-0012" num="0011">In one example of the techniques described herein, a method comprises sending, by an application of a sender device and to a receiver device, a test packet including a first timestamp indicating a time at which the test packet is generated by the application; obtaining, by the sender device and from a network interface of the sender device, a second timestamp indicating a time at which the test packet is output from the sender device via the network interface; computing, by the sender device, a time difference value between the second timestamp and the first timestamp; comparing, by the sender device, the time difference value with a threshold time value; and sending, by the sender device and if the time difference value exceeds the threshold time value, a message to a controller to notify the controller that one or more performance measurements based on the test packet are inaccurate, wherein the controller is distinct from the sender device and the receiver device.</p><p id="p-0013" num="0012">In another example of the techniques described herein, a sender device includes a network interface; and one or more processors operably coupled to a memory, wherein the one or more processors are configured to: send, by an application of the sender device and to a receiver device, a test packet including a first timestamp indicating a time at which the test packet is generated by the application; obtain, from a network interface of the sender device, a second timestamp indicating a time at which the test packet is output from the sender device via the network interface; compute a time difference value between the second timestamp and the first timestamp; compare the time difference value with a threshold time value; and send, if the time difference value exceeds the threshold time value, a message to a controller to notify the controller that one or more performance measurements based on the test packet are inaccurate, wherein the controller is distinct from the sender device and the receiver device.</p><p id="p-0014" num="0013">In another example of the techniques described herein, a controller comprises one or more processors operably coupled to a memory, wherein the one or more processors are configured to: receive, from a receiver device that receives a test packet, one or more performance measurements determined by the receiver device based at least in part on the test packet; receive, from a sender device that sends the test packet to the receiver, a message to notify the controller that the one or more performance measurements are inaccurate due to internal delays of the sender device; and output for display an indication of the one or more performance measurements and an indication that the one or more performance measurements are inaccurate.</p><p id="p-0015" num="0014">In another example of the techniques described herein, a method comprises sending, by an application executing on a sender device, and to a receiver device, one or more test packets; obtaining, by the sender device and from a network interface of the sender device, a count of packets sent from the network interface; obtaining, by the sender device and from the application, a count of the one or more test packets sent by the application; comparing, by the sender device, the count of packets sent from the network interface and the count of the one or more test packets sent by the application to obtain a result of the comparing; and sending, by the sender device, a message to a controller that notifies the controller of the result of the comparing.</p><p id="p-0016" num="0015">In another example of the techniques described herein, a sender device includes a network interface; and one or more processors operably coupled to a memory, wherein the one or more processors are configured to: send, by an application executing on the sender device, and to a receiver device, one or more test packets; obtain, from a network interface of the sender device, a count of packets sent from the network interface; obtain, from the application, a count of the one or more test packets sent by the application; compare the count of packets sent from the network interface and the count of the one or more test packets sent by the application to obtain a result of the comparison; and send a message to a controller that notifies the controller of the result of the comparison.</p><p id="p-0017" num="0016">In another example of the techniques described herein, a controller comprises one or more processors operably coupled to a memory, wherein the one or more processors are configured to: receive, from a receiver device that receives a test packet, one or more performance measurements determined by the receiver device based at least in part on the one or more test packets; receive, from a sender device that sends the one or more test packets to the receiver, a message that indicates an issue in sending the one or more test packets.</p><p id="p-0018" num="0017">The details of one or more examples are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an example network system that provides detection of network measurement inaccuracies, in accordance with one or more aspects of the techniques described in this disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating an example network system that provides detection of network measurement inaccuracies through the detection of sender delays, in accordance with one or more aspects of the techniques described in this disclosure.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating an example network system that provides detection of network measurement inaccuracies through the detection of sender packet drops, in accordance with one or more aspects of the techniques described in this disclosure.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram illustrating an example computing device to execute one or more functions to perform the detection of network measurement inaccuracies, in accordance with the techniques described in this disclosure.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating an example of a controller capable of operating in accordance with the techniques described in this disclosure.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow diagram illustrating an example operation of detecting network measurement inaccuracies through the detection of sender delays, in accordance with one or more aspects of the techniques described in this disclosure.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow diagram illustrating an example operation of detecting network measurement inaccuracies through the detection of sender packet drops, in accordance with one or more aspects of the techniques described in this disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an example network system <b>2</b> (&#x201c;network system <b>2</b>&#x201d;) that provides detection of network measurement inaccuracies, in accordance with the techniques described herein.</p><p id="p-0027" num="0026">Network system <b>2</b> may operate as a private network to provide packet-based network services to subscriber devices <b>16</b>. That is, network system <b>2</b> provides authentication and establishment of network access for subscriber devices <b>16</b> such that a subscriber device may begin exchanging data packets with public network <b>12</b>, which may be an internal or external packet-based network such as the Internet.</p><p id="p-0028" num="0027">In the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, network system <b>2</b> comprises access network <b>6</b> that provides connectivity to public network <b>12</b> via wide area network <b>7</b> (hereinafter, &#x201c;WAN <b>7</b>&#x201d;). WAN <b>7</b> and public network <b>12</b> may provide packet-based services that are available for request and use by subscriber devices <b>16</b>. As examples, WAN <b>7</b> and/or public network <b>12</b> may provide bulk data delivery, voice over Internet protocol (VoIP), Internet Protocol television (IPTV), Short Messaging Service (SMS), Wireless Application Protocol (WAP) service, or customer-specific application services. Public network <b>12</b> may comprise, for instance, a local area network (LAN), a wide area network (WAN), the Internet, a virtual LAN (VLAN), an enterprise LAN, a layer <b>3</b> virtual private network (VPN), an Internet Protocol (IP) intranet operated by the service provider that operates access network <b>6</b>, an enterprise IP network, or some combination thereof. In various examples, public network <b>12</b> is connected to a public WAN, the Internet, or to other networks. Public network <b>12</b> executes one or more packet data protocols (PDPs), such as IP (IPv4 and/or IPv6), X.25 or Point-to-Point Protocol (PPP), to enable packet-based transport of public network <b>12</b> services.</p><p id="p-0029" num="0028">In general, subscriber devices <b>16</b> connect to network devices <b>18</b>A-<b>18</b>B (collectively, &#x201c;network devices <b>18</b>&#x201d;) via access network <b>6</b> to receive connectivity to subscriber services for applications hosted by public network <b>12</b>. A subscriber may represent, for instance, an enterprise, a residential subscriber, or a mobile subscriber. Subscriber devices <b>16</b> may be, for example, personal computers, laptop computers or other types of computing devices positioned behind customer equipment (CE) <b>11</b>, which may provide local routing and switching functions. Each of subscriber devices <b>16</b> may run a variety of software applications, such as word processing and other office support software, web browsing software, software to support voice calls, video games, video conferencing, and email, among others. For example, subscriber device <b>16</b> may be a variety of network-enabled devices, referred generally to as &#x201c;Internet-of-Things&#x201d; (IoT) devices, such as cameras, sensors (S), televisions, appliances, etc. In addition, subscriber devices <b>16</b> may comprise mobile devices that access the data services of network system <b>2</b> via a radio access network (RAN) <b>4</b>. Example mobile subscriber devices include mobile telephones, laptop or desktop computers having, e.g., a wireless card, wireless-capable netbooks, tablets, video game devices, pagers, smart phones, personal data assistants (PDAs) or the like.</p><p id="p-0030" num="0029">A network service provider operates, or in some cases leases, elements (e.g., network devices) of access network <b>6</b> to provide packet transport between subscriber devices <b>16</b> and network device <b>18</b>A. Access network <b>6</b> represents a network that aggregates data traffic from one or more of subscriber devices <b>16</b> for transport to/from WAN <b>7</b> of the service provider. Access network <b>6</b> includes network nodes that execute communication protocols to transport control and user data to facilitate communication between subscriber devices <b>16</b> and network device <b>18</b>A. Access network <b>6</b> may include a broadband access network, a wireless LAN, a public switched telephone network (PSTN), a customer premises equipment (CPE) network, or other type of access network, and may include or otherwise provide connectivity for cellular access networks, such as a radio access network (RAN), e.g., RAN <b>4</b>. Examples of the RAN include networks conforming to a 5<sup>th </sup>Generation (5G) mobile network, 4<sup>th </sup>Generation (4G) mobile network Universal Mobile Telecommunications System (UMTS) architecture, an evolution of UMTS referred to as Long Term Evolution (LTE), mobile IP standardized by the Internet Engineering Task Force (IETF), as well as other standards proposed by the 3<sup>rd </sup>Generation Partnership Project (3GPP), 3<sup>rd </sup>Generation Partnership Project 2 (3GGP/2) and the WiMAX forum.</p><p id="p-0031" num="0030">Network device <b>18</b>A-<b>18</b>B (collectively, &#x201c;network devices <b>18</b>&#x201d;) may each be a customer edge (CE) router, a provider edge (PE) router, or other network device that provides connectivity between networks, e.g., access network <b>6</b> and public network <b>12</b>. WAN <b>7</b> offers packet-based connectivity to subscriber devices <b>16</b> attached to access network <b>6</b> for accessing public network <b>12</b> (e.g., the Internet). WAN <b>7</b> may represent a public network that is owned and operated by a service provider to interconnect a plurality of networks, which may include access network <b>6</b>. In some examples, WAN <b>7</b> may implement Multi-Protocol Label Switching (MPLS) forwarding and in such instances may be referred to as an MPLS network or MPLS backbone. In some instances, WAN <b>7</b> represents a plurality of interconnected autonomous systems, such as the Internet, that offers services from one or more service providers. Public network <b>12</b> may represent the Internet. Public network <b>12</b> may represent an edge network coupled to WAN <b>7</b> via a transit network <b>22</b> and one or more network devices, e.g., a customer edge device such as customer edge switch or router. Public network <b>12</b> may include a data center. In the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, network device <b>18</b>B may exchange packets with service nodes <b>10</b> via virtual network <b>20</b>, and network device <b>18</b>B may forward packets to public network <b>12</b> via transit network <b>22</b>.</p><p id="p-0032" num="0031">In examples of network system <b>2</b> that include a wireline/broadband access network, network devices <b>18</b>A or <b>18</b>B may represent a Broadband Network Gateway (BNG), Broadband Remote Access Server (BRAS), MPLS PE router, core router or gateway, or Cable Modem Termination System (CMTS). In examples of network system <b>2</b> that include a cellular access network as access network <b>6</b>, network devices <b>18</b>A or <b>18</b>B may represent a mobile gateway, for example, a Gateway General Packet Radio Service (GPRS) Serving Node (GGSN), an Access Gateway (aGW), or a Packet Data Network (PDN) Gateway (PGW). In other examples, the functionality described with respect to network device <b>18</b>B may be implemented in a switch, service card or another network element or component. In some examples, network device <b>18</b>B may itself be a service node.</p><p id="p-0033" num="0032">A network service provider that administers at least parts of network system <b>2</b> typically offers services to subscribers associated with devices, e.g., subscriber devices <b>16</b>, that access network system <b>2</b>. Services offered may include, for example, traditional Internet access, VoIP, video and multimedia services, and security services. As described above with respect to WAN <b>7</b>, WAN <b>7</b> may support multiple types of access network infrastructures that connect to service provider network access gateways to provide access to the offered services, e.g., service provided by service node <b>10</b>. In some instances, the network system may include subscriber devices <b>16</b> that attach to multiple different access networks <b>6</b> having varying architectures.</p><p id="p-0034" num="0033">In general, any one or more of subscriber devices <b>16</b> may request authorization and data services by sending a session request to a gateway device such as network devices <b>18</b>A or <b>18</b>B. In turn, the network device may access a central server (not shown) such as an Authentication, Authorization and Accounting (AAA) server to authenticate the one of subscriber devices <b>16</b> requesting network access. Once authenticated, any of subscriber devices <b>16</b> may send subscriber data traffic toward WAN <b>7</b> to access and receive services provided by public network <b>20</b>, and such packets may traverse network devices <b>18</b>A or <b>18</b>B as part of at least one packet flow. In some examples, network device <b>18</b>A may forward all authenticated subscriber traffic to public network <b>12</b>, and network device <b>18</b>B may apply services and/or steer particular subscriber traffic to data center <b>9</b> if the subscriber traffic requires services on service nodes <b>10</b>. Applications (e.g., service applications) to be applied to the subscriber traffic may be hosted on service nodes <b>10</b>.</p><p id="p-0035" num="0034">For example, network system <b>2</b> includes a data center <b>9</b> having a cluster of service nodes <b>10</b> that provide an execution environment for the virtualized network services. In some examples, each of service nodes <b>10</b> represents a service instance. Each of service nodes <b>10</b> may apply one or more services to traffic flows. As such, network device <b>18</b>B may steer subscriber packet flows through defined sets of services provided by service nodes <b>10</b>. That is, in some examples, each subscriber packet flow may be forwarded through a particular ordered combination of services provided by services nodes <b>10</b>, each ordered set being referred to herein as a &#x201c;service chain.&#x201d; As examples, service nodes <b>10</b> may apply stateful firewall (SFW) and security services, deep packet inspection (DPI), carrier grade network address translation (CGNAT), traffic destination function (TDF) services, media (voice/video) optimization, Internet Protocol security (IPSec)/virtual private network (VPN) services, hypertext transfer protocol (HTTP) filtering, counting, accounting, charging, and/or load balancing of packet flows, or other types of services applied to network traffic.</p><p id="p-0036" num="0035">In some examples, network system <b>2</b> comprises a software defined network (SDN) and network functions virtualization (NFV) architecture. In these examples, an SDN controller (not shown) may provide a controller for configuring and managing the routing and switching infrastructure of network system <b>2</b>.</p><p id="p-0037" num="0036">Although illustrated as part of data center <b>9</b>, service nodes <b>10</b> may be network devices coupled by one or more switches or virtual switches of WAN <b>7</b>. In one example, each of services nodes <b>10</b> may run as virtual machines (VMs) in a virtual compute environment. Moreover, the compute environment may comprise a scalable cluster of general computing devices, such as x86 processor-based services. As another example, service nodes <b>10</b> may comprise a combination of general purpose computing devices and special purpose appliances. As virtualized network services, individual network services provided by service nodes <b>10</b> can scale just as in a modern data center through the allocation of virtualized memory, processor utilization, storage and network policies, as well as horizontally by adding additional load-balanced VMs. In other examples, services nodes <b>10</b> may be gateway devices or other routers. In further examples, the functionality described with respect to each of service nodes <b>10</b> may be implemented in a switch, service card, or another network element or component.</p><p id="p-0038" num="0037">As described herein, network elements within network system <b>2</b> may provide network monitoring services. For example, network devices <b>18</b> and/or service nodes <b>10</b> are configured as measurement points (e.g., test agents) to provide network monitoring services to determine, for example, performance and functionality, as well as interconnections of service chains. Test agents may be delivered from a cloud as a Software-as-a-Service (SaaS) solution or deployed on premise in NFV environments. Network elements configured with test agents may send and/or receive test packets to compute one or more key performance indicators (KPIs) of the network, such as latency, delay (inter frame gap), jitter, packet loss, throughput, and the like. Test agents may send test packets in accordance with various protocols, such as Hypertext Transfer Protocol (HTTP), Internet Control Message Protocol (ICMP), Speedtest, User Datagram Protocol (UDP), Transmission Control Protocol (TCP), Operations, Administration and Maintenance (OAM) functions (e.g., Y.1731), Two-Way Active Measurement Protocol (TWAMP), Internet Protocol television (IPTV) and Over the Top (OTT) protocol, VoIP telephony and Session Initiation Protocol (SIP), mobile radio, remote packet inspection, and other protocols to measure network performance.</p><p id="p-0039" num="0038">In the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, network device <b>18</b>A is configured with test agent <b>19</b>A, network device <b>18</b>B is configured with test agent <b>19</b>B, service node <b>10</b>A is configured with test agent <b>19</b>C, service node <b>10</b>B is configured with test agent <b>19</b>D, service node <b>10</b>C is configured with test agent <b>19</b>E, and service node <b>10</b>D is configured with test agent <b>19</b>F. Although each of network devices <b>18</b> and service nodes <b>10</b> are described as being configured with a test agent, any number of network devices and/or service nodes may be configured with test agents to provide monitoring services.</p><p id="p-0040" num="0039">To test the network performance between network device <b>18</b>A and service node <b>10</b>A, for example, test agent <b>19</b>A of network device <b>18</b>A may send a test packet to test agent <b>19</b>C of service node <b>10</b>A. The test packet may include a timestamp that indicates the time at which the test packet is sent. The timestamp sent by network device <b>18</b>A may be referred to herein as &#x201c;sending timestamp.&#x201d; Test agent <b>19</b>C of service node <b>10</b>A may receive the test packet including the sending timestamp and generate a timestamp that indicates the time at which the test packet is received. The timestamp generated by test agent <b>19</b>C of service node <b>10</b>A may be referred to herein as &#x201c;receiving timestamp.&#x201d; Test agent <b>19</b>C of service node <b>10</b>A may use the sending timestamp and the receiving timestamp to compute one or more KPIs. For example, test agent <b>19</b>C of service node <b>10</b>A may determine the latency between network device <b>18</b>A and service node <b>10</b>A based on the difference between the receiving timestamp and the sending timestamp. Test agent <b>19</b>C of service node <b>10</b>A sends the one or more KPI measurements (illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as KPI measurements <b>24</b>) to controller <b>14</b>, which in turn may present, e.g., via a graphical user interface, the one or more KPI measurements to a user and/or network administrator. In this way, devices configured with the test agents may measure the network performance between the sender device and the receiver device with a unidirectional test packet.</p><p id="p-0041" num="0040">In some instances, network device <b>18</b>A (e.g., sender device) may experience issues with sending the test packet, which may result in inaccurate KPI measurements by the receiver device (e.g., service node <b>10</b>A). As one example, a test application for test agent <b>19</b>A configured on network device <b>18</b>A may generate a sending timestamp and forward the sending timestamp to its network interface (e.g., network interface card (NIC) such as an Ethernet card) to send the test packet to service node <b>10</b>A. The network interface of network device <b>18</b>A may, in some instances, experience delay in sending the timestamp to service node <b>10</b>A (referred to herein as &#x201c;sender delay&#x201d;). Service node <b>10</b>A (e.g., receiver device) may receive the test packet after the sender delay, generate a receiving timestamp to indicate the time at which the test packet was received, and compute one or more KPI measurements (e.g., latency) based on the sending timestamp and receiving timestamp without accounting for the sender delay. Service node <b>10</b>A may send the latency measurement to controller <b>14</b>, which presents the latency measurement, e.g., via a graphical user interface, to a user or network administrator. In these examples, the user or network administrator may incorrectly attribute the latency issue to the network between network device <b>18</b>A and service node <b>10</b>A if there is no indication that the latency measurement is inaccurate and/or untrustworthy, which may lead to unnecessary troubleshooting and corrective measures.</p><p id="p-0042" num="0041">In some examples, there may be a pause in the sender device carrying out the measurement process, for example, due to the device serving other processes. For example, network device <b>18</b>A may experience a pause in sending the test packet as other applications executing on network device <b>18</b>A may require CPU cycles. When the network monitoring services are resumed, network device <b>18</b>A may typically send test packets in a burst to maintain a certain average Packet Per Second rate. This may cause test packet losses in network device <b>18</b>A due to queue overflows.</p><p id="p-0043" num="0042">In accordance with the techniques described in this disclosure, network system <b>2</b> may provide detection of network measurement inaccuracies. For example, network device <b>18</b>A may detect the sender delays or packet drops, and notify the controller <b>14</b> that the one or more KPI measurements based on the test packet sent from network device <b>18</b>A are inaccurate and/or untrustworthy.</p><p id="p-0044" num="0043">In one example, network device <b>18</b>A may detect a delay in outputting the test packet from the network device <b>18</b>A. As further described in <figref idref="DRAWINGS">FIG. <b>2</b></figref> below, a test application of network device <b>18</b>A may generate a test packet including a first timestamp (also referred to herein as &#x201c;application sending timestamp&#x201d;) that indicates a time at which the test packet is generated by the test application. Network device <b>18</b>A may obtain a second timestamp generated by a network interface of network device <b>18</b>A that indicates a time at which the test packet is output from network device <b>18</b>A (also referred to herein as &#x201c;actual sending timestamp&#x201d;). Network device <b>18</b>A may compute a time difference value between the first timestamp (actual sending timestamp) and the second timestamp (application sending timestamp), and compare the time difference value with a threshold time value. If network device <b>18</b>A detects a delay in outputting the test packet from network device <b>18</b>A to service node <b>10</b>A, e.g., based on the evaluation of the time difference value and the threshold time value, network device <b>18</b>A sends a message <b>26</b> to controller <b>14</b> to notify controller <b>14</b> that network device <b>18</b>A has detected issues in sending the test packet (e.g., sender delay). In some examples, network device <b>18</b>A may send message <b>26</b> including additional information associated with the sender delay, such as the delay value. In some examples, network device <b>18</b>A may send the message <b>26</b> after a defined measurement interval in which a plurality of test packets were delayed during a defined time interval.</p><p id="p-0045" num="0044">In response to receiving message <b>26</b> from network device <b>18</b>A, controller <b>14</b> may, in some examples, generate a visual indication within the graphical user interface that the one or more KPI measurements <b>24</b> are inaccurate and/or untrustworthy. In other examples, controller <b>14</b> may remove the one or more KPI measurements <b>24</b>. In some examples, controller <b>14</b> may adjust the one or more KPI measurements <b>24</b> based on additional information included in message <b>26</b> (e.g., delay value).</p><p id="p-0046" num="0045">In another example, network device <b>18</b>A may detect packet drops (e.g., due to scheduling pauses) when sending test packets to service node <b>10</b>A. As further described in <figref idref="DRAWINGS">FIG. <b>3</b></figref> below, network device <b>18</b>A may compare a count of test packets sent by the network interface (e.g., hardware of the network interface) with a count of test packets sent from the test application (e.g., whether the number of test packets sent by the network interface is less than the number of test packets sent from the test application). Based on the comparison, network device <b>18</b>A may send a message <b>26</b> to controller <b>14</b> to notify controller <b>14</b> that network device <b>18</b>A has detected issues in sending the test packet (e.g., dropped test packets). In some examples, network device <b>18</b>A may send message <b>26</b> including additional information associated with the detected issues, such as the number of sent or dropped packets.</p><p id="p-0047" num="0046">In response to receiving message <b>26</b> from network device <b>18</b>A, controller <b>14</b> may, in some examples, generate a visual indication within the graphical user interface that the one or more KPI measurements <b>24</b> are inaccurate and/or untrustworthy. In other examples, controller <b>14</b> may remove the one or more KPI measurements <b>24</b>. In some examples, controller <b>14</b> may adjust the one or more KPI measurements <b>24</b> based on additional information included in message <b>26</b> (e.g., number of sent or dropped packets).</p><p id="p-0048" num="0047">Although described for purposes of example with respect to a SD-WAN context in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the techniques of the disclosure can be applied in any WAN assurance or network assurance context.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating an example of a network system that provides detection of network measurement inaccuracies through the detection of sender delays, in accordance with one or more aspects of the techniques described in this disclosure. In the example of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, controller <b>202</b> may represent an example of controller <b>14</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, and devices <b>204</b>A-<b>204</b>B may represent any of network devices <b>18</b>, service nodes <b>10</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, or any network element configured as measurement points to measure network performance. Network <b>207</b> may represent WAN <b>7</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, and/or other networks connecting at least two network elements configured as measurement points.</p><p id="p-0050" num="0049">In this example, device <b>204</b>A may include a confidence engine <b>220</b> to detect sender inaccuracies due to sender delay. As one example, a test application for test agent <b>210</b>A of device <b>204</b>A may generate a test packet <b>212</b> including a first timestamp <b>214</b> (application sending timestamp) at the application layer of the Open Systems Interconnection (OSI) model. In response to the generation of test packet <b>212</b>, test agent <b>210</b>A forwards test packet <b>212</b> to network interface <b>208</b>A (illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref> as &#x201c;NI <b>208</b>A&#x201d;) to output the test packet to device <b>204</b>B at the data link layer or layer 2 of the OSI model. Network interface <b>208</b>A outputs test packet <b>212</b> to device <b>204</b>B and generates a second timestamp <b>216</b> (actual sending timestamp) indicating the time at which test packet <b>212</b> is output from network interface <b>208</b>A. Confidence engine <b>220</b> of device <b>204</b>A obtains the first timestamp <b>214</b> from the test application and the second timestamp <b>216</b> from network interface <b>208</b>A (e.g., from the kernel or hardware of the network interface).</p><p id="p-0051" num="0050">Confidence engine <b>220</b> of device <b>204</b>A may compare the first timestamp <b>214</b> and the second timestamp <b>216</b> to determine whether to notify controller <b>202</b> that one or more KPI measurements based on the test packet sent by device <b>204</b>A are inaccurate and/or untrustworthy. For example, confidence engine <b>220</b> of device <b>204</b>A may compute the time difference value between the second timestamp <b>216</b> and the first timestamp <b>214</b>, and evaluate the time difference value with a threshold time value. For example, a user or network administrator may define a delay value (e.g., in milliseconds) that controls whether device <b>204</b>A is to notify controller <b>202</b> of the sender delay. In some examples, confidence engine <b>220</b> may compute a plurality of time difference values between a plurality of actual sending timestamps and a plurality of application sending timestamps and dynamically adjust the threshold based on an evaluation of the plurality of time difference values. If the time difference value exceeds the threshold time value (e.g., time difference value is larger than the threshold time value), device <b>204</b>A sends a message <b>218</b> to controller <b>202</b> to notify controller <b>202</b> that the one or more KPI measurements based on test packet <b>212</b> sent by device <b>204</b>A are inaccurate and/or untrustworthy. In some examples, message <b>218</b> may include a flag or any type of notification to indicate an existence of sender delay in sending the test packet, the time difference value, and/or other information about the sender delay. In some examples, device <b>204</b>A may send messages using NETCONF or other messaging protocols.</p><p id="p-0052" num="0051">Controller <b>202</b> may receive message <b>218</b> from device <b>204</b>A and receive one or more KPI measurements <b>224</b> from device <b>204</b>B. The one or more KPI measurements <b>224</b> are computed with the application sending timestamp <b>214</b> included in test packet <b>212</b> and a receiving timestamp generated by device <b>204</b>B in response to receiving test packet <b>212</b>. In response to receiving message <b>218</b>, controller <b>202</b> may, in some examples, generate a visual indication (e.g., warning symbol, highlight the measurement in a particular color, etc.) that the one or more KPI measurements <b>224</b> are inaccurate and/or untrustworthy. In another example, controller <b>202</b> may remove the one or more KPI measurements <b>224</b> in response to receiving message <b>218</b>. In another example, controller <b>202</b> may receive a delta value included in message <b>218</b> and use the delta value to adjust the one or more KPI measurements <b>224</b>. For example, device <b>204</b>A may compute a plurality of deltas from a plurality of application sending timestamps and a plurality of actual sending timestamps, and determine from the plurality of deltas that the device <b>204</b>A is consistently experiencing a delay (e.g., average of 0.1 millisecond) when sending test packets. Device <b>204</b>A may, in this example, send the delay value to controller <b>202</b> such that controller <b>202</b> may adjust the one or more KPI measurements based on the delay value.</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating an example of a network system that provides detection of network measurement inaccuracies through the detection of sender packet drops, in accordance with one or more aspects of the techniques described in this disclosure. In the example of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, controller <b>302</b> may represent an example of controller <b>14</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, and devices <b>304</b>A-<b>304</b>B may represent any of network devices <b>18</b>, service nodes <b>10</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, or any network element configured as measurement points to measure network performance. Network <b>307</b> may represent WAN <b>7</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, or other network connecting at least two network elements configures as measurement points.</p><p id="p-0054" num="0053">In this example, device <b>304</b>A may include a confidence engine <b>320</b> to detect sender inaccuracies due to sender packet drops. As one example, a test application for test agent <b>310</b>A of device <b>304</b>A may generate test packets <b>330</b>, <b>332</b>, and <b>334</b>. Due to a pause in the network measurement process, device <b>304</b>A may store the test packets in a process scheduling queue until the measurement process is resumed. When the measurement process is resumed, device <b>304</b>A may drop test packets <b>332</b> and <b>334</b> due to queue overflows, for example. To detect sender inaccuracies due to the sender packet drops, confidence engine <b>320</b> may obtain from network interface <b>308</b>A (illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref> as &#x201c;NI <b>308</b>A&#x201d;) a count <b>336</b> of the number of test packets sent and/or dropped from the network interface. In this example, confidence engine <b>320</b> may obtain a count of one test packet sent (e.g., test packet <b>330</b>) and/or a count of two test packets dropped (e.g., test packets <b>332</b> and <b>334</b>). Confidence engine <b>320</b> may also obtain from test agent <b>310</b>A the count of test packets sent by the test application. In this example, confidence engine <b>320</b> obtains a count of three test packets sent by the test application.</p><p id="p-0055" num="0054">Confidence engine <b>320</b> of device <b>304</b>A may compare the number of test packets sent by network interface <b>308</b>A with the number of test packets sent from the test application, and send controller <b>302</b> a message to notify the controller the result of that comparison. For example, if the number of test packets sent by network interface <b>308</b>A is less than the number of packets sent from the test application, confidence engine <b>320</b> may send a message <b>318</b> to controller <b>302</b> to notify controller <b>302</b> that the one or more KPI measurements based on the test packets from device <b>304</b>A are inaccurate and/or untrustworthy. In some examples, confidence engine <b>320</b> of device <b>304</b>A may send a message indicating that the count of packets sent from the network interface is less than the count of the test packets sent by the application, and controller <b>302</b> may determine that the one or more KPI measurements based on the test packets from device <b>304</b>A are inaccurate and/or untrustworthy.</p><p id="p-0056" num="0055">Alternatively, or additionally, if the number of test packets sent by network interface <b>308</b>A is greater than the number of test packets sent from the test application (e.g., if packets are sent from other applications and processes on the shared system), and drops are still detected on the network interface counter, confidence engine <b>320</b> may send a message <b>318</b> to controller <b>302</b> to notify controller <b>302</b> that the one or more KPI measurements based on the test packets from device <b>304</b>A may be inaccurate and/or may be untrustworthy. In some examples, confidence engine <b>320</b> of device <b>304</b>A may send a message indicating that the count of packets sent from the network interface is greater than the count of the test packets sent by the application, and controller <b>302</b> may determine that the one or more KPI measurements based on the test packets from device <b>304</b>A may be inaccurate and/or untrustworthy.</p><p id="p-0057" num="0056">In this example, confidence engine <b>320</b> determines that the number of test packets sent by network interface <b>308</b>A (e.g., one) is less the number of test packets sent from the test application (e.g., three). In response, sends message <b>318</b> including a flag or any type of notification to indicate the existence of a sender issue due to sender packet drops, the number of sent or dropped packets, and/or other information about the sender issue due to sender packet drops. In some examples, device <b>304</b>A may send messages using NETCONF or other messaging protocols.</p><p id="p-0058" num="0057">Controller <b>302</b> may receive message <b>318</b> from device <b>304</b>A and receive the one or more KPI measurements <b>324</b> from device <b>304</b>B. The one or more KPI measurements <b>324</b> are computed with test packet <b>330</b>. Controller <b>302</b> may, in some examples, generate a visual indication (e.g., warning symbol, highlight the measurement in a particular color, etc.) that the one or more KPI measurements <b>324</b> are (or may be) inaccurate and/or untrustworthy. In another example, controller <b>302</b> may remove the one or more KPI measurements <b>324</b> in response to receiving message <b>318</b>. In another example, controller <b>302</b> may receive the number of sent or dropped packets included in message <b>318</b> and use the number of sent or dropped packets to adjust the one or more KPI measurements <b>324</b>.</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram illustrating an example computing device that includes a confidence engine for detecting sender inaccuracies, in accordance with the techniques described in this disclosure. Computing device <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> may represent any of network devices <b>18</b> and/or a server hosting service nodes <b>10</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, devices <b>204</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and/or devices <b>304</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Computing device <b>400</b> includes in this example, a bus <b>442</b> coupling hardware components of a computing device <b>400</b> hardware environment. Bus <b>442</b> couples network interface card (NIC) <b>430</b>, storage disk <b>446</b>, and one or more microprocessors <b>410</b> (hereinafter, &#x201c;microprocessor <b>410</b>&#x201d;). NIC <b>430</b> may be SR-IOV-capable. A front-side bus may in some cases couple microprocessor <b>410</b> and memory device <b>444</b>. In some examples, bus <b>442</b> may couple memory device <b>444</b>, microprocessor <b>410</b>, and NIC <b>430</b>. Bus <b>442</b> may represent a Peripheral Component Interface (PCI) express (PCIe) bus. In some examples, a direct memory access (DMA) controller may control DMA transfers among components coupled to bus <b>442</b>. In some examples, components coupled to bus <b>442</b> control DMA transfers among components coupled to bus <b>442</b>.</p><p id="p-0060" num="0059">Microprocessor <b>410</b> may include one or more processors each including an independent execution unit to perform instructions that conform to an instruction set architecture, the instructions stored to storage media. Execution units may be implemented as separate integrated circuits (ICs) or may be combined within one or more multi-core processors (or &#x201c;many-core&#x201d; processors) that are each implemented using a single IC (i.e., a chip multiprocessor).</p><p id="p-0061" num="0060">Disk <b>446</b> represents computer readable storage media that includes volatile and/or non-volatile, removable and/or non-removable media implemented in any method or technology for storage of information such as processor-readable instructions, data structures, program modules, or other data. Computer readable storage media includes, but is not limited to, random access memory (RAM), read-only memory (ROM), EEPROM, Flash memory, CD-ROM, digital versatile discs (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information and that can be accessed by microprocessor <b>410</b>.</p><p id="p-0062" num="0061">Main memory <b>444</b> includes one or more computer-readable storage media, which may include random-access memory (RAM) such as various forms of dynamic RAM (DRAM), e.g., DDR2/DDR3 SDRAM, or static RAM (SRAM), flash memory, or any other form of fixed or removable storage medium that can be used to carry or store desired program code and program data in the form of instructions or data structures and that can be accessed by a computer. Main memory <b>444</b> provides a physical address space composed of addressable memory locations.</p><p id="p-0063" num="0062">Network interface card (NIC) <b>430</b> includes one or more interfaces <b>432</b> configured to exchange packets using links of an underlying physical network. Interfaces <b>432</b> may include a port interface card having one or more network ports. NIC <b>430</b> may also include an on-card memory to, e.g., store packet data, timestamps, counters of sent and/or dropped packets. Direct memory access transfers between the NIC <b>430</b> and other devices coupled to bus <b>442</b> may read/write from/to the NIC memory.</p><p id="p-0064" num="0063">Memory <b>444</b>, NIC <b>430</b>, storage disk <b>446</b>, and microprocessor <b>410</b> may provide an operating environment for a software stack that includes an operating system kernel <b>414</b> executing in kernel space. Kernel <b>414</b> may represent, for example, a Linux, Berkeley Software Distribution (BSD), another Unix-variant kernel, or a Windows server operating system kernel, available from Microsoft Corp. In some instances, the operating system may execute a hypervisor <b>416</b> and one or more virtual execution elements, e.g., virtual machines <b>428</b>A-<b>428</b>B (collectively, &#x201c;virtual machines <b>428</b>&#x201d;), managed by hypervisor <b>416</b>. While illustrated and described with respect to virtual machines, VNF instances <b>420</b>A-<b>420</b>M (collectively, &#x201c;VNF instances <b>420</b>&#x201d;) may be executed by other operating environments, such as containers (e.g., a DOCKER container). Additional examples of monitoring services provided by virtual execution elements is described in U.S. Provisional Patent Application 63/114,444, entitled &#x201c;Active Assurance for Virtualized Services,&#x201d; filed Nov. 16, 2020, the entire contents of which is incorporated by reference herein.</p><p id="p-0065" num="0064">Computing device <b>400</b> executes hypervisor <b>416</b> to manage virtual machines <b>428</b>. Example hypervisors include Kernel-based Virtual Machine (KVM) for the Linux kernel, Xen, ESXi available from VMware, Windows Hyper-V available from Microsoft, and other open-source and proprietary hypervisors. The term hypervisor can encompass a virtual machine manager (VMM). An operating system that includes kernel <b>414</b> provides an execution environment for one or more processes in user space <b>445</b> (e.g., test agent application, as described in this disclosure).</p><p id="p-0066" num="0065">Virtual machines <b>428</b> host corresponding VNF instances <b>420</b>. In some examples, a virtual machine <b>428</b> may host one or more VNF instances <b>420</b>. Each of VNF instances <b>420</b> is configured to apply a network function to packets. In this example, VNF instance <b>420</b> is configured to host a test agent, e.g., test agents <b>429</b>A-<b>429</b>B (collectively, &#x201c;test agents <b>429</b>&#x201d;).</p><p id="p-0067" num="0066">Kernel <b>414</b> includes a physical driver <b>425</b> to use the network interface card <b>430</b>. Network interface card <b>430</b> may also implement SR-IOV to enable sharing the physical network function (I/O) among one or more virtual execution elements, such virtual machines <b>428</b> and/or containers (not shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>). Shared virtual devices such as virtual functions may provide dedicated resources such that each of the virtual execution elements may access dedicated resources of NIC <b>430</b>, which therefore appears to each of the virtual execution elements as a dedicated NIC. Virtual functions may represent lightweight PCIe functions that share physical resources with a physical function used by physical driver <b>425</b> and with other virtual functions. For an SR-IOV-capable NIC <b>430</b>, NIC <b>430</b> may have thousands of available virtual functions according to the SR-IOV standard, but for I/O-intensive applications the number of configured virtual functions is typically much smaller.</p><p id="p-0068" num="0067">Test agents <b>429</b> may communicate with other test agents using various protocols to measure internet performance and/or network performance. For example, protocols to measure internet performance may include Hypertext Transfer Protocol (HTTP), Internet Control Message Protocol (ICMP), and/or Speedtest. Protocols to measure network performance may include User Datagram Protocol (UDP), Transmission Control Protocol (TCP), Operations, Administration and Maintenance (OAM) functions (e.g., Y.1731), Two-Way Active Measurement Protocol (TWAMP), Internet Protocol television (IPTV) and Over the Top (OTT) protocol, VoIP telephony and Session Initiation Protocol (SIP), mobile radio, remote packet inspection, and other protocols to measure network performance. Test agents <b>429</b> may use messaging protocols, such as Network Configuration Protocol (NETCONF), to communicate with a controller (e.g., controller <b>14</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, controller <b>202</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> or controller <b>302</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>).</p><p id="p-0069" num="0068">In accordance with the techniques described herein, computing device <b>400</b> may include a confidence engine <b>460</b> for detecting network measurement inaccuracies through the detection of sender delays or packet drops. Confidence engine <b>460</b> may include code executable by microprocessor <b>410</b>. Confidence engine <b>460</b> may be one or more computer processes in user space <b>445</b>.</p><p id="p-0070" num="0069">Computing device <b>400</b> may receive, via a management interface, e.g., a command line interface (CLI) or graphical user interface (GUI) (not shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>), a command enabling a sender inaccuracy notification mode to perform the techniques described in this disclosure. As one example, confidence engine <b>460</b> is configured to detect sender inaccuracies due to sender delays. For example, confidence engine <b>460</b> may obtain a first timestamp <b>472</b> (e.g., application sending timestamp <b>214</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>) from the test application for test agent <b>429</b>A that indicates the time at which a test packet is generated by the test application. NIC <b>430</b> may each include a hardware clock and may generate a timestamp that indicates the time at which a test packet is output from the NIC <b>430</b> and store the timestamp in a memory of the NIC. Confidence engine <b>460</b> is also configured to obtain a second timestamp <b>470</b> from NIC <b>430</b> (e.g., actual sending timestamp <b>216</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>). For example, confidence engine <b>460</b> may use kernel <b>414</b> of computing device <b>400</b> to perform a system call to physical driver <b>425</b> to obtain timestamp <b>470</b> from the hardware of NIC <b>430</b>. In some examples, confidence engine <b>460</b> may obtain an actual sending timestamp from one or more virtual network interfaces that perform packet I/O or otherwise process a packet. For example, computing device <b>400</b> may use a virtual hardware component (e.g., an SR-My virtual function) enabled by NIC <b>430</b> to perform packet I/O and receive/send packets. In these examples, confidence engine <b>460</b> may obtain the actual sending timestamp from the packet I/O component.</p><p id="p-0071" num="0070">Confidence engine <b>460</b> is also configured to compare the first timestamp <b>472</b> (application sending timestamp) and the second timestamp <b>470</b> (actual sending timestamp) to determine whether to notify a controller (e.g., controller <b>202</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>) that one or more KPI measurements based on the test packet sent by device <b>400</b> are inaccurate and/or untrustworthy. For example, confidence engine <b>460</b> is configured to compute a time difference value between the second timestamp <b>470</b> and the first timestamp <b>472</b>, and evaluate the time difference value with a threshold time value. Computing device <b>400</b> may include a management interface, to receive an input from a user or network administrator to specify the threshold time value and computing device <b>400</b> may store the threshold time value. If the time difference value exceeds the threshold time value (e.g., time difference value is larger than the threshold time value), confidence engine <b>460</b> is configured to generate a message (e.g., message <b>218</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>) to notify the controller that the one or more KPI measurements based on the test packet sent by computing device <b>400</b> are inaccurate and/or untrustworthy. For example, confidence engine <b>460</b> may use, e.g., NETCONF, to generate a message including a flag or any type of notification to indicate the existence of sender delay, the time difference value, and/or other information about the sender delay.</p><p id="p-0072" num="0071">As another example, confidence engine <b>460</b> is configured to detect sender inaccuracies due to packet drops. For example, NIC <b>430</b> may each include a counter to count the number of packets sent or dropped and store the count in a memory of the IFC. Confidence engine <b>460</b> is configured to obtain the count of packets sent or dropped from NIC <b>430</b> (e.g., count <b>336</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>). For example, confidence engine <b>460</b> may use kernel <b>414</b> of computing device <b>400</b> to perform a system call to physical driver <b>425</b> to obtain the count <b>474</b> from NIC <b>430</b>. Confidence engine <b>460</b> may also obtain the count <b>476</b> of test packets sent from the test application (e.g., count <b>338</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>).</p><p id="p-0073" num="0072">Confidence engine <b>460</b> is also configured to compare the count <b>474</b> of packets sent or dropped by NIC <b>430</b> and the count <b>476</b> of test packets sent from the test application. For example, confidence engine <b>460</b> is configured to determine if the number of test packets sent by NIC <b>430</b> is less than the number of packets sent from the test application. If the number of test packets sent by NIC <b>430</b> is less than the number of packets sent from the test application, confidence engine <b>460</b> is configured to generate a message (e.g., message <b>318</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>) to notify the controller that the one or more KPI measurements based on the test packet sent by computing device <b>400</b> are inaccurate and/or untrustworthy. For example, confidence engine <b>460</b> may use, e.g., NETCONF, to generate a message including a flag or any type of notification to indicate the existence of a sender issue due to packet drops, the number of sent or dropped packets, and/or other information about the sender issue due to packet drops.</p><p id="p-0074" num="0073">A user or administrator may enable (or disable) a sender inaccuracy notification mode to notify the controller of sender inaccuracies due to sender delays, to notify the controller of sender inaccuracies due to sender packet drops, or both.</p><p id="p-0075" num="0074">In this way, computing device <b>400</b> may detect any sender inaccuracies due to sender delay or packet drops, and notify the controller of the sender inaccuracies, such that the controller may generate a visual indication (e.g., warning symbol, highlight the measurement in a particular color, etc.) that the one or more KPI measurements are (or may be) inaccurate and/or untrustworthy, or adjust the one or more KPI measurements based on information received from the notification message.</p><p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating an example of a controller capable of operating in accordance with the techniques described in this disclosure. Controller <b>500</b> may include a server or network controller, for example, and may represent an example instance of controller <b>14</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, controller <b>202</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and controller <b>302</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0077" num="0076">In the example of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, controller <b>500</b> includes a control unit <b>502</b> coupled to a network interface <b>520</b> to exchange packets with other network devices by inbound link <b>522</b> and outbound link <b>524</b>. Control unit <b>502</b> may include one or more processors (not shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>) that execute software instructions, such as those used to define a software or computer program, stored to a computer-readable mediums including a storage device (e.g., a disk drive, or an optical drive) or a memory (such as Flash memory or random access memory (RAM)) or any other type of volatile or non-volatile memory, that stores instructions to cause the one or more processors to perform the techniques described herein. Alternatively, or additionally, control unit <b>202</b> may comprise dedicated hardware, such as one or more integrated circuits, one or more Application Specific Integrated Circuits (ASICs), one or more Application Specific Special Processors (ASSPs), one or more Field Programmable Gate Arrays (FPGAs), or any combination of one or more of the foregoing examples of dedicated hardware, for performing the techniques described herein.</p><p id="p-0078" num="0077">Control unit <b>502</b> provides an operating environment for network services applications <b>504</b> and network measurement module <b>512</b>. In one example, these modules may be implemented as one or more processes executing on one or more virtual machines of one or more servers. That is, while generally illustrated and described as executing on a single controller <b>500</b>, aspects of these modules may be delegated to other computing devices.</p><p id="p-0079" num="0078">Network services applications <b>504</b> represent one or more processes that provide services to clients of the network that includes controller <b>500</b> to provide a visualization of network performance measurements computed from test packets exchanged by test agents within the network. Network services applications <b>504</b> provide services such as performance measurement visualization, session management to test agents, etc. Each of network services applications <b>504</b> may include client interface <b>506</b> by which one or more client applications request services. Client interface <b>506</b> may represent a command line interface (CLI) or graphical user interface (GUI), for instance. Client interface <b>506</b> may also, or alternatively, provide an application programming interface (API) such as a web service to client applications. A user or administrator may enable (or disable) a sender inaccuracy notification mode, via client interface <b>506</b>, to notify the controller of sender inaccuracies due to sender delays, to notify the controller of sender inaccuracies due to sender packet drops, or both.</p><p id="p-0080" num="0079">Network services applications <b>504</b> issue requests to visualize network performance measurements to network measurement module <b>512</b>. Network measurement module <b>512</b> may generate visual indications, such as indications of performance measurements computed by a receiver test agent (e.g., test agent <b>210</b>B of <figref idref="DRAWINGS">FIG. <b>2</b></figref> or test agent <b>310</b>B of <figref idref="DRAWINGS">FIG. <b>3</b></figref>). For example, controller <b>500</b> may establish a session (e.g., NETCONF) with the receiver test agent and receive one or more performance measurements from the test agent via inbound link <b>222</b>. Controller <b>500</b> may store the one or more performance measurements in a performance measurement data store <b>518</b>. Network measurement module <b>512</b> may output for display a visual indication of the one or more performance measurements stored in performance measurement data store <b>518</b>.</p><p id="p-0081" num="0080">Network measurement module <b>512</b> may, in some examples, receive a message from a sender test agent (e.g., test agent <b>210</b>A of <figref idref="DRAWINGS">FIG. <b>2</b></figref> or test agent <b>310</b>A of <figref idref="DRAWINGS">FIG. <b>3</b></figref>) that notifies controller <b>500</b> that the one or more performance measurements are inaccurate. For example, controller <b>500</b> may establish a session (e.g., NETCONF) with the sender test agent and receive a message notifying controller <b>500</b> that one or more performance measurements computed based on test packets sent by the sender test agent are inaccurate. In some examples, network measurement module <b>512</b> may receive a message that includes a flag or any type of notification to indicate an existence of sender delay in sending the test packet, the time difference value, and/or other information about the sender delay.</p><p id="p-0082" num="0081">Controller <b>500</b> may store the message in a messages data store <b>516</b>. Network measurement module <b>512</b> may, in response to receiving the message, correlate the one or more performance measurements received from the receiver test agent with the messages in messages data store <b>516</b>. For example, network measurement module <b>512</b> may determine the one or more performance measurements computed based on one or more test packets sent by the sender test agent and associate the message in messages data store <b>516</b> received from the sender test agent. Network measurement module <b>512</b> may output for display a visual indication of the one or more performance measurements and an indication that the one or more performance measurements are inaccurate. In some examples, network measurement module <b>512</b> may, in response to receiving the message, remove the one or more performance measurements computed based on the test packet sent by the sender test agent such that controller <b>500</b> does not output for display the one or more performance measurements to a user.</p><p id="p-0083" num="0082">In some examples, network measurement module <b>512</b> may receive a message that notifies controller <b>500</b> of the result of a comparison performed by the sender device between the count of packets sent from the network interface of the sender device and the count of the one or more test packets sent by the application executed by the sender device. For example, network measurement module <b>512</b> may receive a message comprising an indication that the count of packets sent from the network interface of the sender device is less than the count of the one or more test packets sent by the application executed by the sender device. In this example, network measurement module <b>512</b> may determine, based on the indication that the count of packets sent from the network interface of the sender device is less than the count of the one or more test packets sent by the application executed by the sender device, that the one or more performance measurements received from the receiver test agent are inaccurate and/or untrustworthy. Network measurement module <b>512</b> may output for display a visual indication of the one or more performance measurements and an indication that the one or more performance measurements are inaccurate.</p><p id="p-0084" num="0083">As another example, network measurement module <b>512</b> may receive a message comprising an indication that the count of packets sent from the network interface of the sender device is greater than the count of the one or more test packets sent by the application executed by the sender device. In this example, network measurement module <b>512</b> may determine, based on the indication that the count of packets sent from the network interface of the sender device is greater than the count of the one or more test packets sent by the application executed by the sender device, that the one or more performance measurements received from the receiver test agent may be inaccurate and/or untrustworthy. Network measurement module <b>512</b> may output for display a visual indication of the one or more performance measurements and an indication that the one or more performance measurements may be inaccurate.</p><p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow diagram illustrating an example operation of detecting network measurement inaccuracies through the detection of sender delays, in accordance with one or more aspects of the techniques described in this disclosure. For ease of illustration, the example operation is described with respect to device <b>204</b>A of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, controller <b>202</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, computing device <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, and controller <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, for example, but may represent any computing device and controller described in this disclosure. The following are steps of the process, although other examples of the process performed in the techniques of this disclosure may include additional steps or may not include some of the below-listed steps.</p><p id="p-0086" num="0085">In the example of <figref idref="DRAWINGS">FIG. <b>6</b></figref>, device <b>204</b>A sends a test packet <b>212</b> including a first timestamp <b>214</b> (application sending timestamp) to device <b>204</b>B (<b>602</b>). The first timestamp <b>214</b> may indicate the time at which the test packet is generated by the test application. Device <b>204</b>A obtains a second timestamp <b>216</b> (actual sending timestamp) that indicates the time at which test packet <b>212</b> is output from the network interface of device <b>204</b>A (<b>604</b>). For example, device <b>204</b>A may obtain the timestamp generated by the hardware of network interface <b>208</b>A (e.g., via physical driver <b>425</b>) when network interface <b>208</b>A outputs test packet <b>212</b> to device <b>204</b>B.</p><p id="p-0087" num="0086">Device <b>204</b>A computes a time difference value between the second timestamp <b>216</b> and the first timestamp <b>214</b> (<b>606</b>). Device <b>204</b>A then compares the time difference value with a threshold time value (<b>608</b>). For example, a user or network administrator may use an interface (e.g., CLI or GUI) to define a time difference value (e.g., in milliseconds) that controls whether device <b>204</b>A is to notify controller <b>202</b> of the sender delay. If the time difference value exceeds the threshold (&#x201c;YES&#x201d; of step <b>608</b>), device <b>204</b>A sends a message to controller <b>202</b> to notify the controller that one or more KPI measurements based on the test packet is inaccurate and/or untrustworthy. In some examples, the message may include a flag or any type of notification to indicate the existence of a sender delay in sending the test packet, the time difference value, and/or other information about the sender delay. In some examples, device <b>204</b>A may send messages using NETCONF or other messaging protocols. If the time difference does not exceed the threshold (&#x201c;NO&#x201d; of step <b>608</b>), device <b>204</b>A does not send a message to controller <b>202</b> and may perform the process described in <figref idref="DRAWINGS">FIG. <b>6</b></figref> for subsequent test packets.</p><p id="p-0088" num="0087">A receiver test agent <b>210</b>B of network device <b>204</b>B may receive test packet <b>212</b> including the first timestamp <b>214</b> (<b>612</b>). Test agent <b>210</b>B of network device <b>204</b>B may generate a third timestamp (receiving timestamp) that indicates a time at which the test packet is received (<b>614</b>). Test agent <b>210</b>B of network device <b>204</b>B may compute one or more performance measurements based on the first timestamp (time test packet <b>212</b> was generated) and the third timestamp (time test packet <b>212</b> was received) (<b>616</b>). Test agent <b>210</b>B of network device <b>204</b>B sends the one or more performance measurements to controller <b>202</b> (<b>618</b>).</p><p id="p-0089" num="0088">Controller <b>202</b> may receive the one or more performance measurements from receiver test agent <b>210</b>B of network device <b>204</b>B (<b>620</b>) and, in some examples, receive the message from sender test agent <b>210</b>A of network device <b>204</b>A that notifies controller <b>202</b> that the one or more performance measurements based on test packet <b>212</b> are inaccurate (<b>622</b>). In response to receiving the message notifying the controller that the one or more performance measurements are inaccurate, controller <b>202</b> outputs for display an indication of the one or more performance measurements and an indication that the one or more performance measurements are inaccurate (<b>624</b>). In some examples, controller <b>202</b> may remove the one or more performance measurements from being output for display.</p><p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow diagram illustrating an example operation of detecting network measurement inaccuracies through the detection of sender packet drops, in accordance with one or more aspects of the techniques described in this disclosure. The example operation is described with respect to device <b>304</b>A of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, controller <b>302</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, computing device <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, and controller <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, for example, but may represent any computing device and controller described in this disclosure. The following are steps of the process, although other examples of the process performed in the techniques of this disclosure may include additional steps or may not include some of the below-listed steps.</p><p id="p-0091" num="0090">In the example of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, device <b>304</b>A sends one or more test packets, e.g., test packets <b>330</b>, <b>332</b>, and <b>334</b> to device <b>304</b>B (<b>702</b>). Device <b>304</b>A obtains a count of packets sent or dropped packets from network interface <b>308</b>A (<b>704</b>). For example, a confidence engine of device <b>304</b>A may obtain the count of sent or dropped packets generated by the hardware of network interface <b>308</b>A (e.g., via physical driver <b>425</b>) when network interface <b>308</b>A sends packets out of the interface. Device <b>304</b>A also obtains a count of packets sent from the test application (<b>706</b>).</p><p id="p-0092" num="0091">Device <b>304</b>A compares the count of sent packets from network interface <b>308</b>A with the count of sent packets from the test application (<b>708</b>). If the count of sent packets from the network interface is less than the count of sent packets from the test application (&#x201c;YES&#x201d; of step <b>708</b>), device <b>304</b>A sends a message to controller <b>302</b> to notify the controller that the one or more KPI measurements based on the test packets sent by device <b>304</b>A are inaccurate and/or untrustworthy. In some examples, confidence engine <b>320</b> of device <b>304</b>A may send a message indicating the result of the comparison, e.g., that the count of packets sent from the network interface is less than the count of the test packets sent by the application, and controller <b>302</b> may determine that the one or more KPI measurements based on the test packets from device <b>304</b>A are inaccurate and/or untrustworthy. In some examples, the message may include a flag or any type of notification to indicate the existence of sender packet drops in sending the test packets, the number of sent or dropped packets, and/or other information about the sender packet drops. In some examples, device <b>304</b>A may send messages using NETCONF or other messaging protocols. If the count of sent packets from the network interface is greater than the count of sent packets from the test application and there are still drops detected on the interface counter (&#x201c;NO&#x201d; of step <b>708</b>), device <b>304</b>A sends a message to controller <b>302</b> to notify the controller that the one or more KPI measurements based on the test packets sent by device <b>304</b>A may be inaccurate and/or untrustworthy (<b>712</b>). In some examples, confidence engine <b>320</b> of device <b>304</b>A may send a message indicating the result of the comparison, e.g., that the count of packets sent from the network interface is greater than the count of the test packets sent by the application, and controller <b>302</b> may determine that the one or more KPI measurements based on the test packets from device <b>304</b>A may be inaccurate and/or untrustworthy.</p><p id="p-0093" num="0092">A receiver test agent <b>310</b>B of network device <b>304</b>B may receive test packet <b>330</b> (<b>714</b>). Test agent <b>310</b>B of network device <b>304</b>B may compute one or more performance measurements based on the test packet (test packet <b>330</b>) (<b>716</b>). Test agent <b>210</b>B of network device <b>204</b>B sends the one or more performance measurements to controller <b>202</b> (<b>718</b>).</p><p id="p-0094" num="0093">Controller <b>302</b> may receive the one or more performance measurements from receiver test agent <b>310</b>B of network device <b>304</b>B (<b>720</b>) and, in some examples, receive the message from sender test agent <b>310</b>A of network device <b>304</b>A that notifies controller <b>302</b> that the one or more performance measurements based on test packets sent by sender test agent <b>310</b>A of network device <b>304</b>A are inaccurate or may be inaccurate (<b>722</b>). In response to receiving the message notifying the controller that the one or more performance measurements are inaccurate or may be inaccurate, controller <b>302</b> outputs for display an indication of the one or more performance measurements and an indication that the one or more performance measurements are inaccurate or may be inaccurate (<b>724</b>). In some examples, controller <b>302</b> may remove the one or more performance measurements that are inaccurate from being output for display. In some examples, controller <b>302</b> may output for display an indication, such as a visual warning (e.g., warning icon), that the one or more performance measurements may be inaccurate.</p><p id="p-0095" num="0094">The techniques described herein may be implemented in hardware, software, firmware, or any combination thereof. Various features described as modules, units or components may be implemented together in an integrated logic device or separately as discrete but interoperable logic devices or other hardware devices. In some cases, various features of electronic circuitry may be implemented as one or more integrated circuit devices, such as an integrated circuit chip or chipset.</p><p id="p-0096" num="0095">If implemented in hardware, this disclosure may be directed to an apparatus such as a processor or an integrated circuit device, such as an integrated circuit chip or chipset. Alternatively or additionally, if implemented in software or firmware, the techniques may be realized at least in part by a computer-readable data storage medium comprising instructions that, when executed, cause a processor to perform one or more of the methods described above. For example, the computer-readable data storage medium may store such instructions for execution by a processor.</p><p id="p-0097" num="0096">A computer-readable medium may form part of a computer program product, which may include packaging materials. A computer-readable medium may comprise a computer data storage medium such as random access memory (RAM), read-only memory (ROM), non-volatile random access memory (NVRAM), electrically erasable programmable read-only memory (EEPROM), Flash memory, magnetic or optical data storage media, and the like. In some examples, an article of manufacture may comprise one or more computer-readable storage media.</p><p id="p-0098" num="0097">In some examples, the computer-readable storage media may comprise non-transitory media. The term &#x201c;non-transitory&#x201d; may indicate that the storage medium is not embodied in a carrier wave or a propagated signal. In certain examples, a non-transitory storage medium may store data that can, over time, change (e.g., in RAM or cache).</p><p id="p-0099" num="0098">The code or instructions may be software and/or firmware executed by processing circuitry including one or more processors, such as one or more digital signal processors (DSPs), general purpose microprocessors, application-specific integrated circuits (ASICs), field-programmable gate arrays (FPGAs), or other equivalent integrated or discrete logic circuitry. Accordingly, the term &#x201c;processor,&#x201d; as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition, in some aspects, functionality described in this disclosure may be provided within software modules or hardware modules.</p><p id="p-0100" num="0099">Various examples have been described. These and other examples are within the scope of the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>sending, by an application of a sender device and to a receiver device, a test packet including a first timestamp indicating a time at which the test packet is generated by the application;</claim-text><claim-text>obtaining, by the sender device and from a network interface of the sender device, a second timestamp indicating a time at which the test packet is output from the sender device via the network interface;</claim-text><claim-text>computing, by the sender device, a time difference value between the second timestamp and the first timestamp;</claim-text><claim-text>comparing, by the sender device, the time difference value with a threshold time value; and</claim-text><claim-text>sending, by the sender device and if the time difference value exceeds the threshold time value, a message to a controller to notify the controller that one or more performance measurements based on the test packet are inaccurate, wherein the controller is distinct from the sender device and the receiver device.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second timestamp is generated by a hardware component of the network interface.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the hardware component comprises a network interface card.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the message includes a flag to indicate an issue in sending the test packet.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the message specifies the time difference value.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising dynamically adjusting, by the sender device and based on an evaluation of a plurality of time difference values, the threshold time value.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>prior to the comparing:<claim-text>receiving, via a management interface of the sender device, configuration information defining the threshold time value; and</claim-text><claim-text>storing, by the sender device, the threshold time value.</claim-text></claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>prior to the computing:<claim-text>receiving, via a management interface of the sender device, a command enabling a sender inaccuracy notification mode; and</claim-text><claim-text>wherein the computing, comparing, and sending comprise performing the computing, comparing, and sending in response to receiving the command.</claim-text></claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>sending, by the sender device, a plurality of test packets;</claim-text><claim-text>obtaining, by the sender device and from the network interface of the sender device, a count of packets sent from the network interface;</claim-text><claim-text>obtaining, by the sender device and from the application, a count of the one or more test packets sent by the application;</claim-text><claim-text>comparing, by the sender device, the count of packets sent from the network interface and the count of the one or more test packets sent by the application to obtain a result of the comparing;</claim-text><claim-text>determining, based on the comparing, that the count of packets sent from the network interface is less than the count of the one or more test packets sent by the application; and</claim-text><claim-text>sending, by the sender device, a message to the controller indicating that the count of packets sent from the network interface is less than the count of the one or more test packets sent by the application, the message indicating the one or more performance measurements based on the one or more test packets are inaccurate.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>sending, by the sender device, a plurality of test packets;</claim-text><claim-text>obtaining, by the sender device and from the network interface of the sender device, a count of packets sent from the network interface;</claim-text><claim-text>obtaining, by the sender device and from the application, a count of the one or more test packets sent by the application;</claim-text><claim-text>comparing, by the sender device, the count of packets sent from the network interface and the count of the one or more test packets sent by the application to obtain a result of the comparing;</claim-text><claim-text>determining, based on the comparing, that the count of packets sent from the network interface is greater than the count of the one or more test packets sent by the application;</claim-text><claim-text>detecting one or more packet drops from the network interface; and</claim-text><claim-text>sending, by the sender device, a message to the controller indicating that the count of packets sent from the network interface is greater than the count of the one or more test packets sent by the application, the message indicating the one or more performance measurements based on the one or more packets may be inaccurate.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A sender device comprising:<claim-text>a network interface; and</claim-text><claim-text>one or more processors operably coupled to a memory, wherein the one or more processors are configured to:</claim-text><claim-text>send, by an application of the sender device and to a receiver device, a test packet including a first timestamp indicating a time at which the test packet is generated by the application;</claim-text><claim-text>obtain, from a network interface of the sender device, a second timestamp indicating a time at which the test packet is output from the sender device via the network interface;</claim-text><claim-text>compute a time difference value between the second timestamp and the first timestamp;</claim-text><claim-text>compare the time difference value with a threshold time value; and</claim-text><claim-text>send, if the time difference value exceeds the threshold time value, a message to a controller to notify the controller that one or more performance measurements based on the test packet are inaccurate, wherein the controller is distinct from the sender device and the receiver device.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The sender device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the second timestamp is generated by a hardware component of the network interface.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The sender device of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the hardware component comprises a network interface card.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The sender device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the message includes a flag to indicate existence of a sender delay.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The sender device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the message specifies the time difference value.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The sender device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the threshold time value is dynamically adjusted by the sender device and based on an evaluation of a plurality of time difference values.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The sender device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the one or more processors are further configured to:<claim-text>prior to the comparing:<claim-text>receive, via a management interface of the sender device, configuration information defining the threshold time value; and</claim-text><claim-text>store the threshold time value.</claim-text></claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The sender device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the one or more processors are further configured to:<claim-text>prior to the computing:<claim-text>receive, via a management interface of the sender device, a command enabling a sender inaccuracy notification mode; and</claim-text><claim-text>wherein the computing, comparing, and sending comprise performing the computing, comparing, and sending in response to receiving the command.</claim-text></claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A controller comprising:<claim-text>one or more processors operably coupled to a memory, wherein the one or more processors are configured to:</claim-text><claim-text>receive, from a receiver device that receives a test packet, one or more performance measurements determined by the receiver device based at least in part on the test packet;</claim-text><claim-text>receive, from a sender device that sends the test packet to the receiver, a message to notify the controller that the one or more performance measurements are inaccurate due to internal delays of the sender device; and</claim-text><claim-text>output for display an indication of the one or more performance measurements and an indication that the one or more performance measurements are inaccurate.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The controller of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the one or more processors are further configured to:<claim-text>determine whether the one or more performance measurements are computed from the test packet;</claim-text><claim-text>in response to the determination that the one or more performance measurements are computed from the test packet, correlating the message to the one or more performance measurements.</claim-text></claim-text></claim></claims></us-patent-application>