<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006934A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006934</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17931425</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>125</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>448</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>61</main-group><subgroup>5007</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>65</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>0823</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>0852</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>24</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>74</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>49</main-group><subgroup>25</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>125</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20180201</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4494</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>5005</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>61</main-group><subgroup>5007</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>65</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>0823</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>0852</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>24</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>72</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>74</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>49</main-group><subgroup>25</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4411</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">MULTI-PATH TRANSPORT DESIGN</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16539303</doc-number><date>20190813</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11451476</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17931425</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>14981485</doc-number><date>20151228</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10498654</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16539303</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Amazon Technologies, Inc.</orgname><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Shalev</last-name><first-name>Leah</first-name><address><city>Zichron Yaakov</city><country>IL</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Bshara</last-name><first-name>Nafea</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Machulsky</last-name><first-name>Georgy</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Barrett</last-name><first-name>Brian William</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Disclosed herein is a method including receiving, from a user application, data to be transmitted from a source address to a destination address using a single connection through a network; and splitting the data into a plurality of packets according to a communication protocol. For each packet of the plurality of packets, a respective flowlet for the packet to be transmitted in is determined from a plurality of flowlets. Assignment of the flowlets to the packets can be dynamically adjusted based on utilization of the flowlets.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="122.77mm" wi="158.75mm" file="US20230006934A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="204.22mm" wi="164.76mm" orientation="landscape" file="US20230006934A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="217.93mm" wi="152.57mm" file="US20230006934A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="220.98mm" wi="151.55mm" orientation="landscape" file="US20230006934A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="203.88mm" wi="167.05mm" orientation="landscape" file="US20230006934A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="157.90mm" wi="154.77mm" orientation="landscape" file="US20230006934A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="242.40mm" wi="156.97mm" orientation="landscape" file="US20230006934A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="246.04mm" wi="151.89mm" orientation="landscape" file="US20230006934A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="238.84mm" wi="139.19mm" orientation="landscape" file="US20230006934A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="217.59mm" wi="151.89mm" orientation="landscape" file="US20230006934A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="238.08mm" wi="173.82mm" file="US20230006934A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="238.08mm" wi="173.82mm" file="US20230006934A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="221.91mm" wi="109.14mm" file="US20230006934A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="183.81mm" wi="147.49mm" orientation="landscape" file="US20230006934A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="240.88mm" wi="149.86mm" file="US20230006934A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="202.10mm" wi="144.19mm" file="US20230006934A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 16/539,303, filed Aug. 13, 2019, issued as U.S. Pat. No. 11,451,476 on Sep. 20, 2022, and titled &#x201c;MULTI-PATH TRANSPORT DESIGN&#x201d;, which is a continuation of U.S. patent application Ser. No. 14/981,485, filed Dec. 28, 2015, issued as U.S. Pat. No. 10,498,654 on Dec. 3, 2019, and titled &#x201c;MULTI-PATH TRANSPORT DESIGN&#x201d;, the contents of which are incorporated herein by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">In network environments such as a data center, data traffic between one node and another node could be very heavy. Thus, high speed data connections, such as InfiniBand (IB), Gigabit Ethernet, or fiber channel, are designed to handle the heavy data traffic. However, with ever increasing amount of data and thus bandwidth and throughput demand for the connections, even these high speed data connections may be overloaded, causing congestions in the network. It is therefore desirable to further improve the throughput of data transfer over a network and avoid network congestion by better utilizing the available network capacity.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0004" num="0003">Various embodiments in accordance with the present disclosure will be described with reference to the drawings, in which:</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example network architecture for a data center environment;</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a high performance computing (HPC) environment;</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an InfiniBand network connection between a source endpoint and a destination endpoint;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates queue pairs (QPs) in an InfiniBand connection between a source endpoint and a destination endpoint;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a multi-stage Clos network;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a Clos network in a data center environment;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a topology of a network fabric;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates multiple flowlets for a data communication between a source endpoint and a destination endpoint;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates a UDP/IP packet header;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates a block diagram of a source endpoint communicating with multiple destination endpoints through one physical port to a network;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a block diagram of a source endpoint communicating with multiple destination endpoints through multiple physical ports to a network;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flow chart illustrating a method of data communication between two endpoints by a plurality of flowlets through a network;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a block diagram of a network adapter device;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates an example architecture for features and systems described herein that includes one or more service provider computers and/or a user device connected via one or more networks, according to some embodiments; and</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates an environment in which various embodiments can be implemented.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0020" num="0019">In the following description, various embodiments will be described. For purposes of explanation, specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However, it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore, well-known features may be omitted or simplified in order not to obscure the embodiment being described.</p><p id="p-0021" num="0020">As used herein, a flow or a data flow generally refers to a stream of associated data packets, in some cases, traversing the network in order. A user application on a source endpoint may desire to send a user application data stream to a destination endpoint through a network. The data may be one or more messages, one or more commands, or one or more transactions. In some cases, the source endpoint and the destination endpoint may each have a unique IP address. In such cases, a user application data stream intended to be transferred from a source IP address to a destination IP address in a single TCP or UDP connection may be referred to as a data flow or a flow. In some other cases, multiple endpoints may share an IP address, and user application data streams between endpoints can thus be multiplexed in an IP-level data stream between a pair of source and destination IP addresses. In these cases, user application data streams from the multiple endpoints intended to be transferred from a source IP address to a destination IP address in a single TCP or UDP connection may be referred to as a data flow or a flow, where the source IP address is shared by multiple endpoints. In some other cases, an endpoint may have multiple IP addresses and a user application data stream may be intended to be sent through multiple paths using the multiple IP address. In these cases, each part of the user application data stream, which is intended to be transferred from a source IP address to a destination IP address in a single TCP or UDP connection, may be referred to as a data flow or a flow.</p><p id="p-0022" num="0021">As also used herein, a path generally refers to a route that a data packet takes through a network between two IP addresses. A flowlet generally refers to a group of packets associated with a flow or a data flow transferred over a single path.</p><p id="p-0023" num="0022">Embodiments of the present disclosure provide methods and systems for high speed data transports that can balance load among various paths in a network environment, such as a data center environment, and support equal cost multipath (ECMP) routing, such that better utilization of the capacity of a network for applications, such as data center, high-performance computing (HPC), storage area network (SAN), or local area network (LAN), can be achieved.</p><p id="p-0024" num="0023">Some or all of the methods may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code (e.g., executable instructions, one or more computer programs, or one or more applications) executing collectively on one or more processors, by hardware or combinations thereof. The code may be stored on a computer-readable storage medium, for example, in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer-readable storage medium may be non-transitory.</p><p id="p-0025" num="0024">Techniques described herein include splitting a data flow between two endpoints or two IP addresses into a plurality of flowlets that each take different paths through a network, by manipulating a field in the data packet header, such as assigning different source ports in the packet header for some packets of the data flow, so that the packets may be routed to different physical ports of a switch and take different paths through a switched network fabric without using different IP address. The number of flowlets and the number of packets in a flowlet may be controlled to avoid overloading a path or a node in the network. The data flow splitting may be done at a network interface card or a network adapter device such that user applications or a host may not need to be aware of the splitting. The packets can be delivered to a destination endpoint in order or out-of-order. Packets received by the destination endpoint from different flowlets may be reordered or reassembled by applications at the destination endpoint based on information in the packet header.</p><heading id="h-0005" level="1">I. High Speed Network</heading><p id="p-0026" num="0025">The following section describes various embodiments of the present disclosure in an example environment, such as a data center. It is understood that the methods and systems described herein may be used in any other applications involving data communication through a switch fabric in a network.</p><p id="p-0027" num="0026">A data center generally includes many servers arranged into standardized assemblies (racks) to make efficient use of space and other resources. Each rack may include a plurality of servers, such as 16, 32, 64 or more severs. The interconnects between servers of the same rack and servers from different racks can be accomplished through one or more switch fabrics. The switch fabric may include an access layer, an aggregation layer, and a core layer. The access layer may include devices, such as switches, directly connected to servers either in the same rack (top of rack, or ToR) or at the end of the row (EoR). The aggregation layer may include devices, such as switches, that aggregate access layer devices to provide connectivity among access layer domains. The core layer may include devices, such as routers, that interconnect multiple aggregation layer devices either within a data center or across geographic locations with outside world.</p><p id="p-0028" num="0027">High-performance computing, big data, Web 2.0 and search applications depend on managing, understanding and responding to massive amounts of user-generated data in real time. With more users feeding more applications and platforms, the data is no longer growing arithmetically, it is growing exponentially. To keep up with the growing of data, data centers need to grow as well, in both data capacity and the speed that data can be accessed and analyzed. Scalable data centers today generally include parallel infrastructures, both in hardware configurations (clusters of computers and storage) and in software configurations, and adopt the most scalable, energy-efficient, high-performing interconnect infrastructure.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example network architecture <b>100</b> for a data center environment. Network architecture <b>100</b> may include a plurality of data center servers <b>102</b><i>a</i>-<b>102</b><i>d </i>and one or more switch fabrics for various data center interconnects. For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, servers <b>102</b><i>a</i>-<b>102</b><i>d </i>may transfer data to or from a high-performance computing (HPC) cluster <b>118</b>, a local area network (LAN) <b>116</b>, or a storage area network (SAN) <b>114</b>.</p><p id="p-0030" num="0029">Each of servers <b>102</b><i>a</i>-<b>102</b><i>d </i>may be connected with an access layer switch <b>104</b><i>a, </i><b>104</b><i>b</i>, <b>104</b><i>c, </i>or <b>104</b><i>d. </i>Each access layer switch may have a plurality of physical ports such that data may come in at different input ports and be switched to different output ports. For redundancy in case of an access layer switch failure, the network architecture for a data center environment may also include redundant servers and access layer switches (not shown). Communication paths between servers <b>102</b><i>a</i>-<b>102</b><i>d </i>and the access layer switches <b>104</b><i>a</i>-<b>104</b><i>d </i>may support data center bridging or separate channels, such as InfiniBand, Data Center Ethernet (DCE), gigabit Ethernet, fiber channel, or fiber channel over Ethernet (FCoE).</p><p id="p-0031" num="0030">Access layer switches <b>104</b><i>a</i>-<b>104</b><i>d </i>may be connected with aggregation layer switches at the aggregation layer. Again, at least two aggregation layer switches for each network cloud may be used for redundancy in case of a switch failure. For example, aggregation layer switches <b>106</b><i>a </i>and <b>106</b><i>b </i>may be HPC-compatible for routing between access layer switches <b>104</b><i>a </i>and <b>104</b><i>b </i>and HPC <b>118</b> through, for example, a core layer <b>112</b>. The communication paths between access layer switches <b>104</b><i>a </i>and <b>104</b><i>b </i>and aggregation layer switches <b>106</b><i>a </i>and <b>106</b><i>b </i>may be InfiniBand connections for fast data transfer. Aggregation layer switch <b>108</b> may be used to route data between access layer switches <b>104</b><i>c </i>and SAN <b>114</b>. The communication paths between access layer switch <b>104</b><i>c </i>and aggregation layer switches <b>108</b> and SAN <b>114</b> may be Fiber channels (FCs). Aggregation layer switch <b>110</b> may provide for routing between access layer switches <b>104</b><i>d </i>and LAN <b>116</b>. Gigabit Ethernet or Data Center Ethernet may be used to connect access layer switch <b>104</b><i>d </i>with aggregation layer switch <b>110</b> and LAN <b>116</b>.</p><p id="p-0032" num="0031">An HPC system performs advanced computation over parallel processing, enabling faster execution of highly computation intensive tasks, such as climate research, molecular modeling, physical simulations, cryptanalysis, geophysical modeling, automotive and aerospace design, financial modeling, and data mining. The execution time of a given computation depends upon many factors, such as the number of central processing unit (CPU) or graphic processing unit (GPU) cores and their utilization factors, and the interconnect performance, efficiency, and scalability. Efficient HPC systems generally employ high-bandwidth, low-latency connections between thousands of multi-processor nodes and high-speed storage systems.</p><p id="p-0033" num="0032">InfiniBand (IB) is a computer-networking communication standard with very high throughput and very low latency used in high-performance computing. It can be used for data interconnect both among and within computers or servers. InfiniBand can also be used as either a direct or a switched interconnect between servers and storage systems. Features of InfiniBand, such as zero-copy and Remote Direct Memory Access (RDMA), help reduce processor overhead by directly transferring data from a sender's memory to a receiver's memory without involving host processors. IB interface can also be used in RDMA over Ethernet (RoCE), which uses a different low-level infrastructure than InfiniBand and is more scalable than InfiniBand.</p><p id="p-0034" num="0033">The InfiniBand architecture defines a switched network fabric for interconnecting processing nodes, storage nodes, and I/O nodes. An InfiniBand network may include switches, adapters, such as Host Channel Adapters (HCAs) or target channel adapters (TCAs), and links for communication. For communication, InfiniBand supports several different classes of transport services (Reliable Connection, Unreliable Connection, Reliable Datagram, and Unreliable Datagram).</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a high-performance computing (HPC) environment <b>200</b> using an InfiniBand fabric <b>210</b>. InfiniBand fabric <b>210</b> is based on a switched fabric architecture of serial point-to-point links, where InfiniBand links can be connected to either host channel adapters (HCAs), used primarily in servers or processor nodes, or target channel adapters (TCAs), used primarily in storage subsystems or I/O chassis. As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, InfiniBand fabric <b>210</b> includes a plurality of switches <b>204</b><i>a</i>-<b>204</b><i>d, </i>which may be arranged in a layered network, such as a fat-tree network or Clos network. Switches <b>204</b><i>a</i>-<b>204</b><i>d </i>may be connected to a plurality of nodes <b>202</b><i>a</i>-<b>202</b><i>h </i>and provide multiple paths between any two nodes. In some cases, the number of paths between two nodes may be more than 1000, more than 10,000, more than 100,000, or more than 1,000,000. Nodes <b>202</b><i>a</i>-<b>202</b><i>h </i>may be any combination of host systems, processor nodes, storage subsystems, and I/O chassis. InfiniBand fabric <b>210</b> may also include one or more router for connection with other networks <b>208</b>, such as other InfiniBand subnets, LANs, wide area networks (WANs), or the Internet.</p><p id="p-0036" num="0035">Interconnected switches <b>204</b><i>a</i>-<b>204</b><i>d </i>and router <b>206</b>, if present, may be referred to as a switch fabric, a fabric, a network fabric, or simply a network. The terms &#x201c;fabric&#x201d; and &#x201c;network&#x201d; may be used interchangeably herein.</p><p id="p-0037" num="0036">InfiniBand or RoCE operations are based on the ability to queue instructions to be executed by a communication hardware. There may be a work queue for send operations and a work queue for receive operations. The send queue may include instructions that determine how data is to be transferred between a requestor's memory and a receiver's memory. The receive queue may include instructions regarding where to store data that has been received. If a request is submitted, its instruction is placed in the appropriate work queue, which may be executed in an order, such as first in first out (FIFO).</p><p id="p-0038" num="0037">A host channel adapter may represent a local channel interface. A channel interface may include hardware, firmware, and software that provide InfiniBand services to a host. In the case of a send operation, the channel adapter interprets the type of work, creates a message, segments it (if needed) into multiple packets, adds the routing information, and sends the packets to a port logic. The port logic is responsible for sending the packets across the links through the fabric to its destination. When the packets arrive at the destination, the receiving port logic validates the packets, and the channel adapter puts the received packets at the destination in the receive queue and processes them. If requested, the channel adapter may create an acknowledge (ACK) and sends the ACK back to the source host.</p><p id="p-0039" num="0038">The send work queue (SQ) and the receive work queue (RQ) can be paired to create a unique entity for communication&#x2014;queue pair (QP). The QP is a memory-based abstraction where communication is achieved through direct memory-to-memory transfers between applications and devices. Applications do not share queue pairs. A QP may be a message transport engine implemented on the host side of an HCA and is bi-directional. It can be used to dedicate adapter resources for the user or application to bypass a kernel for data send and receive operations. The QP's send queue and receive queue are used to buffer and pass messages in work queue elements (WQEs) to the HCA. Each QP has a queue pair number (QPN) assigned by the channel adapter. The QPN uniquely identifies a QP within the channel adapter.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a block diagram <b>300</b> of an InfiniBand network connection between a source endpoint <b>302</b><i>a </i>and a destination endpoint <b>302</b><i>b. </i>Source endpoint <b>302</b><i>a </i>may include a plurality of applications <b>304</b><i>a, </i>a kernel <b>306</b><i>a, </i>and a network interface card (NIC) or adapter <b>308</b><i>a</i>. Each application <b>304</b><i>a </i>may include a buffer <b>310</b><i>a </i>associated with it for storing messages to be sent or received. Similarly, destination endpoint <b>302</b><i>b </i>may include a plurality of applications <b>304</b><i>b, </i>a kernel <b>306</b><i>b, </i>and a network interface card (NIC) or adapter <b>308</b><i>b. </i>Each application <b>304</b><i>b </i>may include a buffer <b>310</b><i>b </i>associated with it for storing messages to be sent or received. A QP can be created between application <b>304</b><i>a </i>on source endpoint <b>302</b><i>a </i>and application <b>304</b><i>b </i>on destination endpoint <b>302</b><i>b, </i>through an InfiniBand fabric <b>350</b>.</p><p id="p-0041" num="0040">After a QP is created, a message may be transmitted from source endpoint <b>302</b><i>a </i>to destination endpoint <b>302</b><i>b </i>using Remote Data Memory Access (RDMA). RDMA allows a server on the InfiniBand fabric to access the memory of another server directly. An example of application of RDMA is a database server cluster. The database server cluster may add a RDMA agent to its core functionality, which allows two database instances running on different nodes to communicate directly with each other, bypassing all of the kernel-level communication operations, thus reducing the number of times that the data is copied from a persistent storage into a RAM memory of the cluster nodes. An RDMA operation may specify a local buffer, an address of a peer buffer, and access rights for manipulation of the remote peer buffer.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a system <b>400</b> including queue pairs in an InfiniBand connection between a client application or process <b>402</b><i>a </i>on a source endpoint and a remote application or process <b>402</b><i>b </i>on a destination endpoint. InfiniBand off-loads traffic control from software clients through the use of execution work queues. The work queues are initiated by the client, and then left for InfiniBand to manage. For each communication channel between devices, a work queue pair (WQP) may be assigned at each end. For example, client process <b>402</b><i>a </i>may place a transaction into a work queue entry or element (WQE) <b>404</b><i>a, </i>which is then processed by source channel adapter <b>408</b><i>a </i>from a send queue <b>416</b><i>a </i>in QP <b>410</b><i>a </i>and sent out to remote process <b>402</b><i>b </i>on the destination endpoint. Data in send queue <b>416</b><i>a </i>may be processed by transport engine <b>412</b><i>a </i>and sent to InfiniBand fabric <b>450</b> through port <b>414</b><i>a </i>of source channel adapter <b>408</b><i>a. </i>The data may then be received by destination channel adapter <b>408</b><i>b </i>through port <b>414</b><i>b, </i>processed by transport engine <b>412</b><i>b, </i>and put in receive queue <b>418</b><i>b. </i>When the destination endpoint responds, destination channel adapter <b>408</b><i>b </i>returns status to client process <b>402</b><i>a </i>through a completion queue entry or event (CQE) <b>406</b><i>a. </i>The source endpoint may post multiple WQEs, and source channel adapter <b>408</b><i>a </i>may handle each of the communication requests. Source channel adapter <b>408</b><i>a </i>may generate the completion queue entry (CQE) <b>406</b><i>a </i>to provide status for each WQE in a properly prioritized order. This allows the source endpoint to continue with other activities while the transactions are being processed.</p><p id="p-0043" num="0042">Similarly, remote process <b>402</b><i>b </i>may place a transaction into a WQE <b>404</b><i>b, </i>which is then processed by destination channel adapter <b>408</b><i>b </i>from a send queue <b>416</b><i>b </i>in QP <b>410</b><i>b </i>and sent to client process <b>402</b><i>a </i>on the source endpoint. Data in send queue <b>416</b><i>b </i>may be processed by transport engine <b>412</b><i>b </i>and sent to InfiniBand fabric <b>450</b> through port <b>414</b><i>b </i>of destination channel adapter <b>408</b><i>b. </i>The data may then be received by source channel adapter <b>408</b><i>a </i>through port <b>414</b><i>a</i>, processed by transport engine <b>412</b><i>a, </i>and put in receive queue <b>418</b><i>a. </i>The source endpoint may respond by returning status to remote process <b>402</b><i>b </i>through a CQE <b>406</b><i>b. </i></p><p id="p-0044" num="0043">InfiniBand fabric <b>450</b> may be a fabric such as fabric <b>210</b> as described in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. In networks built using the spanning-tree protocol or layer-3 routed core networks, a single &#x201c;best path&#x201d; is usually chosen from a set of alternative paths. All data traffic takes that &#x201c;best path&#x201d; until a point where the &#x201c;best path&#x201d; gets congested and packets are dropped. The alternative paths are not utilized because a topology algorithm may deem them less desirable or removed them to prevent loops from forming. It is desirable to migrate away from using spanning-tree while still maintaining a loop-free topology yet utilizing all the available links.</p><p id="p-0045" num="0044">Over the years, the Clos or &#x201c;fat-tree&#x201d; network has been widely used again. A Clos network is a multi-stage switching network. The advantage of such network is that connections between a large number of input and output ports can be made by using only small-sized switches and the network can be easily scaled. A bipartite matching between the ports can be made by configuring the switches in all stages.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example of a 3-stage Clos network <b>500</b>. Clos network <b>500</b> includes r n&#xd7;m ingress stage crossbar switches <b>502</b><i>a</i>-<b>502</b><i>d, </i>m r&#xd7;r middle stage crossbar switches <b>504</b><i>a</i>-<b>504</b><i>e, </i>and r m&#xd7;n egress stage crossbar switches <b>506</b><i>a</i>-<b>506</b><i>d. </i>In <figref idref="DRAWINGS">FIG. <b>5</b></figref>, n represents the number of input ports on each of the r ingress stage crossbar switches <b>502</b><i>a</i>-<b>502</b><i>d, </i>m represents the number of output ports on each of the r ingress stage crossbar switches <b>502</b><i>a</i>-<b>502</b><i>d. </i>There is one connection between each ingress stage switch and each middle stage switch, and one connection between each middle stage switch and each egress stage switch. With m&#x2265;n, a Clos network can be non-blocking like a crossbar switch.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example of a folded Clos network <b>600</b> used in a data center. Clos network <b>600</b> includes top-of-rack (ToR) switches <b>604</b><i>a </i>and <b>604</b><i>b </i>and spine switches <b>606</b>. ToR switches <b>604</b><i>a </i>and <b>604</b><i>b </i>are leaf switches and are connected to spine switches <b>606</b>. Leaf switches <b>604</b><i>a </i>may be referred to as ingress switches as crossbar switches <b>502</b><i>a</i>-<b>502</b><i>d </i>in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, and leaf switches <b>604</b><i>b </i>may be referred to as egress switches as crossbar switches <b>506</b><i>a</i>-<b>506</b><i>d </i>in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Leaf switches <b>604</b><i>a </i>and <b>604</b><i>b </i>may be connected to a plurality of servers <b>602</b>. Spine switches <b>606</b> connect to leaf switches <b>604</b><i>a </i>and <b>604</b><i>b. </i>Leaf switches <b>604</b><i>a </i>and <b>604</b><i>b </i>are not directly connected to each other, but are connected indirectly through spine switches <b>606</b>. In this spine-leaf architecture, the number of uplinks from a leaf switch is equal to the number of spine switches, and the number of downlinks from a spine switch is equal to the number of leaf switches. The total number of connections is the number of leaf switches multiplied by the number of spine switches, for example 8&#xd7;6=48 links in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0048" num="0047">In Clos network <b>600</b>, every lower-tier switch (leaf switch) is connected to each of the top-tier switches (spine switches) in a full-mesh topology. If there is no oversubscription taking place between the lower-tier switches and their uplinks, then a non-blocking architecture can be achieved. A set of identical and inexpensive switches can be used to create the tree and gain high performance and resilience that would otherwise cost must more to construct.</p><p id="p-0049" num="0048">Clos network <b>600</b> may be easily scaled to build a larger network. For example, <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a multi-stage Clos network <b>700</b> in a data center environment by connecting two or more Clos networks <b>600</b> using an additional layer of core switches or routers <b>702</b>. Clos network <b>700</b> may include a leaf or access layer <b>704</b>, a spine or aggregation layer <b>706</b>, and a core layer <b>708</b>.</p><p id="p-0050" num="0049">The paths in a Clos network as shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> or <figref idref="DRAWINGS">FIG. <b>7</b></figref> can be chosen by selecting ports of the switches or routers using a routing technique such that the traffic load can be evenly distributed between the spine or the core switches. If one of the spine or core switches fails, it may only slightly degrade the overall performance of the data center.</p><heading id="h-0006" level="1">II. Multipath Routing</heading><p id="p-0051" num="0050">Routing is the process of selecting the best path for a data transfer from a source node to a destination node in a network. An example of routing technique is an equal cost multipath (ECMP) routing. ECMP is a forwarding mechanism for routing packets along multiple paths of equal cost with the goal of achieving substantially equally distributed link load sharing or load balancing. ECMP enables the usage of multiple equal cost paths from the source node to the destination node in the network. The advantage is that data traffic can be distributed more evenly to the whole network to avoid congestion and increase bandwidth. ECMP is also a protection method because, during link failure, traffic flow can be transferred quickly to another equal cost path without severe loss of traffic. With ECMP, equal cost paths can be stored in a load balancing table in a forwarding layer of a router. Upon a detection of a link failure, data traffic can be distributed between the rest of the equal paths within a sub-second and without severe loss of traffic.</p><p id="p-0052" num="0051">ECMP does not use any special configuration. A shortest path first (SPF) technique, such as open shortest path first (OSPF) technique, can be used to compute equal cost paths, and these paths can then be advertised to forwarding layers. The router may first select a key by performing a hash, such as a 16-bit cyclic redundancy check (CRC-16), over the packet header fields that identify a data flow. The next-hops in the network may be assigned unique regions in the key space. The router may use the key to determine which region and thus which next-hop (and which port connected to the next-hop on a switch or router) to use.</p><p id="p-0053" num="0052">ECMP does not take into account any differences in the bandwidth of the outgoing interfaces. Furthermore, for current ECMP routing in a data center environment, the hash function may lead to most or all data center nodes getting the same hash value for the same flow. Thus, a same path may be used for routing packets in a flow in the data center environment, and other alternate paths may be underutilized.</p><p id="p-0054" num="0053">Multipath routing is a mechanism for improving network performance and providing fault tolerance. There are several multipath techniques for load balancing in a network, such as MultiPath TCP (MPTCP) and Multipathing in InfiniBand.</p><p id="p-0055" num="0054">In TCP/IP, packets are generally delivered in order. Thus, it is difficult to break a message into multiple packets and send the packets using TCP/IP on different paths while ensuring in-order delivery because delays on different paths may be different. MPTCP uses several IP-addresses/interfaces simultaneously by a modification of TCP that appears to be a regular TCP interface to applications, while in fact spreading data across several subflows. Benefits of this include better resource utilization, better throughput and smoother reaction to failures. Multipath TCP is particularly useful in the context of wireless networks. A smartphone may have separate, simultaneous interfaces to a cellular network, a Wi-Fi network, and, possibly, other networks via Bluetooth or USB ports. Each of those networks provides a possible way to reach a remote host. In addition to the gains in throughput, links may be added or dropped as the user moves in or out of network coverage, without disrupting the end-to-end TCP connection. However, each subflow in the MPTCP may use a different source or destination IP address.</p><p id="p-0056" num="0055">Multipathing in InfiniBand may be achieved by assigning multiple local identifiers (LIDs) to an end point. Upper-level protocols, such as Message Passing Interface (MPI), can utilize the multiple LIDs by striping (dividing a message into several chunks) and sending out data across multiple paths (referred to as MPI multirailing). InfiniBand standard defines an entity called subnet manager, which is responsible for the discovery, configuration and maintenance of a network. Each InfiniBand port in a network is identified by one or more LIDs, which are assigned by the subnet manager. Each device within a subnet may have a 16 bit LID assigned to it by the subnet manager. Packets sent within a subnet use the LID for addressing. Each port can be assigned multiple LIDs to exploit multiple paths in the network. InfiniBand also provides a mechanism called LID Mask Control (LMC). LMC provides a way to associate multiple logical LIDs with a single physical port by masking the LID's least significant byte. When packets are received at a switch, the 8 least significant bits of the destination LID may be masked by the LMC and ignored. Thus, assigning several LIDs with different least significant byte to a same port allows several paths to be established between the same pair of nodes.</p><p id="p-0057" num="0056">As described above, routing algorithms may calculate a hash over selected fields in a packet header. Typically, source and destination addresses in the IP header are used for the routing. The protocol field and type of service field of the IP header, the source address and destination layer of the multiple access control (MAC) layer, or source and destination ports may also be used.</p><p id="p-0058" num="0057">A port is a software structure that is identified by a port number. A port is typically associated with an IP address of a host and the protocol type of the communication, and forms a part of the destination or source address of a communications session. A port is typically identified for each address and protocol by a 16-bit port number. Applications on hosts may use datagram sockets to establish host-to-host communications. An application may bind a socket to its endpoint of data transmission, which may be a combination of an IP address and a service port.</p><p id="p-0059" num="0058">Some of the fields used for hash calculation, such as the source and destination addresses and destination port, may be fixed and cannot be changed for the delivery of a packet. Some other fields, however, are optional and may be modified, which may affect the path a packet is routed but may not affect the safe delivery of the packet. Thus, such fields may be modified differently for different packets such that packets with same source IP address, destination IP address and destination port may be delivered on different paths.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates multiple paths <b>810</b> for a data communication between a source endpoint <b>802</b><i>a </i>and a destination endpoint <b>802</b><i>b. </i>As shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, source context data <b>804</b><i>a </i>to a destination address (e.g., a destination context <b>804</b><i>b</i>) may be split into a plurality of flowlets <b>806</b><i>a, </i>wherein packets in each flowlet may have a same packet header and thus may be routed through a same path. Packets in different flowlets may have a same source IP address, destination IP address and destination port, but may have different values in certain field of the packet header, wherein the values in the certain field of the packet header are used for routing. Thus, packets in different flowlets <b>806</b><i>a </i>may go from a same physical port <b>808</b><i>a </i>on a same source IP address to a same physical port <b>808</b><i>b </i>and different flowlets <b>806</b><i>b </i>on a same destination IP address by taking different paths <b>810</b> through network <b>850</b>. An example of multiple-flowlet communication between a source node and a destination node using UDP as the transport layer protocol is described below.</p><p id="p-0061" num="0060">UDP is a minimal message-oriented transport layer protocol. UDP uses a connectionless transmission model with a minimum of protocol mechanism. It has no handshaking dialogues, and thus exposes any unreliability of the underlying network protocol to the user's program. UDP provides no guarantees to the upper layer protocol for message delivery, and the UDP layer retains no state of UDP messages once sent. There is no guarantee of delivery, ordering, or duplicate protection.</p><p id="p-0062" num="0061">With UDP, computer applications can send messages, referred to as datagrams, to other hosts on an Internet Protocol (IP) network without prior communications to set up special transmission channels or data paths. UDP uses port numbers for different functions at the source and destination of a datagram. UDP is suitable for applications where error checking and correction is either not necessary or can be performed in the application, thus avoiding the overhead of such processing at the network interface level. Time-sensitive applications often use UDP because dropping packets is preferable to waiting for delayed packets, which may not be an option in a real-time system.</p><p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates a UDP/IP packet header <b>900</b>. Source address <b>902</b> and destination address <b>904</b> are included in the IP header. The UDP header includes 4 fields, each of which is 2 bytes (16 bits). Destination port field <b>908</b> identifies the receiver's port and is required. Destination port field <b>908</b> generally indicates which protocol is encapsulated in a UDP frame.</p><p id="p-0064" num="0063">Source port field <b>906</b> identifies the sender's port when meaningful, and is assumed to be the port to reply to if needed. If not used, source port field <b>906</b> may be set to zero. If the source host is a client, the source port number is likely to be an ephemeral port number. If the source host is a server, the source port number is likely to be a well-known or well-defined port number.</p><p id="p-0065" num="0064">The use of the Checksum field and source port field <b>906</b> is optional in Internet Protocol version 4 (IPv4). In Internet Protocol version 6 (IPv6), only source port field <b>906</b> is optional.</p><p id="p-0066" num="0065">As described above, UDP does not guarantee in-order delivery. Therefore, even if routing different packets in a communication through different paths may cause out-of-order delivery, such out-of-order delivery is expected in UDP protocol anyway. Furthermore, using ECMP may also increase reordering compared to UDP without using ECMP. Therefore, embodiments of this disclosure are better suited for applications that do not need ordering, such as ones using UDP protocol. In some embodiments, source port field <b>906</b> in UDP header can be modified to route different packets in a communication to different paths because UDP port is only used for detecting the protocol and is not used for delivery of the packets to end user applications, which is generally determined by the endpoint IP addresses. Packets received at a destination node may be reordered or assembled by an application on the destination node based on information in the packets, using, for example, a relaxed reliable datagram (RRD) transport service as described below.</p><p id="p-0067" num="0066">In some embodiments, multi-path data transportation of a flow using multiple flowlets may be achieved through tunneling, by using different source IP addresses (if the source endpoint has multiple IP addresses) or different destination IP addresses (if the destination endpoint has multiple IP addresses), by using the FlowID field in IPv6 header, or by using multiprotocol label switching (MPLS) label.</p><heading id="h-0007" level="1">III. Example</heading><p id="p-0068" num="0067">Basic transport service provided by a remote direct memory access (RDMA) card is Unreliable Datagram (UD). It is relatively uncommon to use UD for HPC datapath. UD usually relies on lossless fabric that will not drop a packet unless it is corrupted. Another common transport service type is Reliable Connection (RC). RC provides reliable in-order delivery, but it is not scalable. In particular, RC requires a separate connection for each pair of communication threads.</p><p id="p-0069" num="0068">An &#x201c;ideal&#x201d; solution for large-scale systems is Reliable Datagram (RD), which uses a single request queue for each thread and a single connection between a pair of communicating nodes. Existing InfiniBand RD standard is not usable due to many problems in the specification. Another existing RD-like partial solution is eXtended Reliability Connection (XRC), which is too complex, and does not provide optimal latency in case of packet drops because it may delay the delivery of packets unrelated to the dropped packets.</p><p id="p-0070" num="0069">In-order delivery may limit the scalability or increase average latency in case of packet drops. Keeping sequence numbers on an endpoint-to-endpoint flow level is not scalable because of the space used and the connection management overhead. Sequence numbers on a multiplexed node-to-node connection level may provide enough information to detect lost or duplicated packets, but may not provide enough information to determine if an arriving packet that is out-of-order on the aggregated connection is actually out-of-order on an endpoint-to-endpoint flow. If the delivery of the arriving packet that is out-of-order on the aggregated connection to the host is postponed, large intermediate buffer space may be desired, and average latency may be greatly increased, because many packets may be delayed until a missing packet is re-sent or an out-of-order packet arrives. Most or all of these delayed packets may be unrelated to the lost packet or the out-of-order packet, and thus such delay may be unnecessary. Dropping out-of-order packets may solve the buffering problem, but may not solve the latency problem, and may increase network bandwidth consumption.</p><p id="p-0071" num="0070">Relaxed Reliable Datagram is a type of transport service with simple UD-like interface but with transparent recovery from packet loss. RRD does not guarantee packet ordering, because guaranteeing packet ordering may include either keeping state for all QP-to-QP flows, which is not easily scalable, or serialization of packets belonging to different logical flows into a single sequence of packets, which may create false dependency between unrelated flows and thus increase average and max latency. Even though RRD does not guarantee packet ordering, it is possible that packets that appear to be out-of-order at RRD level are actually in order on their QP-to-QP flows because a single RRD connection may include multiple multiplexed flows. Since a host software may keep track of its message flows, the ordering may be done by the host. Therefore, RRD only guarantees that each packet will be eventually delivered to an appropriate queue. Packets can be delivered to the destination endpoint queue even when they are out-of-order, and sequence numbers may be tracked at the node-to-node connection level. The per-flow (endpoint-to-endpoint) numbering can be done by the host driver, and the sequence number can be transferred with the packet to the driver on the destination host, but is not examined on the transport layer. RRD can also be configured to drop out-of-order packets, and thus provide in-order delivery.</p><p id="p-0072" num="0071">RRD transport may send packets over all available paths for load balancing, while maintaining up-to-date information about congested or faulty paths. If a single connection context is used for a particular destination, RRD transport may not easily distinguish out-of-order acknowledge (ACK) packets caused by multipath delivery from out-of-order ACKs caused by dropped packets. Therefore, RRD state is arranged on a per-path basis, where packets sent to a particular destination on a particular path have a separate context and independent packet numbering. In other words, a RRD context for a specific destination may include multiple unidirectional flowlet contexts, where each flowlet may use a different path as described above. For example, each flowlet context may include a source UDP port field used in the outer header. Each flowlet may be associated with a different path that can be re-assigned in case of timeout or excessive packet loss. Packet sequence numbers can be tracked independently on each flowlet.</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates an example block diagram of a source endpoint communicating with multiple destination endpoints through one physical port using, for example, RRD transport service and UDP/IP protocol. User application <b>1002</b> may use provider library <b>1004</b> and user space driver library <b>1006</b> to send or receive message asynchronously through send or receive queues. <figref idref="DRAWINGS">FIG. <b>10</b></figref> only illustrates the message sending flow. Provide library <b>1004</b> may include an OpenFabric interface (OFI) Libfabric provider library or an OpenFabrics Enterprise Distribution (OFED) library.</p><p id="p-0074" num="0073">User application <b>1002</b> may send/receive messages through communication endpoints. An application can use multiple communication endpoints. In case of datagram transport, each communication endpoint can be mapped to a single QP. QP number can be assigned by the adapter firmware, and can be maintained separately for each virtual Ethernet interface. QP number can be used as a part of communication endpoint address, in addition to IP address of the virtual Ethernet interface.</p><p id="p-0075" num="0074">User application <b>1002</b> may place transactions or messages into multiple WQEs <b>1008</b><i>a</i>-<b>1008</b><i>d, </i>which can then be processed by a channel adapter and sent to a destination endpoint. WQEs <b>1008</b><i>a</i>-<b>1008</b><i>d </i>may be arranged based on local endpoint such that one WQE may be used for one local endpoint.</p><p id="p-0076" num="0075">User application <b>1002</b> does not generate the UDP/IP packet headers, Rather, it passes the destination network address map index (address handle) in a send message descriptor. This provides lower latency and better security, without compromising one or another. From a performance perspective, the address handle allows the channel adapter to pre-generate the headers, including the outer headers, transmit them without any checks (instead of validating packet headers generated by the application), and minimize the overall latency by avoiding fetching the header and looking it up in a routing table.</p><p id="p-0077" num="0076">Transactions or messages in WQE <b>1008</b><i>a</i>-<b>1008</b><i>d </i>may be processed to locate transport contexts <b>1010</b><i>a</i>-<b>1010</b><i>c, </i>such as RRD transport contexts, wherein messages or transactions in each context of transport contexts <b>1010</b><i>a</i>-<b>1010</b><i>c </i>are to be sent to a same destination IP address.</p><p id="p-0078" num="0077">Messages or transactions in each of transport contexts <b>1010</b><i>a</i>-<b>1010</b><i>c, </i>such as RRD transport contexts, may be further processed by the channel adapter to select flowlet contexts. For example, messages in transport context <b>1010</b><i>a </i>may be placed into a plurality of flowlet contexts <b>1012</b><i>a, </i>messages in transport context <b>1010</b><i>b </i>may be placed into a plurality of flowlet contexts <b>1012</b><i>b, </i>and messages in transport context <b>1010</b><i>c </i>may be placed into a plurality of flowlet contexts <b>1012</b><i>c. </i>Each of WQEs and transport contexts may be implemented as a software queue or a hardware queue, for example, a buffer such as a first-in first-out (FIFO) buffer. The flowlet contexts may maintain an active packet list and may be stored in, for example, a memory. Flowlet contexts <b>1012</b><i>a</i>-<b>1012</b><i>c </i>can then be processed by NX <b>1014</b> and put into a hardware queue <b>1016</b> at an interface between the channel adapter and a network switch to be sent to the network. Hardware queue <b>1016</b> may be a FIFO. Each packet in hardware queue <b>1016</b> may include application message payload, provider's auxiliary information, and destination address.</p><p id="p-0079" num="0078">As used herein, a flowlet is a group of packets associated with a flow or a data flow transferred on a unidirectional (half-duplex) connection between two network interfaces. A flowlet is unrelated to QPs, and is invisible to user applications. The packets in a flowlet may carry a flowlet index and a packet sequence number. The packet sequence numbers are relative to the flowlet. The source endpoint maintains information on the outstanding unacknowledged packets (sequence numbers and the list of unacknowledged WQEs), including information necessary for retransmit. The destination endpoint may recover the flowlet index or the packet sequence number from a received packet in, for example, the header of the packet, and send an acknowledgement of receiving the packet to the source endpoint. The source endpoint may then remove the sequence number of the packet after the acknowledgement of receiving the packet is received from the destination endpoint. The source endpoints may also remove the sequence number of a packet after the packet has been sent.</p><p id="p-0080" num="0079">Each flowlet may be controlled to have a limited number of outstanding transmit packets. Therefore, slower paths will be used less frequently than faster paths when choosing a flowlet. A flowlet can be either in active state (i.e., having outstanding unacknowledged packets) or idle state (everything is acknowledged).</p><p id="p-0081" num="0080">In general, packets are transmitted on the same path for a given active flowlet. In some embodiments, a transmitter may change the path randomly when packets are assigned to an idle flowlet. The transmitter can also reassign a flowlet to a different path after a timeout, or when experiencing excessive latency or excessive packet drops.</p><p id="p-0082" num="0081">A destination context may keep the sequence number of the last in-order packet and sequence numbers of out-of-order packets, but it may not keep any endpoint buffer information. All arriving non-duplicate packets may be delivered to the next level of RRD service, which may deliver the packets to appropriate QPs. The destination context may generate regular ACK to acknowledge in-order packets, and selective ACK (SACK) packets to report any holes in the received packets sequence.</p><p id="p-0083" num="0082">Flowlets within a particular RRD context may be numbered using short indices. Flowlet index may be specified in the packet header. A same index may be used in both directions for send flowlet context on one side and for the corresponding receive flowlet context on the other side. The maximum number of flowlets per RRD context may be predetermined and hardcoded, or it may be negotiated and adjusted before or during the communication.</p><p id="p-0084" num="0083">The source endpoint may only initialize a new flowlet when a particular address is mapped for the first time. In other words, flowlet connection establishment may be an once-in-a-lifetime operation, unless the sender or the receiver is reset. In some embodiments, when a receiver accepts a &#x201c;start of sequence&#x201d; packet, the receiver may accept the &#x201c;start of sequence&#x201d; packet and discard any previous flowlet state, unless it determines that the &#x201c;start of sequence&#x201d; packet is stale.</p><p id="p-0085" num="0084">Packets transmitted on a particular flowlet generally arrive in-order, but a stale &#x201c;start-of-sequence&#x201d; packet may arrive out-of-order, for example, in case where the path of a flowlet is switched shortly after the flowlet is initialized, for example, due to slowness in the path. In such case, a receiver may store the initial sequence number in the received &#x201c;start-of-sequence&#x201d; packet, reject any additional &#x201c;start of sequence&#x201d; packet on the same flowlet if the packet carries the same sequence number, and, optionally, generate an explicit negative acknowledge (NAK).</p><p id="p-0086" num="0085">A newly started sender, which may not have any knowledge of flowlets history, may not send additional packets after the &#x201c;start of sequence&#x201d; packet, until it gets an ACK from the receiver. In the unusual event of a NAK, for example, if the sender accidentally generates the same initial sequence number as the initial sequence number in a previous &#x201c;start-of-sequence&#x201d; packet for the flowlet, it may generates a different initial number and retries.</p><heading id="h-0008" level="1">IV. Flowlet Assignment</heading><p id="p-0087" num="0086">Two objectives are usually taken into consideration when assigning packets to flowlets. It is desirable that all paths are exercised constantly. It is also desirable that a flowlet gets enough packets to ensure that any lost packet will be detected and reported promptly. If the last packet in a flowlet is dropped, one way to detect the drop is a timeout. Alternatively, in a lightly loaded system, an additional dummy packet may be send after the last packet in the flowlet. Since SACK-based detection allows faster recovery, it is preferable that RRD keeps transmitting packets on all of active flowlets. This can usually be done for heavy traffic, where the number of pending packets is large and flowlets are less likely to dry out. In some situations, there may be many lightly loaded flowlets in a system even though the system as a whole may be heavily loaded. For a lightly loaded system with a small number of pending packets, spreading the packets equally over all available flowlets can lead to a situation where the number of outstanding packets on many or all flowlets may be as small as 0 or 1, which makes SACK useless. One solution is to dynamically adjust the number of flowlets in use, and reassign a flowlet to a different path whenever a flowlet becomes idle or very slow. The total number of flowlets in use may be limited to, for example, 32 or less, and may be adjusted based on, for example, network latency, network bandwidth, or network congestions. In some embodiments, it is preferable to place packets on half-full flowlets rather than on empty ones. In addition, to ensure that a slow-but-steady flow, which may keep a single flowlet non-idle all the time, does not monopolize a path, an additional idle flowlet can be allocated occasionally to ensure that the path is changed eventually.</p><p id="p-0088" num="0087">There may be many different ways to assign packets from a user application to a plurality of flowlets. For example, a packet may be assigned to a flowlet based on the numbers of outstanding packets in all the available flowlets or all the flowlets in use. A packet may be assigned to a flowlet based on information of the application. A packet may also be assigned to a flowlet based on an instruction, request or indication from the application.</p><p id="p-0089" num="0088">In some embodiments where the user application does not specify a flow label, a network adapter device at the transport layer implementing transport service, such as RRD, may assign packets from the user application to a number of flowlets based in the utilization of each flowlet, for example, the number of outstanding packets in each flowlet. The network adapter device may keep record of the total number of outstanding packets, and the last used flowlet. It may also maintain separate lists of flowlets by utilization, where each flowlet of an RRD context may be in one of the following three lists: full, almost empty (less than half-full), and almost full (more than half-full). An empty flowlet may be returned to a shared pool for use by other applications.</p><p id="p-0090" num="0089">The network adapter device at the transport layer may select the same flowlet which was used previously, if it is not full. Otherwise, it may choose another flowlet in the lists of flowlets by utilization, according to the following priority order: almost full, almost empty, and empty (from the shared pool).</p><p id="p-0091" num="0090">In some embodiments, the total number of allowed outstanding packets in a flowlet may be limited to an adjustable number, which may be adjusted based on, for example, network congestions. For instance, if the overall network is congested, the total number of allowed outstanding packets in a flowlet may be increased. If the overall network is less congested, the total number of allowed outstanding packets in a flowlet may be decreased.</p><p id="p-0092" num="0091">Data packets may also be assigned to flowlets based on an observed latency of each flowlet of the available flowlets or the flowlets in use. A flowlet with a lower observed latency may generally be selected. Data packets may also be assigned to flowlets based on a drop rate of each flowlet of the available flowlets or the flowlets in use. A flowlet with a lower drop rate may generally be selected.</p><p id="p-0093" num="0092">The transport layer may also assign packets to different flowlets based on an indication from a user application regarding how to assign the packets. For example, the user application may mark a transmit request with a flow label, such as the flow label supported in OpenFabrics Enterprise Distribution (OFED). A flow label may not instruct the transport layer to transmit the packets on a specific path, but may instruct the transport layer to transmit a message to the same destination on a same path as other messages with the same label. The transport layer map keep a map of flow labels, where each entry in the map includes a flowlet index and the number of outstanding packets in the flowlet. If the number of outstanding packets in a desired flowlet is 0, a new flowlet can be assigned for the packet. If the desired flowlet has too many outstanding packets, for example, from other applications or messages, a new flowlet may also be assigned.</p><p id="p-0094" num="0093">The transport layer may also assign packets from a user application to different flowlets based on information of the user application. For example, for Non-Volatile Memory Express (NVMe) over fabric, the transport layer may assign all packets for a same command to a same flowlet. For some applications, such as Message Passing Interface (MPI), the transport layer may assign the packets to minimize out-of-order delivery. The transport layer may obtain information about the user application by receiving information from other sources or heuristically determining the information.</p><p id="p-0095" num="0094">In some embodiments, the selection of flowlets or paths among multiple network adapter devices or multiple user applications may be coordinated or randomized such that packets from different applications or different network adapter devices may not be assigned to a same path to overload the path. In some implementations, the ports of a switch or router or the source UDP ports that have been used by other applications may be used as an input for determining an appropriate port to be used for a flowlet.</p><p id="p-0096" num="0095">When a flowlet is assigned, it is usually associated with a path such that all packets assigned to the flowlet will take the same path. However, if a path associated with a flowlet has an excessive drop rate that is above a threshold value or have a latency longer than a threshold value, the flowlet and its associated packets may be reassigned to a different path that has a lower drop rate or shorter latency.</p><heading id="h-0009" level="1">V. Network Adapter with Multiple Physical Ports</heading><p id="p-0097" num="0096">A network adapter device may include multiple physical output or input ports. Thus, the network adapter device may transmit or receive packets through different physical ports on the device. In other words, the network adapter device may act as a switch itself and form a part of a network or the switch fabric of a network.</p><p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a block diagram of a source endpoint communicating with multiple destination endpoints through multiple physical ports using, for example, RRD transport service and UDP/IP protocol. Similar to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, user application <b>1102</b> may use provider library <b>1104</b> and user space driver library <b>1106</b> to send or receive messages asynchronously through send or receive queues. Provide library <b>1104</b> may include an OpenFabric interface (OFI) Libfabric provider library or an OpenFabrics Enterprise Distribution (OFED) library.</p><p id="p-0099" num="0098">User application <b>1102</b> may place transactions or messages into multiple WQEs <b>1108</b><i>a</i>-<b>1108</b><i>d, </i>which can then be processed by a channel adapter and sent to a destination endpoint. WQEs <b>1108</b><i>a</i>-<b>1108</b><i>d </i>may be arranged based on local endpoint such that one WQE may be used for one local endpoint. Transactions or messages in WQE <b>1108</b><i>a</i>-<b>1108</b><i>d </i>may be processed to locate transport contexts <b>1110</b><i>a</i>-<b>1110</b><i>c, </i>such as RRD transport contexts, where messages or transactions in each of transport contexts <b>1110</b><i>a</i>-<b>1110</b><i>c </i>are to be sent to a same destination IP address.</p><p id="p-0100" num="0099">Messages or transactions in each of transport contexts <b>1110</b><i>a</i>-<b>1110</b><i>c, </i>such as RRD transport contexts, may be further processed by a channel adapter to select flowlet contexts. For example, messages in transport context <b>1110</b><i>a </i>may be placed into flowlet contexts <b>1112</b><i>a</i>, messages in transport context <b>1110</b><i>b </i>may be placed into flowlet contexts <b>1112</b><i>b, </i>and messages in transport context <b>1110</b><i>c </i>may be placed into flowlet contexts <b>1112</b><i>c. </i>Flowlet contexts <b>1112</b><i>a</i>-<b>1112</b><i>c </i>can then be processed by NX <b>1114</b> and put into a hardware queue <b>1116</b>.</p><p id="p-0101" num="0100">Packets in hardware queue <b>1116</b> may then be routed to different physical output ports <b>1120</b> at an interface <b>1118</b> between the network adapter device and an external network. By routing packets through different physical output ports, the throughput of the network adapter device may be increased and a congestion at the interface between the network adapter device and the external network may be reduced.</p><heading id="h-0010" level="1">VI. Method</heading><p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flow chart <b>1200</b> illustrating a method of data communication between two endpoints by a plurality of flowlets through a network, according to some embodiments of the present disclosure.</p><p id="p-0103" num="0102">At block <b>1202</b>, a network adapter device may receive data stream to be transmitted from a user application on a source endpoint to a destination endpoint through a network. The data stream may be one or more messages, one or more commands, or one or more transactions. In some embodiments, the source endpoint and the destination endpoint may each have a unique IP address. In some embodiments, multiple endpoints may share an IP address, and user application data streams from multiple source endpoints sharing an IP address to multiple destination endpoints sharing an IP address can thus be multiplexed in an IP-level data stream between a pair of source and destination IP addresses. In other embodiments, a source or destination endpoint may have multiple IP addresses, and it may be desired that each part of the user application data stream be send through a different path in a network using a different combination of source IP address and destination IP address as in, for example, multipath TCP (MPTCP). A user application data stream or a part of a user application stream intended to be transferred from a source IP address to a destination IP address in a single TCP or UDP connection may be referred to herein as a data flow or a flow.</p><p id="p-0104" num="0103">For example, as described above with respect to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, user application <b>1002</b> may place transactions or messages into multiple WQEs <b>1008</b><i>a</i>-<b>1008</b><i>d, </i>where WQEs <b>1008</b><i>a</i>-<b>1008</b><i>d </i>may be arranged based on local endpoint such that one WQE may be used for one local endpoint. User application <b>1002</b> may also pass the destination network address map index (address handle) in a send message descriptor. Based on the destination network address map index, transactions or messages in WQE <b>1008</b><i>a</i>-<b>1008</b><i>d </i>may be processed to locate transport contexts <b>1010</b><i>a</i>-<b>1010</b><i>c</i>, such as RRD transport contexts, where messages or transactions in each of transport contexts <b>1010</b><i>a</i>-<b>1010</b><i>c </i>are to be sent to a same destination IP address. Each transport context may be referred to as a flow or a data flow.</p><p id="p-0105" num="0104">In some examples, a user application may provide messages in data packets that include a source IP address and a destination IP address, rather than only providing the messages and the send message descriptor.</p><p id="p-0106" num="0105">At block <b>1204</b>, the user application data in each flow, such as each transport context in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, may be split into a plurality of packets according to a communication protocol, such as TCP/IP or UDP/IP. The plurality of packets may include a header and a payload. The header may be an empty header or include empty field that needs to be updated. The header may include only a part of a TCP/IP or UDP/IP header.</p><p id="p-0107" num="0106">At block <b>1206</b>, for each packet of the plurality of packets, the network adapter device may determine, from a plurality of flowlets, a flowlet for the packet to be transmitted in. The determination may be made by determining a number of packets in each flowlet of the plurality of flowlets, obtaining information of the user application, or receiving an indication from the user application regarding how the plurality of packets are to be assigned to the plurality of flowlets. In some embodiments, it may be preferable to choose a flowlet that is not lightly loaded or heavily loaded.</p><p id="p-0108" num="0107">At block <b>1208</b>, for each packet of the plurality of packets, based on the determined flowlet, the value of a field in the packet used by a network switch of the network to route the packet, such as a source UDP port number, may be determined and set. Different source UDP ports may be used for different flowlets. As a result, different flowlets may be sent through different paths in the network by routers or switches that use source UDP port number for routing as described above.</p><p id="p-0109" num="0108">At block <b>1210</b>, each packet of the plurality of packets may be sent to the assigned flowlet for transmitting to the network. Each packet may include flowlet-specific fields in the header, such as a source UDP port, a flowlet index or identification, and a packet sequence number. The status of each flowlet of the plurality of flowlets, such as the number of outstanding packets, average latency, or estimated packet loss rate on the flowlet, may be monitored and used for assigning flowlets to additional packets.</p><p id="p-0110" num="0109">At block <b>1212</b>, packets in each flowlet of the plurality of flowlets may be transmitted to the network fabric through one or more physical ports. The packets may be put in a hardware transmit queue at the interface between the network adapter device and the external network.</p><heading id="h-0011" level="1">VII. Device and System</heading><p id="p-0111" num="0110">Embodiment of the present disclosure may be implemented either in hardware such as an adaptor card, or in software that may be run on a host CPU. <figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates an example of a network adapter device <b>1300</b>. In this example, the network adapter device <b>1300</b> may include processing logic <b>1302</b>, a configuration module <b>1304</b>, a management module <b>1306</b>, a bus interface module <b>1308</b>, a memory <b>1310</b>, and a network interface module <b>1312</b>. These modules may be hardware modules, software modules, or a combination of hardware and software. The network adapter device <b>1300</b> may include additional modules, not illustrated here. In some implementations, the network adapter device <b>1300</b> may include fewer modules. One or more of the modules may be in communication with each other over a communication channel <b>1314</b>. The communication channel <b>1314</b> may include one or more busses, meshes, matrices, fabrics, a combination of these communication channels, or some other suitable communication channel.</p><p id="p-0112" num="0111">The processing logic <b>1302</b> may include one or more processors configured to execute instructions. Examples of processors that may be included in the processing logic <b>1302</b> include processors developed by ARM, MIPS, AMD, Intel, Qualcomm, and the like. Processors included in processing logic <b>1302</b> may also be implemented in an ASIC or an FPGA. In some implementations, the processors of the processing logic <b>1302</b> may share certain resources, such as for example busses, level 1 (L1) caches, and/or level 2 (L2) caches. The instructions executed by the processing logic <b>1302</b> may be stored on a computer-readable storage medium, for example, in the form of a computer program. The computer-readable storage medium may be non-transitory. In some cases, the computer readable medium may be part of the memory <b>1310</b>.</p><p id="p-0113" num="0112">The memory <b>1310</b> may include either volatile or non-volatile, or both volatile and non-volatile types of memory. The memory <b>1310</b> may, for example, include random access memory (RAM), read only memory (ROM), Electrically Erasable Programmable Read-Only Memory (EEPROM), flash memory, and/or some other suitable storage media. In some cases, some or all of the memory <b>1310</b> may be internal to the network adapter device <b>1300</b>, while in other cases some or all of the memory may be external to the network adapter device <b>1300</b>.</p><p id="p-0114" num="0113">In some implementations, the configuration module <b>1304</b> may include one or more configuration registers. Configuration registers may control the operations of the network adapter device <b>1300</b>. In some implementations, one or more bits in the configuration register can represent certain capabilities of the network adapter device <b>1300</b>. Configuration registers may be programmed by instructions executing in the processing logic <b>1302</b>, and/or by an external entity, such as a host device, an operating system executing on a host device, and/or a remote server. The configuration module <b>1304</b> may further include hardware and/or software that control the operations of the network adapter device <b>1300</b>.</p><p id="p-0115" num="0114">In some implementations, the management module <b>1306</b> may be configured to manage different components of the network adapter device <b>1300</b>. In some cases, the management module <b>1306</b> may configure one or more bits in one or more configuration registers at power up, to enable or disable certain capabilities of the network adapter device <b>1300</b>.</p><p id="p-0116" num="0115">The bus interface module <b>1308</b> may enable communication with external entities, such as a host device and/or other components in a computing system, over an external communication medium. The bus interface module <b>1308</b> may include a physical interface for connecting to a cable, socket, port, or other connection to the external communication medium. The bus interface module <b>1308</b> may further include hardware and/or software to manage incoming and outgoing transactions. The bus interface module <b>1308</b> may implement a local bus protocol, such as NVMe, AHCI, SCSI, SAS, SATA, PATA, PCI/PCIe, and the like. The bus interface module <b>1308</b> may include at least the physical layer for any of these bus protocols, including a connector, power management, error handling, etc. In some implementations, the network adapter device <b>1300</b> may include multiple bus interface modules for communicating with multiple external entities. These multiple bus interface modules may implement the same local bus protocol, different local bus protocols, or a combination of the same and different bus protocols.</p><p id="p-0117" num="0116">The network interface module <b>1312</b> may include hardware and/or software for communicating with a network. This network interface module <b>1312</b> may, for example, include physical connectors for wired connection to a network, and/or antennas for wireless communication to a network. The network interface module <b>1312</b> may further include hardware and/or software configured to implement a network protocol stack. The network interface module <b>1312</b> may communicate with the network using a network protocol, such as for example TCP/IP, InfiniBand, RoCE, Institute of Electrical and Electronics Engineers (IEEE) 802.11 wireless protocols, User Datagram Protocol (UDP), Asynchronous Transfer Mode (ATM), token ring, frame relay, High Level Data Link Control (HDLC), Fiber Distributed Data Interface (FDDI), and/or Point-to-Point Protocol (PPP), among others. In some implementations, the network adapter device <b>1300</b> may include multiple network interface modules, each configured to communicate with a different network. For example, in these implementations, the network adapter device <b>1300</b> may include a network interface module for communicating with a wired Ethernet network, a wireless 802.11 network, a cellular network, an InfiniBand network, etc.</p><p id="p-0118" num="0117">Network adapter device <b>1300</b> may be implemented as one of a system-on-chip (SOC), a processor, a network interface card (NIC), a switch application specific integrated circuit (ASIC), or a field programmable gate array (FPGA).</p><p id="p-0119" num="0118"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates an example architecture for features and systems described herein that includes one or more service provider computers and/or a user device connected via one or more networks. The devices discussed in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>13</b></figref> may use one or more components of the computing devices described in <figref idref="DRAWINGS">FIG. <b>14</b></figref> or may represent one or more computing devices described in <figref idref="DRAWINGS">FIG. <b>14</b></figref>. In illustrated architecture <b>1400</b>, one or more users <b>1402</b> may use user computing devices <b>1404</b>(<b>1</b>)-(N) to access an application <b>1406</b> (e.g., a web browser or mobile device application), via one or more networks <b>1408</b>. In some aspects, application <b>1406</b> may be hosted, managed, and/or provided by a computing resources service or service provider. One or more service provider computers <b>1410</b> may provide a native application that is configured to run on user devices <b>1404</b>, which user(s) <b>1402</b> may interact with. Service provider computer(s) <b>1410</b> may, in some examples, provide computing resources such as, but not limited to, client entities, low latency data storage, durable data storage, data access, management, virtualization, cloud-based software solutions, electronic content performance management, and so on. Service provider computer(s) <b>1410</b> may also be operable to provide web hosting, computer application development and/or implementation platforms, combinations of the foregoing or the like to user(s) <b>1402</b>. Service provider computer(s) <b>1410</b>, in some examples, may communicate with one or more third party computers <b>1412</b>.</p><p id="p-0120" num="0119">In some examples, network(s) <b>1408</b> may include any one or a combination of many different types of networks, such as cable networks, the Internet, wireless networks, cellular networks and other private and/or public networks. While the illustrated example represents user(s) <b>1402</b> accessing an application <b>1406</b> over network(s) <b>1408</b>, the described techniques may equally apply in instances where user(s) <b>1402</b> interact with the service provider computer(s) <b>1410</b> via user device(s) <b>1404</b> over a landline phone, via a kiosk or in some other manner. The described techniques may also apply in other client/server arrangements (e.g., set-top boxes, etc.), as well as in non-client/server arrangements (e.g., locally stored applications, etc.).</p><p id="p-0121" num="0120">As described briefly above, application <b>1406</b> may allow user(s) <b>1402</b> to interact with service provider computer(s) <b>1410</b> to, for example, access web content (e.g., web pages, music, video, etc.). Service provider computer(s) <b>1410</b>, which may be arranged in a cluster of servers or as a server farm, may host application <b>1406</b> and/or cloud-based software services. Other server architectures may also be used to host application <b>1406</b>. Application <b>1406</b> may be capable of handling requests from many users <b>1402</b> and serving, in response, various item web pages. Application <b>1406</b> can provide any type of website that supports user interaction, including social networking sites, online retailers, informational sites, blog sites, search engine sites, news and entertainment sites, and so forth. As discussed above, the described techniques can similarly be implemented outside of application <b>1406</b>, such as with other applications running on user device(s) <b>1404</b>.</p><p id="p-0122" num="0121">User device(s) <b>1404</b> may be any type of computing device such as, but not limited to, a mobile phone, a smart phone, a personal digital assistant (PDA), a laptop computer, a desktop computer, a thin-client device, a tablet PC, an electronic book (e-book) reader, etc. In some examples, user device(s) <b>1404</b> may be in communication with service provider computer(s) <b>1410</b> via network(s) <b>1408</b>, or via other network connections. Additionally, user device(s) <b>1404</b> may be part of the distributed system managed by, controlled by, or otherwise part of service provider computer(s) <b>1410</b> (e.g., a console device integrated with service provider computers <b>1410</b>).</p><p id="p-0123" num="0122">In one illustrative configuration, a user device(s) <b>1404</b> may include at least one memory <b>1414</b> and one or more processing units (or processor(s) <b>1416</b>). Processor(s) <b>1416</b> may be implemented in hardware, computer-executable instructions, firmware, or combinations thereof. Computer-executable instruction or firmware implementations of processor(s) <b>1416</b> may include computer-executable or machine-executable instructions written in any suitable programming language to perform the various functions described. User device(s) <b>1404</b> may also include geo-location devices (e.g., a global positioning system (GPS) device or the like) for providing and/or recording geographic location information associated with user device(s) <b>1404</b>.</p><p id="p-0124" num="0123">Memory <b>1414</b> may store program instructions that are loadable and executable on processor(s) <b>1416</b>, as well as data generated during the execution of these programs. Depending on the configuration and type of user device(s) <b>1404</b>, memory <b>1414</b> may be volatile (such as random access memory (RAM)) and/or non-volatile (such as read-only memory (ROM), flash memory, etc.). User device(s) <b>1404</b> may also include additional removable storage and/or non-removable storage including, but not limited to, magnetic storage, optical disks and/or tape storage. The disk drives and their associated computer-readable media may provide non-volatile storage of computer-readable instructions, data structures, program modules, and other data for the computing devices. In some implementations, memory <b>1414</b> may include multiple different types of memory, such as static random access memory (SRAM), dynamic random access memory (DRAM), or ROM.</p><p id="p-0125" num="0124">Turning to the contents of memory <b>1414</b> in more detail, memory <b>1414</b> may include an operating system and one or more application programs or services for implementing the features disclosed herein including at least a user provided input element or electronic service web page, such as via a browser application <b>1406</b> or dedicated applications (e.g., smart phone applications, tablet applications, etc.). Browser application <b>1406</b> may be configured to receive, store and/or display a website or other interface for interacting with service provider computer(s) <b>1410</b>. Additionally, memory <b>1414</b> may store access credentials and/or other user information such as, but not limited to, user IDs, passwords and/or other user information. In some examples, the user information may include information for authenticating an account access request such as, but not limited to, a device ID, a cookie, an IP address, a location, or the like. In addition, the user information may include a user-provided response to a security question or a geographic location obtained by user device <b>1404</b>.</p><p id="p-0126" num="0125">In some aspects, service provider computer(s) <b>1410</b> may also be any type of computing devices such as, but not limited to, a mobile phone, a smart phone, a personal digital assistant (PDA), a laptop computer, a desktop computer, a server computer, a thin-client device, a tablet PC, etc. Additionally, it should be noted that in some embodiments, service provider computer(s) <b>1410</b> are executed by one or more virtual machines implemented in a hosted computing environment. The hosted computing environment may include one or more rapidly provisioned and released computing resources, which computing resources may include computing, networking and/or storage devices. A hosted computing environment may also be referred to as a cloud computing environment. In some examples, service provider computer(s) <b>1410</b> may be in communication with user device(s) <b>1404</b> and/or other service providers via network(s) <b>1408</b>, or via other network connections. Service provider computer(s) <b>1410</b> may include one or more servers, perhaps arranged in a cluster, as a server farm, or as individual servers not associated with one another. These servers may be configured as part of an integrated, distributed computing environment.</p><p id="p-0127" num="0126">In one illustrative configuration, service provider computer(s) <b>1410</b> may include at least one memory <b>1418</b> and one or more processing units (or processors <b>1420</b>). Processor(s) <b>1420</b> may be any processing logic implemented in hardware, computer-executable instructions, firmware, or combinations thereof. Computer-executable instruction or firmware implementations of processor(s) <b>1420</b> may include computer-executable or machine-executable instructions written in any suitable programming language to perform the various functions described.</p><p id="p-0128" num="0127">In some instances, hardware processor(s) <b>1420</b> may be a single core processor or a multi-core processor. A multi-core processor may include multiple processing units within the same processor. In some embodiments, the multi-core processors may share certain resources, such as buses and second or third level of caches. In some instances, each core in a single or multi-core processor may also include multiple executing logical processors (or threads). In such a core (e.g., those with multiple logical processors), several stages of the execution pipeline and also lower level caches may also be shared.</p><p id="p-0129" num="0128">Memory <b>1418</b> may store program instructions that are loadable and executable on processor(s) <b>1420</b>, as well as data generated during the execution of these programs. Depending on the configuration and type of service provider computer(s) <b>1410</b>, memory <b>1418</b> may be volatile (such as RAM) and/or non-volatile (such as ROM, flash memory, etc.). Service provider computer(s) <b>1410</b> or servers may also include additional storage <b>1422</b>, which may include removable storage and/or non-removable storage. Additional storage <b>1422</b> may include, but is not limited to, magnetic storage, optical disks, and/or tape storage. The disk drives and their associated computer-readable media may provide non-volatile storage of computer-readable instructions, data structures, program modules, and other data for the computing devices. In some implementations, memory <b>1418</b> may include multiple different types of memory, such as SRAM, DRAM, or ROM.</p><p id="p-0130" num="0129">Memory <b>1418</b> and additional storage <b>1422</b>, both removable and non-removable, are all examples of computer-readable storage media. For example, computer-readable storage media may include volatile or non-volatile, removable or non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Memory <b>1418</b> and additional storage <b>1422</b> are all examples of computer storage media. Additional types of computer storage media that may be present in service provider computer(s) <b>1410</b> may include, but are not limited to, PRAM, SRAM, DRAM, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, DVD or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by service provider computer(s) <b>1410</b>. Combinations of any of the above should also be included within the scope of computer-readable media.</p><p id="p-0131" num="0130">Alternatively, computer-readable communication media may include computer-readable instructions, program modules or other data transmitted within a data signal, such as a carrier wave or other transmission. However, as used herein, computer-readable storage media does not include computer-readable communication media.</p><p id="p-0132" num="0131">Service provider computer(s) <b>1410</b> may also contain communications connection(s) <b>1424</b> that allow the service provider computer(s) <b>1410</b> to communicate with a stored database, another computing device or server, user terminals and/or other devices on network(s) <b>1408</b>. Service provider computer(s) <b>1410</b> may also include I/O device(s) <b>1426</b>, such as a keyboard, a mouse, a pen, a voice input device, a touch input device, a display, speakers, a printer, and the like. Communication connection(s) <b>1424</b> and I/O device(s) <b>1426</b>, along with storage <b>1422</b>, may be described as peripheral devices.</p><p id="p-0133" num="0132">Memory <b>1418</b> may include an operating system <b>1428</b>, one or more data stores <b>1430</b> and/or one or more application programs <b>1432</b> or services for implementing the features disclosed herein.</p><p id="p-0134" num="0133">Service provider computer(s) <b>1410</b> may also include one or more communication channels <b>1434</b>. A communication channel <b>1434</b> may provide a medium over which the various components of service provider computer <b>1410</b> can communicate. Communication channel or channels <b>1434</b> may take the form of a bus, a ring, a switching fabric, or a network.</p><p id="p-0135" num="0134">The modules described herein may be software modules, hardware modules or a suitable combination thereof If the modules are software modules, the modules can be embodied on a non-transitory computer readable medium and processed by a processor in any of the computer systems described herein. It should be noted that the described processes and architectures can be performed either in real-time or in an asynchronous mode prior to any user interaction. The modules may be configured in the manner suggested in <figref idref="DRAWINGS">FIG. <b>14</b></figref>, and/or functions described herein can be provided by one or more modules that exist as separate modules and/or module functions described herein can be spread over multiple modules.</p><p id="p-0136" num="0135"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates aspects of an example environment <b>1500</b> for implementing aspects in accordance with various embodiments. As will be appreciated, although a Web-based environment is used for purposes of explanation, different environments may be used, as appropriate, to implement various embodiments. The environment includes an electronic client device <b>1502</b>, which can include any appropriate device operable to send and receive requests, messages, or information over an appropriate network <b>1504</b> and convey information back to a user of the device. Examples of such client devices include personal computers, cell phones, handheld messaging devices, laptop computers, set-top boxes, personal data assistants, electronic book readers, and the like. The network can include any appropriate network, including an intranet, the Internet, a cellular network, a local area network, or any other such network or combination thereof. Components used for such a system can depend at least in part upon the type of network and/or environment selected. Protocols and components for communicating via such a network are well known and will not be discussed herein in detail. Communication over the network can be enabled by wired or wireless connections and combinations thereof. In this example, the network includes the Internet, as the environment includes a Web server <b>1506</b> for receiving requests and serving content in response thereto, although for other networks an alternative device serving a similar purpose could be used as would be apparent to one of ordinary skill in the art.</p><p id="p-0137" num="0136">The illustrative environment includes at least one application server <b>1508</b> and a data store <b>1510</b>. It should be understood that there can be several application servers, layers, or other elements, processes, or components, which may be chained or otherwise configured, which can interact to perform tasks such as obtaining data from an appropriate data store. As used herein the term &#x201c;data store&#x201d; refers to any device or combination of devices capable of storing, accessing, and retrieving data, which may include any combination and number of data servers, databases, data storage devices, and data storage media, in any standard, distributed, or clustered environment. The application server can include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device, handling a majority of the data access and business logic for an application. The application server provides access control services in cooperation with the data store and is able to generate content such as text, graphics, audio, and/or video to be transferred to the user, which may be served to the user by the Web server in the form of HyperText Markup Language (&#x201c;HTML&#x201d;), Extensible Markup Language (&#x201c;XML&#x201d;), or another appropriate structured language in this example. The handling of all requests and responses, as well as the delivery of content between the client device <b>1502</b> and the application server <b>1508</b>, can be handled by the Web server. It should be understood that the Web and application servers are not required and are merely example components, as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein.</p><p id="p-0138" num="0137">The data store <b>1510</b> can include several separate data tables, databases or other data storage mechanisms and media for storing data relating to a particular aspect. For example, the data store illustrated includes mechanisms for storing production data <b>1512</b> and user information <b>1516</b>, which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data <b>1514</b>, which can be used for reporting, analysis, or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store, such as for page image information and to access right information, which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store <b>1510</b>. The data store <b>1510</b> is operable, through logic associated therewith, to receive instructions from the application server <b>1508</b> and obtain, update or otherwise process data in response thereto. In one example, a user might submit a search request for a certain type of item. In this case, the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user, such as in a results listing on a Web page that the user is able to view via a browser on the user device <b>1502</b>. Information for a particular item of interest can be viewed in a dedicated page or window of the browser.</p><p id="p-0139" num="0138">Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer-readable storage medium (e.g., a hard disk, random access memory, read only memory, etc.) storing instructions that, when executed by a processor of the server, allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art, particularly in light of the disclosure herein.</p><p id="p-0140" num="0139">The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links, using one or more computer networks or direct connections. However, it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in <figref idref="DRAWINGS">FIG. <b>15</b></figref>. Thus, the depiction of the system in <figref idref="DRAWINGS">FIG. <b>15</b></figref> should be taken as being illustrative in nature and not limiting to the scope of the disclosure.</p><p id="p-0141" num="0140">The various embodiments further can be implemented in a wide variety of operating environments, which in some cases can include one or more user computers, computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers, such as desktop or laptop computers running a standard operating system, as well as cellular, wireless, and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially-available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices, such as dummy terminals, thin-clients, gaming systems, and other devices capable of communicating via a network.</p><p id="p-0142" num="0141">Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially-available protocols, such as Transmission Control Protocol/Internet Protocol (&#x201c;TCP/IP&#x201d;), Open System Interconnection (&#x201c;OSI&#x201d;), File Transfer Protocol (&#x201c;FTP&#x201d;), Universal Plug and Play (&#x201c;UpnP&#x201d;), Network File System (&#x201c;NFS&#x201d;), Common Internet File System (&#x201c;CIFS&#x201d;), and AppleTalk. The network can be, for example, a local area network, a wide-area network, a virtual private network, the Internet, an intranet, an extranet, a public switched telephone network, an infrared network, a wireless network, and any combination thereof.</p><p id="p-0143" num="0142">In embodiments utilizing a Web server, the Web server can run any of a variety of server or mid-tier applications, including Hypertext Transfer Protocol (&#x201c;HTTP&#x201d;) servers, FTP servers, Common Gateway Interface (&#x201c;CGP&#x201d;) servers, data servers, Java servers, and business application servers. The server(s) also may be capable of executing programs or scripts in response to requests from user devices, such as by executing one or more Web applications that may be implemented as one or more scripts or programs written in any programming language, such as Java&#xae;, C, C#, or C++, or any scripting language, such as Perl, Python, or TCL, as well as combinations thereof. The server(s) may also include database servers, including without limitation those commercially available from Oracle&#xae;, Microsoft&#xae;, Sybase&#xae;, and IBM&#xae;.</p><p id="p-0144" num="0143">The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations, such as on a storage medium local to (and/or resident in) one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments, the information may reside in a storage-area network (&#x201c;SAN&#x201d;) familiar to those skilled in the art. Similarly, any necessary files for performing the functions attributed to the computers, servers, or other network devices may be stored locally and/or remotely, as appropriate. Where a system includes computerized devices, each such device can include hardware elements that may be electrically coupled via a bus, the elements including, for example, at least one central processing unit (&#x201c;CPU&#x201d;), at least one input device (e.g., a mouse, keyboard, controller, touch screen, or keypad), and at least one output device (e.g., a display device, printer, or speaker). Such a system may also include one or more storage devices, such as disk drives, optical storage devices, and solid-state storage devices such as random access memory (&#x201c;RAM&#x201d;) or read-only memory (&#x201c;ROM&#x201d;), as well as removable media devices, memory cards, flash cards, etc.</p><p id="p-0145" num="0144">Such devices also can include a computer-readable storage media reader, a communications device (e.g., a modem, a network card (wireless or wired)), an infrared communication device, etc.), and working memory as described above. The computer-readable storage media reader can be connected with, or configured to receive, a computer-readable storage medium, representing remote, local, fixed, and/or removable storage devices as well as storage media for temporarily and/or more permanently containing, storing, transmitting, and retrieving computer-readable information. The system and various devices also typically will include a number of software applications, modules, services, or other elements located within at least one working memory device, including an operating system and application programs, such as a client application or Web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example, customized hardware might also be used and/or particular elements might be implemented in hardware, software (including portable software, such as applets), or both. Further, connection to other computing devices such as network input/output devices may be employed.</p><p id="p-0146" num="0145">Storage media computer readable media for containing code, or portions of code, can include any appropriate media known or used in the art, including storage media and communication media, such as but not limited to volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage and/or transmission of information such as computer readable instructions, data structures, program modules, or other data, including RAM, ROM, Electrically Erasable Programmable Read-Only Memory (&#x201c;EEPROM&#x201d;), flash memory or other memory technology, Compact Disc Read-Only Memory (&#x201c;CD-ROM&#x201d;), digital versatile disk (DVD), or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage, or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a system device. Based on the disclosure and teachings provided herein, a person of ordinary skill in the art will appreciate other ways and/or methods to implement the various embodiments.</p><p id="p-0147" num="0146">The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the disclosure as set forth in the claims.</p><p id="p-0148" num="0147">Other variations are within the spirit of the present disclosure. Thus, while the disclosed techniques are susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the disclosure to the specific form or forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the disclosure, as defined in the appended claims.</p><p id="p-0149" num="0148">The use of the terms &#x201c;a&#x201d; and &#x201c;an&#x201d; and &#x201c;the&#x201d; and similar referents in the context of describing the disclosed embodiments (especially in the context of the following claims) are to be construed to cover both the singular and the plural, unless otherwise indicated herein or clearly contradicted by context. The terms &#x201c;comprising,&#x201d; &#x201c;having,&#x201d; &#x201c;including,&#x201d; and &#x201c;containing&#x201d; are to be construed as open-ended terms (i.e., meaning &#x201c;including, but not limited to,&#x201d;) unless otherwise noted. The term &#x201c;connected&#x201d; is to be construed as partly or wholly contained within, attached to, or joined together, even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range, unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples, or exemplary language (e.g., &#x201c;such as&#x201d;) provided herein, is intended merely to better illuminate embodiments of the disclosure and does not pose a limitation on the scope of the disclosure unless otherwise claimed. No language in the specification should be construed as indicating any non-claimed element as essential to the practice of the disclosure.</p><p id="p-0150" num="0149">Disjunctive language such as the phrase &#x201c;at least one of X, Y, or Z,&#x201d; unless specifically stated otherwise, is intended to be understood within the context as used in general to present that an item, term, etc., may be either X, Y, or Z, or any combination thereof (e.g., X, Y, and/or Z). Thus, such disjunctive language is not generally intended to, and should not, imply that certain embodiments require at least one of X, at least one of Y, or at least one of Z to each be present.</p><p id="p-0151" num="0150">Preferred embodiments of this disclosure are described herein, including the best mode known to the inventors for carrying out the disclosure. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for the disclosure to be practiced otherwise than as specifically described herein. Accordingly, this disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover, any combination of the above-described elements in all possible variations thereof is encompassed by the disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.</p><p id="p-0152" num="0151">All references, including publications, patent applications, and patents, cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of data communication in a network, the method comprising:<claim-text>receiving data from a first device to be transmitted to a second device, wherein the first device is associated with a source address on the network, and the second device is associated with a destination address on the network;</claim-text><claim-text>splitting the data into packets according to a transport service of a transport layer;</claim-text><claim-text>dynamically assigning a flowlet from a plurality of flowlets to each packet based on respective utilization levels of the plurality of flowlets, wherein each flowlet of the plurality of flowlets uses a different path in the network; and</claim-text><claim-text>sending each packet on the flowlet assigned to that packet according to the transport service.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each flowlet is classified into one of a plurality of utilization levels including full, almost full, almost empty, and empty.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of flowlets are assigned in a prioritized order starting with flowlets that are almost full, followed by flowlets that are almost empty, and then flowlets that are empty.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising maintaining a number of outstanding packets for each flowlet.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising limiting the number of outstanding packets for each flowlet to an adjustable number of packets.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising adjusting the adjustable number of packets based on network congestion.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a packet is assigned to a non-idle flowlet even when an empty flowlet is available.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a packet is assigned to a last-used flowlet when the last-used flowlet is not full.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein packets belonging to a message from an application are sent on a same path based on a flow label provided by the application.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising reassigning the flowlet to a different path when the flowlet has a packet drop rate above a threshold value.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising reassigning the flowlet to a different path when the flowlet has a latency longer than a threshold value.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising sending a dummy packet on an idle flowlet.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. An apparatus comprising:<claim-text>processing logic;</claim-text><claim-text>a computer readable storage device coupled to and readable by the processing logic, wherein the computer readable storage device includes instructions for causing the processing logic to perform operations including:<claim-text>receiving data from a first device to be transmitted to a second device over a plurality of flowlets on a network, wherein the first device is associated with a source address on the network, and the second device is associated with a destination address on the network;</claim-text><claim-text>splitting the data into packets according to a transport service of a transport layer;</claim-text><claim-text>assigning the flowlets to transmit the packets;</claim-text><claim-text>transmitting the packets on the flowlets according to the transport service;</claim-text><claim-text>maintaining a number of outstanding packets for each flowlet; and</claim-text><claim-text>adjusting the assignment of the flowlets based on the number of outstanding packets for each flowlet.</claim-text></claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the operations further include limiting the number of outstanding packets for each flowlet to an adjustable number of packets.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The apparatus of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the operations further include adjusting the adjustable number of packets based on network congestion.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein assignment of the flowlets is further based on information provided from an application.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the operations further include reassigning a flowlet to a different path when the flowlet has a packet drop rate above a threshold value.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the operations further include reassigning a flowlet to a different path when the flowlet has a packet drop rate above a threshold value.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the operations further include adjusting a number of flowlets in the plurality of flowlets.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the apparatus includes one of a system-on-chip (SOC), a processor, a network interface card (NIC), a switch application specific integrated circuit (ASIC), or a field programmable gate array (FPGA).</claim-text></claim></claims></us-patent-application>