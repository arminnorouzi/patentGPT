<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004528A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004528</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363699</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>16</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>451</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0482</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>T</subclass><main-group>11</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>168</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20180201</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>451</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0482</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>T</subclass><main-group>11</main-group><subgroup>206</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEMS AND METHODS FOR TEMPLATE-BASED DATA PROCESSING AND VISUALIZATION</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Capital One Services, LLC</orgname><address><city>McLean</city><state>VA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Thangaraj</last-name><first-name>Saranya</first-name><address><city>Frisco</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Motupalli</last-name><first-name>Venkat</first-name><address><city>Flower Mound</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Abiraman</last-name><first-name>Karthick</first-name><address><city>Chennai</city><country>IN</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Liu</last-name><first-name>Bing</first-name><address><city>Frisco</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Gonzales</last-name><first-name>Dimas</first-name><address><city>Dallas</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Andoji</last-name><first-name>Anurag</first-name><address><city>Frisco</city><state>TX</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A system may comprise one or more processors, a memory in communication with the one or more processors, and storing instructions, that when executed by the one or more processors, are configured to cause the system to process and visualize data. The system may receive one or more data sets, and generate a plurality of templates, each template including one or more functions. The system may receive user input selecting a graphical representation for displaying the data sets. The system may process the data sets by utilizing a template. The system may generate one or more data files and cause a computing device to display the processed data sets as the graphical representation based on the data files. The system may retrieve one or more updated data files and cause the computing device to display the processed data sets as an updated graphical representation based on the updated data files.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="144.86mm" wi="103.46mm" file="US20230004528A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="113.54mm" wi="171.87mm" file="US20230004528A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="160.27mm" wi="105.58mm" file="US20230004528A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="177.80mm" wi="105.49mm" file="US20230004528A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="228.60mm" wi="161.46mm" file="US20230004528A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="235.97mm" wi="164.68mm" file="US20230004528A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="228.01mm" wi="164.76mm" file="US20230004528A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD OF INVENTION</heading><p id="p-0002" num="0001">The present disclosure relates to systems and methods for template-based data processing and visualization, and more particularly to template-based systems and methods for processing data and displaying data as various graphical representations.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Traditional systems and methods for processing and visualizing data require manual code changes each time a user wishes to add data to an existing data set, and each time a user wishes to display a set of data as a different graphical representation. These systems and methods can be quite cumbersome and inefficient, especially when dealing with large and/or numerous sets of data, or when working with data that updates routinely, such as on a weekly, monthly, or quarterly basis. Further, these systems and methods require sequential processing of individual graphical representations, which leads to poor computation efficiency.</p><p id="p-0004" num="0003">Accordingly, there is a need for systems and methods that do not require manual code changes when processing data or displaying the data in different graphical representations, and that can provide enhanced processing efficiency. Embodiments of the present disclosure are directed to this and other considerations.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0005" num="0004">Disclosed embodiments provide systems and methods for template-based data processing and visualization that do not require manual code changes at either the processing or visualization steps.</p><p id="p-0006" num="0005">Consistent with the disclosed embodiments, a system may include one or more processors and a memory in communication with the one or more processors and storing instructions, that when executed by the one or more processors, are configured to cause the system to perform a method for processing and visualizing one or more data sets. For example, the system (e.g., a data visualization system) may receive one or more sets of data (e.g., loan application data). The system may generate a plurality of processing templates, wherein each of the plurality of processing templates comprising one or more pre-coded functions (e.g., aggregate, combine columns, calculate weighted average, etc.). The system may receive a first user input (e.g., via a dropdown selector on a graphical user interface (GUI) of a computing device) selecting a first graphical representation (e.g., a bar graph, line graph, pie chart, etc.) for displaying the one or more data sets. The system may retrieve, based on the first user input, a first template of the plurality of processing templates. The system may then process the one or more data sets by utilizing the first template. The system may generate one or more data files (e.g., raw data file, configuration file, directory file, etc.) corresponding to the one or more processed data sets. The system may cause a computing device (e.g., a mobile phone, laptop, tablet, etc.) to display, via a GUI, the one or more processed data sets as the first graphical representation based on the one or more data files. The system may retrieve one or more updated data files (e.g., comprising one or more modifications and/or additions to the one or more data sets) corresponding to the one or more processed data sets. In some embodiments, the system may retrieve the one or more updated data files based on a request from the computing device to update the first graphical representation. The system may then cause the computing device to display, via the GUI, the one or more processed data sets as a second graphical representation based on the one or more updated data files. The disclosed embodiments provide the benefits of not only receiving user input as to the type of graphical representation for displaying the data, but also allowing automatic updating of that graphical representation when the system recognizes changes to the existing data sets.</p><p id="p-0007" num="0006">Other embodiments allow for the benefit of increased user input for switching between types of graphical representations. In one such embodiment, after receiving one or more data sets, and generating a plurality of processing templates, the system may retrieve a first template of the plurality of processing templates, wherein the first template comprises a default graphical representation (e.g., a bar graph, line graph, pie chart, etc.) for displaying the one or more data sets. The system may process the one or more data sets by utilizing the first template. The system may cause a computing device to display, e.g., via a GUI, the one or more data sets as the default graphical representation. The system may then receive a first user input selecting a second graphical representation for displaying the one or more data sets. The system may retrieve, based on the first user input, a second template of the plurality of processing templates. The system may process the one or more data sets by utilizing the second template. The system may then cause the computing device to display, via the GUI, the one or more data sets as the second graphical representation. In some embodiments, the second graphical representation may be different from the default graphical representation such that a user may visualize the data in different graphical forms. In such embodiments, the second template may be different from the first template, i.e., the first and second templates may comprise one or more different and respective pre-coded functions for processing the data and enabling the computing device to display the data as the default and second graphical representations, respectively.</p><p id="p-0008" num="0007">In another such embodiment, after receiving one or more data sets, the system may generate a plurality of processing templates, wherein each of the plurality of processing templates corresponds to a type of graphical representation for displaying data. The system may receive a first user input selecting a first graphical representation (e.g. a line graph) for displaying the one or more data sets. The system may process the one or more data sets by utilizing a first template of the plurality of processing templates. The system may then cause a computing device to display, e.g., via a GUI, the one or more data sets as the first graphical representation. Next, the system may receive a second user input selecting a second graphical representation (e.g., a scatter plot) for displaying the one or more data sets. The system may process the one or more data sets by utilizing a second template of the plurality of processing templates. They system may then cause the computing device to display, via the GUI, the one or more data sets as the second graphical representation. As described above, in some embodiments, the first template may be different from the second template.</p><p id="p-0009" num="0008">Further implementations, features, and aspects of the disclosed technology, and the advantages offered thereby, are described in greater detail hereinafter, and can be understood with reference to the following detailed description, accompanying drawings, and claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0010" num="0009">Reference will now be made to the accompanying drawings, which are not necessarily drawn to scale, and which are incorporated into and constitute a portion of this disclosure, illustrate various implementations and aspects of the disclosed technology and, together with the description, serve to explain the principles of the disclosed technology. In the drawings:</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram of an example system environment that may be used to implement one or more embodiments of the present disclosure;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a component diagram of a data visualization system in accordance with some embodiments of the present disclosure;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a component diagram of a computing device in accordance with some embodiments of the present disclosure;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of a method for template-based data processing and visualization in accordance with some embodiments of the present disclosure;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart of a method for template-based data processing and visualization in accordance with some embodiments of the present disclosure; and</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart of a method for template-based data processing and visualization in accordance with some embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0017" num="0016">Some implementations of the disclosed technology will be described more fully with reference to the accompanying drawings. This disclosed technology may, however, be embodied in many different forms and should not be construed as limited to the implementations set forth herein. The components described hereinafter as making up various elements of the disclosed technology are intended to be illustrative and not restrictive. Many suitable components that would perform the same or similar functions as components described herein are intended to be embraced within the scope of the disclosed electronic devices and methods. Such other components not described herein may include, but are not limited to, for example, components developed after development of the disclosed technology.</p><p id="p-0018" num="0017">It is also to be understood that the mention of one or more method steps does not preclude the presence of additional method steps or intervening method steps between those steps expressly identified. Similarly, it is also to be understood that the mention of one or more components in a device or system does not preclude the presence of additional components or intervening components between those components expressly identified.</p><p id="p-0019" num="0018">By way of introduction, aspects discussed herein may relate to systems and methods for template-based processing and visualization of data. For example, some embodiments describe processing one or more sets of data by utilizing templates comprising one or more pre-coded functions. Some embodiments also describe visualizing the one or more sets of data by enabling a computing device to display the data as different graphical representations. These provide advantages over other systems and methods by improving efficiency in being able to update existing sets of data and/or switch between various graphical representations without the need for manual code changes in either the processing or visualization steps. Further, whereas other systems and methods require sequential processing of individual graphical representations, the enclosed systems and methods provide improved computation efficiency in that a template-based approach allows for parallel processing of data groups. That is, one function coded in a single template may be capable of processing different data components simultaneously. As such, the following discussion describes several exemplary systems and methods for template-based processing and visualization of data.</p><p id="p-0020" num="0019">Reference will now be made in detail to example embodiments of the disclosed technology, examples of which are illustrated in the accompanying drawings and disclosed herein. Wherever convenient, the same references numbers will be used throughout the drawings to refer to the same or like parts.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram of an example system environment that may be used to implement one or more embodiments of the present disclosure. The components and arrangements shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> are not intended to limit the disclosed embodiments as the components used to implement the disclosed processes and features may vary.</p><p id="p-0022" num="0021">In accordance with disclosed embodiments, system <b>100</b> may include a data visualization system <b>110</b> in communication with a computing device <b>120</b> via network <b>105</b>. In some embodiments, data visualization system <b>110</b> may also be in communication with various databases. Computing device <b>120</b> may be a user device such as a mobile computing device (e.g., a smart phone, tablet computer, smart wearable device, portable laptop computer, voice command device, wearable augmented reality device, or other mobile computing device) or a stationary device (e.g., desktop computer).</p><p id="p-0023" num="0022">In some embodiments, the computing device <b>120</b> may provide an input to the data visualization system <b>110</b> selecting a type of graphical representation for displaying one or more sets of data. The data visualization system <b>110</b> may, based on the input, process the one or more sets of data utilizing a template corresponding to the selected graphical representation, and then cause computing device <b>120</b> to display the one or more sets of data as the selected graphical representation.</p><p id="p-0024" num="0023">Network <b>105</b> may be of any suitable type, including individual connections via the internet such as cellular or WiFi networks. In some embodiments, network <b>105</b> may connect terminals using direct connections such as radio-frequency identification (RFID), near-field communication (NFC), Bluetooth&#x2122;, low-energy Bluetooth&#x2122; (BLE), WiFi&#x2122;, ZigBee&#x2122;, ambient backscatter communications (ABC) protocols, USB, or LAN. Because the information transmitted may be personal or confidential, security concerns may dictate one or more of these types of connections be encrypted or otherwise secured. In some embodiments, however, the information being transmitted may be less personal, and therefore the network connections may be selected for convenience over security.</p><p id="p-0025" num="0024">An example embodiment of data visualization system <b>110</b> is shown in more detail in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Computing device <b>120</b> may have a similar structure and components that are similar to those described with respect to data visualization system <b>110</b>. As shown, data visualization system <b>110</b> may include a processor <b>210</b>, an input/output (&#x201c;I/O&#x201d;) device <b>220</b>, a memory <b>230</b> containing an operating system (&#x201c;OS&#x201d;) <b>240</b> and a program <b>250</b>. For example, data visualization system <b>110</b> may be a single server or may be configured as a distributed computer system including multiple servers or computers that interoperate to perform one or more of the processes and functionalities associated with the disclosed embodiments. In some embodiments, data visualization system <b>110</b> may further include a peripheral interface, a transceiver, a mobile network interface in communication with processor <b>210</b>, a bus configured to facilitate communication between the various components of data visualization system <b>110</b>, and a power source configured to power one or more components of data visualization system <b>110</b>.</p><p id="p-0026" num="0025">A peripheral interface may include the hardware, firmware and/or software that enables communication with various peripheral devices, such as media drives (e.g., magnetic disk, solid state, or optical disk drives), other processing devices, or any other input source used in connection with the instant techniques. In some embodiments, a peripheral interface may include a serial port, a parallel port, a general-purpose input and output (GPIO) port, a game port, a universal serial bus (USB), a micro-USB port, a high definition multimedia (HDMI) port, a video port, an audio port, a Bluetooth&#x2122; port, a near-field communication (NFC) port, another like communication interface, or any combination thereof.</p><p id="p-0027" num="0026">In some embodiments, a transceiver may be configured to communicate with compatible devices and ID tags when they are within a predetermined range. A transceiver may be compatible with one or more of: radio-frequency identification (RFID), NFC, Bluetooth&#x2122; low-energy Bluetooth&#x2122; (BLE), WiFi&#x2122;, ZigBee&#x2122;, ambient backscatter communications (ABC) protocols or similar technologies.</p><p id="p-0028" num="0027">A mobile network interface may provide access to a cellular network, the Internet, or another wide-area network. In some embodiments, a mobile network interface may include hardware, firmware, and/or software that allows processor(s) <b>210</b> to communicate with other devices via wired or wireless networks, whether local or wide area, private or public, as known in the art. A power source may be configured to provide an appropriate alternating current (AC) or direct current (DC) to power components.</p><p id="p-0029" num="0028">As described above, data visualization system <b>110</b> may be configured to remotely communicate with one or more other devices, such as computing device <b>120</b>.</p><p id="p-0030" num="0029">Processor <b>210</b> may include one or more of a microprocessor, microcontroller, digital signal processor, co-processor or the like or combinations thereof capable of executing stored instructions and operating upon stored data. Memory <b>230</b> may include, in some implementations, one or more suitable types of memory (e.g., volatile or non-volatile memory, random access memory (RAM), read only memory (ROM), programmable read-only memory (PROM), erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), magnetic disks, optical disks, floppy disks, hard disks, removable cartridges, flash memory, a redundant array of independent disks (RAID), and the like) for storing files, including an operating system, application programs (including, e.g., a web browser application, a widget or gadget engine, or other applications, as necessary), executable instructions, and data. In one embodiment, the processing techniques described herein are implemented as a combination of executable instructions and data within the memory <b>230</b>.</p><p id="p-0031" num="0030">Processor <b>210</b> may be one or more known processing devices, such as a microprocessor from the Pentium&#x2122; family manufactured by Intel&#x2122; or the Turion&#x2122; family manufactured by AMD&#x2122;. Processor <b>210</b> may constitute a single core or multiple core processor that executes parallel processes simultaneously. For example, processor <b>210</b> may be a single core processor that is configured with virtual processing technologies. In certain embodiments, processor <b>210</b> may use logical processors to simultaneously execute and control multiple processes. Processor <b>210</b> may implement virtual machine technologies, or other similar known technologies to provide the ability to execute, control, run, manipulate, store, etc. multiple software processes, applications, programs, etc. One of ordinary skill in the art would understand that other types of processor arrangements could be implemented that provide for the capabilities disclosed herein.</p><p id="p-0032" num="0031">Data visualization system <b>110</b> may include one or more storage devices configured to store information used by processor <b>210</b> (or other components) to perform certain functions related to the disclosed embodiments. In one example, data visualization system <b>110</b> may include memory <b>230</b> that includes instructions to enable processor <b>210</b> to execute one or more applications, such as server applications, network communication processes, and any other type of application or software known to be available on computer systems. Alternatively, the instructions, application programs, etc., may be stored in an external storage or available from a memory over a network. The one or more storage devices may be a volatile or non-volatile, magnetic, semiconductor, tape, optical, removable, non-removable, or other type of storage device or tangible computer-readable medium.</p><p id="p-0033" num="0032">In one embodiment, data visualization system <b>110</b> may include memory <b>230</b> that includes instructions that, when executed by processor <b>210</b>, perform one or more processes consistent with the functionalities disclosed herein. Methods, systems, and articles of manufacture consistent with disclosed embodiments are not limited to separate programs or computers configured to perform dedicated tasks. For example, data visualization system <b>110</b> may include memory <b>230</b> that may include one or more programs <b>250</b> to perform one or more functions of the disclosed embodiments. Moreover, processor <b>210</b> may execute one or more programs <b>250</b> located remotely from data visualization system <b>110</b>. For example, data visualization system <b>110</b> may access one or more remote programs <b>250</b>, that, when executed, perform functions related to disclosed embodiments.</p><p id="p-0034" num="0033">Memory <b>230</b> may include one or more memory devices that store data and instructions used to perform one or more features of the disclosed embodiments. Memory <b>230</b> may also include any combination of one or more databases controlled by memory controller devices (e.g., server(s), etc.) or software, such as document management systems, Microsoft&#x2122; SQL databases, SharePoint&#x2122; databases, Oracle&#x2122; databases, Sybase&#x2122; databases, or other relational databases. Memory <b>230</b> may include software components that, when executed by processor <b>210</b>, perform one or more processes consistent with the disclosed embodiments. In some embodiments, memory <b>230</b> may include a file database <b>260</b> and a template database <b>270</b> for storing related data to enable data visualization system <b>110</b> to perform one or more of the processes and functionalities associated with the disclosed embodiments.</p><p id="p-0035" num="0034">Data visualization system <b>110</b> may also be communicatively connected to one or more memory devices (e.g., databases (not shown)) locally or through a network. The remote memory devices may be configured to store information and may be accessed and/or managed by data visualization system <b>110</b>. By way of example, the remote memory devices may be document management systems, Microsoft&#x2122; SQL database, SharePoint&#x2122; databases, Oracle&#x2122; databases, Sybase&#x2122; databases, or other relational databases. Systems and methods consistent with disclosed embodiments, however, are not limited to separate databases or even to the use of a database.</p><p id="p-0036" num="0035">Data visualization system <b>110</b> may also include one or more I/O devices <b>220</b> that may include one or more interfaces for receiving signals or input from devices and providing signals or output to one or more devices that allow data to be received and/or transmitted by data visualization system <b>110</b>. For example, data visualization system <b>110</b> may include interface components, which may provide interfaces to one or more input devices, such as one or more keyboards, mouse devices, touch screens, track pads, trackballs, scroll wheels, digital cameras, microphones, sensors, and the like, that enable data visualization system <b>110</b> to receive data from one or more users (such as via computing device <b>120</b>).</p><p id="p-0037" num="0036">In example embodiments of the disclosed technology, data visualization system <b>110</b> may include any number of hardware and/or software applications that are executed to facilitate any of the operations. The one or more I/O interfaces may be utilized to receive or collect data and/or user instructions from a wide variety of input devices. Received data may be processed by one or more computer processors as desired in various implementations of the disclosed technology and/or stored in one or more memory devices.</p><p id="p-0038" num="0037">While data visualization system <b>110</b> has been described as one form for implementing the techniques described herein, those having ordinary skill in the art will appreciate that other, functionally equivalent techniques may be employed. For example, as known in the art, some or all of the functionality implemented via executable instructions may also be implemented using firmware and/or hardware devices such as application specific integrated circuits (ASICs), programmable logic arrays, state machines, etc. Furthermore, other implementations may include a greater or lesser number of components than those illustrated.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example embodiment of computing device <b>120</b>. As shown, computing device <b>120</b> may include I/O device <b>220</b> for receiving data from another device (e.g., data visualization system <b>110</b>), memory <b>230</b> containing OS <b>240</b>, program <b>250</b>, and any other associated component as described above with respect to data visualization system <b>110</b>. Computing device <b>120</b> may also have one or more processors <b>210</b>, a geographic location sensor (&#x201c;GLS&#x201d;) <b>304</b> for determining the geographic location of computing device <b>120</b>, a display <b>306</b> for displaying content such as text messages, images, and selectable buttons/icons/links, an environmental data (&#x201c;ED&#x201d;) sensor <b>308</b> for obtaining environmental data including audio and/or visual information, and a user interface (&#x201c;U/I&#x201d;) device <b>310</b> for receiving user input data, such as data representative of a click, a scroll, a tap, a press, or typing on an input device that can detect tactile inputs. User input data may also be non-tactile inputs that may be otherwise detected by ED sensor <b>308</b>. For example, user input data may include auditory commands. According to some embodiments, U/I device <b>310</b> may include some or all of the components described with respect to I/O device <b>220</b> above. In some embodiments, environmental data sensor <b>308</b> may include a microphone and/or an image capture device, such as a digital camera.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a flowchart of a method <b>400</b> for performing template-based data processing and visualization. Method <b>400</b> may be performed by the data visualization system <b>110</b> and/or the computing device <b>120</b> of the system <b>100</b>. This embodiment provides the benefit of enabling a user to visualize data in graphical form as the data may be changing in real-time, without the user or the system itself having to make any code changes during either the processing or visualization steps.</p><p id="p-0041" num="0040">In block <b>410</b>, the system (e.g., system <b>100</b>) may receive one or more data sets. For example, system <b>100</b> may receive one or more sets of financial data, such as loan application data, that may comprise, e.g., tax data, income data, and/or bankruptcy data. System <b>100</b> may be configured to receive the one or more data sets at some given frequency, such as on a daily, weekly, monthly, or quarterly basis. System <b>100</b> may also be configured to store the one or more data sets in one or more databases.</p><p id="p-0042" num="0041">In block <b>420</b>, the system (e.g., system <b>100</b>) may generate a plurality of processing templates, wherein each of the plurality of processing templates comprising one or more pre-coded functions for processing data such that the data may be displayed as a certain type of graphical representation. The plurality of processing templates may be indexed such that the system may easily retrieve the most appropriate template for processing a set of data. The one or more pre-coded functions may be, for example, aggregate, combine versions, combine values, select columns, combine columns, generate configuration, plot directory, pre-process, post-process, select source, split data, create subset rows, calculate weighted average, filter, transpose, output, or combinations thereof. Each of these pre-coded functions defines a way in which system <b>100</b> may process one or more data sets. That is, the function &#x201c;aggregate&#x201d; informs system <b>100</b> to combine or group together one or more data sets; &#x201c;combine versions&#x201d; informs system <b>100</b> to combine or consolidate different versions of one or more data sets; &#x201c;combine columns&#x201d; informs system <b>100</b> to combine or consolidate one or more data sets written in column format; &#x201c;generate configuration&#x201d; informs system <b>100</b> to generate one or more configuration data files comprising metadata associated with one or more data sets; &#x201c;plot directory&#x201d; informs system <b>100</b> to generate one or more directory files for one or more data sets for logical grouping of the one or more data sets; &#x201c;pre-process&#x201d; informs system <b>100</b> to prepare one or more data sets for processing; &#x201c;post-process&#x201d; informs system <b>100</b> to edit or organize one or more data sets after processing; &#x201c;select source&#x201d; informs system <b>100</b> to identify from where one or more data sets come; &#x201c;split data&#x2019; informs system <b>100</b> to divide one or more data sets into smaller segments; &#x201c;create subset rows&#x201d; informs system <b>100</b> to create rows of one or more data sets comprising sub-groupings or sub-categories within each row; &#x201c;calculate weighted average&#x201d; informs system <b>100</b> to calculate the weighted average of one or more data sets; &#x201c;filter&#x201d; informs system <b>100</b> to select a smaller set of one or more data sets for evaluation; &#x201c;transpose&#x201d; informs system <b>100</b> to rotate one or more data sets from rows to columns or vice versa; &#x201c;output&#x201d; informs system <b>100</b> to output or produce one or more processed data sets.</p><p id="p-0043" num="0042">The one or more pre-coded functions may also comprise one or more pre-coded sub-functions which may each further define how system <b>100</b> may process or perform the one or more pre-coded functions. For example, pre-coded function &#x201c;generate configuration&#x201d; may comprise one or more pre-coded sub-functions to inform system <b>100</b> which types of metadata to include in the one or more configuration files, e.g., an x-axis, a y-axis, type of graph, title of graph, area of graph, colors of graph, etc.</p><p id="p-0044" num="0043">In block <b>430</b>, the system (e.g., system <b>100</b>) may receive a first user input selecting a first graphical representation as a criteria for displaying the one or more data sets. For example, a user may operate a computing device (e.g., computing device <b>120</b>) and may select a type of graphical representation via, e.g., a dropdown selector provided on a GUI of computing device <b>120</b>. The user may select from among many types of graphical representations, such as a bar graph, a line graph, a scatter plot, a chart, a pie chart, a dot plot, a histogram, or the like. Each of the types of graphical representations provides a means of visualizing the one or more data sets.</p><p id="p-0045" num="0044">In block <b>440</b>, the system (e.g., system <b>100</b>) may retrieve, based on the first user input, a first template of the plurality of processing templates. That is, without having to perform or undergo any code change, system <b>100</b> may determine which template, i.e., which grouping of one or more pre-coded functions and sub-functions, will enable system <b>100</b> to most accurately process the one or more data sets and provide for visualization of the one or more data sets based on the user's selected first graphical representation criteria by looking to the previously defined processing template index. For example, if a user selects a line graph as the first graphical representation, system <b>100</b> may determine that a first template best corresponds to processing and displaying the one or more data sets as a line graph, and may automatically retrieve the first template based on that determination.</p><p id="p-0046" num="0045">In block <b>450</b>, the system (e.g., system <b>100</b>) may process the one or more data sets by utilizing the first template. That is, system <b>100</b> may process the one or more data sets according to the one or more pre-coded functions and sub-functions included in the first template.</p><p id="p-0047" num="0046">In block <b>460</b>, the system (e.g., system <b>100</b>) may generate one or more data files corresponding to the one or more processed data sets. The one or more data files may comprise one or more comma-separated values (CSV) files for storing the one or more processed data sets. The one or more data files may also comprise one or more configuration files, e.g., a .json file, for storing metadata associated with the one or more processed data sets. For example, a configuration file may contain metadata such as an x-axis, a y-axis, type of graph, title of graph, area of graph, colors of graph, etc. The one or more data files may also comprise one or more directory files, e.g., a .json file, used for performing logical grouping of the one or more processed data sets. That is, the one or more directory files may enable system <b>100</b> to logically group the one or more data sets according to type of graphical representation.</p><p id="p-0048" num="0047">In block <b>470</b>, the system (e.g., system <b>100</b>) may cause a computing device (e.g., computing device <b>120</b>) to display, e.g., via a GUI, the one or more processed data sets as the first graphical representation based on the one or more data files. That is, system <b>100</b> may transmit the one or more data files, containing the one or more processed data sets, metadata corresponding to the one or more processed data sets, and the one or more directory files associated with the one or more processed data sets, to computing device <b>120</b> via, e.g., an application programming interface (API). Computing device <b>120</b> may then display the one or more processed data sets via a user interface as the first graphical representation.</p><p id="p-0049" num="0048">In block <b>480</b>, the system (e.g., system <b>100</b>) may retrieve one or more updated data files corresponding to the one or more processed data sets. That is, system <b>100</b> may recognize that the one or more data sets have been modified and/or that additional data has been added to the one or more data sets. Without having to perform or undergo any code change, system <b>100</b> may automatically retrieve one or more updated data files, and re-process the one or more data sets by utilizing the first template but based on the one or more updated data files.</p><p id="p-0050" num="0049">In block <b>490</b>, the system (e.g., system <b>100</b>) may cause a computing device (e.g., computing device <b>120</b>) to display, e.g., via a GUI, the one or more processed data sets as a second graphical representation based on the one or more updated data files. That is, system <b>100</b> may transmit the one or more updated data files, containing one or more modifications to the one or more processed data sets, the metadata corresponding to the one or more processed data sets, and/or the one or more directory files associated with the one or more processed data sets, to computing device <b>120</b> via an API. Computing device <b>120</b> may then display the one or more processed data sets as a second graphical representation based on the one or more updated data files.</p><p id="p-0051" num="0050">In some embodiments, the second graphical representation may be an updated version of the first graphical representation which replaces the first graphical representation via the GUI. That is, both the first and second graphical representations may be, e.g., bar graphs, yet the second graphical representation is an updated or refreshed version of the first graphical representation. In some embodiments, as soon as system <b>100</b> receives new data, system <b>100</b> may automatically transmit the new data to computing device <b>120</b> to cause computing device <b>120</b> to automatically refresh or update the first graphical representation as the second graphical representation via the GUI. This dynamic process may occur many times with a third graphical representation replacing the second graphical representation and a fourth graphical representation replacing a third graphical representation, and so on. In some embodiments, a user may wish to have computing device <b>120</b> display the one or more processed data sets, based on the one or more updated files, as a second graphical representation different from the first graphical representation. That is, the first graphical representation may be, e.g., a bar graph, and the second graphical representation may be, e.g., a scatter plot. In that case, system <b>100</b> may re-process the one or more data sets based on the one or more updated data files yet by utilizing a second template different from the first template. That is, system <b>100</b> may automatically recognize that a second template is required for re-processing the one or more data sets according to a different one or more pre-coded functions (and sub-functions) located in the second template, to display the one or more data sets as the second graphical representation.</p><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a flowchart of a method <b>500</b> for performing template-based data processing and visualization. Method <b>500</b> may also be performed by the data visualization system <b>110</b> and/or the computing device <b>120</b> of the system <b>100</b>. Method <b>500</b> is similar to method <b>400</b> except that method <b>500</b> involves first displaying one or more data sets as a default graphical representation, prior to receiving any user input for selection of a second or different graphical representation. This embodiment provides the added benefit of providing a user with a starting point for how data may be best visualized through a graphical form; however, also enables the user to choose whether to stick with the default form, or switch to another. And similar to method <b>400</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, method <b>500</b> may also be performed without the user or the system itself having to make any code changes during either the processing or visualization steps.</p><p id="p-0053" num="0052">In block <b>510</b>, the system (e.g., system <b>100</b>) may receive one or more data sets, as previously described in block <b>410</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0054" num="0053">In block <b>520</b>, the system (e.g., system <b>100</b>) may generate a plurality of processing templates, wherein each of the plurality of processing templates comprising one or more pre-coded functions, as previously described in block <b>420</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0055" num="0054">In block <b>530</b>, the system (e.g., system <b>100</b>) may retrieve a first template of the plurality of processing templates, wherein the first template comprises a default graphical representation for displaying the one or more data sets. The default graphical representation may be any type of graphical representation, such as a bar graph, a line graph, a scatter plot, a chart, a pie chart, a dot plot, a histogram, or the like. Each of the types of graphical representations provides a means of visualizing the one or more data sets.</p><p id="p-0056" num="0055">In block <b>540</b>, the system (e.g., system <b>100</b>) may process the one or more data sets by utilizing the first template, as previously discussed in block <b>450</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0057" num="0056">In block <b>550</b>, the system (e.g., system <b>100</b>) may cause a computing device (e.g., computing device <b>120</b>) to display, e.g., via a GUI, the one or more data sets as the default graphical representation. That is, absent any user input, system <b>100</b> may automatically transmit the one or more data sets to computing device <b>120</b> via, e.g., an API, such that computing device <b>120</b> may then display the one or more data sets as the default graphical representation.</p><p id="p-0058" num="0057">In block <b>560</b>, the system (e.g., system <b>100</b>) may receive a first user input selecting a second graphical representation as a criteria for displaying the one or more data sets. Similar to block <b>430</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a user may operate a computing device (e.g., computing device <b>120</b>) and may select a type of graphical representation via, e.g., a dropdown selector provided on a GUI of computing device <b>120</b>. The user may select from among many types of graphical representations, such as a bar graph, a line graph, a scatter plot, a chart, a pie chart, a dot plot, a histogram, or the like. Each of the types of graphical representations provides a means of visualizing the one or more data sets. In some embodiments, the second graphical representation may be a different type of graphical representation from the default graphical representation, such that the user may visualize the one or more data sets in multiple ways.</p><p id="p-0059" num="0058">In block <b>570</b>, the system (e.g., system <b>100</b>) may retrieve, based on the first user input, a second template of the plurality of processing templates, as previously discussed in block <b>440</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In block <b>570</b>, system <b>100</b>, without having to perform or undergo any code change, may determine a second template as including the one or more pre-coded functions and sub-functions to enable system <b>100</b> to most accurately process the one or more data sets and provide for visualization of the one or more data sets based on the user's selected second graphical representation criteria. For example, if a user selects a pie chart as the second graphical representation, system <b>100</b> may determine that a second template best corresponds to processing and displaying the one or more data sets as a pie chart, and may automatically retrieve the second template based on that determination.</p><p id="p-0060" num="0059">In block <b>580</b>, the system (e.g., system <b>100</b>) may process the one or more data sets by utilizing the second template, as previously described with respect to the first template utilized in block <b>450</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In block <b>580</b>, however, the second template may be different from the first template, such that the second template better helps to inform system <b>100</b> how to process the one or more data sets for display as the second graphical representation. That is, system <b>100</b> may automatically recognize that a second template is required for processing the one or more data sets according to a different one or more pre-coded functions (and sub-functions) located in the second template, to display the one or more data sets as a second graphical representation.</p><p id="p-0061" num="0060">In block <b>590</b>, the system (e.g., system <b>100</b>) may cause the computing device (e.g., computing device <b>120</b>) to display, e.g., via a GUI, the one or more data sets as the second graphical representation. That is, system <b>100</b> may automatically transmit the one or more data sets to computing device <b>120</b> via, e.g., an API, such that computing device <b>120</b> may then display the one or more data sets as the second graphical representation, replacing the default graphical representation.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a flowchart of a method <b>600</b> for performing template-based data processing and visualization. Method <b>600</b> may also be performed by the data visualization system <b>110</b> and/or the computing device <b>120</b> of the system <b>100</b>. Method <b>600</b> is similar to method <b>400</b> except that method <b>600</b> involves receiving a second user input for selection of a second or different graphical representation for displaying one or more data sets after first receiving a first user input for selection of a first graphical representation for displaying the one or more data sets. This embodiment provides the added benefit of allowing a user to easily switch between graphical representation types such that the user may visualize the data in different ways. And similar to method <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> and method <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the user can make these switches efficiently without the user or the system itself needing to make any code changes during either the processing or visualization steps.</p><p id="p-0063" num="0062">In block <b>610</b>, the system (e.g., system <b>100</b>) may receive one or more data sets, as previously described in block <b>410</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0064" num="0063">In block <b>620</b>, the system (e.g., system <b>100</b>) may generate a plurality of processing templates, wherein each of the plurality of processing templates corresponds to a type of graphical representation for displaying data. That is, each template helps to inform system <b>100</b> how to accurately and efficiently process one or more data sets to enable a computing device to display the one or more data sets as a specific type of graphical representation. In some embodiments, as previously described with respect to block <b>420</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, each of the plurality of processing templates may comprise one or more pre-coded functions, each helping to inform system <b>100</b> how to process one or more data sets. In some embodiments, as previously described, the one or more pre-coded functions may also comprise one or more pre-coded sub-functions that help to further define each of the one or more pre-coded functions.</p><p id="p-0065" num="0064">In block <b>630</b>, the system (e.g., system <b>100</b>) may receive a first user input selecting a first graphical representation as a criteria for displaying the one or more data sets, as previously described in block <b>430</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0066" num="0065">In block <b>640</b>, the system (e.g., system <b>100</b>) may process the one or more data sets by utilizing a first template of the plurality of processing templates, as previously described in block <b>450</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In utilizing the first template, system <b>100</b> may determine that the first template enables system <b>100</b> to most accurately process the one or more data sets and provide for visualization of the one or more data sets based on the user's selected first graphical representation criteria.</p><p id="p-0067" num="0066">In block <b>650</b>, the system (e.g., system <b>100</b>) may cause a computing device (e.g., computing device <b>120</b>) to display, e.g., via a GUI, the one or more data sets as the first graphical representation. That is, system <b>100</b> may automatically transmit the one or more data sets to computing device <b>120</b> via, e.g., an API, such that computing device <b>120</b> may then display the one or more data sets as the first graphical representation.</p><p id="p-0068" num="0067">In block <b>660</b>, the system (e.g., system <b>100</b>) may receive a second user input selecting a second graphical representation as a criteria for displaying the one or more data sets, as previously described with respect to the first user input in block <b>430</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The difference in block <b>660</b>, however, is that system <b>100</b> may now receive a second user input, separate from the prior received first user input. Like the first user input, the second user input may comprise a user operating a computing device (e.g., computing device <b>120</b>); however, the user this time may select a second type of graphical representation via, e.g., a dropdown selector provided on a GUI of computing device <b>120</b>. The user may select from among many types of graphical representations, such as a bar graph, a line graph, a scatter plot, a chart, a pie chart, a dot plot, a histogram, or the like. In some embodiments, the second graphical representation may be different from the first graphical representation. For example, if the first user input selected a bar graph for displaying the one or more data sets, the second user input may select a scatter plot for displaying the one or more data sets.</p><p id="p-0069" num="0068">In block <b>670</b>, the system (e.g., system <b>100</b>) may process the one or more data sets by utilizing a second template of the plurality of processing templates, as previously described with respect to the first template utilized in block <b>450</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In block <b>670</b>, however, the second template may be different from the first template. That is, in utilizing the second template, system <b>100</b> may determine that the second template enables system <b>100</b> to most accurately process the one or more data sets and provide for visualization of the one or more data sets based on the user's selected second graphical representation criteria.</p><p id="p-0070" num="0069">In block <b>680</b>, the system (e.g., system <b>100</b>) may cause a computing device (e.g., computing device <b>120</b>) to display, e.g., via a GUI, the one or more data sets as the second graphical representation. That is, system <b>100</b> may automatically transmit the one or more data sets to computing device <b>120</b> via, e.g., an API, such that computing device <b>120</b> may then display the one or more data sets as the second graphical representation, replacing the previously selected first graphical representation. As previously described, in some embodiments, the second graphical representation may be different from the first graphical representation such that the user may visualize the one or more data sets in different graphical forms.</p><p id="p-0071" num="0070">As used in this application, the terms &#x201c;component,&#x201d; &#x201c;module,&#x201d; &#x201c;system,&#x201d; &#x201c;server,&#x201d; &#x201c;processor,&#x201d; &#x201c;memory,&#x201d; and the like are intended to include one or more computer-related units, such as but not limited to hardware, firmware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, an object, an executable, a thread of execution, a program, and/or a computer. By way of illustration, both an application running on a computing device and the computing device can be a component. One or more components can reside within a process and/or thread of execution and a component may be localized on one computer and/or distributed between two or more computers. In addition, these components can execute from various computer readable media having various data structures stored thereon. The components may communicate by way of local and/or remote processes such as in accordance with a signal having one or more data packets, such as data from one component interacting with another component in a local system, distributed system, and/or across a network such as the Internet with other systems by way of the signal.</p><p id="p-0072" num="0071">Certain embodiments and implementations of the disclosed technology are described above with reference to block and flow diagrams of systems and methods and/or computer program products according to example embodiments or implementations of the disclosed technology. It will be understood that one or more blocks of the block diagrams and flow diagrams, and combinations of blocks in the block diagrams and flow diagrams, respectively, can be implemented by computer-executable program instructions. Likewise, some blocks of the block diagrams and flow diagrams may not necessarily need to be performed in the order presented, may be repeated, or may not necessarily need to be performed at all, according to some embodiments or implementations of the disclosed technology.</p><p id="p-0073" num="0072">These computer-executable program instructions may be loaded onto a general-purpose computer, a special-purpose computer, a processor, or other programmable data processing apparatus to produce a particular machine, such that the instructions that execute on the computer, processor, or other programmable data processing apparatus create means for implementing one or more functions specified in the flow diagram block or blocks. These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means that implement one or more functions specified in the flow diagram block or blocks.</p><p id="p-0074" num="0073">As an example, embodiments or implementations of the disclosed technology may provide for a computer program product, including a computer-usable medium having a computer-readable program code or program instructions embodied therein, said computer-readable program code adapted to be executed to implement one or more functions specified in the flow diagram block or blocks. Likewise, the computer program instructions may be loaded onto a computer or other programmable data processing apparatus to cause a series of operational elements or steps to be performed on the computer or other programmable apparatus to produce a computer-implemented process such that the instructions that execute on the computer or other programmable apparatus provide elements or steps for implementing the functions specified in the flow diagram block or blocks.</p><p id="p-0075" num="0074">Accordingly, blocks of the block diagrams and flow diagrams support combinations of means for performing the specified functions, combinations of elements or steps for performing the specified functions, and program instruction means for performing the specified functions. It will also be understood that each block of the block diagrams and flow diagrams, and combinations of blocks in the block diagrams and flow diagrams, can be implemented by special-purpose, hardware-based computer systems that perform the specified functions, elements or steps, or combinations of special-purpose hardware and computer instructions.</p><p id="p-0076" num="0075">Certain implementations of the disclosed technology are described above with reference to user devices that may include mobile computing devices. Those skilled in the art will recognize that there are several categories of mobile devices, generally known as portable computing devices that can run on batteries but are not usually classified as laptops. For example, mobile devices can include, but are not limited to portable computers, tablet PCs, internet tablets, PDAs, ultra-mobile PCs (UMPCs), wearable devices, and smart phones. Additionally, implementations of the disclosed technology can be utilized with internet of things (IoT) devices, smart televisions and media devices, appliances, automobiles, toys, and voice command devices, along with peripherals that interface with these devices.</p><p id="p-0077" num="0076">In this description, numerous specific details have been set forth. It is to be understood, however, that implementations of the disclosed technology may be practiced without these specific details. In other instances, well-known methods, structures and techniques have not been shown in detail in order not to obscure an understanding of this description. References to &#x201c;one embodiment,&#x201d; &#x201c;an embodiment,&#x201d; &#x201c;some embodiments,&#x201d; &#x201c;example embodiment,&#x201d; &#x201c;various embodiments,&#x201d; &#x201c;one implementation,&#x201d; &#x201c;an implementation,&#x201d; &#x201c;example implementation,&#x201d; &#x201c;various implementations,&#x201d; &#x201c;some implementations,&#x201d; etc., indicate that the implementation(s) of the disclosed technology so described may include a particular feature, structure, or characteristic, but not every implementation necessarily includes the particular feature, structure, or characteristic. Further, repeated use of the phrase &#x201c;in one implementation&#x201d; does not necessarily refer to the same implementation, although it may.</p><p id="p-0078" num="0077">Throughout the specification and the claims, the following terms take at least the meanings explicitly associated herein, unless the context clearly dictates otherwise. The term &#x201c;connected&#x201d; means that one function, feature, structure, or characteristic is directly joined to or in communication with another function, feature, structure, or characteristic. The term &#x201c;coupled&#x201d; means that one function, feature, structure, or characteristic is directly or indirectly joined to or in communication with another function, feature, structure, or characteristic. The term &#x201c;or&#x201d; is intended to mean an inclusive &#x201c;or.&#x201d; Further, the terms &#x201c;a,&#x201d; &#x201c;an,&#x201d; and &#x201c;the&#x201d; are intended to mean one or more unless specified otherwise or clear from the context to be directed to a singular form. By &#x201c;comprising&#x201d; or &#x201c;containing&#x201d; or &#x201c;including&#x201d; is meant that at least the named element, or method step is present in article or method, but does not exclude the presence of other elements or method steps, even if the other such elements or method steps have the same function as what is named.</p><p id="p-0079" num="0078">As used herein, unless otherwise specified the use of the ordinal adjectives &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; etc., to describe a common object, merely indicate that different instances of like objects are being referred to, and are not intended to imply that the objects so described must be in a given sequence, either temporally, spatially, in ranking, or in any other manner.</p><p id="p-0080" num="0079">While certain embodiments of this disclosure have been described in connection with what is presently considered to be the most practical and various embodiments, it is to be understood that this disclosure is not to be limited to the disclosed embodiments, but on the contrary, is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims. Although specific terms are employed herein, they are used in a generic and descriptive sense only and not for purposes of limitation.</p><p id="p-0081" num="0080">This written description uses examples to disclose certain embodiments of the technology and also to enable any person skilled in the art to practice certain embodiments of this technology, including making and using any apparatuses or systems and performing any incorporated methods. The patentable scope of certain embodiments of the technology is defined in the claims, and may include other examples that occur to those skilled in the art. Such other examples are intended to be within the scope of the claims if they have structural elements that do not differ from the literal language of the claims, or if they include equivalent structural elements with insubstantial differences from the literal language of the claims.</p><heading id="h-0006" level="1">Example Use Cases</heading><p id="p-0082" num="0081">The following example use cases describe examples of a typical user flow pattern. They are intended solely for explanatory purposes and not in limitation.</p><p id="p-0083" num="0082">In one example, a system may receive one or more sets of data. The system may first code and generate a set of templates, each template including a set of functions for processing the data. For example, one template may include the functions of aggregate, combine versions, combine evaluations, generate configuration, plot directory, select columns, split data, generate subset rows, and calculate weighted average. Each of these functions may also include one or more sub-functions for additional processing of the data within each function. Once a set of templates is generated, a user may access the system to visualize the data, i.e., to view the data as a graphical representation. For example, a user may use a computing device, e.g., a mobile phone, to access a mobile application. Through the application, the user may select a type of graphical representation, e.g., a bar graph, for displaying the data. Once the user has selected the bar graph via, for example, a dropdown selector displayed on a GUI of the mobile phone, the system may receive the user selection and may retrieve a first template appropriate for processing the data and displaying the data as a bar graph. The system may then process the data according to the series of functions and sub-functions coded in the first template. Once the system has processed the data, it may generate a set of files, e.g., a data file for storing the processed data, and a configuration file for storing the metadata associated with the processed data. The system may then cause the mobile phone to display, e.g., via a GUI, the processed data in the form of a bar graph based on the generated set of files. The system may then recognize that there have been one or more modifications and/or additions made to the data, such as the addition of or changes to specific data points. The system may then automatically retrieve a set of updated data files corresponding to the data, and may cause the mobile phone to display, via the GUI, the processed data as an updated version of the bar graph based on the updated data files.</p><p id="p-0084" num="0083">In another example, a system may receive one or more sets of loan application data including, e.g., tax, income, and bankruptcy data. The system may first code and generate a set of templates, each template including a set of functions for processing the loan application data. For example, one template may include the functions of aggregate, combine versions, combine evaluations, generate configuration, plot directory, post-process, select columns, and split data. Each of these functions may also include one or more sub-functions for additional processing of the loan application data within each function. Once a set of templates is generated, the system may retrieve a first template appropriate for processing the loan application data and displaying the data as a default graphical representation, e.g., a line graph. The system may then process the data according to the series of functions and sub-functions coded in the first template. The system may cause a computing device, e.g., a laptop, to display, e.g., via a GUI, the loan application data as a line graph. The system may then receive a user selection, e.g., via a dropdown selector displayed on the GUI of the laptop, for displaying the data as a graphical representation different from the default graphical representation, e.g., as a pie chart. The system may then retrieve a second template appropriate for processing the data and displaying the data as a pie chart. The system may then cause the laptop to display, via the GUI, the loan application data as a pie chart instead of as a line graph.</p><p id="p-0085" num="0084">In another example, a system may receive one or more sets of financial data. The system may first code and generate a set of templates, each template including a set of functions for processing the set of financial data. For example, one template may include the functions select columns, combine columns, aggregate, calculate weighted average, filter, transpose, and output. Each of these functions may also include one or more sub-functions for additional processing of the financial data within each function. Once a set of templates is generated, a user may access the system to visualize the data, i.e., to view the data as a graphical representation. For example, a user may use a computing device, e.g., a tablet, to access a financial application. Through the financial application, the user may select a first graphical representation, e.g., a scatter plot, for displaying the data. Once the user has selected the scatter plot via, e.g., a dropdown selector displayed on a GUI of the tablet, the system may receive the user selection and may process the data according to the series of functions and sub-functions coded in a first template. The system may cause the tablet to display, e.g., via a GUI, the financial data as a scatter plot. The system may then receive a second user selection to display the financial data as a second graphical representation different from the first graphical representation, e.g., a bar graph. The system may process the data according to the series of functions and sub-functions coded in a second template. The system may then cause the tablet to display, via the GUI, the financial data as a bar graph instead of as a scatter plot.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system for template-based data visualization, comprising:<claim-text>one or more processors; and</claim-text><claim-text>a memory in communication with the one or more processors and storing instructions that, when executed by the one or more processors, are configured to cause the system to:<claim-text>receive one or more data sets;</claim-text><claim-text>generate a plurality of processing templates, wherein each of the plurality of processing templates comprising a plurality of pre-coded functions;</claim-text><claim-text>receive a first user input selecting a first graphical representation for displaying the one or more data sets;</claim-text><claim-text>determine a respective accuracy level for each of the plurality of processing templates, the respective accuracy level based on the plurality of pre-coded functions;</claim-text><claim-text>retrieve, based on the first user input, a first template of the plurality of processing templates, wherein the first template corresponds to a highest respective accuracy level of the plurality of processing templates;</claim-text><claim-text>process the one or more data sets by utilizing the first template;</claim-text><claim-text>generate one or more data files corresponding to the one or more processed data sets,<claim-text>wherein at least one pre-coded function associated with the first template comprises instructions for including one or more types of metadata in the one or more data files, and</claim-text><claim-text>wherein the one or more types of metadata comprise an x-axis, a y-axis, a graph type, a graph title, a graph area, or combinations thereof;</claim-text></claim-text><claim-text>cause a computing device to display, via a graphical user interface (GUI), the one or more processed data sets as the first graphical representation based on the one or more data files;</claim-text><claim-text>retrieve one or more updated data files corresponding to the one or more processed data sets; and</claim-text><claim-text>cause the computing device to display, via the GUI, the one or more processed data sets as a second graphical representation based on the one or more updated data files.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein retrieving the one or more updated data files is based on a request to update the first graphical representation.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second graphical representation is an updated version of the first graphical representation which replaces the first graphical representation via the GUI.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of pre-coded functions comprise aggregate, combine versions, combine values, select columns, combine columns, generate configuration, plot directory, pre-process, post-process, select source, split data, create subset rows, calculate weighted average, filter, transpose, output, or combinations thereof.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the pre-coded functions comprises one or more pre-coded sub-functions.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first graphical representation comprises a bar graph, a line graph, a scatter plot, a chart, a pie chart, a dot plot, or a histogram.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more data files comprise a comma-separated values file comprising the one or more processed data sets.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the one or more data files further comprise a directory file to enable grouping of the one or more processed data sets.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A system for template-based data visualization, comprising:<claim-text>one or more processors; and</claim-text><claim-text>a memory in communication with the one or more processors and storing instructions that, when executed by the one or more processors, are configured to cause the system to:<claim-text>receive one or more data sets;</claim-text><claim-text>generate a plurality of processing templates, wherein each of the plurality of processing templates comprising a plurality of pre-coded functions;</claim-text><claim-text>retrieve a first template of the plurality of processing templates, wherein the first template comprises a default graphical representation for displaying the one or more data sets;</claim-text><claim-text>process the one or more data sets by utilizing the first template;</claim-text><claim-text>cause a computing device to display, via a GUI, the one or more data sets as the default graphical representation;</claim-text><claim-text>receive a first user input selecting a second graphical representation for displaying the one or more data sets;</claim-text><claim-text>determine a respective accuracy level for each of the plurality of processing templates;</claim-text><claim-text>retrieve, based on the first user input, a second template of the plurality of processing templates, wherein the second template corresponds to a highest respective accuracy level of the plurality of processing templates;</claim-text><claim-text>process the one or more data sets by utilizing the second template,<claim-text>wherein at least one pre-coded function associated with the second template comprises instructions for including one or more types of metadata in the second graphical representation, and</claim-text><claim-text>wherein the one or more types of metadata comprise an x-axis, a y-axis, a graph type, a graph title, a graph area, or combinations thereof; and</claim-text></claim-text><claim-text>cause the computing device to display, via the GUI, the one or more data sets as the second graphical representation.</claim-text></claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein no code change is required by the system to process the one or more data sets by utilizing the second template or to cause the computing device to display the one or more data sets as the second graphical representation.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the second graphical representation replaces the default graphical representation via the GUI.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the instructions are further configured to cause the system to:<claim-text>retrieve one or more updated data files corresponding to the one or more data sets; and</claim-text><claim-text>cause the computing device to display, via the GUI, the one or more data sets as the second graphical representation based on the one or more updated data files.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the default graphical representation comprises a bar graph, a line graph, a scatter plot, a chart, a pie chart, a dot plot, or a histogram.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the second graphical representation comprises a bar graph, a line graph, a scatter plot, a chart, a pie chart, a dot plot, or a histogram.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the second graphical representation is different from the default graphical representation.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A non-transitory computer readable medium having stored thereon instructions that when executed by one or more processors cause the one or more processors to:<claim-text>receive one or more data sets;</claim-text><claim-text>generate a plurality of processing templates, wherein each of the plurality of processing templates comprising a plurality of pre-coded functions;</claim-text><claim-text>receive a first user input selecting a first graphical representation for displaying the one or more data sets;</claim-text><claim-text>determine, based on the first user input, a first respective accuracy level for each of the plurality of processing templates;</claim-text><claim-text>process the one or more data sets by utilizing a first template of the plurality of processing templates,<claim-text>wherein the first template corresponds to a highest first respective accuracy level of the plurality of processing templates, and</claim-text><claim-text>wherein at least one pre-coded function associated with the first template comprises first instructions for including one or more first types of metadata in the first graphical representation;</claim-text></claim-text><claim-text>cause a computing device to display, via a GUI, the one or more data sets as the first graphical representation;</claim-text><claim-text>receive a second user input selecting a second graphical representation for displaying the one or more data sets;</claim-text><claim-text>determine, based on the second user input, a second respective accuracy level for each of the plurality of processing templates;</claim-text><claim-text>process the one or more data sets by utilizing a second template of the plurality of processing templates,<claim-text>wherein the second template corresponds to a highest second respective accuracy level, and</claim-text><claim-text>wherein at least one pre-coded function associated with the second template comprises second instructions for including one or more second types of metadata in the second graphical representation; and</claim-text></claim-text><claim-text>cause the computing device to display, via the GUI, the one or more data sets as the second graphical representation.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the second graphical representation replaces the first graphical representation via the GUI.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. (canceled)</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the instructions further cause the one or more processors to:<claim-text>retrieve one or more updated data files corresponding to the one or more data sets; and</claim-text><claim-text>cause the computing device to display, via the GUI, the one or more data sets as the second graphical representation based on the one or more updated data files.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein no code change is required to process the one or more data sets by utilizing the first template or the second template, or to cause the computing device to display the one or more data sets as the first graphical representation or the second graphical representation.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining the respective accuracy level comprises evaluating a template index to determine how accurately each of the plurality of processing templates may process the one or more data sets and display the one or more data sets as the first graphical representation.</claim-text></claim></claims></us-patent-application>