<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004661A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004661</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17305136</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>60</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>58</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>10</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>606</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>582</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>10</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2221</main-group><subgroup>2149</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0869</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEMS AND METHODS FOR SECURE RANDOM NUMBER GENERATION</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Verizon Patent and Licensing Inc.</orgname><address><city>Basking Ridge</city><state>NJ</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>CHOI</last-name><first-name>Young Rak</first-name><address><city>Belle Mead</city><state>NJ</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>CACERES</last-name><first-name>Manuel Enrique</first-name><address><city>Basking Ridge</city><state>NJ</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>UY</last-name><first-name>Warren Hojilla</first-name><address><city>Randolph</city><state>NJ</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>HE</last-name><first-name>Dayong</first-name><address><city>Bridgewater</city><state>NJ</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Verizon Patent and Licensing Inc.</orgname><role>02</role><address><city>Basking Ridge</city><state>NJ</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">In some implementations, a device may receive, at an operating system, a request for a random number from an application. The device may provide a command to generate an entropy input, based on the request for the random number and through a driver that is isolated from the operating system, to a quantum random number generator that is isolated from one or more processors hosting the operating system. Accordingly, the device may receive the entropy input, from the quantum random number generator, using the driver, and may generate the random number based at least in part on the entropy input. The device may provide the random number to the application.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="122.85mm" wi="158.75mm" file="US20230004661A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="220.98mm" wi="172.30mm" orientation="landscape" file="US20230004661A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="220.98mm" wi="172.30mm" orientation="landscape" file="US20230004661A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="220.98mm" wi="172.30mm" orientation="landscape" file="US20230004661A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="220.98mm" wi="172.30mm" orientation="landscape" file="US20230004661A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="227.33mm" wi="172.30mm" orientation="landscape" file="US20230004661A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="227.33mm" wi="172.30mm" orientation="landscape" file="US20230004661A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="227.33mm" wi="172.30mm" orientation="landscape" file="US20230004661A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="227.33mm" wi="172.30mm" orientation="landscape" file="US20230004661A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="214.97mm" wi="172.38mm" orientation="landscape" file="US20230004661A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="166.62mm" wi="172.30mm" orientation="landscape" file="US20230004661A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="224.62mm" wi="172.30mm" orientation="landscape" file="US20230004661A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="173.65mm" wi="172.30mm" orientation="landscape" file="US20230004661A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">Random numbers are used for many operations in computing. For example, random numbers may be used to generate keys and initialize vectors (e.g., for symmetric or asymmetric encryption), generate unique identifiers (e.g., session IDs or process thread IDs), initialize Monte Carlo simulations, or determine initial states for machine learning models, among other examples. To improve security (e.g., for encryption) and/or accuracy (e.g., for modelling), random numbers with high entropy are preferred to random numbers with low entropy.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0003" num="0002"><figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>H</figref> are diagrams of examples associated with secure random number generation.</p><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram of an example quantum random number generator.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram of an example environment in which systems and/or methods described herein may be implemented.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram of example components of one or more devices of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart of an example process relating to secure random number generation.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS</heading><p id="p-0008" num="0007">The following detailed description of example implementations refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.</p><p id="p-0009" num="0008">Mobile devices often use randomly generated numbers to generate encryption keys and initialization vectors for encryption. However, when the numbers are pseudo-randomly generated by algorithm and thus with low entropy, data that is subsequently encrypted may be subject to attack. For example, if an attacker gains access to a high-level operating system of the mobile device, the attacker may determine which pseudo-random number algorithm was used, predict encryption keys and initialization vectors, and decrypt the data accordingly. To combat these risks, mobile devices may include a quantum random number generator instead, which can be used to generate high entropy random numbers for encryption. However, the quantum random number generator is usually directly interfaced with a host processor of the mobile device. This allows an attacker to intercept an entropy input output by the quantum random number generator by gaining access to the driver that interfaces with the quantum random number generator. Additionally, the entropy input from the quantum random number generator may be used to seed a deterministic random bit generator (DRBG) or other pseudo-random number generator; however, this DRBG is usually executed within an environment of the high-level operating system, which is not secured against attackers. Accordingly, an attacker may intercept the output from the DRBG, which again allows for decryption of the data.</p><p id="p-0010" num="0009">Some implementations described herein provide a secure operating system that interfaces with a quantum random number generator using a secure driver. In some implementations, a pseudo-random number generator may additionally operate within an environment of the secure operating system and use the quantum random number generator to obtain an entropy input. Accordingly, the secure operating system may provide a random number to a high-level operating system without exposing the quantum random number generator to attackers (e.g., via a corresponding driver). Additionally, in some implementations, the pseudo-random number generator may be executed within the environment of the secure operating system to prevent exposure of the pseudo-random number generator to attackers.</p><p id="p-0011" num="0010">As an alternative, in some implementations, a Secure Element may interface with the quantum random number generator using the secure driver. Accordingly, both the high-level operating system and the secure operating system may obtain random numbers without exposing the quantum random number generator to attackers. Additionally, in some implementations, the pseudo-random number generator may be executed within the Secure Element to prevent exposure of the pseudo-random number generator to attackers.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> are diagrams of an example <b>100</b> associated with secure random number generation, and <figref idref="DRAWINGS">FIGS. <b>1</b>E-<b>1</b>H</figref> are diagrams of an example <b>150</b> associated with secure random number generation. As shown in <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>H</figref>, examples <b>100</b> and <b>150</b> each include a processor <b>101</b> and a quantum random number generator <b>103</b>. In some implementations, processor <b>101</b> and/or quantum random number generator <b>103</b> may be included in user device <b>310</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0013" num="0012">In example <b>100</b>, and as shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, the processor <b>101</b> may provide an execution environment for a secure operating system that provides a secure world <b>105</b> and a high-level operating system (HLOS) that provides a normal world <b>107</b>. The secure operating system may be implemented within a trusted execution environment (TEE) such that a security monitor (or other lower level of a chipset including the processor <b>101</b>) uses a private key embedded within the chipset in order to securely bootload the secure operating system. For example, the processor <b>101</b> may support a Platform Security Processor (PSP) developed by Advanced Micro Devices&#xae; (AMD&#xae;), TrustZone developed by ARM&#xae;, Trusted Execution Technology developed by Intel&#xae;, or another hardware technology that allows implementations of a TEE for the secure operating system. Additionally, the secure operating system may only allow applications that are signed by the private key such that applications with corresponding hash codes that are not approved by the secure operating system are not executed within the secure world <b>105</b>. Accordingly, the secure world <b>105</b> is protected from attackers. On the other hand, the HLOS may include a Windows&#xae;-based OS, an Android&#xae; OS, a Unix-based OS, iOS, or another operating system implemented within a standard execution environment that allows a user to install and execute more applications (e.g., in the normal world <b>107</b>) than would be allowed in a TEE.</p><p id="p-0014" num="0013">As further shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, the secure world <b>105</b> may be divided (e.g., logically and/or virtually) between a user space <b>105</b><i>a </i>and a kernel space <b>105</b><i>b</i>. The kernel space <b>105</b><i>b </i>may implement drivers and other lower-level software that interacts with the chipset and other hardware connected to the chipset (e.g., via buses). The user space <b>105</b><i>a </i>may provide an environment for applications and other higher-level software. Similarly, the normal world <b>107</b> may be divided between a user space <b>107</b><i>a </i>and a kernel space <b>107</b><i>b</i>. The kernel space <b>107</b><i>b </i>may implement drivers and other lower-level software that interacts with the chipset and other hardware connected to the chipset (e.g., via buses), and the user space <b>107</b><i>a </i>may provide an environment for applications and interaction with the user.</p><p id="p-0015" num="0014">In example <b>100</b>, applications executed on the processor <b>101</b> may request a random number (e.g., for encryption, ID generation, or model initiation). As shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, a request for a random number may be initiated by an application <b>109</b> executed within the user space <b>107</b><i>a </i>of the normal world <b>107</b>. For example, the application <b>109</b> may call an application programming interface (API) <b>111</b><i>a </i>provided by the HLOS that allows an application to request a random number. The API <b>111</b><i>a </i>may pass the request to, or otherwise call, an API <b>111</b><i>b </i>that is associated with the secure operating system. For example, the API <b>111</b><i>a </i>may be programmed to call the API <b>111</b><i>b </i>when the chipset includes the quantum random number generator <b>103</b> in order to obtain a random number using the quantum random number generator <b>103</b>. By not provisioning the API <b>111</b><i>b </i>directly to applications executed within the user space <b>107</b><i>a </i>of the normal world <b>107</b>, the HLOS protects the API <b>111</b><i>b </i>against denial-of-service (DoS) attacks from malicious software in the user space <b>107</b><i>a</i>, which would prevent applications from obtaining random numbers when needed. Additionally, the HLOS does not expose the existence of the quantum random number generator <b>103</b> to applications executed within the user space <b>107</b><i>a </i>of the normal world <b>107</b>, which prevents malicious software in the user space <b>107</b><i>a </i>from intelligently searching for and attempting to control the quantum random number generator <b>103</b>.</p><p id="p-0016" num="0015">As further shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, the API <b>111</b><i>b </i>may pass the request to a kernel <b>115</b> of the HLOS. For example, the API <b>111</b><i>b </i>may be associated with a driver <b>113</b> that was provisioned by the secure operating system to allow access to the user space <b>105</b><i>a </i>of the secure world <b>105</b> via the kernel <b>115</b> of the HLOS. In some implementations, as shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, the normal world <b>107</b> and the secure world <b>105</b> may be logically and/or virtually isolated on a same processor <b>101</b> such that the driver <b>113</b> is a virtual driver. Using the same processor <b>101</b> reduces latency in communications between the normal world <b>107</b> and the secure world <b>105</b>, which speeds up how quickly applications (such as application <b>109</b>) can obtain random numbers. Using the same processor <b>101</b> also reduces a size associated with the chipset. As an alternative, the normal world <b>107</b> and the secure world <b>105</b> may be physically isolated on different processors such that the driver <b>113</b> is a hardware driver. Using different processors renders the secure world <b>105</b> even less susceptible to attacks because any malicious software in the user space <b>107</b><i>a </i>or the kernel space <b>107</b><i>b </i>cannot physically access the secure world <b>105</b>.</p><p id="p-0017" num="0016">As further shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, the driver <b>113</b> may pass the request to an application <b>117</b><i>a </i>associated with processing requests for random numbers. The application <b>117</b><i>a </i>may be implemented in the user space <b>105</b><i>a </i>such that the driver <b>113</b> does not have access to the kernel space <b>105</b><i>b </i>of the secure world <b>105</b>. Accordingly, the secure world <b>105</b> is rendered less susceptible to attacks because any malicious software in the kernel space <b>107</b><i>b </i>of the normal world <b>107</b> cannot call or otherwise access functions in the kernel space <b>105</b><i>b </i>of the secure world <b>105</b>. As an alternative, in some implementations, the driver <b>113</b> may pass the request directly to the trusted operating system <b>121</b>, as described below. Allowing the driver <b>113</b> to pass the request directly to the trusted operating system <b>121</b> reduces latency in communications between the kernel <b>115</b> of the HLOS and the trusted operating system <b>121</b>, which speeds up how quickly applications (such as application <b>109</b>) can obtain random numbers.</p><p id="p-0018" num="0017">The application <b>117</b><i>a </i>may call an API <b>119</b> that allows a trusted application to request a random number. As further shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, the API <b>119</b> may pass the request to the trusted operating system <b>121</b>, which further passes the request to a trusted kernel <b>125</b> of the secure operating system. In some implementations, as shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, the trusted operating system <b>121</b> (e.g., including core functions and libraries that support the user space <b>105</b><i>a</i>) may be logically distinct from the trusted kernel <b>125</b> (e.g., including drivers and other software that interacts directly with the chipset and hardware connected to the chipset). Separating the trusted operating system <b>121</b> from the trusted kernel <b>125</b> further secures the hardware because, even if malicious software were to obtain control of the trusted operating system <b>121</b>, the malicious software cannot exercise control over the trusted kernel <b>125</b>. As an alternative, in some implementations, the trusted operating system <b>121</b> may be logically integrated with the trusted kernel <b>125</b> (e.g., similar to the integration of core functions and libraries for the HLOS with the kernel <b>115</b>). Integrating the trusted operating system <b>121</b> and the trusted kernel <b>125</b> reduces latency in communications between the trusted operating system <b>121</b> and the trusted kernel <b>125</b>, which speeds up how quickly applications (such as application <b>109</b>) can obtain random numbers.</p><p id="p-0019" num="0018">The API <b>119</b> may be associated with a driver <b>127</b> executed by the trusted kernel <b>125</b> to access the quantum random number generator <b>103</b> (which may be connected to the chipset including processor <b>101</b> via one or more buses). In some implementations, as shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, the API <b>119</b> may pass the request to the driver <b>127</b> via the trusted operating system <b>121</b> (e.g., using a function call provided by a library of the trusted operating system <b>121</b>). Passing the request through the trusted operating system <b>121</b> reduces latency in communications between the application <b>117</b><i>a </i>and the driver <b>127</b>, which speeds up how quickly applications (such as application <b>109</b>) can obtain random numbers. As an alternative, in some implementations, the API may pass the request to the driver <b>127</b> via the pseudo-random number generator <b>123</b>. Accordingly, the driver <b>127</b> may only be accessed via the pseudo-random number generator <b>123</b>, which further increases security because, even if malicious software were to obtain control of the trusted operating system <b>121</b>, the malicious software cannot access the driver <b>127</b>.</p><p id="p-0020" num="0019">The driver <b>127</b> may generate a hardware-level command based on the request and transmit the command (e.g., via a bus) to the quantum random number generator <b>103</b>. By isolating the quantum random number generator <b>103</b> from the chipset including the processor <b>101</b>, security is increased because malicious software on the chipset cannot directly access the quantum random number generator <b>103</b>. Additionally, by provisioning the driver <b>127</b> within the secure world <b>105</b>, security is increased because malicious software executing in the normal world <b>107</b> cannot directly obtain output from the quantum random number generator <b>103</b>.</p><p id="p-0021" num="0020">In response to the command from the driver <b>127</b>, and as shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>, the quantum random number generator <b>103</b> may generate an entropy input (e.g., as described in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>) and return the entropy input (e.g., via a bus) to the driver <b>127</b>. Accordingly, the trusted kernel <b>125</b> may pass the entropy input to the pseudo-random number generator <b>123</b> from the driver <b>127</b>. As shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>, the pseudo-random number generator <b>123</b> may use the entropy input in a DRBG algorithm such that the random number output by the DRBG algorithm has a length standardized to a use for which the application <b>109</b> requested the random number. For example, encryption keys may depend on random numbers of a preconfigured length, and model initiation may depend on a preconfigured quantity of weights or initial values, among other examples. By implementing the pseudo-random number generator <b>123</b> within the kernel space <b>105</b><i>b </i>of the secure world <b>105</b>, security is increased because malicious software executing in the normal world <b>107</b> and/or the user space <b>105</b><i>a </i>of the secure world <b>105</b> cannot access or control the pseudo-random number generator <b>123</b>. Accordingly, an attacker may be unable to determine an algorithm used by the pseudo-random number generator <b>123</b>, which would enable the attacker to predict an encryption key (or other variable) based on the random number if the attacker were able to obtain the entropy input. As an alternative, in some implementations, the entropy input may be used as the random number without applying the pseudo-random number generator <b>123</b>. Using the entropy input directly conserves processing resources and power at the processor <b>101</b>.</p><p id="p-0022" num="0021">In some implementations, and as shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>, the trusted kernel <b>125</b> may pass the entropy input directly to the pseudo-random number generator <b>123</b>. Accordingly, security is increased because, even if malicious software were to obtain control of the trusted operating system <b>121</b>, the malicious software cannot access the entropy input. As an alternative, in some implementations, the trusted kernel <b>125</b> may pass the entropy input to the pseudo-random number generator <b>123</b> by calling a function of a library within the trusted operating system <b>121</b> and/or by otherwise using the trusted operating system <b>121</b>. Using the trusted operating system <b>121</b> can reduce code complexity and conserve processing resources because the same function called by the API <b>119</b> can be used to return the output from the pseudo-random number generator <b>123</b> to the API <b>119</b>.</p><p id="p-0023" num="0022">After the output of the pseudo-random number generator <b>123</b>, which corresponds to the random number that fulfills the request from the application <b>109</b>, is passed back to the application <b>117</b><i>a </i>(e.g., via the API <b>119</b>), the application <b>117</b><i>a </i>forwards the random number to the kernel <b>115</b> of the HLOS via the driver <b>113</b>. Accordingly, the random number is returned to the application <b>109</b> (e.g., via the API <b>111</b><i>a </i>and/or the API <b>111</b><i>b</i>). The application <b>109</b> may therefore proceed with encryption, model initiation, or another use of the random number without exposing the quantum random number generator <b>103</b> and/or the pseudo-random number generator <b>123</b> to the normal world <b>107</b>. This prevents malicious software in the normal world <b>107</b> from obtaining the entropy input and/or the algorithm used by the pseudo-random number generator <b>123</b>, which would allow the malicious software to predict encryption keys, initialization vectors, or other variables based on the random number. Accordingly, files encrypted using the random number, and models trained based on the random number, among other examples, are secured from interference and/or theft by malicious actors.</p><p id="p-0024" num="0023">Applications executed within an environment of the secure world <b>105</b> may similarly request random numbers. For example, as shown in <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>, a request for a random number may be initiated by an application <b>117</b><i>b </i>executed within the user space <b>105</b><i>a </i>of the secure world <b>105</b>. For example, the application <b>117</b><i>b </i>may call the API <b>119</b> provided by the secure operating system that allows an application to request a random number. Allowing trusted applications to call the API <b>119</b> speeds up how quickly the trusted applications (such as application <b>117</b><i>b</i>) can obtain random numbers. As an alternative, in some implementations, the secure operating system may provision the API <b>119</b> only for the application <b>117</b><i>a</i>, such that the application <b>117</b><i>b </i>provides the request to the application <b>117</b><i>a</i>, and the application <b>117</b><i>a </i>calls the API <b>119</b>. Limiting access to the API <b>119</b> increases security because, on a rare chance that malicious software executes within the user space <b>105</b><i>a</i>, the malicious software cannot perform a DoS attack on, or otherwise access, the API <b>119</b>.</p><p id="p-0025" num="0024">As further shown in <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>, the API <b>119</b> may pass the request to the trusted operating system <b>121</b>, which further passes the request to a trusted kernel <b>125</b> of the secure operating system. In some implementations, as shown in <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>, the trusted operating system <b>121</b> (e.g., including core functions and libraries that support the user space <b>105</b><i>a</i>) may be logically distinct from the trusted kernel <b>125</b> (e.g., including drivers and other software that interacts directly with the chipset and hardware connected to the chipset). Separating the trusted operating system <b>121</b> from the trusted kernel <b>125</b> further secures the hardware because, even if malicious software were to obtain control of the trusted operating system <b>121</b>, the malicious software cannot exercise control over the trusted kernel <b>125</b>. As an alternative, in some implementations, the trusted operating system <b>121</b> may be logically integrated with the trusted kernel <b>125</b> (e.g., similar to the integration of core functions and libraries for the HLOS with the kernel <b>115</b>). Integrating the trusted operating system <b>121</b> and the trusted kernel <b>125</b> reduces latency in communications between the trusted operating system <b>121</b> and the trusted kernel <b>125</b>, which speeds up how quickly applications (such as application <b>117</b><i>b</i>) can obtain random numbers.</p><p id="p-0026" num="0025">The API <b>119</b> may be associated with a driver <b>127</b> executed by the trusted kernel <b>125</b> to access the quantum random number generator <b>103</b> (which may be connected to the chipset including processor <b>101</b> via one or more buses). In some implementations, as shown in <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>, the API <b>119</b> may pass the request to the driver <b>127</b> via the trusted operating system <b>121</b> (e.g., using a function call provided by a library of the trusted operating system <b>121</b>). Passing the request through the trusted operating system <b>121</b> reduces latency in communications between the application <b>117</b><i>b </i>and the driver <b>127</b>, which speeds up how quickly applications (such as application <b>117</b><i>b</i>) can obtain random numbers. As an alternative, in some implementations, the API may pass the request to the driver <b>127</b> via the pseudo-random number generator <b>123</b>. Accordingly, the driver <b>127</b> may only be accessed via the pseudo-random number generator <b>123</b>, which further increases security because, even if malicious software were to obtain control of the trusted operating system <b>121</b>, the malicious software cannot access the driver <b>127</b>.</p><p id="p-0027" num="0026">The driver <b>127</b> may generate a hardware-level command based on the request and transmit the command (e.g., via a bus) to the quantum random number generator <b>103</b>. By isolating the quantum random number generator <b>103</b> from the chipset including the processor <b>101</b>, security is increased because malicious software on the chipset cannot directly access the quantum random number generator <b>103</b>. Additionally, by provisioning the driver <b>127</b> within the secure world <b>105</b>, security is increased because, on a rare chance that malicious software executes within the user space <b>105</b><i>a</i>, the malicious software cannot directly obtain output from the quantum random number generator <b>103</b>.</p><p id="p-0028" num="0027">In response to the command from the driver <b>127</b>, and as shown in <figref idref="DRAWINGS">FIG. <b>1</b>D</figref>, the quantum random number generator <b>103</b> may generate an entropy input (e.g., as described in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>) and return the entropy input (e.g., via a bus) to the driver <b>127</b>. Accordingly, the trusted kernel <b>125</b> may pass the entropy input to the pseudo-random number generator <b>123</b> from the driver <b>127</b>. The pseudo-random number generator <b>123</b> may use the entropy input in a DRBG algorithm such that the random number output by the DRBG algorithm has a length standardized to a use for which the application <b>117</b><i>b </i>requested the random number. For example, encryption keys may depend on random numbers of a preconfigured length, and model initiation may depend on a preconfigured quantity of weights or initial values, among other examples. By implementing the pseudo-random number generator <b>123</b> within the kernel space <b>105</b><i>b </i>of the secure world <b>105</b>, security is increased because malicious software executing in the user space <b>105</b><i>a </i>of the secure world <b>105</b> cannot access or control the pseudo-random number generator <b>123</b>. Accordingly, an attacker may be unable to determine an algorithm used by the pseudo-random number generator <b>123</b>, which would enable the attacker to predict an encryption key (or other variable) based on the random number if the attacker were able to obtain the entropy input. As an alternative, in some implementations, the entropy input may be used as the random number without applying the pseudo-random number generator <b>123</b>. Using the entropy input directly conserves processing resources and power at the processor <b>101</b>.</p><p id="p-0029" num="0028">In some implementations, and as shown in <figref idref="DRAWINGS">FIG. <b>1</b>D</figref>, the trusted kernel <b>125</b> may pass the entropy input directly to the pseudo-random number generator <b>123</b>. Accordingly, security is increased because, even if malicious software were to obtain control of the trusted operating system <b>121</b>, the malicious software cannot access the entropy input. As an alternative, in some implementations, the trusted kernel <b>125</b> may pass the entropy input to the pseudo-random number generator <b>123</b> by calling a function of a library within the trusted operating system <b>121</b> and/or by otherwise using the trusted operating system <b>121</b>. Using the trusted operating system <b>121</b> can reduce code complexity and conserve processing resources because the same function called by the API <b>119</b> can be used to return the output from the pseudo-random number generator <b>123</b> to the API <b>119</b>.</p><p id="p-0030" num="0029">After the output of the pseudo-random number generator <b>123</b>, which corresponds to the random number that fulfills the request from the application <b>117</b><i>b</i>, is passed back to the application <b>117</b><i>b </i>(e.g., via the API <b>119</b> and/or the application <b>117</b><i>a</i>), the application <b>117</b><i>b </i>may proceed with encryption or another use of the random number without exposing the quantum random number generator <b>103</b> and/or the pseudo-random number generator <b>123</b> to the user space <b>105</b><i>a </i>of the secure world <b>105</b>. This prevents malicious software in the user space <b>105</b><i>a </i>from obtaining the entropy input and/or the algorithm used by the pseudo-random number generator <b>123</b>, which would allow the malicious software to predict encryption keys or other variables based on the random number. For example, the application <b>117</b><i>b </i>may implement a digital rights management (DRM) model for the chipset, such that the media (or other content) protected by the DRM model is secured from interference and/or theft by malicious actors.</p><p id="p-0031" num="0030">Example <b>100</b> as shown in <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> does not use additional chip space other than for the processor <b>101</b>, the quantum random number generator, and any buses therebetween. As an alternative, example <b>150</b> as shown in <figref idref="DRAWINGS">FIGS. <b>1</b>E-<b>1</b>H</figref> uses additional chip space for a Secure Element <b>151</b> in order to further increase security. The Secure Element <b>151</b> may include a tamper-resistant chip that includes a microprocessor that is hard-coded or otherwise programmed with one or more applications that cannot be altered. By further physically isolating the quantum random number generator <b>103</b> from the processor <b>101</b>, the already-small chance of an attacker gaining control of the quantum random number generator <b>103</b> is further reduced.</p><p id="p-0032" num="0031">In example <b>150</b>, applications executed on the processor <b>101</b> may request a random number (e.g., for encryption, ID generation, or model initiation). As shown in <figref idref="DRAWINGS">FIG. <b>1</b>E</figref>, a request for a random number may be initiated by an application <b>109</b> executed within the user space <b>107</b><i>a </i>of the normal world <b>107</b>. For example, the application <b>109</b> may call the API <b>111</b><i>a </i>provided by the HLOS that allows an application to request a random number.</p><p id="p-0033" num="0032">As further shown in <figref idref="DRAWINGS">FIG. <b>1</b>E</figref>, the API <b>111</b><i>a </i>may pass the request to the kernel <b>115</b> of the HLOS. For example, the API <b>111</b><i>a </i>may be associated with a driver <b>153</b><i>a </i>that allows access to one or more applications of the Secure Element <b>151</b> via the kernel <b>115</b> of the HLOS.</p><p id="p-0034" num="0033">As further shown in <figref idref="DRAWINGS">FIG. <b>1</b>E</figref>, the driver <b>153</b><i>a </i>may generate a hardware-level command based on the request and transmit the command (e.g., via a bus) to the Secure Element <b>151</b>. By isolating the Secure Element <b>151</b> from the chipset including the processor <b>101</b>, security is increased because malicious software on the chipset cannot directly access the Secure Element <b>151</b>, much less the quantum random number generator <b>103</b>.</p><p id="p-0035" num="0034">In some implementations, as shown in <figref idref="DRAWINGS">FIG. <b>1</b>E</figref>, the Secure Element <b>151</b> may pass the command to the driver <b>127</b> associated with the quantum random number generator <b>103</b>. For example, the Secure Element <b>151</b> may use a function call provided by a library of an operating environment implemented on the Secure Element <b>151</b>. Passing the request through the operating environment reduces latency in communications between the Secure Element <b>151</b> and the driver <b>127</b>, which speeds up how quickly applications (such as application <b>109</b>) can obtain random numbers. As an alternative, in some implementations, the Secure Element <b>151</b> may pass the command to the driver <b>127</b> via the pseudo-random number generator <b>123</b>. Accordingly, the driver <b>127</b> may only be accessed via the pseudo-random number generator <b>123</b>, which further increases security because, even if malicious software were to obtain control of the operating environment of the Secure Element <b>151</b>, the malicious software cannot access the driver <b>127</b>.</p><p id="p-0036" num="0035">As further shown in <figref idref="DRAWINGS">FIG. <b>1</b>E</figref>, the driver <b>127</b> may generate a hardware-level command based on the request and transmit the command (e.g., via a bus) to the quantum random number generator <b>103</b>. By isolating the quantum random number generator <b>103</b> from the chipset including the processor <b>101</b>, security is increased because malicious software on the chipset cannot directly access the quantum random number generator <b>103</b>. Additionally, by provisioning the driver <b>127</b> within the Secure Element <b>151</b>, security is increased because malicious software on the chipset cannot directly obtain output from the quantum random number generator <b>103</b>.</p><p id="p-0037" num="0036">In response to the command from the driver <b>127</b>, and as shown in <figref idref="DRAWINGS">FIG. <b>1</b>F</figref>, the quantum random number generator <b>103</b> may generate an entropy input (e.g., as described in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>) and return the entropy input (e.g., via a bus) to the driver <b>127</b>. Accordingly, the Secure Element <b>151</b> may pass the entropy input to the pseudo-random number generator <b>123</b> from the driver <b>127</b>. The pseudo-random number generator <b>123</b> may use the entropy input in a DRBG algorithm such that the random number output by the DRBG algorithm has a length standardized to a use for which the application <b>109</b> requested the random number. For example, encryption keys may depend on random numbers of a preconfigured length, and model initiation may depend on a preconfigured quantity of weights or initial values, among other examples. By implementing the pseudo-random number generator <b>123</b> within the Secure Element <b>151</b>, security is increased because malicious software executing on the chipset cannot access or control the pseudo-random number generator <b>123</b>. Accordingly, an attacker may be unable to determine an algorithm used by the pseudo-random number generator <b>123</b>, which would enable the attacker to predict an encryption key (or other variable) based on the random number if the attacker were able to obtain the entropy input. As an alternative, in some implementations, the entropy input may be used as the random number without applying the pseudo-random number generator <b>123</b>. Using the entropy input directly conserves processing resources and power at the Secure Element <b>151</b>.</p><p id="p-0038" num="0037">In some implementations, and as shown in <figref idref="DRAWINGS">FIG. <b>1</b>F</figref>, the driver <b>127</b> may pass the entropy input directly to the pseudo-random number generator <b>123</b>. Accordingly, security is increased because, even if malicious software were to obtain control of the operating environment of the Secure Element <b>151</b>, the malicious software cannot access the entropy input. As an alternative, in some implementations, the driver <b>127</b> may pass the entropy input to the pseudo-random number generator <b>123</b> by calling a function of a library within the operating environment of the Secure Element <b>151</b>. Using the operating environment of the Secure Element <b>151</b> can reduce code complexity and conserve processing resources because the same function triggered by the command from the driver <b>153</b><i>a </i>can be used to return the output from the pseudo-random number generator <b>123</b> to the driver <b>153</b><i>a. </i></p><p id="p-0039" num="0038">After the output of the pseudo-random number generator <b>123</b>, which corresponds to the random number that fulfills the request from the application <b>109</b>, is passed back to the driver <b>153</b><i>a </i>(e.g., via a bus), the driver <b>153</b><i>a </i>forwards the random number to the kernel <b>115</b> of the HLOS. Accordingly, the random number is returned to the application <b>109</b> (e.g., via the API <b>111</b><i>a</i>). The application <b>109</b> may therefore proceed with encryption, model initiation, or another use of the random number without exposing the quantum random number generator <b>103</b> and/or the pseudo-random number generator <b>123</b> to the chipset including the processor <b>101</b>. This prevents malicious software on the chipset from obtaining the entropy input and/or the algorithm used by the pseudo-random number generator <b>123</b>, which would allow the malicious software to predict encryption keys, initialization vectors, or other variables based on the random number. Accordingly, files encrypted using the random number, and models trained based on the random number, among other examples, are secured from interference and/or theft by malicious actors.</p><p id="p-0040" num="0039">Applications executed within the secure world <b>105</b> may similarly request random numbers. As shown in <figref idref="DRAWINGS">FIG. <b>1</b>G</figref>, a request for a random number may be initiated by an application <b>117</b><i>b </i>executed within the user space <b>105</b><i>a </i>of the secure world <b>105</b>. For example, the application <b>117</b><i>b </i>may call the API <b>119</b> provided by the secure operating system that allows an application to request a random number. Allowing trusted applications to call the API <b>119</b> speeds up how quickly the trusted applications (such as application <b>117</b><i>b</i>) can obtain random numbers. As an alternative, in some implementations, the secure operating system may provision the API <b>119</b> only for an application <b>117</b><i>a </i>(e.g., as described above in connection with example <b>100</b>) such that the application <b>117</b><i>b </i>provides the request to the application <b>117</b><i>a</i>, and the application <b>117</b><i>a </i>calls the API <b>119</b>. Limiting access to the API <b>119</b> increases security because, on a rare chance that malicious software executes within the user space <b>105</b><i>a</i>, the malicious software cannot perform a DoS attack on, or otherwise access, the API <b>119</b>.</p><p id="p-0041" num="0040">As further shown in <figref idref="DRAWINGS">FIG. <b>1</b>G</figref>, the API <b>119</b> may pass the request to the trusted operating system <b>121</b>, which further passes the request to a trusted kernel <b>125</b> of the secure operating system. In some implementations, as shown in <figref idref="DRAWINGS">FIG. <b>1</b>G</figref>, the trusted operating system <b>121</b> (e.g., including core functions and libraries that support the user space <b>105</b><i>a</i>) may be logically distinct from the trusted kernel <b>125</b> (e.g., including drivers and other software that interacts directly with the chipset and hardware connected to the chipset). Separating the trusted operating system <b>121</b> from the trusted kernel <b>125</b> further secures the hardware because, even if malicious software were to obtain control of the trusted operating system <b>121</b>, the malicious software cannot exercise control over the trusted kernel <b>125</b>. As an alternative, in some implementations, the trusted operating system <b>121</b> may be logically integrated with the trusted kernel <b>125</b> (e.g., similar to the integration of core functions and libraries for the HLOS with the kernel <b>115</b>). Integrating the trusted operating system <b>121</b> and the trusted kernel <b>125</b> reduces latency in communications between the trusted operating system <b>121</b> and the trusted kernel <b>125</b>, which speeds up how quickly applications (such as application <b>117</b><i>b</i>) can obtain random numbers.</p><p id="p-0042" num="0041">The API <b>119</b> may be associated with a driver <b>153</b><i>b </i>executed by the trusted kernel <b>125</b> to access one or more applications of the Secure Element <b>151</b> (which may be connected to the chipset including processor <b>101</b> via one or more buses). As further shown in <figref idref="DRAWINGS">FIG. <b>1</b>G</figref>, the driver <b>153</b><i>a </i>may generate a hardware-level command based on the request and transmit the command (e.g., via a bus) to the Secure Element <b>151</b>. By isolating the Secure Element <b>151</b> from the chipset including the processor <b>101</b>, security is increased because malicious software on the chipset cannot directly access the Secure Element <b>151</b>, much less the quantum random number generator <b>103</b>.</p><p id="p-0043" num="0042">In some implementations, as shown in <figref idref="DRAWINGS">FIG. <b>1</b>G</figref>, the Secure Element <b>151</b> may pass the command to the driver <b>127</b> associated with the quantum random number generator <b>103</b>. For example, the Secure Element <b>151</b> may use a function call provided by a library of an operating environment implemented on the Secure Element <b>151</b>. Passing the request through the operating environment reduces latency in communications between the Secure Element <b>151</b> and the driver <b>127</b>, which speeds up how quickly applications (such as application <b>117</b><i>b</i>) can obtain random numbers. As an alternative, in some implementations, the Secure Element <b>151</b> may pass the command to the driver <b>127</b> via the pseudo-random number generator <b>123</b>. Accordingly, the driver <b>127</b> may only be accessed via the pseudo-random number generator <b>123</b>, which further increases security because, even if malicious software were to obtain control of the operating environment of the Secure Element <b>151</b>, the malicious software cannot access the driver <b>127</b>.</p><p id="p-0044" num="0043">As further shown in <figref idref="DRAWINGS">FIG. <b>1</b>G</figref>, the driver <b>127</b> may generate a hardware-level command based on the request and transmit the command (e.g., via a bus) to the quantum random number generator <b>103</b>. By isolating the quantum random number generator <b>103</b> from the chipset including the processor <b>101</b>, security is increased because malicious software on the chipset cannot directly access the quantum random number generator <b>103</b>. Additionally, by provisioning the driver <b>127</b> within the Secure Element <b>151</b>, security is increased because malicious software on the chipset cannot directly obtain output from the quantum random number generator <b>103</b>.</p><p id="p-0045" num="0044">In response to the command from the driver <b>127</b>, and as shown in <figref idref="DRAWINGS">FIG. <b>1</b>H</figref>, the quantum random number generator <b>103</b> may generate an entropy input (e.g., as described in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>) and return the entropy input (e.g., via a bus) to the driver <b>127</b>. Accordingly, the Secure Element <b>151</b> may pass the entropy input to the pseudo-random number generator <b>123</b> from the driver <b>127</b>. The pseudo-random number generator <b>123</b> may use the entropy input in a DRBG algorithm such that the random number output by the DRBG algorithm has a length standardized to a use for which the application <b>109</b> requested the random number. For example, encryption keys may depend on random numbers of a preconfigured length, and model initiation may depend on a preconfigured quantity of weights or initial values, among other examples. By implementing the pseudo-random number generator <b>123</b> within the Secure Element <b>151</b>, security is increased because malicious software executing on the chipset cannot access or control the pseudo-random number generator <b>123</b>. Accordingly, an attacker may be unable to determine an algorithm used by the pseudo-random number generator <b>123</b>, which would enable the attacker to predict an encryption key (or other variable) based on the random number if the attacker were able to obtain the entropy input. As an alternative, in some implementations, the entropy input may be used as the random number without applying the pseudo-random number generator <b>123</b>. Using the entropy input directly conserves processing resources and power at the Secure Element <b>151</b>.</p><p id="p-0046" num="0045">In some implementations, and as shown in <figref idref="DRAWINGS">FIG. <b>1</b>H</figref>, the driver <b>127</b> may pass the entropy input directly to the pseudo-random number generator <b>123</b>. Accordingly, security is increased because, even if malicious software were to obtain control of the operating environment of the Secure Element <b>151</b>, the malicious software cannot access the entropy input. As an alternative, in some implementations, the driver <b>127</b> may pass the entropy input to the pseudo-random number generator <b>123</b> by calling a function of a library within the operating environment of the Secure Element <b>151</b>. Using the operating environment of the Secure Element <b>151</b> can reduce code complexity and conserve processing resources because the same function triggered by the command from the driver <b>153</b><i>b </i>can be used to return the output from the pseudo-random number generator <b>123</b> to the driver <b>153</b><i>b. </i></p><p id="p-0047" num="0046">After the output of the pseudo-random number generator <b>123</b>, which corresponds to the random number that fulfills the request from the application <b>117</b><i>b</i>, is passed back to the driver <b>153</b><i>b </i>(e.g., via a bus), the driver <b>153</b><i>b </i>forwards the random number to the kernel <b>115</b> of the HLOS. Accordingly, the random number is returned to the application <b>117</b><i>b </i>(e.g., via the API <b>119</b> and/or the application <b>117</b><i>a</i>). The application <b>117</b><i>b </i>may therefore proceed with encryption or another use of the random number without exposing the quantum random number generator <b>103</b> and/or the pseudo-random number generator <b>123</b> to the chipset including the processor <b>101</b>. This prevents malicious software on the chipset from obtaining the entropy input and/or the algorithm used by the pseudo-random number generator <b>123</b>, which would allow the malicious software to predict encryption keys, initialization vectors, or other variables based on the random number. For example, the application <b>117</b><i>b </i>may implement a DRM model for the chipset, such that the media (or other content) protected by the DRM model is secured from interference and/or theft by malicious actors.</p><p id="p-0048" num="0047">As indicated above, <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>H</figref> are provided as one or more examples. Other examples may differ from what is described with regard to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>H</figref>. The number and arrangement of devices shown in <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>H</figref> are provided as one or more examples. In practice, there may be additional devices, fewer devices, different devices, or differently arranged devices than those shown in <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>H</figref>. Furthermore, two or more devices shown in <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>H</figref> may be implemented within a single device, or a single device shown in <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>H</figref> may be implemented as multiple, distributed devices. Additionally, or alternatively, a set of devices (e.g., one or more devices) shown in <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>H</figref> may perform one or more functions described as being performed by another set of devices shown in <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>H</figref>.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram of an example <b>200</b> of a random number generation process with which systems and/or methods described herein may be implemented. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, process <b>200</b> may use a quantum random number generator <b>201</b> (which may correspond to quantum random number generator <b>103</b>) and a pseudo-random number generator <b>203</b>. In some implementations, quantum random number generator <b>201</b> and/or pseudo-random number generator <b>203</b> may be included in user device <b>310</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Devices used in process <b>200</b> may interconnect via wired connections, wireless connections, or a combination of wired and wireless connections.</p><p id="p-0050" num="0049">As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the quantum random number generator <b>201</b> may include an entropy source <b>205</b>. In example <b>200</b>, the entropy source <b>205</b> includes a photon source <b>207</b>, such as a light emitting diode (LED), a laser, or another light source and a sensor <b>209</b>, such as an active-pixel sensor (APS), a charge-coupled device (CCD), or another sensor that converts light from the LED <b>207</b> into an analog signal based on a measurement of at least one property of the light. Due to quantum uncertainty, some properties of the light generated by the photon source <b>207</b> (e.g., phase and/or intensity) are at least partially probabilistic. Accordingly, by using a measurement associated with a probabilistic property of the light, the analog signal generated by the sensor <b>209</b> may be characterized as having high entropy.</p><p id="p-0051" num="0050">Although described above using photon source <b>207</b> and sensor <b>209</b>, the quantum random number generator <b>201</b> may include additional or alternative entropy sources. For example, the quantum random number generator <b>201</b> may measure a voltage potential associated with the atmosphere. Due to quantum uncertainty, the voltage potential is at least partially probabilistic. In another example, the quantum random number generator <b>201</b> may extract noise from a microphone or a camera because such noise is probabilistic. Accordingly, the quantum random number generator <b>201</b> may use one or more devices to perform a measurement that is at least partially probabilistic in order to generate an analog signal with high entropy.</p><p id="p-0052" num="0051">As further shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the analog signal based on the measurement is converted into a digital signal by an analog-to-digital converter (ADC) <b>211</b>. Accordingly, the digital signal output by the ADC <b>211</b> may serve as an entropy input for pseudo-random number generator <b>203</b>. In some implementations, the pseudo-random number generator <b>203</b> may be implemented by hardware (e.g., an application-specific integrated circuit (ASIC) and/or other specialized hardware configured to generate pseudo-random numbers) or a combination of hardware and software (e.g., an application executed on a microprocessor and/or other software implemented on generalized hardware). As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the pseudo-random number generator <b>203</b> may use a DRBG algorithm. Using the pseudo-random number generator <b>203</b> ensures that the random number has a standardized length and is thus suitable for encryption, Monte Carlo initiation, or another use for which the random number is intended. As further shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the pseudo-random number generator <b>203</b> may output the random number to a chipset including or otherwise in communication with the quantum random number generator <b>201</b>.</p><p id="p-0053" num="0052">In some implementations, however, the entropy input from the entropy source <b>205</b> may be directly used as the random number in order to conserve processing resources and/or chip space. In order to use the entropy input directly, the quantum random number generator <b>201</b> may standardize the digital signal output from the ADC <b>211</b> in order to render the entropy input suitable for an intended use.</p><p id="p-0054" num="0053">In some implementations, the digital signal output by the ADC <b>211</b> may additionally or alternatively serve as an indicator of a status of the quantum random number generator <b>201</b>. Accordingly, the digital signal output by the ADC <b>211</b> may be a sample output, as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, requested (e.g., by the chipset including or otherwise in communication with the quantum random number generator <b>201</b>) in order to detect a status of the quantum random number generator <b>201</b>. In some implementations, a driver associated with the quantum random number generator <b>201</b> may use the digital signal to determine whether there is a malfunction. For example, damage to the sensor <b>209</b> may result in entropy inputs with entropy that does not satisfy a threshold.</p><p id="p-0055" num="0054">As indicated above, <figref idref="DRAWINGS">FIG. <b>2</b></figref> is provided as an example. Other examples may differ from what is described with regard to <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The number and arrangement of devices shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> are provided as an example. In practice, there may be additional devices, fewer devices, different devices, or differently arranged devices than those shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Furthermore, two or more devices shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be implemented within a single device, or a single device shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be implemented as multiple, distributed devices. Additionally, or alternatively, a set of devices (e.g., one or more devices) shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may perform one or more functions described as being performed by another set of devices shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram of an example environment <b>300</b> in which systems and/or methods described herein may be implemented. As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, environment <b>300</b> may include a user device <b>310</b>, a network <b>320</b>, and a remote device <b>330</b>. Devices of environment <b>300</b> may interconnect via wired connections, wireless connections, or a combination of wired and wireless connections.</p><p id="p-0057" num="0056">The user device <b>310</b> includes one or more devices capable of receiving, generating, storing, processing, and/or providing information associated with secure random number generation, as described elsewhere herein. The user device <b>310</b> may include a communication device and/or a computing device. For example, the user device <b>310</b> may include a wireless communication device, a mobile phone, a user equipment, a laptop computer, a tablet computer, a desktop computer, a gaming console, a set-top box, a wearable communication device (e.g., a smart wristwatch, a pair of smart eyeglasses, a head mounted display, or a virtual reality headset), or a similar type of device.</p><p id="p-0058" num="0057">The network <b>320</b> includes one or more wired and/or wireless networks. For example, the network <b>320</b> may include a wireless wide area network (e.g., a cellular network or a public land mobile network), a local area network (e.g., a wired local area network or a wireless local area network (WLAN), such as a Wi-Fi network), a personal area network (e.g., a Bluetooth network), a near-field communication network, a telephone network, a private network, an ad hoc network, an intranet, the Internet, and/or a combination of these or other types of networks. In some implementations, the network <b>320</b> may include a cellular network (e.g., a fifth generation (5G) network, a fourth generation (4G) network, a long-term evolution (L <b>1</b>E) network, a third generation (3G) network, a code division multiple access (CDMA) network, etc.), a public land mobile network (PLMN), a local area network (LAN), a wide area network (WAN), a metropolitan area network (MAN), a telephone network (e.g., the Public Switched Telephone Network (PSTN)), a fiber optic-based network, and/or a combination of these or other types of networks. The network <b>320</b> enables communication among the devices of environment <b>300</b>.</p><p id="p-0059" num="0058">The remote device <b>330</b> includes one or more devices capable of receiving, generating, storing, processing, providing, and/or routing information associated with encryption based on secure random number generation, as described elsewhere herein. The remote device <b>330</b> may include a communication device and/or a computing device. For example, the remote device <b>330</b> may include a server, such as an application server, a client server, a web server, a database server, a host server, a proxy server, a virtual server (e.g., executing on computing hardware), or a server in a cloud computing system. In some implementations, the remote device <b>330</b> includes computing hardware used in a cloud computing environment.</p><p id="p-0060" num="0059">The number and arrangement of devices and networks shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> are provided as an example. In practice, there may be additional devices and/or networks, fewer devices and/or networks, different devices and/or networks, or differently arranged devices and/or networks than those shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Furthermore, two or more devices shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be implemented within a single device, or a single device shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be implemented as multiple, distributed devices. Additionally, or alternatively, a set of devices (e.g., one or more devices) of environment <b>300</b> may perform one or more functions described as being performed by another set of devices of environment <b>300</b>.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram of example components of a device <b>400</b>, which may correspond to user device <b>310</b> and/or remote device <b>330</b>. In some implementations, user device <b>310</b> and/or remote device <b>330</b> may include one or more devices <b>400</b> and/or one or more components of device <b>400</b>. As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, device <b>400</b> may include a bus <b>410</b>, a processor <b>420</b>, a memory <b>430</b>, a storage component <b>440</b>, an input component <b>450</b>, an output component <b>460</b>, a communication component <b>470</b>, and an entropy component <b>480</b>.</p><p id="p-0062" num="0061">Bus <b>410</b> includes a component that enables wired and/or wireless communication among the components of device <b>400</b>. Processor <b>420</b> includes a central processing unit, a graphics processing unit, a microprocessor, a controller, a microcontroller, a digital signal processor, a field-programmable gate array, an application-specific integrated circuit, and/or another type of processing component. Processor <b>420</b> is implemented in hardware, firmware, or a combination of hardware and software. In some implementations, processor <b>420</b> includes one or more processors capable of being programmed to perform a function. Memory <b>430</b> includes a random access memory, a read only memory, and/or another type of memory (e.g., a flash memory, a magnetic memory, and/or an optical memory).</p><p id="p-0063" num="0062">Storage component <b>440</b> stores information and/or software related to the operation of device <b>400</b>. For example, storage component <b>440</b> may include a hard disk drive, a magnetic disk drive, an optical disk drive, a solid state disk drive, a compact disc, a digital versatile disc, and/or another type of non-transitory computer-readable medium. Input component <b>450</b> enables device <b>400</b> to receive input, such as user input and/or sensed inputs. For example, input component <b>450</b> may include a touch screen, a keyboard, a keypad, a mouse, a button, a microphone, a switch, a sensor, a global positioning system component, an accelerometer, a gyroscope, and/or an actuator. Output component <b>460</b> enables device <b>400</b> to provide output, such as via a display, a speaker, and/or one or more light-emitting diodes. Communication component <b>470</b> enables device <b>400</b> to communicate with other devices, such as via a wired connection and/or a wireless connection. For example, communication component <b>470</b> may include a receiver, a transmitter, a transceiver, a modem, a network interface card, and/or an antenna.</p><p id="p-0064" num="0063">Entropy component <b>480</b> generates an entropy input with high entropy. For example, entropy component <b>480</b> may include a quantum random number generator (e.g., as described in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>).</p><p id="p-0065" num="0064">Device <b>400</b> may perform one or more processes described herein. For example, a non-transitory computer-readable medium (e.g., memory <b>430</b> and/or storage component <b>440</b>) may store a set of instructions (e.g., one or more instructions, code, software code, and/or program code) for execution by processor <b>420</b>. Processor <b>420</b> may execute the set of instructions to perform one or more processes described herein. In some implementations, execution of the set of instructions, by one or more processors <b>420</b>, causes the one or more processors <b>420</b> and/or the device <b>400</b> to perform one or more processes described herein. In some implementations, hardwired circuitry may be used instead of or in combination with the instructions to perform one or more processes described herein. Thus, implementations described herein are not limited to any specific combination of hardware circuitry and software.</p><p id="p-0066" num="0065">The number and arrangement of components shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> are provided as an example. Device <b>400</b> may include additional components, fewer components, different components, or differently arranged components than those shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Additionally, or alternatively, a set of components (e.g., one or more components) of device <b>400</b> may perform one or more functions described as being performed by another set of components of device <b>400</b>.</p><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart of an example process <b>500</b> associated with secure random number generation. In some implementations, one or more process blocks of <figref idref="DRAWINGS">FIG. <b>5</b></figref> may be performed by a user device (e.g., user device <b>310</b>). Additionally, or alternatively, one or more process blocks of <figref idref="DRAWINGS">FIG. <b>5</b></figref> may be performed by one or more components of device <b>400</b>, such as processor <b>420</b>, memory <b>430</b>, storage component <b>440</b>, input component <b>450</b>, output component <b>460</b>, communication component <b>470</b>, and/or entropy component <b>480</b>.</p><p id="p-0068" num="0067">As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, process <b>500</b> may include receiving, at an operating system, a request for a random number from an application (block <b>510</b>). For example, the user device may receive, at an operating system, a request for a random number from an application, as described herein.</p><p id="p-0069" num="0068">As further shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, process <b>500</b> may include providing a command through a driver that is isolated from the operating system to a quantum random number generator to generate an entropy input, based on the request (block <b>520</b>). For example, the user device may provide a command to generate an entropy input, based on the request for the random number and through a driver that is isolated from the operating system, to a quantum random number generator, as described herein. The quantum random number generator may be isolated from one or more processors hosting the operating system (e.g., as described in connection with <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>H</figref>).</p><p id="p-0070" num="0069">In some implementations, the operating system is an HLOS. Accordingly, providing the command may include providing the request to a secure operating system that is isolated from the HLOS. Additionally, the driver may be implemented on a kernel of the secure operating system such that the command is provided to the quantum random number generator, through the driver, from the secure operating system. As an alternative, the operating system is a secure operating system, the driver is implemented on a kernel of the secure operating system, and the command is provided to the quantum random number generator, through the driver, from the secure operating system.</p><p id="p-0071" num="0070">In some implementations, providing the command to the driver includes providing the command to a Secure Element. The Secure Element may be isolated from the one or more processors hosting the operating system, and the driver may be implemented on the Secure Element.</p><p id="p-0072" num="0071">As further shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, process <b>500</b> may include receiving the entropy input, from the quantum random number generator, using the driver (block <b>530</b>). For example, the user device may receive the entropy input, from the quantum random number generator, using the driver, as described herein.</p><p id="p-0073" num="0072">As further shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, process <b>500</b> may include generating the random number based at least in part on the entropy input (block <b>540</b>). For example, the user device may generate the random number based at least in part on the entropy input, as described herein. In some implementations, generating the random number may include inputting the entropy input to a pseudo-random number generator that executes within an environment of the secure operating system, and receiving the random number from the pseudo-random number generator. As an alternative, generating the random number may include inputting the entropy input to a pseudo-random number generator that executes within an environment of the Secure Element, and receiving the random number from the Secure Element.</p><p id="p-0074" num="0073">As further shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, process <b>500</b> may include providing the random number to the application (block <b>550</b>). For example, the user device may provide the random number to the application, as described herein.</p><p id="p-0075" num="0074">Although <figref idref="DRAWINGS">FIG. <b>5</b></figref> shows example blocks of process <b>500</b>, in some implementations, process <b>500</b> may include additional blocks, fewer blocks, different blocks, or differently arranged blocks than those depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Additionally, or alternatively, two or more of the blocks of process <b>500</b> may be performed in parallel.</p><p id="p-0076" num="0075">As used herein, the term &#x201c;component&#x201d; is intended to be broadly construed as hardware, firmware, or a combination of hardware and software. It will be apparent that systems and/or methods described herein may be implemented in different forms of hardware, firmware, and/or a combination of hardware and software. The actual specialized control hardware or software code used to implement these systems and/or methods is not limiting of the implementations. Thus, the operation and behavior of the systems and/or methods are described herein without reference to specific software code&#x2014;it being understood that software and hardware can be used to implement the systems and/or methods based on the description herein.</p><p id="p-0077" num="0076">As used herein, satisfying a threshold may, depending on the context, refer to a value being greater than the threshold, greater than or equal to the threshold, less than the threshold, less than or equal to the threshold, equal to the threshold, not equal to the threshold, or the like.</p><p id="p-0078" num="0077">To the extent the aforementioned implementations collect, store, or employ personal information of individuals, it should be understood that such information shall be used in accordance with all applicable laws concerning protection of personal information. Additionally, the collection, storage, and use of such information can be subject to consent of the individual to such activity, for example, through well known &#x201c;opt-in&#x201d; or &#x201c;opt-out&#x201d; processes as can be appropriate for the situation and type of information. Storage and use of personal information can be in an appropriately secure manner reflective of the type of information, for example, through various encryption and anonymization techniques for particularly sensitive information.</p><p id="p-0079" num="0078">Even though particular combinations of features are recited in the claims and/or disclosed in the specification, these combinations are not intended to limit the disclosure of various implementations. In fact, many of these features may be combined in ways not specifically recited in the claims and/or disclosed in the specification. Although each dependent claim listed below may directly depend on only one claim, the disclosure of various implementations includes each dependent claim in combination with every other claim in the claim set. As used herein, a phrase referring to &#x201c;at least one of&#x201d; a list of items refers to any combination of those items, including single members. As an example, &#x201c;at least one of: a, b, or c&#x201d; is intended to cover a, b, c, a-b, a-c, b-c, and a-b-c, as well as any combination with multiple of the same item.</p><p id="p-0080" num="0079">No element, act, or instruction used herein should be construed as critical or essential unless explicitly described as such. Also, as used herein, the articles &#x201c;a&#x201d; and &#x201c;an&#x201d; are intended to include one or more items, and may be used interchangeably with &#x201c;one or more.&#x201d; Further, as used herein, the article &#x201c;the&#x201d; is intended to include one or more items referenced in connection with the article &#x201c;the&#x201d; and may be used interchangeably with &#x201c;the one or more.&#x201d; Furthermore, as used herein, the term &#x201c;set&#x201d; is intended to include one or more items (e.g., related items, unrelated items, or a combination of related and unrelated items), and may be used interchangeably with &#x201c;one or more.&#x201d; Where only one item is intended, the phrase &#x201c;only one&#x201d; or similar language is used. Also, as used herein, the terms &#x201c;has,&#x201d; &#x201c;have,&#x201d; &#x201c;having,&#x201d; or the like are intended to be open-ended terms. Further, the phrase &#x201c;based on&#x201d; is intended to mean &#x201c;based, at least in part, on&#x201d; unless explicitly stated otherwise. Also, as used herein, the term &#x201c;or&#x201d; is intended to be inclusive when used in a series and may be used interchangeably with &#x201c;and/or,&#x201d; unless explicitly stated otherwise (e.g., if used in combination with &#x201c;either&#x201d; or &#x201c;only one of&#x201d;).</p><p id="p-0081" num="0080">In the preceding specification, various example embodiments have been described with reference to the accompanying drawings. It will, however, be evident that various modifications and changes may be made thereto, and additional embodiments may be implemented, without departing from the broader scope of the invention as set forth in the claims that follow. The specification and drawings are accordingly to be regarded in an illustrative rather than restrictive sense.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method, comprising:<claim-text>receiving, at an operating system, a request for a random number from an application;</claim-text><claim-text>providing a command through a driver that is isolated from the operating system to a quantum random number generator that is isolated from one or more processors hosting the operating system to generate an entropy input, based on the request for the random number;</claim-text><claim-text>receiving the entropy input, from the quantum random number generator, using the driver;</claim-text><claim-text>generating the random number based at least in part on the entropy input; and</claim-text><claim-text>providing the random number to the application.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operating system comprises a high-level operating system, and wherein providing the command comprises:<claim-text>providing the request to a secure operating system that is isolated from the high-level operating system,</claim-text><claim-text>wherein the driver is implemented on a kernel of the secure operating system, and the command is provided to the quantum random number generator, through the driver, from the secure operating system.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein generating the random number comprises:<claim-text>inputting the entropy input to a pseudo-random number generator that executes within an environment of the secure operating system; and</claim-text><claim-text>receiving the random number from the pseudo-random number generator.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operating system comprises a secure operating system, the driver is implemented on a kernel of the secure operating system, and the command is provided to the quantum random number generator, through the driver, from the secure operating system.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein providing the command to the driver comprises:<claim-text>providing the command to a Secure Element that is isolated from the one or more processors hosting the operating system,</claim-text><claim-text>wherein the driver is implemented on the Secure Element.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein generating the random number comprises:<claim-text>inputting the entropy input to a pseudo-random number generator that executes within an environment of the Secure Element; and</claim-text><claim-text>receiving the random number from the Secure Element.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. A device, comprising:<claim-text>one or more processors configured to:<claim-text>provide a request for a random number, from a high-level operating system, to a secure operating system that is isolated from the high-level operating system;</claim-text><claim-text>provide a command to generate an entropy input, from the secure operating system and to a quantum random number generator that is isolated from the one or more processors, through a driver implemented on a kernel of the secure operating system;</claim-text><claim-text>receive, at the secure operating system and using the driver, the entropy input from the quantum random number generator; and</claim-text><claim-text>generate the random number based at least in part on the entropy input.</claim-text></claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the one or more processors are configured to virtually isolate an environment of the secure operating system from an environment of the high-level operating system.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the one or more processors comprise a first processor hosting an environment of the secure operating system and a second processor hosting an environment of the high-level operating system, wherein the first processor and the second processor are physically isolated.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the one or more processors are further configured to:<claim-text>provide the random number to an application associated with the request.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the one or more processors, to provide the random number to the application associated with the request, are configured to:<claim-text>receive the random number, at a kernel of the high-level operating system and using a driver associated with an environment of the secure operating system, from an application executing within the environment of the secure operating system; and</claim-text><claim-text>provide the random number to the application associated with the request from the kernel of the high-level operating system.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the one or more processors, to generate the random number, are configured to:<claim-text>input the entropy input to a pseudo-random number generator that executes within an environment of the secure operating system; and</claim-text><claim-text>receive the random number from the pseudo-random number generator.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the one or more processors, to provide the request to the secure operating system, are configured to:<claim-text>receive the request, at a kernel of the high-level operating system, from an application executing within an environment of the high-level operating system; and</claim-text><claim-text>provide the request to an application executing within an environment of the secure operating system using a driver associated with the environment of the secure operating system.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the one or more processors, to provide the command to the quantum random number generator, are configured to:<claim-text>receive the request from the high-level operating system at an application executing within an environment of the secure operating system;</claim-text><claim-text>generate the command, based on the request, at the kernel of the secure operating system; and</claim-text><claim-text>provide the command to the quantum random number generator using the driver.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A device, comprising:<claim-text>a Secure Element implementing a driver that communicates with a quantum random number generator that is isolated from the Secure Element; and</claim-text><claim-text>one or more processors, isolated from the Secure Element, configured to:<claim-text>receive, at an operating system, a request for a random number from an application;</claim-text><claim-text>provide, from the operating system and to the Secure Element, a command based on the request for the random number, through a driver implemented on a kernel of the operating system; and</claim-text><claim-text>receive, at the operating system and using the driver implemented on the kernel, the random number based at least in part on an entropy input from the quantum random number generator.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the one or more processors, to receive the random number, are configured to:<claim-text>receive the random number based on a pseudo-random number generator that executes within an environment of the Secure Element.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the one or more processors, to provide the command to the Secure Element, are configured to:<claim-text>generate the command, based on the request, at the kernel of the operating system; and</claim-text><claim-text>provide the command to the Secure Element using the driver.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the operating system is a high-level operating system.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the operating system is a secure operating system.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the one or more processors are further configured to:<claim-text>provide the random number to an application associated with the request.</claim-text></claim-text></claim></claims></us-patent-application>