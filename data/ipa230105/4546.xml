<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004547A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004547</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17807748</doc-number><date>20220620</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>23</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2455</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>28</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2358</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>24564</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>289</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">GENERATING A BUSINESS OBJECT</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63202937</doc-number><date>20210630</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Syntio Inc.</orgname><address><city>Bellevue</city><state>WA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Domanovac</last-name><first-name>Tomislav</first-name><address><city>Zagreb</city><country>HR</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Zeko</last-name><first-name>Ivan</first-name><address><city>Velika Gorica</city><country>HR</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Syntio Inc.</orgname><role>02</role><address><city>Bellevue</city><state>WA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Some embodiments involve a method of connecting, by a computerized system, to a database at a source. The computerized system queries the database for data associated with a characteristic and identifies the data. The computerized system organizes the data into a batch based on business-defined rules. The batch condenses a plurality of rows of data in the database associated with the characteristic into one row of data associated with the characteristic. The computerized system transforms the batch into a packet having a text or binary ready-to-consume format and publishes the packet as a ready-to-consume business object.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="94.32mm" wi="158.75mm" file="US20230004547A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="229.45mm" wi="109.64mm" orientation="landscape" file="US20230004547A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="242.06mm" wi="127.17mm" orientation="landscape" file="US20230004547A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="219.88mm" wi="147.49mm" orientation="landscape" file="US20230004547A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="226.57mm" wi="132.93mm" orientation="landscape" file="US20230004547A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="154.35mm" wi="93.13mm" orientation="landscape" file="US20230004547A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="182.29mm" wi="108.88mm" orientation="landscape" file="US20230004547A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="201.68mm" wi="126.66mm" orientation="landscape" file="US20230004547A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="190.08mm" wi="156.63mm" orientation="landscape" file="US20230004547A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="178.14mm" wi="151.21mm" orientation="landscape" file="US20230004547A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="229.87mm" wi="168.23mm" orientation="landscape" file="US20230004547A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="162.90mm" wi="126.15mm" orientation="landscape" file="US20230004547A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="227.16mm" wi="174.33mm" orientation="landscape" file="US20230004547A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application claims priority to U.S. Provisional Application No. 63/202,937, filed on Jun. 30, 2021, and entitled &#x201c;System and Method for Generation A Business Object&#x201d;, which is hereby incorporated by reference in full.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Transferring large amounts of data from a source to a target destination is known in the art. When the data is received at the target destination, it may be necessary to transform the data into a useable form such as a business object. Business objects are a set of objects related to one other representing data in various structures such as tables, lists, arrays, and others. The business object condenses the raw data from the source into a usable form.</p><p id="p-0004" num="0003">The existing software in the market for transferring the data from a source to a target destination typically utilizes a log-mining solution for real-time processing or replication of the entire database several times a day. These existing solutions read the raw data from the database at the source, replicate the database, then transmit the replicated database to the target destination. At the target destination, the replicated database is transformed by a further system into the business object. The described process transfers all of the data, including changes to the data out of context, to the target destination results. At the target destination, the proper infrastructure and further systems are required to transform the database into a business object which depends on the knowledge and talent at the target destination. During the multi-stage transformation of the database to the business object by the further systems, the processing is prone to errors.</p><p id="p-0005" num="0004">The existing software solution results in large batches of irrelevant data being transferred, analyzed and filtered at the target destination. This is time consuming, costly, adds latency to the process, bogs down the resources, and depends heavily on the processing at the target destination. Moreover, this solution is typically tightly coupled with the target destination system and may use several tools to transform the content of the databases into the business object.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0006" num="0005">Some embodiments involve a method of connecting, by a computerized system, to a database located at a source. The computerized system queries the database for data associated with a characteristic and identifies the data. The computerized system organizes the data into a batch based on business-defined rules. The batch condenses a plurality of rows of data in the database associated with the characteristic into one row of data associated with the characteristic. The computerized system transforms the batch into a packet having a text or binary ready-to-consume format and publishes the packet as a ready-to-consume business object.</p><p id="p-0007" num="0006">Some embodiments involve a computerized system of a memory storing executable instructions and a processor coupled to the memory that performs a method by executing the instructions stored in the memory. The method includes connecting, by the processor, to a database located at a source. The processor queries the database for data associated with a characteristic and identifies the data. The processor organizes the data into a batch based on business-defined rules. The batch condenses a plurality of rows of data in the database associated with the characteristic into one row of data associated with the characteristic. The processor transforms the batch into a packet having a text or binary ready-to-consume format and publishes the packet as a ready-to-consume business object.</p><p id="p-0008" num="0007">Some embodiments involve a non-transitory computer-readable media embodying program instructions that, when executed by a processor, cause the processor to implement a method. The method includes connecting, by the processor, to a database located at a source. The processor queries the database for data associated with a characteristic and identifies the data. The processor organizes the data into a batch based on business-defined rules. The batch condenses a plurality of rows of data in the database associated with the characteristic into one row of data associated with the characteristic. The processor transforms the batch into a packet having a text or binary ready-to-consume format and publishes the packet as a ready-to-consume business object.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIGS. <b>1</b>A and <b>1</b>B</figref> are flowcharts of a conventional, prior art solution for transferring data at a source to a target destination.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a schematic of an environment for a system and a method, in accordance with some embodiments.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> compares a schematic of a typical CDC system to a schematic of the computerized system with the business data publisher, in accordance with some embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIGS. <b>3</b>A and <b>3</b>B</figref> are flowcharts for transferring data from a source to a target destination, in accordance with some embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a schematic of the modules of the business data publisher of computerized system, in accordance with some embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example query by the fetcher module, in accordance with some embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an example schematic of condensing data, in accordance with some embodiments.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic of some of the modules of the business data publisher of the computerized system, in accordance with some embodiments.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a method for generating a business object performed by the computerized system, in accordance with some embodiments.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a simplified schematic diagram showing an example server for use in the system, in accordance with some embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0019" num="0018">In some embodiments, large amounts of data are seamlessly transferred in near-real-time from a source to a target destination in a cost-effective, business-oriented, reliable, and secure way. In the present embodiments, data is extracted from a database at the source with SQL queries provided by the consumer or client. The results are organized into batches and transformed into a ready-to-consume business object at the source which is then published to a messaging platform. The messaging platform makes the ready-to-consume business object available to the consumer or transmits the ready-to-consume business object to the target destination. The ready-to-consume business object may be consumed by the consumer without further processing, as soon as it reaches the target destination since all of the processing is performed at the source at the time of reading the database.</p><p id="p-0020" num="0019">Thus, there is no need to replicate or transform the data at the target destination as commonly done in conventional software systems. In other words, all of the processing and transformation is done on the data at the source to generate the ready-to-consume business object before it is transferred. The source databases are read at the source only once which minimizes the workload on the source system. The business objects may be consumed or used at the target destination as many times as needed.</p><p id="p-0021" num="0020">The present embodiments allow a constant flow of packets of ready-to-consume business objects to any target destination at a fraction of the cost of current software solutions for transferring data. The packages containing the ready-to-consume business objects are customizable in size and grouping algorithm, marshaled for optimized transfer over a network thereby reducing the overall number of messages or traffic between the source and the target destination. The packages may be enriched with metadata that describes the non-sensitive part of the content. The transfer is secure from an unauthorized consummation through encryption, and only the originating owner of the data has access to the content throughout the process.</p><p id="p-0022" num="0021">Some traditional solutions for transmitting data from a source to a target destination involve reading the database at the source, replicating the read database, transmitting the replicated database to the consumer, then analyzing and transforming the database at the consumer. Change Data Capture (CDC) software is one traditional approach to transferring data to a target destination. This approach is near real-time movement of data from relational databases to data warehouses, data lakes or other databases. CDC is a process where each and every adjustment to the source data is copied to a destination. For example, (i) one row of data is added to the source database, (ii) the one row of data is updated, and finally, (iii) the one row of data is deleted. The CDC solution records three transactions to correctly replicate this activity which is all transmitted to the target destination. Obviously, this is all irrelevant data since, in this example, the data was added and deleted having no net difference. By doing so, a large number of events, most of which are not seen or used by the consumer and are thereby irrelevant, are transferred.</p><p id="p-0023" num="0022">Extract, Transform, Load (ETL) is a data integration process in which data is extracted from various sources and delivered to a data warehouse, database, or data lake, preparing it for consumption. To accomplish this, multiple batch processes have to be set up to extract the right data together and transform it. The final step of ETL involves loading data into the target destination. The ETL process is very complex, needs to be carefully orchestrated, and has tightly coupled systems with a lot of dependencies. Unfortunately, because of the batch processing, the transformed data outcome is never the most up-to-date version.</p><p id="p-0024" num="0023">The cost of ownership and administration for CDC and ETL systems are high, and neither of those solutions transform the data at the source. This means the database at the source is read multiple times a day and large packets of information are sent bogging down and slowing down the infrastructure and system. The responsibility for the transformation is at the target destination where the source data is not necessarily understood by the target destination. This can severely impact the integrity of the results.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIGS. <b>1</b>A and <b>1</b>B</figref> are flowcharts of a conventional, prior art solution for transferring data at a source to a target destination. Referring to <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, the prior art solution <b>10</b> has a database <b>12</b> and CDC software <b>14</b> at the source on premises <b>15</b>. The CDC software <b>14</b> may track inserts, updates and deletes to data. The database is replicated to a replication database segment <b>16</b>. The replicated database may undergo several processes in various segments <b>18</b> such as scheduled pulls and logic, and publisher functions. Continuing in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>, the replicated database arrives at the consumer <b>20</b> site. In some examples, the consumer may be an analytics consumer <b>20</b><i>a</i>, a business consumer <b>20</b><i>b </i>(also referred to as operational consumer or consumer of operational data) or an API data backend consumer <b>20</b><i>c</i>. Each of these consumers <b>20</b><i>a</i>, <b>20</b><i>b </i>and <b>20</b><i>c </i>are not located at the source on premises <b>15</b>, and the received replicated database in its current form is not useable. Rather, the replicated database must be transformed by a series of complex segments to create the ready-to-consume business object at the target designation and at the responsibility of the consumer.</p><p id="p-0026" num="0025">For example, referring to the analytics consumer <b>20</b><i>a</i>, business consumer <b>20</b><i>b </i>and API data backend consumer <b>20</b><i>c</i>, a raw data archiver segment <b>22</b> (e.g., data persistence), a replay/resubmission mechanism segment <b>24</b>, a custom schema validator segment <b>26</b>, and a consumer topic <b>28</b> are included. In analytics consumer <b>20</b><i>a</i>, after the custom schema validator segment <b>26</b>, there is an Extract-Transform-Load or Extract-Load-Transform (ETL/ELT) segment <b>30</b>, an analytics platform segment <b>32</b>, and the flow ends with an analytics user tooling <b>34</b>. In business consumer <b>20</b><i>b</i>, after the custom schema validator segment <b>26</b>, the flow ends in an operation or transactional data consumer <b>36</b>. In the API data backend consumer <b>20</b><i>c</i>, after the custom schema validator segment <b>26</b>, there is a regional database <b>38</b>, a cache layer <b>40</b>, and the flow ends with an API data consumer <b>42</b>. At the end of these detailed and complicated segments, the ready-to-consume business object is created at the consumer site.</p><p id="p-0027" num="0026">In contrast, the present embodiments enable the system and associated methods thereof to generate the ready-to-consume business object at the source. As such, the database at the source is queried for relevant data and then that data is transformed to the ready-to-consume business object at the source. There is no need to copy and transmit databases to another destination for processing and transformation to the ready-to-consume business object. The system enables a constant stream of ready-to-consume business objects to the target destination, decoupling the database from the source and accelerating digital transformation.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a schematic of an environment for a system and a method, in accordance with some embodiments. A computerized system <b>100</b> may be located on premises <b>101</b> with a source database <b>102</b> and a business data publisher <b>103</b>. The computerized system <b>100</b> may be an enterprise system which may be a computer, a group of computers, a server, a server farm or a cloud computing system. The hardware generally includes any appropriate number and combination of computing devices, network communication devices, and peripheral components connected together, including various processors, computer memory (including transitory and non-transitory media), input/output devices, user interface devices, communication adapters, communication channels, etc. The software generally includes any appropriate number and combination of conventional and specially-developed software with computer-readable instructions stored by the computer memory in non-transitory computer-readable or machine-readable media and executed by the various processors to perform the functions described herein. The system includes an internal network through which internal communication devices, such as personal computers, laptop computers, tablets, mobile phones, landline phones, smartwatches, smart cars, or the like, operated by a user, communicate. In these implementations, the computerized system <b>100</b> includes traditional hardware such as a memory storing executable instructions, and a processor coupled to the memory.</p><p id="p-0029" num="0028">The source database <b>102</b> is an organized collection of data stored and accessed electronically by the system. The source database <b>102</b> may be one or more databases stored on dedicated hardware or servers that run related software. In some embodiments, database servers are multiprocessor computers, with abundant memory and Redundant Array of Independent Disks (RAID) disk arrays used for stable storage. The computerized system <b>100</b> communicates through the internal network (not shown) and may publish data, such as a ready-to-consume business object, to an internal message platform <b>106</b> on premises <b>101</b>. The computerized system <b>100</b> communicates with entities outside of the premises through the cloud/internet <b>104</b>. For example, the computerized system <b>100</b> may publish data, such as a ready-to-consume business object, to a message broker <b>108</b> via the cloud/internet <b>104</b>.</p><p id="p-0030" num="0029">Message brokers <b>108</b> are often used to manage communications between on-premises systems and cloud systems. A message broker <b>108</b> may be software that enables applications, systems, and services to communicate with each other and exchange information. The message broker <b>108</b> does this by translating messages between formal messaging protocols which allows interdependent services to &#x201c;talk&#x201d; with one another directly, even if they were written in different languages or implemented on different platforms. Message brokers <b>108</b> can validate, store, route, and deliver messages to the appropriate destinations. They serve as intermediaries between other applications, allowing senders to issue messages without knowing where the receivers are, whether or not they are active, or how many of them there are. This facilitates decoupling of processes and services within systems. The computerized system <b>100</b> includes the business data publisher <b>103</b> having modules, such as a fetcher module <b>310</b>, formatter module <b>320</b>, serializer module <b>330</b>, encrypter module <b>340</b>, publisher module <b>350</b>, scheduler module <b>360</b>, manager module <b>370</b> and user interface module <b>380</b>. These modules <b>310</b>-<b>380</b> are located on premises <b>101</b> and are described with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>7</b></figref>.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> compares a schematic of a typical CDC system to a schematic of the computerized system <b>100</b> with the business data publisher. The CDC system <b>200</b> is a common method of extracting data from a source system where changes are captured via log files to replicate databases. For example, in the schematic for the CDC system <b>200</b>, data is extracted from the regional database management system <b>202</b> and a log collector <b>204</b> captures the data of additions, deletions and changes at the source. This is sent to a message broker <b>206</b>. From there, the data undergoes a complex transformation starting at a log consumer <b>208</b> then to a target or destination regional database management system <b>210</b>. The business object <b>212</b> is finally generated and available at a data warehouse service <b>214</b>. In contrast, in the schematic for the computerized system <b>100</b> with the business data publisher, data is extracted from the regional database management system <b>202</b> and the business object <b>212</b> is generated at the source. This is sent to a message broker <b>206</b> and is then made available at a data warehouse service <b>214</b>. In this way, the business object is created at the source and the transformation of the data to the business object happens at the source for a real-time system. This avoids complexity and poor performance of CDC systems. Since the data is serialized and compressed, this reduces network traffic and increases speed. The encryption of the data provides security while both public internet and private networks can be used.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIGS. <b>3</b>A and <b>3</b>B</figref> are flowcharts for transferring data from a source to a target destination, in accordance with some embodiments. In <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the computerized system <b>100</b> is located on premises <b>101</b> with the database <b>102</b>. The system queries the database <b>102</b> for relevant data, enriches that data with the needed metadata, and generates a ready-to-consume business object. The business object is a data record. In conventional use in a relational database as known in the art, data is split into different tables and referenced as needed. This means that the data is incomplete for a specific table within the database. The embodiments herein create a business object by pulling data from all the relevant tables in the database <b>102</b> to make a complete record. As an example, in a sales database there may be a table of customers and another table of invoices. When the invoice data is pulled out of the invoice table, there may be only a reference to the customer such as the customer ID. This is generally not usable because data is missing. Instead of the reference to the customer, it would be useful to have the name of the customer and corresponding company as well as the invoice information. All of the data is joined together in the generated business object, which is an actionable and usable business object without any further processing needed. Usable business objects may be associated with object schema&#x2014;structure of data objects, columns and types&#x2014;and serialized with the object schema into several standardized serialization formats such as JSON, Avro or Protobuf.</p><p id="p-0033" num="0032">The creation of the ready-to-consume business object occurs on premises <b>101</b> and at the source. The computerized system <b>100</b> publishes the ready-to-consume business objects on the message broker <b>108</b> decoupling the data/ready-to-consume business objects from the source. The message broker <b>108</b> may be utilized by a variety of data producers <b>110</b>. The data producers <b>110</b> may be other independent systems that publish content on the message broker. For example, the message broker <b>108</b> can support information from a variety of data producers <b>110</b>. In some embodiments, a schema registry <b>112</b> or janitor component ensures that the data schema is always up-to-date so that the consumers of the data never miss new attributes. As soon as the data producer <b>110</b> sends new attributes or a new order, the schema registry <b>112</b> transmits a notification to the data producer <b>110</b> or data engineers to notify them of the changes. In this way, the data producer <b>110</b> can verify if the sent data is correct or the data engineer can act on the change almost immediately. Previous schema versions are stored in schema history <b>114</b> in an easily navigable way, so retrieving data of a previous set up is possible.</p><p id="p-0034" num="0033">In <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, the ready-to-consume business object is received by the consumer <b>116</b>. In some embodiments, the consumer <b>116</b> may be an analytics consumer <b>116</b><i>a</i>, business consumer <b>116</b><i>b</i>, or a persistent storage consumer <b>116</b><i>c</i>. In the analytics consumer <b>116</b><i>a</i>, there may be an Extract/Transform/Load (ETL) or Extract/Load/Transform (ELT) segment <b>118</b> performed on the ready-to-consume business object. ETL is an integration approach that pulls information from remote sources, transforms it into defined formats and styles, then loads it into databases, data sources, or data warehouses. ELT similarly extracts data from one or multiple remote sources, but then loads it into the target data warehouse without any other formatting. Continuing in the flowchart, there may be an analytics platform segment <b>120</b>, ending with an analytics user tooling <b>122</b>. In some embodiments, the consumer may be a business consumer <b>116</b><i>b </i>with an operational or transactional data consumer <b>124</b>. In some embodiments, the consumer may be a persistent storage <b>116</b><i>c</i>. The persistent storage <b>116</b><i>c </i>is a component that collects and stores the received data in storage <b>126</b>, such as the ready-to-consume business object in an accessible way, in its original format. In this way, the persistent storage <b>116</b><i>c </i>stores the data from the data producers <b>110</b> so that backups are not needed from the data producer <b>110</b>. There may be an API Gateway <b>128</b> ending with an API data customer <b>130</b>.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a schematic of the modules of the business data publisher <b>103</b> of computerized system <b>100</b>, in accordance with some embodiments. In conventional systems for transferring data from a source to a target destination, databases at the source are replicated several times a day and every change that occurs is sent to the target destination. This results in sending large baches of business-irrelevant data to the cloud platform. The computerized system <b>100</b> described in the present embodiments, in contrast, transforms the data from the database <b>102</b> to the ready-to-consume business object at the source or on premises <b>101</b>, so only the relevant information is transmitted instead of extraneous data without context. The database <b>102</b> and the business data publisher <b>103</b> are located on premises <b>101</b>. The business data publisher <b>103</b> may include modules, such as a fetcher module <b>310</b>, formatter module <b>320</b>, serializer module <b>330</b>, encrypter module <b>340</b> and publisher module <b>350</b>. <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> also shows the modules <b>310</b>, <b>320</b>, <b>330</b>, <b>340</b> and <b>350</b> of the business data publisher <b>103</b> of the computerized system <b>100</b>.</p><p id="p-0036" num="0035">The fetcher module <b>310</b> of the business data publisher <b>103</b> connects to the database <b>102</b> at the source, or on premises <b>101</b>. In some embodiments, the database <b>102</b> source is Java Database Connectivity (JDBC) compliant. The fetcher module <b>310</b> queries the database <b>102</b> for data associated with a characteristic or information of the characteristic. In some embodiments, the querying comprises queries having incremental Structured Query Language (SQL). For example, <figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example query by the fetcher module <b>310</b>, in accordance with some embodiments. The query focuses on data associated with a characteristic or information of the characteristic. For example, for an &#x201c;INVOICE&#x201d; query, the results show invoice <b>502</b> with the corresponding information relating data that describes the transaction. The query may include the invoice item <b>504</b>, billing item <b>506</b>, invoice payment <b>508</b>, payment method <b>510</b>, and invoice status <b>512</b>.</p><p id="p-0037" num="0036">The data or result from the query from the fetcher module <b>310</b> may be any appropriate number (e.g., thousands or millions) of rows of data. At block <b>402</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the data or result is sent to the formatter module <b>320</b>. The formatter module <b>320</b> of the of the business data publisher <b>103</b> condenses the data from the query in batch, with parallel threads. Batch processing may be used to process the data, such as the transactions, in a group or batch without user interaction. <figref idref="DRAWINGS">FIG. <b>6</b></figref> is an example schematic of condensing data, in accordance with some embodiments. The formatter module <b>320</b> takes raw data <b>602</b> coming from fetcher module <b>310</b> and converts it into an end-result message <b>604</b> containing metadata such as a header, and payload in a key-value format. For example, the formatter module <b>320</b> may condense multiple rows of raw data <b>602</b> associated with a characteristic or information of the characteristic into a single row of data based on business-defined rules. This decreases the number of messages being published to, for example, the message broker <b>108</b> while preserving the context of the data. The business-defined rules may include transactions made by a particular client, transactions made on one day, transactions made with a particular payment method, or any combination thereof. The business-defined rules may be any matter to categorize the data. At block <b>404</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the end-result message <b>604</b> from the formatter module <b>320</b> is sent to the serializer module <b>330</b>.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic of some of the modules of the business data publisher <b>103</b> of the computerized system <b>100</b>, in accordance with some embodiments. The serializer module <b>330</b> of the of the business data publisher <b>103</b> transforms the batch data from the formatter module <b>320</b> into a different format capable of being stored or transmitted, and also reconstructed at a different point. The different format <b>702</b> may be an industry-standard such as a text or binary ready-to-consume format of JSON, Avro or Protobuf. This is the ready-to-consume business object as a serialized message <b>704</b>. At block <b>406</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the serialized message <b>704</b> &#x2014;the business object&#x2014;is sent to the encrypter module <b>340</b>.</p><p id="p-0039" num="0038">The encrypter module <b>340</b> of the computerized system <b>100</b> encodes or encrypts the serialized message as a security measure so the data cannot be accessed until decryption. In this way, the transmission is secure from an unauthorized consummation and only the originating owner of the data has access to the content throughout the process. At block <b>408</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the encrypted message <b>706</b> is sent to the publisher module <b>350</b>.</p><p id="p-0040" num="0039">The publisher module <b>350</b> of the business data publisher <b>103</b> may enrich the serialized message <b>704</b>/encrypted message <b>706</b> with metadata that provides information about the serialized message <b>704</b>/encrypted message <b>706</b>, e.g., the ready-to-consume business object. The metadata may include descriptive metadata, structural metadata, administrative metadata, reference metadata, statistical metadata and legal metadata depending on the particular message broker or consumer. The publisher module <b>350</b> publishes the serialized message <b>704</b>/encrypted message <b>706</b>, e.g., the ready-to-consume business object, to the on-premises message platform <b>106</b> or to the message broker <b>108</b> via the cloud/internet <b>104</b>. The serialized messages <b>704</b>/encrypted messages <b>706</b> may be grouped or batched for efficiency and published to the message platform <b>106</b> or the message broker <b>108</b>. This creates a stream of real-time ready-to-consume business objects ready for direct consumption.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a method for generating a business object performed by the computerized system, in accordance with some embodiments. The method <b>800</b> for generating a business object includes the modules, such as the fetcher module <b>310</b>, formatter module <b>320</b>, serializer module <b>330</b>, encrypter module <b>340</b> and publisher module <b>350</b>, as described herein. The method <b>800</b> starts at block <b>802</b>, by connecting to a database located at a source. The database source may be Java Database Connectivity (JDBC) compliant. At block <b>804</b>, the database is queried for data associated with a characteristic. The querying comprises queries having incremental Structured Query Language (SQL). At block <b>806</b>, the data is identified. At block <b>808</b>, the data is organized into a batch based on business-defined rules. The batch condenses a plurality of rows of data in the database <b>102</b> associated with a characteristic into one row of data associated with the characteristic. At block <b>810</b>, the batch is transformed into a packet having a text or binary ready-to-consume format. The text or binary format may be JSON, Avro or Protobuf. At block <b>812</b>, the packet is published as a ready-to-consume business object. In some embodiments, the packet is encrypted before publishing.</p><p id="p-0042" num="0041">Once the packet, e.g., the ready-to-consume business object, is published, the ready-to-consume business object is decoupled from the database <b>102</b> at the source on premises <b>101</b>. The ready-to-consume business object is transmitted to the message broker <b>108</b> or message platform <b>106</b> for consumption. The message broker <b>108</b> or message platform <b>106</b> allows the ready-to-consume business object to be available to the consumer or user device. This may be accomplished by the message broker <b>108</b> or message platform <b>106</b> transmitting the ready-to-consume business object to the consumer, transmitting an alert to the consumer that the ready-to-consume business object is available, or the like. The ready-to-consume business object is then accessed by the consumer and the ready-to-consume business object can be consumed by the consumer without modifying the data of the ready-to-consume business object into a different format.</p><p id="p-0043" num="0042">Referring to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the computerized system <b>100</b> includes a scheduler module <b>360</b>. The scheduler module <b>360</b> monitors the database <b>102</b> on premises <b>101</b> at the source for changes in the data in the database. When a change in the data in the database <b>102</b> is detected, the method <b>800</b> beings again at block <b>802</b> with the fetcher module <b>310</b>. This process may occur several thousands of times per second which renews and publishes the ready-to-consume business object in near real-time. The computerized system <b>100</b> may include a manager module <b>370</b> to facilitate the logistics of the method <b>800</b> such as for scheduling and batch size settings. A user interface module <b>380</b> coordinates the graphical display and enhances the user experience by configuring the display and database connection information.</p><p id="p-0044" num="0043">In some embodiments, the computerized system <b>100</b> may be on-demand, orchestrated or constant-cycle scheduled data transfer. In some embodiments, the ready-to-consume business object may be transmitted to different target destination systems, like another database or any kind of storage, such as blob storage.</p><p id="p-0045" num="0044">In some embodiments, the computerized system <b>100</b> includes a memory for storing executable instructions and a processor. The processor is coupled to the memory that performs a method by executing the instructions stored in the memory. The method may be method <b>800</b> such as described in detail with reference to <figref idref="DRAWINGS">FIG. <b>8</b></figref>. Some embodiments involve a non-transitory processor-readable medium embodying program instructions that, when executed by a processor, cause the processor to implement a method. The method may be method <b>800</b> such as described in detail with reference to <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a simplified schematic diagram showing an example server <b>900</b> (representing any combination of one or more of the servers) for use in the computerized system <b>100</b>, in accordance with some embodiments. Other embodiments may use other components and combinations of components. For example, the server <b>900</b> may represent one or more physical computer devices or servers, such as web servers, rack-mounted computers, network storage devices, desktop computers, laptop/notebook computers, etc., depending on the complexity of the computerized system <b>100</b>. In some embodiments implemented at least partially in a cloud network potentially with data synchronized across multiple geolocations, the server <b>900</b> may be referred to as one or more cloud servers. In some embodiments, the functions of the server <b>900</b> are enabled in a single computer device. In more complex implementations, some of the functions of the computing system are distributed across multiple computer devices, whether within a single server farm facility or multiple physical locations. In some embodiments, the server <b>900</b> functions as a single virtual machine.</p><p id="p-0047" num="0046">In some embodiments wherein the server <b>900</b> represents multiple computer devices, some of the functions of the server <b>900</b> are implemented in some of the computer devices, while other functions are implemented in other computer devices. In the illustrated embodiment, the server <b>900</b> generally includes at least one processor <b>902</b>, a main electronic memory <b>904</b>, a data storage <b>906</b>, a user I/O <b>908</b>, and a network I/O <b>910</b>, among other components not shown for simplicity, connected or coupled together by a data communication subsystem <b>912</b>.</p><p id="p-0048" num="0047">The processor <b>902</b> represents one or more central processing units on one or more PCBs (printed circuit boards) in one or more housings or enclosures. In some embodiments, the processor <b>902</b> represents multiple microprocessor units in multiple computer devices at multiple physical locations interconnected by one or more data channels. When executing computer-executable instructions for performing the above described functions of the server <b>900</b> in cooperation with the main electronic memory <b>904</b>, the processor <b>902</b> becomes a special purpose computer for performing the functions of the instructions.</p><p id="p-0049" num="0048">The main electronic memory <b>904</b> represents one or more RAM modules on one or more PCBs in one or more housings or enclosures. In some embodiments, the main electronic memory <b>904</b> represents multiple memory module units in multiple computer devices at multiple physical locations. In operation with the processor <b>902</b>, the main electronic memory <b>904</b> stores the computer-executable instructions executed by, and data processed or generated by, the processor <b>902</b> to perform the above described functions of the server <b>900</b>.</p><p id="p-0050" num="0049">The data storage <b>906</b> represents or comprises any appropriate number or combination of internal or external physical mass storage devices, such as hard drives, optical drives, network-attached storage (NAS) devices, flash drives, etc. In some embodiments, the data storage <b>906</b> represents multiple mass storage devices in multiple computer devices at multiple physical locations. The data storage <b>906</b> generally provides persistent storage (e.g., in a non-transitory computer-readable media or machine-readable medium <b>914</b>) for the programs (e.g., computer-executable instructions) and data used in operation of the processor <b>902</b> and the main electronic memory <b>904</b>.</p><p id="p-0051" num="0050">In some embodiments, the programs and data in the data storage <b>906</b> include, but are not limited to, several modules for preforming a method. For example, the data storage <b>906</b> includes the fetcher module <b>310</b>, formatter module <b>320</b>, serializer module <b>330</b>, encrypter module <b>340</b>, publisher module <b>350</b>, scheduler module <b>360</b>, manager module <b>370</b> and user interface module <b>380</b>, among other programs and data. Under control of these programs and using this data, the processor <b>902</b>, in cooperation with the main electronic memory <b>904</b>, performs the above described functions for the server <b>900</b>.</p><p id="p-0052" num="0051">The user I/O <b>908</b> represents one or more appropriate user interface devices, such as keyboards, pointing devices, displays, etc. In some embodiments, the user I/O <b>908</b> represents multiple user interface devices for multiple computer devices at multiple physical locations. A system administrator, for example, may use these devices to access, setup and control the server <b>900</b>.</p><p id="p-0053" num="0052">The network I/O <b>910</b> represents any appropriate networking devices, such as network adapters, etc. for communicating through the computerized system <b>100</b>. In some embodiments, the network I/O <b>910</b> represents multiple such networking devices for multiple computer devices at multiple physical locations for communicating through multiple data channels.</p><p id="p-0054" num="0053">The data communication subsystem <b>912</b> represents any appropriate communication hardware for connecting the other components in a single unit or in a distributed manner on one or more PCBs, within one or more housings or enclosures, within one or more rack assemblies, within one or more geographical locations, etc.</p><p id="p-0055" num="0054">The server <b>900</b> includes a memory storing executable instructions (loaded from the data storage <b>906</b>) and the processor <b>902</b>. The processor <b>902</b> is coupled to the memory <b>904</b> and performs the methods by executing the instructions stored in the memory <b>904</b>. The non-transitory computer-readable media <b>914</b> includes instructions (i.e., the modules <b>310</b>-<b>380</b> described above) that, when executed by the processor <b>902</b>, cause the processor <b>902</b> to perform operations including the method <b>800</b> as described herein.</p><p id="p-0056" num="0055">Reference has been made in detail to embodiments of the disclosed invention, one or more examples of which have been illustrated in the accompanying figures. Each example has been provided by way of explanation of the present technology, not as a limitation of the present technology. In fact, while the specification has been described in detail with respect to specific embodiments of the invention, it will be appreciated that those skilled in the art, upon attaining an understanding of the foregoing, may readily conceive of alterations to, variations of, and equivalents to these embodiments. For instance, features illustrated or described as part of one embodiment may be used with another embodiment to yield a still further embodiment. Thus, it is intended that the present subject matter covers all such modifications and variations within the scope of the appended claims and their equivalents. These and other modifications and variations to the present invention may be practiced by those of ordinary skill in the art, without departing from the scope of the present invention, which is more particularly set forth in the appended claims. Furthermore, those of ordinary skill in the art will appreciate that the foregoing description is by way of example only, and is not intended to limit the invention.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>connecting, by a computerized system, to a database at a source;</claim-text><claim-text>querying, by the computerized system, the database for data associated with a characteristic;</claim-text><claim-text>identifying, by the computerized system, the data;</claim-text><claim-text>organizing, by the computerized system, the data into a batch based on business-defined rules, wherein the batch condenses a plurality of rows of data in the database associated with the characteristic into one row of data associated with the characteristic;</claim-text><claim-text>transforming, by the computerized system, the batch into a packet having a text or binary ready-to-consume format; and</claim-text><claim-text>publishing, by the computerized system, the packet as a ready-to-consume business object.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>transmitting, by the computerized system, the ready-to-consume business object to a message broker, wherein the ready-to-consume business object is decoupled from the database at the source; and</claim-text><claim-text>transmitting, by the message broker, the ready-to-consume business object to a user device.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>accessing, by a user device, the ready-to-consume business object; and</claim-text><claim-text>consuming, by the user device, the ready-to-consume business object without modifying the data of the ready-to-consume business object into a different format.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>monitoring, by the computerized system, the database at the source for changes in the data in the database;</claim-text><claim-text>detecting, by the computerized system, a change in the data in the database; and</claim-text><claim-text>connecting, by the computerized system, to the database at the source and repeating the method of <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising encrypting, by the computerized system, the packet before the publishing.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the database at the source is Java Database Connectivity (JDBC) compliant.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the querying comprises queries having incremental Structured Query Language (SQL).</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the text or binary format is JSON, Avro or Protobuf.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A computerized system comprising:<claim-text>a memory storing executable instructions; and</claim-text><claim-text>a processor, coupled to the memory, that performs a method by executing the instructions stored in the memory, the method comprising:<claim-text>connecting, by the processor, to a database at a source;</claim-text><claim-text>querying, by the processor, the database for data associated with a characteristic;</claim-text><claim-text>identifying, by the processor, the data;</claim-text><claim-text>organizing, by the processor, the data into a batch based on business-defined rules, wherein the batch condenses a plurality of rows of data in the database associated with the characteristic into one row of data associated with the characteristic;</claim-text><claim-text>transforming, by the processor, the batch into a packet having a text or binary ready-to-consume format; and</claim-text><claim-text>publishing, by the processor, the packet as a ready-to-consume business object.</claim-text></claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computerized system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>transmitting, by the processor, the ready-to-consume business object to a message broker, wherein the ready-to-consume business object is decoupled from the database at the source; and</claim-text><claim-text>transmitting, by the message broker, the ready-to-consume business object to a user device.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computerized system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>accessing, by a user device, the ready-to-consume business object; and</claim-text><claim-text>consuming, by the user device, the ready-to-consume business object without modifying the data of the ready-to-consume business object into a different format.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computerized system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>monitoring, by the processor, the database at the source for changes in the data in the database;</claim-text><claim-text>detecting, by the processor, a change in the data in the database; and</claim-text><claim-text>connecting, by the processor, to the database at the source and repeating the method of <claim-ref idref="CLM-00009">claim 9</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computerized system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising encrypting, by the processor, the packet before the publishing.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computerized system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the text or binary format is JSON, Avro or Protobuf.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer-readable media embodying program instructions that, when executed by a processor, cause the processor to implement a method, comprising:<claim-text>connecting, by the processor, to a database at a source;</claim-text><claim-text>querying, by the processor, the database for data associated with a characteristic;</claim-text><claim-text>identifying, by the processor, the data;</claim-text><claim-text>organizing, by the processor, the data into a batch based on business-defined rules, wherein the batch condenses a plurality of rows of data in the database associated with the characteristic into one row of data associated with the characteristic;</claim-text><claim-text>transforming, by the processor, the batch into a packet having a text or binary ready-to-consume format; and</claim-text><claim-text>publishing, by the processor, the packet as a ready-to-consume business object.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer-readable media of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>transmitting, by the processor, the ready-to-consume business object to a message broker, wherein the ready-to-consume business object is decoupled from the database at the source; and</claim-text><claim-text>transmitting, by the message broker, the ready-to-consume business object to a user device.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer-readable media of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>accessing, by a user device, the ready-to-consume business object; and</claim-text><claim-text>consuming, by the user device, the ready-to-consume business object without modifying the data of the ready-to-consume business object into a different format.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer-readable media of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>monitoring, by the processor, the database at the source for changes in the data in the database;</claim-text><claim-text>detecting, by the processor, a change in the data in the database; and</claim-text><claim-text>connecting, by the processor, to the database at the source and repeating the method of <claim-ref idref="CLM-00015">claim 15</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer-readable media of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising encrypting, by the processor, the packet before the publishing.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable media of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the querying comprises queries having incremental Structured Query Language (SQL).</claim-text></claim></claims></us-patent-application>