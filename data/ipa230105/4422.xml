<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004423A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004423</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17713073</doc-number><date>20220404</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>46</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>38</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>60</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>466</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>3821</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>602</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEM AND METHOD FOR META-TRANSACTIONAL INTEROPERABILITY OF DECENTRALIZED COMPUTING NETWORKS</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63171578</doc-number><date>20210407</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only"><addressbook><last-name>Fatahi</last-name><first-name>Reza</first-name><address><city>Encino</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant><us-applicant sequence="01" app-type="applicant" designation="us-only"><addressbook><last-name>Scarborough</last-name><first-name>Dane</first-name><address><city>Culver City</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Fatahi</last-name><first-name>Reza</first-name><address><city>Encino</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Scarborough</last-name><first-name>Dane</first-name><address><city>Culver City</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A system and its methods are described for implementing meta-transactional interactions across one or more decentralized computing networks (&#x201c;blockchains&#x201d;) with a managed (&#x201c;custodial&#x201d;) wallet, satisfying an important need of lowering the barrier of entry for interacting with smart contracts across multiple blockchain networks. First, the method of encoding and storing a transactional request created by a user's managed account, representing an intention to broadcast the invocation of a specific function of a specific smart contract on one or more peer nodes of a specific blockchain. Then, calculating a cost for processing the encoded transaction within the specific blockchain via analysis including the value and type of cryptocurrency, complexity of transaction, historical trend of transaction fees, and analyses to eliminate the chance of loss due to insufficient transaction fees. Next, obtaining a payment from the user for the transfer of the amount to successfully process their queued transaction. Then, confirming the payment was received in its correct and sufficient form resulting in a transfer of cryptocurrency from a reserve to the user's managed account. Subsequently, determining the transfer is completed and a sufficient balance exists for the execution of the queued transaction. Finally, dequeuing and executing the stored transaction on a specific blockchain by the system on behalf of the managed account, where transaction fees are paid by the managed account and unspent fees are accrued in the balances of the managed wallet.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="102.87mm" wi="158.75mm" file="US20230004423A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="171.87mm" wi="121.50mm" orientation="landscape" file="US20230004423A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="176.02mm" wi="124.29mm" file="US20230004423A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="176.02mm" wi="124.46mm" file="US20230004423A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="176.02mm" wi="124.04mm" file="US20230004423A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="190.92mm" wi="171.03mm" file="US20230004423A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="176.02mm" wi="123.95mm" file="US20230004423A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="176.02mm" wi="123.95mm" file="US20230004423A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="149.94mm" wi="121.50mm" orientation="landscape" file="US20230004423A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of provisional application No. 63/171,578 filed on 2021 Apr. 7.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">Embodiments of the present disclosure relate to a system, method, program, and product for interactions with various smart contracts residing on various blockchains including the exchange of fiat currency to fungible tokens.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">A blockchain is a decentralized network that ensures records are trusted, via a peer-review consensus mechanism, and that allows transfer of value. Various blockchains enable decentralized computing through programs commonly known as &#x201c;smart contracts&#x201d;. These systems include Ethereum, forks of the Ethereum project, Solana, Oasis Network, NEAR, and others.</p><p id="p-0005" num="0004">Smart contracts are interfaced to other applications through an encoding of their functions, often known as an application binary interface (ABI). Many smart contracts are developed following standards, such as the non-fungible token (NFT) standard that includes transfer, permissions, and uniqueness features common to all NFTs. However, custom smart contracts may also be developed and include other features such as oracles who communicate to an outside application programming interface (API) via Hypertext Transfer Protocol (HTTP) or similar. Together with the network information of a blockchain and deployment information of a smart contract, the address, viewing immutable historical data of the smart contract including lineage data, such as a token derived data, is available via a &#x201c;web3&#x201d; interface. Write operations involving changes to the internal state of a smart contract or token derivative are almost always associated a transaction fee, known as &#x201c;gas&#x201d;, that is required in the payload of an originating request object.</p><p id="p-0006" num="0005">Historically, the barrier of entry for interacting with smart contracts required knowledge and skill to create and configure a wallet for each respective blockchain, purchase tokens and &#x201c;seed&#x201d; the wallet(s), develop and deploy smart contracts, and transmit requests for specific interactions with smart contracts via a web3 interface. It also remains a challenge for lay operators to know about and/or find many of the cryptocurrencies of smaller blockchains where smart contract deployment and interactions are more economically advantageous. Furthermore, the various smart contracts of various blockchains remain segregated and there remains no solution to organize various smart contracts of various blockchains in an interoperable manner.</p><p id="p-0007" num="0006">The present disclosure proposes a solution to lowering the barrier of entry for connecting with various blockchains, including economically advantageous blockchains, for the purposes of decentralized computing and benefitting from the consensus mechanism of blockchain networks.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0008" num="0007">Embodiments are related to providing exchange of fiat currencies for cryptocurrencies on an as-needed basis for interactions with various smart contracts on various blockchains. In one embodiment, a managed wallet that includes identification information belonging to one account, selecting a blockchain from the selection of at least one blockchain or deployed smart contract, identifying the wallet address associated with the selected blockchain, constructing a web3 transaction payload based on acquired user input from a simple interface, approving a fiat transfer by merchant service provider API of a calculated amount of a transaction fee, processing the exchange of fiat for native tokens of the selected blockchain, transferring tokens from a reserve to the managed wallet, and transmitting the web3 transaction on behalf of the managed wallet. The difference in purchase amount and transaction fee is accrued by the managed wallet. In some embodiments, the smart contract may include an oracle transmitting an HTTP request for another on-chain transfer and/or transaction on another blockchain different from the on-chain network of the originating smart contract of the oracle.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008">The figures depict, and the detail description describes various non-limiting embodiments for purposes of illustration only. In the drawings:</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates various components of the multi-blockchain smart contract management system, in accordance with an embodiment.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart depicting an example process of a meta-transaction, in accordance with an embodiment.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart depicting an example process of an oracle initiated cross-blockchain transaction, in accordance with an embodiment.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram illustrating a connection of reserves comprising a reserve system, in accordance with an embodiment.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> is a block diagram illustrating an example of generating an intermediate representation and/or abstract representation of a smart contract based on user input via a DSL mechanism, in accordance with an embodiment.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> is a block diagram illustrating an example of an intermediate representation and/or abstract representation of a smart contract based on user input via a DSL mechanism compiled and deployed as a customized smart contracts for various distributed computing networks, in accordance with an embodiment.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart depicting, an example Software-as-a-Service and/or API implementation, in accordance with an embodiment.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart depicting an example decentralized application (dApp) implementation, in accordance with an embodiment.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram illustrating an example of decentralized finance with smart contracts, in accordance with an embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading><p id="p-0019" num="0018">The embodiments listed below are written only to illustrate the applications of this apparatus and method, not to limit the scope. One of skill in the art may recognize alternative embodiments of the structures and methods disclosed herein as viable alternatives that may be employed without departing from the principles of what is disclosed.</p><p id="p-0020" num="0019">Reference will be made in detail to several embodiments, the examples are illustrated as accompanying figures. It is noted that wherever practicable similar or like reference numbers may be used in the figures and may indicate similar or like functionality. The figures depict embodiments of the disclosed system (or method) for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.</p><p id="p-0021" num="0020">Certain terms are used throughout the following description and claims to refer to particular system components. As one skilled in the art will appreciate, different companies may refer to a component and/or method by different names. This document does not intend to distinguish between components and/or methods that differ in name but not in function.</p><p id="p-0022" num="0021">In the following discussion and in the claims, the terms &#x201c;including&#x201d; and &#x201c;comprising&#x201d; are used in an open-ended fashion, and thus may be interpreted to mean &#x201c;including, but not limited to . . . &#x201d;. The availability of many products, alternatives, and/or options of an apparatus are expressed herein as &#x201c;various&#x201d;.</p><p id="p-0023" num="0022">The present disclosure describes in part the following:</p><p id="p-0024" num="0023">Reserve based exchange: Smart contract interactions and/or transactions are limited by the ability of an operator to: connect to the blockchain of a smart contract, identify the application interface of the smart contract, construct a transaction request, and transmit a token payload for rendering transaction and/or processing fees involved in decentralized computing networks. Token payloads of a transaction require native tokens of the blockchain the transaction and request are intended to target, this to satisfy transaction fees commonly known as &#x201c;gas&#x201d;. Native tokens are available for acquisition from numerous centralized and decentralized exchanges, where fiat currency is converted to a selected native token of a specified or selected blockchain. The barrier to entry of decentralized exchanges is greater than centralized exchanges, requiring foreknowledge of creating and configuring a wallet. For this purpose, many lay (i.e., novice) operators often interact with a centralized exchange wherein a managed wallet is automatically created on their behalf. Coinbase is a popular centralized exchange where tokens can be acquired for a specific set of blockchains. A Coinbase account results in a wallet object with addresses corresponding to the various blockchains they support. The Coinbase wallet is an abstract representation that reduces the barrier of entry by limiting interactions of the operator to the purchase, sales, and transfer of tokens with a single wallet representation and limiting interactions with facets of blockchains, thus, reducing the complexity space of blockchain interactions. Although many of the blockchains (i.e., supported by Coinbase) include many other smart contracts, their features are unavailable. Those interactions require knowledge and skill that is beyond the ability of many lay operators. Furthermore, the purchase of tokens from existing exchanges is not directed by an immediate transactional need to satisfy gas, instead purchases of blockchain tokens are often in bulk for reasons other than to regularly interact with blockchains as a decentralized computing network.</p><p id="p-0025" num="0024">The disclosed reserve-based exchange system offers the tokens and amounts in a flexible manner consisting of: (1) custom reserves with unlimited or limited allotments to managed accounts, (2) bulk purchases for multiple transactions, and (3) in the amount necessary for a single transaction as calculated by the transaction and blockchain type at a given time. The transactions of this system involving a smart contract are comprised of: (1) interactions with a smart contract that is already deployed on a specific blockchain, (2) the deployment of a smart contract, and (3) native token transfers not involving any smart contract.</p><p id="p-0026" num="0025">Meta-transactions: A registration to this system results in the creation of a managed wallet that is an abstraction of multiple unique wallet addresses for each of a selection of various blockchains, such as Ethereum (and Ethereum forks), Solana, NEAR, etc. The managed wallet itself contains a unique identifier associated with an account representing a registered user. The account and wallet data are accessible following authentication with user-specific credentials information. All the transactions of this system are abstracted to a less granular manner by a managed wallet, wherein less skilled operators are presented fewer actions, features, options, etc. and automations, processing, and/or transactions that are handled on their behalf by the system.</p><p id="p-0027" num="0026">Cross-chain support: The system and method of the embodiment provide a solution to connect any smart contract to any other blockchain. The transmission is received by the reserve-based exchange system. The transmission consists of at least one of each a unique identifier and URI specifying at least one API action, a target address can be specified in the smart contract of the oracle or obtained from the blockchain itself. The instruction comprises a meta-transaction consisting of at least one transaction of one of a selection of various smart contracts and/or blockchains. The transaction consists of at least one of a deployment of a smart contract, interaction with a smart contract, interaction with a token of a smart contract, or transfer of a fungible native token of a blockchain. The at least one deployment or interaction of a smart contract can be transmitted to at least one of a selection of blockchains and can be a different blockchain than the native blockchain of the oracle's smart contract. The at least one transfer of a fungible native token of a blockchain can be transmitted to at least one of a selection of blockchains and can be a different blockchain than the native blockchain of the oracle's smart contract. The ownership transfer of a non-fungible token (NFT) results in the transfer of ownership of the original NFT, retaining the original metadata of the token (created date, transaction history, etc.).</p><p id="p-0028" num="0027">Configurable reserve: The default configuration of the reserve-based exchange system consists of at least one of a localized reserve and zero or more wallets of a regional reserve. Each reserve consists of a wallet consisting of wallet addresses for each of a selection of various blockchains. Multiple reserves may be configured for distributing tokens to more than one wallet address and to configure custom wallet addresses as reserves.</p><p id="p-0029" num="0028">Configurable smart contracts: The embodiment of creating, deploying, and interacting with custom smart contracts are described. The custom smart contracts originate from at least one template and accompanying oracle that may be further customized. The intermediate representation of a smart contract is compiled to a smart contract for deployment with a meta-transaction. The standardized smart contract includes at least one of a token type including the NFT standard. For example, custom functions or methods (e.g., encryption, etc.) can be modified.</p><p id="p-0030" num="0029">Software-as-a-Service (SaaS): The reserve-based exchange system comprises an API accessible by HTTP protocol. Configurations exist for deployment of an exact form and function of reserves and smart contracts, exposing a more comprehensive set of features. The user interface/user experience (UI/UX) of this embodiment includes supporting between one and many smart contracts for each of a selection of between one and many blockchains. The UI/UX of smart contract development includes at least one of a wizard, code editor, and graphical editor included in this embodiment. Another distinguishing aspect of this embodiment is team and/or organization management that benefits enterprise settings with rule-based access control (RBAC) or similar.</p><p id="p-0031" num="0030">API appliance: This embodiment consists of a customized on-premises and/or offline deployment of the system including reserve system, supporting variants not covered by traditional SaaS. This embodiment is distinguished from SaaS by its deployment and use, such as headless operations where interactions with the system exist from an interface other than SaaS.</p><p id="p-0032" num="0031">Multiplatform decentralized applications: This embodiment consists of dedicated smart contract interactions and emphasizes UI/UX and/or graphical user interface (GUI) aspects of the interactions with between one and few smart contracts of between one and few blockchains. The UI/UX of these applications are in part defined by a sequence consisting of authentication and features of interaction(s) and/or deployment(s) of at least one smart contract. These applications are available across multiple (mobile, tablet, desktop, embedded, etc.) devices.</p><p id="p-0033" num="0032">The decentralized applications are based upon their role and interactions with one or more smart contracts, in their deployments and/or interactions. The at least one smart contract includes the interface rules that govern the application and its UI/UX. In case of a custom smart contract with oracle, wherein cross-blockchain functionality exists, the decentralized application must consist of at least two smart contracts of at least two blockchains.</p><p id="p-0034" num="0033">Decentralized finance: This embodiment consists of the ability of blockchain to bind a smart contract or token thereof with native tokens of a blockchain. For example, an Ethereum smart contract or NFT can be configured to accept and distribute Ethereum native token, ETH. One can send ETH to the address of the smart contract or NFT. This applies to all smart contracts, regardless of their ability or function to distribute native token(s) they acquired. In cases where at least one function exists for a smart contract or token thereof to distribute the native token(s) they acquired, resulting in conditional distribution, the application of decentralized finance is embodied.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram depicting an embodiment of the multi-blockchain smart contract management system (<b>100</b>) containing the following components: (a) outside-facing client components (<b>110</b>), including: (1) devices and/or applications such as a GUI, command line interface (CLI), and API accessible from mobile, tablet, and desktop devices and API accessible from a network (<b>110</b>A, <b>110</b>B, <b>110</b>C, etc.); and (2) a client modulator module for access restrictions, for example merchant service provider (MSP) fiat payment gateway to restrict transactions by payment (<b>115</b>); (b) a meta-transactional API gateway (<b>120</b>) that is connected to a web server (<b>125</b>A) and authentication module (<b>1258</b>), wherein: (1) all requests and/or interactions with the API (<b>130</b>) are authenticated, (2) managed account (<b>132</b>) and managed wallet (<b>134</b>) data are accessed, (3) a localized reserve (<b>140</b>) is available for transfers to managed wallets, (4) a smart contract module (<b>170</b>) managing and maintaining supported smart contract implementations across various representations (e.g., Solidity, near-sdk-rs, oasis-core, etc.) of various blockchains (<b>175</b>A, <b>1758</b>, <b>175</b>C, etc.), (5) an oracle module (<b>136</b>) for listening to smart contract oracle signals and/or transmissions, (6) an analysis module (<b>137</b>) that performs statistical, artificial intelligence and machine learning (AI/ML), deep learning, etc. analysis for calculating transaction fees and custom smart contract features, for example similarity checking for uniqueness; (7) a server modulator (<b>138</b>) that obtains and/or verifies client modulator (<b>115</b>) data, for example fiat payment data from an MSP; and (8) a web3 module (<b>180</b>) wherein transactions are generated and transmitted; (c) heterogeneous decentralized computing networks (<b>190</b>), various blockchains (<b>190</b>A, <b>1908</b>, <b>190</b>C, etc.); and (d) regional reserves (<b>160</b>), consisting of zero or more additional reserve wallets that supply tokens to the localized reserve wallet. Each major component is separated by dotted lines. Within the meta-transactional API gateway, the collection of managed account and processing modules are organized by dashed lines, comprising the meta-transaction API.</p><p id="p-0036" num="0035">In this architectural diagram, the API web server acts as an input (box labeled &#x201c;I&#x201d;) of request data from the outside-facing client components. The processing of requests is handled by various combinations of the modules with various combinations of assets, for example a specific managed account and a specific smart contract, within a selection thereof. The output of the API (box labeled &#x201c;O&#x201d;) in the diagram consists of the interaction with the blockchain that occurs via transactions at the web3 module. The labels only demonstrate the flow of data for meta-transactional interactions whereby the user-facing client transmits data to the blockchain. This depiction does not imply the absence of and/or limit the bidirectional communications that exist between the blockchain, meta-transactional API gateway, and/or client components.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart depicting an example process of a meta-transaction exchange between a user and the system (or its methods). In general, a user (<b>110</b>) will authenticate with the system by interacting with the authentication (<b>125</b>) and API (<b>130</b>) modules, whereby user-specific credentials (<b>205</b>) are validated and result in the acquisition of the user's managed account data (<b>208</b>) that is bound to a session token under RFC-6750 and the like (i.e., JSON Web Token (JWT), multi-factor authentication, OpenAuth, etc.). These data will include the access identifiers for the user's account (<b>132</b>) and wallet (<b>134</b>) that are bound to a session and/or access token that must be subsequently utilized for authentication in all protected functions and/or features of the API.</p><p id="p-0038" num="0037">Once authenticated (<b>204</b>), all subsequent interactions with API will require a valid session token per RFC-6750 and like mechanisms and/or standards. These interactions are generally the ability to acquire existing token and/or smart contract resources (<b>205</b>, <b>210</b>) for selection of an interaction. A selected token and/or smart contract (i.e., post-deployment) will have specific blockchain information (<b>212</b>), unless it is not deployed and where a user selects a target blockchain for deployment of the smart contract (not illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>).</p><p id="p-0039" num="0038">Based on the interface of the token and/or smart contract, for example ERC-20 on the Ethereum network having its own interface, a selection of actions is available to the user. The user selects a specific action based on the GUI, CLI, API, etc. options of (<b>110</b>) and makes a request to create a transaction (<b>220</b>) that defines a formal interaction between the user and a specific token, smart contract, and/or blockchain.</p><p id="p-0040" num="0039">The time from the start of (<b>220</b>) until the system sends the request via web3 module (<b>180</b>) on behalf of the user to the blockchain defines the &#x201c;meta-transaction&#x201d; itself (<b>250</b>). A meta-transaction is a transaction whereby the fees and/or details of a blockchain transaction are handled by a third-party. In this case, the system is the third-party between the user and a blockchain. The purpose and value of the meta-transaction is to avoid potential issues, distractions, and/or barriers between a user's desire to conduct a transaction and their ability, knowledge, and/or skill to effectively carry out that transaction. In the present disclosure, we are presenting a novel meta-transactional mechanism that builds upon the art and involves automation by way of an exchange mechanism, whereby the user's wallet is a managed wallet (<b>134</b>), funds are transferred to the user's wallet by a reserve mechanism (<b>224</b>), and a transaction is carried out on behalf of a user with the details of their managed account and/or wallet (<b>250</b>), whereby a transaction is signed on behalf of the user by the system once the funds are transferred and available for that transaction to succeed.</p><p id="p-0041" num="0040">The details of the meta-transaction are generally the request to create a transaction (<b>220</b>) that occurs within the context of a specific blockchain, token, and/or smart contract. At the minimum, at least the blockchain must be defined to conduct a transaction, whereby such a transaction would be transfer of the native token of a specific blockchain. In general, a transaction will be created in the context of a specific token and/or smart contract, wherein both a specific blockchain and an interface to a specific smart contract will exist. For example, the interface of an ERC-20 (fungible) or ERC-721 (non-fungible) token to transfer a token, consisting of at least one specific function resulting in changes to the internal state of an already deployed smart contract on a specific blockchain. It is the goal, responsibility, and/or scope of the API (<b>130</b>) and client-facing (<b>110</b>) components to restrict the selection of options to the user only to those actions they are allowed to make, otherwise the transaction will fail, and transaction fees will likely be lost.</p><p id="p-0042" num="0041">Therefore, upon a valid selection of options for the interaction of a user with a token and/or smart contract, within the context of a specific blockchain and/or token and/or smart contract (<b>215</b>), a request for a new transaction (<b>220</b>) will result in the identification of the corresponding wallet address (<b>135</b>A, <b>1358</b>, <b>135</b>C, etc.) related to the specific blockchain of the context (<b>215</b>). A configuration of the appropriate blockchain wallet and determination of transaction fees is processed by the analysis module (<b>137</b>) based on the complexity of the transaction, selection of blockchain, value of token, etc., comprising <b>221</b>. The calculated transaction fee amount is requested from the system to the user for payment to satisfy the transaction (<b>222</b>). The process of collecting the transaction fee is handled by a configuration of at least one or more allowable transactions and/or a third-party merchant service provider (MSP; Stripe, Paypal, etc.) consisting of a client component (<b>115</b>) and a server component (<b>138</b>), resulting in a validation of permission and/or payment that determines whether to proceed the transaction request. For example, in fiat transfer with an MSP, the payment of the amount of the calculated transaction fee is obtained by an MSP callback (<b>223</b>), whereby the system proceeds with processing and/or transacting the exchange of fiat for tokens (<b>224</b>).</p><p id="p-0043" num="0042">The exchange amount (of <b>224</b>) is the calculated transaction fee that was authorized and/or paid (i.e., fiat). The calculated transaction fee amount (the first amount) is different than the actual transaction fee amount (the second amount). In general, it is expected the calculated transaction fee amount (the first amount) will be at least equal to or greater than the actual transaction fee amount (the second amount) to ensure that fees will not be lost to &#x201c;out-of-gas&#x201d; and/or &#x201c;insufficient funds&#x201d; error(s). The difference between the first amount and second amount, if any, will be accrued in the user's wallet.</p><p id="p-0044" num="0043">Once the exchange is complete (<b>224</b>) and tokens are available in the managed account's selected wallet address, as determined by a balance check by the web3 module (<b>180</b>) or similar, the requested transaction is translated to an actual transaction request object by the web3 module (<b>180</b>). Each blockchain, for example Ethereum, Solana, NEAR, etc., will have their own mechanism(s) and/or standard(s) for structuring and/or generating a transaction request object. For example, the transaction object of Ethereum for transferring a fungible and non-fungible token is not the same as the transaction object of Solana, NEAR, Oasis Network, etc. for transferring a fungible and non-fungible token. The original transaction request (<b>220</b>) consists of a generic data structure representation of the transaction that is cached/stored by the API (<b>130</b>) until the completion of exchange (<b>224</b>), at which time it is translated to a formal transaction request object specific to the blockchain by the web3 module (<b>180</b>) through a selection of target blockchain network (remote procedural calls (RPC), Websocket, etc.) and domain specific language (DSL) formatting, building, and/or compiling of the generic transaction request to a formal web3 transaction request object that is then dispatched to its target blockchain (<b>226</b>).</p><p id="p-0045" num="0044">The user's managed wallet address (<b>135</b>A, <b>1358</b>, <b>135</b>C, etc.) is managed by the system, a custodial wallet, and the system can sign and dispatch the request on behalf of the managed account (i.e., user). The completion of this process (<b>230</b>) results in a change to the internal state of a specific smart contract of a specific blockchain, wherein such changes and/or transactions are publicly viewable and/or verifiable via the explorer of the specific blockchain, denoting the end of a single meta-transaction (<b>250</b>). Therefore, the meta-transaction in the example is bound to the role of the system as a reserve-based exchange, whereby an exchange occurs as a fractional amount of a bulk purchase for the sole objective to fulfill the necessary charges involved in a specific transaction (i.e., transaction fee, gas, etc.) from a selected context by the user. However, this example does not limit the ability of other exchange mechanisms including custom reserves and bulk purchases for multiple or many transactions.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart depicting a cross-blockchain transaction initiated by an oracle on a first smart contract on a first blockchain. A preceding event on the first smart contract, based on an independent interaction of a user with the first contract, causes an oracle transmission (<b>310</b>). For example, an atomic swap consisting of a condition for a user to send a specified amount of a specified first token to the first smart contract, initiating a transaction fulfilling the essence of a bargain, consisting of a transfer of a second token from a second smart contract owned by the owner of the first smart contract, and where the second contract is under a lock preventing other transactions, ensuring the success of the swap, via the system's management of the owner's managed account.</p><p id="p-0047" num="0046">The oracle consists of a first action defined by a first unique identifier and first URI that targets a pre-defined, pre-configured, and/or pre-implemented aspect of the API to process an intended result. The transmission is received by an oracle module (<b>136</b>) that utilizes the first unique identifier, first uniform resource identifier (URI), and the identification of an address via a first web3 (<b>180</b>) query of the first smart contract, comprising a query for a first action (<b>312</b>) that identifies a smart contract and/or token for transaction (<b>314</b>) including its blockchain and ownership data, consisting of a managed account and managed wallet. A modification of the meta-transaction exists whereby a token exchange is invoiced (<b>318</b>) and where the owner (i.e., managed account) is notified of the oracle initiated cross-blockchain transaction.</p><p id="p-0048" num="0047">There currently is no mechanism for cross-blockchain transfers of original tokens. The mechanism in use, called a &#x201c;bridge&#x201d;, creates a new representation of an original token on a different blockchain. The new representation has a different creation date, which is severely detrimental in many use cases such as legal, business, etc. Our solution results in the transfer of an original token, for example by transferring the ownership of a token to a purchaser. The purchaser's address is obtained by the oracle (i.e., string to oracle to address in web3) or may be mapped to the appropriate destination blockchain by the system's managed account and managed wallet methods.</p><p id="p-0049" num="0048">The cross-blockchain interactions and/or transactions resulting from the oracle system of the present disclosure can also be represented as a generic form of cross-blockchain smart contract interactions. The distinguishing aspect of the present disclosure is the ability to expand existing cross-blockchain interactions on layer <b>1</b> and layer <b>2</b> blockchains, the methods thereof resulting in alternate and expanded operations of existing bridges. For example, the embodiment can be used to create alternate representations of an original asset, resulting from the rules encoded within a smart contract, on multiple blockchains for activities including leasing or borrowing.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of the reserve of the present disclosure, illustrating a reserve system comprising one localized reserve (<b>410</b>) with one wallet (<b>140</b>) consisting of unique addresses for each of a selection of blockchains (<b>145</b>A, <b>1458</b>, <b>145</b>C, etc.) and one regional reserve (<b>160</b>) comprising zero or more wallets (<b>425</b>A, <b>4258</b>, <b>425</b>C, etc.) each consisting of unique addresses for each of a selection of blockchains. A configurable logic controller (<b>450</b>; <b>450</b>A and <b>450</b>B) defines the rules for exchanges within wallets of a regional reserve.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> is a block diagram illustrating an example process of a user (<b>110</b>) generating, compiling, and deploying custom smart contracts to various decentralized computing networks. The smart contract system begins by the selection of a templated smart contracts (<b>510</b>) comprised of smart contract templates (<b>512</b>A, <b>512</b>B, <b>512</b>C, etc.) from standardized and non-standardized smart contract forms as an abstraction consisting of data structures that define function names, function argument types, function argument names, and return type(s) return name(s). The types supported include signed integers, unsigned integers, address, boolean, string, and bytes. For example, the selection of a NFT smart contract as a standardized smart contract and an escrow smart contract as a non-standardized smart contract type. The permissions for interfaces include at least one of ownership, allowable by assignment, and public for the interfaces of a smart contract other than those restricted to ownership for security purposes.</p><p id="p-0052" num="0051">The optional selection of an oracle (<b>515</b>), whereby a corresponding oracle of a selected template (<b>516</b>A, <b>516</b>B, <b>516</b>C, etc.) includes a pre-configured URI and inputs for at least one of a unique identifier of a NFT for transfer and one function invocation of a smart contract owned by the user (<b>110</b>) and a condition, for example sale price of a selected NFT. The user input data defines the invocation of a function of a target smart contract and/or token, for example the transfer of at least one of: the transfer of ownership of a smart contract, the transfer of ownership of an NET, and/or the transfer of fungible tokens. Additional configurations for the customization of a smart contract exists from textual and/or graphical DSL editors (<b>520</b>) that comprise the final form of a first abstract custom contract (<b>530</b>) that is available for deployment. The configurations are governed by the creation of functions, limited by the types of inputs and return arguments, and built-in features, for example encryption, decryption, hashing, and storage (IPFS, local, private, etc.).</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> is a continuation of <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, a block diagram, illustrating the compilation and deployment of a user-defined intermediate and/or abstract representation of a custom smart contract whereby the user (<b>110</b>) selects a blockchain from a list of blockchains (<b>540</b>) each with a corresponding map to generate a formal smart contract (<b>545</b>A, <b>5458</b>, <b>545</b>C, etc.). A build and/or compilation pipeline (<b>550</b>A, <b>5508</b>, <b>550</b>C, etc.), relative to at least a first selection of a deployment blockchain, results in generating the smart contract (<b>560</b>A, <b>5608</b>, <b>560</b>C, etc.) and configuring the user's managed wallet for at least one meta-transaction (<b>570</b>A, <b>5708</b>, <b>570</b>C, etc.) that results in the deployment of the at least one smart contract to its corresponding blockchain (<b>580</b>A, <b>5808</b>, <b>580</b>C, etc.).</p><p id="p-0054" num="0053">The underlying assets that comprise the amount and type of the intended native- or cross-blockchain transfer are locked by the system to ensure their availability for a successful oracle transaction and may be unlocked by destroying the activity of the first deployed smart contract and first deployed oracle. Therefore, the assets eligible for transfer must be owned by the managed wallet of the system.</p><p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart of an example SaaS and/or API deployment. The enhanced set of features relating to custom smart contract management (<b>620</b>), creation (<b>630</b>), and deployment (<b>645</b>) are made available to users with team and/or organization management aspects for enterprise operations. For example, a human resource department of an organization may create and deploy one or more custom smart contracts for bounties that conditionally reward referrals for job positions at their organization. The distinguishing feature of this embodiment is a wide or full range of features and/or selections for between one and many interactions on between one and many smart contracts.</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart of an example decentralized application (dApp), whereby a narrowly scoped number of features and/or smart contracts (<b>710</b>) are made available for interaction. For example, a marketplace whereby a user may place their assets available for sale. The distinguishing aspect of this embodiment is the narrow scope of features, more limited selections made available to a user (<b>110</b>), and the deployment in multiplatform format for interaction with mobile, tablet, desktop, and/or embedded devices. In the case of embedded devices and APIs, decentralized applications may be initiated autonomously by sensoral, temporal, and/or computational thresholds, determinations, and/or conditions, otherwise to be available for network (i.e., headless) operations. Multiplatform GUI dApps display only the necessary features and/or selections for between one and few interactions on between one and few smart contracts.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram illustrating decentralized finance aspects of the present disclosure. Native tokens of a blockchain are bound (<b>805</b>) to a smart contract at deployment (<b>810</b>) and/or native tokens of a blockchain are bound (<b>806</b>) to a smart contract generating a token (<b>820</b>), minting (e.g., creating an NFT), and/or native tokens of a blockchain are bound (<b>807</b>) to a token (e.g., NFT) via direct transfer. The interface of a token and/or smart contract (<b>850</b>) allows the bound native token to be transferred to a destination under a transaction that includes permission (e.g., ownership, allowable, etc.). With this mechanism, native- and cross-blockchain interactions are represented as embodiments of the present disclosure as in the use cases above with meta-transactions and oracle initiated meta-transactions, respectively. In this embodiment, the exchange also includes bulk exchange of fiat currencies for cryptocurrencies (i.e., native tokens) for binding to a smart contract and/or token on an as-needed basis to meet requirements of a desired transaction and outcome.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A multi-blockchain smart contract management system for enabling transactions across one or more blockchains, each of the blockchains having a reserve of a selection of at least one reserve each with a unique identifier and at least one address corresponding to at least one blockchain, wherein the exchange consists of a collection of various tokens of various blockchains associated therewith, the multi-blockchain smart contract management system comprising: (1) one or more processors; (2) one or more memories; (3) one or more computer-readable hardware storage devices, the one or more computer-readable hardware storage devices containing program code executable by the one or more processors via the one or more memories to implement a method for a meta-transactional exchange, the method comprising: (a) authenticating, by the meta-transactional exchange, an access request by a first user to the meta-transactional exchange, comprising the steps of: (1) receiving, by the meta-transactional exchange from the first user, an authentication request including first user credential information associated with the first user; (2) determining, by the meta-transactional exchange, that the first user is authorized to access the meta-transactional exchange based at least in part on the first user credential information; (3) obtaining, by the meta-transactional exchange, a first wallet associated with the first user; (4) obtaining, by the meta-transactional exchange, at least a first smart contract associated with the first user; (5) generating, by the meta-transactional exchange, an authentication token granting the first user access to the meta-transactional exchange API; (b) receiving, by the meta-transactional exchange from the first user, a first transaction request from the selection of at least one function of at least a first smart contract, comprising of: (1) determining, by the first identifier of the first smart contract, a first blockchain associated with a first native token; (2) determining, by the meta-transactional exchange, a first wallet address of the first wallet based on the selection of the first blockchain; (3) processing, by the meta-transactional exchange, a first encoding of the first transaction request that is associated with the first user and stored in a processing queue; (4) obtaining, by the meta-transactional exchange, RPC connection details and a connection of the first wallet address to the first blockchain; (c) determining, by the meta-transactional exchange from the first transaction request, the first amount of a transaction fee (&#x201c;gas&#x201d;), comprising at least: (1) obtaining, by an analytics module, the current price of the first native token of the first blockchain; (2) obtaining, by an analytics module, the suggested gas fee based on the first smart contract of the first blockchain; (3) processing, by an analytics module, the mathematical and statistical minima for eliminating the risk of losing the first native token to &#x201c;out-of-gas&#x201d; errors on the first blockchain; (d) receiving, by the meta-transactional exchange from a merchant processor module, a payment in fiat from the first user, comprising: (1) transmitting, by a merchant services provider from the device of the first user, a payment of the first amount in fiat; (2) receiving, by the meta-transactional exchange from the third-party module of the merchant service provider, a signal that a payment of the first amount was rendered by the first user; (e) transmitting, by the meta-transactional exchange, a first transfer of the first amount from the reserve to the first wallet address; (f) determining, by the meta-transactional exchange, the first wallet address received the first amount; (g) processing, by the meta-transactional exchange, the preparation of the first meta-transaction of the first transaction request; (h) transmitting, by the meta-transactional exchange, the execution of the first meta-transaction comprising: (1) transmitting, by the first meta-transaction, the second amount from the first wallet address to the first blockchain; (2) transmitting, by the first meta-transaction, the first instruction of the first meta-transaction to the first blockchain; (i) determining, by the meta-transactional exchange, the completion status of the first meta-transaction; (j) processing, by the meta-transactional exchange, the removal of the first transaction request from the processing queue; (k) obtaining, by the meta-transactional exchange, the difference of the first amount and second amount as an accrual of current balances of the first wallet.</claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the multi-blockchain smart contract management system includes an inbound oracle.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the at least first smart contract includes at least one of a standardized (fungible token, non-fungible token, etc.) and custom smart contract.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the custom smart contract includes an oracle.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the outbound oracle transmission includes targeting a selection of blockchains including at least the on-chain host of the smart contract.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the selection of blockchains includes decentralized computing blockchain networks with at least one smart contract.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the outbound oracle transmission includes at least one of a transfer or invocation of a function of a smart contract.</claim-text></claim></claims></us-patent-application>