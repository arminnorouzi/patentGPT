<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007314A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007314</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17850919</doc-number><date>20220627</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>218</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>266</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>654</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>643</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>21805</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>266</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>654</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>643</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEM AND METHOD OF SERVER-SIDE DYNAMIC SPATIAL AND TEMPORAL ADAPTATIONS FOR MEDIA PROCESSING AND STREAMING</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63218432</doc-number><date>20210705</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>MEDIATEK Singapore Pte. Ltd.</orgname><address><city>Singapore</city><country>SG</country></address></addressbook><residence><country>SG</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Wang</last-name><first-name>Xin</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Chen</last-name><first-name>Lulin</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>MEDIATEK Singapore Pte. Ltd.</orgname><role>03</role><address><city>Singapore</city><country>SG</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The techniques described herein relate to methods, apparatus, and computer readable media configured to provide video data for immersive media implemented by a server in communication with a client device. A request to access a stream of media data associated with immersive content at a point in time the client is first accessing the stream of media data for the immersive content is received from the client device. An initial portion of media data is determined, starting from the point in time the client requests to access, for the immersive content for delivery to the client device. In response to the request to access the stream of media data, the initial portion of media data is transmitted to the client device.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="83.14mm" wi="158.75mm" file="US20230007314A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="244.09mm" wi="164.76mm" orientation="landscape" file="US20230007314A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="208.70mm" wi="167.13mm" orientation="landscape" file="US20230007314A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="263.74mm" wi="178.65mm" orientation="landscape" file="US20230007314A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="228.35mm" wi="136.48mm" orientation="landscape" file="US20230007314A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="213.02mm" wi="147.83mm" orientation="landscape" file="US20230007314A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="232.66mm" wi="119.04mm" orientation="landscape" file="US20230007314A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="211.33mm" wi="151.21mm" orientation="landscape" file="US20230007314A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="237.24mm" wi="151.98mm" orientation="landscape" file="US20230007314A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="211.33mm" wi="152.57mm" orientation="landscape" file="US20230007314A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="241.22mm" wi="129.46mm" orientation="landscape" file="US20230007314A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="211.24mm" wi="152.57mm" orientation="landscape" file="US20230007314A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="258.83mm" wi="164.42mm" orientation="landscape" file="US20230007314A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="233.17mm" wi="145.80mm" orientation="landscape" file="US20230007314A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="257.39mm" wi="150.03mm" orientation="landscape" file="US20230007314A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="238.17mm" wi="132.59mm" orientation="landscape" file="US20230007314A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="186.52mm" wi="127.59mm" orientation="landscape" file="US20230007314A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="187.37mm" wi="111.68mm" orientation="landscape" file="US20230007314A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="208.62mm" wi="161.37mm" orientation="landscape" file="US20230007314A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="260.69mm" wi="164.59mm" orientation="landscape" file="US20230007314A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="260.86mm" wi="164.59mm" orientation="landscape" file="US20230007314A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This Application claims priority under 35 U.S.C. &#xa7; 119(e) to U.S. Provisional Application No. 63/218,432, filed Jul. 5, 2021, and entitled &#x201c;SYSTEM AND METHOD OF SERVER-SIDE DYNAMIC SPATIAL AND TEMPORAL ADAPTATIONS FOR MEDIA PROCESSING AND STREAMING,&#x201d; which is hereby incorporated by reference herein in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The techniques described herein relate generally to server-side dynamic spatial and temporal adaptation for media processing and streaming, including for streaming of 2D content and for live immersive content.</p><heading id="h-0003" level="1">BACKGROUND OF INVENTION</heading><p id="p-0004" num="0003">Various types of 3D content and multi-directional content exist. For example, omnidirectional video is a type of video that is captured using a set of cameras, as opposed to just a single camera as done with traditional unidirectional video. For example, cameras can be placed around a particular center point, so that each camera captures a portion of video on a spherical coverage of the scene to capture <b>360</b>-degree video. Video from multiple cameras can be stitched, possibly rotated, and projected to generate a projected two-dimensional picture representing the spherical content. For example, an equal rectangular projection can be used to put the spherical map into a two-dimensional image. This can be then further processed, for example, using two-dimensional encoding and compression techniques. Ultimately, the encoded and compressed content is stored and delivered using a desired delivery mechanism (e.g., thumb drive, digital video disk (DVD), file download, digital broadcast, and/or online streaming). Such video can be used for virtual reality (VR) and/or 3D video.</p><p id="p-0005" num="0004">At the client side, when the client processes the content, a video decoder decodes the encoded and compressed video and performs a reverse-projection to put the content back onto the sphere. A user can then view the rendered content, such as using a head-mounted viewing device. The content is often rendered according to a user's viewport, which represents an angle at which the user is looking at the content. The viewport may also include a component that represents the viewing area, which can describe how large, and in what shape, the area is that is being viewed by the viewer at the particular angle.</p><p id="p-0006" num="0005">When the video processing is not done in a viewport-dependent manner, such that the video encoder and/or decoder do not know what the user will actually view, then the whole encoding, delivery and decoding process will process the entire spherical content. This can allow, for example, the user to view the content at any particular viewport and/or area, since all of the spherical content is encoded, delivered and decoded. However, processing all of the spherical content can be compute intensive and can consume significant bandwidth.</p><p id="p-0007" num="0006">Online streaming techniques, such as dynamic adaptive streaming over HTTP (DASH), HTTP Live Streaming (HLS), etc., can provide adaptive bitrate media streaming techniques (including multi-directional content and/or other media content). DASH can, for example, allow a client to request one of multiple versions of content that are available in a manner such that the requested content is chosen by the client to meet the client's current needs and/or processing capabilities. However, such streaming techniques require the client to perform such adaptation, which can place a heavy burden on client devices and/or may not be achievable by low-cost devices.</p><heading id="h-0004" level="1">SUMMARY OF INVENTION</heading><p id="p-0008" num="0007">In accordance with the disclosed subject matter, apparatus, systems, and methods are provided, such as for implementing dynamic spatial and temporal adaptation for media processing and streaming, including for streaming of 2D content and for live immersive content.</p><p id="p-0009" num="0008">Some embodiments relate to a method for providing video data for immersive media implemented by a server in communication with a client device, the method including receiving, from the client device, a request to access a stream of media data associated with immersive content at a point in time the client is first accessing the stream of media data for the immersive content, determining an initial portion of media data, starting from the point in time the client requests to access, for the immersive content for delivery to the client device, and transmitting, in response to the request to access the stream of media data, the initial portion of media data..</p><p id="p-0010" num="0009">According to some embodiments, the request to access the stream of media data is an HTTP request and is received from the client device prior to the server transmitting the client device any manifest data for the immersive media content, and the initial portion of media data is transmitted prior to, or in conjunction with, transmitting first manifest data for the immersive content to the client device.</p><p id="p-0011" num="0010">According to some embodiments, the initial portion of media data comprises one or more low-quality media data segments. The initial portion of media data can further include an initialization segment.</p><p id="p-0012" num="0011">According to some embodiments, determining the initial portion of the media data for the immersive content includes accessing media data comprising a plurality of media tracks, each media track comprising different media data corresponding to different spatial portions of the immersive content, determining, based on the request, a group of media tracks from the plurality of media tracks corresponding to a viewport of the client device, and generating a single track adapted to comprise the initial portion of media data and transmitting the adapted track comprising the portion of media data to the client device. The initial portion of media data can include a plurality of stitched tiles, each corresponding one of the differential portions of the immersive content, from the plurality of media tracks.</p><p id="p-0013" num="0012">According to some embodiments, the immersive content is live immersive content and the point in time is the latest time of the immersive content that the server possesses. The request to access the stream of media data can include one or more parameters of the live immersive content, the client device, or some combination thereof. The one or more parameters of the live immersive content can include a three-dimensional size of the live immersive content. According to some embodiments, the method can include determining that the live immersive content is not available, and transmitting an indication to the client device that content at the point in time of accessing a stream of media data is not available.</p><p id="p-0014" num="0013">Some embodiments relate to a method for obtaining video data for immersive media implemented by a client device in communication with a server, the method including accessing a stream of media data for immersive content at a point in time the client device is first accessing the stream of media data for the immersive content, comprising transmitting, to the server, a request to access the immersive content at the point in time, and receiving, in response to the request to access the stream of media data, an initial portion of media data for the immersive content, starting from the point in time the client requests to access.</p><p id="p-0015" num="0014">In some embodiments, the request to access the stream of media data is an HTTP request and is transmitted by the client device prior to receiving any manifest data for the immersive media content from the server, and the initial portion of media data is received prior to, or in conjunction with, receiving first manifest data for the immersive content from the server. The initial portion of media data can include one or more low-quality media data segments. The initial portion of media data can further include an initialization segment.</p><p id="p-0016" num="0015">In some embodiments, the initial portion of media data includes a single track adapted to comprise the initial portion of media data, wherein the portion of media data is adapted for the client device based on a viewport of the client device, and the portion of media data is generated from a group of tracks corresponding to the viewport, wherein the group of tracks each comprise different media data corresponding to different spatial portions of the immersive media.</p><p id="p-0017" num="0016">In some embodiments, the immersive content is live immersive content and the point in time is the latest time of the immersive content that the server possesses. The request for the portion of media data can include one or more parameters of the client device. The one or more parameters include a three-dimensional size of a viewport of the client device.</p><p id="p-0018" num="0017">In some embodiments, the method further includes receiving an indication that live immersive content requested at the point in time of accessing a stream of media data is not available, and transmitting a request for live immersive content at a point in time prior to the client accessing the stream of media data.</p><p id="p-0019" num="0018">Some embodiments relate to a system, including at least one processor configured to perform a method for providing video data for immersive media implemented by a server in communication with a client device, the method including receiving, from the client device, a request to access a stream of media data associated with immersive content at a point in time the client is first accessing the stream of media data for the immersive content, determining an initial portion of media data, starting from the point in time the client requests to access, for the immersive content for delivery to the client device, and transmitting, in response to the request to access the stream of media data, the initial portion of media data.</p><p id="p-0020" num="0019">There has thus been outlined, rather broadly, the features of the disclosed subject matter in order that the detailed description thereof that follows may be better understood, and in order that the present contribution to the art may be better appreciated. There are, of course, additional features of the disclosed subject matter that will be described hereinafter and which will form the subject matter of the claims appended hereto. It is to be understood that the phraseology and terminology employed herein are for the purpose of description and should not be regarded as limiting.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0021" num="0020">In the drawings, each identical or nearly identical component that is illustrated in various figures is represented by a like reference character. For purposes of clarity, not every component may be labeled in every drawing. The drawings are not necessarily drawn to scale, with emphasis instead being placed on illustrating various aspects of the techniques and devices described herein.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an exemplary video coding configuration, according to some embodiments.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a viewport dependent content flow process for virtual reality (VR) content, according to some examples.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an exemplary track hierarchical structure, according to some embodiments.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows an example of a track derivation operation, according to some examples.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an exemplary configuration of an adaptive streaming system, according to some embodiments.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows an exemplary media presentation description, according to some examples.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows an exemplary configuration of a client-side adaptive streaming system, according to some embodiments.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows an example of end-to-end streaming media processing, according to some embodiments.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows an exemplary configuration of a server-side adaptive streaming system, according to some embodiments.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows an example of end-to-end streaming media processing using server-side adaptive streaming, according to some embodiments.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows an exemplary configuration of a mixed-side adaptive streaming system, according to some embodiments.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows an exemplary list of parameters for track selection or switching, according to some embodiments.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>13</b></figref> shows exemplary viewport/viewpoint related data structure attributes, according to some embodiments.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows an exemplary list of viewport, viewpoint, and spatial-object related data structure attributes for spherical, cuboid, and planar regions, according to some embodiments.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>15</b></figref> shows an exemplary list of temporal adaptation related attributes that may be used by a client device, such as to indicate to the server if a media request is for tuning into a live event or joining fast into a stream, according to some embodiments.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>16</b></figref> shows multiple representations in an adaptation set for client-side adaptive streaming, according to some embodiments.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>17</b></figref> shows a single representation in an adaptation set for server-side adaptive streaming, according to some embodiments.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>18</b></figref> shows the viewport dependent content flow process of <figref idref="DRAWINGS">FIG. <b>2</b></figref> for VR content modified for a server-side streaming adaptation, according to some examples.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>19</b></figref> shows an exemplary computerized method for a server in communication with a client device, according to some embodiments.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>20</b></figref> shows an exemplary computerized method for a client device in communication with a server, according to some embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF INVENTION</heading><p id="p-0042" num="0041">Conventional adaptive media streaming techniques rely on the client device to perform adaptation, which the client typically performs based on adaptation parameters that are determined by and/or available to the client. For example, the client can receive a description of the available media (e.g., including different available bitrates), determine its processing capabilities and/or network bandwidth, and use the determined information to select a best available bitrate from the available bitrates that meets the client's current processing capabilities. The client can update the associated adaptation parameters over time, and adjust the requested bitrate accordingly to dynamically adjust the content for changing client conditions.</p><p id="p-0043" num="0042">Deficiencies can exist with conventional client-side streaming adaptation approaches. In particular, such paradigms place the burden of content adaptation on the client, such that the client is responsible for obtaining its relevant processing parameters and processing the available content to select among the available representations to find the best representation for the client's parameters. The adaptation process is iterative, such that the client must repeatedly perform the adaptation process over time.</p><p id="p-0044" num="0043">In particular, client-side driven streaming adaptation, in which the client requests content based on the user's viewport, often requires the client to make multiple requests for tiles and/or portions of pictures within a user's viewport at any given time (e.g., which may only be a small portion of the available content). Accordingly, the client subsequently receives and processes the various tiles or portions of the pictures, which the client must combine for display. This is generally referred to as client-side dynamic adaptation (CSDA). Because CSDA approaches require the client to download multiple data for multiple tiles, the client is often required to stitch the tiles on-the-fly at the client device. This can therefore require seamless stitching of tile segments on the client side. CSDA approaches also require consistent quality management for retrieved and stitched tile segments, e.g., to avoid stitching of tiles of different qualities. Some CSDA approaches attempt to predict a user's movement (and thus the viewport), which typically requires buffer management to buffer tiles related to the users predicted movement, and possibly downloading tiles that may not ultimately be used (e.g., if the user's movement is not as predicted).</p><p id="p-0045" num="0044">Accordingly, a heavy computational and processing burden is placed on the client, and it requires the client device to have sufficient minimum-processing capabilities. Such client-side burdens can be further compounded based on certain types of content. For example, some content (e.g., immersive media content) requires the client to perform various compute-intensive processing steps in order to decode and render the content to the user. To address these and other problems with conventional client-side driven streaming adaptation approaches, the techniques described herein provide for server-side adaptation where a media and/or network server may perform aspects of streaming adaptation that are otherwise conventionally performed by the client device.</p><p id="p-0046" num="0045">In some embodiments, the client device can provide rendering information to the server. For example, in some embodiments the client device can provide viewport information to the server for immersive media scenarios. For example, the viewport information may include viewport direction, size, height, and/or width. The server can use the viewport information to construct the viewport for the client at the server-side, instead of requiring the client device to perform the stitching and construction of the viewport. The server may then subsequently determine the regions and/or tiles corresponding to the viewport and perform stitching of the regions and/or tiles Accordingly, spatial media processing tasks can be moved to the server-side of adaptive streaming implementations. According to some embodiments, in response to detecting that the viewport has changed, the client device may transmit second parameters to the server.</p><p id="p-0047" num="0046">In some embodiments, the techniques described herein for derived track selection and track switching can be used to enable track selection and switching, at run time, from an alternate track group and a switch track group, respectively for delivery to the client device. Therefore, a server can use a derived track that includes selection and switching derivation operations that allow the server to construct a single media track for the user based on the available media tracks (e.g., from among media tracks of different bitrates). Transformation operations are described herein that provide for track derivation operations that can be used to perform track selection and track switching at the sample level (e.g., not the track level). As described herein, a number of input tracks (e.g., tracks of different bitrates, qualities, etc.) can be processed by track selection derivation operations to select samples from one of the input tracks at the sample level to generate the media samples of the output track. Accordingly, the selection-based track derivation techniques described herein allow for the selection of samples from a track in a group of tracks at the time of the derivation operation. In some embodiments, the selection-based track derivation can provide for a track encapsulation of track samples as the output from the derivation operation(s) of a derived track, where the track samples are selected or switched from a group of tracks. As a result, a track selection derivation operation can provide samples from any of the input tracks to the derivation operation as specified by the transformations of the derived track to generate the resulting track encapsulation of the samples.</p><p id="p-0048" num="0047">In the following description, numerous specific details are set forth regarding the systems and methods of the disclosed subject matter and the environment in which such systems and methods may operate, etc., in order to provide a thorough understanding of the disclosed subject matter. In addition, it will be understood that the examples provided below are exemplary, and that it is contemplated that there are other systems and methods that are within the scope of the disclosed subject matter.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an exemplary video coding configuration <b>100</b>, according to some embodiments. Cameras <b>102</b>A-<b>102</b>N are N number of cameras, and can be any type of camera (e.g., cameras that include audio recording capabilities, and/or separate cameras and audio recording functionality). The encoding device <b>104</b> includes a video processor <b>106</b> and an encoder <b>108</b>. The video processor <b>106</b> processes the video received from the cameras <b>102</b>A-<b>102</b>N, such as stitching, projection, and/or mapping. The encoder <b>108</b> encodes and/or compresses the two-dimensional video data. The decoding device <b>110</b> receives the encoded data. The decoding device <b>110</b> may receive the video as a video product (e.g., a digital video disc, or other computer readable media), through a broadcast network, through a mobile network (e.g., a cellular network), and/or through the Internet. The decoding device <b>110</b> can be, for example, a computer, a hand-held device, a portion of a head-mounted display, or any other apparatus with decoding capability. The decoding device <b>110</b> includes a decoder <b>112</b> that is configured to decode the encoded video. The decoding device <b>110</b> also includes a renderer <b>114</b> for rendering the two-dimensional content back to a format for playback. The display <b>116</b> displays the rendered content from the renderer <b>114</b>.</p><p id="p-0050" num="0049">Generally, 3D content can be represented using spherical content to provide a <b>360</b> degree view of a scene (e.g., sometimes referred to as omnidirectional media content). While a number of views can be supported using the 3D sphere, an end user typically just views a portion of the content on the 3D sphere. The bandwidth required to transmit the entire 3D sphere can place heavy burdens on a network, and may not be sufficient to support spherical content. It is therefore desirable to make 3D content delivery more efficient. Viewport dependent processing can be performed to improve 3D content delivery. The 3D spherical content can be divided into regions/tiles/sub-pictures, and only those related to viewing screen (e.g., viewport) can be transmitted and delivered to the end user.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a viewport dependent content flow process <b>200</b> for VR content, according to some examples. As shown, spherical viewports <b>201</b> (e.g., which could include the entire sphere) undergo stitching, projection, mapping at block <b>202</b> (to generate projected and mapped regions), are encoded at block <b>204</b> (to generate encoded/transcoded tiles in multiple qualities), are delivered at block <b>206</b> (as tiles), are decoded at block <b>208</b> (to generate decoded tiles), are constructed at block <b>210</b> (to construct a spherical rendered viewport), and are rendered at block <b>212</b>. User interaction at block <b>214</b> can select a viewport, which initiates a number of &#x201c;just-in-time&#x201d; process steps as shown via the dotted arrows.</p><p id="p-0052" num="0051">In the process <b>200</b>, due to current network bandwidth limitations and various adaptation requirements (e.g., on different qualities, codecs and protection schemes), the 3D spherical VR content is first processed (stitched, projected and mapped) onto a 2D plane (by block <b>202</b>) and then encapsulated in a number of tile-based (or sub-picture-based) and segmented files (at block <b>204</b>) for delivery and playback. In such a tile-based and segmented file, a spatial tile in the 2D plane (e.g., which represents a spatial portion, usually in a rectangular shape of the 2D plane content) is typically encapsulated as a collection of its variants, such as in different qualities and bitrates, or in different codecs and protection schemes (e.g., different encryption algorithms and modes). In some examples, these variants correspond to representations within adaptation sets in MPEG DASH. In some examples, it is based on user's selection on a viewport that some of these variants of different tiles that, when put together, provide a coverage of the selected viewport, are retrieved by or delivered to the receiver (through delivery block <b>206</b>), and then decoded (at block <b>208</b>) to construct and render the desired viewport (at blocks <b>210</b> and <b>212</b>).</p><p id="p-0053" num="0052">As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the viewport notion is what the end-user views, which involves the angle and the size of the region on the sphere. For <b>360</b> degree content, generally, the techniques deliver the needed tiles/sub-picture content to the client to cover what the user will view. This process is viewport dependent because the techniques only deliver the content that covers the current viewport of interest, not the entire spherical content. The viewport (e.g., a type of spherical region) can change and is therefore not static. For example, as a user moves their head, then the system needs to fetch neighboring tiles (or sub-pictures) to cover the content of what the user wants to view next.</p><p id="p-0054" num="0053">A flat file structure for the content could be used, for example, for a video track for a single movie. For VR content, there is more content than is sent and/or displayed by the receiving device. For example, as discussed herein, there can be content for the entire 3D sphere, where the user is only viewing a small portion. In order to encode, store, process, and/or deliver such content more efficiently, the content can be divided into different tracks. <figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an exemplary track hierarchical structure <b>300</b>, according to some embodiments. The top track <b>302</b> is the 3D VR spherical content track, and below the top track <b>302</b> is the associated metadata track <b>304</b> (each track has associated metadata). The track <b>306</b> is the 2D projected track. The track <b>308</b> is the 2D big picture track. The region tracks are shown as tracks <b>310</b>A through <b>310</b>R, generally referred to as sub-picture tracks <b>310</b>. Each region track <b>310</b> has a set of associated variant tracks. Region track <b>310</b>A includes variant tracks <b>312</b>A through <b>312</b>K. Region track <b>310</b>R includes variant tracks <b>314</b>A through <b>314</b>K. Thus, as shown by the track hierarchy structure <b>300</b>, a structure can be developed that starts with physical multiple variant region tracks <b>312</b>, and the track hierarchy can be established for region tracks <b>310</b> (sub-picture or tile tracks), projected and packed 2D tracks <b>308</b>, projected 2D tracks <b>306</b>, and VR 3D video tracks <b>302</b>, with appropriate metadata tracks associated them.</p><p id="p-0055" num="0054">In operation, the variant tracks include the actual picture data. The device selects among the alternating variant tracks to pick the one that is representative of the sub-picture region (or sub-picture track) <b>310</b>. The sub-picture tracks <b>310</b> are tiled and composed together into the 2D big picture track <b>308</b>. Then ultimately the track <b>308</b> is reverse-mapped, e.g., to rearrange some of the portions to generate track <b>306</b>. The track <b>306</b> is then reverse-projected back to the 3D track <b>302</b>, which is the original 3D picture.</p><p id="p-0056" num="0055">The exemplary track hierarchical structure can include aspects described in, for example: m39971, &#x201c;Deriving Composite Tracks in ISOBMFF&#x201d;, January 2017 (Geneva, CH); m40384, &#x201c;Deriving Composite Tracks in ISOBMFF using track grouping mechanisms&#x201d;, April 2017 (Hobart, AU); m40385, &#x201c;Deriving VR Projection and Mapping related Tracks in ISOBMFF;&#x201d; m40412, &#x201c;Deriving VR ROI and Viewport related Tracks in ISOBMFF&#x201d;, MPEG 118<sup>th </sup>meeting, April 2017, which are hereby incorporated by reference herein in their entirety. In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, rProjection, rPacking, compose and alternate represent the track derivation TransformProperty items reverse &#x2018;proj&#x2019;, reverse &#x2018;pack&#x2019;, &#x2018;cmpa&#x2019; and &#x2018;cmpl&#x2019;, respectively, for illustrative purposes and are not intended to be limiting. The metadata shown in the metadata tracks are similarly for illustrative purposes and are not intended to be limiting. For example, metadata boxes from OMAF can be used as described in w17235, &#x201c;Text of ISO/IEC FDIS 23090-2 Omnidirectional Media Format,&#x201d; 120th MPEG Meeting, October 2017 (Macau, China), which is hereby incorporated by reference herein in its entirety.</p><p id="p-0057" num="0056">The number of tracks shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> is intended to be illustrative and not limiting. For example, in cases where some intermediate derived tracks are not necessarily needed in the hierarchy as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the related derivation steps can be composed into one (e.g., where the reverse packing and reverse projection are composed together to eliminate the existence of the projected track <b>306</b>).</p><p id="p-0058" num="0057">A derived visual track can be indicated by its containing sample entry of type &#x2018;dtrk&#x2019;. A derived sample contains an ordered list of the operations to be performed on an ordered list of input images or samples. Each of the operations can be specified or indicated by a Transform Property.</p><p id="p-0059" num="0058">A derived visual sample is reconstructed by performing the specified operations in sequence. Examples of transform properties in ISOBMFF that can be used to specify a track derivation, including those in the latest ISOBMFF Technologies Under Consideration (TuC) (see, e.g., N17833, &#x201c;Technologies under Consideration for ISOBMFF&#x201d;, July 2018, Ljubljana, S K, which is hereby incorporated by reference herein in its entirety), include: the &#x2018;idtt&#x2019; (identity) transform property; the &#x2018;clap&#x2019; (clean aperture) transform property; the &#x2018;srot&#x2019; (rotation) transform property; the &#x2018;dslv&#x2019; (dissolve) transform property; the &#x2018;2dcc&#x2019; (ROI crop) transform property; the &#x2018;tocp&#x2019; (Track Overlay Composition) transform property; the &#x2018;tgcp&#x2019; (Track Grid Composition) transform property; the &#x2018;tgmc&#x2019; (Track Grid Composition using Matrix values) transform property; the &#x2018;tgsc&#x2019; (Track Grid Sub-Picture Composition) transform property; the &#x2018;tmcp&#x2019; (Transform Matrix Composition) transform property; the &#x2018;tgcp&#x2019; (Track Grouping Composition) transform property; and the &#x2018;tmcp&#x2019; (Track Grouping Composition using Matrix Values) transform property. All of these track derivations are related to spatial processing, including image manipulation and spatial composition of input tracks.</p><p id="p-0060" num="0059">Derived visual tracks can be used to specify a timed sequence of visual transformation operations that are to be applied to the input track(s) of the derivation operation. The input tracks can include, for example, tracks with still images and/or samples of timed sequences of images. In some embodiments, derived visual tracks can incorporate aspects provided in ISOBMFF, which is specified in w18855, &#x201c;Text of ISO/IEC 14496-12 6<sup>th </sup>edition,&#x201d; October 2019, Geneva, CH, which is hereby incorporated by reference herein in its entirety. ISOBMFF can be used to provide, for example, a base media file design and a set of transformation operations. Exemplary transformation operations include, for example, Identity, Dissolve, Crop, Rotate, Mirror, Scaling, Region-of-interest, and Track Grid, as specified in w19428, &#x201c;Revised text of ISO/IEC CD 23001-16 Derived visual tracks in the ISO base media file format,&#x201d; July 2020, Online, which is hereby incorporated by reference herein in its entirety. Some additional derivation transformation candidates are provided in the TuC w19450, &#x201c;Technologies under Consideration on ISO/IEC 23001-16,&#x201d; July, 2020, Online, which is hereby incorporated by reference herein in its entirety, including composition and immersive media processing related transformation operations.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows an example of a track derivation operation <b>400</b>, according to some examples. A number of input tracks/images one (1) <b>402</b>A, two (2) <b>402</b>B through N <b>402</b>N are input to a derived visual track <b>404</b>, which carries transformation operations for the transformation samples. The track derivation operation <b>406</b> applies the transformation operations to the transformation samples of the derived visual track <b>404</b> to generate a derived visual track <b>408</b> that includes visual samples.</p><p id="p-0062" num="0061">Two track selection-based derivation transformations, namely &#x201c;Selection of One&#x201d; (&#x2018;sell&#x2019;) and &#x201c;Selection of Any&#x201d; (&#x2018;seln&#x2019;), were proposed in m39971, &#x201c;Deriving Composite Tracks in ISOBMFF,&#x201d; January 2017, Geneva, C H, which is hereby incorporated by reference herein in its entirety. However, both of these transformations were designed for the purpose of image composition of input tracks, and therefore require dimensional information for the composition operation.</p><p id="p-0063" num="0062">Conventional adaptive media streaming techniques rely on the client-device to perform any adaptation based on adaptation parameters that are available to the client. Not intending to be limiting, for ease of reference such techniques can be referred to generally as client-side streaming adaptation (CSSA), where a client device is responsible for performing streaming adaptation in adaptive media streaming systems. <figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an exemplary configuration of a generic adaptive streaming system <b>500</b>, according to some embodiments. A streaming client <b>501</b> in communication with a server, such as HTTP server <b>503</b>, may receive a manifest <b>505</b>. The manifest <b>505</b> describes the content (e.g., video, audio, subtitles, bitrates, etc.). In this example, the manifest delivery function <b>506</b> may provide the streaming client <b>503</b> with the manifest <b>505</b>. The manifest delivery function <b>506</b> and the server <b>503</b> may communicate with media presentation preparation module <b>507</b>. The streaming client <b>501</b> can request (and receive) segments <b>502</b> from the server <b>503</b> using, for example, HTTP cache <b>504</b> (e.g., a server-side cache and/or cache of a content delivery network). The segments can be, for example, associated with short media segments, such as 6-10 second long segments. For further details of an illustrative example, see e.g., w18609, &#x201c;Text of ISO/IEC FDIS 23009-1:2014 4th edition&#x201d;, July 2019, Gothenburg, SE, which is hereby incorporated by reference herein in its entirety.</p><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows an exemplary manifest that includes a media presentation description (MPD) <b>650</b>, according to some examples. The manifest can be, for example, the manifest <b>605</b> sent to the streaming client <b>601</b>. The MPD <b>650</b> includes a series of periods that divide the content into different time portions that each have different IDs and start times (e.g., 0 seconds, 100 seconds, <b>300</b> seconds, etc.). Each period can include a set of a number of adaptation sets (e.g., subtitles, audio, video, etc.). Period <b>652</b>A shows how each period can have a set of associated adaptation sets, which in this example includes adaptation set <b>0</b> <b>654</b> for Italian subtitles, adaptation set <b>1</b> <b>656</b> for video, adaptation set <b>2</b> <b>658</b> for English audio, and adaptation set <b>3</b> <b>660</b> for German audio. Each adaptation set can include a set of representations to provide different qualities of the associated content of the adaptation set. As shown in this example, adaptation set <b>1</b> <b>656</b> includes representations <b>1</b>-<b>4</b> <b>662</b>, each with a different supported bitrate (i.e., 500 Kbps, 1 Mbps, 2 Mbps, and 3 Mbps). Each representation can have segment information for the different qualities. As shown, for example, representation <b>3</b> <b>652</b>A includes segment info <b>664</b>, which has a duration of 10 seconds and a template, as well as segment access <b>664</b>, which includes an initialization segment, and a series of media segments (e.g., in this example, ten-second-long media segments).</p><p id="p-0065" num="0064">In conventional adaptive streaming configurations, the streaming client, such as streaming client <b>501</b>, implements the adaptation logic for streaming adaptation. In particular, the streaming client <b>501</b> can receive the MPD <b>650</b>, and select (e.g., based on the client's adaptation parameters, such as bandwidth, CPU processing power, etc.) a representation for each period of the MPD (which may change over time, given different network conditions and/or client processing capabilities), and retrieve the associated segments for presentation to the user. As the client's adaptation parameters change, the client can select different representations accordingly (e.g., lower bitrate data if the available network bandwidth decreases and/or if client processing power is low, or higher bitrate data if the available bandwidth increases and/or if client processing power is high). The adaptation logic may include static as well as dynamic adaptation, in selecting segments from different media streams according to some adaptation parameters. This is described, for example, in &#x201c;MPD Selection Metadata&#x201d; of w18609, which is hereby incorporated by reference herein in its entirety.</p><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows an exemplary configuration <b>700</b> of a client-side dynamic adaptive streaming system. As described herein, the configuration <b>700</b> comprises a streaming client <b>710</b> in communication with server <b>722</b> via HTTP cache <b>761</b>. The server <b>722</b> may be comprised in the media segment delivery function <b>720</b>, which includes segment delivery server <b>721</b>. The segment delivery server <b>721</b> is configured to transmit segments <b>751</b> to the streaming access engine <b>712</b>. The streaming access engine further receives the manifest <b>741</b> from the manifest delivery function <b>730</b>. As described herein, in conventional configurations, the client device <b>710</b> performs the adaptation logic <b>711</b>. The client device <b>710</b> receives the manifest via the manifest delivery function <b>730</b>. The client device <b>710</b> also receives adaptation parameters from streaming access engine <b>712</b> and transmits requests for the selected segments to the streaming accessing engine <b>712</b>. The streaming access engine is also in communication with media engine <b>713</b>. <figref idref="DRAWINGS">FIG. <b>8</b></figref> shows an example of end-to-end streaming media processing, according to some embodiments. In the end-to-end streaming media processing flow <b>800</b>, the client performs the adaptation logic that performs streaming adaptation in terms of selecting (e.g., encrypted) segments from a set of available streams <b>811</b>, <b>812</b>, and <b>813</b>, for example, the segment URLs <b>801</b>-<b>803</b>. As such, each of the encrypted segments <b>801</b>, <b>802</b>, and <b>803</b> are transmitted via the content delivery network (CDN) <b>810</b> and are all transmitted to the client device. The client device may then select the segments.</p><p id="p-0067" num="0066">There are deficiencies with conventional client-side streaming adaptation approaches. In particular, such paradigms are designed so that the client both obtains the information needed for content adaptation (e.g., adaptation parameters), receives a full description of all available content and associated representations (e.g., different bitrates), and processes the available content to select among the available representations to find the one that best suits the client's adaptation parameters. The client must further repeatedly perform the process over time, including updating the adaptation parameters and selecting the same and/or different representations depending on the updated parameters. Accordingly, a heavy burden is placed on the client, and it requires the client device to have sufficient processing capabilities. Further, such configurations often require the client to make a number of requests in order to start a streaming session, including (1) obtaining a manifest and/or other description of the available content, (2) requesting an initialization segment, and (3) then requesting content segments. Accordingly, such approaches often require three or more calls. Assuming for an illustrative example that each call takes approximately <b>500</b> ms, the initiation process can consume one or more seconds of time.</p><p id="p-0068" num="0067">For some types of content, such as immersive media, the client is required to perform compute-intensive operations. For example, conventional immersive media processing delivers tiles to the requesting client. The client device therefore needs to construct a viewport from the decoded tiles in order to render the viewport to the user. Such construction and/or stitching can require a lot of client-side processing power. Further, such approaches may require the client device to receive some content that is not ultimately rendered into the viewport, consuming unnecessary storage and bandwidth.</p><p id="p-0069" num="0068">In some embodiments, the techniques described herein provide for server-side selection and/or switching of media tracks. Not intending to be limiting, for ease of reference such techniques can be referred to generally as server-side streaming adaptation (SSSA), where a server may perform aspects of streaming adaptation that are otherwise conventionally performed by the client device. Accordingly, the techniques provide for a major paradigm shift compared to conventional approaches. In some embodiments, the techniques can move some and/or most of the adaptation logic to the server, such that the client can simply provide the server with appropriate adaptation information and/or parameters, and the server can generate an appropriate media stream for the client. As a result, the client processing can be reduced to receiving and playing back the media, rather than also performing the adaptation.</p><p id="p-0070" num="0069">In some embodiments, the techniques provide for a set of adaptation parameters. The adaptation parameters can be collected by clients and/or networks and communicated to the servers to support server-side content adaptation. For example, the parameters can support bitrate adaptation (e.g., for switching among different available representations). As another example, the parameters can provide for temporal adaptation (e.g., to support trick plays). As a further example, the techniques can provide for spatial adaptation (e.g., viewport and/or viewport dependent media processing adaptation). As another example, the techniques can provide for content adaptation (e.g., for pre-rendering, storyline selection, and/or the like).</p><p id="p-0071" num="0070">In some embodiments, the techniques described herein for derived track selection and track switching can be used to enable track selection and switching, at run time, from an alternate track group and a switch track group, respectively for delivery to the client device. Therefore, a server can use a derived track that includes selection and switching derivation operations that allow the server to construct a single media track for the user based on the available media tracks (e.g., from among media tracks of different bitrates). See also, for example, the derivations included in e.g., m54876, &#x201c;Track Derivations for Track Selection and Switching in ISOBMFF&#x201d;, October 2020, Online, which is hereby incorporated by reference herein in its entirety.</p><p id="p-0072" num="0071">In some embodiments, the available tracks and/or representations can be stored as separate tracks. As described herein, transformation operations can be used to perform track selection and track switching at the sample level (e.g., not the track level). Accordingly, the techniques described herein for derived track selection and track switching can be used to enable track selection and switching, at run time, from a group of available media tracks (e.g., tracks of different bitrates) for delivery to the client device. Therefore, a server can use a derived track that includes selection and switching derivation operations that allow the server to construct a single media track for the user based on the available media tracks (e.g., from among media tracks of different bitrates) and the client's adaptation parameters. For example, the track selection and/or switching can be performed in a manner that selects from among the input tracks to determine which of the input tracks best-suits the client's adaptation parameters. As a result, a number of input tracks (e.g., tracks of different bitrates, qualities, etc.) can be processed by track selection derivation operations to select samples from one of the input tracks at the sample level to generate the media samples of the output track that are dynamically adjusted to meet the client's adaptation parameters as they change over time. As described herein, in some embodiments, the selection-based track derivation can encapsulate track samples as the output from the derivation operation(s) of a derived track. As a result, a track selection derivation operation can provide samples from any of the input tracks to the derivation operation as specified by the transformations of the derived track to generate the resulting track encapsulation of the samples. The resulting (new) track can be transmitted to the client device for playback.</p><p id="p-0073" num="0072">In some embodiments, the client device can provide spatial adaptation information, such as spatial rendering information to the server. For example, in some embodiments the client device can provide viewport information (on a 2D, spherical and/or 3D viewport) to the server for immersive media scenarios. The server can use the viewport information to construct the viewport for the client at the server-side, instead of requiring the client device to perform the stitching and construction of the (the 2D, spherical or 3D) viewport. Accordingly, spatial media processing tasks can be moved to the server-side of adaptive streaming implementations.</p><p id="p-0074" num="0073">In some embodiments, the client can provide other adaptation information, including temporal and/or content-based adaptation information. For example, the client can provide bitrate adaptation information (e.g., for representation switching). As another example, the client can provide temporal adaptation information (e.g., such as for trick plays, low-latency adaptation, fast-turn-ins, and/or the like). As a further example, the client can provide content adaptation information (e.g., for pre-rendering, storyline selection and/or the like). The server-side can be configured to receive and process such adaptation information to provide the temporal and/or content-based adaptation for the client device.</p><p id="p-0075" num="0074">For example, <figref idref="DRAWINGS">FIG. <b>9</b></figref> shows an exemplary configuration of a server-side adaptive streaming system, according to some embodiments. As described herein, the configuration <b>900</b> includes a streaming client <b>910</b> in communication with server <b>922</b> via HTTP cache <b>961</b>. The streaming client <b>910</b> includes a streaming access engine <b>912</b>, a media engine <b>913</b>, and an HTTP access client <b>914</b>. The server <b>922</b> may be included as part of the media segment delivery function <b>920</b>, which includes segment delivery server <b>921</b>. The segment delivery server <b>921</b> is configured to transmit segments <b>951</b> to the streaming access engine <b>912</b> of the streaming client <b>910</b>. The streaming access engine <b>912</b> also receives the manifest <b>941</b> from the manifest delivery function <b>930</b>. Unlike in the example of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the client device does not perform the adaptation logic to select among the available representations and/or segments. Rather, the adaptation logic <b>923</b> is incorporated in the media delivery function <b>920</b> so that the server-side performs the adaptation logic to dynamically select content based on client adaptation parameters. Accordingly, the streaming client <b>910</b> can simply provide adaptation information and/or adaptation parameters to the media segment delivery function <b>920</b>, which in-turn performs the selection for the client. In some embodiments as described herein, the streaming client <b>910</b> can request a general (e.g., placeholder) segment that is associated with the content stream the server generates for the client.</p><p id="p-0076" num="0075">As described further herein, the adaptation parameters can be communicated using various techniques. For example, the adaptation parameters can be provided as query parameters (e.g., URL query parameters), HTTP parameters (e.g., as HTTP header parameters), SAND messages (e.g., carrying adaptation parameters collected by the client and/or other devices), and/or the like. An example of URL query parameters can include, for example: $bitrate=1024, $2D_viewport_x=<b>0</b>, $2D_viewport_y=0, $2D_viewport_width=1024, $2D_viewport_height=512, etc. An example of HTTP header parameters can include, for example: bitrate=1024, 2D_viewport_x=0, 2D_viewport_y=0, 2D_viewport_width=1024, 2D_viewport_height=512, etc.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows an example of end-to-end streaming media processing using server-side adaptive streaming, according to some embodiments. In the end-to-end streaming media processing flow <b>1000</b>, the server performs some and/or all of the adaptation logic that is used to select (e.g., encrypted) segments from a set of available streams as discussed herein, rather than the client device as in the example for CSDA in <figref idref="DRAWINGS">FIG. <b>8</b></figref>. For example, the server device can perform adaptation <b>1020</b> to select segments from the set of available streams <b>1011</b>-<b>1013</b>. The server device may select, for example, the segment <b>1001</b>. The segment <b>1001</b> may be transmitted from the server to the client device via the content delivery network (CDN) accordingly. As shown, the client device can therefore use a single URL as discussed herein to obtain the content from the server (rather than multiple URLs as is typically required for client-side configurations in order to differentiate between different formats of available content (e.g., different bitrates).</p><p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows an exemplary configuration of a mixed side adaptive streaming system, according to some embodiments. The configuration <b>1100</b> comprises a streaming client <b>1110</b> in communication with server <b>1122</b> via HTTP cache <b>1161</b>. The streaming client <b>1110</b> includes adaptation logic <b>1120</b>, streaming access engine <b>1112</b>, media engine <b>1113</b>, and HTTP access client <b>1113</b>. The server <b>1122</b> may be part of the media segment delivery function <b>1120</b>, which includes segment delivery server <b>1121</b> and the adaptation logic <b>1110</b>. The segment delivery server <b>1121</b> is configured to transmit segments <b>1151</b> to the streaming client <b>1110</b>&#x2032;s streaming access engine <b>1112</b>. The streaming access engine <b>1112</b> further receives the manifest <b>1141</b> from the manifest delivery function <b>1130</b>.</p><p id="p-0079" num="0078">Both the media segment delivery function <b>1120</b> and the client device <b>1110</b> perform an associated portion of the adaptation logic, as demonstrated by the media segment delivery function <b>1120</b> including adaptation logic <b>1123</b> and the streaming client <b>1110</b> including adaptation logic <b>1111</b>. Accordingly, the client device <b>1110</b> receives and/or determines the adaptation parameters via streaming access engine <b>1112</b>, determines a (e.g., first) segment from an available set of segments presented in the manifest <b>1141</b>, and transmits a request for the segment to the segment delivery server <b>1121</b>. The streaming client <b>1110</b> can also be configured to determine and update adaptation parameters over time, and to provide the adaptation parameters to the server so that the media segment delivery function <b>1120</b> can continue to perform adaptation over time for the streaming client <b>1110</b>.</p><p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows a list of parameters <b>1200</b> for operations such as track selection or switching, according to some embodiments. The list of parameters includes codec <b>1210</b>, screen size <b>1220</b>, max packet size <b>1230</b>, media type <b>1240</b>, media language <b>1250</b>, bitrate <b>1260</b>, frame rate <b>1270</b> and number of views <b>1280</b>. The parameter codec <b>1210</b> may be represented by &#x2018;cdec&#x2019; <b>1211</b> and may be a sample entry (e.g., in SampleDescriptionBox of media track). The parameter screen size <b>1220</b> may be represented by &#x2018;scsz&#x2019; <b>1221</b> and may include width and height fields of VisualSampleEntry. The parameter max packet size <b>1230</b> may be represented by &#x2018;mpsz&#x2019; <b>1231</b> and may be the maximum packet size (e.g., Maxpacketsize field in RtpHintSampleEntry). The parameter media type <b>1240</b> may be represented by &#x2018;mtyp&#x2019; <b>1241</b> and may be a handling type (e.g., Handlertype in HandlerBox (of media track)). The parameter media language <b>1250</b> may be represented by &#x2018;mela&#x2019; <b>1251</b> and may be a language field in MediaHeaderBox for designating language. The parameter bitrate <b>1260</b> may be represented by &#x2018;bitr&#x2019; <b>1261</b> and may be the total size of the samples in the track divided by the duration in the TrackHeaderBox. The parameter frame rate <b>1270</b> may be represented by &#x2018;frar&#x2019; <b>1271</b> and may be a number of samples in the track divided by duration in the TrackHeaderBox. The parameter number of views <b>1280</b> may be represented by &#x2018;nvws&#x2019; <b>1281</b> and may be the number of views in the track. It should be appreciated that the names, attributes, and other conventions discussed in conjunction with <figref idref="DRAWINGS">FIG. <b>12</b></figref> are for exemplary purposes and can be used with various implementations. For example, one or more of these parameters can be used with DASH, possibly with different names, and can be in the DASH namespace. A DASH device may select tracks based on its screen size in client-side dynamic adaptation. For server-side dynamic adaptation, the server may require knowledge of the client's screen size.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>13</b></figref> shows exemplary viewport and viewpoint related data structure attributes, according to some embodiments. The attributes include azimuth <b>1301</b>, elevation <b>1302</b>, azimuth range <b>1303</b>, elevation range <b>1304</b>, position x <b>1305</b>, position y <b>1306</b>, position z <b>1307</b>, and quaternion x <b>1308</b>, quaternion y <b>1309</b> and quaternion z <b>1310</b>.</p><p id="p-0082" num="0081">The attribute azimuth <b>1301</b> may be represented by &#x2018;azim&#x2019; and may be an azimuth component of a spherical viewport. The attribute elevation <b>1302</b> may be represented by &#x2018;elev&#x2019; and may be an elevation component of a spherical viewport. The attribute azimuth range <b>1303</b> may be represented by &#x2018;azim&#x2019; and may be an azimuth range of a spherical viewport. The attribute elevation range <b>1304</b> may be represented by &#x2018;elev&#x2019; and may be an elevation range of a spherical viewport.</p><p id="p-0083" num="0082">The attribute position x <b>1305</b> may be represented by &#x2018;posx&#x2019; and may be the x coordinate of a position in a reference coordinate system, for a viewpoint, viewport or camera. The attribute position y <b>1306</b> may be represented by &#x2018;posy&#x2019; and may be the y coordinate of a position in a reference coordinate system, for a viewpoint, viewport or camera. The attribute position z <b>1307</b> may be represented by &#x2018;posz&#x2019; and may be the z coordinate of a position in a reference coordinate system, for a viewpoint, viewport or camera.</p><p id="p-0084" num="0083">The attribute quaternion x <b>1308</b> may be represented by &#x2018;qutx&#x2019; and may be the x component of the rotation of a viewport or camera using the quaternion representation. The attribute quaternion y <b>1309</b> may be represented by &#x2018;quty&#x2019; and may be the y component of the rotation of a viewport or camera using the quaternion representation. The attribute quaternion z <b>1310</b> may be represented by &#x2018;qutz&#x2019; and may be the z component of the rotation of a viewport or camera using the quaternion representation.</p><p id="p-0085" num="0084">The inventors have appreciated problems with conventional VR streaming approaches. For example, when VR content is delivered using streaming protocols (e.g., MPEG DASH), the use cases typically require temporal signaling so that the client can request content, including for specific qualities, etc. Such requests may require multiple distinct calls to the server. For example, conventional methods may require a first request for a manifest (e.g., so that the client can determine the available data, quality/bitrates, structure of the data, etc.), a second request for an initialization segment, and a further third request for the immersive content itself. Such a messaging configuration can take multiple seconds before the client device renders content. This can be further compounded by the fact that the immersive content calls can, in-turn, require multiple calls. For example, when using content partitioned into tiles, a client device may need to request content for each tile (e.g., if there are multiple tiles, each tile may require a separate request). Accordingly, such messaging can require significant overhead. Additionally, such approaches can require buffer management, require resources for viewport generation, stitching, rendering, and/or the like.</p><p id="p-0086" num="0085">Further, conventional approaches may not provide sufficient features for robust user experiences. For example, while <figref idref="DRAWINGS">FIG. <b>13</b></figref> shows examples of 3DoF parameters (parameters <b>1301</b>-<b>1304</b>) and 6DoF parameters (parameters <b>1305</b>-<b>1310</b>), such parameters are limited. For example, the 6DoF parameters do not provide for a size, rather just a point for the content and an associated orientation.</p><p id="p-0087" num="0086">Accordingly, conventional techniques are limited and do not address desired use case scenarios. Further, it can be difficult for a client to request content from a live stream and the client may experience latency due to the multiple calls, complicated requests, content transmission delays created by the requisite multiple calls, etc.</p><p id="p-0088" num="0087">The inventors have discovered and appreciated that it can therefore be desirable to provide for techniques that support new and improved use cases for web-based content streaming, such as for DASH streaming applications. In some embodiments, the techniques provide new temporal adaptation parameters, which can be used for various new use cases, such as for joining live events, fast turning into streams, and/or the like. The techniques can use the new temporal adaptation parameters described herein to consolidate (the otherwise requisite, multiple) calls of conventional approaches for faster tuning in to content. In some examples, client devices may request content with only one call (or fewer calls than otherwise required by conventional techniques) and receive, in response to the one call, consolidated data (e.g., data comprising the manifest, initialization segment, and one or more segments of the immersive content).</p><p id="p-0089" num="0088">Further, the inventors have discovered and appreciated that a method for clients to request live content may be desirable. When a device tunes to a stream of media data (e.g., a channel), the client device may not know the latest segment that the server has for live content. As a result, it can be difficult for a client to determine the last segment for live content. To address these and other issues, the techniques described herein temporal adaptation techniques that allow the server to provide live content when a client accesses a live stream of media data. In some examples, the client can simply indicate to the server that it wishes to join live, and the server can send the client the newest/latest segments that are available to the server.</p><p id="p-0090" num="0089">In some embodiments, the techniques can additionally or alternatively provide new spatial adaptation parameters for viewport and viewpoint selection, to include 2D spatial object selection (e.g., as specified in DASH). For example, DASH can provide some 2D spatial objects. The techniques described herein can provide support for 2D spatial object selection, which was not otherwise available for conventional streaming approaches.</p><p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows an exemplary list of viewport, viewpoint, and spatial-object related data structure attributes for spherical, cuboid, and planar regions, according to some embodiments. In particular, the examples shown include spatial-object related data for planar regions, which was not supported by conventional techniques and thus not possible to implement (e.g., not possible to implement in a DASH framework). The attributes include the attributes described with reference to <figref idref="DRAWINGS">FIG. <b>13</b></figref> (shown as azimuth <b>1401</b>, elevation <b>1402</b>, azimuth range <b>1403</b>, elevation range <b>1404</b>, position x <b>1405</b>, position y <b>1406</b>, position z <b>1407</b>, and quaternion x <b>1408</b>, quaternion y <b>1409</b> and quaternion z <b>1410</b>), with additional attributes for 2D planar regions. The attributes include object x <b>1411</b>, object y <b>1412</b>, object width <b>1413</b>, object height <b>1414</b>, total width <b>1415</b> and total height <b>1416</b>. The attribute object x <b>1411</b> may be represented by &#x2018;objx&#x2019; and may be a non-negative integer in decimal representation expressing the horizontal position of the top-left corner of the Spatial Object in arbitrary units. The attribute object y <b>1412</b> may be represented by &#x2018;objy&#x2019; and may be a non-negative integer in decimal representation expressing the vertical position of the top-left corner of the Spatial Object in arbitrary units. The attribute object width <b>1413</b> may be represented by &#x2018;objw&#x2019; and may be a non-negative integer in decimal representation expressing the width of the Spatial Object in arbitrary units. The attribute object height <b>1414</b> may be represented by &#x2018;objh&#x2019; and may be a non-negative integer in decimal representation expressing the height of the Spatial Object in arbitrary units.</p><p id="p-0092" num="0091">The attribute total width <b>1415</b> may be represented by &#x2018;totw&#x2019; and may be a optional non-negative integer in decimal representation expressing the width of the reference space in arbitrary units. The attribute total height <b>1416</b> may be represented by &#x2018;toth&#x2019; and may be an optional non-negative integer in decimal representation expressing the height of the reference space in arbitrary units.</p><p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. <b>15</b></figref> shows an exemplary list of temporal adaptation related attributes that may be used by a client device to indicate to the server if a media request is for tuning into a live event or stream (e.g., channel) or joining fast into a stream. According to some examples, the attribute Join Live <b>1510</b> may be represented by a string &#x2018;jilv&#x2019; and may indicate a media request for joining into a live event, due to initial join and seeking to the live edge of the event. According to some examples, the attribute Tune-in Fast <b>1520</b> may be represented by a string &#x2018;tift&#x2019; and may indicate a media request for turning into a stream as fast as possible.</p><p id="p-0094" num="0093">Such exemplary temporal adaptation related attributes can be used for various use cases. For example, temporal adaptation related attributes can be used where the client needs to indicate to the server if a media request is for turning into a live event (or stream of media data) (e.g., as discussed in m56798. &#x201c;Shortening tune-in time,&#x201d; April 2021, the contents of which are incorporated herein in its entirety), or joining fast into a stream (e.g., as discussed in m56673, &#x201c;Minimizing initialization delay in live streaming,&#x201d; April 2021, the contents of which are incorporated herein in its entirety), and/or the like. The attributes may allow the server to respond accordingly, such as for low-latency, on-demand, fast start-up, good experience start up scenarios, and/or the like.</p><p id="p-0095" num="0094">For example, the attributes may allow low latency by adaptively returning a sub-segment or a CMAF chunk on a live edge (e.g., as discussed in AWS Media Blog, &#x201c;Lower latency with AWS Elemental MediaStore chunked object transfer,&#x201d; available at aws.amazon.com/blogs/media/lower-latency-with-aws-elemental-mediastore-chunked-object-transfer/, the contents of which are incorporated herein in its entirety). For example, for live content a client may not know the live edge segment, rather just the server may know. As a result, a client may request content for a particular time, and the server may respond that the content is not available (e.g., since there can be latency with content still being captured). Also need to transcode, etc. As a result, the client may request content for an older time period, which the server may have, although in doing so the client may skip over more recent content that is available between the two content request periods (although the client has no way of knowing). As a result, it is not uncommon for a client to not have the newest live segment, which can add latency, cause issues when there are multiple devices (e.g., which may render content at different times for the same live stream), and/or the like. As a result, the techniques can address such problems by simply allowing the client to join and having the server send the most recently available segment of data.</p><p id="p-0096" num="0095">As another example, the attributes may allow content on-demand by adaptively returning a regular segment for on-demand content, for example, when the attribute &#x201c;Join Live&#x201d; is either omitted or set to be FALSE. As a further example, the attributes may allow a fast start-up by adaptively returning one or more low-quality initial segments, possibly in conjunction with an initialization segment. As an additional example, the attributes may allow good-experience start-up by adaptively returning one or more high-quality initial segments to ensure a good viewing experience from the very beginning, when the attribute &#x201c;Join Fast&#x201d; is either omitted or set to be FALSE.</p><p id="p-0097" num="0096">In both the server-side and mixed-side configurations, a media presentation description can be exchanged as discussed herein. <figref idref="DRAWINGS">FIG. <b>16</b></figref> shows an example of a media presentation description with periods with multiple representations in an adaptation set for conventional client-side adaptive streaming, according to some embodiments. As shown (e.g., and as discussed in conjunction with <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>), the adaptation set of each period may include multiple representations shown as representation <b>1610</b> through representation <b>1620</b> in this example. Each representation, such as shown for representation <b>1610</b> may include an initialization segment <b>1612</b>, and a set of media segments (shown as <b>1614</b> through <b>1616</b>, in this example).</p><p id="p-0098" num="0097">In some embodiments, for server-side and/or mixed-side configurations, the adaptation set can be modified such that each adaptation set only includes one representation. <figref idref="DRAWINGS">FIG. <b>17</b></figref> shows an example of a single representation <b>1710</b> in an adaptation set <b>1730</b> for server-side adaptive streaming, according to some embodiments. Compared to the media presentation description <b>1600</b> of <figref idref="DRAWINGS">FIG. <b>16</b></figref>, for server-side streaming adaptation, a single representation <b>1710</b> may be included for each adaptation set <b>1730</b> in the media presentation description <b>1700</b> rather than multiple representations. This is possible since the client device is not performing the logic to select from among available representations, and therefore the client need not be aware of any differentiation among different content qualities, etc. In some embodiments, the media presentation description <b>1600</b> may be used for mixed-side configurations where the client performs some adaptation processing in conjunction with the server performing some adaptation processing (e.g., where the client selects an initial representation and/or subsequent representations). In some embodiments, the single representation <b>1710</b> may include a URL to a derived track containing the derivation operations to generate an adapted track based on the client's (adaptation) parameters. The client device may then access the generic URL and provide the parameters to the server, such that the server can construct the track for the client. In some embodiments, the same and/or different URLs can be used for the initialization segment <b>1612</b> and media segments <b>1614</b>. For example, the URLs can be the same if, for example, the client passes different adaptation parameters to the server to differentiate between the two different kinds of requests, such as by using one set of parameter(s) for initialization and another set of parameter(s) for segments. As another example, different URLs can be used for the initialization and media segments (e.g., to differentiate between and/or among the different segments). The client can continuously request segments using the single representation, and hence the single generic URL.</p><p id="p-0099" num="0098">Server-side adaptation can result in bandwidth reductions as well as reductions in overall content processing that may otherwise be required for some types of content, such as for immersive media. Referring back to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, for example, <figref idref="DRAWINGS">FIG. <b>2</b></figref> shows the viewport dependent content flow process <b>200</b> for virtual reality (VR) content for server-side streaming adaptation. As described, spherical viewports <b>201</b> undergo stitching, projection, mapping at block <b>202</b>, are encoded at block <b>204</b>, are delivered at block <b>206</b>, and are decoded at block <b>208</b>. The client device constructs (<b>210</b>) the media for the user's viewport (e.g., from a set of applicable tiles and/or tile tracks) to render (<b>212</b>) the content for the user's viewport to the user. When using server-side streaming adaptation, the construction process can be performed at the server-side instead of the client side (e.g., thus reducing and/or eliminating the processing otherwise required to be performed by the client device at block <b>210</b>). For example, by shifting the adaptation and track generation to the server-side, the construction process <b>210</b> can be avoided since the exact content can be generated at the server-side, reducing the processing burden of the decoder and saving bandwidth since the associated tile tracks often include additional content not rendered onto the user's viewport. For example, the client can provide viewport information to the server (e.g., a position of the viewport, a shape of the viewport, a size of the viewport, and/or the like) to request video from the server that covers the viewport. The server can use the received viewport information to deliver the associated set of media for just the viewport and perform spatial adaptation for the client device.</p><p id="p-0100" num="0099">Generally, the techniques described herein provide for server-side adaptation approaches. In some embodiments, derived composition, selection and switch tracks can be used to implement SSSA, as opposed to client-side streaming adaptation CSSA, in adaptive streaming systems, for viewport-dependent media processing. Derived composition, selection and switch tracks are described in, for example, m54876, &#x201c;Track Derivations for Track Selection and Switching in ISOBMFF&#x201d;, October 2020 (Online), w19961, &#x201c;Study of ISO/IEC 23001-16 DIS,&#x201d; January 2021 (Online), and w19956, &#x201c;Technologies under Consideration of ISO/IEC 23001-16,&#x201d; January 2021 (Online), which are hereby incorporated by reference herein in their entirety.</p><p id="p-0101" num="0100">As described herein, for various reasons immersive media processing usually adopts a viewport dependent approach. 3D spherical content, for example, is first processed (stitched, projected and mapped) onto a 2D plane and then encapsulated in a number of tile-based and segmented files for playback and delivery. In such a tile-based and segmented file, a spatial tile or sub-picture in in the 2D plane, often representing a rectangular spatial portion of the 2D plane, is encapsulated as a collection of its variants (such as variants that support different qualities and bitrates, or in different codecs and protection schemes). Such variants can, for example, correspond to representations within adaptation sets in MPEG DASH. It is based on user's selection on a viewport that some of these variants of different tiles that, when put together, provide a coverage of the selected viewport, are retrieved by or delivered to the receiver, and then decoded to construct and render the desired viewport.</p><p id="p-0102" num="0101">Other content can have similar high-level schemes. For example, when VR content is delivered using MPEG DASH, the use cases typically require signaling of viewports and ROIs within an MPD for the VR content, so that the client can help the user to decide which, if any, viewports and ROIs to delivery and render. As another example, for immersive media content beyond omnidirectional content (e.g., point-cloud and 3D immersive video), a similar viewport-dependent approach can be used for its processing, where a viewport and a tile are a 3D viewport and 3D region, instead of a 2D viewport and a 2D sub-picture.</p><p id="p-0103" num="0102">Accordingly, the client is required to perform computationally expensive construction processes for various types of media. In particular, since the content is divided into regions/tiles/etc., the client is left to choose which portions(s) will be used to cover the client's viewport. In practice, what the user is viewing is possibly only a small portion of the content. The server also needs to make the content, including the portions/tiles, available to the client. Once client chooses something different (e.g., based on bandwidth), or once user moves and viewport changes, then client needs to ask for different regions. Since the client needs to perform multiple downloads and/or retrievals for the various tiles and/or representations as discussed herein, for each sub-picture or tile, the client may need to make a number of separate requests (e.g., separate HTTP requests, such as four requests for four different tiles associated with a viewport).</p><p id="p-0104" num="0103">It can be desirable to remove some and/or all of the construction process from the client side (e.g., step <b>210</b> discussed in conjunction with <figref idref="DRAWINGS">FIG. <b>2</b></figref>). In particular, performing construction on the client side can require tile stitching on-the-fly at the client side (e.g., which can require seamless stitching of tile segments, including with tile boundary padding). Construction on the client side can also require the client to perform consistent quality management for retrieved and stitched tile segments (e.g., to avoid stitching of tiles of different qualities). Additionally or alternatively, construction on the client side can also require that the client perform tile buffering management (e.g., including having the client attempt to predict the user's movement without downloading of un-necessary tiles). Construction on the client side may additionally or alternatively require the client to perform viewport generation of 3D Point Cloud and Immersive Video (e.g., including constructing the viewport from compressed component video segments).</p><p id="p-0105" num="0104">To address these and other issues, the techniques described herein move spatial media processing from the client to the server. In some embodiments, the client passes spatially-related information (e.g., viewport-related information) to the server so that the server can perform some and/or all of the spatial media processing. For example, if the client needs an X&#xd7;Y region, the client can simply pass to the server the position and/or size of the viewing field, and the server can determine the requested region and perform the construction process to stitch the relevant tiles to cover the requested viewport, and only deliver the stitched content back to the client. As a result, the client only needs to decode and render the delivered content. Further, when the viewport changes, the client can send new viewport information to the server, and the server can change the delivered content accordingly. As a result, instead of needing to determine which tiles to use to construct the viewport, instead clients can send the viewport information to the server, and the server can process and generate a single viewport segment for the client. Such approaches can address the various deficiencies mentioned above, such as reducing and/or eliminating the need for the client to perform on-the-fly stitching, quality management, tile buffer management, and/or the like. Further, if the content is encrypted, such approaches can simply the encryption since it only need be performed on the client-customized media.</p><p id="p-0106" num="0105">According to some embodiments, in the SSSA approach described herein, a set of dynamic adaptation parameters can be collected by clients or networks and communicated to servers. For example, the parameters may include DASH or SAND parameters, and may be used to support bitrate adaptation such as representation switching (e.g., as described in w18609, &#x201c;Text of ISO/IEC FDIS 23009-1:2014 4th edition,&#x201d; July 2019, Gothenburg, SE and w16230, &#x201c;Text of ISO/IEC FDIS 23009-5 Server and Network Assisted DASH,&#x201d; June 2016, Geneva, CH, both incorporated by reference herein in their entirety), temporal adaptation (e.g., such as trick plays described in w18609), spatial adaptation such as viewport/viewpoint dependent media processing (e.g., such as described in w19786, &#x201c;Text of ISO/IEC FDIS 23090-2 2nd edition OMAF,&#x201d; ISO/IEC JTC <b>1</b>/SC 29/WG 3, October 2020 and WG03N0163, &#x201c;Draft text of ISO/IEC FDIS 23090-10 Carriage of Visual Volumetric Video-based Coding Data,&#x201d; January 2021, Online both described herein in their entirety), and content adaptation such as pre-rendering and storyline selection (e.g., such as described in w19062, &#x201c;Text of ISO/IEC FDIS 23090-8 Network-based Media Processing,&#x201d; January 2020, Brussels, BE referenced herein in its entirety).</p><p id="p-0107" num="0106">Upon receiving these parameters, the server may conduct dynamic adaptations, such as the spatial adaptations for constructing viewports that the client would construct in the CSSA approach, based on parameters collected from clients and networks. Because of processing power of the server and the trend in cloud computing, this SSSA approach may be more advantageous over conventional dynamic adaptations by clients for viewport-dependent media processing.</p><p id="p-0108" num="0107">In some embodiments, selection and switch tracks discussed herein can be used to enable streaming adaptation at the server side. In particular, since selection and switch tracks enable track selection and switching, at run time, from an alternate track group and a switch track group, respectively, streaming adaptation can be performed at the server side, instead of the client side, to simplify Streaming Client implementation.</p><p id="p-0109" num="0108">Since selection-based track derivation can provide for selection of samples of a track from an alternate or switch group at the time of derivation, various improvements can be achieved. For example, such derivation can provide a track encapsulation for track samples selected or switched from an alternate or switch group. Such a track encapsulation can provide straightforward association of metadata about a selected or switched track with its track encapsulation itself, rather than with a track group from which the track is selected or switched. For example, in order to specify a track selected from a track group at run time has a region of interest (ROI), the ROI can be easily signaled in the metadata box (&#x2018;meta&#x2019;) of the derived track (e.g., when the ROI is static) and/or a timed metadata track can be used to reference the derived track (e.g., using reference type &#x2018;cdsc&#x2019;, when the ROI is dynamic). In contrast, there is no direct way to signal the ROI metadata without a derived track: signaling a static ROI in the metadata box of every track in an alternate or switch group does not convey the same meaning as it instead conveys that every track has the static ROI. Additionally, having a timed metadata track representing a dynamic ROI to reference an alternate or switch group needs to specify a new track reference type, as the existing track reference in the track reference box states, when it applies to referencing a track group, &#x201c;the track reference applies to each track of the referenced track group individually&#x201d;, which is not a desired result.</p><p id="p-0110" num="0109">The derived track encapsulation can also enable specifications and executions of track-based media processing workflows, such as in network based media processing, to use derived tracks not just as outputs but also intermediate inputs in the workflows. The derived track encapsulation can also provide for track selection or switching to be transparent to clients of dynamic adaptive streaming, such as DASH, and carried out at corresponding servers or within distribution networks (e.g., implemented in conjunction SAND). This can help simplify client logics and implementations with respective to shifting dynamic content adaptation from the streaming manifest level to the file format derived track level (for instance, based on the descriptive and differentiating attributes defined in sub-clause 8.3.3 in w18855). With selection-based derived tracks, DASH clients and DASH aware network elements (DANE) can provide values of attributes (e.g., codec &#x2018;cdec&#x2019;, screen size &#x2018;scsz&#x2019;, bitrate &#x2018;bitr&#x2019;) required in the derived tracks, and let media origin servers and CND's provide content selection and switching from a group of available media tracks. This may then result in, for example, eliminating use of AdaptationSet and/or restricting its use to just containing a single Representation in DASH.</p><p id="p-0111" num="0110"><figref idref="DRAWINGS">FIG. <b>18</b></figref> shows the viewport dependent content flow process <b>200</b> for VR content for a server-side streaming adaptation, according to some examples. As described herein, spherical viewports <b>201</b> (e.g., which could include the entire sphere) undergo stitching, projection, mapping at block <b>202</b> (to generate projected and mapped regions), are encoded at block <b>204</b> (to generate encoded/transcoded tiles in multiple qualities), are delivered at block <b>206</b> (as tiles), and are decoded at block <b>208</b> (to generate decoded tiles). As shown in <figref idref="DRAWINGS">FIG. <b>18</b></figref>, the spherical viewports may not need to be constructed at block <b>210</b> (to construct a spherical rendered viewport, such as when the construction is performed by the server as described herein), and therefore the content may proceed to be rendered at block <b>212</b>. As in <b>200</b>, user interaction at block <b>214</b> can select a viewport, which initiates a number of &#x201c;just-in-time&#x201d; process steps as shown via the dotted arrows.</p><p id="p-0112" num="0111">In some embodiments, the SSSA techniques described herein can be used within a network based media processing framework. For example, in some embodiments the viewport construction can be considered as one or more network-based functions (e.g., in addition to other functions, such as <b>360</b> stitching, 6DoF pre-rendering, guided transcoding, e-sports streaming, OMAF packager, measurement, MiFiFo buffer, 1toN splits, Ntol merges, etc.).</p><p id="p-0113" num="0112"><figref idref="DRAWINGS">FIG. <b>19</b></figref> shows an exemplary computerized method <b>1900</b> for a server in communication with a client device, according to some embodiments.</p><p id="p-0114" num="0113">At step <b>1902</b>, the server receives, from the client device, a request to access a stream of media data (e.g., a channel or other source of media data) associated with immersive content at a point in time the client is first accessing the stream of media data for the immersive content. The immersive content may be, for example, live immersive content and the point in time is the latest time of the immersive content that the server possesses (e.g., live-edge content).</p><p id="p-0115" num="0114">According to some examples, the request to access the stream is an HTTP request (e.g., a Dynamic Adaptive Streaming over HTTP request (DASH), an HTTP live streaming (HLS) request, etc.) and is transmitted by the client device prior to receiving any manifest data for the immersive media content from the server (e.g., when the client device is first tuning into a stream/channel/content). In some examples, the request for the portion of media data comprises one or more parameters of the client device (e.g., for use by the server). In some examples, the one or more parameters comprise a three-dimensional size of a viewport of the client device. In some embodiments, the received request at step <b>1902</b> can be the first message received from the client for the associated content.</p><p id="p-0116" num="0115">At step <b>1904</b>, the server determines an initial portion of media data for the immersive content for delivery to the client device. For example, as described herein, when switching to a stream of media data the server can determine a manifest, initialization segment, and one or more additional media segments for sending to the client device in response to the single request received at <b>1904</b>. As another example, when a client is requesting to join a live content channel or stream, the server can identify a most recent available content segment for sending to the client device.</p><p id="p-0117" num="0116">At step <b>1906</b>, the server transmits, in response to the request to access the stream of media data, the initial portion of media data. In some examples, the initial portion of media data is received prior to, or in conjunction with, receiving first manifest data for the immersive content from the server. The initial portion of media data may comprise one or more low-quality media data segments. In some examples, the initial portion of media data includes an initialization segment.</p><p id="p-0118" num="0117">According to some embodiments, determining the initial portion of the media data for the immersive content may include accessing media data comprising a plurality of media tracks, each media track comprising different media data corresponding to different spatial portions of the immersive content, determining, based on the request, a group of media tracks from the plurality of media tracks corresponding to a viewport of the client device, and generating a single adapted track adapted to comprise the initial portion of media data and transmitting the adapted track comprising the portion of media data to the client device. The initial portion of media data may include a plurality of stitched tiles, each corresponding one of the differential portions of the immersive content, from the plurality of media tracks.</p><p id="p-0119" num="0118">In some examples, the server may further determine that the live immersive content is not available and transmit an indication to the client device that content at the point in time of accessing a stream of media data is not available.</p><p id="p-0120" num="0119"><figref idref="DRAWINGS">FIG. <b>20</b></figref> shows an exemplary computerized method <b>2000</b> for a client device in communication with a server, according to some embodiments. At step <b>2002</b>, the client device accesses a stream of media data for immersive content at a point in time the client device is first accessing the stream for the immersive content, comprising transmitting, to the server, a request to access the immersive content at the point in time. The immersive content may be, for example, live immersive content and the point in time is the latest time of the immersive content that the server possesses, as described herein.</p><p id="p-0121" num="0120">According to some examples, the request to access the stream of media data is a HTTP request as described herein, and is transmitted by the client device prior to receiving any manifest data for the immersive media content from the server. In some examples, the request for the portion of media data comprises one or more parameters of the client device. In some examples, the one or more parameters comprise a three-dimensional size of a viewport of the client device. In some embodiments, the request at step <b>2002</b> can be the first message received from the client for the associated content. The request can be, for example, a request to join or receive live content, a request to join a stream, a channel, and/or the like, as discussed herein.</p><p id="p-0122" num="0121">At step <b>2004</b>, the client device receives, in response to the request to access the stream of media data, an initial portion of media data for the immersive content. In some examples, the initial portion of media data is received prior to, or in conjunction with, receiving first manifest data for the immersive content from the server. The initial portion of media data may comprise one or more low-quality media data segments. In some examples, the initial portion of media data includes an initialization segment.</p><p id="p-0123" num="0122">According to some embodiments, the initial portion of media data includes, a single track adapted to comprise the initial portion of media data, wherein the portion of media data is adapted for the client device based on a viewport of the client device, and the portion of media data is generated from a group of tracks corresponding to the viewport, wherein the group of tracks each comprise different media data corresponding to different spatial portions of the immersive media.</p><p id="p-0124" num="0123">In some examples, the client device may further receive an indication that live immersive content requested at the point in time of accessing a stream of media data is not available and transmit a request for live immersive content at a point in time prior to the client accessing the stream of media data.</p><p id="p-0125" num="0124">It should be appreciated that exemplary naming conventions, abbreviations, and the like have been used to provide examples of the techniques described herein. Such conventions are not intended to be limiting and instead are intended to simply provide examples. Accordingly, it should be appreciated that the techniques can be implemented using other conventions, abbreviations, and/or the like.</p><p id="p-0126" num="0125">Techniques operating according to the principles described herein may be implemented in any suitable manner. The processing and decision blocks of the flow charts above represent steps and acts that may be included in algorithms that carry out these various processes. Algorithms derived from these processes may be implemented as software integrated with and directing the operation of one or more single- or multi-purpose processors, may be implemented as functionally-equivalent circuits such as a Digital Signal Processing (DSP) circuit or an Application-Specific Integrated Circuit (ASIC), or may be implemented in any other suitable manner. It should be appreciated that the flow charts included herein do not depict the syntax or operation of any particular circuit or of any particular programming language or type of programming language. Rather, the flow charts illustrate the functional information one skilled in the art may use to fabricate circuits or to implement computer software algorithms to perform the processing of a particular apparatus carrying out the types of techniques described herein. It should also be appreciated that, unless otherwise indicated herein, the particular sequence of steps and/or acts described in each flow chart is merely illustrative of the algorithms that may be implemented and can be varied in implementations and embodiments of the principles described herein.</p><p id="p-0127" num="0126">Accordingly, in some embodiments, the techniques described herein may be embodied in computer-executable instructions implemented as software, including as application software, system software, firmware, middleware, embedded code, or any other suitable type of computer code. Such computer-executable instructions may be written using any of a number of suitable programming languages and/or programming or scripting tools, and also may be compiled as executable machine language code or intermediate code that is executed on a framework or virtual machine.</p><p id="p-0128" num="0127">When techniques described herein are embodied as computer-executable instructions, these computer-executable instructions may be implemented in any suitable manner, including as a number of functional facilities, each providing one or more operations to complete execution of algorithms operating according to these techniques. A &#x201c;functional facility,&#x201d; however instantiated, is a structural component of a computer system that, when integrated with and executed by one or more computers, causes the one or more computers to perform a specific operational role. A functional facility may be a portion of or an entire software element. For example, a functional facility may be implemented as a function of a process, or as a discrete process, or as any other suitable unit of processing. If techniques described herein are implemented as multiple functional facilities, each functional facility may be implemented in its own way; all need not be implemented the same way. Additionally, these functional facilities may be executed in parallel and/or serially, as appropriate, and may pass information between one another using a shared memory on the computer(s) on which they are executing, using a message passing protocol, or in any other suitable way.</p><p id="p-0129" num="0128">Generally, functional facilities include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Typically, the functionality of the functional facilities may be combined or distributed as desired in the systems in which they operate. In some implementations, one or more functional facilities carrying out techniques herein may together form a complete software package. These functional facilities may, in alternative embodiments, be adapted to interact with other, unrelated functional facilities and/or processes, to implement a software program application.</p><p id="p-0130" num="0129">Some exemplary functional facilities have been described herein for carrying out one or more tasks. It should be appreciated, though, that the functional facilities and division of tasks described is merely illustrative of the type of functional facilities that may implement the exemplary techniques described herein, and that embodiments are not limited to being implemented in any specific number, division, or type of functional facilities. In some implementations, all functionalities may be implemented in a single functional facility. It should also be appreciated that, in some implementations, some of the functional facilities described herein may be implemented together with or separately from others (i.e., as a single unit or separate units), or some of these functional facilities may not be implemented.</p><p id="p-0131" num="0130">Computer-executable instructions implementing the techniques described herein (when implemented as one or more functional facilities or in any other manner) may, in some embodiments, be encoded on one or more computer-readable media to provide functionality to the media. Computer-readable media include magnetic media such as a hard disk drive, optical media such as a Compact Disk (CD) or a Digital Versatile Disk (DVD), a persistent or non-persistent solid-state memory (e.g., Flash memory, Magnetic RAM, etc.), or any other suitable storage media. Such a computer-readable medium may be implemented in any suitable manner. As used herein, &#x201c;computer-readable media&#x201d; (also called &#x201c;computer-readable storage media&#x201d;) refers to tangible storage media. Tangible storage media are non-transitory and have at least one physical, structural component. In a &#x201c;computer-readable medium,&#x201d; as used herein, at least one physical, structural component has at least one physical property that may be altered in some way during a process of creating the medium with embedded information, a process of recording information thereon, or any other process of encoding the medium with information. For example, a magnetization state of a portion of a physical structure of a computer-readable medium may be altered during a recording process.</p><p id="p-0132" num="0131">Further, some techniques described above comprise acts of storing information (e.g., data and/or instructions) in certain ways for use by these techniques. In some implementations of these techniques&#x2014;such as implementations where the techniques are implemented as computer-executable instructions&#x2014;the information may be encoded on a computer-readable storage media. Where specific structures are described herein as advantageous formats in which to store this information, these structures may be used to impart a physical organization of the information when encoded on the storage medium. These advantageous structures may then provide functionality to the storage medium by affecting operations of one or more processors interacting with the information; for example, by increasing the efficiency of computer operations performed by the processor(s).</p><p id="p-0133" num="0132">In some, but not all, implementations in which the techniques may be embodied as computer-executable instructions, these instructions may be executed on one or more suitable computing device(s) operating in any suitable computer system, or one or more computing devices (or one or more processors of one or more computing devices) may be programmed to execute the computer-executable instructions. A computing device or processor may be programmed to execute instructions when the instructions are stored in a manner accessible to the computing device or processor, such as in a data store (e.g., an on-chip cache or instruction register, a computer-readable storage medium accessible via a bus, a computer-readable storage medium accessible via one or more networks and accessible by the device/processor, etc.). Functional facilities comprising these computer-executable instructions may be integrated with and direct the operation of a single multi-purpose programmable digital computing device, a coordinated system of two or more multi-purpose computing device sharing processing power and jointly carrying out the techniques described herein, a single computing device or coordinated system of computing device (co-located or geographically distributed) dedicated to executing the techniques described herein, one or more Field-Programmable Gate Arrays (FPGAs) for carrying out the techniques described herein, or any other suitable system.</p><p id="p-0134" num="0133">A computing device may comprise at least one processor, a network adapter, and computer-readable storage media. A computing device may be, for example, a desktop or laptop personal computer, a personal digital assistant (PDA), a smart mobile phone, a server, or any other suitable computing device. A network adapter may be any suitable hardware and/or software to enable the computing device to communicate wired and/or wireles sly with any other suitable computing device over any suitable computing network. The computing network may include wireless access points, switches, routers, gateways, and/or other networking equipment as well as any suitable wired and/or wireless communication medium or media for exchanging data between two or more computers, including the Internet. Computer-readable media may be adapted to store data to be processed and/or instructions to be executed by processor. The processor enables processing of data and execution of instructions. The data and instructions may be stored on the computer-readable storage media.</p><p id="p-0135" num="0134">A computing device may additionally have one or more components and peripherals, including input and output devices. These devices can be used, among other things, to present a user interface. Examples of output devices that can be used to provide a user interface include printers or display screens for visual presentation of output and speakers or other sound generating devices for audible presentation of output. Examples of input devices that can be used for a user interface include keyboards, and pointing devices, such as mice, touch pads, and digitizing tablets. As another example, a computing device may receive input information through speech recognition or in other audible format.</p><p id="p-0136" num="0135">Embodiments have been described where the techniques are implemented in circuitry and/or computer-executable instructions. It should be appreciated that some embodiments may be in the form of a method, of which at least one example has been provided. The acts performed as part of the method may be ordered in any suitable way. Accordingly, embodiments may be constructed in which acts are performed in an order different than illustrated, which may include performing some acts simultaneously, even though shown as sequential acts in illustrative embodiments.</p><p id="p-0137" num="0136">Various aspects of the embodiments described above may be used alone, in combination, or in a variety of arrangements not specifically discussed in the embodiments described in the foregoing and is therefore not limited in its application to the details and arrangement of components set forth in the foregoing description or illustrated in the drawings. For example, aspects described in one embodiment may be combined in any manner with aspects described in other embodiments.</p><p id="p-0138" num="0137">Use of ordinal terms such as &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; etc., in the claims to modify a claim element does not by itself connote any priority, precedence, or order of one claim element over another or the temporal order in which acts of a method are performed, but are used merely as labels to distinguish one claim element having a certain name from another element having a same name (but for use of the ordinal term) to distinguish the claim elements.</p><p id="p-0139" num="0138">Also, the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of &#x201c;including,&#x201d; &#x201c;comprising,&#x201d; &#x201c;having,&#x201d; &#x201c;containing,&#x201d; &#x201c;involving,&#x201d; and variations thereof herein, is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.</p><p id="p-0140" num="0139">The word &#x201c;exemplary&#x201d; is used herein to mean serving as an example, instance, or illustration. Any embodiment, implementation, process, feature, etc. described herein as exemplary should therefore be understood to be an illustrative example and should not be understood to be a preferred or advantageous example unless otherwise indicated.</p><p id="p-0141" num="0140">Having thus described several aspects of at least one embodiment, it is to be appreciated that various alterations, modifications, and improvements will readily occur to those skilled in the art. Such alterations, modifications, and improvements are intended to be part of this disclosure, and are intended to be within the spirit and scope of the principles described herein. Accordingly, the foregoing description and drawings are by way of example only.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for providing video data for immersive media implemented by a server in communication with a client device, the method comprising:<claim-text>receiving, from the client device, a request to access a stream of media data associated with immersive content at a point in time the client is first accessing the stream of media data for the immersive content;</claim-text><claim-text>determining an initial portion of media data, starting from the point in time the client requests to access, for the immersive content for delivery to the client device; and</claim-text><claim-text>transmitting, in response to the request to access the stream of media data, the initial portion of media data.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the request to access the stream of media data is an HTTP request and is received from the client device prior to the server transmitting the client device any manifest data for the immersive media content; and</claim-text><claim-text>the initial portion of media data is transmitted prior to, or in conjunction with, transmitting first manifest data for the immersive content to the client device.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the initial portion of media data comprises one or more low-quality media data segments.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the initial portion of media data further comprises an initialization segment.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining the initial portion of the media data for the immersive content comprises:<claim-text>accessing media data comprising a plurality of media tracks, each media track comprising different media data corresponding to different spatial portions of the immersive content;</claim-text><claim-text>determining, based on the request, a group of media tracks from the plurality of media tracks corresponding to a viewport of the client device; and</claim-text><claim-text>generating a single track adapted to comprise the initial portion of media data and transmitting the adapted track comprising the portion of media data to the client device.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the initial portion of media data comprises a plurality of stitched tiles, each corresponding one of the differential portions of the immersive content, from the plurality of media tracks.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the immersive content is live immersive content and the point in time is the latest time of the immersive content that the server possesses.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the request to access the stream of media data comprises one or more parameters of the live immersive content, the client device, or some combination thereof.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the one or more parameters of the live immersive content comprise a three-dimensional size of the live immersive content.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:<claim-text>determining that the live immersive content is not available; and</claim-text><claim-text>transmitting an indication to the client device that content at the point in time of accessing a stream of media data is not available.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A method for obtaining video data for immersive media implemented by a client device in communication with a server, the method comprising:<claim-text>accessing a stream of media data for immersive content at a point in time the client device is first accessing the stream of media data for the immersive content, comprising transmitting, to the server, a request to access the immersive content at the point in time; and</claim-text><claim-text>receiving, in response to the request to access the stream of media data, an initial portion of media data for the immersive content, starting from the point in time the client requests to access.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein:<claim-text>the request to access the stream of media data is an HTTP request and is transmitted by the client device prior to receiving any manifest data for the immersive media content from the server; and</claim-text><claim-text>the initial portion of media data is received prior to, or in conjunction with, receiving first manifest data for the immersive content from the server.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the initial portion of media data comprises one or more low-quality media data segments.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the initial portion of media data further comprises an initialization segment.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the initial portion of media data comprises:<claim-text>a single track adapted to comprise the initial portion of media data, wherein:<claim-text>the portion of media data is adapted for the client device based on a viewport of the client device; and</claim-text><claim-text>the portion of media data is generated from a group of tracks corresponding to the viewport, wherein the group of tracks each comprise different media data corresponding to different spatial portions of the immersive media.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the immersive content is live immersive content and the point in time is the latest time of the immersive content that the server possesses.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the request for the portion of media data comprises one or more parameters of the client device.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the one or more parameters comprise a three-dimensional size of a viewport of the client device.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the method further comprises:<claim-text>receiving an indication that live immersive content requested at the point in time of accessing a stream of media data is not available; and</claim-text><claim-text>transmitting a request for live immersive content at a point in time prior to the client accessing the stream of media data.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A system, comprising:<claim-text>at least one processor configured to perform a method for providing video data for immersive media implemented by a server in communication with a client device, the method comprising:<claim-text>receiving, from the client device, a request to access a stream of media data associated with immersive content at a point in time the client is first accessing the stream of media data for the immersive content;</claim-text><claim-text>determining an initial portion of media data, starting from the point in time the client requests to access, for the immersive content for delivery to the client device; and</claim-text></claim-text><claim-text>transmitting, in response to the request to access the stream of media data, the initial portion of media data.</claim-text></claim-text></claim></claims></us-patent-application>