<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006878A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006878</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17359758</doc-number><date>20210628</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>12</main-group><subgroup>24</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>12</main-group><subgroup>26</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>29</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>0668</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>0627</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>0817</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>065</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1097</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">FILE SERVER ARRAY AND ENHANCED PIPELINE TRANSMISSION</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>International Business Machines Corporation</orgname><address><city>Armonk</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Sui</last-name><first-name>Guang Han</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Sun</last-name><first-name>Zhi Gang</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Jing</last-name><first-name>Yu</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Liu</last-name><first-name>Xin Peng</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">In an approach for building file server arrays with stable and unstable nodes for enhanced pipeline transmission, a processor builds an array from a plurality of stable nodes, wherein each stable node of the plurality of stable nodes is linked to two other stable nodes of the plurality of stable nodes forming a line. A processor divides a plurality of unstable nodes into one or more groups of unstable nodes. A processor links each group of unstable nodes to two neighboring stable nodes within the array. A processor sends data through the array and the one or more groups of unstable nodes in two opposite directions. A processor monitors a node status for each node of the plurality of stable nodes and the plurality of unstable nodes.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="97.03mm" wi="158.75mm" file="US20230006878A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="238.51mm" wi="156.55mm" orientation="landscape" file="US20230006878A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="240.54mm" wi="154.86mm" orientation="landscape" file="US20230006878A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="177.12mm" wi="141.14mm" file="US20230006878A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="223.27mm" wi="173.31mm" file="US20230006878A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="172.55mm" wi="159.09mm" file="US20230006878A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="161.54mm" wi="177.38mm" file="US20230006878A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading><p id="p-0002" num="0001">The present invention relates generally to the field of cloud resources, and more particularly to building file server arrays with stable and unstable nodes for enhanced pipeline transmission.</p><p id="p-0003" num="0002">A spot instance is unused and available cloud computing capacity offered (e.g., for purchase) by cloud providers at generally discounted rates. Spot instances can play an important role in reducing cloud costs.</p><p id="p-0004" num="0003">Most cloud providers divide their pricing models into three categories: (1) On demand instances&#x2014;customers pay for computing power per hour or per second, without long-term commitments or upfront payments with ability to increase or decrease resources available at will. (2) Reserved instances&#x2014;for workloads that run on the cloud in the long term, customers commit to compute instances for a period of between one to three years, with the option of paying some of the amount upfront. Reserved instances grant discounts of between 40-75 percent, depending on the cloud provider and the level of commitment. (3) Spot instances&#x2014;spot instances let customers bid on unused capacity in the cloud provider's data center. Cloud providers provide the highest level of discount, up to 90 percent compared to on demand costs.</p><p id="p-0005" num="0004">Spot instances have an important caveat&#x2014;reliability is not guaranteed, and the cloud provider can interrupt these instances at short notice to reclaim capacity. However, with careful management, spot instances can be useful for batch processing and high-performance computing (HPC) clusters, web server clusters, and many other workloads.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0006" num="0005">Aspects of an embodiment of the present invention disclose a method, computer program product, and computer system for building file server arrays with stable and unstable nodes for enhanced pipeline transmission. A processor builds an array from a plurality of stable nodes, wherein each stable node of the plurality of stable nodes is linked to two other stable nodes of the plurality of stable nodes forming a line. A processor divides a plurality of unstable nodes into one or more groups of unstable nodes. A processor links each group of unstable nodes to two neighboring stable nodes within the array. A processor sends data through the array and the one or more groups of unstable nodes in two opposite directions. A processor monitors a node status for each node of the plurality of stable nodes and the plurality of unstable nodes.</p><p id="p-0007" num="0006">In several aspects of the present invention, a processor divides the plurality of unstable nodes into groups based on at least one of price of the respective unstable node and location of the respective unstable node.</p><p id="p-0008" num="0007">In several aspects of the present invention, a maximum number of groups of unstable nodes equals a total number of stable nodes minus one.</p><p id="p-0009" num="0008">In several aspects of the present invention, a processor enables each node to receive two copies of the data from different directions and to send the data out in the different directions.</p><p id="p-0010" num="0009">In several aspects of the present invention, a processor, responsive to determining the node status for at least one of the plurality of stable nodes and the plurality of unstable nodes has changed, rebuilds the array based on the change.</p><p id="p-0011" num="0010">In several aspects of the present invention, a change in the node status is selected from the group consisting of a stable node becoming unavailable, a new stable node becoming available, an unstable node being reclaimed, and a new unstable node becoming available.</p><p id="p-0012" num="0011">In several aspects of the present invention, a processor links each unstable node in a respective group of the one or more groups of unstable nodes to two other unstable nodes in the respective group of the one or more groups of unstable nodes.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>1</b>A-<b>1</b>B</figref> are functional block diagrams illustrating file server array environment <b>100</b>, in accordance with an embodiment of the present invention.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart depicting operational steps of an enhanced pipeline transmission program, for building file server arrays with stable and unstable nodes for enhanced pipeline transmission, in accordance with an embodiment of the present invention.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a block diagram of components of a server of the file server array environment of <figref idref="DRAWINGS">FIG. <b>1</b>A-<b>1</b>B</figref>, in accordance with an embodiment of the present invention.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a cloud computing environment according to an embodiment of the present invention.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts abstraction model layers according to an embodiment of the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0018" num="0017">Embodiments of the present invention recognize that pipeline transmission is a solution for translating data among nodes. When a set of nodes are connected as an array, once a first node gets a byte of transferred data, the first node saves a copy and sends it to the next node that is connected, and so on until the last node receives the transferred data allowing all the nodes to get the data timely. A problem arises when the network is unstable causing data transmission between the nodes in the array to be delayed. Pipeline transmission requires stable nodes but nodes from spot instances are unstable. Thus, embodiments of the present invention recognize the need for a way to use pipeline transmission, which requires stable nodes, during spot instances, which has unstable network.</p><p id="p-0019" num="0018">Embodiments of the present invention provide a system and method for building file server arrays with stable and unstable nodes for enhanced pipeline transmission. Embodiments of the present invention divide the unstable nodes into several groups (such as by price, by location, etc.) that will be linked as an array and get data from stable nodes. Embodiments of the present invention transfer data among nodes in an array by two pipelines going in opposite directions. Each node will receive two copies of data from different directions and then send the newest data out to the next node in the array. Embodiments of the present invention enable each node to get needed data timely while allowing cost savings through use of spot instances.</p><p id="p-0020" num="0019">In an example of the cost savings provided by embodiments of the present invention, a price for a stable node is 1, an unstable node is 0.2, a workload needs N stable nodes (as done before the invention herein), or M stable nodes and N unstable nodes (as done by the invention herein). Thus, using this invention, the cost would be calculated using the equation M+0.2*N, and not using this invention, the cost is equal to N. Table A below depicts a cost comparison.</p><p id="p-0021" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="49pt" align="center"/><colspec colname="2" colwidth="63pt" align="center"/><colspec colname="3" colwidth="56pt" align="center"/><colspec colname="4" colwidth="49pt" align="center"/><thead><row><entry namest="1" nameend="4" rowsep="1">TABLE A</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>Stable nodes</entry><entry>Cost with this</entry><entry/><entry/></row><row><entry>(N):Unstable</entry><entry>invention</entry><entry>Cost before this</entry><entry>Cost savings</entry></row><row><entry>nodes (M)</entry><entry>(M + 0.2*N)</entry><entry>invention (N)</entry><entry>percentage</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>200:1000</entry><entry>400 = 200 + 200</entry><entry>1000</entry><entry>60%</entry></row><row><entry>100:1000</entry><entry>300 = 100 + 200</entry><entry>1000</entry><entry>70%</entry></row><row><entry>&#x2002;20:1000</entry><entry>220 = 20 + 200&#x2002;</entry><entry>1000</entry><entry>78%</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0022" num="0020">As used herein, &#x201c;stable node&#x201d; is used for normal cloud resources that will not be reclaimed and &#x201c;unstable node&#x201d; is used for cloud resources that may be reclaimed at any time, e.g., spot instances.</p><p id="p-0023" num="0021">Implementation of embodiments of the invention may take a variety of forms, and exemplary implementation details are discussed subsequently with reference to the Figures. The Figures provides only an illustration of one implementation and does not imply any limitations with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environment may be made by those skilled in the art without departing from the scope of the invention as recited by the claims.</p><p id="p-0024" num="0022"><figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>B</figref> are functional block diagrams illustrating file server array environment <b>100</b>, in accordance with an embodiment of the present invention.</p><p id="p-0025" num="0023">File server array environment <b>100</b> includes cloud <b>105</b> and on-premise cluster <b>120</b> interconnected over network <b>125</b>. Network <b>125</b> can be, for example, a telecommunications network, a local area network (LAN), a wide area network (WAN), such as the Internet, or a combination of the three, and can include wired, wireless, or fiber optic connections. Network <b>125</b> can include one or more wired and/or wireless networks capable of receiving and transmitting data, voice, and/or video signals, including multimedia signals that include voice, data, and video information. In general, network <b>125</b> can be any combination of connections and protocols that will support communications between cloud <b>105</b>, on-premise cluster <b>120</b>, and other computing devices (not shown) within distributed data processing environment <b>100</b>.</p><p id="p-0026" num="0024">Cloud <b>105</b> operates as a cloud environment provided by a cloud provider that provides services through servers (i.e., nodes) to customers based on customer requests. Cloud <b>105</b> includes management server <b>110</b>, servers <b>130</b> (i.e., stable nodes), and servers <b>140</b> (i.e., unstable nodes) (as grouped by enhanced pipeline transmission program <b>112</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>).</p><p id="p-0027" num="0025">Management server <b>110</b> operates enhanced pipeline transmission program <b>112</b> for building the file server array, helps build the network connection between nodes in the file server array, and handles failover cases (e.g., a file server crashes). When some unstable nodes are reclaimed or new unstable nodes are available, management server <b>110</b> will rebuild the unstable node arrays, if necessary, without impacting the other unstable nodes. Management server <b>110</b> can be a standalone computing device, a management server, a web server, a mobile computing device, or any other electronic device or computing system capable of receiving, sending, and processing data. In some embodiments, management server <b>110</b> can represent a server computing system utilizing multiple computers as a server system, such as in a cloud computing environment. In another embodiment, management server <b>110</b> can represent a computing system utilizing clustered computers and components (e.g., database server computers, application server computers, etc.) that act as a single pool of seamless resources when accessed within file server array environment <b>100</b>. Management server <b>110</b> may include internal and external hardware components, as depicted and described in further detail with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0028" num="0026">Enhanced pipeline transmission program <b>112</b> operates to build file server arrays with stable and unstable nodes, group the unstable nodes, send data through the file server arrays in two opposite directions, and monitor node status and do error handlings for enhanced pipeline transmission. In the depicted embodiment, enhanced pipeline transmission program <b>112</b> is a standalone program. In another embodiment, enhanced pipeline transmission program <b>112</b> may be integrated into another software product, such as a software package for cloud services. Enhanced pipeline transmission program <b>112</b> is depicted and described in further detail with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0029" num="0027">On-premise cluster <b>120</b> operates as one or more computing devices on the premises of a customer (i.e., company, organization, etc.) of cloud <b>105</b>. Workloads (i.e., requests for cloud services) from on-premise cluster <b>120</b> are sent over network <b>125</b> to management server <b>110</b> to be transmitted among the stable and unstable nodes.</p><p id="p-0030" num="0028">Servers <b>130</b> represent stable nodes and servers <b>140</b> represent unstable nodes. Servers <b>130</b> and <b>140</b> can each be a standalone computing device, a management server, a web server, a mobile computing device, or any other electronic device or computing system capable of receiving, sending, and processing data. In other embodiments, servers <b>130</b> and <b>140</b> can each represent a server computing system utilizing multiple computers as a server system, such as in a cloud computing environment. In another embodiment, servers <b>130</b> and <b>140</b> can each represent a computing system utilizing clustered computers and components (e.g., database server computers, application server computers, etc.) that act as a single pool of seamless resources when accessed within file server array environment <b>100</b>. Servers <b>130</b> and <b>140</b> may include internal and external hardware components, as depicted and described in further detail with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0031" num="0029"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> is a functional block diagram illustrating file server array environment <b>100</b> as built by enhanced pipeline transmission program <b>112</b> (as described in more detail in step <b>210</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> below), in accordance with an embodiment of the present invention. <figref idref="DRAWINGS">FIG. <b>1</b>B</figref> is a functional block diagram illustrating grouped unstable nodes within file server array environment <b>100</b> as grouped by enhanced pipeline transmission program <b>112</b> (as described in more detail in step <b>220</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> below) and illustrating the two pipelines of data using the stable and unstable nodes as sent by enhanced pipeline transmission program <b>112</b> (as described in more detail in step <b>230</b> below), in accordance with an embodiment of the present invention. The two pipelines are depicted using two different arrow styles.</p><p id="p-0032" num="0030"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart <b>200</b> depicting operational steps of enhanced pipeline transmission program <b>112</b>, for building file server arrays with stable and unstable nodes for enhanced pipeline transmission, in accordance with an embodiment of the present invention. It should be appreciated that the process depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates one possible iteration of enhanced pipeline transmission program <b>112</b>, which may be repeated whenever a node status change occurs (e.g., an unstable node is reclaimed and/or new unstable nodes become available) or an error occurs as monitored in step <b>240</b> below.</p><p id="p-0033" num="0031">In step <b>210</b>, enhanced pipeline transmission program <b>112</b> builds a file server array. In an embodiment, enhanced pipeline transmission program <b>112</b> builds (i.e., forms) a file server array for the stable nodes within the cloud, e.g., servers <b>130</b> of cloud <b>105</b>, as shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. In an embodiment, enhanced pipeline transmission program <b>112</b> links the stable nodes within the cloud by linking one server to another in a line (i.e., one dimension) creating the array (i.e., server list). In other words, each stable node of a plurality of stable nodes is linked to two other stable nodes of the plurality of stable nodes forming a line of servers. Building the file server array enables enhanced pipeline transmission program <b>112</b> to manage the servers.</p><p id="p-0034" num="0032">In step <b>220</b>, enhanced pipeline transmission program <b>112</b> divides unstable nodes into groups and builds several unstable node arrays based on the groups. In an embodiment, enhanced pipeline transmission program <b>112</b> divides and groups the currently available unstable nodes based on price, location, etc. In an embodiment, enhanced pipeline transmission program <b>112</b> links each unstable node in a respective group of the one or more groups of unstable nodes to two other unstable nodes in the respective group of the one or more groups of unstable nodes to form an array of unstable nodes in each group. In an embodiment, enhanced pipeline transmission program <b>112</b> links the unstable nodes in a group as an array and each group is linked to two stable nodes from which the group will receive and send data, as shown in <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>. The same two stable nodes are only linked to one group of unstable nodes. <figref idref="DRAWINGS">FIG. <b>1</b>B</figref> depicts two groups of unstable nodes (servers <b>140</b>) but there can be more groups of unstable nodes. The maximum number of groups there can be is one less number of groups of unstable nodes as number of stable nodes built in the file server array in step <b>210</b>, i.e., maximum # of groups of unstable nodes=# of stable nodes&#x2014;<b>1</b>.</p><p id="p-0035" num="0033">In step <b>230</b>, enhanced pipeline transmission program <b>112</b> sends the same data through the file server array in two opposite directions. In an embodiment, enhanced pipeline transmission program <b>112</b> begins a first pipeline at the first stable node in line next to the management server and ends the first pipeline at the last stable node in the array. In an embodiment, enhanced pipeline transmission program <b>112</b> begins a second pipeline at the last stable node farthest in line from the management server and ends the second pipeline at the management server. In an embodiment, enhanced pipeline transmission program <b>112</b> enables each node to receive two copies of the data from different directions and send the data out in different directions. To ensure the node receiving the data can get the data timely, enhanced pipeline transmission program <b>112</b> enables each node to check the received two copies and only send out the data that a respective node hasn't sent out before. In this way, even if the data transmission on one node is delayed, the other nodes can still get the new data from another direction timely.</p><p id="p-0036" num="0034">In step <b>240</b>, enhanced pipeline transmission program <b>112</b> monitors nodes status and does error handlings. In an embodiment, enhanced pipeline transmission program <b>112</b> monitors a status of each of the stable and unstable nodes. If a status of any of the nodes changes (e.g., an unstable node is reclaimed and/or new unstable nodes become available), enhanced pipeline transmission program <b>112</b> returns to step <b>210</b> to rebuild the file server array based on the change. A stable or unstable node may become unavailable (e.g. no response, cannot reach from network, etc). When this happens, the pipeline for data transmission will be broken, so enhanced pipeline transmission program <b>112</b> handles this error by returning to step <b>210</b> to rebuild the file server array based on the change. For example, if a node becomes unavailable, enhanced pipeline transmission program <b>112</b> drops the unavailable node and links its neighbor nodes together.</p><p id="p-0037" num="0035"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a block diagram of components of server <b>300</b>, suitable for management server <b>110</b>, servers <b>130</b>, and servers <b>140</b> within file server array environment <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in accordance with an embodiment of the present invention. It should be appreciated that <figref idref="DRAWINGS">FIG. <b>3</b></figref> provides only an illustration of one implementation and does not imply any limitations with regard to the environments in which different embodiments can be implemented. Many modifications to the depicted environment can be made.</p><p id="p-0038" num="0036">Server <b>300</b> includes communications fabric <b>302</b>, which provides communications between cache <b>316</b>, memory <b>306</b>, persistent storage <b>308</b>, communications unit <b>310</b>, and input/output (I/O) interface(s) <b>312</b>. Communications fabric <b>302</b> can be implemented with any architecture designed for passing data and/or control information between processors (such as microprocessors, communications and network processors, etc.), system memory, peripheral devices, and any other hardware components within a system. For example, communications fabric <b>402</b> can be implemented with one or more buses or a crossbar switch.</p><p id="p-0039" num="0037">Memory <b>306</b> and persistent storage <b>308</b> are computer readable storage media. In this embodiment, memory <b>306</b> includes random access memory (RAM). In general, memory <b>306</b> can include any suitable volatile or non-volatile computer readable storage media. Cache <b>316</b> is a fast memory that enhances the performance of computer processor(s) <b>304</b> by holding recently accessed data, and data near accessed data, from memory <b>306</b>.</p><p id="p-0040" num="0038">Programs may be stored in persistent storage <b>308</b> and in memory <b>306</b> for execution and/or access by one or more of the respective computer processors <b>304</b> via cache <b>316</b>. In an embodiment, persistent storage <b>308</b> includes a magnetic hard disk drive. Alternatively, or in addition to a magnetic hard disk drive, persistent storage <b>308</b> can include a solid state hard drive, a semiconductor storage device, read-only memory (ROM), erasable programmable read-only memory (EPROM), flash memory, or any other computer readable storage media that is capable of storing program instructions or digital information.</p><p id="p-0041" num="0039">The media used by persistent storage <b>308</b> may also be removable. For example, a removable hard drive may be used for persistent storage <b>308</b>. Other examples include optical and magnetic disks, thumb drives, and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage <b>308</b>.</p><p id="p-0042" num="0040">Communications unit <b>310</b>, in these examples, provides for communications with other data processing systems or devices. In these examples, communications unit <b>310</b> includes one or more network interface cards. Communications unit <b>310</b> may provide communications through the use of either or both physical and wireless communications links. Programs may be downloaded to persistent storage <b>308</b> through communications unit <b>310</b>.</p><p id="p-0043" num="0041">I/O interface(s) <b>312</b> allows for input and output of data with other devices that may be connected to management server <b>110</b>, servers <b>130</b>, and servers <b>140</b>. For example, I/O interface <b>312</b> may provide a connection to external devices <b>318</b> such as a keyboard, keypad, a touch screen, and/or some other suitable input device. External devices <b>318</b> can also include portable computer readable storage media such as, for example, thumb drives, portable optical or magnetic disks, and memory cards. Software and data used to practice embodiments of the present invention can be stored on such portable computer readable storage media and can be loaded onto persistent storage <b>308</b> via I/O interface(s) <b>312</b>. I/O interface(s) <b>312</b> also connect to a display <b>320</b>.</p><p id="p-0044" num="0042">Display <b>320</b> provides a mechanism to display data to a user and may be, for example, a computer monitor.</p><p id="p-0045" num="0043">It is to be understood that although this disclosure includes a detailed description on cloud computing, implementation of the teachings recited herein are not limited to a cloud computing environment. Rather, embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.</p><p id="p-0046" num="0044">Cloud computing is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services) that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics, at least three service models, and at least four deployment models.</p><p id="p-0047" num="0045">Characteristics are as follows:</p><p id="p-0048" num="0046">On-demand self-service: a cloud consumer can unilaterally provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction with the service's provider.</p><p id="p-0049" num="0047">Broad network access: capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (e.g., mobile phones, laptops, and PDAs).</p><p id="p-0050" num="0048">Resource pooling: the provider's computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter).</p><p id="p-0051" num="0049">Rapid elasticity: capabilities can be rapidly and elastically provisioned, in some cases automatically, to quickly scale out and rapidly released to quickly scale in. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.</p><p id="p-0052" num="0050">Measured service: cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported, providing transparency for both the provider and consumer of the utilized service.</p><p id="p-0053" num="0051">Service Models are as follows:</p><p id="p-0054" num="0052">Software as a Service (SaaS): the capability provided to the consumer is to use the provider's applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser (e.g., web-based e-mail). The consumer does not manage or control the underlying cloud infrastructure including network, servers, operating systems, storage, or even individual application capabilities, with the possible exception of limited user-specific application configuration settings.</p><p id="p-0055" num="0053">Platform as a Service (PaaS): the capability provided to the consumer is to deploy onto the cloud infrastructure consumer-created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks, servers, operating systems, or storage, but has control over the deployed applications and possibly application hosting environment configurations.</p><p id="p-0056" num="0054">Infrastructure as a Service (IaaS): the capability provided to the consumer is to provision processing, storage, networks, and other fundamental computing resources where the consumer is able to deploy and run arbitrary software, which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems, storage, deployed applications, and possibly limited control of select networking components (e.g., host firewalls).</p><p id="p-0057" num="0055">Deployment Models are as follows:</p><p id="p-0058" num="0056">Private cloud: the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on-premises or off-premises.</p><p id="p-0059" num="0057">Community cloud: the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns (e.g., mission, security requirements, policy, and compliance considerations). It may be managed by the organizations or a third party and may exist on-premises or off-premises.</p><p id="p-0060" num="0058">Public cloud: the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.</p><p id="p-0061" num="0059">Hybrid cloud: the cloud infrastructure is a composition of two or more clouds (private, community, or public) that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability (e.g., cloud bursting for load-balancing between clouds).</p><p id="p-0062" num="0060">A cloud computing environment is service oriented with a focus on statelessness, low coupling, modularity, and semantic interoperability. At the heart of cloud computing is an infrastructure that includes a network of interconnected nodes.</p><p id="p-0063" num="0061">Referring now to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, illustrative cloud computing environment <b>50</b> is depicted. As shown, cloud computing environment <b>50</b> includes one or more cloud computing nodes <b>10</b> with which local computing devices used by cloud consumers, such as, for example, personal digital assistant (PDA) or cellular telephone <b>54</b>A, desktop computer <b>54</b>B, laptop computer <b>54</b>C, and/or automobile computer system <b>54</b>N may communicate. Nodes <b>10</b> may communicate with one another. They may be grouped (not shown) physically or virtually, in one or more networks, such as Private, Community, Public, or Hybrid clouds as described hereinabove, or a combination thereof. This allows cloud computing environment <b>50</b> to offer infrastructure, platforms and/or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices <b>54</b>A-N shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> are intended to be illustrative only and that computing nodes <b>10</b> and cloud computing environment <b>50</b> can communicate with any type of computerized device over any type of network and/or network addressable connection (e.g., using a web browser).</p><p id="p-0064" num="0062">Referring now to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, a set of functional abstraction layers provided by cloud computing environment <b>50</b> (<figref idref="DRAWINGS">FIG. <b>4</b></figref>) is shown. It should be understood in advance that the components, layers, and functions shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref> are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted, the following layers and corresponding functions are provided:</p><p id="p-0065" num="0063">Hardware and software layer <b>60</b> includes hardware and software components. Examples of hardware components include: mainframes <b>61</b>; RISC (Reduced Instruction Set Computer) architecture based servers <b>62</b>; servers <b>63</b>; blade servers <b>64</b>; storage devices <b>65</b>; and networks and networking components <b>66</b>. In some embodiments, software components include network application server software <b>67</b> and database software <b>68</b>.</p><p id="p-0066" num="0064">Virtualization layer <b>70</b> provides an abstraction layer from which the following examples of virtual entities may be provided: virtual servers <b>71</b>; virtual storage <b>72</b>; virtual networks <b>73</b>, including virtual private networks; virtual applications and operating systems <b>74</b>; and virtual clients <b>75</b>.</p><p id="p-0067" num="0065">In one example, management layer <b>80</b> may provide the functions described below. Resource provisioning <b>81</b> provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing <b>82</b> provide cost tracking as resources are utilized within the cloud computing environment, and billing or invoicing for consumption of these resources. In one example, these resources may include application software licenses. Security provides identity verification for cloud consumers and tasks, as well as protection for data and other resources. User portal <b>83</b> provides access to the cloud computing environment for consumers and system administrators. Service level management <b>84</b> provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement (SLA) planning and fulfillment <b>85</b> provide pre-arrangement for, and procurement of, cloud computing resources for which a future requirement is anticipated in accordance with an SLA.</p><p id="p-0068" num="0066">Workloads layer <b>90</b> provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include: mapping and navigation <b>91</b>; software development and lifecycle management <b>92</b>; virtual classroom education delivery <b>93</b>; data analytics processing <b>94</b>; transaction processing <b>95</b>; and enhanced pipeline transmission using stable and unstable nodes <b>96</b>.</p><p id="p-0069" num="0067">Programs described herein is identified based upon the application for which it is implemented in a specific embodiment of the invention. However, it should be appreciated that any particular program nomenclature herein is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and/or implied by such nomenclature.</p><p id="p-0070" num="0068">The present invention may be a system, a method, and/or a computer program product. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.</p><p id="p-0071" num="0069">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0072" num="0070">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0073" num="0071">Computer readable program instructions for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++ or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present invention.</p><p id="p-0074" num="0072">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0075" num="0073">These computer readable program instructions may be provided to a processor of a general-purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0076" num="0074">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0077" num="0075">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the block may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0078" num="0076">The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The terminology used herein was chosen to best explain the principles of the embodiment, the practical application or technical improvement over technologies found in the marketplace, or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method for building file server arrays with stable and unstable nodes for enhanced pipeline transmission, the computer-implemented method comprising:<claim-text>building, by one or more processors, an array from a plurality of stable nodes, wherein each stable node of the plurality of stable nodes is linked to two other stable nodes of the plurality of stable nodes forming a line;</claim-text><claim-text>dividing, by the one or more processors, a plurality of unstable nodes into one or more groups of unstable nodes;</claim-text><claim-text>linking, by the one or more processors, each group of unstable nodes to two neighboring stable nodes within the array;</claim-text><claim-text>sending, by the one or more processors, data through the array and the one or more groups of unstable nodes in two opposite directions; and</claim-text><claim-text>monitoring, by the one or more processors, a node status for each node of the plurality of stable nodes and the plurality of unstable nodes.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein dividing the plurality of unstable nodes into groups is based on at least one of price of the respective unstable node and location of the respective unstable node.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a maximum number of groups of unstable nodes equals a total number of stable nodes minus one.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein sending the data through the array and the one or more groups of unstable nodes in the two opposite directions comprises:<claim-text>enabling, by the one or more processors, each node to receive two copies of the data from different directions and to send the data out in the different directions.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>responsive to determining a change to the node status for at least one of the plurality of stable nodes and the plurality of unstable nodes has occurred, rebuilding, by the one or more processors, the array based on the change.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a change in the node status is selected from the group consisting of a stable node becoming unavailable, a new stable node becoming available, an unstable node being reclaimed, and a new unstable node becoming available.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein dividing the plurality of unstable nodes into the one or more groups of unstable nodes comprises:<claim-text>linking, by the one or more processors, each unstable node in a respective group of the one or more groups of unstable nodes to two other unstable nodes in the respective group of the one or more groups of unstable nodes.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A computer program product comprising:<claim-text>one or more computer readable storage media and program instructions collectively stored on the one or more computer readable storage media, the stored program instructions comprising:</claim-text><claim-text>program instructions to build an array from a plurality of stable nodes, wherein each stable node of the plurality of stable nodes is linked to two other stable nodes of the plurality of stable nodes forming a line;</claim-text><claim-text>program instructions to divide a plurality of unstable nodes into one or more groups of unstable nodes;</claim-text><claim-text>program instructions to link each group of unstable nodes to two neighboring stable nodes within the array;</claim-text><claim-text>program instructions to send data through the array and the one or more groups of unstable nodes in two opposite directions; and</claim-text><claim-text>program instructions to monitor a node status for each node of the plurality of stable nodes and the plurality of unstable nodes.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the program instructions to divide the plurality of unstable nodes into groups is based on at least one of price of the respective unstable node and location of the respective unstable node.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein a maximum number of groups of unstable nodes equals a total number of stable nodes minus one.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the program instructions to send the data through the array and the one or more groups of unstable nodes in the two opposite directions comprise:<claim-text>program instructions to enable each node to receive two copies of the data from different directions and to send the data out in the different directions.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:<claim-text>responsive to determining a change to the node status for at least one of the plurality of stable nodes and the plurality of unstable nodes has changed, program instructions to rebuild the array based on the change.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein a change in the node status is selected from the group consisting of a stable node becoming unavailable, a new stable node becoming available, an unstable node being reclaimed, and a new unstable node becoming available.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the program instructions to divide the plurality of unstable nodes into the one or more groups of unstable nodes comprise:<claim-text>program instructions to link each unstable node in a respective group of the one or more groups of unstable nodes to two other unstable nodes in the respective group of the one or more groups of unstable nodes.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A computer system comprising:<claim-text>one or more computer processors;</claim-text><claim-text>one or more computer readable storage media;</claim-text><claim-text>program instructions collectively stored on the one or more computer readable storage media for execution by at least one of the one or more computer processors, the stored program instructions comprising:</claim-text><claim-text>program instructions to build an array from a plurality of stable nodes, wherein each stable node of the plurality of stable nodes is linked to two other stable nodes of the plurality of stable nodes forming a line;</claim-text><claim-text>program instructions to divide a plurality of unstable nodes into one or more groups of unstable nodes;</claim-text><claim-text>program instructions to link each group of unstable nodes to two neighboring stable nodes within the array;</claim-text><claim-text>program instructions to send data through the array and the one or more groups of unstable nodes in two opposite directions; and</claim-text><claim-text>program instructions to monitor a node status for each node of the plurality of stable nodes and the plurality of unstable nodes.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the program instructions to divide the plurality of unstable nodes into groups is based on at least one of price of the respective unstable node and location of the respective unstable node.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein a maximum number of groups of unstable nodes equals a total number of stable nodes minus one.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the program instructions to send the data through the array and the one or more groups of unstable nodes in the two opposite directions comprise:<claim-text>program instructions to enable each node to receive two copies of the data from different directions and to send the data out in the different directions.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>responsive to determining a change to the node status for at least one of the plurality of stable nodes and the plurality of unstable nodes has changed, program instructions to rebuild the array based on the change.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein a change in the node status is selected from the group consisting of a stable node becoming unavailable, a new stable node becoming available, an unstable node being reclaimed, and a new unstable node becoming available.</claim-text></claim></claims></us-patent-application>