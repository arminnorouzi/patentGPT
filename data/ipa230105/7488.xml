<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007489A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007489</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17940541</doc-number><date>20220908</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>W</subclass><main-group>12</main-group><subgroup>122</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>W</subclass><main-group>12</main-group><subgroup>03</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>W</subclass><main-group>12</main-group><subgroup>106</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>W</subclass><main-group>12</main-group><subgroup>61</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>W</subclass><main-group>56</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20210101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>W</subclass><main-group>12</main-group><subgroup>122</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20210101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>W</subclass><main-group>12</main-group><subgroup>03</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20210101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>W</subclass><main-group>12</main-group><subgroup>106</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20210101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>W</subclass><main-group>12</main-group><subgroup>61</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>W</subclass><main-group>56</main-group><subgroup>001</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">System And Method To Improve Encrypted Transmissions Between Nodes</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17212488</doc-number><date>20210325</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11477653</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17940541</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>63133876</doc-number><date>20210105</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Silicon Laboratories Inc.</orgname><address><city>Austin</city><state>TX</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Buron</last-name><first-name>Jakob</first-name><address><city>S&#xf8;borg</city><country>DK</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Esbensen</last-name><first-name>Anders Lynge</first-name><address><city>K&#xf8;benhavn NV</city><country>DK</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Roum-M&#xf8;ller</last-name><first-name>Jonas</first-name><address><city>H&#xf8;rsholm</city><country>DK</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Systems and methods for improving encrypted transmissions between nodes in a network are disclosed. In one embodiment, two sets of nonce values are used to monitor communications between each pair of network devices, wherein one set of nonce values is used for packets transmitted from a first node to a second node, and the second set of nonce values is used for packets transmitted from the second node to the first node. These nonce values are used to encrypt packets transmitted between the two nodes. In this way, the probability of loss of synchronization may be reduced, especially in configurations where there is an intermediate node between the first node and the second node. In another embodiment, the possibility of a delay attack is minimized by the intentional resetting of security parameters.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="160.87mm" wi="158.75mm" file="US20230007489A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="201.68mm" wi="157.65mm" orientation="landscape" file="US20230007489A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="112.18mm" wi="122.26mm" file="US20230007489A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="179.83mm" wi="162.05mm" file="US20230007489A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="222.67mm" wi="157.23mm" orientation="landscape" file="US20230007489A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><p id="p-0002" num="0001">This application is a Continuation of U.S. patent application Ser. No. 17/212,488 filed Mar. 25, 2021, which claims priority of U.S. Provisional Patent Application Ser. No. 63/133,876, filed Jan. 5, 2021, the disclosures of which are incorporated by reference in their entireties.</p><p id="p-0003" num="0002">This disclosure describes systems and methods for maintaining synchronization between two nodes to allow the encryption of transmissions between those nodes, and minimize the chance of a delay attack.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Certain network protocols utilize encryption to securely transmit messages between nodes. In certain embodiments, all of the messages are encrypted using the same key. In other words, the two nodes determine an encryption key and utilize that key for all transmissions.</p><p id="p-0005" num="0004">In other embodiments, the two nodes may utilize initialization vectors (IVs) or nonces so that each transmission is encrypted using a different key. For example, the Z-Wave network protocol uses a concept of SPANs (Singlecast Pre-Agreed Nonce). For each transmission between two nodes, a unique SPAN is used, which is known only to the two nodes. After the transmission is sent and received, both nodes update the SPAN using the same algorithm.</p><p id="p-0006" num="0005">In this way, a malicious actor cannot decipher transmissions between the two nodes by monitoring these transmissions over an extended period, since each transmission was sent with a different SPAN. This technique requires that the two nodes remain synchronized such that each is aware of the SPAN that was used by the other node to encrypt the incoming packet.</p><p id="p-0007" num="0006">However, there are issues with this approach. <figref idref="DRAWINGS">FIG. <b>1</b></figref> shows one such limitation. In this situation, a first node <b>1</b>, labelled Node A, and a second node <b>2</b>, labelled Node B, are communicating with each other through an intermediate node <b>3</b>, which may be a repeater or other device. The first node <b>1</b> and second node <b>2</b> utilize the same SPAN for all communications between the two nodes. Specifically, when a node transmits or receives a packet, it updates its SPAN. For example, the node may increment a counter, which is used as an index into a sequence of nonce values. Alternatively, the node may execute a software function to update its SPAN. At time T<b>0</b>, the two nodes are synchronized, and both indicate that the SPAN is set to the same number, which for purposes of illustration, is 18. Of course, any other value may also be used. This SPAN is used to encrypt and decrypt a particular packet.</p><p id="p-0008" num="0007">At time T<b>1</b>, Node A transmits a first packet to the intermediate node <b>3</b> and receives an acknowledgement from that intermediate node <b>3</b>. Consequently, since the packet was successfully transmitted, Node A increments the SPAN. Thus, Node A now believes that the current SPAN is 19.</p><p id="p-0009" num="0008">At time T<b>2</b>, the intermediate node <b>3</b> then forwards the first packet to Node B. However, this transmission may fail, such that Node B does not receive the first packet, which must be retransmitted by the intermediate node <b>3</b> at a later time. The retransmission utilizes the same SPAN value.</p><p id="p-0010" num="0009">However, Node B may have a second packet to transmit to Node A. Since Node B has yet to receive the first packet, it uses the SPAN value of 18 to transmit this second packet to Node A at time T<b>3</b>. Since the second packet was successfully transmitted, Node B updates its SPAN to 19.</p><p id="p-0011" num="0010">However, Node A is unable to decrypt this second packet because its SPAN has already been updated to 19, as described above.</p><p id="p-0012" num="0011">At time T<b>4</b>, the intermediate node <b>3</b> successfully forwards the first packet to Node B. However, Node B cannot decrypt this packet since this packet utilizes a SPAN value of 18 and the SPAN for Node B current is set to 19.</p><p id="p-0013" num="0012">Because the two nodes <b>1</b>, <b>2</b> were unable to decrypt these two packets, the two nodes <b>1</b>, <b>2</b> are forced to resynchronize as shown at time T<b>5</b>. Note that the resynchronization process is time consuming, increases power and lowers efficiency.</p><p id="p-0014" num="0013">Therefore, it would be beneficial if there were a system and method to maintain synchronization between two nodes that utilize IVs or nonces. It would be advantageous if this technique could be easily introduced.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0015" num="0014">Systems and methods for improving encrypted transmissions between nodes in a network are disclosed. In one embodiment, two sets of nonce values are used to encrypt communications between each pair of network devices, wherein one set of nonce values is used for packets transmitted from a first node to a second node, and the second set of nonce values is used for packets transmitted from the second node to the first node. These nonce values are used to encrypt packets transmitted between the two nodes. In this way, the probability of loss of synchronization may be reduced, especially in configurations where there is an intermediate node between the first node and the second node. In another embodiment, the possibility of a delay attack is minimized by the intentional resetting of security parameters.</p><p id="p-0016" num="0015">According to one embodiment, a method of maintaining synchronization between a first node and a second node transmitting encrypted packets is disclosed. The method comprises creating, in the first node and the second node, an initial value for a first nonce value used for transmissions from the first node to the second node; updating, at the first node, the first nonce value whenever a packet destined for the second node is successfully transmitted; and updating, at the second node, the first nonce value whenever a packet from the first node is successfully received; wherein the first nonce value is used by the first node to encrypt packets transmitted to the second node and by the second node to decrypt packets received from the first node. In some embodiments, the method further comprises creating, in the first node and the second node, an initial value for a second nonce value used for transmissions from the second node to the first node; updating, at the second node, the second nonce value whenever a packet destined for the first node is successfully transmitted; and updating, at the first node, the second nonce value whenever a packet from the second node is successfully received; wherein the second nonce value is used by the second node to encrypt packets transmitted to the first node and by the first node to decrypt packets received from the second node. In certain embodiments, the first nonce value and the second nonce value differ over time due to a difference in events that cause each nonce value to be updated. In some embodiments, the first node and the second node each comprise a sequence of first nonce values, and updating the first nonce value comprises incrementing an index into the sequence of first nonce values. In some embodiments, the first node and the second node each comprise a sequence of nonce values, and updating the first nonce value comprises incrementing a first index into the sequence of nonce values and updating the second nonce value comprises incrementing a second index into the sequence of nonce values. In some embodiments, the first node and the second node each comprise a sequence of first nonce values and a sequence of second nonce values, and updating the first nonce value comprises incrementing a first index into the sequence of first nonce values and updating the second nonce value comprises incrementing a second index into the sequence of second nonce values. In certain embodiments, updating the first nonce value comprises invoking a software function, wherein a new first nonce value is generated each time the software function is invoked. In some embodiments, updating the first nonce value comprises incrementing a previous first nonce value.</p><p id="p-0017" num="0016">According to a second embodiment, a network device is disclosed. The network device comprises a wireless network interface to communicate with a second network device; a processing unit; and a memory device, comprising instructions, which when executed by the processing unit, enable the network device to: create an initial value for a first nonce value used for transmissions from the network device to a second network device; and update the first nonce value whenever a packet destined for the second network device is successfully transmitted; wherein the first nonce value is used to encrypt a packet transmitted to the second network device. In some embodiments, the network device further comprises instructions, which when executed by the processing unit, enable the network device to: create an initial value for a second nonce value used for transmissions from the second network device to the network device; and update the second nonce value whenever a packet from the second network device is successfully received; wherein the second nonce value is used to decrypt a packet transmitted from second network device. In certain embodiments, the first nonce value and the second nonce value differ over time due to a difference in events that cause each nonce value to be updated. In some embodiments, the network device comprises a sequence of first nonce values, and updating the first nonce value comprises incrementing an index into the sequence of first nonce values. In some embodiments, the network device comprises a sequence of nonce values, and updating the first nonce value comprises incrementing a first index into the sequence of nonce values and updating the second nonce value comprises incrementing a second index into the sequence of nonce values. In certain embodiments, the network device comprises a sequence of first nonce values and a sequence of second nonce values, and updating the first nonce value comprises incrementing a first index into the sequence of first nonce values and updating the second nonce value comprises incrementing a second index into the sequence of second nonce values. In certain embodiments, updating the first nonce value comprises invoking a software function, wherein a new first nonce value is generated each time the software function is invoked.</p><p id="p-0018" num="0017">According to another embodiment, a method of minimizing a risk of a delay attack between a first node and a second node transmitting encrypted packets is disclosed. The method comprises initiating a resynchronization process based on a predetermined parameter, wherein the resynchronization process resets security parameters associated with the first node and the second node. In certain embodiments, the predetermined parameter comprises a time duration since a packet was received. In some embodiments, the predetermined parameter comprises a regular time interval. In some embodiments, the predetermined parameter comprises noise or RSSI levels. In some embodiments, the security parameters comprise the nonce value or nonce values used to encrypt packets between the first node and the second node.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0019" num="0018">For a better understanding of the present disclosure, reference is made to the accompanying drawings, in which like elements are referenced with like numerals, and in which:</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a timing diagram showing loss of synchronization according to the prior art;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a block diagram of a network device according to one embodiment;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a timing diagram showing retention of synchronization according to one embodiment; and</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a timing diagram showing the response to a delay attack according to one embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a block diagram of a network device <b>10</b> that may be used to implement the techniques described herein. The network device <b>10</b> has a processing unit <b>20</b> and an associated memory device <b>25</b>. The processing unit <b>20</b> may be any suitable component, such as a microprocessor, embedded processor, an application specific circuit, a programmable circuit, a microcontroller, or another similar device. The memory device <b>25</b> contains the instructions, which, when executed by the processing unit <b>20</b>, enable the network device <b>10</b> to perform the functions described herein. This memory device <b>25</b> may be a non-volatile memory, such as a FLASH ROM, an electrically erasable ROM or other suitable devices. In other embodiments, the memory device <b>25</b> may be a volatile memory, such as a RAM or DRAM. The instructions contained within the memory device <b>25</b> may be referred to as a software program, which is disposed on a non-transitory storage media.</p><p id="p-0025" num="0024">The network device <b>10</b> also includes a network interface <b>30</b>, which may be a wireless network interface that includes an antenna <b>35</b>. The network interface <b>30</b> may support any wireless network that supports security classes, such as WiFi, networks utilizing the IEEE 802.15.4 specification, such as Zigbee, networks utilizing the IEEE 802.15.6 specification, and wireless smart home protocols, such as Z-Wave. The network interface <b>30</b> is used to allow the network device <b>10</b> to communicate with other devices disposed on the first network <b>31</b>.</p><p id="p-0026" num="0025">The network device <b>10</b> may include a second memory device <b>40</b>. Data that is received from the network interface <b>30</b> or is to be sent via the network interface <b>30</b> may also be stored in the second memory device <b>40</b>. This second memory device <b>40</b> is traditionally a volatile memory.</p><p id="p-0027" num="0026">While a memory device <b>25</b> is disclosed, any computer readable medium may be employed to store these instructions. For example, read only memory (ROM), a random access memory (RAM), a magnetic storage device, such as a hard disk drive, or an optical storage device, such as a CD or DVD, may be employed. Furthermore, these instructions may be downloaded into the memory device <b>25</b>, such as for example, over a network connection (not shown), via CD ROM, or by another mechanism. These instructions may be written in any programming language, which is not limited by this disclosure. Thus, in some embodiments, there may be multiple computer readable non-transitory media that contain the instructions described herein. The first computer readable non-transitory media may be in communication with the processing unit <b>20</b>, as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The second computer readable non-transitory media may be a CDROM, or a different memory device, which is located remote from the network device <b>10</b>. The instructions contained on this second computer readable non-transitory media may be downloaded onto the memory device <b>25</b> to allow execution of the instructions by the network device <b>10</b>.</p><p id="p-0028" num="0027">While the processing unit <b>20</b>, the memory device <b>25</b>, the network interface <b>30</b> and the second memory device <b>40</b> are shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> as separate components, it is understood that some or all of these components may be integrated into a single electronic component. Rather, <figref idref="DRAWINGS">FIG. <b>2</b></figref> is used to illustrate the functionality of the network device <b>10</b>, not its physical configuration.</p><p id="p-0029" num="0028">Although not shown, the network device <b>10</b> also has a power supply, which may be a battery or a connection to a permanent power source, such as a wall outlet.</p><p id="p-0030" num="0029">In contrast to previous embodiments, the present network device <b>10</b> maintains a separate SPAN value for packets being transmitted to a second node, and packets being received by that second node. Thus, within the memory device <b>25</b> or within the second memory device <b>40</b>, the network device <b>10</b> maintain two SPAN values per connection; a transmit SPAN value for packets being transmitted to a second node and a receive SPAN value for packets being received by the second node.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows the operation of the network device <b>10</b> using two separate SPAN values. In this figure, the first node <b>100</b>, labelled as Node A, is a network device <b>10</b> having a configuration similar to that shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Similarly, the second node <b>110</b>, labelled as Node B, is also a network device <b>10</b> having a configuration similar to that shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Node A and Node B are communicating with each other through an intermediate node <b>120</b>, which may be a repeater or other device.</p><p id="p-0032" num="0031">Initially, at shown at time T<b>0</b>, the nodes <b>100</b>, <b>110</b> are synchronized. There is a transmit SPAN value for Node A, referred to as SPAN_A_to_B, and a receive SPAN value for Node A, referred to as SPAN_B_to_A. Likewise, there is a transmit SPAN value for Node B, referred to as SPAN_B_to_A, and a receive SPAN value for Node B, referred to as SPAN_A_to_B. The SPAN_A_to_B value for Node A and Node B are synchronized. Similarly, SPAN_B_to_A value for Node A and Node B are synchronized.</p><p id="p-0033" num="0032">The SPAN_B_to_A value and the SPAN_A_to_B value may be initialized using current techniques. For example, for the Z-Wave network protocol, each node contributes to random numbers used to create the initial values. One specific example is given below.</p><p id="p-0034" num="0033">Each node (i.e. Node A and Node B) may contribute an Entropy Input (EI). Each node may contribute 16 bytes. Each EI may be generated using a predetermined algorithm. In one embodiment, a pseudorandom number generator is used to create the EI for each node. These EI values may be communicated to the other node using a special packet format, such as a Resync message.</p><p id="p-0035" num="0034">The EI for each node, which may be referred to as SenderEI and ReceiverEI, are mixed to form a 32 byte entropy value. This 32 byte value may then be used as an input to one or more software functions to generate the Mixed Entropy Input (MEI). In certain embodiments, the one or more software functions may be a CKDF-MEI-Extract and CKDF-MEI-Expand function, as defined by Z-Wave Transport-Encapsulation Command Class Specification, dated Jul. 6, 2020, the disclosure of which is incorporated by reference in its entirety. The MEI may be used as an input to a CTR_DRBG function to generate an inner state set, also referred to as the InnerSPAN. The CTR_DRBG function is defined by NIST Special Publication 800-90A, Revision 1, entitled &#x201c;Recommendation for Random Number Generation Using Deterministic Random Bit Generators&#x201d;, the disclosure of which is incorporated by reference in its entirety. This procedure establishes the initial nonce value to be used. Subsequent nonce values may be generated using a software function referred to as NextNonce, which may utilize the CTR_DRBG_Generate algorithm defined by the previously mentioned NIST Special Publication. Note that if both nodes utilize the same 32 byte entropy input, the resulting nonce values will be the same for both nodes.</p><p id="p-0036" num="0035">In one embodiment, Node A and Node B each create two 16 byte EI values; one for the SPAN_A_to_B value and one for the SPAN_B_to_A value. In another embodiment, Node A and Node B each create one 16 byte EI value, which are used to seed both the SPAN_A_to_B and SPAN_B_to_A values.</p><p id="p-0037" num="0036">In other embodiments, the initial value may be generated in a different manner. The only requirement is that Node A and Node B utilize the same initial value for the SPAN_A_to_B value and the same initial value for the SPAN_B_to_A value.</p><p id="p-0038" num="0037">The SPAN_A_to_B value is updated by Node A each time it successfully transmits a packet destined for Node B. The SPAN_A_to_B value is updated by Node B each time it successfully receives a packet from Node A. Similarly, the SPAN_B_to_A value is updated by Node A each time it successfully receives a packet from Node B. The SPAN_B_to_A value is updated by Node B each time it successfully transmits a packet destined for Node A. Of course, if there is a third node, such as Node C, Node A may have two additional SPAN values to track packets sent to and received from Node C. Similarly, Node B may also have two additional SPAN values to track packets sent to and received from Node C.</p><p id="p-0039" num="0038">In certain embodiments, the SPAN_A_to_B value and the SPAN_B_to_A value in the figures represent the actual values that are used to encrypt and decrypt the packets. While small numbers are used in this example, it is understood that these numbers may be many bytes in length. Thus, in this embodiment, the values are the actual nonce values. In other embodiments, the values in this disclosure refer to indices into a sequence of nonce values. Thus, if the SPAN_A_to_B value is 18, this refers to the eighteenth entry in the sequence of nonce values.</p><p id="p-0040" num="0039">In another embodiment, a software function, such as the NextNonce function described above, is used to create the nonce values. In this embodiment, the value in the figure represents the number of times that the NextNonce function is invoked. Thus, in all embodiments, the values used in this disclosure are used, either directly or indirectly, to generate the nonce used to encrypt and decrypt a particular packet.</p><p id="p-0041" num="0040">Because the number of packets transmitted from Node A to Node B may be different than the number of packets transmitted from Node B to Node A, the SPAN_A_to_B value and the SPAN_B_to_A value may differ.</p><p id="p-0042" num="0041">Returning to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, at time T<b>0</b>, for purposes of illustration, it is assumed that the SPAN_A_to_B value is 42 and the SPAN_B_to_A value is 18. Of course, any other values may also be used.</p><p id="p-0043" num="0042">At time T<b>1</b>, Node A transmits a first packet to the intermediate node <b>120</b> and receives an acknowledgement from that intermediate node <b>120</b>. Consequently, since the packet was successfully transmitted, Node A updates the SPAN_A_to_B value. Thus, Node A now believes that the current SPAN_A_to_B value is 43. As noted above, in certain embodiments, the value shown in the figure is the nonce value. In other embodiments, the value is an index into a sequence of nonce values. In other embodiments, the value represents the number of times that the NextNonce function has been invoked. Thus, the incrementing of the SPAN_A_to_B value signifies that the next SPAN_A_to_B nonce is generated or selected.</p><p id="p-0044" num="0043">At time T<b>2</b>, the intermediate node <b>120</b> then forwards the first packet to Node B. However, this transmission may fail, such that Node B does not receive the first packet, which must be retransmitted by the intermediate node <b>120</b> at a later time. The retransmission utilizes the same SPAN_A_to_B value.</p><p id="p-0045" num="0044">However, Node B may have a second packet to transmit to Node A. Since this packet is directed from Node B to Node A, the SPAN_B_to_A value is used. Thus, Node B uses the SPAN_B_to_A value of 18 to transmit this second packet to Node A at time T<b>3</b>. Since the second packet was successfully transmitted, Node B increments its SPAN_B_to_A value to 19. As noted above, in certain embodiments, the value is the actual nonce value. In other embodiments, the value is an index into a sequence of nonce values. In other embodiments, the value represents the number of times that the NextNonce function has been invoked. Thus, the incrementing of the SPAN_B_to_A value signifies that the next SPAN_B_to_A nonce is generated or selected.</p><p id="p-0046" num="0045">In certain embodiments, there are two sequences of nonce values; one for the SPAN_A_to_B nonces and one for the SPAN_B_to_A nonces. A SPAN_A_to_B counter and a SPAN_B_to_A counter are used to index into these two sequences, respectively. In other embodiments, there is a single sequence, where the each counter represents the index into that sequence. Thus, the incrementing of a value indicates that the next nonce value is selected for that communication path.</p><p id="p-0047" num="0046">Because there are now separate SPAN values, Node A is able to decrypt this second packet because its SPAN_B_to_A value is also set to 18.</p><p id="p-0048" num="0047">At time T<b>4</b>, the intermediate node <b>120</b> successfully forwards the first packet to Node B. Because there are now separate SPAN values, Node B is able to decrypt this packet since this packet utilizes a SPAN_A_to_B value of 42 and the SPAN_A_to_B value for Node B is also set to 42.</p><p id="p-0049" num="0048">Thus, at time T<b>5</b>, Node A and Node B are still synchronized.</p><p id="p-0050" num="0049">In other words, by utilizing unidirectional SPAN values, it is possible to withstand interruptions in transmission and scenarios where a second packet is transmitted from Node B to Node A before the first packet, transmitted by Node A, reached Node B. This may improve overall network performance by reducing the number of times that the two nodes must resynchronize.</p><p id="p-0051" num="0050">Thus, in one embodiment, Node A and Node B each generate a first sequence of nonce values and a first index into the first sequence. The first index in incremented by Node A whenever a packet destined for the Node B is successfully transmitted. The first index is incremented by Node B whenever a packet from Node A is successfully received. The nonce value disposed at the first index into the first sequence is used by the Node A to encrypt packets transmitted to Node B and by the Node B to decrypt packets received from Node A. Additionally, Node A and Node B each generate a second index into a second sequence of nonce values. The second index in incremented by Node B whenever a packet destined for the Node A is successfully transmitted. The second index is incremented by Node A whenever a packet from Node B is successfully received. The nonce value disposed at the second index into the second sequence is used by the Node B to encrypt packets transmitted to Node A and by the Node A to decrypt packets received from Node B. In certain embodiments, the first sequence and the second sequence are the same sequence. In some embodiments, these sequences are generated by invoking a software function, such as the NextNonce function, a plurality of times, wherein each invocation creates a new nonce value. In other embodiments, the sequences may be consecutive numbers.</p><p id="p-0052" num="0051">Thus, in each embodiment, Node A and Node B each create the same initial value for first nonce values used for transmissions from Node A to Node B. Node A updates the first nonce value whenever it transmits a packet successfully toward Node B. Node B updates the first nonce value whenever it successfully receives a packet from Node A. This first nonce value may be referred to as SPAN_A_to_B. As described above, updating the first nonce value may involve: incrementing the nonce value; incrementing the index into a sequence of nonce values; or using a software function to generate a new nonce value.</p><p id="p-0053" num="0052">Node A and Node B also each create the same initial value for second nonce values used for transmissions from Node B to Node A. Node B updates the second nonce value whenever it transmits a packet successfully toward Node A. Node A updates the second nonce value whenever it successfully receives a packet from Node B. This second nonce value may be referred to as SPAN_B_to_A. As described above, updating the second nonce value may involve: incrementing the nonce value; incrementing the index into a sequence of nonce values; or using a software function to generate a new nonce value.</p><p id="p-0054" num="0053">Note that the initial value of the first nonce value and the second value may be the same. However, the first nonce value and the second nonce value differ over time due to a difference in events that cause each nonce value to be updated.</p><p id="p-0055" num="0054">In certain embodiments, where the nodes maintain a sequence of nonce values, the same sequence of nonce values may be used for the first nonce values and the second nonce values. In other embodiments, two sequences of nonce values may be maintained by each node.</p><p id="p-0056" num="0055">In certain embodiments, where the nodes utilize a software function to update the nonce value, the same software function is used for updating the first nonce values and second nonce values.</p><p id="p-0057" num="0056">In certain embodiments, the first nonce value and the second nonce value may be updated by simply incrementing the previous nonce value.</p><p id="p-0058" num="0057">While the above description discloses a system and method to reduce the possibility of a loss of synchronicity, other benefits are also possible.</p><p id="p-0059" num="0058">For example, additional modifications to the typical network protocol can be implemented to reduce the chance of a potential delay attack.</p><p id="p-0060" num="0059">These modifications may be performed in addition to the modification described above, or separately.</p><p id="p-0061" num="0060">In one embodiment, each node may include a timer. This timer may start after the receipt of an incoming message and may be reset by the receipt of a second message. In other words, the timer may be used to measure the time between two packets. A receiving node may establish a maximum time between received packets. If this maximum time is exceeded, the receiving node may reseed the SPAN value or values. An example of this operation is shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0062" num="0061">In this embodiment, it is assumed that network device <b>10</b> uses two separate SPAN values. In this figure, the first node <b>200</b>, labelled as Node A, is a network device <b>10</b> having a configuration similar to that shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Similarly, the second node <b>210</b>, labelled as Node B, is also a network device <b>10</b> having a configuration similar to that shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Node A and Node B are communicating with each other through an intermediate node <b>220</b>, which may be a repeater or other device.</p><p id="p-0063" num="0062">Initially, at shown at time T<b>0</b>, the nodes <b>200</b>, <b>210</b> are synchronized. There is a transmit SPAN value for Node A, referred to as SPAN_A_to_B, and a receive SPAN value for Node A, referred to as SPAN_B_to_A. Likewise, there is a transmit SPAN value for Node B, referred to as SPAN_B_to_A, and a receive SPAN value for Node B, referred to as SPAN_A_to_B. The SPAN_A_to_B value for Node A and Node B are synchronized. Similarly, SPAN_B_to_A value for Node A and Node B are also synchronized.</p><p id="p-0064" num="0063">At time T<b>0</b>, for purposes of illustration, it is assumed that the SPAN_A_to_B value is 42 and the SPAN_B_to_A value is 18. Of course, any other values may also be used.</p><p id="p-0065" num="0064">At time T<b>1</b>, Node A transmits a first packet to Node B via the intermediate node <b>220</b>. Although not shown, at this time, Node A updates the SPAN_A_to_B value to 43.</p><p id="p-0066" num="0065">At time T<b>2</b>, the intermediate node <b>220</b> attempts to forward the first message to Node B. This transmission fails. The intermediate node <b>220</b> may attempt to retransmit this first packet one or more additional times. This delay in transmission may be simply noise, or may be an attacker seeking to delay transmission of the first packet. This may be referred to as a delay attack. At some point, the timer within Node B expires, indicating that the time since the last packet received from Node A exceeds a predetermined threshold.</p><p id="p-0067" num="0066">In response, Node B resets the security parameters between itself and Node A. The security parameters include the SPAN_A_to_B value and the SPAN_B_to_A value. Specifically, in this embodiment, Node B may transmit a packet to Node A that serves to resynchronize the communications between the two nodes at time T<b>3</b>. In this packet, which may be referred to as a resynchronization message, or Resync Message, Node B may provide its EI for both the SPAN_A_to_B value and the SPAN_B_to_A value. If two SPANs are used, Node B may transmit two EI values. In another embodiment, Node B may transmit one EI value which is used to seed both the SPAN_A_to_B and the SPAN_B_to_A values. If only one SPAN is used to bidirectional communications, Node B only transmits one EI.</p><p id="p-0068" num="0067">Once Node B determines that the time since the last packet received from Node A exceeds a predetermined threshold, it can no longer decrypt the first message. Thus, at time T<b>4</b>, when the first message is finally successfully transmitted to Node B, Node B will not be able to decrypt the message.</p><p id="p-0069" num="0068">At time T<b>5</b>, the Resync Message from Node B reaches Node A. In response, Node A also resets its security parameters. As stated above, the security parameters include the SPAN_A_to_B value and the SPAN_B_to_A value. Since the Resync Message includes the EI values from the Node B, Node A is able to generate the new SPAN_A_to_B and SPAN_B_to_A values. Node A then transmits a Resync Message to Node B at time T<b>6</b>. This resync message includes the EI values for Node A, which enables Node B to construct the MEI and the new SPAN_A_to_B and SPAN_B_to_A values, as described above. Thus, at time T<b>7</b>, Node A and Node B are again synchronized.</p><p id="p-0070" num="0069">Note that the above scenario describes the case where Node B resets the security parameters based on the duration of time since the last message. In other embodiments, Node B may use other criteria to initiate a resynchronization process. For example, Node B may initiate a resynchronization process at regular intervals, regardless of network traffic. In yet another embodiment, Node B may monitor the noise or RSSI values and may initiate a resynchronization process if these metrics are too large.</p><p id="p-0071" num="0070">Thus, in this embodiment, a node, such as Node B, may initiate a resynchronization process based on a predetermined parameter, such as at regular intervals, based on duration of time between packets or another metric.</p><p id="p-0072" num="0071">The present system and method have many advantages. First, as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, there are situations where synchronization between two network devices is lost due to timing anomalies. By utilizing two separate unidirectional nonce values, this loss of synchronization may be eliminated. This approach requires minimal additional overhead. A second nonce value is needed for each network device that this network device communicates with. Thus, the synchronization of the devices may be improved with limited impact on system resources.</p><p id="p-0073" num="0072">Second, as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, there are situations where a delay attack may take place. By periodically or strategically resetting the security parameters between two nodes, the chance of a delay attack is reduced.</p><p id="p-0074" num="0073">The present disclosure is not to be limited in scope by the specific embodiments described herein. Indeed, other various embodiments of and modifications to the present disclosure, in addition to those described herein, will be apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus, such other embodiments and modifications are intended to fall within the scope of the present disclosure. Further, although the present disclosure has been described herein in the context of a particular implementation in a particular environment for a particular purpose, those of ordinary skill in the art will recognize that its usefulness is not limited thereto and that the present disclosure may be beneficially implemented in any number of environments for any number of purposes. Accordingly, the claims set forth below should be construed in view of the full breadth and spirit of the present disclosure as described herein.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of minimizing a risk of a delay attack between a first node and a second node transmitting encrypted packets, comprising:<claim-text>initiating a resynchronization process based on a predetermined parameter, wherein the resynchronization process resets security parameters associated with the first node and the second node.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the predetermined parameter comprises a time duration since a packet was received.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the predetermined parameter comprises a regular time interval.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the predetermined parameter comprises noise or RSSI levels.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the security parameters comprise a nonce value or nonce values used to encrypt packets between the first node and the second node.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the security parameters comprise a first nonce value and a second nonce value, wherein the first nonce value is used to encrypt packets transmitted from the first node to the second node and the second nonce value is used to encrypt packets transmitted from the second node to the first node.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. A network device, comprising:<claim-text>a wireless network interface to communicate with a second network device;</claim-text><claim-text>a processing unit; and</claim-text><claim-text>a memory device, comprising instructions, which when executed by the processing unit, enable the network device to:</claim-text><claim-text>use a first nonce value to encrypt a packet transmitted to the second network device; and</claim-text><claim-text>initiate a resynchronization process to reset the first nonce value based on a predetermined parameter.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The network device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the predetermined parameter comprises a time duration since a packet was received.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The network device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the predetermined parameter comprises a regular time interval.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The network device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the predetermined parameter comprises noise or RSSI levels.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The network device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising instructions to enable the network device to use a second nonce value to decrypt a packet transmitted from the second network device, and wherein the resynchronization process resets the second nonce value.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A network, comprising:<claim-text>a first network device; and</claim-text><claim-text>a second network device,</claim-text><claim-text>wherein the first network device and the second network use a first nonce value to encrypt and decrypt transmissions from the first network device to the second device and a second nonce value, different from the first nonce value, to encrypt and decrypt transmission from the second network device to the first network device.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The network of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the first network device updates the first nonce value whenever a packet destined for the second network device is successfully transmitted and updates the second nonce value whenever a packet from the second network device is successfully received; and<claim-text>wherein the second network device updates the second nonce value whenever a packet destined for the first network device is successfully transmitted and updates the first nonce value whenever a packet from the first network device is successfully received.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The network of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the first nonce value and the second nonce value differ over time due to a difference in events that cause each nonce value to be updated.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The network of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the first network device and second network device comprise a sequence of first nonce values and a sequence of second nonce values, wherein updating the first nonce value comprises incrementing a first index into the sequence of first nonce values and updating the second nonce value comprises incrementing a second index into the sequence of second nonce values.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The network of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the first network device and second network device comprise a sequence of nonce values, wherein updating the first nonce value comprises incrementing a first index into the sequence of nonce values and updating the second nonce value comprises incrementing a second index into the sequence of nonce values.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The network of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein updating the first nonce value comprises invoking a software function, wherein a new first nonce value is generated each time the software function is invoked.</claim-text></claim></claims></us-patent-application>