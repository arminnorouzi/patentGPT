<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007037A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007037</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17931253</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>1425</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>1416</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">CONTEXT INFORMED ABNORMAL ENDPOINT BEHAVIOR DETECTION</invention-title><us-related-documents><division><relation><parent-doc><document-id><country>US</country><doc-number>16557549</doc-number><date>20190830</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11483326</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17931253</doc-number></document-id></child-doc></relation></division></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Palo Alto Networks, Inc.</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Meir</last-name><first-name>Shai</first-name><address><city>Tzur Yitzhak</city><country>IL</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Cohen</last-name><first-name>Dany</first-name><address><city>Tel-Aviv</city><country>IL</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Miasnikov</last-name><first-name>Arkady</first-name><address><city>Netanya</city><country>IL</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Ohayon</last-name><first-name>Ohad</first-name><address><city>Kadima-Zoran</city><country>IL</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Adaptive normal profiles are generated at a hierarchical scope corresponding to a set of endpoints and a process. Abnormal endpoint activity is detected by verifying whether event data tracking activity on the set of endpoints conforms to the adaptive normal profiles. False positives are reduced by verifying alarms correspond to normal endpoint activity. Abnormal event data is forwarded to a causality chain identifier that identifies abnormal chains of processes for the abnormal endpoint activity. A trained threat detection model receives abnormal causality chains from the causality chain identifier and indicates a likelihood of corresponding to a malicious attack that indicates abnormal endpoint behavior.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="101.85mm" wi="158.75mm" file="US20230007037A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="256.96mm" wi="168.15mm" orientation="landscape" file="US20230007037A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="260.35mm" wi="171.28mm" file="US20230007037A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="236.30mm" wi="150.96mm" orientation="landscape" file="US20230007037A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="255.10mm" wi="99.65mm" file="US20230007037A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="257.47mm" wi="154.86mm" file="US20230007037A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="255.86mm" wi="163.24mm" file="US20230007037A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="255.86mm" wi="154.43mm" file="US20230007037A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="259.08mm" wi="150.79mm" file="US20230007037A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="217.00mm" wi="115.57mm" file="US20230007037A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="227.33mm" wi="157.14mm" file="US20230007037A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">The disclosure generally relates to the field of information security, and to modeling, design, simulation, or emulation.</p><p id="p-0003" num="0002">In the context of monitoring a device or network of endpoint devices (hereinafter &#x201c;endpoints&#x201d;), malicious entities will exploit vulnerabilities in common system processes to deliver one or more stages of an attack. Examples of known attacks that exploit processes running in an operating system (OS) include process hollowing, doppelganger attacks, code injection, and using known process names. Often the attack can exploit a zero-day vulnerability, meaning that the network of endpoints is oblivious to the vulnerability being exploited while the attack is carried out.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0004" num="0003">Embodiments of the disclosure may be better understood by referencing the accompanying drawings.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a conceptual diagram of a profile generator generating adaptive normal profiles.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts an example adaptive normal profile.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a conceptual diagram of deployment of a malicious behavior detection system.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of example operations for filtering and storing event data using a bucketed event database.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart of example operations for generating an adaptive normal profile.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart of example operations for detecting abnormal process activity with adaptive normal profiles.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts a flowchart of example operations for filtering alarms with adaptive normal process profiles.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart of example operations for identifying causality chains in event data</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart of example operations for detecting malicious attack chains.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>10</b></figref> depicts an example computer with an adaptive normal profile generator and an adaptive normal profile guided security monitor.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DESCRIPTION</heading><p id="p-0015" num="0014">The description that follows includes example systems, methods, techniques, and program flows that embody embodiments of the disclosure. However, it is understood that this disclosure may be practiced without these specific details. For instance, this disclosure refers to systems for endpoint security in illustrative examples. Aspects of this disclosure can be instead applied to cloud security, behavioral analytics, security information and event managements, Internet of Things (IoT) security and other types of network security. In other instances, well-known instruction instances, protocols, structures and techniques have not been shown in detail in order not to obfuscate the description.</p><heading id="h-0004" level="2">Overview</heading><p id="p-0016" num="0015">In the context of monitoring a network of endpoints in order to detect possible malicious behavior/attacks that exploit network vulnerabilities, it can be difficult to accurately identify threats without knowing the type or source of the attack (e.g., if the attacker uses a zero-day vulnerability). Any given process running on an endpoint in the network can generate thousands or millions of events that could potentially indicate an attack. Moreover, an event indicating abnormal behavior for an endpoint in one context could be a normal event for a similar endpoint in a different context. Generic threat detection methods suffer from an overabundance of false positives&#x2014;events identified as malicious that are not malicious for a given endpoint.</p><p id="p-0017" num="0016">A security framework has been developed that can consume a high volume of events from numerous devices and process the events to generate profiles that capture &#x201c;normal&#x201d; behavior despite the meaning of &#x201c;normal&#x201d; being adapted to a specific context, while increasing accuracy in flagging abnormal process behavior. The security framework includes a component, which is referred to herein as a profile generator, that creates this &#x201c;adaptive normal profile&#x201d; based on behavior/activity at different scopes&#x2014;individual endpoint scope and at least one scope encompassing more than one endpoint. This adaptive normal profile is generated and maintained based on common events observed at the endpoints running the process. To account for the variability of normal in the profiles, event data is filtered and aggregated in several steps starting with agents deployed on the endpoints themselves (&#x201c;endpoint agents&#x201d;) filtering and then aggregating the event data from a single endpoint. The endpoint agents forward the filtered and aggregated event data to a database. This filtered and aggregated event data can be further filtered by importance qualifiers depending on the significance of the relevant processes and endpoints (e.g., is the process indicated as high value, is the device deployed in a high security environment). The filtered and aggregated event data is normalized by an event normalizer. The event normalizer converts the event data into a standardized, bucketed format that groups events from distinct endpoints into the same bucket if they are functionally similar or identical (e.g., if the events correspond to the same process running on distinct endpoints).</p><p id="p-0018" num="0017">Using the bucketed events, adaptive normal profile generation for a process occurs across multiple hierarchical levels of endpoints. These hierarchical levels can correspond to business units, companies, groups of companies, etc., for which the process to be profiled displays similar behavior. At each hierarchical endpoint level, event data is collected from the bucket representing the process. Based on a statistical analysis of the event data, frequent events corresponding to that hierarchical endpoint level are added to the adaptive normal profile. The resultant adaptive normal profile comprises a set of normal events for the process.</p><p id="p-0019" num="0018">In order to implement the adaptive normal profiles for detecting abnormal events occurring at endpoints and to reduce the number of false positives, a monitoring component of the security framework is configured to receive alarms from preexisting endpoint security systems and process activity generated from endpoints. Activity corresponding to alarms generated by endpoint security systems or process activity at the endpoints is verified to conform to adaptive normal profiles having a same context as the endpoint security systems and endpoints generating the process activity. Any detected abnormal profile activity can be indicated for further analysis by a domain-level expert.</p><p id="p-0020" num="0019">For most malicious attacks corresponding to abnormal endpoint behavior, the attack comprises a chain of processes, each process in the chain initiated by another process, with the possible exception of seed processes that can be initiated by a bootup or user command. Initiation occurs when an existing process receives a command or an uninitiated process receives instructions to begin process execution. Process activity comprising event data from endpoints or indicators of processes being initiated are not classified as malicious or benign until the monitoring component performs a behavioral analysis of the process activity (i.e., the execution of processes once initiated). The monitoring component makes use of the adaptive normal profiles to identify abnormal behavior for individual processes, and subsequently uses identification of individual abnormal processes to identify chains of processes.</p><p id="p-0021" num="0020">For the purposes of detecting malicious behavior for a chain of processes, a threat detection model can be trained based on either synthetic or real-world data corresponding to malicious causality chains. The real-world causality chains can be generated using the adaptive normal profiles to determine which events are malicious. A causality chain identifier then detects the underlying directed graph structure of the processes and identifies which events may comprise a causality chain (i.e., a directed path). This underlying directed graph structure corresponds to processes initiating other processes, where the processes are the nodes in the graph and initiating another process is a directed arrow. The causality chains used to train the detection model can include metadata related to the events to increase the model complexity and accuracy of the threat detection model. The threat detection model can be a simple probabilistic model or a complex machine learning based model depending on the available computing resources, the amount event data, etc. Once trained, the threat detection model receives chains of possible malicious events identified by the adaptive normal profiles as well as associated event metadata and determines whether a malicious causality chain is present with high likelihood.</p><heading id="h-0005" level="2">Example Illustrations</heading><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a conceptual diagram of a profile generator generating adaptive normal profiles. Agent 1 <b>102</b>, agent 2 <b>104</b>, and agent N <b>106</b> are embedded on endpoint 1 <b>101</b>, endpoint 2 <b>103</b>, and endpoint N <b>105</b> respectively. The embedded agents <b>102</b>, <b>104</b>, and <b>106</b> generate event data and send the event data to event processor <b>110</b>. In this illustration, the agent N <b>106</b> on endpoint N <b>105</b> detects event data <b>108</b> and sends the event data <b>108</b> to the event processor <b>110</b>. The event processor <b>110</b> sends the event data to event database <b>107</b> for future use. The event processor <b>110</b> also comprises an event importance filter <b>109</b> and an event normalizer <b>111</b> that process the event data into bucketed event data that the event processor <b>110</b> sends to a bucketed event database <b>113</b>. In response to a query of scoping parameters such as scoping parameters <b>121</b>, <b>123</b>, and <b>125</b>, a profile generator <b>119</b> accesses the bucketed event database <b>113</b> in order to generate adaptive normal profiles. The profile database <b>117</b> stores the generated adaptive normal profiles corresponding to the scoping parameters.</p><p id="p-0023" num="0022">Endpoint 1 <b>101</b>, endpoint 2 <b>103</b>, and endpoint N <b>105</b> can be any type of computing device having external communication. For example, the endpoints can be a computer in communication with a corporate network, a processor on a server in communication with other processors, a phone in communication with a wireless network, an IoT device in communication with a wireless network, etc. Agent 1 <b>102</b>, agent 2 <b>104</b>, and agent N <b>106</b> monitor processes running on endpoint 1 <b>101</b>, endpoint 2 <b>103</b>, and endpoint N <b>105</b> respectively. The agents can be software running on the endpoints or a separate device. The agents generate event data based on the occurrence of events corresponding to monitored processes on the endpoints. The event data <b>108</b> comprises an event ID 11203, a machine name LAPTOP-08MHU19T, a process name &#x2018;powershell.exe,&#x2019; an index 20193, an entry type &#x2018;read,&#x2019; an event time Jun. 10, 2019 12:13:11, and a username j113049. Further attributes indicating other processes initiated by an event, event importance qualifiers, etc. can be present in event data. In this instance, the endpoint being monitored is a laptop and the process being monitored is &#x2018;powershell.exe&#x2019; performing an instance of a read activity. The agents <b>102</b>, <b>104</b>, and <b>106</b> can subsample events occurring on the endpoints <b>101</b>, <b>103</b>, and <b>105</b>. This subsampling can be related to an importance qualifier for a corresponding process, a predetermined constant rate of subsampling, a preconfigured subsampling rule, etc.</p><p id="p-0024" num="0023">Event processor <b>110</b> receives event data from the agents <b>102</b>, <b>104</b>, and <b>106</b>. The event processor <b>110</b> can filter and aggregate the event data before storing it in the event database <b>107</b>. The filtered and aggregated event data can be further processed by event importance filter <b>109</b> and event normalizer <b>111</b> to create bucketized event data that the event processor <b>110</b> stores in the bucketed event database <b>113</b>. The event importance filter <b>109</b> filters events based on an event importance qualifier and can also use prior knowledge about malicious event types to filter out events that are either not important for endpoint security or are unlikely to correspond to malicious attacks.</p><p id="p-0025" num="0024">The event normalizer <b>111</b> comprises a model that takes as input event data and outputs an event bucket from a set of event buckets along with key event attributes extracted from the output event bucket, or if the input event data doesn't correspond to an event bucket the model outputs the event data and an indicator that the event data doesn't correspond to a bucket. The key event attributes are attributes that identify the event and are used for determining its importance, for instance an importance qualifier, a process indicator that initiated from the event, event scope data, etc. The model for the event normalizer <b>111</b> is described in greater detail in the description for <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0026" num="0025">An example bucket <b>116</b> indicates a process &#x2018;powershell.exe,&#x2019; a file path UserContent/programs/accessories/windows/powershell/[EXTENSION:shortcut], a type &#x2018;read,&#x2019; and a number of instance &#x2018;700&#x2019;. The file path suffix [EXTENSION:shortcut] specifies that the file path for an event stored in this bucket will read a shortcut extension in the given file path. The bucketed event database <b>113</b> can include a hash-based lookup for the event attributes. Further, the buckets are hierarchical in scope. For the above example, the given bucket <b>116</b> corresponds to business unit 10203, company <b>102</b>, and company group 5. A second bucket containing the given bucket <b>116</b> can correspond to company <b>102</b> and company group 5, and a third bucket containing the example bucket <b>116</b> and the second bucket can correspond to only company group 5. Thus, a lookup operation for an event bucket first looks up the hash corresponding to event attributes and then proceeds down a hierarchical scope tree to access the event bucket.</p><p id="p-0027" num="0026">The profile generator <b>119</b> receives scoping parameters <b>121</b>, <b>123</b>, and <b>125</b> as input to begin adaptive normal profile generation. Adaptive normal profile generation proceeds by querying the bucketed event database <b>113</b> for events contained in buckets of varying scopes. For example, the scoping parameters <b>121</b> specify a process &#x2018;powershell.exe,&#x2019; an endpoint 110293, a business unit 10203, a company <b>102</b>, and a company group 5. The profile generator <b>119</b>, after receiving the scoping parameters <b>121</b>, queries the bucketed event database <b>113</b> for events corresponding to process &#x2018;powershell.exe&#x2019; and endpoint 110293. The bucketed event database <b>113</b> sends a first batch of events corresponding to the query, and the profile generator <b>119</b> runs a statistical analysis on the first batch of events to identify normal events. This can be a simple frequency analysis to detect normal events for the endpoint 110293. More complex behavioral statistical models can be used to distinguish between normal and abnormal events. The models can incorporate known normal events using expert domain knowledge. Once a basic profile using only data for endpoint 110293 has been created, the profile generator <b>119</b> queries the bucketed event database <b>113</b> for a second batch of events corresponding to the process &#x2018;powershell.exe&#x2019; and the business unit 10203. The profile generator <b>119</b> runs another statistical analysis on the second batch of events to identify normal events for the business unit 10203. This statistical analysis can be identical to the statistical analysis for the first batch of events or can be modeled to capture broader statistical patterns for broader scopes (i.e. a model can underfit the data compared to narrower scopes). The first set of normal events for the first batch of events and the second set of normal events for the second batch of events are merged and pruned using prior knowledge about the endpoint 110293 and the business unit 10203. For example, a known common event for the business unit 10203 that cannot occur on the endpoint 110293 can be pruned. The above-described process of querying for a batch of events, identifying normal events, and merging the set of normal events with the previous set of normal events is applied at every scope given in the scoping parameters <b>121</b>. Once adaptive normal profile generation is complete, the profile generator <b>119</b> stores a resultant adaptive normal profile in the profile database <b>117</b>.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts an example adaptive normal profile, for example as generated by profile generator <b>119</b> with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The adaptive normal profile comprises a directory type structure starting with a root <b>200</b>. Below the root <b>200</b> is an event classifier <b>206</b> comprising a process name &#x2018;powershell.exe&#x2019; <b>201</b>, an event type &#x2018;read&#x2019; <b>203</b>, and a number of unique instances &#x2018;700&#x2019; <b>205</b>. An adaptive normal profile corresponds to a single process, as reflected in a second event classifier <b>213</b> that still comprises a process name &#x2018;powershell.exe&#x2019; but corresponds to an event type &#x2018;modify.&#x2019; Each child entry below root indicates the process represented by the adaptive normal profile, a different event type, and instances of that event type. At the next level below the classifier level, there are one or more entries indicating a particular path of a target (e.g., file or object) upon which the process has performed the event. Instead of identifying each target upon which the process acted, the child entries below or within the path entry indicate a generalization of the target with an indication of target type, which in this case is an extension (e.g., executable, tmp, txt). Below the event classifier <b>206</b> is a file path <b>207</b> comprising a top node UserContent and subsequent nodes programs, accessories, and windows powershell respectively. Each label for a node in the file path corresponding to a subdirectory is hereinafter referred to as a &#x201c;file path element.&#x201d; Due to the directory type structure of the file path <b>207</b>, each node having a sub node in the file path <b>207</b> can have additional sub nodes as illustrated later in the profile. A target <b>209</b> specifies that an event in the bucket comprising the process <b>201</b>, the event type <b>203</b>, the file path <b>207</b>, and the target <b>209</b> will perform a read operation on a shortcut extension in the file path <b>207</b>. Additional target metadata <b>211</b> specifies that the read operation is performed on the windows powershell.lnk file and that the target has an attribute with value <b>315</b>. The adaptive normal profile depicted supports access of the attributes corresponding to any event contained therein. An event can have a &#x201c;context&#x201d; corresponding to its event classifier <b>206</b> corresponding to a particular scope of endpoints (not indicated in the profile in <figref idref="DRAWINGS">FIG. <b>2</b></figref>). For example, a context could be the process name &#x2018;powershell.exe&#x2019; <b>201</b>, the event type &#x2018;read&#x2019; <b>203</b>, the number of unique instances &#x2018;700&#x2019; <b>205</b>, and a set of endpoint identifiers. The adaptive normal profile can include contextual information resulting from processes interfacing with various elements of a system and/or corresponding to events. As examples, the contextual information can correspond to a process interfacing with a file system, a registry, or a network; an (binary) image load event a command line event, an application programming interface (API) call; a user action; and an operating system assigned integrity level.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a conceptual diagram of a malicious behavior detection system as a stack of operational domains. The malicious behavior detection system comprises four primary operational domains: presentation and reporting <b>301</b>, security monitoring <b>303</b>, adaptive normal profile creation <b>305</b>, and data collection <b>307</b>. The operations being performed can occur simultaneously using various components of the malicious behavior detection system and components can interact with distinct components from separate operational domains.</p><p id="p-0030" num="0029">For presentation and reporting <b>301</b>, a logger <b>302</b> receives reports of malicious causality chains from a threat detection model <b>312</b> and records logs corresponding to the malicious causality chains for user access. A notifier <b>304</b> can also receive the reports of malicious causality chains and sends an indication of a malicious attack to a graphical user interface <b>306</b>. The graphical user interface <b>306</b> displays a report of each malicious causality chain to a user for analysis. The graphical user interface <b>306</b> also allows a user to initiate adaptive normal profile creation by querying an event profiler <b>320</b>, access logs of malicious causality chains, etc.</p><p id="p-0031" num="0030">For security monitoring <b>303</b>, an event scanner <b>308</b> receives batches of incoming events from an event normalizer <b>318</b>. For each process indicated in the batch of events, the event scanner <b>308</b> retrieves the corresponding profile from a profile database <b>322</b>. The events in the batch are verified against the profiles and any events flagged as abnormal (i.e., not indicated in the profiles) are forwarded to a causality chain identifier <b>310</b>. Using the flagged events forwarded from the event scanner <b>308</b>, the causality chain identifier <b>310</b> creates a directed graph structure for processes by adding a directed arrow from a first process to a second process if a flagged event of the first process triggered an event of the second process or if an event of the second process triggered an event of the first process. The causality chain identifier <b>310</b> then identifies candidate malicious causality chains using this directed graph structure and forwards the candidate malicious causality chains to a threat detection model <b>312</b>.</p><p id="p-0032" num="0031">The threat detection model <b>312</b> receives candidate malicious causality chains comprising event data for each event in the candidate malicious causality chain. This set of event data is input to the threat detection model <b>312</b> which outputs a metric indicating the likelihood that the candidate malicious causality chain is malicious. If the metric is above a threshold, the threat detection model <b>312</b> sends the candidate malicious causality chain to the event causality database <b>314</b> and to the logger <b>302</b> and notifier <b>304</b>. The threat detection model <b>312</b> is pretrained on either synthetic or real-world causality chains (or both). Real-world causality chains can be generated using the trained profiles from profile database <b>322</b> in combination with feedback from analysts who identify malicious causality chains from flagged events using the trained profiles. Alternatively, past causality chains corresponding to known malicious attacks can be used. Synthetic causality chains can be generated by simulating known attacks in a controlled environment. The format for training data for threat detection model <b>312</b> is the malicious (and benign) causality chain data, and additional data for each event in the chain comprising event severity indicators and metadata including domain-level features from an expert, labels from a firewall/network intrusion prevention system/antivirus program, etc. The threat detection model <b>312</b> can be a neural network used for classification with a log loss function corresponding to a probability that the input causality chain is malicious. The choice of neural network and its architecture depends at least on the expected types of malicious attacks and the amount of available training data. The neural network can be trained over several batches of training data using any number of standard optimization methods. To exemplify, a standard neural network for threat classification can be a convolutional neural network optimized using batches of training data, trained with automatic differentiation on the derivative of the loss function, where internal node connections are randomly dropped over various batches of training data using dropout.</p><p id="p-0033" num="0032">In other embodiments, the threat detection model <b>312</b> can comprise various other machine-learning based classification models, for example gradient boosting methods, support vector machine classifiers, regression models, etc.</p><p id="p-0034" num="0033">Adaptive normal profile creation <b>305</b> begins when an event alert filter <b>316</b> receives event data from agents <b>324</b> and <b>326</b> after an event processor filters and aggregates the event data. The event alert filter <b>316</b> determines, using event importance qualifiers, whether the event corresponds to an alert and sends batches of event data associated with an alert to the event normalizer <b>318</b>. The event normalizer <b>318</b> associates the batches of event data with a set of event buckets as described variously above and sends the batches of event buckets to the event profiler <b>320</b>. The event profiler <b>320</b> creates profiles based on scoping parameters receives from the graphical user interface <b>306</b>.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a flow diagram of example operations for filtering and storing event data. The description of <figref idref="DRAWINGS">FIG. <b>4</b></figref> refers to an &#x201c;event processor&#x201d; as performing the example operations for consistency with the earlier description. Naming or labeling of programs can be arbitrary, as well as modular organization of a program.</p><p id="p-0036" num="0035">At block <b>401</b>, an event processor filters and aggregates incoming event data from endpoints and stores the event data in an event database. Although described as filtering and then aggregating, the event processor can alternately filter and aggregate event data several times. The filtering can subsample event data at a constant rate depending on a process and endpoint that creates the event data or based on a subsampling function also specific to the process and endpoint. Aggregation can occur across event data displaying substantially similar characteristics, e.g., statistically similar or identical events can be compressed into a single representative event. To exemplify, events with nearly identical attributes can occur with different but sequential time stamps and can be aggregated to a first representative event with an earliest time stamp.</p><p id="p-0037" num="0036">At block <b>403</b>, the event processor additionally filters event data by event importance. The event processor can determine event importance using an importance qualifier generated by an agent on an endpoint and indicated in the event data. This importance qualifier can alternatively be generated by the event processor. The agent or event processor can generate the importance qualifier by identifying common events in previous malicious causality chains corresponding to known attacks at the endpoint. The agent or event processor can identify events that have a greater impact on major processes running on the endpoint. Event data having a low importance as indicated by the importance qualifier is filtered out.</p><p id="p-0038" num="0037">At block <b>405</b>, a component of the event processor normalizes filtered event data into a standardized event data format. For consistency with the earlier description, we refer to this component as an event normalizer. The event normalizer determines from the event data known file path elements, file extensions or file types, and events with a file path element or file name that was likely randomly generated. This determination can be considered as three phases of operation to bucketize the event data. The first phase bucketizes event data elements with common process file paths known from domain expertise. The second phase bucketizes event data elements by file type. The third phase determines whether a file name and/or file path of an event data element resulted from random name generation.</p><p id="p-0039" num="0038">During the first phase, the event normalizer sends a file path indicated in the event data to a parser. The parser is trained to identify common file path elements for major processes running on endpoints for which event data is received. The parser can be configured by an expert using domain knowledge of how the file paths are labelled across endpoints. For example, in a Windows&#xae; operating system, a known file path that includes &#x2018;C:\Windows&#x2019; can be organized into a same bucket as a file path that includes &#x2018;D:\Windows&#x2019;. Subdirectories from distinct endpoints can be identified as having the same functionality. The parser can maintain an index of associated file path elements (along with a particular choice of file path element being standard) identified as having the same functionality and can replace file path element names in the file path with a standard file path element name. The parser can receive multiple delimiting formats between file names in the file paths, for example forward slashes and backward slashes. The parser can additionally be configured to identify a type of file path and determine whether the file path is valid for the identified type.</p><p id="p-0040" num="0039">During the second phase, the event normalizer sends the event data to the parser to determine a file type for the event data. The parser can extract key words at certain placeholders in the file path that correspond to known file types. For example, a file path can have a file name &#x2018;windows powershell.Ink&#x2019; and the parser can be configured to indicate, based on this file name, that the file path corresponds to a link file type. The parser can be configured, using expert domain-level knowledge of file paths, to identify non-standard, domain-specific file types. For example, a file name &#x2018;file.myapp&#x2019; can have a domain-specific file name extension &#x2018;myapp&#x2019; that indicates the file runs a user-specific application and the parser can be configured to recognize this file name extension for file paths specifically from this domain. The file type comprises an additional event bucket to the bucket corresponding to the elements in the file path identified in the first phase. The bucket indicating elements and the bucket indicating a file type can be synthesized into a single bucket, as depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0041" num="0040">During the third phase, the event processor sends the file path associated with the event data to a statistical model to determine whether the file name or any elements of the file path not identified in the first phase is randomized. These statistical models are trained on file path elements (or, in some embodiments, a language) and can predict a likelihood that the file path element is randomly generated. Typical models predict the probability of a subsequent character given the character in the file path. File path elements (sometimes separated by a delimiter such as a forward slash) can be analyzed by the statistical model individually. Stepwise probabilities (i.e. the probability of seeing a character given a previous character) enable the calculation of the likelihood of an observed file path element. The models then determine a threshold likelihood above which to determine that a file path element is not randomized. To exemplify, the statistical model can be a hidden Markov model with a hidden state sequence X={X<sub>i</sub>}<sub>i=1</sub><sup>n </sup>of hidden states, and an observation sequence Y={Y<sub>j</sub>}<sub>j=1</sub><sup>n </sup>of characters in a file path element. The probability of observing the sequence Y (i.e., the likelihood the file path element is not randomized) is precisely P(Y)=&#x3a3;<sub>X </sub>P(Y|X)P(X), where the sum runs over all possible hidden state sequences X, and the probabilities are predicted by the hidden Markov model. This probability can be tractably computed using, for instance, the forward algorithm. The HMMs can be trained on language-specific data corresponding to the language of file path elements, and multiple statistical models can be implemented for different file paths having different languages. Although depicted as a Hidden Markov Model, any statistical model that estimates the likelihood of a given character sequence can be used.</p><p id="p-0042" num="0041">If, during the third phase, a file path element is determined to be randomized (i.e. the likelihood of the file path element given by any of the above models is above a likelihood threshold), a bucket is not created for this file path element or, in other embodiments, a bucket corresponding to randomized file path elements is used. File path elements that are not randomized (i.e. the likelihood of the file path element is below the likelihood threshold) are assigned a new bucket for that file path element. Any new buckets created in this phase can again be synthesized with buckets created in the first and second phase. This synthesis can incorporate the hierarchical structure of file path elements when combining the buckets created in the first and third phase.</p><p id="p-0043" num="0042">At block <b>407</b>, the event processor sends the normalized event data to a bucketed event database. The bucketed event database stores the normalized event data in the form of event metadata contained in the event data in a bucket corresponding to the standardized event data. The bucketed event database can be indexed by both buckets corresponding to file paths and hierarchical endpoint scopes. Thus, a query to the bucketed event database comprises a file path and hierarchical endpoint scope and a lookup operation traverses a tree structure in both the file path index and the hierarchical endpoint scope index.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart of example operations for generating an adaptive normal profile. The description of <figref idref="DRAWINGS">FIG. <b>5</b></figref> refers to a &#x201c;profile generator&#x201d; as performing example operations. As previously mentioned, a program name can be arbitrary.</p><p id="p-0045" num="0044">At block <b>501</b>, a profile generator receives a query to create an adaptive normal profile for a specific process and a set of hierarchical endpoint groups. The query includes scoping parameters that specify hierarchical endpoint levels from which to create the adaptive normal profile.</p><p id="p-0046" num="0045">At block <b>503</b>, the profile generator begins iterating over the hierarchical endpoint levels indicated in the query. The profile generator can iterate through hierarchical endpoint levels in an arbitrary order, although in some embodiments database access will be more efficient when iterating from the narrowest to the broadest hierarchical endpoint levels. The loop of operations includes example operations at blocks <b>505</b> and <b>507</b>.</p><p id="p-0047" num="0046">At block <b>505</b>, the profile generator determines frequent events for the current hierarchical endpoint level and process. The profile generator aggregates event data across a current hierarchical endpoint level corresponding to the process. The profile generator accesses a bucketed event database and queries the database according to the current hierarchical endpoint level. The database sends the profile generator a batch of frequent events corresponding to the current hierarchical endpoint level, unless there are no frequent events for the current hierarchical endpoint level.</p><p id="p-0048" num="0047">At block <b>507</b>, the profile generator adds the frequent events to a current profile or, if no profile exists, initializes an empty profile and adds the frequent events. The profile generator can maintain a directory structure in the profile in order to sort the frequent events. The directory structure should reflect the file paths given for the events. Each folder in a file path should be represented in the directory structure and folders contained inside other folders (i.e., folders coming after other folders in a file path) should be indexed under the containing folder. This directory structure is illustrated by the example profile given in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In some instances, a frequent event may never occur on the endpoint or set of endpoints corresponding to the current profile. This occurs when the frequent event was determined from a larger hierarchical scope than the scope of the current profile. The profile generator can determine whether each frequent event can occur on the endpoint or set of endpoints and can discard frequent events that cannot occur.</p><p id="p-0049" num="0048">At block <b>509</b>, the profile generator determines whether there is an additional hierarchical endpoint level indicated in the query. If there is an additional hierarchical endpoint level, control returns to block <b>503</b>. Otherwise, control proceeds to block <b>511</b>.</p><p id="p-0050" num="0049">At block <b>511</b>, the profiles generator adds the adaptive normal profile created by the operations of blocks <b>503</b>, <b>505</b>, <b>507</b>, and <b>509</b> to a profile database. The adaptive normal profile can be indexed by the levels of hierarchical scope indicated in the profile.</p><p id="p-0051" num="0050">While the example operations in <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref> presume indiscriminate collection of event data or process activity, either of data collection and adaptive profile creation can be targeted or prioritized to specified processes (e.g., processes considered most vulnerable or most attractive to attackers). For the data collection, this may be a part of the filtering performed by agents as described in the example operation of block <b>401</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0052" num="0051">The description of <figref idref="DRAWINGS">FIGS. <b>6</b>-<b>7</b></figref> refers to a &#x201c;security monitor&#x201d; as performing example operations for consistency with previous descriptions. As previously mentioned, a program name can be arbitrary. <figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart of example operations for detecting abnormal process activity with adaptive normal profiles. A security monitor can run on a centralized security system, a backend server, an agent monitoring an endpoint, etc. The detection of abnormal process activity from the large volume of process activity allows limited security resources to focus on this activity instead of normal activity and increases the likelihood of detecting new or previously undetected threats/attacks.</p><p id="p-0053" num="0052">At block <b>601</b>, the security monitor retrieves those of the adaptive normal profiles of the process with a scope corresponding to an endpoint or multiple endpoints on which the process is running. The security monitor queries a profile database with a process identifier and scoping parameters that includes the endpoint(s). The profile database can return multiple adaptive profiles having multiple hierarchical scopes corresponding to the endpoints running the process. For example, endpoints in distinct business units both running the process can correspond to distinct adaptive normal profiles having hierarchical scopes for each business unit. The profile database can be a remote database or a database running on local memory (e.g., when the security monitor is running on a monitoring agent at an endpoint). The profile database can be configured to retrieve all adaptive normal profiles corresponding to a set of endpoints efficiently, without backtracking to previously retrieved adaptive normal profiles.</p><p id="p-0054" num="0053">At block <b>602</b>, example operations for monitoring a process proceed as indicated by blocks <b>603</b>, <b>607</b>, <b>609</b>, <b>611</b>, and <b>613</b>. The flowchart in <figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts the operations in blocks <b>603</b>, <b>607</b>, <b>609</b>, <b>611</b>, and <b>613</b> as being performed for a single process in each iteration, however these operations can occur for multiple processes simultaneously depending upon implementation (e.g., a multi-threaded processor, prioritization of processes, etc.). Components performing each block can receive activity corresponding to multiple processes running on multiple endpoints independently of other components also evaluating process activity.</p><p id="p-0055" num="0054">At block <b>603</b>, a security monitor obtains a current window of a sliding window of an activity of the process. The sliding window comprises a stream of event data coming from an agent monitoring an endpoint that is running the process. The sliding window can be an event log in memory on the security monitor that temporarily stores serialized event data in chronological order. There can be multiple event logs for multiple endpoints running natively on monitoring agents for each endpoint, running in a centralized server, etc. The current window is a snapshot of the sliding window comprising event data for events occurring over a time interval. The security monitor can retrieve the current window by accessing serialized event data within a time interval from the event log(s).</p><p id="p-0056" num="0055">At block <b>607</b>, the security monitor evaluates the obtained process activity against the retrieved adaptive normal profiles to determine whether to generate a notification or an alert. The security monitor iterates over the obtained event data and for each activity searches the retrieved adaptive normal profiles for a matching indication of the activity type (e.g., modify, read, etc.). With a matching activity type, the security monitor then searches for a matching target descriptor (i.e., path and target type or target identifier). If a matching entry is discovered, then the event can be disregarded as normal behavior. The security monitor can search the retrieved adaptive normal profiles in any order (e.g., largest scoped to smallest scoped profile). In some embodiments, the security monitor only makes a binary distinction between finding and not finding an event in one of the retrieved adaptive normal profiles. If found, the process activity is normal. If not, then it is treated as abnormal process activity for that process and target descriptor. In this example illustration, the security monitor has three outcomes of the evaluation. The event or activity of a process conforms with all of the retrieved profiles, none of the retrieved profiles, or some of the retrieved profiles. Thus, even when a match is found in a first scoped profile, the security monitor proceeds to evaluate the activity against a second scoped profile.</p><p id="p-0057" num="0056">If the activity conforms to at least one of the retrieved profiles but not another adaptive normal profile, then the security monitor generates a notification for the non-conforming process activity at block <b>609</b>. Since the process activity conforms to normal behavior as expressed by at least one of the adaptive profiles, an alert is not generated. The deviation from at least one of the adaptive normal profiles may be worth investigating at a later time or at least should be logged.</p><p id="p-0058" num="0057">If the activity does not conform to any of the retrieved profiles, then the security monitor generates an abnormal process activity alert for the suspicious process activity at block <b>611</b>. The alert can include a severity metric based on the expected severity of a possible attack associated with the event data, determined by a model using domain-level knowledge of the endpoints associated with the process or a proportion of event data in the current window conforming to the adaptive normal profiles. The notification can further comprise event data formatted for user display and an indication that the event data corresponds to a notification. A graphical user interface can allow user access to specific event logs for analysis. The alert can further comprise further indications of severity for the alert to be displayed to a user (e.g. a flashing red flight on a user display). If the activity conforms to all retrieved profiles, then control flows to block <b>613</b>.</p><p id="p-0059" num="0058">At block <b>613</b>, the security monitor determines whether there is an additional process being monitored. If there is an additional process, flow proceeds to block <b>602</b> for evaluation of the next process being monitored. Otherwise, flow returns to the beginning of <b>602</b> to newly iterative over the monitored processes with the next window of data.</p><p id="p-0060" num="0059">In addition to facilitating detection of new/unknown threats/attacks, the security monitor can use the adaptive normal profiles to filter out false positives. Alarms generated by a preexisting endpoint security system or event filtering system can be evaluated against relevant adaptive normal profiles before being released or forwarded. With reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the preexisting endpoint security system can correspond to the event alert filter <b>316</b>. <figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts a flowchart of example operations for filtering alarms with adaptive normal process profiles.</p><p id="p-0061" num="0060">At block <b>701</b>, a security monitor determines a process identifier and an endpoint identifier for an event indicated in a detected alarm. The security monitor can intercept alarms or be an initial sink for an alarm for filtering. The alarm includes activity/event information or references an event identifier that can be used to retrieve the event information. The security monitor then reads the event information to determine the process identifier that identifies a process that caused the event and an endpoint identifier that identifies an endpoint that runs the identified process.</p><p id="p-0062" num="0061">At block <b>703</b>, the security monitor determines an adaptive normal profile(s) based on the process identifier and the endpoint identifier. Since an adaptive normal profile is identified based on a process identifier and a scoping parameter, the security monitor can query a repository of adaptive normal profiles with a query comprising the process identifier and the endpoint identifier. The repository or repository interface will return one or more adaptive normal profiles that have been previously generated for the process and with a scope that encompasses the endpoint identified by the endpoint identifier. For alarm filtering, the returned adaptive normal profile(s) will have a scope larger than the individual endpoint (e.g., business unit scope, office location scope, subsidiary scope, etc.).</p><p id="p-0063" num="0062">At block <b>705</b>, the security monitor starts evaluating the event information against each determined adaptive normal profile(s). Adaptive normal profiles may be available locally or retrieved from a remote repository. Assuming multiple adaptive normal profiles have been obtained, the security monitor can begin with either the largest scoped or smallest scoped profile, depending upon configuration of the security monitor.</p><p id="p-0064" num="0063">At block <b>707</b>, the security monitor determines whether the event indicated by the alarm conforms to the adaptive normal profile being evaluated. All entries of the adaptive normal profile being evaluated will start with a matching process identifier, so the security monitor searches each entry for a corresponding context and target. The security monitor will examine each entry to determine whether the event information conforms to the activity type and a path in the entry. The security monitor may normalize a path indicated in the event information to determine conformance. If the indicated event conforms to the adaptive normal profile, then control flows to block <b>713</b>. If the indicated event does not conform to the adaptive normal profile, then control flows to block <b>709</b>.</p><p id="p-0065" num="0064">If the indicated event corresponding to the alarm did not conform to the adaptive normal profile being evaluated, then the security monitor determines whether there is another adaptive normal profile at block <b>709</b>. If there is one, then the security monitor proceeds to evaluating the event information against the next adaptive normal profile. If not, then control flows to block <b>715</b>.</p><p id="p-0066" num="0065">At block <b>713</b>, the security monitor marks the alarm as a possible false positive. Deployments can attribute different levels of trust to the filtering comprising marking alarms. In some cases, the alarm may continue as normal with the possible false positive marker to be a factor in triage of alarms. In other cases, the security monitor logs the marking and discards or disregards the alarm.</p><p id="p-0067" num="0066">At block <b>715</b>, the security monitor optionally stores an indication that the event indicated by the alarm did not conform to any of the adaptive normal profiles for the process before or while allowing normal processing of the alarm. The indication may record the profiles that were evaluated against the event information. If it turns out the alarm was a false positive, then the profiles may be modified to account for the false positive.</p><p id="p-0068" num="0067">In addition to identifying abnormal process activity at an endpoint that may be malicious, the hierarchically scoped adaptive normal profiles can be used to identify causality chains that propagate and/or potentially conceal abnormal behavior or malicious activity. The event or activity and corresponding process that seems to be the cause of an attack (&#x201c;direct culprit process&#x201d;) may not be the root of the attack. An attack chain or causality chain allows a direct culprit process to be traced back to a root culprit process. The results of applying adaptive normal profiles can be used to identify causality chains (and, therefore, direct culprit processes), which can be used to train a threat detection model.</p><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart of example operations for identifying causality chains in event data. The <figref idref="DRAWINGS">FIG. <b>8</b></figref> description refers to program code performing the example operations of <figref idref="DRAWINGS">FIG. <b>8</b></figref> as a &#x201c;causality chain identifier.&#x201d;</p><p id="p-0070" num="0069">At block <b>801</b>, a causality chain identifier receives a batch of abnormal event data corresponding to a possible malicious attack. The abnormal event data can be generated by adaptive normal profiles corresponding to a notification or alert that indicates a potential malicious attack. The batch of abnormal event data can further comprise a severity metric that measures a proportion of abnormal events from a batch of abnormal event data that generated the abnormal event data, the importance of associated processes or endpoints to endpoint security, etc. and can be from a sliding window in an event data stream.</p><p id="p-0071" num="0070">At block <b>803</b>, the causality chain identifier initializes an empty causality graph with nodes corresponding to processes indicated in the batch of abnormal event data. The causality chain identifier iterates over the batch of abnormal event data and retrieves a process identifier from each described event, verifies whether the process is already in the causality graph, and, if not, adds the process identifier as a node in the causality graph. Alternatively, the security monitor can add processes as they are triggered at block <b>807</b> to avoid adding unnecessary or isolated processes to the causality graph.</p><p id="p-0072" num="0071">At block <b>805</b>, the causality chain identifier begins iterating over events indicated in the batch of abnormal event data. The events indicated in the batch of abnormal event data are chronologically ordered and/or have timestamps to allow order to be determined. Since the batch of abnormal event data does not include &#x201c;normal&#x201d; events, there may be intervening normal events not represented in the batch of event data being processed by the causality chain identifier. The causality chain identifier begins with the earliest abnormal event indicated in the batch of abnormal event data. In some embodiments, the security monitor can receive the batch of abnormal event data in a stream and perform operations in blocks <b>807</b> and <b>809</b> as event data is received.</p><p id="p-0073" num="0072">At block <b>807</b>, the causality chain identifier determines whether the event triggered another process. The causality chain identifier can check event data corresponding to the event for an indication of another process triggered by the event. If the event triggered another process, flow continues to block <b>809</b>. Otherwise, flow skips to block <b>811</b>.</p><p id="p-0074" num="0073">At block <b>809</b>, the causality chain identifier adds a directed edge in the causality graph from the process that performed or initiated the event and the process that received a command based on the event. The command can be a command to initiate the process that receives it or a command to execute an action on a running process. If the process is a seed process that was not initiated by another process, the causality chain identifier can add the process to the causality graph with no directed edge. The causality chain identifier can add the process to the causality graph if it has not been previous observed during initialization of the causality graph (for example, if the process is a seed process). If the event data is being received as a stream, the causality chain identifier can store the event data in the causality graph at the directed edge.</p><p id="p-0075" num="0074">At block <b>811</b>, the causality chain identifier determines whether there is a next event indicated in the batch of abnormal event data. Alternatively, the causality chain identifier can receive an indication from the security monitor that an event data stream has terminated. If no additional events are indicated in the batch of even data, flow proceeds to block <b>813</b>. Otherwise, flow returns to block <b>805</b>.</p><p id="p-0076" num="0075">At block <b>813</b>, the causality chain identifier identifies abnormal chains of processes in the causality graph. The causality chain identifier runs a graph detection algorithm on the causality graph to detect paths. This graph detection algorithm can be as simple as depth or breadth first search that records traversed paths or can be more complex. As a separate subsequent operation, the causality chain identifier classifies the paths as abnormal or normal. Abnormality for causality chains has a contextual meaning that depends on the statistical properties of causality chains from the groups of endpoints corresponding to the causality graph. The causality chain identifier can classify abnormal causality chains by running a statistical model that detects frequent patterns for causality chains given the group of endpoints. Patterns can include a length of the causality chain, types of processes and/or specific processes that generated the events in the causality chain, known behavior for processes running on the group of endpoints, etc. The scope of the statistical model can vary with respect to the scope of the causality chains (and the scopes of adaptive normal profiles that identified abnormal events in the causality chains) depending on computing resources and availability of training data.</p><p id="p-0077" num="0076">The causality chain identifier can be pretrained on causality chains generated on endpoints with substantially similar context with known normal or abnormal behavior. The scope of the group of endpoints can contain the groups of endpoints corresponding to the causality graph and the causality chain identifier can be applied to multiple groups of endpoints. This avoids the need to train many identifiers for a large domain of endpoints. Abnormal event data used to train the causality chain identifier can correspond to a synthetic or real-world attack. A synthetic attack can be performed in a closed network using techniques from known real-world attacks. Real world or synthetic data can be augmented by appropriate randomization to generate more data. For example, identifiers for hierarchical endpoint levels can be randomized within certain identifier ranges, events can be added or removed at random, event severity indicators can be randomized within certain ranges, etc.</p><p id="p-0078" num="0077">At block <b>815</b>, the causality chain identifier provides the security monitor indications of the abnormal causality chains that have been identified. The identified abnormal causality chains can be used to train a thread detection model. This providing of the abnormal causality chains can be storing them in a database of abnormal causality chains or passing references to the security monitor.</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart of example operations for detecting malicious attack chains. The security monitor relies on the abnormal causality chains that have been identified and a threat detection model that has been trained with the abnormal causality chains and benign causality chains.</p><p id="p-0080" num="0079">At block <b>901</b>, the security monitor receives an abnormal causality chain from a causality chain identifier. The security monitor can format the abnormal causality chain for input into a trained detection model. In embodiments where the trained detection model is a neural network, the security monitor can extract and normalize event features from abnormal event data in the causality chain. Other data formats for different statistical models are possible. Alternatively, the causality chain identifier can be configured to convert the abnormal causality chain into a format appropriate for input to the trained detection model.</p><p id="p-0081" num="0080">At block <b>903</b>, the security monitor evaluates the abnormal causality chain using a trained detection model. The security monitor feeds the abnormal causality chain into the detection model which outputs a likelihood the abnormal causality chain corresponds to a malicious attack.</p><p id="p-0082" num="0081">At block <b>905</b>, the security monitor determines whether the abnormal causality chain has a likelihood output from the trained detection model that is above a security threshold. The security threshold can be determined during training of the detection model based on outputs of the detection model for malicious causality chains corresponding to known attacks. If the security monitor determines an abnormal causality chain is likely to correspond to an attack, flow proceeds to block <b>907</b>. Otherwise, flow terminates.</p><p id="p-0083" num="0082">At block <b>907</b>, the security monitor generates an attack report corresponding to a (likely) malicious causality chain. The report comprises a descriptor indicating the magnitude of the trained detection model output and records of the abnormal events in the malicious causality chain. These records can be logs stored by a logger, event data processed by the security monitor for user display, etc. The security monitor can send the alert record to a graphical user interface. Operations for the flowchart in <figref idref="DRAWINGS">FIG. <b>9</b></figref> are complete.</p><p id="p-0084" num="0083">The flowcharts are provided to aid in understanding the illustrations and are not to be used to limit scope of the claims. The flowcharts depict example operations that can vary within the scope of the claims. Additional operations may be performed; fewer operations may be performed; the operations may be performed in parallel; and the operations may be performed in a different order. For example, the operations depicted in blocks <b>403</b>, <b>405</b>, and <b>407</b> can be performed in parallel or concurrently. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by program code. The program code may be provided to a processor of a general-purpose computer, special purpose computer, or other programmable machine or apparatus.</p><p id="p-0085" num="0084">As will be appreciated, aspects of the disclosure may be embodied as a system, method or program code/instructions stored in one or more machine-readable media. Accordingly, aspects may take the form of hardware, software (including firmware, resident software, micro-code, etc.), or a combination of software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; The functionality presented as individual modules/units in the example illustrations can be organized differently in accordance with any one of platform (operating system and/or hardware), application ecosystem, interfaces, programmer preferences, programming language, administrator preferences, etc.</p><p id="p-0086" num="0085">Any combination of one or more machine readable medium(s) may be utilized. The machine-readable medium may be a machine-readable signal medium or a machine readable storage medium. A machine-readable storage medium may be, for example, but not limited to, a system, apparatus, or device, that employs any one of or combination of electronic, magnetic, optical, electromagnetic, infrared, or semiconductor technology to store program code. More specific examples (a non-exhaustive list) of the machine-readable storage medium would include the following: a portable computer diskette, a hard disk, a random-access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a machine-readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system, apparatus, or device. A machine-readable storage medium is not a machine-readable signal medium.</p><p id="p-0087" num="0086">A machine-readable signal medium may include a propagated data signal with machine readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A machine-readable signal medium may be any machine readable medium that is not a machine-readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.</p><p id="p-0088" num="0087">The program code/instructions may also be stored in a machine-readable medium that can direct a machine to function in a particular manner, such that the instructions stored in the machine readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. <b>10</b></figref> depicts an example computer with an adaptive normal profile generator and an adaptive normal profile guided security monitor. The computer includes a processor <b>1001</b> (possibly including multiple processors, multiple cores, multiple nodes, and/or implementing multi-threading, etc.). The computer includes memory <b>1007</b>, a bus <b>1003</b>, and a network interface <b>1005</b> (e.g., a wireless interface, interface for a wired connection, etc.).</p><p id="p-0090" num="0089">The computer also includes an adaptive normal profile generator <b>1011</b> and an adaptive normal profile guided security monitor <b>1013</b>. The adaptive normal profile generator <b>1011</b> generates profiles representing &#x201c;normal&#x201d; process activity based on statistical analysis of process events at varying scopes greater than an individual endpoint. The adaptive normal profile guided security monitor <b>1013</b> can use the adaptive normal profiles generated by the adaptive normal profile generator <b>1011</b> to filter alarms for false positive, detect unknown/undiscovered threats/attacks, and to identify malicious causality chains. Any one of the previously described functionalities may be partially (or entirely) implemented in hardware and/or on the processor <b>1001</b>. For example, the functionality may be implemented with an application specific integrated circuit, in logic implemented in the processor <b>1001</b>, in a co-processor on a peripheral device or card, etc. Further, realizations may include fewer or additional components not illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref> (e.g., video cards, audio cards, additional network interfaces, peripheral devices, etc.). The processor <b>1001</b> and the network interface <b>1005</b> are coupled to the bus <b>1003</b>. Although illustrated as being coupled to the bus <b>1003</b>, the memory <b>1007</b> may be coupled to the processor <b>1001</b>. The memory <b>1007</b> may be system memory or any one or more of the above already described possible realizations of machine-readable media. While depicted as a computer, some embodiments can be any type of device or apparatus to perform operations described herein.</p><p id="p-0091" num="0090">While the aspects of the disclosure are described with reference to various implementations and exploitations, it will be understood that these aspects are illustrative and that the scope of the claims is not limited to them. In general, techniques for detecting malicious attacks on processes running in a network of endpoints as described herein may be implemented with facilities consistent with any hardware system or hardware systems. Many variations, modifications, additions, and improvements are possible.</p><p id="p-0092" num="0091">Plural instances may be provided for components, operations or structures described herein as a single instance. Finally, boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the disclosure. In general, structures and functionality presented as separate components in the example configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements may fall within the scope of the disclosure.</p><p id="p-0093" num="0092">As used herein, the term &#x201c;or&#x201d; is inclusive unless otherwise explicitly noted. Thus, the phrase &#x201c;at least one of A, B, or C&#x201d; is satisfied by any element from the set {A, B, C} or any combination thereof, including multiples of any element.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising,<claim-text>generating a plurality of profiles for a first process for a plurality of hierarchical endpoint scopes, wherein the first process is executing on one or more endpoints indicated in the plurality of hierarchical endpoint scopes,<claim-text>wherein generating the plurality of profiles for the first process comprises, for each endpoint scope in the plurality of hierarchical endpoint scopes,</claim-text><claim-text>determining, for the first process, a plurality of classifiers for process activities of the first process that satisfy a criterion of normal activity for the first process at the endpoint scope, wherein the determination of the plurality of classifiers for process activities that satisfy the criterion of normal activity is based, at least in part, on statistics from event data for the first process at the endpoint scope; and</claim-text><claim-text>generating a profile with the plurality of classifiers and associating the profile with the endpoint scope.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising,<claim-text>determining importance qualifiers for the event data for the first process at the endpoint scope;</claim-text><claim-text>filtering the event data according to the importance qualifiers;</claim-text><claim-text>normalizing the filtered event data to generate normalized event data; and</claim-text><claim-text>indicating the normalized event data in association with the endpoint scope.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein normalizing the filtered event data comprises,<claim-text>determining common file path elements for processes corresponding to the filtered event data; and</claim-text><claim-text>replacing file path elements in the filtered event data with corresponding file path elements in the common file path elements.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the criterion of normal activity for the first process at the endpoint scope comprises a determination that the plurality of classifiers corresponds to events in the normalized event data that indicate common file path elements that are statistically normal in events corresponding to process activity for the first process at the endpoint scope.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising bucketizing events in the normalized event data according, at least, to file path elements in the common file path elements.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein generating each of the plurality of profiles comprises adding the normalized event data of the corresponding endpoint scope to the profile.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the profile with the plurality of classifiers comprises adding the plurality of classifiers to the profile in association with respective events in a plurality of events from the event data and corresponding event types.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A non-transitory, computer-readable medium having program code stored thereon the program code comprising instructions to:<claim-text>determine, for a first process, a first plurality of classifiers for process activities of the first process that satisfy a first criterion of normal activity for the first process, wherein the determination of the first plurality of classifiers for process activities that satisfy the first criterion of normal activity is based, at least in part, on first statistics from event data corresponding to the first process across a plurality of endpoints that have hosted the first process;</claim-text><claim-text>determine, for the first process, a second plurality of classifiers for process activities of the first process that satisfy a second criterion of normal activity for the first process, wherein the determination of the second plurality of classifiers for process activities that satisfy the second criterion of normal activity is based, at least in part, on second statistics from event data corresponding to the first process on a first endpoint of the plurality of endpoints;</claim-text><claim-text>generate a first profile with the first plurality of classifiers and associate the first profile with a first hierarchical scope that encompasses the plurality of endpoints; and</claim-text><claim-text>generate a second profile with the second plurality of classifiers and associate the second profile with a second hierarchical scope that only encompasses the first endpoint.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer-readable medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the instructions to determine the first plurality of classifiers comprise instructions to determine common file paths corresponding to event data for the first process based, at least in part, on the first statistics from event data corresponding to the first process across a plurality of endpoints that have hosted the first process.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer-readable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the instructions to determine, for the first process, the first plurality of classifiers for process activities of the first process that satisfy the first criterion of normal activity for the first process comprise instructions to determine that file path elements corresponding to the first plurality of classifiers are indicated in the common file paths.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer-readable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the instructions to determine the first plurality of classifiers further comprise instructions to determine file types corresponding to common file paths for the first process.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer-readable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the first criterion of normal activity comprises a determination that the common file paths are statistically normal in events corresponding to process activity of the first process on the plurality of endpoints.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer-readable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the instructions to generate a first profile with the first plurality of classifiers comprise instructions to add the common file paths to the first profile.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer-readable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising instructions to:<claim-text>filter the event data corresponding to the first process across the plurality of endpoints that have hosted the first process at least according to importance qualifiers for respective events; and</claim-text><claim-text>normalize the filtered event data according to common file path elements indicated in the filtered event data, wherein the common file paths comprise the common file path elements, wherein the first statistics from the event data at least comprise statistics of file path elements indicated in the filtered event data.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. An apparatus comprising:<claim-text>a processor; and</claim-text><claim-text>a machine-readable medium having instructions stored thereon that are executable by the processor to cause the apparatus to,</claim-text><claim-text>determine, for a first process, a first plurality of classifiers for process activities of the first process that satisfy a first criterion of normal activity for the first process, wherein the determination of the first plurality of classifiers for process activities that satisfy the first criterion of normal activity is based, at least in part, on first statistics from event data corresponding to the first process across a plurality of endpoints that have hosted the first process;</claim-text><claim-text>determine, for the first process, a second plurality of classifiers for process activities of the first process that satisfy a second criterion of normal activity for the first process, wherein the determination of the second plurality of classifiers for process activities that satisfy the second criterion of normal activity is based, at least in part, on second statistics from event data corresponding to the first process on a first endpoint of the plurality of endpoints;</claim-text><claim-text>generate a first profile with the first plurality of classifiers and associate the first profile with a first hierarchical scope that encompasses the plurality of endpoints; and</claim-text><claim-text>generate a second profile with the second plurality of classifiers and associate the second profile with a second hierarchical scope that only encompasses the first endpoint.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the instructions executable by the processor to cause the apparatus to determine the first plurality of classifiers comprise instructions to determine common file paths corresponding to event data for the first process based, at least in part, on the first statistics from event data corresponding to the first process across a plurality of endpoints that have hosted the first process.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The apparatus of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the instructions executable by the processor to cause the apparatus to determine, for the first process, the first plurality of classifiers for process activities of the first process that satisfy the first criterion of normal activity for the first process comprise instructions to determine that file path elements corresponding to the first plurality of classifiers are indicated in the common file paths.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The apparatus of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the instructions executable by the processor to cause the apparatus to determine the first plurality of classifiers further comprise instructions to determine file types corresponding to common file paths for the first process.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The apparatus of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the first criterion of normal activity comprises a determination that the common file paths are statistically normal in events corresponding to process activity of the first process on the plurality of endpoints.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The apparatus of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising instructions executable by the processor to cause the apparatus to:<claim-text>filter the event data corresponding to the first process across the plurality of endpoints that have hosted the first process at least according to importance qualifiers for respective events; and</claim-text><claim-text>normalize the filtered event data according to common file path elements indicated in the filtered event data, wherein the common file paths comprise the common file path elements, wherein the first statistics from the event data at least comprise statistics of file path elements indicated in the filtered event data.</claim-text></claim-text></claim></claims></us-patent-application>