<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004769A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004769</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17867386</doc-number><date>20220718</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>K</subclass><main-group>19</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>K</subclass><main-group>7</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>19</main-group><subgroup>06065</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>7</main-group><subgroup>1417</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>7</main-group><subgroup>1486</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>19</main-group><subgroup>06037</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>19</main-group><subgroup>06075</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHODS AND ARRANGEMENTS FOR RECONCILING DATA FROM DISPARATE DATA CARRIERS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17237895</doc-number><date>20210422</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11392811</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17867386</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16444959</doc-number><date>20190618</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10990865</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17237895</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62686617</doc-number><date>20180618</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Digimarc Corporation</orgname><address><city>Beaverton</city><state>OR</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Evans</last-name><first-name>Eric D.</first-name><address><city>Portland</city><state>OR</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Haverkate</last-name><first-name>Christopher M.</first-name><address><city>Newberg</city><state>OR</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Tait</last-name><first-name>Mark-Andrew Ray</first-name><address><city>Beaverton</city><state>OR</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">In an illustrative system, a point-of-sale scanner is equipped to respond to multiple different symbologies printed on a single product. The scanner captures many frames per second, as products are swiped through a viewing volume. Each frame is decoded, yielding one or more payloads. A reconciliation module compares each newly-decoded payload against a list of payloads previously output by the module, to determine if the current payload is semantically-equivalent to a previously-output payload. If so, the previously-output payload is output again, in lieu of the just-decoded payload. If no equivalent is found, the current payload is output and added to the list for comparison against future payloads. A great number of other features and arrangements are also detailed.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="117.01mm" wi="158.75mm" file="US20230004769A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="245.36mm" wi="101.26mm" file="US20230004769A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="230.97mm" wi="176.61mm" orientation="landscape" file="US20230004769A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="225.04mm" wi="169.67mm" orientation="landscape" file="US20230004769A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="229.87mm" wi="171.28mm" file="US20230004769A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="236.39mm" wi="181.02mm" file="US20230004769A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="200.83mm" wi="155.02mm" file="US20230004769A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="245.70mm" wi="165.95mm" file="US20230004769A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="242.82mm" wi="150.11mm" orientation="landscape" file="US20230004769A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="196.60mm" wi="154.35mm" orientation="landscape" file="US20230004769A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="135.89mm" wi="138.85mm" file="US20230004769A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="160.44mm" wi="123.87mm" file="US20230004769A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="195.75mm" wi="120.14mm" orientation="landscape" file="US20230004769A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATION DATA</heading><p id="p-0002" num="0001">This application is a continuation of application Ser. No. 17/237,895, filed Apr. 22, 2021(now U.S. Pat. No. 11,392,811), which is a continuation of application Ser. No. 16/444,959, filed Jun. 18, 2019 (now U.S. Pat. No. 10,990,865) which claims priority from provisional application 62/686,617, filed Jun. 18, 2018, the disclosure of which is incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND AND SUMMARY</heading><p id="p-0003" num="0002">Retail products are commonly marked with UPC-A barcodes, which are black and white indicia that encode standardized product identifiers (Global Trade Identification Numbers, or GTINs). A barcode scanner at a point of sale (POS) terminal can read this identifier from a product, look-up the item name and price in a database, and add the product to a shopper's checkout tally.</p><p id="p-0004" num="0003">Historically, each product has been marked with one barcode. That is changing. Applicant has introduced a different form of barcode (the &#x201c;Digimarc Barcode&#x201d; indicia) that avoids drawbacks of conventional barcodes. Instead of being a conspicuous arrangement of black and white lines, or checkerboard arrangement, applicant's indicia encodes data into more globally-dispersed patterns, such as subtle localized changes to luminance or chrominance of a package's artwork, or a sprinkling of small dots across the background of a deli- or bakery-item label. Such dispersed representation of the data makes scanning easier, because the product doesn't have to be manipulated so that a certain small region of the package is in view of the scanner. Some products are now marked with both a conventional barcode, and with a Digimarc Barcode indicia.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an example&#x2014;a label that includes both a conventional barcode (a &#x201c;DataBar&#x201d; code), and a Digimarc Barcode indicia (the sprinkling of dots in the background).</p><p id="p-0006" num="0005">While advantageous, the introduction of this technology has introduced a new complication: what happens when a product includes both a conventional barcode and a Digimarc Barcode indicia, and they convey different data? The present technology concerns methods and arrangements to address this situation.</p><p id="p-0007" num="0006">This is important because a point of sale scanner should never cause a shopper to be overcharged. If a product conveys both a conventional barcode and a Digimarc barcode, and they convey different data, then a shopper could be charged for two items instead of one.</p><p id="p-0008" num="0007">Prior art POS scanners have employed &#x201c;double-read&#x201d; protection systems to avoid double-charging shoppers when a product's barcode is depicted in two close-in-time scanner images.</p><p id="p-0009" num="0008">But this doesn't address the situation in which two different indicia are read, and they convey different data.</p><p id="p-0010" num="0009">(A prior art double-read protection system starts a timer each time a data string is decoded from a barcode. If the exact string is decoded a second time, before the timer has expired, that string is not again reported for inclusion on the shopper's tally, but instead is ignored. Additional details of exemplary double-read protection systems are provided in patent publications U.S. Pat. No. 5,365,048, 20020179715, 20080029604, 20120048933, and 20150090503, the disclosures of which are incorporated by reference.)</p><p id="p-0011" num="0010">Some packages have previously had multiple barcodes, conveying different data. An example is a box from an online merchant that is shipped by UPS. The merchant and UPS each have their own barcode on the box&#x2014;each for a different purpose. (The merchant barcode may be a UPC-A barcode that conveys a link to a database record indicating the customer, the order number, and the box contents. The UPS barcode may be a QR code that encodes the airport(s) through which the shipment is to be routed, and the customer's destination address.)</p><p id="p-0012" num="0011">Multiple barcodes with different data is not a problem in such cases because the merchant and UPS employ reader devices that are customized to their respective needs. The barcode reader employed by UPS does not read the barcode employed by the merchant, and vice versa.</p><p id="p-0013" num="0012">In contrast, supermarket scanners can read both conventional barcodes and Digimarc Barcode indicia.</p><p id="p-0014" num="0013">In accordance with one aspect of the present technology, a scanner is equipped to respond to multiple different symbologies printed on a single product. The scanner captures many frames per second, as the product is swiped through a viewing volume. Each frame is decoded, yielding one or more payloads. A reconciliation module compares each newly-decoded payload against a list of payloads previously output by the module, to determine if the current payload is semantically-equivalent to a previously-output payload. If so, the previously-output payload is output again, in lieu of the just-decoded payload. If no equivalent is found, the current payload is output and added to the list for comparison against future payloads.</p><p id="p-0015" num="0014">The foregoing and additional features and arrangements will be more readily apparent from the following detailed description, which proceeds with reference to the accompanying diagrams.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a food label bearing both a conventional (DataBar) barcode, and a Digimarc Barcode indicia.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> is <figref idref="DRAWINGS">FIG. <b>1</b></figref> overlaid with markings showing a block encoding 98 binary bits that is repetitively tiled across the label.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIGS. <b>2</b>-<b>7</b></figref> illustrate various different forms of barcodes, each conveying the GTIN for a box of Kellogg's Corn Flakes cereal.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an exemplary embodiment including aspects of the present technology.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIGS. <b>9</b>-<b>11</b></figref> are diagrams showing illustrative operation sequences for the embodiment of <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIGS. <b>12</b>-<b>16</b></figref> detail algorithms employed in the embodiment of <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIGS. <b>17</b>-<b>20</b></figref> detail algorithms associated with an illustrative encoding technique.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a block diagram of an electronic device that can be configured to practice the detailed arrangements.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0024" num="0023">Essentially all retail packages are marked with a barcode symbology that encodes a &#x201c;GTIN&#x201d;&#x2014;a Global Trade Identification Number that identifies the item. The GTIN for a 12 oz. box of Kellogg's Corn Flakes cereal is 038000001109. This 12-digit code comprises a prefix identifying Kellogg's as the owner, i.e., 038000, and 5 more digits that serve as an item reference number for Corn Flakes cereal among Kellogg's offerings, i.e., 00110. The final digit is a check digit, computed from the earlier 11 digits. (Company prefixes can be longer or shorter than six digits, in which case the item reference numbers are shorter or longer.) GTINs, and other aspects of most barcodes, are standardized by specifications published by GS1, a non-profit industry group.</p><p id="p-0025" num="0024">A GTIN can be conveyed by many different symbologies (sometimes termed &#x201c;indicia&#x201d; or &#x201c;data carriers&#x201d;). Most common is the UPC-A symbology, as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Other symbologies, e.g., EAN-13 shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> and GS1-128 shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, carry 13- and 14-digit counterparts to this code. The Digimarc Barcode indicia also carries a 14-digit counterpart, and can carry other information as well. All these payloads convey the same GTIN; they are semantically equivalent. The shorter ones are left-padded with zeroes to extend their lengths to 14 digits.</p><p id="p-0026" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="35pt" align="left"/><colspec colname="1" colwidth="56pt" align="left"/><colspec colname="2" colwidth="126pt" align="char"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>UPC-A</entry><entry>038000001109</entry></row><row><entry/><entry>EAN-13</entry><entry>0038000001109</entry></row><row><entry/><entry>GSl-128</entry><entry>00038000001109</entry></row><row><entry/><entry>Digimarc Barcode</entry><entry>00038000001109</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0027" num="0025">The Digimarc Barcode indicia is different from conventional barcodes in various respects. One is that it is less visually obtrusive. Another is that it commonly takes the form of a square block of data (e.g., encoding a 98 bit binary payload), and this block of data is redundantly tiled across and down the printed medium, as illustrated by the dashed squares in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. (Only a few of the blocks are shown, but the pattern extends across the label, except for areas immediately around other text and graphics, where a keep-out area is usually maintained.) Such redundant tiling is sometimes termed &#x201c;holographic&#x201d; encoding. As used herein, &#x201c;holographic&#x201d; means that redundant representations of the payload data are printed in a tiled array, with a periodic spacing of K inches vertically and horizontally, and that the encoding spans an area large enough that two points on the encoded label, that are a distance of 2.5K apart, are both amidst the encoding pattern, e.g., points X and Y in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. (Often points separated by a larger distance, e.g., 3 or 4K, are still amidst the encoding pattern, as in points A and B in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>.) The blocks are usually square, but can be other shapes, e.g., rectangles or hexagons.</p><p id="p-0028" num="0026">Barcodes, both conventional and the Digimarc Barcode indicia, can carry information in addition to the GTIN, such as weight, price and sell-by date. The Databar barcode is presently popular for this purpose. Each element of a DataBar payload is prefixed by a code (an</p><p id="p-0029" num="0027">&#x201c;Application Identifier,&#x201d; or AI) that indicates what the following &#x201c;element value&#x201d; data represents. An AI of &#x201c;01&#x201d; precedes a 14-digit GTIN element value. An AI of &#x201c;16&#x201d; precedes a sell-by date element value, in YYMMDD format. An AI of &#x201c;30&#x201d; precedes an item count element value. An AI of &#x201c;3922&#x201d; precedes a price&#x2014;with 2 digits after the decimal point. An AI of &#x201c;3103&#x201d; precedes a weight in kilograms, with 3 digits after the decimal point. Again, GS1 standards specify these AIs and their details.</p><p id="p-0030" num="0028"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows the Kellogg's Corn Flakes GTIN, alone, encoded in DataBar format. <figref idref="DRAWINGS">FIGS. <b>6</b> and <b>7</b></figref> show the same GTIN in DataBar format, augmented with fictional sell-by, price, and weight data. <figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a linear arrangement; <figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a &#x201c;stacked&#x201d; arrangement.</p><p id="p-0031" num="0029">The payload string encoded in the latter two symbologies is:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0030">(01)038000001109(16)170227(3922)187(3103)005500</li>    </ul>    </li></ul></p><p id="p-0032" num="0031">To aid in visual understanding, the four Application Identifiers in this string are indicated by parentheses. No parentheses are actually encoded.</p><p id="p-0033" num="0032">All six of the symbologies in <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>7</b></figref> encode the same GTIN for Kellogg's Corn Flake cereal. Yet all except the last two convey different payloads.</p><p id="p-0034" num="0033">Some Application Identifiers are always followed by element values of fixed-length. For example, GS1 standards specify that the &#x201c;01&#x201d; AI is always followed by a 14-digit GTIN. The weight and expiration date AIs are always followed by six-digit strings. Other AIs, however, are followed by variable length data. Price (3922) is an example. The 3922 AI can be followed by between 1 and 15 digits. A 99 cent item may thus be coded as 392299 or 3922099 or 39220099, etc. Item count (AI 30) is another. The &#x201c;30&#x201d; AI can be followed by between 1 and 8 digits. Such variable length data fields make it uncertain where the next Application Identifier begins. In such instances, a &#x201c;group separator&#x201d; (also known as a &#x201c;FNC1&#x201d;) code is commonly inserted, represented as ASCII symbol 29. In text such as this, the group separator code is commonly written as &#x201c;&#x3c;GS&#x3e;&#x201d;.</p><p id="p-0035" num="0034">It will be recognized that the above DataBar payload could benefit by a &#x3c;GS&#x3e;. The 3922 price Application Identifier is followed by digits 187(3103)00 . . . . The parentheses indicate that the 3103 is the next Application Identifier (for weight). But absent demarcation, some or all of the following digits might be mistaken for more of the price, e.g., a price of $18.73, or of $187.31, or of $1873.10, etc.</p><p id="p-0036" num="0035">The Application Identifier 3103 precedes the weight in kilograms. The final &#x201c;3&#x201d; indicates the following data will include three digits after the decimal point. That is, the six digits represent the weight in the format xxx.xxx kg.</p><p id="p-0037" num="0036">If weight down to the thousandth of a kilogram is not required, then a different Application Identifier, 3102, can be used. This one precedes a data string having two digits after the decimal point. That is, the six digits represent the weight in the format xxxx.xx kg.</p><p id="p-0038" num="0037">Still further, there are corresponding Application Identifiers for weight in pounds. AI 3203 is the pound weight with three digits after the decimal point, AI 3202 is the pound weight with two digits after the decimal point. Thus, in labeling a 1.5-pound deli container of cole slaw (i.e., 0.68 kg), the weight can be expressed with any of four different strings:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0038">3203001500</li>        <li id="ul0004-0002" num="0039">3202000150</li>        <li id="ul0004-0003" num="0040">3103000680</li>        <li id="ul0004-0004" num="0041">3102000068</li>    </ul>    </li></ul></p><p id="p-0039" num="0042">In a perfect world, the payload of a DataBar code would include the Application Identifiers in numeric order, starting with &#x201c;01&#x201d; and the GTIN. However, this convention is not followed reliably. Likewise, variable length element values (e.g., price and item count) are desirably put at the end of the string in order to avoid ambiguity about where they end, and avoid an unnecessary &#x3c;GS&#x3e; digit. But exceptions invariably occur.</p><p id="p-0040" num="0043">Composition of DataBar data strings can have other idiosyncrasies&#x2014;in addition to those just-noted. But from the above issues, alone, one can recognize that semantically-equivalent data strings can take a great variety of different forms. For example, each of the following 24 strings indicates the same GTIN (01) of 038000001109, the same sell-by date of Feb. 27, 2017 (16), the same price of $1.87 (3922), and the same weight of 5.5 kg or 10.126 pounds (3103, 3102, 3203, 3202) (with parentheses once again added to aid in understanding):<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0044">(01)038000001109(16)170227(3922)187(3103)005500</li>        <li id="ul0006-0002" num="0045">(01)038000001109(16)170227(3103)005500(3922)187</li>        <li id="ul0006-0003" num="0046">(01)038000001109(3922)187(16)170227(3103)005500</li>        <li id="ul0006-0004" num="0047">(01)038000001109(3922)187(3103)005500(16)170227</li>        <li id="ul0006-0005" num="0048">(01)038000001109(3103)005500(16)170227(3922)187</li>        <li id="ul0006-0006" num="0049">(01)038000001109(3103)005500(3922)187(16)170227</li>        <li id="ul0006-0007" num="0050">(01)038000001109(16)170227(3922)187(3102)00550</li>        <li id="ul0006-0008" num="0051">(01)038000001109(16)170227(3102)00550(3922)187</li>        <li id="ul0006-0009" num="0052">(01)038000001109(3922)187(16)170227(3102)00550</li>        <li id="ul0006-0010" num="0053">(01)038000001109(3922)187(3102)00550(16)170227</li>        <li id="ul0006-0011" num="0054">(01)038000001109(3102)00550(16)170227(3922)187</li>        <li id="ul0006-0012" num="0055">(01)038000001109(3102)00550(3922)187(16)170227</li>        <li id="ul0006-0013" num="0056">(01)038000001109(16)170227(3922)187(3202)01013</li>        <li id="ul0006-0014" num="0057">(01)038000001109(16)170227(3202)01013(3922)187</li>        <li id="ul0006-0015" num="0058">(01)038000001109(3922)187(16)170227(3202)01013</li>        <li id="ul0006-0016" num="0059">(01)038000001109(3922)187(3202)01013(16)170227</li>        <li id="ul0006-0017" num="0060">(01)038000001109(3202)01013(16)170227(3922)187</li>        <li id="ul0006-0018" num="0061">(01)038000001109(3202)01013(3922)187(16)170227</li>        <li id="ul0006-0019" num="0062">(01)038000001109(16)170227(3922)187(3203)010126</li>        <li id="ul0006-0020" num="0063">(01)038000001109(16)170227(3203)010126(3922)187</li>        <li id="ul0006-0021" num="0064">(01)038000001109(3922)187(16)170227(3203)010126</li>        <li id="ul0006-0022" num="0065">(01)038000001109(3922)187(3203)010126(16)170227</li>        <li id="ul0006-0023" num="0066">(01)038000001109(3203)010126(16)170227(3922)187</li>        <li id="ul0006-0024" num="0067">(01)038000001109(3203)010126(3922)187(16)170227</li>    </ul>    </li></ul></p><p id="p-0041" num="0068">The first 6 of these strings include the same data, in different order. The next 6 are equivalent, but express the weight in kg using the 2-digits-after-the-decimal AI 3102. The next 6 are equivalent, but express the weight in pounds using the 2-digits-after-the-decimal AI 3202. The final 6 are equivalent, but express the weight in pounds using the 3-digits-after-the-decimal AI 3203.</p><p id="p-0042" num="0069">None of these strings reflects any variation in field length, such as adding one or two or three leading zeroes to the price of $1.87. When such variations are taken into account, the number of semantic equivalents balloons further.</p><p id="p-0043" num="0070">Although the GS1 specifications are comprehensive (455 pages, in the case of the primary document, &#x201c;GS1 General Specifications, Release 18, January 2018&#x201d;)), they fail to consider the possibility that an item may be marked with the same information, carried by two symbologies. In some cases, such as when a single image of an item is captured, a prioritization between symbologies might be specified by a standard. For example, the standards could state to use the payload from a DataBar code, and if absent then to use the payload from an EAN-13 code, and if absent then to use the payload from a UPC-A code, etc. But the standards don't address such possibility.</p><p id="p-0044" num="0071">Moreover, the standard doesn't even set a requirement for the order of different data fields conveyed by a barcode.</p><p id="p-0045" num="0072">The situation becomes more complex when a multitude of frames is captured, as an item is passing through a viewing volume of a scanner. How then to proceed, when a DataBar might be decoded from one frame, a different symbology might be decoded from a second frame, both symbologies might be decoded from a third frame&#x2014;and each of the symbologies conveys data in an unknown order? Again, the GS1 standards (including the 17 previous versions of the General Specification) fail to specify.</p><p id="p-0046" num="0073">Applicant's technology provides a solution to this problem. <figref idref="DRAWINGS">FIG. <b>8</b></figref> shows the data flow of one particular embodiment. A scanner <b>80</b> includes one or more imagers, or cameras <b>81</b><i>a</i>, <b>81</b><i>b</i>, <b>81</b><i>c</i>. Each provides a series of captured image frames to a detector scheduler module <b>82</b>, which passes along certain image frames to various symbology detectors <b>83</b>. The scheduler module may send all of the incoming image frames to all of the available symbology detectors. More frequently, however, the scheduler module <b>82</b> prioritizes certain cameras or certain detectors, e.g., sending only every-other frame from the cameras to a Digimarc detector.</p><p id="p-0047" num="0074">The various different detectors each decodes its respective symbology, and outputs a payload string. The payload data from the different detectors are compiled by a data control module <b>84</b>, which generates a consolidated feed of decoded data for sequential processing by a reconciliation module <b>86</b>.</p><p id="p-0048" num="0075">The reconciliation module <b>86</b> processes the feed of data from the control module <b>84</b>, in conjunction with data it maintains in a cached list <b>85</b>. This cache stores a running list of payload strings output from the reconciliation module <b>86</b>, each associated with a timestamp and context data&#x2014;such as the type of data carrier (symbology) from which it was decoded (i.e., the detector <b>83</b><i>a</i>-<b>83</b><i>z </i>from which it was received).</p><p id="p-0049" num="0076">The reconciliation module <b>86</b> determines if the current payload, in the feed of data from control module <b>84</b>, is equivalent to any of the cached payloads output in a previous, typically-fixed, interval (e.g., 150 milliseconds. If so, the reconciliation module does not output the current payload. Instead, it outputs the previous, equivalent payload. This enables the following double-read protection module <b>87</b> to do its work&#x2014;recognizing close-in-time repeated payloads, and suppressing all but the first, so as to avoid double- (or triple-) charging the consumer. The reconciliation module <b>86</b> writes, to the cache, whatever payloads it outputs, together with timestamp and data carrier data. When a payload is output from the reconciliation module, and clears the following double-read protection module, a beep is sounded to confirm the action.</p><p id="p-0050" num="0077"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates one sequence of operations. A scanner decodes a fresh food label that yields a payload represented by &#x201c;A<b>0</b>.&#x201d; The data reconciliation module <b>86</b> outputs the A<b>0</b> payload, and writes this value into the cached list <b>85</b>. A short time later, the scanner decodes a second label, this one yielding a payload represented by &#x201c;A<b>1</b>.&#x201d; The data reconciliation module determines that payloads A<b>0</b> and A<b>1</b> are semantically equivalent, and that the Al payload was detected within a 150 ms time window of the A<b>0</b> payload. In such case, the reconciliation module outputs the information from the second label, but does so using its equivalent, earlier-sent representation, i.e., A<b>0</b>. The original A<b>0</b> entry in the cache is maintained, but its timestamp is updated to indicate the time the second A<b>0</b> payload was output.</p><p id="p-0051" num="0078">(If a payload A<b>0</b> is received, and 100 ms later&#x2014;and for a further minute&#x2014;the payload A<b>1</b> is repeatedly received&#x2014;at continuing intervals of 100 ms, the scanner will output the A<b>0</b> payload about 600 times, each time updating the single A<b>0</b> cache entry with the current timestamp value. This despite the fact that 99+% of the decoded payloads conveyed A<b>1</b> rather than A<b>0</b>.)</p><p id="p-0052" num="0079"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a case similar to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, except that between the A<b>0</b> and A<b>1</b> labels, a label bearing a &#x201c;B&#x201d; payload is decoded. The reconciliation module <b>86</b> finds no semantic equivalence in the cache when the B payload is received. This B payload is output for reporting to the POS terminal, and a corresponding entry is made in the cache. When the scanner next decodes label A<b>1</b> (still within 150 ms of A<b>0</b>), the reconciliation module recognizes that A<b>1</b> is a semantic equivalent of A<b>0</b>, outputs the earlier A<b>0</b> payload, and updates the A<b>0</b> timestamp to the current time.</p><p id="p-0053" num="0080"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows a different situation, in which the scanner decodes labels bearing semantically-equivalent A<b>0</b> and A<b>1</b> payloads, but outside of a common time window. In this case, semantic equivalence (or not) does not matter because they are not in a common time window. When the reconciliation module outputs the first, A<b>0</b>, payload, the cache is written accordingly. More than 150 ms later, the second, A<b>1</b> payload is received from the control module <b>84</b>. In checking the cache, the reconciliation module <b>86</b> first removes any entries that should age-off (i.e., that are more than 150 milliseconds old). Accordingly, it removes the A<b>0</b> entry from the cache. Nothing is left cached, so there is no issue of any semantic equivalence to consider. The reconciliation module outputs the A<b>1</b> payload, and writes this payload&#x2014;and its symbology and timestamp&#x2014;to the cached list <b>85</b>.</p><p id="p-0054" num="0081">A particular logic arrangement configured to implement the just-described arrangements, is detailed by the state diagrams of <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>16</b></figref>.</p><p id="p-0055" num="0082">The process starts in the upper left of <figref idref="DRAWINGS">FIG. <b>12</b></figref>, with the reconciliation module <b>86</b> waiting for a decoded payload. When one is received, two preliminary checks are made before reconciliation begins.</p><p id="p-0056" num="0083">First, module <b>86</b> checks (<b>121</b>) to see if the system clock (a counter) has rolled over and now indicates a lower value than the last known time. (In one particular counter implementation, this happens about once every 50 days.) If so, the 150 milliseconds of data in the cache is flushed. The last known time is set to the current time, and a following branch <b>122</b> depends on whether a label filter module <b>127</b> is present and activated.</p><p id="p-0057" num="0084">The label filter module <b>127</b> deals with a rare situation: a single item being marked with both a conventional barcode and a Digimarc Barcode indicia, with the two markings indicating different GTINs. One situation in which this can occur is when artwork for a package is printed with a press plate left-over from a prior, different press run. For example, label artwork for sodium-free chicken stock may be run on a press immediately following label artwork for regular chicken stock. Many of the artwork elements between the labels may be visually identical, and in haste, a plate from the former run might be used erroneously in the latter run&#x2014;and introduce a conflicting GTIN.</p><p id="p-0058" num="0085">Label filter technology is detailed in application Ser. No. 15/441,006, filed Feb. 23, 2017 (now U.S. Pat. No. 10,262,176), and Ser. No. 15/704,833, filed Sep. 14, 2017 (now U.S. Pat. No. 10,198,782), the disclosures of which are incorporated by reference.</p><p id="p-0059" num="0086">If label filtering is active, and a conflict is detected with another payload, then a filtering action is invoked&#x2014;including ignoring the current label payload. Normally, however, label filtering finds no issue, and the process continues to block <b>123</b>, in which the cache <b>85</b> is cleared of out-of-date items (i.e., those time-stamped more than 150 milliseconds ago). The payload of the current label is next semantically-compared with the payload of each other label in the cache, at block <b>124</b>. This process starts by &#x201c;promoting&#x201d; the payloads of the current label, and of each cached payload with which it is being compared. Promoting here refers to zero-padding the GTIN strings to expand them to a maximum length specified by GS1, i.e., 14 digits. If the payload includes a GTIN without a leading Application Identifier of &#x201c;01,&#x201d; then such AI is prepended to the string.</p><p id="p-0060" num="0087">If a cached payload is a UPC-A label, with a 12-digit GTIN, then &#x201c;promoting&#x201d; that label involves zero-padding to bring the GTIN value to 14 digits, and adding &#x201c;01&#x201d; to the beginning. The payloads are then compared&#x2014;as detailed more fully in later diagrams.</p><p id="p-0061" num="0088">If the current payload is found to semantically match a payload in the cache, the timestamp of the previous payload is updated to the current time. The previous payload data is then output (<b>125</b>).</p><p id="p-0062" num="0089">If the current payload doesn't semantically match any of the payload data stored in the cache, the reconciliation module writes a new entry to the cache, specifying the current label payload, its context (e.g., symbology), and a timestamp. The current payload data is then output (<b>126</b>).</p><p id="p-0063" num="0090"><figref idref="DRAWINGS">FIG. <b>13</b></figref> details the &#x201c;promotion&#x201d; process just-discussed. If the data carrier is a DataBar symbology (also known as RSS-14), no action is taken. The input payload is output without change. If the data carrier is a UPC-E, UPC-A, GTIN-13 (EAN-13), GTIN-14, or other code, then it is zero-padded at the left to bring its GTIN element to 14 digits, and is prepended with a &#x201c;01&#x201d;, by process <b>131</b>.</p><p id="p-0064" num="0091">UPC-E is an odd case. This is a reduced-size symbology, e.g., used on packs of gum, cigarettes, and other small items. While UPC-A conveys an 11-digit GTIN, plus a check digit, UPC-E conveys a 6-digit GTIN, plus a check digit. The 6-digit value is obtained by a compression scheme that exploits zeroes in the GTIN. The Kellogg's Corn Flakes GTIN, which in UPC-A form is 03800000110x (where &#x2018;x&#x2019; is the check digit), is 381100x in UPC-E form. If a label is expressed by a UPC-E code, then it is expanded to a 14-digit expression by process <b>132</b>. The promoted payload value is then output.</p><p id="p-0065" num="0092"><figref idref="DRAWINGS">FIG. <b>14</b></figref> details the comparison of Application Identifiers and element values between a cached payload (&#x201c;b&#x201d;) and the current payload (&#x201c;a&#x201d;). The next (i.e., first) Application Identifier in the current label is parsed from the decoded payload (&#x201c;a&#x201d;), together with its associated data element (i.e., &#x201c;AI_a&#x201d; and &#x201c;val_a&#x201d;), per process <b>140</b>. If this AI or data element is null, the routine terminates (<b>141</b>). If the payload is found to be non-parseable, the routine also terminates (<b>142</b>). Otherwise, a pointer is reset to point to the beginning of the payload &#x201c;b&#x201d; read from the cache (<b>143</b>). The next (i.e., first) Application Identifier in the cached label is parsed from its payload, together with its associated data element (i.e., &#x201c;AI_b&#x201d; and &#x201c;val_b&#x201d;), per process <b>144</b>. If no further AI nor element value is available to be parsed from the cached string (i.e., the end of that string has been reached), the process returns (<b>145</b>) to process <b>140</b>&#x2014;reading the next AI and value from the current string. Otherwise, the AI currently under consideration from the current string, is checked for equivalence with the AI currently under consideration from the cached string. This is shown as two blocks in <figref idref="DRAWINGS">FIG. <b>14</b></figref>: a &#x201c;comparabilize&#x201d; block <b>146</b>, and a &#x201c;compare&#x201d; block <b>147</b>. The former block performs any conversion needed to make AIs and data elements comparable (e.g., converting pounds to kilograms, and converting associated AIs accordingly). The latter block compares the &#x201c;comparabilized&#x201d; data elements.</p><p id="p-0066" num="0093">If no equivalence is found between the two AIs under consideration (<b>148</b>), the next AI and value are parsed from the cached (&#x201c;b&#x201d;) string (<b>144</b>), and the process repeats. In contrast, if equivalence is found between the current and cached AIs currently under consideration, then their associated integer values are compared for equivalence (<b>149</b>). If they don't match, then the process can move on. The cached string under consideration isn't an equivalent to the current string; consideration of that cached string can terminate (<b>150</b>). However, if a match was found between the first AI in the current string, and an AI in the cached string, and the associated data elements also match, then the process moves on (<b>151</b>) to consider a next AI and element value in the current string, against AIs and associated element values in the cached string.</p><p id="p-0067" num="0094">It will be recognized that the algorithm detailed by <figref idref="DRAWINGS">FIG. <b>14</b></figref> is insensitive to the order in which Application Identifiers and their associated element values appear in a payload string. The first AI in the current string is checked against the first AI, and then the second AI, and then the third AI, etc., in the cached string. And likewise for subsequent AIs in the current string. Wherever corresponding AIs are found in the different strings, their associated element values are compared for a match.</p><p id="p-0068" num="0095">It will further be recognized that if the current string has an Application Identifier, such as item count (<b>30</b>), which is not found in the cached string, this is not an impediment to the strings being found to be equivalent. In such case, the cached string is analyzed through parts <b>144</b>, <b>146</b>, <b>147</b>, and <b>148</b> of the diagram, repeatedly, until all of the AIs in the cached string have been examined. When no matching AI is found, this loop exits via branch <b>145</b>, and the cached string remains in contention as a potential equivalent. And similarly if the cached string has an AI which is not found in the current string. It is only if an AI is present in the current string, and that AI (or a comparabilized AI) is found in the cached string&#x2014;and the associated element values do not match&#x2014;that the cached string is found to be non-equivalent to the current string, per branch <b>150</b>. (Put another way, a virtual Venn diagram is compiled of the AIs present in each string. Only the common AIs need to correspond in order to find equivalence. The presence of an AI in one string that is absent in the other is of no consequence in the determination.)</p><p id="p-0069" num="0096"><figref idref="DRAWINGS">FIG. <b>15</b></figref> more particularly details processes <b>140</b> and <b>144</b> in <figref idref="DRAWINGS">FIG. <b>14</b></figref>, by which the next Application Identifier and value is obtained from a string.</p><p id="p-0070" num="0097">In accordance with one particular algorithm, the next (e.g., first) two digits of the string under consideration, indicated by an index pointer, are examined to determine if they match a 2-digit Application Identifier having a fixed length data element (per the GS1 standard). AIs &#x201c;01&#x201d; (GTIN: 14 digits) and &#x201c;16&#x201d; (sell-by-date: 6 digits) are examples. If so, the AI and data element (value) are parsed (extracted) based on their known lengths, and the index pointer is advanced to the next symbol in the string (i.e., the beginning of the next Application Identifier), per blocks <b>152</b>.</p><p id="p-0071" num="0098">Otherwise, the digits beginning with the index pointer are examined to see if they match another AI in the GS1 standard, e.g., a 2-digit AI associated with a variable length data element, or a longer AI. If so, such AI is parsed from the string (<b>154</b>). The following digits are examined to see if any is a global separator/FNC1 symbol. If so, digits between the just-parsed AI and this symbol are extracted and serve as the data value for the just-parsed AI, and the index pointer is advanced to the next symbol in the string (i.e., the beginning of the next Application Identifier), per blocks <b>155</b>. Otherwise, the remainder of the string (up to the max length allowed for that AI) is taken to be the last data value in the string, and all of its digits are taken to be the element value for the just-parsed Application Identifier. The index pointer is again advanced, e.g., to the end of the string (<b>156</b>.)</p><p id="p-0072" num="0099"><figref idref="DRAWINGS">FIG. <b>16</b></figref> details the algorithm for &#x201c;comparabilizing&#x201d; AIs, used in <figref idref="DRAWINGS">FIG. <b>14</b></figref>. The algorithm first checks (<b>161</b>) whether the AIs both begin with &#x201c;320,&#x201d; indicating a weight in pounds. If not, it checks (<b>162</b>) whether both AIs begin with &#x201c;310,&#x201d; indicating a weight in kilograms. If not, the process terminates; no comparabilizing is performed in this illustrative embodiment. However, if either of these conditions is met, the algorithm next checks (<b>163</b>) to see whether the AI from the current string &#x201c;a,&#x201d; is larger than the AI from the cached string &#x201c;b.&#x201d; For example, the former may be 3203&#x2014;indicating 3 digits after the decimal point, and the latter may be 3202&#x2014;indicating 2 digits after the decimal. In this case, the element value associated with the 3203 AI (say, 010126, for 10.126 pounds) is divided by ten, and rounded (<b>164</b>), yielding 1013 (regarded as an integer for comparison purposes). This number expresses the element value that will be associated with an equivalent 3202 AI, i.e. 001013, when it is regarded as an integer. (It will be recognized that weights of different decimal precision are normalized to the lower-precision for comparison.)</p><p id="p-0073" num="0100">If the &#x201c;a&#x201d; AI is not larger than the &#x201c;b&#x201d; AI, the algorithm checks to see (<b>165</b>) if the opposite is true: is the &#x201c;a&#x201d; AI less than the &#x201c;b&#x201d; AI. If so, the &#x201c;b&#x201d; element value is divided by ten and rounded (<b>166</b>). It is then regarded as an integer and compared with the counterpart element value for the &#x201c;a&#x201d; string.</p><p id="p-0074" num="0101">If the AIs are equal (i.e., 3202=3202, 3203=3203, 3102=3102, or 3103=3103), then no adjustment of an element value is required.</p><p id="p-0075" num="0102">The algorithm of <figref idref="DRAWINGS">FIG. <b>16</b></figref> &#x201c;comparabilizes&#x201d; two weights in the same measurement system: pounds or kg. Corresponding algorithms (not illustrated) employ similar processes to comparabilize weights in different measurement systems. It will be recognized that there are eight such cases. In one illustrative embodiment, each leads to adjustment of the larger element string, taken as an integer, by a corresponding factor, as shown in Table 1:</p><p id="p-0076" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="77pt" align="left"/><colspec colname="2" colwidth="63pt" align="left"/><colspec colname="3" colwidth="77pt" align="center"/><thead><row><entry namest="1" nameend="3" rowsep="1">TABLE 1</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry/><entry/><entry>Divide larger</entry></row><row><entry>Current AI (&#x201c;a&#x201d;)</entry><entry>Cached AI (&#x201c;b&#x201d;)</entry><entry>element value by:</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="77pt" align="left"/><colspec colname="2" colwidth="63pt" align="left"/><colspec colname="3" colwidth="77pt" align="char" char="."/><tbody valign="top"><row><entry>3202 (lbs&#x2014;2 digits)</entry><entry>3102 (kg&#x2014;2 digits)</entry><entry>2.204618182</entry></row><row><entry>3202 (lbs&#x2014;2 digits)</entry><entry>3103 (kg&#x2014;3 digits)</entry><entry>4.535932835</entry></row><row><entry>3203 (lbs&#x2014;3 digits)</entry><entry>3102 (kg&#x2014;2 digits)</entry><entry>22.04618182</entry></row><row><entry>3203 (lbs&#x2014;3 digits)</entry><entry>3103 (kg&#x2014;3 digits)</entry><entry>2.204618182</entry></row><row><entry>3102 (kg&#x2014;2 digits)</entry><entry>3202 (lbs&#x2014;2 digits)</entry><entry>2.204618182</entry></row><row><entry>3102 (kg&#x2014;2 digits)</entry><entry>3203 (lbs&#x2014;3 digits)</entry><entry>22.04618182</entry></row><row><entry>3103 (kg&#x2014;3 digits)</entry><entry>3202 (lbs&#x2014;2 digits)</entry><entry>4.535932835</entry></row><row><entry>3103 (kg&#x2014;3 digits)</entry><entry>3203 (lbs&#x2014;3 digits)</entry><entry>2.204618182</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0077" num="0103">To illustrate, in the first of the eight listed cases, the 2-digit weight in pounds, expressed by the current &#x201c;a&#x201d; element value, may be 001213 (12.13 pounds), and the 2 digit weight in kg expressed by the cached &#x201c;b&#x201d; element value may be 000550 (5.5 kg). Dividing 1213 by the stated factor of 2.204618182 yields 550.21. Rounding yields 550&#x2014;a equal to the &#x201c;b&#x201d; element value, when the compare operation <b>147</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref> is performed.</p><p id="p-0078" num="0104">Digimarc's encoding of the GTIN, sell-by date, weight, item count, and price data fields varies from that specified by GS1. For example, in the encoding format used with fresh foods, Digimarc conveys only GTIN-13 identifiers. (GTIN-14 serves different applications, which don't involve retail point-of-sale scanning.) Moreover, a Digimarc Barcode indicia does not encode the final check digit of the GTIN. Digimarc's encoding strategy has other safeguards against errors, so the check digit is not needed. Thus, a GTIN is encoded with just 12 digits. (When a Digimarc barcode is read by a scanner, the detector module re-computes the check digit from the 12 bits, and appends it to the GTIN string, restoring the string to 13 digits.)</p><p id="p-0079" num="0105">Another distinction is that weights are represented up to a maximum of 22.767 pounds if 3 digits after the decimal are required (or 227.67 pounds, if only two digits after the decimal are required). In contrast, GS1 standards theoretically allow weights up to 999.999 kg to be represented, or 2204.62 pounds.</p><p id="p-0080" num="0106">Item count is also constrained. Item counts up to 99 are permitted. In contrast, GS1 standards allocate up to 8 digits for this field, allowing counts up to 99,999,999.</p><p id="p-0081" num="0107">Digimarc also represents sell-by dates differently. Instead of allocating six digits in YYMMDD format, to the field, Digimarc represents the date in an epoch-style format: the number of days since the start of 2016. This enables dates from Jan. 1, 2016 to May 8, 2106, to be represented. (As with GTIN, the detector module converts the Digimarc representation of the data to GS1 style, i.e., YYMMDD, after decoding.)</p><p id="p-0082" num="0108">Digimarc's encoding on labels and packages is generally imperceptible, or at least inconspicuous. The less data that the Digimarc barcode conveys, the easier it is to keep the marking inconspicuous. The just-noted variations from the GS1 data representations enable</p><p id="p-0083" num="0109">Digimarc to encode a label for fresh food items (conveying GTIN, price, weight or item count, and sell-by date) in just 98 bits. 5 bits comprise a preamble that specify the encoding format (e.g., indicating whether any weight expressed in the payload is pounds or kilograms, and how many digits follow the decimal point). The next 40 bits are used to represent the 12 digits of GTIN data. The final 53 bits of the payload represent the decimal weight in pounds (or the item count), together with the price and sell-by date.</p><p id="p-0084" num="0110">To further conserve payload space, the GS1 Application Identifiers are not literally encoded in the payload data. Rather, they are inserted on the receiving end of the process, by the decoder <b>83</b>&#x2014;after the element values have been decoded.</p><p id="p-0085" num="0111">The weight is discerned by converting the final 53 payload bits to a decimal counterpart, dividing by 330,000,000,000, and taking the integer part. For example, if the final 53 bits are:<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0112">00000011111100101101100101100101001001111101010000011<br/>The decimal counterpart is 138,930,056,133,251. Dividing by 330,000,000,000 and taking the integer part yields 421. If the preamble indicates the payload encodes the weight with 3 digits after the decimal point, this indicates the weight is 0.421 pounds.</li>    </ul>    </li></ul></p><p id="p-0086" num="0113">If the integer part produced by this algorithm exceeds 22767, this indicates that the payload conveys an item count instead of a weight. In such case, the item count is the just-referenced integer part, minus 22767.</p><p id="p-0087" num="0114">The price is discerned by taking the decimal counterpart of the 53 final bits, computing its modulo-330,000,000,000 value, dividing the result by 33,000, and taking the integer part. In the above example, the modulo operation yields 56,133,251. Dividing this value by 33,000 yields 1701.007606. The price is expressed with two digits after the decimal point, so here is equal to $17.01.</p><p id="p-0088" num="0115">The sell-by-date is discerned by taking the just-computed modulo value, and performing a second modulo operation, this one mod-33,000. Mod-33,000(56,133,251) yields a value of 251. As noted, this indicates the number of days since the start of 2016, i.e., Sep. 8, 2016. Expressed in GS1 format, the detector 83z expresses this data as 160908.</p><p id="p-0089" num="0116">The detector pre-pends a &#x201c;0&#x201d; to the GTIN, computes the check bit corresponding to the decoded 12-digit GTIN and post-pends it, inserts the 01, 3203, 3922 and 16 Application Identifiers, and outputs a corresponding element string. If the 40 bits convey a GTIN of 123456789012, the detector 83z computes a check bit of 8, and may output a string like:<ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0000">    <ul id="ul0010" list-style="none">        <li id="ul0010-0001" num="0117">(01)01234567890128(3203)000421(3922)1701&#x3c;GS&#x3e;(16)160908</li>    </ul>    </li></ul></p><p id="p-0090" num="0118">(There is actually some &#x201c;headroom&#x201d; available in the 40 bits used to represent the 12 digits of GTIN data. 12 digits can range up to 999,999,999,999. But 40 bits can represent up to 1,099,511,627,776. The difference, or 99,511,627,777, is a coding space in which a UPC-E identifier can be represented instead of a GTIN-14 identifier. If the decimal equivalent of the 40 bits exceeds 999,999,999,999, then the excess value can be used to represent a UPC-E identifier.)</p><p id="p-0091" num="0119">Sometimes a package will have a DataBar code that represents data in addition to that conveyed by a Digimarc Barcode indicia found on the same package. For example, the DataBar code might include a batch or lot number (Application Identifier &#x201c;10&#x201d;) that is omitted in the Digimarc Barcode indicia. Similarly, a Digimarc Barcode indicia may include an Application Identifier datum, such as weight (3203), that is omitted in a DataBar code in the same package.</p><p id="p-0092" num="0120">Digimarc Barcode Indicia</p><p id="p-0093" num="0121">Technical details of the Digimarc Barcode indicia are provided in applicant's published patent applications. A brief review follows:</p><p id="p-0094" num="0122"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a diagram illustrating a process for constructing such a code. In this embodiment, separate variable payload and reference signal components are generated and then combined. The payload is a sequence of data symbols, which each represent two or more (binary or M-ary) message symbol values. The integer value, M, in the term, M-ary, is the number of possible symbol values per symbol element. For example, in the case of M=3, the symbol values have one of three states, such as 1, 0 and &#x2212;1, or correspond to signal feature values of three different quantization bins. The latter refers to a modulation scheme where a feature value of the host image is quantized to one of the quantization bins corresponding to the symbol value. To make the payload more robust, it is encoded redundantly using a combination of error correction, error detection, repetition and carrier signals. The processing in block <b>30</b> transforms the payload into a robust encoded payload component in which symbols of the payload are conveyed in plural elements of the encoded payload component. These elements form a payload signal waveform with a spatial arrangement and amplitude.</p><p id="p-0095" num="0123">The reference signal component is a signal used to detect the optical code within the output image and perform geometric synchronization. The processing in block <b>32</b> generates the reference signal component by specifying its signal waveform properties, such its spatial arrangement and amplitude. An example of this type of optical code, with encoded payload and reference signal is described in U.S. Pat. No. 6,590,996 and in pending application Ser. No. 16/141,587, filed Sep. 25, 2018, which are incorporated by reference.</p><p id="p-0096" num="0124">In block <b>34</b>, the embodiment assigns a priority to elements of the encoded payload and reference signal components. This is implemented by applying a weighting to the elements according to the assigned priority. For example, the method multiplies amplitude values of signal elements by a weighting factor proportional to the priority of the optical code component of those elements.</p><p id="p-0097" num="0125">The embodiment of <figref idref="DRAWINGS">FIG. <b>17</b></figref> then constructs the optical code into a two-dimensional spatial image representation in block <b>36</b>.</p><p id="p-0098" num="0126"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a diagram illustrating another process for constructing such a code. This is a variant of <figref idref="DRAWINGS">FIG. <b>17</b></figref> in which the reference signal component is formed in the arrangement of encoded payload component. In block <b>40</b>, this embodiment generates an encoded payload component. This approach may use similar error correction coding and modulating onto a carrier signal as the embodiment of <figref idref="DRAWINGS">FIG. <b>17</b></figref>. Then, in block <b>42</b>, this embodiment arranges the encoded payload elements into a pattern that forms a reference signal component. An example of this approach is described in U.S. Pat. No. 9,747,656, which is incorporated by reference. In a variant of this approach, encoded payload elements are spatially interleaved with fixed reference signal elements. The fixed elements form a pattern of the reference signal component.</p><p id="p-0099" num="0127">To assign priority to the components in block <b>44</b>, the embodiment weights signal elements of the encoded payload and fixed elements. This approach produces a spatial pattern of weighted elements, arranged so as to form a reference signal (<b>46</b>).</p><p id="p-0100" num="0128"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a diagram illustrating another process for constructing an optical code. This is another variant of <figref idref="DRAWINGS">FIG. <b>17</b></figref> in which the reference signal component serves as a carrier for encoded payload signal elements. In block <b>50</b>, this embodiment generates an encoded payload component. For example, the sequence of payload components are error correction encoded by converting the sequence of payload symbols into a longer sequence of encoded symbols using error correcting codes such as block and/or convolution error correcting codes. Some examples of block codes include (e.g., Bose-Chaudhuri-Hocquenghem (BCH), Reed-Solomon codes).</p><p id="p-0101" num="0129">In block <b>52</b>, the embodiment modulates components of a reference signal with elements of the encoded payload signal. In one implementation, the reference signal comprises a collection of sine waves, each with a phase value. The payload is encoded by shifting the phase of a sine wave according to the value of an encoded payload signal element. In one protocol, the encoded payload elements are binary, meaning that they have one of two different values per element. One binary value is represented with zero phase shift and the other by a phase shift of &#x3c0; (180 degrees) of the corresponding sine wave. In other protocol variants, the encoded payload signal is M-ary, with M&#x3e;2. The value of M is limited by robustness constraints, as the higher it is, the more difficult it is to distinguish among different symbol values encoded in an image feature. The encoded payload is modulated onto the reference signal carrier component by shifting the phase into one of M corresponding phase shift states (e.g., 0, &#x3c0;/2, &#x3c0;, or 3&#x3c0;/2). This may be implemented as form of quantization based modulation, where the phase of the reference signal component is quantized to fall within the phase shift bin corresponding to the encoded payload symbol.</p><p id="p-0102" num="0130">Not all components of the reference signal need to be modulated with payload signal. Instead, some subset of the reference signal may remain un-modulated, and this un-modulated component serves as a reliable signal for a first stage of detection. For example, the reference signal may be comprised of 200 sine waves, with a subset (e.g., 40-60) remaining fixed, and the others available for modulation by a corresponding payload signal element.</p><p id="p-0103" num="0131">Another approach to modulating a reference signal is on-off keying of reference signal components. In this approach, a subset of reference signal sine waves are fixed, and the remainder are modulated to convey data using on-off keying. In this on-off keying, encoded payload symbols are encoded by including or not, a sine wave at predetermined frequency location. Each encoded payload element is mapped to a frequency location within an image tile. Where the payload element is a first binary value (e.g., 0 or '1), the sine wave for that element is not included. Conversely, where the payload element has a second binary value (e.g., 1), the sine wave for that element is included.</p><p id="p-0104" num="0132">In block <b>54</b>, the embodiment assigns priority to the optical signal components. This is implemented for example, by applying a scale factor to selected sine wave components according to priority. Higher priority signal components are given greater weight by multiplying by a larger scale factor. Additionally, different scale factors may be applied to the fixed vs. modulated reference signal components to provide a greater relative priority to parts of the reference signal that are modulated or fixed.</p><p id="p-0105" num="0133">In block <b>56</b>, the embodiment generates a spatial pattern of the optical code with its modulated reference signal components. In the case of the sine wave embodiment, there are alternative methods to generate the spatial pattern. One alternative is to apply an inverse frequency domain transform on the complex components in the frequency domain, such as an inverse Fast Fourier Transform (FFT). Another alternative starts with spatial domain waveforms of each sine wave component, and adds them together to form the spatial pattern. As an alternative to sine waves, other carrier signals, such as orthogonal arrays, which have good auto-correlation but low cross correlation, may be used. These orthogonal arrays map to locations in a two-dimensional image tile.</p><p id="p-0106" num="0134">The output of each of the optical code generators in <figref idref="DRAWINGS">FIGS. <b>17</b>-<b>19</b></figref> is a spatial domain image block. The pixel values of the block are multi-valued, e.g., eight bits per pixel. This image block may be used as signal tile, which is repeated and merged with host image content of a host image to form an output image. The output image is a label or package design, which is rendered onto a substrate by a printer or other marking equipment (embosser, engraver, etcher, or the like). The signal components are prioritized according to the assigned priority. This priority enables the optical code to be filled into spatial areas of the host image design according to a signal priority and dot density and spacing that optimizes robustness and visual quality constraints.</p><p id="p-0107" num="0135">We now detail sub components of the optical code generators of <figref idref="DRAWINGS">FIGS. <b>17</b>-<b>19</b></figref>.</p><p id="p-0108" num="0136"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is a diagram illustrating a method of encoding a variable digital payload to be conveyed in an optical code. This section explains additional examples of how to generate encoded payload components in the embodiments discussed previously. In processing module <b>60</b>, the data payload is processed to compute error detection bits, e.g., such as a Cyclic Redundancy Check, Parity, check sum or like error detection message symbols. Additional fixed and variable messages used in identifying the payload format and facilitating detection, such as synchronization signals may be added at this stage or subsequent stages.</p><p id="p-0109" num="0137">Error correction encoding module <b>62</b> transforms the message symbols into an array of encoded message elements (e.g., binary or M-ary elements) using an error correction method. Examples include block codes, BCH, Reed Solomon, convolutional codes, turbo codes, etc.</p><p id="p-0110" num="0138">Repetition encoding module <b>64</b> repeats the string of symbols from the prior stage to improve robustness. Repetition encoding may be removed and replaced entirely with error correction coding. For example, rather than applying convolutional encoding (e.g., at 1/3 rate) followed by repetition (e.g., repeat three times), these two can be replaced by convolution encoding to produce a coded payload with approximately the same length.</p><p id="p-0111" num="0139">Next, carrier modulation module <b>66</b> takes message elements of the previous stage and modulates them onto corresponding carrier signals. For example, a carrier might be an array of pseudorandom signal elements, with equal number of positive and negative elements (e.g., 16, 32, 64 elements), or other waveform, such as sine wave or orthogonal array. In the case of positive and negative elements, the payload signal is a form of binary antipodal signal. It also may be formed into a ternary (of 3 levels, &#x2212;1, 0, 1) or M-ary signal (of M levels). These carrier signals may be mapped to spatial domain locations or spatial frequency domain locations. Another example of carrier signals are the above-described sine waves, which are modulated using a modulation scheme like phase shifting, phase quantization, and/or on/off keying.</p><p id="p-0112" num="0140">The carrier signal provides additional robustness, as it spreads the encoded message symbol over the carrier. As such, the use of larger carrier arrays reduces the redundancy employed in error correction and/or the need for repetition code. Thus, the error correction codes, repetition and carrier signals may be used in various combinations to produce an encoded payload signal for a tile that achieves the desired robustness and signal carrying capacity per tile.</p><p id="p-0113" num="0141">Mapping module <b>68</b> maps signal elements of the encoded payload signal to locations within an image block. These may be spatial locations within an image tile. They may also be spatial frequency locations. In this case, the signal elements are used to modulate frequency domain values (such as magnitude or phase). The resulting frequency domain values are inverse transformed into the spatial domain to create a spatial domain signal tile.</p><p id="p-0114" num="0142">Mapping module <b>68</b> also maps a reference signal to locations in the image block. These locations may overlap or not the locations of the payload. The encoded payload and reference signal are signal components. These components are weighted and together, form an optical code signal.</p><p id="p-0115" num="0143">To accurately recover the payload, an optical code reader must be able to extract estimates of the encoded data payload signal elements at their locations within an image. This requires the reader to synchronize the image under analysis to determine the tile locations, and data element locations within the tiles. The locations are arranged in two dimensional blocks forming each tile. The synchronizer determines rotation, scale and translation (origin) of each tile.</p><p id="p-0116" num="0144">The optical code signal comprises an explicit and/or implicit reference signal. An explicit reference signal is a signal component separate from the encoded payload that is included with the encoded payload, e.g., within the same tile. An implicit reference signal is a signal formed with the encoded payload, giving it structure that facilitates geometric synchronization. Because of its role in geometric synchronization, we sometimes refer to the reference signal as a synchronization signal. Examples of explicit and implicit synchronization signals are provided in our U.S. Pat. Nos. 6,614,914, and 5,862,260, which are incorporated by reference.</p><p id="p-0117" num="0145">In particular, one example of an explicit synchronization signal is a signal comprised of a set of sine waves, with pseudo-random phase, which appear as peaks in the Fourier domain of the suspect signal. See, e.g., U.S. Pat. Nos. 6,590,996 and 6,614,914, and 5,862,260, describing use of a synchronization signal in conjunction with a robust data signal. Also see U.S. Pat. No. 7,986,807, which is incorporated by reference.</p><p id="p-0118" num="0146">Our US Publications 20120078989 and 20170193628, which are incorporated by reference, provide additional methods for detecting a reference signal with this type of structure and recovering rotation, scale and translation. US 20170193628 provides additional teaching of synchronizing an optical code reader and extracting a digital payload with detection filters, even where there is perspective distortion.</p><p id="p-0119" num="0147">Examples of implicit synchronization signals, and their use, are provided in U.S. Pat. Nos. s 6,614,914, 5,862,260, 6,625,297, 7,072,490, and 9,747,656, which are incorporated by reference.</p><p id="p-0120" num="0148">Additional information on creating and decoding patterns that can serve as Digimarc Barcode indicia is found in U.S. Pat. Nos. 9,959,587, 9,747,656, 9,635,378, 9,521,291, publications 20170024840 and 20190171856, and pending application Ser. No. 16/405,621, filed May 7, 2019, which are incorporated by reference. The latter three documents particularly focus on embodiments in which the indicia comprises a sparse pattern of dots on a contrasting background, e.g., as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0121" num="0149">As detailed in the cited documents, one arrangement creates a sparse code by applying a thresholding operation to a dense code, which combines payload and reference signal components, to identify locations of extreme low values (i.e., dark). These locations in the dense code are then marked in a sparse block. The threshold level establishes the print density of the resulting sparse mark.</p><p id="p-0122" num="0150">Another arrangement identifies the darkest elements of a reference signal, and logically-ANDs these with dark elements of the payload signal, to thereby identify locations in a sparse signal block at which marks should be formed. A threshold value can establish which reference signal elements are dark enough to be considered, and this value can be varied to achieve a desired print density.</p><p id="p-0123" num="0151">Still another arrangement employs a reference signal generated at a relatively higher resolution, and a payload signal generated at a relatively lower resolution. The latter signal has just two values (i.e., it is bitonal); the former signal has more values (i.e., it is multi-level, such as binary greyscale or comprised of floating point values). The payload signal is interpolated to the higher resolution of the reference signal, and in the process is converted from bitonal form to multi-level. The two signals are combined at the higher resolution, and a thresholding operation is applied to the result to identify locations of extreme (e.g., dark) values. Again, these locations are marked in a sparse block. The threshold level again establishes the print density of the resulting sparse mark.</p><p id="p-0124" num="0152">Yet another arrangement again employs a reference signal generated at a relatively higher resolution, and a bitonal payload signal generated at a relatively lower resolution. A mapping is established between the two signals, so that each element of the payload signal is associated with four or more spatially-corresponding elements of the reference signal. For each element of the payload signal that is dark, the location of the darkest of the four-or-more spatially corresponding elements in the reference signal is identified. A mark is made at a corresponding location in the sparse block.</p><p id="p-0125" num="0153">A further arrangement is based on a dense multi-level reference signal block. Elements of this signal are sorted by value, to identify the darkest elements&#x2014;each with a location. These darkest elements are paired. One element is selected from each pairing in accordance with bits of the payload. Locations in the sparse block, corresponding to locations of the selected dark elements, are marked to form the sparse signal.</p><p id="p-0126" num="0154">Arrangements that operate on composite, dense codes can further include weighting the reference and payload signals in ratios different than 1:1, to achieve particular visibility or robustness goals.</p><p id="p-0127" num="0155">Each of these arrangements can further include the act of applying a spacing constraint to candidate marks within the sparse block, to prevent clumping of marks. The spacing constraint may take the form of a keep-out zone that is circular, elliptical, or of other (e.g., irregular) shape. The keep-out zone may have two, or more, or less, axes of symmetry (or none). Enforcement of the spacing constraint can employ an associated data structure having one element for each location in the sparse block. As dark marks are added to the sparse block, corresponding data is stored in the data structure identifying locations that&#x2014;due to the spacing constraint&#x2014;are no longer available for possible marking.</p><p id="p-0128" num="0156">In each of these arrangements, the reference signal can be tailored to have a non-random appearance, by varying the relative amplitudes of spatial frequency peaks, so that they are not all of equal amplitude. Such variation of the reference signal appearance has consequent effects on the sparse signal appearance.</p><p id="p-0129" num="0157">These arrangements can also include the act of applying a non-linear filter to a multi-level code (e.g., the original dense code) to identify locations at which forming a mark in the sparse block most effectively gives expression to information represented by unprinted sparse elements. These locations are then given priority in selecting locations at which to make marks in the sparse block.</p><heading id="h-0005" level="2">Operating Environment</heading><p id="p-0130" num="0158">The arrangements detailed above are implemented in software instructions or digital circuitry organized into modules. These modules variously include various detector modules, a reconciliation module, etc. The reconciliation module, in turn, includes a promotion module, a parse and compare module, a comparabilize module, etc. Notwithstanding any specific discussion of the embodiments set forth herein, the term &#x201c;module&#x201d; refers to software instructions, firmware or circuitry configured to perform any of the methods, processes, functions or operations described herein.</p><p id="p-0131" num="0159">Software may be embodied as a software package, code, instructions, instruction sets or data recorded on non-transitory computer readable storage mediums. Software instructions for implementing the detailed functionality can be authored by artisans without undue experimentation from the descriptions provided herein, e.g., written in MATLAB, C, C++, Visual Basic, Java, Python, Tcl, Perl, Scheme, Ruby, etc., in conjunction with associated data. Firmware may be embodied as code, instructions or instruction sets or data that are hard-coded (e.g., nonvolatile) in memory devices. As used herein, the term &#x201c;circuitry&#x201d; may include, for example, singly or in any combination, hardwired circuitry, programmable circuitry such as computer processors comprising one or more individual instruction processing cores, state machine circuitry, or firmware that stores instructions executed by programmable circuitry.</p><p id="p-0132" num="0160">Implementation can additionally, or alternatively, employ special purpose electronic circuitry that has been custom-designed and manufactured to perform some or all of the component acts, as an application specific integrated circuit (ASIC). To realize such an implementation, the relevant module(s) (e.g., detector modules, reconciliation module, etc.) are first implemented using a general purpose computer, using software such as MATLAB (from</p><p id="p-0133" num="0161">Mathworks, Inc.). A tool such as HDLCoder (also available from MathWorks) is next employed to convert the MATLAB model to VHDL (an IEEE standard) or Verilog. The VHDL output is then applied to a hardware synthesis program, such as Design Compiler by Synopsis, HDL Designer by Mentor Graphics, or Encounter RTL Compiler by Cadence Design Systems. The hardware synthesis program provides output data specifying a particular array of electronic logic gates that will realize the technology in hardware form, as a special-purpose machine dedicated to such purpose. This output data is then provided to a semiconductor fabrication contractor, which uses it to produce the customized silicon part. (Suitable contractors include TSMC, Global Foundries, and ON Semiconductors.)</p><p id="p-0134" num="0162">HDLCoder may also be used to create a Field Programmable Gate Array implementation. The FPGA may be used to prototype the ASIC or as an implementation in a FPGA chip integrated into an electronic device.</p><p id="p-0135" num="0163">For the sake of illustration, <figref idref="DRAWINGS">FIG. <b>21</b></figref> is a diagram of an electronic device 210 in which the components of the above optical code generator, inserter, optimizer and decoder embodiments may be implemented. It is not intended to be limiting, as the embodiments may be implemented in other device architectures or electronic circuitry. <figref idref="DRAWINGS">FIG. <b>21</b></figref> represents a computer in which program instructions for, e.g., decoding symbologies and reconciling payloads, are stored and executed to carry out methods described in this document. It also represents special purpose computer systems, like a point-of-sale scanner system. Like more general purpose computers and mobile devices (e.g., smartphones and tablets), a POS scanner system includes memory for storing firmware implementations of these methods and one or more processors for executing them. They may also include above-referenced FPGA or ASIC implementations of the detector modules, reconciliation module, etc.</p><p id="p-0136" num="0164">The depicted device <b>210</b> includes a bus <b>300</b> to which many devices, modules, etc., (each of which may be generically referred as a &#x201c;component&#x201d;) are communicatively coupled. The bus <b>300</b> may combine the functionality of a direct memory access (DMA) bus and a programmed input/output (PIO) bus. In other words, the bus <b>300</b> may facilitate both DMA transfers and direct CPU read and write instructions. In one embodiment, the bus <b>300</b> is one of the Advanced Microcontroller Bus Architecture (AMBA) compliant data buses. Although <figref idref="DRAWINGS">FIG. <b>21</b></figref> illustrates an embodiment in which all components are communicatively coupled to the bus <b>300</b>, it will be appreciated that one or more sub-sets of the components may be communicatively coupled to a separate bus in any suitable or beneficial manner, and that any component may be communicatively coupled to two or more buses in any suitable or beneficial manner. Although not illustrated, the electronic device can optionally include one or more bus controllers (e.g., a DMA controller, an I<b>2</b>C bus controller, or the like or any combination thereof), through which data can be routed between certain of the components.</p><p id="p-0137" num="0165">Device <b>210</b> also includes a CPU <b>302</b>. The CPU <b>302</b> may be a microprocessor, mobile application processor, etc., known in the art (e.g., a Reduced Instruction Set Computer (RISC) from ARM Limited, the Krait CPU product-family, a X86-based microprocessor available from the Intel Corporation including those in the Pentium, Xeon, Itanium, Celeron, Atom, Core i-series product families, etc.). The CPU <b>302</b> runs an operating system of the electronic device, runs application programs and, optionally, manages the various functions of the electronic device. The CPU <b>302</b> may include or be coupled to a read-only memory (ROM) (not shown), which may hold an operating system (e.g., a &#x201c;high-level&#x201d; operating system, a &#x201c;real-time&#x201d; operating system, a mobile operating system, or the like or any combination thereof) or other device firmware that runs on the electronic device.</p><p id="p-0138" num="0166">The depicted device may also include a volatile memory <b>304</b> electrically coupled to bus <b>300</b>. The volatile memory <b>304</b> may include, for example, any type of random access memory (RAM). Although not shown, the device may further include a memory controller that controls the flow of data to and from the volatile memory <b>304</b>.</p><p id="p-0139" num="0167">Device <b>210</b> may also include a storage memory <b>306</b> connected to the bus. The storage memory <b>306</b> typically includes one or more non-volatile semiconductor memory devices such as ROM, EPROM and EEPROM, NOR or NAND flash memory, or the like or any combination thereof, and may also include any kind of electronic storage device, such as, for example, magnetic or optical disks. In embodiments of the technology, the storage memory <b>306</b> is used to store one or more items of software. Software can include system software, application software, middleware (e.g., Data Distribution Service (DDS) for Real Time Systems, MER, etc.), one or more computer files (e.g., one or more data files, configuration files, library files, archive files, etc.), one or more software components, or the like or any stack or other combination thereof.</p><p id="p-0140" num="0168">Examples of system software include operating systems (e.g., including one or more high-level operating systems, real-time operating systems, mobile operating systems, or the like or any combination thereof), one or more kernels, one or more device drivers, firmware, one or more utility programs (e.g., that help to analyze, configure, optimize, maintain, etc., one or more components of the electronic device), and the like.</p><p id="p-0141" num="0169">Also connected to the bus <b>300</b> is a user interface module <b>308</b>. The user interface module <b>308</b> is configured to facilitate user control of the electronic device, both by a human technician, and also by other devices with which device <b>210</b> is used (e.g., a point of sale terminal). Thus the user interface module <b>308</b> may be communicatively coupled to one or more input devices <b>310</b>. An input device <b>310</b> can, for example, include a button, knob, GUI control, etc.</p><p id="p-0142" num="0170">The user interface module <b>308</b> may also be configured to indicate, to the user, the effect of the user's control of the electronic device, or any other information related to an operation being performed by the electronic device or function otherwise supported by the electronic device. Thus the user interface module <b>308</b> may also be communicatively coupled to one or more output devices <b>312</b>. A user output device <b>312</b> can, for example, include a display (e.g., a liquid crystal display (LCD), a light emitting diode (LED) display, an active-matrix organic light-emitting diode (AMOLED) display, an e-ink display, etc.), a printer, a loud speaker, or the like or any combination thereof.</p><p id="p-0143" num="0171">Generally, the input devices <b>310</b> and output devices <b>312</b> are an integral part of the electronic device; however, in alternate embodiments, any input device <b>310</b> (e.g., a keyboard, etc.) or user output device <b>312</b> (e.g., a display) may be a physically separate device that is communicatively coupled to the electronic device (e.g., via a communications module <b>314</b>).</p><p id="p-0144" num="0172">Although the user interface module <b>308</b> is illustrated as an individual component, it will be appreciated that the user interface module <b>308</b> (or portions thereof) may be functionally integrated into one or more other components of the electronic device (e.g., the CPU <b>302</b>, the sensor interface module <b>330</b>, etc.).</p><p id="p-0145" num="0173">Also connected to the bus <b>300</b> is an image signal processor <b>316</b> and a graphics processing unit (GPU) <b>318</b>. The image signal processor (ISP) <b>316</b> is configured to process imagery (including still-frame imagery, video imagery, or the like or any combination thereof) captured by one or more cameras <b>320</b>, or by any other image sensors, thereby generating image data.</p><p id="p-0146" num="0174">General functions typically performed by the ISP <b>316</b> can include Bayer transformation, demosaicing, noise reduction, image sharpening, or the like or combinations thereof. The GPU <b>318</b> can be configured to process the image data generated by the ISP <b>316</b>, thereby generating processed image data. General functions performed by the GPU <b>318</b> include calculating geometric transformations (e.g., rotation, translation, etc.) into different coordinate systems, etc.</p><p id="p-0147" num="0175">and sending image data to other components of the electronic device (e.g., the volatile memory <b>304</b>) via bus <b>300</b>. Image data generated by the ISP <b>316</b> or processed image data generated by the GPU <b>318</b> may also be accessed by the user interface module <b>308</b>, where it can be converted into one or more suitable signals that may be sent to a user output device <b>312</b> such as a display.</p><p id="p-0148" num="0176">The communications module <b>314</b> includes circuitry, antennas, sensors, and any other suitable or desired technology that facilitates transmitting or receiving data (e.g., within a network) through one or more wired links (e.g., via Ethernet, USB, FireWire, etc.), or one or more wireless links (e.g., configured according to any standard or otherwise desired or suitable wireless protocols or techniques such as Bluetooth, Bluetooth Low Energy, WiFi, WiMAX, GSM, CDMA, EDGE, cellular <b>3</b>G or LTE, Li-Fi (e.g., for IR- or visible-light communication), sonic or ultrasonic communication, etc.), or the like or any combination thereof. In one embodiment, the communications module <b>314</b> may include one or more microprocessors, digital signal processors or other microcontrollers, programmable logic devices, or the like or combination thereof. Optionally, the communications module <b>314</b> includes cache or other local memory device (e.g., volatile memory, non-volatile memory or a combination thereof), DMA channels, one or more input buffers, one or more output buffers, or the like or combination thereof. In some embodiments, the communications module <b>314</b> includes a baseband processor (e.g., that performs signal processing and implements real-time radio transmission operations for the electronic device).</p><p id="p-0149" num="0177">Also connected to the bus <b>300</b> is a sensor interface module <b>330</b> communicatively coupled to one or more sensors <b>333</b>. As noted, device <b>210</b> can comprise one or more cameras.</p><p id="p-0150" num="0178">Moreover, it can include a scale for weighing items (such as in a scale used to weigh items at a point of sale terminal). Although separately illustrated in <figref idref="DRAWINGS">FIG. <b>21</b></figref>, any camera <b>320</b> can also be considered a sensor <b>333</b>. Generally, a sensor <b>333</b> generates one or more signals (typically, electrical signals) in the presence of some sort of stimulus (e.g., light, sound, moisture, gravitational field, magnetic field, electric field, etc.), in response to a change in applied stimulus, or the like or any combination thereof. In one embodiment, all sensors <b>333</b> coupled to the sensor interface module <b>330</b> are an integral part of device <b>210</b>; however, in alternate embodiments, one or more of the sensors may be physically separate devices communicatively coupled to the electronic device (e.g., via the communications module <b>314</b>). To the extent that any sensor <b>333</b> can function to sense user input, then such sensor <b>333</b> can also be considered a user input device <b>310</b>.</p><p id="p-0151" num="0179">The sensor interface module <b>330</b> is configured to activate, deactivate or otherwise control an operation (e.g., sampling rate, sampling range, etc.) of one or more sensors <b>333</b> (e.g., in accordance with instructions stored internally, or externally in volatile memory <b>304</b> or storage memory <b>306</b>, ROM, etc., in accordance with commands issued by one or more components such as the CPU <b>302</b>, the user interface module <b>308</b>). In one embodiment, sensor interface module <b>330</b> can encode, decode, sample, filter or otherwise process signals generated by one or more of the sensors <b>333</b>. In one example, the sensor interface module <b>330</b> can integrate signals generated by multiple sensors <b>333</b> and optionally process the integrated signal(s). Signals can be routed from the sensor interface module <b>330</b> to one or more of the aforementioned components of the electronic device (e.g., via the bus <b>300</b>). In another embodiment, however, any signal generated by a sensor <b>333</b> can be routed (e.g., to the CPU <b>302</b>), before being processed.</p><p id="p-0152" num="0180">Generally, the sensor interface module <b>330</b> may include one or more microprocessors, digital signal processors or other microcontrollers, programmable logic devices, or the like or any combination thereof. The sensor interface module <b>330</b> may also optionally include cache or other local memory device (e.g., volatile memory, non-volatile memory or a combination thereof), DMA channels, one or more input buffers, one or more output buffers, and any other component facilitating the functions it supports (e.g., as described above).</p><p id="p-0153" num="0181">Other suitable operating environments are detailed in the incorporated-by-reference documents.</p><heading id="h-0006" level="2">Concluding Remarks</heading><p id="p-0154" num="0182">Having described and illustrated the principles of the technology with reference to specific implementations, it will be recognized that the technology can be implemented in many other, different, forms. For example, while the detailed arrangement particularly considered just two different symbologies in the stream of image frames output from the camera and decoded by the detectors, in other embodiment three or more symbologies may be present&#x2014;all of them reconciled and treated as detailed herein.</p><p id="p-0155" num="0183">Similarly, while the emphasis of the detailed description has been on items marked with both a holographic code and a DataBar code, it will be recognized that the same principles are applicable for any pair of machine-readable codes found on the same item, including codes that are not disparate in form, yet convey different but semantically equivalent payload data.</p><p id="p-0156" num="0184">While repeated reference was made to a 150 millisecond window interval, it will be understood that this is an arbitrary value. Longer or shorter values can naturally be used. A user interface control, such as a software dialog, can be employed to enable a technician to set the desired interval. By setting the interval to zero, the reconciliation function can be effectively disabled.</p><p id="p-0157" num="0185">In some embodiments, each cached payload is stored with a timestamp indicating the current time&#x2014;when the payload was decoded. In other embodiments, each payload is stored with a timestamp indicating a time in the future after which the cache entry will be stale, i.e., the time the payload was decoded plus 150 milliseconds. The processes dependent on such timing can be adapted to whichever choice of data is stored in a particular embodiment.</p><p id="p-0158" num="0186">In the detailed embodiment, the cache stores the raw payloads provided from the detectors <b>83</b>. In other embodiment, these payloads can be varied, e.g., by &#x201c;promoting&#x201d; the decoded GTINs to 14 digits, with a &#x201c;01&#x201d; Application Identifier prefix, and caching the promoted counterparts. Similarly, the payloads can be parsed and stored in parsed form, avoiding the possible need to parse some stored payloads multiple times during operation.</p><p id="p-0159" num="0187">While the preferred embodiment does not cache every payload that is decoded (but instead caches every payload that is output from the reconciliation module), this is not essential. Every payload that is decoded can be cached as well.</p><p id="p-0160" num="0188">When encountering a second payload that is semantically-equivalent to an earlier payload, the detailed arrangement outputs the earlier payload a second time. If the first payload was a Digimarc Barcode indicia payload, and the second was a DataBar payload, the Digimarc Barcode indicia payload is output twice. If the first payload was a DataBar payload and the second was a Digimarc Barcode payload indicia, the DataBar payload is output twice. But in other implementations, other conventions can be used. For example, all payloads may be converted to a common standard. If the standard includes an Application Identifier (e.g., for weight) that is missing in a decoded payload, the converted payload includes a zero in that field. If the standard omits an Application Identifier (e.g., for batch number) that is included in a decoded payload, the converted payload simply does not express that Application Identifier. Payloads of various composition are thus converted into a common standard.</p><p id="p-0161" num="0189">In the detailed embodiment, the cache includes context data indicating the data carrier from which each output payload was decoded (e.g., DataBar code, Digimarc BarCode indicia, DataMatrix code, QR code, UPC-A, etc.). In other embodiments, context data other than, or in addition to, the data carrier type can be cached. For example, the cache entry for each payload can specify the camera that captured the image from which the data carrier was decoded (e.g., vertical tower or horizontal platen in a biopic scanner), or the illumination under which the camera frame was captured (e.g., strobed red light, strobed blue and yellow light, ambient light, etc.), etc.</p><p id="p-0162" num="0190">Different actions may be taken, depending on the context associated with a particular payload. For example, the detailed behavior of changing a second payload to match a first can be employed when the two semantically-equivalent payloads are found in different contexts, e.g., with one decoded from a DataBar code and the other decoded from a Digimarc Barcode indicia. But, if first and second semantically-equivalent payloads are found in the same context (e.g., both decoded from DataBar codes), then such changing of the second payload to match the first may be omitted. In such case the system can conclude that the payloads likely were decoded from first and second physical objects. (For two different printed DataBar codes to have been decoded, two physical items were most likely scanned, as no single item would conveys two different DataBar codes.) In such case, the first payload can be output, followed by the second, different, payload&#x2014;without any change due to semantic equivalence.</p><p id="p-0163" num="0191">The double-read protection module <b>87</b> shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref> can be a stand-alone module in the scanner software, or it can be integrated into the data reconciliation module <b>86</b>. In the latter case, when two semantically equivalent payloads are decoded within the 150 millisecond time window, instead of outputting the first payload twice, only the first payload is output. The second is suppressed. In still other embodiments, the double-read protection module can be included in the point of sale terminal.</p><p id="p-0164" num="0192">In the detailed &#x201c;promoting&#x201d; algorithm of <figref idref="DRAWINGS">FIG. <b>13</b></figref>, only the GTIN (Application Identifier 01) was zero-padded to bring up to the maximum GS1-specified length. In other embodiments, zero-padding can similarly be applied to other element values, e.g., zero-padding any item count element value to 15 digits, etc.</p><p id="p-0165" num="0193">While applicant detailed one particular decoding arrangement for the Digimarc Barcode indicia, other arrangements can naturally be used. On such protocol encodes either a full GTIN-14, or a UPC-E identifier, in 47 bits of the encoded binary data. (As note, if these bits represent a decimal value below 99,999,999,999,999, it is taken to be a GTIN-14. If they represent a larger value, then the excess is taken to be a UPC-E identifier. In both cases, the decimal equivalents are zero-padded on the left to bring up to full length.) The following 49 bits convey a user-defined string&#x2014;with the first of these 49 bits indicating whether the string is to be interpreted as decimal digits or ASCII values. A preamble of 2 bits indicates a sub-type for the protocol.</p><p id="p-0166" num="0194">Another protocol uses a 98-bit binary message to convey a GS1 serialized GTIN (SGTIN). Such a payload can again start with a 2-bit preamble indicating a sub-type (with a value of 00 indicating a GS1 SGTIN-96 type). The next 3 bits represent the GS1 filter value (e.g., with a value of 001 indicating a point of sale trade item). The next 3 bits represent the GS1 partition value (based on the number of digits in the company prefix). Then-follows 44 bits representing the company prefix, an indicator digit, and an item reference. The final 38 bits comprise a serial number. Still another protocol uses a 64-bit binary message to convey a GS1 asset identifier. The first 6 bits indicates a sub-type for the payload. The 7<sup>th </sup>bit is reserved. The next 57 bits present the GS1 Global Individual Asset Identifier, namely a company prefix and an individual asset reference.</p><p id="p-0167" num="0195">Yet another protocol employs 47 bits to encode either a GTIN-14 or a UPC-E, as described earlier.</p><p id="p-0168" num="0196">Naturally, many other protocol arrangements can be used, e.g., drawing from the arrangements just-detailed.</p><p id="p-0169" num="0197">While the preferred embodiment uses modulo-based decoding to extract different AI element values from a binary payload, in other embodiments different Application Identifiers can be associated with pre-defined ranges of bits in the binary payload, in which associated data elements are conveyed.</p><p id="p-0170" num="0198">In the detailed embodiment, semantic equivalence was established when the promoted GTINs of current- and cached-payloads matched, together with element values of any corresponding Application Identifiers that were present in both payloads. In a variant embodiment, stricter criteria for equivalence may be employed. For example, certain AIs and data elements must be present and match between to two payloads being compared, e.g., item weight or expiration date.</p><p id="p-0171" num="0199">The detectors in the illustrated embodiment output full payload strings created by decoding the indicia depicted in the camera data. In another embodiment, each detector acts in response to a call through an application programming interface (API). These APIs allow the calling process to request what particular return data is desired. The full payload string is one option. Another is to return the payload string expanded so that each element value occupies its maximum GS1-specified length. Another is to return particular classes of data. Another is to return one or more specified element value(s), if present. Another is to return just the GTIN&#x2014;either with or without the &#x201c;01&#x201d; Application Identifier preamble. Another is to return tagged XML data segregating and tagging each of the parsed AI fields. Etc.</p><p id="p-0172" num="0200">It will be understood that the term Application Identifier is a GS1 term for a tag that indicates the type of data contained in an immediately-following element value.</p><p id="p-0173" num="0201">To review, in one aspect the present technology comprises a system including first, second and third means. The first means produces a first payload from imagery depicting a machine-readable code of a first type. The second means produces a second payload from imagery depicting a machine-readable code of a second type different than the first type, where the second payload is different than the first payload. The third means reconciles the two different payloads produced by the first and second means.</p><p id="p-0174" num="0202">In one particular arrangement, the first means comprises means for producing a payload from imagery depicting a machine-readable code comprising plural parallel lines or a 2D array of binary square elements, and the second means comprises means for producing a payload from imagery depicting a holographic code. In such an arrangement, the holographic code may comprise a machine-readable code comprising plural spaced-apart dots.</p><p id="p-0175" num="0203">In one particular arrangement, the third means comprises means for detecting semantic equivalence between payloads A<b>0</b> and A<b>1</b> produced by the first and/or second means within a predefined time window, and for outputting two identical data in response. For example, the third means may output two payloads A<b>0</b> in response.</p><p id="p-0176" num="0204">In another aspect the technology comprises a system including first and second means. The first means serves to decode first and second optical codes found on an item, producing first and second payloads. The second means serves to determine that the first and second payloads&#x2014;although different&#x2014;are semantically-equivalent. By so doing, the system can take different actions in response to said first and second payloads. For example, the first payload can trigger entry of the item on a shopper's checkout tally, while the second does not.</p><p id="p-0177" num="0205">Techniques for decoding conventional barcodes are detailed in copending application Ser. No. 15/094,925, filed Apr. 8, 2016 (now U.S. Pat. No. 10,198,648), which is incorporated by reference. Suitable barcode decoders are also known from the open source ZXing (&#x201c;Zebra Crossing&#x201d;) barcode project. The ZXing barcode decoders support 1D product codes (UPC-A, UPC-E, EAN-8 and EAN-13), 1D industrial codes (e.g., Code 39, Codabar, etc.) and 2D codes (e.g., QR Code, Data Matrix, etc.). The ZXing source code can be obtained at github&#x3c;dot&#x3e;com/zxing/zxing/releases.</p><p id="p-0178" num="0206">Labels of the sort shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> are commonly printed in-store (e.g., by deli or bakery departments) using thermal printers&#x2014;often associated with weigh scales. Exemplary thermal printers are detailed in U.S. Pat. Nos. 9,365,055, 7,876,346, 7,502,042, 7,417,656, 7,344,323, and 6,261,009. Direct thermal printers can use cellulosic or polymer media coated with a heat-sensitive dye, as detailed, e.g., in U.S. Pat. Nos. 6,784,906 and 6,759,366.</p><p id="p-0179" num="0207">In addition to the earlier-noted GS1 specification, another GS1 document relevant to the present technology is the &#x201c;GS1 AIDC Fresh Foods Sold at Point-of-Sale Implementation Guide, Release 1.1, Ratified September, 2015.&#x201d;</p><p id="p-0180" num="0208">Additional data relating to point-of-sale scanners, and related issues, are found in U.S. Pat. Nos. 9,922,220 and patent 10,204,253.</p><p id="p-0181" num="0209">This specification has discussed several different embodiments. It should be understood that the methods, elements and concepts detailed in connection with one embodiment can be combined with the methods, elements and concepts detailed in connection with other embodiments. While some such arrangements have been particularly described, some have not&#x2014;due to the number of permutations and combinations. Applicant similarly recognizes and intends that the methods, elements and concepts of this specification can be combined, substituted and interchanged&#x2014;not just among and between themselves, but also with those known from the cited prior art. Moreover, it will be recognized that the detailed technology can be included with other technologies&#x2014;current and upcoming&#x2014;to advantageous effect. Implementation of such combinations is straightforward to the artisan from the teachings provided in this disclosure. While this disclosure has detailed particular ordering of acts and particular combinations of elements, it will be recognized that other contemplated methods may re-order acts (possibly omitting some and adding others), and other contemplated combinations may omit some elements and add others, etc.</p><p id="p-0182" num="0210">Although disclosed as complete systems, sub-combinations of the detailed arrangements are also separately contemplated (e.g., omitting various of the features of a complete system).</p><p id="p-0183" num="0211">While certain aspects of the technology have been described by reference to illustrative methods, it will be recognized that apparatuses configured to perform the acts of such methods are also contemplated as part of Applicant's inventive work. Likewise, other aspects have been described by reference to illustrative apparatus, and the methodology performed by such apparatus is likewise within the scope of the present technology. Still further, tangible computer readable media containing instructions for configuring a processor or other programmable system to perform such methods is also expressly contemplated.</p><p id="p-0184" num="0212">To provide a comprehensive disclosure, while complying with the Patent Act's requirement of conciseness, Applicant incorporates-by-reference each of the documents referenced herein. (Such materials are incorporated in their entireties, even if cited above in connection with specific of their teachings.) These references disclose technologies and teachings that Applicant intends be incorporated into the arrangements detailed herein, and into which the technologies and teachings presently-detailed be incorporated.</p><p id="p-0185" num="0213">In view of the wide variety of embodiments to which the principles and features discussed above can be applied, it should be apparent that the detailed embodiments are illustrative only, and should not be taken as limiting the scope of the invention. Rather, Applicant claims as the invention all such modifications as may come within the scope and spirit of the following claims and equivalents thereof.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-01-25" num="01-25"><claim-text><b>1</b>-<b>25</b>. (canceled)</claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. A checkout system including:<claim-text>one or more cameras, each having an output to provide frames of image data;</claim-text><claim-text>at least first and second different 2D code detectors coupled to receive frames of image data from the one or more cameras, each of said 2D code detectors having an output to provide an output payload including a global trade item number, the first of said 2D code detectors comprising a digital watermark detector;</claim-text><claim-text>the system further including at least one of:<claim-text>(A) a promotion means, for zero padding global trade item number strings as needed so that each of said strings has a predetermined length; and</claim-text><claim-text>(B) an AI prepending means, for prepending &#x201c;01&#x201d; to global trade item number strings that do not already begin with &#x201c;01.&#x201d;</claim-text></claim-text></claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The system of <claim-ref idref="CLM-00026">claim 26</claim-ref> that includes a memory comprising a data cache, the data cache storing output payloads provided by said 2D code detectors, each of said stored output payloads including a global trade item number string, the data cache further storing&#x2014;in association with each of said output payloads in the data cache, associated timestamp data, and associated context data, the associated context data indicating the 2D code detector that provided said output payload in the data cache.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The system of <claim-ref idref="CLM-00027">claim 27</claim-ref> that further includes a clock having a clock output signal, wherein the memory is responsive to the clock output signal to flush data stored in the data cache.</claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The system of <claim-ref idref="CLM-00026">claim 26</claim-ref> that further includes a label filter module that detects different global trade item identifier strings included in output payloads provided by different of said 2D code detectors from image data depicting a single item.</claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The system of <claim-ref idref="CLM-00026">claim 26</claim-ref> that includes said promotion means.</claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. The system of <claim-ref idref="CLM-00030">claim 30</claim-ref> in which said predetermined length is 14 digits.</claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The system of <claim-ref idref="CLM-00030">claim 30</claim-ref> that further includes means for comparing a zero-padded string with global trade item number data stored in a cache to determine a match.</claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The system of <claim-ref idref="CLM-00032">claim 32</claim-ref> in which said means responds to a determination that said zero-padded string matches global trade item number data in said cache by updating a timestamp of said matching global trade item number data stored in said cache.</claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The system of <claim-ref idref="CLM-00032">claim 32</claim-ref> that further includes a double-read protection module having an output coupled to a point of sale terminal, wherein said means responds to a determination that said zero-padded string matches global trade item number data in said cache by outputting said matching global trade item number in said cache to an input of said double-read protection module.</claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. The system of <claim-ref idref="CLM-00030">claim 30</claim-ref> that also includes said AI prepending means.</claim-text></claim><claim id="CLM-00036" num="00036"><claim-text><b>36</b>. The system of <claim-ref idref="CLM-00026">claim 26</claim-ref> that includes said AI prepending means.</claim-text></claim><claim id="CLM-00037" num="00037"><claim-text><b>37</b>. The system of <claim-ref idref="CLM-00036">claim 36</claim-ref> that further includes means for comparing a string to which &#x201c;01&#x201d; has been prepended with global trade item number data stored in a cache to determine a match.</claim-text></claim><claim id="CLM-00038" num="00038"><claim-text><b>38</b>. The system of <claim-ref idref="CLM-00037">claim 37</claim-ref> in which said means responds to a determination that said string to which &#x201c;01&#x201d; has been prepended matches global trade item number data in said cache by updating a timestamp of said matching global trade item number data stored in said cache. P2960-R</claim-text></claim><claim id="CLM-00039" num="00039"><claim-text><b>39</b>. The system of <claim-ref idref="CLM-00037">claim 37</claim-ref> that further includes a double-read protection module having an output coupled to a point of sale terminal, wherein said means responds to a determination that said string to which &#x201c;01&#x201d; has been prepended matches global trade item number data in said cache by outputting said matching global trade item number in said cache to an input of said double-read protection module.</claim-text></claim><claim id="CLM-00040" num="00040"><claim-text><b>40</b>. The system of <claim-ref idref="CLM-00026">claim 26</claim-ref> that further includes means for determining whether an output payload provided from said digital watermark detector is semantically equivalent to an output payload provided from another of said 2D code detectors.</claim-text></claim><claim id="CLM-00041" num="00041"><claim-text><b>41</b>. The system of <claim-ref idref="CLM-00026">claim 26</claim-ref> comprising plural cameras.</claim-text></claim><claim id="CLM-00042" num="00042"><claim-text><b>42</b>. A non-transitory computer readable medium for use with a system, the system including one or more processors, one or more memories, one or more cameras that each has an output to provide frames of image data, and first and second different 2D code detectors coupled to receive frames of image data from the one or more cameras, each of said 2D code detectors having an output to provide an output payload including a global trade item number string, the first of said 2D code detectors comprising a digital watermark detector, said medium storing software instructions configuring the system to perform acts including:<claim-text>processing a global trade item number string included in an output payload provided from the second 2D code detector by one or both of (1) prepending &#x201c;01&#x201d; to said global trade item number string, and (2) zero-padding said global trade item number string to extend a length of said string to a predetermined length; and</claim-text><claim-text>comparing the processed global trade item number string with data stored in said one or more memories.</claim-text></claim-text></claim><claim id="CLM-00043" num="00043"><claim-text><b>43</b>. A checkout method including the acts:<claim-text>receiving frames of image data from one or more cameras;</claim-text><claim-text>applying the frames of image data to at least first and second different 2D code detectors, each of said 2D code detectors having an output to provide an output payload including a global trade item number, the first of said 2D code detectors comprising a digital watermark detector;</claim-text><claim-text>processing a global trade item number string included in an output payload provided from the second 2D code detector by one or both of (1) prepending &#x201c;01&#x201d; to said global trade item number string, and (2) zero-padding said global trade item number string to extend a length of said string to a predetermined length; and</claim-text><claim-text>comparing the processed global trade item number string with data stored in a memory to determine a match, and taking an action based on a result of said comparing.</claim-text></claim-text></claim></claims></us-patent-application>