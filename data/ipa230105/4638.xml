<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004639A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004639</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364697</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>53</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>56</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>53</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>566</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2221</main-group><subgroup>033</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">EARLY EXIT DYNAMIC ANALYSIS OF A VIRTUAL MACHINE</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>Palo Alto Networks, Inc.</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Idrizovic</last-name><first-name>Esmid</first-name><address><city>Trumau</city><country>AT</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Raygoza</last-name><first-name>Daniel</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Jung</last-name><first-name>Robert</first-name><address><city>Albuquerque</city><state>NM</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Hughes</last-name><first-name>Michael S.</first-name><address><city>Davenport</city><state>FL</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Techniques for early exit dynamic analysis of a virtual machine are disclosed. In some embodiments, a system/process/computer program product for early exit dynamic analysis of a virtual machine includes initiating a dynamic analysis of a malware sample by executing the malware sample in a virtual computing environment; monitoring activities of the malware sample during execution of the malware sample in the virtual computing environment; and determining when to exit the dynamic analysis before a predetermined period of time.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="158.41mm" wi="150.28mm" file="US20230004639A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="229.11mm" wi="166.37mm" file="US20230004639A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="118.36mm" wi="118.19mm" file="US20230004639A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="168.57mm" wi="152.32mm" file="US20230004639A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="229.11mm" wi="75.95mm" orientation="landscape" file="US20230004639A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="229.02mm" wi="75.86mm" orientation="landscape" file="US20230004639A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="235.97mm" wi="173.99mm" orientation="landscape" file="US20230004639A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="177.21mm" wi="66.46mm" orientation="landscape" file="US20230004639A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="138.60mm" wi="80.86mm" orientation="landscape" file="US20230004639A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="215.22mm" wi="135.89mm" file="US20230004639A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="227.67mm" wi="144.61mm" file="US20230004639A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="219.37mm" wi="98.64mm" orientation="landscape" file="US20230004639A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="234.70mm" wi="167.72mm" orientation="landscape" file="US20230004639A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="224.71mm" wi="177.04mm" orientation="landscape" file="US20230004639A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="192.28mm" wi="103.63mm" orientation="landscape" file="US20230004639A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading><p id="p-0002" num="0001">Nefarious individuals attempt to compromise computer systems in a variety of ways. As one example, such individuals may embed or otherwise include malicious software (&#x201c;malware&#x201d;) in email attachments and transmit or cause the malware to be transmitted to unsuspecting users. When executed, the malware compromises the victim's computer. Some types of malware attempt to pack or otherwise obfuscate the malicious code to evade detection by firewalls, host security software, and/or virtualized malware analysis. Further, malware authors are using increasingly sophisticated techniques to pack/obfuscate the workings of their malicious software.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0003" num="0002">Various embodiments of the invention are disclosed in the following detailed description and the accompanying drawings.</p><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of an environment in which malware is detected and its harm reduced in accordance with some embodiments.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an embodiment of a data appliance.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example of logical components that can be included in a malware analysis system for performing early exit dynamic analysis of a virtual machine in accordance with some embodiments.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIGS. <b>4</b>A-D</figref> illustrate the inefficient use of computing resources for dynamic analysis performed for a predetermined period of time.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>4</b>E</figref> illustrates a more efficient use of computing resources by performing early exit dynamic analysis of a virtual machine in accordance with some embodiments.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an embodiment of a process for early exit dynamic analysis of a virtual machine.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates another embodiment of a process for early exit dynamic analysis of a virtual machine.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref> illustrates a log of the monitored activities during dynamic analysis of a sample in accordance with some embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>7</b>B</figref> illustrates a log of the monitored activities during dynamic analysis of another sample in accordance with some embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIGS. <b>7</b>C-D</figref> illustrate a log of the monitored activities during dynamic analysis of a sample in accordance with some embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DETAILED DESCRIPTION</heading><p id="p-0014" num="0013">The invention can be implemented in numerous ways, including as a process; an apparatus; a system; a composition of matter; a computer program product embodied on a computer readable storage medium; and/or a processor, such as a processor configured to execute instructions stored on and/or provided by a memory coupled to the processor. In this specification, these implementations, or any other form that the invention may take, may be referred to as techniques. In general, the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise, a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein, the term &#x2018;processor&#x2019; refers to one or more devices, circuits, and/or processing cores configured to process data, such as computer program instructions.</p><p id="p-0015" num="0014">A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments, but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives, modifications, and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity, technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.</p><p id="p-0016" num="0015">Some types of malware attempt to pack or otherwise obfuscate the malicious code to evade detection by firewalls, host security software (e.g., host security software/agents), and/or virtualized malware analysis that is based on static analysis. Unfortunately, malware authors are using increasingly sophisticated techniques to pack/obfuscate the workings of their malicious software. As such, there exists an ongoing need for improved techniques to detect malware using dynamic analysis and prevent its harm.</p><p id="p-0017" num="0016">As an example, the deobfuscated or unpacked binaries (e.g., binary code, also referred to herein as code) typically include the malicious payload that is executed at runtime, which is concealed/kept hidden and only decoded/decompressed and/or decrypted at runtime (e.g., in memory) when needed in an attempt to avoid malware detection with existing malware detection techniques. This obfuscation/packing approach has become common practice for malware authors because such can evade detection of their malicious payloads and/or make such detection significantly more difficult (e.g., if the deobfuscated/unpacked malicious payload is not stored on disk (to evade host security detection) and is not transferred across networks (to evade network security/firewall detection)). As such, new techniques are needed to facilitate efficient and effective detection using improved dynamic analysis of samples (e.g., malware samples, which can include obfuscated or packed malware binary code that can be, for example, encoded/obfuscated, encrypted, compressed, and/or other combinations and approaches can be used by malware authors for obfuscating/packing malware binary code, as well as other forms of malware).</p><p id="p-0018" num="0017">Overview of Techniques for Early Exit Dynamic Analysis of a Virtual Machine</p><p id="p-0019" num="0018">However, performing dynamic analysis of a sample in a virtual computing environment (e.g., using a virtual machine instance (VM)) is typically performed for a fixed period of time (e.g., five minutes or some other fixed period of time). But in many cases the sample may not run or may exit prior to expiration of that predetermined period of time. In such cases, the dynamic analysis is inefficient as computing resources (e.g., CPU, memory, and computing time) are wasted during the remainder of that time period for which there is no further information that can be gleaned during such dynamic analysis of these samples. Accordingly, new techniques are disclosed for determining when we can terminate the dynamic analysis prior to the end of the predetermined period (e.g., perform early exit dynamic analysis of the sample in the virtual computing environment) to provide an effective and efficient detection using improved dynamic analysis of samples in a virtual computing environment.</p><p id="p-0020" num="0019">Dynamic Analysis (DA) in a virtual computing environment (e.g., VM) generally allocates a fixed window of time per sample (e.g., one, five, or ten minutes or some other predetermined period of time). However, as discussed above, the full period of time is often not required to effectively perform the dynamic analysis on the sample. For example, a given sample may not require the full predetermined period of time for performing the dynamic analysis in various cases, such as the following: (1) the sample is broken and as such will not execute in the virtual computing environment; (2) the sample requires external dependencies (e.g., and the virtual computing environment does not have the relevant external dependencies, such as files, etc.); (3) the sample may have unsupported file sub-types; and/or (4) the dynamic analysis may have effectively completed prior to the expiration of the predetermined period of time (e.g., the sample was executed and terminated without performing any other activities that would require further dynamic analysis, such as further described below).</p><p id="p-0021" num="0020">Thus, what is needed are new and improved techniques for performing efficient and effective detection using improved dynamic analysis of samples. However, as discussed above, performing a reliable determination of when a sample has &#x2018;finished&#x2019; is technically challenging.</p><p id="p-0022" num="0021">Accordingly, techniques for early exit dynamic analysis of a virtual machine are disclosed. For example, techniques for early exit dynamic analysis of a virtual machine can be applied to address more efficiently and effectively some of the computer security technological challenges and problems that are associated with performing a dynamic analysis of samples.</p><p id="p-0023" num="0022">In some embodiments, a system/process/computer program product for early exit dynamic analysis of a virtual machine includes initiating a dynamic analysis of a malware sample by executing the malware sample in a virtual computing environment (e.g., execution of the malware sample in an instrumented virtualized execution environment, such as a virtual machine (VM) instance, which can be allowed to execute in the instrumented virtualized execution environment for one, five, ten minutes, or some other period of time, or until an early exit is performed, such as described herein); monitoring activities of the malware sample (e.g., launching a new process; writing, copying, or moving a file; changing a registry setting; modifying a system service; and/or scheduling a task) during execution of the malware sample in the virtual computing environment; and determining when to exit the dynamic analysis before a predetermined period of time. For example, an early exit from the dynamic analysis before a predetermined period of time can be performed based on a termination of a main process associated with executing the malware sample in the virtual computing environment. The output of the monitored activities of the malware sample during execution of the malware sample (e.g., generated as a dynamic analysis (DA) report) in the virtual computing environment is also automatically analyzed to determine whether the malware sample is malicious or benign.</p><p id="p-0024" num="0023">In some embodiments, a system/process/computer program product for early exit dynamic analysis of a virtual machine further includes monitoring memory during execution of the malware sample in the virtual computing environment.</p><p id="p-0025" num="0024">In some embodiments, a system/process/computer program product for early exit dynamic analysis of a virtual machine includes monitoring for launching a new process during execution of the malware sample in the virtual computing environment.</p><p id="p-0026" num="0025">In some embodiments, a system/process/computer program product for early exit dynamic analysis of a virtual machine includes monitoring for writing, copying, or moving a file during execution of the malware sample in the virtual computing environment.</p><p id="p-0027" num="0026">In some embodiments, a system/process/computer program product for early exit dynamic analysis of a virtual machine includes monitoring for changing a registry setting during execution of the malware sample in the virtual computing environment.</p><p id="p-0028" num="0027">In some embodiments, a system/process/computer program product for early exit dynamic analysis of a virtual machine includes monitoring for modifying a system service during execution of the malware sample in the virtual computing environment.</p><p id="p-0029" num="0028">In some embodiments, a system/process/computer program product for early exit dynamic analysis of a virtual machine includes monitoring for scheduling a task during execution of the malware sample in the virtual computing environment.</p><p id="p-0030" num="0029">In some embodiments, a system/process/computer program product for early exit dynamic analysis of a virtual machine includes performing an early exit of the dynamic analysis of the malware sample before the predetermined period of time based on monitoring of the malware sample during execution in the virtual computing environment (e.g., to determine that the malware sample has completed execution and no further dynamic analysis is to be performed to determine whether the malware sample is malicious or benign).</p><p id="p-0031" num="0030">In some embodiments, a system/process/computer program product for early exit dynamic analysis of a virtual machine includes performing an early exit of the dynamic analysis of the malware sample before the predetermined period of time based on monitoring of the malware sample during execution in the virtual computing environment; and determining that the malware sample is benign.</p><p id="p-0032" num="0031">In some embodiments, a system/process/computer program product for early exit dynamic analysis of a virtual machine includes performing an early exit of the dynamic analysis of the malware sample before the predetermined period of time based on monitoring of the malware sample during execution in the virtual computing environment; and determining that the malware sample is malicious.</p><p id="p-0033" num="0032">In an example implementation, the Hypervisor DA (HvDA) uses full-system Virtual Machine Introspection (VMI) (e.g., implemented using the above-described early exit component) to continuously monitor the guest operating system of the virtual machine and target sample. For example, the HvDA monitors the context and state of each of the following: (1) processes; (2) files written, copied, or moved; (3) registry changes; (4) new or modified system services; (5) scheduled tasks; and (6) files added to auto-start after next reboot.</p><p id="p-0034" num="0033">As such, the disclosed techniques for early exit dynamic analysis of a virtual computing environment can include detecting these and other activities in the virtual computing environment. This information that is collected based on these monitored activities can then be used to determine when an execution of a sample is complete (e.g., full detonation is achieved such that no additional time would plausibly allow for observation of any additional relevant activity) in the virtual machine and can then perform an early exit of the virtual machine, such as will be further described below.</p><p id="p-0035" num="0034">An early exit dynamic analysis can result in a verdict determination for the sample as either benign or malware. In some cases, a deobfuscation analysis engine, such as further described below, automatically generates a malware signature based on a static analysis of the identified executable associated with the unpacked malware binary (e.g., using pattern matching techniques, such as provided by the YARA tool or other commercially available tools/open source solutions).</p><p id="p-0036" num="0035">The automatically generated signatures can be distributed to network security devices (e.g., firewalls), host-based security solutions (e.g., host-based security software/agents), and/or security services to facilitate identification of such malware using these signatures.</p><p id="p-0037" num="0036">Also, malicious payloads can be automatically identified, such as flagging malware families via static and behavior detection rules (e.g., for packed malware samples, these matching rules can be applied directly on the deobfuscated payloads).</p><p id="p-0038" num="0037">In some cases, deobfuscated payloads can be resubmitted for static and dynamic analysis of executables from these changed pages in memory. This may allow for identification of the malware based on dynamic/behavior signatures using the dynamic engine such as further described below.</p><p id="p-0039" num="0038">Further, the disclosed techniques can be used to automatically generate additional indicators for deobfuscated payloads that have not been easily accessible before. This additional data from processing automatically deobfuscated payloads could be accessible to security/malware analysts as well as customers (e.g., via the AutoFocus' contextual threat intelligence service provided by Palo Alto Networks&#xae; which can be used to accelerate analysis, correlation, and prevention workflows, which can facilitate security detection/response to, for example, unique, targeted attacks which are automatically prioritized with full context, allowing security teams to respond to critical attacks faster, without additional IT security resources).</p><p id="p-0040" num="0039">The disclosed techniques for early exit dynamic analysis of a virtual machine can reduce the time and computing resources used for performing dynamic analysis of samples, the dynamic analysis using a virtual machine can often be terminated earlier than a default/predetermined period of time. As such, the saved time and compute resources can then be allocated for performing dynamic analysis of other samples (e.g., a greater number of samples can then be scanned per VM instance and per server). This efficiency improvement is significant for computer security entities that typically perform dynamic analysis on thousands to millions of samples per week.</p><p id="p-0041" num="0040">Moreover, the disclosed techniques for providing for an early exit of the dynamic analysis of a sample on a virtual machine also can provide a verdict determination of whether the sample is malware or benign in less time, which is beneficial to users/customers of a computer security service.</p><p id="p-0042" num="0041">Accordingly, various techniques for early exit dynamic analysis of a virtual machine are disclosed. As will be apparent to one skilled in the art in view of the various techniques and embodiments described herein, the various techniques described herein for providing early exit dynamic analysis of a virtual machine can be performed using cloud-based security solutions, network device-based security solutions, host-based/agent-based security solutions, virtualized/software-defined networking (SDN)-based security solutions, and/or various combinations thereof, such as further described below with respect to various embodiments.</p><p id="p-0043" num="0042">System Environment for Early Exit Dynamic Analysis of a Virtual Machine</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of an environment in which malware is detected and its harm reduced in accordance with some embodiments. In the example shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a malicious individual (using system <b>120</b>) has created malware <b>130</b>. The malicious individual hopes that a client device, such as client device <b>104</b>, will execute a copy of malware <b>130</b>, compromising the client device, and causing the client device to then be used for potentially nefarious purposes. For example, the compromised client device can then be instructed to perform tasks (e.g., cryptocurrency mining, participating in denial of service attacks, and/or utilized for lateral movement/advanced persistent threats) and to report information to an external entity, such as command and control (C&#x26;C) server <b>150</b>, as well as to receive instructions from C&#x26;C server <b>150</b>, as applicable.</p><p id="p-0045" num="0044">Returning to the example shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, suppose client devices <b>104</b>-<b>108</b> are a laptop computer, a desktop computer, and a tablet (respectively) present in an enterprise network <b>110</b> (belonging to the &#x201c;Acme Company&#x201d;). Data appliance <b>102</b> is configured to enforce policies regarding communications between clients, such as clients <b>104</b> and <b>106</b>, and nodes outside of enterprise network <b>110</b> (e.g., reachable via external network <b>118</b>, such as the Internet). Examples of such policies include ones governing traffic shaping, quality of service, and routing of traffic. Other examples of policies include security policies such as ones requiring the scanning for threats in incoming (and/or outgoing) email attachments, web site downloads, files exchanged through instant messaging programs, and/or other file transfers. In some embodiments, appliance <b>102</b> is also configured to enforce policies with respect to traffic that stays within enterprise network <b>110</b>.</p><p id="p-0046" num="0045">Appliance <b>102</b> can take a variety of forms. For example, appliance <b>102</b> can comprise a dedicated device or set of devices. The functionality provided by appliance <b>102</b> can also be integrated into or executed as software on a general purpose computer, a computer server, a gateway, and/or a network/routing device. In some embodiments, services provided by data appliance <b>102</b> are instead (or in addition) provided to client <b>104</b> by software (e.g., host security software or an agent) executing on client <b>104</b>.</p><p id="p-0047" num="0046">Whenever appliance <b>102</b> is described as performing a task, a single component, a subset of components, or all components of appliance <b>102</b> may cooperate to perform the task. Similarly, whenever a component of appliance <b>102</b> is described as performing a task, a subcomponent may perform the task and/or the component may perform the task in conjunction with other components. In various embodiments, portions of appliance <b>102</b> are provided by one or more third parties. Depending on factors such as the amount of computing resources available to appliance <b>102</b>, various logical components and/or features of appliance <b>102</b> may be omitted and the techniques described herein adapted accordingly. Similarly, additional logical components/features can be included in embodiments of system <b>102</b> as applicable.</p><p id="p-0048" num="0047">As will be described in more detail below, appliance <b>102</b> can be configured to work in cooperation with one or more virtual machine servers (<b>112</b>, <b>124</b>) to perform malware analysis/prevention. As one example, data appliance <b>102</b> can be configured to provide a copy of malware <b>130</b> to one or more of the virtual machine servers for real-time analysis, in which the malware is executed in an instrumented virtual environment (e.g., where various user level hooks and/or kernel level hooks in an execution environment emulated in a virtual environment facilitate the monitoring of various program behaviors during execution in the virtual environment, such as performing efficient program deobfuscation through system API instrumentation as described herein). As another example, security service <b>122</b> (e.g., a cloud-based security service) can provide a list of signatures of known-malicious files (e.g., pattern-based signatures, behavior signatures, and/or other malware signatures) to appliance <b>102</b> as part of a subscription, which can be stored in a data plane of data appliance <b>102</b> as shown at <b>134</b>. Those signatures can be generated by security service <b>122</b> in conjunction with the techniques for efficient program deobfuscation through system API instrumentation as described herein. As yet another example, and as will be described in more detail below, results of analysis performed by the virtual machine servers (e.g., VM server <b>112</b> executing VM instances <b>114</b> and <b>116</b> and/or VM server <b>124</b> executing VM instances <b>126</b> and <b>128</b>) can be used to generate those signatures in conjunction with the techniques for efficient program deobfuscation through system API instrumentation as described herein.</p><p id="p-0049" num="0048">An example of a virtual machine server is a physical machine comprising commercially available server-class hardware (e.g., a multi-core processor, 64+ Gigabytes of RAM, and one or more Gigabit network interface adapters) that runs commercially available virtualization software, such as VMware ESXi, Citrix XenServer, Kernel Based Virtual Machine (KVM), or Microsoft Hyper-V. The virtual machine server can be configured to run a commercially available hypervisor (without customizations) or a customized hypervisor (whether as a modified version of a commercially-available hypervisor, or a custom-built hypervisor).</p><p id="p-0050" num="0049">Returning to the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the virtual machine servers can be separate from, but in communication with, data appliance <b>102</b>, as shown. A virtual machine server can also perform some or all of the functions of data appliance <b>102</b> (or the subset of functions described herein as pertaining to the performing of efficient program deobfuscation through system API instrumentation), and a separate data appliance <b>102</b> omitted as applicable. Further, a virtual machine server can be under the control of the same entity that administers data appliance <b>102</b> (e.g., virtual machine server <b>112</b>); the virtual machine server can also be provided by a third party (e.g., virtual machine server <b>124</b>, which can be configured to provide services to appliance <b>102</b> via third party service <b>122</b>). In some embodiments, data appliance <b>102</b> is configured to use one or the other of virtual machine servers <b>112</b> and <b>124</b> for malware analysis. In other embodiments, data appliance <b>102</b> is configured to use the services of both servers (and/or additional servers not pictured). Further, in various embodiments, multiple virtual machine servers are present within the same platform. For example, security service <b>122</b> (e.g., a commercially available security service, such as the WildFire&#x2122; cloud-based malware analysis environment provided by Palo Alto Networks&#xae;) can make use of multiple virtual machine servers (in addition to virtual machine server <b>124</b>). In yet additional embodiments, at least some virtual machine servers are provided by an entity that is different from the operator of security service <b>122</b>. For example, security service <b>122</b> could be operated by a computer security company which makes use of third party cloud computing services, such as Amazon Web Services (AWS), to provide at least some of the computer security company's virtual machine servers. Finally, while examples are described herein as making use of virtual machine servers (e.g., to allow for a single host system executing multiple guest systems at once), the techniques described herein, and in particular, the activities described as being performed inside a guest system, can also be performed using non-virtualized hardware (e.g., to thwart anti-virtual-machine techniques employed by malware).</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an embodiment of a data appliance. The example shown is a representation of physical components that are included in appliance <b>102</b>, in some embodiments. Specifically, appliance <b>102</b> includes a high performance multi-core CPU <b>202</b> and RAM <b>204</b>. Appliance <b>102</b> also includes a storage <b>210</b> (such as one or more hard disks), which is used to store policy and other configuration information, as well as signatures (e.g., pattern-based signatures, behavior signatures, and/or other malware signatures, which can be generated using the techniques for efficient program deobfuscation through system API instrumentation as described herein). Data appliance <b>102</b> can also include one or more optional hardware accelerators. For example, data appliance <b>102</b> can include a cryptographic engine <b>206</b> configured to perform encryption and decryption operations, and one or more FPGAs <b>208</b> configured to perform matching, act as network processors, and/or perform other tasks.</p><p id="p-0052" num="0051">Using Virtual Machines to Analyze Files</p><p id="p-0053" num="0052">A virtual machine (VM) can be used to perform behavior profiling (e.g., in a VM sandbox environment) using various heuristic-based analysis techniques that can be performed in real-time during a file transfer (e.g., during an active file/attachment download) and/or on files previously collected (e.g., a collection of files submitted for batch analysis). Documents, executables, and other forms of potentially malicious software (e.g., to be evaluated) are referred to herein as &#x201c;malware samples&#x201d; or simply as &#x201c;samples.&#x201d;</p><p id="p-0054" num="0053">Returning to the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, suppose a malicious user of system <b>120</b> sends an email message to a user of client <b>104</b> that includes a malicious attachment. The attachment may be an executable (e.g., having a .exe extension) and may also be a document (e.g., a .doc or .pdf file). The message is received by data appliance <b>102</b>, which determines whether a signature for the attachment is present on data appliance <b>102</b>. A signature, if present, can indicate that the attachment is known to be safe, and can also indicate that the attachment is known to be malicious, in accordance with various embodiments. If no signature for the attachment is found, data appliance <b>102</b> is configured to provide the attachment to a virtual machine server, such as virtual machine server <b>112</b> or <b>124</b>, for analysis.</p><p id="p-0055" num="0054">Virtual machine server <b>112</b> is configured to perform static analysis of samples, and also to perform dynamic analysis of samples, in which the samples are executed (or opened in an application, as applicable) in one or more virtual machine instances <b>114</b>-<b>116</b>. The virtual machine instances may all execute the same operating system (e.g., Microsoft Windows&#xae; XP SP 3, Microsoft Windows&#xae; 7, and Microsoft Windows&#xae; 10), may execute different operating systems (e.g., Apple Mac&#xae; OS or iOS platforms, Google Android&#xae; OS platforms, or Linux OS platforms), and/or may collectively execute combinations of operating systems (and/or versions thereof) (e.g., with VM instance <b>116</b> emulating an Android operating system). In some embodiments, the VM image(s) chosen to analyze the attachment are selected to match the operating system of the intended recipient of the attachment being analyzed (e.g., where the operating system of client <b>104</b> is Microsoft Windows XP SP 2). Observed behaviors resulting from executing/opening the attachment (such as changes to certain platform, software, registry settings, any network connection attempts made, or memory in which changes to memory can be monitored for implementing efficient program deobfuscation through system API instrumentation) are logged and analyzed for indications that the attachment is malicious.</p><p id="p-0056" num="0055">In some embodiments, the dynamic analysis is performed in several stages as similarly described above and further described below. Specifically, the dynamic analysis can be performed in several stages to monitor changes to memory for implementing efficient program deobfuscation through system API instrumentation as described above and further described below. In addition, the dynamic analysis can be performed to monitor activities during dynamic analysis to determine whether to perform an early exit dynamic analysis of the virtual machine as will also be further described below.</p><p id="p-0057" num="0056">In some embodiments log analysis (e.g., of results of static/dynamic analysis) is performed by the VM server (e.g., VM server <b>112</b>). In other embodiments, the analysis is performed at least in part by appliance <b>102</b>. The malware analysis and enforcement functionality illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as being provided by data appliance <b>102</b> and VM server <b>112</b> is also referred to herein as being provided by malware analysis system <b>132</b>. As explained above, portions of malware analysis system <b>132</b> may be provided by multiple distinct devices, but may also be provided on a single platform, as applicable. For example, the functionality described herein (or portions thereof) as being provided by malware analysis system <b>132</b> can also be provided by security service <b>122</b> using VM server <b>124</b>.</p><p id="p-0058" num="0057">If the attachment is determined to be malicious, appliance <b>102</b> can automatically block the file download based on the analysis result. Further, a signature can be generated and distributed (e.g., to other data appliances, host security software/agents, and/or to cloud security service <b>122</b>) to automatically block future file transfer requests to download the file determined to be malicious.</p><p id="p-0059" num="0058">Logical Components for Performing Early Exit Dynamic Analysis of a Virtual Machine</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example of logical components that can be included in a malware analysis system for performing early exit dynamic analysis of a virtual machine in accordance with some embodiments. System <b>300</b> can be implemented using a single physical device. System <b>300</b> can also be implemented, collectively, across multiple distinct devices. For example, when data appliance <b>102</b> works in combination with virtual machine server <b>112</b>, malware analysis system <b>132</b> is an embodiment of system <b>300</b>. As another example, the functionality of system <b>300</b> can be provided by security service <b>122</b>. As explained above, cloud security service <b>122</b> can include a single (<b>124</b>), or multiple virtual machine servers.</p><p id="p-0061" num="0060">As mentioned above, a given piece of candidate malware (e.g., a potentially malicious document/file/etc.) can be received for analysis in a variety of ways. In the following discussion, malware <b>130</b> (intended for a client such as client <b>104</b> by a malware author) is received by data appliance/platform <b>102</b> and a check is made (e.g., against information stored in storage <b>210</b>) to determine whether malware <b>130</b> matches any signatures of known malware. Suppose in the following example that no such signature is present on platform <b>102</b>, and also that no such signature is present on cloud security service <b>122</b> (where platform <b>102</b> is configured to check for the existence of a signature on security service <b>122</b>). Platform <b>102</b> sends a copy of malware <b>130</b> to security service <b>122</b> for further analysis (e.g., before allowing it to be delivered to client device <b>104</b>). In various embodiments, when a new piece of candidate malware is received for analysis (e.g., an existing signature associated with the file is not present at security service <b>122</b>), it is added to a processing queue <b>302</b>.</p><p id="p-0062" num="0061">Coordinator <b>304</b> monitors queue <b>302</b>, and as resources (e.g., a static analysis worker) become available, coordinator <b>304</b> fetches a piece of potential malware for analysis from queue <b>302</b> for processing (e.g., fetches a copy of malware <b>130</b>). In particular, after coordinator <b>304</b> initially determines whether the sample has previously been analyzed by checking with a deduplicator component shown at <b>318</b>, and if not, then coordinator <b>304</b> first provides the application to static analysis engine <b>306</b> for static analysis. In some embodiments, one or more static analysis engines are included within system <b>300</b>, where system <b>300</b> is a single device. In other embodiments, static analysis is performed by a separate static analysis server that includes a plurality of workers (i.e., a plurality of instances of static analysis engine <b>306</b>). In yet other embodiments, static analysis is omitted, or provided by a third party, as applicable.</p><p id="p-0063" num="0062">The static analysis engine obtains general information about the candidate malware and includes it (along with heuristic and other information, as applicable) in a static analysis (SA) report <b>308</b>. The report can be created by the static analysis engine, or by coordinator <b>304</b> (or by another appropriate component) which can be configured to receive the information from static analysis engine <b>306</b>. In some embodiments, the collected information is stored in one or more database records for the candidate malware (e.g., in a database <b>316</b>), instead of or in addition to a separate static analysis report <b>308</b> being created (i.e., portions of the database record form the static analysis report <b>308</b>).</p><p id="p-0064" num="0063">Once the static analysis is complete, coordinator <b>304</b> locates an available dynamic analysis engine <b>310</b> to perform dynamic analysis on the candidate malware. As with static analysis engine <b>306</b>, system <b>300</b> can include one or more dynamic analysis engines directly. In other embodiments, dynamic analysis is performed by a separate dynamic analysis server that includes a plurality of workers (i.e., a plurality of instances of dynamic analysis engine <b>310</b>).</p><p id="p-0065" num="0064">Each dynamic analysis engine manages a virtual machine (VM) instance. As also shown, each dynamic analysis engine includes an early exit component <b>340</b>. In an example implementation, an early exit component for a virtual computing environment (e.g., VM instance) is provided to facilitate monitoring of the sample during a dynamic analysis to determine if and when to perform an early exit of the dynamic analysis on the virtual computing environment. In this example, the virtual computing environment is implemented as a virtual machine (e.g., VM instance) using a hypervisor dynamic analysis (DA) sandbox. The early exit component can be implemented as a plugin to the hypervisor DA sandbox. The plugin can be written in a high-level programming language, such as Python or another programming language. The early exit component can be executed outside of the guest OS of the VM instance to monitor the activities of the sample during execution using the hypervisor DA sandbox.</p><p id="p-0066" num="0065">For example, the early exit component (<b>340</b>) can detect if a sample does not run or if it has been terminated. The early exit component can also detect if the sample has created any new Windows scheduled-tasks, if all monitored processes are terminated, and if the sample has created a new executable file which we have to wait for before we can exit the analysis earlier. The early exit component can monitor various other activities during the dynamic analysis as further described below. Based on these monitored activities, the early exit component can determine if and when to terminate the dynamic analysis (e.g., whether or not to perform an early exit of the dynamic analysis of the sample in the virtual computing environment, that is, whether we should wait for the full analysis time/predetermined period of time, or if we should exit the dynamic analysis prior to expiration of the predetermined period of time). In this example implementation, each time a process termination is detected using the early exit component, whether or not to perform an early exit can be determined as will also be further described below.</p><p id="p-0067" num="0066">Below are a few examples of the activities that are monitored using the early exit component to facilitate determining whether to perform an early exit of the dynamic analysis of a sample in the virtual computing environment.</p><p id="p-0068" num="0067">Scheduled Tasks</p><p id="p-0069" num="0068">The early exit component can detect scheduled tasks during dynamic analysis of the sample in the virtualized computing environment. For example, if a sample creates a dynamically linked Library (DLL) inside a Microsoft Windows OS directory and afterwards creates a scheduled-task to load that DLL (e.g., in the next two minutes or some other scheduled delay), then the early exit component can determine to wait for the scheduled task to be started and to load the DLL. In this example, after that scheduled task has been created and the DLL has been loaded, the early exit component can determine at that time to perform an early exit of the dynamic analysis using the virtual machine.</p><p id="p-0070" num="0069">Import of Unknown Libraries</p><p id="p-0071" num="0070">The early exit component can detect imports of (unknown) libraries during dynamic analysis of the sample in the virtualized computing environment. For example, if a sample attempts to call additional library(ies) (e.g., requires import of unknown libraries), then the sample will fail to execute in the virtual machine, because the Windows PE loader cannot load the requested additional library(ies). As a result, in this example, the early exit component can determine at that time to perform an early exit of the dynamic analysis using the virtual machine.</p><p id="p-0072" num="0071">Injection of the Executable into Another Process</p><p id="p-0073" num="0072">The early exit component can detect process injections during dynamic analysis of the sample in the virtualized computing environment. For example, if one or more process injections are detected, then the early exit component continues to monitor until the last injected process terminates.</p><p id="p-0074" num="0073">File Activities</p><p id="p-0075" num="0074">The early exit component can detect file activities during dynamic analysis of the sample in the virtualized computing environment. For example, if the early exit component detects any files were stored/copied/modified, then the early exit component will continue to monitor (e.g., to detect if any of those files is executed inside the guest VM) before exiting the analysis early.</p><p id="p-0076" num="0075">Launching of a Child Process(es)</p><p id="p-0077" num="0076">The early exit component can detect a launch of a child process(es). For example, if one or more child process launches are detected, then the early exit component continues to monitor until the last child process terminates.</p><p id="p-0078" num="0077">Additional Monitored Activities</p><p id="p-0079" num="0078">In this example implementation, the Hypervisor DA (HvDA) uses full-system Virtual Machine Introspection (VMI) (e.g., implemented using the above-described early exit component) to continuously monitor the guest operating system of the virtual machine and target sample. For example, the HvDA monitors the context and state of each of the following: (1) processes; (2) files written, copied, or moved; (3) registry changes; (4) new or modified system services; (5) scheduled tasks; and (6) files added to auto-start after next reboot.</p><p id="p-0080" num="0079">Specifically, in this example implementation, when a sample is being analyzed, the filename is generated before performing the dynamic analysis, and then the process associated with the filename (e.g., the process that has this filename) is monitored. In this instrumented VM environment (e.g., sandbox), various hooks are installed in the operating system to monitor various activities, such as process creation/termination, file activities, etc. For example, for monitoring for creation of and termination of processes, we are hooking inside the Windows kernel at the function nt! ViCreateProcessCallback to monitor and collect (e.g., log) information on such process creation/termination events. As such, this information can be monitored and collected to facilitate determining when sample has been executed or terminated, as well as whether the process has launched any child processes by checking its parent process ID, such as similarly described herein. For monitoring the created or copied files, we hook inside the monitored process and at the regular Windows file APIs, such as NtCreateFile, MoveFile, and CopyFile. At such hook callbacks, we verify that the calls were successful and then save the created file names (e.g., saving files that may be executable, such as files on a Microsoft Windows OS environment that have an executable extension, such as one of the following example extensions: exe, dll, sys, etc.). The early exit component can then check if all processes (e.g., child processes, dropped files, etc.) have been terminated that were also monitored by this instrumented VM environment and determine whether there is anything else to wait on for monitoring (e.g., a dropped executable file has not yet been executed).</p><p id="p-0081" num="0080">As such, the disclosed techniques for early exit dynamic analysis of a virtual computing environment can include detecting these and other activities in the virtual computing environment. This information that is collected based on these monitored activities can then be used to determine when an execution of a sample is complete (e.g., full detonation is achieved such that no additional time would plausibly allow for observation of any additional relevant activity) in the virtual machine and can then perform an early exit of the virtual machine, such as will be further described herein.</p><p id="p-0082" num="0081">In some embodiments, results of static analysis (e.g., performed by static analysis engine <b>306</b>), whether in report form (<b>308</b>) and/or as stored, such as in database <b>316</b>, are provided as input to a dynamic analysis engine <b>310</b>. For example, the static analysis report information can be used to help select/customize the virtual machine instance used by dynamic analysis engine <b>310</b> (e.g., Microsoft Windows XP Service Pack 3 vs. Windows 7 Service Pack 2). Where multiple virtual machine instances are executed at the same time, a single dynamic analysis engine can manage all of the instances, or multiple dynamic analysis engines can be used (e.g., with each managing its own virtual machine instance), as applicable. In some embodiments, the collected information is stored in one or more database records for the candidate malware (e.g., in database <b>316</b>), instead of or in addition to a separate dynamic analysis (DA) report <b>312</b> being created (i.e., portions of the database record form the dynamic analysis report <b>312</b>).</p><p id="p-0083" num="0082">As also shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, malware analysis system <b>300</b> includes an unpack/snapshot engine(s) <b>320</b>, a page cache <b>326</b>, and a deobfuscation analysis engine(s) <b>330</b> that perform various functions for implementing efficient program deobfuscation through system API instrumentation in accordance with some embodiments. For example, during a dynamic analysis phase, dynamic malware analysis engine(s) <b>310</b> can utilize unpack/snapshot engine <b>320</b> to automatically unpack and selectively snapshot process pages in memory during emulation of the malware sample as similarly described herein. The snapshotted memory pages can be stored in page cache <b>326</b>. The output of the dynamic analysis including the efficient program deobfuscation through system API instrumentation can be provided as input to deobfuscation analysis engine(s) <b>330</b> for reassembling the cached memory pages, analyzing of the reassembled cached memory pages, and generating a signature based on a static analysis of the reassembled cached memory pages (e.g., in an example implementation, the static analysis can be performed using static analysis engine(s) <b>306</b>). The generated signature can be added to database <b>316</b>.</p><p id="p-0084" num="0083">In various embodiments, the initial static analysis of candidate malware is omitted or is performed by a separate entity, as applicable. As one example, traditional static and/or dynamic analysis may be performed on files by a first entity. Once it is determined (e.g., by the first entity) that a given file is malicious, and more particularly, that the file is (or is potentially) making use of obfuscation or packing to attempt to conceal malware binaries, then the file can be provided to a second entity (e.g., the operator of security service <b>122</b>) specifically for additional analysis with respect to the obfuscation or packing to attempt to conceal malware binaries (e.g., by a dynamic analysis engine <b>310</b> in coordination with unpack/snapshot engine <b>320</b>, page cache <b>326</b>, and deobfuscation analysis engine <b>330</b>).</p><p id="p-0085" num="0084"><figref idref="DRAWINGS">FIGS. <b>4</b>A-D</figref> illustrate the inefficient use of computing resources for dynamic analysis performed for a predetermined period of time.</p><p id="p-0086" num="0085">Referring to <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, OS booting of the VM instance is shown at <b>402</b>, then a sample running in the VM instance is shown at <b>404</b>. As shown at time bar <b>400</b>, only two minutes of time was required for a dynamic analysis of this first sample in the VM instance. As a result, the wasted time of this VM instance and other computing resources (e.g., CPU and memory of a server executing the VM instance) is shown at <b>406</b>, which is the remainder of a five minute predetermined period of time allocated for such dynamic analysis (i.e., about three minutes was wasted during this example dynamic analysis).</p><p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> shows a dynamic analysis of another sample that crashes (e.g., cannot run or exits immediately) as shown at <b>414</b> (e.g., malformed dependencies unmet, etc.), and as such, only one minute of time was required for a dynamic analysis of this second sample in the VM instance. As a result, the wasted time of this VM instance and other computing resources (e.g., CPU and memory of a server executing the VM instance) is shown at <b>416</b>, which is the remainder of a five minute predetermined period of time allocated for such dynamic analysis (i.e., about four minutes was wasted during this example dynamic analysis).</p><p id="p-0088" num="0087">Referring to <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>, OS booting of the VM instance is shown at <b>402</b>, then a sample A is executed in the VM instance as shown at <b>424</b> and then terminates as shown at <b>426</b>. However, the early exit component (e.g., such as described above with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>) detects that sample A launches a child process shown as sample B <b>428</b>, which terminates as shown at <b>430</b>. Prior to sample B exiting, the early exit component detects a scheduled task to be executed in one minute as shown at <b>432</b>. As such, the early exit component continues to monitor activities for at least another one minute. After one minute, Windows task scheduler <b>434</b> executes the created task in a new process shown as sample C <b>436</b>. Sample C exits as shown at <b>438</b>. As shown at time bar <b>400</b>, only three minutes and thirty seconds of time was required for a dynamic analysis of this third sample (sample A) in the VM instance. As a result, the wasted time of this VM instance and other computing resources (e.g., CPU and memory of a server executing the VM instance) is the remainder of a five minute predetermined period of time allocated for such dynamic analysis (i.e., about one minute and thirty seconds was wasted during this example dynamic analysis).</p><p id="p-0089" num="0088">Referring to <figref idref="DRAWINGS">FIG. <b>4</b>D</figref>, a visualization of the time used for each of three controllers for performing dynamic analysis of samples is shown. The dynamic analysis engine does not monitor program state to determine whether to perform an early exit of the dynamic analysis. As a result, the dynamic analysis of the samples is performed for a predetermined period of time (e.g., for five minutes) as shown at <b>440</b>. Moreover, the disk is mounted twice, before executing a copy of the sample and after the execution to retrieve the dynamic analysis log data, as shown at <b>442</b>. In contrast, the dynamic analysis performed using the disclosed techniques for early exit dynamic analysis of a virtual machine utilized computing resources much more efficiently as will now be described with respect to <figref idref="DRAWINGS">FIG. <b>4</b>E</figref>.</p><p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. <b>4</b>E</figref> illustrates a more efficient use of computing resources by performing early exit dynamic analysis of a virtual machine in accordance with some embodiments. For example, system <b>300</b> (e.g., using dynamic analysis engine <b>310</b> and early exit component <b>340</b>) can be used to perform early exit dynamic analysis of a virtual machine as similarly described above.</p><p id="p-0091" num="0090">Referring to <figref idref="DRAWINGS">FIG. <b>4</b>E</figref>, the dynamic analysis engine (e.g., using early exit component <b>340</b>) monitors process state (e.g., and other activities as similarly described above) to determine whether to perform an early exit of the dynamic analysis. As a result, the dynamic analysis of the samples is often performed for less than the predetermined period of time (e.g., for five minutes) as shown, for example, at <b>450</b>. Moreover, the disk is mounted once, before executing the sample, to copy the sample into the hypervisor DA sandbox, as shown at <b>452</b>. Mounting the disk generally requires a certain amount of time, and existing sandboxes typically perform this mounting the disk operation twice as they (1) copy the sample to the disk, and (2) after the dynamic analysis, they typically must mount the disk again to retrieve the logged events (e.g., logs). In contrast, using the disclosed techniques for sandboxes for dynamic analysis of malware samples, we only mount the disk once to copy the sample, because we log events (e.g., generate the logs) outside of the guest OS of the VM instance (e.g., using the disclosed dynamic-analysis, we log the events are logged at every vmexit and as such do not have to mount the disk twice unlike existing approaches for sandboxes for dynamic analysis of malware samples).</p><p id="p-0092" num="0091">As will be apparent, while the above-described embodiments are described with respect to monitored samples executing in Microsoft Windows&#xae; OS platform environments, the disclosed techniques for early exit dynamic analysis of a virtual machine can be similarly applied to various other OS platform environments, such as Apple Mac&#xae; OS, Linux, Google Android&#xae; OS, and/or other platforms, as would now be apparent to one of ordinary skill in the art in view of the disclosed embodiments.</p><p id="p-0093" num="0092">Processes for Early Exit Dynamic Analysis of a Virtual Machine</p><p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an embodiment of a process for early exit dynamic analysis of a virtual machine. In various embodiments, process <b>500</b> is performed by system <b>300</b> (examples of which include malware analysis system <b>132</b> and cloud security service <b>122</b> as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>). The process begins at <b>502</b> when a malware sample (e.g., candidate malware) is received. As one example, candidate malware is received at <b>502</b> when an email (including an attachment) is received by data appliance <b>102</b> from system <b>120</b>. As another example, data appliance <b>102</b> can be configured to transmit the attachment to service <b>122</b> for analysis. In that scenario, the candidate malware is received by service <b>122</b> at <b>502</b>. As yet another example, candidate malware can be received at <b>502</b> as part of a batch operation (e.g., where cloud security service <b>122</b> receives a variety of malware samples over a period of time and a batch of received samples is provided to virtual machine server <b>124</b> for processing&#x2014;with virtual machine server <b>124</b> receiving the batch at <b>502</b>). Further, the batch operation can be repeated (e.g., on the same set of samples&#x2014;or on a set that includes at least some of the same samples as previous batches).</p><p id="p-0095" num="0094">At <b>504</b>, a dynamic analysis of a malware sample is initiated by executing the malware sample in a virtual computing environment. For example, the computing environment can be implemented initializing a virtual machine instance (e.g., an instrumented virtual environment, such as similarly described above with respect to <b>112</b> and <b>124</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> and further described above with respect to <b>310</b> and <b>340</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>). The virtual environment is instrumented, as applicable, such that behaviors observed while the application is executing are logged and/or monitored (e.g., including monitoring various process, file, system, and other activities for determining whether to perform an early exit dynamic analysis of the virtual machine instance) as similarly described above.</p><p id="p-0096" num="0095">At <b>506</b>, monitoring activities of the malware sample during execution of the malware sample in the virtual computing environment is performed. For example, various process, file, system, and other activities for determining whether to perform an early exit dynamic analysis of the virtual machine instance can be monitored during execution of the malware sample in the computing environment as similarly described above.</p><p id="p-0097" num="0096">At <b>508</b>, when to exit the dynamic analysis before a predetermined period of time is determined. For example, if the only process associated with the sample terminates and no other relevant activities were detected (e.g., scheduling of new tasks, etc.), then the early exit component determines that the sample is fully detonated, and the dynamic analysis can be exited prior to the predetermined period of time allocated for dynamic analysis.</p><p id="p-0098" num="0097">Remedial Actions</p><p id="p-0099" num="0098">As explained above, various remedial actions can be performed using the disclosed techniques for malware detection using dynamic analysis. For example, signatures can be automatically generated based on the malware binaries identified in the automatically unpacked code/binaries during malware execution in the malware analysis environment (e.g., performing a static analysis of the unpacked code/binaries to generate pattern-based signatures, such as signatures based on YARA rules). The signatures can be distributed to security devices (e.g., security/firewall appliances), host security software/agents, and/or a security service for enforcement based on the signature (e.g., applied to deobfuscated/unpacked payloads).</p><p id="p-0100" num="0099">As another example, the extracted payload from the deobfuscated/unpacked code/binaries can be submitted for dynamic analysis (e.g., using the dynamic engine (<b>310</b>)) to generate new signatures such as dynamic/behavior signatures (e.g., as well as applying existing signatures, such as signatures based on YARA rules).</p><p id="p-0101" num="0100">As yet another example, the disclosed techniques can be applied to cluster malware families that may utilize different obfuscation or packing approaches to conceal identical or similar malware code/binaries. The automatically unpacked code/binaries detected during malware execution can be compared across malware samples to facilitate clustering of such malware families (e.g., identifying malware families using YARA rules or similar techniques).</p><p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates another embodiment of a process for early exit dynamic analysis of a virtual machine. In various embodiments, process <b>600</b> is performed by system <b>300</b>. The process begins at <b>602</b> when a dynamic analysis of a malware sample is initiated by executing the malware sample in a virtual computing environment.</p><p id="p-0103" num="0102">At <b>604</b>, monitoring for new process related activities (e.g., launching a new process) during execution of the malware sample in the virtual computing environment is performed.</p><p id="p-0104" num="0103">At <b>606</b>, monitoring for file related activities (e.g., writing, copying, or moving a file) during execution of the malware sample in the virtual computing environment is performed.</p><p id="p-0105" num="0104">At <b>608</b>, monitoring for registry related activities (e.g., changing a registry setting) during execution of the malware sample in the virtual computing environment is performed.</p><p id="p-0106" num="0105">At <b>610</b>, monitoring for task scheduling related activities (e.g., scheduling a task) during execution of the malware sample in the virtual computing environment is performed.</p><p id="p-0107" num="0106">At <b>612</b>, monitoring for system service related activities (e.g., modifying a system service) during execution of the malware sample in the virtual computing environment is performed.</p><p id="p-0108" num="0107">At <b>614</b>, an early exit of the dynamic analysis of the malware sample is performed before the predetermined period of time. For example, the early exit is determined based on monitoring of the malware sample during execution in the virtual computing environment to determine that the malware sample has completed execution and no further dynamic analysis is to be performed to determine whether the malware sample is malicious or benign. In some cases, the malware analysis system (<b>300</b>) can use the results of the dynamic analysis (e.g., DA report <b>312</b>) to determine that the malware sample is benign.</p><p id="p-0109" num="0108">Example Use Cases for Early Exit Dynamic Analysis of a Virtual Machine</p><p id="p-0110" num="0109"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref> illustrates a log of the monitored activities during dynamic analysis of a sample in accordance with some embodiments. In this example, the sample is a Hello World executable (e.g., WF_HelloWorld.exe) that simply shows a message box and then exits. The total analysis time is 45 seconds instead of the default predetermined period of time for dynamic analysis of five minutes.</p><p id="p-0111" num="0110"><figref idref="DRAWINGS">FIG. <b>7</b>B</figref> illustrates a log of the monitored activities during dynamic analysis of another sample in accordance with some embodiments. In this example, the sample (e.g., TestWildFirePEInjection.exe) injects itself into another process, and both processes then exit afterwards. The total analysis time is 54 seconds instead of the default predetermined period of time for dynamic analysis of five minutes.</p><p id="p-0112" num="0111"><figref idref="DRAWINGS">FIGS. <b>7</b>C-D</figref> illustrate a log of the monitored activities during dynamic analysis of a sample in accordance with some embodiments. In this example, the sample schedules a task that runs after the sample has been terminated. Referring to <figref idref="DRAWINGS">FIG. <b>7</b>C</figref>, this sample creates a scheduled task that will be executed in one minute after the sample has been executed. As such, the early exit component does not terminate the analysis upon termination of the sample but rather waits until the scheduled task has been executed (e.g., in this case, test_wf.vbs, which will be loaded by wscript.exe in the Microsoft Windows OS).</p><p id="p-0113" num="0112">Referring to <figref idref="DRAWINGS">FIG. <b>7</b>D</figref>, another view of the log is shown in which some lines are removed for readability and the sample name has been replaced to show as sample.exe. It should also be noted that the time stamps are actual times from the host operating system and are different than the ones inside the sandbox. This output can be interpreted as will now be described. The sample gets executed at 06:36:33 host time (PID: 1836). Inside the guest the time is 7:37:36. The sample drops a file named &#x201c;c:\test_wf.vbs&#x201d; and creates a scheduled task with schtasks.exe (PID: 1080). The name of the scheduled task is &#x201c;WildFireTest&#x201d; and the file that must be executed is &#x201c;c:\test_wf.vbs&#x201d; in 1 minute (guest time). The sample (PID: 1836) exits. As mentioned above, early exit cannot yet be performed, because the sample has created a task, and as a result, the early exit component is configured to wait until every process and task has been executed. The process that created the scheduled task (PID: 1080) exits. Again, early exit is not yet performed. One minute passes by inside the guest OS (e.g., which is performed faster than one minutes as the dynamic analysis engine (<b>310</b>) is configured to perform wait state elimination). Many existing sandboxes will terminate at this point, and thus, miss potential dynamic analysis that can be performed by monitoring activities that are performed after triggering the scheduled task. After this wait state (e.g., after one minute passes), the Microsoft Windows OS will run the task through the taskeng.exe (PID: 1728) process and launch wscript.exe (PID: 1696), which launches the sample. As then shown in this log, wscript.exe (PID: 1696) terminates, and at this point in time, the early exit component detects that wscript.exe (PID: 1696) terminates and determines to perform the early exit (e.g., because everything has been executed and there is no child process, no created service, and no dropped files created from the wscript.exe process). As such, at 6:37:15 host time, the dynamic analysis is stopped after 1:07 minutes total analysis time.</p><p id="p-0114" num="0113">Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding, the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system, comprising:<claim-text>a processor configured to:<claim-text>initiate a dynamic analysis of a malware sample by executing the malware sample in a virtual computing environment;</claim-text><claim-text>monitor activities of the malware sample during execution of the malware sample in the virtual computing environment; and</claim-text><claim-text>determine when to exit the dynamic analysis before a predetermined period of time; and</claim-text></claim-text><claim-text>a memory coupled to the processor and configured to provide the processor with instructions.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the virtual computing environment comprises a virtual machine instance.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein an early exit from the dynamic analysis before the predetermined period of time is performed based on a termination of a main process associated with executing the malware sample in the virtual computing environment.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein an output of the monitored activities of the malware sample during execution of the malware sample in the virtual computing environment is automatically analyzed to determine whether the malware sample is malicious or benign.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein monitoring activities of the malware sample during execution of the malware sample in the virtual computing environment includes one or more of the following: launching a new process; writing, copying, or moving a file; changing a registry setting; modifying a system service; and scheduling a task.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to:<claim-text>monitor memory during execution of the malware sample in the virtual computing environment.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to:<claim-text>monitor for launching a new process during execution of the malware sample in the virtual computing environment.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to:<claim-text>monitor for writing, copying, or moving a file during execution of the malware sample in the virtual computing environment.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to:<claim-text>monitor for changing a registry setting during execution of the malware sample in the virtual computing environment.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to:<claim-text>monitor for modifying a system service during execution of the malware sample in the virtual computing environment.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to:<claim-text>monitor for scheduling a task during execution of the malware sample in the virtual computing environment.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to:<claim-text>perform an early exit of the dynamic analysis of the malware sample before the is predetermined period of time based on monitoring of the malware sample during execution in the virtual computing environment.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to:<claim-text>perform an early exit of the dynamic analysis of the malware sample before the predetermined period of time based on monitoring of the malware sample during execution in the virtual computing environment.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to:<claim-text>perform an early exit of the dynamic analysis of the malware sample before the predetermined period of time based on monitoring of the malware sample during execution in the virtual computing environment to determine that the malware sample has completed execution and no further dynamic analysis is to be performed to determine whether the malware sample is malicious or benign.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to:<claim-text>perform an early exit of the dynamic analysis of the malware sample before the predetermined period of time based on monitoring of the malware sample during execution in the virtual computing environment; and</claim-text><claim-text>determine that the malware sample is benign.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to:<claim-text>perform an early exit of the dynamic analysis of the malware sample before the predetermined period of time based on monitoring of the malware sample during execution in the virtual computing environment; and</claim-text><claim-text>determine that the malware sample is malicious.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A method, comprising:<claim-text>initiating a dynamic analysis of a malware sample by executing the malware sample in a virtual computing environment;</claim-text><claim-text>monitoring activities of the malware sample during execution of the malware sample in the virtual computing environment; and</claim-text><claim-text>determining when to exit the dynamic analysis before a predetermined period of time.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the virtual computing environment comprises a virtual machine instance.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A computer program product, the computer program product being embodied in a tangible computer readable storage medium and comprising computer instructions for:<claim-text>initiating a dynamic analysis of a malware sample by executing the malware sample in a virtual computing environment;</claim-text><claim-text>monitoring activities of the malware sample during execution of the malware sample in the virtual computing environment; and</claim-text><claim-text>determining when to exit the dynamic analysis before a predetermined period of time.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer program product recited in <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the virtual computing environment comprises a virtual machine instance.</claim-text></claim></claims></us-patent-application>