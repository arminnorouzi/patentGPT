<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007051A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007051</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363070</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>29</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>10</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>10</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>12</main-group><subgroup>26</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>205</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>10</main-group><subgroup>0635</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>10</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>065</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SECURITY CAPABILITY DETERMINATION</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>International Business Machines Corporation</orgname><address><city>Armonk</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Colonna</last-name><first-name>Christopher J</first-name><address><city>Ossining</city><state>NY</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Guendert</last-name><first-name>Stephen Robert</first-name><address><city>Poughkeepsie</city><state>NY</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Catalano</last-name><first-name>Pasquale A.</first-name><address><city>Wallkill</city><state>NY</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Becht</last-name><first-name>Michael James</first-name><address><city>Poughkeepsie</city><state>NY</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An approach for improving endpoint security. The approach requests security capabilities from endpoints of communications. The approach can analyze the differences between the security capabilities of the endpoints. The approach can negotiate a security capability supported by the endpoints of the communication. The approach can determine if the negotiation succeeded. If the negotiation failed, then the approach can create a report describing capabilities of the endpoints and suggesting changes to improve the endpoint security. The approach can send the report to the appropriate interested personnel.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="127.17mm" wi="108.12mm" file="US20230007051A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="191.01mm" wi="157.99mm" orientation="landscape" file="US20230007051A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="204.47mm" wi="151.47mm" orientation="landscape" file="US20230007051A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="230.12mm" wi="131.57mm" file="US20230007051A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="138.68mm" wi="110.15mm" file="US20230007051A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="182.63mm" wi="173.74mm" file="US20230007051A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">The present invention relates generally to security capabilities and more specifically, determining security capabilities associated with an endpoint.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Fibre Channel is the premier transport for Storage Area Networks (SAN). However, like any other component of a datacenter, the need to implement security measures in the SAN exists to reduce and eliminate insider threats of unauthorized access of data. Managing a SAN involves not only providing highly available data access and optimal performance, but it's also essential that all data on the SAN be completely secure.</p><p id="p-0004" num="0003">Currently, defined combinations of endpoint security settings are sometimes interoperable but it can easily follow that mismatched components can lead to incompatible combinations of security settings. For example, channels may be required to drop support for algorithms deemed not quantum safe, yet still be in the same environment as a legacy channel and policies may require the use of a minimum level of encryption.</p><p id="p-0005" num="0004">When endpoints fail to enable security, it can currently be inferred that it is for policy reasons, but in the future, the basis for the failure to enable security settings will be less obvious. Accordingly, a need has arisen for a mechanism to determine the security settings associated with the endpoints of a Fibre Channel connection.</p><heading id="h-0003" level="1">BRIEF SUMMARY</heading><p id="p-0006" num="0005">According to an embodiment of the present invention, a computer-implemented method for improving endpoint security, the computer-implemented method comprising: requesting security capabilities from one or more endpoints; analyzing the difference between the security capabilities; negotiating a security capability supported by the one or more endpoints; determining if the negotiating succeeded; responsive to the negotiating not succeeding, creating a report describing capabilities associated with the one or more endpoints and suggesting changes for at least one of the one or more endpoints; and sending the report to predetermined interested personnel.</p><p id="p-0007" num="0006">According to an embodiment of the present invention, a computer program product for improving endpoint security, the computer program product comprising: one or more nontransitory computer readable storage media and program instructions stored on the one or more non-transitory computer readable storage media, the program instructions comprising: program instructions to request security capabilities from one or more endpoints; program instructions to analyze the difference between the security capabilities; program instructions to negotiate a security capability supported by the one or more endpoints; program instructions to determining if the negotiating succeeded; responsive to the negotiating failing, program instructions to create a report describing capabilities associated with the one or more endpoints and suggesting changes for at least one of the one or more endpoints; and program instructions to send the report to predetermined interested personnel.</p><p id="p-0008" num="0007">According to an embodiment of the present invention, a computer system for improving endpoint security, the computer system comprising: one or more computer processors; one or more non-transitory computer readable storage media; and program instructions stored on the one or more non-transitory computer readable storage media, the program instructions comprising: program instructions to request security capabilities from one or more endpoints; program instructions to analyze the difference between the security capabilities; program instructions to negotiate a security capability supported by the one or more endpoints; program instructions to determining if the negotiating succeeded; responsive to the negotiating failing, program instructions to create a report describing capabilities associated with the one or more endpoints and suggesting changes for at least one of the one or more endpoints; and program instructions to send the report to predetermined interested personnel.</p><p id="p-0009" num="0008">Other aspects and embodiments of the present invention will become apparent from the following detailed description, which, when taken in conjunction with the drawings, illustrate by way of example the principles of the invention.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a cloud computing environment, according to embodiments of the present invention.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts abstraction model layers, according to embodiments of the present invention.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a high-level architecture, according to embodiments of the present invention.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an exemplary detailed architecture, according to embodiments of the present invention.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart of a method, according to embodiments of the present invention.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram of internal and external components of a data processing system in which embodiments described herein may be implemented, according to embodiments of the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0016" num="0015">The following description is made for the purpose of illustrating the general principles of the present invention and is not meant to limit the inventive concepts claimed herein. Further, particular features described herein can be used in combination with other described features in each of the various possible combinations and permutations.</p><p id="p-0017" num="0016">Unless otherwise specifically defined herein, all terms are to be given their broadest possible interpretation including meanings implied from the specification as well as meanings understood by those skilled in the art and/or as defined in dictionaries, treatises, etc.</p><p id="p-0018" num="0017">It must also be noted that, as used in the specification and the appended claims, the singular forms &#x201c;a,&#x201d; &#x201c;an&#x201d; and &#x201c;the&#x201d; include plural referents unless otherwise specified. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.</p><p id="p-0019" num="0018">The following description discloses several embodiments of determining the security capabilities of an endpoint. It should be noted that an endpoint can be any device that is physically an end point on a network. Examples of end points include, but are not limited to, laptops, desktops, mobile phones, tablets, servers, and virtual environments. Further, an example of endpoint security can include, but is not limited to, a traditional home antivirus, the desktop, laptop, or smartphone that antivirus is installed on is the endpoint.</p><p id="p-0020" num="0019">An embodiment can request security capabilities from an endpoint and can analyze the security capabilities in view of the security capabilities of another endpoint associated with communications between the two endpoints. Further, another example of endpoint security can include, but is not limited to, the IBM Fiber Channel Endpoint Security, by IBM Corporation, policies supported by the endpoint devices, such as encryption or authentication. The analysis can be used for troubleshooting and notification or enforcement of best practices. It should be noted that endpoint security can refer to cybersecurity services for network endpoints.</p><p id="p-0021" num="0020">Endpoint security services can include antivirus, email filtering, web filtering, and firewall services. Endpoint security can play a crucial role for businesses, ensuring critical systems, intellectual property, customer data, employees, and guests are protected from ransomware, phishing, malware, and other cyberattacks. Without these endpoint protections in place, entities could lose access to their valuable data or risk having their data stolen while the data travels over the attached network. Repeat infections and data breaches can also lead to costly downtime and the allocation of resources to remediating issues.</p><p id="p-0022" num="0021">It is to be understood that although this disclosure includes a detailed description on cloud computing, implementation of the teachings recited herein are not limited to a cloud computing environment. Rather, embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.</p><p id="p-0023" num="0022">Cloud computing is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services) that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics, at least three service models, and at least four deployment models.</p><p id="p-0024" num="0023">Characteristics are as follows:</p><p id="p-0025" num="0024">On-demand self-service: a cloud consumer can unilaterally provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction with the service's provider.</p><p id="p-0026" num="0025">Broad network access: capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (e.g., mobile phones, laptops, and PDAs).</p><p id="p-0027" num="0026">Resource pooling: the provider's computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter).</p><p id="p-0028" num="0027">Rapid elasticity: capabilities can be rapidly and elastically provisioned, in some cases automatically, to quickly scale out and rapidly released to quickly scale in. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.</p><p id="p-0029" num="0028">Measured service: cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported, providing transparency for both the provider and consumer of the utilized service.</p><p id="p-0030" num="0029">Service Models are as follows:</p><p id="p-0031" num="0030">Software as a Service (SaaS): the capability provided to the consumer is to use the provider's applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser (e.g., web-based email). The consumer does not manage or control the underlying cloud infrastructure including network, servers, operating systems, storage, or even individual application capabilities, with the possible exception of limited user-specific application configuration settings.</p><p id="p-0032" num="0031">Platform as a Service (PaaS): the capability provided to the consumer is to deploy onto the cloud infrastructure consumer-created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks, servers, operating systems, or storage, but has control over the deployed applications and possibly application hosting environment configurations.</p><p id="p-0033" num="0032">Infrastructure as a Service (IaaS): the capability provided to the consumer is to provision processing, storage, networks, and other fundamental computing resources where the consumer is able to deploy and run arbitrary software, which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems, storage, deployed applications, and possibly limited control of select networking components (e.g., host firewalls).</p><p id="p-0034" num="0033">Deployment Models are as follows:</p><p id="p-0035" num="0034">Private cloud: the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on-premises or off-premises.</p><p id="p-0036" num="0035">Community cloud: the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns (e.g., mission, security requirements, policy, and compliance considerations). It may be managed by the organizations or a third party and may exist on-premises or off-premises.</p><p id="p-0037" num="0036">Public cloud: the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.</p><p id="p-0038" num="0037">Hybrid cloud: the cloud infrastructure is a composition of two or more clouds (private, community, or public) that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability (e.g., cloud bursting for load-balancing between clouds).</p><p id="p-0039" num="0038">A cloud computing environment is service oriented with a focus on statelessness, low coupling, modularity, and semantic interoperability. At the heart of cloud computing is an infrastructure that includes a network of interconnected nodes.</p><p id="p-0040" num="0039">Referring now to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, illustrative cloud computing environment <b>50</b> is depicted. As shown, cloud computing environment <b>50</b> includes one or more cloud computing nodes <b>10</b> with which local computing devices used by cloud consumers, such as, for example, personal digital assistant (PDA) or cellular telephone <b>54</b>A, desktop computer <b>54</b>B, laptop computer <b>54</b>C, and/or automobile computer system <b>54</b>N may communicate. Nodes <b>10</b> may communicate with one another. They may be grouped (not shown) physically or virtually, in one or more networks, such as Private, Community, Public, or Hybrid clouds as described hereinabove, or a combination thereof. This allows cloud computing environment <b>50</b> to offer infrastructure, platforms and/or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices <b>54</b>A-N shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> are intended to be illustrative only and that computing nodes <b>10</b> and cloud computing environment <b>50</b> can communicate with any type of computerized device over any type of network and/or network addressable connection (e.g., using a web browser).</p><p id="p-0041" num="0040">Referring now to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, a set of functional abstraction layers provided by cloud computing environment <b>50</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) is shown. It should be understood in advance that the components, layers, and functions shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted, the following layers and corresponding functions are provided:</p><p id="p-0042" num="0041">Hardware and software layer <b>60</b> include hardware and software components. Examples of hardware components include mainframes <b>61</b>; RISC (Reduced Instruction Set Computer) architecture-based servers <b>62</b>; servers <b>63</b>; blade servers <b>64</b>; storage devices <b>65</b>; and networks and networking components <b>66</b>. In some embodiments, software components include network application server software <b>67</b> and database software <b>68</b>.</p><p id="p-0043" num="0042">Virtualization layer <b>70</b> provides an abstraction layer from which the following examples of virtual entities may be provided: virtual servers <b>71</b>; virtual storage <b>72</b>; virtual networks <b>73</b>, including virtual private networks; virtual applications and operating systems <b>74</b>; and virtual clients <b>75</b>.</p><p id="p-0044" num="0043">In one example, management layer <b>80</b> may provide the functions described below. Resource provisioning <b>81</b> provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing <b>82</b> provide cost tracking as resources are utilized within the cloud computing environment, and billing or invoicing for consumption of these resources. In one example, these resources may include application software licenses. Security provides identity verification for cloud consumers and tasks, as well as protection for data and other resources. User portal <b>83</b> provides access to the cloud computing environment for consumers and system administrators. Service level management <b>84</b> provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement (SLA) planning and fulfillment <b>85</b> provide pre-arrangement for, and procurement of, cloud computing resources for which a future requirement is anticipated in accordance with an SLA.</p><p id="p-0045" num="0044">Workloads layer <b>90</b> provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation <b>91</b>; software development and lifecycle management <b>92</b>; virtual classroom education delivery <b>93</b>; data analytics processing <b>94</b>; transaction processing <b>95</b>; and endpoint security optimization management <b>96</b>.</p><p id="p-0046" num="0045">It should be noted that the embodiments of the present invention may operate with a user's permission. Any data may be gathered, stored, analyzed, etc., with a user's consent. In various configurations, at least some of the embodiments of the present invention are implemented into an opt-in application, plug-in, etc., as would be understood by one having ordinary skill in the art upon reading the present disclosure.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a high-level architecture for performing various operations of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, in accordance with various embodiments. The architecture <b>300</b> may be implemented in accordance with the present invention in any of the environments depicted in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>4</b></figref>, among others, in various embodiments. Of course, more or less elements than those specifically described in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be included in architecture <b>300</b>, as would be understood by one of ordinary skill in the art upon reading the present descriptions.</p><p id="p-0048" num="0047">Each of the steps of the method <b>500</b> (described in further detail below) may be performed by any suitable component of the architecture <b>300</b>. A processor, e.g., processing circuit(s), chip(s), and/or module(s) implemented in hardware and/or software, and preferably having at least one hardware component may be utilized in any device to perform one or more steps of the method <b>500</b> in the architecture <b>300</b>. Illustrative processors include, but are not limited to, a central processing unit (CPU), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), etc., combinations thereof, or any other suitable computing device known in the art.</p><p id="p-0049" num="0048">Architecture <b>300</b> includes a block diagram, showing a security optimization system, to which the invention principles may be applied. The architecture <b>300</b> comprises a client computer <b>302</b>, a security optimization component <b>308</b> operational on a server computer <b>304</b> and a network <b>306</b> supporting communication between the client computer <b>302</b> and the server computer <b>304</b>.</p><p id="p-0050" num="0049">Client computer <b>302</b> can be any computing device on which software is installed for which an update is desired or required. Client computer <b>302</b> can be a standalone computing device, management server, a web server, a mobile computing device, or any other electronic device or computing system capable of receiving, sending, and processing data. In other embodiments, client computer <b>302</b> can represent a server computing system utilizing multiple computers as a server system. In another embodiment, client computer <b>302</b> can be a laptop computer, a tablet computer, a netbook computer, a personal computer, a desktop computer or any programmable electronic device capable of communicating with other computing devices (not shown) within user persona generation environment via network <b>306</b>.</p><p id="p-0051" num="0050">In another embodiment, client computer <b>302</b> represents a computing system utilizing clustered computers and components (e.g., disk array storage, database server computers, application server computers, etc.) that act as a single pool of seamless resources when accessed within install-time validation environment of architecture <b>300</b>. Client computer <b>302</b> can include internal and external hardware components, as depicted and described in further detail with respect to <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0052" num="0051">Server computer <b>304</b> can be a standalone computing device, management server, a web server, a mobile computing device, or any other electronic device or computing system capable of receiving, sending, and processing data. In other embodiments, server computer <b>304</b> can represent a server computing system utilizing multiple computers as a server system. In another embodiment, server computer <b>304</b> can be a laptop computer, a tablet computer, a netbook computer, a personal computer, a desktop computer, or any programmable electronic device capable of communicating with other computing devices (not shown) within install-time validation environment of architecture <b>300</b> via network <b>306</b>.</p><p id="p-0053" num="0052">Network <b>306</b> can be, for example, a local area network (LAN), a wide area network (WAN) such as the Internet, a storage area network (SAN), or a combination of these network types, and can include wired, wireless, or fiber optic connections. In general, network <b>306</b> can be any combination of connections and protocols that will support communications between client computer <b>302</b> and server computer <b>304</b>.</p><p id="p-0054" num="0053">Security optimization component <b>308</b>, operational on server computer <b>304</b>, can negotiate a security policy between endpoints. Should the negotiation fail, security optimization component <b>308</b> can request security capabilities of an endpoint and analyze the provided capabilities to determine capabilities that match the security capabilities of another endpoint.</p><p id="p-0055" num="0054">Security optimization component <b>308</b> can provide notification to interested parties (e.g., interested Information Technology (IT) personnel) of security negotiation failures, security analysis of one or more endpoints, security policies that are unable to operate and recommended security policy upgrades for an endpoint. It should be noted that these embodiments can be implemented in a server communicatively connected to the endpoints or in the endpoints directly. It should further be noted that these embodiments can store endpoint security capabilities on a server for later analysis and the stored information can be updated as security capabilities of an endpoint change.</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an exemplary detailed architecture for performing various operations of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, in accordance with various embodiments. The architecture <b>400</b> may be implemented in accordance with the present invention in any of the environments depicted in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>3</b> and <b>5</b></figref>, among others, in various embodiments. Of course, more or less elements than those specifically described in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be included in architecture <b>400</b>, as would be understood by one of skill in the art upon reading the present descriptions.</p><p id="p-0057" num="0056">Each of the steps of the method <b>500</b> (described in further detail below) may be performed by any suitable component of the architecture <b>400</b>. A processor, e.g., processing circuit(s), chip(s), and/or module(s) implemented in hardware and/or software, and preferably having at least one hardware component, may be utilized in any device to perform one or more steps of the method <b>500</b> in the architecture <b>400</b>. Illustrative processors include, but are not limited to, a central processing unit (CPU), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), etc., combinations thereof, or any other suitable computing device known in the art.</p><p id="p-0058" num="0057">Architecture <b>400</b> provides a detailed view of at least some of the modules of architecture <b>300</b>. Architecture <b>400</b> can comprise a security optimization component <b>308</b>, which can further comprise a security negotiation component <b>402</b>, a security analysis component <b>404</b> and a security notification component <b>406</b>.</p><p id="p-0059" num="0058">In another aspect of an embodiment of the present invention, security negotiation component <b>402</b> can request security capabilities from one or more endpoints and can attempt to establish a secure connection between two endpoints. It should be noted that security negotiation component <b>402</b> can request the security capabilities regardless of whether security is successfully enabled between endpoints. For example, on a failure to enable security, a first endpoint can send a second endpoint a request for the second endpoint's security capabilities. In one aspect, the security capabilities can include, but are not limited to, security levels, e.g., encryption algorithm, security options enabled, etc. and policy settings, e.g., permitted algorithms, permitted security options, etc. It should be noted that this request could take the form of a new Extended Link Service (ELS) command or as a new descriptor in the &#x201c;Read Diagnostic Parameters&#x201d; ELS, etc.</p><p id="p-0060" num="0059">In the case where the secure connection is established, the received security capabilities can be used to determine, by security analysis component <b>404</b>, if the optimal level of security is in use. It should be noted that the level of security required to establish and/or maintain a connection between endpoints can be initially set to predetermined values and dynamically changed after a connection is established. It should be noted that a determination that one endpoint has a better security capability available can indicate that the other endpoint is older hardware/firmware and may require update or replacement. For example, the current use of encryption, such as, but not limited to IBM Fibre Channel Endpoint Security, breaks channel extension technology because header data cannot be read if encrypted. If a future security level provided for not encrypting certain predetermined portions of a message, then channel extension technology could be re-enabled.</p><p id="p-0061" num="0060">In another aspect of a successfully established secure connection, security analysis component <b>404</b> can request historical security connection data associated with prior connections. Security analysis component <b>404</b> can then compare the historical security connection data to the current connection data and determine if suboptimal levels of security are no longer in use, e.g., hardware and/or firmware has been upgraded, along for the use of better security levels.</p><p id="p-0062" num="0061">In the case where the secure connection is not established, the received security capabilities can be used to determine, by security analysis component <b>404</b>, the reason for the failure. It should be noted that a failure determination can be based on factors such as, but not limited to, security levels and policy settings of the endpoints. Security analysis component <b>404</b> can compare the security levels and policy settings returned by the endpoints to determine why a connection is not possible, e.g., no matching security levels or misconfigured policy settings.</p><p id="p-0063" num="0062">In one aspect of an embodiment of the present invention, security notification component <b>406</b> can receive information from security analysis component <b>404</b> indicating that a security negotiation has failed. Security notification component <b>406</b> can prepare a notification indicating the reasoning, determined by security analysis component <b>404</b>, why the security negotiation failed and propose changes to one or more endpoints allowing for a successful security negotiation. For example, the notification can include security levels and policy settings such as, but not limited to, algorithms, options, etc.</p><p id="p-0064" num="0063">In another aspect of an embodiment of the present invention, security notification component <b>406</b> can receive information from security analysis component <b>404</b> indicating that a security negotiation has succeeded. Security notification component <b>406</b> can prepare a notification indicating an analysis of the security connection in view of the capabilities of the endpoints. Security notification component <b>406</b> can include recommendations and/or warnings for changes to one or more endpoints allowing a security negotiation to a better security level, including any necessary adjustments to policy settings. For example, a warning can be incorporated into the report indicating an endpoint is not using the most secure option supported by the endpoint.</p><p id="p-0065" num="0064">In another aspect of an embodiment of the present invention, security notification component <b>406</b> can receive information from security analysis component <b>404</b> indicating that a security negotiation has succeeded. Security notification component <b>406</b> can prepare a notification indicating an analysis of the security connection in view of the historical configurations of the endpoints. Security notification component <b>406</b> can provide information indicating that older, less secure, security levels are no longer in use by the endpoints, i.e., upgrades to hardware and/or firmware have been successfully deployed.</p><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an exemplary flowchart of a method <b>500</b> for providing notification of endpoint security negotiation failure and the reason for the negotiation failure based on querying endpoints for their security capabilities. At step <b>502</b>, an embodiment can query, via security negotiation component <b>402</b>, endpoints for their security capabilities. At step <b>504</b>, the embodiment can analyze, via security analysis component <b>404</b>, differences between the security capabilities of the different endpoints. At step <b>506</b>, the embodiment can negotiate, via security negotiation component <b>402</b>, an agreeable security level and policy settings for the endpoints. At step <b>508</b>, the embodiment can determine, via security negotiation component <b>402</b>, if the security negotiation was successful. At step <b>510</b>, the embodiment can, responsive to the negotiation failing, can send, via security notification component <b>406</b>, a notice describing the negotiation failure and including reasoning why the negotiation failed.</p><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts computer system <b>600</b>, an example computer system representative of client computer <b>302</b> and server computer <b>304</b>. Computer system <b>600</b> includes communications fabric <b>602</b>, which provides communications between computer processor(s) <b>604</b>, memory <b>606</b>, persistent storage <b>608</b>, communications unit <b>610</b>, and input/output (I/O) interface(s) <b>612</b>. Communications fabric <b>602</b> can be implemented with any architecture designed for passing data and/or control information between processors (such as microprocessors, communications and network processors, etc.), system memory, peripheral devices, and any other hardware components within a system. For example, communications fabric <b>602</b> can be implemented with one or more buses.</p><p id="p-0068" num="0067">Computer system <b>600</b> includes processors <b>604</b>, cache <b>616</b>, memory <b>606</b>, persistent storage <b>608</b>, communications unit <b>610</b>, input/output (I/O) interface(s) <b>612</b> and communications fabric <b>602</b>. Communications fabric <b>602</b> provides communications between cache <b>616</b>, memory <b>606</b>, persistent storage <b>608</b>, communications unit <b>610</b>, and input/output (I/O) interface(s) <b>612</b>. Communications fabric <b>602</b> can be implemented with any architecture designed for passing data and/or control information between processors (such as microprocessors, communications and network processors, etc.), system memory, peripheral devices, and any other hardware components within a system. For example, communications fabric <b>602</b> can be implemented with one or more buses or a crossbar switch.</p><p id="p-0069" num="0068">Memory <b>606</b> and persistent storage <b>608</b> are computer readable storage media. In this embodiment, memory <b>606</b> includes random access memory (RAM). In general, memory <b>606</b> can include any suitable volatile or non-volatile computer readable storage media. Cache <b>616</b> is a fast memory that enhances the performance of processors <b>604</b> by holding recently accessed data, and data near recently accessed data, from memory <b>606</b>.</p><p id="p-0070" num="0069">Program instructions and data used to practice embodiments of the present invention may be stored in persistent storage <b>608</b> and in memory <b>606</b> for execution by one or more of the respective processors <b>604</b> via cache <b>616</b>. In an embodiment, persistent storage <b>608</b> includes a magnetic hard disk drive. Alternatively, or in addition to a magnetic hard disk drive, persistent storage <b>608</b> can include a solid state hard drive, a semiconductor storage device, read-only memory (ROM), erasable programmable read-only memory (EPROM), flash memory, or any other computer readable storage media that is capable of storing program instructions or digital information.</p><p id="p-0071" num="0070">The media used by persistent storage <b>608</b> may also be removable. For example, a removable hard drive may be used for persistent storage <b>608</b>. Other examples include optical and magnetic disks, thumb drives, and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage <b>608</b>.</p><p id="p-0072" num="0071">Communications unit <b>610</b>, in these examples, provides for communications with other data processing systems or devices. In these examples, communications unit <b>610</b> includes one or more network interface cards. Communications unit <b>610</b> may provide communications through the use of either or both physical and wireless communications links. Program instructions and data used to practice embodiments of the present invention may be downloaded to persistent storage <b>608</b> through communications unit <b>610</b>.</p><p id="p-0073" num="0072">I/O interface(s) <b>612</b> allows for input and output of data with other devices that may be connected to each computer system. For example, I/O interface <b>612</b> may provide a connection to external devices <b>618</b> such as a keyboard, keypad, a touch screen, and/or some other suitable input device. External devices <b>618</b> can also include portable computer readable storage media such as, for example, thumb drives, portable optical or magnetic disks, and memory cards. Software and data used to practice embodiments of the present invention can be stored on such portable computer readable storage media and can be loaded onto persistent storage <b>608</b> via I/O interface(s) <b>612</b>. I/O interface(s) <b>612</b> also connect to display <b>620</b>.</p><p id="p-0074" num="0073">Display <b>620</b> provides a mechanism to display data to a user and may be, for example, a computer monitor.</p><p id="p-0075" num="0074">The components described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular component nomenclature herein is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and/or implied by such nomenclature.</p><p id="p-0076" num="0075">The present invention may be a system, a method, and/or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.</p><p id="p-0077" num="0076">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0078" num="0077">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0079" num="0078">Computer readable program instructions for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, configuration data for integrated circuitry, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++, or the like, and procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present invention.</p><p id="p-0080" num="0079">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0081" num="0080">These computer readable program instructions may be provided to a processor of a computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0082" num="0081">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0083" num="0082">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the blocks may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be accomplished as one step, executed concurrently, substantially concurrently, in a partially or wholly temporally overlapping manner, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0084" num="0083">Moreover, a system according to various embodiments may include a processor and logic integrated with and/or executable by the processor, the logic being configured to perform one or more of the process steps recited herein. By integrated with, what is meant is that the processor has logic embedded therewith as hardware logic, such as an application specific integrated circuit (ASIC), a FPGA, etc. By executable by the processor, what is meant is that the logic is hardware logic; software logic such as firmware, part of an operating system, part of an application program; etc., or some combination of hardware and software logic that is accessible by the processor and configured to cause the processor to perform some functionality upon execution by the processor. Software logic may be stored on local and/or remote memory of any memory type, as known in the art. Any processor known in the art may be used, such as a software processor module and/or a hardware processor such as an ASIC, a FPGA, a central processing unit (CPU), an integrated circuit (IC), a graphics processing unit (GPU), etc.</p><p id="p-0085" num="0084">It will be clear that the various features of the foregoing systems and/or methodologies may be combined in any way, creating a plurality of combinations from the descriptions presented above.</p><p id="p-0086" num="0085">It will be further appreciated that embodiments of the present invention may be provided in the form of a service deployed on behalf of a customer to offer service on demand.</p><p id="p-0087" num="0086">The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments, the practical application or technical improvement over technologies found in the marketplace, or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method for improving endpoint security, the computer-implemented method comprising:<claim-text>requesting security capabilities from one or more endpoints;</claim-text><claim-text>analyzing a difference between the security capabilities;</claim-text><claim-text>negotiating a security capability supported by the one or more endpoints;</claim-text><claim-text>determining if the negotiating succeeded;</claim-text><claim-text>responsive to the negotiating not succeeding, creating a report describing capabilities associated with the one or more endpoints and suggesting changes for at least one of the one or more endpoints; and</claim-text><claim-text>sending the report to predetermined interested personnel.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>responsive to the negotiating succeeding, creating a report describing warnings associated with any of the one or more endpoints not using the most secure option supported by an endpoint.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computer-implemented method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>retrieving historical data associated with the one or more endpoints prior security capability use; and</claim-text><claim-text>responsive to the negotiating succeeding, enhancing the report with notifications describing any of the one or more endpoints using newer security capabilities.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the security capabilities comprise security levels and policy settings.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>storing the security capabilities associated with the one or more endpoints as historical data.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computer-implemented method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the report further describes upgrade options for endpoints requiring a security level lower than other endpoints.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein requesting security capabilities comprises at least one of an Extended Link Service (ELS) command or a predetermined descriptor in a Read Diagnostics Parameters ELS.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A computer program product for improving endpoint security, the computer program product comprising:<claim-text>one or more non-transitory computer readable storage media and program instructions stored on the one or more non-transitory computer readable storage media, the program instructions comprising:<claim-text>program instructions to request security capabilities from one or more endpoints;</claim-text><claim-text>program instructions to analyze differences between the security capabilities;</claim-text><claim-text>program instructions to negotiate a security capability supported by the one or more endpoints;</claim-text><claim-text>program instructions to determine if the negotiation succeeded;</claim-text><claim-text>responsive to the negotiation failing, program instructions to create a report describing capabilities associated with the one or more endpoints and suggesting changes for at least one of the one or more endpoints; and</claim-text><claim-text>program instructions to send the report to predetermined interested personnel.</claim-text></claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:<claim-text>responsive to the negotiation succeeding, program instructions to create a report describing warnings associated with any of the one or more endpoints not using the most secure option supported by an endpoint.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer program product of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>program instructions to retrieve historical data associated with the one or more endpoints prior security capability use; and</claim-text><claim-text>responsive to the negotiation succeeding, program instructions to enhance the report with notifications describing any of the one or more endpoints using newer security capabilities.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the security capabilities comprise security levels and policy settings.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:<claim-text>program instructions to store the security capabilities associated with the one or more endpoints as historical data.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer program product of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the report further describes upgrade options for endpoints requiring a security level lower than other endpoints.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein requesting security capabilities comprises at least one of an Extended Link Service (ELS) command or a predetermined descriptor in a Read Diagnostics Parameters ELS.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A computer system for improving endpoint security, the computer system comprising:<claim-text>one or more computer processors;</claim-text><claim-text>one or more non-transitory computer readable storage media; and</claim-text><claim-text>program instructions stored on the one or more non-transitory computer readable storage media, the program instructions comprising:<claim-text>program instructions to request security capabilities from one or more endpoints;</claim-text><claim-text>program instructions to analyze a difference between the security capabilities;</claim-text><claim-text>program instructions to negotiate a security capability supported by the one or more endpoints;</claim-text><claim-text>program instructions to determine if the negotiation succeeded;</claim-text><claim-text>responsive to the negotiation failing, program instructions to create a report describing capabilities associated with the one or more endpoints and suggesting changes for at least one of the one or more endpoints; and</claim-text><claim-text>program instructions to send the report to predetermined interested personnel.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>responsive to the negotiation succeeding, program instructions to create a report describing warnings associated with any of the one or more endpoints not using the most secure option supported by an endpoint.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising:<claim-text>program instructions to retrieve historical data associated with the one or more endpoints prior security capability use;</claim-text><claim-text>responsive to the negotiation succeeding, program instructions to enhance the report with notifications describing any of the one or more endpoints using newer security capabilities; and</claim-text><claim-text>program instructions to store the security capabilities associated with the one or more endpoints as historical data.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the security capabilities comprise security levels and policy settings.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the report further describes upgrade options for endpoints requiring a security level lower than other endpoints.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein requesting security capabilities comprises at least one of an Extended Link Service (ELS) command or a predetermined descriptor in a Read Diagnostics Parameters ELS.</claim-text></claim></claims></us-patent-application>