<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004382A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004382</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17852458</doc-number><date>20220629</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>KR</country><doc-number>10-2021-0087426</doc-number><date>20210702</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>71</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>36</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>71</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>36</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">METHOD AND APPARATUS FOR PROVIDING PLATFORM-INTEGRATED SDK CAPABLE OF DEVELOPING MULTIPLE PLATFORMS WITH SINGLE SOURCE CODE</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>FakeEyes Co.,Ltd.</orgname><address><city>Seoul</city><country>KR</country></address></addressbook><residence><country>KR</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Kim</last-name><first-name>Seok Joong</first-name><address><city>Seoul</city><country>KR</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Son</last-name><first-name>Min Seung</first-name><address><city>Seoul</city><country>KR</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Kim</last-name><first-name>Do Yeong</first-name><address><city>Seoul</city><country>KR</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>FakeEyes Co.,Ltd.</orgname><role>03</role><address><city>Seoul</city><country>KR</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method for providing a platform-integrated SDK capable of developing multiple platforms with single source code, includes: receiving, from a user, a build instruction in which any one of the multiple platforms is designated as a build target platform, with respect to source code integrally written for the multiple platforms; importing a software development kit (SDK), among pre-stored SDKs, corresponding to the build target platform; building the source code after the SDK is imported; and providing the built object file to the user.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="93.90mm" wi="64.85mm" file="US20230004382A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="169.33mm" wi="113.88mm" file="US20230004382A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="155.53mm" wi="93.13mm" file="US20230004382A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="181.27mm" wi="132.84mm" file="US20230004382A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="191.18mm" wi="137.75mm" orientation="landscape" file="US20230004382A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="214.29mm" wi="143.00mm" file="US20230004382A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="144.70mm" wi="135.47mm" file="US20230004382A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This application claims priority under 35 USC &#xa7; 119 to Korean Patent Application No. 10-2021-0087426 filed on Jul. 2, 2021 in the Korean Intellectual Property Office (KIPO), the entire disclosure of which is incorporated herein by reference.</p><heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading><heading id="h-0003" level="1">1. Field of the Invention</heading><p id="p-0003" num="0002">The present invention relates to a method and an apparatus for providing a platform-integrated SDK capable of developing multiple platforms with single source code.</p><heading id="h-0004" level="1">2. Description of the Related Art</heading><p id="p-0004" num="0003">The content described below merely provides background information related to the embodiment according to the present invention and does not constitute the prior art.</p><p id="p-0005" num="0004">As virtual reality (VR) devices diversify, the need for developing software for different platforms is emerging. However, various problems may occur due to conflicts between codes when SDKs are simultaneously imported to enable one project to be operable on various VR devices. In addition, a lot of human resources and times are required for the multi-platform development due to the different SDK structure for each device and each platform during VR software development.</p><heading id="h-0005" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0006" num="0005">An object of the present invention is to provide a platform-integrated SDK capable of developing multiple platforms with single source code.</p><p id="p-0007" num="0006">In addition, an object of the present invention is to reduce the required human resources and times through development using single source code.</p><p id="p-0008" num="0007">In order to achieve the above objects, the method for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention may include the steps of: receiving, from a user, a build instruction in which any one of the multiple platforms is designated as a build target platform, with respect to source code integrally written for the multiple platforms; importing a software development kit (SDK), among pre-stored SDKs, corresponding to the build target platform; building the source code after the SDK is imported; and providing the built object file to the user.</p><p id="p-0009" num="0008">The source code may include in-app purchase processing code, and the in-app purchase processing code may include code in which a child class is overridden to branch an in-app purchase processing operation through a first preprocessor when the any one of the platforms is designated as the build target platform.</p><p id="p-0010" num="0009">The importing of the SDK may include determining whether code bases of the platforms are similar to each other; and deciding an SDK import scheme based on whether the code bases are similar to each other, and may further include setting a rendering environment based on the build target platform after the importing of the SDK; and setting a build environment based on the build target platform.</p><p id="p-0011" num="0010">The deciding of the SDK import scheme based on whether the code bases are similar to each other may include: importing a first SDK corresponding to each of the platforms together when the code bases of the platforms are similar to each other, and adding code for allowing an application of components included in the first SDK to be branched through a second preprocessor when the any one of the platforms is designated as the build target platform; or importing only a second SDK corresponding to the build target platform when the code bases of the platforms are not similar to each other.</p><p id="p-0012" num="0011">The setting of the rendering environment may include disposing a rendering camera included in the SDK corresponding to the build target platform.</p><p id="p-0013" num="0012">The source code may further include rendering processing code, and the rendering processing code may include code for allowing a rendering processing operation to be branched through the first preprocessor.</p><p id="p-0014" num="0013">The setting of the build environment may include changing a build setting value of development software to a build setting value corresponding to the build target platform; and overwriting a manifest file included in the source code with a manifest file corresponding to the build target platform.</p><p id="p-0015" num="0014">The development software may be, for example, development software corresponding to at least one of Unity engine, Unreal engine, Cry engine, Source engine, and Havok engine, and the type of engine corresponding to the development software in the present invention is not limited to the above example.</p><p id="p-0016" num="0015">The method may include storing a first manifest file corresponding to each of the platforms in a first folder that is not included in the build, before the overwriting with the manifest file, and the overwriting with the manifest file may include overwriting a second manifest file corresponding to the build target platform among the first manifest files in a folder in which the manifest file included in the source code is located.</p><p id="p-0017" num="0016">SDKs corresponding to the platforms may be compressed and stored in the pre-stored SDKs, respectively.</p><p id="p-0018" num="0017">In addition, the apparatus for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention may include a memory in which at least one program is recorded, and a processor for executing the program, in which the program may include instructions for executing: receiving, from a user, a build instruction in which any one of the multiple platforms is designated as a build target platform, with respect to source code integrally written for the multiple platforms; importing a software development kit (SDK), among pre-stored SDKs, corresponding to the build target platform; building the source code after the SDK is imported; and providing the built object file to the user.</p><p id="p-0019" num="0018">According to the present invention, the platform-integrated SDK capable of developing multiple platforms with single source code can be provided.</p><p id="p-0020" num="0019">In addition, according to the present invention, the required human resources and times can be reduced through development using single source code.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram showing subjects for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an operational flow chart showing a method for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an operational flow chart showing a method for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an operational flow chart showing a method for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an operational flow chart showing a method for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram showing an example in which code bases of platforms are similar to each other.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram showing an example of a build setting screen of development software.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram showing an example of a folder for saving a manifest file and a folder for overwriting the manifest file.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flow chart showing in the case of using the apparatus for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a view showing a computer system according to one embodiment of the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0007" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading><p id="p-0031" num="0030">The present invention will be described in detail with reference to the accompanying drawings as follows. Herein, repeated descriptions and detailed descriptions for known functions and configurations that may unnecessarily obscure the essentials of the invention will be omitted. The embodiments of the present invention are provided in order to more completely describe the present invention to those having ordinary skill in the art. Accordingly, the shapes and sizes of components in the drawings may be exaggerated for clearer description.</p><p id="p-0032" num="0031">Throughout the specification, when a part &#x201c;includes&#x201d; a certain component, the above expression does not exclude other components, but may further include the other components, unless particularly stated otherwise</p><p id="p-0033" num="0032">Hereinafter, exemplary embodiments according to the present invention will be described in detail with reference to the accompanying drawings.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram showing subjects for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention.</p><p id="p-0035" num="0034">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the subjects for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention include an apparatus <b>110</b> for providing a platform-integrated SDK capable of developing multiple platforms with single source code, and a user terminal <b>120</b>.</p><p id="p-0036" num="0035">The apparatus <b>110</b> for providing a platform-integrated SDK capable of developing multiple platforms with single source code may refer to an apparatus that receives a user's build instruction from the user terminal <b>120</b>.</p><p id="p-0037" num="0036">The apparatus <b>110</b> for providing a platform-integrated SDK capable of developing multiple platforms with single source code may refer to an apparatus that receives customized service provision data reflecting user's body measurement data from the user terminal <b>120</b> to provide a customized service to the user terminal <b>120</b>.</p><p id="p-0038" num="0037">The user terminal <b>120</b> may refer to a device that provides a build instruction inputted by the user to the apparatus <b>110</b> for providing a platform-integrated SDK capable of developing multiple platforms with single source code.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an operational flow chart showing a method for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention.</p><p id="p-0040" num="0039">Refer to <figref idref="DRAWINGS">FIG. <b>2</b></figref> according to the method for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention. First, a build instruction in which any one of the multiple platforms is designated as a build target platform may be received from a user (S<b>210</b>).</p><p id="p-0041" num="0040">The source code may include in-app purchase processing code.</p><p id="p-0042" num="0041">At this point, the in-app purchase processing code may include code in which a child class is overridden to branch an in-app purchase processing operation through a first preprocessor when the any one of the platforms is designated as the build target platform.</p><p id="p-0043" num="0042">For example, in the case of Xiaomi platform, because an app is required to be activated before proceeding with in-app purchase (TAP), the activation proceeds before initializing an IAP manager. In the case of Google platform, a universally unique identifier (uuid) of a product is locally defined, the locally defined product ID is collated with a product ID present on a server, and the payment proceeds when the collation matches. In the case of Oculus platform, the uuid list of the product is received from the server and then the payment proceeds with the received value. As in the above, because the in-app purchase processing operation for each platform is different, the operation may be branched to be processed in response to a platform designated as a build target platform through the first preprocessor.</p><p id="p-0044" num="0043">Next, the SDK corresponding to the build target platform among pre-stored SDKs may be imported (S<b>220</b>).</p><p id="p-0045" num="0044">SDKs corresponding to the platforms may be compressed and stored in the pre-stored SDKs, respectively.</p><p id="p-0046" num="0045">Next, the source code may be built after the SDK is imported (S<b>230</b>).</p><p id="p-0047" num="0046">Next, the built object file may be provided to the user (S<b>240</b>).</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an operational flow chart showing a method for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention.</p><p id="p-0049" num="0048">Refer to <figref idref="DRAWINGS">FIG. <b>3</b></figref> according to the method for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention. First, it may be determined whether the code bases of the platforms are similar to each other (S<b>310</b>).</p><p id="p-0050" num="0049">Next, an SDK import scheme may be decided based on whether the code bases are similar (S<b>320</b>).</p><p id="p-0051" num="0050">At this point, when the code bases of the platforms are similar to each other, a first SDK corresponding to each of the platforms may be imported together, and when the any one of the platforms is designated as the build target platform, code for allowing an application of components included in the first SDK to be branched through a second preprocessor may be added.</p><p id="p-0052" num="0051">For example, referring to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, in the case of Google platform and LG U+ platform that have similar code bases of the platforms, SDKs corresponding to the platforms, respectively, may be imported together. In addition, when the LG U+ platform is designated as the build target platform, code for allowing the application of non-overlapping code to be branched through the second preprocessor may be added. The above example is only an example according to one embodiment, and does not limit the scope of the present invention.</p><p id="p-0053" num="0052">When the code bases of the platforms are not similar to each other, only the second SDK corresponding to the build target platform may be imported.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an operational flow chart showing a method for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention.</p><p id="p-0055" num="0054">Refer to <figref idref="DRAWINGS">FIG. <b>4</b></figref> according to the method for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention. After importing the SDK, a rendering environment may be set based on the build target platform (S<b>410</b>).</p><p id="p-0056" num="0055">At this point, a rendering camera included in the SDK corresponding to the build target platform may be disposed.</p><p id="p-0057" num="0056">The source code may further include rendering processing code, and the rendering processing code may include code for allowing a rendering processing operation to be branched through the first preprocessor.</p><p id="p-0058" num="0057">As a selective embodiment, an exception handling may be additionally performed by using a scripting define symbol for IAP, if necessary.</p><p id="p-0059" num="0058">For example, when the build target platform is Oculus, a screen rendered by a main camera may be rendered in stereo in the development software without additional processing. On the contrary, when the build target platform is Google, the above function is not provided by the development software, so a separate rendering camera may be disposed to set a rendering environment.</p><p id="p-0060" num="0059">For another example, during processing an overlay UI using a canvas, two images may appear when the UI is excessively close. At this point, when the build target platform is Oculus, the problem may be solved by using Monoscopic as its own option. However, because the Monoscopic option is not provided when the build target platform is Google, the problem may be solved by applying an additional script corresponding to the Monoscopic option to the camera. The above example is only an example according to one embodiment, and does not limit the scope of the present invention.</p><p id="p-0061" num="0060">Next, the build environment may be set based on the build target platform (S<b>420</b>).</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an operational flow chart showing a method for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention.</p><p id="p-0063" num="0062">Refer to <figref idref="DRAWINGS">FIG. <b>5</b></figref> according to the method for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention. First, a build setting value of the development software may be changed to a build setting value corresponding to the build target platform (S<b>510</b>).</p><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram showing an example of a build setting screen of development software. The build setting value of the development software may be changed to a build setting value corresponding to the build target platform on the build setting screen.</p><p id="p-0065" num="0064">For example, when the build target platform is Oculus, &#x201c;OCULUS&#x201d; may be inputted to the item Scripting Define Symbol <b>711</b> in Other Settings <b>710</b>. In addition, items Configuration of XR Settings <b>720</b>, Publishing Settings <b>730</b>, and Other Settings <b>710</b> may be changed to the build setting values corresponding to Oculus as the build target platform. The above example is only an example according to one embodiment, and does not limit the scope of the present invention.</p><p id="p-0066" num="0065">Next, a manifest file included in the source code may be overwritten with a manifest file corresponding to the build target platform (S<b>520</b>).</p><p id="p-0067" num="0066">Before the overwriting with the manifest file, the method may include storing a first manifest file corresponding to each of the platforms in a first folder that is not included in the build. In addition, step S<b>520</b> may include overwriting a second manifest file corresponding to the build target platform among the first manifest files in a folder in which the manifest file included in the source code is located.</p><p id="p-0068" num="0067">For example, referring to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the first manifest file corresponding to each of the platforms may be stored in a specific folder (such as a folder Unity Editor). The specific folder may be a first folder that is not included in the build. In addition, during build, the second manifest file corresponding to the build target platform may be overwritten in another folder (such as a folder Unity Plugins) in which the manifest file included in the source code is located. At this point, other files (such as a file Keystore) may be pasted together in addition to the manifest file. The file Keystore may be overwritten while overwriting the manifest file.</p><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flow chart showing in the case of using the apparatus for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention.</p><p id="p-0070" num="0069">Referring to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, it can be seen that multiple SDKs, such as Oculus, Google and Pico, are imported into the development software through the interface of the apparatus for providing the platform-integrated SDK according to the present invention.</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a view showing a computer system according to one embodiment of the present invention.</p><p id="p-0072" num="0071">The apparatus for providing a platform-integrated SDK capable of developing multiple platforms with single source code according to one embodiment of the present invention may be implemented in a computer system <b>1000</b> such as a computer-readable recording medium.</p><p id="p-0073" num="0072">Referring to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the computer system <b>1000</b> may include at least one processor <b>1010</b>, memory <b>1030</b>, user interface input device <b>1040</b>, user interface output device <b>1050</b>, and storage <b>1060</b> that communicate with each other via a bus <b>1020</b>. In addition, the computer system <b>1000</b> may further include a network interface <b>1070</b> connected to network <b>1080</b>. The processor <b>1010</b> may be a central processing unit or a semiconductor device that executes processing instructions stored in the memory <b>1030</b> or the storage <b>1060</b>. The memory <b>1030</b> and the storage <b>1060</b> may include various forms of volatile or non-volatile storage media. For example, the memory may include ROM <b>1031</b> or RAM <b>1032</b>.</p><p id="p-0074" num="0073">The specific implementations described in the present invention merely are embodiments, and do not intended to limit the scope of the present invention in any case. For clarity of the specification, the description of conventional electronic components, control systems, software, and other functional aspects of the above systems may be omitted. In addition, the connections or connecting members of lines between the components shown in the drawings exemplify functional connections and/or physical or circuit-wise connections, and alternative or additional various functional connections, physical connections, or circuit-wise connections may be embodied in actual devices. In addition, the corresponding component may not be required for applying the present invention, unless specifically stated as &#x201c;essential&#x201d;, &#x201c;important&#x201d;, or the like.</p><p id="p-0075" num="0074">Accordingly, the spirit of the present invention will not be limited to the embodiments described above, and the claims described below and all ranges equivalent to or modified from the claims will fall within the scope of the spirit of the present invention.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for providing a platform-integrated SDK capable of developing multiple platforms with single source code, the method comprising:<claim-text>receiving, from a user, a build instruction in which any one of the multiple platforms is designated as a build target platform, with respect to source code integrally written for the multiple platforms;</claim-text><claim-text>importing a software development kit (SDK), among pre-stored SDKs, corresponding to the build target platform;</claim-text><claim-text>building the source code after the SDK is imported; and</claim-text><claim-text>providing the built object file to the user.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the source code includes in-app purchase processing code, and the in-app purchase processing code includes code in which a child class is overridden to branch an in-app purchase processing operation through a first preprocessor when the any one of the platforms is designated as the build target platform.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the importing of the SDK includes:<claim-text>determining whether code bases of the platforms are similar to each other; and</claim-text><claim-text>deciding an SDK import scheme based on whether the code bases are similar to each other, and</claim-text><claim-text>further includes:</claim-text><claim-text>setting a rendering environment based on the build target platform after the importing of the SDK; and</claim-text><claim-text>setting a build environment based on the build target platform.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the deciding of the SDK import scheme based on whether the code bases are similar to each other includes:<claim-text>importing a first SDK corresponding to each of the platforms together when the code bases of the platforms are similar to each other, and adding code for allowing an application of components included in the first SDK to be branched through a second preprocessor when the any one of the platforms is designated as the build target platform; or</claim-text><claim-text>importing only a second SDK corresponding to the build target platform when the code bases of the platforms are not similar to each other.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the setting of the rendering environment includes disposing a rendering camera included in the SDK corresponding to the build target platform.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the source code further includes rendering processing code, and the rendering processing code includes code for allowing a rendering processing operation to be branched through the first preprocessor.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the setting of the build environment includes:<claim-text>changing a build setting value of development software to a build setting value corresponding to the build target platform; and</claim-text><claim-text>overwriting a manifest file included in the source code with a manifest file corresponding to the build target platform.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:<claim-text>storing a first manifest file corresponding to each of the platforms in a first folder that is not included in the build, before the overwriting with the manifest file, wherein</claim-text><claim-text>the overwriting with the manifest file includes overwriting a second manifest file corresponding to the build target platform among the first manifest files in a folder in which the manifest file included in the source code is located.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein SDKs corresponding to the platforms are compressed and stored in the pre-stored SDKs, respectively.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. An apparatus for providing a platform-integrated SDK capable of developing multiple platforms with single source code, the apparatus comprising:<claim-text>a memory in which at least one program is recorded; and</claim-text><claim-text>a processor for executing the program, wherein</claim-text><claim-text>the program includes instructions for executing:</claim-text><claim-text>receiving, from a user, a build instruction in which any one of the multiple platforms is designated as a build target platform, with respect to source code integrally written for the multiple platforms;</claim-text><claim-text>importing a software development kit (SDK), among pre-stored SDKs, corresponding to the build target platform;</claim-text><claim-text>building the source code after the SDK is imported; and</claim-text><claim-text>providing the built object file to the user.</claim-text></claim-text></claim></claims></us-patent-application>