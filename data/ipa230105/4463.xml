<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004464A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004464</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17900596</doc-number><date>20220831</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>14</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1451</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>067</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0619</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1464</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>065</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1435</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2201</main-group><subgroup>84</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SNAPSHOT COMMITMENT IN A DISTRIBUTED SYSTEM</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15644391</doc-number><date>20170707</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11467913</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17900596</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62516597</doc-number><date>20170607</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Pure Storage, Inc.</orgname><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Karr</last-name><first-name>Ronald</first-name><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Lee</last-name><first-name>Robert</first-name><address><city>San Carlos</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Ostrovsky</last-name><first-name>Igor</first-name><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Lee</last-name><first-name>Robert</first-name><address><city>San Carlos</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method for snapshots with crash consistency is provided. The method includes indicating intent to create a snapshot of storage system contents associated with an existing snapshot copy identifier, responsive to confirmation that all of a plurality of distributed agents are in a snapshot creation mode. The method includes responding, with a new snapshot copy identifier that replaces the existing snapshot copy identifier, to one or more inquiries from the plurality of distributed agents regarding one or more I/O operations, after the indicating the intent to create the snapshot. The method includes creating the snapshot using the existing snapshot copy identifier and committing the snapshot, responsive to receiving responses from the plurality of distributed agents that service is complete for all I/O operations that started before the indicating the intent to create the snapshot or that are associated with the existing snapshot copy identifier.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="109.64mm" wi="158.75mm" file="US20230004464A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="226.14mm" wi="172.47mm" orientation="landscape" file="US20230004464A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="202.10mm" wi="147.91mm" orientation="landscape" file="US20230004464A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="223.52mm" wi="144.27mm" orientation="landscape" file="US20230004464A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="224.79mm" wi="162.90mm" orientation="landscape" file="US20230004464A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="210.65mm" wi="136.06mm" orientation="landscape" file="US20230004464A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="187.71mm" wi="147.91mm" orientation="landscape" file="US20230004464A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="231.82mm" wi="168.99mm" file="US20230004464A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="186.01mm" wi="172.21mm" file="US20230004464A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="214.55mm" wi="159.00mm" orientation="landscape" file="US20230004464A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="224.54mm" wi="171.53mm" file="US20230004464A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="219.71mm" wi="155.19mm" file="US20230004464A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="199.22mm" wi="139.28mm" file="US20230004464A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="151.05mm" wi="136.99mm" file="US20230004464A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="224.37mm" wi="131.49mm" file="US20230004464A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="191.18mm" wi="153.08mm" file="US20230004464A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="196.43mm" wi="121.84mm" orientation="landscape" file="US20230004464A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="152.57mm" wi="148.84mm" file="US20230004464A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="215.98mm" wi="152.32mm" file="US20230004464A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="165.02mm" wi="155.45mm" orientation="landscape" file="US20230004464A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="129.79mm" wi="118.96mm" file="US20230004464A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="151.38mm" wi="157.06mm" file="US20230004464A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="166.29mm" wi="147.07mm" file="US20230004464A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">Snapshots, to record system state of stored data or metadata at a specific moment in time, might seem straightforward in some storage systems. However, in distributed storage systems, with distributed agents, there are issues with coherency of data views from one snapshot to the next, and problems to solve for system efficiency and consistency of results in cases of system disruption. When making a snapshot in a distributed storage system, it is desirable to have a consistent view of the file system and to have that consistent view be reliable even if there is a crash. One mechanism for making a snapshot would be to stop all agents in the distributed storage system, make the snapshot, then allow all agents to continue operation. But, such an approach is both disruptive to system activity and not guaranteed to recover gracefully or consistently after a crash in a distributed system. Therefore, there is a need in the art for a solution which overcomes the drawbacks described above.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0003" num="0002">In some embodiments, a method for snapshots with crash consistency, performed by one or more processors of a storage system, is provided. The method includes indicating intent to create a snapshot of storage system contents associated with an existing snapshot copy identifier, responsive to confirmation that all of a plurality of distributed agents of the storage system are in a snapshot creation mode. The method includes responding, with a new snapshot copy identifier that replaces the existing snapshot copy identifier, to one or more inquiries from the plurality of distributed agents regarding one or more I/O operations, after the indicating the intent to create the snapshot. The method includes creating the snapshot using the existing snapshot copy identifier and committing the snapshot and exiting the snapshot creation mode, responsive to receiving responses from the plurality of distributed agents that service is complete for all I/O operations that started before the indicating the intent to create the snapshot or that are associated with the existing snapshot copy identifier. A computer readable medium having executable instructions that cause a processor to execute the method and a storage system supporting the method are also included.</p><p id="p-0004" num="0003">Other aspects and advantages of the embodiments will become apparent from the following detailed description taken in conjunction with the accompanying drawings which illustrate, by way of example, the principles of the described embodiments.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004">The described embodiments and the advantages thereof may best be understood by reference to the following description taken in conjunction with the accompanying drawings. These drawings in no way limit any changes in form and detail that may be made to the described embodiments by one skilled in the art without departing from the spirit and scope of the described embodiments.</p><p id="p-0006" num="0005">The present disclosure is illustrated by way of example, and not by way of limitation, and can be more fully understood with reference to the following detailed description when considered in connection with the figures as described below.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> illustrates a first example system for data storage in accordance with some implementations.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates a second example system for data storage in accordance with some implementations.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b>C</figref> illustrates a third example system for data storage in accordance with some implementations.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b>D</figref> illustrates a fourth example system for data storage in accordance with some implementations.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a perspective view of a storage cluster with multiple storage nodes and internal storage coupled to each storage node to provide network attached storage, in accordance with some embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram showing an interconnect switch coupling multiple storage nodes in accordance with some embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a multiple level block diagram, showing contents of a storage node and contents of one of the non-volatile solid state storage units in accordance with some embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a storage server environment, which uses embodiments of the storage nodes and storage units of <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>3</b></figref> in accordance with some embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>2</b>E</figref> is a blade hardware block diagram, showing a control plane, compute and storage planes, and authorities interacting with underlying physical resources, in accordance with some embodiments.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>2</b>F</figref> depicts elasticity software layers in blades of a storage cluster, in accordance with some embodiments.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>2</b>G</figref> depicts authorities and storage resources in blades of a storage cluster, in accordance with some embodiments.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> sets forth a diagram of a storage system that is coupled for data communications with a cloud services provider in accordance with some embodiments of the present disclosure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> sets forth a diagram of a storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a storage cluster with storage nodes and authorities as distributed agents, and a snapshot director that manages snapshot identifiers for snapshots.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> shows authorities in the storage cluster using an existing snapshot copy ID when servicing remote procedure calls in accordance with some embodiments.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> illustrates the snapshot director of <figref idref="DRAWINGS">FIG. <b>4</b></figref> issuing a snapshot precommit to authorities in the storage cluster, and the authorities entering snapshot creation mode in accordance with some embodiments.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>5</b>C</figref> depicts snapshot creation mode, where various authorities are completing I/O operations, confirming and entering snapshot creation mode, or inquiring as to which snapshot copy ID to use when servicing a remote procedure call in accordance with some embodiments.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>5</b>D</figref> shows the snapshot director receiving confirmation that all authorities are in snapshot creation mode, issuing a notion to record an intent to create a snapshot, and switching over to a new snapshot copy ID in accordance with some embodiments.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>5</b>E</figref> shows authorities completing remote procedure call services and I/O operations associated with the existing snapshot ID, and using the new snapshot copy ID for any new remote procedure call servicing in accordance with some embodiments.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>5</b>F</figref> illustrates completing the snapshot in accordance with some embodiments.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>6</b>A</figref> shows an authority failover scenario, in which it is determined which file systems are in snapshot create mode in accordance with some embodiments.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>6</b>B</figref> shows a snapshot director failover scenario, before snapshot precommit in accordance with some embodiments.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>6</b>C</figref> shows a snapshot director failover scenario, after snapshot precommit in accordance with some embodiments.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow diagram of a method for snapshots with crash consistency, which can be performed by various embodiments of storage clusters with authorities as described herein, or other storage systems with distributed agents in accordance with some embodiments.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is an illustration showing an exemplary computing device which may implement the embodiments described herein.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0032" num="0031">Various embodiments of storage systems are described herein (in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b></figref>), including storage arrays (in <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref>), storage clusters (in <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>3</b>B</figref>) with authorities as distributed agents, and versions of a storage cluster (in <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>7</b></figref>) with distributed agents and a snapshot director for making snapshots with crash consistency. In some embodiments, one agent (e.g., an authority) in a storage system that has distributed agents is designated the snapshot coordinator (also known as snapshot director or centralized authority or agent). When a snapshot is requested, the snapshot coordinator notifies all agents (e.g., authorities) to enter snapshot create mode. Each agent (or authority) in snapshot create mode, if servicing a remote procedure call (RPC), asks for a snapshot copy ID (identifier). The snapshot coordinator returns the pre-snapshot copy ID (i.e., the snapshot copy ID in existence prior to the request for the snapshot), which the agent uses to identify any data being committed prior to the snapshot. Upon receiving responses that all agents (or authorities) are in snapshot create mode, the snapshot director records intent to create the snapshot. The snapshot director responds to any requests for snapshot copy ID, from any agents (or authorities) servicing remote procedure calls, with a new snapshot ID.</p><p id="p-0033" num="0032">The snapshot director notifies all agents (or authorities) to quiesce, for the snapshot in some embodiments. Each receiving agent (or authority) completes any in-flight pre-snapshot remote procedure calls, then responds to the snapshot director (i.e., confirming that the agent or authority is quiescing or quiescent, not actively working on remote procedure call servicing). Upon receiving responses that all agents or authorities are quiescent, the snapshot director notifies all agents or authorities that the new snapshot is visible, and commits the newly created snapshot. Agents (or authorities) allow read-only access to the snapshot in some embodiments. The snapshot director acknowledges the snapshot creation to the client. An agent (or authority) failover scenario has a snapshot service, on startup, querying the snapshot director to determine which file systems are in snapshot create mode. A snapshot director failover before pre-commit scenario has the snapshot director, on startup, not finding any record of snapshot in some embodiments. The snapshot director responds with an error response, e.g., &#x201c;no snapshot creation in-flight&#x201d;. A snapshot director failover after precommit scenario has the snapshot director, on startup, finding a precommit record of the snapshot in some embodiments. The snapshot director notifies all agents (or authorities) to quiesce, so that the agents (or authorities) can complete servicing any in-flight pre-snapshot copy ID remote procedure calls. Upon receiving responses that all agents or authorities are quiescent, the snapshot director proceeds with the snapshot as above. Additional embodiments distinct from the fully-quiescing techniques mentioned above are described with regard to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>7</b></figref> below.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> illustrates an example system for data storage, in accordance with some implementations. System <b>100</b> (also referred to as &#x201c;storage system&#x201d; herein) includes numerous elements for purposes of illustration rather than limitation. It may be noted that system <b>100</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations.</p><p id="p-0035" num="0034">System <b>100</b> includes a number of computing devices <b>164</b>. Computing devices (also referred to as &#x201c;client devices&#x201d; herein) may be for example, a server in a data center, a workstation, a personal computer, a notebook, or the like. Computing devices <b>164</b> are coupled for data communications to one or more storage arrays <b>102</b> through a storage area network (SAN) <b>158</b> or a local area network (LAN) <b>160</b>.</p><p id="p-0036" num="0035">The SAN <b>158</b> may be implemented with a variety of data communications fabrics, devices, and protocols. For example, the fabrics for SAN <b>158</b> may include Fibre Channel, Ethernet, Infiniband, Serial Attached Small Computer System Interface (SAS), or the like. Data communications protocols for use with SAN <b>158</b> may include Advanced Technology Attachment (ATA), Fibre Channel Protocol, Small Computer System Interface (SCSI), Internet Small Computer System Interface (iSCSI), HyperSCSI, Non-Volatile Memory Express (NVMe) over Fabrics, or the like. It may be noted that SAN <b>158</b> is provided for illustration, rather than limitation. Other data communication couplings may be implemented between computing devices <b>164</b> and storage arrays <b>102</b>.</p><p id="p-0037" num="0036">The LAN <b>160</b> may also be implemented with a variety of fabrics, devices, and protocols. For example, the fabrics for LAN <b>160</b> may include Ethernet (<b>802</b>.<b>3</b>), wireless (<b>802</b>.<b>11</b>), or the like. Data communication protocols for use in LAN <b>160</b> may include Transmission Control Protocol (TCP), User Datagram Protocol (UDP), Internet Protocol (IP), HyperText Transfer Protocol (HTTP), Wireless Access Protocol (WAP), Handheld Device Transport Protocol (HDTP), Session Initiation Protocol (SIP), Real Time Protocol (RTP), or the like.</p><p id="p-0038" num="0037">Storage arrays <b>102</b> may provide persistent data storage for the computing devices <b>164</b>. Storage array <b>102</b>A may be contained in a chassis (not shown), and storage array <b>102</b>B may be contained in another chassis (not shown), in implementations. Storage array <b>102</b>A and <b>102</b>B may include one or more storage array controllers <b>110</b> (also referred to as &#x201c;controller&#x201d; herein). A storage array controller <b>110</b> may be embodied as a module of automated computing machinery comprising computer hardware, computer software, or a combination of computer hardware and software. In some implementations, the storage array controllers <b>110</b> may be configured to carry out various storage tasks. Storage tasks may include writing data received from the computing devices <b>164</b> to storage array <b>102</b>, erasing data from storage array <b>102</b>, retrieving data from storage array <b>102</b> and providing data to computing devices <b>164</b>, monitoring and reporting of disk utilization and performance, performing redundancy operations, such as Redundant Array of Independent Drives (RAID) or RAID-like data redundancy operations, compressing data, encrypting data, and so forth.</p><p id="p-0039" num="0038">Storage array controller <b>110</b> may be implemented in a variety of ways, including as a Field Programmable Gate Array (FPGA), a Programmable Logic Chip (PLC), an Application Specific Integrated Circuit (ASIC), System-on-Chip (SOC), or any computing device that includes discrete components such as a processing device, central processing unit, computer memory, or various adapters. Storage array controller <b>110</b> may include, for example, a data communications adapter configured to support communications via the SAN <b>158</b> or LAN <b>160</b>. In some implementations, storage array controller <b>110</b> may be independently coupled to the LAN <b>160</b>. In implementations, storage array controller <b>110</b> may include an I/O controller or the like that couples the storage array controller <b>110</b> for data communications, through a midplane (not shown), to a persistent storage resource <b>170</b> (also referred to as a &#x201c;storage resource&#x201d; herein). The persistent storage resource <b>170</b> main include any number of storage drives <b>171</b> (also referred to as &#x201c;storage devices&#x201d; herein) and any number of non-volatile Random Access Memory (NVRAM) devices (not shown).</p><p id="p-0040" num="0039">In some implementations, the NVRAM devices of a persistent storage resource <b>170</b> may be configured to receive, from the storage array controller <b>110</b>, data to be stored in the storage drives <b>171</b>. In some examples, the data may originate from computing devices <b>164</b>. In some examples, writing data to the NVRAM device may be carried out more quickly than directly writing data to the storage drive <b>171</b>. In implementations, the storage array controller <b>110</b> may be configured to utilize the NVRAM devices as a quickly accessible buffer for data destined to be written to the storage drives <b>171</b>. Latency for write requests using NVRAM devices as a buffer may be improved relative to a system in which a storage array controller <b>110</b> writes data directly to the storage drives <b>171</b>. In some implementations, the NVRAM devices may be implemented with computer memory in the form of high bandwidth, low latency RAM. The NVRAM device is referred to as &#x201c;non-volatile&#x201d; because the NVRAM device may receive or include a unique power source that maintains the state of the RAM after main power loss to the NVRAM device. Such a power source may be a battery, one or more capacitors, or the like. In response to a power loss, the NVRAM device may be configured to write the contents of the RAM to a persistent storage, such as the storage drives <b>171</b>.</p><p id="p-0041" num="0040">In implementations, storage drive <b>171</b> may refer to any device configured to record data persistently, where &#x201c;persistently&#x201d; or &#x201c;persistent&#x201d; refers as to a device's ability to maintain recorded data after loss of power. In some implementations, storage drive <b>171</b> may correspond to non-disk storage media. For example, the storage drive <b>171</b> may be one or more solid-state drives (SSDs), flash memory based storage, any type of solid-state non-volatile memory, or any other type of non-mechanical storage device. In other implementations, storage drive <b>171</b> may include may include mechanical or spinning hard disk, such as hard-disk drives (HDD).</p><p id="p-0042" num="0041">In some implementations, the storage array controllers <b>110</b> may be configured for offloading device management responsibilities from storage drive <b>171</b> in storage array <b>102</b>. For example, storage array controllers <b>110</b> may manage control information that may describe the state of one or more memory blocks in the storage drives <b>171</b>. The control information may indicate, for example, that a particular memory block has failed and should no longer be written to, that a particular memory block contains boot code for a storage array controller <b>110</b>, the number of program-erase (P/E) cycles that have been performed on a particular memory block, the age of data stored in a particular memory block, the type of data that is stored in a particular memory block, and so forth. In some implementations, the control information may be stored with an associated memory block as metadata. In other implementations, the control information for the storage drives <b>171</b> may be stored in one or more particular memory blocks of the storage drives <b>171</b> that are selected by the storage array controller <b>110</b>. The selected memory blocks may be tagged with an identifier indicating that the selected memory block contains control information. The identifier may be utilized by the storage array controllers <b>110</b> in conjunction with storage drives <b>171</b> to quickly identify the memory blocks that contain control information. For example, the storage controllers <b>110</b> may issue a command to locate memory blocks that contain control information. It may be noted that control information may be so large that parts of the control information may be stored in multiple locations, that the control information may be stored in multiple locations for purposes of redundancy, for example, or that the control information may otherwise be distributed across multiple memory blocks in the storage drive <b>171</b>.</p><p id="p-0043" num="0042">In implementations, storage array controllers <b>110</b> may offload device management responsibilities from storage drives <b>171</b> of storage array <b>102</b> by retrieving, from the storage drives <b>171</b>, control information describing the state of one or more memory blocks in the storage drives <b>171</b>. Retrieving the control information from the storage drives <b>171</b> may be carried out, for example, by the storage array controller <b>110</b> querying the storage drives <b>171</b> for the location of control information for a particular storage drive <b>171</b>. The storage drives <b>171</b> may be configured to execute instructions that enable the storage drive <b>171</b> to identify the location of the control information. The instructions may be executed by a controller (not shown) associated with or otherwise located on the storage drive <b>171</b> and may cause the storage drive <b>171</b> to scan a portion of each memory block to identify the memory blocks that store control information for the storage drives <b>171</b>. The storage drives <b>171</b> may respond by sending a response message to the storage array controller <b>110</b> that includes the location of control information for the storage drive <b>171</b>. Responsive to receiving the response message, storage array controllers <b>110</b> may issue a request to read data stored at the address associated with the location of control information for the storage drives <b>171</b>.</p><p id="p-0044" num="0043">In other implementations, the storage array controllers <b>110</b> may further offload device management responsibilities from storage drives <b>171</b> by performing, in response to receiving the control information, a storage drive management operation. A storage drive management operation may include, for example, an operation that is typically performed by the storage drive <b>171</b> (e.g., the controller (not shown) associated with a particular storage drive <b>171</b>). A storage drive management operation may include, for example, ensuring that data is not written to failed memory blocks within the storage drive <b>171</b>, ensuring that data is written to memory blocks within the storage drive <b>171</b> in such a way that adequate wear leveling is achieved, and so forth.</p><p id="p-0045" num="0044">In implementations, storage array <b>102</b> may implement two or more storage array controllers <b>110</b>. For example, storage array <b>102</b>A may include storage array controllers <b>110</b>A and storage array controllers <b>110</b>B. At a given instance, a single storage array controller <b>110</b> (e.g., storage array controller <b>110</b>A) of a storage system <b>100</b> may be designated with primary status (also referred to as &#x201c;primary controller&#x201d; herein), and other storage array controllers <b>110</b> (e.g., storage array controller <b>110</b>A) may be designated with secondary status (also referred to as &#x201c;secondary controller&#x201d; herein). The primary controller may have particular rights, such as permission to alter data in persistent storage resource <b>170</b> (e.g., writing data to persistent storage resource <b>170</b>). At least some of the rights of the primary controller may supersede the rights of the secondary controller. For instance, the secondary controller may not have permission to alter data in persistent storage resource <b>170</b> when the primary controller has the right. The status of storage array controllers <b>110</b> may change. For example, storage array controller <b>110</b>A may be designated with secondary status, and storage array controller <b>110</b>B may be designated with primary status.</p><p id="p-0046" num="0045">In some implementations, a primary controller, such as storage array controller <b>110</b>A, may serve as the primary controller for one or more storage arrays <b>102</b>, and a second controller, such as storage array controller <b>110</b>B, may serve as the secondary controller for the one or more storage arrays <b>102</b>. For example, storage array controller <b>110</b>A may be the primary controller for storage array <b>102</b>A and storage array <b>102</b>B, and storage array controller <b>110</b>B may be the secondary controller for storage array <b>102</b>A and <b>102</b>B. In some implementations, storage array controllers <b>110</b>C and <b>110</b>D (also referred to as &#x201c;storage processing modules&#x201d;) may neither have primary or secondary status. Storage array controllers <b>110</b>C and <b>110</b>D, implemented as storage processing modules, may act as a communication interface between the primary and secondary controllers (e.g., storage array controllers <b>110</b>A and <b>110</b>B, respectively) and storage array <b>102</b>B. For example, storage array controller <b>110</b>A of storage array <b>102</b>A may send a write request, via SAN <b>158</b>, to storage array <b>102</b>B. The write request may be received by both storage array controllers <b>110</b>C and <b>110</b>D of storage array <b>102</b>B. Storage array controllers <b>110</b>C and <b>110</b>D facilitate the communication, e.g., send the write request to the appropriate storage drive <b>171</b>. It may be noted that in some implementations storage processing modules may be used to increase the number of storage drives controlled by the primary and secondary controllers.</p><p id="p-0047" num="0046">In implementations, storage array controllers <b>110</b> are communicatively coupled, via a midplane (not shown), to one or more storage drives <b>171</b> and to one or more NVRAM devices (not shown) that are included as part of a storage array <b>102</b>. The storage array controllers <b>110</b> may be coupled to the midplane via one or more data communication links and the midplane may be coupled to the storage drives <b>171</b> and the NVRAM devices via one or more data communications links. The data communications links described herein are collectively illustrated by data communications links <b>108</b> and may include a Peripheral Component Interconnect Express (PCIe) bus, for example.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates an example system for data storage, in accordance with some implementations. Storage array controller <b>101</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref> may similar to the storage array controllers <b>110</b> described with respect to <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. In one example, storage array controller <b>101</b> may be similar to storage array controller <b>110</b>A or storage array controller <b>110</b>B. Storage array controller <b>101</b> includes numerous elements for purposes of illustration rather than limitation. It may be noted that storage array controller <b>101</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations. It may be noted that elements of <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> may be included below to help illustrate features of storage array controller <b>101</b>.</p><p id="p-0049" num="0048">Storage array controller <b>101</b> may include one or more processing devices <b>104</b> and random access memory (RAM) <b>111</b>. Processing device <b>104</b> (or controller <b>101</b>) represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device <b>104</b> (or controller <b>101</b>) may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device <b>104</b> (or controller <b>101</b>) may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like.</p><p id="p-0050" num="0049">The processing device <b>104</b> may be connected to the RAM <b>111</b> via a data communications link <b>106</b>, which may be embodied as a high speed memory bus such as a Double-Data Rate 4 (DDR4) bus. Stored in RAM <b>111</b> is an operating system <b>112</b>. In some implementations, instructions <b>113</b> are stored in RAM <b>111</b>. Instructions <b>113</b> may include computer program instructions for performing operations in in a direct-mapped flash storage system. In one embodiment, a direct-mapped flash storage system is one that that addresses data blocks within flash drives directly and without an address translation performed by the storage controllers of the flash drives.</p><p id="p-0051" num="0050">In implementations, storage array controller <b>101</b> includes one or more host bus adapters <b>103</b> that are coupled to the processing device <b>104</b> via a data communications link <b>105</b>. In implementations, host bus adapters <b>103</b> may be computer hardware that connects a host system (e.g., the storage array controller) to other network and storage arrays. In some examples, host bus adapters <b>103</b> may be a Fibre Channel adapter that enables the storage array controller <b>101</b> to connect to a SAN, an Ethernet adapter that enables the storage array controller <b>101</b> to connect to a LAN, or the like. Host bus adapters <b>103</b> may be coupled to the processing device <b>104</b> via a data communications link <b>105</b> such as, for example, a PCIe bus.</p><p id="p-0052" num="0051">In implementations, storage array controller <b>101</b> may include a host bus adapter <b>114</b> that is coupled to an expander <b>115</b>. The expander <b>115</b> may be used to attach a host system to a larger number of storage drives. The expander <b>115</b> may, for example, be a SAS expander utilized to enable the host bus adapter <b>114</b> to attach to storage drives in an implementation where the host bus adapter <b>114</b> is embodied as a SAS controller.</p><p id="p-0053" num="0052">In implementations, storage array controller <b>101</b> may include a switch <b>116</b> coupled to the processing device <b>104</b> via a data communications link <b>109</b>. The switch <b>116</b> may be a computer hardware device that can create multiple endpoints out of a single endpoint, thereby enabling multiple devices to share a single endpoint. The switch <b>116</b> may, for example, be a PCIe switch that is coupled to a PCIe bus (e.g., data communications link <b>109</b>) and presents multiple PCIe connection points to the midplane.</p><p id="p-0054" num="0053">In implementations, storage array controller <b>101</b> includes a data communications link <b>107</b> for coupling the storage array controller <b>101</b> to other storage array controllers. In some examples, data communications link <b>107</b> may be a QuickPath Interconnect (QPI) interconnect.</p><p id="p-0055" num="0054">A traditional storage system that uses traditional flash drives may implement a process across the flash drives that are part of the traditional storage system. For example, a higher level process of the storage system may initiate and control a process across the flash drives. However, a flash drive of the traditional storage system may include its own storage controller that also performs the process. Thus, for the traditional storage system, a higher level process (e.g., initiated by the storage system) and a lower level process (e.g., initiated by a storage controller of the storage system) may both be performed.</p><p id="p-0056" num="0055">To resolve various deficiencies of a traditional storage system, operations may be performed by higher level processes and not by the lower level processes. For example, the flash storage system may include flash drives that do not include storage controllers that provide the process. Thus, the operating system of the flash storage system itself may initiate and control the process. This may be accomplished by a direct-mapped flash storage system that addresses data blocks within the flash drives directly and without an address translation performed by the storage controllers of the flash drives.</p><p id="p-0057" num="0056">The operating system of the flash storage system may identify and maintain a list of allocation units across multiple flash drives of the flash storage system. The allocation units may be entire erase blocks or multiple erase blocks. The operating system may maintain a map or address range that directly maps addresses to erase blocks of the flash drives of the flash storage system.</p><p id="p-0058" num="0057">Direct mapping to the erase blocks of the flash drives may be used to rewrite data and erase data. For example, the operations may be performed on one or more allocation units that include a first data and a second data where the first data is to be retained and the second data is no longer being used by the flash storage system. The operating system may initiate the process to write the first data to new locations within other allocation units and erasing the second data and marking the allocation units as being available for use for subsequent data. Thus, the process may only be performed by the higher level operating system of the flash storage system without an additional lower level process being performed by controllers of the flash drives.</p><p id="p-0059" num="0058">Advantages of the process being performed only by the operating system of the flash storage system include increased reliability of the flash drives of the flash storage system as unnecessary or redundant write operations are not being performed during the process. One possible point of novelty here is the concept of initiating and controlling the process at the operating system of the flash storage system. In addition, the process can be controlled by the operating system across multiple flash drives. This is contrast to the process being performed by a storage controller of a flash drive.</p><p id="p-0060" num="0059">A storage system can consist of two storage array controllers that share a set of drives for failover purposes, or it could consist of a single storage array controller that provides a storage service that utilizes multiple drives, or it could consist of a distributed network of storage array controllers each with some number of drives or some amount of Flash storage where the storage array controllers in the network collaborate to provide a complete storage service and collaborate on various aspects of a storage service including storage allocation and garbage collection.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>1</b>C</figref> illustrates a third example system <b>117</b> for data storage in accordance with some implementations. System <b>117</b> (also referred to as &#x201c;storage system&#x201d; herein) includes numerous elements for purposes of illustration rather than limitation. It may be noted that system <b>117</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations.</p><p id="p-0062" num="0061">In one embodiment, system <b>117</b> includes a dual Peripheral Component Interconnect (PCI) flash storage device <b>118</b> with separately addressable fast write storage. System <b>117</b> may include a storage controller <b>119</b>. In one embodiment, storage controller <b>119</b> may be a CPU, ASIC, FPGA, or any other circuitry that may implement control structures necessary according to the present disclosure. In one embodiment, system <b>117</b> includes flash memory devices (e.g., including flash memory devices <b>120</b><i>a</i>-<i>n</i>), operatively coupled to various channels of the storage device controller <b>119</b>. Flash memory devices <b>120</b><i>a</i>-<i>n</i>, may be presented to the controller <b>119</b> as an addressable collection of Flash pages, erase blocks, and/or control elements sufficient to allow the storage device controller <b>119</b> to program and retrieve various aspects of the Flash. In one embodiment, storage device controller <b>119</b> may perform operations on flash memory devices <b>120</b>A-N including storing and retrieving data content of pages, arranging and erasing any blocks, tracking statistics related to the use and reuse of Flash memory pages, erase blocks, and cells, tracking and predicting error codes and faults within the Flash memory, controlling voltage levels associated with programming and retrieving contents of Flash cells, etc.</p><p id="p-0063" num="0062">In one embodiment, system <b>117</b> may include random access memory (RAM) <b>121</b> to store separately addressable fast-write data. In one embodiment, RAM <b>121</b> may be one or more separate discrete devices. In another embodiment, RAM <b>121</b> may be integrated into storage device controller <b>119</b> or multiple storage device controllers. The RAM <b>121</b> may be utilized for other purposes as well, such as temporary program memory for a processing device (E.g., a central processing unit (CPU)) in the storage device controller <b>119</b>.</p><p id="p-0064" num="0063">In one embodiment, system <b>119</b> may include a stored energy device <b>122</b>, such as a rechargeable battery or a capacitor. Stored energy device <b>122</b> may store energy sufficient to power the storage device controller <b>119</b>, some amount of the RAM (e.g., RAM <b>121</b>), and some amount of Flash memory (e.g., Flash memory <b>120</b><i>a</i>-<b>120</b><i>n</i>) for sufficient time to write the contents of RAM to Flash memory. In one embodiment, storage device controller <b>119</b> may write the contents of RAM to Flash Memory if the storage device controller detects loss of external power.</p><p id="p-0065" num="0064">In one embodiment, system <b>117</b> includes two data communications links <b>123</b><i>a</i>, <b>123</b><i>b</i>. In one embodiment, data communications links <b>123</b><i>a</i>, <b>123</b><i>b </i>may be PCI interfaces. In another embodiment, data communications links <b>123</b><i>a</i>, <b>123</b><i>b </i>may be based on other communications standards (e.g., HyperTransport, InfiBand, etc.). Data communications links <b>123</b><i>a</i>, <b>123</b><i>b </i>may be based on non-volatile memory express (NVMe) or NCMe over fabrics (NVMf) specifications that allow external connection to the storage device controller <b>119</b> from other components in the storage system <b>117</b>. It should be noted that data communications links may be interchangeably referred to herein as PCI buses for convenience.</p><p id="p-0066" num="0065">System <b>117</b> may also include an external power source (not shown), which may be provided over one or both data communications links <b>123</b><i>a</i>, <b>123</b><i>b</i>, or which may be provided separately. An alternative embodiment includes a separate Flash memory (not shown) dedicated for use in storing the content of RAM <b>121</b>. The storage device controller <b>119</b> may present a logical device over a PCI bus which may include an addressable fast-write logical device, or a distinct part of the logical address space of the storage device <b>118</b>, which may be presented as PCI memory or as persistent storage. In one embodiment, operations to store into the device are directed into the RAM <b>121</b>. On power failure, the storage device controller <b>119</b> may write stored content associated with the addressable fast-write logical storage to Flash memory (e.g., Flash memory <b>120</b><i>a</i>-<i>n</i>) for long-term persistent storage.</p><p id="p-0067" num="0066">In one embodiment, the logical device may include some presentation of some or all of the content of the Flash memory devices <b>120</b><i>a</i>-<i>n</i>, where that presentation allows a storage system including a storage device <b>118</b> (e.g., storage system <b>117</b>) to directly address Flash memory pages and directly reprogram erase blocks from storage system components that are external to the storage device through the PCI bus. The presentation may also allow one or more of the external components to control and retrieve other aspects of the Flash memory including some or all of: tracking statistics related to use and reuse of Flash memory pages, erase blocks, and cells across all the Flash memory devices; tracking and predicting error codes and faults within and across the Flash memory devices; controlling voltage levels associated with programming and retrieving contents of Flash cells; etc.</p><p id="p-0068" num="0067">In one embodiment, the stored energy device <b>122</b> may be sufficient to ensure completion of in-progress operations to the Flash memory devices <b>107</b><i>a</i>-<b>120</b><i>n </i>stored energy device <b>122</b> may power storage device controller <b>119</b> and associated Flash memory devices (e.g., <b>120</b><i>a</i>-<i>n</i>) for those operations, as well as for the storing of fast-write RAM to Flash memory. Stored energy device <b>122</b> may be used to store accumulated statistics and other parameters kept and tracked by the Flash memory devices <b>120</b><i>a</i>-<i>n </i>and/or the storage device controller <b>119</b>. Separate capacitors or stored energy devices (such as smaller capacitors near or embedded within the Flash memory devices themselves) may be used for some or all of the operations described herein.</p><p id="p-0069" num="0068">Various schemes may be used to track and optimize the life span of the stored energy component, such as adjusting voltage levels over time, partially discharging the storage energy device <b>122</b> to measure corresponding discharge characteristics, etc. If the available energy decreases over time, the effective available capacity of the addressable fast-write storage may be decreased to ensure that it can be written safely based on the currently available stored energy.</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. <b>1</b>D</figref> illustrates a third example system <b>124</b> for data storage in accordance with some implementations. In one embodiment, system <b>124</b> includes storage controllers <b>125</b><i>a</i>, <b>125</b><i>b</i>. In one embodiment, storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>are operatively coupled to Dual PCI storage devices <b>119</b><i>a</i>, <b>119</b><i>b </i>and <b>119</b><i>c</i>, <b>119</b><i>d</i>, respectively. Storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may be operatively coupled (e.g., via a storage network <b>130</b>) to some number of host computers <b>127</b><i>a</i>-<i>n. </i></p><p id="p-0071" num="0070">In one embodiment, two storage controllers (e.g., <b>125</b><i>a </i>and <b>125</b><i>b</i>) provide storage services, such as a small computer system interface (SCSI) block storage array, a file server, an object server, a database or data analytics service, etc. The storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may provide services through some number of network interfaces (e.g., <b>126</b><i>a</i>-<i>d</i>) to host computers <b>127</b><i>a</i>-<i>n </i>outside of the storage system <b>124</b>. Storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may provide integrated services or an application entirely within the storage system <b>124</b>, forming a converged storage and compute system. The storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may utilize the fast write memory within or across storage devices <b>119</b><i>a</i>-<i>d </i>to journal in progress operations to ensure the operations are not lost on a power failure, storage controller removal, storage controller or storage system shutdown, or some fault of one or more software or hardware components within the storage system <b>124</b>.</p><p id="p-0072" num="0071">In one embodiment, controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>operate as PCI masters to one or the other PCI buses <b>128</b><i>a</i>, <b>128</b><i>b</i>. In another embodiment, <b>128</b><i>a </i>and <b>128</b><i>b </i>may be based on other communications standards (e.g., HyperTransport, InfiBand, etc.). Other storage system embodiments may operate storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>as multi-masters for both PCI buses <b>128</b><i>a</i>, <b>128</b><i>b</i>. Alternately, a PCI/NVMe/NVMf switching infrastructure or fabric may connect multiple storage controllers. Some storage system embodiments may allow storage devices to communicate with each other directly rather than communicating only with storage controllers. In one embodiment, a storage device controller <b>119</b><i>a </i>may be operable under direction from a storage controller <b>125</b><i>a </i>to synthesize and transfer data to be stored into Flash memory devices from data that has been stored in RAM (e.g., RAM <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>). For example, a recalculated version of RAM content may be transferred after a storage controller has determined that an operation has fully committed across the storage system, or when fast-write memory on the device has reached a certain used capacity, or after a certain amount of time, to ensure improve safety of the data or to release addressable fast-write capacity for reuse. This mechanism may be used, for example, to avoid a second transfer over a bus (e.g., <b>128</b><i>a</i>, <b>128</b><i>b</i>) from the storage controllers <b>125</b><i>a</i>, <b>125</b><i>b</i>. In one embodiment, a recalculation may include compressing data, attaching indexing or other metadata, combining multiple data segments together, performing erasure code calculations, etc.</p><p id="p-0073" num="0072">In one embodiment, under direction from a storage controller <b>125</b><i>a</i>, <b>125</b><i>b</i>, a storage device controller <b>119</b><i>a</i>, <b>119</b><i>b </i>may be operable to calculate and transfer data to other storage devices from data stored in RAM (e.g., RAM <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>) without involvement of the storage controllers <b>125</b><i>a</i>, <b>125</b><i>b</i>. This operation may be used to mirror data stored in one controller <b>125</b><i>a </i>to another controller <b>125</b><i>b</i>, or it could be used to offload compression, data aggregation, and/or erasure coding calculations and transfers to storage devices to reduce load on storage controllers or the storage controller interface <b>129</b><i>a</i>, <b>129</b><i>b </i>to the PCI bus <b>128</b><i>a</i>, <b>128</b><i>b. </i></p><p id="p-0074" num="0073">A storage device controller <b>119</b> may include mechanisms for implementing high availability primitives for use by other parts of a storage system external to the Dual PCI storage device <b>118</b>. For example, reservation or exclusion primitives may be provided so that, in a storage system with two storage controllers providing a highly available storage service, one storage controller may prevent the other storage controller from accessing or continuing to access the storage device. This could be used, for example, in cases where one controller detects that the other controller is not functioning properly or where the interconnect between the two storage controllers may itself not be functioning properly.</p><p id="p-0075" num="0074">In one embodiment, a storage system for use with Dual PCI direct mapped storage devices with separately addressable fast write storage includes systems that manage erase blocks or groups of erase blocks as allocation units for storing data on behalf of the storage service, or for storing metadata (e.g., indexes, logs, etc.) associated with the storage service, or for proper management of the storage system itself. Flash pages, which may be a few kilobytes in size, may be written as data arrives or as the storage system is to persist data for long intervals of time (e.g., above a defined threshold of time). To commit data more quickly, or to reduce the number of writes to the Flash memory devices, the storage controllers may first write data into the separately addressable fast write storage on one more storage devices.</p><p id="p-0076" num="0075">In one embodiment, the storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may initiate the use of erase blocks within and across storage devices (e.g., <b>118</b>) in accordance with an age and expected remaining lifespan of the storage devices, or based on other statistics. The storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may initiate garbage collection and data migration data between storage devices in accordance with pages that are no longer needed as well as to manage Flash page and erase block lifespans and to manage overall system performance.</p><p id="p-0077" num="0076">In one embodiment, the storage system <b>124</b> may utilize mirroring and/or erasure coding schemes as part of storing data into addressable fast write storage and/or as part of writing data into allocation units associated with erase blocks. Erasure codes may be used across storage devices, as well as within erase blocks or allocation units, or within and across Flash memory devices on a single storage device, to provide redundancy against single or multiple storage device failures or to protect against internal corruptions of Flash memory pages resulting from Flash memory operations or from degradation of Flash memory cells. Mirroring and erasure coding at various levels may be used to recover from multiple types of failures that occur separately or in combination.</p><p id="p-0078" num="0077">The embodiments depicted with reference to <figref idref="DRAWINGS">FIGS. <b>2</b>A-G</figref> illustrate a storage cluster that stores user data, such as user data originating from one or more user or client systems or other sources external to the storage cluster. The storage cluster distributes user data across storage nodes housed within a chassis, or across multiple chassis, using erasure coding and redundant copies of metadata. Erasure coding refers to a method of data protection or reconstruction in which data is stored across a set of different locations, such as disks, storage nodes or geographic locations. Flash memory is one type of solid-state memory that may be integrated with the embodiments, although the embodiments may be extended to other types of solid-state memory or other storage medium, including non-solid state memory. Control of storage locations and workloads are distributed across the storage locations in a clustered peer-to-peer system. Tasks such as mediating communications between the various storage nodes, detecting when a storage node has become unavailable, and balancing I/Os (inputs and outputs) across the various storage nodes, are all handled on a distributed basis. Data is laid out or distributed across multiple storage nodes in data fragments or stripes that support data recovery in some embodiments. Ownership of data can be reassigned within a cluster, independent of input and output patterns. This architecture described in more detail below allows a storage node in the cluster to fail, with the system remaining operational, since the data can be reconstructed from other storage nodes and thus remain available for input and output operations. In various embodiments, a storage node may be referred to as a cluster node, a blade, or a server.</p><p id="p-0079" num="0078">The storage cluster may be contained within a chassis, i.e., an enclosure housing one or more storage nodes. A mechanism to provide power to each storage node, such as a power distribution bus, and a communication mechanism, such as a communication bus that enables communication between the storage nodes are included within the chassis. The storage cluster can run as an independent system in one location according to some embodiments. In one embodiment, a chassis contains at least two instances of both the power distribution and the communication bus which may be enabled or disabled independently. The internal communication bus may be an Ethernet bus, however, other technologies such as Peripheral Component Interconnect (PCI) Express, InfiniBand, and others, are equally suitable. The chassis provides a port for an external communication bus for enabling communication between multiple chassis, directly or through a switch, and with client systems. The external communication may use a technology such as Ethernet, InfiniBand, Fibre Channel, etc. In some embodiments, the external communication bus uses different communication bus technologies for inter-chassis and client communication. If a switch is deployed within or between chassis, the switch may act as a translation between multiple protocols or technologies. When multiple chassis are connected to define a storage cluster, the storage cluster may be accessed by a client using either proprietary interfaces or standard interfaces such as network file system (NFS), common internet file system (CIFS), small computer system interface (SCSI) or hypertext transfer protocol (HTTP). Translation from the client protocol may occur at the switch, chassis external communication bus or within each storage node. In some embodiments, multiple chassis may be coupled or connected to each other through an aggregator switch. A portion and/or all of the coupled or connected chassis may be designated as a storage cluster. As discussed above, each chassis can have multiple blades, each blade has a MAC (media access control) address, but the storage cluster is presented to an external network as having a single cluster IP (Internet Protocol) address and a single MAC address in some embodiments.</p><p id="p-0080" num="0079">Each storage node may be one or more storage servers and each storage server is connected to one or more non-volatile solid state memory units, which may be referred to as storage units or storage devices. One embodiment includes a single storage server in each storage node and between one to eight non-volatile solid state memory units, however this one example is not meant to be limiting. The storage server may include a processor, dynamic random access memory (DRAM) and interfaces for the internal communication bus and power distribution for each of the power buses. Inside the storage node, the interfaces and storage unit share a communication bus, e.g., PCI Express, in some embodiments. The non-volatile solid state memory units may directly access the internal communication bus interface through a storage node communication bus, or request the storage node to access the bus interface. The non-volatile solid state memory unit contains an embedded central processing unit (CPU), solid state storage controller, and a quantity of solid state mass storage, e.g., between 2-32 terabytes (TB) in some embodiments. An embedded volatile storage medium, such as DRAM, and an energy reserve apparatus are included in the non-volatile solid state memory unit. In some embodiments, the energy reserve apparatus is a capacitor, super-capacitor, or battery that enables transferring a subset of DRAM contents to a stable storage medium in the case of power loss. In some embodiments, the non-volatile solid state memory unit is constructed with a storage class memory, such as phase change or magnetoresistive random access memory (MRAM) that substitutes for DRAM and enables a reduced power hold-up apparatus.</p><p id="p-0081" num="0080">One of many features of the storage nodes and non-volatile solid state storage is the ability to proactively rebuild data in a storage cluster. The storage nodes and non-volatile solid state storage can determine when a storage node or non-volatile solid state storage in the storage cluster is unreachable, independent of whether there is an attempt to read data involving that storage node or non-volatile solid state storage. The storage nodes and non-volatile solid state storage then cooperate to recover and rebuild the data in at least partially new locations. This constitutes a proactive rebuild, in that the system rebuilds data without waiting until the data is needed for a read access initiated from a client system employing the storage cluster. These and further details of the storage memory and operation thereof are discussed below.</p><p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a perspective view of a storage cluster <b>161</b>, with multiple storage nodes <b>150</b> and internal solid-state memory coupled to each storage node to provide network attached storage or storage area network, in accordance with some embodiments. A network attached storage, storage area network, or a storage cluster, or other storage memory, could include one or more storage clusters <b>161</b>, each having one or more storage nodes <b>150</b>, in a flexible and reconfigurable arrangement of both the physical components and the amount of storage memory provided thereby. The storage cluster <b>161</b> is designed to fit in a rack, and one or more racks can be set up and populated as desired for the storage memory. The storage cluster <b>161</b> has a chassis <b>138</b> having multiple slots <b>142</b>. It should be appreciated that chassis <b>138</b> may be referred to as a housing, enclosure, or rack unit. In one embodiment, the chassis <b>138</b> has fourteen slots <b>142</b>, although other numbers of slots are readily devised. For example, some embodiments have four slots, eight slots, sixteen slots, thirty-two slots, or other suitable number of slots. Each slot <b>142</b> can accommodate one storage node <b>150</b> in some embodiments. Chassis <b>138</b> includes flaps <b>148</b> that can be utilized to mount the chassis <b>138</b> on a rack. Fans <b>144</b> provide air circulation for cooling of the storage nodes <b>150</b> and components thereof, although other cooling components could be used, or an embodiment could be devised without cooling components. A switch fabric <b>146</b> couples storage nodes <b>150</b> within chassis <b>138</b> together and to a network for communication to the memory. In an embodiment depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the slots <b>142</b> to the left of the switch fabric <b>146</b> and fans <b>144</b> are shown occupied by storage nodes <b>150</b>, while the slots <b>142</b> to the right of the switch fabric <b>146</b> and fans <b>144</b> are empty and available for insertion of storage node <b>150</b> for illustrative purposes. This configuration is one example, and one or more storage nodes <b>150</b> could occupy the slots <b>142</b> in various further arrangements. The storage node arrangements need not be sequential or adjacent in some embodiments. Storage nodes <b>150</b> are hot pluggable, meaning that a storage node <b>150</b> can be inserted into a slot <b>142</b> in the chassis <b>138</b>, or removed from a slot <b>142</b>, without stopping or powering down the system. Upon insertion or removal of storage node <b>150</b> from slot <b>142</b>, the system automatically reconfigures in order to recognize and adapt to the change. Reconfiguration, in some embodiments, includes restoring redundancy and/or rebalancing data or load.</p><p id="p-0083" num="0082">Each storage node <b>150</b> can have multiple components. In the embodiment shown here, the storage node <b>150</b> includes a printed circuit board <b>159</b> populated by a CPU <b>156</b>, i.e., processor, a memory <b>154</b> coupled to the CPU <b>156</b>, and a non-volatile solid state storage <b>152</b> coupled to the CPU <b>156</b>, although other mountings and/or components could be used in further embodiments. The memory <b>154</b> has instructions which are executed by the CPU <b>156</b> and/or data operated on by the CPU <b>156</b>. As further explained below, the non-volatile solid state storage <b>152</b> includes flash or, in further embodiments, other types of solid-state memory.</p><p id="p-0084" num="0083">Referring to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, storage cluster <b>161</b> is scalable, meaning that storage capacity with non-uniform storage sizes is readily added, as described above. One or more storage nodes <b>150</b> can be plugged into or removed from each chassis and the storage cluster self-configures in some embodiments. Plug-in storage nodes <b>150</b>, whether installed in a chassis as delivered or later added, can have different sizes. For example, in one embodiment a storage node <b>150</b> can have any multiple of 4 TB, e.g., 8 TB, 12 TB, 16 TB, 32 TB, etc. In further embodiments, a storage node <b>150</b> could have any multiple of other storage amounts or capacities. Storage capacity of each storage node <b>150</b> is broadcast, and influences decisions of how to stripe the data. For maximum storage efficiency, an embodiment can self-configure as wide as possible in the stripe, subject to a predetermined requirement of continued operation with loss of up to one, or up to two, non-volatile solid state storage units <b>152</b> or storage nodes <b>150</b> within the chassis.</p><p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram showing a communications interconnect <b>171</b> and power distribution bus <b>172</b> coupling multiple storage nodes <b>150</b>. Referring back to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the communications interconnect <b>171</b> can be included in or implemented with the switch fabric <b>146</b> in some embodiments. Where multiple storage clusters <b>161</b> occupy a rack, the communications interconnect <b>171</b> can be included in or implemented with a top of rack switch, in some embodiments. As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, storage cluster <b>161</b> is enclosed within a single chassis <b>138</b>. External port <b>176</b> is coupled to storage nodes <b>150</b> through communications interconnect <b>171</b>, while external port <b>174</b> is coupled directly to a storage node. External power port <b>178</b> is coupled to power distribution bus <b>172</b>. Storage nodes <b>150</b> may include varying amounts and differing capacities of non-volatile solid state storage <b>152</b> as described with reference to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. In addition, one or more storage nodes <b>150</b> may be a compute only storage node as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>. Authorities <b>168</b> are implemented on the non-volatile solid state storages <b>152</b>, for example as lists or other data structures stored in memory. In some embodiments the authorities are stored within the non-volatile solid state storage <b>152</b> and supported by software executing on a controller or other processor of the non-volatile solid state storage <b>152</b>. In a further embodiment, authorities <b>168</b> are implemented on the storage nodes <b>150</b>, for example as lists or other data structures stored in the memory <b>154</b> and supported by software executing on the CPU <b>156</b> of the storage node <b>150</b>. Authorities <b>168</b> control how and where data is stored in the non-volatile solid state storages <b>152</b> in some embodiments. This control assists in determining which type of erasure coding scheme is applied to the data, and which storage nodes <b>150</b> have which portions of the data. Each authority <b>168</b> may be assigned to a non-volatile solid state storage <b>152</b>. Each authority may control a range of inode numbers, segment numbers, or other data identifiers which are assigned to data by a file system, by the storage nodes <b>150</b>, or by the non-volatile solid state storage <b>152</b>, in various embodiments.</p><p id="p-0086" num="0085">Every piece of data, and every piece of metadata, has redundancy in the system in some embodiments. In addition, every piece of data and every piece of metadata has an owner, which may be referred to as an authority. If that authority is unreachable, for example through failure of a storage node, there is a plan of succession for how to find that data or that metadata. In various embodiments, there are redundant copies of authorities <b>168</b>. Authorities <b>168</b> have a relationship to storage nodes <b>150</b> and non-volatile solid state storage <b>152</b> in some embodiments. Each authority <b>168</b>, covering a range of data segment numbers or other identifiers of the data, may be assigned to a specific non-volatile solid state storage <b>152</b>. In some embodiments the authorities <b>168</b> for all of such ranges are distributed over the non-volatile solid state storages <b>152</b> of a storage cluster. Each storage node <b>150</b> has a network port that provides access to the non-volatile solid state storage(s) <b>152</b> of that storage node <b>150</b>. Data can be stored in a segment, which is associated with a segment number and that segment number is an indirection for a configuration of a RAID (redundant array of independent disks) stripe in some embodiments. The assignment and use of the authorities <b>168</b> thus establishes an indirection to data. Indirection may be referred to as the ability to reference data indirectly, in this case via an authority <b>168</b>, in accordance with some embodiments. A segment identifies a set of non-volatile solid state storage <b>152</b> and a local identifier into the set of non-volatile solid state storage <b>152</b> that may contain data. In some embodiments, the local identifier is an offset into the device and may be reused sequentially by multiple segments. In other embodiments the local identifier is unique for a specific segment and never reused. The offsets in the non-volatile solid state storage <b>152</b> are applied to locating data for writing to or reading from the non-volatile solid state storage <b>152</b> (in the form of a RAID stripe). Data is striped across multiple units of non-volatile solid state storage <b>152</b>, which may include or be different from the non-volatile solid state storage <b>152</b> having the authority <b>168</b> for a particular data segment.</p><p id="p-0087" num="0086">If there is a change in where a particular segment of data is located, e.g., during a data move or a data reconstruction, the authority <b>168</b> for that data segment should be consulted, at that non-volatile solid state storage <b>152</b> or storage node <b>150</b> having that authority <b>168</b>. In order to locate a particular piece of data, embodiments calculate a hash value for a data segment or apply an inode number or a data segment number. The output of this operation points to a non-volatile solid state storage <b>152</b> having the authority <b>168</b> for that particular piece of data. In some embodiments there are two stages to this operation. The first stage maps an entity identifier (ID), e.g., a segment number, inode number, or directory number to an authority identifier. This mapping may include a calculation such as a hash or a bit mask. The second stage is mapping the authority identifier to a particular non-volatile solid state storage <b>152</b>, which may be done through an explicit mapping. The operation is repeatable, so that when the calculation is performed, the result of the calculation repeatably and reliably points to a particular non-volatile solid state storage <b>152</b> having that authority <b>168</b>. The operation may include the set of reachable storage nodes as input. If the set of reachable non-volatile solid state storage units changes the optimal set changes. In some embodiments, the persisted value is the current assignment (which is always true) and the calculated value is the target assignment the cluster will attempt to reconfigure towards. This calculation may be used to determine the optimal non-volatile solid state storage <b>152</b> for an authority in the presence of a set of non-volatile solid state storage <b>152</b> that are reachable and constitute the same cluster. The calculation also determines an ordered set of peer non-volatile solid state storage <b>152</b> that will also record the authority to non-volatile solid state storage mapping so that the authority may be determined even if the assigned non-volatile solid state storage is unreachable. A duplicate or substitute authority <b>168</b> may be consulted if a specific authority <b>168</b> is unavailable in some embodiments.</p><p id="p-0088" num="0087">With reference to <figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref>, two of the many tasks of the CPU <b>156</b> on a storage node <b>150</b> are to break up write data, and reassemble read data. When the system has determined that data is to be written, the authority <b>168</b> for that data is located as above. When the segment ID for data is already determined the request to write is forwarded to the non-volatile solid state storage <b>152</b> currently determined to be the host of the authority <b>168</b> determined from the segment. The host CPU <b>156</b> of the storage node <b>150</b>, on which the non-volatile solid state storage <b>152</b> and corresponding authority <b>168</b> reside, then breaks up or shards the data and transmits the data out to various non-volatile solid state storage <b>152</b>. The transmitted data is written as a data stripe in accordance with an erasure coding scheme. In some embodiments, data is requested to be pulled, and in other embodiments, data is pushed. In reverse, when data is read, the authority <b>168</b> for the segment ID containing the data is located as described above. The host CPU <b>156</b> of the storage node <b>150</b> on which the non-volatile solid state storage <b>152</b> and corresponding authority <b>168</b> reside requests the data from the non-volatile solid state storage and corresponding storage nodes pointed to by the authority. In some embodiments the data is read from flash storage as a data stripe. The host CPU <b>156</b> of storage node <b>150</b> then reassembles the read data, correcting any errors (if present) according to the appropriate erasure coding scheme, and forwards the reassembled data to the network. In further embodiments, some or all of these tasks can be handled in the non-volatile solid state storage <b>152</b>. In some embodiments, the segment host requests the data be sent to storage node <b>150</b> by requesting pages from storage and then sending the data to the storage node making the original request.</p><p id="p-0089" num="0088">In some systems, for example in UNIX-style file systems, data is handled with an index node or inode, which specifies a data structure that represents an object in a file system. The object could be a file or a directory, for example. Metadata may accompany the object, as attributes such as permission data and a creation timestamp, among other attributes. A segment number could be assigned to all or a portion of such an object in a file system. In other systems, data segments are handled with a segment number assigned elsewhere. For purposes of discussion, the unit of distribution is an entity, and an entity can be a file, a directory or a segment. That is, entities are units of data or metadata stored by a storage system. Entities are grouped into sets called authorities. Each authority has an authority owner, which is a storage node that has the exclusive right to update the entities in the authority. In other words, a storage node contains the authority, and that the authority, in turn, contains entities.</p><p id="p-0090" num="0089">A segment is a logical container of data in accordance with some embodiments. A segment is an address space between medium address space and physical flash locations, i.e., the data segment number, are in this address space. Segments may also contain meta-data, which enable data redundancy to be restored (rewritten to different flash locations or devices) without the involvement of higher level software. In one embodiment, an internal format of a segment contains client data and medium mappings to determine the position of that data. Each data segment is protected, e.g., from memory and other failures, by breaking the segment into a number of data and parity shards, where applicable. The data and parity shards are distributed, i.e., striped, across non-volatile solid state storage <b>152</b> coupled to the host CPUs <b>156</b> (See <figref idref="DRAWINGS">FIGS. <b>2</b>E and <b>2</b>G</figref>) in accordance with an erasure coding scheme. Usage of the term segments refers to the container and its place in the address space of segments in some embodiments. Usage of the term stripe refers to the same set of shards as a segment and includes how the shards are distributed along with redundancy or parity information in accordance with some embodiments.</p><p id="p-0091" num="0090">A series of address-space transformations takes place across an entire storage system. At the top are the directory entries (file names) which link to an inode. Inodes point into medium address space, where data is logically stored. Medium addresses may be mapped through a series of indirect mediums to spread the load of large files, or implement data services like deduplication or snapshots. Medium addresses may be mapped through a series of indirect mediums to spread the load of large files, or implement data services like deduplication or snapshots. Segment addresses are then translated into physical flash locations. Physical flash locations have an address range bounded by the amount of flash in the system in accordance with some embodiments. Medium addresses and segment addresses are logical containers, and in some embodiments use a 128 bit or larger identifier so as to be practically infinite, with a likelihood of reuse calculated as longer than the expected life of the system. Addresses from logical containers are allocated in a hierarchical fashion in some embodiments. Initially, each non-volatile solid state storage unit <b>152</b> may be assigned a range of address space. Within this assigned range, the non-volatile solid state storage <b>152</b> is able to allocate addresses without synchronization with other non-volatile solid state storage <b>152</b>.</p><p id="p-0092" num="0091">Data and metadata is stored by a set of underlying storage layouts that are optimized for varying workload patterns and storage devices. These layouts incorporate multiple redundancy schemes, compression formats and index algorithms. Some of these layouts store information about authorities and authority masters, while others store file metadata and file data. The redundancy schemes include error correction codes that tolerate corrupted bits within a single storage device (such as a NAND flash chip), erasure codes that tolerate the failure of multiple storage nodes, and replication schemes that tolerate data center or regional failures. In some embodiments, low density parity check (LDPC) code is used within a single storage unit. Reed-Solomon encoding is used within a storage cluster, and mirroring is used within a storage grid in some embodiments. Metadata may be stored using an ordered log structured index (such as a Log Structured Merge Tree), and large data may not be stored in a log structured layout.</p><p id="p-0093" num="0092">In order to maintain consistency across multiple copies of an entity, the storage nodes agree implicitly on two things through calculations: (1) the authority that contains the entity, and (2) the storage node that contains the authority. The assignment of entities to authorities can be done by pseudo randomly assigning entities to authorities, by splitting entities into ranges based upon an externally produced key, or by placing a single entity into each authority. Examples of pseudorandom schemes are linear hashing and the Replication Under Scalable Hashing (RUSH) family of hashes, including Controlled Replication Under Scalable Hashing (CRUSH). In some embodiments, pseudo-random assignment is utilized only for assigning authorities to nodes because the set of nodes can change. The set of authorities cannot change so any subjective function may be applied in these embodiments. Some placement schemes automatically place authorities on storage nodes, while other placement schemes rely on an explicit mapping of authorities to storage nodes. In some embodiments, a pseudorandom scheme is utilized to map from each authority to a set of candidate authority owners. A pseudorandom data distribution function related to CRUSH may assign authorities to storage nodes and create a list of where the authorities are assigned. Each storage node has a copy of the pseudorandom data distribution function, and can arrive at the same calculation for distributing, and later finding or locating an authority. Each of the pseudorandom schemes requires the reachable set of storage nodes as input in some embodiments in order to conclude the same target nodes. Once an entity has been placed in an authority, the entity may be stored on physical devices so that no expected failure will lead to unexpected data loss. In some embodiments, rebalancing algorithms attempt to store the copies of all entities within an authority in the same layout and on the same set of machines.</p><p id="p-0094" num="0093">Examples of expected failures include device failures, stolen machines, datacenter fires, and regional disasters, such as nuclear or geological events. Different failures lead to different levels of acceptable data loss. In some embodiments, a stolen storage node impacts neither the security nor the reliability of the system, while depending on system configuration, a regional event could lead to no loss of data, a few seconds or minutes of lost updates, or even complete data loss.</p><p id="p-0095" num="0094">In the embodiments, the placement of data for storage redundancy is independent of the placement of authorities for data consistency. In some embodiments, storage nodes that contain authorities do not contain any persistent storage. Instead, the storage nodes are connected to non-volatile solid state storage units that do not contain authorities. The communications interconnect between storage nodes and non-volatile solid state storage units consists of multiple communication technologies and has non-uniform performance and fault tolerance characteristics. In some embodiments, as mentioned above, non-volatile solid state storage units are connected to storage nodes via PCI express, storage nodes are connected together within a single chassis using Ethernet backplane, and chassis are connected together to form a storage cluster. Storage clusters are connected to clients using Ethernet or fiber channel in some embodiments. If multiple storage clusters are configured into a storage grid, the multiple storage clusters are connected using the Internet or other long-distance networking links, such as a &#x201c;metro scale&#x201d; link or private link that does not traverse the internet.</p><p id="p-0096" num="0095">Authority owners have the exclusive right to modify entities, to migrate entities from one non-volatile solid state storage unit to another non-volatile solid state storage unit, and to add and remove copies of entities. This allows for maintaining the redundancy of the underlying data. When an authority owner fails, is going to be decommissioned, or is overloaded, the authority is transferred to a new storage node. Transient failures make it non-trivial to ensure that all non-faulty machines agree upon the new authority location. The ambiguity that arises due to transient failures can be achieved automatically by a consensus protocol such as Paxos, hot-warm failover schemes, via manual intervention by a remote system administrator, or by a local hardware administrator (such as by physically removing the failed machine from the cluster, or pressing a button on the failed machine). In some embodiments, a consensus protocol is used, and failover is automatic. If too many failures or replication events occur in too short a time period, the system goes into a self-preservation mode and halts replication and data movement activities until an administrator intervenes in accordance with some embodiments.</p><p id="p-0097" num="0096">As authorities are transferred between storage nodes and authority owners update entities in their authorities, the system transfers messages between the storage nodes and non-volatile solid state storage units. With regard to persistent messages, messages that have different purposes are of different types. Depending on the type of the message, the system maintains different ordering and durability guarantees. As the persistent messages are being processed, the messages are temporarily stored in multiple durable and non-durable storage hardware technologies. In some embodiments, messages are stored in RAM, NVRAM and on NAND flash devices, and a variety of protocols are used in order to make efficient use of each storage medium. Latency-sensitive client requests may be persisted in replicated NVRAM, and then later NAND, while background rebalancing operations are persisted directly to NAND.</p><p id="p-0098" num="0097">Persistent messages are persistently stored prior to being transmitted. This allows the system to continue to serve client requests despite failures and component replacement. Although many hardware components contain unique identifiers that are visible to system administrators, manufacturer, hardware supply chain and ongoing monitoring quality control infrastructure, applications running on top of the infrastructure address virtualize addresses. These virtualized addresses do not change over the lifetime of the storage system, regardless of component failures and replacements. This allows each component of the storage system to be replaced over time without reconfiguration or disruptions of client request processing, i.e., the system supports non-disruptive upgrades.</p><p id="p-0099" num="0098">In some embodiments, the virtualized addresses are stored with sufficient redundancy. A continuous monitoring system correlates hardware and software status and the hardware identifiers. This allows detection and prediction of failures due to faulty components and manufacturing details. The monitoring system also enables the proactive transfer of authorities and entities away from impacted devices before failure occurs by removing the component from the critical path in some embodiments.</p><p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a multiple level block diagram, showing contents of a storage node <b>150</b> and contents of a non-volatile solid state storage <b>152</b> of the storage node <b>150</b>. Data is communicated to and from the storage node <b>150</b> by a network interface controller (NIC) <b>202</b> in some embodiments. Each storage node <b>150</b> has a CPU <b>156</b>, and one or more non-volatile solid state storage <b>152</b>, as discussed above. Moving down one level in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, each non-volatile solid state storage <b>152</b> has a relatively fast non-volatile solid state memory, such as nonvolatile random access memory (NVRAM) <b>204</b>, and flash memory <b>206</b>. In some embodiments, NVRAM <b>204</b> may be a component that does not require program/erase cycles (DRAM, MRAM, PCM), and can be a memory that can support being written vastly more often than the memory is read from. Moving down another level in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, the NVRAM <b>204</b> is implemented in one embodiment as high speed volatile memory, such as dynamic random access memory (DRAM) <b>216</b>, backed up by energy reserve <b>218</b>. Energy reserve <b>218</b> provides sufficient electrical power to keep the DRAM <b>216</b> powered long enough for contents to be transferred to the flash memory <b>206</b> in the event of power failure. In some embodiments, energy reserve <b>218</b> is a capacitor, super-capacitor, battery, or other device, that supplies a suitable supply of energy sufficient to enable the transfer of the contents of DRAM <b>216</b> to a stable storage medium in the case of power loss. The flash memory <b>206</b> is implemented as multiple flash dies <b>222</b>, which may be referred to as packages of flash dies <b>222</b> or an array of flash dies <b>222</b>. It should be appreciated that the flash dies <b>222</b> could be packaged in any number of ways, with a single die per package, multiple dies per package (i.e. multichip packages), in hybrid packages, as bare dies on a printed circuit board or other substrate, as encapsulated dies, etc. In the embodiment shown, the non-volatile solid state storage <b>152</b> has a controller <b>212</b> or other processor, and an input output (I/O) port <b>210</b> coupled to the controller <b>212</b>. I/O port <b>210</b> is coupled to the CPU <b>156</b> and/or the network interface controller <b>202</b> of the flash storage node <b>150</b>. Flash input output (I/O) port <b>220</b> is coupled to the flash dies <b>222</b>, and a direct memory access unit (DMA) <b>214</b> is coupled to the controller <b>212</b>, the DRAM <b>216</b> and the flash dies <b>222</b>. In the embodiment shown, the I/O port <b>210</b>, controller <b>212</b>, DMA unit <b>214</b> and flash I/O port <b>220</b> are implemented on a programmable logic device (PLD) <b>208</b>, e.g., a field programmable gate array (FPGA). In this embodiment, each flash die <b>222</b> has pages, organized as sixteen kB (kilobyte) pages <b>224</b>, and a register <b>226</b> through which data can be written to or read from the flash die <b>222</b>. In further embodiments, other types of solid-state memory are used in place of, or in addition to flash memory illustrated within flash die <b>222</b>.</p><p id="p-0101" num="0100">Storage clusters <b>161</b>, in various embodiments as disclosed herein, can be contrasted with storage arrays in general. The storage nodes <b>150</b> are part of a collection that creates the storage cluster <b>161</b>. Each storage node <b>150</b> owns a slice of data and computing required to provide the data. Multiple storage nodes <b>150</b> cooperate to store and retrieve the data. Storage memory or storage devices, as used in storage arrays in general, are less involved with processing and manipulating the data. Storage memory or storage devices in a storage array receive commands to read, write, or erase data. The storage memory or storage devices in a storage array are not aware of a larger system in which they are embedded, or what the data means. Storage memory or storage devices in storage arrays can include various types of storage memory, such as RAM, solid state drives, hard disk drives, etc. The storage units <b>152</b> described herein have multiple interfaces active simultaneously and serving multiple purposes. In some embodiments, some of the functionality of a storage node <b>150</b> is shifted into a storage unit <b>152</b>, transforming the storage unit <b>152</b> into a combination of storage unit <b>152</b> and storage node <b>150</b>. Placing computing (relative to storage data) into the storage unit <b>152</b> places this computing closer to the data itself. The various system embodiments have a hierarchy of storage node layers with different capabilities. By contrast, in a storage array, a controller owns and knows everything about all of the data that the controller manages in a shelf or storage devices. In a storage cluster <b>161</b>, as described herein, multiple controllers in multiple storage units <b>152</b> and/or storage nodes <b>150</b> cooperate in various ways (e.g., for erasure coding, data sharding, metadata communication and redundancy, storage capacity expansion or contraction, data recovery, and so on).</p><p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a storage server environment, which uses embodiments of the storage nodes <b>150</b> and storage units <b>152</b> of <figref idref="DRAWINGS">FIGS. <b>2</b>A-C</figref>. In this version, each storage unit <b>152</b> has a processor such as controller <b>212</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>), an FPGA (field programmable gate array), flash memory <b>206</b>, and NVRAM <b>204</b> (which is super-capacitor backed DRAM <b>216</b>, see <figref idref="DRAWINGS">FIGS. <b>2</b>B and <b>2</b>C</figref>) on a PCIe (peripheral component interconnect express) board in a chassis <b>138</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>). The storage unit <b>152</b> may be implemented as a single board containing storage, and may be the largest tolerable failure domain inside the chassis. In some embodiments, up to two storage units <b>152</b> may fail and the device will continue with no data loss.</p><p id="p-0103" num="0102">The physical storage is divided into named regions based on application usage in some embodiments. The NVRAM <b>204</b> is a contiguous block of reserved memory in the storage unit <b>152</b> DRAM <b>216</b>, and is backed by NAND flash. NVRAM <b>204</b> is logically divided into multiple memory regions written for two as spool (e.g., spool_region). Space within the NVRAM <b>204</b> spools is managed by each authority <b>168</b> independently. Each device provides an amount of storage space to each authority <b>168</b>. That authority <b>168</b> further manages lifetimes and allocations within that space. Examples of a spool include distributed transactions or notions. When the primary power to a storage unit <b>152</b> fails, onboard super-capacitors provide a short duration of power hold up. During this holdup interval, the contents of the NVRAM <b>204</b> are flushed to flash memory <b>206</b>. On the next power-on, the contents of the NVRAM <b>204</b> are recovered from the flash memory <b>206</b>.</p><p id="p-0104" num="0103">As for the storage unit controller, the responsibility of the logical &#x201c;controller&#x201d; is distributed across each of the blades containing authorities <b>168</b>. This distribution of logical control is shown in <figref idref="DRAWINGS">FIG. <b>2</b>D</figref> as a host controller <b>242</b>, mid-tier controller <b>244</b> and storage unit controller(s) <b>246</b>. Management of the control plane and the storage plane are treated independently, although parts may be physically co-located on the same blade. Each authority <b>168</b> effectively serves as an independent controller. Each authority <b>168</b> provides its own data and metadata structures, its own background workers, and maintains its own lifecycle.</p><p id="p-0105" num="0104"><figref idref="DRAWINGS">FIG. <b>2</b>E</figref> is a blade <b>252</b> hardware block diagram, showing a control plane <b>254</b>, compute and storage planes <b>256</b>, <b>258</b>, and authorities <b>168</b> interacting with underlying physical resources, using embodiments of the storage nodes <b>150</b> and storage units <b>152</b> of <figref idref="DRAWINGS">FIGS. <b>2</b>A-C</figref> in the storage server environment of <figref idref="DRAWINGS">FIG. <b>2</b>D</figref>. The control plane <b>254</b> is partitioned into a number of authorities <b>168</b> which can use the compute resources in the compute plane <b>256</b> to run on any of the blades <b>252</b>. The storage plane <b>258</b> is partitioned into a set of devices, each of which provides access to flash <b>206</b> and NVRAM <b>204</b> resources.</p><p id="p-0106" num="0105">In the compute and storage planes <b>256</b>, <b>258</b> of <figref idref="DRAWINGS">FIG. <b>2</b>E</figref>, the authorities <b>168</b> interact with the underlying physical resources (i.e., devices). From the point of view of an authority <b>168</b>, its resources are striped over all of the physical devices. From the point of view of a device, it provides resources to all authorities <b>168</b>, irrespective of where the authorities happen to run. Each authority <b>168</b> has allocated or has been allocated one or more partitions <b>260</b> of storage memory in the storage units <b>152</b>, e.g. partitions <b>260</b> in flash memory <b>206</b> and NVRAM <b>204</b>. Each authority <b>168</b> uses those allocated partitions <b>260</b> that belong to it, for writing or reading user data. Authorities can be associated with differing amounts of physical storage of the system. For example, one authority <b>168</b> could have a larger number of partitions <b>260</b> or larger sized partitions <b>260</b> in one or more storage units <b>152</b> than one or more other authorities <b>168</b>.</p><p id="p-0107" num="0106"><figref idref="DRAWINGS">FIG. <b>2</b>F</figref> depicts elasticity software layers in blades <b>252</b> of a storage cluster <b>161</b>, in accordance with some embodiments. In the elasticity structure, elasticity software is symmetric, i.e., each blade's compute module <b>270</b> runs the three identical layers of processes depicted in <figref idref="DRAWINGS">FIG. <b>2</b>F</figref>. Storage managers <b>274</b> execute read and write requests from other blades <b>252</b> for data and metadata stored in local storage unit <b>152</b> NVRAM <b>204</b> and flash <b>206</b>. Authorities <b>168</b> fulfill client requests by issuing the necessary reads and writes to the blades <b>252</b> on whose storage units <b>152</b> the corresponding data or metadata resides. Endpoints <b>272</b> parse client connection requests received from switch fabric <b>146</b> supervisory software, relay the client connection requests to the authorities <b>168</b> responsible for fulfillment, and relay the authorities' <b>168</b> responses to clients. The symmetric three-layer structure enables the storage system's high degree of concurrency. Elasticity scales out efficiently and reliably in these embodiments. In addition, elasticity implements a unique scale-out technique that balances work evenly across all resources regardless of client access pattern, and maximizes concurrency by eliminating much of the need for inter-blade coordination that typically occurs with conventional distributed locking.</p><p id="p-0108" num="0107">Still referring to <figref idref="DRAWINGS">FIG. <b>2</b>F</figref>, authorities <b>168</b> running in the compute modules <b>270</b> of a blade <b>252</b> perform the internal operations required to fulfill client requests. One feature of elasticity is that authorities <b>168</b> are stateless, i.e., they cache active data and metadata in their own blades' <b>168</b> DRAMs for fast access, but the authorities store every update in their NVRAM <b>204</b> partitions on three separate blades <b>252</b> until the update has been written to flash <b>206</b>. All the storage system writes to NVRAM <b>204</b> are in triplicate to partitions on three separate blades <b>252</b> in some embodiments. With triple-mirrored NVRAM <b>204</b> and persistent storage protected by parity and Reed-Solomon RAID checksums, the storage system can survive concurrent failure of two blades <b>252</b> with no loss of data, metadata, or access to either.</p><p id="p-0109" num="0108">Because authorities <b>168</b> are stateless, they can migrate between blades <b>252</b>. Each authority <b>168</b> has a unique identifier. NVRAM <b>204</b> and flash <b>206</b> partitions are associated with authorities' <b>168</b> identifiers, not with the blades <b>252</b> on which they are running in some. Thus, when an authority <b>168</b> migrates, the authority <b>168</b> continues to manage the same storage partitions from its new location. When a new blade <b>252</b> is installed in an embodiment of the storage cluster <b>161</b>, the system automatically rebalances load by:</p><p id="p-0110" num="0109">Partitioning the new blade's <b>252</b> storage for use by the system's authorities <b>168</b>,</p><p id="p-0111" num="0110">Migrating selected authorities <b>168</b> to the new blade <b>252</b>,</p><p id="p-0112" num="0111">Starting endpoints <b>272</b> on the new blade <b>252</b> and including them in the switch fabric's <b>146</b> client connection distribution algorithm.</p><p id="p-0113" num="0112">From their new locations, migrated authorities <b>168</b> persist the contents of their NVRAM <b>204</b> partitions on flash <b>206</b>, process read and write requests from other authorities <b>168</b>, and fulfill the client requests that endpoints <b>272</b> direct to them. Similarly, if a blade <b>252</b> fails or is removed, the system redistributes its authorities <b>168</b> among the system's remaining blades <b>252</b>. The redistributed authorities <b>168</b> continue to perform their original functions from their new locations.</p><p id="p-0114" num="0113"><figref idref="DRAWINGS">FIG. <b>2</b>G</figref> depicts authorities <b>168</b> and storage resources in blades <b>252</b> of a storage cluster, in accordance with some embodiments. Each authority <b>168</b> is exclusively responsible for a partition of the flash <b>206</b> and NVRAM <b>204</b> on each blade <b>252</b>. The authority <b>168</b> manages the content and integrity of its partitions independently of other authorities <b>168</b>. Authorities <b>168</b> compress incoming data and preserve it temporarily in their NVRAM <b>204</b> partitions, and then consolidate, RAID-protect, and persist the data in segments of the storage in their flash <b>206</b> partitions. As the authorities <b>168</b> write data to flash <b>206</b>, storage managers <b>274</b> perform the necessary flash translation to optimize write performance and maximize media longevity. In the background, authorities <b>168</b> &#x201c;garbage collect,&#x201d; or reclaim space occupied by data that clients have made obsolete by overwriting the data. It should be appreciated that since authorities' <b>168</b> partitions are disjoint, there is no need for distributed locking to execute client and writes or to perform background functions.</p><p id="p-0115" num="0114">The embodiments described herein may utilize various software, communication and/or networking protocols. In addition, the configuration of the hardware and/or software may be adjusted to accommodate various protocols. For example, the embodiments may utilize Active Directory, which is a database based system that provides authentication, directory, policy, and other services in a WINDOWS&#x2122; environment. In these embodiments, LDAP (Lightweight Directory Access Protocol) is one example application protocol for querying and modifying items in directory service providers such as Active Directory. In some embodiments, a network lock manager (NLM) is utilized as a facility that works in cooperation with the Network File System (NFS) to provide a System V style of advisory file and record locking over a network. The Server Message Block (SMB) protocol, one version of which is also known as Common Internet File System (CIFS), may be integrated with the storage systems discussed herein. SMP operates as an application-layer network protocol typically used for providing shared access to files, printers, and serial ports and miscellaneous communications between nodes on a network. SMB also provides an authenticated inter-process communication mechanism. AMAZON&#x2122; S3 (Simple Storage Service) is a web service offered by Amazon Web Services, and the systems described herein may interface with Amazon S3 through web services interfaces (REST (representational state transfer), SOAP (simple object access protocol), and BitTorrent). A RESTful API (application programming interface) breaks down a transaction to create a series of small modules. Each module addresses a particular underlying part of the transaction. The control or permissions provided with these embodiments, especially for object data, may include utilization of an access control list (ACL). The ACL is a list of permissions attached to an object and the ACL specifies which users or system processes are granted access to objects, as well as what operations are allowed on given objects. The systems may utilize Internet Protocol version 6 (IPv6), as well as IPv4, for the communications protocol that provides an identification and location system for computers on networks and routes traffic across the Internet. The routing of packets between networked systems may include Equal-cost multi-path routing (ECMP), which is a routing strategy where next-hop packet forwarding to a single destination can occur over multiple &#x201c;best paths&#x201d; which tie for top place in routing metric calculations. Multi-path routing can be used in conjunction with most routing protocols, because it is a per-hop decision limited to a single router. The software may support Multi-tenancy, which is an architecture in which a single instance of a software application serves multiple customers. Each customer may be referred to as a tenant. Tenants may be given the ability to customize some parts of the application, but may not customize the application's code, in some embodiments. The embodiments may maintain audit logs. An audit log is a document that records an event in a computing system. In addition to documenting what resources were accessed, audit log entries typically include destination and source addresses, a timestamp, and user login information for compliance with various regulations. The embodiments may support various key management policies, such as encryption key rotation. In addition, the system may support dynamic root passwords or some variation dynamically changing passwords.</p><p id="p-0116" num="0115"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> sets forth a diagram of a storage system <b>306</b> that is coupled for data communications with a cloud services provider <b>302</b> in accordance with some embodiments of the present disclosure. Although depicted in less detail, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> and <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref>. In some embodiments, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied as a storage system that includes imbalanced active/active controllers, as a storage system that includes balanced active/active controllers, as a storage system that includes active/active controllers where less than all of each controller's resources are utilized such that each controller has reserve resources that may be used to support failover, as a storage system that includes fully active/active controllers, as a storage system that includes dataset-segregated controllers, as a storage system that includes dual-layer architectures with front-end controllers and back-end integrated storage controllers, as a storage system that includes scale-out clusters of dual-controller arrays, as well as combinations of such embodiments.</p><p id="p-0117" num="0116">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the storage system <b>306</b> is coupled to the cloud services provider <b>302</b> via a data communications link <b>304</b>. The data communications link <b>304</b> may be embodied as a dedicated data communications link, as a data communications pathway that is provided through the use of one or data communications networks such as a wide area network (&#x2018;WAN&#x2019;) or local area network (&#x2018;LAN&#x2019;), or as some other mechanism capable of transporting digital information between the storage system <b>306</b> and the cloud services provider <b>302</b>. Such a data communications link <b>304</b> may be fully wired, fully wireless, or some aggregation of wired and wireless data communications pathways. In such an example, digital information may be exchanged between the storage system <b>306</b> and the cloud services provider <b>302</b> via the data communications link <b>304</b> using one or more data communications protocols. For example, digital information may be exchanged between the storage system <b>306</b> and the cloud services provider <b>302</b> via the data communications link <b>304</b> using the handheld device transfer protocol (&#x2018;HDTP&#x2019;), hypertext transfer protocol (&#x2018;HTTP&#x2019;), internet protocol (&#x2018;IP&#x2019;), real-time transfer protocol (&#x2018;RTP&#x2019;), transmission control protocol (&#x2018;TCP&#x2019;), user datagram protocol (&#x2018;UDP&#x2019;), wireless application protocol (&#x2018;WAP&#x2019;), or other protocol.</p><p id="p-0118" num="0117">The cloud services provider <b>302</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied, for example, as a system and computing environment that provides services to users of the cloud services provider <b>302</b> through the sharing of computing resources via the data communications link <b>304</b>. The cloud services provider <b>302</b> may provide on-demand access to a shared pool of configurable computing resources such as computer networks, servers, storage, applications and services, and so on. The shared pool of configurable resources may be rapidly provisioned and released to a user of the cloud services provider <b>302</b> with minimal management effort. Generally, the user of the cloud services provider <b>302</b> is unaware of the exact computing resources utilized by the cloud services provider <b>302</b> to provide the services. Although in many cases such a cloud services provider <b>302</b> may be accessible via the Internet, readers of skill in the art will recognize that any system that abstracts the use of shared resources to provide services to a user through any data communications link may be considered a cloud services provider <b>302</b>.</p><p id="p-0119" num="0118">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the cloud services provider <b>302</b> may be configured to provide a variety of services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of various service models. For example, the cloud services provider <b>302</b> may be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of an infrastructure as a service (&#x2018;IaaS&#x2019;) service model where the cloud services provider <b>302</b> offers computing infrastructure such as virtual machines and other resources as a service to subscribers. In addition, the cloud services provider <b>302</b> may be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of a platform as a service (&#x2018;PaaS&#x2019;) service model where the cloud services provider <b>302</b> offers a development environment to application developers. Such a development environment may include, for example, an operating system, programming-language execution environment, database, web server, or other components that may be utilized by application developers to develop and run software solutions on a cloud platform. Furthermore, the cloud services provider <b>302</b> may be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of a software as a service (&#x2018;SaaS&#x2019;) service model where the cloud services provider <b>302</b> offers application software, databases, as well as the platforms that are used to run the applications to the storage system <b>306</b> and users of the storage system <b>306</b>, providing the storage system <b>306</b> and users of the storage system <b>306</b> with on-demand software and eliminating the need to install and run the application on local computers, which may simplify maintenance and support of the application. The cloud services provider <b>302</b> may be further configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of an authentication as a service (&#x2018;AaaS&#x2019;) service model where the cloud services provider <b>302</b> offers authentication services that can be used to secure access to applications, data sources, or other resources. The cloud services provider <b>302</b> may also be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of a storage as a service service model where the cloud services provider <b>302</b> offers access to its storage infrastructure for use by the storage system <b>306</b> and users of the storage system <b>306</b>. Readers will appreciate that the cloud services provider <b>302</b> may be configured to provide additional services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of additional service models, as the service models described above are included only for explanatory purposes and in no way represent a limitation of the services that may be offered by the cloud services provider <b>302</b> or a limitation as to the service models that may be implemented by the cloud services provider <b>302</b>.</p><p id="p-0120" num="0119">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the cloud services provider <b>302</b> may be embodied, for example, as a private cloud, as a public cloud, or as a combination of a private cloud and public cloud. In an embodiment in which the cloud services provider <b>302</b> is embodied as a private cloud, the cloud services provider <b>302</b> may be dedicated to providing services to a single organization rather than providing services to multiple organizations. In an embodiment where the cloud services provider <b>302</b> is embodied as a public cloud, the cloud services provider <b>302</b> may provide services to multiple organizations. Public cloud and private cloud deployment models may differ and may come with various advantages and disadvantages. For example, because a public cloud deployment involves the sharing of a computing infrastructure across different organization, such a deployment may not be ideal for organizations with security concerns, mission-critical workloads, uptime requirements demands, and so on. While a private cloud deployment can address some of these issues, a private cloud deployment may require on-premises staff to manage the private cloud. In still alternative embodiments, the cloud services provider <b>302</b> may be embodied as a mix of a private and public cloud services with a hybrid cloud deployment.</p><p id="p-0121" num="0120">Although not explicitly depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, readers will appreciate that additional hardware components and additional software components may be necessary to facilitate the delivery of cloud services to the storage system <b>306</b> and users of the storage system <b>306</b>. For example, the storage system <b>306</b> may be coupled to (or even include) a cloud storage gateway. Such a cloud storage gateway may be embodied, for example, as hardware-based or software-based appliance that is located on premise with the storage system <b>306</b>. Such a cloud storage gateway may operate as a bridge between local applications that are executing on the storage array <b>306</b> and remote, cloud-based storage that is utilized by the storage array <b>306</b>. Through the use of a cloud storage gateway, organizations may move primary iSCSI or NAS to the cloud services provider <b>302</b>, thereby enabling the organization to save space on their on-premises storage systems. Such a cloud storage gateway may be configured to emulate a disk array, a block-based device, a file server, or other storage system that can translate the SCSI commands, file server commands, or other appropriate command into REST-space protocols that facilitate communications with the cloud services provider <b>302</b>.</p><p id="p-0122" num="0121">In order to enable the storage system <b>306</b> and users of the storage system <b>306</b> to make use of the services provided by the cloud services provider <b>302</b>, a cloud migration process may take place during which data, applications, or other elements from an organization's local systems (or even from another cloud environment) are moved to the cloud services provider <b>302</b>. In order to successfully migrate data, applications, or other elements to the cloud services provider's <b>302</b> environment, middleware such as a cloud migration tool may be utilized to bridge gaps between the cloud services provider's <b>302</b> environment and an organization's environment. Such cloud migration tools may also be configured to address potentially high network costs and long transfer times associated with migrating large volumes of data to the cloud services provider <b>302</b>, as well as addressing security concerns associated with sensitive data to the cloud services provider <b>302</b> over data communications networks. In order to further enable the storage system <b>306</b> and users of the storage system <b>306</b> to make use of the services provided by the cloud services provider <b>302</b>, a cloud orchestrator may also be used to arrange and coordinate automated tasks in pursuit of creating a consolidated process or workflow. Such a cloud orchestrator may perform tasks such as configuring various components, whether those components are cloud components or on-premises components, as well as managing the interconnections between such components. The cloud orchestrator can simplify the inter-component communication and connections to ensure that links are correctly configured and maintained.</p><p id="p-0123" num="0122">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, and as described briefly above, the cloud services provider <b>302</b> may be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the usage of a SaaS service model where the cloud services provider <b>302</b> offers application software, databases, as well as the platforms that are used to run the applications to the storage system <b>306</b> and users of the storage system <b>306</b>, providing the storage system <b>306</b> and users of the storage system <b>306</b> with on-demand software and eliminating the need to install and run the application on local computers, which may simplify maintenance and support of the application. Such applications may take many forms in accordance with various embodiments of the present disclosure. For example, the cloud services provider <b>302</b> may be configured to provide access to data analytics applications to the storage system <b>306</b> and users of the storage system <b>306</b>. Such data analytics applications may be configured, for example, to receive telemetry data phoned home by the storage system <b>306</b>. Such telemetry data may describe various operating characteristics of the storage system <b>306</b> and may be analyzed, for example, to determine the health of the storage system <b>306</b>, to identify workloads that are executing on the storage system <b>306</b>, to predict when the storage system <b>306</b> will run out of various resources, to recommend configuration changes, hardware or software upgrades, workflow migrations, or other actions that may improve the operation of the storage system <b>306</b>.</p><p id="p-0124" num="0123">The cloud services provider <b>302</b> may also be configured to provide access to virtualized computing environments to the storage system <b>306</b> and users of the storage system <b>306</b>. Such virtualized computing environments may be embodied, for example, as a virtual machine or other virtualized computer hardware platforms, virtual storage devices, virtualized computer network resources, and so on. Examples of such virtualized environments can include virtual machines that are created to emulate an actual computer, virtualized desktop environments that separate a logical desktop from a physical machine, virtualized file systems that allow uniform access to different types of concrete file systems, and many others.</p><p id="p-0125" num="0124">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> sets forth a diagram of a storage system <b>306</b> in accordance with some embodiments of the present disclosure. Although depicted in less detail, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> and <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref> as the storage system may include many of the components described above.</p><p id="p-0126" num="0125">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may include storage resources <b>308</b>, which may be embodied in many forms. For example, in some embodiments the storage resources <b>308</b> can include nano-RAM or another form of nonvolatile random access memory that utilizes carbon nanotubes deposited on a substrate. In some embodiments, the storage resources <b>308</b> may include 3D crosspoint non-volatile memory in which bit storage is based on a change of bulk resistance, in conjunction with a stackable cross-gridded data access array. In some embodiments, the storage resources <b>308</b> may include flash memory, including single-level cell (&#x2018;SLC&#x2019;) NAND flash, multi-level cell (&#x2018;MLC&#x2019;) NAND flash, triple-level cell (&#x2018;TLC&#x2019;) NAND flash, quad-level cell (&#x2018;QLC&#x2019;) NAND flash, and others. In some embodiments, the storage resources <b>308</b> may include non-volatile magnetoresistive random-access memory (&#x2018;MRAM&#x2019;), including spin transfer torque (&#x2018;STT&#x2019;) MRAM, in which data is stored through the use of magnetic storage elements. In some embodiments, the example storage resources <b>308</b> may include non-volatile phase-change memory (&#x2018;PCM&#x2019;) that may have the ability to hold multiple bits in a single cell as cells can achieve a number of distinct intermediary states. In some embodiments, the storage resources <b>308</b> may include quantum memory that allows for the storage and retrieval of photonic quantum information. In some embodiments, the example storage resources <b>308</b> may include resistive random-access memory (&#x2018;ReRAM&#x2019;) in which data is stored by changing the resistance across a dielectric solid-state material. In some embodiments, the storage resources <b>308</b> may include storage class memory (&#x2018;SCM&#x2019;) in which solid-state nonvolatile memory may be manufactured at a high density using some combination of sub-lithographic patterning techniques, multiple bits per cell, multiple layers of devices, and so on. Readers will appreciate that other forms of computer memories and storage devices may be utilized by the storage systems described above, including DRAM, SRAM, EEPROM, universal memory, and many others. The storage resources <b>308</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied in a variety of form factors, including but not limited to, dual in-line memory modules (&#x2018;DIMMs&#x2019;), non-volatile dual in-line memory modules (&#x2018;NVDIMMs&#x2019;), M.2, U.2, and others.</p><p id="p-0127" num="0126">The example storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may implement a variety of storage architectures. For example, storage systems in accordance with some embodiments of the present disclosure may utilize block storage where data is stored in blocks, and each block essentially acts as an individual hard drive. Storage systems in accordance with some embodiments of the present disclosure may utilize object storage, where data is managed as objects. Each object may include the data itself, a variable amount of metadata, and a globally unique identifier, where object storage can be implemented at multiple levels (e.g., device level, system level, interface level). Storage systems in accordance with some embodiments of the present disclosure utilize file storage in which data is stored in a hierarchical structure. Such data may be saved in files and folders, and presented to both the system storing it and the system retrieving it in the same format.</p><p id="p-0128" num="0127">The example storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be embodied as a storage system in which additional storage resources can be added through the use of a scale-up model, additional storage resources can be added through the use of a scale-out model, or through some combination thereof. In a scale-up model, additional storage may be added by adding additional storage devices. In a scale-out model, however, additional storage nodes may be added to a cluster of storage nodes, where such storage nodes can include additional processing resources, additional networking resources, and so on.</p><p id="p-0129" num="0128">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes communications resources <b>310</b> that may be useful in facilitating data communications between components within the storage system <b>306</b>, as well as data communications between the storage system <b>306</b> and computing devices that are outside of the storage system <b>306</b>. The communications resources <b>310</b> may be configured to utilize a variety of different protocols and data communication fabrics to facilitate data communications between components within the storage systems as well as computing devices that are outside of the storage system. For example, the communications resources <b>310</b> can include fibre channel (&#x2018;FC&#x2019;) technologies such as FC fabrics and FC protocols that can transport SCSI commands over FC networks. The communications resources <b>310</b> can also include FC over ethernet (&#x2018;FCoE&#x2019;) technologies through which FC frames are encapsulated and transmitted over Ethernet networks. The communications resources <b>310</b> can also include InfiniBand (&#x2018;IB&#x2019;) technologies in which a switched fabric topology is utilized to facilitate transmissions between channel adapters. The communications resources <b>310</b> can also include NVM Express (&#x2018;NVMe&#x2019;) technologies and NVMe over fabrics (&#x2018;NVMeoF&#x2019;) technologies through which non-volatile storage media attached via a PCI express (&#x2018;PCIe&#x2019;) bus may be accessed. The communications resources <b>310</b> can also include mechanisms for accessing storage resources <b>308</b> within the storage system <b>306</b> utilizing serial attached SCSI (&#x2018;SAS&#x2019;), serial ATA (&#x2018;SATA&#x2019;) bus interfaces for connecting storage resources <b>308</b> within the storage system <b>306</b> to host bus adapters within the storage system <b>306</b>, internet small computer systems interface (&#x2018;iSCSI&#x2019;) technologies to provide block-level access to storage resources <b>308</b> within the storage system <b>306</b>, and other communications resources that that may be useful in facilitating data communications between components within the storage system <b>306</b>, as well as data communications between the storage system <b>306</b> and computing devices that are outside of the storage system <b>306</b>.</p><p id="p-0130" num="0129">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes processing resources <b>312</b> that may be useful in useful in executing computer program instructions and performing other computational tasks within the storage system <b>306</b>. The processing resources <b>312</b> may include one or more application-specific integrated circuits (&#x2018;ASICs&#x2019;) that are customized for some particular purpose as well as one or more central processing units (&#x2018;CPUs&#x2019;). The processing resources <b>312</b> may also include one or more digital signal processors (&#x2018;DSPs&#x2019;), one or more field-programmable gate arrays (&#x2018;FPGAs&#x2019;), one or more systems on a chip (&#x2018;SoCs&#x2019;), or other form of processing resources <b>312</b>. The storage system <b>306</b> may utilize the storage resources <b>312</b> to perform a variety of tasks including, but not limited to, supporting the execution of software resources <b>314</b> that will be described in greater detail below.</p><p id="p-0131" num="0130">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes software resources <b>314</b> that, when executed by processing resources <b>312</b> within the storage system <b>306</b>, may perform various tasks. The software resources <b>314</b> may include, for example, one or more modules of computer program instructions that when executed by processing resources <b>312</b> within the storage system <b>306</b> are useful in carrying out various data protection techniques to preserve the integrity of data that is stored within the storage systems. Readers will appreciate that such data protection techniques may be carried out, for example, by system software executing on computer hardware within the storage system, by a cloud services provider, or in other ways. Such data protection techniques can include, for example, data archiving techniques that cause data that is no longer actively used to be moved to a separate storage device or separate storage system for long-term retention, data backup techniques through which data stored in the storage system may be copied and stored in a distinct location to avoid data loss in the event of equipment failure or some other form of catastrophe with the storage system, data replication techniques through which data stored in the storage system is replicated to another storage system such that the data may be accessible via multiple storage systems, data snapshotting techniques through which the state of data within the storage system is captured at various points in time, data and database cloning techniques through which duplicate copies of data and databases may be created, and other data protection techniques. Through the use of such data protection techniques, business continuity and disaster recovery objectives may be met as a failure of the storage system may not result in the loss of data stored in the storage system.</p><p id="p-0132" num="0131">The software resources <b>314</b> may also include software that is useful in implementing software-defined storage (&#x2018;SDS&#x2019;). In such an example, the software resources <b>314</b> may include one or more modules of computer program instructions that, when executed, are useful in policy-based provisioning and management of data storage that is independent of the underlying hardware. Such software resources <b>314</b> may be useful in implementing storage virtualization to separate the storage hardware from the software that manages the storage hardware.</p><p id="p-0133" num="0132">The software resources <b>314</b> may also include software that is useful in facilitating and optimizing I/O operations that are directed to the storage resources <b>308</b> in the storage system <b>306</b>. For example, the software resources <b>314</b> may include software modules that perform carry out various data reduction techniques such as, for example, data compression, data deduplication, and others. The software resources <b>314</b> may include software modules that intelligently group together I/O operations to facilitate better usage of the underlying storage resource <b>308</b>, software modules that perform data migration operations to migrate from within a storage system, as well as software modules that perform other functions. Such software resources <b>314</b> may be embodied as one or more software containers or in many other ways.</p><p id="p-0134" num="0133">Readers will appreciate that the various components depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be grouped into one or more optimized computing packages as converged infrastructures. Such converged infrastructures may include pools of computers, storage and networking resources that can be shared by multiple applications and managed in a collective manner using policy-driven processes. Such converged infrastructures may minimize compatibility issues between various components within the storage system <b>306</b> while also reducing various costs associated with the establishment and operation of the storage system <b>306</b>. Such converged infrastructures may be implemented with a converged infrastructure reference architecture, with standalone appliances, with a software driven hyper-converged approach, or in other ways.</p><p id="p-0135" num="0134">Readers will appreciate that the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be useful for supporting various types of software applications. For example, the storage system <b>306</b> may be useful in supporting artificial intelligence applications, database applications, DevOps projects, electronic design automation tools, event-driven software applications, high performance computing applications, simulation applications, high-speed data capture and analysis applications, machine learning applications, media production applications, media serving applications, picture archiving and communication systems (&#x2018;PACS&#x2019;) applications, software development applications, and many other types of applications by providing storage resources to such applications.</p><p id="p-0136" num="0135"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a storage cluster <b>160</b> with storage nodes <b>150</b> and authorities <b>168</b> as distributed agents, and a snapshot director <b>402</b> that manages snapshot identifiers for snapshots <b>406</b>. A snapshot <b>406</b> records system state of stored data (or metadata) as of the moment the snapshot <b>406</b> is made, and a specific storage system could have one type of snapshot <b>406</b>, or multiple types of snapshots <b>406</b>. One type of snapshot <b>406</b> could record the state of all user data in storage memory <b>408</b>, for example a snapshot <b>406</b> taken for backing up data. Another type of snapshot could record the state of files and directories, relative to a directory tree for a file system. Yet another type of snapshot could be for system use only, and record the state of metadata <b>414</b>. Common uses for different types of snapshots <b>406</b> are for system rollback, for example after a crash or data corruption or loss, or to revert a system to a previous state, for example upon administrative decision that a current system state is undesired or problematic. Another use of a snapshot <b>406</b> is to retrieve data or metadata <b>414</b> corresponding to a specified system state, for example to recover a specified file version or specific directory tree, or other information about that system state, for example memory usage, system status, etc. In these and other scenarios, each snapshot <b>406</b> is associated with and references a snapshot copy ID <b>404</b> (or snapshot copy identifier), and the snapshot <b>406</b> is taken or made by referencing data or metadata <b>414</b> associated with that same snapshot copy ID <b>404</b>.</p><p id="p-0137" num="0136">It should be appreciated that while the description is made of embodiments of a storage cluster <b>160</b> with authorities <b>168</b>, this is not meant to be limiting as these teachings are readily applicable to other storage systems with other distributed agents, for further embodiments. When data is written into the storage memory <b>404</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, for example by authorities <b>168</b> acting as distributed agents in storage nodes <b>150</b> of the storage cluster <b>160</b>, corresponding data records <b>412</b> associated with a specific snapshot copy ID <b>404</b> are written into a data structure <b>410</b> in the storage cluster <b>160</b>. Similarly, when metadata <b>414</b> is recorded, the metadata <b>414</b> is written into the data structure <b>410</b> in association with a specific snapshot copy ID <b>404</b>. In various embodiments, the data structure <b>410</b> could be implemented in memory in the storage nodes <b>150</b> or other portions of various storage systems, and could be implemented as multiple data structures <b>410</b> across the storage nodes <b>150</b> or as a single, distributed data structure <b>410</b> across the storage nodes <b>150</b>, or in various further embodiments readily devised in keeping with the teachings herein.</p><p id="p-0138" num="0137">The snapshot director <b>402</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, among other duties, maintains the snapshot copy ID <b>404</b>, communicates the snapshot copy ID <b>404</b> to authorities <b>168</b>, authorizes the making of snapshots <b>406</b>, and changes the snapshot copy ID <b>404</b> from one snapshot <b>406</b> to the next snapshot <b>406</b>. Assignment of snapshot director <b>402</b> is by various mechanisms in various embodiments. In one version, the snapshot director <b>402</b> is a permanently assigned one of the authorities <b>168</b>. In another version, the authorities <b>168</b> vote or otherwise achieve consensus decision and assign one of the authorities <b>168</b> to be the snapshot director <b>402</b>. This could be a semi-permanent position, or directorship could rotate, for example from one snapshot <b>406</b> to the next, or over a specified period of time or in response to a specified event. In yet another version, whichever authority <b>168</b> receives a remote procedure call requesting the making of a snapshot <b>406</b> becomes the snapshot director <b>402</b>, and this position rotates with the next snapshot <b>406</b>. Further still, an authority <b>168</b> could delegate or request delegation that another authority <b>168</b> become the snapshot director <b>402</b>. In some versions, the snapshot director <b>402</b> has only snapshot duties, and in other versions, the snapshot director <b>402</b> is also a regular authority <b>168</b> for purposes of data storage.</p><p id="p-0139" num="0138"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> shows authorities <b>168</b> in the storage cluster <b>160</b> using an existing snapshot copy ID <b>404</b> when servicing remote procedure calls <b>502</b>. With the arrival of each remote procedure call <b>502</b>, one or more authorities <b>168</b> performs a service <b>504</b> for that remote procedure call <b>502</b>, and writes one or more data records <b>412</b> and/or metadata <b>414</b>, in association with the existing snapshot copy ID <b>404</b>, into the data structure <b>410</b>. For remote procedure calls <b>502</b> that involve the access of user data in storage memory <b>408</b>, the authority <b>168</b> reads or writes the user data, and/or coordinates with further authorities <b>168</b> as described above for reading or writing user data. Other mechanisms, e.g., for persisting of data, persisting of metadata, erasure coding, address translation, etc., are applied as appropriate to an embodiment of a storage cluster or other storage system. Under these circumstances, the authorities <b>168</b> are presumed to have knowledge of the existing snapshot copy ID <b>404</b> from previous communication with the snapshot director <b>402</b>. Since there is no imminent snapshot <b>406</b> requested or scheduled, the authorities <b>168</b> do not need constant communication to the snapshot director <b>402</b> regarding the possibility of a new snapshot copy ID <b>404</b>. All updates to user data in storage memory <b>408</b>, and updates to metadata <b>414</b>, are represented in the data structure <b>410</b> in association with the existing (i.e., current) snapshot copy ID <b>404</b>.</p><p id="p-0140" num="0139"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> illustrates the snapshot director <b>402</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> issuing a snapshot precommit <b>508</b> to authorities <b>168</b> in the storage cluster <b>160</b>, and the authorities <b>168</b> entering snapshot creation mode <b>510</b>. This scenario is initiated by the arrival of a remote procedure call <b>502</b>, e.g., to one of the authorities <b>168</b>, with a request <b>506</b> to create a snapshot <b>406</b>. This is only one example of how a snapshot could be initiated. A local login could be used to initiate a snapshot. A request (RPC, command, or otherwise) could make a request for some larger-scale operation (e.g., setting up replication, copying a dataset) that might have an internal requirement for taking a snapshot. Alternately, snapshots could be created on a schedule, in which case after the initial requests to make snapshots on a schedule, perhaps with occasional requests to adjust the schedule, snapshots are simply initiated autonomously by the distributed storage system from somewhere within the distributed storage system.</p><p id="p-0141" num="0140">In response to receiving the request <b>506</b> to create the snapshot <b>406</b>, the snapshot director <b>402</b> (e.g., which could be the same authority <b>168</b> or a different authority <b>168</b>) communicates the snapshot precommit <b>508</b> to the authorities <b>168</b>. For example, this could be a message sent among the storage nodes <b>150</b> in the storage cluster <b>160</b>. Serving as an announcement prior to committing the snapshot <b>406</b>, the snapshot precommit <b>508</b> directs each authority <b>168</b> to complete service for any (or all) previously received remote procedure call(s) <b>502</b>, using the existing snapshot copy ID <b>404</b> (see <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>), and then respond to the snapshot director <b>402</b>.</p><p id="p-0142" num="0141"><figref idref="DRAWINGS">FIG. <b>5</b>C</figref> depicts snapshot creation mode <b>510</b>, where various authorities <b>168</b> are completing I/O operations <b>512</b>, confirming and entering snapshot creation mode <b>510</b>, or inquiring as to which snapshot copy ID <b>516</b> to use when servicing a remote procedure call <b>502</b>. External requests, including NFS or iSCSI requests, could be viewed as originating as RPCs, even though SCSI specifications do not generally use that term. But, operations, including mutating ones, can also be received locally on nodes within the distributed storage system. For example, an application could run directly on nodes, or might happen on a schedule (similar to periodic snapshots). It should be appreciated that which of these circumstances applies to which authority <b>168</b> at a given moment is system and situation dependent. For example, one authority <b>168</b> in the middle of <figref idref="DRAWINGS">FIG. <b>5</b>C</figref> is in the middle of (or beginning or end, or in any case in progress with) one or more I/O operations <b>512</b>, which are described as in-flight mutating I/O operations <b>512</b>. Because these in-flight mutating I/O operations <b>512</b> are not complete, there is no confirmation <b>514</b> reply yet from that authority <b>168</b>. There could be multiple such authorities <b>168</b> that are not yet replying with confirmation <b>514</b>. Another authority <b>168</b>, at the top of <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>, finishes (i.e., completes) I/O operations <b>512</b>, and sends a confirmation <b>514</b> reply to the snapshot director <b>402</b> that indicates all-in-flight mutating I/O operations are complete, and further indicates that authority <b>168</b> is entering or has entered snapshot creation mode <b>510</b>. There could be multiple such authorities <b>168</b> sending such confirmation <b>514</b> replies. Yet another authority <b>168</b>, at the bottom of <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>, has already sent a confirmation <b>514</b> reply, is in snapshot creation mode <b>510</b>, and receives a new remote procedure call <b>502</b>. That authority <b>168</b> sends an inquiry <b>516</b> to the snapshot director <b>402</b>, asking which snapshot copy ID <b>404</b> to use for this remote procedure call <b>502</b>.</p><p id="p-0143" num="0142">The reason for making the inquiry <b>516</b>, and for the snapshot director <b>402</b> to answer the inquiry <b>516</b>, is that the snapshot director <b>402</b> manages the snapshot copy ID <b>404</b>, and in particular manages the changeover to the next snapshot copy ID <b>404</b> in such a way as to preserve coherency of snapshot copy ID <b>404</b> relative to timing of the making of the snapshot <b>406</b>. Illustrations later given with reference to failover scenarios and <figref idref="DRAWINGS">FIGS. <b>6</b>A-<b>6</b>C</figref> show how this mechanism produces snapshots <b>406</b> with crash consistency. Continuing with <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>, the snapshot director <b>402</b> replies to the authority <b>168</b> making the inquiry <b>516</b>, to use the existing snapshot copy ID <b>404</b>. This is because not all of the authorities <b>168</b> have sent a confirmation <b>514</b> reply, and the snapshot director <b>402</b> is not yet ready to change to the next snapshot copy ID <b>404</b>. Any other authority <b>168</b> that has already sent a confirmation <b>514</b> reply to the snapshot director <b>402</b>, and receives a new remote procedure call <b>502</b>, makes a similar inquiry <b>516</b> to the snapshot director <b>402</b>, to ask which snapshot copy ID <b>404</b> to use.</p><p id="p-0144" num="0143"><figref idref="DRAWINGS">FIG. <b>5</b>D</figref> shows the snapshot director <b>402</b> receiving confirmation <b>518</b> that all authorities <b>168</b> are in snapshot creation mode <b>510</b>, issuing a notion <b>520</b> to record an intent <b>522</b> to create a snapshot <b>406</b>, and switching over to a new snapshot copy ID <b>524</b>. In various versions, this confirmation <b>518</b> could be in the form of the snapshot director <b>402</b> receiving a confirmation <b>514</b> reply from each authority <b>168</b>, authorities <b>168</b> could vote or otherwise achieve consensus and send a single confirmation <b>514</b> to the snapshot director <b>402</b>, authorities in each storage node <b>150</b> could confer, agree and send one confirmation per storage node <b>150</b> to the snapshot director <b>402</b>, etc. Upon receiving confirmation <b>518</b>, the snapshot director <b>402</b> decides conditions are acceptable for creation of a snapshot <b>406</b> and the switchover <b>524</b> to the new snapshot copy ID <b>404</b>, and issues the notion <b>520</b>. In service of the notion <b>520</b> to record intent <b>522</b> to create a snapshot <b>406</b>, the snapshot director <b>402</b> writes the intent <b>522</b> to create the snapshot <b>406</b>, for example by writing metadata <b>414</b> in the data structure <b>410</b>, or sending a message to one or more authorities <b>168</b>, or both, in various embodiments. The snapshot director <b>402</b> then performs the switchover <b>524</b> to the new snapshot copy ID <b>404</b>.</p><p id="p-0145" num="0144">One or more authorities <b>168</b> create a snapshot <b>406</b>, using the existing snapshot copy ID <b>404</b>, not the new snapshot copy ID <b>404</b>. Snapshot <b>406</b> creation could be in response to receiving a message from the snapshot director <b>402</b>, or authorities <b>168</b> could monitor metadata <b>414</b> and watch for the written intent <b>522</b> to create the snapshot <b>406</b>, or the snapshot director <b>402</b> itself (as an authority <b>168</b>) could create or delegate the creation of the snapshot <b>406</b>, in various embodiments. To determine which data records <b>412</b> and/or metadata <b>414</b> are associated with the appropriate snapshot copy ID <b>404</b>, the snapshot <b>406</b> is made through consultation with the data structure <b>410</b> (see <figref idref="DRAWINGS">FIG. <b>4</b></figref>). In some embodiments, commencement of the making of the snapshot <b>406</b>, prior to completion of service for all remote procedure calls <b>502</b> that were started by one or more authorities <b>168</b> in snapshot creation mode <b>510</b> but associated with the existing snapshot copy ID <b>404</b> (see <figref idref="DRAWINGS">FIG. <b>5</b>E</figref>) reduces latency for completion of the snapshot <b>406</b>. In other words, some embodiments can start creating the snapshot <b>406</b>, once the intent <b>522</b> to create the snapshot <b>406</b> is written, even though there may be one or more authorities <b>168</b> servicing one or more remote procedure calls <b>502</b> that arrived in snapshot creation mode <b>510</b> and are associated with the existing snapshot copy ID <b>404</b>.</p><p id="p-0146" num="0145"><figref idref="DRAWINGS">FIG. <b>5</b>E</figref> shows authorities <b>168</b> completing remote procedure call <b>502</b> services and I/O operations <b>512</b> associated with the existing snapshot ID <b>404</b>, and using the new snapshot copy ID <b>404</b> for any new remote procedure call <b>502</b> servicing. In this scenario, the snapshot director <b>402</b> has made the switchover <b>524</b> to the new snapshot copy ID <b>404</b>, and the system is still in snapshot creation mode <b>510</b>, but with the new snapshot copy ID <b>404</b> now available. As in the scenario of <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>, when snapshot creation mode <b>510</b> was initially entered, any authority <b>168</b> that receives a remote procedure call <b>502</b> while snapshot creation mode <b>510</b> is in effect sends an inquiry <b>516</b> to the snapshot director <b>402</b> asking which snapshot copy ID <b>404</b> to use for this remote procedure call <b>502</b>. This time, the snapshot director <b>402</b> sends a reply to use the new snapshot copy ID <b>404</b>. Also, having made the switchover <b>524</b> to the new snapshot copy ID <b>404</b>, the snapshot director <b>402</b> sends a notification <b>526</b> to all authorities <b>168</b> to quiesce the snapshot. This means the storage system is waiting for all remote procedure calls <b>502</b> and all I/O operations <b>512</b> (if any) from prior to the intent <b>522</b> to create the snapshot, or associated with the existing snapshot copy ID <b>404</b> (e.g., see bottom of <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>), to complete. That is, there may be one or more authorities <b>168</b> that entered snapshot creation mode <b>510</b>, sent a confirmation <b>514</b> reply (see <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>), received a new remote procedure call <b>502</b>, sent an inquiry <b>516</b> and received a reply from the snapshot directory <b>402</b> to use the existing snapshot copy ID <b>404</b>, and the snapshot director <b>402</b> is now waiting for these I/O operations <b>512</b> to complete.</p><p id="p-0147" num="0146"><figref idref="DRAWINGS">FIG. <b>5</b>F</figref> illustrates completing the snapshot <b>406</b>. In response to receiving the notification <b>526</b> to quiesce the snapshot, each authority <b>168</b>, when such statement is true, sends a response <b>528</b> to the snapshot director <b>402</b> declaring that all remote procedure calls and all I/O operations from prior to the intent to create the snapshot, or associated with the existing snapshot copy ID <b>404</b> are complete. This is shown in <figref idref="DRAWINGS">FIG. <b>5</b>F</figref> by the uppermost authority <b>168</b>, and the third from the top authority <b>168</b> each sending the response <b>528</b>. The other authority <b>168</b> could either have already sent such a response <b>528</b>, or still be completing an I/O operation <b>512</b>, after which that authority <b>168</b> will send the response indicating completion of the remote procedure calls and I/O operations associated with the existing snapshot copy ID <b>404</b>. When the snapshot director <b>402</b> has received these completion responses <b>528</b> from all authorities <b>168</b>, the snapshot director <b>402</b> sends a notification <b>530</b> that the snapshot is visible and initiates a notion <b>532</b> to commit the snapshot <b>406</b>. The notion <b>532</b> to commit the snapshot <b>406</b> indicates all state transitions related to snapshot creation are complete. The snapshot director <b>402</b> then sends a message to acknowledge <b>534</b> the snapshot <b>406</b> creation, to the client <b>536</b>, and exits snapshot creation mode <b>510</b>. Authorities <b>168</b> now recognize the snapshot <b>406</b> and allow read-only access to the snapshot <b>406</b>, in response to receiving notification <b>530</b> from the snapshot director <b>402</b> that the snapshot is visible. Authorities <b>168</b> use the new snapshot copy ID <b>404</b>, for all references for data and metadata, so that the new snapshot copy ID <b>404</b> becomes (i.e., replaces) the existing snapshot copy ID <b>404</b>, to capture changes relative to the next snapshot <b>406</b>, for whenever the next snapshot <b>406</b> occurs. That is, the processes of using an existing snapshot copy ID <b>404</b>, making a snapshot <b>406</b>, and the switchover <b>524</b> to the new snapshot copy ID <b>404</b> are iterative.</p><p id="p-0148" num="0147">With reference to <figref idref="DRAWINGS">FIGS. <b>5</b>A-<b>5</b>F</figref>, some of the operating principles in various embodiments supporting the snapshot consistency with respect to system operation and possibility of crash bestow upon the snapshot director <b>402</b> the privilege and responsibility of controlling the exact moment in time at which the switchover <b>524</b> to the new snapshot copy ID <b>404</b> occurs. The snapshot director <b>402</b> also controls the flow of information regarding the existing snapshot copy ID <b>404</b> and the new snapshot copy ID <b>404</b>. With respect to a given authority <b>168</b>, all work done under the old snapshot copy ID <b>404</b> is completed before new work is commenced with the new snapshot copy ID <b>404</b>. It should never be the case that work is commenced by an authority <b>168</b> with the new snapshot ID <b>404</b>, and followed by that authority <b>168</b> with more work done under the old snapshot ID <b>404</b>. For low latency, authorities <b>168</b> should not be required to wait on one another in some embodiments. In addition, the snapshot <b>406</b> should not be committed nor made visible to a client <b>536</b> while work is still being done or might still commence under the old snapshot copy ID <b>404</b> in some embodiments. To accomplish the above goals, all authorities <b>168</b> performing work before the start of making the snapshot <b>406</b> should use the old or existing snapshot copy ID <b>404</b>. After the snapshot <b>406</b> is complete, all authorities <b>168</b> performing work should use the new snapshot copy ID <b>404</b>. When the process of taking the snapshot is first begun, any operation that arrives to an authority <b>168</b> should trigger the authority <b>168</b> to check with the snapshot director <b>402</b>, as a central coordinator, to find out which snapshot copy ID <b>404</b> to use, existing or new. Outside of the window of processing a snapshot <b>406</b>, all authorities <b>168</b> know and agree upon which snapshot copy ID <b>404</b> to use. Inside of the window of processing a snapshot <b>406</b>, authorities <b>168</b> (or, generally, distributed agents of a storage system) know to question the central coordinator about which snapshot copy ID <b>404</b> to use.</p><p id="p-0149" num="0148"><figref idref="DRAWINGS">FIG. <b>6</b>A</figref> shows an authority <b>168</b> failover scenario, in which it is determined which file systems are in snapshot create (or creation) mode. Suppose an authority <b>168</b> fails in the storage cluster <b>160</b>, which could occur if a storage node fails, for example. A replacement authority <b>168</b> might not know whether a snapshot is in progress. One mechanism for recovery, for authority <b>168</b> failover, is for a snapshot service <b>602</b> to send a query <b>604</b> to the snapshot director <b>402</b>, asking which file systems are in snapshot create mode. The snapshot director <b>402</b> replies, for example that there is a file system in snapshot create mode, or there is not any file system in snapshot create mode. With this information, the snapshot service <b>602</b> can assist in setting up a replacement authority <b>168</b> with information about snapshot create mode (i.e., snapshot creation mode <b>510</b>), so that the replacement authority <b>168</b> participates appropriately in the snapshot copy ID <b>404</b> and does not disrupt the snapshot creation process.</p><p id="p-0150" num="0149"><figref idref="DRAWINGS">FIG. <b>6</b>B</figref> shows a snapshot director <b>402</b> failover scenario, before snapshot precommit <b>508</b>. Suppose the snapshot director <b>402</b> fails in the storage cluster <b>160</b>, which could occur if a storage node fails, for example. An authority <b>168</b> that is in snapshot creation mode <b>510</b> receives a remote procedure call <b>502</b>, and sends the inquiry <b>606</b> to the snapshot director <b>402</b>, to ask which snapshot copy ID <b>404</b> to use for this remote procedure call <b>502</b>. The snapshot director <b>402</b>, upon receiving this inquiry <b>606</b>, determines there is no record <b>608</b> of the precommit <b>508</b> for a snapshot <b>406</b>. For example, the snapshot director <b>402</b> could search in the data structure <b>410</b> and find no snapshot precommit <b>508</b>, and is thus lacking the record <b>608</b>). Under these circumstances, the snapshot director <b>402</b> sends back an error <b>610</b> reply to the authority <b>168</b>, stating that there is no snapshot creation in flight. Upon receiving this error <b>610</b> message, the authority <b>168</b> can exit snapshot creation mode, and resume using the existing snapshot copy ID <b>404</b>. Without having entered a record <b>608</b> of the snapshot precommit <b>508</b>, the snapshot director <b>402</b> would not be issuing the new snapshot copy ID <b>404</b>, and this mechanism thus supports snapshots with crash consistency, by not releasing a snapshot <b>406</b> that may have been started but did not complete successfully, and by canceling snapshot creation mode when there is no record <b>608</b> of snapshot precommit <b>508</b>.</p><p id="p-0151" num="0150"><figref idref="DRAWINGS">FIG. <b>6</b>C</figref> shows a snapshot director <b>402</b> failover scenario, after snapshot precommit <b>508</b>. Suppose the snapshot director <b>402</b> fails in the storage cluster <b>160</b>, after making a snapshot precommit <b>508</b>. The snapshot director, on startup <b>606</b>, determines there does exist a record <b>608</b> of the precommit <b>508</b> for a snapshot <b>406</b>. The snapshot director <b>402</b> sends the notification <b>612</b> to authorities <b>168</b>, to quiesce the snapshot (similarly to the action shown in <figref idref="DRAWINGS">FIG. <b>5</b>E</figref>). This means the snapshot director <b>402</b> is waiting for completion of all pending remote procedure calls and I/O operations, using the existing snapshot copy ID <b>404</b>. Each authority <b>168</b>, when so complete, sends a confirmation <b>614</b> declaring service for all pending remote procedure calls is complete. Then, the snapshot director <b>402</b> performs an action <b>616</b> to proceed to or resume snapshot creation. Any new inquiries <b>516</b> for which snapshot copy ID <b>440</b> to use for a new remote procedure call <b>502</b> are replied to by the snapshot director <b>402</b> with instruction to use the new snapshot copy ID <b>404</b> (also similarly to the action shown in <figref idref="DRAWINGS">FIG. <b>5</b>E</figref>). Having entered the record <b>608</b> of the snapshot precommit <b>508</b>, as observed through recovery of the record <b>608</b>, the snapshot director <b>402</b> and storage system can continue with a snapshot in progress, and finish producing a snapshot with crash consistency.</p><p id="p-0152" num="0151"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow diagram of a method for snapshots with crash consistency, which can be performed by various embodiments of storage clusters with authorities as described herein, or other storage systems with distributed agents. Processors in storage systems with distributed agents can perform the method. In an action <b>702</b>, data records or other metadata, associated to an existing snapshot copy identifier, are written to a data structure in a storage system. In embodiments of a storage cluster with authorities, the authorities write data to storage memory and write data records and metadata, with the existing snapshot copy identifier, to a data structure. In an action <b>704</b>, a snapshot precommit is issued from a snapshot director. The snapshot director could be one of the authorities, permanently, semi-permanently, or rotatably assigned. Snapshot precommit is in response to receiving a request to make a snapshot. Distributed agents are expected to enter snapshot creation mode.</p><p id="p-0153" num="0152">Still referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, in an action <b>706</b>, in the case where not all distributed agents are in snapshot creation mode, any inquiry from a distributed agent is responded to with the existing snapshot copy identifier, from the snapshot director. Any agent(s) receiving instruction to use the existing snapshot copy identifier does so with I/O operations, and writes data records or other mated data associated with the existing snapshot copy identifier to the data structure, as in the action <b>702</b>. In an action <b>708</b>, in the case where all of the distributed agents are in snapshot creation mode, any inquiry from a distributed agent is responded to with the new snapshot copy identifier, from the snapshot director. Any agent(s) receiving instruction to use the new snapshot copy identifier does so with I/O operations, and writes data records or other metadata associated with the new snapshot copy identifier to the data structure, as in an updated version of the action <b>702</b>. In an action <b>710</b>, in the case where all operations associated with the existing snapshot copy ID are completed by distributed agents, the snapshot is committed. Any newer operations, with the new snapshot copy ID, are not part of this snapshot. In an action <b>712</b>, the system exits snapshot creation mode. Distributed agents all use the new snapshot copy ID as an existing snapshot copy ID, from here forward, until the next snapshot, where the above processes repeat in an iteration.</p><p id="p-0154" num="0153">It should be appreciated that the methods described herein may be performed with a digital processing system, such as a conventional, general-purpose computer system. Special purpose computers, which are designed or programmed to perform only one function may be used in the alternative. <figref idref="DRAWINGS">FIG. <b>8</b></figref> is an illustration showing an exemplary computing device which may implement the embodiments described herein. The computing device <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> may be used to perform embodiments of the functionality for snapshots with crash consistency in accordance with some embodiments. The computing device <b>800</b> includes a central processing unit (CPU) <b>801</b>, which is coupled through a bus <b>805</b> to a memory <b>803</b>, and mass storage device <b>807</b>. Mass storage device <b>807</b> represents a persistent data storage device such as a disc drive, which may be local or remote in some embodiments. The mass storage device <b>807</b> could implement a backup storage, in some embodiments. Memory <b>803</b> may include read only memory, random access memory, etc. Applications resident on the computing device may be stored on or accessed via a computer readable medium such as memory <b>803</b> or mass storage device <b>807</b> in some embodiments. Applications may also be in the form of modulated electronic signals modulated accessed via a network modem or other network interface of the computing device. It should be appreciated that CPU <b>801</b> may be embodied in a general-purpose processor, a special purpose processor, or a specially programmed logic device in some embodiments.</p><p id="p-0155" num="0154">Display <b>811</b> is in communication with CPU <b>801</b>, memory <b>803</b>, and mass storage device <b>807</b>, through bus <b>805</b>. Display <b>811</b> is configured to display any visualization tools or reports associated with the system described herein. Input/output device <b>809</b> is coupled to bus <b>805</b> in order to communicate information in command selections to CPU <b>801</b>. It should be appreciated that data to and from external devices may be communicated through the input/output device <b>809</b>. CPU <b>801</b> can be defined to execute the functionality described herein to enable the functionality described with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>7</b></figref>. The code embodying this functionality may be stored within memory <b>803</b> or mass storage device <b>807</b> for execution by a processor such as CPU <b>801</b> in some embodiments. The operating system on the computing device may be MS-WINDOWS&#x2122;, UNIX&#x2122;, LINUX&#x2122;, iOS&#x2122;, CentOS&#x2122;, Android&#x2122;, Redhat Linux&#x2122;, z/OS&#x2122;, or other known operating systems. It should be appreciated that the embodiments described herein may also be integrated with a virtualized computing system implemented with physical computing resources.</p><p id="p-0156" num="0155">Detailed illustrative embodiments are disclosed herein. However, specific functional details disclosed herein are merely representative for purposes of describing embodiments. Embodiments may, however, be embodied in many alternate forms and should not be construed as limited to only the embodiments set forth herein.</p><p id="p-0157" num="0156">It should be understood that although the terms first, second, etc. may be used herein to describe various steps or calculations, these steps or calculations should not be limited by these terms. These terms are only used to distinguish one step or calculation from another. For example, a first calculation could be termed a second calculation, and, similarly, a second step could be termed a first step, without departing from the scope of this disclosure. As used herein, the term &#x201c;and/or&#x201d; and the &#x201c;I&#x201d; symbol includes any and all combinations of one or more of the associated listed items.</p><p id="p-0158" num="0157">As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d;, &#x201c;comprising&#x201d;, &#x201c;includes&#x201d;, and/or &#x201c;including&#x201d;, when used herein, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof. Therefore, the terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting.</p><p id="p-0159" num="0158">It should also be noted that in some alternative implementations, the functions/acts noted may occur out of the order noted in the figures. For example, two figures shown in succession may in fact be executed substantially concurrently or may sometimes be executed in the reverse order, depending upon the functionality/acts involved.</p><p id="p-0160" num="0159">With the above embodiments in mind, it should be understood that the embodiments might employ various computer-implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. Further, the manipulations performed are often referred to in terms, such as producing, identifying, determining, or comparing. Any of the operations described herein that form part of the embodiments are useful machine operations. The embodiments also relate to a device or an apparatus for performing these operations. The apparatus can be specially constructed for the required purpose, or the apparatus can be a general-purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general-purpose machines can be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.</p><p id="p-0161" num="0160">A module, an application, a layer, an agent or other method-operable entity could be implemented as hardware, firmware, or a processor executing software, or combinations thereof. It should be appreciated that, where a software-based embodiment is disclosed herein, the software can be embodied in a physical machine such as a controller. For example, a controller could include a first module and a second module. A controller could be configured to perform various actions, e.g., of a method, an application, a layer or an agent.</p><p id="p-0162" num="0161">The embodiments can also be embodied as computer readable code on a tangible non-transitory computer readable medium. The computer readable medium is any data storage device that can store data, which can be thereafter read by a computer system. Examples of the computer readable medium include hard drives, network attached storage (NAS), read-only memory, random-access memory, CD-ROMs, CD-Rs, CD-RWs, magnetic tapes, and other optical and non-optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion. Embodiments described herein may be practiced with various computer system configurations including hand-held devices, tablets, microprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers and the like. The embodiments can also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a wire-based or wireless network.</p><p id="p-0163" num="0162">Although the method operations were described in a specific order, it should be understood that other operations may be performed in between described operations, described operations may be adjusted so that they occur at slightly different times or the described operations may be distributed in a system which allows the occurrence of the processing operations at various intervals associated with the processing.</p><p id="p-0164" num="0163">In various embodiments, one or more portions of the methods and mechanisms described herein may form part of a cloud-computing environment. In such embodiments, resources may be provided over the Internet as services according to one or more various models. Such models may include Infrastructure as a Service (IaaS), Platform as a Service (PaaS), and Software as a Service (SaaS). In IaaS, computer infrastructure is delivered as a service. In such a case, the computing equipment is generally owned and operated by the service provider. In the PaaS model, software tools and underlying equipment used by developers to develop software solutions may be provided as a service and hosted by the service provider. SaaS typically includes a service provider licensing software as a service on demand. The service provider may host the software, or may deploy the software to a customer for a given period of time. Numerous combinations of the above models are possible and are contemplated.</p><p id="p-0165" num="0164">Various units, circuits, or other components may be described or claimed as &#x201c;configured to&#x201d; or &#x201c;configurable to&#x201d; perform a task or tasks. In such contexts, the phrase &#x201c;configured to&#x201d; or &#x201c;configurable to&#x201d; is used to connote structure by indicating that the units/circuits/components include structure (e.g., circuitry) that performs the task or tasks during operation. As such, the unit/circuit/component can be said to be configured to perform the task, or configurable to perform the task, even when the specified unit/circuit/component is not currently operational (e.g., is not on). The units/circuits/components used with the &#x201c;configured to&#x201d; or &#x201c;configurable to&#x201d; language include hardware&#x2014;for example, circuits, memory storing program instructions executable to implement the operation, etc. Reciting that a unit/circuit/component is &#x201c;configured to&#x201d; perform one or more tasks, or is &#x201c;configurable to&#x201d; perform one or more tasks, is expressly intended not to invoke 35 U.S.C. 112, sixth paragraph, for that unit/circuit/component. Additionally, &#x201c;configured to&#x201d; or &#x201c;configurable to&#x201d; can include generic structure (e.g., generic circuitry) that is manipulated by software and/or firmware (e.g., an FPGA or a general-purpose processor executing software) to operate in manner that is capable of performing the task(s) at issue. &#x201c;Configured to&#x201d; may also include adapting a manufacturing process (e.g., a semiconductor fabrication facility) to fabricate devices (e.g., integrated circuits) that are adapted to implement or perform one or more tasks. &#x201c;Configurable to&#x201d; is expressly intended not to apply to blank media, an unprogrammed processor or unprogrammed generic computer, or an unprogrammed programmable logic device, programmable gate array, or other unprogrammed device, unless accompanied by programmed media that confers the ability to the unprogrammed device to be configured to perform the disclosed function(s).</p><p id="p-0166" num="0165">The foregoing description, for the purpose of explanation, has been described with reference to specific embodiments. However, the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the embodiments and its practical applications, to thereby enable others skilled in the art to best utilize the embodiments and various modifications as may be suited to the particular use contemplated. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method, comprising:<claim-text>indicating intent to create a snapshot of storage system contents associated with an existing snapshot copy identifier via generation of a new snapshot copy identifier;</claim-text><claim-text>responding, with the new snapshot copy identifier, to one or more inquiries from distributed agents of the system regarding I/O (input/output) operations, after the indicating the intent to create the snapshot; and</claim-text><claim-text>committing the snapshot and exiting a snapshot creation mode upon receiving responses from each distributed agent of the system that service is complete for all input/output (I/O) operations that started before the indicating the intent to create the snapshot.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein one of the distributed agents coordinates generation of the new snapshot copy identifier.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the indicating the intent comprises receiving a remote procedure call.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>communicating to each of the distributed agents that the storage system is entering the snapshot creation mode.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>directing each of the plurality of distributed agents to complete service, using the existing snapshot copy identifier, to all of the I/O operations that started before the indicating the intent to create the snapshot.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>directing each of the plurality of distributed agents to complete service, using the existing snapshot copy identifier, to pending I/O operations, responsive to starting up and finding a recorded intent to create the snapshot.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:<claim-text>resuming creation of the snapshot, wherein the committing the snapshot is responsive to receiving responses from the plurality of distributed agents that service is complete for the pending I/O operations.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A tangible, non-transitory, computer-readable media having instructions thereupon which, when executed by a processor, cause the processor to perform a method comprising:<claim-text>recording, by a snapshot director in a storage system, intent to create a snapshot of storage system contents associated with an existing snapshot copy identifier via generation of a new snapshot copy identifier;</claim-text><claim-text>responding, with a new snapshot copy identifier that replaces the existing snapshot copy identifier, to one or more inquiries from distributed agents of the system regarding one or more I/O operations, after the intent to create the snapshot is recorded; and</claim-text><claim-text>committing the snapshot and exiting the snapshot creation mode, responsive to confirmation from each of the distributed agents that service is complete for all I/O operations associated with the existing snapshot copy identifier.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer readable media of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the notifying the plurality of distributed agents comprises:<claim-text>communicating to the plurality of distributed agents that the snapshot is visible, wherein each of the distributed agents recognizes the snapshot and grants read-only access to the snapshot.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer readable media of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein one of the distributed agents coordinates generation of the new snapshot copy identifier.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer readable media of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the indicating the intent comprises receiving a remote procedure call.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer readable media of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the method further comprises:<claim-text>communicating an error response that indicates no snapshot creation is in progress, responsive to starting up and finding one or more of the distributed agents is in the snapshot create mode but finding no record of the intent to create the snapshot, as a failover before precommitment of the snapshot.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer readable media of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the method further comprises:<claim-text>directing each of the distributed agents to complete service, using the existing snapshot copy identifier, to pending I/O operations, responsive to starting up and finding the recorded intent to create the snapshot; and</claim-text><claim-text>resuming creation of the snapshot, responsive to receiving responses from the distributed agents that service is complete for the pending I/O operations, as a failover after precommitment of the snapshot.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A storage system, comprising:<claim-text>a plurality of storage nodes, each having agents distributed among the plurality of storage nodes;</claim-text><claim-text>one of the plurality of agents configurable to function as a snapshot director and record intent to create a snapshot of storage system contents associated with an existing snapshot copy identifier, responsive to a first confirmation that all of the agents are in a snapshot creation mode;</claim-text><claim-text>the snapshot director configurable to respond, with a new snapshot copy identifier that replaces the existing snapshot copy identifier, to one or more inquiries from one or more of the agents regarding one or more I/O operations, after the intent to create the snapshot is recorded;</claim-text><claim-text>the snapshot director configurable to create the snapshot associated with the existing snapshot copy identifier; and</claim-text><claim-text>the snapshot director configurable to commit the snapshot and exit the snapshot creation mode, responsive to a second confirmation from the distributed agents that service is complete for all I/O (input/output) operations that are associated with the existing snapshot copy identifier.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The storage system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising:<claim-text>the snapshot director configurable to communicate to the agents that the snapshot is visible, wherein the agents recognize the snapshot and grant read-only access to the snapshot.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The storage system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising:<claim-text>the snapshot director configurable to communicate a snapshot precommitment to the agents that indicates the storage system is entering the snapshot creation mode, responsive to receiving a request to create the snapshot.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The storage system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising:<claim-text>the snapshot director configurable to respond, with the existing snapshot copy identifier, to one or more inquiries from the agents regarding one or more I/O operations, responsive to having communicated a snapshot precommit but lacking the first confirmation.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The storage system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising:<claim-text>the snapshot director configurable to direct, after recording the intent to create the snapshot, that the agents complete service, using the existing snapshot copy identifier, to all of the I/O operations that started before the intent to create the snapshot was recorded, and then respond with the second confirmation.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The storage system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising:<claim-text>the snapshot director configurable to communicate an error response that indicates no snapshot creation is in progress, responsive to starting up and finding one or more of the agents is in the snapshot create mode but finding no record of the intent to create the snapshot, as a failover before precommitment of the snapshot.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The storage system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising:<claim-text>the snapshot director configurable to direct each of the agents to complete service, using the existing snapshot copy identifier, to pending I/O operations, responsive to starting up and finding the recorded intent to create the snapshot; and</claim-text><claim-text>the one or more of the agents configurable to proceed to or resume creating the snapshot, responsive to receiving responses from the agents that service is complete for the pending I/O operations, as a failover after precommitment of the snapshot.</claim-text></claim-text></claim></claims></us-patent-application>