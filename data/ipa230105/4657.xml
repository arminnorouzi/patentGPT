<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004658A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004658</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17902413</doc-number><date>20220902</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>60</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>215</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>23</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>602</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0891</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>215</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2379</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2365</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0643</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Transitioning Leadership In A Cluster Of Nodes</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16741435</doc-number><date>20200113</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11436344</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17902413</doc-number></document-id></child-doc></relation></continuation><continuation-in-part><relation><parent-doc><document-id><country>US</country><doc-number>16255763</doc-number><date>20190123</date></document-id><parent-status>ABANDONED</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>16741435</doc-number></document-id></child-doc></relation></continuation-in-part><us-provisional-application><document-id><country>US</country><doc-number>62663848</doc-number><date>20180427</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62662216</doc-number><date>20180424</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>PURE STORAGE, INC.</orgname><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>JUCH</last-name><first-name>IAN</first-name><address><city>PORTLAND</city><state>OR</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>POWER</last-name><first-name>TYLER</first-name><address><city>KAIAPOI</city><country>NZ</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Transitioning leadership in a cluster of nodes, including: initiating, by two or more nodes among a cluster of nodes, a leadership transition, wherein: a first node transmits a first secret key identifier to each of the other nodes in the cluster of nodes; and a second node transmits a second secret key identifier to each of the other nodes in the cluster of nodes; updating, by each node and based at least in part on a resolution policy, the current secret key identifier to be the second secret key identifier instead of the first secret key identifier; and transitioning, based at least in part on the second secret key identifier being selected to be the current secret key identifier, the second node to be a leader node of the cluster of nodes.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="109.64mm" wi="158.75mm" file="US20230004658A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="226.23mm" wi="170.94mm" orientation="landscape" file="US20230004658A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="202.18mm" wi="148.00mm" orientation="landscape" file="US20230004658A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="223.60mm" wi="144.27mm" orientation="landscape" file="US20230004658A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="224.96mm" wi="170.69mm" orientation="landscape" file="US20230004658A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="210.82mm" wi="136.06mm" orientation="landscape" file="US20230004658A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="187.71mm" wi="147.91mm" orientation="landscape" file="US20230004658A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="242.57mm" wi="163.83mm" file="US20230004658A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="217.25mm" wi="168.99mm" file="US20230004658A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="214.63mm" wi="159.09mm" orientation="landscape" file="US20230004658A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="242.99mm" wi="171.62mm" file="US20230004658A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="219.79mm" wi="155.53mm" file="US20230004658A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="199.31mm" wi="139.36mm" file="US20230004658A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="235.80mm" wi="169.76mm" file="US20230004658A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="139.78mm" wi="122.09mm" file="US20230004658A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="229.79mm" wi="162.14mm" orientation="landscape" file="US20230004658A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="256.62mm" wi="167.98mm" orientation="landscape" file="US20230004658A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="258.32mm" wi="168.15mm" orientation="landscape" file="US20230004658A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="252.14mm" wi="168.99mm" file="US20230004658A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="259.00mm" wi="168.99mm" file="US20230004658A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="250.11mm" wi="168.99mm" file="US20230004658A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="255.44mm" wi="169.08mm" file="US20230004658A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="254.85mm" wi="169.16mm" file="US20230004658A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="251.38mm" wi="168.99mm" file="US20230004658A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This is a continuation application for patent entitled to a filing date and claiming the benefit of earlier-filed U.S. Pat. No. 11,436,344, issued Sep. 6, 2022, herein incorporated by reference in its entirety, which is a continuation in-part of U.S. patent application Ser. No. 16/255,763, filed Jan. 23, 2019, which claims priority from U.S. Provisional Patent Application 62/662,216, filed Apr. 24, 2018, and U.S. Provisional Patent Application 62/663,848, filed Apr. 27, 2018.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0003" num="0002"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> illustrates a first example system for data storage in accordance with some implementations.</p><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates a second example system for data storage in accordance with some implementations.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>1</b>C</figref> illustrates a third example system for data storage in accordance with some implementations.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b>D</figref> illustrates a fourth example system for data storage in accordance with some implementations.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a perspective view of a storage cluster with multiple storage nodes and internal storage coupled to each storage node to provide network attached storage, in accordance with some embodiments.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram showing an interconnect switch coupling multiple storage nodes in accordance with some embodiments.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a multiple level block diagram, showing contents of a storage node and contents of one of the non-volatile solid state storage units in accordance with some embodiments.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a storage server environment, which uses embodiments of the storage nodes and storage units of some previous figures in accordance with some embodiments.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b>E</figref> is a blade hardware block diagram, showing a control plane, compute and storage planes, and authorities interacting with underlying physical resources, in accordance with some embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>2</b>F</figref> depicts elasticity software layers in blades of a storage cluster, in accordance with some embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>2</b>G</figref> depicts authorities and storage resources in blades of a storage cluster, in accordance with some embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> sets forth a diagram of a storage system that is coupled for data communications with a cloud services provider in accordance with some embodiments of the present disclosure.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> sets forth a diagram of a storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>3</b>C</figref> sets forth an example of a cloud-based storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>3</b>D</figref> illustrates an exemplary computing device that may be specifically configured to perform one or more of the processes described herein.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> sets forth a diagram illustrating a computing environment that supports consistent application of cluster processes according to some embodiments of the present disclosure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> sets forth a diagram illustrating elements of an intermediate computing system configured to implement consistent application of cluster processes according to some embodiments of the present disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>4</b>C</figref> sets forth a diagram illustrating elements of an intermediate computing system configured to implement secure encryption in a deduplication cluster according to some embodiments of the present disclosure.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>5</b></figref> sets forth a flow chart illustrating an example method of consistent application of cluster processes in accordance with some embodiments of the present disclosure.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>6</b></figref> sets forth a flow chart illustrating an example method of consistent application of cluster processes in accordance with some embodiments of the present disclosure.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>7</b></figref> sets forth a flow chart illustrating an example method of consistent application of cluster processes in accordance with some embodiments of the present disclosure.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>8</b></figref> sets forth a flow chart illustrating an example method of consistent application of cluster processes in accordance with some embodiments of the present disclosure.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>9</b></figref> sets forth a flow chart illustrating an example method of consistent application of cluster processes in accordance with some embodiments of the present disclosure.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>10</b></figref> sets forth a flow chart illustrating an example method of secure encryption in a deduplication cluster in accordance with some embodiments of the present disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DESCRIPTION OF EMBODIMENTS</heading><p id="p-0027" num="0026">Example methods, apparatus, and products for consistent application of cluster transactions in accordance with embodiments of the present disclosure are described with reference to the accompanying drawings, beginning with <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> illustrates an example system for data storage, in accordance with some implementations. System <b>100</b> (also referred to as &#x201c;storage system&#x201d; herein) includes numerous elements for purposes of illustration rather than limitation. It may be noted that system <b>100</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations.</p><p id="p-0028" num="0027">System <b>100</b> includes a number of computing devices <b>164</b>A-B. Computing devices (also referred to as &#x201c;client devices&#x201d; herein) may be embodied, for example, a server in a data center, a workstation, a personal computer, a notebook, or the like. Computing devices <b>164</b>A-B may be coupled for data communications to one or more storage arrays <b>102</b>A-B through a storage area network (&#x2018;SAN&#x2019;) <b>158</b> or a local area network (&#x2018;LAN&#x2019;) <b>160</b>.</p><p id="p-0029" num="0028">The SAN <b>158</b> may be implemented with a variety of data communications fabrics, devices, and protocols. For example, the fabrics for SAN <b>158</b> may include Fibre Channel, Ethernet, Infiniband, Serial Attached Small Computer System Interface (&#x2018;SAS&#x2019;), or the like. Data communications protocols for use with SAN <b>158</b> may include Advanced Technology Attachment (&#x2018;ATA&#x2019;), Fibre Channel Protocol, Small Computer System Interface (&#x2018;SCSI&#x2019;), Internet Small Computer System Interface (&#x2018;iSCSI&#x2019;), HyperSCSI, Non-Volatile Memory Express (&#x2018;NVMe&#x2019;) over Fabrics, or the like. It may be noted that SAN <b>158</b> is provided for illustration, rather than limitation. Other data communication couplings may be implemented between computing devices <b>164</b>A-B and storage arrays <b>102</b>A-B.</p><p id="p-0030" num="0029">The LAN <b>160</b> may also be implemented with a variety of fabrics, devices, and protocols. For example, the fabrics for LAN <b>160</b> may include Ethernet (<b>802</b>.<b>3</b>), wireless (<b>802</b>.<b>11</b>), or the like. Data communication protocols for use in LAN <b>160</b> may include Transmission Control Protocol (&#x2018;TCP&#x2019;), User Datagram Protocol (&#x2018;UDP&#x2019;), Internet Protocol (&#x2018;IP&#x2019;), HyperText Transfer Protocol (&#x2018;HTTP&#x2019;), Wireless Access Protocol (&#x2018;WAP&#x2019;), Handheld Device Transport Protocol (&#x2018;HDTP&#x2019;), Session Initiation Protocol (&#x2018;SIP&#x2019;), Real Time Protocol (&#x2018;RTP&#x2019;), or the like.</p><p id="p-0031" num="0030">Storage arrays <b>102</b>A-B may provide persistent data storage for the computing devices <b>164</b>A-B. Storage array <b>102</b>A may be contained in a chassis (not shown), and storage array <b>102</b>B may be contained in another chassis (not shown), in implementations. Storage array <b>102</b>A and <b>102</b>B may include one or more storage array controllers <b>110</b>A-D (also referred to as &#x201c;controller&#x201d; herein). A storage array controller <b>110</b>A-D may be embodied as a module of automated computing machinery comprising computer hardware, computer software, or a combination of computer hardware and software. In some implementations, the storage array controllers <b>110</b>A-D may be configured to carry out various storage tasks. Storage tasks may include writing data received from the computing devices <b>164</b>A-B to storage array <b>102</b>A-B, erasing data from storage array <b>102</b>A-B, retrieving data from storage array <b>102</b>A-B and providing data to computing devices <b>164</b>A-B, monitoring and reporting of disk utilization and performance, performing redundancy operations, such as Redundant Array of Independent Drives (&#x2018;RAID&#x2019;) or RAID-like data redundancy operations, compressing data, encrypting data, and so forth.</p><p id="p-0032" num="0031">Storage array controller <b>110</b>A-D may be implemented in a variety of ways, including as a Field Programmable Gate Array (&#x2018;FPGA&#x2019;), a Programmable Logic Chip (&#x2018;PLC&#x2019;), an Application Specific Integrated Circuit (&#x2018;ASIC&#x2019;), System-on-Chip (&#x2018;SOC&#x2019;), or any computing device that includes discrete components such as a processing device, central processing unit, computer memory, or various adapters. Storage array controller <b>110</b>A-D may include, for example, a data communications adapter configured to support communications via the SAN <b>158</b> or LAN <b>160</b>. In some implementations, storage array controller <b>110</b>A-D may be independently coupled to the LAN <b>160</b>. In implementations, storage array controller <b>110</b>A-D may include an I/O controller or the like that couples the storage array controller <b>110</b>A-D for data communications, through a midplane (not shown), to a persistent storage resource <b>170</b>A-B (also referred to as a &#x201c;storage resource&#x201d; herein). The persistent storage resource <b>170</b>A-B main include any number of storage drives <b>171</b>A-F (also referred to as &#x201c;storage devices&#x201d; herein) and any number of non-volatile Random Access Memory (&#x2018;NVRAM&#x2019;) devices (not shown).</p><p id="p-0033" num="0032">In some implementations, the NVRAM devices of a persistent storage resource <b>170</b>A-B may be configured to receive, from the storage array controller <b>110</b>A-D, data to be stored in the storage drives <b>171</b>A-F. In some examples, the data may originate from computing devices <b>164</b>A-B. In some examples, writing data to the NVRAM device may be carried out more quickly than directly writing data to the storage drive <b>171</b>A-F. In implementations, the storage array controller <b>110</b>A-D may be configured to utilize the NVRAM devices as a quickly accessible buffer for data destined to be written to the storage drives <b>171</b>A-F. Latency for write requests using NVRAM devices as a buffer may be improved relative to a system in which a storage array controller <b>110</b>A-D writes data directly to the storage drives <b>171</b>A-F. In some implementations, the NVRAM devices may be implemented with computer memory in the form of high bandwidth, low latency RAM. The NVRAM device is referred to as &#x201c;non-volatile&#x201d; because the NVRAM device may receive or include a unique power source that maintains the state of the RAM after main power loss to the NVRAM device. Such a power source may be a battery, one or more capacitors, or the like. In response to a power loss, the NVRAM device may be configured to write the contents of the RAM to a persistent storage, such as the storage drives <b>171</b>A-F.</p><p id="p-0034" num="0033">In implementations, storage drive <b>171</b>A-F may refer to any device configured to record data persistently, where &#x201c;persistently&#x201d; or &#x201c;persistent&#x201d; refers as to a device's ability to maintain recorded data after loss of power. In some implementations, storage drive <b>171</b>A-F may correspond to non-disk storage media. For example, the storage drive <b>171</b>A-F may be one or more solid-state drives (&#x2018;SSDs&#x2019;), flash memory based storage, any type of solid-state non-volatile memory, or any other type of non-mechanical storage device. In other implementations, storage drive <b>171</b>A-F may include mechanical or spinning hard disk, such as hard-disk drives (&#x2018;HDD&#x2019;).</p><p id="p-0035" num="0034">In some implementations, the storage array controllers <b>110</b>A-D may be configured for offloading device management responsibilities from storage drive <b>171</b>A-F in storage array <b>102</b>A-B. For example, storage array controllers <b>110</b>A-D may manage control information that may describe the state of one or more memory blocks in the storage drives <b>171</b>A-F. The control information may indicate, for example, that a particular memory block has failed and should no longer be written to, that a particular memory block contains boot code for a storage array controller <b>110</b>A-D, the number of program-erase (&#x2018;P/E&#x2019;) cycles that have been performed on a particular memory block, the age of data stored in a particular memory block, the type of data that is stored in a particular memory block, and so forth. In some implementations, the control information may be stored with an associated memory block as metadata. In other implementations, the control information for the storage drives <b>171</b>A-F may be stored in one or more particular memory blocks of the storage drives <b>171</b>A-F that are selected by the storage array controller <b>110</b>A-D. The selected memory blocks may be tagged with an identifier indicating that the selected memory block contains control information. The identifier may be utilized by the storage array controllers <b>110</b>A-D in conjunction with storage drives <b>171</b>A-F to quickly identify the memory blocks that contain control information. For example, the storage controllers <b>110</b>A-D may issue a command to locate memory blocks that contain control information. It may be noted that control information may be so large that parts of the control information may be stored in multiple locations, that the control information may be stored in multiple locations for purposes of redundancy, for example, or that the control information may otherwise be distributed across multiple memory blocks in the storage drive <b>171</b>A-F.</p><p id="p-0036" num="0035">In implementations, storage array controllers <b>110</b>A-D may offload device management responsibilities from storage drives <b>171</b>A-F of storage array <b>102</b>A-B by retrieving, from the storage drives <b>171</b>A-F, control information describing the state of one or more memory blocks in the storage drives <b>171</b>A-F. Retrieving the control information from the storage drives <b>171</b>A-F may be carried out, for example, by the storage array controller <b>110</b>A-D querying the storage drives <b>171</b>A-F for the location of control information for a particular storage drive <b>171</b>A-F. The storage drives <b>171</b>A-F may be configured to execute instructions that enable the storage drive <b>171</b>A-F to identify the location of the control information. The instructions may be executed by a controller (not shown) associated with or otherwise located on the storage drive <b>171</b>A-F and may cause the storage drive <b>171</b>A-F to scan a portion of each memory block to identify the memory blocks that store control information for the storage drives <b>171</b>A-F. The storage drives <b>171</b>A-F may respond by sending a response message to the storage array controller <b>110</b>A-D that includes the location of control information for the storage drive <b>171</b>A-F. Responsive to receiving the response message, storage array controllers <b>110</b>A-D may issue a request to read data stored at the address associated with the location of control information for the storage drives <b>171</b>A-F.</p><p id="p-0037" num="0036">In other implementations, the storage array controllers <b>110</b>A-D may further offload device management responsibilities from storage drives <b>171</b>A-F by performing, in response to receiving the control information, a storage drive management operation. A storage drive management operation may include, for example, an operation that is typically performed by the storage drive <b>171</b>A-F (e.g., the controller (not shown) associated with a particular storage drive <b>171</b>A-F). A storage drive management operation may include, for example, ensuring that data is not written to failed memory blocks within the storage drive <b>171</b>A-F, ensuring that data is written to memory blocks within the storage drive <b>171</b>A-F in such a way that adequate wear leveling is achieved, and so forth.</p><p id="p-0038" num="0037">In implementations, storage array <b>102</b>A-B may implement two or more storage array controllers <b>110</b>A-D. For example, storage array <b>102</b>A may include storage array controllers <b>110</b>A and storage array controllers <b>110</b>B. At a given instance, a single storage array controller <b>110</b>A-D (e.g., storage array controller <b>110</b>A) of a storage system <b>100</b> may be designated with primary status (also referred to as &#x201c;primary controller&#x201d; herein), and other storage array controllers <b>110</b>A-D (e.g., storage array controller <b>110</b>A) may be designated with secondary status (also referred to as &#x201c;secondary controller&#x201d; herein). The primary controller may have particular rights, such as permission to alter data in persistent storage resource <b>170</b>A-B (e.g., writing data to persistent storage resource <b>170</b>A-B). At least some of the rights of the primary controller may supersede the rights of the secondary controller. For instance, the secondary controller may not have permission to alter data in persistent storage resource <b>170</b>A-B when the primary controller has the right. The status of storage array controllers <b>110</b>A-D may change. For example, storage array controller <b>110</b>A may be designated with secondary status, and storage array controller <b>110</b>B may be designated with primary status.</p><p id="p-0039" num="0038">In some implementations, a primary controller, such as storage array controller <b>110</b>A, may serve as the primary controller for one or more storage arrays <b>102</b>A-B, and a second controller, such as storage array controller <b>110</b>B, may serve as the secondary controller for the one or more storage arrays <b>102</b>A-B. For example, storage array controller <b>110</b>A may be the primary controller for storage array <b>102</b>A and storage array <b>102</b>B, and storage array controller <b>110</b>B may be the secondary controller for storage array <b>102</b>A and <b>102</b>B. In some implementations, storage array controllers <b>110</b>C and <b>110</b>D (also referred to as &#x201c;storage processing modules&#x201d;) may neither have primary or secondary status. Storage array controllers <b>110</b>C and <b>110</b>D, implemented as storage processing modules, may act as a communication interface between the primary and secondary controllers (e.g., storage array controllers <b>110</b>A and <b>110</b>B, respectively) and storage array <b>102</b>B. For example, storage array controller <b>110</b>A of storage array <b>102</b>A may send a write request, via SAN <b>158</b>, to storage array <b>102</b>B. The write request may be received by both storage array controllers <b>110</b>C and <b>110</b>D of storage array <b>102</b>B. Storage array controllers <b>110</b>C and <b>110</b>D facilitate the communication, e.g., send the write request to the appropriate storage drive <b>171</b>A-F. It may be noted that in some implementations storage processing modules may be used to increase the number of storage drives controlled by the primary and secondary controllers.</p><p id="p-0040" num="0039">In implementations, storage array controllers <b>110</b>A-D are communicatively coupled, via a midplane (not shown), to one or more storage drives <b>171</b>A-F and to one or more NVRAM devices (not shown) that are included as part of a storage array <b>102</b>A-B. The storage array controllers <b>110</b>A-D may be coupled to the midplane via one or more data communication links and the midplane may be coupled to the storage drives <b>171</b>A-F and the NVRAM devices via one or more data communications links. The data communications links described herein are collectively illustrated by data communications links <b>108</b>A-D and may include a Peripheral Component Interconnect Express (&#x2018;PCIe&#x2019;) bus, for example.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates an example system for data storage, in accordance with some implementations. Storage array controller <b>101</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref> may be similar to the storage array controllers <b>110</b>A-D described with respect to <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. In one example, storage array controller <b>101</b> may be similar to storage array controller <b>110</b>A or storage array controller <b>110</b>B. Storage array controller <b>101</b> includes numerous elements for purposes of illustration rather than limitation. It may be noted that storage array controller <b>101</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations. It may be noted that elements of <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> may be included below to help illustrate features of storage array controller <b>101</b>.</p><p id="p-0042" num="0041">Storage array controller <b>101</b> may include one or more processing devices <b>104</b> and random access memory (&#x2018;RAM&#x2019;) <b>111</b>. Processing device <b>104</b> (or controller <b>101</b>) represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device <b>104</b> (or controller <b>101</b>) may be a complex instruction set computing (&#x2018;CISC&#x2019;) microprocessor, reduced instruction set computing (&#x2018;RISC&#x2019;) microprocessor, very long instruction word (&#x2018;VLIW&#x2019;) microprocessor, or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device <b>104</b> (or controller <b>101</b>) may also be one or more special-purpose processing devices such as an ASIC, an FPGA, a digital signal processor (&#x2018;DSP&#x2019;), network processor, or the like.</p><p id="p-0043" num="0042">The processing device <b>104</b> may be connected to the RAM <b>111</b> via a data communications link <b>106</b>, which may be embodied as a high speed memory bus such as a Double-Data Rate <b>4</b> (&#x2018;DDR4&#x2019;) bus. Stored in RAM <b>111</b> is an operating system <b>112</b>. In some implementations, instructions <b>113</b> are stored in RAM <b>111</b>. Instructions <b>113</b> may include computer program instructions for performing operations in in a direct-mapped flash storage system. In one embodiment, a direct-mapped flash storage system is one that that addresses data blocks within flash drives directly and without an address translation performed by the storage controllers of the flash drives.</p><p id="p-0044" num="0043">In implementations, storage array controller <b>101</b> includes one or more host bus adapters <b>103</b>A-C that are coupled to the processing device <b>104</b> via a data communications link <b>105</b>A-C. In implementations, host bus adapters <b>103</b>A-C may be computer hardware that connects a host system (e.g., the storage array controller) to other network and storage arrays. In some examples, host bus adapters <b>103</b>A-C may be a Fibre Channel adapter that enables the storage array controller <b>101</b> to connect to a SAN, an Ethernet adapter that enables the storage array controller <b>101</b> to connect to a LAN, or the like. Host bus adapters <b>103</b>A-C may be coupled to the processing device <b>104</b> via a data communications link <b>105</b>A-C such as, for example, a PCIe bus.</p><p id="p-0045" num="0044">In implementations, storage array controller <b>101</b> may include a host bus adapter <b>114</b> that is coupled to an expander <b>115</b>. The expander <b>115</b> may be used to attach a host system to a larger number of storage drives. The expander <b>115</b> may, for example, be a SAS expander utilized to enable the host bus adapter <b>114</b> to attach to storage drives in an implementation where the host bus adapter <b>114</b> is embodied as a SAS controller.</p><p id="p-0046" num="0045">In implementations, storage array controller <b>101</b> may include a switch <b>116</b> coupled to the processing device <b>104</b> via a data communications link <b>109</b>. The switch <b>116</b> may be a computer hardware device that can create multiple endpoints out of a single endpoint, thereby enabling multiple devices to share a single endpoint. The switch <b>116</b> may, for example, be a PCIe switch that is coupled to a PCIe bus (e.g., data communications link <b>109</b>) and presents multiple PCIe connection points to the midplane.</p><p id="p-0047" num="0046">In implementations, storage array controller <b>101</b> includes a data communications link <b>107</b> for coupling the storage array controller <b>101</b> to other storage array controllers. In some examples, data communications link <b>107</b> may be a QuickPath Interconnect (QPI) interconnect.</p><p id="p-0048" num="0047">A traditional storage system that uses traditional flash drives may implement a process across the flash drives that are part of the traditional storage system. For example, a higher level process of the storage system may initiate and control a process across the flash drives. However, a flash drive of the traditional storage system may include its own storage controller that also performs the process. Thus, for the traditional storage system, a higher level process (e.g., initiated by the storage system) and a lower level process (e.g., initiated by a storage controller of the storage system) may both be performed.</p><p id="p-0049" num="0048">To resolve various deficiencies of a traditional storage system, operations may be performed by higher level processes and not by the lower level processes. For example, the flash storage system may include flash drives that do not include storage controllers that provide the process. Thus, the operating system of the flash storage system itself may initiate and control the process. This may be accomplished by a direct-mapped flash storage system that addresses data blocks within the flash drives directly and without an address translation performed by the storage controllers of the flash drives.</p><p id="p-0050" num="0049">The operating system of the flash storage system may identify and maintain a list of allocation units across multiple flash drives of the flash storage system. The allocation units may be entire erase blocks or multiple erase blocks. The operating system may maintain a map or address range that directly maps addresses to erase blocks of the flash drives of the flash storage system.</p><p id="p-0051" num="0050">Direct mapping to the erase blocks of the flash drives may be used to rewrite data and erase data. For example, the operations may be performed on one or more allocation units that include a first data and a second data where the first data is to be retained and the second data is no longer being used by the flash storage system. The operating system may initiate the process to write the first data to new locations within other allocation units and erasing the second data and marking the allocation units as being available for use for subsequent data. Thus, the process may only be performed by the higher level operating system of the flash storage system without an additional lower level process being performed by controllers of the flash drives.</p><p id="p-0052" num="0051">Advantages of the process being performed only by the operating system of the flash storage system include increased reliability of the flash drives of the flash storage system as unnecessary or redundant write operations are not being performed during the process. One possible point of novelty here is the concept of initiating and controlling the process at the operating system of the flash storage system. In addition, the process can be controlled by the operating system across multiple flash drives. This is contrast to the process being performed by a storage controller of a flash drive.</p><p id="p-0053" num="0052">A storage system can consist of two storage array controllers that share a set of drives for failover purposes, or it could consist of a single storage array controller that provides a storage service that utilizes multiple drives, or it could consist of a distributed network of storage array controllers each with some number of drives or some amount of Flash storage where the storage array controllers in the network collaborate to provide a complete storage service and collaborate on various aspects of a storage service including storage allocation and garbage collection.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>1</b>C</figref> illustrates a third example system <b>117</b> for data storage in accordance with some implementations. System <b>117</b> (also referred to as &#x201c;storage system&#x201d; herein) includes numerous elements for purposes of illustration rather than limitation. It may be noted that system <b>117</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations.</p><p id="p-0055" num="0054">In one embodiment, system <b>117</b> includes a dual Peripheral Component Interconnect (PCP) flash storage device <b>118</b> with separately addressable fast write storage. System <b>117</b> may include a storage controller <b>119</b>. In one embodiment, storage controller <b>119</b>A-D may be a CPU, ASIC, FPGA, or any other circuitry that may implement control structures necessary according to the present disclosure. In one embodiment, system <b>117</b> includes flash memory devices (e.g., including flash memory devices <b>120</b><i>a</i>-<i>n</i>), operatively coupled to various channels of the storage device controller <b>119</b>. Flash memory devices <b>120</b><i>a</i>-<i>n</i>, may be presented to the controller <b>119</b>A-D as an addressable collection of Flash pages, erase blocks, and/or control elements sufficient to allow the storage device controller <b>119</b>A-D to program and retrieve various aspects of the Flash. In one embodiment, storage device controller <b>119</b>A-D may perform operations on flash memory devices <b>120</b><i>a</i>-<i>n </i>including storing and retrieving data content of pages, arranging and erasing any blocks, tracking statistics related to the use and reuse of Flash memory pages, erase blocks, and cells, tracking and predicting error codes and faults within the Flash memory, controlling voltage levels associated with programming and retrieving contents of Flash cells, etc.</p><p id="p-0056" num="0055">In one embodiment, system <b>117</b> may include RAM <b>121</b> to store separately addressable fast-write data. In one embodiment, RAM <b>121</b> may be one or more separate discrete devices. In another embodiment, RAM <b>121</b> may be integrated into storage device controller <b>119</b>A-D or multiple storage device controllers. The RAM <b>121</b> may be utilized for other purposes as well, such as temporary program memory for a processing device (e.g., a CPU) in the storage device controller <b>119</b>.</p><p id="p-0057" num="0056">In one embodiment, system <b>117</b> may include a stored energy device <b>122</b>, such as a rechargeable battery or a capacitor. Stored energy device <b>122</b> may store energy sufficient to power the storage device controller <b>119</b>, some amount of the RAM (e.g., RAM <b>121</b>), and some amount of Flash memory (e.g., Flash memory <b>120</b><i>a</i>-<b>120</b><i>n</i>) for sufficient time to write the contents of RAM to Flash memory. In one embodiment, storage device controller <b>119</b>A-D may write the contents of RAM to Flash Memory if the storage device controller detects loss of external power.</p><p id="p-0058" num="0057">In one embodiment, system <b>117</b> includes two data communications links <b>123</b><i>a</i>, <b>123</b><i>b</i>. In one embodiment, data communications links <b>123</b><i>a</i>, <b>123</b><i>b </i>may be PCI interfaces. In another embodiment, data communications links <b>123</b><i>a</i>, <b>123</b><i>b </i>may be based on other communications standards (e.g., HyperTransport, InfiniBand, etc.). Data communications links <b>123</b><i>a</i>, <b>123</b><i>b </i>may be based on non-volatile memory express (&#x2018;NVMe&#x2019;) or NVMe over fabrics (&#x2018;NVMf&#x2019;) specifications that allow external connection to the storage device controller <b>119</b>A-D from other components in the storage system <b>117</b>. It should be noted that data communications links may be interchangeably referred to herein as PCI buses for convenience.</p><p id="p-0059" num="0058">System <b>117</b> may also include an external power source (not shown), which may be provided over one or both data communications links <b>123</b><i>a</i>, <b>123</b><i>b</i>, or which may be provided separately. An alternative embodiment includes a separate Flash memory (not shown) dedicated for use in storing the content of RAM <b>121</b>. The storage device controller <b>119</b>A-D may present a logical device over a PCI bus which may include an addressable fast-write logical device, or a distinct part of the logical address space of the storage device <b>118</b>, which may be presented as PCI memory or as persistent storage. In one embodiment, operations to store into the device are directed into the RAM <b>121</b>. On power failure, the storage device controller <b>119</b>A-D may write stored content associated with the addressable fast-write logical storage to Flash memory (e.g., Flash memory <b>120</b><i>a</i>-<i>n</i>) for long-term persistent storage.</p><p id="p-0060" num="0059">In one embodiment, the logical device may include some presentation of some or all of the content of the Flash memory devices <b>120</b><i>a</i>-<i>n</i>, where that presentation allows a storage system including a storage device <b>118</b> (e.g., storage system <b>117</b>) to directly address Flash memory pages and directly reprogram erase blocks from storage system components that are external to the storage device through the PCI bus. The presentation may also allow one or more of the external components to control and retrieve other aspects of the Flash memory including some or all of: tracking statistics related to use and reuse of Flash memory pages, erase blocks, and cells across all the Flash memory devices; tracking and predicting error codes and faults within and across the Flash memory devices; controlling voltage levels associated with programming and retrieving contents of Flash cells; etc.</p><p id="p-0061" num="0060">In one embodiment, the stored energy device <b>122</b> may be sufficient to ensure completion of in-progress operations to the Flash memory devices <b>120</b><i>a</i>-<b>120</b><i>n </i>stored energy device <b>122</b> may power storage device controller <b>119</b>A-D and associated Flash memory devices (e.g., <b>120</b><i>a</i>-<i>n</i>) for those operations, as well as for the storing of fast-write RAM to Flash memory. Stored energy device <b>122</b> may be used to store accumulated statistics and other parameters kept and tracked by the Flash memory devices <b>120</b><i>a</i>-<i>n </i>and/or the storage device controller <b>119</b>. Separate capacitors or stored energy devices (such as smaller capacitors near or embedded within the Flash memory devices themselves) may be used for some or all of the operations described herein.</p><p id="p-0062" num="0061">Various schemes may be used to track and optimize the life span of the stored energy component, such as adjusting voltage levels over time, partially discharging the storage energy device <b>122</b> to measure corresponding discharge characteristics, etc. If the available energy decreases over time, the effective available capacity of the addressable fast-write storage may be decreased to ensure that it can be written safely based on the currently available stored energy.</p><p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. <b>1</b>D</figref> illustrates a third example system <b>124</b> for data storage in accordance with some implementations. In one embodiment, system <b>124</b> includes storage controllers <b>125</b><i>a</i>, <b>125</b><i>b</i>. In one embodiment, storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>are operatively coupled to Dual PCI storage devices <b>119</b><i>a</i>, <b>119</b><i>b </i>and <b>119</b><i>c</i>, <b>119</b><i>d</i>, respectively. Storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may be operatively coupled (e.g., via a storage network <b>130</b>) to some number of host computers <b>127</b><i>a</i>-<i>n. </i></p><p id="p-0064" num="0063">In one embodiment, two storage controllers (e.g., <b>125</b><i>a </i>and <b>125</b><i>b</i>) provide storage services, such as a SCS) block storage array, a file server, an object server, a database or data analytics service, etc. The storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may provide services through some number of network interfaces (e.g., <b>126</b><i>a</i>-<i>d</i>) to host computers <b>127</b><i>a</i>-<i>n </i>outside of the storage system <b>124</b>. Storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may provide integrated services or an application entirely within the storage system <b>124</b>, forming a converged storage and compute system. The storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may utilize the fast write memory within or across storage devices <b>119</b><i>a</i>-<i>d </i>to journal in progress operations to ensure the operations are not lost on a power failure, storage controller removal, storage controller or storage system shutdown, or some fault of one or more software or hardware components within the storage system <b>124</b>.</p><p id="p-0065" num="0064">In one embodiment, controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>operate as PCI masters to one or the other PCI buses <b>128</b><i>a</i>, <b>128</b><i>b</i>. In another embodiment, <b>128</b><i>a </i>and <b>128</b><i>b </i>may be based on other communications standards (e.g., HyperTransport, InfiniBand, etc.). Other storage system embodiments may operate storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>as multi-masters for both PCI buses <b>128</b><i>a</i>, <b>128</b><i>b</i>. Alternately, a PCI/NVMe/NVMf switching infrastructure or fabric may connect multiple storage controllers. Some storage system embodiments may allow storage devices to communicate with each other directly rather than communicating only with storage controllers. In one embodiment, a storage device controller <b>119</b><i>a </i>may be operable under direction from a storage controller <b>125</b><i>a </i>to synthesize and transfer data to be stored into Flash memory devices from data that has been stored in RAM (e.g., RAM <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>). For example, a recalculated version of RAM content may be transferred after a storage controller has determined that an operation has fully committed across the storage system, or when fast-write memory on the device has reached a certain used capacity, or after a certain amount of time, to ensure improve safety of the data or to release addressable fast-write capacity for reuse. This mechanism may be used, for example, to avoid a second transfer over a bus (e.g., <b>128</b><i>a</i>, <b>128</b><i>b</i>) from the storage controllers <b>125</b><i>a</i>, <b>125</b><i>b</i>. In one embodiment, a recalculation may include compressing data, attaching indexing or other metadata, combining multiple data segments together, performing erasure code calculations, etc.</p><p id="p-0066" num="0065">In one embodiment, under direction from a storage controller <b>125</b><i>a</i>, <b>125</b><i>b</i>, a storage device controller <b>119</b><i>a</i>, <b>119</b><i>b </i>may be operable to calculate and transfer data to other storage devices from data stored in RAM (e.g., RAM <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>) without involvement of the storage controllers <b>125</b><i>a</i>, <b>125</b><i>b</i>. This operation may be used to mirror data stored in one controller <b>125</b><i>a </i>to another controller <b>125</b><i>b</i>, or it could be used to offload compression, data aggregation, and/or erasure coding calculations and transfers to storage devices to reduce load on storage controllers or the storage controller interface <b>129</b><i>a</i>, <b>129</b><i>b </i>to the PCI bus <b>128</b><i>a</i>, <b>128</b><i>b. </i></p><p id="p-0067" num="0066">A storage device controller <b>119</b>A-D may include mechanisms for implementing high availability primitives for use by other parts of a storage system external to the Dual PCI storage device <b>118</b>. For example, reservation or exclusion primitives may be provided so that, in a storage system with two storage controllers providing a highly available storage service, one storage controller may prevent the other storage controller from accessing or continuing to access the storage device. This could be used, for example, in cases where one controller detects that the other controller is not functioning properly or where the interconnect between the two storage controllers may itself not be functioning properly.</p><p id="p-0068" num="0067">In one embodiment, a storage system for use with Dual PCI direct mapped storage devices with separately addressable fast write storage includes systems that manage erase blocks or groups of erase blocks as allocation units for storing data on behalf of the storage service, or for storing metadata (e.g., indexes, logs, etc.) associated with the storage service, or for proper management of the storage system itself. Flash pages, which may be a few kilobytes in size, may be written as data arrives or as the storage system is to persist data for long intervals of time (e.g., above a defined threshold of time). To commit data more quickly, or to reduce the number of writes to the Flash memory devices, the storage controllers may first write data into the separately addressable fast write storage on one more storage devices.</p><p id="p-0069" num="0068">In one embodiment, the storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may initiate the use of erase blocks within and across storage devices (e.g., <b>118</b>) in accordance with an age and expected remaining lifespan of the storage devices, or based on other statistics. The storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may initiate garbage collection and data migration data between storage devices in accordance with pages that are no longer needed as well as to manage Flash page and erase block lifespans and to manage overall system performance.</p><p id="p-0070" num="0069">In one embodiment, the storage system <b>124</b> may utilize mirroring and/or erasure coding schemes as part of storing data into addressable fast write storage and/or as part of writing data into allocation units associated with erase blocks. Erasure codes may be used across storage devices, as well as within erase blocks or allocation units, or within and across Flash memory devices on a single storage device, to provide redundancy against single or multiple storage device failures or to protect against internal corruptions of Flash memory pages resulting from Flash memory operations or from degradation of Flash memory cells. Mirroring and erasure coding at various levels may be used to recover from multiple types of failures that occur separately or in combination.</p><p id="p-0071" num="0070">The embodiments depicted with reference to <figref idref="DRAWINGS">FIGS. <b>2</b>A-G</figref> illustrate a storage cluster that stores user data, such as user data originating from one or more user or client systems or other sources external to the storage cluster. The storage cluster distributes user data across storage nodes housed within a chassis, or across multiple chassis, using erasure coding and redundant copies of metadata. Erasure coding refers to a method of data protection or reconstruction in which data is stored across a set of different locations, such as disks, storage nodes or geographic locations. Flash memory is one type of solid-state memory that may be integrated with the embodiments, although the embodiments may be extended to other types of solid-state memory or other storage medium, including non-solid state memory. Control of storage locations and workloads are distributed across the storage locations in a clustered peer-to-peer system. Tasks such as mediating communications between the various storage nodes, detecting when a storage node has become unavailable, and balancing I/Os (inputs and outputs) across the various storage nodes, are all handled on a distributed basis. Data is laid out or distributed across multiple storage nodes in data fragments or stripes that support data recovery in some embodiments. Ownership of data can be reassigned within a cluster, independent of input and output patterns. This architecture described in more detail below allows a storage node in the cluster to fail, with the system remaining operational, since the data can be reconstructed from other storage nodes and thus remain available for input and output operations. In various embodiments, a storage node may be referred to as a cluster node, a blade, or a server.</p><p id="p-0072" num="0071">The storage cluster may be contained within a chassis, i.e., an enclosure housing one or more storage nodes. A mechanism to provide power to each storage node, such as a power distribution bus, and a communication mechanism, such as a communication bus that enables communication between the storage nodes are included within the chassis. The storage cluster can run as an independent system in one location according to some embodiments. In one embodiment, a chassis contains at least two instances of both the power distribution and the communication bus which may be enabled or disabled independently. The internal communication bus may be an Ethernet bus, however, other technologies such as PCIe, InfiniBand, and others, are equally suitable. The chassis provides a port for an external communication bus for enabling communication between multiple chassis, directly or through a switch, and with client systems. The external communication may use a technology such as Ethernet, InfiniBand, Fibre Channel, etc. In some embodiments, the external communication bus uses different communication bus technologies for inter-chassis and client communication. If a switch is deployed within or between chassis, the switch may act as a translation between multiple protocols or technologies. When multiple chassis are connected to define a storage cluster, the storage cluster may be accessed by a client using either proprietary interfaces or standard interfaces such as network file system (&#x2018;NFS&#x2019;), common internet file system (&#x2018;CIFS&#x2019;), small computer system interface (&#x2018;SCSI&#x2019;) or hypertext transfer protocol (&#x2018;HTTP&#x2019;). Translation from the client protocol may occur at the switch, chassis external communication bus or within each storage node. In some embodiments, multiple chassis may be coupled or connected to each other through an aggregator switch. A portion and/or all of the coupled or connected chassis may be designated as a storage cluster. As discussed above, each chassis can have multiple blades, each blade has a media access control (&#x2018;MAC&#x2019;) address, but the storage cluster is presented to an external network as having a single cluster IP address and a single MAC address in some embodiments.</p><p id="p-0073" num="0072">Each storage node may be one or more storage servers and each storage server is connected to one or more non-volatile solid state memory units, which may be referred to as storage units or storage devices. One embodiment includes a single storage server in each storage node and between one to eight non-volatile solid state memory units, however this one example is not meant to be limiting. The storage server may include a processor, DRAM and interfaces for the internal communication bus and power distribution for each of the power buses. Inside the storage node, the interfaces and storage unit share a communication bus, e.g., PCI Express, in some embodiments. The non-volatile solid state memory units may directly access the internal communication bus interface through a storage node communication bus, or request the storage node to access the bus interface. The non-volatile solid state memory unit contains an embedded CPU, solid state storage controller, and a quantity of solid state mass storage, e.g., between 2-32 terabytes (&#x2018;TB&#x2019;) in some embodiments. An embedded volatile storage medium, such as DRAM, and an energy reserve apparatus are included in the non-volatile solid state memory unit. In some embodiments, the energy reserve apparatus is a capacitor, super-capacitor, or battery that enables transferring a subset of DRAM contents to a stable storage medium in the case of power loss. In some embodiments, the non-volatile solid state memory unit is constructed with a storage class memory, such as phase change or magnetoresistive random access memory (&#x2018;MRAM&#x2019;) that substitutes for DRAM and enables a reduced power hold-up apparatus.</p><p id="p-0074" num="0073">One of many features of the storage nodes and non-volatile solid state storage is the ability to proactively rebuild data in a storage cluster. The storage nodes and non-volatile solid state storage can determine when a storage node or non-volatile solid state storage in the storage cluster is unreachable, independent of whether there is an attempt to read data involving that storage node or non-volatile solid state storage. The storage nodes and non-volatile solid state storage then cooperate to recover and rebuild the data in at least partially new locations. This constitutes a proactive rebuild, in that the system rebuilds data without waiting until the data is needed for a read access initiated from a client system employing the storage cluster. These and further details of the storage memory and operation thereof are discussed below.</p><p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a perspective view of a storage cluster <b>161</b>, with multiple storage nodes <b>150</b> and internal solid-state memory coupled to each storage node to provide network attached storage or storage area network, in accordance with some embodiments. A network attached storage, storage area network, or a storage cluster, or other storage memory, could include one or more storage clusters <b>161</b>, each having one or more storage nodes <b>150</b>, in a flexible and reconfigurable arrangement of both the physical components and the amount of storage memory provided thereby. The storage cluster <b>161</b> is designed to fit in a rack, and one or more racks can be set up and populated as desired for the storage memory. The storage cluster <b>161</b> has a chassis <b>138</b> having multiple slots <b>142</b>. It should be appreciated that chassis <b>138</b> may be referred to as a housing, enclosure, or rack unit. In one embodiment, the chassis <b>138</b> has fourteen slots <b>142</b>, although other numbers of slots are readily devised. For example, some embodiments have four slots, eight slots, sixteen slots, thirty-two slots, or other suitable number of slots. Each slot <b>142</b> can accommodate one storage node <b>150</b> in some embodiments. Chassis <b>138</b> includes flaps <b>148</b> that can be utilized to mount the chassis <b>138</b> on a rack. Fans <b>144</b> provide air circulation for cooling of the storage nodes <b>150</b> and components thereof, although other cooling components could be used, or an embodiment could be devised without cooling components. A switch fabric <b>146</b> couples storage nodes <b>150</b> within chassis <b>138</b> together and to a network for communication to the memory. In an embodiment depicted in herein, the slots <b>142</b> to the left of the switch fabric <b>146</b> and fans <b>144</b> are shown occupied by storage nodes <b>150</b>, while the slots <b>142</b> to the right of the switch fabric <b>146</b> and fans <b>144</b> are empty and available for insertion of storage node <b>150</b> for illustrative purposes. This configuration is one example, and one or more storage nodes <b>150</b> could occupy the slots <b>142</b> in various further arrangements. The storage node arrangements need not be sequential or adjacent in some embodiments. Storage nodes <b>150</b> are hot pluggable, meaning that a storage node <b>150</b> can be inserted into a slot <b>142</b> in the chassis <b>138</b>, or removed from a slot <b>142</b>, without stopping or powering down the system. Upon insertion or removal of storage node <b>150</b> from slot <b>142</b>, the system automatically reconfigures in order to recognize and adapt to the change. Reconfiguration, in some embodiments, includes restoring redundancy and/or rebalancing data or load.</p><p id="p-0076" num="0075">Each storage node <b>150</b> can have multiple components. In the embodiment shown here, the storage node <b>150</b> includes a printed circuit board <b>159</b> populated by a CPU <b>156</b>, i.e., processor, a memory <b>154</b> coupled to the CPU <b>156</b>, and a non-volatile solid state storage <b>152</b> coupled to the CPU <b>156</b>, although other mountings and/or components could be used in further embodiments. The memory <b>154</b> has instructions which are executed by the CPU <b>156</b> and/or data operated on by the CPU <b>156</b>. As further explained below, the non-volatile solid state storage <b>152</b> includes flash or, in further embodiments, other types of solid-state memory.</p><p id="p-0077" num="0076">Referring to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, storage cluster <b>161</b> is scalable, meaning that storage capacity with non-uniform storage sizes is readily added, as described above. One or more storage nodes <b>150</b> can be plugged into or removed from each chassis and the storage cluster self-configures in some embodiments. Plug-in storage nodes <b>150</b>, whether installed in a chassis as delivered or later added, can have different sizes. For example, in one embodiment a storage node <b>150</b> can have any multiple of 4 TB, e.g., 8 TB, 12 TB, 16 TB, 32 TB, etc. In further embodiments, a storage node <b>150</b> could have any multiple of other storage amounts or capacities. Storage capacity of each storage node <b>150</b> is broadcast, and influences decisions of how to stripe the data. For maximum storage efficiency, an embodiment can self-configure as wide as possible in the stripe, subject to a predetermined requirement of continued operation with loss of up to one, or up to two, non-volatile solid state storage units <b>152</b> or storage nodes <b>150</b> within the chassis.</p><p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram showing a communications interconnect <b>173</b> and power distribution bus <b>172</b> coupling multiple storage nodes <b>150</b>. Referring back to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the communications interconnect <b>173</b> can be included in or implemented with the switch fabric <b>146</b> in some embodiments. Where multiple storage clusters <b>161</b> occupy a rack, the communications interconnect <b>173</b> can be included in or implemented with a top of rack switch, in some embodiments. As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, storage cluster <b>161</b> is enclosed within a single chassis <b>138</b>. External port <b>176</b> is coupled to storage nodes <b>150</b> through communications interconnect <b>173</b>, while external port <b>174</b> is coupled directly to a storage node. External power port <b>178</b> is coupled to power distribution bus <b>172</b>. Storage nodes <b>150</b> may include varying amounts and differing capacities of non-volatile solid state storage <b>152</b> as described with reference to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. In addition, one or more storage nodes <b>150</b> may be a compute only storage node as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>. Authorities <b>168</b> are implemented on the non-volatile solid state storages <b>152</b>, for example as lists or other data structures stored in memory. In some embodiments the authorities are stored within the non-volatile solid state storage <b>152</b> and supported by software executing on a controller or other processor of the non-volatile solid state storage <b>152</b>. In a further embodiment, authorities <b>168</b> are implemented on the storage nodes <b>150</b>, for example as lists or other data structures stored in the memory <b>154</b> and supported by software executing on the CPU <b>156</b> of the storage node <b>150</b>. Authorities <b>168</b> control how and where data is stored in the non-volatile solid state storages <b>152</b> in some embodiments. This control assists in determining which type of erasure coding scheme is applied to the data, and which storage nodes <b>150</b> have which portions of the data. Each authority <b>168</b> may be assigned to a non-volatile solid state storage <b>152</b>. Each authority may control a range of inode numbers, segment numbers, or other data identifiers which are assigned to data by a file system, by the storage nodes <b>150</b>, or by the non-volatile solid state storage <b>152</b>, in various embodiments.</p><p id="p-0079" num="0078">Every piece of data, and every piece of metadata, has redundancy in the system in some embodiments. In addition, every piece of data and every piece of metadata has an owner, which may be referred to as an authority. If that authority is unreachable, for example through failure of a storage node, there is a plan of succession for how to find that data or that metadata. In various embodiments, there are redundant copies of authorities <b>168</b>. Authorities <b>168</b> have a relationship to storage nodes <b>150</b> and non-volatile solid state storage <b>152</b> in some embodiments. Each authority <b>168</b>, covering a range of data segment numbers or other identifiers of the data, may be assigned to a specific non-volatile solid state storage <b>152</b>. In some embodiments the authorities <b>168</b> for all of such ranges are distributed over the non-volatile solid state storages <b>152</b> of a storage cluster. Each storage node <b>150</b> has a network port that provides access to the non-volatile solid state storage(s) <b>152</b> of that storage node <b>150</b>. Data can be stored in a segment, which is associated with a segment number and that segment number is an indirection for a configuration of a RAID (redundant array of independent disks) stripe in some embodiments. The assignment and use of the authorities <b>168</b> thus establishes an indirection to data. Indirection may be referred to as the ability to reference data indirectly, in this case via an authority <b>168</b>, in accordance with some embodiments. A segment identifies a set of non-volatile solid state storage <b>152</b> and a local identifier into the set of non-volatile solid state storage <b>152</b> that may contain data. In some embodiments, the local identifier is an offset into the device and may be reused sequentially by multiple segments. In other embodiments the local identifier is unique for a specific segment and never reused. The offsets in the non-volatile solid state storage <b>152</b> are applied to locating data for writing to or reading from the non-volatile solid state storage <b>152</b> (in the form of a RAID stripe). Data is striped across multiple units of non-volatile solid state storage <b>152</b>, which may include or be different from the non-volatile solid state storage <b>152</b> having the authority <b>168</b> for a particular data segment.</p><p id="p-0080" num="0079">If there is a change in where a particular segment of data is located, e.g., during a data move or a data reconstruction, the authority <b>168</b> for that data segment should be consulted, at that non-volatile solid state storage <b>152</b> or storage node <b>150</b> having that authority <b>168</b>. In order to locate a particular piece of data, embodiments calculate a hash value for a data segment or apply an inode number or a data segment number. The output of this operation points to a non-volatile solid state storage <b>152</b> having the authority <b>168</b> for that particular piece of data. In some embodiments there are two stages to this operation. The first stage maps an entity identifier (ID), e.g., a segment number, inode number, or directory number to an authority identifier. This mapping may include a calculation such as a hash or a bit mask. The second stage is mapping the authority identifier to a particular non-volatile solid state storage <b>152</b>, which may be done through an explicit mapping. The operation is repeatable, so that when the calculation is performed, the result of the calculation repeatably and reliably points to a particular non-volatile solid state storage <b>152</b> having that authority <b>168</b>. The operation may include the set of reachable storage nodes as input. If the set of reachable non-volatile solid state storage units changes the optimal set changes. In some embodiments, the persisted value is the current assignment (which is always true) and the calculated value is the target assignment the cluster will attempt to reconfigure towards. This calculation may be used to determine the optimal non-volatile solid state storage <b>152</b> for an authority in the presence of a set of non-volatile solid state storage <b>152</b> that are reachable and constitute the same cluster. The calculation also determines an ordered set of peer non-volatile solid state storage <b>152</b> that will also record the authority to non-volatile solid state storage mapping so that the authority may be determined even if the assigned non-volatile solid state storage is unreachable. A duplicate or substitute authority <b>168</b> may be consulted if a specific authority <b>168</b> is unavailable in some embodiments.</p><p id="p-0081" num="0080">With reference to <figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref>, two of the many tasks of the CPU <b>156</b> on a storage node <b>150</b> are to break up write data, and reassemble read data. When the system has determined that data is to be written, the authority <b>168</b> for that data is located as above. When the segment ID for data is already determined the request to write is forwarded to the non-volatile solid state storage <b>152</b> currently determined to be the host of the authority <b>168</b> determined from the segment. The host CPU <b>156</b> of the storage node <b>150</b>, on which the non-volatile solid state storage <b>152</b> and corresponding authority <b>168</b> reside, then breaks up or shards the data and transmits the data out to various non-volatile solid state storage <b>152</b>. The transmitted data is written as a data stripe in accordance with an erasure coding scheme. In some embodiments, data is requested to be pulled, and in other embodiments, data is pushed. In reverse, when data is read, the authority <b>168</b> for the segment ID containing the data is located as described above. The host CPU <b>156</b> of the storage node <b>150</b> on which the non-volatile solid state storage <b>152</b> and corresponding authority <b>168</b> reside requests the data from the non-volatile solid state storage and corresponding storage nodes pointed to by the authority. In some embodiments the data is read from flash storage as a data stripe. The host CPU <b>156</b> of storage node <b>150</b> then reassembles the read data, correcting any errors (if present) according to the appropriate erasure coding scheme, and forwards the reassembled data to the network. In further embodiments, some or all of these tasks can be handled in the non-volatile solid state storage <b>152</b>. In some embodiments, the segment host requests the data be sent to storage node <b>150</b> by requesting pages from storage and then sending the data to the storage node making the original request.</p><p id="p-0082" num="0081">In some systems, for example in UNIX-style file systems, data is handled with an index node or inode, which specifies a data structure that represents an object in a file system. The object could be a file or a directory, for example. Metadata may accompany the object, as attributes such as permission data and a creation timestamp, among other attributes. A segment number could be assigned to all or a portion of such an object in a file system. In other systems, data segments are handled with a segment number assigned elsewhere. For purposes of discussion, the unit of distribution is an entity, and an entity can be a file, a directory or a segment. That is, entities are units of data or metadata stored by a storage system. Entities are grouped into sets called authorities. Each authority has an authority owner, which is a storage node that has the exclusive right to update the entities in the authority. In other words, a storage node contains the authority, and that the authority, in turn, contains entities.</p><p id="p-0083" num="0082">A segment is a logical container of data in accordance with some embodiments. A segment is an address space between medium address space and physical flash locations, i.e., the data segment number, are in this address space. Segments may also contain meta-data, which enable data redundancy to be restored (rewritten to different flash locations or devices) without the involvement of higher level software. In one embodiment, an internal format of a segment contains client data and medium mappings to determine the position of that data. Each data segment is protected, e.g., from memory and other failures, by breaking the segment into a number of data and parity shards, where applicable. The data and parity shards are distributed, i.e., striped, across non-volatile solid state storage <b>152</b> coupled to the host CPUs <b>156</b> (See <figref idref="DRAWINGS">FIGS. <b>2</b>E and <b>2</b>G</figref>) in accordance with an erasure coding scheme. Usage of the term segments refers to the container and its place in the address space of segments in some embodiments. Usage of the term stripe refers to the same set of shards as a segment and includes how the shards are distributed along with redundancy or parity information in accordance with some embodiments.</p><p id="p-0084" num="0083">A series of address-space transformations takes place across an entire storage system. At the top are the directory entries (file names) which link to an inode. Inodes point into medium address space, where data is logically stored. Medium addresses may be mapped through a series of indirect mediums to spread the load of large files, or implement data services like deduplication or snapshots. Medium addresses may be mapped through a series of indirect mediums to spread the load of large files, or implement data services like deduplication or snapshots. Segment addresses are then translated into physical flash locations. Physical flash locations have an address range bounded by the amount of flash in the system in accordance with some embodiments. Medium addresses and segment addresses are logical containers, and in some embodiments use a 128 bit or larger identifier so as to be practically infinite, with a likelihood of reuse calculated as longer than the expected life of the system. Addresses from logical containers are allocated in a hierarchical fashion in some embodiments. Initially, each non-volatile solid state storage unit <b>152</b> may be assigned a range of address space. Within this assigned range, the non-volatile solid state storage <b>152</b> is able to allocate addresses without synchronization with other non-volatile solid state storage <b>152</b>.</p><p id="p-0085" num="0084">Data and metadata is stored by a set of underlying storage layouts that are optimized for varying workload patterns and storage devices. These layouts incorporate multiple redundancy schemes, compression formats and index algorithms. Some of these layouts store information about authorities and authority masters, while others store file metadata and file data. The redundancy schemes include error correction codes that tolerate corrupted bits within a single storage device (such as a NAND flash chip), erasure codes that tolerate the failure of multiple storage nodes, and replication schemes that tolerate data center or regional failures. In some embodiments, low density parity check (&#x2018;IDPC&#x2019;) code is used within a single storage unit. Reed-Solomon encoding is used within a storage cluster, and mirroring is used within a storage grid in some embodiments. Metadata may be stored using an ordered log structured index (such as a Log Structured Merge Tree), and large data may not be stored in a log structured layout.</p><p id="p-0086" num="0085">In order to maintain consistency across multiple copies of an entity, the storage nodes agree implicitly on two things through calculations: (1) the authority that contains the entity, and (2) the storage node that contains the authority. The assignment of entities to authorities can be done by pseudo randomly assigning entities to authorities, by splitting entities into ranges based upon an externally produced key, or by placing a single entity into each authority. Examples of pseudorandom schemes are linear hashing and the Replication Under Scalable Hashing (&#x2018;RUSH&#x2019;) family of hashes, including Controlled Replication Under Scalable Hashing (&#x2018;CRUSH&#x2019;). In some embodiments, pseudo-random assignment is utilized only for assigning authorities to nodes because the set of nodes can change. The set of authorities cannot change so any subjective function may be applied in these embodiments. Some placement schemes automatically place authorities on storage nodes, while other placement schemes rely on an explicit mapping of authorities to storage nodes. In some embodiments, a pseudorandom scheme is utilized to map from each authority to a set of candidate authority owners. A pseudorandom data distribution function related to CRUSH may assign authorities to storage nodes and create a list of where the authorities are assigned. Each storage node has a copy of the pseudorandom data distribution function, and can arrive at the same calculation for distributing, and later finding or locating an authority. Each of the pseudorandom schemes requires the reachable set of storage nodes as input in some embodiments in order to conclude the same target nodes. Once an entity has been placed in an authority, the entity may be stored on physical devices so that no expected failure will lead to unexpected data loss. In some embodiments, rebalancing algorithms attempt to store the copies of all entities within an authority in the same layout and on the same set of machines.</p><p id="p-0087" num="0086">Examples of expected failures include device failures, stolen machines, datacenter fires, and regional disasters, such as nuclear or geological events. Different failures lead to different levels of acceptable data loss. In some embodiments, a stolen storage node impacts neither the security nor the reliability of the system, while depending on system configuration, a regional event could lead to no loss of data, a few seconds or minutes of lost updates, or even complete data loss.</p><p id="p-0088" num="0087">In the embodiments, the placement of data for storage redundancy is independent of the placement of authorities for data consistency. In some embodiments, storage nodes that contain authorities do not contain any persistent storage. Instead, the storage nodes are connected to non-volatile solid state storage units that do not contain authorities. The communications interconnect between storage nodes and non-volatile solid state storage units consists of multiple communication technologies and has non-uniform performance and fault tolerance characteristics. In some embodiments, as mentioned above, non-volatile solid state storage units are connected to storage nodes via PCI express, storage nodes are connected together within a single chassis using Ethernet backplane, and chassis are connected together to form a storage cluster. Storage clusters are connected to clients using Ethernet or fiber channel in some embodiments. If multiple storage clusters are configured into a storage grid, the multiple storage clusters are connected using the Internet or other long-distance networking links, such as a &#x201c;metro scale&#x201d; link or private link that does not traverse the internet.</p><p id="p-0089" num="0088">Authority owners have the exclusive right to modify entities, to migrate entities from one non-volatile solid state storage unit to another non-volatile solid state storage unit, and to add and remove copies of entities. This allows for maintaining the redundancy of the underlying data. When an authority owner fails, is going to be decommissioned, or is overloaded, the authority is transferred to a new storage node. Transient failures make it non-trivial to ensure that all non-faulty machines agree upon the new authority location. The ambiguity that arises due to transient failures can be achieved automatically by a consensus protocol such as Paxos, hot-warm failover schemes, via manual intervention by a remote system administrator, or by a local hardware administrator (such as by physically removing the failed machine from the cluster, or pressing a button on the failed machine). In some embodiments, a consensus protocol is used, and failover is automatic. If too many failures or replication events occur in too short a time period, the system goes into a self-preservation mode and halts replication and data movement activities until an administrator intervenes in accordance with some embodiments.</p><p id="p-0090" num="0089">As authorities are transferred between storage nodes and authority owners update entities in their authorities, the system transfers messages between the storage nodes and non-volatile solid state storage units. With regard to persistent messages, messages that have different purposes are of different types. Depending on the type of the message, the system maintains different ordering and durability guarantees. As the persistent messages are being processed, the messages are temporarily stored in multiple durable and non-durable storage hardware technologies. In some embodiments, messages are stored in RAM, NVRAM and on NAND flash devices, and a variety of protocols are used in order to make efficient use of each storage medium. Latency-sensitive client requests may be persisted in replicated NVRAM, and then later NAND, while background rebalancing operations are persisted directly to NAND.</p><p id="p-0091" num="0090">Persistent messages are persistently stored prior to being transmitted. This allows the system to continue to serve client requests despite failures and component replacement. Although many hardware components contain unique identifiers that are visible to system administrators, manufacturer, hardware supply chain and ongoing monitoring quality control infrastructure, applications running on top of the infrastructure address virtualize addresses. These virtualized addresses do not change over the lifetime of the storage system, regardless of component failures and replacements. This allows each component of the storage system to be replaced over time without reconfiguration or disruptions of client request processing, i.e., the system supports non-disruptive upgrades.</p><p id="p-0092" num="0091">In some embodiments, the virtualized addresses are stored with sufficient redundancy. A continuous monitoring system correlates hardware and software status and the hardware identifiers. This allows detection and prediction of failures due to faulty components and manufacturing details. The monitoring system also enables the proactive transfer of authorities and entities away from impacted devices before failure occurs by removing the component from the critical path in some embodiments.</p><p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a multiple level block diagram, showing contents of a storage node <b>150</b> and contents of a non-volatile solid state storage <b>152</b> of the storage node <b>150</b>. Data is communicated to and from the storage node <b>150</b> by a network interface controller (&#x2018;NIC&#x2019;) <b>202</b> in some embodiments. Each storage node <b>150</b> has a CPU <b>156</b>, and one or more non-volatile solid state storage <b>152</b>, as discussed above. Moving down one level in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, each non-volatile solid state storage <b>152</b> has a relatively fast non-volatile solid state memory, such as nonvolatile random access memory (&#x2018;NVRAM&#x2019;) <b>204</b>, and flash memory <b>206</b>. In some embodiments, NVRAM <b>204</b> may be a component that does not require program/erase cycles (DRAM, MRAM, PCM), and can be a memory that can support being written vastly more often than the memory is read from. Moving down another level in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, the NVRAM <b>204</b> is implemented in one embodiment as high speed volatile memory, such as dynamic random access memory (DRAM) <b>216</b>, backed up by energy reserve <b>218</b>. Energy reserve <b>218</b> provides sufficient electrical power to keep the DRAM <b>216</b> powered long enough for contents to be transferred to the flash memory <b>206</b> in the event of power failure. In some embodiments, energy reserve <b>218</b> is a capacitor, super-capacitor, battery, or other device, that supplies a suitable supply of energy sufficient to enable the transfer of the contents of DRAM <b>216</b> to a stable storage medium in the case of power loss. The flash memory <b>206</b> is implemented as multiple flash dies <b>222</b>, which may be referred to as packages of flash dies <b>222</b> or an array of flash dies <b>222</b>. It should be appreciated that the flash dies <b>222</b> could be packaged in any number of ways, with a single die per package, multiple dies per package (i.e. multichip packages), in hybrid packages, as bare dies on a printed circuit board or other substrate, as encapsulated dies, etc. In the embodiment shown, the non-volatile solid state storage <b>152</b> has a controller <b>212</b> or other processor, and an input output (I/O) port <b>210</b> coupled to the controller <b>212</b>. I/O port <b>210</b> is coupled to the CPU <b>156</b> and/or the network interface controller <b>202</b> of the flash storage node <b>150</b>. Flash input output (I/O) port <b>220</b> is coupled to the flash dies <b>222</b>, and a direct memory access unit (DMA) <b>214</b> is coupled to the controller <b>212</b>, the DRAM <b>216</b> and the flash dies <b>222</b>. In the embodiment shown, the I/O port <b>210</b>, controller <b>212</b>, DMA unit <b>214</b> and flash I/O port <b>220</b> are implemented on a programmable logic device (&#x2018;PLD&#x2019;) <b>208</b>, e.g., an FPGA. In this embodiment, each flash die <b>222</b> has pages, organized as sixteen kB (kilobyte) pages <b>224</b>, and a register <b>226</b> through which data can be written to or read from the flash die <b>222</b>. In further embodiments, other types of solid-state memory are used in place of, or in addition to flash memory illustrated within flash die <b>222</b>.</p><p id="p-0094" num="0093">Storage clusters <b>161</b>, in various embodiments as disclosed herein, can be contrasted with storage arrays in general. The storage nodes <b>150</b> are part of a collection that creates the storage cluster <b>161</b>. Each storage node <b>150</b> owns a slice of data and computing required to provide the data. Multiple storage nodes <b>150</b> cooperate to store and retrieve the data. Storage memory or storage devices, as used in storage arrays in general, are less involved with processing and manipulating the data. Storage memory or storage devices in a storage array receive commands to read, write, or erase data. The storage memory or storage devices in a storage array are not aware of a larger system in which they are embedded, or what the data means. Storage memory or storage devices in storage arrays can include various types of storage memory, such as RAM, solid state drives, hard disk drives, etc. The storage units <b>152</b> described herein have multiple interfaces active simultaneously and serving multiple purposes. In some embodiments, some of the functionality of a storage node <b>150</b> is shifted into a storage unit <b>152</b>, transforming the storage unit <b>152</b> into a combination of storage unit <b>152</b> and storage node <b>150</b>. Placing computing (relative to storage data) into the storage unit <b>152</b> places this computing closer to the data itself. The various system embodiments have a hierarchy of storage node layers with different capabilities. By contrast, in a storage array, a controller owns and knows everything about all of the data that the controller manages in a shelf or storage devices. In a storage cluster <b>161</b>, as described herein, multiple controllers in multiple storage units <b>152</b> and/or storage nodes <b>150</b> cooperate in various ways (e.g., for erasure coding, data sharding, metadata communication and redundancy, storage capacity expansion or contraction, data recovery, and so on).</p><p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a storage server environment, which uses embodiments of the storage nodes <b>150</b> and storage units <b>152</b> of <figref idref="DRAWINGS">FIGS. <b>2</b>A-C</figref>. In this version, each storage unit <b>152</b> has a processor such as controller <b>212</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>), an FPGA, flash memory <b>206</b>, and NVRAM <b>204</b> (which is super-capacitor backed DRAM <b>216</b>, see <figref idref="DRAWINGS">FIGS. <b>2</b>B and <b>2</b>C</figref>) on a PCIe (peripheral component interconnect express) board in a chassis <b>138</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>). The storage unit <b>152</b> may be implemented as a single board containing storage, and may be the largest tolerable failure domain inside the chassis. In some embodiments, up to two storage units <b>152</b> may fail and the device will continue with no data loss.</p><p id="p-0096" num="0095">The physical storage is divided into named regions based on application usage in some embodiments. The NVRAM <b>204</b> is a contiguous block of reserved memory in the storage unit <b>152</b> DRAM <b>216</b>, and is backed by NAND flash. NVRAM <b>204</b> is logically divided into multiple memory regions written for two as spool (e.g., spool_region). Space within the NVRAM <b>204</b> spools is managed by each authority <b>168</b> independently. Each device provides an amount of storage space to each authority <b>168</b>. That authority <b>168</b> further manages lifetimes and allocations within that space. Examples of a spool include distributed transactions or notions. When the primary power to a storage unit <b>152</b> fails, onboard super-capacitors provide a short duration of power hold up. During this holdup interval, the contents of the NVRAM <b>204</b> are flushed to flash memory <b>206</b>. On the next power-on, the contents of the NVRAM <b>204</b> are recovered from the flash memory <b>206</b>.</p><p id="p-0097" num="0096">As for the storage unit controller, the responsibility of the logical &#x201c;controller&#x201d; is distributed across each of the blades containing authorities <b>168</b>. This distribution of logical control is shown in <figref idref="DRAWINGS">FIG. <b>2</b>D</figref> as a host controller <b>242</b>, mid-tier controller <b>244</b> and storage unit controller(s) <b>246</b>. Management of the control plane and the storage plane are treated independently, although parts may be physically co-located on the same blade. Each authority <b>168</b> effectively serves as an independent controller. Each authority <b>168</b> provides its own data and metadata structures, its own background workers, and maintains its own lifecycle.</p><p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. <b>2</b>E</figref> is a blade <b>252</b> hardware block diagram, showing a control plane <b>254</b>, compute and storage planes <b>256</b>, <b>258</b>, and authorities <b>168</b> interacting with underlying physical resources, using embodiments of the storage nodes <b>150</b> and storage units <b>152</b> of <figref idref="DRAWINGS">FIGS. <b>2</b>A-C</figref> in the storage server environment of <figref idref="DRAWINGS">FIG. <b>2</b>D</figref>. The control plane <b>254</b> is partitioned into a number of authorities <b>168</b> which can use the compute resources in the compute plane <b>256</b> to run on any of the blades <b>252</b>. The storage plane <b>258</b> is partitioned into a set of devices, each of which provides access to flash <b>206</b> and NVRAM <b>204</b> resources. In one embodiment, the compute plane <b>256</b> may perform the operations of a storage array controller, as described herein, on one or more devices of the storage plane <b>258</b> (e.g., a storage array).</p><p id="p-0099" num="0098">In the compute and storage planes <b>256</b>, <b>258</b> of <figref idref="DRAWINGS">FIG. <b>2</b>E</figref>, the authorities <b>168</b> interact with the underlying physical resources (i.e., devices). From the point of view of an authority <b>168</b>, its resources are striped over all of the physical devices. From the point of view of a device, it provides resources to all authorities <b>168</b>, irrespective of where the authorities happen to run. Each authority <b>168</b> has allocated or has been allocated one or more partitions <b>260</b> of storage memory in the storage units <b>152</b>, e.g. partitions <b>260</b> in flash memory <b>206</b> and NVRAM <b>204</b>. Each authority <b>168</b> uses those allocated partitions <b>260</b> that belong to it, for writing or reading user data. Authorities can be associated with differing amounts of physical storage of the system. For example, one authority <b>168</b> could have a larger number of partitions <b>260</b> or larger sized partitions <b>260</b> in one or more storage units <b>152</b> than one or more other authorities <b>168</b>.</p><p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. <b>2</b>F</figref> depicts elasticity software layers in blades <b>252</b> of a storage cluster, in accordance with some embodiments. In the elasticity structure, elasticity software is symmetric, i.e., each blade's compute module <b>270</b> runs the three identical layers of processes depicted in <figref idref="DRAWINGS">FIG. <b>2</b>F</figref>. Storage managers <b>274</b> execute read and write requests from other blades <b>252</b> for data and metadata stored in local storage unit <b>152</b> NVRAM <b>204</b> and flash <b>206</b>. Authorities <b>168</b> fulfill client requests by issuing the necessary reads and writes to the blades <b>252</b> on whose storage units <b>152</b> the corresponding data or metadata resides. Endpoints <b>272</b> parse client connection requests received from switch fabric <b>146</b> supervisory software, relay the client connection requests to the authorities <b>168</b> responsible for fulfillment, and relay the authorities' <b>168</b> responses to clients. The symmetric three-layer structure enables the storage system's high degree of concurrency. Elasticity scales out efficiently and reliably in these embodiments. In addition, elasticity implements a unique scale-out technique that balances work evenly across all resources regardless of client access pattern, and maximizes concurrency by eliminating much of the need for inter-blade coordination that typically occurs with conventional distributed locking.</p><p id="p-0101" num="0100">Still referring to <figref idref="DRAWINGS">FIG. <b>2</b>F</figref>, authorities <b>168</b> running in the compute modules <b>270</b> of a blade <b>252</b> perform the internal operations required to fulfill client requests. One feature of elasticity is that authorities <b>168</b> are stateless, i.e., they cache active data and metadata in their own blades' <b>252</b> DRAMs for fast access, but the authorities store every update in their NVRAM <b>204</b> partitions on three separate blades <b>252</b> until the update has been written to flash <b>206</b>. All the storage system writes to NVRAM <b>204</b> are in triplicate to partitions on three separate blades <b>252</b> in some embodiments. With triple-mirrored NVRAM <b>204</b> and persistent storage protected by parity and Reed-Solomon RAID checksums, the storage system can survive concurrent failure of two blades <b>252</b> with no loss of data, metadata, or access to either.</p><p id="p-0102" num="0101">Because authorities <b>168</b> are stateless, they can migrate between blades <b>252</b>. Each authority <b>168</b> has a unique identifier. NVRAM <b>204</b> and flash <b>206</b> partitions are associated with authorities' <b>168</b> identifiers, not with the blades <b>252</b> on which they are running in some. Thus, when an authority <b>168</b> migrates, the authority <b>168</b> continues to manage the same storage partitions from its new location. When a new blade <b>252</b> is installed in an embodiment of the storage cluster, the system automatically rebalances load by: partitioning the new blade's <b>252</b> storage for use by the system's authorities <b>168</b>, migrating selected authorities <b>168</b> to the new blade <b>252</b>, starting endpoints <b>272</b> on the new blade <b>252</b> and including them in the switch fabric's <b>146</b> client connection distribution algorithm.</p><p id="p-0103" num="0102">From their new locations, migrated authorities <b>168</b> persist the contents of their NVRAM <b>204</b> partitions on flash <b>206</b>, process read and write requests from other authorities <b>168</b>, and fulfill the client requests that endpoints <b>272</b> direct to them. Similarly, if a blade <b>252</b> fails or is removed, the system redistributes its authorities <b>168</b> among the system's remaining blades <b>252</b>. The redistributed authorities <b>168</b> continue to perform their original functions from their new locations.</p><p id="p-0104" num="0103"><figref idref="DRAWINGS">FIG. <b>2</b>G</figref> depicts authorities <b>168</b> and storage resources in blades <b>252</b> of a storage cluster, in accordance with some embodiments. Each authority <b>168</b> is exclusively responsible for a partition of the flash <b>206</b> and NVRAM <b>204</b> on each blade <b>252</b>. The authority <b>168</b> manages the content and integrity of its partitions independently of other authorities <b>168</b>. Authorities <b>168</b> compress incoming data and preserve it temporarily in their NVRAM <b>204</b> partitions, and then consolidate, RAID-protect, and persist the data in segments of the storage in their flash <b>206</b> partitions. As the authorities <b>168</b> write data to flash <b>206</b>, storage managers <b>274</b> perform the necessary flash translation to optimize write performance and maximize media longevity. In the background, authorities <b>168</b> &#x201c;garbage collect,&#x201d; or reclaim space occupied by data that clients have made obsolete by overwriting the data. It should be appreciated that since authorities' <b>168</b> partitions are disjoint, there is no need for distributed locking to execute client and writes or to perform background functions.</p><p id="p-0105" num="0104">The embodiments described herein may utilize various software, communication and/or networking protocols. In addition, the configuration of the hardware and/or software may be adjusted to accommodate various protocols. For example, the embodiments may utilize Active Directory, which is a database based system that provides authentication, directory, policy, and other services in a WINDOWS&#x2122; environment. In these embodiments, LDAP (Lightweight Directory Access Protocol) is one example application protocol for querying and modifying items in directory service providers such as Active Directory. In some embodiments, a network lock manager (&#x2018;NLM&#x2019;) is utilized as a facility that works in cooperation with the Network File System (&#x2018;NFS&#x2019;) to provide a System V style of advisory file and record locking over a network. The Server Message Block (&#x2018; SMB&#x2019;) protocol, one version of which is also known as Common Internet File System (&#x2018;CIFS&#x2019;), may be integrated with the storage systems discussed herein. SMP operates as an application-layer network protocol typically used for providing shared access to files, printers, and serial ports and miscellaneous communications between nodes on a network. SMB also provides an authenticated inter-process communication mechanism. AMAZON&#x2122; S3 (Simple Storage Service) is a web service offered by Amazon Web Services, and the systems described herein may interface with Amazon S3 through web services interfaces (REST (representational state transfer), SOAP (simple object access protocol), and BitTorrent). A RESTful API (application programming interface) breaks down a transaction to create a series of small modules. Each module addresses a particular underlying part of the transaction. The control or permissions provided with these embodiments, especially for object data, may include utilization of an access control list (&#x2018;ACL&#x2019;). The ACL is a list of permissions attached to an object and the ACL specifies which users or system processes are granted access to objects, as well as what operations are allowed on given objects. The systems may utilize Internet Protocol version 6 (&#x2018;IPv6&#x2019;), as well as IPv4, for the communications protocol that provides an identification and location system for computers on networks and routes traffic across the Internet. The routing of packets between networked systems may include Equal-cost multi-path routing (&#x2018;ECMP&#x2019;), which is a routing strategy where next-hop packet forwarding to a single destination can occur over multiple &#x201c;best paths&#x201d; which tie for top place in routing metric calculations. Multi-path routing can be used in conjunction with most routing protocols, because it is a per-hop decision limited to a single router. The software may support Multi-tenancy, which is an architecture in which a single instance of a software application serves multiple customers. Each customer may be referred to as a tenant. Tenants may be given the ability to customize some parts of the application, but may not customize the application's code, in some embodiments. The embodiments may maintain audit logs. An audit log is a document that records an event in a computing system. In addition to documenting what resources were accessed, audit log entries typically include destination and source addresses, a timestamp, and user login information for compliance with various regulations. The embodiments may support various key management policies, such as encryption key rotation. In addition, the system may support dynamic root passwords or some variation dynamically changing passwords.</p><p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> sets forth a diagram of a storage system <b>306</b> that is coupled for data communications with a cloud services provider <b>302</b> in accordance with some embodiments of the present disclosure. Although depicted in less detail, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> and <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref>. In some embodiments, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied as a storage system that includes imbalanced active/active controllers, as a storage system that includes balanced active/active controllers, as a storage system that includes active/active controllers where less than all of each controller's resources are utilized such that each controller has reserve resources that may be used to support failover, as a storage system that includes fully active/active controllers, as a storage system that includes dataset-segregated controllers, as a storage system that includes dual-layer architectures with front-end controllers and back-end integrated storage controllers, as a storage system that includes scale-out clusters of dual-controller arrays, as well as combinations of such embodiments.</p><p id="p-0107" num="0106">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the storage system <b>306</b> is coupled to the cloud services provider <b>302</b> via a data communications link <b>304</b>. The data communications link <b>304</b> may be embodied as a dedicated data communications link, as a data communications pathway that is provided through the use of one or data communications networks such as a wide area network (&#x2018;WAN&#x2019;) or LAN, or as some other mechanism capable of transporting digital information between the storage system <b>306</b> and the cloud services provider <b>302</b>. Such a data communications link <b>304</b> may be fully wired, fully wireless, or some aggregation of wired and wireless data communications pathways. In such an example, digital information may be exchanged between the storage system <b>306</b> and the cloud services provider <b>302</b> via the data communications link <b>304</b> using one or more data communications protocols. For example, digital information may be exchanged between the storage system <b>306</b> and the cloud services provider <b>302</b> via the data communications link <b>304</b> using the handheld device transfer protocol (&#x2018;HDTP&#x2019;), hypertext transfer protocol (&#x2018;HTTP&#x2019;), internet protocol (&#x2018;IP&#x2019;), real-time transfer protocol (&#x2018;RTP&#x2019;), transmission control protocol (&#x2018;TCP&#x2019;), user datagram protocol (&#x2018;UDP&#x2019;), wireless application protocol (&#x2018;WAP&#x2019;), or other protocol.</p><p id="p-0108" num="0107">The cloud services provider <b>302</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied, for example, as a system and computing environment that provides a vast array of services to users of the cloud services provider <b>302</b> through the sharing of computing resources via the data communications link <b>304</b>. The cloud services provider <b>302</b> may provide on-demand access to a shared pool of configurable computing resources such as computer networks, servers, storage, applications and services, and so on. The shared pool of configurable resources may be rapidly provisioned and released to a user of the cloud services provider <b>302</b> with minimal management effort. Generally, the user of the cloud services provider <b>302</b> is unaware of the exact computing resources utilized by the cloud services provider <b>302</b> to provide the services. Although in many cases such a cloud services provider <b>302</b> may be accessible via the Internet, readers of skill in the art will recognize that any system that abstracts the use of shared resources to provide services to a user through any data communications link may be considered a cloud services provider <b>302</b>.</p><p id="p-0109" num="0108">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the cloud services provider <b>302</b> may be configured to provide a variety of services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of various service models. For example, the cloud services provider <b>302</b> may be configured to provide services through the implementation of an infrastructure as a service (&#x2018;IaaS&#x2019;) service model, through the implementation of a platform as a service (&#x2018;PaaS&#x2019;) service model, through the implementation of a software as a service (&#x2018;SaaS&#x2019;) service model, through the implementation of an authentication as a service (&#x2018;AaaS&#x2019;) service model, through the implementation of a storage as a service model where the cloud services provider <b>302</b> offers access to its storage infrastructure for use by the storage system <b>306</b> and users of the storage system <b>306</b>, and so on. Readers will appreciate that the cloud services provider <b>302</b> may be configured to provide additional services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of additional service models, as the service models described above are included only for explanatory purposes and in no way represent a limitation of the services that may be offered by the cloud services provider <b>302</b> or a limitation as to the service models that may be implemented by the cloud services provider <b>302</b>.</p><p id="p-0110" num="0109">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the cloud services provider <b>302</b> may be embodied, for example, as a private cloud, as a public cloud, or as a combination of a private cloud and public cloud. In an embodiment in which the cloud services provider <b>302</b> is embodied as a private cloud, the cloud services provider <b>302</b> may be dedicated to providing services to a single organization rather than providing services to multiple organizations. In an embodiment where the cloud services provider <b>302</b> is embodied as a public cloud, the cloud services provider <b>302</b> may provide services to multiple organizations. In still alternative embodiments, the cloud services provider <b>302</b> may be embodied as a mix of a private and public cloud services with a hybrid cloud deployment.</p><p id="p-0111" num="0110">Although not explicitly depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, readers will appreciate that a vast amount of additional hardware components and additional software components may be necessary to facilitate the delivery of cloud services to the storage system <b>306</b> and users of the storage system <b>306</b>. For example, the storage system <b>306</b> may be coupled to (or even include) a cloud storage gateway. Such a cloud storage gateway may be embodied, for example, as hardware-based or software-based appliance that is located on premise with the storage system <b>306</b>. Such a cloud storage gateway may operate as a bridge between local applications that are executing on the storage array <b>306</b> and remote, cloud-based storage that is utilized by the storage array <b>306</b>. Through the use of a cloud storage gateway, organizations may move primary iSCSI or NAS to the cloud services provider <b>302</b>, thereby enabling the organization to save space on their on-premises storage systems. Such a cloud storage gateway may be configured to emulate a disk array, a block-based device, a file server, or other storage system that can translate the SCSI commands, file server commands, or other appropriate command into REST-space protocols that facilitate communications with the cloud services provider <b>302</b>.</p><p id="p-0112" num="0111">In order to enable the storage system <b>306</b> and users of the storage system <b>306</b> to make use of the services provided by the cloud services provider <b>302</b>, a cloud migration process may take place during which data, applications, or other elements from an organization's local systems (or even from another cloud environment) are moved to the cloud services provider <b>302</b>. In order to successfully migrate data, applications, or other elements to the cloud services provider's <b>302</b> environment, middleware such as a cloud migration tool may be utilized to bridge gaps between the cloud services provider's <b>302</b> environment and an organization's environment. Such cloud migration tools may also be configured to address potentially high network costs and long transfer times associated with migrating large volumes of data to the cloud services provider <b>302</b>, as well as addressing security concerns associated with sensitive data to the cloud services provider <b>302</b> over data communications networks. In order to further enable the storage system <b>306</b> and users of the storage system <b>306</b> to make use of the services provided by the cloud services provider <b>302</b>, a cloud orchestrator may also be used to arrange and coordinate automated tasks in pursuit of creating a consolidated process or workflow. Such a cloud orchestrator may perform tasks such as configuring various components, whether those components are cloud components or on-premises components, as well as managing the interconnections between such components. The cloud orchestrator can simplify the inter-component communication and connections to ensure that links are correctly configured and maintained.</p><p id="p-0113" num="0112">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, and as described briefly above, the cloud services provider <b>302</b> may be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the usage of a SaaS service model, eliminating the need to install and run the application on local computers, which may simplify maintenance and support of the application. Such applications may take many forms in accordance with various embodiments of the present disclosure. For example, the cloud services provider <b>302</b> may be configured to provide access to data analytics applications to the storage system <b>306</b> and users of the storage system <b>306</b>. Such data analytics applications may be configured, for example, to receive vast amounts of telemetry data phoned home by the storage system <b>306</b>. Such telemetry data may describe various operating characteristics of the storage system <b>306</b> and may be analyzed for a vast array of purposes including, for example, to determine the health of the storage system <b>306</b>, to identify workloads that are executing on the storage system <b>306</b>, to predict when the storage system <b>306</b> will run out of various resources, to recommend configuration changes, hardware or software upgrades, workflow migrations, or other actions that may improve the operation of the storage system <b>306</b>.</p><p id="p-0114" num="0113">The cloud services provider <b>302</b> may also be configured to provide access to virtualized computing environments to the storage system <b>306</b> and users of the storage system <b>306</b>. Such virtualized computing environments may be embodied, for example, as a virtual machine or other virtualized computer hardware platforms, virtual storage devices, virtualized computer network resources, and so on. Examples of such virtualized environments can include virtual machines that are created to emulate an actual computer, virtualized desktop environments that separate a logical desktop from a physical machine, virtualized file systems that allow uniform access to different types of concrete file systems, and many others.</p><p id="p-0115" num="0114">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> sets forth a diagram of a storage system <b>306</b> in accordance with some embodiments of the present disclosure. Although depicted in less detail, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> and <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref> as the storage system may include many of the components described above.</p><p id="p-0116" num="0115">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may include a vast amount of storage resources <b>308</b>, which may be embodied in many forms. For example, the storage resources <b>308</b> can include nano-RAM or another form of nonvolatile random access memory that utilizes carbon nanotubes deposited on a substrate, 3D crosspoint non-volatile memory, flash memory including single-level cell (&#x2018;SLC&#x2019;) NAND flash, multi-level cell (&#x2018;MLC&#x2019;) NAND flash, triple-level cell (&#x2018;TLC&#x2019;) NAND flash, quad-level cell (&#x2018;QLC&#x2019;) NAND flash, or others. Likewise, the storage resources <b>308</b> may include non-volatile magnetoresistive random-access memory (&#x2018;MRAM&#x2019;), including spin transfer torque (&#x2018;STT&#x2019;) MRAM. The example storage resources <b>308</b> may alternatively include non-volatile phase-change memory (&#x2018;PCM&#x2019;), quantum memory that allows for the storage and retrieval of photonic quantum information, resistive random-access memory (&#x2018;ReRAM&#x2019;), storage class memory (&#x2018;SCM&#x2019;), or other form of storage resources, including any combination of resources described herein. Readers will appreciate that other forms of computer memories and storage devices may be utilized by the storage systems described above, including DRAM, SRAM, EEPROM, universal memory, and many others. The storage resources <b>308</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied in a variety of form factors, including but not limited to, dual in-line memory modules (&#x2018;DIMMs&#x2019;), non-volatile dual in-line memory modules (&#x2018;NVDIMMs&#x2019;), M.2, U.2, and others.</p><p id="p-0117" num="0116">The storage resources <b>308</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may include various forms of SCM. SCM may effectively treat fast, non-volatile memory (e.g., NAND flash) as an extension of DRAM such that an entire dataset may be treated as an in-memory dataset that resides entirely in DRAM. SCM may include non-volatile media such as, for example, NAND flash. Such NAND flash may be accessed utilizing NVMe that can use the PCIe bus as its transport, providing for relatively low access latencies compared to older protocols. In fact, the network protocols used for SSDs in all-flash arrays can include NVMe using Ethernet (ROCE, NVME TCP), Fibre Channel (NVMe FC), InfiniBand (iWARP), and others that make it possible to treat fast, non-volatile memory as an extension of DRAM. In view of the fact that DRAM is often byte-addressable and fast, non-volatile memory such as NAND flash is block-addressable, a controller software/hardware stack may be needed to convert the block data to the bytes that are stored in the media. Examples of media and software that may be used as SCM can include, for example, 3D XPoint, Intel Memory Drive Technology, Samsung's Z-SSD, and others.</p><p id="p-0118" num="0117">The example storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may implement a variety of storage architectures. For example, storage systems in accordance with some embodiments of the present disclosure may utilize block storage where data is stored in blocks, and each block essentially acts as an individual hard drive. Storage systems in accordance with some embodiments of the present disclosure may utilize object storage, where data is managed as objects. Each object may include the data itself, a variable amount of metadata, and a globally unique identifier, where object storage can be implemented at multiple levels (e.g., device level, system level, interface level). Storage systems in accordance with some embodiments of the present disclosure utilize file storage in which data is stored in a hierarchical structure. Such data may be saved in files and folders, and presented to both the system storing it and the system retrieving it in the same format.</p><p id="p-0119" num="0118">The example storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be embodied as a storage system in which additional storage resources can be added through the use of a scale-up model, additional storage resources can be added through the use of a scale-out model, or through some combination thereof. In a scale-up model, additional storage may be added by adding additional storage devices. In a scale-out model, however, additional storage nodes may be added to a cluster of storage nodes, where such storage nodes can include additional processing resources, additional networking resources, and so on.</p><p id="p-0120" num="0119">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes communications resources <b>310</b> that may be useful in facilitating data communications between components within the storage system <b>306</b>, as well as data communications between the storage system <b>306</b> and computing devices that are outside of the storage system <b>306</b>, including embodiments where those resources are separated by a relatively vast expanse. The communications resources <b>310</b> may be configured to utilize a variety of different protocols and data communication fabrics to facilitate data communications between components within the storage systems as well as computing devices that are outside of the storage system. For example, the communications resources <b>310</b> can include fibre channel (&#x2018;FC&#x2019;) technologies such as FC fabrics and FC protocols that can transport SCSI commands over FC network, FC over ethernet (&#x2018;FCoE&#x2019;) technologies through which FC frames are encapsulated and transmitted over Ethernet networks, InfiniBand (&#x2018;IB&#x2019;) technologies in which a switched fabric topology is utilized to facilitate transmissions between channel adapters, NVM Express (&#x2018;NVMe&#x2019;) technologies and NVMe over fabrics (&#x2018;NVMeoF&#x2019;) technologies through which non-volatile storage media attached via a PCI express (&#x2018;PCIe&#x2019;) bus may be accessed, and others. In fact, the storage systems described above may, directly or indirectly, make use of neutrino communication technologies and devices through which information (including binary information) is transmitted using a beam of neutrinos.</p><p id="p-0121" num="0120">The communications resources <b>310</b> can also include mechanisms for accessing storage resources <b>308</b> within the storage system <b>306</b> utilizing serial attached SCSI (&#x2018;SAS&#x2019;), serial ATA (&#x2018;SATA&#x2019;) bus interfaces for connecting storage resources <b>308</b> within the storage system <b>306</b> to host bus adapters within the storage system <b>306</b>, internet small computer systems interface (&#x2018;iSCSI&#x2019;) technologies to provide block-level access to storage resources <b>308</b> within the storage system <b>306</b>, and other communications resources that that may be useful in facilitating data communications between components within the storage system <b>306</b>, as well as data communications between the storage system <b>306</b> and computing devices that are outside of the storage system <b>306</b>.</p><p id="p-0122" num="0121">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes processing resources <b>312</b> that may be useful in useful in executing computer program instructions and performing other computational tasks within the storage system <b>306</b>. The processing resources <b>312</b> may include one or more ASICs that are customized for some particular purpose as well as one or more CPUs. The processing resources <b>312</b> may also include one or more DSPs, one or more FPGAs, one or more systems on a chip (&#x2018;SoCs&#x2019;), or other form of processing resources <b>312</b>. The storage system <b>306</b> may utilize the storage resources <b>312</b> to perform a variety of tasks including, but not limited to, supporting the execution of software resources <b>314</b> that will be described in greater detail below.</p><p id="p-0123" num="0122">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes software resources <b>314</b> that, when executed by processing resources <b>312</b> within the storage system <b>306</b>, may perform a vast array of tasks. The software resources <b>314</b> may include, for example, one or more modules of computer program instructions that when executed by processing resources <b>312</b> within the storage system <b>306</b> are useful in carrying out various data protection techniques to preserve the integrity of data that is stored within the storage systems. Readers will appreciate that such data protection techniques may be carried out, for example, by system software executing on computer hardware within the storage system, by a cloud services provider, or in other ways. Such data protection techniques can include, for example, data archiving techniques that cause data that is no longer actively used to be moved to a separate storage device or separate storage system for long-term retention, data backup techniques through which data stored in the storage system may be copied and stored in a distinct location to avoid data loss in the event of equipment failure or some other form of catastrophe with the storage system, data replication techniques through which data stored in the storage system is replicated to another storage system such that the data may be accessible via multiple storage systems, data snapshotting techniques through which the state of data within the storage system is captured at various points in time, data and database cloning techniques through which duplicate copies of data and databases may be created, and other data protection techniques.</p><p id="p-0124" num="0123">The software resources <b>314</b> may also include software that is useful in implementing software-defined storage (&#x2018;SDS&#x2019;). In such an example, the software resources <b>314</b> may include one or more modules of computer program instructions that, when executed, are useful in policy-based provisioning and management of data storage that is independent of the underlying hardware. Such software resources <b>314</b> may be useful in implementing storage virtualization to separate the storage hardware from the software that manages the storage hardware.</p><p id="p-0125" num="0124">The software resources <b>314</b> may also include software that is useful in facilitating and optimizing I/O operations that are directed to the storage resources <b>308</b> in the storage system <b>306</b>. For example, the software resources <b>314</b> may include software modules that perform carry out various data reduction techniques such as, for example, data compression, data deduplication, and others. The software resources <b>314</b> may include software modules that intelligently group together I/O operations to facilitate better usage of the underlying storage resource <b>308</b>, software modules that perform data migration operations to migrate from within a storage system, as well as software modules that perform other functions. Such software resources <b>314</b> may be embodied as one or more software containers or in many other ways.</p><p id="p-0126" num="0125">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> sets forth an example of a cloud-based storage system <b>318</b> in accordance with some embodiments of the present disclosure. In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the cloud-based storage system <b>318</b> is created entirely in a cloud computing environment <b>316</b> such as, for example, Amazon Web Services (&#x2018;AWS&#x2019;), Microsoft Azure, Google Cloud Platform, IBM Cloud, Oracle Cloud, and others. The cloud-based storage system <b>318</b> may be used to provide services similar to the services that may be provided by the storage systems described above. For example, the cloud-based storage system <b>318</b> may be used to provide block storage services to users of the cloud-based storage system <b>318</b>, the cloud-based storage system <b>318</b> may be used to provide storage services to users of the cloud-based storage system <b>318</b> through the use of solid-state storage, and so on.</p><p id="p-0127" num="0126">The cloud-based storage system <b>318</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> includes two cloud computing instances <b>320</b>, <b>322</b> that each are used to support the execution of a storage controller application <b>324</b>, <b>326</b>. The cloud computing instances <b>320</b>, <b>322</b> may be embodied, for example, as instances of cloud computing resources (e.g., virtual machines) that may be provided by the cloud computing environment <b>316</b> to support the execution of software applications such as the storage controller application <b>324</b>, <b>326</b>. In one embodiment, the cloud computing instances <b>320</b>, <b>322</b> may be embodied as Amazon Elastic Compute Cloud (&#x2018;EC2&#x2019;) instances. In such an example, an Amazon Machine Image (&#x2018;AMI&#x2019;) that includes the storage controller application <b>324</b>, <b>326</b> may be booted to create and configure a virtual machine that may execute the storage controller application <b>324</b>, <b>326</b>.</p><p id="p-0128" num="0127">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the storage controller application <b>324</b>, <b>326</b> may be embodied as a module of computer program instructions that, when executed, carries out various storage tasks. For example, the storage controller application <b>324</b>, <b>326</b> may be embodied as a module of computer program instructions that, when executed, carries out the same tasks as the controllers <b>110</b>A, <b>110</b>B in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> described above such as writing data received from the users of the cloud-based storage system <b>318</b> to the cloud-based storage system <b>318</b>, erasing data from the cloud-based storage system <b>318</b>, retrieving data from the cloud-based storage system <b>318</b> and providing such data to users of the cloud-based storage system <b>318</b>, monitoring and reporting of disk utilization and performance, performing redundancy operations, such as RAID or RAID-like data redundancy operations, compressing data, encrypting data, deduplicating data, and so forth. Readers will appreciate that because there are two cloud computing instances <b>320</b>, <b>322</b> that each include the storage controller application <b>324</b>, <b>326</b>, in some embodiments one cloud computing instance <b>320</b> may operate as the primary controller as described above while the other cloud computing instance <b>322</b> may operate as the secondary controller as described above. Readers will appreciate that the storage controller application <b>324</b>, <b>326</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> may include identical source code that is executed within different cloud computing instances <b>320</b>, <b>322</b>.</p><p id="p-0129" num="0128">Consider an example in which the cloud computing environment <b>316</b> is embodied as AWS and the cloud computing instances are embodied as EC2 instances. In such an example, the cloud computing instance <b>320</b> that operates as the primary controller may be deployed on one of the instance types that has a relatively large amount of memory and processing power while the cloud computing instance <b>322</b> that operates as the secondary controller may be deployed on one of the instance types that has a relatively small amount of memory and processing power. In such an example, upon the occurrence of a failover event where the roles of primary and secondary are switched, a double failover may actually be carried out such that: 1) a first failover event where the cloud computing instance <b>322</b> that formerly operated as the secondary controller begins to operate as the primary controller, and 2) a third cloud computing instance (not shown) that is of an instance type that has a relatively large amount of memory and processing power is spun up with a copy of the storage controller application, where the third cloud computing instance begins operating as the primary controller while the cloud computing instance <b>322</b> that originally operated as the secondary controller begins operating as the secondary controller again. In such an example, the cloud computing instance <b>320</b> that formerly operated as the primary controller may be terminated. Readers will appreciate that in alternative embodiments, the cloud computing instance <b>320</b> that is operating as the secondary controller after the failover event may continue to operate as the secondary controller and the cloud computing instance <b>322</b> that operated as the primary controller after the occurrence of the failover event may be terminated once the primary role has been assumed by the third cloud computing instance (not shown).</p><p id="p-0130" num="0129">Readers will appreciate that while the embodiments described above relate to embodiments where one cloud computing instance <b>320</b> operates as the primary controller and the second cloud computing instance <b>322</b> operates as the secondary controller, other embodiments are within the scope of the present disclosure. For example, each cloud computing instance <b>320</b>, <b>322</b> may operate as a primary controller for some portion of the address space supported by the cloud-based storage system <b>318</b>, each cloud computing instance <b>320</b>, <b>322</b> may operate as a primary controller where the servicing of I/O operations directed to the cloud-based storage system <b>318</b> are divided in some other way, and so on. In fact, in other embodiments where costs savings may be prioritized over performance demands, only a single cloud computing instance may exist that contains the storage controller application.</p><p id="p-0131" num="0130">The cloud-based storage system <b>318</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> includes cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. The cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> may be embodied, for example, as instances of cloud computing resources that may be provided by the cloud computing environment <b>316</b> to support the execution of software applications. The cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>of <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> may differ from the cloud computing instances <b>320</b>, <b>322</b> described above as the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>of <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> have local storage <b>330</b>, <b>334</b>, <b>338</b> resources whereas the cloud computing instances <b>320</b>, <b>322</b> that support the execution of the storage controller application <b>324</b>, <b>326</b> need not have local storage resources. The cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may be embodied, for example, as EC2 M5 instances that include one or more SSDs, as EC2 R5 instances that include one or more SSDs, as EC2 I3 instances that include one or more SSDs, and so on. In some embodiments, the local storage <b>330</b>, <b>334</b>, <b>338</b> must be embodied as solid-state storage (e.g., SSDs) rather than storage that makes use of hard disk drives.</p><p id="p-0132" num="0131">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, each of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> can include a software daemon <b>328</b>, <b>332</b>, <b>336</b> that, when executed by a cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>can present itself to the storage controller applications <b>324</b>, <b>326</b> as if the cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>were a physical storage device (e.g., one or more SSDs). In such an example, the software daemon <b>328</b>, <b>332</b>, <b>336</b> may include computer program instructions similar to those that would normally be contained on a storage device such that the storage controller applications <b>324</b>, <b>326</b> can send and receive the same commands that a storage controller would send to storage devices. In such a way, the storage controller applications <b>324</b>, <b>326</b> may include code that is identical to (or substantially identical to) the code that would be executed by the controllers in the storage systems described above. In these and similar embodiments, communications between the storage controller applications <b>324</b>, <b>326</b> and the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may utilize iSCSI, NVMe over TCP, messaging, a custom protocol, or in some other mechanism.</p><p id="p-0133" num="0132">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, each of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may also be coupled to block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b>. The block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b> may be embodied, for example, as Amazon Elastic Block Store (&#x2018;EBS&#x2019;) volumes. For example, a first EBS volume may be coupled to a first cloud computing instance <b>340</b><i>a</i>, a second EBS volume may be coupled to a second cloud computing instance <b>340</b><i>b</i>, and a third EBS volume may be coupled to a third cloud computing instance <b>340</b><i>n</i>. In such an example, the block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b> may be utilized in a manner that is similar to how the NVRAM devices described above are utilized, as the software daemon <b>328</b>, <b>332</b>, <b>336</b> (or some other module) that is executing within a particular cloud comping instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may, upon receiving a request to write data, initiate a write of the data to its attached EBS volume as well as a write of the data to its local storage <b>330</b>, <b>334</b>, <b>338</b> resources. In some alternative embodiments, data may only be written to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources within a particular cloud comping instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In an alternative embodiment, rather than using the block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b> as NVRAM, actual RAM on each of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may be used as NVRAM, thereby decreasing network utilization costs that would be associated with using an EBS volume as the NVRAM.</p><p id="p-0134" num="0133">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may be utilized, by cloud computing instances <b>320</b>, <b>322</b> that support the execution of the storage controller application <b>324</b>, <b>326</b> to service I/O operations that are directed to the cloud-based storage system <b>318</b>. Consider an example in which a first cloud computing instance <b>320</b> that is executing the storage controller application <b>324</b> is operating as the primary controller. In such an example, the first cloud computing instance <b>320</b> that is executing the storage controller application <b>324</b> may receive (directly or indirectly via the secondary controller) requests to write data to the cloud-based storage system <b>318</b> from users of the cloud-based storage system <b>318</b>. In such an example, the first cloud computing instance <b>320</b> that is executing the storage controller application <b>324</b> may perform various tasks such as, for example, deduplicating the data contained in the request, compressing the data contained in the request, determining where to the write the data contained in the request, and so on, before ultimately sending a request to write a deduplicated, encrypted, or otherwise possibly updated version of the data to one or more of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. Either cloud computing instance <b>320</b>, <b>322</b>, in some embodiments, may receive a request to read data from the cloud-based storage system <b>318</b> and may ultimately send a request to read data to one or more of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>.</p><p id="p-0135" num="0134">Readers will appreciate that when a request to write data is received by a particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>, the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may be configured to not only write the data to its own local storage <b>330</b>, <b>334</b>, <b>338</b> resources and any appropriate block-storage <b>342</b>, <b>344</b>, <b>346</b> that are offered by the cloud computing environment <b>316</b>, but the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may also be configured to write the data to cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. The cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may be embodied, for example, as Amazon Simple Storage Service (&#x2018;S3&#x2019;) storage that is accessible by the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In other embodiments, the cloud computing instances <b>320</b>, <b>322</b> that each include the storage controller application <b>324</b>, <b>326</b> may initiate the storage of the data in the local storage <b>330</b>, <b>334</b>, <b>338</b> of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>and the cloud-based object storage <b>348</b>.</p><p id="p-0136" num="0135">Readers will appreciate that, as described above, the cloud-based storage system <b>318</b> may be used to provide block storage services to users of the cloud-based storage system <b>318</b>. While the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may support block-level access, the cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>supports only object-based access. In order to address this, the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may be configured to take blocks of data, package those blocks into objects, and write the objects to the cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n. </i></p><p id="p-0137" num="0136">Consider an example in which data is written to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>in 1 MB blocks. In such an example, assume that a user of the cloud-based storage system <b>318</b> issues a request to write data that, after being compressed and deduplicated by the storage controller application <b>324</b>, <b>326</b> results in the need to write 5 MB of data. In such an example, writing the data to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>is relatively straightforward as 5 blocks that are 1 MB in size are written to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In such an example, the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may be configured to: 1) create a first object that includes the first 1 MB of data and write the first object to the cloud-based object storage <b>348</b>, <b>2</b>) create a second object that includes the second 1 MB of data and write the second object to the cloud-based object storage <b>348</b>, <b>3</b>) create a third object that includes the third 1 MB of data and write the third object to the cloud-based object storage <b>348</b>, and so on. As such, in some embodiments, each object that is written to the cloud-based object storage <b>348</b> may be identical (or nearly identical) in size. Readers will appreciate that in such an example, metadata that is associated with the data itself may be included in each object (e.g., the first 1 MB of the object is data and the remaining portion is metadata associated with the data).</p><p id="p-0138" num="0137">Readers will appreciate that the cloud-based object storage <b>348</b> may be incorporated into the cloud-based storage system <b>318</b> to increase the durability of the cloud-based storage system <b>318</b>. Continuing with the example described above where the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>are EC2 instances, readers will understand that EC2 instances are only guaranteed to have a monthly uptime of 99.9% and data stored in the local instance store only persists during the lifetime of the EC2 instance. As such, relying on the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> as the only source of persistent data storage in the cloud-based storage system <b>318</b> may result in a relatively unreliable storage system. Likewise, EBS volumes are designed for 99.999% availability. As such, even relying on EBS as the persistent data store in the cloud-based storage system <b>318</b> may result in a storage system that is not sufficiently durable. Amazon S3, however, is designed to provide 99.999999999% durability, meaning that a cloud-based storage system <b>318</b> that can incorporate S3 into its pool of storage is substantially more durable than various other options.</p><p id="p-0139" num="0138">Readers will appreciate that while a cloud-based storage system <b>318</b> that can incorporate S3 into its pool of storage is substantially more durable than various other options, utilizing S3 as the primary pool of storage may result in storage system that has relatively slow response times and relatively long I/O latencies. As such, the cloud-based storage system <b>318</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> not only stores data in S3 but the cloud-based storage system <b>318</b> also stores data in local storage <b>330</b>, <b>334</b>, <b>338</b> resources and block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>, such that read operations can be serviced from local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>, thereby reducing read latency when users of the cloud-based storage system <b>318</b> attempt to read data from the cloud-based storage system <b>318</b>.</p><p id="p-0140" num="0139">In some embodiments, all data that is stored by the cloud-based storage system <b>318</b> may be stored in both: 1) the cloud-based object storage <b>348</b>, and 2) at least one of the local storage <b>330</b>, <b>334</b>, <b>338</b> resources or block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In such embodiments, the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may effectively operate as cache that generally includes all data that is also stored in S3, such that all reads of data may be serviced by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>without requiring the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>to access the cloud-based object storage <b>348</b>. Readers will appreciate that in other embodiments, however, all data that is stored by the cloud-based storage system <b>318</b> may be stored in the cloud-based object storage <b>348</b>, but less than all data that is stored by the cloud-based storage system <b>318</b> may be stored in at least one of the local storage <b>330</b>, <b>334</b>, <b>338</b> resources or block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In such an example, various policies may be utilized to determine which subset of the data that is stored by the cloud-based storage system <b>318</b> should reside in both: 1) the cloud-based object storage <b>348</b>, and 2) at least one of the local storage <b>330</b>, <b>334</b>, <b>338</b> resources or block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n. </i></p><p id="p-0141" num="0140">As described above, when the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> are embodied as EC2 instances, the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> are only guaranteed to have a monthly uptime of 99.9% and data stored in the local instance store only persists during the lifetime of each cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. As such, one or more modules of computer program instructions that are executing within the cloud-based storage system <b>318</b> (e.g., a monitoring module that is executing on its own EC2 instance) may be designed to handle the failure of one or more of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. In such an example, the monitoring module may handle the failure of one or more of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> by creating one or more new cloud computing instances with local storage, retrieving data that was stored on the failed cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>from the cloud-based object storage <b>348</b>, and storing the data retrieved from the cloud-based object storage <b>348</b> in local storage on the newly created cloud computing instances. Readers will appreciate that many variants of this process may be implemented.</p><p id="p-0142" num="0141">Consider an example in which all cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> failed. In such an example, the monitoring module may create new cloud computing instances with local storage, where high-bandwidth instances types are selected that allow for the maximum data transfer rates between the newly created high-bandwidth cloud computing instances with local storage and the cloud-based object storage <b>348</b>. Readers will appreciate that instances types are selected that allow for the maximum data transfer rates between the new cloud computing instances and the cloud-based object storage <b>348</b> such that the new high-bandwidth cloud computing instances can be rehydrated with data from the cloud-based object storage <b>348</b> as quickly as possible. Once the new high-bandwidth cloud computing instances are rehydrated with data from the cloud-based object storage <b>348</b>, less expensive lower-bandwidth cloud computing instances may be created, data may be migrated to the less expensive lower-bandwidth cloud computing instances, and the high-bandwidth cloud computing instances may be terminated.</p><p id="p-0143" num="0142">Readers will appreciate that in some embodiments, the number of new cloud computing instances that are created may substantially exceed the number of cloud computing instances that are needed to locally store all of the data stored by the cloud-based storage system <b>318</b>. The number of new cloud computing instances that are created may substantially exceed the number of cloud computing instances that are needed to locally store all of the data stored by the cloud-based storage system <b>318</b> in order to more rapidly pull data from the cloud-based object storage <b>348</b> and into the new cloud computing instances, as each new cloud computing instance can (in parallel) retrieve some portion of the data stored by the cloud-based storage system <b>318</b>. In such embodiments, once the data stored by the cloud-based storage system <b>318</b> has been pulled into the newly created cloud computing instances, the data may be consolidated within a subset of the newly created cloud computing instances and those newly created cloud computing instances that are excessive may be terminated.</p><p id="p-0144" num="0143">Consider an example in which 1000 cloud computing instances are needed in order to locally store all valid data that users of the cloud-based storage system <b>318</b> have written to the cloud-based storage system <b>318</b>. In such an example, assume that all 1,000 cloud computing instances fail. In such an example, the monitoring module may cause 100,000 cloud computing instances to be created, where each cloud computing instance is responsible for retrieving, from the cloud-based object storage <b>348</b>, distinct 1/100,000th chunks of the valid data that users of the cloud-based storage system <b>318</b> have written to the cloud-based storage system <b>318</b> and locally storing the distinct chunk of the dataset that it retrieved. In such an example, because each of the 100,000 cloud computing instances can retrieve data from the cloud-based object storage <b>348</b> in parallel, the caching layer may be restored 100 times faster as compared to an embodiment where the monitoring module only create 1000 replacement cloud computing instances. In such an example, over time the data that is stored locally in the 100,000 could be consolidated into 1,000 cloud computing instances and the remaining 99,000 cloud computing instances could be terminated.</p><p id="p-0145" num="0144">Readers will appreciate that various performance aspects of the cloud-based storage system <b>318</b> may be monitored (e.g., by a monitoring module that is executing in an EC2 instance) such that the cloud-based storage system <b>318</b> can be scaled-up or scaled-out as needed. Consider an example in which the monitoring module monitors the performance of the could-based storage system <b>318</b> via communications with one or more of the cloud computing instances <b>320</b>, <b>322</b> that each are used to support the execution of a storage controller application <b>324</b>, <b>326</b>, via monitoring communications between cloud computing instances <b>320</b>, <b>322</b>, <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>, via monitoring communications between cloud computing instances <b>320</b>, <b>322</b>, <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>and the cloud-based object storage <b>348</b>, or in some other way. In such an example, assume that the monitoring module determines that the cloud computing instances <b>320</b>, <b>322</b> that are used to support the execution of a storage controller application <b>324</b>, <b>326</b> are undersized and not sufficiently servicing the I/O requests that are issued by users of the cloud-based storage system <b>318</b>. In such an example, the monitoring module may create a new, more powerful cloud computing instance (e.g., a cloud computing instance of a type that includes more processing power, more memory, etc. . . . ) that includes the storage controller application such that the new, more powerful cloud computing instance can begin operating as the primary controller. Likewise, if the monitoring module determines that the cloud computing instances <b>320</b>, <b>322</b> that are used to support the execution of a storage controller application <b>324</b>, <b>326</b> are oversized and that cost savings could be gained by switching to a smaller, less powerful cloud computing instance, the monitoring module may create a new, less powerful (and less expensive) cloud computing instance that includes the storage controller application such that the new, less powerful cloud computing instance can begin operating as the primary controller.</p><p id="p-0146" num="0145">Consider, as an additional example of dynamically sizing the cloud-based storage system <b>318</b>, an example in which the monitoring module determines that the utilization of the local storage that is collectively provided by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>has reached a predetermined utilization threshold (e.g., 95%). In such an example, the monitoring module may create additional cloud computing instances with local storage to expand the pool of local storage that is offered by the cloud computing instances. Alternatively, the monitoring module may create one or more new cloud computing instances that have larger amounts of local storage than the already existing cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>, such that data stored in an already existing cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>can be migrated to the one or more new cloud computing instances and the already existing cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>can be terminated, thereby expanding the pool of local storage that is offered by the cloud computing instances. Likewise, if the pool of local storage that is offered by the cloud computing instances is unnecessarily large, data can be consolidated and some cloud computing instances can be terminated.</p><p id="p-0147" num="0146">Readers will appreciate that the cloud-based storage system <b>318</b> may be sized up and down automatically by a monitoring module applying a predetermined set of rules that may be relatively simple of relatively complicated. In fact, the monitoring module may not only take into account the current state of the cloud-based storage system <b>318</b>, but the monitoring module may also apply predictive policies that are based on, for example, observed behavior (e.g., every night from 10 PM until 6 AM usage of the storage system is relatively light), predetermined fingerprints (e.g., every time a virtual desktop infrastructure adds 100 virtual desktops, the number of IOPS directed to the storage system increase by X), and so on. In such an example, the dynamic scaling of the cloud-based storage system <b>318</b> may be based on current performance metrics, predicted workloads, and many other factors, including combinations thereof.</p><p id="p-0148" num="0147">Readers will further appreciate that because the cloud-based storage system <b>318</b> may be dynamically scaled, the cloud-based storage system <b>318</b> may even operate in a way that is more dynamic. Consider the example of garbage collection. In a traditional storage system, the amount of storage is fixed. As such, at some point the storage system may be forced to perform garbage collection as the amount of available storage has become so constrained that the storage system is on the verge of running out of storage. In contrast, the cloud-based storage system <b>318</b> described here can always &#x2018;add&#x2019; additional storage (e.g., by adding more cloud computing instances with local storage). Because the cloud-based storage system <b>318</b> described here can always &#x2018;add&#x2019; additional storage, the cloud-based storage system <b>318</b> can make more intelligent decisions regarding when to perform garbage collection. For example, the cloud-based storage system <b>318</b> may implement a policy that garbage collection only be performed when the number of IOPS being serviced by the cloud-based storage system <b>318</b> falls below a certain level. In some embodiments, other system-level functions (e.g., deduplication, compression) may also be turned off and on in response to system load, given that the size of the cloud-based storage system <b>318</b> is not constrained in the same way that traditional storage systems are constrained.</p><p id="p-0149" num="0148">Readers will appreciate that embodiments of the present disclosure resolve an issue with block-storage services offered by some cloud computing environments as some cloud computing environments only allow for one cloud computing instance to connect to a block-storage volume at a single time. For example, in Amazon AWS, only a single EC2 instance may be connected to an EBS volume. Through the use of EC2 instances with local storage, embodiments of the present disclosure can offer multi-connect capabilities where multiple EC2 instances can connect to another EC2 instance with local storage (&#x2018;a drive instance&#x2019;). In such embodiments, the drive instances may include software executing within the drive instance that allows the drive instance to support I/O directed to a particular volume from each connected EC2 instance. As such, some embodiments of the present disclosure may be embodied as multi-connect block storage services that may not include all of the components depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>.</p><p id="p-0150" num="0149">In some embodiments, especially in embodiments where the cloud-based object storage <b>348</b> resources are embodied as Amazon S3, the cloud-based storage system <b>318</b> may include one or more modules (e.g., a module of computer program instructions executing on an EC2 instance) that are configured to ensure that when the local storage of a particular cloud computing instance is rehydrated with data from S3, the appropriate data is actually in S3. This issue arises largely because S3 implements an eventual consistency model where, when overwriting an existing object, reads of the object will eventually (but not necessarily immediately) become consistent and will eventually (but not necessarily immediately) return the overwritten version of the object. To address this issue, in some embodiments of the present disclosure, objects in S3 are never overwritten. Instead, a traditional &#x2018;overwrite&#x2019; would result in the creation of the new object (that includes the updated version of the data) and the eventual deletion of the old object (that includes the previous version of the data).</p><p id="p-0151" num="0150">In some embodiments of the present disclosure, as part of an attempt to never (or almost never) overwrite an object, when data is written to S3 the resultant object may be tagged with a sequence number. In some embodiments, these sequence numbers may be persisted elsewhere (e.g., in a database) such that at any point in time, the sequence number associated with the most up-to-date version of some piece of data can be known. In such a way, a determination can be made as to whether S3 has the most recent version of some piece of data by merely reading the sequence number associated with an object&#x2014;and without actually reading the data from S3. The ability to make this determination may be particularly important when a cloud computing instance with local storage crashes, as it would be undesirable to rehydrate the local storage of a replacement cloud computing instance with out-of-date data. In fact, because the cloud-based storage system <b>318</b> does not need to access the data to verify its validity, the data can stay encrypted and access charges can be avoided.</p><p id="p-0152" num="0151">The storage systems described above may carry out intelligent data backup techniques through which data stored in the storage system may be copied and stored in a distinct location to avoid data loss in the event of equipment failure or some other form of catastrophe. For example, the storage systems described above may be configured to examine each backup to avoid restoring the storage system to an undesirable state. Consider an example in which malware infects the storage system. In such an example, the storage system may include software resources <b>314</b> that can scan each backup to identify backups that were captured before the malware infected the storage system and those backups that were captured after the malware infected the storage system. In such an example, the storage system may restore itself from a backup that does not include the malware&#x2014;or at least not restore the portions of a backup that contained the malware. In such an example, the storage system may include software resources <b>314</b> that can scan each backup to identify the presences of malware (or a virus, or some other undesirable), for example, by identifying write operations that were serviced by the storage system and originated from a network subnet that is suspected to have delivered the malware, by identifying write operations that were serviced by the storage system and originated from a user that is suspected to have delivered the malware, by identifying write operations that were serviced by the storage system and examining the content of the write operation against fingerprints of the malware, and in many other ways.</p><p id="p-0153" num="0152">Readers will further appreciate that the backups (often in the form of one or more snapshots) may also be utilized to perform rapid recovery of the storage system. Consider an example in which the storage system is infected with ransomware that locks users out of the storage system. In such an example, software resources <b>314</b> within the storage system may be configured to detect the presence of ransomware and may be further configured to restore the storage system to a point-in-time, using the retained backups, prior to the point-in-time at which the ransomware infected the storage system. In such an example, the presence of ransomware may be explicitly detected through the use of software tools utilized by the system, through the use of a key (e.g., a USB drive) that is inserted into the storage system, or in a similar way. Likewise, the presence of ransomware may be inferred in response to system activity meeting a predetermined fingerprint such as, for example, no reads or writes coming into the system for a predetermined period of time.</p><p id="p-0154" num="0153">Readers will appreciate that the various components described above may be grouped into one or more optimized computing packages as converged infrastructures. Such converged infrastructures may include pools of computers, storage and networking resources that can be shared by multiple applications and managed in a collective manner using policy-driven processes. Such converged infrastructures may be implemented with a converged infrastructure reference architecture, with standalone appliances, with a software driven hyper-converged approach (e.g., hyper-converged infrastructures), or in other ways.</p><p id="p-0155" num="0154">Readers will appreciate that the storage systems described above may be useful for supporting various types of software applications. For example, the storage system <b>306</b> may be useful in supporting artificial intelligence (&#x2018;AI&#x2019;) applications, database applications, DevOps projects, electronic design automation tools, event-driven software applications, high performance computing applications, simulation applications, high-speed data capture and analysis applications, machine learning applications, media production applications, media serving applications, picture archiving and communication systems (&#x2018;PACS&#x2019;) applications, software development applications, virtual reality applications, augmented reality applications, and many other types of applications by providing storage resources to such applications.</p><p id="p-0156" num="0155">The storage systems described above may operate to support a wide variety of applications. In view of the fact that the storage systems include compute resources, storage resources, and a wide variety of other resources, the storage systems may be well suited to support applications that are resource intensive such as, for example, AI applications. AI applications may be deployed in a variety of fields, including: predictive maintenance in manufacturing and related fields, healthcare applications such as patient data &#x26; risk analytics, retail and marketing deployments (e.g., search advertising, social media advertising), supply chains solutions, fintech solutions such as business analytics &#x26; reporting tools, operational deployments such as real-time analytics tools, application performance management tools, IT infrastructure management tools, and many others.</p><p id="p-0157" num="0156">Such AI applications may enable devices to perceive their environment and take actions that maximize their chance of success at some goal. Examples of such AI applications can include IBM Watson, Microsoft Oxford, Google DeepMind, Baidu Minwa, and others. The storage systems described above may also be well suited to support other types of applications that are resource intensive such as, for example, machine learning applications. Machine learning applications may perform various types of data analysis to automate analytical model building. Using algorithms that iteratively learn from data, machine learning applications can enable computers to learn without being explicitly programmed. One particular area of machine learning is referred to as reinforcement learning, which involves taking suitable actions to maximize reward in a particular situation. Reinforcement learning may be employed to find the best possible behavior or path that a particular software application or machine should take in a specific situation. Reinforcement learning differs from other areas of machine learning (e.g., supervised learning, unsupervised learning) in that correct input/output pairs need not be presented for reinforcement learning and sub-optimal actions need not be explicitly corrected.</p><p id="p-0158" num="0157">In addition to the resources already described, the storage systems described above may also include graphics processing units (&#x2018;GPUs&#x2019;), occasionally referred to as visual processing unit (&#x2018;VPUs&#x2019;). Such GPUs may be embodied as specialized electronic circuits that rapidly manipulate and alter memory to accelerate the creation of images in a frame buffer intended for output to a display device. Such GPUs may be included within any of the computing devices that are part of the storage systems described above, including as one of many individually scalable components of a storage system, where other examples of individually scalable components of such storage system can include storage components, memory components, compute components (e.g., CPUs, FPGAs, ASICs), networking components, software components, and others. In addition to GPUs, the storage systems described above may also include neural network processors (&#x2018;NNPs&#x2019;) for use in various aspects of neural network processing. Such NNPs may be used in place of (or in addition to) GPUs and may also be independently scalable.</p><p id="p-0159" num="0158">As described above, the storage systems described herein may be configured to support artificial intelligence applications, machine learning applications, big data analytics applications, and many other types of applications. The rapid growth in these sort of applications is being driven by three technologies: deep learning (DL), GPU processors, and Big Data. Deep learning is a computing model that makes use of massively parallel neural networks inspired by the human brain. Instead of experts handcrafting software, a deep learning model writes its own software by learning from lots of examples. Such GPUs may include thousands of cores that are well-suited to run algorithms that loosely represent the parallel nature of the human brain.</p><p id="p-0160" num="0159">Advances in deep neural networks have ignited a new wave of algorithms and tools for data scientists to tap into their data with artificial intelligence (AI). With improved algorithms, larger data sets, and various frameworks (including open-source software libraries for machine learning across a range of tasks), data scientists are tackling new use cases like autonomous driving vehicles, natural language processing and understanding, computer vision, machine reasoning, strong AI, and many others. Applications of such techniques may include: machine and vehicular object detection, identification and avoidance; visual recognition, classification and tagging; algorithmic financial trading strategy performance management; simultaneous localization and mapping; predictive maintenance of high-value machinery; prevention against cyber security threats, expertise automation; image recognition and classification; question answering; robotics; text analytics (extraction, classification) and text generation and translation; and many others. Applications of AI techniques has materialized in a wide array of products include, for example, Amazon Echo's speech recognition technology that allows users to talk to their machines, Google Translate&#x2122; which allows for machine-based language translation, Spotify's Discover Weekly that provides recommendations on new songs and artists that a user may like based on the user's usage and traffic analysis, Quill's text generation offering that takes structured data and turns it into narrative stories, Chatbots that provide real-time, contextually specific answers to questions in a dialog format, and many others.</p><p id="p-0161" num="0160">Data is the heart of modern AI and deep learning algorithms. Before training can begin, one problem that must be addressed revolves around collecting the labeled data that is crucial for training an accurate AI model. A full scale AI deployment may be required to continuously collect, clean, transform, label, and store large amounts of data. Adding additional high quality data points directly translates to more accurate models and better insights. Data samples may undergo a series of processing steps including, but not limited to: 1) ingesting the data from an external source into the training system and storing the data in raw form, 2) cleaning and transforming the data in a format convenient for training, including linking data samples to the appropriate label, 3) exploring parameters and models, quickly testing with a smaller dataset, and iterating to converge on the most promising models to push into the production cluster, 4) executing training phases to select random batches of input data, including both new and older samples, and feeding those into production GPU servers for computation to update model parameters, and 5) evaluating including using a holdback portion of the data not used in training in order to evaluate model accuracy on the holdout data. This lifecycle may apply for any type of parallelized machine learning, not just neural networks or deep learning. For example, standard machine learning frameworks may rely on CPUs instead of GPUs but the data ingest and training workflows may be the same. Readers will appreciate that a single shared storage data hub creates a coordination point throughout the lifecycle without the need for extra data copies among the ingest, preprocessing, and training stages. Rarely is the ingested data used for only one purpose, and shared storage gives the flexibility to train multiple different models or apply traditional analytics to the data.</p><p id="p-0162" num="0161">Readers will appreciate that each stage in the AI data pipeline may have varying requirements from the data hub (e.g., the storage system or collection of storage systems). Scale-out storage systems must deliver uncompromising performance for all manner of access types and patterns&#x2014;from small, metadata-heavy to large files, from random to sequential access patterns, and from low to high concurrency. The storage systems described above may serve as an ideal AI data hub as the systems may service unstructured workloads. In the first stage, data is ideally ingested and stored on to the same data hub that following stages will use, in order to avoid excess data copying. The next two steps can be done on a standard compute server that optionally includes a GPU, and then in the fourth and last stage, full training production jobs are run on powerful GPU-accelerated servers. Often, there is a production pipeline alongside an experimental pipeline operating on the same dataset. Further, the GPU-accelerated servers can be used independently for different models or joined together to train on one larger model, even spanning multiple systems for distributed training. If the shared storage tier is slow, then data must be copied to local storage for each phase, resulting in wasted time staging data onto different servers. The ideal data hub for the AI training pipeline delivers performance similar to data stored locally on the server node while also having the simplicity and performance to enable all pipeline stages to operate concurrently.</p><p id="p-0163" num="0162">Although the preceding paragraphs discuss deep learning applications, readers will appreciate that the storage systems described herein may also be part of a distributed deep learning (&#x2018;DDL&#x2019;) platform to support the execution of DDL algorithms. The storage systems described above may also be paired with other technologies such as TensorFlow, an open-source software library for dataflow programming across a range of tasks that may be used for machine learning applications such as neural networks, to facilitate the development of such machine learning models, applications, and so on.</p><p id="p-0164" num="0163">The storage systems described above may also be used in a neuromorphic computing environment. Neuromorphic computing is a form of computing that mimics brain cells. To support neuromorphic computing, an architecture of interconnected &#x201c;neurons&#x201d; replace traditional computing models with low-powered signals that go directly between neurons for more efficient computation. Neuromorphic computing may make use of very-large-scale integration (VLSI) systems containing electronic analog circuits to mimic neuro-biological architectures present in the nervous system, as well as analog, digital, mixed-mode analog/digital VLSI, and software systems that implement models of neural systems for perception, motor control, or multisensory integration.</p><p id="p-0165" num="0164">Readers will appreciate that the storage systems described above may be configured to support the storage or use of (among other types of data) blockchains. In addition to supporting the storage and use of blockchain technologies, the storage systems described above may also support the storage and use of derivative items such as, for example, open source blockchains and related tools that are part of the IBM&#x2122; Hyperledger project, permissioned blockchains in which a certain number of trusted parties are allowed to access the block chain, blockchain products that enable developers to build their own distributed ledger projects, and others. Blockchains and the storage systems described herein may be leveraged to support on-chain storage of data as well as off-chain storage of data.</p><p id="p-0166" num="0165">Off-chain storage of data can be implemented in a variety of ways and can occur when the data itself is not stored within the blockchain. For example, in one embodiment, a hash function may be utilized and the data itself may be fed into the hash function to generate a hash value. In such an example, the hashes of large pieces of data may be embedded within transactions, instead of the data itself. Readers will appreciate that, in other embodiments, alternatives to blockchains may be used to facilitate the decentralized storage of information. For example, one alternative to a blockchain that may be used is a blockweave. While conventional blockchains store every transaction to achieve validation, a blockweave permits secure decentralization without the usage of the entire chain, thereby enabling low cost on-chain storage of data. Such blockweaves may utilize a consensus mechanism that is based on proof of access (PoA) and proof of work (PoW).</p><p id="p-0167" num="0166">The storage systems described above may, either alone or in combination with other computing devices, be used to support in-memory computing applications. In-memory computing involves the storage of information in RAM that is distributed across a cluster of computers. Readers will appreciate that the storage systems described above, especially those that are configurable with customizable amounts of processing resources, storage resources, and memory resources (e.g., those systems in which blades that contain configurable amounts of each type of resource), may be configured in a way so as to provide an infrastructure that can support in-memory computing. Likewise, the storage systems described above may include component parts (e.g., NVDIMMs, 3D crosspoint storage that provide fast random access memory that is persistent) that can actually provide for an improved in-memory computing environment as compared to in-memory computing environments that rely on RAM distributed across dedicated servers.</p><p id="p-0168" num="0167">In some embodiments, the storage systems described above may be configured to operate as a hybrid in-memory computing environment that includes a universal interface to all storage media (e.g., RAM, flash storage, 3D crosspoint storage). In such embodiments, users may have no knowledge regarding the details of where their data is stored but they can still use the same full, unified API to address data. In such embodiments, the storage system may (in the background) move data to the fastest layer available&#x2014;including intelligently placing the data in dependence upon various characteristics of the data or in dependence upon some other heuristic. In such an example, the storage systems may even make use of existing products such as Apache Ignite and GridGain to move data between the various storage layers, or the storage systems may make use of custom software to move data between the various storage layers. The storage systems described herein may implement various optimizations to improve the performance of in-memory computing such as, for example, having computations occur as close to the data as possible.</p><p id="p-0169" num="0168">Readers will further appreciate that in some embodiments, the storage systems described above may be paired with other resources to support the applications described above. For example, one infrastructure could include primary compute in the form of servers and workstations which specialize in using General-purpose computing on graphics processing units (&#x2018;GPGPU&#x2019;) to accelerate deep learning applications that are interconnected into a computation engine to train parameters for deep neural networks. Each system may have Ethernet external connectivity, InfiniBand external connectivity, some other form of external connectivity, or some combination thereof. In such an example, the GPUs can be grouped for a single large training or used independently to train multiple models. The infrastructure could also include a storage system such as those described above to provide, for example, a scale-out all-flash file or object store through which data can be accessed via high-performance protocols such as NFS, S3, and so on. The infrastructure can also include, for example, redundant top-of-rack Ethernet switches connected to storage and compute via ports in MLAG port channels for redundancy. The infrastructure could also include additional compute in the form of whitebox servers, optionally with GPUs, for data ingestion, pre-processing, and model debugging. Readers will appreciate that additional infrastructures are also be possible.</p><p id="p-0170" num="0169">Readers will appreciate that the storage systems described above, either alone or in coordination with other computing machinery may be configured to support other AI related tools. For example, the storage systems may make use of tools like ONXX or other open neural network exchange formats that make it easier to transfer models written in different AI frameworks. Likewise, the storage systems may be configured to support tools like Amazon's Gluon that allow developers to prototype, build, and train deep learning models. In fact, the storage systems described above may be part of a larger platform, such as IBM&#x2122; Cloud Private for Data, that includes integrated data science, data engineering and application building services.</p><p id="p-0171" num="0170">Readers will further appreciate that the storage systems described above may also be deployed as an edge solution. Such an edge solution may be in place to optimize cloud computing systems by performing data processing at the edge of the network, near the source of the data. Edge computing can push applications, data and computing power (i.e., services) away from centralized points to the logical extremes of a network. Through the use of edge solutions such as the storage systems described above, computational tasks may be performed using the compute resources provided by such storage systems, data may be storage using the storage resources of the storage system, and cloud-based services may be accessed through the use of various resources of the storage system (including networking resources). By performing computational tasks on the edge solution, storing data on the edge solution, and generally making use of the edge solution, the consumption of expensive cloud-based resources may be avoided and, in fact, performance improvements may be experienced relative to a heavier reliance on cloud-based resources.</p><p id="p-0172" num="0171">While many tasks may benefit from the utilization of an edge solution, some particular uses may be especially suited for deployment in such an environment. For example, devices like drones, autonomous cars, robots, and others may require extremely rapid processing&#x2014;so fast, in fact, that sending data up to a cloud environment and back to receive data processing support may simply be too slow. As an additional example, some IoT devices such as connected video cameras may not be well-suited for the utilization of cloud-based resources as it may be impractical (not only from a privacy perspective, security perspective, or a financial perspective) to send the data to the cloud simply because of the pure volume of data that is involved. As such, many tasks that really on data processing, storage, or communications may be better suited by platforms that include edge solutions such as the storage systems described above.</p><p id="p-0173" num="0172">The storage systems described above may alone, or in combination with other computing resources, serves as a network edge platform that combines compute resources, storage resources, networking resources, cloud technologies and network virtualization technologies, and so on. As part of the network, the edge may take on characteristics similar to other network facilities, from the customer premise and backhaul aggregation facilities to Points of Presence (PoPs) and regional data centers. Readers will appreciate that network workloads, such as Virtual Network Functions (VNFs) and others, will reside on the network edge platform. Enabled by a combination of containers and virtual machines, the network edge platform may rely on controllers and schedulers that are no longer geographically co-located with the data processing resources. The functions, as microservices, may split into control planes, user and data planes, or even state machines, allowing for independent optimization and scaling techniques to be applied. Such user and data planes may be enabled through increased accelerators, both those residing in server platforms, such as FPGAs and Smart NICs, and through SDN-enabled merchant silicon and programmable ASICs.</p><p id="p-0174" num="0173">The storage systems described above may also be optimized for use in big data analytics. Big data analytics may be generally described as the process of examining large and varied data sets to uncover hidden patterns, unknown correlations, market trends, customer preferences and other useful information that can help organizations make more-informed business decisions. As part of that process, semi-structured and unstructured data such as, for example, internet clickstream data, web server logs, social media content, text from customer emails and survey responses, mobile-phone call-detail records, IoT sensor data, and other data may be converted to a structured form.</p><p id="p-0175" num="0174">The storage systems described above may also support (including implementing as a system interface) applications that perform tasks in response to human speech. For example, the storage systems may support the execution intelligent personal assistant applications such as, for example, Amazon's Alexa, Apple Siri, Google Voice, Samsung Bixby, Microsoft Cortana, and others. While the examples described in the previous sentence make use of voice as input, the storage systems described above may also support chatbots, talkbots, chatterbots, or artificial conversational entities or other applications that are configured to conduct a conversation via auditory or textual methods. Likewise, the storage system may actually execute such an application to enable a user such as a system administrator to interact with the storage system via speech. Such applications are generally capable of voice interaction, music playback, making to-do lists, setting alarms, streaming podcasts, playing audiobooks, and providing weather, traffic, and other real time information, such as news, although in embodiments in accordance with the present disclosure, such applications may be utilized as interfaces to various system management operations.</p><p id="p-0176" num="0175">The storage systems described above may also implement AI platforms for delivering on the vision of self-driving storage. Such AI platforms may be configured to deliver global predictive intelligence by collecting and analyzing large amounts of storage system telemetry data points to enable effortless management, analytics and support. In fact, such storage systems may be capable of predicting both capacity and performance, as well as generating intelligent advice on workload deployment, interaction and optimization. Such AI platforms may be configured to scan all incoming storage system telemetry data against a library of issue fingerprints to predict and resolve incidents in real-time, before they impact customer environments, and captures hundreds of variables related to performance that are used to forecast performance load.</p><p id="p-0177" num="0176">The storage systems described above may support the serialized or simultaneous execution of artificial intelligence applications, machine learning applications, data analytics applications, data transformations, and other tasks that collectively may form an AI ladder. Such an AI ladder may effectively be formed by combining such elements to form a complete data science pipeline, where exist dependencies between elements of the AI ladder. For example, AI may require that some form of machine learning has taken place, machine learning may require that some form of analytics has taken place, analytics may require that some form of data and information architecting has taken place, and so on. As such, each element may be viewed as a rung in an AI ladder that collectively can form a complete and sophisticated AI solution.</p><p id="p-0178" num="0177">The storage systems described above may also, either alone or in combination with other computing environments, be used to deliver an AI everywhere experience where AI permeates wide and expansive aspects of business and life. For example, AI may play an important role in the delivery of deep learning solutions, deep reinforcement learning solutions, artificial general intelligence solutions, autonomous vehicles, cognitive computing solutions, commercial UAVs or drones, conversational user interfaces, enterprise taxonomies, ontology management solutions, machine learning solutions, smart dust, smart robots, smart workplaces, and many others.</p><p id="p-0179" num="0178">The storage systems described above may also, either alone or in combination with other computing environments, be used to deliver a wide range of transparently immersive experiences (including those that use digital twins of various &#x201c;things&#x201d; such as people, places, processes, systems, and so on) where technology can introduce transparency between people, businesses, and things. Such transparently immersive experiences may be delivered as augmented reality technologies, connected homes, virtual reality technologies, brain-computer interfaces, human augmentation technologies, nanotube electronics, volumetric displays, 4D printing technologies, or others.</p><p id="p-0180" num="0179">The storage systems described above may also, either alone or in combination with other computing environments, be used to support a wide variety of digital platforms. Such digital platforms can include, for example, 5G wireless systems and platforms, digital twin platforms, edge computing platforms, IoT platforms, quantum computing platforms, serverless PaaS, software-defined security, neuromorphic computing platforms, and so on.</p><p id="p-0181" num="0180">The storage systems described above may also be part of a multi-cloud environment in which multiple cloud computing and storage services are deployed in a single heterogeneous architecture. In order to facilitate the operation of such a multi-cloud environment, DevOps tools may be deployed to enable orchestration across clouds. Likewise, continuous development and continuous integration tools may be deployed to standardize processes around continuous integration and delivery, new feature rollout and provisioning cloud workloads. By standardizing these processes, a multi-cloud strategy may be implemented that enables the utilization of the best provider for each workload.</p><p id="p-0182" num="0181">The storage systems described above may be used as a part of a platform to enable the use of crypto-anchors that may be used to authenticate a product's origins and contents to ensure that it matches a blockchain record associated with the product. Similarly, as part of a suite of tools to secure data stored on the storage system, the storage systems described above may implement various encryption technologies and schemes, including lattice cryptography. Lattice cryptography can involve constructions of cryptographic primitives that involve lattices, either in the construction itself or in the security proof. Unlike public-key schemes such as the RSA, Diffie-Hellman or Elliptic-Curve cryptosystems, which are easily attacked by a quantum computer, some lattice-based constructions appear to be resistant to attack by both classical and quantum computers.</p><p id="p-0183" num="0182">A quantum computer is a device that performs quantum computing. Quantum computing is computing using quantum-mechanical phenomena, such as superposition and entanglement. Quantum computers differ from traditional computers that are based on transistors, as such traditional computers require that data be encoded into binary digits (bits), each of which is always in one of two definite states (0 or 1). In contrast to traditional computers, quantum computers use quantum bits, which can be in superpositions of states. A quantum computer maintains a sequence of qubits, where a single qubit can represent a one, a zero, or any quantum superposition of those two qubit states. A pair of qubits can be in any quantum superposition of 4 states, and three qubits in any superposition of 8 states. A quantum computer with n qubits can generally be in an arbitrary superposition of up to 2{circumflex over (&#x2003;)}n different states simultaneously, whereas a traditional computer can only be in one of these states at any one time. A quantum Turing machine is a theoretical model of such a computer.</p><p id="p-0184" num="0183">The storage systems described above may also be paired with FPGA-accelerated servers as part of a larger AI or ML infrastructure. Such FPGA-accelerated servers may reside near (e.g., in the same data center) the storage systems described above or even incorporated into an appliance that includes one or more storage systems, one or more FPGA-accelerated servers, networking infrastructure that supports communications between the one or more storage systems and the one or more FPGA-accelerated servers, as well as other hardware and software components. Alternatively, FPGA-accelerated servers may reside within a cloud computing environment that may be used to perform compute-related tasks for AI and ML jobs. Any of the embodiments described above may be used to collectively serve as a FPGA-based AI or ML platform. Readers will appreciate that, in some embodiments of the FPGA-based AI or ML platform, the FPGAs that are contained within the FPGA-accelerated servers may be reconfigured for different types of ML models (e.g., LSTMs, CNNs, GRUs). The ability to reconfigure the FPGAs that are contained within the FPGA-accelerated servers may enable the acceleration of a ML or AI application based on the most optimal numerical precision and memory model being used. Readers will appreciate that by treating the collection of FPGA-accelerated servers as a pool of FPGAs, any CPU in the data center may utilize the pool of FPGAs as a shared hardware microservice, rather than limiting a server to dedicated accelerators plugged into it.</p><p id="p-0185" num="0184">The FPGA-accelerated servers and the GPU-accelerated servers described above may implement a model of computing where, rather than keeping a small amount of data in a CPU and running a long stream of instructions over it as occurred in more traditional computing models, the machine learning model and parameters are pinned into the high-bandwidth on-chip memory with lots of data streaming though the high-bandwidth on-chip memory. FPGAs may even be more efficient than GPUs for this computing model, as the FPGAs can be programmed with only the instructions needed to run this kind of computing model.</p><p id="p-0186" num="0185">The storage systems described above may be configured to provide parallel storage, for example, through the use of a parallel file system such as BeeGFS. Such parallel files systems may include a distributed metadata architecture. For example, the parallel file system may include a plurality of metadata servers across which metadata is distributed, as well as components that include services for clients and storage servers.</p><p id="p-0187" num="0186">The systems described above can support the execution of a wide array of software applications. Such software applications can be deployed in a variety of ways, including container-based deployment models. Containerized applications may be managed using a variety of tools. For example, containerized applications may be managed using Docker Swarm, Kubernetes, and others. Containerized applications may be used to facilitate a serverless, cloud native computing deployment and management model for software applications. In support of a serverless, cloud native computing deployment and management model for software applications, containers may be used as part of an event handling mechanisms (e.g., AWS Lambdas) such that various events cause a containerized application to be spun up to operate as an event handler.</p><p id="p-0188" num="0187">The systems described above may be deployed in a variety of ways, including being deployed in ways that support fifth generation (&#x2018;5G&#x2019;) networks. 5G networks may support substantially faster data communications than previous generations of mobile communications networks and, as a consequence may lead to the disaggregation of data and computing resources as modern massive data centers may become less prominent and may be replaced, for example, by more-local, micro data centers that are close to the mobile-network towers. The systems described above may be included in such local, micro data centers and may be part of or paired to multi-access edge computing (&#x2018;MEC&#x2019;) systems. Such MEC systems may enable cloud computing capabilities and an IT service environment at the edge of the cellular network. By running applications and performing related processing tasks closer to the cellular customer, network congestion may be reduced and applications may perform better.</p><p id="p-0189" num="0188">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> illustrates an exemplary computing device <b>350</b> that may be specifically configured to perform one or more of the processes described herein. As shown in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, computing device <b>350</b> may include a communication interface <b>352</b>, a processor <b>354</b>, a storage device <b>356</b>, and an input/output (&#x201c;I/O&#x201d;) module <b>358</b> communicatively connected one to another via a communication infrastructure <b>360</b>. While an exemplary computing device <b>350</b> is shown in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, the components illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> are not intended to be limiting. Additional or alternative components may be used in other embodiments. Components of computing device <b>350</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> will now be described in additional detail.</p><p id="p-0190" num="0189">Communication interface <b>352</b> may be configured to communicate with one or more computing devices. Examples of communication interface <b>352</b> include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, an audio/video connection, and any other suitable interface.</p><p id="p-0191" num="0190">Processor <b>354</b> generally represents any type or form of processing unit capable of processing data and/or interpreting, executing, and/or directing execution of one or more of the instructions, processes, and/or operations described herein. Processor <b>354</b> may perform operations by executing computer-executable instructions <b>362</b> (e.g., an application, software, code, and/or other executable data instance) stored in storage device <b>356</b>.</p><p id="p-0192" num="0191">Storage device <b>356</b> may include one or more data storage media, devices, or configurations and may employ any type, form, and combination of data storage media and/or device. For example, storage device <b>356</b> may include, but is not limited to, any combination of the non-volatile media and/or volatile media described herein. Electronic data, including data described herein, may be temporarily and/or permanently stored in storage device <b>356</b>. For example, data representative of computer-executable instructions <b>362</b> configured to direct processor <b>354</b> to perform any of the operations described herein may be stored within storage device <b>356</b>. In some examples, data may be arranged in one or more databases residing within storage device <b>356</b>.</p><p id="p-0193" num="0192">I/O module <b>358</b> may include one or more I/O modules configured to receive user input and provide user output. I/O module <b>358</b> may include any hardware, firmware, software, or combination thereof supportive of input and output capabilities. For example, I/O module <b>358</b> may include hardware and/or software for capturing user input, including, but not limited to, a keyboard or keypad, a touchscreen component (e.g., touchscreen display), a receiver (e.g., an RF or infrared receiver), motion sensors, and/or one or more input buttons.</p><p id="p-0194" num="0193">I/O module <b>358</b> may include one or more devices for presenting output to a user, including, but not limited to, a graphics engine, a display (e.g., a display screen), one or more output drivers (e.g., display drivers), one or more audio speakers, and one or more audio drivers. In certain embodiments, I/O module <b>358</b> is configured to provide graphical data to a display for presentation to a user. The graphical data may be representative of one or more graphical user interfaces and/or any other graphical content as may serve a particular implementation. In some examples, any of the systems, computing devices, and/or other components described herein may be implemented by computing device <b>350</b>.</p><p id="p-0195" num="0194">One or more embodiments may be described herein with the aid of method steps illustrating the performance of specified functions and relationships thereof. The boundaries and sequence of these functional building blocks and method steps have been arbitrarily defined herein for convenience of description. Alternate boundaries and sequences can be defined so long as the specified functions and relationships are appropriately performed. Any such alternate boundaries or sequences are thus within the scope and spirit of the claims. Further, the boundaries of these functional building blocks have been arbitrarily defined for convenience of description. Alternate boundaries could be defined as long as the certain significant functions are appropriately performed. Similarly, flow diagram blocks may also have been arbitrarily defined herein to illustrate certain significant functionality.</p><p id="p-0196" num="0195">To the extent used, the flow diagram block boundaries and sequence could have been defined otherwise and still perform the certain significant functionality. Such alternate definitions of both functional building blocks and flow diagram blocks and sequences are thus within the scope and spirit of the claims. One of average skill in the art will also recognize that the functional building blocks, and other illustrative blocks, modules and components herein, can be implemented as illustrated or by discrete components, application specific integrated circuits, processors executing appropriate software and the like or any combination thereof.</p><p id="p-0197" num="0196">While particular combinations of various functions and features of the one or more embodiments are expressly described herein, other combinations of these features and functions are likewise possible. The present disclosure is not limited by the particular examples disclosed herein and expressly incorporates these other combinations.</p><p id="p-0198" num="0197">For further explanation, <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> sets forth a computing environment illustrating a client computing system(s) (<b>410</b>), an intermediate computing system (<b>456</b>), and a cloud services provider (<b>302</b>), where the intermediate computing system (<b>456</b>) is configured to implement consistent application of cluster transactions according to some embodiments of the present disclosure.</p><p id="p-0199" num="0198">The intermediate computing system (<b>456</b>) may apply one or more processes or transformations to data received from a client computing system (<b>410</b>) that is intended for storage at a remote data store, such as a data store provided by a data storage service (<b>424</b>) of a cloud services provider (<b>302</b>). In this example, the client computing system (<b>410</b>) may include applications (<b>408</b>) that store and retrieve data, and computer storage (<b>422</b>) that locally stores one or more data objects (<b>421</b>A, <b>421</b>B). The one or more processes operating within the intermediate computing system (<b>456</b>) may be implemented as virtual instances within a cloud computing environment, may be implemented as processes within one or more physical servers within one or more data centers, or may be implemented as a hybrid of virtual instances and physical servers. Further, the intermediate computing system (<b>456</b>) may temporarily or persistently store data objects (<b>421</b>A-<b>421</b>C) received from a client computing system (<b>410</b>), which may also be transmitted for storage to a data storage service (<b>424</b>), which may store all data objects (<b>421</b>A-<b>421</b>P) received from the intermediate computing system (<b>456</b>).</p><p id="p-0200" num="0199">In this example, a cluster process may generally correspond to a given pipeline, as described below with reference to <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>&#x2014;where a &#x201c;cluster process&#x201d;, &#x201c;pipeline&#x201d;, or &#x201c;shard&#x201d; may be used interchangeably. Further, as discussed in greater detail below, a physical server may be implemented by a storage system such as storage systems (<b>306</b>) discussed above with reference to <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>B</figref>.</p><p id="p-0201" num="0200">In some implementations, the one or more processes or transformations of data may include one or more of deduplication, compression, or encryption, among others. In some examples, data received by the intermediate computing system (<b>456</b>) from a client computing system (<b>410</b>) may be received via one or more different types of data storage request or command operations that correspond to one or more transactions.</p><p id="p-0202" num="0201">In this example, a transaction log of one or more transactions may be used as a basis for reconstructing the data received from the client computing system (<b>456</b>) and stored by the data storage service (<b>424</b>)&#x2014;where a record of the transactions, or transaction log, may be replayed from a one given transaction to an arbitrary other transaction in order to recreate a status of a dataset or data that corresponds to a state of data reflective of the application of each transaction in the transaction log executed in order.</p><p id="p-0203" num="0202">In some implementations, the intermediate computing system (<b>456</b>) may be a single physical server, a virtual server, or a cluster of physical or virtual servers. In some cases, the intermediate computing system (<b>456</b>) may be a storage system similar to the storage systems (<b>306</b>) described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref>, <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref>, <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>B</figref>, or any combination thereof. In fact, the intermediate computing system (<b>456</b>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> may include the same, fewer, or additional components as the storage systems described above.</p><p id="p-0204" num="0203">In some implementations, consistent application of cluster transactions may ensure consistency between different cluster processes that process different portions of an incoming data stream prior to storage of the processed data at a data store. Such consistent application of transactions provides data consistency between the multiple cluster processes, thereby enabling multiple technical features and advantages. One such technical feature or advantage is enabling high availability due to the intermediate computing system (<b>456</b>) being able to tolerate failure of one or all of the cluster processes operating within the cluster of servers implementing the intermediate computing system (<b>456</b>). Another technical feature or advantage is that the data store provided by the cloud services provider (<b>302</b>) may be configured in accordance with a different type of consistency model, where the data store provided by the cloud services provider (<b>302</b>) implements eventual consistency. In this example, while the data store provided by the cloud services provider (<b>302</b>) may be eventually consistent, such as Amazon&#x2122; S3, the transaction logs may be stored with a data store that implements another type of consistency model, such as a consistent data store. In this way, in the event of a failure of all cluster processes within the intermediate computing system (<b>456</b>), the original, failed, cluster may be entirely rebuilt to have a consistent view of the data in the eventually consistent data store that was stored by the original, failed, cluster. Another technical feature or advantage is that clusters other than the original cluster implementing the intermediate computing system (<b>456</b>) may synchronize with the original cluster to provide remote access to stored data and to take over in the event of a failure by the original cluster&#x2014;dependent upon original cluster and the other clusters having a consistent view of the stored data within the eventually consistent data store provided by the cloud services provider (<b>302</b>). In short, the intermediate computing system (<b>456</b>) implements a method by which a consistent view of data may be built on an eventually consistent data store.</p><p id="p-0205" num="0204">Further, as discussed in greater detail below, the intermediate computing system (<b>456</b>) enables processing of data transmitted from a client computing system (<b>410</b>) that is intended for storage by a cloud services provider (<b>302</b>)&#x2014;where, as noted above, the processing may include deduplication of data, among other transformations or optimizations.</p><p id="p-0206" num="0205">As depicted, <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> sets forth a deduplication system (<b>450</b>) illustrating a client computing system(s) (<b>410</b>) and intermediate computing system (<b>456</b>) that support consistent application of cluster transactions according to some embodiments of the present disclosure.</p><p id="p-0207" num="0206">In this example, the intermediate computing system (<b>456</b>) implements a consistent transactions module (<b>403</b>) configured to enable the herein embodiments of consistent application of cluster transactions. In this case, the data being stored by the client computing system(s) (<b>410</b>), after being received and processed by the intermediate computing system (<b>456</b>), are stored at an ultimate data repository, such as a data store or data object store provided by, for example, Amazon S3&#x2122;, Amazon Glacier&#x2122;, Microsoft Azure&#x2122;, Google Cloud Storage&#x2122;, or some other cloud data store or some other remote data center that provides a non-virtual, data store.</p><p id="p-0208" num="0207">For further explanation, <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> sets forth an intermediate computing system(s) (<b>456</b>) illustrating an implementation of consistent application of cluster transactions according to some embodiments of the present disclosure. In this example, the intermediate computing system (<b>456</b>) may be implemented by one or more physical or virtual servers, including one or more storage systems such as storage systems (<b>306</b>), which may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref>, <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref>, <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>B</figref>, or any combination thereof.</p><p id="p-0209" num="0208">With reference to the deduplication system (<b>450</b>) as depicted within <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, in this example, a client computing system(s) (<b>410</b>) may communicate with the intermediate computing system (<b>456</b>) to store snapshots, backups, or other recovery data at data store provided by the data storage service (<b>424</b>)&#x2014;where the consistent transactions module (<b>403</b>) may enable consistent application of transaction logs generated by different, respective cluster processes within the intermediate computing system (<b>456</b>). In this example, client computing system(s) (<b>410</b>) communicates with the intermediate computing system (<b>456</b>) over a first network (<b>454</b>) and the intermediate computing system (<b>456</b>) communicates with the cloud services provider (<b>302</b>) over a second network (<b>458</b>), which may be a same or different network as the first network (<b>454</b>).</p><p id="p-0210" num="0209">As discussed above, the intermediate computing system (<b>456</b>) may implement deduplication to reduce duplication of the storage of files or data objects, where in the case that the intermediate computing system (<b>456</b>) receives files, or some unstructured data, the intermediate computing system (<b>456</b>) may partition the received data into data objects. Further, in this example, the intermediate computing system (<b>456</b>) may generate hash values for each data object to determine&#x2014;in dependence upon matching hash values&#x2014;whether or not a given data object is a duplicate of another data object. In this example, data objects that are not duplicates of other data objects, based on a comparison of hash values for the data objects, may be aggregated into other quantities of data, such as a data block, where the data block may then be replicated onto the data storage service (<b>424</b>)</p><p id="p-0211" num="0210">In some implementations, the intermediate computing system (<b>456</b>) may store data as a sequence of requests&#x2014;including, but not limited to block requests, metadata requests, or key requests&#x2014;that may be recorded in the data store provided by the cloud services provider (<b>302</b>), where the requests, in the sequence in which they were received, may be considered to be a transaction log. Further, in this example, requests in a transaction log may be used to construct the state of a given database used by a given cluster process within the multiple cluster processes operating within the intermediate computing system (<b>456</b>), where a constructed database may then be used by another cluster process to continue performing deduplication of data.</p><p id="p-0212" num="0211">In this example, each respective cluster process, corresponding to a respective pipeline (<b>484</b>), may correspond to an individual transaction log, where the individual transaction log corresponding to a given cluster process may store requests allocated to the given cluster process, or received by the given cluster process. Such an individual transaction log may be used to rebuild or recover a corresponding cluster process or pipeline (<b>484</b>) database (<b>482</b>)&#x2014;where each cluster process or pipeline (<b>484</b>) may operate independently or in parallel to other cluster processes or pipelines (<b>484</b>). For example, requests allocated to a cluster process for pipeline (<b>484</b>A) may be stored within a transaction log corresponding to pipeline (<b>484</b>A) within database (<b>482</b>A), where the transaction log stored within the corresponding database (<b>482</b>A) may be used to recover all requests, and consequently all data, received and stored by the corresponding cluster process or pipeline (<b>484</b>A).</p><p id="p-0213" num="0212">Specifically, in this example, an individual transaction log for an individual cluster process or pipeline may be replayed to recreate a state of the pipeline database at a given point in time. In this example, such a recreation of a state of a pipeline may be performed by another server within the cluster for the intermediate computing system (<b>456</b>), where the other server may be designated as a secondary server that transitions to a primary server in response to a failure of the primary server. In this way, a cluster may recover from the failure of one or more of the servers or cluster processes within the cluster of serves or processes&#x2014;or a new cluster, with greater performance or resource specifications, may replace an older cluster based on recreating each of the cluster processes or pipelines within the older cluster. Further, based on recreating the state of each individual pipeline or cluster process, the cluster may be cloned or replicated to another location, and the replicated cluster may serve as a secondary cluster to replace the original cluster in response to a failure of the original cluster.</p><p id="p-0214" num="0213">In some implementations, based on the following conditions being true, a state of a pipeline or cluster process on a first server from a corresponding transaction log may be recreated on a second server such that recovery of all stored and committed data by the first server is identical to recovery of data from the second server after recreation of the state of the pipeline or cluster process on the first server. In this example, these conditions may include: (1) if a request was successfully applied in the first server, the request must be applied in any server used to recover with the transaction log for the first server; (2) if a request was not successfully applied in the first server, the request is not applied in any server used to recover with the transaction log for the first server; and (3) requests that were successfully applied in the first server are applied in the same order in any server used to recover with the transaction log for the first server. As noted above, in some examples, requests that are allocated to different cluster processes, pipelines, or shards are stored in different, respective transaction logs that may be used to replicate the cluster processes, pipelines, or shards. In some examples, for deduplication, there may be no order dependency between requests allocated to different cluster processes, pipelines, or shards.</p><p id="p-0215" num="0214">In some implementations, a &#x201c;manifest&#x201d; or &#x201c;request manifest&#x201d; may be specified to include the following properties: (1) each manifest may have a monotonically increasing manifest sequence number that is distinct from each other manifest sequence number for each other manifest, where there are no gaps in the list of monotonically increasing sequence numbers for the manifest, and where each particular manifest corresponds, or is mapped to, a particular sequence number; (2) each manifest corresponds to a set of request numbers, where the request numbers may be a contiguous range of numbers, or where the set of request numbers may be an ordered list of identifiers; (3) all request numbers within a set of request numbers for a given manifest are greater than all request numbers in every other set of request number for every manifest with a manifest sequence number less than the manifest sequence number for the given manifest; (4) if a request number is included in any manifest, then the request number must be applied by all servers to respective databases; and (5) if a request number is not included in any manifest, then the request number is not applied by any server to a respective database. However, in some cases, a monotonically increasing sequence number or manifest sequence number may include non-contiguous sequence numbers; as a simple example, a sequence based on incrementally increasing even numbers includes gaps for each odd number, but is monotonically increasing.</p><p id="p-0216" num="0215">In some implementations, a data storage consistency model may be characterized as &#x201c;consistent&#x201d; or &#x201c;eventually consistent&#x201d;, where in a consistent data storage model every read request either receives a value of the most recent write request or receives an error. By contrast, in this example, in an eventually consistent data storage model, if no new write requests are made to a given data item, then eventually all read requests for that data item return a value of the last write request.</p><p id="p-0217" num="0216">Given these example principles, the below discussion of <figref idref="DRAWINGS">FIGS. <b>5</b>, <b>6</b>, and <b>7</b></figref> explain in greater detail elements of receiving requests and creating a manifest, an example recovery process, and transaction log synchronization among multiple cluster processes or pipelines. However, prior to the discussion of <figref idref="DRAWINGS">FIGS. <b>5</b>, <b>6</b>, and <b>7</b></figref>, additional examples of the functionality of the components of an intermediate computing system (<b>456</b>) are provided.</p><p id="p-0218" num="0217">As depicted in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, an intermediate computing system (<b>456</b>) may implement a deduplication process that receives data from a client computing system(s) (<b>410</b>) that is directed to a data store, such as a virtual data store provided by a cloud services provider (<b>302</b>)&#x2014;where the data received by the intermediary computing system (<b>456</b>) is deduplicated prior to being stored at the data store at the cloud services provider (<b>302</b>). While the operations described below are attributed to a corresponding module, such an attribution is for the sake of clarity; however, in other examples, some modules may perform more or fewer operations, including operations described as being performed by other modules below.</p><p id="p-0219" num="0218">An application program interface (API) (<b>462</b>) may receive, a request to store an object from a client device, such as client computing system (<b>410</b>), where the object may be structured data, such as a file of some type, or unstructured data, such as a stream of bytes.</p><p id="p-0220" num="0219">A splitter (<b>464</b>) may split the received data objects or data streams into blocks of data, where the blocks of data may be variable length blocks, fixed length blocks, or blocks that are sized to increase a probability of matching blocks that have been previously generated. However, in other examples, in response to received data objects being smaller than a particular or specified block size, the splitter (<b>464</b>) may also, or instead, generate blocks by aggregating multiple received objects of data.</p><p id="p-0221" num="0220">A hasher (<b>466</b>) may take the output from the splitter (<b>464</b>), and hash the generated blocks of data. For example, the hasher (<b>466</b>) may use a cryptographic hash such as MD5, SHA1, SHA2, or some other algorithm.</p><p id="p-0222" num="0221">In a simplified example, not depicted in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, the hasher (<b>466</b>) may send a hashed block to a single, given pipeline, where the single pipeline may then process the hashed block, including discarding the hashed block or storing the hashed block at the cloud services provider (<b>302</b>). Further, a simplified example may be scaled by introducing more pipelines, where each pipeline may be implemented by a physical or virtual server that may respond to inquiries as to whether or not the given pipeline matches the hashed block, where the router (<b>467</b>), given a response from each of the pipelines, may either route the hashed block to one of the pipelines or discard the block responsive to a match with a previously stored block. Further still, in other examples, the intermediate computing system (<b>456</b>) may be scaled further, where the router (<b>467</b>) sends the hashed block to one of the splitters (<b>470</b>), and a splitter may then query a corresponding set of one or more pipelines (<b>484</b>) to determine whether or not to further process the hashed block for storage or discard the hashed block.</p><p id="p-0223" num="0222">Continuing with the depicted example, a router (<b>468</b>) may take output from the hasher (<b>466</b>), which may be hashed blocks of data, and provide the hashed blocks of data to one or more splitters (<b>470</b>A-<b>470</b>N), where the router (<b>468</b>) may select a given splitter (<b>470</b>) from among the multiple splitters (<b>470</b>A-<b>470</b>N) in accordance with one or more routing policies, including assignment of a given splitter to a given hash value range, or based on load balancing among the splitters (<b>470</b>A-<b>470</b>N) or pipelines (<b>484</b>), or based on some other technique.</p><p id="p-0224" num="0223">A splitter (<b>470</b>) may take output from a router (<b>468</b>) and query each corresponding pipeline (<b>484</b>A-<b>484</b>S) for the given splitter (<b>470</b>), and determine whether or not the hashed block matches the hash value of a previously stored block for a given pipeline (<b>484</b>). In response to receiving query results from the lookup (<b>472</b>) modules of the corresponding pipelines, the given splitter (<b>470</b>) may send the hashed block to a selected pipeline from among the corresponding set of pipelines. For example, splitter (<b>470</b>A) may send the hashed block to one of a set of pipelines (<b>484</b>A-<b>484</b>M).</p><p id="p-0225" num="0224">A lookup (<b>472</b>) module may respond to queries as to whether a given hashed block has been previously stored by a corresponding pipeline for the lookup (<b>472</b>) module. For example, a lookup (<b>472</b>) module may use metadata stored by a corresponding pipeline (<b>484</b>) that includes the lookup (<b>472</b>) module. In this example, if a hash matches, indicating that the hashed block matches the hash of a previously stored block, then the hashed block may be discarded thereby preventing storing duplicate data. Otherwise, the hashed block does not match the hash of a previously stored block, and the hashed block is further processed because it is not duplicate data.</p><p id="p-0226" num="0225">A compressor (<b>474</b>), in some implementations, may be included within a given pipeline (<b>484</b>) to compress a hashed block. However, in other implementations, a given pipeline may not include a compressor (<b>474</b>).</p><p id="p-0227" num="0226">An aggregator (<b>476</b>) may aggregate, in accordance with an aggregation policy and/or in accordance with an aggregation event, a hashed block or blocks of data that have not yet been stored remotely, where the hashed block or blocks of data may or may not be compressed, into a sequence of data blocks. In some examples, storage of the sequence of blocks of data is more efficient than storage of smaller blocks of data. Aggregation policies and events are discussed in greater detail below.</p><p id="p-0228" num="0227">A storer (<b>478</b>) may receive data from an aggregator (<b>476</b>) and store the data at a data store provided by a cloud services provider (<b>302</b>), such as an object store provided, for example, Amazon S3&#x2122;, Amazon Glacier&#x2122;, Microsoft Azure&#x2122;, Google Cloud Storage&#x2122;, or some other cloud data store or some other remote data center, non-virtual, data store.</p><p id="p-0229" num="0228">A reorder (<b>479</b>) module may&#x2014;for stored blocks of data or for data determined to be send to a data store&#x2014;update, create, or maintain a transaction log to record transactions, including transaction information and/or metadata corresponding to a data storage request, in the order that the data storage requests are received from a client computing device.</p><p id="p-0230" num="0229">A committer (<b>480</b>) may store&#x2014;for stored blocks of data or for data determined to be sent to a data store&#x2014;within a corresponding database (<b>482</b>), commit data for blocks of data stored or to be stored in a data store, such as a data store provided by the cloud services provider (<b>302</b>). Further, a lookup (<b>472</b>) module may query a database (<b>482</b>) for the pipeline to determine whether or not a given hashed block has been stored. In this example, the committer (<b>480</b>) may update a table within the database (<b>482</b>) that correlates hash values for blocks to a location, where the location may be a data object location may be a number of the aggregated block stored by a storer (<b>478</b>), an offset of the block in the aggregated block, and a length. In other examples, the location may be a reference number of a data object stored by the storer (<b>478</b>), where the list of locations may be stored with an object key in an object-key-to-location-list table. In some cases, object keys and data object locations may be stored in a data store provided by the cloud services provider (<b>302</b>).</p><p id="p-0231" num="0230">In some embodiments, an aggregator, such as aggregator (<b>476</b>) may identify or determine different events or situations that cause an aggregation event that causes the intermediate computing system (<b>456</b>) to respond by selecting data to be aggregated into an aggregated data object and to send the aggregated data object to be stored at a remote data store. In some cases, the different events or situations may be specified within an aggregation policy, or the different events or situations may be learned by an artificial intelligence module.</p><p id="p-0232" num="0231">Further, as discussed above, in response to the aggregated data object being committed or successfully stored at the remote data store, the aggregated data object may then be removed from the storage resources of the intermediate computing system (<b>456</b>). Further, in different embodiments, the determination of different events or situations that cause or result in causing or triggering an aggregation event may be implemented using different techniques.</p><p id="p-0233" num="0232">As one example of determining an aggregation event, the intermediate computing system (<b>456</b>) may determine whether or not received data exceeds a particular byte count threshold. In this example, if the byte count threshold is exceeded, then the aggregator (<b>476</b>) may send the aggregated data to be stored at the remote data store. In other cases, the intermediate computing system (<b>456</b>) may determine an aggregation event in response to an expiration of a specified period of time, regardless of a quantity of aggregated data. In this example, in response to an aggregation event, aggregator (<b>476</b>) modules at one or more pipelines (<b>484</b>) may be notified to aggregate and send data for the particular upload ID to the remote data store for persistent storage, where the aggregator (<b>476</b>) modules may continue processing as described above, including notifying a committer (<b>480</b>) and removing the data corresponding to the upload ID from the intermediate computing system (<b>456</b>).</p><p id="p-0234" num="0233">For further explanation, <figref idref="DRAWINGS">FIG. <b>4</b>C</figref> sets forth a diagram illustrating an example method of secure encryption in a deduplication cluster in accordance with some embodiments of the present disclosure. Although depicted in less detail, in this example, the intermediate computing system (<b>456</b>) may be implementations of a storage system (<b>306</b>), where the intermediate computing system (<b>456</b>) may implement data storage features described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D, <b>2</b>A-<b>2</b>G, <b>3</b>A, <b>3</b>B, <b>4</b>A, and <b>4</b>B</figref> as the intermediate computing system (<b>456</b>) may include some or all of the components described above.</p><p id="p-0235" num="0234">In this example, the deduplication cluster described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A and <b>4</b>B</figref> is implemented to provide secure encryption of data stored within the intermediate computing system (<b>456</b>). As noted above, in some examples, within the intermediate computing system (<b>456</b>), each pipeline (<b>484</b>A-<b>484</b>M, <b>484</b>P-<b>484</b>S) may be considered to be a node, where the set of nodes (<b>484</b>A-<b>484</b>M, <b>484</b>P-<b>484</b>S) may be considered a cluster of nodes, or a deduplication cluster. For the sake of clarity, in this example, only four nodes (<b>485</b>-<b>488</b>) are depicted, however, in other examples, the below implementations using four nodes (<b>485</b>-<b>488</b>) may be extended to any number of nodes, as illustrated above in <figref idref="DRAWINGS">FIGS. <b>4</b>A and <b>4</b>B</figref>.</p><p id="p-0236" num="0235">In implementing secure encryption of the stored data, where the stored data is depicted in <figref idref="DRAWINGS">FIGS. <b>4</b>A and <b>4</b>B</figref>, each of the nodes may implement a version of Shamir secret sharing, where each node stores a shard, or a portion of a secret key, such that given a subset of nodes from among the cluster of nodes, data stored within the intermediate computing system (<b>456</b>) may be both encrypted and decrypted. In this example, a shard may be referred to as a share store.</p><p id="p-0237" num="0236">Further, in this example, a secure, distributed, consistent key-value data store (<b>499</b>) that provides services that include atomic operations such as an atomic compare and swap, atomic update, among others. As one example, among other examples, a secure key-value data store (<b>499</b>) may be implemented by etcd, which is a persistent, distributed, key-value data store that may store data consistently, such as a current secret key identifier (<b>498</b>) and a next secret key identifier (<b>497</b>), where&#x2014;for a given version of stored data&#x2014;each requesting node is provided a same data value.</p><p id="p-0238" num="0237">In some implementations, during the course of normal operations, a leader node may become unresponsive, fail, drop in performance below a specified performance threshold, or for some other reason, become unable to continue operating as a leader node for the deduplication cluster. In such a case, there may be a leadership transition, where responsive to detecting that the current leader node is unresponsive or otherwise unable to continue as a leader node, one or more other nodes within the deduplication cluster may initiate a leadership transition.</p><p id="p-0239" num="0238">In some implementations, any number of the cluster nodes may attempt to become a next leader node, where at the end of a leadership transition, consensus is reached among the cluster of nodes on one or more leader nodes among the contenting nodes to become the leader node of the deduplication cluster. However, in this example, at the end of the transition, there will be no node operating as a leader node that was not designated as a leader node by consensus among the cluster of nodes.</p><p id="p-0240" num="0239">In this example, there may be a current leader node and a current secret key corresponding to a current secret key identifier (<b>498</b>), where each respective node in the deduplication cluster may store a respective share store, or respective shard. Specifically, in this example, there may be a cluster of nodes (<b>485</b>-<b>488</b>), where node <b>485</b> stores shards A-1 (<b>491</b>-<b>1</b>), B-1 (<b>492</b>-<b>1</b>), and C-1 (<b>493</b>-<b>1</b>), where node <b>486</b> stores shards A-2 (<b>491</b>-<b>2</b>), B-2 (<b>492</b>-<b>2</b>), and C-2 (<b>493</b>-<b>2</b>), where node <b>487</b> stores shards A-3 (<b>491</b>-<b>3</b>), B-3 (<b>492</b>-<b>3</b>), and C-3 (<b>493</b>-<b>3</b>), and where node <b>488</b> stores shards A-4 (<b>491</b>-<b>4</b>) and C-4 (<b>493</b>-<b>4</b>).</p><p id="p-0241" num="0240">Further, in this example, a given node may initiate a leadership transition by using a two-phase commit protocol, where one phase includes distributing shards of a next secret key to each node, and once each node acknowledges secure storage of the shard of the next secret key, then follows a commit phase, which includes an atomic commit of the next secret key as the current secret key. In this way, the entire cluster of nodes, in a consistent manner, moves from a previous secret key to a next secret key, and from a previous leader node to an updated leader node.</p><p id="p-0242" num="0241">In this example, in an current state, there may be a current leader node (<b>485</b>) and a current secret key identifier A (<b>498</b>), where the current secret key corresponds to four respective shards A-1 (<b>491</b>-<b>1</b>), A-2 (<b>491</b>-<b>2</b>), A-3 (<b>491</b>-<b>3</b>), A-4 (<b>491</b>-<b>4</b>) stored on the four respective nodes (<b>485</b>, <b>486</b>, <b>487</b>, <b>488</b>). In some examples, a secret key identifier may be implemented as an integer, where each successive secret key identifier is a monotonically increasing integer.</p><p id="p-0243" num="0242">In this example, given this current state, two other nodes, say nodes (<b>486</b>, <b>487</b>), may initiate a leadership transition, where a first prospective leader node (<b>486</b>) may initiate distribution of a new set of shards, B-1 (<b>492</b>-<b>1</b>), B-2 (<b>492</b>-<b>2</b>), and B-3 (<b>492</b>-<b>3</b>) for a next secret key, where the new set of shards (<b>492</b>-<b>1</b>, <b>492</b>-<b>2</b>, <b>492</b>-<b>3</b>) correspond to a next secret key identifier B (<b>497</b>), and where the next secret key identifier B (<b>497</b>) is generated in response to a request by the prospective leader node (<b>486</b>) to update, or increment, the current secret key identifier A (<b>498</b>). In some examples, for various reasons, not all shards may be received or acknowledge by the intended node, where in this example, node (<b>488</b>) fails to receive or acknowledge a shard of the next secret key identifier B (<b>497</b>).</p><p id="p-0244" num="0243">Further, concurrently, or contemporaneously, another prospective leader node (<b>487</b>) also initiates a leadership transition, where the second prospective leader node (<b>487</b>) may initiate distribution of a new set of shards, C-1 (<b>493</b>-<b>1</b>), C-2 (<b>493</b>-<b>2</b>), C-3 (<b>493</b>-<b>3</b>), and C-4 (<b>493</b>-<b>4</b>) for a next secret key, where the new set of shards (<b>493</b>-<b>1</b>, <b>493</b>-<b>2</b>, <b>493</b>-<b>3</b>, <b>493</b>-<b>4</b>) correspond to a next secret key identifier C (<b>496</b>), and where the next secret key identifier C (<b>496</b>) is generated in response to a request by the second prospective leader node (<b>487</b>) to update, or increment, the current secret key identifier&#x2014;which, because the atomic update occurred subsequent to the atomic update by the first prospective leader node (<b>486</b>)&#x2014;is C (<b>496</b>).</p><p id="p-0245" num="0244">In this example, the cluster nodes now have updated keys corresponding to two attempted prospective leadership attempts, and to resolve this conflict, and to select a single leader from among the two prospective leader nodes (<b>486</b>, <b>487</b>), a resolution policy may be applied&#x2014;where the resolution policy specifies that for multiple updated secret key identifiers corresponding to a leadership transition, the updated secret key identifier that is made later is selected as the updated secret key identifier, and the other updated secret key identifier is rejected. In the case where the secret key identifier is a monotonically increasing integer, the largest integer for the updated secret key is selected.</p><p id="p-0246" num="0245">In this example, the secret key identifier B (<b>497</b>) corresponding to prospective leader node (<b>486</b>) was not received or acknowledged by another node (<b>488</b>) in the cluster, preventing consensus on accepting the secret key identifier B (<b>497</b>) as the next secret key identifier, and allowing all nodes to receive the updated secret key identifier C (<b>496</b>) corresponding to prospective leader node (<b>487</b>).</p><p id="p-0247" num="0246">In this way, a current state of the deduplication cluster may transition from a current secret key A, and a current leader node (<b>485</b>), to a next, or updated secret key C, and a next leader node (<b>487</b>).</p><p id="p-0248" num="0247">For further explanation, <figref idref="DRAWINGS">FIG. <b>5</b></figref> sets forth an intermediate computing system (<b>456</b>) illustrating an implementation of consistent application of cluster transactions according to some embodiments of the present disclosure.</p><p id="p-0249" num="0248">In this example, the intermediate computing system (<b>456</b>) receives requests, such as data storage operation requests, and processes the requests prior to interacting with the data store serving as a repository for one or more client computing system(s) (<b>410</b>), where the data store may be provided by a cloud services provider (<b>302</b>), as described above with reference to <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>. As discussed above, the intermediate computing system (<b>456</b>) may provide one or more services prior to storage or retrieval of data at the data store, including deduplication, compression, encryption, among other services.</p><p id="p-0250" num="0249">The example flow chart depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates the intermediate computing system (<b>456</b>) receiving and handling requests and correspondingly maintaining a transaction log of all handled requests.</p><p id="p-0251" num="0250">In this example, in response to receiving a request (<b>552</b>), the intermediate computing system (<b>456</b>) may create (<b>502</b>) a request to be assigned to a cluster process&#x2014;where the intermediate computing system (<b>456</b>) may implement multiple cluster processes, and where each respective cluster process is implemented by a respective pipeline (<b>484</b>).</p><p id="p-0252" num="0251">The intermediate computing system (<b>456</b>) may then assign (<b>504</b>) the request (<b>552</b>) to a cluster process from among the multiple cluster processes of the intermediate computing system (<b>456</b>). Further, as depicted in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, a pipeline (<b>484</b>) for a given cluster process may include respective processing modules (<b>472</b>-<b>480</b>) and respective data storage (<b>482</b>). Further still, for the sake of simplicity, and to emphasize the distributed nature of assigning requests to different cluster processes, the steps of splitting (<b>464</b>) and hashing (<b>466</b>) are not discussed here; however, in different implementations, these steps of splitting (<b>464</b>) and hashing (<b>466</b>) may or may not be included in this example process.</p><p id="p-0253" num="0252">Continuing with this example, the request (<b>552</b>) may be assigned (<b>506</b>) a request number, where each request number has properties described above, such as the request number being monotonically increasing within the scope of the cluster process, or such as the request number being an ordered element of a list of identifiers.</p><p id="p-0254" num="0253">In this example, the request (<b>552</b>) may then be stored (<b>508</b>) to a data store (<b>580</b>), such as an eventually consistent object data store provided by a cloud services provider (<b>302</b>). In some examples, the request (<b>552</b>) may be stored individually, or the request (<b>552</b>) may be stored along with other requests as part of an aggregated data object.</p><p id="p-0255" num="0254">In this example, the store (<b>508</b>) may succeed or fail, and if the store (<b>508</b>) is determined (<b>510</b>) to have failed or not succeeded, then the request (<b>552</b>) may be discarded (<b>512</b>), and processing may continue at a point where another request is received. Otherwise, if the request (<b>552</b>) is determined (<b>510</b>) to have succeeded, then the intermediate computing system (<b>456</b>) may add (<b>514</b>) the request (<b>552</b>) to a corresponding manifest (<b>554</b>) for the cluster process.</p><p id="p-0256" num="0255">In this example, adding (<b>514</b>) the request to a corresponding manifest for the cluster process may include the request (<b>552</b>) being added to either the highest numbered existing request manifest for the cluster process&#x2014;if the request number is within the scope of the request numbers for the existing request manifest&#x2014;otherwise, the request (<b>552</b>) may be added to a new request manifest with the next unused manifest sequence number.</p><p id="p-0257" num="0256">In this example, the manifest (<b>554</b>) may be stored (<b>516</b>) or updated in a consistent data store (<b>560</b>) provided by a storage services provider (<b>550</b>), where the data store (<b>560</b>) provides a consistent view to all clients that read or write manifest data. In one implementation, the data store (<b>560</b>) may be a distributed key value data store that provides data consistency, such as Etcd or Apache ZooKeeper&#x2122;. In some examples, multiple request numbers may be combined in a single update to a request manifest for greater efficiency.</p><p id="p-0258" num="0257">In this example, if the intermediate computing system (<b>456</b>) determines (<b>518</b>) that the storage (<b>516</b>) of the manifest (<b>554</b>) is not successful, then the request (<b>552</b>) may be discarded, and processing may continue with receiving another request. Otherwise, if the intermediate computing system (<b>456</b>) determines (<b>518</b>) that the storage (<b>516</b>) of the manifest (<b>554</b>) is successful, then the intermediate computing system (<b>456</b>) may apply (<b>520</b>) the request (<b>552</b>) to a shard database (<b>570</b>), such as a database (<b>482</b>) depicted within <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> that correspond to a given cluster process. In other words, the request (<b>552</b>) may be considered to be committed as a database transaction, as described above with reference to a committer (<b>480</b>) module that is part of the pipeline processing for a cluster process.</p><p id="p-0259" num="0258">In this example, if the intermediate computing system (<b>456</b>) determines (<b>522</b>) that the request was not applied (<b>520</b>) successfully, then the intermediate computing system (<b>456</b>) may determine (<b>524</b>) whether the failure to apply (<b>520</b>) the request (<b>552</b>) was due to a transient error, and if the error was transient, then retrying the attempt to apply (<b>520</b>) the request (<b>552</b>). Otherwise, if the intermediate computing system (<b>456</b>) determines (<b>524</b>) that the failure to apply (<b>520</b>) the request (<b>552</b>) was not due to a transient error, then the intermediate computing system (<b>456</b>) may not retry and discard (<b>512</b>) the request and continue processing with the receipt of another request. Otherwise, if the intermediate computing system (<b>456</b>) determines (<b>522</b>) that the request (<b>552</b>) was applied (<b>520</b>) successfully, then processing may continue with the receipt of another request.</p><p id="p-0260" num="0259">Further, in some examples, if a request has been successfully added to a manifest fails to be applied to a shard database due to a transient error, then the intermediate computing system (<b>456</b>) may attempt to continue indefinitely until the request is successfully applied&#x2014;where all cluster processes applying the request retry until successfully applied in order to ensure that all cluster processes end up with the same shard database state. Further, in some examples, if a request with a request number has been listed in a manifest fails to be applied to the shard database due to a permanent error, then the request is considered to have failed, and the request must also permanently fail on all other cluster processes that attempt to apply the request, to ensure that all cluster processes end up with the same shard database.</p><p id="p-0261" num="0260">In some examples, if the request manifest is unable to be written to a consistent data store for any reason, then every request whose request number was to be added to the manifest must not be applied to the shard database. For example, in some cases, every operation dependent on any of these requests must be failed and aborted. Further, in some example, even if a request is successfully written to the eventually consistent data store, it must not be applied to the shard databases because the request will not be listed within any request manifest&#x2014;this ensures that all cluster processes end up with the same shard database state.</p><p id="p-0262" num="0261">For further explanation, <figref idref="DRAWINGS">FIG. <b>6</b></figref> sets forth an intermediate computing system (<b>456</b>) illustrating an implementation of consistent application of cluster transactions according to some embodiments of the present disclosure.</p><p id="p-0263" num="0262">The example flow chart depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates the intermediate computing system (<b>456</b>) performing a recovery process to recreate a shard database, which may be used for data recovery, or which may be used to create a replica of the shard database on another server or cluster process.</p><p id="p-0264" num="0263">The intermediate computing system (<b>456</b>) may read (<b>602</b>) a highest request number that has already been applied to a shard database. In this example, the intermediate computing system (<b>456</b>) recreates an entire shard database up until the most recent request number. However, in other examples, the intermediate computing system (<b>456</b>) may recreate a portion of an entire shard database, for example, the intermediate computing system (<b>456</b>) may record a set of request numbers that correspond to a particular structure of data, such as a volume, a snapshot, or some other type of data object, and in such an example, the intermediate computing system (<b>456</b>) may begin with the highest request number for the particular structure of data.</p><p id="p-0265" num="0264">In this example, the intermediate computing system (<b>456</b>) determines a highest request number that has been applied to a corresponding shard database (<b>570</b>), which may be implemented by reading (<b>602</b>) the applied sequence numbers from the corresponding shard database (<b>570</b>).</p><p id="p-0266" num="0265">In this example, the consistent data store (<b>560</b>) may be queried, or referenced, to determine (<b>604</b>) a next manifest number that includes request numbers greater than the highest request number applied to the shard database (<b>570</b>).</p><p id="p-0267" num="0266">In this example, the next manifest (<b>652</b>) is read (<b>606</b>) to determine a set of request numbers to apply, where the read (<b>606</b>) may be implemented by the intermediate computing system (<b>456</b>) using the next manifest number to query the consistent data store (<b>560</b>) for the manifest corresponding to the manifest number.</p><p id="p-0268" num="0267">If the intermediate computing system (<b>456</b>) determines (<b>608</b>) that the read (<b>606</b>) of the next manifest (<b>652</b>) is not successful, then the intermediate computing system (<b>456</b>) attempt to read the next manifest (<b>652</b>) again. Otherwise, if the intermediate computing system (<b>456</b>) determines (<b>608</b>) that the read (<b>608</b>) of the next manifest (<b>652</b>) is successful, then the intermediate computing system (<b>456</b>) may read (<b>610</b>), from the eventually consistent data store (<b>580</b>), a next request (<b>654</b>) from the eventually consistent data store (<b>580</b>), where the next request (<b>654</b>) is initially a first request, or request with a lowest request number, and becomes each monotonically incrementing request number thereafter.</p><p id="p-0269" num="0268">In this example, if the intermediate computing system (<b>456</b>) determines (<b>612</b>) that a given read (<b>610</b>) of a next request (<b>654</b>) is not successful, then the read (<b>610</b>) of the next request (<b>654</b>) is attempted again to ensure that requests are applied in order. Otherwise, if the intermediate computing system (<b>456</b>) determines (<b>612</b>) that the read (<b>610</b>) of the next request (<b>654</b>) is successful, then the next request (<b>654</b>) is applied (<b>614</b>) to the shard database (<b>570</b>) where each request may be applied in order of request number.</p><p id="p-0270" num="0269">In this example, if the intermediate computing system (<b>456</b>) determines (<b>616</b>) that a request is not successfully applied, then the intermediate computing system (<b>456</b>) may determine (<b>618</b>) if the failure is due to a transient error. For example, if the intermediate computing system (<b>456</b>) determines (<b>618</b>) that the failure to apply the next request is a transient error, then the intermediate computing system (<b>456</b>) may retry an attempt to apply (<b>614</b>) the next request (<b>654</b>) until the attempt succeeds. Otherwise, if the intermediate computing system (<b>456</b>) determines (<b>618</b>) that the failure to apply the next request is not a transient error, then the next request may be discarded (<b>620</b>)&#x2014;where the implication is that this particular request also failed to be applied by the cluster process when the particular request was originally processed.</p><p id="p-0271" num="0270">In this example, the intermediate computing system (<b>456</b>) may then determine (<b>622</b>) if there are any remaining requests within the manifest set of request numbers, where if there are more requests, then the intermediate computing system (<b>456</b>) may then consider a subsequent request with a subsequent sequence number as the new next request, and continue processing by reading (<b>610</b>) the next request. Otherwise, if the intermediate computing system (<b>456</b>) determines (<b>622</b>) that there are no more requests, then the intermediate computing system (<b>456</b>) may continue by determining the next remaining request number, and determining (<b>604</b>) the next corresponding manifest number&#x2014;and this process continues until all requests have been processed.</p><p id="p-0272" num="0271">In this way, the recovered dataset on the shard database is identical to the original dataset corresponding to the transaction logs reflected in the one or more manifests that were created by the original cluster process in response to the original requests being processed.</p><p id="p-0273" num="0272">For further explanation, <figref idref="DRAWINGS">FIG. <b>7</b></figref> sets forth an intermediate computing system (<b>456</b>) illustrating an implementation of consistent application of cluster transactions according to some embodiments of the present disclosure.</p><p id="p-0274" num="0273">The example flow chart depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates the intermediate computing system (<b>456</b>) synchronizing different clusters.</p><p id="p-0275" num="0274">As discussed above an intermediate computing system (<b>456</b>) may be implemented by a cluster of servers or a cluster of virtual computing instances, and in some cases, it may be advantageous to replicate a particular cluster, such as for redundancy and data recovery reasons, for geographic proximity and performance reasons, or for some other reason.</p><p id="p-0276" num="0275">In such a scenario, a replica cluster may be generated based on a set of one or more request manifests that have been generated by an original cluster in response to the original cluster receiving and processing storage requests. In such an example, a set of request manifests for an original cluster may be copied from one consistent data store to another, different, consistent data store. In some cases, the set of request manifests may be copied from a first consistent data store to an eventually consistent data store, and from the eventually consistent data store to a second consistent data store. In this example, such a replica, or copying, operation may allow a first cluster for an intermediate computing system (<b>456</b>) to be remotely synchronized with a replica cluster that has an identical set of shard databases, either by having connectivity to the first cluster data store for a set of request manifests, or by using only data from an eventually consistent data store.</p><p id="p-0277" num="0276">The flow chart depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates such a replica process for a set of request manifests from which a replica cluster may be generated. In some cases, the replica process to generate a second, synchronized cluster may be performed by an original intermediate computing system (<b>456</b>); however, in other examples, the replica process may be performed by a third party computer system, including a second intermediate computing system (<b>456</b>) attempting to create a replica cluster. In this example, the replica process is performed by replica system (<b>700</b>).</p><p id="p-0278" num="0277">The replica system (<b>700</b>) may determine (<b>702</b>) a next manifest sequence number as a first manifest sequence number&#x2014;where the entire range of manifest sequence number may be determined by querying a source data store (<b>762</b>) for a set of manifest sequence numbers (<b>752</b>) that correspond to a set of manifests for an original cluster. In some examples, the source data store (<b>762</b>) may be consistent or eventually consistent, and provided by a storage services provider (<b>760</b>). In this way, the replica system (<b>700</b>) may read all manifest from the first manifest sequence number up until the highest manifest sequence number.</p><p id="p-0279" num="0278">In this example, the replica system (<b>700</b>) then begin reading (<b>706</b>) the next manifest (<b>754</b>) corresponding to the next manifest sequence number, as determined (<b>704</b>) above. The replica system (<b>700</b>) may determine (<b>708</b>) if the read (<b>706</b>) of the next manifest is successful, and if not successful, the read (<b>706</b>) may be attempted again&#x2014;where read failures may be due to an eventually consistent source data store not yet being consistent. The replica system (<b>700</b>) may also determine (<b>708</b>) if the read (<b>706</b>) of the next manifest is successful, and if successful, write (<b>710</b>) the next manifest (<b>754</b>) to a destination data store (<b>772</b>), where the destination data store may be provided by a storage services provider (<b>770</b>).</p><p id="p-0280" num="0279">In this example, the replica system (<b>700</b>) may, after writing the next manifest (<b>754</b>) to the destination data store (<b>772</b>), determine (<b>712</b>) if the next manifest has a manifest sequence number equal to the highest manifest sequence number, and if not, then the replica system (<b>700</b>) may determine (<b>704</b>) the next manifest sequence number as the monotonically next sequence number to the sequence number most recently read and written. Otherwise, in this example, if the replica system (<b>700</b>) determines (<b>712</b>) that the next manifest has a sequence number that is not yet equal to the highest manifest sequence number, then the replica system may continue (<b>714</b>) processing. For example, the replica system (<b>700</b>) may notify a replica cluster that an entire set of manifests for an original cluster is available at the destination data store (<b>772</b>) so that a replica cluster may be generated based on the replicated set of manifests.</p><p id="p-0281" num="0280">While in this example, the replica cluster is synchronized up until the manifest corresponding to the highest manifest sequence number&#x2014;which in some embodiments enables the replica cluster to take over&#x2014;in some examples, the synchronization may be ongoing. For example, each new manifest on an original cluster may be replicated to the replica cluster periodically or in response to a manifest update. In this way, the replica cluster continues to be synchronized with the original cluster.</p><p id="p-0282" num="0281">For further explanation, <figref idref="DRAWINGS">FIG. <b>8</b></figref> sets forth a flow chart illustrating an example method of consistent application of cluster transactions in accordance with some embodiments of the present disclosure. Although depicted in less detail, in this example, the intermediate computing system (<b>456</b>) may be implementations of a storage system (<b>306</b>), where the intermediate computing system (<b>456</b>) may implement data storage features described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D, <b>2</b>A-<b>2</b>G, <b>3</b>A, <b>3</b>B, and <b>4</b></figref> as the intermediate computing system (<b>456</b>) may include some or all of the components described above.</p><p id="p-0283" num="0282">The flow chart depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> includes: determining (<b>802</b>), from among a plurality of sequence numbers and for a plurality of transaction logs generated by multiple processes, a reference sequence number (<b>851</b>) stored within a data store (<b>854</b>) using a first consistency model; request (<b>804</b>), from a data store (<b>864</b>) using a second consistency model, the plurality of transaction logs (<b>856</b>) corresponding to sequence numbers completing a sequence that includes the reference sequence number and that corresponds to a complete transaction log; receiving (<b>806</b>) from the data store (<b>864</b>) using the second consistency model, the plurality of transaction logs (<b>856</b>); and generating (<b>808</b>), based on the received plurality of transaction logs (<b>856</b>) generated by the plurality of processes, the complete transaction log (<b>858</b>).</p><p id="p-0284" num="0283">Determining (<b>802</b>), from among the plurality of sequence numbers and for the plurality of transaction logs generated by the multiple processes, a reference sequence number (<b>851</b>) stored within the data store (<b>854</b>) may be implemented as described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>7</b></figref>.</p><p id="p-0285" num="0284">Specifically, with reference to the recovery process described for <figref idref="DRAWINGS">FIG. <b>6</b></figref>, determining (<b>802</b>) a reference sequence number (<b>851</b>) may be implemented by reading (<b>602</b>) a highest request number already applied to a shard database and determining (<b>604</b>) a next manifest number, where each manifest corresponds to one or more transactions for data storage requests. Further, each of the multiple processes may be a cluster process as described above, and the data store (<b>854</b>) using the first consistency model within a storage services provider (<b>852</b>) may be a consistent data store as the data store (<b>560</b>) described above.</p><p id="p-0286" num="0285">Requesting (<b>804</b>), from a data store (<b>864</b>) using a second consistency model, the plurality of transaction logs corresponding to sequence numbers completing a sequence that includes the reference sequence number and that corresponds to a complete transaction log may be implemented as described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>7</b></figref>.</p><p id="p-0287" num="0286">Receiving (<b>806</b>), from the data store (<b>864</b>) using the second consistency model, the plurality of transaction logs may be implemented as described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>7</b></figref>.</p><p id="p-0288" num="0287">Specifically, with continued reference to the recovery process described for <figref idref="DRAWINGS">FIG. <b>6</b></figref>, requesting (<b>804</b>) and receiving (<b>806</b>) the transaction logs may be implemented by iterating through each of the manifests and reading each of the transactions for data storage requests specified within each manifest, as described by reading (<b>606</b>) a next manifest, determining (<b>608</b>) a successful read of the next manifest, reading (<b>610</b>), from the data store (<b>580</b>), a next request listed in the next manifest, and determining (<b>612</b>) a successful read of the next request. Further, the second consistency model for the data store (<b>864</b>) within the storage services provider (<b>862</b>) may be an eventually consistency model for an object store, and the storage services provider (<b>862</b>) may be a cloud services provider (<b>302</b>).</p><p id="p-0289" num="0288">Generating (<b>808</b>), based on the received plurality of transaction logs (<b>856</b>) generated by the plurality of processes, the complete transaction log may be implemented as described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>7</b></figref>.</p><p id="p-0290" num="0289">Specifically, with continued reference to the recovery process described for <figref idref="DRAWINGS">FIG. <b>6</b></figref>, generating (<b>808</b>) the complete transaction log may be implemented by the iterative steps for the recovery process (<b>602</b>, <b>604</b>, <b>606</b>, <b>608</b>, <b>610</b>, <b>612</b>, <b>614</b>, <b>616</b>, <b>618</b>, <b>620</b>, <b>622</b>), which complete when all manifests up until the manifest for the highest sequence number have been retrieved and applied to a shard database&#x2014;where the shard database, upon completion, stores a dataset that is identical to a dataset generated by the application of the original transaction logs as they were generated by the cluster processes in response to receiving data storage requests from one or more client computing devices.</p><p id="p-0291" num="0290">For further explanation, <figref idref="DRAWINGS">FIG. <b>9</b></figref> sets forth a flow chart illustrating an example method of consistent application of cluster transactions in accordance with some embodiments of the present disclosure.</p><p id="p-0292" num="0291">The flow chart depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> is similar to the flow chart depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> in that the flow chart depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> includes: determining (<b>802</b>), from among a plurality of sequence numbers and for a plurality of transaction logs generated by multiple processes, a reference sequence number (<b>851</b>) stored within a data store (<b>854</b>) using a first consistency model; request (<b>804</b>), from a data store (<b>864</b>) using a second consistency model, the plurality of transaction logs (<b>856</b>) corresponding to sequence numbers completing a sequence that includes the reference sequence number and that corresponds to a complete transaction log; receiving (<b>806</b>) from the data store (<b>864</b>) using the second consistency model, the plurality of transaction logs (<b>856</b>); and generating (<b>808</b>), based on the received plurality of transaction logs (<b>856</b>) generated by the plurality of processes, the complete transaction log.</p><p id="p-0293" num="0292">However, the flow chart depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> further includes: generating (<b>902</b>), responsive to a data recovery request, data recovered based at least in part on the complete transaction log.</p><p id="p-0294" num="0293">Generating (<b>902</b>), responsive to a data recovery request (<b>950</b>), data recovered based at least in part on the complete transaction log may be implemented as described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>7</b></figref>, where a data recovery request may be received at a secondary cluster process that is an alternate to a given cluster process, and where the shard database may be the recovered data (<b>860</b>), upon completion as described above with reference to generating (<b>808</b>) the complete transaction log, may be used by the secondary cluster process to continue processing requests in the event of a failure of the original, given cluster process.</p><p id="p-0295" num="0294">For further explanation, <figref idref="DRAWINGS">FIG. <b>10</b></figref> sets forth a diagram illustrating an example method of secure encryption in a deduplication cluster in accordance with some embodiments of the present disclosure. Although depicted in less detail, in this example, the intermediate computing system (<b>456</b>) may be implementations of a storage system (<b>306</b>), where the intermediate computing system (<b>456</b>) may implement data storage features described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D, <b>2</b>A-<b>2</b>G, <b>3</b>A, <b>3</b>B, <b>4</b>A, and <b>4</b>B</figref> as the intermediate computing system (<b>456</b>) may include some or all of the components described above.</p><p id="p-0296" num="0295">The example method of <figref idref="DRAWINGS">FIG. <b>10</b></figref> includes: initiating (<b>1002</b>), by a node (<b>1060</b>A) among a cluster of nodes (<b>1060</b>A-<b>1060</b>N), a leadership transition that includes transmitting an updated secure key identifier (<b>1058</b>) to each of the cluster of nodes (<b>1060</b>A-<b>1060</b>N); receiving (<b>1004</b>), at the node (<b>1060</b>A), an alternative secret key identifier (<b>1056</b>) that is different from both a current secret key identifier (<b>1060</b>) and from the updated secret key identifier (<b>1058</b>); updating (<b>1006</b>), based at least in part on a resolution policy, the current secret key identifier (<b>1052</b>) to be the updated secret key identifier (<b>1058</b>) instead of the alternative secret key identifier (<b>1056</b>); and transitioning (<b>1008</b>), based at least on the updated secret key identifier (<b>1058</b>) being selected to be the current secret key identifier (<b>1060</b>), the node (<b>1060</b>A) to be a leader node of the cluster of nodes (<b>1060</b>A-<b>1060</b>N).</p><p id="p-0297" num="0296">Initiating (<b>1002</b>), by a node (<b>1060</b>A) among a cluster of nodes (<b>1060</b>A-<b>1060</b>N), a leadership transition that includes transmitting an updated secure key identifier (<b>1058</b>) to each of the cluster of nodes (<b>1060</b>A-<b>1060</b>N) may be carried out as described above with reference to <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>, where one or more nodes that are not leader nodes may initiate a leadership transition in response to various conditions, and where such a leadership transition may include requesting from a secure distributed key-value store, such as etcd, an updated secure key identifier by sending an update request (<b>1054</b>) from the node (<b>1060</b>A).</p><p id="p-0298" num="0297">Receiving (<b>1004</b>), at the node (<b>1060</b>A), an alternative secret key identifier (<b>1056</b>) that is different from both a current secret key identifier (<b>1060</b>) and from the updated secret key identifier (<b>1058</b>) may be carried out as described above with reference to <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>, where during a leadership transition, different shards for different updated secret keys may be distributed by different prospective leader nodes. In this example, the alternative secret key identifier (<b>1056</b>) may correspond to a received shard for the alternative secret key, where the received shard corresponds to a different secret key than that sent out by the prospective leader node (<b>1060</b>A).</p><p id="p-0299" num="0298">Updating (<b>1006</b>), based at least in part on a resolution policy, the current secret key identifier (<b>1052</b>) to be the updated secret key identifier (<b>1058</b>) instead of the alternative secret key identifier (<b>1056</b>) may be carried out as described above, where a resolution policy is applied to determine which, from among multiple updated secret key identifiers, secret key identifier for the next secret key will be selected. An example resolution policy is described above.</p><p id="p-0300" num="0299">Transitioning (<b>1008</b>), based at least on the updated secret key identifier (<b>1058</b>) being selected to be the current secret key identifier (<b>1060</b>), the node (<b>1060</b>A) to be a leader node of the cluster of nodes (<b>1060</b>A-<b>1060</b>N) may be carried out as described above with reference to <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>, where subsequent to the application of the resolution policy, a next secret key and a next leader node is determined for the entire cluster, or in this case, deduplication cluster.</p><p id="p-0301" num="0300">Example embodiments are described largely in the context of a fully functional computer system. Readers of skill in the art will recognize, however, that the present disclosure also may be embodied in a computer program product disposed upon computer readable storage media for use with any suitable data processing system. Such computer readable storage media may be any storage medium for machine-readable information, including magnetic media, optical media, or other suitable media. Examples of such media include magnetic disks in hard drives or diskettes, compact disks for optical drives, magnetic tape, and others as will occur to those of skill in the art. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method as embodied in a computer program product. Persons skilled in the art will recognize also that, although some of the example embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present disclosure.</p><p id="p-0302" num="0301">Embodiments can include be a system, a method, and/or a computer program product. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present disclosure.</p><p id="p-0303" num="0302">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0304" num="0303">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0305" num="0304">Computer readable program instructions for carrying out operations of the present disclosure may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++ or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present disclosure.</p><p id="p-0306" num="0305">Aspects of the present disclosure are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to some embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0307" num="0306">These computer readable program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0308" num="0307">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0309" num="0308">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present disclosure. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0310" num="0309">Readers will appreciate that the steps described herein may be carried out in a variety ways and that no particular ordering is required. It will be further understood from the foregoing description that modifications and changes may be made in various embodiments of the present disclosure without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present disclosure is limited only by the language of the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>initiating, by two or more nodes among a cluster of nodes, a leadership transition, wherein:<claim-text>a first node transmits a first secret key identifier to each of the other nodes in the cluster of nodes; and</claim-text><claim-text>a second node transmits a second secret key identifier to each of the other nodes in the cluster of nodes;</claim-text></claim-text><claim-text>updating, by each node and based at least in part on a resolution policy, the current secret key identifier to be the second secret key identifier instead of the first secret key identifier; and</claim-text><claim-text>transitioning, based at least in part on the second secret key identifier being selected to be the current secret key identifier, the second node to be a leader node of the cluster of nodes.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the nodes are included in a deduplication cluster that comprises multiple servers within an intermediate computing system between one or more client devices and a backend cloud storage service.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein a data store on the intermediate computing system uses a consistent data storage model, and wherein the data store for the cloud storage service uses an eventually consistent data storage model.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method further comprises:<claim-text>receiving, via an application program interface of a front-end process, a stream of data;</claim-text><claim-text>splitting the stream of data into blocks of data;</claim-text><claim-text>hashing the blocks of data;</claim-text><claim-text>determining, whether a hash value for a block of data from among the blocks of data, is a duplicate of a hash value for a stored block of data;</claim-text><claim-text>responsive to the hash value for the block of data not matching the hash value for the stored block of data, routing the block of data to a process from among the cluster of nodes; and</claim-text><claim-text>repeating, for each given hash for a given block of data of the blocks of data:<claim-text>determining whether the given hash is a duplicate of some hash value for some stored block of data, and</claim-text><claim-text>responsive to the given hash value for the given block of data not matching some hash value for some stored block of data, routing the given block of data to a process from among the cluster of nodes.</claim-text></claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:<claim-text>distributing, to different ones of the cluster of nodes, the hashed blocks of data that are not duplicates of stored data.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising:<claim-text>sending, from a process that has received a hashed block of data to a remote data store, one or more portions of the block of data, wherein the one or more portions of the block of data correspond to one or more transactions.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the one or more transactions are recorded within a transaction log for the process, and wherein each process among the cluster of nodes generates a transaction log corresponding to data sent to the remote data store.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the front-end process receives the stream of bytes of data from a client device via a communication interface that is compatible with a communication interface provided by the object store.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the remote data store is an object store provided by a cloud services provider.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least one process among the cluster of nodes operates in parallel with at least one other process among the cluster of nodes.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A system comprising two or more nodes, wherein the system is configured to perform the steps of:<claim-text>initiating, by two or more nodes among a cluster of nodes, a leadership transition, wherein:<claim-text>a first node transmits a first secret key identifier to each of the other nodes in the cluster of nodes; and</claim-text><claim-text>a second node transmits a second secret key identifier to each of the other nodes in the cluster of nodes;</claim-text></claim-text><claim-text>updating, by each node and based at least in part on a resolution policy, the current secret key identifier to be the second secret key identifier instead of the first secret key identifier; and</claim-text><claim-text>transitioning, based at least in part on the second secret key identifier being selected to be the current secret key identifier, the second node to be a leader node of the cluster of nodes.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the system comprises multiple servers within an intermediate computing system between one or more client devices and a backend cloud storage service.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein a data store on the intermediate computing system uses a consistent data storage model, and wherein the data store for the cloud storage service uses an eventually consistent data storage model.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the system is further configured to perform the steps of:<claim-text>receiving, via an application program interface of a front-end process, a stream of data;</claim-text><claim-text>splitting the stream of data into blocks of data;</claim-text><claim-text>hashing the blocks of data;</claim-text><claim-text>determining, whether a hash value for a block of data from among the blocks of data, is a duplicate of a hash value for a stored block of data;</claim-text><claim-text>responsive to the hash value for the block of data not matching the hash value for the stored block of data, routing the block of data to a process from among the cluster of nodes; and</claim-text><claim-text>repeating, for each given hash for a given block of data of the blocks of data:<claim-text>determining whether the given hash is a duplicate of some hash value for some stored block of data, and</claim-text><claim-text>responsive to the given hash value for the given block of data not matching some hash value for some stored block of data, routing the given block of data to a process from among the cluster of nodes.</claim-text></claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the system is further configured to perform the step of:<claim-text>distributing, to different ones of the cluster of nodes, the hashed blocks of data that are not duplicates of stored data.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the system is further configured to perform the step of:<claim-text>sending, from a process that has received a hashed block of data to a remote data store, one or more portions of the block of data, wherein the one or more portions of the block of data correspond to one or more transactions.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the one or more transactions are recorded within a transaction log for the process, and wherein each process among the cluster of nodes generates a transaction log corresponding to data sent to the remote data store.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the front-end process receives the stream of bytes of data from a client device via a communication interface that is compatible with a communication interface provided by the object store.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the remote data store is an object store provided by a cloud services provider.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A computer program product disposed upon a non-transitory computer readable medium, the computer program product comprising computer program instructions that, when executed, cause a computer to carry out the steps of:<claim-text>initiating, by two or more nodes among a cluster of nodes, a leadership transition, wherein:<claim-text>a first node transmits a first secret key identifier to each of the other nodes in the cluster of nodes; and</claim-text><claim-text>a second node transmits a second secret key identifier to each of the other nodes in the cluster of nodes;</claim-text></claim-text><claim-text>updating, by each node and based at least in part on a resolution policy, the current secret key identifier to be the second secret key identifier instead of the first secret key identifier; and</claim-text><claim-text>transitioning, based at least in part on the second secret key identifier being selected to be the current secret key identifier, the second node to be a leader node of the cluster of nodes.</claim-text></claim-text></claim></claims></us-patent-application>