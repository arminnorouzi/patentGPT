<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004706A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004706</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17942985</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>106</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>131</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>137</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>106</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>131</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>137</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Device Dependent Rendering of PDF Content Including Multiple Articles and a Table of Contents</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17340511</doc-number><date>20210607</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11449663</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17942985</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17099449</doc-number><date>20201116</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11030387</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17340511</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Issuu, Inc.</orgname><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>JUHL</last-name><first-name>Erik Allan</first-name><address><city>K&#xf8;benhavn</city><country>DK</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>FUGMANN</last-name><first-name>Anders Peter</first-name><address><city>V&#xe6;rl&#xf8;se</city><country>DK</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Issuu, Inc.</orgname><role>02</role><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The technology disclosed relates to systems and methods for device-dependent display of an article from a PDF file that has multiple articles and a table of contents to the articles. The system can use a library to render the article from the PDF file. The rendering can include bounding boxes positioned at on-page coordinates that can include one or more images and multiple text blocks of glyphs. The system can detect at least one table in the PDF file that includes pages numbers and multiple columns. The system includes logic to partition a contiguous sequence of text representing the table into text blocks of entries and columns. The system includes logic to merge multiple text blocks that align horizontally with a single page number into a single text block. Table of contents is displayed in a device-dependent format including the entries from the merged text blocks.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="227.33mm" wi="153.75mm" file="US20230004706A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="218.19mm" wi="171.20mm" orientation="landscape" file="US20230004706A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="186.61mm" wi="146.30mm" orientation="landscape" file="US20230004706A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="245.19mm" wi="155.87mm" file="US20230004706A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="234.61mm" wi="122.85mm" file="US20230004706A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="243.08mm" wi="159.34mm" file="US20230004706A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="244.18mm" wi="136.57mm" file="US20230004706A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="239.52mm" wi="140.29mm" file="US20230004706A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="243.92mm" wi="140.97mm" file="US20230004706A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="242.49mm" wi="137.16mm" file="US20230004706A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="237.83mm" wi="147.91mm" file="US20230004706A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="234.19mm" wi="105.33mm" file="US20230004706A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="235.88mm" wi="144.19mm" orientation="landscape" file="US20230004706A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="220.39mm" wi="123.61mm" file="US20230004706A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="235.37mm" wi="166.37mm" orientation="landscape" file="US20230004706A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="226.23mm" wi="131.74mm" orientation="landscape" file="US20230004706A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="234.19mm" wi="106.93mm" file="US20230004706A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="172.13mm" wi="169.50mm" orientation="landscape" file="US20230004706A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">PRIORITY APPLICATION</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 17/340,511, entitled &#x201c;DEVICE DEPENDENT RENDERING OF PDF CONTENT INCLUDING MULTIPLE ARTICLES AND A TABLE OF CONTENTS,&#x201d; filed Jun. 7, 2021 (Attorney Docket No. ISSU 1007-2), which is a continuation of U.S. patent application Ser. No. 17/099,449, entitled &#x201c;DEVICE DEPENDENT RENDERING OF PDF CONTENT INCLUDING MULTIPLE ARTICLES AND A TABLE OF CONTENTS,&#x201d; filed Nov. 16, 2020 (Attorney Docket No. ISSU 1007-1), issued as U.S. Pat. No. 11,030,387 on Jun. 8, 2021. The non-provisional applications are incorporated by reference for all purposes.</p><heading id="h-0002" level="1">RELATED APPLICATIONS</heading><p id="p-0003" num="0002">This application is related to U.S. patent application Ser. No. 17/099,441, titled &#x201c;DEVICE DEPENDENT RENDERING OF PDF CONTENT&#x201d; (Attorney Docket No. ISSU 1006-1), filed Nov. 16, 2020, now issued as U.S. Pat. No. 11,416,671 on Aug. 16, 2022, which is incorporated by reference herein for all purposes.</p><p id="p-0004" num="0003">This application is related to U.S. patent application Ser. No. 17/888,367, titled &#x201c;DEVICE DEPENDENT RENDERING OF PDF CONTENT&#x201d; (Attorney Docket No. ISSU 1006-2), filed Aug. 15, 2022, which is incorporated by reference herein for all purposes.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0003" level="1">FIELD OF THE TECHNOLOGY DISCLOSED</heading><p id="p-0005" num="0004">The technology disclosed relates to automatically adapting content of PDF files from a print format to displays of small-format devices.</p><heading id="h-0004" level="1">BACKGROUND</heading><p id="p-0006" num="0005">The subject matter discussed in this section should not be assumed to be prior art merely as a result of its mention in this section. Similarly, a problem mentioned in this section or associated with the subject matter provided as background should not be assumed to have been previously recognized in the prior art. The subject matter in this section merely represents different approaches, which in and of themselves can also correspond to implementations of the claimed technology.</p><p id="p-0007" num="0006">With the rise of electronic publishing, more and more readers are viewing published documents such as magazines, newspapers, catalogs, brochures, trade and scientific journal and the like on electronic devices. These documents are generally made available to electronic publishers as portable document format (PDF) files and are formatted for print rather than viewing on electronic devices. Navigation in an electronic document described in a PDF file can be cumbersome, particularly on an electronic or computing device having a small screen such as a mobile phone or a small tablet. The PDF files can be prepared using a variety of software tools. Many of these tools do not provide additional information about the content in the PDF file that can be easily extracted and used for displaying the content of files on computing devices with small display screens. Therefore, the articles are displayed on computing devices with small screen using the page-oriented format which is not suitable for reading magazine articles on small format displays.</p><p id="p-0008" num="0007">An opportunity arises to automatically translate content of an article from a PDF file for display on computing devices with small display screens upon accessing of the PDF file by the small-format device.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a block diagram of an example environment for automatically adapting content of PDF files from a print format to displays of small-format devices.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b></figref> presents high-level components of the system to generate article stories and Table of Contents (TOC) from content of PDF files for display on small-format devices.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>3</b></figref> presents examples of bounding boxes on a page of a PDF file containing an image and text boxes of glyphs.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIGS. <b>4</b>A, <b>4</b>B, <b>4</b>C, <b>4</b>D, <b>4</b>E, <b>4</b>F and <b>4</b>G</figref> present examples of information about images and text blocks in bounding boxes in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>5</b></figref> presents a flowchart of process steps to generate article stories from a PDF files.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIGS. <b>6</b>A and <b>6</b>B</figref> present examples of pages in a PDF file including a Table of Contents.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref> presents an example tree data structure created by the system after parsing a Table of Contents.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>7</b>B</figref> presents examples of Table of Content entries generated from the tree data structure of <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>8</b></figref> presents a process flowchart including process steps for creating a Table of Contents for device-dependent display from a PDF file.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>9</b></figref> presents an example computer system implementing the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0019" num="0018">The following discussion is presented to enable any person skilled in the art to make and use the technology disclosed, and is provided in the context of a particular application and its requirements. Various modifications to the disclosed implementations will be readily apparent to those skilled in the art, and the general principles defined herein may be applied to other implementations and applications without departing from the spirit and scope of the technology disclosed. Thus, the technology disclosed is not intended to be limited to the implementations shown, but is to be accorded the widest scope consistent with the principles and features disclosed herein.</p><heading id="h-0007" level="1">Introduction</heading><p id="p-0020" num="0019">Portable document format (or PDF) is a standardized, widely used file format to present documents including text and images. PDF file format is popular for presenting magazines, articles, product brochures or flyers in which publishers want to preserve graphic appearance of content. PDF files are page oriented and are suitable for viewing on relatively larger screen sizes such as desktop or laptop computers, tablets, etc. With popularity of mobile computing devices such as smart phones, many readers are viewing PDF files on their mobile computing devices. Such devices have smaller display screens. The pages of PDF files often appear with very small font sizes on displays of mobile devices and are not suitable for reading magazine articles.</p><p id="p-0021" num="0020">To improve readability on small format displays, Adobe&#x2122; supports the open source EPUB file format as an alternative to PDF files. Adobe's InDesign product provides a variety of format controls suitable for electronic publishing. See, e.g., &#x3c;https://www.shutterstock.com/blog/tips-creating-ebooks-epubs-indesign&#x3e; for a beginner's guide to using InDesign to prepare EPUB files. Alternatively, PDFs can initially be designed for a cell phone format, using a PDF page template. However, this does not convert a PDF of a magazine, for instance, with a multi-column print format intent, into a format suitable for a cell phone.</p><p id="p-0022" num="0021">To help authors modify content, Microsoft&#x2122; added a PDF reflow feature that imports PDF files into MS Word&#x2122; for editing. A Word formatted file can readily be edited and page size revised. This again is an authoring process, not a reader's tool.</p><p id="p-0023" num="0022">The technology disclosed addresses the above-mentioned challenges in adapting the content of PDF files from a print format to a mobile format automatically, without relying on authoring tools or requiring style metadata such as tags or markers inserted into the PDF file during file creation. A PDF file of interest can be translated in real time, using local resources, for device-dependent display on a small-format device. Translation can be initiated upon accessing of a PDF file by the small format device.</p><p id="p-0024" num="0023">Rendering a PDF for display, either printed publication or on graphic display, is complex and a moving target, as PDF versions progress. The technology disclosed relies on a third-party library to render a PDF file, effectively translating it from what we call a PDF domain to a rendered glyph domain. In the rendered glyph domain, PDF codes are rendered into objects including bounding boxes that locate glyphs and images on pages. Examples appear in the figures. Glyphs are accompanied by font information. The rendered objects in the rendered glyph domain are insensitive to the original version of the PDF file and to the authoring tool used. The technology disclosed applies paragraph consolidation, semantic analysis of text and image elements, read ordering, and reflow to produce a device-dependent format suitable for small screens. It automatically translates content from the rendered glyph domain to a so-called small-format reflow domain, which can include images in an ordered reading reflow.</p><p id="p-0025" num="0024">Successful translation from the rendered glyph domain to the small-format reflow domain, for display on small format devices, includes arranging elements from the glyph domain in a correct reading order. Columns can be recognized by so-called valleys that separate them. Elements that confuse ordering among text boxes, such as pull out quotes and images, can be removed for flow purposes and an article can be reflowed into a reading order. Taking into account the reading order, adjoining and consecutive text boxes are consolidated (and may be split) to form paragraphs, based on analysis of text elements in adjoining or successive text boxes. The technology disclosed labels the paragraphs by their typographical role, such as headline text, subtitle text, body text, byline text, image attribution text, and image caption text. Some bounding boxes are self-identified as holding images. We refer to content after at least these actions as translated into the small-format reflow domain. In this domain, changes are made to appearance, page layout or line breaks of text from an original document to a revised version. It is important to assure that no material (including graphics) is inadvertently omitted in the reflow domain by reflowing the text.</p><p id="p-0026" num="0025">A second automated process applies to magazines and longish articles that have a table of contents. A table of contents appears near the front of a PDF file, for instance in the first quarter of the file, by page count. The technology disclosed recognizes a table as the Table of Contents. If there are multiple tables, one can be identified as the Table of Contents. Entries and corresponding page numbers are parsed from content in the rendered glyph domain to advance the Table of Contents into the small-format reflow domain. The technology disclosed links entries in the Table of Contents to offset locations within the PDF at which titles or subtitles are found that match entries in the Table of Contents. Sections of the PDF can be prepared for reading immediately, in the background, for instance, or in response to selection of an entry from a displayed table of contents.</p><p id="p-0027" num="0026">From the small-format reflow domain, the technology disclosed can cause display of content from an article, originally intended for print, on the screen of a small-format device, such as a cell phone. This can be done automatically, using resources of the local, small-format device.</p><heading id="h-0008" level="2">Environment</heading><p id="p-0028" num="0027">We describe a system for device-dependent display of an article from a PDF file. The article in the PDF file can have multiple columns in one or more parts of the article. The PDF file can include magazine articles, product brochures, etc. We refer to the device-dependent display of the article from the PDF file as an article story. The article stories are suitable for viewing on computing devices with small format displays such as smart phones, personal digital assistants, tablets, etc. The system is described with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> showing an architectural level schematic of a system in accordance with an implementation. Because <figref idref="DRAWINGS">FIG. <b>1</b></figref> is an architectural diagram, certain details are intentionally omitted to improve the clarity of the description. The discussion of <figref idref="DRAWINGS">FIG. <b>1</b></figref> is organized as follows. First, the elements of the figure are described, followed by their interconnection. Then, the use of the elements in the system is described in greater detail.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>1</b></figref> includes the system <b>100</b>. This paragraph names labeled parts of system <b>100</b>. The figure illustrates an article story generator <b>131</b>, a table of contents generator <b>151</b>, computing devices <b>180</b>, a publications database <b>115</b>, a semantics database <b>137</b>, an articles database <b>157</b>, and a network(s) <b>155</b>. The computing devices <b>180</b> can include a variety of devices that users of the technology disclosed can use to read PDF files, for example, a desktop computer <b>181</b><i>a</i>, a personal digital assistance <b>181</b><i>b</i>, a smart phone <b>181</b><i>m</i>, etc. The technology disclosed can be used to display content from an article in a PDF file on a variety of computing devices. Examples of computing devices listed above are for illustration purpose and are not intended to cover the entire spectrum of computing devices on which article stories can be displayed using the technology disclosed. The network(s) <b>155</b> couples the computing devices <b>180</b>, the article story generator <b>131</b>, the table of contents generator <b>151</b>, the publications database <b>115</b>, the semantics database <b>137</b>, and the articles database <b>157</b> in communication with each other.</p><p id="p-0030" num="0029">We now refer to <figref idref="DRAWINGS">FIG. <b>1</b></figref> to provide description of components of the system <b>100</b>. The publications database <b>115</b> can include one or more publications published by one or more publishers. The publications can be in the form of electronic documents. The electronic documents can be stored in portable document format (PDF) files. A PDF file can contain one or more articles. The articles can contain text, images, etc. The text can be arranged multiple columns.</p><p id="p-0031" num="0030">The article story generator <b>131</b> can access the publications data via the network(s) <b>155</b> and receive an electronic publication document stored in the publications database <b>115</b>. The article generator <b>151</b> includes logic to use a third-party library such as PDFium (available at &#x3c;pdfium.googlesource.com/pdfium/&#x3e;) to render an article in a PDF file into the rendered glyph domain. This can result in rendering of bounding boxes positioned at on-page coordinates. The bounding boxes can contain text blocks of glyphs and images. The font information of text in text blocks is also made available by the third-party library. The electronic publication article in the PDF file can include images, text, tables, etc. The text can be organized in paragraphs arranged in one or more columns separated by whitespaces. Articles can have headlines or titles and may contain pull out quotes that span multiple columns.</p><p id="p-0032" num="0031">The article story generator <b>131</b> can set a reading order for the article after rendering the article from the PDF file. The system includes logic to remove text blocks that can confuse the reading order of the article before setting the reading order. Examples of such text blocks include pull out quotes that span multiple columns or have width more than half of the width of the page. The system can remove bounding boxes containing images when setting a reading order for the article. The system can also remove headers and footers in the article from PDF file by locating text residing in the top or bottom page margins.</p><p id="p-0033" num="0032">Paragraphs of text are formed by merging or splitting text blocks as they appear in the reading order. The system can use information about starting and ending positions of horizontally arranged text elements to delimit the paragraphs. For example, if the starting position of the text block starts after alignment of other vertically arranged text blocks, then it can identify starting of a paragraph. Similarly, if the last text block in a horizontal line of text blocks ends before other text blocks that are positioned vertically above then it can indicate ending of a paragraph. Other information, such as capitalization, drop cap letters, etc. can be utilized for delimitation of paragraphs of texts.</p><p id="p-0034" num="0033">The third-party library does not provide contextual and semantic information about text blocks in the bounding boxes. Without the semantic information, it is difficult to translate the article in a device-dependent form. The article story generator <b>131</b> can infer semantic information about typographic roles of paragraphs in the article. The semantic information can be used to label the paragraphs by their typographical role such as headline text, subtitle text, body text, byline text, image attribution text, image caption text, etc. Some other bounding boxes are self-identified as holding images. The system can then use the above information to display the article from PDF file in a device-dependent formation. We refer to the content after the above actions as translated into small-format reflow domain. The article story in small-format reflow domain can be displayed for convenient reading on a computing device with a small display such as a smart phone.</p><p id="p-0035" num="0034">Magazines with multiple articles and long articles can have table of contents to the articles or sections within an article. The table of contents generator <b>151</b> includes logic to automatically process magazines and articles that have table of contents. An article can have one or more tables. The technology disclosed can recognize a table as the Table of Contents (TOC). Entries and corresponding page numbers are parsed from content in the rendered glyph domain to create table of contents in small-format reflow domain. The system includes logic to validate table of contents by detecting the headlines or titles of articles in the body of the PDF file which appear in an order in both the table of contents and the PDF file. The system can link entries in the table of contents to offset locations within the PDF at which titles or subtitles are found that match entries in the table of contents. The system can display an article on the display of the computing device when a user selects an article from the table of contents.</p><p id="p-0036" num="0035">The technology disclosed can label paragraphs and other text elements from the PDF article by their typographical role. The system can store the classification data in the semantics database <b>137</b>. For example, the database can include font information such as font names, font size distributions for headline or title text, body text, byline text, image attribution text, image captions text, etc. The system can store such data per PDF file as well as universally for all PDF files processed by the system. The semantics database is expected to grow as the system processes PDF files for different magazines. The system can update the database as it encounters new PDF files with different font information for a particular type of text. The system can also store additional information such as name of the magazine for which the semantics data applies. As the system encounters a PDF file for a particular magazine, the system can access semantics information for that magazine to annotate text paragraphs or other text elements parsed from the PDF file.</p><p id="p-0037" num="0036">The article can be viewed or read on different types of computing devices <b>180</b> as presented in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The articles generated by the article generator <b>131</b> can be stored in the articles database <b>157</b>. The system can also store table of contents in the articles in database <b>157</b>. The articles database can be organized per magazine, per publisher, etc.</p><p id="p-0038" num="0037">Completing the description of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the components of the system <b>100</b>, described above, are all coupled in communication with the network(s) <b>155</b>. The actual communication path can be point-to-point over public and/or private networks. The communications can occur over a variety of networks, e.g., private networks, VPN, MPLS circuit, or Internet, and can use appropriate application programming interfaces (APIs) and data interchange formats, e.g., Representational State Transfer (REST), JavaScript Object Notation (JSON), Extensible Markup Language (XML), Simple Object Access Protocol (SOAP), Java Message Service (JMS), and/or Java Platform Module System. All of the communications can be encrypted. The communication is generally over a network such as the LAN (local area network), WAN (wide area network), telephone network (Public Switched Telephone Network (PSTN), Session Initiation Protocol (SIP), wireless network, point-to-point network, star network, token ring network, hub network, Internet, inclusive of the mobile Internet, via protocols such as EDGE, 3G, 4G LTE, Wi-Fi and WiMAX. The engines or system components of <figref idref="DRAWINGS">FIG. <b>1</b></figref> are implemented by software running on varying types of computing devices. Example devices are a workstation, a server, a computing cluster, a blade server, and a server farm. Additionally, a variety of authorization and authentication techniques, such as username/password, Open Authorization (OAuth), Kerberos, Secured, digital certificates and more, can be used to secure the communications.</p><heading id="h-0009" level="2">System Components</heading><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>2</b></figref> presents high level components of the article story generator <b>131</b> and table of contents generator <b>151</b>. The article story generator <b>131</b> comprises of a glyphs generator <b>233</b>, a reading order setter <b>253</b> and an annotator <b>273</b>. The table of contents generator <b>151</b> comprises of a table detector <b>238</b>, a table of contents entry generator <b>258</b>, and a scorer <b>278</b>. The illustrated components can be further merged or separated when implemented. We now present details of the logic implemented by the components of article story generator <b>131</b> and table of contents generator <b>151</b>.</p><heading id="h-0010" level="2">Article Story Generator</heading><p id="p-0040" num="0039">The article story generator implements logic to adapt content of PDF files from a print format to a mobile format. The system can perform this adaptation automatically without relying on authoring tools or requiring style metadata such as tags or markers inserted into the PDF file during file creation. The components of article story generator including the glyph generator <b>233</b>, the reading order setter <b>253</b> and the annotator <b>273</b> implement logic to translate the PDF file from print format to device-dependent display on small format device in real time using local resources. In the following sections, we present details of the components of article story generator <b>131</b>.</p><p id="p-0041" num="0040">Glyphs Generator</p><p id="p-0042" num="0041">The glyphs generator <b>233</b> can use a third-party library to render the article from PDF file. In one implementation, the glyphs generator <b>233</b> can use a third-party library PDFium (available at &#x3c;pdfium.googlesource.com/pdfium/&#x3e;) to render an article in a PDF file into the rendered glyph domain. PDFium provides several API functions that can be accessed to render PDF file, get page related information, get font related information, perform text extraction from PDF file, access objects in the PDF file, etc. In addition, PDFium provides PDF file edit, security related features.</p><p id="p-0043" num="0042">The glyphs generator accesses the PDFium library to translate it from what we call a PDF domain to a rendered glyph domain. In the rendered glyph domain, PDF codes are rendered into objects including bounding boxes that locate glyphs and images on pages of the PDF file. The glyphs are accompanied by font information of text characters. In <figref idref="DRAWINGS">FIGS. <b>4</b>A to <b>4</b>G</figref> we present various examples of the type of information that is available for text blocks and images in the bounding boxes. This translation of content in PDF file from PDF domain to rendered glyph domain does not require markers, tags, or other information about the content of the PDF file. The translation process is also independent of the authoring tool used to create the PDF.</p><p id="p-0044" num="0043">Reading Order Setter</p><p id="p-0045" num="0044">The reading order setter <b>253</b> includes logic to arrange elements from the glyph domain in a correct reading order in a virtual rendering domain. The reading order setter includes logic to recognize columns in the article by so-called valleys that separate them. The reading order setter can remove elements that can confuse reading order, for example, pull out quotes that can span more than half of the width of the page as well as images and headers and footers in page margins. The system can use existing techniques to determine a reading order. For example, by applying XY-cut method by Nagy and Seth <b>1984</b>, published in their paper entitled, &#x201c;Hierarchical representation of optically scanned documents&#x201d;. The XY-cut method includes finding a widest empty rectangle or valley entirely crossing the page vertically or horizontally. The method applies recursively to each block on the page. It stops when no large-enough valley can be found in any of the created blocks, resulting in the final segments or blocks.</p><p id="p-0046" num="0045">The hierarchy of blocks generated by XY-cut method can be used to determine a reading order among the blocks. For example, for a western conventional top-bottom left-to-right reading order, ordering the block hierarchy of blocks in a top-bottom left-to-right way leads to the expected reading order (Ishitani 2003, &#x201c;Document Transformation System from Papers to XML Data Based on Pivot XML Document Method&#x201d;).</p><p id="p-0047" num="0046">The existing techniques such as mentioned above can incorrectly split elements of the articles in some cases. For example, a headline of an article is usually printed in large font size. A long headline can wrap in multiple horizontal lines of text. As the size of font is large, the spacing between horizontally positioned lines of headline text can be large as compared to horizontally positioned lines of body text. A same threshold value for partitioning the body text and headline text can result in splitting of headline text in multiple segments when XY-cut method is applied. The technology disclosed uses dynamically adjusted valleys by increasing a threshold for valley width when detecting a valley separating characters of larger font sizes.</p><p id="p-0048" num="0047">The magazine articles usually present text arranged as columns of text. Therefore, the technology disclosed also includes logic to use dynamically adjusted valleys between columns of text blocks. The valley sizes between columns can be adjusted according to the font information for the glyphs in adjoining text blocks to correctly detect text blocks in different columns. The above operations result in a first reading order of text blocks in the article.</p><p id="p-0049" num="0048">The reading order setter <b>253</b> also includes logic to merge or split blocks of text arranged in columns to form paragraphs of text. As used herein, the term &#x201c;paragraph&#x201d; or &#x201c;text passage&#x201d; means a sequence of characters. Typically, the characters in the text paragraph includes one or more sentences, and a &#x201c;sentence&#x201d; includes one or more words, plus spaces and punctuation. The system can identify a sentence, for example, by looking for a sequence of words that starts with a capitalized first letter and ends with a period. The reading order setter can consolidate, or split adjoining and consecutive text blocks based on analysis of text elements in adjoining or successive text blocks (or bounding boxes). By examining the text position in each column, the system can derive the column justification, i.e., left, right, centered or left/right. The system can use this information to interpret the indentations or short lines as paragraph break indicators. The system can then split large blocks of text into more than one paragraph if the text block contains multiple indented lines and text line with length shorter than the width of the column. The system can also use other information such as drop caps to detect start of paragraphs. The system may also combine text blocks to form a paragraph using the above paragraph delimiters.</p><p id="p-0050" num="0049">The technology disclosed can further improve the first reading order determined by applying the XY-cut with dynamically adjusted valley sizes to text blocks in each column after text blocks are arranged to form paragraphs. The system can also remove other elements that are not aligned in columns of text determined by the first reading order. For example, the header and footers or pull out quotes can be removed if they are not already removed when determining the first reading order. The headers and footers are usually positioned in top or bottom page margins. The second iteration can result in a refined reading order of text blocks in the body of the article. Finally, the system can reinsert the elements removed from the article in the above process. For example, the pull out quotes and images can be reinserted in the article.</p><p id="p-0051" num="0050">Annotator</p><p id="p-0052" num="0051">The annotator <b>273</b> includes logic to label the paragraphs and other text blocks from the reading order setter <b>253</b> with their typographical role. Examples of typographical roles include headline text, subtitle text, body text, byline text, image attribution text, and image caption text. Additional typographical roles can be identified by the system if the article includes such elements. The annotator can use font information for sequence of glyphs to infer the semantic information about typographical roles. The font information can include font name, font size distribution or other information about the glyphs. The system can use additional information about text characters and fonts such as character offsets, character advances, font ascent, font descent, font height, font width, lower case or upper case characters, etc. to infer semantic information about typographical roles of the paragraphs in the text blocks.</p><heading id="h-0011" level="2">Table of Contents Generator</heading><p id="p-0053" num="0052">The table of contents generator <b>151</b> implements logic to automatically process PDF files that contain magazines or longish articles that have table of contents. The table of contents generator <b>151</b> includes logic to identify entries in the table of contents and corresponding page numbers from the content in the rendered glyph domain. This information is processed to translate table of contents from PDF domain to small-format reflow domain. The table of contents generator <b>151</b> includes a table detector <b>238</b>, a table of contents entry generator <b>258</b>, and a scorer <b>278</b>. We present details of these components in the following sections.</p><p id="p-0054" num="0053">Table Detector</p><p id="p-0055" num="0054">The table detector <b>238</b> can detect a table in a magazine or an article in the PDF file. The table includes the logic to detect text blocks arranged in rows and columns. A magazine or an article can have multiple tables. The system includes logic to detect tables that can be candidates for the table of contents of the magazine or the article. The table of contents can have entries for the titles or subtitles. The entries can have corresponding page numbers in the PDF file on which these titles and subtitles appear. The page numbers can be listed on left hand column or right hand column of the table. The system can parse entries and corresponding page numbers from the tables in the PDF file. If there are multiple tables, the system can parse the above information from all tables.</p><p id="p-0056" num="0055">Table of Contents Entry Generator</p><p id="p-0057" num="0056">The table of contents entry generator <b>258</b> includes logic to form entries of the table of contents by merging text blocks that can appear in multiple lines of text. The system can merge multiple vertically adjoining text block that align horizontally with a single page number into a single text block for an entry in the table of contents. The system can validate table of contents by detecting in a body of the PDF file a plurality of headlines of articles which appear in an order in both the table of contents and the PDF file. The table of contents entry generator can detect mismatch between a particular entry in the table of contents and an article title in the body of the PDF file. The mismatch can happen when the article title includes more or less words than the particular entry in the table of contents. When a mismatch is detected, the table of contents entry generator can merge the particular entry with an adjoining entry or split the particular entry in the table of contents to match the article title.</p><p id="p-0058" num="0057">The table of contents entry generator can also detect that a table of contents that spans multiple pages in the PDF. The system can use the font information to distinguish table of contents entries from other text that can appear on the same pages such as header and footer or page number in the top and bottom page margins. The system can ignore the above-mentioned text elements and merge the entries on multiple pages to form the table of contents.</p><p id="p-0059" num="0058">Scorer</p><p id="p-0060" num="0059">The system can detect and parse multiple tables in the PDF file if they appear in the PDF file. The scorer <b>278</b> includes the logic to score each candidate for the table of contents. The scorer <b>278</b> can assign scores to candidates based on detecting in the body of the PDF file the multiple headlines of articles in the order in which the multiple headlines appear in the candidate. The candidate table with the highest score can be selected as the table of contents.</p><heading id="h-0012" level="2">Example of Processing an Article for Device-Dependent Display</heading><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>3</b></figref> presents an example page <b>300</b> of an article from a PDF file. The figure illustrates seven bounding boxes labeled as <b>1</b>, <b>2</b>, <b>3</b>, <b>4</b>, <b>5</b>, <b>6</b>, and <b>7</b>. The bounding boxes are obtained when the page is processed by the PDFium library. Note that only seven bounding boxes are shown for illustration purposes to explain the processing steps to display the article in a device-dependent format. The information for each bounding box is presented in the following figures. The bounding boxes can contain one or more images or text blocks of glyphs.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> presents the information <b>401</b> for element <b>1</b> in the bounding box <b>1</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The information is organized in various groups and subgroups including geometry <b>403</b>, box <b>405</b>, text_block <b>407</b>, and font_info <b>409</b>. The box, text_block, and font_info information is organized as subgroups of geometry group. The box subgroup <b>405</b> presents on-page coordinates of the bounding box <b>1</b>. The text_block <b>407</b> presents the text &#x201c;On Cats&#x201d; positioned in the text block. The text_block includes character offsets for each of the seven characters in the text block. The offset can indicate position of the character from the starting position of the text block e.g., starting from the left boundary of the bounding box. The text_block also presents char_advances for each of the seven characters in the text block. The text_block includes font information for the text which is presented in the font_info subgroup. The font_info includes font name of the font, size, ascent, descent, width, and height of font used in the bounding box. The subgroups lowercase_char and uppercase_char present information about the lower case and upper case characters in the font.</p><p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> presents the information <b>411</b> for the element <b>2</b> in bounding box <b>2</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. This is a textual element as in bounding box <b>1</b>. The bounding box <b>2</b> includes a drop cap character &#x201c;L&#x201d; which is the first character in the article. Therefore, this character is the first letter of the text paragraph that follows. As we can see, the PDFium library does not provide this context about the character in the bounding box. The technology disclosed includes logic to link the drop cap letter with the text in the bounding box that follows in <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>. The illustration <b>421</b> presents information regarding element <b>3</b> in bounding box <b>3</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The text &#x201c;orem&#x201d; in this bounding box is a continuation of the drop cap letter &#x201c;L&#x201d; in the previous bounding box but this link is not provided by the parsing library. The technology disclosed includes logic to merge the two bounding boxes to form a text block representing a word in the article.</p><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>4</b>D</figref> includes an illustration <b>431</b> listing the information regarding element <b>4</b> in the bounding box <b>4</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The bounding box <b>4</b> contains text &#x201c;ipsum&#x201d; and represents a complete word. Note, the information provided by the library does not indicate the paragraph information for this bounding box. Therefore, there is no information that indicates which paragraph this word belongs to. The technology disclosed includes logic to determine the starting and ending positions of paragraphs in the article. These delimiters are then used to combine one or more text blocks or bounding boxes to form a paragraph.</p><p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. <b>4</b>E</figref> presents an illustration <b>441</b> for element <b>5</b> in the bounding box <b>5</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. As we can see the text character &#x201c;do&#x201d; in this bounding box are part of the word that has been split into two bounding boxes by the PDF parsing library. <figref idref="DRAWINGS">FIG. <b>4</b>F</figref> presents an illustration <b>451</b> for element <b>6</b> in bounding box <b>6</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. This bounding box contains the last portion of word for which the first two characters are presented in the previous bounding box. The bounding box <b>6</b> also contains the following word. As we can see the PDF parsing library can incorrectly split and merge characters from neighboring words or paragraphs. <figref idref="DRAWINGS">FIG. <b>4</b>G</figref> presents information in illustration <b>461</b> regarding element <b>7</b> in bounding box <b>7</b>. This bounding box contains an image. The coordinates for the image are presented in &#x201c;box&#x201d; group labeled as <b>405</b>. The image information is presented in image_block <b>421</b> including the width and height of the image.</p><p id="p-0066" num="0000">Processing Steps for Translating an Article from PDF for Device-Dependent Display</p><p id="p-0067" num="0065"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart or flow diagram illustrating process steps for translating an article in a PDF file to a device-device display format. The flowchart illustrates logic executed by the client computing devices using local resources or the logic executed by the server or both. The logic can be implemented using processors programmed using computer programs stored in memory accessible to the computer systems and executable by the processors, by dedicated logic hardware, including field programmable integrated circuits, and by combinations of dedicated logic hardware and computer programs. As with all flowcharts herein, it will be appreciated that many of the steps can be combined, performed in parallel or performed in a different sequence without affecting the functions achieved. In some cases, as the reader will appreciate, a re-arrangement of steps will achieve the same results only if certain other changes are made as well. In other cases, as the reader will appreciate, a re-arrangement of steps will achieve the same results only if certain conditions are satisfied. Furthermore, it will be appreciated that the flowcharts herein show only steps that are pertinent to an understanding of the invention, and it will be understood that numerous additional steps for accomplishing other functions can be performed before, after and between those shown.</p><p id="p-0068" num="0066">The process starts at a step <b>501</b>. The system uses a library at a step <b>505</b> to generate bounding boxes containing one or more images or text block of glyphs. The bounding boxes are positioned at on-page coordinates as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. At a step <b>507</b> the system can partition text blocks and images into two or more columns using dynamically adjusted valley or whitespaces between columns. The system can set a first reading order of the article after removing pull quotes that span more than half of the width of the page (step <b>509</b>). The system can use logic to merge text blocks into paragraphs using starting and ending indicators. For example, the starting line can be indented, and the ending line can be shorter than other lines in the paragraph (step <b>511</b>). In some cases, the text blocks may be split when forming paragraphs of text. The system can then label text blocks with inferred semantic information about typographical roles of the paragraphs in the merged text blocks (step <b>513</b>). Finally, the system can display the article by using the text blocks and images using the reading order determined above and the semantic information. The article <b>517</b> is referred to as translated into a so-called small format reflow domain which is device-dependent and easy to read on devices with small displays.</p><heading id="h-0013" level="2">Table of Contents&#x2014;Detection and Display</heading><p id="p-0069" num="0067">The technology disclosed includes a second automated process that applies to magazines and articles that have table of contents. A table of contents can appear near the front of the PDF file. The technology disclosed can recognize a table in a magazine or an article as a table of contents. <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> presents first three pages of an example magazine from a PDF file. The first page <b>601</b> is a cover page and may contain title of the magazine and related information. The first page is numbered as &#x201c;I&#x201d;. The second page <b>611</b> is a table of contents and is labeled with a page number &#x201c;II&#x201d;. The third page <b>621</b> is a first page of the first article in the magazine. The page <b>621</b> is labeled with a page number &#x201c;1&#x201d;. The calculated offset for all table of contents entries is 2. For example, the first article &#x201c;Introduction&#x201d; starts at a page number &#x201c;1&#x201d; which is natural page number &#x201c;3&#x201d; (i.e., 1+2). Therefore, the article starts at natural page number &#x201c;3&#x201d; in the PDF file. The system can calculate natural page numbers for all articles in the table contents and use these to access the articles in the magazine in response to a selection.</p><p id="p-0070" num="0068"><figref idref="DRAWINGS">FIG. <b>6</b>B</figref> presents the table contents <b>611</b>. The table of contents consists of entries for articles in the magazine. An entry can consist of multiple lines of text as shown in <figref idref="DRAWINGS">FIG. <b>6</b>B</figref>. Multiple lines of text for each entry align with one page number in the right hand column of the table of contents. For example, the first article &#x201c;Introduction&#x201d; starts at page &#x201c;1&#x201d; which is natural page &#x201c;3&#x201d; in the PDF file as shown in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>. The entry for the first article includes additional lines of text below the headline as shown in <figref idref="DRAWINGS">FIG. <b>6</b>B</figref>. The technology disclosed includes logic to detect a table that includes page numbers and multiple columns. The page numbers can be positioned in the right hand or left hand column of the table.</p><p id="p-0071" num="0069"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref> presents an example tree data structure that can be created by the technology disclosed for the table of contents shown in <figref idref="DRAWINGS">FIG. <b>6</b>B</figref>. The tree data structure can be created by applying the library to render the article from the PDF file as described above. This can result in bounding boxes that contain multiple text blocks of glyphs with font information for the glyphs. The system can then detect a table and partition a contiguous sequence of text representing the table into text blocks of entries and columns. The system can then merge multiple vertically adjoining text blocks that align horizontally with a single page number into a single text block for an entry in the table of contents. In one implementation, the system can generate the table of contents (TOC) entries using the following algorithm which is presented using the example in <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>.</p><p id="p-0072" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="14pt" align="left"/><colspec colname="2" colwidth="266pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2002;1.</entry><entry>Find &#x201c;7&#x201d; (labeled 711)</entry></row><row><entry>&#x2002;2.</entry><entry>Merge &#x201c;Conclusion&#x201d; (labeled 713) and &#x201c;7&#x201d; &#x2212;&#x3e; TOC entry { title: &#x201c;Conclusion&#x201d;; page: 7 }</entry></row><row><entry>&#x2002;3.</entry><entry>Merge &#x2018;TOC entry { title: &#x201c;Conclusion&#x201d;; page: 7 }&#x2019; and &#x201c;a conclusion of the findings&#x201d;</entry></row><row><entry/><entry>(labeled 715) &#x2212;&#x3e; Toc entry { title: &#x201c;Conclusion&#x201d;; page: 7, description: &#x201c;A conclusion over</entry></row><row><entry/><entry>the findings&#x201d; }</entry></row><row><entry>&#x2002;4.</entry><entry>Find &#x201c;4&#x201d; (labeled 717)</entry></row><row><entry>&#x2002;5.</entry><entry>Merge &#x201c;Algorithm&#x201d; (labeled 719) and &#x201c;4&#x201d; &#x2212;&#x3e; TOC entry { title: &#x201c;Algorithm&#x201d;; page: 4 }</entry></row><row><entry>&#x2002;6.</entry><entry>Merge &#x201c;a description of the algorithm&#x201d; (labeled 721) with TOC entry { title:</entry></row><row><entry/><entry>&#x201c;Algorithm&#x201d;; page: 4 } &#x2212;&#x3e; TOC entry { title: &#x201c;Algorithm&#x201d;; page: 4; description: &#x201c;a</entry></row><row><entry/><entry>description of the algorithm&#x201d;}</entry></row><row><entry>&#x2002;7.</entry><entry>Merge TOC entry { title: &#x201c;Algorithm&#x201d;... } and Toc entry { title: &#x201c;Conclusion&#x201d; ... } &#x2212;&#x3e; [</entry></row><row><entry/><entry>Toc entry { title: &#x201c;Algorithm&#x201d;... }, Toc entry { title: &#x201c;Conclusion&#x201d; ... } ]</entry></row><row><entry>&#x2002;8.</entry><entry>Find &#x201c;1&#x201d; (labeled 723)</entry></row><row><entry>&#x2002;9.</entry><entry>Merge &#x201c;introduction&#x201d; (labeled 725)</entry></row><row><entry>10.</entry><entry>Merge &#x201c;this is a brief introduction&#x201d; (labeled 727) &#x2212;&#x3e; Toc entry { title: &#x201c;Introduction&#x201d;;</entry></row><row><entry/><entry>page: 1; description &#x201c;this is a brief introduction&#x201d; }</entry></row><row><entry>11.</entry><entry>Merge TOC entry { title: &#x201c;Introduction&#x201d;; page: 1; description &#x201c;this is a brief introduction&#x201d;</entry></row><row><entry/><entry>} and [ TOC entry { title: &#x201c;Algorithm&#x201d;... }, TOC entry { title: &#x201c;Conclusion&#x201d; ... } ] &#x2212;&#x3e; [</entry></row><row><entry/><entry>TOC entry { title: &#x201c;Introduction&#x201d;; ...}; TOC entry { title: &#x201c;Algorithm&#x201d;... }, TOC entry {</entry></row><row><entry/><entry>title: &#x201c;Conclusion&#x201d; ... } ]</entry></row><row><entry>12.</entry><entry>No further merging can be done, as no more page numbers exist.</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0073" num="0070"><figref idref="DRAWINGS">FIG. <b>7</b>B</figref> presents the three table of contents entries in a box <b>751</b>, generated by the above described algorithm. Each table of contents entry includes the title, page, and description parts. The system can add the offset to the page numbers from the table of contents when accessing the requested article. The above algorithm uses partitioning and merging actions described earlier. After the partitioning and merging, the system can validate the table of contents by detecting in a body of the PDF file a plurality of headlines of articles which appear in an order in both the table of contents and the body of the PDF. If there are multiple tables in the PDF file, the system can generate table of contents for each candidate table by applying the partitioning, merging, and validating actions. The system can calculate score for each candidate table of contents based on detecting in the body of the PDF file, the multiple headlines of articles in the order in which the multiple headlines appears in the candidate. The system can select the table of contents from among the candidates using the score.</p><heading id="h-0014" level="2">Processing Steps for Detecting and Displaying Table of Contents</heading><p id="p-0074" num="0071"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart or flow diagram illustrating process steps for detecting and displaying the table of contents. The process starts when a PDF file or PDF document <b>801</b> is accessed by a small format device for display. The technology disclosed includes logic to translate the PDF file of interest in real time, using local resources, for device-dependent display on a small format device. The system can detect tables in the PDF document at a step <b>803</b>. The system can create table of contents for candidate tables at a step <b>805</b>. At a step <b>807</b> the entries are combined or grouped to form a table of contents. If multiple tables are parsed, this step can result in multiple tables of contents. The system calculates a score for each table of contents by matching entries in the table of contents with headlines of articles in the PDF file in the same order as they appear in the table of contents (step <b>809</b>). The table with highest score is selected for display as table contents (step <b>811</b>). The system can calculate offset for each entry in the selected table of contents to determine a natural page number for each article's starting page (step <b>813</b>). The system uses the natural page numbers for accessing the articles in the PDF file when selection is made by a user (step <b>815</b>).</p><p id="p-0075" num="0000">Particular Implementations&#x2014;Device Dependent Display of an Article from PDF File</p><p id="p-0076" num="0072">We describe various implementations of device-dependent display of an article from a PDF file that has multiple columns in at least parts of the article.</p><p id="p-0077" num="0073">The technology disclosed can be practiced as a system, method, or article of manufacture. One or more features of an implementation can be combined with the base implementation. Implementations that are not mutually exclusive are taught to be combinable. One or more features of an implementation can be combined with other implementations. This disclosure periodically reminds the user of these options. Omission from some implementations of recitations that repeat these options should not be taken as limiting the combinations taught in the preceding sections&#x2014;these recitations are hereby incorporated forward by reference into each of the following implementations.</p><p id="p-0078" num="0074">A method implementation of the technology disclosed provides a device-dependent display of an article from a PDF file that has multiple columns in at least parts of the article. The method includes using a library (e.g., PDFium available at &#x3c;pdfium.googlesource.com/pdfium/&#x3e;) to render the article from the PDF file. This includes rendering a plurality of bounding boxes, positioned at on-page coordinates. The bounding boxes can contain one or more images and multiple text blocks of glyphs with font information for the glyphs. The method includes partitioning the text blocks and images into two or more columns and one or more sections of the article using dynamically adjusted valleys between the columns. The sizes of valleys can be adjusted according to the font information for the glyphs in adjoining text blocks. For example, the valley size can be increased for headline text that is printed in larger font size as compared to body text. This avoids splitting of headlines having multiple lines of text in separate partitions or segments. The method includes setting a reading order of the article after rendering. Text blocks that span more than half of a width of a page are pulled out before reading order is determined. Examples such text blocks include pull quotes, or header and footers in page margins. Following this, the method reflows text blocks to produce the reading order.</p><p id="p-0079" num="0075">The method includes merging the text blocks as they appear in the reading order into paragraphs of text using the font information. The method can use starting and ending positions of horizontally arranged text elements in the text blocks to delimit the paragraphs. The method includes inferring semantic information about typographic roles of the paragraph in the merged text blocks from at least the font information. The font information can include font name, font size distribution for sequences of the glyphs, font ascent, font descent, font height, font width. The method includes causing display of the article in a device-dependent format.</p><p id="p-0080" num="0076">This method implementation and other methods disclosed optionally include one or more of the following features. This method can also include features described in connection with systems disclosed. In the interest of conciseness, alternative combinations of method features are not individually enumerated. Features applicable to methods, systems, and articles of manufacture are not repeated for each statutory class set of base features. The reader will understand how features identified in this section can readily be combined with base features in other statutory classes.</p><p id="p-0081" num="0077">These methods, systems and articles of manufacture are efficient enough to run on local resources of a mobile, tablet, handheld or even wearable device. Libraries are available to decode PDF files using local resources. The additional steps required to translate intermediate rendering of a PDF file into a device-dependent format suitable for a display on a handheld device can readily be executed using local resources. The same approach could, of course, be applied using a server or some service that supplies PDF files to a mobile device.</p><p id="p-0082" num="0078">The technology disclosed can use advances and offsets of characters indicating locations of characters in the bounding box for merging and splitting of text blocks and delimiting the paragraphs of text. The method can split some of the text blocks into separate paragraphs of text.</p><p id="p-0083" num="0079">The method includes using variation in vertical spacing between the horizontally arranged text elements during the merging of text blocks into paragraphs.</p><p id="p-0084" num="0080">The method includes inferring the semantic information about the typographic role of the paragraphs such as distinguishing among headline text, subtitle text, body text, byline text, image attribution text, and image caption text. The method includes annotating the paragraphs with the inferred semantic information.</p><p id="p-0085" num="0081">The method includes displaying images with the article in display-dependent format.</p><p id="p-0086" num="0082">The method includes dynamically adjusting valleys by increasing the threshold for valley width when detecting a valley separating characters in large font sizes.</p><p id="p-0087" num="0083">Each of the features discussed in this particular implementation section for the one method implementation apply equally to all other method implementation, except where incompatible. As indicated above, all the method features are not repeated in subsequent methods and should be considered repeated by reference.</p><p id="p-0088" num="0084">Other implementations may include a non-transitory computer readable storage medium storing instructions executable by a processor to perform a method as described above. Yet another implementation may include a system including memory and one or more processors operable to execute instructions, stored in the memory, to perform a method as described above.</p><p id="p-0089" num="0085">Computer readable media (CRM) implementations of the technology disclosed include a non-transitory computer readable storage medium impressed with computer program instructions, when executed on a processor, implement the methods described above.</p><p id="p-0090" num="0086">Each of the features discussed in this particular implementation section for the method implementation apply equally to the CRM implementation. As indicated above, all the system features are not repeated here and should be considered repeated by reference.</p><p id="p-0091" num="0087">A system implementation of the technology disclosed includes one or more processors coupled to memory. The memory is loaded with computer instructions to generate a device-dependent display of an article from a PDF file that has multiple columns in at least parts of the article. The system includes logic to access a library (e.g., PDFium available at &#x3c;pdfium.googlesource.com/pdfium/&#x3e;) to render the article from the PDF file. This includes rendering a plurality of bounding boxes, positioned at on-page coordinates. The bounding boxes can contain one or more images and multiple text blocks of glyphs with font information for the glyphs. The system includes logic to partition the text blocks and images into two or more columns and one or more sections of the article using dynamically adjusted valleys between the columns. The sizes of valleys can be adjusted according to the font information for the glyphs in adjoining text blocks. For example, the valley size can be increased for headline text that is printed in larger font size as compared to body text. This avoids splitting of headlines having multiple lines of text in separate partitions or segments. The system can set a reading order of the article after rendering. Text blocks that span more than half of a width of a page are pulled out before reading order is determined. Examples such text blocks include pull quotes, or header and footers in page margins. The system includes logic to reflow text blocks to produce the reading order.</p><p id="p-0092" num="0088">The system includes logic to merge the text blocks as they appear in the reading order into paragraphs of text using the font information. The system includes logic to use the starting and ending positions of horizontally arranged text elements in the text blocks to delimit the paragraphs. The system includes logic to infer semantic information about typographic roles of the paragraph in the merged text blocks from at least the font information. The font information can include font name, font size distribution for sequences of the glyphs, font ascent, font descent, font height, font width. The system includes logic to cause display of the article in a device-dependent format.</p><p id="p-0093" num="0089">Each of the features discussed in this particular implementation section for the method implementations apply equally to this system implementation, except where incompatible. As indicated above, all the method features are not repeated for the system above and should be considered repeated by reference.</p><p id="p-0094" num="0090">Other implementations may include a non-transitory computer readable storage medium storing instructions executable by a processor to perform functions of the system described above. Yet another implementation may include a method performing the functions of the system described above.</p><p id="p-0095" num="0091">A computer readable storage medium (CRM) implementation of the technology disclosed includes a non-transitory computer readable storage medium impressed with computer program instructions to generate device-dependent display of an article from a PDF file. The article can have multiple columns in at least parts of the article. The instructions when executed on a processor, implement the method described above.</p><p id="p-0096" num="0092">Each of the features discussed in this particular implementation section for the method implementation apply equally to the CRM implementation. As indicated above, all the method features are not repeated here and should be considered repeated by reference.</p><heading id="h-0015" level="2">Particular Implementations&#x2014;Article and Table of Contents Detection</heading><p id="p-0097" num="0093">We describe various implementations of device-dependent display from a PDF file that has multiple articles and a table of contents to the articles.</p><p id="p-0098" num="0094">The technology disclosed can be practiced as a system, method, or article of manufacture. One or more features of an implementation can be combined with the base implementation. Implementations that are not mutually exclusive are taught to be combinable. One or more features of an implementation can be combined with other implementations. This disclosure periodically reminds the user of these options. Omission from some implementations of recitations that repeat these options should not be taken as limiting the combinations taught in the preceding sections&#x2014;these recitations are hereby incorporated forward by reference into each of the following implementations.</p><p id="p-0099" num="0095">A method implementation of the technology disclosed provides a device-dependent display from a PDF file that has multiple articles and a table of contents to the article. The method includes using a library (e.g., PDFium available at &#x3c;pdfium.googlesource.com/pdfium/&#x3e;) to render the article from the PDF file. This includes rendering a plurality of bounding boxes, positioned at on-page coordinates. The bounding boxes can contain one or more images and multiple text blocks of glyphs with font information for the glyphs. The method includes detecting at least one table in a first quarter of the PDF file that includes page numbers and multiple columns. The page number can be in a right hand or left hand column of the table. The method includes partitioning a contiguous sequence of text representing the table into text blocks of entries and columns. The method includes merging vertically adjoining text blocks that align horizontally with a single page number into a single text block for an entry in the table of contents. The method includes validating the table of contents by detecting in a body of the PDF file a plurality of headlines of articles which appear in an order in both the table of contents and the body of the PDF. Finally, the method includes causing display of the table of contents in a device-dependent format including the entries from the merged text blocks.</p><p id="p-0100" num="0096">This method implementation and other methods disclosed optionally include one or more of the following features. This method can also include features described in connection with systems disclosed. In the interest of conciseness, alternative combinations of method features are not individually enumerated. Features applicable to methods, systems, and articles of manufacture are not repeated for each statutory class set of base features. The reader will understand how features identified in this section can readily be combined with base features in other statutory classes.</p><p id="p-0101" num="0097">As above, these methods, systems and articles of manufacture are efficient enough to run on local resources of a mobile, tablet, handheld or even wearable device. Libraries are available to decode PDF files using local resources. The additional steps required to translate intermediate rendering of a PDF file into a device-dependent format suitable for a display on a handheld device can readily be executed using local resources. The same approach could, of course, be applied using a server or some service that supplies PDF files to a mobile device.</p><p id="p-0102" num="0098">In one implementation, the method includes saving offsets at which the plurality of headlines that are detected in the body of the PDF. The method includes receiving a selection of an article from a user responsive to the display of the table of contents. The method includes using a saved offset for the selected article to extract the selected article from the PDF. The method includes preparing it for device-dependent presentation and causing display of the selected article in the device-dependent format.</p><p id="p-0103" num="0099">The method includes detecting a mismatch between a particular entry in the table of contents and an article title in the body of the PDF file. The mismatch can happen when the article title includes more or less words than the particular entry. When a mismatch is detected, the method includes merging the particular entry and an adjoining entry, or splitting the particular entry in the table of contents to match the article title. The method includes updating the table of contents prior to causing display of the table of contents.</p><p id="p-0104" num="0100">The method includes detecting that the table of contents spans multiple pages in the PDF. The method includes using the font information to distinguish the table of content from header and footer information. The method includes merging entries from successive pages of the PDF into the table of contents.</p><p id="p-0105" num="0101">The method includes detecting multiple tables in the first quarter of the PDF that are candidates to be the table of contents. The method includes applying the partitioning, merging and validating actions to each of the candidates. The method includes scoring each of the candidates based on detecting in the body of the PDF file a plurality of headlines of articles in the order in which the plurality of headlines appear in the candidate. The method includes selecting the table of contents from among the candidates using the scoring.</p><p id="p-0106" num="0102">Each of the features discussed in this particular implementation section for the method implementation apply equally to all other method implementation, except where incompatible. As indicated above, all the method features are not repeated in subsequent methods and should be considered repeated by reference.</p><p id="p-0107" num="0103">Other implementations may include a non-transitory computer readable storage medium storing instructions executable by a processor to perform a method as described above. Yet another implementation may include a system including memory and one or more processors operable to execute instructions, stored in the memory, to perform a method as described above.</p><p id="p-0108" num="0104">Computer readable media (CRM) implementations of the technology disclosed include a non-transitory computer readable storage medium impressed with computer program instructions, when executed on a processor, implement the methods described above.</p><p id="p-0109" num="0105">Each of the features discussed in this particular implementation section for the method implementation apply equally to the CRM implementation. As indicated above, all the system features are not repeated here and should be considered repeated by reference.</p><p id="p-0110" num="0106">A system implementation of the technology disclosed includes one or more processors coupled to memory. The memory is loaded with computer instructions to generate device-dependent display from a PDF file that has multiple articles and a table of contents to the article. The system includes logic to use a library (e.g., PDFium available at &#x3c;pdfium.googlesource.com/pdfium/&#x3e;) to render the article from the PDF file. This includes rendering a plurality of bounding boxes, positioned at on-page coordinates. The bounding boxes can contain one or more images and multiple text blocks of glyphs with font information for the glyphs. The system includes logic to detect at least one table in a first quarter of the PDF file that includes page numbers and multiple columns. The page number can be in a right hand or left hand column of the table. The system includes logic to partition a contiguous sequence of text representing the table into text blocks of entries and columns. The system includes logic to merge vertically adjoining text blocks that align horizontally with a single page number into a single text block for an entry in the table of contents. The system includes logic to validate the table of contents by detecting in a body of the PDF file a plurality of headlines of articles which appear in an order in both the table of contents and the body of the PDF. The system includes logic to cause display of the table of contents in a device-dependent format including the entries from the merged text blocks.</p><p id="p-0111" num="0107">Each of the features discussed in this particular implementation section for the method implementations apply equally to this system implementation, except where incompatible. As indicated above, all the system features are not repeated here and should be considered repeated by reference.</p><p id="p-0112" num="0108">Other implementations may include a non-transitory computer readable storage medium storing instructions executable by a processor to perform functions of the system described above. Yet another implementation may include a method performing the functions of the system described above.</p><p id="p-0113" num="0109">A computer readable storage medium (CRM) implementation of the technology disclosed includes a non-transitory computer readable storage medium impressed with computer program instructions to generate device-dependent display from a PDF file that has multiple articles and a table of contents to the articles. The instructions when executed on a processor, implement the method described above.</p><p id="p-0114" num="0110">Each of the features discussed in this particular implementation section for the method implementation apply equally to the CRM implementation. As indicated above, all the CRM features are not repeated here and should be considered repeated by reference.</p><heading id="h-0016" level="2">Computer System</heading><p id="p-0115" num="0111"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a simplified block diagram of a computer system <b>910</b> that can be used to implement the functions performed by the article story generator <b>131</b> and table of contents generator <b>151</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0116" num="0112">Computer system <b>910</b> typically includes a processor subsystem <b>914</b> which communicates with a number of peripheral devices via bus subsystem <b>912</b>. These peripheral devices may include a storage subsystem <b>924</b>, comprising a memory subsystem <b>926</b> and a file storage subsystem <b>928</b>, user interface input devices <b>922</b>, user interface output devices <b>920</b>, and a network interface subsystem <b>916</b>. The input and output devices allow user interaction with computer system <b>910</b>. Network interface subsystem <b>916</b> provides an interface to outside networks, including an interface to communication network <b>918</b>, and is coupled via communication network <b>918</b> to corresponding interface devices in other computer systems. For example, communication network <b>918</b> may be, or be coupled with, communication link <b>912</b>. Communication network <b>918</b> may comprise many interconnected computer systems and communication links. These communication links may be wireline links, optical links, wireless links, or any other mechanisms for communication of information, but typically it is an IP-based communication network. While in one embodiment, communication network <b>918</b> is the Internet, in other embodiments, communication network <b>918</b> may be any suitable computer network.</p><p id="p-0117" num="0113">The physical hardware component of network interfaces are sometimes referred to as network interface cards (NICs), although they need not be in the form of cards: for instance they could be in the form of integrated circuits (ICs) and connectors fitted directly onto a motherboard, or in the form of macrocells fabricated on a single integrated circuit chip with other components of the computer system.</p><p id="p-0118" num="0114">User interface input devices <b>922</b> may include a keyboard, pointing devices such as a mouse, trackball, touchpad, or graphics tablet, a scanner, a touch screen incorporated into the display, audio input devices such as voice recognition systems, microphones, and other types of input devices. In general, use of the term &#x201c;input device&#x201d; is intended to include all possible types of devices and ways to input information into computer system <b>910</b> or onto computer network <b>918</b>.</p><p id="p-0119" num="0115">User interface output devices <b>920</b> may include a display subsystem, a printer, a fax machine, or non-visual displays such as audio output devices. The display subsystem may include a cathode ray tube (CRT), a flat panel device such as a liquid crystal display (LCD), a projection device, or some other mechanism for creating a visible image. The display subsystem may also provide non visual display such as via audio output devices. In general, use of the term &#x201c;output device&#x201d; is intended to include all possible types of devices and ways to output information from computer system <b>910</b> to the user or to another machine or computer system.</p><p id="p-0120" num="0116">Storage subsystem <b>924</b> stores the basic programming and data constructs that provide the functionality of certain embodiments of the present invention. For example, the various modules implementing the functionality of certain embodiments of the invention may be stored in storage subsystem <b>924</b>. These software modules are generally executed by processor subsystem <b>914</b>.</p><p id="p-0121" num="0117">Memory subsystem <b>926</b> typically includes a number of memories including a main random access memory (RAM) <b>930</b> for storage of instructions and data during program execution and a read only memory (ROM) <b>932</b> in which fixed instructions are stored. File storage subsystem <b>928</b> provides persistent storage for program and data files, and may include a hard disk drive, a floppy disk drive along with associated removable media, a CD ROM drive, an optical drive, or removable media cartridges. When computer system <b>910</b> represents the article story generator <b>131</b>, the publication database <b>115</b>, the semantics database <b>137</b>, and the articles database <b>157</b> may be stored in the storage subsystem <b>924</b>, or it may be stored in a separate facility accessible to the article story generator <b>131</b> via communication network(s) <b>155</b>. The databases and modules implementing the functionality of certain embodiments of the invention may have been provided on a computer readable medium such as one or more CD-ROMs, and may be stored in a non-transitory manner by file storage subsystem <b>928</b>. The host memory <b>926</b> contains, among other things, computer instructions which, when executed by the processor subsystem <b>914</b>, cause the computer system to operate or perform functions as described herein. As used herein, processes and software that are said to run in or on &#x201c;the host&#x201d; or &#x201c;the computer&#x201d;, execute on the processor subsystem <b>914</b> in response to computer instructions and data in the host memory subsystem <b>926</b> including any other local or remote storage for such instructions and data.</p><p id="p-0122" num="0118">Bus subsystem <b>912</b> provides a mechanism for letting the various components and subsystems of computer system <b>910</b> communicate with each other as intended. Although bus subsystem <b>912</b> is shown schematically as a single bus, alternative embodiments of the bus subsystem may use multiple busses.</p><p id="p-0123" num="0119">Computer system <b>910</b> itself can be of varying types including a personal computer, a portable computer, a workstation, a computer terminal, a network computer, a television, a mainframe, a server farm, or any other data processing system or user device. Due to the ever-changing nature of computers and networks, the description of computer system <b>910</b> depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> is intended only as a specific example for purposes of illustrating the preferred embodiments of the present invention. Many other configurations of computer system <b>910</b> are possible having more or less components than the computer system depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>We claim as follows:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of device-dependent display from a PDF file that has a table of contents, the method including:<claim-text>using a library to render at least part of the PDF file, including rendering of a plurality of bounding boxes, positioned at on-page coordinates, that contain one or more images and multiple text blocks of glyphs, with font information for one or more glyphs;</claim-text><claim-text>detecting the table of contents, which includes page numbers;</claim-text><claim-text>detecting that the table of contents spans multiple pages in the PDF; and</claim-text><claim-text>using the font information to distinguish the table of contents from header and footer information and to merge entries from successive pages of the PDF into the table of contents.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further including:<claim-text>partitioning a contiguous sequence of text representing the table of contents into text blocks; and</claim-text><claim-text>merging multiple vertically adjoining text blocks that align horizontally with a single page number into a single text block for an entry to display in the table of contents.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further including:<claim-text>detecting the table of contents in a first quarter of the PDF, which table of contents further includes multiple columns, wherein the page numbers are in a right hand or left hand column of the table.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further including:<claim-text>validating the table of contents by detecting in a body of the PDF file a plurality of headlines of articles which appear in an order in both the table of contents and the body of the PDF; and</claim-text><claim-text>causing display of the table of contents in a device-dependent format, including entries from the merged text blocks.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further including:<claim-text>using a detected offset for an article selected from display of the table of contents by a user, extracting the selected article from the PDF, preparing it for device-dependent presentation, and causing display of the selected article in the device-dependent format.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further including:<claim-text>detecting a mismatch between a particular entry in the table of contents and an article title in a body of the PDF file, wherein the article title includes more or less words than the particular entry; and</claim-text><claim-text>merging the particular entry and an adjoining entry, or splitting the particular entry in the table of contents to match the article title, responsive to the detected mismatch, and updating the table of contents prior to causing display of the table of contents.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further including:<claim-text>detecting multiple tables in the first quarter of the PDF that are candidates to be the table of contents;</claim-text><claim-text>applying the partitioning, merging, and validating actions to each of the candidates;</claim-text><claim-text>scoring each of the candidates based on at least detecting in a body of the PDF file a plurality of headlines for articles and comparing an order in which the plurality of headlines appear in the body to each of the candidates; and</claim-text><claim-text>selecting the table of contents from among the candidates using the scoring.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A system, including one or more processors coupled to memory loaded with computer instructions to generate device-dependent display from a PDF file that has a table of contents, which instructions, when executed on the processors, implement:<claim-text>using a library to render at least part of the PDF file, including rendering of a plurality of bounding boxes, positioned at on-page coordinates, that contain one or more images and multiple text blocks of glyphs, with font information for one or more glyphs;</claim-text><claim-text>detecting the table of contents, which includes page numbers;</claim-text><claim-text>detecting that the table of contents spans multiple pages in the PDF; and</claim-text><claim-text>using the font information to distinguish the table of contents from header and footer information and to merge entries from successive pages of the PDF into the table of contents.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further implementing actions comprising:<claim-text>partitioning a contiguous sequence of text representing the table of contents into text blocks; and</claim-text><claim-text>merging multiple vertically adjoining text blocks that align horizontally with a single page number into a single text block for an entry for display in the table of contents.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further implementing actions comprising:<claim-text>detecting the table of contents in a first quarter of the PDF, which table of contents further includes multiple columns, wherein the page numbers are in a right hand or left hand column of the table.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further implementing actions comprising:<claim-text>validating the table of contents by detecting in a body of the PDF file a plurality of headlines of articles which appear in an order in both the table of contents and the body of the PDF; and</claim-text><claim-text>causing display of the table of contents in a device-dependent format, including entries from the merged text blocks.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further implementing actions comprising:<claim-text>using a detected offset for an article selected from display of the table of contents by a user, extracting the selected article from the PDF, preparing it for device-dependent presentation, and causing display of the selected article in the device-dependent format.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further implementing actions comprising:<claim-text>detecting a mismatch between a particular entry in the table of contents and an article title in a body of the PDF file, wherein the article title includes more or less words than the particular entry; and</claim-text><claim-text>merging the particular entry and an adjoining entry, or splitting the particular entry in the table of contents to match the article title, responsive to the detected mismatch, and updating the table of contents prior to causing display of the table of contents.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further implementing actions comprising:<claim-text>detecting multiple tables in the first quarter of the PDF that are candidates to be the table of contents;</claim-text><claim-text>applying the partitioning, merging, and validating actions to each of the candidates;</claim-text><claim-text>scoring each of the candidates based on at least detecting in a body of the PDF file a plurality of headlines for articles and comparing an order in which the plurality of headlines appear in the body to each of the candidates; and</claim-text><claim-text>selecting the table of contents from among the candidates using the scoring.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer readable storage medium impressed with computer program instructions to generate device-dependent display from a PDF file that has a table of contents, which instructions, when executed on a processor, implement a method including:<claim-text>using a library to render at least part of the PDF file, including rendering of a plurality of bounding boxes, positioned at on-page coordinates, that contain one or more images and multiple text blocks of glyphs, with font information for one or more glyphs;</claim-text><claim-text>detecting the table of contents, which includes page numbers;</claim-text><claim-text>detecting that the table of contents spans multiple pages in the PDF; and</claim-text><claim-text>using the font information to distinguish the table of content from header and footer information and to merge entries from successive pages of the PDF into the table of contents.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, implementing the method further comprising:<claim-text>partitioning a contiguous sequence of text representing the table of contents into text blocks; and</claim-text><claim-text>merging multiple vertically adjoining text blocks that align horizontally with a single page number into a single text block for an entry to display in the table of contents.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, implementing the method further comprising:<claim-text>detecting the table of contents in a first quarter of the PDF, which table of contents further includes multiple columns, wherein the page numbers are in a right hand or left hand column of the table.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, implementing the method further comprising:<claim-text>validating the table of contents by detecting in a body of the PDF file a plurality of headlines of articles which appear in an order in both the table of contents and the body of the PDF; and</claim-text><claim-text>causing display of the table of contents in a device-dependent format, including entries from the merged text blocks.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, implementing the method further comprising:<claim-text>using a detected offset for an article selected from display of the table of contents by a user, extracting the selected article from the PDF, preparing it for device-dependent presentation, and causing display of the selected article in the device-dependent format.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, implementing the method further comprising:<claim-text>detecting a mismatch between a particular entry in the table of contents and an article title in a body of the PDF file, wherein the article title includes more or less words than the particular entry; and</claim-text><claim-text>merging the particular entry and an adjoining entry, or splitting the particular entry in the table of contents to match the article title, responsive to the detected mismatch, and updating the table of contents prior to causing display of the table of contents.</claim-text></claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, implementing the method further comprising:<claim-text>detecting multiple tables in the first quarter of the PDF that are candidates to be the table of contents;</claim-text><claim-text>applying the partitioning, merging, and validating actions to each of the candidates;</claim-text><claim-text>scoring each of the candidates based on at least detecting in a body of the PDF file a plurality of headlines for articles and comparing an order in which the plurality of headlines appear in the body to each of the candidates; and</claim-text><claim-text>selecting the table of contents from among the candidates using the scoring.</claim-text></claim-text></claim></claims></us-patent-application>