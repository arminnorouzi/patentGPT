<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004586A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004586</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17901061</doc-number><date>20220901</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>338</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>51</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>332</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>34</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>33</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>338</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>51</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>3326</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>3438</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>3344</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEMS AND METHODS FOR ANALYZING COMPUTER INPUT TO PROVIDE NEXT ACTION</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16535868</doc-number><date>20190808</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11481420</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17901061</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Nice Ltd.</orgname><address><city>Ra'anana</city><country>IL</country></address></addressbook><residence><country>IL</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Smutko</last-name><first-name>Ariel</first-name><address><city>Rehovot</city><country>IL</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Yehezkel</last-name><first-name>Aviv</first-name><address><city>Ramat-Gan</city><country>IL</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Nice Ltd.</orgname><role>03</role><address><city>Ra'anana</city><country>IL</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A system and method may analyze computer actions on a computer desktop system. Using a data gathering process, a low-level user action information item, describing input by a user (e.g. to the computer desktop system), may be received or gathered. The low-level user action information item may include an input type description and screen window information. Based on a series of low-level user action information items, a process a computer is engaging in with the user may be estimated or determined. The best or most appropriate next low-level user action may be displayed or suggested to the user, e.g. on a computer desktop system to a user.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="83.74mm" wi="158.75mm" file="US20230004586A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="220.05mm" wi="117.09mm" orientation="landscape" file="US20230004586A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="194.65mm" wi="125.73mm" orientation="landscape" file="US20230004586A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="107.27mm" wi="114.89mm" file="US20230004586A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="199.73mm" wi="68.33mm" orientation="landscape" file="US20230004586A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="221.15mm" wi="138.51mm" file="US20230004586A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="147.07mm" wi="108.46mm" file="US20230004586A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">PRIOR APPLICATION DATA</heading><p id="p-0002" num="0001">The present application is a continuation of prior U.S. application Ser. No. 16/535,868 filed on Aug. 8, 2019, entitled &#x201c;SYSTEMS AND METHODS FOR ANALYZING COMPUTER INPUT TO PROVIDE NEXT ACTION&#x201d;.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD OF THE INVENTION</heading><p id="p-0003" num="0002">The present invention relates generally to analysis of computer usage; in particular analysis of computer usage in order to provide a suggestion for a next user action or input.</p><heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading><p id="p-0004" num="0003">Companies and organizations such as call centers, or other businesses, may want to identify for users, e.g. company employees or agents, the best (given the available data) next action or input for the user to execute when working with computer applications. Doing so typically requires obtaining data on user actions and inputs and analyzing those actions. However, data regarding user actions and input to computer applications or programs may be difficult to obtain and analyze. This may be because, for example, some applications do not allow other applications access to user input or actions; or different applications may provide user input data in different formats, presenting a standardization problem.</p><p id="p-0005" num="0004">Robotic process automation (&#x201c;RPA&#x201d;) robots or bots may be software tools which may gather data on a user performing a task via a specific application's graphical user interface (GUI), and perform the automation by repeating those tasks directly in the GUI. Such robots may work &#x201c;attended&#x201d; or &#x201c;unattended&#x201d;. In unattended mode, robots may execute tasks and interact with applications independent of human involvement. Attended mode is typically targeted toward front-office activities, and may be useful when the entire end-to-end process cannot be automated. In such cases RPA robots can work alongside humans to deliver attended automation (which may include explicitly guiding a human agent through a process). The actions of RPA bots can still be triggered by system-level events (as opposed to low-level actions) that can give and take data to and from human workers.</p><p id="p-0006" num="0005">Attended bots may guide a human agent continuously, suggesting to the user the most relevant next action to execute. Existing solutions focus on tailoring attended solution for well-defined scenarios of specific processes. However, as processes tend to have various variations, exceptions, and can be changed over time, such specific tailor-made solutions may fail, and are not easily generalizable to different applications.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0007" num="0006">A system and method may analyze computer actions on a computer desktop system. Using a data gathering process, a low-level user action information item, describing input or action by a user (e.g. to the computer desktop system), may be received or gathered. The low-level user action information item may include for example an input type description and screen window information. Based on a series of low-level user action information items, a process a computer is engaging in with the user may be estimated or determined. The best or most appropriate next low-level user action may be displayed or suggested to the user, e.g. on a computer desktop system to a user.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007">Non-limiting examples of embodiments of the disclosure are described below with reference to figures attached hereto. Dimensions of features shown in the figures are chosen for convenience and clarity of presentation and are not necessarily shown to scale. The subject matter regarded as the invention is particularly pointed out and distinctly claimed in the concluding portion of the specification. The invention, however, both as to organization and method of operation, together with objects, features and advantages thereof, can be understood by reference to the following detailed description when read with the accompanied drawings. Embodiments of the invention are illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like reference numerals indicate corresponding, analogous or similar elements, and in which:</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> is a block diagram of a system for providing a next action according to an embodiment of the present invention.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> is a high-level block diagram of an exemplary computing device which may be used with embodiments of the present invention.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart of a method according to embodiments of the present invention.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example of a process including subprocesses according to embodiments of the present invention.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of a method according to embodiments of the present invention.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIGS. <b>5</b>A and <b>5</b>B</figref> are examples of output displayed according to embodiments of the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0015" num="0014">It will be appreciated that for simplicity and clarity of illustration, elements shown in the figures have not necessarily been drawn accurately or to scale. For example, the dimensions of some of the elements can be exaggerated relative to other elements for clarity, or several physical components can be included in one functional block or element.</p><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0016" num="0015">In the following detailed description, numerous specific details are set forth in order to provide a thorough understanding of the invention. However, it will be understood by those skilled in the art that the present invention can be practiced without these specific details. In other instances, well-known methods, procedures, and components, modules, units and/or circuits have not been described in detail so as not to obscure the invention.</p><p id="p-0017" num="0016">Embodiments may &#x201c;auto-complete&#x201d; user input or actions, or provide a recommended next best or recommended action, for example by first learning the next most best user-action at each timestamp based on the currently executed action, and then providing a user action or a recommendation for an action. Embodiments may learn what user input or actions to suggest or &#x201c;auto-complete&#x201d; user-actions from low-level desktop events, as opposed to application-specific information, and thus may be agnostic to the different enterprise or other applications. Prior art user-monitoring applications may be able to collect data only from certain programs or applications; by collecting low-level user actions, embodiments of the present invention may collect all user actions and inputs, regardless of application type, and regardless of whether or not the application is an Internet browser-based application or not. Some embodiments may provide an improvement over prior art in not requiring integrations or interfaces to multiple different specific applications. Embodiments may use low-level input data to provide a realistic and detailed understanding of users' actions. Embodiments may determine the most recommended action from low-level input data, despite such data making a determination difficult.</p><p id="p-0018" num="0017">By using low level event data (e.g. describing user actions), embodiments of the present invention may be agnostic to the different enterprise or other applications used and providing input, and may not require integrations to or knowledge of a number of applications. Embodiments may gain a realistic and detailed understanding of a user's actions by using low-level input data. Embodiments of the invention may work without high-level system-specific event logs and may instead use low-level user input data, without being associated (e.g. directly associated via a case ID) to activities or process instances. Prior art processes to analyze users' actions relative to computer processes focus on a high-level view, and do not and cannot take into the account the actual actions a user takes in order to complete a specific step in a process. For example, high-level system specific event logs used in prior art processes may include a case identification (ID) which may specifically identify the process or program instance, e.g. a number, and an activity ID (e.g. a unique identifier of each activity in a process) which may specify or identify the task that has been performed by a user or a computer system. In contrast, the low level event data recorded and used in embodiments of the present invention may not be associated with a specific process (e.g. case ID) or activity but rather may be associated only with a window which has a name and with a program or application operating the window (e.g. an internet browser). The title (e.g., the label displayed at the top) of the screen window, and the name of the program executing with which the user is interacting are data may be extracted or obtained and are different from, the specific identification of the process or program instance which in some cases may not be obtained. Event log data such as an activity ID may be data internal to a program, and may not be provided to other programs; in contrast data such as window names may be more accessible and agnostic to the various programs and applications.</p><p id="p-0019" num="0018">Technologies exist to obtain high-level system-specific event logs as input data, such as case ID (e.g. &#x201c;Process ID&#x201d;), activity ID and, timestamp to identify user activity or input. A case ID may identify the process instance and an activity ID may specify the task that has been performed as part of the process. Such data is typically provided by the application itself, and may not be provided for all applications, and thus a process using this data works with incomplete data. Data such as an activity ID, user selection and input may be data internal to a program, and may not be provided to other programs. Current processes analyzing user actions or input do not use accessible low-level desktop events as input data; such low-level data may not be associated with a specific process (e.g. case ID) but rather may be associated only with a window and a program operating the window (e.g. an internet browser).</p><p id="p-0020" num="0019">Since the use of low-level input data may make the problem of analyzing user input or actions much harder, prior art processes typically do not use low-level input data. For example in order for such low-level user activity or input data to be performed by a human, the person would need to manually find all the possible sequences of actions in the input data (typically containing millions of actions and as thousands of sequences). A person would have to manually find all the different actions in the data determine the best or recommended action for each sequence. This manual process would require impractical human processing time.</p><p id="p-0021" num="0020">Embodiments of the invention may analyze data (e.g. low-level user action information items) describing actions of human-computer interaction, such as user input events to a GUI. In such a manner&#x2014;analyzing only user input events and their context&#x2014;a broad set of data may be gathered, more than with prior art processes. The data may be analyzed to create a model which may provide a best, most desirable or most efficient next action, given the current state of the computer process the user is interacting with. In one embodiment data is gathered or received from multiple physically distinct user terminals operated by multiple different users, and is analyzed at a central location or server not at any of the user terminals (typically be a processor separate from terminal processors); however the data analysis discussed herein may be performed at a user terminal which also collects user data. At for example a central server data received from the terminals describing the low-level user action information or items may be used to create, use and update a model.</p><p id="p-0022" num="0021">An item of information describing or defining a low-level user action may include for example an input type description or desktop event (e.g. the type of action the user performed as input: mouse click, left click, right click, cut, copy, paste, typing text, tab, etc.), a user name, and screen window information such as title or name. (e.g., as computer processes in this context may be displayed as windows, each window may have a title or name which may describe the user-facing application to which the user provides input.) Actions may be stored and identified both identifying the specific unique (within the system) instance of the action, and also a generalized name or description that identifies the action in a way such that actions of similar functionality will have the same generalized name. Both the specific and generalized identification or name may be linked or stored together in the system.</p><p id="p-0023" num="0022">Embodiments may learn from users' past actions using a novel reinforcement learning (RL) model. In one embodiment, input may be a log or database of desktop actions, e.g. user input or actions to a GUI for a variety of applications performed by one or more employees. Data describing an action may include for example action data or input type descriptions (e.g. describing whether the input is via mouse or keyboard, or what type or input such as left click, right click, cut, paste, typing text), timestamp, application context, user name, screen window information such as title or name (e.g., as computer processes in this context may be displayed as windows, each window may have a title or name which may describe the user-facing application to which the user provides input), and where possible, field context.</p><p id="p-0024" num="0023">A large amount of action data may be collected; e.g. in some implementations there are approximately 10,000 actions per user, across many users, on average 8-hour work day. An embodiment may create and use RL model which is learned or trained on past user actions data (e.g. offline). At each step, e.g. at each opportunity for user input, an embodiment may estimate the most best next action based on current and recently executed (e.g. discounted via a decay factor giving more importance to more recent actions, such as an exponential decay over the last 10 actions) user actions. An RL model may be continuously optimized by a user feedback loop per the estimated actions (e.g. by a user implicitly approving the suggestion or not, typically by taking the action or not).</p><p id="p-0025" num="0024">An embodiment may, based on the current state of a user's interaction with an application and other information such as the prior user action or input, determine the most probable, or best or most efficient, next user action or input. User actions or input may be collected from user computers or terminals using, for example, client data collection software which may receive, gather or collect a user's desktop activity or actions, e.g. low-level user action information or descriptions. A module may provide a recommended next user action or input, which the user may opt to perform or not. A recommendation may be provided, for example, via a popup or other notice appearing on the display of a user terminal or computer. The module providing a next user action may be continually updated based on user actions, the model gathering feedback from user actions.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> is a block diagram of a system for providing a next action according to an embodiment of the present invention. While <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> shows such a system in the context of a contact center, embodiments of the invention may be used in other contexts. A number of human users such as call-center agents may use agent terminals <b>2</b> which may be for example personal computers or terminals, each including components such as shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>. Terminals <b>2</b> may include one or more software programs <b>6</b> to operate and display a computer desktop system <b>7</b> (e.g. displayed as user interfaces such as a GUI). In some embodiments, software programs <b>6</b> may display windows, e.g. via desktop system <b>7</b>, and accept user input (e.g. via desktop system <b>7</b>) and may interface with server software <b>22</b>, e.g. receiving input from and sending output to software programs <b>6</b>. A real-time (RT) recommendation local interface <b>8</b> executing on terminals <b>2</b> (e.g. a NICE Attended Robot provided by NICE, Ltd.) may provide or display a recommended next action to user for example by applying a current action and state to a model and/or interacting with a real-time recommendation engine <b>38</b> which may apply an action and state to a model to determine a recommendation. Real-time recommendation local interface <b>8</b> may be executed on or by terminals <b>2</b>. Programs <b>6</b> may be executed by or on terminals <b>2</b> and server software <b>22</b> may be executed by server <b>20</b>, and software <b>22</b> and programs <b>6</b> may interact in a client-server manner. Real-time recommendation engine <b>38</b> and real-time recommendation local interface <b>8</b> may communicate (e.g. via one or more networks <b>44</b>) and cooperate (e.g. in a client-server manner) to develop and maintain one or more models used for a next action recommendation, recommend a next action, and update models based on actual user actions. While in the example embodiment shown, real-time recommendation engine <b>38</b> and real-time recommendation local interface <b>8</b> are separate processes with certain functions, in other embodiments the functions of each may be elsewhere; for example maintaining, using and updating a model may be performed by a process executing on a terminal <b>2</b>.</p><p id="p-0027" num="0026">Client data collection software <b>4</b>, e.g. the NICE RT&#x2122; Client software, an Activity Recorder or Action Recorder, may execute on or by terminals <b>2</b> and may monitor input to programs <b>6</b>. For example client data collection software <b>4</b> may receive, gather or collect a user's desktop activity or actions, e.g. low-level user action information or descriptions, and send or transmit them to a remote server <b>20</b>, e.g. a NICE RT&#x2122; Server. Client data collection software <b>4</b> may access or receive information describing user input or actions via for example an API (application programming interface) interface with the operating system and/or specific applications (e.g. the Chrome browser) for the computer or terminal on which it executes. Remote server <b>20</b> may collect or receive data such as user action information or descriptions, combine actions into a file, and export them as for example JSON (JavaScript Object Notation) files via for example an HTTPS (Hypertext Transfer Protocol Secure) connection to an automation finder server <b>30</b>, which may receive and store action data and other data in a database <b>34</b>, which may be processed by automation finder <b>32</b>. Automation finder <b>32</b> may discover processes for use for example by a real-time recommendation engine <b>38</b>, and may be for example a process executed by server <b>30</b> or another computer. A reinforcement learning (RL) model <b>36</b> (in some embodiments stored in database <b>34</b>) may be based on past user actions and may be used by real-time recommendation engine <b>38</b> to predict future user actions, and may be included in a Real-Time Recommendations Cache, including models or tables as discussed herein. Real-time recommendation engine <b>38</b>, for example executed by or on automation finder server <b>30</b>, may update and use RL model <b>36</b>.</p><p id="p-0028" num="0027">In some embodiments server <b>20</b> and automation finder server <b>30</b> may be contained in or executed on the same computing device, unit or server, and automation finder server <b>30</b> may include a processor (e.g. as shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>) separate from a processor executing collection software <b>4</b>.</p><p id="p-0029" num="0028">One or more networks <b>44</b> (e.g. the internet, intranets, etc.) may connect and allow for communication among the components of <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>.</p><p id="p-0030" num="0029">Terminals <b>2</b> may be or include computing or telecommunications devices such as personal computers or other desktop computers, conventional telephones, cellular telephones, portable or tablet computers, smart or dumb terminals, etc. Terminals and servers <b>2</b>, <b>20</b>, and <b>30</b> may include some or all of the components such as a processor shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>.</p><p id="p-0031" num="0030">In one embodiment, client data collection software <b>4</b> may operate with permission of the organization operating terminals <b>2</b>, and may collect for example user input event data, and may be tuned or configured to not collect certain data. For example a user may configure data collection software <b>4</b> to operate on or collect data from only certain windows and applications (e.g. windows with certain titles, or certain URLs (uniform resource locators) or website addresses), and may ignore for example windows accessing certain URLs or website addresses. Client data collection software <b>4</b> may collect data from Internet based windows and/or non-Internet based windows.</p><p id="p-0032" num="0031">Real-time recommendation engine <b>38</b> may work in an &#x201c;offline mode&#x201d; where RL model <b>36</b> is learned or created based on upon past user actions, and the discovery of sequences and business processes data by automation finder <b>32</b>. Real-time recommendation engine <b>38</b> may, at each &#x201c;timestep&#x201d; or relevant point in time (e.g. the receipt of an action) estimate the best next action using RL model <b>36</b> based for example on current and recently executed user actions. RL model <b>36</b> may be continuously (e.g. after each collected action) optimized or updated by a user feedback loop per the estimated actions (e.g. by a user approving the suggestion or not; approval may in one embodiment be a user making the action, and disapproval may be a user not making the action).</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> shows a high-level block diagram of an exemplary computing device which may be used with embodiments of the present invention. Computing device <b>100</b> may include a controller or processor <b>105</b> that may be, for example, a central processing unit processor (CPU), a chip or any suitable computing or computational device, an operating system <b>115</b>, a memory <b>120</b>, a storage <b>130</b>, input devices <b>135</b> and output devices <b>140</b> such as a computer display or monitor displaying for example a computer desktop system. Each of modules and equipment such as terminals <b>2</b>, server <b>20</b>, data collection software <b>4</b>, software programs <b>6</b>, RT interface <b>8</b>, server software <b>22</b>, automation finder processor <b>30</b>, automation finder <b>32</b>, RT recommendation engine <b>38</b> and other modules discussed herein may be or include, or may be executed by, a computing device such as included in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>, although various units among these modules may be combined into one computing device.</p><p id="p-0034" num="0033">Operating system <b>115</b> may be or may include any code segment designed and/or configured to perform tasks involving coordination, scheduling, arbitration, supervising, controlling or otherwise managing operation of computing device <b>100</b>, for example, scheduling execution of programs. Memory <b>120</b> may be or may include, for example, a Random Access Memory (RAM), a read only memory (ROM), a Dynamic RAM (DRAM), a Synchronous DRAM (SD-RAM), a double data rate (DDR) memory chip, a Flash memory, a volatile memory, a non-volatile memory, a cache memory, a buffer, a short term memory unit, a long term memory unit, or other suitable memory units or storage units. Memory <b>120</b> may be or may include a plurality of, possibly different memory units. Memory <b>120</b> may store for example, instructions (e.g. code <b>125</b>) to carry out a method as disclosed herein, and/or data such as low level action data, output data, etc.</p><p id="p-0035" num="0034">Executable code <b>125</b> may be any executable code, e.g., an application, a program, a process, task or script. Executable code <b>125</b> may be executed by controller <b>105</b> possibly under control of operating system <b>115</b>. For example, executable code <b>125</b> may be one or more applications performing methods as disclosed herein, for example those of <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>4</b></figref>, according to embodiments of the present invention. In some embodiments, more than one computing device <b>100</b> or components of device <b>100</b> may be used for multiple functions described herein. For the various modules and functions described herein, one or more computing devices <b>100</b> or components of computing device <b>100</b> may be used. Devices that include components similar or different to those included in computing device <b>100</b> may be used, and may be connected to a network and used as a system. One or more processor(s) <b>105</b> may be configured to carry out embodiments of the present invention by for example executing software or code. Storage <b>130</b> may be or may include, for example, a hard disk drive, a floppy disk drive, a Compact Disk (CD) drive, a CD-Recordable (CD-R) drive, a universal serial bus (USB) device or other suitable removable and/or fixed storage unit. Data such as user action data or output data may be stored in a storage <b>130</b> and may be loaded from storage <b>130</b> into a memory <b>120</b> where it may be processed by controller <b>105</b>. In some embodiments, some of the components shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref> may be omitted.</p><p id="p-0036" num="0035">Input devices <b>135</b> may be or may include a mouse, a keyboard, a touch screen or pad or any suitable input device. It will be recognized that any suitable number of input devices may be operatively connected to computing device <b>100</b> as shown by block <b>135</b>. Output devices <b>140</b> may include one or more displays, speakers and/or any other suitable output devices. It will be recognized that any suitable number of output devices may be operatively connected to computing device <b>100</b> as shown by block <b>140</b>. Any applicable input/output (I/O) devices may be connected to computing device <b>100</b>, for example, a wired or wireless network interface card (NIC), a modem, printer or facsimile machine, a universal serial bus (USB) device or external hard drive may be included in input devices <b>135</b> and/or output devices <b>140</b>.</p><p id="p-0037" num="0036">Embodiments of the invention may include one or more article(s) (e.g. memory <b>120</b> or storage <b>130</b>) such as a computer or processor non-transitory readable medium, or a computer or processor non-transitory storage medium, such as for example a memory, a disk drive, or a USB flash memory, encoding, including or storing instructions, e.g., computer-executable instructions, which, when executed by a processor or controller, carry out methods disclosed herein.</p><p id="p-0038" num="0037">Prior to developing a model for recommendations, user processes may be estimated, discovered or defined. A user process may be a series of actions taken repeatedly by different users, and may involve more than one program or application. A user process as discussed with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref> is different from a specific process or program instance providing data regarding user input as described with respect to the prior art. <figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart of a method for estimating, discovering or defining user processes according to embodiments of the present invention. While in one embodiment the operations of <figref idref="DRAWINGS">FIG. <b>2</b></figref> are carried out using systems as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in other embodiments other systems and equipment can be used.</p><p id="p-0039" num="0038">Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, in operation <b>300</b>, a data gathering process (e.g. client data collection software <b>4</b>, such as the NICE RT Client produced by NICE, Ltd.) executed on or by a user or agent terminal such as terminal <b>2</b> (e.g. a computer as shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>) may receive or gather computer or use activity data describing or related to low-level user action information or descriptions, e.g. displayed on and input to a computer desktop system. A low-level user action may refer both to the action itself, typically input by a user received by a computer, and the data that describes such an action, and in addition a generalized description or name for the action which applies to multiple specific instances of the same action or similar ones (in terms of their functionality). A specific set of data describing a low-level user action may be termed a low-level user action item.</p><p id="p-0040" num="0039">A low-level user action or low-level user action item may be for example a mouse or other pointing device click, a keyboard input to a text field, a cut command, a paste command, a certain keystroke or set of keystrokes (e.g. ctrl-P, alt-F <b>1</b>, etc.). Data or information describing such user actions (e.g. a low-level user action item) may include for example the type or description of action item or an input item description (click, cut, paste, text entry, etc.); action component details (e.g. the title of window item to which input is applied, e.g. the name of the text field having text entered; the title of the button or control being clicked on, etc.); a user name or ID (e.g. the name of ID of the person providing the input or logged in to the computer or terminal); a time or timestamp of the action; screen window information such as the title of the screen window into which data is entered or on which the relevant data is displayed, and the name of the program or application executing with which the user is interacting (e.g. the program displaying the window such as the Internet Explorer browser).</p><p id="p-0041" num="0040">A window may be for example a defined sub-area of the screen which may typically be resized and moved by a user, in which data is displayed an entered for a particular task or software program. For the point of view of the computer by which a window is displayed, a window may be a graphical control element including a visual area with a graphical user interface for the program it belongs to, typically rectangular. A window typically has a name displayed, typically at its top&#x2014;for example, a window allowing a user to edit a text document may have a name or title including the filename of the document and the program being used to edit the document. A window may be related to two different software programs: the program or application executing the window, such as a browser such as Internet Explorer; and a remote or local program which controls or owns the substance of the window. The local or remote program executing the substance of the window may not provide adequate data, and thus embodiments may capture low level action data instead. In many cases, the name or title for a window may be accessible from the OS of the computer executing the program owning or displaying the window, while the program owning or displaying the window may not allow or provide access regarding its own name, function etc. via system-specific event logs.</p><p id="p-0042" num="0041">Low-level user action information or description data (e.g. user action items) may be for example stored and/or transmitted to for example a server or other computer such as server <b>20</b>. In one embodiment, data collected may be in the form of Windows Handles and their properties as provided by Windows API (e.g. Win-32). The event logs files describing these data collected desktop events collected by NICE RT Client may be exported using JSON files to server <b>20</b>. Other low level event or action data may be used. The data may include for example event or action time (e.g. start time, but end time may also be included); user details (e.g. name or ID of the person providing the input or taking the action in conjunction with the computer); action details or description (e.g. mouse-click, text-input, keyboard command, etc.); the details of the window in which the action takes place, such as the window size, window name, etc.; the name of the program executing the window; and text if any that was input or submitted (in text actions). Other or different information may be collected. User details or ID may help to tie together actions to related processes and infer process orderings.</p><p id="p-0043" num="0042">Each low-level user action may be described in a database by several fields of the action data such as action time, user details, action details, window name and size, program executing the window, and whether or not text was entered. A generalized name or description may also be created and associated with the action, as in a generalization process described elsewhere herein. A name may have certain specific information such as user ID, timestamp, and other tokens in the data (e.g., names, dates, etc.) removed or replaced with generalized information. Multiple specific instances of similar actions may share the same generalized name or description. Thus actions may be stored and identified by both identifying the specific unique (within the system) instance of the action, and also a generalized name or description.</p><p id="p-0044" num="0043">Table 1 below depicts example action data for an example scenario in which the agent logs in into an ordering system; as with other data used in examples other specific data and data formats may be used. The agent may open or start the ordering system, enter her or his username and password in a login screen, and then continue working on a case e.g., move to the new orders screen. This includes several low-level user actions as described in Table 1. First, the agent, identified as Agent<b>1</b> in the User column, at time 10:00:00, clicks twice using a mouse left-click on the MyOrderingSystem icon on the desktop display (window Desktop indicates the desktop on a Windows style system, where windows may be displayed on the desktop). The login screen or window may open or pop up (named per collected data MyOrderingSystem-Login), and the agent may enter his username (e.g. &#x201c;Agent<b>1</b>&#x201d;) and password (e.g. &#x201c;myPassword&#x201d;) into the fields identified in the Action column, and successfully log in. The text collected as data may be the entered agent name and password. The agent may then click on mouse left-click on the NewOrders view inside the MyOrderingSystem to display new orders. A &#x201c;window&#x201d; may be labelled &#x201c;Desktop&#x201d; or another name if there is no &#x201c;window&#x201d; used, but rather the user takes action with respect to the desktop, the portion of the display behind or underneath windows</p><p id="p-0045" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="35pt" align="left"/><colspec colname="3" colwidth="84pt" align="left"/><colspec colname="4" colwidth="77pt" align="left"/><colspec colname="5" colwidth="42pt" align="left"/><thead><row><entry namest="1" nameend="5" rowsep="1">TABLE 1</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row><row><entry/><entry/><entry/><entry>Action Description or</entry><entry>Text</entry></row><row><entry>User ID</entry><entry>Time</entry><entry>Window Name</entry><entry>Type</entry><entry>Entered</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>Agentl</entry><entry>10:00:00</entry><entry>Desktop</entry><entry>Left-Dbl-Clickon</entry><entry/></row><row><entry/><entry/><entry/><entry>MyOrderingSystem</entry></row><row><entry>Agentl</entry><entry>10:00:10</entry><entry>MyOrderingSystem-Login</entry><entry>InputText on Username</entry><entry>Agentl</entry></row><row><entry>Agentl</entry><entry>10:00:20</entry><entry>MyOrderingSystem-Login</entry><entry>InputText on Password</entry><entry>myPassword</entry></row><row><entry>Agentl</entry><entry>10:00:30</entry><entry>MyOrderingSystem-</entry><entry>Left-Click on NewOrders</entry></row><row><entry/><entry/><entry>MainView</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0046" num="0044">In operation <b>310</b> low-level user actions may be grouped into or assigned to contexts, which may be for example a rough assignment of the business process or other functionality executed by the user while taking the associated action. This may be performed for example by applying a statistical algorithm, possibly using window information, e.g. the title of the window in which the action occurs or is entered. A context may be considered a contained process which includes subprocesses and actions. A subprocess may be a sequence of low-level actions, executed again and again (with different specific timing and/or user data in each instance), which share or occur in the same context. A context may be derived from window names in which user actions take place, in contrast with a subprocess which may be derived from a series of low-level actions repeated across specific instances of user interaction. Some embodiments may determine or identify one or more process contexts from the series of low-level user actions. An embodiment may be domain-agnostic and language-agnostic. A statistical-learning, TF-IDF (term frequency&#x2014;inverse document frequency) based approach may be used, determining or creating a context according to frequent words in the window names used by the user (e.g., the screens that were used by the specific user during his work), but also dropping or not including &#x201c;too-frequent&#x201d; words (e.g. that appear too-frequently, e.g., in a high-fraction of the entire user actions data, across multiple users, as opposed to screens used by a specific user). In one embodiment, a context may be identified by analyzing the window names, for example, using the procedure: Context(sentence)={word if freq(word, sentence)&#x3e;thresh_<b>1</b> AND freq(word,data)&#x3c;thresh_<b>2</b> I word&#x2208; screens(sentence)}</p><p id="p-0047" num="0045">where, for each &#x201c;sentence&#x201d;, which may be the window titles names and the name of the program or application for a group of instances of actions which occur within a time window or time band, a context for that sentence is found. The relevant timestamp used for each action is typically start time, although start and end time may be used. A number of time-sequential sentences or groups of actions may be defined by action start time within the time band or time period, where the sentences or groups are typically not overlapping. The process described by Context(sentence) may be performed iteratively once for each sentence. Context(sentence) may be a textual sentence, e.g. a string which is a concatenation of words, describing the context for the group of actions having their associated window names in the group &#x201c;sentence&#x201d;. freq(word, sentence) may be the frequency, e.g., number of appearances of a &#x201c;word&#x201d; in the group &#x201c;sentence&#x201d;. freq(word,data) may be the frequency, e.g., number of appearances of, &#x201c;word&#x201d; in the window names for all actions in the data set of action input data. thresh_<b>1</b> and thresh_<b>2</b> may be the TF-IDF thresholds, e.g. integers. screens(sentence) may be all the screen names in this group &#x201c;sentence&#x201d;, namely, the screen names of all actions in the group defined by a certain time window.</p><p id="p-0048" num="0046">A word may be a text string that is returned as a Context if its frequency &#x201c;freq&#x201d; (e.g. number of occurrences) across the screen name data in a sentence is greater than a threshold thresh_<b>1</b> and if its frequency when used across all action data (across all contexts) is less than a number of occurrences thresh_<b>2</b>. Typically, sentence data over which a word is searched is sentence data for each particular instance of an action for a specific user.</p><p id="p-0049" num="0047">For example, a user may take action in or use the following example screens or windows, with the first item in the pair being the name or title of the window or screen, and the second item in the pair being the name of the application or program owning the window (e.g., a &#x201c;ServiceNow&#x201d; application, internet browser such as Internet Explorer). The screen name information for the following actions may be used, where the actions are defined as being in the same sentence based on timestamp within a defined period or range:</p><p id="p-0050" num="0048">Accounts, Passwords XYZ; Permissions I ServiceNow&#x2014;Internet Explorer</p><p id="p-0051" num="0049">Locked Account or Password Reset I ServiceNow&#x2014;Internet Explorer</p><p id="p-0052" num="0050">Request to reset domain (computer) password I ServiceNow&#x2014;Internet Explorer</p><p id="p-0053" num="0051">Other data or data formats may be used, as with other example data shown herein. XYZ may be a name or application or program name related to a specific entity or organization creating or operating the applications being analyzed. The above-described algorithm may identify or determine that the process context is &#x201c;reset password&#x201d;, and the too-general (and probably too-frequent) &#x201c;Service Now&#x201d; and &#x201c;Internet Explorer&#x201d; terms may be removed. &#x201c;Reset password&#x201d; may be returned as being the two words that occur frequently within the window title information for the three actions used above, and which do not occur frequently across all window title information for all actions, across all users and all times (each sentence may be related to an action by a specific user at a specific time).</p><p id="p-0054" num="0052">In operation <b>320</b> subprocesses may be detected within the set of low-level user actions; in some embodiments this may be done for each context. This may be performed for each context: e.g. within each context a number of subprocesses associated with that context may be discovered or defined. For example, each sentence (e.g. groups of specific instances of actions having start timestamps within a time window) may be assigned to a context, and the actions for sentences within a context may be used to define subprocesses for that context (typically ignoring sentence boundaries or divisions when subprocesses are found). A subprocess may be considered to be a common reoccurring sequence of actions, e.g. a series, possibly a time-ordered series or sequence, of low-level user actions which occurs multiple times across the dataset, but which may be detected as sharing the same context, e.g. the same series sequence of actions (typically using different specific data at least in their original, as-gathered, representation) recurring in different places. When finding subprocesses, the generalized names (e.g. with some features identifying the action instance such as user ID or timestamp removed) of actions may be considered.</p><p id="p-0055" num="0053"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example of data representing a process including subprocesses according to embodiments of the present invention. When used herein, events such as a process or low-level action may refer to the event itself and also to the data representing the event. In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, an order handling process includes subprocesses (A), (B) and (C), each including low-level user actions (Action A1, A2, etc.).</p><p id="p-0056" num="0054">In one embodiment, a modification of a sequential pattern mining algorithm (e.g. the known PrefixSpan algorithm) may be used to identify or determine, for each context, a set of subprocesses. Such algorithms may implement a bottom-up approach: action sequences of length 1 are found; then the algorithm continues iteratively such that the K-step begins with the (K-1)-length sequences that have passed a support-threshold threshold (namely, a minimum frequency threshold) and searches for sequence candidates of length K.</p><p id="p-0057" num="0055">In some embodiments, instead of finding all the candidates in each iteration by scanning the data, an algorithm such as the PrefixSpan algorithm may find all the candidates at first place and then recursively pass through them until all the sequences are found. A PrefixSpan algorithm may return the complete set of sequences and their respective support (e.g. number of occurrences). One embodiment provides a modification to this inefficiency of the PrefixSpan algorithm to achieve an optimal resources-results tradeoff. Each user action may be described by or associated with a user action vector (e.g. an ordered list or series of numbers), for example an N dimensional vector, describing the action. Each subprocess may be described by or associated with a subprocess vector which may be generated from action vectors associated with low-level user actions which occur in the subprocess. An action vector for an action may be calculated or created for example a text string which is the generalized name for the action, where data related to a specific instance is removed or no considered. Text strings may be generalized using generalized names or tokens that represent entities such as person names, file names and ID numbers.</p><p id="p-0058" num="0056">In operation <b>330</b> processes may be estimated, detected, inferred or created, for example by clustering or grouping the subprocesses into processes such as user function processes or business processes. For example, if the following example subprocesses are identified:</p><p id="p-0059" num="0057">a. Password reset</p><p id="p-0060" num="0058">b. Secured password generation</p><p id="p-0061" num="0059">c. Request to new password</p><p id="p-0062" num="0060">d. New distribution list</p><p id="p-0063" num="0061">e. Add to distribution list</p><p id="p-0064" num="0062">The subprocesses may be clustered into a first process including subprocesses a, b and c (e.g. related to &#x201c;reset password&#x201d; process); and a second process including subprocesses d and e (e.g. related to &#x201c;distribution list&#x201d; process). Embodiments of the invention may accurately cluster different subprocesses into processes given only a small amount information about them: reoccurring sequences of actions.</p><p id="p-0065" num="0063">A distance between each pair of vectors may be created or calculated, and that distance may be used to cluster vectors. Clustering may then be performed using the distances calculated. Each subprocess may be associated with a cluster such that subprocesses related to the same process (e.g. business process) are associated to the same cluster. This may be performed for example using a Louvain method for community detection which may find or determine clusters by maximizing the graph's modularity. Other suitable clustering or community detection methods may be used. Each subgroup may be initially set or seeded as a cluster. A calculation may be iteratively or repeatedly performed such that in each iteration or repetition, for each cluster, a modularity may be calculated for the cluster to determine which cluster maximizes the modularity of the graph of clusters.</p><p id="p-0066" num="0064">Processes may be named. For example, the process name may be derived by the most common words in its subprocesses' names.</p><p id="p-0067" num="0065">The operations of <figref idref="DRAWINGS">FIG. <b>2</b></figref> are examples only, and different operations may occur in different embodiments.</p><p id="p-0068" num="0066">In some embodiments, operations such as in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may result in a table or data structure including each actual action taken by a user, where each entry includes details on the actual action taken by a user, including the name or ID of the user, the time the action was taken (e.g. start or stop time or both), and a general or standardized name for the action (e.g. not including a user name or ID, and not including a time). Such a table may include the process in which each real or actual action takes place, or which each action is assigned. Such data&#x2014;correlating real actions to data such as action time, user name, generalized name, and/or process assigned to an action&#x2014;may be stored in one database or table, or a set of tables.</p><p id="p-0069" num="0067">In some embodiments, a table or other data structure (an example of which is referred to herein as q* or q(s,a) may be populated with generalized versions of all collected actual action data, showing each pair of consecutive actions by any user as a state-action pair in a generalized form, where the first action in the pair describes the state the user's interaction with a computer was in before the second action takes place (multiple actual pairs of consecutive actions may correspond to such a generalized state-action pair). After a process iterates over received data, a total expected reward associated with each state-action pair may be determined based on a series of actual low-level user action information items, each associated with a process a computer is engaging in with the user. That q* or q(s,a) includes generalized versions may mean that multiple entries in all collected actual action data have one associated generalized entry in q* or q(s,a). Such state-action pairs may be found by accessing a table of all actual actions and defining a state-action pair as two consecutive actions (using timing data) taken by one person (using user name or ID data). Each state action pair in q* may have a &#x201c;q value&#x201d;, or a total expected score or reward over time, with the q value or reward over time indicates how beneficial, according to certain metrics, taking the action (the second item in the pair) is when in the state (the first item in the pair). In one embodiment an initial (possibly randomized) reward may be set, and a process may iterate over all entries in a table of actual entries, for each state-action pair modifying the reward or q value for the state-action pair entry in the q* table corresponding to the actual state-action pair (e.g. where the generalized description of each of the actual state and action correspond to the generalized description in q*). The modification may be based on the existing q-value for the state-action pair in q*, a reward based on a transition from the state using the action, and the best or maximum q-value for the action (the second item in the pair) when considered a state and paired with a further action.</p><p id="p-0070" num="0068">Referring back to example <figref idref="DRAWINGS">FIG. <b>3</b></figref>, as part of Event A, every day, a particular user (e.g. a call center agent) first may enter an ordering system to check if there are new orders: the agent opens the ordering system, fills-in username and password in the login screen, and then moves to the new orders screen. This step, though intuitive and simple, actually includes several low-level user actions such as the example in Table 1. First, the agent clicks twice on mouse left-click on the MyOrderingSystem icon over the desktop. Then, the login screen pops-up on the agent's screen or monitor, and the agent enter a username (e.g. &#x201c;Agent<b>1</b>&#x201d;) and password (e.g. &#x201c;myPassword&#x201d;) and successfully logs in. Finally, the agent clicks on mouse left-click on the NewOrders view inside the MyOrderingSystem to display new orders.</p><p id="p-0071" num="0069">There are significant differences between the low-level process mining compared to the prior art process mining approaches which are based on event logs: each action is low-level, state-less and unlabeled, there is no information about its respective activity or process. In particular, the lack of case ID makes this problem unsupervised.</p><p id="p-0072" num="0070">In some embodiments the input data Win-32 event logs files collected by a client process on an agent computer such as the NICE RT Client process, and exported using for example JSON files to a server. Such files may contain detailed information on the various desktop-events that were executed by the user, including, for example:</p><p id="p-0073" num="0071">Action time</p><p id="p-0074" num="0072">User details</p><p id="p-0075" num="0073">Action details: e.g. mouse-click, text-input, keyboard command, etc.</p><p id="p-0076" num="0074">Window details: e.g. window-size, window-name, etc.</p><p id="p-0077" num="0075">Text that was submitted if any</p><p id="p-0078" num="0076">A generalization process may ensure that actions with the same business functionality, or which are functionally equivalent in terms of use within an embodiment of the invention, are be considered as identical even though they may seem slightly different due to different details such as time or user ID. Such a process may improve model accuracy. Data such as Win-32 event logs of user's actions may be received or loaded from, e.g. the client data collection software <b>4</b> and the various fields may be extracted and stored in a database. An action may include the following example data fields (other or different fields may be used):</p><p id="p-0079" num="0077">Action time;</p><p id="p-0080" num="0078">User details (e.g. user ID, user name, etc.);</p><p id="p-0081" num="0079">Action details: e.g. mouse-click, text-input, keyboard command, etc.;</p><p id="p-0082" num="0080">Window details: window-size, window-name, etc.; and</p><p id="p-0083" num="0081">Text that was submitted if any.</p><p id="p-0084" num="0082">In addition, each action may be associated with a &#x2018;description&#x2019; or string, which may summarize the action's information, for example in a text string, for example an action description or string may be &#x201c;User Click(LeftClick) on Create New Employee in Internet Explorer&#x201d;. This string may be used as a unique identifier of the action's functionality such that different actions will be associated with a different description. For the following example action data:</p><p id="p-0085" num="0083">Action time<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0084">10:00:10</li>    </ul>    </li></ul></p><p id="p-0086" num="0085">User details<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0086">Agent<b>1</b></li>    </ul>    </li></ul></p><p id="p-0087" num="0087">Action details: is it mouse-click, text-input, keyboard command, etc.<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0088">InputText</li>    </ul>    </li></ul></p><p id="p-0088" num="0089">Window details:<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0090">Application: Internet Explorer</li>        <li id="ul0008-0002" num="0091">Window Name: &#x201c;MyOrderingSystem-Login&#x201d;</li>        <li id="ul0008-0003" num="0092">Action Component: Username</li>    </ul>    </li></ul></p><p id="p-0089" num="0093">Text that was submitted (in text actions)<ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0000">    <ul id="ul0010" list-style="none">        <li id="ul0010-0001" num="0094">&#x201c;Agent<b>1</b>&#x201d;<br/>the following description may be created (a description may be in other formats).</li>        <li id="ul0010-0002" num="0095">&#x201c;User InputText(Agent<b>1</b>) on Username in MyOrderingSystem-Login&#x2014;iexplore&#x201d;</li>    </ul>    </li></ul></p><p id="p-0090" num="0096">The description may summarize the action's information, but may have unnecessary information (e.g. may be noisy) due to various tokens such as names, addresses, IP numbers, etc. For example, in the two following action descriptions:</p><p id="p-0091" num="0097">&#x201c;User InputText(Agent<b>1</b>) on Username in MyOrderingSystem-Login&#x2014;iexplore&#x201d;</p><p id="p-0092" num="0098">&#x201c;User InputText(Agent <b>2</b>) on Username in MyOrderingSystem-Login&#x2014;iexplore&#x201d;</p><p id="p-0093" num="0000">both represent the same functionality of inserting username (e.g. Agent<b>1</b>, Agent <b>2</b>) in the Username field, but the two descriptions are different as each contains a different name. In order to be able to express the identity of the two different actions, a generalization process may substitute or replace the certain tokens or data items (e.g., the &#x201c;name&#x201d; token) with more general or placeholder descriptions, or remove certain tokens. For example, the above two descriptions can be both be generalized as the following single description or text string, which applies to both: &#x201c;User InputText(NAME) on Username in MyOrderingSystem-Login&#x2014;iexplore&#x201d;. While in one embodiment only names generalization (e.g. of a name or user ID field) is used, a similar generalization process may be performed for other fields as well. The generalization process may return for example, a database where each entry for a specific unique instance of an actions includes a field including a generalized name for that action that may be shared with other actions.</p><p id="p-0094" num="0099">A model may be created based on action data. A model may be based on an internal reward assigned to an &#x201c;agent&#x201d;, which may be a computer process using, creating or operating a model. For example, at each point in time, or at the time of each action by a user, either of which may be defined by a timestep t, agent current state is S<sub>t </sub>may be defined using for example the description or string defining of its previous executed action. For example, a user state may be defined by the action string &#x201c;User InputText(Agent<b>1</b>) on Username in MyOrderingSystem-Login&#x2014;iexplore&#x201d;. The user may execute a user-action A<sub>t </sub>(e.g., Left-clicks on the Reset-Password button). This user action may be used by a process to generate an internal rating, score, or reward R<sub>t </sub>with regards to its last executed action, which may rate that action in terms of whether the action was efficient or recommended. The use of a score may define a reward-mechanism which will purposely guide the user towards the most efficient process execution.</p><p id="p-0095" num="0100">A model may be created or learned online, based on past agent actions while the users are not working, and may be updated online, while users are working. Using a learned model, the user's current process may be estimated or determined. While a user's actions continue within the same process, the reward will vary according to the time T (e.g. in seconds) taken to execute the action, e.g. according to the formula for the reward at time point t:</p><p id="p-0096" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <msub>   <mi>R</mi>   <mi>t</mi>  </msub>  <mo>=</mo>  <mfrac>   <mn>1</mn>   <mi>T</mi>  </mfrac> </mrow></math></maths></p><p id="p-0097" num="0000">If the user deviates to another, different business process, the reward may be strongly negative, e.g. R<sub>t</sub>=&#x2212;100.</p><p id="p-0098" num="0101">For example, if the user's computer system is operating a process (e.g. as estimated or determined based on user actions) of &#x201c;reset password&#x201d;, then as long as the user continues progressing on this process, the agent analyzing the workflow will assign a score or reward after each action which is determined according to the duration of the action, e.g. the time from the completion of the last action for the user to the completion of the current action by the user:</p><p id="p-0099" num="0102">i. Action #1: 10 seconds, reward will be 1/10</p><p id="p-0100" num="0103">ii. Action #2: 2 seconds, reward will be 1/2</p><p id="p-0101" num="0104">iii. . . .</p><p id="p-0102" num="0105">A score or reward based on time may be normalized to the type of action, as some actions may typically take longer than others. If the user then enters an action causing the computer system to deviate to a different process, e.g., an &#x201c;add new user&#x201d; process, then it's the score or reward may be a highly negative reward, e.g. &#x2212;100, in order to make sure this deviation will be enforced.</p><p id="p-0103" num="0106">Based on a model setup, an optimal policy &#x3c0;*, may be found, a function that takes the current state to return the most efficient next-action. A state-action pair Q-function may take as input of a state-action pair and return a real value. A state may be defined as the last completed action, typically a description of a low-level action that includes information about the action itself and its context, e.g. window name, field name, program executing window (e.g. the Internet Explorer Browser) etc. The optimal Q-function q*(s, a) may be the expected total (e.g. cumulative) reward received by an agent starting in action a, if the user behave optimally afterwards. Therefore, q*(s, a) may be an indication for how good it is for a user to pick action a while being in state s. For any pair of state and action, q* returns the total reward of the &#x201c;optimal&#x201d; user who will behave optimally in order to maximize his reward (note a reward or score is an internal measure, typically not shown to the user inputting actions, but rather used by the computerized agent evaluating actions).</p><p id="p-0104" num="0107">An agent&#x2014;computer-implemented process predicting a best next user action&#x2014;may have limited knowledge, such as the set of possible states and actions, and the current state. Thus, the agent, via a model, may actively learn through the experience of interactions with the environment.</p><p id="p-0105" num="0108">In some embodiments, a modification of a known Q-Learning process may be used to learn the most desirable, effective or efficient next action for a user to take. An embodiment may approximate the state-action pairs Q-function from the samples of q(s, a), where s is a state and a is an action, that are observed during user interaction with a computer system.</p><p id="p-0106" num="0109">In one embodiment, a table &#x3c0;* describing an optimal policy may be created. An example table &#x3c0;* is shown below in Table 2 and may include state/best next action pairs, where the state is defined be an action including as its description context for the action. For example, in one embodiment, data representation of an action, and data representation of a state, include what action was taken, what field if any (e.g. Username, Ordernumber), the action is taken in, the name of the window, and the program (e.g. Internet Explorer, the Excel spreadsheet program) operating the window.</p><p id="p-0107" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="105pt" align="left"/><colspec colname="2" colwidth="112pt" align="left"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 2</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>State</entry><entry>Best next-action</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>User InputText on Username in</entry><entry>User InputText on Password in</entry></row><row><entry>MyOrderingSystem-Login -</entry><entry>MyOrderingSystem-Login -</entry></row><row><entry>iexplore</entry><entry>iexplore</entry></row><row><entry>User Copy(Ctrl + C) on</entry><entry>User Paste(Ctr + V) on</entry></row><row><entry>OrderNumber in</entry><entry>OrderNumber in</entry></row><row><entry>myExcelSheet.xls - EXCEL</entry><entry>MyOrderingSystem-Orders - iexplore</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0108" num="0110">A table q*, also termed q(s,a) may be created describing the optimal state action function: q* may be a table where each pair state-next action is paired with a reward or score. An example table q* is shown below in Table 3 which may include state/best next action pairs, each with an associated reward or score for taking that action.</p><p id="p-0109" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="91pt" align="left"/><colspec colname="2" colwidth="91pt" align="left"/><colspec colname="3" colwidth="35pt" align="center"/><thead><row><entry namest="1" nameend="3" rowsep="1">TABLE 3</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry/><entry/><entry>Reward/</entry></row><row><entry>State</entry><entry>Best next-action</entry><entry>q* value</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="91pt" align="left"/><colspec colname="2" colwidth="91pt" align="left"/><colspec colname="3" colwidth="35pt" align="char" char="."/><tbody valign="top"><row><entry>User InputText on</entry><entry>User InputText on</entry><entry>15</entry></row><row><entry>Username in</entry><entry>Password in</entry></row><row><entry>MyOrderingSystem-Login -</entry><entry>MyOrderingSystem-Login -</entry></row><row><entry>iexplore</entry><entry>iexplore</entry></row><row><entry>User Copy(Ctrl + C) on</entry><entry>User Paste(Ctr + V) on</entry><entry>10.5</entry></row><row><entry>OrderNumber in</entry><entry>OrderNumber in</entry></row><row><entry>myExcelSheet.xls - EXCEL</entry><entry>MyOrderingSystem-Orders -</entry></row><row><entry/><entry>iexplore</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0110" num="0111">To create q*, a table may be initialized with each state collected by the system (in a generalized form, e.g. with no specific user name) paired with a next action which at initialization is not the &#x201c;best&#x201d; action, with an associated q* value or reward initialized to a pre-set value, e.g. 0.5, or a random value, e.g. between 0 and 1. The initialized q* table may include a generalized form of each consecutive set of specific actions found for specific users (e.g. a consecutive set of actions taken or input by a specific user, the consecutiveness determined by timestamp for the actions); since q* includes generalized forms of states and actions, multiple actual state-action pairs in the real data may point to one generalized entry in q*. Initialization may be performed for generalized actions, and thus may be across data for all users having entered action data. Each action in q* may be a generalized form, e.g. with specific data such as a name or user ID generalized to a blank or common token, or removed. A learning rate parameter alpha &#x3b1; (0&#x3c;&#x3b1;&#x3c;1) may be set or initialized. In one embodiment, &#x3b1;=0.5 may be used.</p><p id="p-0111" num="0112">For all collected actions, across all users, a learning process may iterate over the actions. For each action a which is a transition to a new state s&#x2032; after or based on action a, the rating or reward r(s, a) in q* of taking action a when in state s may be modified or adjusted. A process may iterate over all actions in a given sequence (e.g. a time ordered sequence for a particular user) and initialize the reward or q value by for example reducing the reward based on the amount of time a user spends before taking the next action (the longer the user takes, the less desirable the action) and reducing the reward by an amount if the user switches processes. The following example formulas may be used to modify initial q/reward values:</p><p id="p-0112" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mtext>                </mtext>     <mrow>      <mrow>       <mi>q</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>s</mi>        <mo>,</mo>        <mi>a</mi>       </mrow>       <mo>)</mo>      </mrow>      <mo>=</mo>      <mrow>       <mrow>        <mrow>         <mo>(</mo>         <mrow>          <mn>1</mn>          <mo>-</mo>          <mi>&#x3b1;</mi>         </mrow>         <mo>)</mo>        </mrow>        <mo>&#xb7;</mo>        <mrow>         <mi>q</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <mrow>          <mi>s</mi>          <mo>,</mo>          <mi>a</mi>         </mrow>         <mo>)</mo>        </mrow>       </mrow>       <mo>+</mo>       <mrow>        <mi>&#x3b1;</mi>        <mo>&#xb7;</mo>        <mrow>         <msub>          <mi>q</mi>          <mrow>           <mi>o</mi>           <mo>&#x2062;</mo>           <mi>b</mi>           <mo>&#x2062;</mo>           <mi>s</mi>          </mrow>         </msub>         <mo>(</mo>         <mrow>          <mi>s</mi>          <mo>,</mo>          <mi>a</mi>         </mrow>         <mo>)</mo>        </mrow>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>1</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00002-2" num="00002.2"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mtext>                </mtext>     <mrow>      <mrow>       <msub>        <mi>q</mi>        <mrow>         <mi>o</mi>         <mo>&#x2062;</mo>         <mi>b</mi>         <mo>&#x2062;</mo>         <mi>s</mi>        </mrow>       </msub>       <mo>(</mo>       <mrow>        <mi>s</mi>        <mo>,</mo>        <mi>a</mi>       </mrow>       <mo>)</mo>      </mrow>      <mo>=</mo>      <mrow>       <mrow>        <mi>r</mi>        <mo>&#x2061;</mo>        <mo>(</mo>        <mrow>         <mi>s</mi>         <mo>,</mo>         <mi>a</mi>        </mrow>        <mo>)</mo>       </mrow>       <mo>+</mo>       <mrow>        <mrow>         <mi>&#x3b3;</mi>         <mo>&#xb7;</mo>         <munder>          <mrow>           <mi>max</mi>           <mtext>  </mtext>          </mrow>          <msup>           <mi>a</mi>           <mo>&#x2032;</mo>          </msup>         </munder>        </mrow>        <mo>&#x2062;</mo>        <mrow>         <mi>q</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <mrow>          <msup>           <mi>s</mi>           <mo>&#x2032;</mo>          </msup>          <mo>,</mo>          <msup>           <mi>a</mi>           <mo>&#x2032;</mo>          </msup>         </mrow>         <mo>)</mo>        </mrow>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>2</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00002-3" num="00002.3"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>r</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mrow>       <mi>s</mi>       <mo>,</mo>       <mi>a</mi>      </mrow>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mo>{</mo>      <mtable>       <mtr>        <mtd>         <mrow>          <mfrac>           <mn>1</mn>           <mi>T</mi>          </mfrac>          <mo>,</mo>         </mrow>        </mtd>        <mtd>         <mrow>          <mi>Agent</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>continues</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>on</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>the</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>same</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>process</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>till</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>its</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>end</mi>         </mrow>        </mtd>       </mtr>       <mtr>        <mtd>         <mrow>          <mrow>           <mo>-</mo>           <mn>100</mn>          </mrow>          <mo>,</mo>         </mrow>        </mtd>        <mtd>         <mrow>          <mi>Agent</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>deviated</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>to</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>different</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>process</mi>         </mrow>        </mtd>       </mtr>      </mtable>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>3</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0113" num="0113">For each sequential in time pair of actions for a specific user in actual data, a generalized state-action pair (s, a) in q* may be found (note a state and action may be described by the same data). The reward q(s,a), taken from q*, is multiplied by a learning parameter subtracted from 1 (1&#x2212;&#x3b1;), and this is added to the learning parameter a multiplied by g<sub>obs</sub>, a determination of future reward for the generalized state-action pair in q*. g<sub>obs </sub>may be calculated by adding a score r(s, a) which measures the benefit or desirability of taking action a while in state s (taking into account time taken for the action, and whether or not the action moved the state to a different process, e.g. if the process the state is associated with is altered by the action) to a factor gamma (&#x3b3;, which may be a discount factor determining the importance of future rewards, as is known in Q-learning) multiplied by the maximum reward or q-value found in q* for the new state s&#x2032; (which is the action a input into the process). The maximum reward or q-value is the state action pair s&#x2032;-a&#x2032; for a state s&#x2032; (the action a) paired with the action a&#x2032; in q* producing the highest reward or q-value (the current highest, as the values change as the process iterates). In eq. 2, s&#x2032; and 'a may indicate all the state/action pairs in the input data.</p><p id="p-0114" num="0114">A gamma (&#x3b3;) of <b>0</b> may make the process &#x201c;opportunistic&#x201d; by only considering current rewards, while a &#x3b3; approaching 1 may make it strive for a long-term high reward. The learning rate or step size (denoted with alpha, &#x3b1;) may determine to what extent new reward information overrides old reward information. An &#x3b1; of 0 may result in no learning, while an &#x3b1; of 1 may cause a formula to consider only the most recent information.</p><p id="p-0115" num="0115">r(s, &#x3b1;) may be 1/t if no process is changed, where t is the time taken to complete the action, which in one embodiment is the time from completion of the last actual action to the current actual action. r(s, &#x3b1;) may be negative&#x2014;e.g. &#x2212;100&#x2014;if a process is changed from the state s to the action a. Both the time (t) and process associated with both the state and the action may be stored in a table or database associated with actions: each action may be associated with a specific description (e.g. including user ID and time), a general description, and a process. States may be associated with a process as described in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, as states may be described as actions in such a table. Each state and action may be assigned a process, e.g. as per the operations of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Other specific equations may be used; for example computing reward r(s,a) may be performed in a different manner, and/or using different parameters (e.g. not &#x2212;100).</p><p id="p-0116" num="0116">From eq. 3, it can be seen that the reward is strongly negative if a new process is deviated to, and otherwise is the inverse of the time taken for the action. The q-value, which may be the quality or reward for the action, or the expected total reward across all future action by an agent starting in state s and action a, then behaving optimally afterwards till the process end. may be calculated based on a formula such eq. 2, g<sub>obs</sub>.</p><p id="p-0117" num="0117">Since typically all user data is used to create q*, it can be considered that multiple user paths (multiple series of user actions input to an application), across different users, are used to modify the q-value or reward, and thus q* reflects multiple different user paths.</p><p id="p-0118" num="0118">A database or table &#x3c0;* describing an optimal policy may be created based on q*. For each state s in q*, all entries in q* may be iterated over to find the s-a transition (e.g. the pair s-a) in q* with the highest transition probability, which may be considered the estimated probability from state s to action a. For each state s, all state action pairs in q* may be iterated over using eq. 4, and the action a producing the highest TRANSITIONPROBABILITY from state s, per eq. 4, is deemed to be the action with the highest probability: the pair s-a (where a has the highest TRANSITIONPROBABILITY) is placed in Tr. Such a process is performed for each state s, so that eincludes one s-a pair for each s in p*. At the beginning of the iteration &#x201c;maxprob&#x201d; may be set to zero, and at each iteration within a set of iterations for s, if the result of eq. 4 is greater than maxprob, maxprob is replaced by the result of eq. 4 and the action a deemed to have the highest probability is replaced by the action resulting in maxprob. Thus the action a producing maxprob, which is a highest (yet found) reward or q-score for that particular state is returned after iterating over all a paired with a given s.</p><p id="p-0119" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>TRANSITION</mi>      <mo>&#x2062;</mo>      <mtext>   </mtext>      <mi>PROBABILITY</mi>      <mo>&#x2062;</mo>      <mtext>   </mtext>      <mrow>       <mo>(</mo>       <mrow>        <mrow>         <mi>CURRENT</mi>         <mo>&#x2062;</mo>         <mtext>   </mtext>         <mi>ACTION</mi>        </mrow>        <mo>,</mo>        <mi>ACTION</mi>       </mrow>       <mo>)</mo>      </mrow>     </mrow>     <mo>=</mo>     <mfrac>      <mrow>       <mi>q</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>s</mi>        <mo>,</mo>        <mi>a</mi>       </mrow>       <mo>)</mo>      </mrow>      <mrow>       <msub>        <mo>&#x2211;</mo>        <msup>         <mrow>          <mi>a</mi>          <mtext> </mtext>         </mrow>         <mo>&#x2032;</mo>        </msup>       </msub>       <mrow>        <mi>q</mi>        <mo>&#x2061;</mo>        <mo>(</mo>        <mrow>         <mi>s</mi>         <mo>,</mo>         <msup>          <mi>a</mi>          <mo>&#x2032;</mo>         </msup>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>eq</mi>     <mo>.</mo>     <mtext>  </mtext>     <mn>4</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0120" num="0119">In eq. 4, the q-score of a given s paired with a given a is divided by the sum of all q-scores for all a paired with the given s: s is fixed and a is iterated over. Another manner of selecting an s-a from q* to be placed in &#x3c0;* may be used.</p><p id="p-0121" num="0120">Database or table &#x3c0;* may define a policy, and may pair each state s with the action a which has the highest probability per eq. <b>4</b> above, or the highest q*, which may be an indication of process efficiency: e.g. continuing with the same process is efficient, and completing actions quickly is efficient. When determining what action to select for suggestion to a user, the current state s may be input into database or table &#x3c0;* to find the best action a to suggest. The optimal policy &#x3c0;* may be learned offline and stored in, e.g. learning (RL) model 36 Real-Time Recommendations Cache (<figref idref="DRAWINGS">FIG. <b>1</b>A</figref>). The optimal policy providing a recommendation to a given user may be thus based on user action information items gathered from many other users, including user processes associated with those actions and the time to complete information of those actions.</p><p id="p-0122" num="0121">At runtime, when a user is providing input to an application or GUI, at each timestep or period defined by user input, a process such as a real-time recommendation engine <b>38</b> (<figref idref="DRAWINGS">FIG. <b>1</b>A</figref>) may determine or estimate the next best user action based on current and recently executed user actions and propose it to the user using the optimal policy learned, e.g. according to &#x3c0;* (S), where s is current state of the agent.</p><p id="p-0123" num="0122">While p* and &#x3c0;* are created using data specific to individual users and specific actions taken, p* and &#x3c0;* are generalized models, applicable to all users in a system and updated by all user action in a system.</p><p id="p-0124" num="0123">The actual steps executed by users, e.g. user actions input to a user computer, may be used as feedback for real-time recommendation engine <b>38</b> (<figref idref="DRAWINGS">FIG. <b>1</b>A</figref>) and enable continuous optimization of the RL model <b>36</b> model or models (e.g. p* and &#x3c0;*). RL model <b>36</b> may be updated for example by using a modified version of equations 1-4 above. For example equations 5-8 may be used:</p><p id="p-0125" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mtext>	</mtext>     <mrow>      <mrow>       <mi>q</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>s</mi>        <mo>,</mo>        <mi>a</mi>       </mrow>       <mo>)</mo>      </mrow>      <mo>=</mo>      <mrow>       <mrow>        <mrow>         <mo>(</mo>         <mrow>          <mn>1</mn>          <mo>-</mo>          <mi>&#x3b1;</mi>         </mrow>         <mo>)</mo>        </mrow>        <mo>&#xb7;</mo>        <mrow>         <mi>q</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <mrow>          <mi>s</mi>          <mo>,</mo>          <mi>a</mi>         </mrow>         <mo>)</mo>        </mrow>       </mrow>       <mo>+</mo>       <mrow>        <mi>&#x3b1;</mi>        <mo>&#xb7;</mo>        <mrow>         <msub>          <mi>q</mi>          <mrow>           <mi>o</mi>           <mo>&#x2062;</mo>           <mi>b</mi>           <mo>&#x2062;</mo>           <mi>s</mi>          </mrow>         </msub>         <mo>(</mo>         <mrow>          <mi>s</mi>          <mo>,</mo>          <mi>a</mi>         </mrow>         <mo>)</mo>        </mrow>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>5</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00004-2" num="00004.2"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mtext>	</mtext>     <mrow>      <mrow>       <msub>        <mi>q</mi>        <mrow>         <mi>o</mi>         <mo>&#x2062;</mo>         <mi>b</mi>         <mo>&#x2062;</mo>         <mi>s</mi>        </mrow>       </msub>       <mo>(</mo>       <mrow>        <mi>s</mi>        <mo>,</mo>        <mi>a</mi>       </mrow>       <mo>)</mo>      </mrow>      <mo>=</mo>      <mrow>       <mrow>        <mi>r</mi>        <mo>&#x2061;</mo>        <mo>(</mo>        <mrow>         <mi>s</mi>         <mo>,</mo>         <mi>a</mi>        </mrow>        <mo>)</mo>       </mrow>       <mo>+</mo>       <mrow>        <mrow>         <mi>&#x3b3;</mi>         <mo>&#xb7;</mo>         <munder>          <mi>max</mi>          <msup>           <mi>a</mi>           <mo>&#x2032;</mo>          </msup>         </munder>        </mrow>        <mo>&#x2062;</mo>        <mtext>   </mtext>        <mrow>         <mi>q</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <mrow>          <msup>           <mi>s</mi>           <mo>&#x2032;</mo>          </msup>          <mo>,</mo>          <msup>           <mi>a</mi>           <mo>&#x2032;</mo>          </msup>         </mrow>         <mo>)</mo>        </mrow>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>6</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00004-3" num="00004.3"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mtext>	</mtext>     <mrow>      <mrow>       <mi>r</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>s</mi>        <mo>,</mo>        <mi>a</mi>       </mrow>       <mo>)</mo>      </mrow>      <mo>=</mo>      <mrow>       <mo>{</mo>       <mrow>        <mtable>         <mtr>          <mtd>           <mrow>            <mrow>             <mrow>              <mi>r</mi>              <mo>&#x2062;</mo>              <mrow>               <mo>(</mo>               <mrow>                <mi>s</mi>                <mo>,</mo>                <mi>a</mi>               </mrow>               <mo>)</mo>              </mrow>             </mrow>             <mo>+</mo>             <mn>10</mn>            </mrow>            <mo>,</mo>           </mrow>          </mtd>          <mtd>           <mrow>            <mi>proposed</mi>            <mo>&#x2062;</mo>            <mtext>  </mtext>            <mi>action</mi>            <mo>&#x2062;</mo>            <mtext>   </mtext>            <mi>was</mi>            <mo>&#x2062;</mo>            <mtext>   </mtext>            <mi>executed</mi>           </mrow>          </mtd>         </mtr>         <mtr>          <mtd>           <mrow>            <mfrac>             <mrow>              <mi>r</mi>              <mo>&#x2061;</mo>              <mo>(</mo>              <mrow>               <mi>s</mi>               <mo>,</mo>               <mi>a</mi>              </mrow>              <mo>)</mo>             </mrow>             <mn>2</mn>            </mfrac>            <mtext>&#x205f;</mtext>            <mo>,</mo>           </mrow>          </mtd>          <mtd>           <mrow>            <mi>proposed</mi>            <mo>&#x2062;</mo>            <mtext>  </mtext>            <mi>action</mi>            <mo>&#x2062;</mo>            <mtext>   </mtext>            <mi>was</mi>            <mo>&#x2062;</mo>            <mtext>   </mtext>            <mi>not</mi>            <mo>&#x2062;</mo>            <mtext>   </mtext>            <mi>executed</mi>           </mrow>          </mtd>         </mtr>        </mtable>        <mo>&#x2062;</mo>        <mtable>         <mtr>          <mtd>           <mtext>&#x205f;</mtext>          </mtd>         </mtr>         <mtr>          <mtd>           <mtext>&#x205f;</mtext>          </mtd>         </mtr>        </mtable>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>7</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00004-4" num="00004.4"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>TRANSITION</mi>      <mo>&#x2062;</mo>      <mtext>   </mtext>      <mi>PROBABILITY</mi>      <mo>&#x2062;</mo>      <mtext>   </mtext>      <mrow>       <mo>(</mo>       <mrow>        <mrow>         <mi>CURRENT</mi>         <mo>&#x2062;</mo>         <mtext>   </mtext>         <mi>ACTION</mi>        </mrow>        <mo>,</mo>        <mi>ACTION</mi>       </mrow>       <mo>)</mo>      </mrow>     </mrow>     <mo>=</mo>     <mfrac>      <mrow>       <mi>q</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>s</mi>        <mo>,</mo>        <mi>a</mi>       </mrow>       <mo>)</mo>      </mrow>      <mrow>       <msub>        <mo>&#x2211;</mo>        <msup>         <mrow>          <mi>a</mi>          <mtext> </mtext>         </mrow>         <mo>&#x2032;</mo>        </msup>       </msub>       <mrow>        <mi>q</mi>        <mo>&#x2061;</mo>        <mo>(</mo>        <mrow>         <mi>s</mi>         <mo>,</mo>         <msup>          <mi>a</mi>          <mo>&#x2032;</mo>         </msup>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>eq</mi>     <mo>.</mo>     <mtext>   </mtext>     <mn>8</mn>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0126" num="0124">Equations 5 and 6 may be used as with similar equations 1 and 2 above, and reward may be calculated by:<ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0000">    <ul id="ul0012" list-style="none">        <li id="ul0012-0001" num="0125">If the action proposed or presented to the user was executed by the user after the recommendation, as the next user action, the previous reward for the state-action pair may be increased, e.g. by 10:</li>    </ul>    </li></ul></p><p id="p-0127" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>r</i>(<i>s</i>, &#x3b1;)=<i>r</i>(<i>s</i>, &#x3b1;)+10<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0013" list-style="none">    <li id="ul0013-0001" num="0000">    <ul id="ul0014" list-style="none">        <li id="ul0014-0001" num="0126">If the action proposed was not executed as the next user action: its reward may be decreased for example by dividing in two:</li>    </ul>    </li></ul></p><p id="p-0128" num="0000"><maths id="MATH-US-00005" num="00005"><math overflow="scroll"> <mrow>  <mrow>   <mi>r</mi>   <mo>&#x2061;</mo>   <mo>(</mo>   <mrow>    <mi>s</mi>    <mo>,</mo>    <mi>a</mi>   </mrow>   <mo>)</mo>  </mrow>  <mo>=</mo>  <mfrac>   <mrow>    <mi>r</mi>    <mo>&#x2061;</mo>    <mo>(</mo>    <mrow>     <mi>s</mi>     <mo>,</mo>     <mi>a</mi>    </mrow>    <mo>)</mo>   </mrow>   <mn>2</mn>  </mfrac> </mrow></math></maths></p><p id="p-0129" num="0127">In such a manner the optimal policy &#x3c0;*(s) may be updated according to actual steps executed by the user in runtime and the RL model may continuously improve. Other formulas, and other increases or decreases to a reward, may be used.</p><p id="p-0130" num="0128">A process may first receive existing data, such as the tables or data structures &#x3c0;* (s) and a (s, a) . For every new action executed by a user, e.g. every action input to a GUI or application, a next action may be recommended: e.g. the current state, typically described by a last completed action may be input to &#x3c0;*(s) which may output a recommended best next action. An action may be recommended by for example displaying a pop-up window or other communication on a screen or monitor associated with a user computer.</p><p id="p-0131" num="0129">In response to the recommendation the user may take an action or provide input to an application or GUI on their computer&#x2014;the action may be the recommended action, or a different action. The reward or other internal rating may be updated by increasing the reward if the recommended or proposed action was taken, and may be reduced if the recommended or proposed action was not taken.</p><p id="p-0132" num="0130">An output or recommendation may be provided to a user in response to a user action by, for example, a process such as real-time recommendation local interface <b>8</b> which may, after a user action or input is received at a user computer (e.g. at program <b>6</b>), and after a process (e.g. real-time recommendation engine <b>38</b>) provides a recommended next action, may display a recommended action on a user display, e.g. via pop-up window or another process.</p><p id="p-0133" num="0131">The user may choose an action and enter the action to the relevant application or GUI&#x2014;in such a case choosing the suggested action or entering a different action may be considered a response. In one embodiment, a user may also, in addition provide input to the message displaying the next suggestion, e.g. accepting the suggestion (e.g. &#x201c;Next&#x201d;, confirming the suggestion) or not accepting the suggestion (e.g. &#x201c;No thanks&#x201d;, ignoring or cancelling the suggestion). The user's input, e.g. the user's actual action, or the user's feedback to the message may be used for feedback, e.g. &#x3c0;*(s) may be updated as described elsewhere.</p><p id="p-0134" num="0132"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of a method according to embodiments of the present invention. In some embodiments, the operations of <figref idref="DRAWINGS">FIG. <b>4</b></figref> may operate with modules and computer equipment such as shown in example <figref idref="DRAWINGS">FIG. <b>1</b></figref>, but in other embodiments other or different modules and equipment may be used.</p><p id="p-0135" num="0133">In operation <b>400</b>, a monitoring or data gathering process (e.g. client data collection software <b>4</b>, such as the NICE RT Client produced by NICE, Ltd.) executed on or by a user or agent terminal such as terminal <b>2</b> (e.g. a computer as shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>) may receive or gather computer or user activity data describing or related to low-level user action information or descriptions (e.g. low-level user action information item), which may be for example displayed on and input to a computer desktop system. Low-level user action information items may include for example an input type description and screen window information. In some embodiments, this may have been performed by, e.g. operation <b>300</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0136" num="0134">In operation <b>410</b>, processes may be estimated, or discovered and named, for example using operations as described in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0137" num="0135">In operation <b>420</b>, a model may be created describing an optimal policy which determines, based on a state (e.g. a user's last action or interaction with an application or set of applications, with a description of a context, e.g. window, for the action), what the best or optimal next action or input by the user is. The optimal policy &#x3c0;* may be a table learned or built offline (e.g. before a user interaction begins) based on historical data collected prior to a user interaction begins, typically based on many different users, and may be stored for example in a Real-Time Recommendations Cache.</p><p id="p-0138" num="0136">In operation <b>430</b>, a user may begin interacting with a program or API on a user computer, such that the user performs actions, which may be received by a program or module such as GUI <b>7</b> or program <b>6</b>.</p><p id="p-0139" num="0137">In operation <b>440</b>, a monitoring or data gathering process (e.g. software <b>4</b>) on a terminal such as terminal <b>2</b> may receive or gather computer or user activity data describing or related to low-level user action information or descriptions (e.g. a low-level user action information item describing an action, or input to a computer, taken by a user). In one embodiment, action information may be collected at a timestep t.</p><p id="p-0140" num="0138">In operation <b>450</b> a process (e.g. executed by server <b>30</b>) may, based on the user or application state (which may be the last or previous action input by the user) and the low-level user action information item (e.g. the current action, which is after the action deemed to be the state), determine a best next low-level user action. This may be performed, for example, based on a table or model such as &#x3c0;* (S), described elsewhere herein. Each state-action pair in such a table may be chosen or determined based on a total expected reward associated with the state-action pair.</p><p id="p-0141" num="0139">In operation <b>460</b>, the best, or one or more recommended, next low-level user action(s) may be provided, e.g. displayed, to the user. For example, an RT recommendation local interface <b>8</b> may provide or display a recommended next action. In one embodiment, the recommendation may be derived from or be the action's description in a table or database such as &#x3c0;*, e.g., &#x201c;Copy TEXT from FieldA in ScreenB&#x201d;.</p><p id="p-0142" num="0140">In operation <b>470</b>, the user may take an action (e.g. enter data into a GUI), and/or may respond to a message as presented in operation <b>460</b>, e.g. &#x201c;click&#x201d; or select an option or suggestion presented in operation <b>460</b>. A process such as data collection software <b>4</b> and/or a program <b>6</b> may receive a user action.</p><p id="p-0143" num="0141">In operation <b>480</b>, the user's input, e.g. an actual action, or feedback to a message may be used to modify or update a model, e.g. &#x3c0;*(s), as described elsewhere herein. For example, after receiving a user input or response, in response to the displaying of the best next low-level user action, the table (e.g. &#x3c0;*) may be modified based on the received user input.</p><p id="p-0144" num="0142"><figref idref="DRAWINGS">FIGS. <b>5</b>A and <b>5</b></figref> B are examples of output displayed according to embodiments of the present invention. <figref idref="DRAWINGS">FIGS. <b>5</b>A and <b>5</b></figref> B depict messages that may be displayed on a screen, for example as a pop-up, or in other forms. In <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, the suggestion to a user is to choose the items and quantity to credit or return. In some embodiments, the user may accept (e.g. clicking on Next) or reject (e.g. clicking on No thanks) the suggestion, providing feedback. In <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, multiple suggestions numbered 1-4 are provided to a user. In some embodiments, the user may provide feedback by clicking on the accepted item or action, or rejecting the suggestion by clicking on No thanks.</p><p id="p-0145" num="0143">Embodiments of the invention may improve the technologies of computer automation, big data analysis, and computer use and automation analysis. Existing technologies and non-technology based techniques to analyze computer use data to identify or determine automation opportunities suffer from numerous drawbacks, as explained elsewhere herein. For example, existing technologies are not capable of using low-level desktop events as input data. A human attempting to perform such an analysis would be faced with an unreasonably large amount of data. This is, as a practical matter, impossible to be performed by a human. Embodiments of the present invention may include a practical application of a series of algorithms which result in user actions causing optimal use of computer applications. Some embodiments may be agnostic to the domain (e.g. the platform and specific programs as well as customer type, segment market, etc.) and language used for user interfaces, or other data, and may work with any data, for any specific programs the user interfaces with.</p><p id="p-0146" num="0144">One skilled in the art will realize the invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. The foregoing embodiments are therefore to be considered in all respects illustrative rather than limiting of the invention described herein. Scope of the invention is thus indicated by the appended claims, rather than by the foregoing description, and all changes that come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein.</p><p id="p-0147" num="0145">In detailed description, numerous specific details are set forth in order to provide an understanding of the invention. However, it will be understood by those skilled in the art that the invention can be practiced without these specific details. In other instances, well-known methods, procedures, and components, modules, units and/or circuits have not been described in detail so as not to obscure the invention. Some features or elements described with respect to one embodiment can be combined with features or elements described with respect to other embodiments.</p><p id="p-0148" num="0146">Although embodiments of the invention are not limited in this regard, discussions utilizing terms such as, for example, &#x201c;processing,&#x201d; &#x201c;computing,&#x201d; &#x201c;calculating,&#x201d; &#x201c;determining,&#x201d; &#x201c;establishing&#x201d;, &#x201c;analyzing&#x201d;, &#x201c;checking&#x201d;, or the like, can refer to operation(s) and/or process(es) of a computer, a computing platform, a computing system, or other electronic computing device, that manipulates and/or transforms data represented as physical (e.g., electronic) quantities within the computer's registers and/or memories into other data similarly represented as physical quantities within the computer's registers and/or memories or other information non-transitory storage medium that can store instructions to perform operations and/or processes.</p><p id="p-0149" num="0147">The term set when used herein can include one or more items. Unless explicitly stated, the method embodiments described herein are not constrained to a particular order or sequence. Additionally, some of the described method embodiments or elements thereof can occur or be performed simultaneously, at the same point in time, or concurrently.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230004586A1-20230105-M00001.NB"><img id="EMI-M00001" he="5.25mm" wi="76.20mm" file="US20230004586A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002 MATH-US-00002-2 MATH-US-00002-3" nb-file="US20230004586A1-20230105-M00002.NB"><img id="EMI-M00002" he="19.05mm" wi="76.20mm" file="US20230004586A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230004586A1-20230105-M00003.NB"><img id="EMI-M00003" he="13.04mm" wi="76.20mm" file="US20230004586A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004 MATH-US-00004-2 MATH-US-00004-3 MATH-US-00004-4" nb-file="US20230004586A1-20230105-M00004.NB"><img id="EMI-M00004" he="33.19mm" wi="76.20mm" file="US20230004586A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00005" nb-file="US20230004586A1-20230105-M00005.NB"><img id="EMI-M00005" he="5.25mm" wi="76.20mm" file="US20230004586A1-20230105-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for analyzing computer actions on a computer desktop system, the method comprising using one or more computers:<claim-text>using a data gathering process by data collection software executed by a processor on a first computer of the one or more computers, gathering a low-level user action information item describing input by a user to one of a plurality of software programs via a desktop system, the software programs separate from the data collection software, the low-level user action information item input to the desktop system and comprising an input type description, and screen window information;</claim-text><claim-text>based on the low-level user action information item and a current state of a user's interaction with a software program of the plurality of software programs, determining a best next low-level user action using reinforcement learning, wherein determining the best next low-level user action comprises choosing a state-action pair based on a total expected reward associated with the state-action pair, the total expected reward based on the amount of time a user spends before taking a next-action;<claim-text>on the first computer, displaying the best next low-level user action; and</claim-text></claim-text><claim-text>receiving a user input in response to the displaying of the best next low-level user action and modifying a table based on user input received in response to the displaying.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining a next best low-level user action comprises accessing the table.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the total expected reward is normalized to a type of action taken by the user.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the modification increases an internal reward if the user executed the best next low-level user action and decreases the internal reward if the user did not execute the best next low-level user action.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the low level user action information item comprises event time, user identification, action description, a description of the screen window in which the action takes place, and the name of the program executing the window.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> comprising determining a total expected reward associated with a set of state-action pairs based on a series of actual low-level user action information items, each associated with a process the first computer is engaging in with the user.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the reward is based on whether or not the action alters a process associated with the state.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein receiving a user input estimates the best next low-level user action based on an exponential decay of user actions.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein determining a best next low-level user action is based on an internal reward associated with the transition to a new state based on an action, where the reward is based on whether the action causes a deviation to a different process.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> comprising performing an internal reward learning process which iterates over the actions, modifying the internal reward during the transition of the action to a new state.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining a best next low-level user action using reinforcement learning is built offline based on historical data.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A system for analyzing computer actions on a computer desktop system, the system comprising a memory and one or more computers configured to:<claim-text>execute a data gathering process by data collection software executed on a computer to gather a low-level user action information item describing input by a user to one of a plurality of software programs via a desktop system, the software programs separate from the data collection software, the low-level user action information item input to the desktop system and comprising an input type description, and screen window information;</claim-text><claim-text>based on the low-level user action information item and a current state of a user's interaction with a software program of the plurality of software programs, determine a best next low-level user action using reinforcement learning, wherein determining the best next low-level user action comprises choosing a state-action pair based on a total expected reward associated with the state-action pair, the total expected reward based on the amount of time a user spends before taking a next-action;</claim-text><claim-text>on the computer, display the best next low-level user action; and</claim-text><claim-text>receive a user input in response to the displaying of the best next low-level user action and modify a table based on user input received in response to the displaying.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein determining a next best low-level user action comprises accessing the table.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the total expected reward is normalized to a type of action taken by the user.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the modification increases an internal reward if the user executed the best next low-level user action and decreases the internal reward if the user did not execute the best next low-level user action.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the low level user action information item comprises event time, user identification, action description, a description of the screen window in which the action takes place, and the name of the program executing the window.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the one or more computers are configured to determine a total expected reward associated with a set of state-action pairs based on a series of actual low-level user action information items, each associated with a process the first computer is engaging in with the user.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the reward is based on whether or not the action alters a process associated with the state.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A method for analyzing user-computer interaction on a computer desktop system, the method comprising:<claim-text>gathering by data collection software a user action information item describing user input to one of a plurality of software programs via a desktop system, the software programs separate from the data collection software, the user action information item input to the desktop system and comprising an input type description, and screen window information;</claim-text><claim-text>determining a recommended next user action based on the user action information item and a current state of a user's interaction with a software program of the plurality of software programs using reinforcement learning, user action information items gathered from other users, and the user processes and time to complete information of the user action information items gathered from other users, each recommended next user action chosen based on a total expected reward associated with the next user action;</claim-text><claim-text>providing to a user the recommended next user action; and</claim-text><claim-text>receiving a user input in response to the providing of the recommended action and modifying a table based on user input received in response to the displaying.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein determining a recommended low-level user action comprises accessing the table.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the total expected reward is normalized to a type of action taken by the user.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the modification increases an internal reward if the user executed the recommended user action and decreases the internal reward if the user did not execute the recommended user action.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the user action information item comprises event time, user identification, action description, a description of the screen window in which the action takes place, and the name of the program executing the window.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein the reward is based on whether or not the action alters the process associated with the state.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. A method for analyzing computer actions on a computer desktop system, the method comprising using one or more computers:<claim-text>using a data gathering process by data collection software executed by a processor on a first computer of the one or more computers, gathering a low-level user action information item describing input by a user to one of a plurality of software programs via a desktop system, the software programs separate from the data collection software, the low-level user action information item input to the desktop system and comprising an input type description, and screen window information;</claim-text><claim-text>based on the low-level user action information item and a current state of a user's interaction with a software program of the plurality of software programs, determining a best next low-level user action using reinforcement learning, wherein determining the best next low-level user action is based on an internal reward associated with the transition to a new state based on an action, where the reward is based on a user time to complete the action and whether or not the action alters a process associated with the state; and</claim-text><claim-text>on the first computer, displaying the best next low-level user action.</claim-text></claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The method of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the reward is normalized to the type of action taken by the user.</claim-text></claim></claims></us-patent-application>