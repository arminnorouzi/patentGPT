<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005554A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005554</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17903390</doc-number><date>20220906</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>34</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>26</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>3495</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>0253</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>26</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>349</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">ROBUSTNESS-AWARE NAND FLASH MANAGEMENT</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17147539</doc-number><date>20210113</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11488678</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17903390</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Innogrit Technologies Co., Ltd.</orgname><address><city>Shanghai</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>ZHAO</last-name><first-name>Gang</first-name><address><city>Chandler</city><state>AZ</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Chen</last-name><first-name>Lin</first-name><address><city>Cupertino</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>CHEN</last-name><first-name>Jie</first-name><address><city>Milpitas</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Zhao</last-name><first-name>Qun</first-name><address><city>Pleasanton</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Systems, apparatus and methods are provided for performing program operations in a non-volatile storage system. In one embodiment, there is provided a method that may comprise categorizing active storage blocks of a non-volatile storage device into a robust group and a less-robust group based on a number of factors including page error count, program time and number of Program/Erase (P/E) cycles; determining that a cache program operation needs to be performed; selecting a first storage block from the robust group to perform the cache program operation; determining that a regular program operation needs to be performed; and selecting a second storage block from the less-robust group to perform the regular program operation.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="78.40mm" wi="129.12mm" file="US20230005554A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="213.78mm" wi="146.81mm" file="US20230005554A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="170.86mm" wi="143.17mm" file="US20230005554A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 17/147,539, filed Jan. 13, 2021, and entitled &#x201c;ROBUSTNESS-AWARE NAND FLASH MANAGEMENT,&#x201d; the entire content of which is incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The disclosure herein relates to the NAND flash device management and implementation, particularly relates to program operations for NAND flash device.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">The evolution of the modern computing system is driven in-part by the emergence of the Solid State Drives (SSDs) that have demonstrated higher performance of speed and latency over the traditional hard drives. Unlike hard drives that depend on the magnetism to store data, solid state drives use NAND flash devices to achieve data storage. The NAND flash devices are a family of integrated circuits that are manufactured by advanced process and assembly technologies to achieve multiple levels of vertical stacking of storages units into a small footprint of die and package for high capacity of storage.</p><p id="p-0005" num="0004">The increased storage capacity with new NAND flash process technology breakthroughs have also led to reduced reliability of the NAND storage cells. For NAND flash devices, a program operation refers to the operation that writes data into the NAND flash devices. And NAND flash devices normally contain bad blocks, which include factory bad blocks that are originally defective from the manufacture process and grown bad blocks that become defective after a number of PIE cycles. As a well-known behavior, the NAND storage cells begin to wear out with the increased number of program and erase (P/E) cycles, leading to an increased number of error counts and an increased number of grown bad blocks.</p><p id="p-0006" num="0005">NAND flash devices typically provide two kinds of program operations: regular program operations and cache program operations. Both program operations involve receiving data into cache registers (cache buffer), and moving the data into the data registers (data buffer) and the NAND storage cell arrays. The cache program operation will acknowledge the SSD controller upon the completion of data transfer from the cache buffer into the data buffer. In contrast, the regular program operation will not acknowledge the SSD controller until completion of data transfer into the NAND storage cell array, which takes a long time of program time (e.g., tPROG) in the order of several milliseconds.</p><p id="p-0007" num="0006">Most modern SSD controllers take advantage of the cache program operations to maximize the performance of writing to NAND flash devices. With this feature enabled, the SSD controller acknowledges the host of the Write command completion once hearing from the NAND device that the data has been moved from the cache buffer into the data buffer. This approach, however, has a potential risk of program error that the final operation to write data into the NAND storage cells may still encounter failure when the particular NAND block becomes defective without the knowledge of the SSD controller. This is particularly a challenge for NAND flash devices with an increasing number of grown bad blocks over time.</p><p id="p-0008" num="0007">To address the aforementioned problem of potential write failure into NAND storage array with a premature acknowledgement to the host, SSD controllers with an on-board DRAM can be configured to keep a copy of data in the DRAM until it is later confirmed to be successfully written to the NAND storage array. If the NAND reports a program error, the SSD controller can then simply conduct another program operation to the NAND device with the data from the DRAM.</p><p id="p-0009" num="0008">For a DRAM-less SSD controller, however, this poses a bigger challenge as the controller can only keep a small limited amount of data at its internal SRAM. The incoming Write commands from the host may quickly outpace the storage capability of the internal SRAM while the controller is still waiting for the slow confirmation from NAND storage device for the limited amount of data stored in the SRAM, leading to an overflow of the SRAM. As a result, the DRAM-less SSD controller may not be able to save all the temporary data to its internal SRAM during a cache program operation, which may lead a catastrophic failure that the data failed to save to NAND storage is also failed to recover from the SRAM. Existing solutions trying to improve this situation may have to limit the number of cache program operations with DRAM-less SSD controller, which results in a reduction of performance. Alternatively, existing solutions may also increase the amount of internal SRAM at the price of bigger die size and higher silicon cost.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0010" num="0009">The present disclosure provides a robustness-aware non-volatile storage device management technique to actively monitor the potential occurrence of grown bad blocks so as to minimize program errors. In various embodiments, the active storage blocks may be categorized into two groups (e.g., a robust group and a less-robust group) base on a number of factors, for example, average page error counts, program time (e.g., tPROG) and P/E cycle count. Different management policies may be applied to each of the two groups to achieve optimal performance with minimal probability of cache programing into a grown bad block. In one embodiment, a robustness score may be generated for an active block from the number of factors and the active block may be categorized into the robust or less-robust group by comparing the robustness score to a robustness threshold value.</p><p id="p-0011" num="0010">In an exemplary embodiment, there is provided a method that may comprise categorizing active storage blocks of a non-volatile storage device into a robust group and a less-robust group based on a number of factors including page error count, program time and number of Program/Erase (P/E) cycles; determining that a cache program operation needs to be performed; selecting a first storage block from the robust group to perform the cache program operation; determining that a regular program operation needs to be performed; and selecting a second storage block from the less-robust group to perform the regular program operation.</p><p id="p-0012" num="0011">In another exemplary embodiment, there is provided a non-volatile storage system. The non-volatile storage system may comprise a non-volatile storage device and a processor. The processor may be configured to categorize active storage blocks of the non-volatile storage device into a robust group and a less-robust group based on a number of factors including page error count, program time and number of Program/Erase (P/E) cycles; determine that a cache program operation needs to be performed; select a first storage block from the robust group to perform the cache program operation; determine that a regular program operation needs to be performed; and select a second storage block from the less-robust group to perform the regular program operation.</p><p id="p-0013" num="0012">In yet another exemplary embodiment, there is provided a non-transitory machine-readable medium. The non-transitory machine-readable medium may have computer instructions that when executed by a hardware processor, may cause the hardware processor to perform: categorizing active storage blocks of a non-volatile storage device into a robust group and a less-robust group based on a number of factors including page error count, program time and number of Program/Erase (P/E) cycles; determining that a cache program operation needs to be performed; selecting a first storage block from the robust group to perform the cache program operation; determining that a regular program operation needs to be performed; and selecting a second storage block from the less-robust group to perform the regular program operation.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF FIGURES</heading><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>1</b></figref> schematically shows a non-volatile storage system in accordance with an embodiment of the present disclosure.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>2</b></figref> schematically shows active storage blocks categorized into two groups in accordance with an embodiment of the present disclosure.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart of a process for performing program operations to a non-volatile storage device in accordance with an embodiment of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0017" num="0016">Specific embodiments according to the present disclosure will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.</p><p id="p-0018" num="0017">The present disclosure provides systems and methods for a robustness aware management of non-volatile storage devices. As used herein, a non-volatile memory device may be a computer storage device that can maintain stored information after being powered off, and the stored information may be retrieved after being power cycled (turned off and back on). Non-volatile storage devices may include NAND flash memories, NOR flash memories, magnetoresistive random Access Memory (MRAM), resistive random access memory (RRAM), phase change random access memory (PCRAM), Nano-RAM, etc. In the description, a NAND flash may be used as an example to demonstrate the controller implemented robustness aware non-volatile storage management techniques. However, various embodiments according to the present disclosure may implement the techniques with other types of non-volatile storage devices.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>1</b></figref> schematically shows a non-volatile storage system <b>100</b> in accordance with an embodiment of the present disclosure. The non-volatile storage system <b>100</b> may comprise a non-volatile storage controller <b>102</b> and a non-volatile storage device <b>104</b>. The non-volatile storage system <b>100</b> may provide data storage and/or access to stored data for a host when it is coupled to the host. The non-volatile storage device <b>104</b> may be a non-volatile memory (NVM) based storage device, for example, a NAND device. It should be noted that the non-volatile storage system <b>100</b> may comprise a plurality of non-volatile storage devices and the non-volatile storage device <b>104</b> may be shown as a representative for the plurality of non-volatile storage devices. The non-volatile storage controller <b>102</b> may comprise a processor <b>106</b> and a memory <b>108</b>. The processor <b>106</b> may be a computer processor, such as, but not limited to, a microprocessor or a microcontroller. The memory <b>108</b> may be a non-transitory computer-readable storage media, such as, DRAM or SRAM, to store computer executable instructions to be executed by the processor <b>106</b>.</p><p id="p-0020" num="0019">In various embodiments, which storage blocks in the non-volatile storage device <b>104</b> are bad (e.g., defective either from the manufacture process or after a number of P/E cycles) and which storage blocks in the non-volatile storage device <b>104</b> are good may be recorded so that the non-volatile storage controller <b>102</b> may use the good storage blocks for data storage (e.g., performing program operations). The good storage blocks may also be referred to as non-defective storage blocks or active storage blocks (or simply active blocks). Each active storage block may be categorized in one of two groups: a robust group and a less-robust group. The non-volatile storage controller <b>102</b> may manage program operations and storage block access based on the robustness group information. In one example embodiment, the cache program operation may be assigned to active blocks of the robust group to achieve high performance with increased reliability, while the regular program operations may be assigned to active blocks of the less-robust group where a program error can still be recovered.</p><p id="p-0021" num="0020">Moreover, the non-volatile storage controller <b>102</b> may also set its program access policies with the robustness group information. For example, host-initiated program commands may be carried out by cache program operations using active blocks from the robust group, to maximize the throughputs between the host and the non-volatile storage system <b>100</b>. In contrast, back-end program operations, such as, but not limited to, those involved in garbage collection and refresh, may be carried out by regular program operations using active blocks from the less-robust group when less performance may be needed.</p><p id="p-0022" num="0021">The non-volatile storage controller <b>102</b> may further improve the non-volatile storage device reliability by taking advantage of the robustness information of the blocks during the garbage collection. For example, at the end of a round of garbage collection, the non-volatile storage controller <b>102</b> may add an extra step of bad block scan for those blocks within the less-robust group. If a block becomes defective, it will be labeled as a bad block and removed from active use. This may make the efforts for scanning bad blocks more efficient because only active blocks of the less-robust blocks are targeted, which may be more likely to turn defective and have a higher risk of failure during a program operation.</p><p id="p-0023" num="0022">There are a number of indicators showing how robust a block may be before it turns completely defective, for example, the number of error bits of the pages within the block, the program time (e.g., tPROG) for programing the block, the number of P/E cycles of the block. In one embodiment, the non-volatile storage controller <b>102</b> may use these indicators as factors to determine whether a block is robust or less-robust. For example, the non-volatile storage controller <b>102</b> may evaluate number of error bits (or error count) during read operations with a smaller number of error count indicating a more robust block and a large number of error count indicating a less robust block. In one embodiment, for example, a worst-case page error count of 0.5% or less of the page size may indicate the block as a robust block. The non-volatile storage controller <b>102</b> may also evaluate the program time tPROG for a block, with a tPROG much shorter or longer than the manufacturer's specified program time showing potential physical issues inside the block. It should be noted that whether a number of error count is large or small, and whether a tPROG is long or short may be determined by tests for a particular non-volatile storage device and may be adjusted during the lifetime of the non-volatile storage device. Different non-volatile storage devices, for example, different brands, different batches by the same manufacturer, based on different architecture (e.g., Single Level Cell (SLC), Multi Level Cell (MLC), Tri Level Cell (TLC)), may all have different number of error count and/or tPROG during the lifetime of the non-volatile storage devices.</p><p id="p-0024" num="0023">In some embodiments, a Robustness Score, R may be generated based on these robustness factors and used to track the health and robustness of each active block. The higher the Robustness Score, the healthier and more robust the active block may be, and the less likely it will suddenly turn defective during the next cache program operation. In one embodiment, R may be represented by a function of a number of variables, e.g., R=R(x1, x2, x3, . . . ). The factors may be represented by the variables, which may include the program time tPROG, the page error count and P/E cycle count of a block. In one embodiment, for example, the average page error count within a block may be the variable x1, the most recent program time tPROG may be the variable x2, and the P/E cycle count may be the variable x3. The respective weight for each factor and mathematical relationships (e.g., linear, polynomial, log, etc.) for each factor may be obtained by experiments for the particular non-volatile storage device to be used. In some embodiments, the higher the page error count and the P/E cycle count, the less robust the block may be, thus the lower the robustness score. Also, the farther away from the manufacturer's specified program time, the lower the robustness score may be.</p><p id="p-0025" num="0024">Over the lifetime of the non-volatile storage device, the values of these robustness factors may change over time and the robustness score may be adjusted overtime as well. In one embodiment, the Robustness score may be updated by an interval in proportion to the increase of the P/E cycle counts. For example, the Robustness score may be updated with the increase of every 100 P/E cycles.</p><p id="p-0026" num="0025">In some embodiments, each of the robustness factors may be evaluated and a respective threshold values may be determined for each factor. For example, a page error count of 0.5% may be used as a threshold value for the page error count, 50% of the manufacture's rated P/E cycle count may be used as a threshold value for the number of P/E cycles, 20% within the manufacturer's specified program time may be used as a threshold value for the program time. In one embodiment, the robustness score may be assigned as an integer value from 0 to 7, with 0 indicating least robust and 7 indicating most robust. When all factors for a block are well below their threshold values, the robustness score for the block may be assigned as 7 to indicate the least risk. When all factors for the block are well above their threshold values, the robustness score for the block may be assigned as 0 to indicate the highest risk. An intermediate value of 3 may be assigned when there is only one factor above its threshold value.</p><p id="p-0027" num="0026">In some embodiments, some variables may be evaluated for their respective historical changes or rate of changes. For example, the differences or gradients in the page error count and the program times at two separate time stamps may be used to evaluate the robustness score. In one example implementation, a significant increase in the page error count tends to indicate a risky and less robust block, thus a lower robustness score may be assigned to the block. Also, a sharp increase in the tPROG time may result in a reduction of the robustness score of the block.</p><p id="p-0028" num="0027">The robustness score may have different value ranges in different embodiments. In addition to the 0 to 7 score range, which may be a four-bit value in one implementation, in another embodiment, the robustness score may be one single binary bit assigned to each block, with 1 representing a robust block and 0 representing a less robust block. In yet another embodiment, the robustness score may be represented with other number of bits, for example, 8 bits or one byte to represent a decimal range of 0 to 255.</p><p id="p-0029" num="0028">In some embodiments, active storage blocks may be categorized into the robust group and the less-robust group based on the robustness score R. In one embodiment, for example, a threshold value, R<sub>T</sub>, may be used to determine which group an individual active block may belong to. If an active block's robustness score R is larger than or equal to the threshold value, R&#x2265;R<sub>T</sub>, the block may be assigned to the robust group. If an active block's robustness score R is less than the threshold value, R&#x3c;R<sub>T</sub>, the block may be assigned to the less-robust group.</p><p id="p-0030" num="0029">In some embodiments, the robustness score threshold R<sub>T </sub>may be dynamically set and adjusted for achieving an optimal tradeoff between performance and reliability. A low threshold R<sub>T </sub>may prioritize performance over reliability by allowing more blocks in the robust group for the faster cache program operations, which may be a good option for the non-volatile storage devices in their early stage of lifetime when the least amount of grown bad blocks are expected. A high threshold R<sub>T </sub>may be preferred for non-volatile storage devices in their late stage of lifetime, which takes a more conservative approach to ensure maximum reliability with a little expected compromise of throughput and performance.</p><p id="p-0031" num="0030">In various embodiments, the robustness score threshold R<sub>T </sub>may be determined by testing the particular non-volatile storage device(s) to be used in the non-volatile storage system <b>100</b>. Different non-volatile storage devices, for example, manufactured by different manufacturers, based on different architecture (e.g., Single Level Cell (SLC), Multi Level Cell (MLC), Tri Level Cell (TLC)), may all have different robustness score thresholds and the thresholds may be adjusted during the lifetime of the non-volatile storage devices.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>2</b></figref> schematically shows active storage blocks categorized into two groups in accordance with an embodiment of the present disclosure. The first group may be a robust group <b>202</b> that may include active blocks that the non-volatile storage controller determines to be robust. The second group may be a less-robust group <b>204</b> that may include active blocks that the non-volatile storage controller determines to be less robust. In one embodiment, these two groups may be saved in the non-volatile storage device <b>104</b> and loaded into the memory <b>108</b> during the operations of the non-volatile storage system <b>100</b>.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart of a process <b>300</b> for performing program operations to a non-volatile storage device in accordance with an embodiment of the present disclosure.</p><p id="p-0034" num="0033">In block <b>302</b>, active storage blocks of a non-volatile storage device may be categorized into a robust group and a less-robust group based on a number of factors including page error count, program time and number of Program/Erase (P/E) cycles. In various embodiments, for example, a smaller number of error count, a shorter program time and a smaller number of P/E cycles may all indicate a block being more robust while a larger number of error count, a program time much shorter or longer than the manufacturer's specified program time and a larger number of P/E cycles may all indicate a block being less robust. In one embodiment, a robustness score for each active storage block may be generated based on the number of factors and the active storage blocks may be categorized into the robust group and the less-robust group by comparing the robustness score for each active storage block to a robustness threshold value. The robustness score may be adjusted during the lifetime of the non-volatile storage device while values of each of the factors may change over time. The robustness threshold value may further be adjusted over the lifetime of the non-volatile storage device.</p><p id="p-0035" num="0034">In block <b>304</b>, it may be determined that a cache program operation needs to be performed and in block <b>306</b>, a first storage block from the robust group may be selected to perform the cache program operation. Because a robust active storage block is less likely to report an error when writing data to storage cells, embodiments may select an active storage block from the robust group to perform a cache program operation to achieve high performance with heightened reliability.</p><p id="p-0036" num="0035">In block <b>308</b>, it may be determined that a regular program operation needs to be performed and in block <b>310</b>, a second storage block may be selected from the less-robust group to perform the regular program operation. Because a less-robust active storage block is more likely to report an error when storing data to storage cells, embodiments may select an active storage block from the less-robust group to perform a regular program operation so that a program error may be recovered.</p><p id="p-0037" num="0036">The process <b>300</b> and features of the non-volatile storage system <b>100</b> related to robustness may be implemented using software (e.g., executable by a computer processor (CPU, GPU, or both)), hardware (e.g., a field-programmable gate array (FPGA) or an application-specific IC (ASIC), firmware, or any suitable combination of the three. In one embodiment, for example, the process <b>300</b> and features of the non-volatile storage system <b>100</b> related to robustness may be programmed in computer processor executable instructions, stored in a non-transitory machine-readable medium (e.g., the non-volatile storage device <b>104</b>, hard drive, CD, DVD, etc.) and performed by the processor <b>106</b> (e.g., a microprocessor or a microcontroller) executing the executable instructions.</p><p id="p-0038" num="0037">In an exemplary embodiment, there is provided a method that may comprise categorizing active storage blocks of a non-volatile storage device into a robust group and a less-robust group based on a number of factors including page error count, program time and number of Program/Erase (P/E) cycles; determining that a cache program operation needs to be performed; selecting a first storage block from the robust group to perform the cache program operation; determining that a regular program operation needs to be performed; and selecting a second storage block from the less-robust group to perform the regular program operation.</p><p id="p-0039" num="0038">In one embodiment, determining that the cache program operation needs to be performed may comprise receiving a program command from a host and determining that the program command from the host needs to be performed by the cache program operation.</p><p id="p-0040" num="0039">In one embodiment, determining that the regular program operation needs to be performed may comprise initializing a back-end program operation and determining that the back-end program operation needs to be performed by the regular program operation.</p><p id="p-0041" num="0040">In one embodiment, the method may further comprise generating a robustness score for each active storage block based on the number of factors. Categorizing the active storage blocks into the robust group and the less-robust group may comprise comparing the robustness score for each active storage block to a robustness threshold value.</p><p id="p-0042" num="0041">In one embodiment, the robustness score for each active storage block may be set based on historical changes of at least some of the number of factors.</p><p id="p-0043" num="0042">In one embodiment, the robustness threshold value may be adjusted during a lifetime of the non-volatile storage device with the robustness threshold value being low at an early stage of usage and increased with usage.</p><p id="p-0044" num="0043">In one embodiment, the method may further comprise: initializing a garbage collection operation, determining that a block erased during the garbage collection operation belongs to the less-robust group, and performing a bad block scan on the block erased during the garbage collection operation.</p><p id="p-0045" num="0044">In another exemplary embodiment, there is provided a non-volatile storage system. The non-volatile storage system may comprise a non-volatile storage device and a processor. The processor may be configured to categorize active storage blocks of the non-volatile storage device into a robust group and a less-robust group based on a number of factors including page error count, program time and number of Program/Erase (P/E) cycles; determine that a cache program operation needs to be performed; select a first storage block from the robust group to perform the cache program operation; determine that a regular program operation needs to be performed; and select a second storage block from the less-robust group to perform the regular program operation.</p><p id="p-0046" num="0045">In one embodiment, to determine that the cache program operation needs to be performed may comprise to receive a program command from a host and to determine that the program command from the host needs to be performed by the cache program operation.</p><p id="p-0047" num="0046">In one embodiment, to determine that the regular program operation needs to be performed may comprise to initialize a back-end program operation and to determine that the back-end program operation needs to be performed by the regular program operation.</p><p id="p-0048" num="0047">In one embodiment, the processor may be further configured to: generate a robustness score for each active storage block based on the number of factors. To categorize the active storage blocks into the robust group and the less-robust group, the processor may be further configured to compare the robustness score for each active storage block to a robustness threshold value.</p><p id="p-0049" num="0048">In one embodiment, the robustness score for each active storage block may be set based on historical changes of at least some of the number of factors.</p><p id="p-0050" num="0049">In one embodiment, the robustness threshold value may be adjusted during a lifetime of the non-volatile storage device with the robustness threshold value being low at an early stage of usage and increased with usage.</p><p id="p-0051" num="0050">In one embodiment, the processor may be further configured to: initialize a garbage collection operation, determine that a block erased during the garbage collection operation belongs to the less-robust group, and perform a bad block scan on the block erased during the garbage collection operation.</p><p id="p-0052" num="0051">In yet another exemplary embodiment, there is provided a non-transitory machine-readable medium. The non-transitory machine-readable medium may have computer instructions that when executed by a hardware processor, may cause the hardware processor to perform: categorizing active storage blocks of a non-volatile storage device into a robust group and a less-robust group based on a number of factors including page error count, program time and number of Program/Erase (P/E) cycles; determining that a cache program operation needs to be performed; selecting a first storage block from the robust group to perform the cache program operation; determining that a regular program operation needs to be performed; and selecting a second storage block from the less-robust group to perform the regular program operation.</p><p id="p-0053" num="0052">In one embodiment, determining that the cache program operation needs to be performed may comprise receiving a program command from a host and determining that the program command from the host needs to be performed by the cache program operation.</p><p id="p-0054" num="0053">In one embodiment, determining that the regular program operation needs to be performed may comprise initializing a back-end program operation and determining that the back-end program operation needs to be performed by the regular program operation.</p><p id="p-0055" num="0054">In one embodiment, the computer instructions, when executed by a hardware processor, may further cause the hardware processor to perform generating a robustness score for each active storage block based on the number of factors. Categorizing the active storage blocks into the robust group and the less-robust group may comprise comparing the robustness score for each active storage block to a robustness threshold value.</p><p id="p-0056" num="0055">In one embodiment, the robustness score for each active storage block may be set based on historical changes of at least some of the number of factors.</p><p id="p-0057" num="0056">In one embodiment, the robustness threshold value may be adjusted during a lifetime of the non-volatile storage device with the robustness threshold value being low at an early stage of usage and increased with usage.</p><p id="p-0058" num="0057">In one embodiment, the computer instructions, when executed by a hardware processor, may further cause the hardware processor to perform: initializing a garbage collection operation; determining that a block erased during the garbage collection operation belongs to the less-robust group; and performing a bad block scan on the block erased during the garbage collection operation.</p><p id="p-0059" num="0058">Any of the disclosed methods and operations may be implemented as computer-executable instructions (e.g., software code for the operations described herein) stored on one or more computer-readable storage media (e.g., non-transitory computer-readable media, such as one or more optical media discs, volatile memory components (such as DRAM or SRAM), or nonvolatile memory components (such as hard drives)) and executed on a device controller (e.g., firmware executed by ASIC). Any of the computer-executable instructions for implementing the disclosed techniques as well as any data created and used during implementation of the disclosed embodiments can be stored on one or more computer-readable media (e.g., non-transitory computer-readable media).</p><p id="p-0060" num="0059">While various aspects and embodiments have been disclosed herein, other aspects and embodiments will be apparent to those skilled in the art. The various aspects and embodiments disclosed herein are for purposes of illustration and are not intended to be limiting, with the true scope and spirit being indicated by the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method, comprising:<claim-text>generating a robustness score for each active storage block of a non-volatile storage device with a higher robustness score for an active storage block indicating the active storage block being healthier and more robust and less likely turning defective during a next program operation;</claim-text><claim-text>categorizing active storage blocks of the non-volatile storage device into a robust group and a less-robust group based on comparing robustness scores of the active storage blocks to a robustness threshold value;</claim-text><claim-text>determining that a cache program operation needs to be performed, in which a storage controller is acknowledged upon completion of data transfer from a cache buffer into a data buffer at the non-volatile storage device without data being written to a memory cell array; and</claim-text><claim-text>selecting a first storage block from the robust group to perform the cache program operation.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the robustness score for each active storage block is generated based on a number of factors including a page error count, a program time and a number of Program/Erase (P/E) cycles.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein for each active storage block, an increase in the page error count results in a lower robustness score and an increase in the program time also results in a lower robustness score, and each active storage block's robustness score is updated by an interval in proportion to an increase of P/E cycle count for the respective active storage block.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising adjusting the robustness threshold value during a lifetime of the non-volatile storage device with the robustness threshold value being low at an early stage of usage for more active storage blocks to be categorized in the robust group and increased with usage for less active storage blocks to be categorized in the robust group.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>generating adjusted robustness scores for the active storage blocks during a lifetime of the non-volatile storage device; and</claim-text><claim-text>adjusting active storage blocks in the robust group and the less-robust group based on the adjusted robustness scores.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining that a regular program operation needs to be performed, in which the storage controller is acknowledged after data having been written to the memory cell array; and</claim-text><claim-text>selecting a second storage block from the less-robust group to perform the regular program operation.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>initializing a garbage collection operation;</claim-text><claim-text>determining that a block erased during the garbage collection operation belongs to the less-robust group; and</claim-text><claim-text>performing a bad block scan on the block erased during the garbage collection operation.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A non-volatile storage system, comprising:<claim-text>a non-volatile storage device; and</claim-text><claim-text>a processor configured to:<claim-text>generate a robustness score for each active storage block of the non-volatile storage device with a higher robustness score for an active storage block indicating the active storage block being healthier and more robust and less likely turning defective during a next program operation;</claim-text><claim-text>categorize active storage blocks of the non-volatile storage device into a robust group and a less-robust group based on comparing robustness scores of the active storage blocks to a robustness threshold value;</claim-text><claim-text>determine that a cache program operation needs to be performed, in which a storage controller is acknowledged upon completion of data transfer from a cache buffer into a data buffer at the non-volatile storage device without data being written to a memory cell array; and</claim-text><claim-text>select a first storage block from the robust group to perform the cache program operation.</claim-text></claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The non-volatile storage system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the robustness score for each active storage block is generated based on a number of factors including a page error count, a program time and a number of Program/Erase (P/E) cycles.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The non-volatile storage system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein for each active storage block, an increase in the page error count results in a lower robustness score and an increase in the program time also results in a lower robustness score, and each active storage block's robustness score is updated by an interval in proportion to an increase of P/E cycle count for the respective active storage block.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The non-volatile storage system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the processor is further configured to adjust the robustness threshold value during a lifetime of the non-volatile storage device with the robustness threshold value being low at an early stage of usage for more active storage blocks to be categorized in the robust group and increased with usage for less active storage blocks to be categorized in the robust group.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The non-volatile storage system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the processor is further configured to:<claim-text>generate adjusted robustness scores for the active storage blocks during a lifetime of the non-volatile storage device; and</claim-text><claim-text>adjust active storage blocks in the robust group and the less-robust group based on the adjusted robustness scores.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The non-volatile storage system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the processor is further configured to:<claim-text>determine that a regular program operation needs to be performed, in which the storage controller is acknowledged after data having been written to the memory cell array; and</claim-text><claim-text>select a second storage block from the less-robust group to perform the regular program operation.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-volatile storage system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the processor is further configured to:<claim-text>initialize a garbage collection operation;</claim-text><claim-text>determine that a block erased during the garbage collection operation belongs to the less-robust group; and</claim-text><claim-text>perform a bad block scan on the block erased during the garbage collection operation.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory machine-readable medium having computer instructions, wherein the computer instructions, when executed by a hardware processor, cause the hardware processor to perform:<claim-text>generating a robustness score for each active storage block of a non-volatile storage device with a higher robustness score for an active storage block indicating the active storage block being healthier and more robust and less likely turning defective during a next program operation;</claim-text><claim-text>categorizing active storage blocks of the non-volatile storage device into a robust group and a less-robust group based on comparing robustness scores of the active storage blocks to a robustness threshold value;</claim-text><claim-text>determining that a cache program operation needs to be performed, in which a storage controller is acknowledged upon completion of data transfer from a cache buffer into a data buffer at the non-volatile storage device without data being written to a memory cell array; and</claim-text><claim-text>selecting a first storage block from the robust group to perform the cache program operation.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory machine-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the robustness score for each active storage block is generated based on a number of factors including a page error count, a program time and a number of Program/Erase (P/E) cycles, and wherein the computer instructions, when executed by a hardware processor, further cause the hardware processor to perform:<claim-text>generating adjusted robustness scores for the active storage blocks during a lifetime of the non-volatile storage device; and</claim-text><claim-text>adjusting active storage blocks in the robust group and the less-robust group based on the adjusted robustness scores.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory machine-readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein for each active storage block, an increase in the page error count results in a lower robustness score and an increase in the program time also results in a lower robustness score, and each active storage block's robustness score is updated by an interval in proportion to an increase of P/E cycle count for the respective active storage block.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory machine-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the robustness threshold value is adjusted during a lifetime of the non-volatile storage device with the robustness threshold value being low at an early stage of usage and increased with usage for more active storage blocks to be categorized in the robust group and increased with usage for less active storage block to be categorized in the robust group.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory machine-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the computer instructions, when executed by a hardware processor, further cause the hardware processor to perform:<claim-text>determining that a regular program operation needs to be performed, in which the storage controller is acknowledged after data having been written to the memory cell array; and</claim-text><claim-text>selecting a second storage block from the less-robust group to perform the regular program operation.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory machine-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the computer instructions, when executed by a hardware processor, further cause the hardware processor to perform:<claim-text>initializing a garbage collection operation;</claim-text><claim-text>determining that a block erased during the garbage collection operation belongs to the less-robust group; and</claim-text><claim-text>performing a bad block scan on the block erased during the garbage collection operation.</claim-text></claim-text></claim></claims></us-patent-application>