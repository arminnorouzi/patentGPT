<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004402A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004402</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17365577</doc-number><date>20210701</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>445</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>23</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>44505</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2365</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SCALABLE SPECIFICATION AND SELF-GOVERNANCE FOR AUTONOMOUS DATABASES, CLUSTER DATABASES AND MULTI-TENANT DATABASES IN CLOUD AND ON-PREM ENVIRONMENT</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Oracle International Corporation</orgname><address><city>Redwood City</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>ANKALIKAR</last-name><first-name>Rohan</first-name><address><city>Sunnyvale</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>MUTHUKRISHNAN</last-name><first-name>Nagarajan</first-name><address><city>San Ramon</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>THAMMAIAH</last-name><first-name>Ravi Shankar</first-name><address><city>Redwood City</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>SAMUDRALA</last-name><first-name>Sandeep Kumar</first-name><address><city>Bengaluru</city><country>IN</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Oracle International Corporation</orgname><role>02</role><address><city>Redwood Shores</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A computer program product, system, and computer implemented method for scalable specification and self-governance for autonomous databases, cluster databases, and multi-tenant databases in cloud and on-prem environments. The approach disclosed herein enables management of a consolidated databases using a template-based process that allows for the consolidated databases (CDBs) and pluggable databases (PBDs) to be reconfigured automatically. In some embodiments, the approach instantiates one or more monitoring modules and one or more CDB/PDB configuration managers. These elements can detect relevant changes in the conditions in which CDB instances and open PDBs operate and adjust the configurations thereof in response. The configurations are specified in and adjusted using one or more corresponding templates, where the template comprise a set of rules that may have various interdependencies and specify how to determine what value a particular configuration setting should be to automatically configuration and reconfigure CDB instances and open PDBs.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="105.66mm" wi="158.75mm" file="US20230004402A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="244.77mm" wi="176.28mm" orientation="landscape" file="US20230004402A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="105.33mm" wi="171.11mm" orientation="landscape" file="US20230004402A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="244.77mm" wi="187.28mm" orientation="landscape" file="US20230004402A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="244.09mm" wi="156.04mm" orientation="landscape" file="US20230004402A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="233.09mm" wi="143.76mm" orientation="landscape" file="US20230004402A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="150.11mm" wi="165.10mm" orientation="landscape" file="US20230004402A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="251.97mm" wi="179.83mm" orientation="landscape" file="US20230004402A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="251.97mm" wi="168.23mm" orientation="landscape" file="US20230004402A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="251.97mm" wi="175.34mm" orientation="landscape" file="US20230004402A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="165.78mm" wi="168.23mm" orientation="landscape" file="US20230004402A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="231.22mm" wi="159.43mm" orientation="landscape" file="US20230004402A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="231.65mm" wi="181.78mm" orientation="landscape" file="US20230004402A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="210.57mm" wi="180.34mm" orientation="landscape" file="US20230004402A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="245.19mm" wi="187.28mm" orientation="landscape" file="US20230004402A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="191.69mm" wi="165.95mm" orientation="landscape" file="US20230004402A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="231.90mm" wi="175.09mm" orientation="landscape" file="US20230004402A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">Modern computing systems handle large amounts of data. For single user/device data storage systems this often corresponds to gigabytes and even terabytes of data. However, in the context of network environments, such as in a cluster, where multiple users or services are provided, the amount of data to be managed is often in the order of petabytes of data, or more, some of which may be shared by multiple users or used to provide services to multiple users. Unfortunately, the systems designed for individual users simply are not capable of efficiently handling the amount of data in these network environments.</p><p id="p-0003" num="0002">One current approach to address the needs of network systems is to use pluggable databases such as in a consolidated database. This solves the problem of data management to a certain extent by allowing different pluggable databases to be open as needed in a consolidated database instance and even allows multiple users/services to operate on that data concurrently by allowing the same pluggable database to be open in multiple consolidated database instances at the same time. However, the use of consolidated databases presents another challenge in managing those consolidated databases.</p><p id="p-0004" num="0003">Because consolidated databases often have hundreds if not thousands of configuration settings, manually managing these configurations can be difficult&#x2014;such as to manage allocation of resources to different consolidated database instances. Additionally, each pluggable database that is open in each respective consolidated database can also have additional configuration settings that might, or might not, be specific for a particular pluggable database or be for all pluggable databases open in a given consolidated database. Another issue is that some configurations can be effected by runtime conditions further complicating matters.</p><p id="p-0005" num="0004">Therefore, there is a need for an improved approach to manage consolidated databases in a cluster having shared resources.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0006" num="0005">Embodiments of the present disclosure provide a method, apparatus, and product for scalable specification and self-governance for autonomous databases, cluster databases, and multi-tenant databases in cloud and on-prem environment.</p><p id="p-0007" num="0006">The approach disclosed herein generally comprises management of consolidated databases using a template-based process that allows for the consolidated databases and pluggable databases to be reconfigured automatically. In some embodiments, the approach instantiates one or more monitoring modules and one or more configuration managers. These elements can detect relevant changes in the conditions in which they are operating and adjust the configurations thereof in response. The configurations are specified in and adjusted using one or more corresponding templates, where the template comprises a set of rules that may have various interdependencies and specify how to determine what value any particular configuration setting should be. In this way the approach provided herein enables template based automatic configuration and management of consolidated databased instances and pluggable databases where changes to dependent configuration parameters can be cascaded across one or more configuration templates.</p><p id="p-0008" num="0007">Further details of aspects, objects and advantages of the disclosure are described below in the detailed description, drawings, and claims. Both the foregoing general description and the following detailed description are exemplary and explanatory and are not intended to be limiting as to the scope of the disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008">The drawings illustrate the design and utility of embodiments of the present disclosure, in which similar elements are referred to by common reference numerals. To better appreciate the advantages and objects of embodiments of the disclosure, reference should be made to the accompanying drawings. However, the drawings depict only certain embodiments of the disclosure, and should not be taken as limiting the scope of the disclosure. The drawings use like reference numerals to identify like elements, and unless otherwise specified, any description for that element may be applicable to each use of that reference numeral were appropriate.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example system in which some embodiments of the disclosure are implemented.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart for management of consolidated database configurations according to some embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a second example system in which some embodiments of the disclosure are implemented.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a more detailed flowchart for management of consolidated database configurations according to some embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a more detailed flowchart for management of a consolidated database configurations during the in-use phase according to some embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an approach to automatically update CDB/PDB configurations based on a configuration template according to some embodiments.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIGS. <b>7</b>A-<b>7</b>D</figref> illustrate an example flow to setup a consolidated database according to some embodiments.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIGS. <b>8</b>A-<b>8</b>C</figref> illustrate an automated reconfiguration sequence in response to a node failure according to some embodiments.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a third example system in which some embodiments of the disclosure are implemented.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram of a computing system suitable for implementing an embodiment of the present disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a block diagram of one or more components of a system environment in which services may be offered as cloud services, in accordance with an embodiment of the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE EMBODIMENTS OF THE DISCLOSURE</heading><p id="p-0021" num="0020">Various embodiments are described hereinafter with reference to the figures. It should be noted that the figures are not necessarily drawn to scale. It should also be noted that the figures are only intended to facilitate the description of the embodiment(s) and are not intended as an exhaustive description of the disclosure or as a limitation on the scope of the disclosure. In addition, an illustrated embodiment need not have all the aspects or advantages shown. An aspect or an advantage described in conjunction with a particular embodiment is not necessarily limited to that embodiment and can be practiced in any other embodiments even if not so illustrated.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example system in which some embodiments of the disclosure are implemented. Generally, the system includes one or more computing nodes that might each have one or more consolidated database (CDB) instances and one or more pluggable databases (PDBs) that may be open in the consolidated database instance at any given time. Each CDB instance and PDB instance in a respective consolidated database instance might have a configuration that is to be managed by a configuration manager in concert with a cluster and/or CDB monitors.</p><p id="p-0023" num="0022">The system comprises a cluster <b>100</b> that may include a computer device <b>101</b>, computing nodes <b>110</b><i>a</i>-<i>n</i>, database <b>130</b>, and a cluster manager <b>140</b>. Each computing node <b>110</b><i>a</i>-<i>n </i>might comprise one or more consolidated database instances&#x2014;such as consolidated databases <b>120</b><i>a</i><b>1</b>-<i>an </i>as illustrated for computing node <b>110</b><i>a</i>&#x2014;which might in turn have one or more pluggable databases (PDBs) open at any given time (see e.g., <b>125</b><i>a</i><b>11</b>&#x2212;<b>1</b><i>n</i>).</p><p id="p-0024" num="0023">The computing device <b>101</b> interacts with consolidated database (CDB) instance(s) on respective nodes of the computing nodes <b>110</b><i>a</i>-<i>n </i>(e.g., <b>110</b><i>a</i><b>1</b>-<i>an </i>on computing node <b>110</b><i>a</i>) to control corresponding consolidated databases by leveraging a CDB/PDB configuration manager (see e.g., <b>121</b><i>a</i><b>1</b>). Furthermore, the computing devices might be controlled by a user, another service, an administrator, or comprise any other computing device that allows data access or management of a CDB/PDB or an element therein. Any CDB instance can contain multiple PDBs and each CDB instance may have one or more open PDBs at any given time where the PDBs that are open may or may not overlap with PDBs open in another CDB instance. A PDB itself is essentially a set of metadata and data where the metadata describes a schema, schema objects, and nonschema objects that can be presented on a network as a separate database. In some embodiments, one or more of the consolidated database instances (e.g., <b>120</b><i>a</i><b>1</b>) comprises a container database or a collection of containers. In some embodiments, one or more of the PDBs comprise containers (e.g., partitions or virtual disks), which may be defined by a class, data structure, or an abstract data type. In some embodiments, the PDBs may comprise a container equivalent.</p><p id="p-0025" num="0024">The computing device <b>101</b> comprises any type of computing device that may be used to operate or interface with the CDB instance, whether directly or indirectly. Examples of such user computing devices <b>101</b> include workstations, personal computers, laptop computers, or remote computing terminals. User computing devices <b>101</b> may also comprise any type of portable tablet device, including for example, tablet computers, and portable readers. User computing device <b>101</b> may also include mobile telephone devices relating to any mobile device that can suitably access any computing systems on the Internet such as smartphones and programmable mobile handsets. It is noted that the disclosure is not limited in its application to just these types of devices. The embodiments of the disclosure are applicable to any computing device that works in conjunction with access to digital information stored on, as an example, the Internet. One of ordinary skill in the art may appreciate that embodiments of this present disclosure may be implemented on the Internet, on a closed network, on a hybrid open and closed network, or on a cloud network.</p><p id="p-0026" num="0025">In some embodiments, the database <b>130</b> includes CDB/PDB configuration templates <b>131</b> and the CDBs (and the corresponding PDBs) <b>132</b>. In particular, database <b>130</b> includes the current pluggable databases (PDBs) representing committed transactions (see e.g., <b>132</b>). Additionally, as illustrated here, database <b>130</b> includes CDB/PDB configuration templates <b>131</b> which as will be discussed below are used to instantiate a CDB instance, and possibly open a PDB, to define how that CDB is to be configured, and in some embodiments reconfigured, according to a schema defined therein.</p><p id="p-0027" num="0026">As illustrated here, a CDB instance (e.g., <b>120</b><i>a</i><b>1</b>) might comprise a CDB/PDB configuration manager <b>121</b><i>a</i><b>1</b>, a CDB monitor <b>122</b><i>a</i><b>1</b>, and one or more open/openable pluggable databases (e.g., <b>125</b><i>a</i><b>1</b>-<i>an</i>) which comprise data containers for user/customer/tenant data.</p><p id="p-0028" num="0027">The CDB/PDB configuration manager (e.g., <b>121</b><i>a</i><b>1</b>) manages the configuration applied to the parent CDB instance (e.g., <b>120</b><i>a</i><b>1</b>) using the CDB/PDB configuration templates <b>131</b>. For example, an initial configuration might be provided by an external CDB instantiation module or instantiated with a set of default parameters based one or more corresponding templates. Subsequently, the CDB/PDB configuration manager <b>121</b><i>a</i><b>1</b> might identify a trigger that causes a re-evaluation/update to the configuration parameters for the CDB instance and/or one or more PDBs that might be open or openable on the CDB instance based on the one or more corresponding templates. Some example configuration parameters comprise allocations of CPU, memory, I/O, process count, and other processing (resource parameters) which may be based on database or system resources, feature parameters (enabled or disabled), or number of cursors allocated to the each PDB. As will be discussed further below, this process can be implemented using the configuration templates <b>131</b> to determine the values of various configuration parameters to be specified for respective CDBs/PDBs. Briefly, the templates provide one or more rules for specifying the configuration parameters to be applied to respective CDB/PDB instances based on currently available status of the computing node (e.g., available resources for CDB/PDB instances, number of CDB instances currently instantiated, number of PDBs open etc.). Additionally, one or more parameters may depend on one or more configuration parameters within the same template which may then be depended on by other configuration parameters, and so on. Because of this, one change in a status parameter might correspond to multiple changes in configuration parameters which may then correspond to additional changes in configuration parameters that depend on at least those modified configuration parameters. Additionally, opening a PDB can also cause changes to other PDBs determined using said templates, such as to reapportion resources to the then open PDBs.</p><p id="p-0029" num="0028">The CDB monitor (e.g., <b>122</b><i>a</i><b>1</b>) can monitor the CDB instance and the computing node on which it is executing. In some embodiments, the CDB monitors form a cluster of CDB monitor aware modules to facilitate the examiner of status information. For example, the CDB monitor can identify changes to the number of CDB instances currently operating on the node, the number of PDBs open in the corresponding CDB instance, and/or changes in the resources that can be allocated to CDB processes. In the event that the CDB monitor detects a change relevant to one or more rules in the configuration template, the CDB monitor can notify the CDB/PDB configuration manager (e.g., <b>121</b><i>a</i><b>1</b>) which may cause a reconfiguration of the CDB instance, and may cause a redistribution of resources to PDB instances within that CDB instance, and/or the instantiation or closure of a CDB instance on the same computing node (causing redistribution of resources between CDB instances on the same computing node having a cascaded effect of redistribution of resources PDBs open on different CDB instances on the computing node). In some embodiments, the illustrative example might be caused by a change in the allocation of resources to a corresponding host.</p><p id="p-0030" num="0029">The CDB monitors and CDB/PDB configuration managers might cooperate to address various changes in conditions such as changes to allocated resources of/to a computing node. For example, the CDB monitor can detect and notify the CDB/PDB configuration manager of relevant changes such as a deallocation of resources (e.g., the CDB instance is in a virtual machine that experience a decrease in available resources due to component failure or configuration setting change), a role of the computing node or CDB instance changes between to or from a standby role (standby CDB instances normally do not need as much resources as CDB instances associated with a primary role), and/or the opening of additional PDBs (causing the redistribution of resources between the PDBs currently open within a CDB instance),</p><p id="p-0031" num="0030">In some embodiments, a cluster monitor <b>140</b> is provided to monitor the cluster for events regarding the CDB instances. For example, the cluster might be monitored to identify any computing node failures and to generate a corresponding notification to cluster managers in surviving nodes when a computing node fails. As a result of the notification, a cluster manager might cause a reconfiguration of a CDB instance to, for instance, service user requests to one or more PDBs previously open on a failed node. This reconfiguration may require additional allocation of resources to a CDB opening additional PDBs (e.g., PDBs from the failed node) and a removal or decrease of an allocation of the same resource to other CDB instances and/or open PDBs on the same computing node. In this way, the resources of the CDB instances and their corresponding PDBs can be automatically managed according to a schema in the corresponding template.</p><p id="p-0032" num="0031">Like CDB monitors and the CDB/PDB configuration managers, cluster monitors can also interact with CDB/PDB configuration managers. However, whereas the CDB monitor normally interacts with a single CDB/PDB configuration manager to address changes that arise at the level of the computing node, the cluster monitor interacts with multiple configuration managers to address changes that occur at the cluster level outside of the computing node. The cluster monitor can detect and notify multiple CDB/PDB configuration managers when a relevant change occurs (e.g., by processing an event to determine whether it corresponds to a status parameter change based on analysis of a corresponding template). For example, a cluster monitor might detect a network failure, a new node in the cluster, and/or a failure of a storage appliance.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart for management of consolidated database configurations according to some embodiments. Generally, the process includes two types of activities, setup operations, and operations during use. In some embodiments, the setup operations capture the current conditions at the node where a CDB instance is to be deployed and generates a configuration for said CDB. In some embodiments, the in-use operations capture changes to the operating conditions and automatically update corresponding CDB/PDB configurations in response. As will be discussed further below, this can comprise operations on the computing node at which the CDB is to be deployed or it might comprise operations executed elsewhere to provide an initial configuration or updated configuration during runtime.</p><p id="p-0034" num="0033">Generally, the process starts when a first command is received to instantiate a CDB instance at <b>201</b>. A user might try to access data in a particular PDB of a CDB instance and a command is generated in response to cause the instantiation of the corresponding CDB. An administrator might send a command to instantiate a CDB instance to service client/user requests. A process might generate a CDB instantiation command as part of setting up a new tenant or user in a cluster. In some embodiments, a command to instantiate a CDB is generated during a recovery process to restore a cluster or computing node state. Regardless of what causes the command to be issued, its receipt will trigger the setup phase <b>210</b>. Additionally, each time such a command is received the operations discussed below to instantiate a CDB will be executed. Thus, multiple different CDB instances can be created.</p><p id="p-0035" num="0034">The setup phase <b>210</b>, causes the instantiation of a CDB instance. In some embodiment, the CDB instance is instantiated using a set of status parameters that are based on then current conditions within the cluster. For the purposes of this Application, status parameters are parameters regarding the state of the computing node or cluster including any of CPUs, memory, I/O capacity, number of CDB instances, number of PDBs open, etc. For instance, a set of status data that is accessible via a communications path is retrieved. Once retrieved, one or more CDB/PDB configuration templates (see e.g., <b>131</b>) are processed using those retrieved status parameters to determine the value(s) of configuration parameters that occur within a CDB/PDB configuration template (see e.g., <b>131</b>), which are then used to generate a set of configuration settings/values used for initial deployment (see e.g., <b>214</b>), including multiple layers of dependencies therein.</p><p id="p-0036" num="0035">During the in-use phase <b>220</b> a CDB instance performs database operations to service user requests, and thus consume cluster resources&#x2014;e.g., processing cycles/cores, temporary memory space, communications bandwidth, I/O operations bandwidth, etc. However, various conditions might change at any given time. Thus, a monitoring function is provided which can detect these changes (see <b>226</b>) and cause the automatic update of corresponding CDB/PDB configurations based on the corresponding configuration templates (see <b>228</b>). In some embodiments, the monitoring function might detect instantiation and closing of CDB instances, opening/closing of PDBs, or changes in available resources.</p><p id="p-0037" num="0036">Template File Construction/Contents:</p><p id="p-0038" num="0037">There are numerous configuration parameters that could be used to define a template. Those configuration parameters could comprise various different types (e.g., integer, boolean, string, and file). Various different options could be supported (e.g., options like&#x2014;static/dynamic, flags, and callbacks) some of which may depend on the existence of other options (e.g., other characteristics like system and session modifiable). Some options could be provided to alter default or inherited configuration parameters such as for a PDB that inherits a configuration parameter from the CDB instance that opens it or from a default/base PDB configuration (e.g., alter options might specify a container, scope, or a system ID to be altered). The template file itself might be stored with various different identifiers identifying a file format (e.g., pfile or spfile), and the template file might be storage a different locations such as a data dictionary.</p><p id="p-0039" num="0038">The various configuration parameters for a CDB instance and one or more PDBs might comprise any combination of resource configuration parameters, decision configuration parameters, and path configuration parameters. The configuration parameters themselves might be arranged in a hierarchy that comprises multiple levels. For example, any configuration parameter may depend on another, which may in turn depended on yet another configuration parameter. Additionally, each configuration parameter may depend on multiple status parameters, whether alone or in combination with one or more configuration parameters. As a result, any status change may result in one or more configuration parameter changes which may by cascaded through a template file. Additionally, the expressions provided herein can be applied to a running CDB instance and/or open PDB or can be applied to a configuration file to take effect at a later time such as after a restart of the CDB instance or opening of a PDB.</p><p id="p-0040" num="0039">Those parameters can be used in different expressions to define the set of configuration parameters. Different operations might be supported such as numeric operators (e.g., +, &#x2212;, *, /, %, $), groups identified using parentheses, minimum/maximum operations, ceil and/or floor functions, ternary operations (e.g., A?B:C for example db_block_checksum=(@ROLE==&#x201c;primary&#x201d;)?&#x201c;full&#x201d;:&#x201c;medium&#x201d;). Some operations might only be called during startup. Some configuration parameters might specify dependencies on computing systems or the environment thereof. In some embodiments the configuration files may be maintained elsewhere and accessed using a URL. In some embodiments, the configuration file comprises a JSON or XML file. The configuration parameters themselves can be used as operands (e.g., session=processes*2). Additionally, system configuration values or instance variables could be specified using a special character (e.g., @), such as to define a configuration parameter based on a system configuration values&#x2014;also called status parameters herein&#x2014;(e.g., sga_target=@HOST_MEMORY*0.4).</p><p id="p-0041" num="0040">Commands that cause the template file to generate a configuration to be used might comprise static commands such as startup using spfile, startup using server side pfile, create spfile from pfile, or create pfile from spfile, whereas dynamic commands might effect a change to a running CDB instance or an open PDB.</p><p id="p-0042" num="0041">For example, parameter file entries (e.g., in a Init$ORACLE_SID.ora file) might comprise the following:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0042">Sessions=processes+cpu_count*2;</li>        <li id="ul0002-0002" num="0043">PARALLEL_MAX_SERVERS=MAX (100, MIN (PROCESSES, 40);</li>        <li id="ul0002-0003" num="0044">max_io_slaves=cpu_count;</li>        <li id="ul0002-0004" num="0045">cpu_count=@HOST_CPU/$active_instance;</li>    </ul>    </li></ul></p><p id="p-0043" num="0046">whereas parameter file entries in a different file (e.g., in a Spfile$ORACLE_SID.ora file) might comprise the following:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0047">*.sessions=(processes+(cpu_count*2))</li>        <li id="ul0004-0002" num="0048">*.parallel_max_servers=MAX (100, MIN (PROCESSES, 40))</li>        <li id="ul0004-0003" num="0049">max_io_slaves=cpu_count</li>        <li id="ul0004-0004" num="0050">*.cpu_count=(@{HOST_CPU}/${active_instance})</li>    </ul>    </li></ul></p><p id="p-0044" num="0051">During the in-use phase, the modification of configuration parameters can be applied dynamically to alter a running CDB instance and/or an open PDB. For example, alter commands might comprise any of the following:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0052">Alter system set sessions=&#x2018;cpu_count*2&#x2019;;</li>        <li id="ul0006-0002" num="0053">Alter session set parallel_max_servers=&#x2018;max (100, processes/40)&#x2019;;</li>        <li id="ul0006-0003" num="0054">Alter system set &#x201c;max_io_slaves&#x201d;=&#x2018;cpu_count&#x2019; sid=&#x2018;remote_sid&#x2019;;</li>        <li id="ul0006-0004" num="0055">Alter system set cpu_count=&#x2018;@host_cpu/$active_instances&#x2019;;</li>    </ul>    </li></ul></p><p id="p-0045" num="0056">Some other expressions might comprise any of the following:<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0057">SGA_MAX_SIZE=@HOST_CPU*8 GB;</li>        <li id="ul0008-0002" num="0058">Sid1.sga_max_size=@HOST_CPU*4 GB;</li>        <li id="ul0008-0003" num="0059">Sid2.sga_max_size=@HOST_CPU*2 GB;</li>        <li id="ul0008-0004" num="0060">Sga_max_size=(@sid=&#x2018;sid1&#x2019;?4 GB:2 GB)*@HOST_CPU;</li>        <li id="ul0008-0005" num="0061">CPU_COUNT=&#x3c;customer configured value&#x3e;/@NUMBER_OF_ACTIVE_INSTANCES;</li>        <li id="ul0008-0006" num="0062">CPU_MIN=&#x3c;customer configured value&#x3e;/@NUMBER_OF_ACTIVE_INSTANCES;        <ul id="ul0009" list-style="none">            <li id="ul0009-0001" num="0063">CPU_COUNT=CPU_MIN*BURSTING_FACTOR;</li>            <li id="ul0009-0002" num="0064">SGA_TARGET=CPU_COUNT*4 GB;</li>            <li id="ul0009-0003" num="0065">SGA_TARGET=@system_memory*CPU_COUNT/@system cpu_count*4 GB;</li>            <li id="ul0009-0004" num="0066">PGA_AGGREGATE_TARGET=CPU_COUNT*3 GB;</li>            <li id="ul0009-0005" num="0067">PGA_TARGET=40%*SGA_TARGET;</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0046" num="0068"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a second example system in which some embodiments of the disclosure are implemented. <figref idref="DRAWINGS">FIG. <b>3</b></figref> is largely similar to <figref idref="DRAWINGS">FIG. <b>1</b></figref> but with the changes as discussed herein. Where <figref idref="DRAWINGS">FIG. <b>3</b></figref> uses reference numbers that are the same as those used in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the description provided therein is applicable in regard to <figref idref="DRAWINGS">FIG. <b>3</b></figref> unless otherwise stated herein. Additionally, any of the aspects of <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be combined in any manner with aspects from any other embodiments disclosed herein.</p><p id="p-0047" num="0069">Cluster <b>300</b> includes many of the same elements <b>101</b>, <b>110</b><i>a</i>-<i>n</i>, <b>120</b><i>a</i><b>1</b>-<i>an</i>, <b>121</b><i>a</i><b>1</b>, <b>122</b><i>a</i><b>1</b>, <b>125</b><i>a</i><b>11</b>-<b>1</b><i>n</i>, <b>130</b>, <b>131</b>, <b>132</b>, and <b>140</b> found in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. However, in addition to the elements from <figref idref="DRAWINGS">FIG. <b>1</b></figref>, <figref idref="DRAWINGS">FIG. <b>3</b></figref> includes CDB/PDB configuration template(s) <b>123</b><i>a</i><b>1</b>, CDB configuration <b>124</b><i>a</i><b>1</b>, and PDB configuration <b>126</b><i>a</i><b>11</b>.</p><p id="p-0048" num="0070">The CDB/PDB configuration template(s) <b>123</b><i>a</i><b>1</b> comprises a copy of the corresponding CDB/PDB configuration templates <b>131</b> from database <b>130</b>. The copy might be stored in memory of the CDB instance. This can be beneficial when a change in conditions occurs because it would avoid the need to then retrieve the configuration. Thus, changes in the conditions can be addressed more rapidly and efficiently.</p><p id="p-0049" num="0071">The CDB/PDB configuration manager <b>121</b><i>a</i><b>1</b> processes the CDB/PDB configuration template(s) <b>123</b><i>a</i><b>1</b> in response to a notification of an event (from CDB monitor <b>122</b><i>a</i><b>1</b> or cluster monitor <b>140</b>) that may affect one or more configuration parameters generated using the configuration template. For instance, the CDB monitor might generate an event indicating that a new CDB instance was instantiated at the computing node <b>110</b><i>a</i>. The configuration manager might then analyze the template to identify any configuration parameters that depend on a variable corresponding to the number of CDB instances on the computing node <b>110</b><i>a</i>. To illustrate, a computing node having ten processing cores and three CDB instances associated with a rule specifying that each CDB instance is to be assigned three processing cores if the number of cores divided by the number of CDB instances is equal to or greater than three, and if the number of cores divided by the number of CDB instances is less than three then each CDB instance is to be assigned the largest integer number of cores determined from the division. Thus, when the example computing node has three CDB instances and ten cores, each instance is assigned three cores. However, when the example computing node has four or five CDB instances each core is assigned only two cores. This configuration information, along with any other configuration information is then storage in the CDB configuration for each respective CDB instance (see e.g., <b>124</b><i>a</i><b>1</b>).</p><p id="p-0050" num="0072">In some embodiments, the resource allocations to a given PDB may be determined based on resources allocated to at least the CDB instance. For example, a CDB instance might comprise one of four CDB instances on a given computing node. Twenty percent of the memory of computing node <b>110</b><i>a </i>might be reserved for overhead on the computing node. The remaining percentage (80%) might then be divided by the CDB instances equally. Then each CDB instance is allocated 20% of the available memory. The CDB instance then utilizes that memory for various functions, one of which might comprise the number of cursors allocated to each PDB instance. A rule that controls this allocation might specify that the number of available cursors be allocated evenly across the PDBs that are open. Thus, as the number of open PDBs change, so does their allocation of cursors, which is affected by updating the relevant configuration parameters in the corresponding PDB configuration files (see e.g., <b>126</b><i>a</i><b>1</b>) and/or one or more alter commands.</p><p id="p-0051" num="0073"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a more detailed flowchart for management of consolidated database configurations according to some embodiments.</p><p id="p-0052" num="0074">Generally, the setup phase <b>410</b> is triggered at <b>201</b> as discussed above. Once the setup phase <b>410</b> is triggered the process will retrieve the current status of a target computing node and a template corresponding to the command to instantiate the CDB at <b>411</b>. For instance, a template file is read into memory for processing by a managing computing node (see e.g., <b>402</b><i>a </i>from <b>402</b><i>a</i>-<i>n</i>) and a shared memory space is read to retrieve current status information for the target node identified in the command to instantiate the CDB.</p><p id="p-0053" num="0075">Using the retrieved information, the template file is processed to generate the relevant configuration parameters according to the rules therein and the retrieved status information at <b>412</b>. In some embodiments, one or more PDB configurations&#x2014;or a default PDB configuration&#x2014;are generated at <b>413</b>. For example, if the command to instantiate the CDB instance identified one or more PDBs to be opened at the CDB, the configurations for each PDB might be generated. In some embodiments, each PDB within the same instance will share the same configuration. In some embodiments, different PDBs, even within the same CDB instance, will have different configurations. In some embodiments, a default PDB configuration is provided for all PDBs within a CDB instance, and one or more parameters for respective PDBs are provide that may override the corresponding default PDB configuration parameters.</p><p id="p-0054" num="0076">Once the configuration parameters are generated, they are combined into a configuration file (see e.g., configuration file <b>404</b><i>a </i>of configuration files <b>404</b><i>a</i>-<i>n</i>) and provided to a target computing node along with a command to instantiate the CDB instance in response to the received command discussed regarding <b>201</b> above.</p><p id="p-0055" num="0077">The in-use phase <b>420</b> starts when a CDB instance is instantiated. During the in-use phase, one or more monitoring processes started to monitor the cluster and consolidated database instances at <b>422</b> might be used to detect the number of CDB instances open on a given computing node, to detect the number of CDB instances open across a cluster of computing nodes, to detect the number of PDB instances open on a given CDB instance, and to detect any changes in the numbers above, or to detect any changes to resources that the CDB instance or PDB instances therein rely on for functionality. If a change is detected an event notification is generated for analysis thereof regarding the CDB/PDB instances.</p><p id="p-0056" num="0078">At <b>424</b> an event is analyzed to determine its relevance to any CDB/PDB templates. Generally, this comprises a determination as to whether the event corresponds to a change in a configuration parameter that is contained within a corresponding template file (see e.g., template file <b>402</b><i>a</i>)&#x2014;for instance, the event causes a change in a status parameter that a configuration parameter is at least partly based on. If at <b>425</b> it is determined that the analysis identified one or more configuration parameters that are affected by the event the process continues to <b>428</b> where the corresponding configurations are automatically updated based on the configuration templates&#x2014;e.g., by updating the corresponding configuration file, and/or by issuing an alter command that will cause the corresponding change to the configuration file and the associated consolidated database instance.</p><p id="p-0057" num="0079"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a more detailed flowchart for management of consolidated database configurations during the in-use phase according to some embodiments. Specifically, <figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a flow that separately addresses external events and internal events.</p><p id="p-0058" num="0080">An internal/node event is received or identified at <b>522</b>. For example, an internal/node event might comprise the instantiation of a CDB instance on the same computing node as a monitoring process. The internal/node event is then analyzed to determine its relevance at <b>524</b> (as discussed above at <b>424</b>) to a CDB instance or PDB that is currently open within a CDB instance. If the event is not relevant to any configuration parameters in the corresponding CDB/PDB template(s) (e.g., does not cause a change to a status parameter that one or more configuration parameters depend on) the processing for the event ends at <b>550</b> (see also <b>525</b> determining whether any relevance has been identified). If the event is relevant the process continues at <b>528</b> where the corresponding configuration is updated as discussed above in <b>428</b> and in further detail below.</p><p id="p-0059" num="0081">In some embodiments, an external/cluster event is processed differently from an internal/node event in that an external/cluster event is analyzed to determine whether the external/cluster event is relevant to any CDB/PDB instances currently configured/open. For example, at <b>512</b> an external/cluster event is received or identified. In response to the receipt/identification of the external/cluster event, analysis is performed to determine the relevance of the external/cluster event to any of the CDB/PDB templates at <b>514</b> by analyzing each template to determine if any configuration parameter depends on a status parameter affected by the external/cluster event. If no relevant templates have been identified the event processing ends at <b>550</b> based on the determination at <b>515</b> that the event does not correspond to a configuration parameter in any of the relevant templates. However, if at <b>515</b> it is determined that the event is relevant to a configuration parameter, the process continues at <b>516</b> where any computing nodes having a CDB/PDB instance configured according to a corresponding template are identified. If any corresponding computing nodes are identified, event information identifying the event, and in some embodiments the relevant parameters within the template, is sent to the corresponding nodes at <b>518</b>, where it can be processed at <b>528</b> as discussed herein. In some embodiments, the cluster monitor merely identifies an event as corresponding to a status parameter that is potentially or actually relevant to any of the configuration templates and sends a corresponding event notification to all CDB/PDB managers to be processed locally at the computing node with a corresponding CDB instance or open PDB.</p><p id="p-0060" num="0082"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an approach to automatically update CDB/PDB configurations based on a configuration template according to some embodiments. The approach illustrated herein is only one approach and different approaches could be utilized including variations on the order of operations provided herein.</p><p id="p-0061" num="0083">Generally, the process starts at <b>602</b> where one or more status parameters are received for processing. For example, the status parameters might comprise a set of status parameters that changed as a result of a corresponding event.</p><p id="p-0062" num="0084">After the status parameters are received, the process continues at <b>604</b> where one or more tree structures are generated that represent the dependencies corresponding to the received status parameters based on a corresponding template file (e.g., <b>402</b><i>a</i>). For example, each configuration parameter that either directly or indirectly depends on any of the received status parameter(s) is identified in the tree structure with depths corresponding to the number of other configuration parameters that are needed in order to compute a particular configuration parameter (e.g., the number of levels of dependence of one configuration parameter on another configuration parameter). In this way, children of a parent parameter are logically deeper within the tree structure. The depth is utilized ensure that the parent configuration parameters are determined before a corresponding child configuration parameter.</p><p id="p-0063" num="0085">Subsequently, an initial depth is set at <b>606</b> to begin processing the template file, where each configuration parameter that is affected at the current depth is determined and updated at <b>608</b>. Each newly determined configuration parameter value is then stored in the configuration file <b>404</b><i>a</i>. A looping function is then controlled at <b>610</b> where a determination is made as to whether the current depth is equal to the highest depth of the tree structure. If the current depth is not equal to the highest depth, this indicates that there are additional levels in the tree to be processed. Thus, the process returns to <b>606</b> where the depth is incremented to the next level for processing at <b>608</b> and <b>610</b>. If the current depth is equal to the highest depth, the tree structure has been fully traversed, and the update process ends at <b>612</b>.</p><p id="p-0064" num="0086"><figref idref="DRAWINGS">FIGS. <b>7</b>A-<b>7</b>D</figref> illustrate an example flow to setup a consolidated database according to some embodiments. The approach illustrated herein is only one possible approach which utilizes a separate computing node to control the instantiation of a CDB instance on another node. For example, the computing node could be instantiated in the same or a similar manner by the target node itself. Another approach might comprise, instantiating the CDB instance using a default configuration with an immediate parameter retrieval operation(s) and reconfiguration process to meet current conditions.</p><p id="p-0065" num="0087"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref> illustrates receipt of a request from a user to access/setup a PDB instance in a CDB, and a cluster monitor routing an event to a computing node that will setup the CDB instance. Determination of which node to target for the instantiation could be accomplished by retrieving information corresponding to an ability of a computing node or multiple computing nodes to provide resources to the CDB instance (e.g., a target computing node might be selected based on determining that said target node has the best metric or collection thereof for available resources of the CPU, memory, storage, and latency for a client). Additionally, a CDB instance might be instantiate at the direction of a user before a particular PDB is to be accessed in contrast to the example provided here which is triggered by a request to access a PDB (PDB1) that is not open or openable in another CDB instance.</p><p id="p-0066" num="0088">In this illustration, the process starts when a user station <b>701</b> transmits a request to access/setup PDB1 in CDBX at <b>750</b> in response to a user action at <b>701</b>. The request <b>750</b> is received by a cluster monitor <b>140</b> that generates an event that encapsulates the request <b>750</b> which is transmitted to a managing computing node <b>110</b><i>x </i>(see <b>751</b>).</p><p id="p-0067" num="0089">As illustrated here, computing node <b>110</b><i>x </i>includes a CDB/PDB configurator <b>121</b><i>a </i>and retrieves a CDB/PDB template(s) from the database <b>130</b> at <b>131</b> and stores them at <b>123</b><i>a</i>. In some embodiments, the configuration templates are retrieved in response to the event received at <b>751</b>. In some embodiments, the CDB/PDB configuration templates are retrieved in response to an assignment of the computing node <b>110</b><i>x </i>to manage initial instantiation of CDB/PDBs on respective computing nodes which may occur before receiving the request from the user. Additionally, the database <b>130</b> also includes the consolidated database(s) <b>132</b>.</p><p id="p-0068" num="0090"><figref idref="DRAWINGS">FIG. <b>7</b>B</figref> illustrates the retrieval and processing of then current status parameters for the target computing node.</p><p id="p-0069" num="0091">First, current status parameter values are retrieved for the target computing node <b>110</b><i>a </i>(see <b>754</b>). Second, the status parameter values are then used at <b>755</b> to generate CDB/PDB configurations (see <b>124</b><i>a</i>) based on the retrieved status parameters using the CBD/PDB configuration templates <b>123</b><i>a </i>as discussed herein.</p><p id="p-0070" num="0092"><figref idref="DRAWINGS">FIG. <b>7</b>C</figref> illustrates the instantiation of the CDB and population of the instantiate CDB with relevant information and processes.</p><p id="p-0071" num="0093">In particular, the instantiation process creates the CDB instance <b>120</b><i>a </i>at <b>761</b> having a copy of the CDB configuration (see <b>124</b><i>a </i>at <b>110</b><i>x </i>and <b>110</b><i>a</i>) in the CDB memory space (see also <b>762</b>), a copy of the CDB/PDB template(s) (see <b>123</b><i>a </i>at <b>110</b><i>x </i>and <b>110</b><i>a</i>) in the CDB memory space (see <b>763</b>), an instantiated instance of the CDB/PDB configuration manage <b>121</b><i>a </i>(see <b>764</b>), and an instantiated CDB monitor <b>122</b><i>a </i>(see <b>765</b>).</p><p id="p-0072" num="0094"><figref idref="DRAWINGS">FIG. <b>7</b>D</figref> illustrates the instantiation of the PDB and population of the instantiated PDB with a PDB configuration.</p><p id="p-0073" num="0095">In particular, the instantiation process creates a PDB configuration <b>126</b><i>a</i><b>1</b> (see <b>766</b>) and opens the PDB <b>125</b><i>a</i><b>1</b> within the CDB instance (see <b>767</b>).</p><p id="p-0074" num="0096"><figref idref="DRAWINGS">FIGS. <b>8</b>A-<b>8</b>C</figref> illustrate an automated reconfiguration sequence in response to a node failure according to some embodiments.</p><p id="p-0075" num="0097"><figref idref="DRAWINGS">FIG. <b>8</b>A</figref> illustrates two different computing systems that both have different instances of a consolidated database and different open PDBs.</p><p id="p-0076" num="0098">Computing node <b>110</b><i>a </i>has PDB <b>125</b><i>a</i><b>1</b> open in the CDB instance <b>120</b><i>a</i>, whereas computing node <b>110</b><i>b </i>has PDB <b>125</b><i>a</i><b>5</b> open in CDB instance <b>120</b><i>b</i>. PDB <b>125</b><i>a</i><b>1</b> has an associated configuration <b>126</b><i>a</i><b>1</b> previously generated by CDB/PDB configuration manager <b>121</b><i>a </i>using a corresponding configuration template from <b>123</b>. The configuration for the CDB instance <b>120</b><i>a </i>is maintained at <b>124</b><i>a </i>and a CDB monitor <b>122</b><i>a </i>is operating at the computing node to detect any changes that might be relevant to the CDB instance <b>120</b><i>a. </i></p><p id="p-0077" num="0099">In this example, computing node <b>110</b><i>b </i>is similar to computing node <b>110</b><i>a </i>in that both computing nodes include a CDB instance (see <b>120</b><i>a </i>and <b>120</b><i>b</i>) with equivalent processes such as CDB monitor <b>122</b><i>a </i>and <b>122</b><i>b</i>, CDB/PDB configuration manager <b>121</b><i>a </i>and <b>121</b><i>b</i>. Additionally, CDB instance <b>120</b><i>b </i>also includes a CDB configuration <b>124</b><i>b</i>, and in this example the same configuration template(s) <b>123</b>. Additionally, CDB instance <b>120</b><i>b </i>has a different open PDB (<b>125</b><i>a</i><b>5</b>) from the one open on computing node <b>110</b><i>a </i>(<b>125</b><i>a</i><b>1</b>), which is associated with its own configuration <b>126</b><i>b</i><b>5</b>.</p><p id="p-0078" num="0100"><figref idref="DRAWINGS">FIG. <b>8</b>B</figref> illustrates the failure of a computing node and a recovery operation.</p><p id="p-0079" num="0101">In particular, computing node <b>110</b><i>a </i>fails (see <b>851</b>). This presents a problem for users of PDB <b>125</b><i>a</i><b>1</b> because that PDB was open on the now failed node. As illustrated here, the PDB is now to be opened at computing node <b>110</b><i>b </i>to recover from the failure. This might be triggered by the cluster monitor <b>140</b> after receiving an event indicating that computing node <b>110</b><i>a </i>has failed (see <b>852</b>).</p><p id="p-0080" num="0102"><figref idref="DRAWINGS">FIG. <b>8</b>C</figref> illustrates the opening of PDB <b>125</b><i>a</i><b>1</b> at the computing node <b>110</b><i>b. </i></p><p id="p-0081" num="0103">In order to open PDB <b>125</b><i>a</i><b>1</b>, the CDB/PDB configuration manager <b>121</b><i>b </i>generates a new PDB configuration <b>126</b><i>b</i><b>1</b> for PDB <b>125</b><i>a</i><b>1</b> based on the conditions at computing node <b>110</b><i>b</i>. Additionally, the CDB/PDB configuration manager <b>121</b><i>b </i>generates a new configuration <b>126</b><i>b</i><b>5</b><i>i </i>for the PDB that was already open in the CDB instance <b>120</b><i>b </i>(see <b>854</b> and <b>855</b>). Once the PDB configuration <b>126</b><i>b</i><b>1</b> is generated the PDB from the failed computing node can be opened at computing node <b>110</b><i>b </i>(see <b>856</b>).</p><p id="p-0082" num="0104"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a third example system in which some embodiments of the disclosure are implemented. The system illustrated here provides a shared management apparatus for a respective computing node. Additionally, any of the aspects of <figref idref="DRAWINGS">FIG. <b>9</b></figref> may be combined in any manner with aspects from any other embodiments disclosed herein.</p><p id="p-0083" num="0105">Here the elements of the computing node are essentially the same as discussed above in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. However, instead of placing the CDB/PDB configuration manager <b>121</b><i>a</i>, CDB monitor <b>112</b><i>a</i>, CBD/PDB configuration templates <b>123</b><i>a</i><b>1</b>, and the CDB configuration template(s) <b>124</b><i>a </i>in the CDB instance, they are placed at the level of the computing node and used for management of all CDB/PDB instances on that computing node.</p><heading id="h-0005" level="2">System Architecture</heading><p id="p-0084" num="0106"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram of an illustrative computing system <b>2000</b> suitable for implementing an embodiment of the present invention. Computer system <b>2000</b> includes a bus <b>2006</b> or other communication mechanism for communicating information, which interconnects subsystems and devices, such as processor <b>2007</b>, system memory <b>2008</b> (e.g., RAM), static storage device <b>2009</b> (e.g., ROM), disk drive <b>2010</b> (e.g., magnetic or optical), communication interface <b>2014</b> (e.g., modem or Ethernet card), display <b>2011</b> (e.g., CRT or LCD), input device <b>2012</b> (e.g., keyboard), and cursor control.</p><p id="p-0085" num="0107">According to one embodiment of the invention, computer system <b>2000</b> performs specific operations by processor <b>2007</b> executing one or more sequences of one or more instructions contained in system memory <b>2008</b>. Such instructions may be read into system memory <b>2008</b> from another computer readable/usable medium, such as static storage device <b>2009</b> or disk drive <b>2010</b>. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and/or software. In one embodiment, the term &#x201c;logic&#x201d; shall mean any combination of software or hardware that is used to implement all or part of the invention.</p><p id="p-0086" num="0108">The term &#x201c;computer readable medium&#x201d; or &#x201c;computer usable medium&#x201d; as used herein refers to any medium that participates in providing instructions to processor <b>2007</b> for execution. Such a medium may take many forms, including but not limited to, non-volatile media and volatile media. Non-volatile media includes, for example, optical or magnetic disks, such as disk drive <b>2010</b>. Volatile media includes dynamic memory, such as system memory <b>2008</b>.</p><p id="p-0087" num="0109">Common forms of computer readable media include, for example, floppy disk, flexible disk, hard disk, magnetic tape, any other magnetic medium, CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, RAM, PROM, EPROM, FLASH-EPROM, any other memory chip or cartridge, cloud-based storage, or any other medium from which a computer can read.</p><p id="p-0088" num="0110">In an embodiment of the invention, execution of the sequences of instructions to practice the invention is performed by a single computer system <b>2000</b>. According to other embodiments of the invention, two or more computer systems <b>2000</b> coupled by communication link <b>2015</b> (e.g., LAN, PTSN, or wireless network) may perform the sequence of instructions required to practice the invention in coordination with one another.</p><p id="p-0089" num="0111">Computer system <b>2000</b> may transmit and receive messages, data, and instructions, including program, i.e., application code, through communication link <b>2015</b> and communication interface <b>2014</b>. Received program code may be executed by processor <b>2007</b> as it is received, and/or stored in disk drive <b>2010</b>, or other non-volatile storage for later execution. Data may be accessed from a database <b>2032</b> that is maintained in a storage device <b>2031</b>, which is accessed using data interface <b>2033</b>.</p><p id="p-0090" num="0112"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a simplified block diagram of one or more components of a system environment <b>2100</b> by which services provided by one or more components of an embodiment system may be offered as cloud services, in accordance with an embodiment of the present disclosure. In the illustrated embodiment, system environment <b>2100</b> includes one or more client computing devices <b>2104</b>, <b>2106</b>, and <b>2108</b> that may be used by users to interact with a cloud infrastructure system <b>2102</b> that provides cloud services. The client computing devices may be configured to operate a client application such as a web browser, a proprietary client application, or some other application, which may be used by a user of the client computing device to interact with cloud infrastructure system <b>2102</b> to use services provided by cloud infrastructure system <b>2102</b>.</p><p id="p-0091" num="0113">It should be appreciated that cloud infrastructure system <b>2102</b> depicted in the figure may have other components than those depicted. Further, the embodiment shown in the figure is only one example of a cloud infrastructure system that may incorporate an embodiment of the invention. In some other embodiments, cloud infrastructure system <b>2102</b> may have more or fewer components than shown in the figure, may combine two or more components, or may have a different configuration or arrangement of components.</p><p id="p-0092" num="0114">Client computing devices <b>2104</b>, <b>2106</b>, and <b>2108</b> may be devices similar to those described above for <figref idref="DRAWINGS">FIG. <b>7</b></figref>. Although system environment <b>2100</b> is shown with three client computing devices, any number of client computing devices may be supported. Other devices such as devices with sensors, etc. may interact with cloud infrastructure system <b>2102</b>.</p><p id="p-0093" num="0115">Network(s) <b>2110</b> may facilitate communications and exchange of data between clients <b>2104</b>, <b>2106</b>, and <b>2108</b> and cloud infrastructure system <b>2102</b>. Each network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols. Cloud infrastructure system <b>2102</b> may comprise one or more computers and/or servers.</p><p id="p-0094" num="0116">In certain embodiments, services provided by the cloud infrastructure system may include a host of services that are made available to users of the cloud infrastructure system on demand, such as online data storage and backup solutions, Web-based e-mail services, hosted office suites and document collaboration services, database processing, managed technical support services, and the like. Services provided by the cloud infrastructure system can dynamically scale to meet the needs of its users. A specific instantiation of a service provided by cloud infrastructure system is referred to herein as a &#x201c;service instance.&#x201d; In general, any service made available to a user via a communication network, such as the Internet, from a cloud service provider's system is referred to as a &#x201c;cloud service.&#x201d; Typically, in a public cloud environment, servers and systems that make up the cloud service provider's system are different from the customer's own on-premises servers and systems. For example, a cloud service provider's system may host an application, and a user may, via a communication network such as the Internet, on demand, order and use the application.</p><p id="p-0095" num="0117">In some examples, a service in a computer network cloud infrastructure may include protected computer network access to storage, a hosted database, a hosted web server, a software application, or other service provided by a cloud vendor to a user, or as otherwise known in the art. For example, a service can include password-protected access to remote storage on the cloud through the Internet. As another example, a service can include a web service-based hosted relational database and a script-language middleware engine for private use by a networked developer. As another example, a service can include access to an email software application hosted on a cloud vendor's web site.</p><p id="p-0096" num="0118">In certain embodiments, cloud infrastructure system <b>2102</b> may include a suite of applications, middleware, and database service offerings that are delivered to a customer in a self-service, subscription-based, elastically scalable, reliable, highly available, and secure manner.</p><p id="p-0097" num="0119">In various embodiments, cloud infrastructure system <b>2102</b> may be adapted to automatically provision, manage and track a customer's subscription to services offered by cloud infrastructure system <b>2102</b>. Cloud infrastructure system <b>2102</b> may provide the cloud services via different deployment models. For example, services may be provided under a public cloud model in which cloud infrastructure system <b>2102</b> is owned by an organization selling cloud services and the services are made available to the general public or different industry enterprises. As another example, services may be provided under a private cloud model in which cloud infrastructure system <b>2102</b> is operated solely for a single organization and may provide services for one or more entities within the organization. The cloud services may also be provided under a community cloud model in which cloud infrastructure system <b>2102</b> and the services provided by cloud infrastructure system <b>2102</b> are shared by several organizations in a related community. The cloud services may also be provided under a hybrid cloud model, which is a combination of two or more different models.</p><p id="p-0098" num="0120">In some embodiments, the services provided by cloud infrastructure system <b>2102</b> may include one or more services provided under Software as a Service (SaaS) category, Platform as a Service (PaaS) category, Infrastructure as a Service (IaaS) category, or other categories of services including hybrid services. A customer, via a subscription order, may order one or more services provided by cloud infrastructure system <b>2102</b>. Cloud infrastructure system <b>2102</b> then performs processing to provide the services in the customer's subscription order.</p><p id="p-0099" num="0121">In some embodiments, the services provided by cloud infrastructure system <b>2102</b> may include, without limitation, application services, platform services and infrastructure services. In some examples, application services may be provided by the cloud infrastructure system via a SaaS platform. The SaaS platform may be configured to provide cloud services that fall under the SaaS category. For example, the SaaS platform may provide capabilities to build and deliver a suite of on-demand applications on an integrated development and deployment platform. The SaaS platform may manage and control the underlying software and infrastructure for providing the SaaS services. By utilizing the services provided by the SaaS platform, customers can utilize applications executing on the cloud infrastructure system. Customers can acquire the application services without the need for customers to purchase separate licenses and support. Various different SaaS services may be provided. Examples include, without limitation, services that provide solutions for sales performance management, enterprise integration, and business flexibility for large organizations.</p><p id="p-0100" num="0122">In some embodiments, platform services may be provided by the cloud infrastructure system via a PaaS platform. The PaaS platform may be configured to provide cloud services that fall under the PaaS category. Examples of platform services may include without limitation services that enable organizations to consolidate existing applications on a shared, common architecture, as well as the ability to build new applications that leverage the shared services provided by the platform. The PaaS platform may manage and control the underlying software and infrastructure for providing the PaaS services. Customers can acquire the PaaS services provided by the cloud infrastructure system without the need for customers to purchase separate licenses and support.</p><p id="p-0101" num="0123">By utilizing the services provided by the PaaS platform, customers can employ programming languages and tools supported by the cloud infrastructure system and control the deployed services. In some embodiments, platform services provided by the cloud infrastructure system may include database cloud services, middleware cloud services, and Java cloud services. In one embodiment, database cloud services may support shared service deployment models that enable organizations to pool database resources and offer customers a Database as a Service in the form of a database cloud. Middleware cloud services may provide a platform for customers to develop and deploy various business applications, and Java cloud services may provide a platform for customers to deploy Java applications, in the cloud infrastructure system.</p><p id="p-0102" num="0124">Various different infrastructure services may be provided by an IaaS platform in the cloud infrastructure system. The infrastructure services facilitate the management and control of the underlying computing resources, such as storage, networks, and other fundamental computing resources for customers utilizing services provided by the SaaS platform and the PaaS platform.</p><p id="p-0103" num="0125">In certain embodiments, cloud infrastructure system <b>2102</b> may also include infrastructure resources <b>2130</b> for providing the resources used to provide various services to customers of the cloud infrastructure system. In one embodiment, infrastructure resources <b>2130</b> may include pre-integrated and optimized combinations of hardware, such as servers, storage, and networking resources to execute the services provided by the PaaS platform and the SaaS platform.</p><p id="p-0104" num="0126">In some embodiments, resources in cloud infrastructure system <b>2102</b> may be shared by multiple users and dynamically re-allocated per demand. Additionally, resources may be allocated to users in different time zones. For example, cloud infrastructure system <b>2130</b> may enable a first set of users in a first time zone to utilize resources of the cloud infrastructure system for a specified number of hours and then enable the re-allocation of the same resources to another set of users located in a different time zone, thereby maximizing the utilization of resources.</p><p id="p-0105" num="0127">In certain embodiments, a number of internal shared services <b>2132</b> may be provided that are shared by different components or modules of cloud infrastructure system <b>2102</b> and by the services provided by cloud infrastructure system <b>2102</b>. These internal shared services may include, without limitation, a security and identity service, an integration service, an enterprise repository service, an enterprise manager service, a virus scanning and whitelist service, a high availability, backup and recovery service, service for enabling cloud support, an email service, a notification service, a file transfer service, and the like.</p><p id="p-0106" num="0128">In certain embodiments, cloud infrastructure system <b>2102</b> may provide comprehensive management of cloud services (e.g., SaaS, PaaS, and IaaS services) in the cloud infrastructure system. In one embodiment, cloud management functionality may include capabilities for provisioning, managing, and tracking a customer's subscription received by cloud infrastructure system <b>2102</b>, and the like.</p><p id="p-0107" num="0129">In one embodiment, as depicted in the figure, cloud management functionality may be provided by one or more modules, such as an order management module <b>2120</b>, an order orchestration module <b>2122</b>, an order provisioning module <b>2124</b>, an order management and monitoring module <b>2126</b>, and an identity management module <b>2128</b>. These modules may include or be provided using one or more computers and/or servers, which may be general purpose computers, specialized server computers, server farms, server clusters, or any other appropriate arrangement and/or combination.</p><p id="p-0108" num="0130">In operation <b>2134</b>, a customer using a client device, such as client device <b>2104</b>, <b>2106</b> or <b>2108</b>, may interact with cloud infrastructure system <b>2102</b> by requesting one or more services provided by cloud infrastructure system <b>2102</b> and placing an order for a subscription for one or more services offered by cloud infrastructure system <b>2102</b>. In certain embodiments, the customer may access a cloud User Interface (UI), cloud UI <b>2112</b>, cloud UI <b>2114</b> and/or cloud UI <b>2116</b> and place a subscription order via these UIs. The order information received by cloud infrastructure system <b>2102</b> in response to the customer placing an order may include information identifying the customer and one or more services offered by the cloud infrastructure system <b>2102</b> that the customer intends to subscribe to.</p><p id="p-0109" num="0131">After an order has been placed by the customer, the order information is received via the cloud UIs, <b>2112</b>, <b>2114</b> and/or <b>2116</b>. At operation <b>2136</b>, the order is stored in order database <b>2118</b>. Order database <b>2118</b> can be one of several databases operated by cloud infrastructure system <b>2118</b> and operated in conjunction with other system elements. At operation <b>2138</b>, the order information is forwarded to an order management module <b>2120</b>. In some instances, order management module <b>2120</b> may be configured to perform billing and accounting functions related to the order, such as verifying the order, and upon verification, booking the order. At operation <b>2140</b>, information regarding the order is communicated to an order orchestration module <b>2122</b>. Order orchestration module <b>2122</b> may utilize the order information to orchestrate the provisioning of services and resources for the order placed by the customer. In some instances, order orchestration module <b>2122</b> may orchestrate the provisioning of resources to support the subscribed services using the services of order provisioning module <b>2124</b>.</p><p id="p-0110" num="0132">In certain embodiments, order orchestration module <b>2122</b> enables the management of business processes associated with each order and applies business logic to determine whether an order should proceed to provisioning. At operation <b>2142</b>, upon receiving an order for a new subscription, order orchestration module <b>2122</b> sends a request to order provisioning module <b>2124</b> to allocate resources and configure those resources needed to fulfill the subscription order. Order provisioning module <b>2124</b> enables the allocation of resources for the services ordered by the customer. Order provisioning module <b>2124</b> provides a level of abstraction between the cloud services provided by cloud infrastructure system <b>2102</b> and the physical implementation layer that is used to provision the resources for providing the requested services. Order orchestration module <b>2122</b> may thus be isolated from implementation details, such as whether or not services and resources are provisioned on the fly or pre-provisioned and only allocated/assigned upon request.</p><p id="p-0111" num="0133">At operation <b>2144</b>, once the services and resources are provisioned, a notification of the provided service may be sent to customers on client devices <b>2104</b>, <b>2106</b> and/or <b>2108</b> by order provisioning module <b>2124</b> of cloud infrastructure system <b>2102</b>.</p><p id="p-0112" num="0134">At operation <b>2146</b>, the customer's subscription order may be managed and tracked by an order management and monitoring module <b>2126</b>. In some instances, order management and monitoring module <b>2126</b> may be configured to collect usage statistics for the services in the subscription order, such as the amount of storage used, the amount data transferred, the number of users, and the amount of system up time and system down time.</p><p id="p-0113" num="0135">In certain embodiments, cloud infrastructure system <b>2102</b> may include an identity management module <b>2128</b>. Identity management module <b>2128</b> may be configured to provide identity services, such as access management and authorization services in cloud infrastructure system <b>2102</b>. In some embodiments, identity management module <b>2128</b> may control information about customers who wish to utilize the services provided by cloud infrastructure system <b>2102</b>. Such information can include information that authenticates the identities of such customers and information that describes which actions those customers are authorized to perform relative to various system resources (e.g., files, directories, applications, communication ports, memory segments, etc.) Identity management module <b>2128</b> may also include the management of descriptive information about each customer and about how and by whom that descriptive information can be accessed and modified.</p><p id="p-0114" num="0136">In the foregoing specification, the disclosure has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the disclosure. For example, the above-described process flows are described with reference to a particular ordering of process actions. However, the ordering of many of the described process actions may be changed without affecting the scope or operation of the disclosure. The specification and drawings are, accordingly, to be regarded in an illustrative rather than restrictive sense.</p><p id="p-0115" num="0137">Additionally, the approach disclosed herein for scalable specification and self-governance for autonomous databases, cluster databases, and multi-tenant databases in cloud and on-prem environments addresses at least some of the issues of prior techniques suffer from, by alleviating the necessity to individually manage each CDB instance, and PDB configurations therein. This allows for the creation of configuration changes that can be affected essentially in real time. This at least improves the ability of the cluster to utilize the resources of the cluster at a peak level, at least because an administrator no longer has to configure CDB instances and open PDBs to leave as many resources as possible unused to allow for changing circumstances that might otherwise provision more resources then actually exist. In this way the approach provided herein enables improved and automatic configuration and management of CDB/PDB instances.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method comprising:<claim-text>maintaining a consolidated database instance on a computing node in a cluster of computing nodes, wherein the consolidated database instance was configured using a configuration template having one or more configuration parameters that depend on a status parameter representing a current state of the computing node;</claim-text><claim-text>monitoring the computing node to detect a change at the computing node that corresponds to a configuration parameter in the configuration template; and</claim-text><claim-text>automatically reconfiguring, in response to detecting the change at the computing node that corresponds to the configuration template, the consolidated database instance using the configuration template to regenerate the configuration parameter.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the configuration template is used by a configuration management process to generate a consolidated database instance configuration.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the configuration template is used by a configuration management process to generate a pluggable database configuration.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein monitoring the computing node to detect a change at the computing node that corresponds to the configuration template comprises parsing the configuration template to determine if a status parameter effected by the change corresponding to a configuration parameter that is in the configuration template.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein automatically reconfiguring the consolidated database instance using the configuration template to regenerate the configuration parameter comprises updating the configuration parameter by executing a statement in the configuration template.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising updating another configuration parameter based on the updated configuration parameter, wherein another configuration parameter in the configuration template depends on the updated configuration parameter.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the configuration template is maintained in memory allocated to the consolidated database instance.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a consolidated database instance configuration is maintained in memory allocated to the consolidated database instance.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the regenerated configuration parameter is applied to an open pluggable database, and the change detected comprising opening a second pluggable database.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A non-transitory computer readable medium having stored thereon a sequence of instructions which, when executed by a processor causes a set of acts comprising:<claim-text>maintaining a consolidated database instance on a computing node in a cluster of computing nodes, wherein the consolidated database instance was configured using a configuration template having one or more configuration parameters that depend on a status parameter representing a current state of the computing node;</claim-text><claim-text>monitoring the computing node to detect a change at the computing node that corresponds to a configuration parameter in the configuration template; and</claim-text><claim-text>automatically reconfiguring, in response to detecting the change at the computing node that corresponds to the configuration template, the consolidated database instance using the configuration template to regenerate the configuration parameter.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the configuration template is used by a configuration management process to generate a consolidated database instance configuration.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer readable medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the configuration template is used by a configuration management process to generate a pluggable database configuration.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein monitoring the computing node to detect a change at the computing node that corresponds to the configuration template comprises parsing the configuration template to determine if a status parameter effected by the change corresponding to a configuration parameter that is in the configuration template.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein automatically reconfiguring the consolidated database instance using the configuration template to regenerate the configuration parameter comprises updating the configuration parameter by executing a statement in the configuration template.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The computer readable medium of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the set of acts further comprise updating another configuration parameter based on the updated configuration parameter, wherein another configuration parameter in the configuration template depends on the updated configuration parameter.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the configuration template is maintained in memory allocated to the consolidated database instance.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein a consolidated database instance configuration is maintained in memory allocated to the consolidated database instance.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the regenerated configuration parameter is applied to an open pluggable database, and the change detected comprising opening a second pluggable database.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A computing system comprising:<claim-text>a memory to hold a set of instructions;</claim-text><claim-text>a computer processor to execute the set of instructions, which when executed cause a set of acts comprising:<claim-text>maintaining a consolidated database instance on a computing node in a cluster of computing nodes, wherein the consolidated database instance was configured using a configuration template having one or more configuration parameters that depend on a status parameter representing a current state of the computing node;</claim-text><claim-text>monitoring the computing node to detect a change at the computing node that corresponds to a configuration parameter in the configuration template; and</claim-text><claim-text>automatically reconfiguring, in response to detecting the change at the computing node that corresponds to the configuration template, the consolidated database instance using the configuration template to regenerate the configuration parameter.</claim-text></claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computing system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the configuration template is used by a configuration management process to generate a consolidated database instance configuration, and the configuration template is used by a configuration management process to generate a pluggable database configuration.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The computing system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein monitoring the computing node to detect a change at the computing node that corresponds to the configuration template comprises parsing the configuration template to determine if a status parameter effected by the change corresponding to a configuration parameter that is in the configuration template.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The computing system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein automatically reconfiguring the consolidated database instance using the configuration template to regenerate the configuration parameter comprises updating the configuration parameter by executing a statement in the configuration template, and the set of acts further comprise updating another configuration parameter based on the updated configuration parameter, wherein another configuration parameter in the configuration template depends on the updated configuration parameter.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The computing system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the configuration template and a consolidated database instance configuration is maintained in memory allocated to the consolidated database instance.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The computing system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the regenerated configuration parameter is applied to an open pluggable database, and the change detected comprising opening a second pluggable database.</claim-text></claim></claims></us-patent-application>