<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004671A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004671</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17857781</doc-number><date>20220705</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>GB</country><doc-number>2109573.2</doc-number><date>20210702</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>62</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>6227</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc></classifications-cpc><invention-title id="d2e61">SYSTEM AND METHOD FOR MANAGING TRANSPARENT DATA ENCRYPTION OF DATABASE</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>WORLDR TECHNOLOGIES LIMITED</orgname><address><city>Slough</city><country>GB</country></address></addressbook><residence><country>GB</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Buchan</last-name><first-name>Maximilian Alastair</first-name><address><city>Slough</city><country>GB</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Maskaliou</last-name><first-name>Dzmitry</first-name><address><city>Slough</city><country>GB</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Antipin</last-name><first-name>Michael</first-name><address><city>Slough</city><country>GB</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Golanski</last-name><first-name>Yann</first-name><address><city>Slough</city><country>GB</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Disclosed is a system for managing transparent data encryption of a database. The system comprises an encrypted vault application and an application server. The encrypted vault application stores at least one encryption key for the database. The application server is configured to provide an authorization token to the encrypted vault application after unsealing of the encrypted vault application; receive an access token from the encrypted vault application, after authentication of the application server; provide the access token to the encrypted vault application to receive at least one encryption key therefrom; and communicate the at least one encryption key, via a key talker, to the database; and wherein the database comprises a key listener that listens for the at least one encryption key and provides the at least one encryption key to the database.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="139.28mm" wi="123.36mm" file="US20230004671A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="162.56mm" wi="125.39mm" file="US20230004671A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="161.54mm" wi="147.74mm" file="US20230004671A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">The present disclosure relates generally to data encryption and security; and more specifically, to methods and systems for managing transparent data encryption of databases.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Nowadays, in an organization of any size, ensuring that protective measures to keep any unauthorized access out of their databases, websites and computers, are of utmost importance. Furthermore, in today's data driven environments, data has become a primary asset found at the core of most business operations and decisions. Notably, databases are encrypted in order to encode data and to render it unintelligible to someone who does not have the authorization to access the data. Typically, once data is encrypted, only authorized users who possess an encryption key to access the database may read or use the data. Furthermore, the encryption key may be stored in a vault to provide another layer of security. Additionally, application servers connect the database with authorized user, wherein the application server controls the data flow for better performance, and provides security to the data. Consequently, in case the encryption method is effective, there is complete protection of data from security threats and data breaches. However, even after using adequate encryption methods for securing the database, there are still issues in keeping the data safe.</p><p id="p-0004" num="0003">Conventionally, the databases would open by using only one encryption key. The database requesting for the encryption key might attract unwanted attention from attackers. Moreover, the encryption key itself acted as a validator, and there was no authentication of the user seeking for data from the database using the encryption key. Therefore, in case the encryption key was in the possession of attackers, there was no way to stop them or take any action preemptively. Additionally, only one administrator key was sufficient to enter the vault, which may lead to a data breach in case the one administrator key is with the attacker. Typically, the database would request for the encryption key, thus signaling the attackers and exposing the database to a possible attack. Furthermore, the encryption key was stored by the application server. Therefore, any attacker having compromised either the database, or the application server or both thereof, will have access to the encryption key and pose a threat to the security of the organization.</p><p id="p-0005" num="0004">In recent times, secure isolated regions or trusted execution environments are developed to provide a secure container, referred to as an enclave herein, containing data or/and software in memory and hardware. However, the enclaves potentially contain data or/and software alongside untrusted regions, and shares resources with untrusted entities. Furthermore, attestation may be used to verify to an authorized user that the application server and the database are trustworthy. However, in case the data is breached, the authorized user will blindly trust the verification provided by the attestation, and get risked being attacked. Furthermore, Key Vault is used for storing the encryption key. However, only one version of the Key Vault is available and is not suitable for organizations of different sizes.</p><p id="p-0006" num="0005">Therefore, in light of the foregoing discussion, there exists a need to overcome the aforementioned drawbacks associated with data encryption and security.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0007" num="0006">The present disclosure seeks to provide a system for managing transparent data encryption of a database. The present disclosure also seeks to provide a method for managing transparent data encryption of a database. An aim of the present disclosure is to provide a solution that overcomes at least partially the problems encountered in prior art.</p><p id="p-0008" num="0007">In one aspect, the present disclosure provides a system for managing transparent data encryption of a database, the system comprising<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0008">an encrypted vault application for storing at least one encryption key for the database, wherein the encrypted vault application requires a plurality of administrator keys for unsealing thereof; and</li>        <li id="ul0002-0002" num="0009">an application server configured to:        <ul id="ul0003" list-style="none">            <li id="ul0003-0001" num="0010">provide an authorization token to the encrypted vault application after unsealing of the encrypted vault application, wherein the authorization token is characteristic to the application server and is used for authentication of the application server;</li>            <li id="ul0003-0002" num="0011">receive an access token from the encrypted vault application, after authentication of the application server;</li>            <li id="ul0003-0003" num="0012">provide the access token to the encrypted vault application to receive at least one encryption key therefrom; and</li>            <li id="ul0003-0004" num="0013">communicate the at least one encryption key, via a key talker, to the database; and wherein the database comprises a key listener that listens for the at least one encryption key and provides the at least one encryption key to the database.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0009" num="0014">In another aspect, the present disclosure provides a method for managing transparent data encryption of a database, wherein the method is implemented using a system comprising<ul id="ul0004" list-style="none">    <li id="ul0004-0001" num="0000">    <ul id="ul0005" list-style="none">        <li id="ul0005-0001" num="0015">an encrypted vault application for storing at least one encryption key for the database, wherein the encrypted vault application requires a plurality of administrator keys for unsealing thereof; and</li>        <li id="ul0005-0002" num="0016">an application server;<br/>wherein the method comprises</li>        <li id="ul0005-0003" num="0017">providing an authorization token to the encrypted vault application after unsealing of the encrypted vault application, wherein the authorization token is characteristic to the application server and is used for authentication of the application server;</li>        <li id="ul0005-0004" num="0018">receiving an access token from the encrypted vault application, after authentication of the application server;</li>        <li id="ul0005-0005" num="0019">provide the access token to the encrypted vault application to receive at least one encryption key therefrom; and</li>        <li id="ul0005-0006" num="0020">communicating the at least one encryption key, via a key talker, to the database; and wherein the database comprises a key listener that listens for the at least one encryption key and provides the at least one encryption key to the database.</li>    </ul>    </li></ul></p><p id="p-0010" num="0021">Embodiments of the present disclosure substantially eliminate or at least partially address the aforementioned problems in the prior art, and enables secure transparent data encryption of the database.</p><p id="p-0011" num="0022">Additional aspects, advantages, features and objects of the present disclosure would be made apparent from the drawings and the detailed description of the illustrative embodiments construed in conjunction with the appended claims that follow.</p><p id="p-0012" num="0023">It will be appreciated that features of the present disclosure are susceptible to being combined in various combinations without departing from the scope of the present disclosure as defined by the appended claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0013" num="0024">The summary above, as well as the following detailed description of illustrative embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the present disclosure, exemplary constructions of the disclosure are shown in the drawings. However, the present disclosure is not limited to specific methods and instrumentalities disclosed herein. Moreover, those skilled in the art will understand that the drawings are not to scale. Wherever possible, like elements have been indicated by identical numbers.</p><p id="p-0014" num="0025">Embodiments of the present disclosure will now be described, by way of example only, with reference to the following diagrams wherein:</p><p id="p-0015" num="0026"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a block diagram depicting a network environment in which a system for managing transparent data encryption of a database is implemented, in accordance with an embodiment of the present disclosure; and</p><p id="p-0016" num="0027"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart depicting steps of method for managing transparent data encryption of a database, in accordance with an embodiment of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0017" num="0028">In the accompanying drawings, an underlined number is employed to represent an item over which the underlined number is positioned or an item to which the underlined number is adjacent. A non-underlined number relates to an item identified by a line linking the non-underlined number to the item. When a number is non-underlined and accompanied by an associated arrow, the non-underlined number is used to identify a general item at which the arrow is pointing.</p><heading id="h-0005" level="1">DETAILED DESCRIPTION OF EMBODIMENTS</heading><p id="p-0018" num="0029">The following detailed description illustrates embodiments of the present disclosure and ways in which they can be implemented. Although some modes of carrying out the present disclosure have been disclosed, those skilled in the art would recognize that other embodiments for carrying out or practising the present disclosure are also possible.</p><p id="p-0019" num="0030">In one aspect, the present disclosure provides a system for managing transparent data encryption of a database, the system comprising<ul id="ul0006" list-style="none">    <li id="ul0006-0001" num="0000">    <ul id="ul0007" list-style="none">        <li id="ul0007-0001" num="0031">an encrypted vault application for storing at least one encryption key for the database, wherein the encrypted vault application requires a plurality of administrator keys for unsealing thereof; and</li>        <li id="ul0007-0002" num="0032">an application server configured to:        <ul id="ul0008" list-style="none">            <li id="ul0008-0001" num="0033">provide an authorization token to the encrypted vault application after unsealing of the encrypted vault application, wherein the authorization token is characteristic to the application server and is used for authentication of the application server;</li>            <li id="ul0008-0002" num="0034">receive an access token from the encrypted vault application, after authentication of the application server;</li>            <li id="ul0008-0003" num="0035">provide the access token to the encrypted vault application to receive at least one encryption key therefrom; and</li>            <li id="ul0008-0004" num="0036">communicate the at least one encryption key, via a key talker, to the database; and wherein the database comprises a key listener that listens for the at least one encryption key and provides the at least one encryption key to the database.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0020" num="0037">In another aspect, the present disclosure provides a method for managing transparent data encryption of a database, wherein the method is implemented using a system comprising<ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0000">    <ul id="ul0010" list-style="none">        <li id="ul0010-0001" num="0038">an encrypted vault application for storing at least one encryption key for the database, wherein the encrypted vault application requires a plurality of administrator keys for unsealing thereof; and</li>        <li id="ul0010-0002" num="0039">an application server;<br/>wherein the method comprises</li>        <li id="ul0010-0003" num="0040">providing an authorization token to the encrypted vault application after unsealing of the encrypted vault application, wherein the authorization token is characteristic to the application server and is used for authentication of the application server;</li>        <li id="ul0010-0004" num="0041">receiving an access token from the encrypted vault application, after authentication of the application server;</li>        <li id="ul0010-0005" num="0042">provide the access token to the encrypted vault application to receive at least one encryption key therefrom; and</li>        <li id="ul0010-0006" num="0043">communicating the at least one encryption key, via a key talker, to the database; and wherein the database comprises a key listener that listens for the at least one encryption key and provides the at least one encryption key to the database.</li>    </ul>    </li></ul></p><p id="p-0021" num="0044">The present disclosure provides the aforementioned system and method for managing transparent data encryption of a database. The system of the present disclosure comprises an encrypted vault application, which requires plurality of administrator keys for unsealing, thereby ensuring that no one user can singularly open the encrypted vault application. Therefore, an attacker possessing a singular administrator key will not be able to open the encrypted vault application, as all the plurality of administrator keys are required simultaneously to unseal the encrypted vault application, thereby preventing a potential attack. Furthermore, the encryption key is never stored on the database or on the application server, which averts an attack in case the attacker accesses the database or the application server or both. Conventionally, the database would request at least one encryption key to access the database, making the request prone to interception by the attacker, and the attacker would latch on to the request in order to breach the database. Beneficially, in the present disclosure, the database listens for the encryption key instead of requesting the encryption key discreetly, thereby avoiding a potential attack.</p><p id="p-0022" num="0045">Throughout the present disclosure, the term &#x201c;database&#x201d; as used herein relates to an organized body of digital information regardless of the manner in which the data or the organized body thereof is represented. Optionally, the database may be hardware, software, firmware and/or any combination thereof. For example, the organized body of related data may be in the form of a table, a map, a grid, a packet, a datagram, a file, a document, a list or in any other form. The database includes any data storage software and systems, such as, for example, a relational database like IBM DB2 and Oracle 9. Moreover, upon start up, the database cannot read its data since the data is encrypted. The database requires at least one encryption key for decryption thereof.</p><p id="p-0023" num="0046">The system comprises an encrypted vault application for storing at least one encryption key for the database, wherein the encrypted vault application requires a plurality of administrator keys for unsealing thereof. Herein, the encrypted vault application enables secure storage and tightly controls the at least one encryption key for protecting machines, applications and sensitive data. Particularly, the at least one encryption key is only saved in the encrypted vault application. Furthermore, the encrypted vault application helps secure sensitive data without exposing any of the at least one encryption key. Additionally, using the plurality of administrator keys ensures that no one user is able to singularly open the encrypted vault application to procure at least one encryption key for the database. Therefore, in case any attacker gets hold of a single administrator key, they will not be able to unseal the encrypted vault application, as the plurality of administrator keys is required simultaneously, thereby preventing a potential attack. Additionally, the term &#x201c;at least one encryption key&#x201d; refers to a random string of bits which are created with algorithms designed to ensure that each of the at least one encryption key is unique and unpredictable. Furthermore, the encryption key is not stored in a place, such as the database, where anyone may be able to access it. Furthermore, the database never requests the encryption key. Subsequently, the at least one encryption key is provided to access the encrypted data in the database. Herein, at all stages the encryption key is passed and never written on to a disk. Consequently, this helps to stop a man in the middle attack by an attacker who has only compromised the database. Herein, the man in the middle attack may happen when an application makes a connection to an application server without checking that it is indeed the application server it is supposed to connect to. Hence, the attacker will not be able to procure any at least one encryption key for unsealing the database. For the sake of brevity, hereinafter the term &#x201c;man in the middle attack&#x201d; is used interchangeably with the term &#x201c;attack&#x201d;.</p><p id="p-0024" num="0047">In an embodiment, the encrypted vault application is a Hashicorp Vault. Herein, the Hashicorp Vault provides a unified interface, while providing tight access control and recording a detailed audit log. Furthermore, the at least one encryption key is stored securely and available only when strictly necessary and the plurality of administrator keys are available to unseal the encrypted vault application.</p><p id="p-0025" num="0048">In an embodiment, the plurality of administrator keys for unsealing of the encrypted vault application are shared using Shamir's Secret Sharing (SSS) algorithm. Herein, the SSS is a cryptographic algorithm that allows the plurality of administrator keys to be distributed securely amongst an untrusted network. Furthermore, the SSS works by splitting the plurality of administrator keys into smaller shares, wherein each individual share is unusable on its own. Thereby, the plurality of administrator keys are coupled and reconstructed, and the encrypted vault is unsealed. Furthermore, the encrypted vault application may be unsealed using a secure unsealing mechanism involving top senior executives and executive-level managers within an organization to unseal the encrypted vault application. Additionally, the encrypted vault application may be unsealed using another convenient and secure unsealing mechanism. Herein, the plurality of administrator keys is kept in Kubernetes Secrets. In particular, Kubernetes Secrets allow storing and managing sensitive information, for instance, passwords, plurality of administrator keys and so forth, and provide protection from unnecessary visibility that may make it vulnerable for attacks.</p><p id="p-0026" num="0049">Throughout the present disclosure, the term &#x201c;application server&#x201d; refers to a software application specifically designed to run applications, for instance, web-based applications and so forth. Furthermore, the application server is hosted on a physical server, wherein the physical server is a piece of computer hardware that provides functionality for other programs or devices. Additionally, the application server provides processing power and memory to run applications, such as for example demanding web applications, in real-time. Notably, the application server is the main link between the encrypted vault application and the database. Beneficially, the application server may be a complex stack of different computational elements running specific tasks that need to work as one to power multiple clouds and web-based software and application. Subsequently, the application server is designed to install, operate and host applications and associated services for end users, IT services and organizations and facilitates the hosting and delivery of high-end consumer or business applications. Furthermore, the application server may also contain its own graphical user interfaces for management through personal computers, and may also take care of its own resources, as well as transaction processing, messaging, resource and connection pooling, and performing security tasks. Beneficially, the application server provides with an additional layer of security.</p><p id="p-0027" num="0050">The system comprises the application server. Herein, the application server never holds any encryption key for the database, thereby preventing any attacks and data breaches. Subsequently, any attacker having compromised only the application server cannot get the at least one encryption key. Moreover, in case the application server tries to connect to the database, it is not able to connect since the database is sealed. Henceforth, any attacker having compromised both the application server and the database will still not be able to procure the encryption key, since the encryption key is never saved and is encrypted in transit.</p><p id="p-0028" num="0051">The application server is configured to provide an authorization token to the encrypted vault application after unsealing of the encrypted vault application, wherein the authorization token is characteristic to the application server and is used for authentication of the application server. Herein, the encrypted vault application receives the authorization token from the application server to authorize access thereof to procure the access token from the encrypted vault application. Notably, the application server may also provide information relating to the database that it intends to access. Specifically, the encrypted vault application may store encryption keys for a plurality of databases. Therefore, the application server may provide along with the authorization token, information relating to the database (of the plurality of databases) that it wishes to access. It will be appreciated that the authorization token is characteristic to the application server and therefore, the encrypted vault application uses the authorization token to verify if the given application server requesting encryption key for a given database has rights to access the given database.</p><p id="p-0029" num="0052">Optionally, the application server is configured to employ Kubernetes service account to authenticate the application server. Notably, the authorization token is a Kubernetes token. Furthermore, a Kubernetes service account is employed by the application server to interact with a Kubernetes cluster. Herein, to access the Kubernetes cluster, the user has to create a service account, that is a Kubernetes service account.</p><p id="p-0030" num="0053">Subsequently, the Kubernetes service account generates a Kubernetes token, which is required by the application server to procure at least one encryption key from the encrypted vault application. Notably, Kubernetes service acts as a trusted third-party service and is configured to provide authorization tokens to application servers and the encrypted vault application. Subsequently, when the encrypted vault application receives a given authorization token from the application server, the encrypted vault application compares the authorization token received from the application server with the authorization token provided to it by the Kubernetes service. Beneficially, this is a secure Kubernetes procedure.</p><p id="p-0031" num="0054">The application server is configured to receive an access token from the encrypted vault application, after authentication of the application server. Herein, the access token can be provided to a user and is used to access the database. Notably, the encrypted vault application is configured to provide at least one encryption key for the database, upon receiving the access token.</p><p id="p-0032" num="0055">Optionally, the access token is time sensitive and is used only once to obtain the at least one encryption key from the encrypted vault application. Herein, in case the access token is available for an extended time and is not getting used in that extended time, then the access token risks getting unwanted attention from attackers, who might latch on to it to get to the at least one encryption key. Furthermore, using a particular access token multiple times enables the access token to be stored either by the application server or the encrypted vault application or both, making it easier for the attackers to detect the access token and use it for procuring the at least one encryption key and attack the database.</p><p id="p-0033" num="0056">The application server is configured to provide the access token to the encrypted vault application to receive at least one encryption key therefrom. Typically, Transparent Data Encryption (TDE) is used to encrypt the entire database, which therefore involves encrypting data at rest, wherein &#x201c;data at rest&#x201d; refers to data that is currently unused. Furthermore, the TDE ensures that the data on the database is not read by attackers and prevents data breaches. Additionally, there may be plurality of encryption keys to access different data files in the database. Therefore, according to the authenticated access token, the necessary at least one encryption key is provided by the encrypted vault application, in order to access a particular data file from the database, thus avoiding a data breach. Furthermore, authentication of access tokens adds a layer of security. Typically, for authentication of access token, a service verifies the application server request. Herein, the service may be Amazon Web Services (AWS), Google Cloud Platform (GCP), Key Management Service (KMS) and so forth. Subsequently, the encrypted vault application can be unsealed automatically through the service. Furthermore, upon completion of the verification of the application server request, the application server issues the access token and responds to the application server request</p><p id="p-0034" num="0057">Optionally, the application server is configured to raise an alarm in an event of not receiving the at least one encryption key after providing the access token. Herein, the alarm may be a Short Message Service (SMS), phone, email, or any other means of communication, along with the compulsory involvement of a human. However, in case the time of procuring the encryption key from the encrypted vault application expires, a false alarm is raised. Furthermore, an alarm may be raised in case an attack occurs, and the attacker has stolen the access token in order to receive the encryption key to the database.</p><p id="p-0035" num="0058">The application server is configured to communicate the at least one encryption key, via a key talker, to the database, wherein the database comprises a key listener that listens for the at least one encryption key. Essentially, the key listener waits for application server to provide the at least one encryption key. Herein, the application server requests the encryption key from the encrypted vault application, wherein upon receiving the encryption key, the application server immediately passes it to the key talker. Typically, neither the key listener nor the key talker holds the encryption key.</p><p id="p-0036" num="0059">Optionally, the at least one encryption key is communicated and provided using Transport Layer Security (TSL). Herein, TSL is an encryption-based security protocol used for the purpose of ensuring privacy, authentication and data integrity for communication of the at least one encryption key from the application server to the database. Notably, the key talker tells the encryption key using secure sockets in the TSL to the database, wherein the database listens for the encryption key via the key listener. Conventionally, the database would request for at least one encryption key, thereby making it vulnerable to a possible attack, wherein the attackers can intercept the request and latch on to it in order to attack the database and commit a data breach. Therefore, the database listens for the encryption key via the key listener instead of requesting for it, essentially enabling the present disclosure as discreet as possible. Furthermore, traffic between the key talker and the key listener is encrypted.</p><p id="p-0037" num="0060">The application server is configured to provide the at least one encryption key to the database. Herein, the key talker upon receiving the at least one encryption key, immediately connects to the key listener and sends the at least one encryption key to the key listener, wherein the at least one encryption key is encrypted in transit. Henceforth, the database is able to unseal the required data file and present it to the user who was given authorization to access the required data file from the database.</p><p id="p-0038" num="0061">The present disclosure also related to the method as described above. Various embodiments and variants disclosed above apply mutatis mutandis to the method.</p><p id="p-0039" num="0062">Optionally, the method comprises raising an alarm in an event of not receiving the at least one encryption key, at the application server, after providing the access token.</p><p id="p-0040" num="0063">Optionally, the method comprises employing Kubernetes service account to authenticate the application server.</p><p id="p-0041" num="0064">Optionally, in the method, the access token is time sensitive and is used only once to obtain the at least one encryption key from the encrypted vault application.</p><p id="p-0042" num="0065">Optionally, the method comprises using Shamir's Secret Sharing (SSS) algorithm for sharing the plurality of administrator keys for unsealing of the encrypted vault application.</p><p id="p-0043" num="0066">Optionally, the method comprises using Transport Layer Security (TSL) for communicating and providing the at least one encryption key.</p><heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE DRAWINGS</heading><p id="p-0044" num="0067">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, illustrated is a block diagram depicting a network environment <b>100</b> in which a system <b>102</b> for managing transparent data encryption of a database <b>110</b> is implemented, in accordance with an embodiment of the present disclosure. The system <b>102</b> comprises an encrypted vault application <b>104</b> for storing at least one encryption key for the database <b>110</b>. The encrypted vault application <b>104</b> requires a plurality of administrator keys <b>108</b> for unsealing thereof. The system <b>102</b> comprises an application server <b>106</b> configured to provide access token to the encrypted vault application <b>104</b> after unsealing of the encrypted vault application <b>104</b>, wherein the access token is characteristic to the application server <b>106</b>, receive at least one encryption key for the database <b>110</b> from the encrypted vault application <b>104</b> after authentication of the access token, communicate the at least one encryption key, via a key talker to the database <b>110</b>, and provide at least one encryption key to the database <b>110</b>.</p><p id="p-0045" num="0068">Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, there is shown a flowchart depicting steps of method for managing transparent data encryption of a database, in accordance with an embodiment of the present disclosure. The method is implemented using a system (such as the system <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) comprising an encrypted vault application (such as the encrypted vault application <b>104</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) for storing at least one encryption key for the database, and an application server (such as the application server <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). The encrypted vault application requires a plurality of administrator keys for unsealing thereof. At step <b>202</b>, an access token is provided to the encrypted vault application after unsealing of the encrypted vault application, wherein the access token is characteristic to the application server. At a step <b>204</b>, at least one encryption key for the database is received from the encrypted vault application after authentication of the access token. At a step <b>206</b>, at least one encryption key is communicated via a key talker to the database, wherein the database comprises a key listener that listens for at least one encryption key and provides the at least one encryption key to the database.</p><p id="p-0046" num="0069">The steps <b>202</b>, <b>204</b> and <b>206</b> are only illustrative and other alternatives can also be provided where one or more steps are added, one or more steps are removes, or one or more steps are provided in a different sequence without departing from the scope of the claims herein.</p><p id="p-0047" num="0070">Modifications to embodiments of the present disclosure described in the foregoing are possible without departing from the scope of the present disclosure as defined by the accompanying claims. Expressions such as &#x201c;including&#x201d;, &#x201c;comprising&#x201d;, &#x201c;incorporating&#x201d;, &#x201c;have&#x201d;, &#x201c;is&#x201d; used to describe and claim the present disclosure are intended to be construed in a non-exclusive manner, namely allowing for items, components or elements not explicitly described also to be present. Reference to the singular is also to be construed to relate to the plural.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-01-13" num="01-13"><claim-text><b>1</b>.-<b>13</b>. (canceled)</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A system for managing transparent data encryption of a database, the system comprising<claim-text>an encrypted vault application for storing at least one encryption key for the database, wherein the encrypted vault application requires a plurality of administrator keys for unsealing thereof; and</claim-text><claim-text>an application server configured to:</claim-text><claim-text>provide an authorization token to the encrypted vault application after unsealing of the encrypted vault application, wherein the authorization token is characteristic to the application server and is used for authentication of the application server;</claim-text><claim-text>receive an access token from the encrypted vault application, after authentication of the application server;</claim-text><claim-text>provide the access token to the encrypted vault application to receive at least one encryption key therefrom; and</claim-text><claim-text>communicate the at least one encryption key, via a key talker, to the database; and wherein the database comprises a key listener that listens for the at least one encryption key and provides the at least one encryption key to the database.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the application server is configured to raise an alarm in an event of not receiving the at least one encryption key after providing the access token.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the application server is configured to employ Kubernetes service account to authenticate the application server.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the access token is time sensitive and is used only once to obtain the at least one encryption key from the encrypted vault application.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. A system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the encrypted vault application is a Hashicorp Vault.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the plurality of administrator keys for unsealing of the encrypted vault application are shared using Shamir's Secret Sharing (SSS) algorithm.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the at least one encryption key is communicated and provided using Transport Layer Security (TSL).</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. A method for managing transparent data encryption of a database, wherein the method is implemented using a system comprising<claim-text>an encrypted vault application for storing at least one encryption key for the database, wherein the encrypted vault application requires a plurality of administrator keys for unsealing thereof; and</claim-text><claim-text>an application server;</claim-text></claim-text><claim-text>wherein the method comprises<claim-text>providing an authorization token to the encrypted vault application after unsealing of the encrypted vault application, wherein the authorization token is characteristic to the application server and is used for authentication of the application server;</claim-text><claim-text>receiving an access token from the encrypted vault application, after authentication of the application server;</claim-text><claim-text>provide the access token to the encrypted vault application to receive at least one encryption key therefrom; and</claim-text><claim-text>communicating the at least one encryption key, via a key talker, to the database; and wherein the database comprises a key listener that listens for the at least one encryption key and provides the at least one encryption key to the database.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. A method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the method comprises raising an alarm in an event of not receiving the at least one encryption key, at the application server, after providing the access token.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. A method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the method comprises employing Kubernetes service account to authenticate the application server.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. A method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the access token is time sensitive and is used only once to obtain the at least one encryption key from the encrypted vault application.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. A method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the method comprises using Shamir's Secret Sharing (SSS) algorithm for sharing the plurality of administrator keys for unsealing of the encrypted vault application.</claim-text></claim></claims></us-patent-application>