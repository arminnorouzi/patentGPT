<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004299A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004299</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17931504</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>065</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0647</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0683</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0604</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>067</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0635</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Continuing Replication During Storage System Transportation</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17077467</doc-number><date>20201022</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11442652</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17931504</doc-number></document-id></child-doc></relation></continuation><continuation-in-part><relation><parent-doc><document-id><country>US</country><doc-number>16937396</doc-number><date>20200723</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11349917</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17077467</doc-number></document-id></child-doc></relation></continuation-in-part></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>PURE STORAGE, INC.</orgname><address><city>MOUNTAIN VIEW</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>DAILEY</last-name><first-name>AARON</first-name><address><city>SAN JOSE</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>KARR</last-name><first-name>RONALD</first-name><address><city>PALO ALTO</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>TSELENTIS</last-name><first-name>NICOLE</first-name><address><city>LOS ALTOS</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>JENNINGS</last-name><first-name>LOGAN</first-name><address><city>MENLO PARK</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Continuing replication during storage system transportation, including: replicating, between a first storage system and a second storage system, a dataset; connecting, by the first storage system during movement of the first storage system to a new physical location, to a communication network available at one or more intermediate physical locations; and continuing the replicating of the dataset between the first storage system at one or more of the intermediate physical locations and the second storage system over the communication network available at one or more of the intermediate physical locations.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="109.73mm" wi="158.75mm" file="US20230004299A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="226.23mm" wi="172.64mm" orientation="landscape" file="US20230004299A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="202.27mm" wi="148.00mm" orientation="landscape" file="US20230004299A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="223.60mm" wi="144.36mm" orientation="landscape" file="US20230004299A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="224.96mm" wi="163.07mm" orientation="landscape" file="US20230004299A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="210.82mm" wi="136.06mm" orientation="landscape" file="US20230004299A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="187.71mm" wi="148.00mm" orientation="landscape" file="US20230004299A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="231.90mm" wi="168.99mm" file="US20230004299A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="186.10mm" wi="172.30mm" file="US20230004299A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="214.71mm" wi="159.09mm" orientation="landscape" file="US20230004299A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="224.62mm" wi="171.53mm" file="US20230004299A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="219.79mm" wi="155.36mm" file="US20230004299A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="199.31mm" wi="139.28mm" file="US20230004299A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="225.47mm" wi="169.59mm" file="US20230004299A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="139.87mm" wi="122.09mm" file="US20230004299A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="232.49mm" wi="159.09mm" orientation="landscape" file="US20230004299A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="238.76mm" wi="176.95mm" file="US20230004299A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="226.14mm" wi="161.12mm" file="US20230004299A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="225.47mm" wi="175.68mm" file="US20230004299A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="238.84mm" wi="169.08mm" orientation="landscape" file="US20230004299A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="181.69mm" wi="175.34mm" file="US20230004299A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="244.26mm" wi="181.10mm" orientation="landscape" file="US20230004299A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="242.15mm" wi="184.57mm" orientation="landscape" file="US20230004299A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="245.28mm" wi="175.01mm" file="US20230004299A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="245.28mm" wi="175.01mm" file="US20230004299A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="245.28mm" wi="175.01mm" file="US20230004299A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="245.28mm" wi="172.13mm" file="US20230004299A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="245.28mm" wi="175.01mm" file="US20230004299A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="245.28mm" wi="175.01mm" file="US20230004299A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="245.28mm" wi="175.01mm" file="US20230004299A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="245.28mm" wi="175.01mm" file="US20230004299A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="245.28mm" wi="175.01mm" file="US20230004299A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00032" num="00032"><img id="EMI-D00032" he="247.23mm" wi="175.01mm" file="US20230004299A1-20230105-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00033" num="00033"><img id="EMI-D00033" he="248.58mm" wi="175.01mm" file="US20230004299A1-20230105-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00034" num="00034"><img id="EMI-D00034" he="242.15mm" wi="175.01mm" file="US20230004299A1-20230105-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00035" num="00035"><img id="EMI-D00035" he="242.15mm" wi="175.01mm" file="US20230004299A1-20230105-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00036" num="00036"><img id="EMI-D00036" he="242.15mm" wi="175.01mm" file="US20230004299A1-20230105-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00037" num="00037"><img id="EMI-D00037" he="242.15mm" wi="175.01mm" file="US20230004299A1-20230105-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00038" num="00038"><img id="EMI-D00038" he="242.15mm" wi="175.01mm" file="US20230004299A1-20230105-D00038.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00039" num="00039"><img id="EMI-D00039" he="242.15mm" wi="175.01mm" file="US20230004299A1-20230105-D00039.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00040" num="00040"><img id="EMI-D00040" he="245.36mm" wi="175.01mm" file="US20230004299A1-20230105-D00040.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00041" num="00041"><img id="EMI-D00041" he="260.10mm" wi="175.01mm" file="US20230004299A1-20230105-D00041.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00042" num="00042"><img id="EMI-D00042" he="246.80mm" wi="175.01mm" file="US20230004299A1-20230105-D00042.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00043" num="00043"><img id="EMI-D00043" he="259.50mm" wi="175.01mm" file="US20230004299A1-20230105-D00043.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00044" num="00044"><img id="EMI-D00044" he="259.50mm" wi="175.01mm" file="US20230004299A1-20230105-D00044.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00045" num="00045"><img id="EMI-D00045" he="261.20mm" wi="175.01mm" file="US20230004299A1-20230105-D00045.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00046" num="00046"><img id="EMI-D00046" he="258.06mm" wi="175.01mm" file="US20230004299A1-20230105-D00046.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00047" num="00047"><img id="EMI-D00047" he="258.06mm" wi="175.01mm" file="US20230004299A1-20230105-D00047.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This is a continuation application for patent entitled to a filing date and claiming the benefit of earlier-filed U.S. Pat. No. 11,442,652, issued Sep. 13, 2022, herein incorporated by reference in its entirety, which is a continuation in-part of U.S. Pat. No. 11,349,917, issued May 31, 2022.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0003" num="0002"><figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> illustrate example systems for data storage in accordance with some implementations.</p><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a perspective view of a storage cluster with multiple storage nodes and internal storage coupled to each storage node to provide network attached storage, in accordance with some embodiments.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram showing an interconnect switch coupling multiple storage nodes in accordance with some embodiments.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a multiple level block diagram, showing contents of a storage node and contents of one of the non-volatile solid state storage units in accordance with some embodiments.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a storage server environment, which uses embodiments of the storage nodes and storage units of some previous figures in accordance with some embodiments.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b>E</figref> is a blade hardware block diagram, showing a control plane, compute and storage planes, and authorities interacting with underlying physical resources, in accordance with some embodiments.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b>F</figref> depicts elasticity software layers in blades of a storage cluster, in accordance with some embodiments.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b>G</figref> depicts authorities and storage resources in blades of a storage cluster, in accordance with some embodiments.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> sets forth a diagram of a storage system that is coupled for data communications with a cloud services provider in accordance with some embodiments of the present disclosure.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> sets forth a diagram of a storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>3</b>C</figref> sets forth an example of a cloud-based storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>3</b>D</figref> illustrates an exemplary computing device that may be specifically configured to perform one or more of the processes described herein.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> illustrates an exemplary computing environment for synchronous replication in accordance with some embodiments.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> illustrates an example metadata model in accordance with some embodiments.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIGS. <b>5</b>A and <b>5</b>B</figref> set forth flowcharts for synchronous replication in accordance with some embodiments.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIGS. <b>6</b>A and <b>6</b>B</figref> illustrate an exemplary computing environment for a uniform model for distinct types of data replication in accordance with some embodiments.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIGS. <b>7</b> and <b>8</b></figref> illustrate example control flows for selective communication protocol layering for synchronous replication in accordance with some embodiments.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIGS. <b>9</b>-<b>25</b></figref> set forth flowcharts illustrating methods for replication handling among distinct networks according to some embodiments of the present disclosure.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIGS. <b>26</b>A-<b>32</b></figref> set forth flowcharts illustrating methods for replication handling during storage system transportation according to some embodiments of the present disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DESCRIPTION OF EMBODIMENTS</heading><p id="p-0022" num="0021">Example methods, apparatus, and products for replication handling in during storage system transportation in accordance with embodiments of the present disclosure are described with reference to the accompanying drawings, beginning with <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> illustrates an example system for data storage, in accordance with some implementations. System <b>100</b> (also referred to as &#x201c;storage system&#x201d; herein) includes numerous elements for purposes of illustration rather than limitation. It may be noted that system <b>100</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations.</p><p id="p-0023" num="0022">System <b>100</b> includes a number of computing devices <b>164</b>A-B. Computing devices (also referred to as &#x201c;client devices&#x201d; herein) may be embodied, for example, a server in a data center, a workstation, a personal computer, a notebook, or the like. Computing devices <b>164</b>A-B may be coupled for data communications to one or more storage arrays <b>102</b>A-B through a storage area network (SAN&#x2032;) <b>158</b> or a local area network (&#x2018;LAN&#x2019;) <b>160</b>.</p><p id="p-0024" num="0023">The SAN <b>158</b> may be implemented with a variety of data communications fabrics, devices, and protocols. For example, the fabrics for SAN <b>158</b> may include Fibre Channel, Ethernet, Infiniband, Serial Attached Small Computer System Interface (&#x2018;SAS&#x2019;), or the like. Data communications protocols for use with SAN <b>158</b> may include Advanced Technology Attachment (&#x2018;ATA&#x2019;), Fibre Channel Protocol, Small Computer System Interface (&#x2018;SCSI&#x2019;), Internet Small Computer System Interface (&#x2018;iSCSI&#x2019;), HyperSCSI, Non-Volatile Memory Express (&#x2018;NVMe&#x2019;) over Fabrics, or the like. It may be noted that SAN <b>158</b> is provided for illustration, rather than limitation. Other data communication couplings may be implemented between computing devices <b>164</b>A-B and storage arrays <b>102</b>A-B.</p><p id="p-0025" num="0024">The LAN <b>160</b> may also be implemented with a variety of fabrics, devices, and protocols. For example, the fabrics for LAN <b>160</b> may include Ethernet (802.3), wireless (802.11), or the like. Data communication protocols for use in LAN <b>160</b> may include Transmission Control Protocol (&#x2018;TCP&#x2019;), User Datagram Protocol (&#x2018;UDP&#x2019;), Internet Protocol (&#x2018;IP&#x2019;), HyperText Transfer Protocol (&#x2018;HTTP&#x2019;), Wireless Access Protocol (&#x2018;WAP&#x2019;), Handheld Device Transport Protocol (HDTP&#x2032;), Session Initiation Protocol (&#x2018;SIP&#x2019;), Real Time Protocol (&#x2018;RTP&#x2019;), or the like.</p><p id="p-0026" num="0025">Storage arrays <b>102</b>A-B may provide persistent data storage for the computing devices <b>164</b>A-B. Storage array <b>102</b>A may be contained in a chassis (not shown), and storage array <b>102</b>B may be contained in another chassis (not shown), in implementations. Storage array <b>102</b>A and <b>102</b>B may include one or more storage array controllers <b>110</b>A-D (also referred to as &#x201c;controller&#x201d; herein). A storage array controller <b>110</b>A-D may be embodied as a module of automated computing machinery comprising computer hardware, computer software, or a combination of computer hardware and software. In some implementations, the storage array controllers <b>110</b>A-D may be configured to carry out various storage tasks. Storage tasks may include writing data received from the computing devices <b>164</b>A-B to storage array <b>102</b>A-B, erasing data from storage array <b>102</b>A-B, retrieving data from storage array <b>102</b>A-B and providing data to computing devices <b>164</b>A-B, monitoring and reporting of disk utilization and performance, performing redundancy operations, such as Redundant Array of Independent Drives (RAID&#x2032;) or RAID-like data redundancy operations, compressing data, encrypting data, and so forth.</p><p id="p-0027" num="0026">Storage array controller <b>110</b>A-D may be implemented in a variety of ways, including as a Field Programmable Gate Array (&#x2018;FPGA&#x2019;), a Programmable Logic Chip (&#x2018;PLC&#x2019;), an Application Specific Integrated Circuit (&#x2018;ASIC&#x2019;), System-on-Chip (&#x2018;SOC&#x2019;), or any computing device that includes discrete components such as a processing device, central processing unit, computer memory, or various adapters. Storage array controller <b>110</b>A-D may include, for example, a data communications adapter configured to support communications via the SAN <b>158</b> or LAN <b>160</b>. In some implementations, storage array controller <b>110</b>A-D may be independently coupled to the LAN <b>160</b>. In implementations, storage array controller <b>110</b>A-D may include an I/O controller or the like that couples the storage array controller <b>110</b>A-D for data communications, through a midplane (not shown), to a persistent storage resource <b>170</b>A-B (also referred to as a &#x201c;storage resource&#x201d; herein). The persistent storage resource <b>170</b>A-B main include any number of storage drives <b>171</b>A-F (also referred to as &#x201c;storage devices&#x201d; herein) and any number of non-volatile Random Access Memory (&#x2018;NVRAM&#x2019;) devices (not shown).</p><p id="p-0028" num="0027">In some implementations, the NVRAM devices of a persistent storage resource <b>170</b>A-B may be configured to receive, from the storage array controller <b>110</b>A-D, data to be stored in the storage drives <b>171</b>A-F. In some examples, the data may originate from computing devices <b>164</b>A-B. In some examples, writing data to the NVRAM device may be carried out more quickly than directly writing data to the storage drive <b>171</b>A-F. In implementations, the storage array controller <b>110</b>A-D may be configured to utilize the NVRAM devices as a quickly accessible buffer for data destined to be written to the storage drives <b>171</b>A-F. Latency for write requests using NVRAM devices as a buffer may be improved relative to a system in which a storage array controller <b>110</b>A-D writes data directly to the storage drives <b>171</b>A-F. In some implementations, the NVRAM devices may be implemented with computer memory in the form of high bandwidth, low latency RAM. The NVRAM device is referred to as &#x201c;non-volatile&#x201d; because the NVRAM device may receive or include a unique power source that maintains the state of the RAM after main power loss to the NVRAM device. Such a power source may be a battery, one or more capacitors, or the like. In response to a power loss, the NVRAM device may be configured to write the contents of the RAM to a persistent storage, such as the storage drives <b>171</b>A-F.</p><p id="p-0029" num="0028">In implementations, storage drive <b>171</b>A-F may refer to any device configured to record data persistently, where &#x201c;persistently&#x201d; or &#x201c;persistent&#x201d; refers as to a device's ability to maintain recorded data after loss of power. In some implementations, storage drive <b>171</b>A-F may correspond to non-disk storage media. For example, the storage drive <b>171</b>A-F may be one or more solid-state drives (&#x2018;SSDs&#x2019;), flash memory based storage, any type of solid-state non-volatile memory, or any other type of non-mechanical storage device. In other implementations, storage drive <b>171</b>A-F may include mechanical or spinning hard disk, such as hard-disk drives (&#x2018;HDD&#x2019;).</p><p id="p-0030" num="0029">In some implementations, the storage array controllers <b>110</b>A-D may be configured for offloading device management responsibilities from storage drive <b>171</b>A-F in storage array <b>102</b>A-B. For example, storage array controllers <b>110</b>A-D may manage control information that may describe the state of one or more memory blocks in the storage drives <b>171</b>A-F. The control information may indicate, for example, that a particular memory block has failed and should no longer be written to, that a particular memory block contains boot code for a storage array controller <b>110</b>A-D, the number of program-erase (&#x2018;P/E&#x2019;) cycles that have been performed on a particular memory block, the age of data stored in a particular memory block, the type of data that is stored in a particular memory block, and so forth. In some implementations, the control information may be stored with an associated memory block as metadata. In other implementations, the control information for the storage drives <b>171</b>A-F may be stored in one or more particular memory blocks of the storage drives <b>171</b>A-F that are selected by the storage array controller <b>110</b>A-D. The selected memory blocks may be tagged with an identifier indicating that the selected memory block contains control information. The identifier may be utilized by the storage array controllers <b>110</b>A-D in conjunction with storage drives <b>171</b>A-F to quickly identify the memory blocks that contain control information. For example, the storage controllers <b>110</b>A-D may issue a command to locate memory blocks that contain control information. It may be noted that control information may be so large that parts of the control information may be stored in multiple locations, that the control information may be stored in multiple locations for purposes of redundancy, for example, or that the control information may otherwise be distributed across multiple memory blocks in the storage drive <b>171</b>A-F.</p><p id="p-0031" num="0030">In implementations, storage array controllers <b>110</b>A-D may offload device management responsibilities from storage drives <b>171</b>A-F of storage array <b>102</b>A-B by retrieving, from the storage drives <b>171</b>A-F, control information describing the state of one or more memory blocks in the storage drives <b>171</b>A-F. Retrieving the control information from the storage drives <b>171</b>A-F may be carried out, for example, by the storage array controller <b>110</b>A-D querying the storage drives <b>171</b>A-F for the location of control information for a particular storage drive <b>171</b>A-F. The storage drives <b>171</b>A-F may be configured to execute instructions that enable the storage drive <b>171</b>A-F to identify the location of the control information. The instructions may be executed by a controller (not shown) associated with or otherwise located on the storage drive <b>171</b>A-F and may cause the storage drive <b>171</b>A-F to scan a portion of each memory block to identify the memory blocks that store control information for the storage drives <b>171</b>A-F. The storage drives <b>171</b>A-F may respond by sending a response message to the storage array controller <b>110</b>A-D that includes the location of control information for the storage drive <b>171</b>A-F. Responsive to receiving the response message, storage array controllers <b>110</b>A-D may issue a request to read data stored at the address associated with the location of control information for the storage drives <b>171</b>A-F.</p><p id="p-0032" num="0031">In other implementations, the storage array controllers <b>110</b>A-D may further offload device management responsibilities from storage drives <b>171</b>A-F by performing, in response to receiving the control information, a storage drive management operation. A storage drive management operation may include, for example, an operation that is typically performed by the storage drive <b>171</b>A-F (e.g., the controller (not shown) associated with a particular storage drive <b>171</b>A-F). A storage drive management operation may include, for example, ensuring that data is not written to failed memory blocks within the storage drive <b>171</b>A-F, ensuring that data is written to memory blocks within the storage drive <b>171</b>A-F in such a way that adequate wear leveling is achieved, and so forth.</p><p id="p-0033" num="0032">In implementations, storage array <b>102</b>A-B may implement two or more storage array controllers <b>110</b>A-D. For example, storage array <b>102</b>A may include storage array controllers <b>110</b>A and storage array controllers <b>110</b>B. At a given instance, a single storage array controller <b>110</b>A-D (e.g., storage array controller <b>110</b>A) of a storage system <b>100</b> may be designated with primary status (also referred to as &#x201c;primary controller&#x201d; herein), and other storage array controllers <b>110</b>A-D (e.g., storage array controller <b>110</b>A) may be designated with secondary status (also referred to as &#x201c;secondary controller&#x201d; herein). The primary controller may have particular rights, such as permission to alter data in persistent storage resource <b>170</b>A-B (e.g., writing data to persistent storage resource <b>170</b>A-B). At least some of the rights of the primary controller may supersede the rights of the secondary controller. For instance, the secondary controller may not have permission to alter data in persistent storage resource <b>170</b>A-B when the primary controller has the right. The status of storage array controllers <b>110</b>A-D may change. For example, storage array controller <b>110</b>A may be designated with secondary status, and storage array controller <b>110</b>B may be designated with primary status.</p><p id="p-0034" num="0033">In some implementations, a primary controller, such as storage array controller <b>110</b>A, may serve as the primary controller for one or more storage arrays <b>102</b>A-B, and a second controller, such as storage array controller <b>110</b>B, may serve as the secondary controller for the one or more storage arrays <b>102</b>A-B. For example, storage array controller <b>110</b>A may be the primary controller for storage array <b>102</b>A and storage array <b>102</b>B, and storage array controller <b>110</b>B may be the secondary controller for storage array <b>102</b>A and <b>102</b>B. In some implementations, storage array controllers <b>110</b>C and <b>110</b>D (also referred to as &#x201c;storage processing modules&#x201d;) may neither have primary or secondary status. Storage array controllers <b>110</b>C and <b>110</b>D, implemented as storage processing modules, may act as a communication interface between the primary and secondary controllers (e.g., storage array controllers <b>110</b>A and <b>110</b>B, respectively) and storage array <b>102</b>B. For example, storage array controller <b>110</b>A of storage array <b>102</b>A may send a write request, via SAN <b>158</b>, to storage array <b>102</b>B. The write request may be received by both storage array controllers <b>110</b>C and <b>110</b>D of storage array <b>102</b>B. Storage array controllers <b>110</b>C and <b>110</b>D facilitate the communication, e.g., send the write request to the appropriate storage drive <b>171</b>A-F. It may be noted that in some implementations storage processing modules may be used to increase the number of storage drives controlled by the primary and secondary controllers.</p><p id="p-0035" num="0034">In implementations, storage array controllers <b>110</b>A-D are communicatively coupled, via a midplane (not shown), to one or more storage drives <b>171</b>A-F and to one or more NVRAM devices (not shown) that are included as part of a storage array <b>102</b>A-B. The storage array controllers <b>110</b>A-D may be coupled to the midplane via one or more data communication links and the midplane may be coupled to the storage drives <b>171</b>A-F and the NVRAM devices via one or more data communications links. The data communications links described herein are collectively illustrated by data communications links <b>108</b>A-D and may include a Peripheral Component Interconnect Express (&#x2018;PCIe&#x2019;) bus, for example.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates an example system for data storage, in accordance with some implementations. Storage array controller <b>101</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref> may be similar to the storage array controllers <b>110</b>A-D described with respect to <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. In one example, storage array controller <b>101</b> may be similar to storage array controller <b>110</b>A or storage array controller <b>110</b>B. Storage array controller <b>101</b> includes numerous elements for purposes of illustration rather than limitation. It may be noted that storage array controller <b>101</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations. It may be noted that elements of <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> may be included below to help illustrate features of storage array controller <b>101</b>.</p><p id="p-0037" num="0036">Storage array controller <b>101</b> may include one or more processing devices <b>104</b> and random access memory (RAM&#x2032;) <b>111</b>. Processing device <b>104</b> (or controller <b>101</b>) represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device <b>104</b> (or controller <b>101</b>) may be a complex instruction set computing (&#x2018;CISC&#x2019;) microprocessor, reduced instruction set computing (RISC&#x2032;) microprocessor, very long instruction word (&#x2018;VLIW&#x2019;) microprocessor, or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device <b>104</b> (or controller <b>101</b>) may also be one or more special-purpose processing devices such as an ASIC, an FPGA, a digital signal processor (&#x2018;DSP&#x2019;), network processor, or the like.</p><p id="p-0038" num="0037">The processing device <b>104</b> may be connected to the RAM <b>111</b> via a data communications link <b>106</b>, which may be embodied as a high speed memory bus such as a Double-Data Rate <b>4</b> (&#x2018;DDR4&#x2019;) bus. Stored in RAM <b>111</b> is an operating system <b>112</b>. In some implementations, instructions <b>113</b> are stored in RAM <b>111</b>. Instructions <b>113</b> may include computer program instructions for performing operations in in a direct-mapped flash storage system. In one embodiment, a direct-mapped flash storage system is one that that addresses data blocks within flash drives directly and without an address translation performed by the storage controllers of the flash drives.</p><p id="p-0039" num="0038">In implementations, storage array controller <b>101</b> includes one or more host bus adapters <b>103</b>A-C that are coupled to the processing device <b>104</b> via a data communications link <b>105</b>A-C. In implementations, host bus adapters <b>103</b>A-C may be computer hardware that connects a host system (e.g., the storage array controller) to other network and storage arrays. In some examples, host bus adapters <b>103</b>A-C may be a Fibre Channel adapter that enables the storage array controller <b>101</b> to connect to a SAN, an Ethernet adapter that enables the storage array controller <b>101</b> to connect to a LAN, or the like. Host bus adapters <b>103</b>A-C may be coupled to the processing device <b>104</b> via a data communications link <b>105</b>A-C such as, for example, a PCIe bus.</p><p id="p-0040" num="0039">In implementations, storage array controller <b>101</b> may include a host bus adapter <b>114</b> that is coupled to an expander <b>115</b>. The expander <b>115</b> may be used to attach a host system to a larger number of storage drives. The expander <b>115</b> may, for example, be a SAS expander utilized to enable the host bus adapter <b>114</b> to attach to storage drives in an implementation where the host bus adapter <b>114</b> is embodied as a SAS controller.</p><p id="p-0041" num="0040">In implementations, storage array controller <b>101</b> may include a switch <b>116</b> coupled to the processing device <b>104</b> via a data communications link <b>109</b>. The switch <b>116</b> may be a computer hardware device that can create multiple endpoints out of a single endpoint, thereby enabling multiple devices to share a single endpoint. The switch <b>116</b> may, for example, be a PCIe switch that is coupled to a PCIe bus (e.g., data communications link <b>109</b>) and presents multiple PCIe connection points to the midplane.</p><p id="p-0042" num="0041">In implementations, storage array controller <b>101</b> includes a data communications link <b>107</b> for coupling the storage array controller <b>101</b> to other storage array controllers. In some examples, data communications link <b>107</b> may be a QuickPath Interconnect (QPI) interconnect.</p><p id="p-0043" num="0042">A traditional storage system that uses traditional flash drives may implement a process across the flash drives that are part of the traditional storage system. For example, a higher level process of the storage system may initiate and control a process across the flash drives. However, a flash drive of the traditional storage system may include its own storage controller that also performs the process. Thus, for the traditional storage system, a higher level process (e.g., initiated by the storage system) and a lower level process (e.g., initiated by a storage controller of the storage system) may both be performed.</p><p id="p-0044" num="0043">To resolve various deficiencies of a traditional storage system, operations may be performed by higher level processes and not by the lower level processes. For example, the flash storage system may include flash drives that do not include storage controllers that provide the process. Thus, the operating system of the flash storage system itself may initiate and control the process. This may be accomplished by a direct-mapped flash storage system that addresses data blocks within the flash drives directly and without an address translation performed by the storage controllers of the flash drives.</p><p id="p-0045" num="0044">The operating system of the flash storage system may identify and maintain a list of allocation units across multiple flash drives of the flash storage system. The allocation units may be entire erase blocks or multiple erase blocks. The operating system may maintain a map or address range that directly maps addresses to erase blocks of the flash drives of the flash storage system.</p><p id="p-0046" num="0045">Direct mapping to the erase blocks of the flash drives may be used to rewrite data and erase data. For example, the operations may be performed on one or more allocation units that include a first data and a second data where the first data is to be retained and the second data is no longer being used by the flash storage system. The operating system may initiate the process to write the first data to new locations within other allocation units and erasing the second data and marking the allocation units as being available for use for subsequent data. Thus, the process may only be performed by the higher level operating system of the flash storage system without an additional lower level process being performed by controllers of the flash drives.</p><p id="p-0047" num="0046">Advantages of the process being performed only by the operating system of the flash storage system include increased reliability of the flash drives of the flash storage system as unnecessary or redundant write operations are not being performed during the process. One possible point of novelty here is the concept of initiating and controlling the process at the operating system of the flash storage system. In addition, the process can be controlled by the operating system across multiple flash drives. This is contrast to the process being performed by a storage controller of a flash drive.</p><p id="p-0048" num="0047">A storage system can consist of two storage array controllers that share a set of drives for failover purposes, or it could consist of a single storage array controller that provides a storage service that utilizes multiple drives, or it could consist of a distributed network of storage array controllers each with some number of drives or some amount of Flash storage where the storage array controllers in the network collaborate to provide a complete storage service and collaborate on various aspects of a storage service including storage allocation and garbage collection.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>1</b>C</figref> illustrates a third example system <b>117</b> for data storage in accordance with some implementations. System <b>117</b> (also referred to as &#x201c;storage system&#x201d; herein) includes numerous elements for purposes of illustration rather than limitation. It may be noted that system <b>117</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations.</p><p id="p-0050" num="0049">In one embodiment, system <b>117</b> includes a dual Peripheral Component Interconnect (&#x2018;PCI&#x2019;) flash storage device <b>118</b> with separately addressable fast write storage. System <b>117</b> may include a storage controller <b>119</b>. In one embodiment, storage controller <b>119</b>A-D may be a CPU, ASIC, FPGA, or any other circuitry that may implement control structures necessary according to the present disclosure. In one embodiment, system <b>117</b> includes flash memory devices (e.g., including flash memory devices <b>120</b><i>a</i>-<i>n</i>), operatively coupled to various channels of the storage device controller <b>119</b>. Flash memory devices <b>120</b><i>a</i>-<i>n</i>, may be presented to the controller <b>119</b>A-D as an addressable collection of Flash pages, erase blocks, and/or control elements sufficient to allow the storage device controller <b>119</b>A-D to program and retrieve various aspects of the Flash. In one embodiment, storage device controller <b>119</b>A-D may perform operations on flash memory devices <b>120</b><i>a</i>-<i>n </i>including storing and retrieving data content of pages, arranging and erasing any blocks, tracking statistics related to the use and reuse of Flash memory pages, erase blocks, and cells, tracking and predicting error codes and faults within the Flash memory, controlling voltage levels associated with programming and retrieving contents of Flash cells, etc.</p><p id="p-0051" num="0050">In one embodiment, system <b>117</b> may include RAM <b>121</b> to store separately addressable fast-write data. In one embodiment, RAM <b>121</b> may be one or more separate discrete devices. In another embodiment, RAM <b>121</b> may be integrated into storage device controller <b>119</b>A-D or multiple storage device controllers. The RAM <b>121</b> may be utilized for other purposes as well, such as temporary program memory for a processing device (e.g., a CPU) in the storage device controller <b>119</b>.</p><p id="p-0052" num="0051">In one embodiment, system <b>117</b> may include a stored energy device <b>122</b>, such as a rechargeable battery or a capacitor. Stored energy device <b>122</b> may store energy sufficient to power the storage device controller <b>119</b>, some amount of the RAM (e.g., RAM <b>121</b>), and some amount of Flash memory (e.g., Flash memory <b>120</b><i>a</i>-<b>120</b><i>n</i>) for sufficient time to write the contents of RAM to Flash memory. In one embodiment, storage device controller <b>119</b>A-D may write the contents of RAM to Flash Memory if the storage device controller detects loss of external power.</p><p id="p-0053" num="0052">In one embodiment, system <b>117</b> includes two data communications links <b>123</b><i>a</i>, <b>123</b><i>b</i>. In one embodiment, data communications links <b>123</b><i>a</i>, <b>123</b><i>b </i>may be PCI interfaces. In another embodiment, data communications links <b>123</b><i>a</i>, <b>123</b><i>b </i>may be based on other communications standards (e.g., HyperTransport, InfiniBand, etc.). Data communications links <b>123</b><i>a</i>, <b>123</b><i>b </i>may be based on non-volatile memory express (&#x2018;NVMe&#x2019;) or NVMe over fabrics (&#x2018;NVMf&#x2019;) specifications that allow external connection to the storage device controller <b>119</b>A-D from other components in the storage system <b>117</b>. It should be noted that data communications links may be interchangeably referred to herein as PCI buses for convenience.</p><p id="p-0054" num="0053">System <b>117</b> may also include an external power source (not shown), which may be provided over one or both data communications links <b>123</b><i>a</i>, <b>123</b><i>b</i>, or which may be provided separately. An alternative embodiment includes a separate Flash memory (not shown) dedicated for use in storing the content of RAM <b>121</b>. The storage device controller <b>119</b>A-D may present a logical device over a PCI bus which may include an addressable fast-write logical device, or a distinct part of the logical address space of the storage device <b>118</b>, which may be presented as PCI memory or as persistent storage. In one embodiment, operations to store into the device are directed into the RAM <b>121</b>. On power failure, the storage device controller <b>119</b>A-D may write stored content associated with the addressable fast-write logical storage to Flash memory (e.g., Flash memory <b>120</b><i>a</i>-<i>n</i>) for long-term persistent storage.</p><p id="p-0055" num="0054">In one embodiment, the logical device may include some presentation of some or all of the content of the Flash memory devices <b>120</b><i>a</i>-<i>n</i>, where that presentation allows a storage system including a storage device <b>118</b> (e.g., storage system <b>117</b>) to directly address Flash memory pages and directly reprogram erase blocks from storage system components that are external to the storage device through the PCI bus. The presentation may also allow one or more of the external components to control and retrieve other aspects of the Flash memory including some or all of: tracking statistics related to use and reuse of Flash memory pages, erase blocks, and cells across all the Flash memory devices; tracking and predicting error codes and faults within and across the Flash memory devices; controlling voltage levels associated with programming and retrieving contents of Flash cells; etc.</p><p id="p-0056" num="0055">In one embodiment, the stored energy device <b>122</b> may be sufficient to ensure completion of in-progress operations to the Flash memory devices <b>120</b><i>a</i>-<b>120</b><i>n </i>stored energy device <b>122</b> may power storage device controller <b>119</b>A-D and associated Flash memory devices (e.g., <b>120</b><i>a</i>-<i>n</i>) for those operations, as well as for the storing of fast-write RAM to Flash memory. Stored energy device <b>122</b> may be used to store accumulated statistics and other parameters kept and tracked by the Flash memory devices <b>120</b><i>a</i>-<i>n </i>and/or the storage device controller <b>119</b>. Separate capacitors or stored energy devices (such as smaller capacitors near or embedded within the Flash memory devices themselves) may be used for some or all of the operations described herein.</p><p id="p-0057" num="0056">Various schemes may be used to track and optimize the life span of the stored energy component, such as adjusting voltage levels over time, partially discharging the storage energy device <b>122</b> to measure corresponding discharge characteristics, etc. If the available energy decreases over time, the effective available capacity of the addressable fast-write storage may be decreased to ensure that it can be written safely based on the currently available stored energy.</p><p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. <b>1</b>D</figref> illustrates a third example system <b>124</b> for data storage in accordance with some implementations. In one embodiment, system <b>124</b> includes storage controllers <b>125</b><i>a</i>, <b>125</b><i>b</i>. In one embodiment, storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>are operatively coupled to Dual PCI storage devices <b>119</b><i>a</i>, <b>119</b><i>b </i>and <b>119</b><i>c</i>, <b>119</b><i>d</i>, respectively. Storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may be operatively coupled (e.g., via a storage network <b>130</b>) to some number of host computers <b>127</b><i>a</i>-<i>n. </i></p><p id="p-0059" num="0058">In one embodiment, two storage controllers (e.g., <b>125</b><i>a </i>and <b>125</b><i>b</i>) provide storage services, such as a SCS) block storage array, a file server, an object server, a database, or data analytics service, etc. The storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may provide services through some number of network interfaces (e.g., <b>126</b><i>a</i>-<i>d</i>) to host computers <b>127</b><i>a</i>-<i>n </i>outside of the storage system <b>124</b>. Storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may provide integrated services or an application entirely within the storage system <b>124</b>, forming a converged storage and compute system. The storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may utilize the fast write memory within or across storage devices <b>119</b><i>a</i>-<i>d </i>to journal in progress operations to ensure the operations are not lost on a power failure, storage controller removal, storage controller or storage system shutdown, or some fault of one or more software or hardware components within the storage system <b>124</b>.</p><p id="p-0060" num="0059">In one embodiment, controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>operate as PCI masters to one or the other PCI buses <b>128</b><i>a</i>, <b>128</b><i>b</i>. In another embodiment, <b>128</b><i>a </i>and <b>128</b><i>b </i>may be based on other communications standards (e.g., HyperTransport, InfiniBand, etc.). Other storage system embodiments may operate storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>as multi-masters for both PCI buses <b>128</b><i>a</i>, <b>128</b><i>b</i>. Alternately, a PCI/NVMe/NVMf switching infrastructure or fabric may connect multiple storage controllers. Some storage system embodiments may allow storage devices to communicate with each other directly rather than communicating only with storage controllers. In one embodiment, a storage device controller <b>119</b><i>a </i>may be operable under direction from a storage controller <b>125</b><i>a </i>to synthesize and transfer data to be stored into Flash memory devices from data that has been stored in RAM (e.g., RAM <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>). For example, a recalculated version of RAM content may be transferred after a storage controller has determined that an operation has fully committed across the storage system, or when fast-write memory on the device has reached a certain used capacity, or after a certain amount of time, to ensure improve safety of the data or to release addressable fast-write capacity for reuse. This mechanism may be used, for example, to avoid a second transfer over a bus (e.g., <b>128</b><i>a</i>, <b>128</b><i>b</i>) from the storage controllers <b>125</b><i>a</i>, <b>125</b><i>b</i>. In one embodiment, a recalculation may include compressing data, attaching indexing or other metadata, combining multiple data segments together, performing erasure code calculations, etc.</p><p id="p-0061" num="0060">In one embodiment, under direction from a storage controller <b>125</b><i>a</i>, <b>125</b><i>b</i>, a storage device controller <b>119</b><i>a</i>, <b>119</b><i>b </i>may be operable to calculate and transfer data to other storage devices from data stored in RAM (e.g., RAM <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>) without involvement of the storage controllers <b>125</b><i>a</i>, <b>125</b><i>b</i>. This operation may be used to mirror data stored in one controller <b>125</b><i>a </i>to another controller <b>125</b><i>b</i>, or it could be used to offload compression, data aggregation, and/or erasure coding calculations and transfers to storage devices to reduce load on storage controllers or the storage controller interface <b>129</b><i>a</i>, <b>129</b><i>b </i>to the PCI bus <b>128</b><i>a</i>, <b>128</b><i>b. </i></p><p id="p-0062" num="0061">A storage device controller <b>119</b>A-D may include mechanisms for implementing high availability primitives for use by other parts of a storage system external to the Dual PCI storage device <b>118</b>. For example, reservation or exclusion primitives may be provided so that, in a storage system with two storage controllers providing a highly available storage service, one storage controller may prevent the other storage controller from accessing or continuing to access the storage device. This could be used, for example, in cases where one controller detects that the other controller is not functioning properly or where the interconnect between the two storage controllers may itself not be functioning properly.</p><p id="p-0063" num="0062">In one embodiment, a storage system for use with Dual PCI direct mapped storage devices with separately addressable fast write storage includes systems that manage erase blocks or groups of erase blocks as allocation units for storing data on behalf of the storage service, or for storing metadata (e.g., indexes, logs, etc.) associated with the storage service, or for proper management of the storage system itself. Flash pages, which may be a few kilobytes in size, may be written as data arrives or as the storage system is to persist data for long intervals of time (e.g., above a defined threshold of time). To commit data more quickly, or to reduce the number of writes to the Flash memory devices, the storage controllers may first write data into the separately addressable fast write storage on one more storage devices.</p><p id="p-0064" num="0063">In one embodiment, the storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may initiate the use of erase blocks within and across storage devices (e.g., <b>118</b>) in accordance with an age and expected remaining lifespan of the storage devices, or based on other statistics. The storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may initiate garbage collection and data migration data between storage devices in accordance with pages that are no longer needed as well as to manage Flash page and erase block lifespans and to manage overall system performance.</p><p id="p-0065" num="0064">In one embodiment, the storage system <b>124</b> may utilize mirroring and/or erasure coding schemes as part of storing data into addressable fast write storage and/or as part of writing data into allocation units associated with erase blocks. Erasure codes may be used across storage devices, as well as within erase blocks or allocation units, or within and across Flash memory devices on a single storage device, to provide redundancy against single or multiple storage device failures or to protect against internal corruptions of Flash memory pages resulting from Flash memory operations or from degradation of Flash memory cells. Mirroring and erasure coding at various levels may be used to recover from multiple types of failures that occur separately or in combination.</p><p id="p-0066" num="0065">The embodiments depicted with reference to <figref idref="DRAWINGS">FIGS. <b>2</b>A-G</figref> illustrate a storage cluster that stores user data, such as user data originating from one or more user or client systems or other sources external to the storage cluster. The storage cluster distributes user data across storage nodes housed within a chassis, or across multiple chassis, using erasure coding and redundant copies of metadata. Erasure coding refers to a method of data protection or reconstruction in which data is stored across a set of different locations, such as disks, storage nodes or geographic locations. Flash memory is one type of solid-state memory that may be integrated with the embodiments, although the embodiments may be extended to other types of solid-state memory or other storage medium, including non-solid state memory. Control of storage locations and workloads are distributed across the storage locations in a clustered peer-to-peer system. Tasks such as mediating communications between the various storage nodes, detecting when a storage node has become unavailable, and balancing I/Os (inputs and outputs) across the various storage nodes, are all handled on a distributed basis. Data is laid out or distributed across multiple storage nodes in data fragments or stripes that support data recovery in some embodiments. Ownership of data can be reassigned within a cluster, independent of input and output patterns. This architecture described in more detail below allows a storage node in the cluster to fail, with the system remaining operational, since the data can be reconstructed from other storage nodes and thus remain available for input and output operations. In various embodiments, a storage node may be referred to as a cluster node, a blade, or a server.</p><p id="p-0067" num="0066">The storage cluster may be contained within a chassis, i.e., an enclosure housing one or more storage nodes. A mechanism to provide power to each storage node, such as a power distribution bus, and a communication mechanism, such as a communication bus that enables communication between the storage nodes are included within the chassis. The storage cluster can run as an independent system in one location according to some embodiments. In one embodiment, a chassis contains at least two instances of both the power distribution and the communication bus which may be enabled or disabled independently. The internal communication bus may be an Ethernet bus, however, other technologies such as PCIe, InfiniBand, and others, are equally suitable. The chassis provides a port for an external communication bus for enabling communication between multiple chassis, directly or through a switch, and with client systems. The external communication may use a technology such as Ethernet, InfiniBand, Fibre Channel, etc. In some embodiments, the external communication bus uses different communication bus technologies for inter-chassis and client communication. If a switch is deployed within or between chassis, the switch may act as a translation between multiple protocols or technologies. When multiple chassis are connected to define a storage cluster, the storage cluster may be accessed by a client using either proprietary interfaces or standard interfaces such as network file system (&#x2018;NFS&#x2019;), common internet file system (&#x2018;CIFS&#x2019;), small computer system interface (&#x2018;SCSI&#x2019;) or hypertext transfer protocol (&#x2018;HTTP&#x2019;). Translation from the client protocol may occur at the switch, chassis external communication bus or within each storage node. In some embodiments, multiple chassis may be coupled or connected to each other through an aggregator switch. A portion and/or all of the coupled or connected chassis may be designated as a storage cluster. As discussed above, each chassis can have multiple blades, each blade has a media access control (&#x2018;MAC&#x2019;) address, but the storage cluster is presented to an external network as having a single cluster IP address and a single MAC address in some embodiments.</p><p id="p-0068" num="0067">Each storage node may be one or more storage servers and each storage server is connected to one or more non-volatile solid state memory units, which may be referred to as storage units or storage devices. One embodiment includes a single storage server in each storage node and between one to eight non-volatile solid state memory units, however this one example is not meant to be limiting. The storage server may include a processor, DRAM and interfaces for the internal communication bus and power distribution for each of the power buses. Inside the storage node, the interfaces and storage unit share a communication bus, e.g., PCI Express, in some embodiments. The non-volatile solid state memory units may directly access the internal communication bus interface through a storage node communication bus, or request the storage node to access the bus interface. The non-volatile solid state memory unit contains an embedded CPU, solid state storage controller, and a quantity of solid state mass storage, e.g., between 2-32 terabytes (&#x2018;TB&#x2019;) in some embodiments. An embedded volatile storage medium, such as DRAM, and an energy reserve apparatus are included in the non-volatile solid state memory unit. In some embodiments, the energy reserve apparatus is a capacitor, super-capacitor, or battery that enables transferring a subset of DRAM contents to a stable storage medium in the case of power loss. In some embodiments, the non-volatile solid state memory unit is constructed with a storage class memory, such as phase change or magnetoresistive random access memory (&#x2018;MRAM&#x2019;) that substitutes for DRAM and enables a reduced power hold-up apparatus.</p><p id="p-0069" num="0068">One of many features of the storage nodes and non-volatile solid state storage is the ability to proactively rebuild data in a storage cluster. The storage nodes and non-volatile solid state storage can determine when a storage node or non-volatile solid state storage in the storage cluster is unreachable, independent of whether there is an attempt to read data involving that storage node or non-volatile solid state storage. The storage nodes and non-volatile solid state storage then cooperate to recover and rebuild the data in at least partially new locations. This constitutes a proactive rebuild, in that the system rebuilds data without waiting until the data is needed for a read access initiated from a client system employing the storage cluster. These and further details of the storage memory and operation thereof are discussed below.</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a perspective view of a storage cluster <b>161</b>, with multiple storage nodes <b>150</b> and internal solid-state memory coupled to each storage node to provide network attached storage or storage area network, in accordance with some embodiments. A network attached storage, storage area network, or a storage cluster, or other storage memory, could include one or more storage clusters <b>161</b>, each having one or more storage nodes <b>150</b>, in a flexible and reconfigurable arrangement of both the physical components and the amount of storage memory provided thereby. The storage cluster <b>161</b> is designed to fit in a rack, and one or more racks can be set up and populated as desired for the storage memory. The storage cluster <b>161</b> has a chassis <b>138</b> having multiple slots <b>142</b>. It should be appreciated that chassis <b>138</b> may be referred to as a housing, enclosure, or rack unit. In one embodiment, the chassis <b>138</b> has fourteen slots <b>142</b>, although other numbers of slots are readily devised. For example, some embodiments have four slots, eight slots, sixteen slots, thirty-two slots, or other suitable number of slots. Each slot <b>142</b> can accommodate one storage node <b>150</b> in some embodiments. Chassis <b>138</b> includes flaps <b>148</b> that can be utilized to mount the chassis <b>138</b> on a rack. Fans <b>144</b> provide air circulation for cooling of the storage nodes <b>150</b> and components thereof, although other cooling components could be used, or an embodiment could be devised without cooling components. A switch fabric <b>146</b> couples storage nodes <b>150</b> within chassis <b>138</b> together and to a network for communication to the memory. In an embodiment depicted in herein, the slots <b>142</b> to the left of the switch fabric <b>146</b> and fans <b>144</b> are shown occupied by storage nodes <b>150</b>, while the slots <b>142</b> to the right of the switch fabric <b>146</b> and fans <b>144</b> are empty and available for insertion of storage node <b>150</b> for illustrative purposes. This configuration is one example, and one or more storage nodes <b>150</b> could occupy the slots <b>142</b> in various further arrangements. The storage node arrangements need not be sequential or adjacent in some embodiments. Storage nodes <b>150</b> are hot pluggable, meaning that a storage node <b>150</b> can be inserted into a slot <b>142</b> in the chassis <b>138</b>, or removed from a slot <b>142</b>, without stopping or powering down the system. Upon insertion or removal of storage node <b>150</b> from slot <b>142</b>, the system automatically reconfigures in order to recognize and adapt to the change. Reconfiguration, in some embodiments, includes restoring redundancy and/or rebalancing data or load.</p><p id="p-0071" num="0070">Each storage node <b>150</b> can have multiple components. In the embodiment shown here, the storage node <b>150</b> includes a printed circuit board <b>159</b> populated by a CPU <b>156</b>, i.e., processor, a memory <b>154</b> coupled to the CPU <b>156</b>, and a non-volatile solid state storage <b>152</b> coupled to the CPU <b>156</b>, although other mountings and/or components could be used in further embodiments. The memory <b>154</b> has instructions which are executed by the CPU <b>156</b> and/or data operated on by the CPU <b>156</b>. As further explained below, the non-volatile solid state storage <b>152</b> includes flash or, in further embodiments, other types of solid-state memory.</p><p id="p-0072" num="0071">Referring to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, storage cluster <b>161</b> is scalable, meaning that storage capacity with non-uniform storage sizes is readily added, as described above. One or more storage nodes <b>150</b> can be plugged into or removed from each chassis and the storage cluster self-configures in some embodiments. Plug-in storage nodes <b>150</b>, whether installed in a chassis as delivered or later added, can have different sizes. For example, in one embodiment a storage node <b>150</b> can have any multiple of 4 TB, e.g., 8 TB, 12 TB, 16 TB, 32 TB, etc. In further embodiments, a storage node <b>150</b> could have any multiple of other storage amounts or capacities. Storage capacity of each storage node <b>150</b> is broadcast, and influences decisions of how to stripe the data. For maximum storage efficiency, an embodiment can self-configure as wide as possible in the stripe, subject to a predetermined requirement of continued operation with loss of up to one, or up to two, non-volatile solid state storage units <b>152</b> or storage nodes <b>150</b> within the chassis.</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram showing a communications interconnect <b>173</b> and power distribution bus <b>172</b> coupling multiple storage nodes <b>150</b>. Referring back to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the communications interconnect <b>173</b> can be included in or implemented with the switch fabric <b>146</b> in some embodiments. Where multiple storage clusters <b>161</b> occupy a rack, the communications interconnect <b>173</b> can be included in or implemented with a top of rack switch, in some embodiments. As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, storage cluster <b>161</b> is enclosed within a single chassis <b>138</b>. External port <b>176</b> is coupled to storage nodes <b>150</b> through communications interconnect <b>173</b>, while external port <b>174</b> is coupled directly to a storage node. External power port <b>178</b> is coupled to power distribution bus <b>172</b>. Storage nodes <b>150</b> may include varying amounts and differing capacities of non-volatile solid state storage <b>152</b> as described with reference to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. In addition, one or more storage nodes <b>150</b> may be a compute only storage node as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>. Authorities <b>168</b> are implemented on the non-volatile solid state storages <b>152</b>, for example as lists or other data structures stored in memory. In some embodiments the authorities are stored within the non-volatile solid state storage <b>152</b> and supported by software executing on a controller or other processor of the non-volatile solid state storage <b>152</b>. In a further embodiment, authorities <b>168</b> are implemented on the storage nodes <b>150</b>, for example as lists or other data structures stored in the memory <b>154</b> and supported by software executing on the CPU <b>156</b> of the storage node <b>150</b>. Authorities <b>168</b> control how and where data is stored in the non-volatile solid state storages <b>152</b> in some embodiments. This control assists in determining which type of erasure coding scheme is applied to the data, and which storage nodes <b>150</b> have which portions of the data. Each authority <b>168</b> may be assigned to a non-volatile solid state storage <b>152</b>. Each authority may control a range of inode numbers, segment numbers, or other data identifiers which are assigned to data by a file system, by the storage nodes <b>150</b>, or by the non-volatile solid state storage <b>152</b>, in various embodiments.</p><p id="p-0074" num="0073">Every piece of data, and every piece of metadata, has redundancy in the system in some embodiments. In addition, every piece of data and every piece of metadata has an owner, which may be referred to as an authority. If that authority is unreachable, for example through failure of a storage node, there is a plan of succession for how to find that data or that metadata. In various embodiments, there are redundant copies of authorities <b>168</b>. Authorities <b>168</b> have a relationship to storage nodes <b>150</b> and non-volatile solid state storage <b>152</b> in some embodiments. Each authority <b>168</b>, covering a range of data segment numbers or other identifiers of the data, may be assigned to a specific non-volatile solid state storage <b>152</b>. In some embodiments the authorities <b>168</b> for all of such ranges are distributed over the non-volatile solid state storages <b>152</b> of a storage cluster. Each storage node <b>150</b> has a network port that provides access to the non-volatile solid state storage(s) <b>152</b> of that storage node <b>150</b>. Data can be stored in a segment, which is associated with a segment number and that segment number is an indirection for a configuration of a RAID (redundant array of independent disks) stripe in some embodiments. The assignment and use of the authorities <b>168</b> thus establishes an indirection to data. Indirection may be referred to as the ability to reference data indirectly, in this case via an authority <b>168</b>, in accordance with some embodiments. A segment identifies a set of non-volatile solid state storage <b>152</b> and a local identifier into the set of non-volatile solid state storage <b>152</b> that may contain data. In some embodiments, the local identifier is an offset into the device and may be reused sequentially by multiple segments. In other embodiments the local identifier is unique for a specific segment and never reused. The offsets in the non-volatile solid state storage <b>152</b> are applied to locating data for writing to or reading from the non-volatile solid state storage <b>152</b> (in the form of a RAID stripe). Data is striped across multiple units of non-volatile solid state storage <b>152</b>, which may include or be different from the non-volatile solid state storage <b>152</b> having the authority <b>168</b> for a particular data segment.</p><p id="p-0075" num="0074">If there is a change in where a particular segment of data is located, e.g., during a data move or a data reconstruction, the authority <b>168</b> for that data segment should be consulted, at that non-volatile solid state storage <b>152</b> or storage node <b>150</b> having that authority <b>168</b>. In order to locate a particular piece of data, embodiments calculate a hash value for a data segment or apply an inode number or a data segment number. The output of this operation points to a non-volatile solid state storage <b>152</b> having the authority <b>168</b> for that particular piece of data. In some embodiments there are two stages to this operation. The first stage maps an entity identifier (ID), e.g., a segment number, inode number, or directory number to an authority identifier. This mapping may include a calculation such as a hash or a bit mask. The second stage is mapping the authority identifier to a particular non-volatile solid state storage <b>152</b>, which may be done through an explicit mapping. The operation is repeatable, so that when the calculation is performed, the result of the calculation repeatably and reliably points to a particular non-volatile solid state storage <b>152</b> having that authority <b>168</b>. The operation may include the set of reachable storage nodes as input. If the set of reachable non-volatile solid state storage units changes the optimal set changes. In some embodiments, the persisted value is the current assignment (which is always true) and the calculated value is the target assignment the cluster will attempt to reconfigure towards. This calculation may be used to determine the optimal non-volatile solid state storage <b>152</b> for an authority in the presence of a set of non-volatile solid state storage <b>152</b> that are reachable and constitute the same cluster. The calculation also determines an ordered set of peer non-volatile solid state storage <b>152</b> that will also record the authority to non-volatile solid state storage mapping so that the authority may be determined even if the assigned non-volatile solid state storage is unreachable. A duplicate or substitute authority <b>168</b> may be consulted if a specific authority <b>168</b> is unavailable in some embodiments.</p><p id="p-0076" num="0075">With reference to <figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref>, two of the many tasks of the CPU <b>156</b> on a storage node <b>150</b> are to break up write data, and reassemble read data. When the system has determined that data is to be written, the authority <b>168</b> for that data is located as above. When the segment ID for data is already determined the request to write is forwarded to the non-volatile solid state storage <b>152</b> currently determined to be the host of the authority <b>168</b> determined from the segment. The host CPU <b>156</b> of the storage node <b>150</b>, on which the non-volatile solid state storage <b>152</b> and corresponding authority <b>168</b> reside, then breaks up or shards the data and transmits the data out to various non-volatile solid state storage <b>152</b>. The transmitted data is written as a data stripe in accordance with an erasure coding scheme. In some embodiments, data is requested to be pulled, and in other embodiments, data is pushed. In reverse, when data is read, the authority <b>168</b> for the segment ID containing the data is located as described above. The host CPU <b>156</b> of the storage node <b>150</b> on which the non-volatile solid state storage <b>152</b> and corresponding authority <b>168</b> reside requests the data from the non-volatile solid state storage and corresponding storage nodes pointed to by the authority. In some embodiments the data is read from flash storage as a data stripe. The host CPU <b>156</b> of storage node <b>150</b> then reassembles the read data, correcting any errors (if present) according to the appropriate erasure coding scheme, and forwards the reassembled data to the network. In further embodiments, some or all of these tasks can be handled in the non-volatile solid state storage <b>152</b>. In some embodiments, the segment host requests the data be sent to storage node <b>150</b> by requesting pages from storage and then sending the data to the storage node making the original request.</p><p id="p-0077" num="0076">In some systems, for example in UNIX-style file systems, data is handled with an index node or inode, which specifies a data structure that represents an object in a file system. The object could be a file or a directory, for example. Metadata may accompany the object, as attributes such as permission data and a creation timestamp, among other attributes. A segment number could be assigned to all or a portion of such an object in a file system. In other systems, data segments are handled with a segment number assigned elsewhere. For purposes of discussion, the unit of distribution is an entity, and an entity can be a file, a directory, or a segment. That is, entities are units of data or metadata stored by a storage system. Entities are grouped into sets called authorities. Each authority has an authority owner, which is a storage node that has the exclusive right to update the entities in the authority. In other words, a storage node contains the authority, and that the authority, in turn, contains entities.</p><p id="p-0078" num="0077">A segment is a logical container of data in accordance with some embodiments. A segment is an address space between medium address space and physical flash locations, i.e., the data segment number, are in this address space. Segments may also contain meta-data, which enable data redundancy to be restored (rewritten to different flash locations or devices) without the involvement of higher level software. In one embodiment, an internal format of a segment contains client data and medium mappings to determine the position of that data. Each data segment is protected, e.g., from memory and other failures, by breaking the segment into a number of data and parity shards, where applicable. The data and parity shards are distributed, i.e., striped, across non-volatile solid state storage <b>152</b> coupled to the host CPUs <b>156</b> (See <figref idref="DRAWINGS">FIGS. <b>2</b>E and <b>2</b>G</figref>) in accordance with an erasure coding scheme. Usage of the term segments refers to the container and its place in the address space of segments in some embodiments. Usage of the term stripe refers to the same set of shards as a segment and includes how the shards are distributed along with redundancy or parity information in accordance with some embodiments.</p><p id="p-0079" num="0078">A series of address-space transformations takes place across an entire storage system. At the top are the directory entries (file names) which link to an inode. Modes point into medium address space, where data is logically stored. Medium addresses may be mapped through a series of indirect mediums to spread the load of large files, or implement data services like deduplication or snapshots. Medium addresses may be mapped through a series of indirect mediums to spread the load of large files, or implement data services like deduplication or snapshots. Segment addresses are then translated into physical flash locations. Physical flash locations have an address range bounded by the amount of flash in the system in accordance with some embodiments. Medium addresses and segment addresses are logical containers, and in some embodiments use a 128 bit or larger identifier so as to be practically infinite, with a likelihood of reuse calculated as longer than the expected life of the system. Addresses from logical containers are allocated in a hierarchical fashion in some embodiments. Initially, each non-volatile solid state storage unit <b>152</b> may be assigned a range of address space. Within this assigned range, the non-volatile solid state storage <b>152</b> is able to allocate addresses without synchronization with other non-volatile solid state storage <b>152</b>.</p><p id="p-0080" num="0079">Data and metadata is stored by a set of underlying storage layouts that are optimized for varying workload patterns and storage devices. These layouts incorporate multiple redundancy schemes, compression formats and index algorithms. Some of these layouts store information about authorities and authority masters, while others store file metadata and file data. The redundancy schemes include error correction codes that tolerate corrupted bits within a single storage device (such as a NAND flash chip), erasure codes that tolerate the failure of multiple storage nodes, and replication schemes that tolerate data center or regional failures. In some embodiments, low density parity check (&#x2018;LDPC&#x2019;) code is used within a single storage unit. Reed-Solomon encoding is used within a storage cluster, and mirroring is used within a storage grid in some embodiments. Metadata may be stored using an ordered log structured index (such as a Log Structured Merge Tree), and large data may not be stored in a log structured layout.</p><p id="p-0081" num="0080">In order to maintain consistency across multiple copies of an entity, the storage nodes agree implicitly on two things through calculations: (1) the authority that contains the entity, and (2) the storage node that contains the authority. The assignment of entities to authorities can be done by pseudo randomly assigning entities to authorities, by splitting entities into ranges based upon an externally produced key, or by placing a single entity into each authority. Examples of pseudorandom schemes are linear hashing and the Replication Under Scalable Hashing (&#x2018;RUSH&#x2019;) family of hashes, including Controlled Replication Under Scalable Hashing (&#x2018;CRUSH&#x2019;). In some embodiments, pseudo-random assignment is utilized only for assigning authorities to nodes because the set of nodes can change. The set of authorities cannot change so any subjective function may be applied in these embodiments. Some placement schemes automatically place authorities on storage nodes, while other placement schemes rely on an explicit mapping of authorities to storage nodes. In some embodiments, a pseudorandom scheme is utilized to map from each authority to a set of candidate authority owners. A pseudorandom data distribution function related to CRUSH may assign authorities to storage nodes and create a list of where the authorities are assigned. Each storage node has a copy of the pseudorandom data distribution function, and can arrive at the same calculation for distributing, and later finding or locating an authority. Each of the pseudorandom schemes requires the reachable set of storage nodes as input in some embodiments in order to conclude the same target nodes. Once an entity has been placed in an authority, the entity may be stored on physical devices so that no expected failure will lead to unexpected data loss. In some embodiments, rebalancing algorithms attempt to store the copies of all entities within an authority in the same layout and on the same set of machines.</p><p id="p-0082" num="0081">Examples of expected failures include device failures, stolen machines, datacenter fires, and regional disasters, such as nuclear or geological events. Different failures lead to different levels of acceptable data loss. In some embodiments, a stolen storage node impacts neither the security nor the reliability of the system, while depending on system configuration, a regional event could lead to no loss of data, a few seconds or minutes of lost updates, or even complete data loss.</p><p id="p-0083" num="0082">In the embodiments, the placement of data for storage redundancy is independent of the placement of authorities for data consistency. In some embodiments, storage nodes that contain authorities do not contain any persistent storage. Instead, the storage nodes are connected to non-volatile solid state storage units that do not contain authorities. The communications interconnect between storage nodes and non-volatile solid state storage units consists of multiple communication technologies and has non-uniform performance and fault tolerance characteristics. In some embodiments, as mentioned above, non-volatile solid state storage units are connected to storage nodes via PCI express, storage nodes are connected together within a single chassis using Ethernet backplane, and chassis are connected together to form a storage cluster. Storage clusters are connected to clients using Ethernet or fiber channel in some embodiments. If multiple storage clusters are configured into a storage grid, the multiple storage clusters are connected using the Internet or other long-distance networking links, such as a &#x201c;metro scale&#x201d; link or private link that does not traverse the internet.</p><p id="p-0084" num="0083">Authority owners have the exclusive right to modify entities, to migrate entities from one non-volatile solid state storage unit to another non-volatile solid state storage unit, and to add and remove copies of entities. This allows for maintaining the redundancy of the underlying data. When an authority owner fails, is going to be decommissioned, or is overloaded, the authority is transferred to a new storage node. Transient failures make it non-trivial to ensure that all non-faulty machines agree upon the new authority location. The ambiguity that arises due to transient failures can be achieved automatically by a consensus protocol such as Paxos, hot-warm failover schemes, via manual intervention by a remote system administrator, or by a local hardware administrator (such as by physically removing the failed machine from the cluster, or pressing a button on the failed machine). In some embodiments, a consensus protocol is used, and failover is automatic. If too many failures or replication events occur in too short a time period, the system goes into a self-preservation mode and halts replication and data movement activities until an administrator intervenes in accordance with some embodiments.</p><p id="p-0085" num="0084">As authorities are transferred between storage nodes and authority owners update entities in their authorities, the system transfers messages between the storage nodes and non-volatile solid state storage units. With regard to persistent messages, messages that have different purposes are of different types. Depending on the type of the message, the system maintains different ordering and durability guarantees. As the persistent messages are being processed, the messages are temporarily stored in multiple durable and non-durable storage hardware technologies. In some embodiments, messages are stored in RAM, NVRAM and on NAND flash devices, and a variety of protocols are used in order to make efficient use of each storage medium. Latency-sensitive client requests may be persisted in replicated NVRAM, and then later NAND, while background rebalancing operations are persisted directly to NAND.</p><p id="p-0086" num="0085">Persistent messages are persistently stored prior to being transmitted. This allows the system to continue to serve client requests despite failures and component replacement. Although many hardware components contain unique identifiers that are visible to system administrators, manufacturer, hardware supply chain and ongoing monitoring quality control infrastructure, applications running on top of the infrastructure address virtualize addresses. These virtualized addresses do not change over the lifetime of the storage system, regardless of component failures and replacements. This allows each component of the storage system to be replaced over time without reconfiguration or disruptions of client request processing, i.e., the system supports non-disruptive upgrades.</p><p id="p-0087" num="0086">In some embodiments, the virtualized addresses are stored with sufficient redundancy. A continuous monitoring system correlates hardware and software status and the hardware identifiers. This allows detection and prediction of failures due to faulty components and manufacturing details. The monitoring system also enables the proactive transfer of authorities and entities away from impacted devices before failure occurs by removing the component from the critical path in some embodiments.</p><p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a multiple level block diagram, showing contents of a storage node <b>150</b> and contents of a non-volatile solid state storage <b>152</b> of the storage node <b>150</b>. Data is communicated to and from the storage node <b>150</b> by a network interface controller (&#x2018;NIC&#x2019;) <b>202</b> in some embodiments. Each storage node <b>150</b> has a CPU <b>156</b>, and one or more non-volatile solid state storage <b>152</b>, as discussed above. Moving down one level in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, each non-volatile solid state storage <b>152</b> has a relatively fast non-volatile solid state memory, such as nonvolatile random access memory (&#x2018;NVRAM&#x2019;) <b>204</b>, and flash memory <b>206</b>. In some embodiments, NVRAM <b>204</b> may be a component that does not require program/erase cycles (DRAM, MRAM, PCM), and can be a memory that can support being written vastly more often than the memory is read from. Moving down another level in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, the NVRAM <b>204</b> is implemented in one embodiment as high speed volatile memory, such as dynamic random access memory (DRAM) <b>216</b>, backed up by energy reserve <b>218</b>. Energy reserve <b>218</b> provides sufficient electrical power to keep the DRAM <b>216</b> powered long enough for contents to be transferred to the flash memory <b>206</b> in the event of power failure. In some embodiments, energy reserve <b>218</b> is a capacitor, super-capacitor, battery, or other device, that supplies a suitable supply of energy sufficient to enable the transfer of the contents of DRAM <b>216</b> to a stable storage medium in the case of power loss. The flash memory <b>206</b> is implemented as multiple flash dies <b>222</b>, which may be referred to as packages of flash dies <b>222</b> or an array of flash dies <b>222</b>. It should be appreciated that the flash dies <b>222</b> could be packaged in any number of ways, with a single die per package, multiple dies per package (i.e. multichip packages), in hybrid packages, as bare dies on a printed circuit board or other substrate, as encapsulated dies, etc. In the embodiment shown, the non-volatile solid state storage <b>152</b> has a controller <b>212</b> or other processor, and an input output (I/O) port <b>210</b> coupled to the controller <b>212</b>. I/O port <b>210</b> is coupled to the CPU <b>156</b> and/or the network interface controller <b>202</b> of the flash storage node <b>150</b>. Flash input output (I/O) port <b>220</b> is coupled to the flash dies <b>222</b>, and a direct memory access unit (DMA) <b>214</b> is coupled to the controller <b>212</b>, the DRAM <b>216</b> and the flash dies <b>222</b>. In the embodiment shown, the I/O port <b>210</b>, controller <b>212</b>, DMA unit <b>214</b> and flash I/O port <b>220</b> are implemented on a programmable logic device (&#x2018;PLD&#x2019;) <b>208</b>, e.g., an FPGA. In this embodiment, each flash die <b>222</b> has pages, organized as sixteen kB (kilobyte) pages <b>224</b>, and a register <b>226</b> through which data can be written to or read from the flash die <b>222</b>. In further embodiments, other types of solid-state memory are used in place of, or in addition to flash memory illustrated within flash die <b>222</b>.</p><p id="p-0089" num="0088">Storage clusters <b>161</b>, in various embodiments as disclosed herein, can be contrasted with storage arrays in general. The storage nodes <b>150</b> are part of a collection that creates the storage cluster <b>161</b>. Each storage node <b>150</b> owns a slice of data and computing required to provide the data. Multiple storage nodes <b>150</b> cooperate to store and retrieve the data. Storage memory or storage devices, as used in storage arrays in general, are less involved with processing and manipulating the data. Storage memory or storage devices in a storage array receive commands to read, write, or erase data. The storage memory or storage devices in a storage array are not aware of a larger system in which they are embedded, or what the data means. Storage memory or storage devices in storage arrays can include various types of storage memory, such as RAM, solid state drives, hard disk drives, etc. The storage units <b>152</b> described herein have multiple interfaces active simultaneously and serving multiple purposes. In some embodiments, some of the functionality of a storage node <b>150</b> is shifted into a storage unit <b>152</b>, transforming the storage unit <b>152</b> into a combination of storage unit <b>152</b> and storage node <b>150</b>. Placing computing (relative to storage data) into the storage unit <b>152</b> places this computing closer to the data itself. The various system embodiments have a hierarchy of storage node layers with different capabilities. By contrast, in a storage array, a controller owns and knows everything about all of the data that the controller manages in a shelf or storage devices. In a storage cluster <b>161</b>, as described herein, multiple controllers in multiple storage units <b>152</b> and/or storage nodes <b>150</b> cooperate in various ways (e.g., for erasure coding, data sharding, metadata communication and redundancy, storage capacity expansion or contraction, data recovery, and so on).</p><p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a storage server environment, which uses embodiments of the storage nodes <b>150</b> and storage units <b>152</b> of <figref idref="DRAWINGS">FIGS. <b>2</b>A-C</figref>. In this version, each storage unit <b>152</b> has a processor such as controller <b>212</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>), an FPGA, flash memory <b>206</b>, and NVRAM <b>204</b> (which is super-capacitor backed DRAM <b>216</b>, see <figref idref="DRAWINGS">FIGS. <b>2</b>B and <b>2</b>C</figref>) on a PCIe (peripheral component interconnect express) board in a chassis <b>138</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>). The storage unit <b>152</b> may be implemented as a single board containing storage, and may be the largest tolerable failure domain inside the chassis. In some embodiments, up to two storage units <b>152</b> may fail and the device will continue with no data loss.</p><p id="p-0091" num="0090">The physical storage is divided into named regions based on application usage in some embodiments. The NVRAM <b>204</b> is a contiguous block of reserved memory in the storage unit <b>152</b> DRAM <b>216</b>, and is backed by NAND flash. NVRAM <b>204</b> is logically divided into multiple memory regions written for two as spool (e.g., spool_region). Space within the NVRAM <b>204</b> spools is managed by each authority <b>168</b> independently. Each device provides an amount of storage space to each authority <b>168</b>. That authority <b>168</b> further manages lifetimes and allocations within that space. Examples of a spool include distributed transactions or notions. When the primary power to a storage unit <b>152</b> fails, onboard super-capacitors provide a short duration of power hold up. During this holdup interval, the contents of the NVRAM <b>204</b> are flushed to flash memory <b>206</b>. On the next power-on, the contents of the NVRAM <b>204</b> are recovered from the flash memory <b>206</b>.</p><p id="p-0092" num="0091">As for the storage unit controller, the responsibility of the logical &#x201c;controller&#x201d; is distributed across each of the blades containing authorities <b>168</b>. This distribution of logical control is shown in <figref idref="DRAWINGS">FIG. <b>2</b>D</figref> as a host controller <b>242</b>, mid-tier controller <b>244</b> and storage unit controller(s) <b>246</b>. Management of the control plane and the storage plane are treated independently, although parts may be physically co-located on the same blade. Each authority <b>168</b> effectively serves as an independent controller. Each authority <b>168</b> provides its own data and metadata structures, its own background workers, and maintains its own lifecycle.</p><p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. <b>2</b>E</figref> is a blade <b>252</b> hardware block diagram, showing a control plane <b>254</b>, compute and storage planes <b>256</b>, <b>258</b>, and authorities <b>168</b> interacting with underlying physical resources, using embodiments of the storage nodes <b>150</b> and storage units <b>152</b> of <figref idref="DRAWINGS">FIGS. <b>2</b>A-C</figref> in the storage server environment of <figref idref="DRAWINGS">FIG. <b>2</b>D</figref>. The control plane <b>254</b> is partitioned into a number of authorities <b>168</b> which can use the compute resources in the compute plane <b>256</b> to run on any of the blades <b>252</b>. The storage plane <b>258</b> is partitioned into a set of devices, each of which provides access to flash <b>206</b> and NVRAM <b>204</b> resources. In one embodiment, the compute plane <b>256</b> may perform the operations of a storage array controller, as described herein, on one or more devices of the storage plane <b>258</b> (e.g., a storage array).</p><p id="p-0094" num="0093">In the compute and storage planes <b>256</b>, <b>258</b> of <figref idref="DRAWINGS">FIG. <b>2</b>E</figref>, the authorities <b>168</b> interact with the underlying physical resources (i.e., devices). From the point of view of an authority <b>168</b>, its resources are striped over all of the physical devices. From the point of view of a device, it provides resources to all authorities <b>168</b>, irrespective of where the authorities happen to run. Each authority <b>168</b> has allocated or has been allocated one or more partitions <b>260</b> of storage memory in the storage units <b>152</b>, e.g. partitions <b>260</b> in flash memory <b>206</b> and NVRAM <b>204</b>. Each authority <b>168</b> uses those allocated partitions <b>260</b> that belong to it, for writing or reading user data. Authorities can be associated with differing amounts of physical storage of the system. For example, one authority <b>168</b> could have a larger number of partitions <b>260</b> or larger sized partitions <b>260</b> in one or more storage units <b>152</b> than one or more other authorities <b>168</b>.</p><p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. <b>2</b>F</figref> depicts elasticity software layers in blades <b>252</b> of a storage cluster, in accordance with some embodiments. In the elasticity structure, elasticity software is symmetric, i.e., each blade's compute module <b>270</b> runs the three identical layers of processes depicted in <figref idref="DRAWINGS">FIG. <b>2</b>F</figref>. Storage managers <b>274</b> execute read and write requests from other blades <b>252</b> for data and metadata stored in local storage unit <b>152</b> NVRAM <b>204</b> and flash <b>206</b>. Authorities <b>168</b> fulfill client requests by issuing the necessary reads and writes to the blades <b>252</b> on whose storage units <b>152</b> the corresponding data or metadata resides. Endpoints <b>272</b> parse client connection requests received from switch fabric <b>146</b> supervisory software, relay the client connection requests to the authorities <b>168</b> responsible for fulfillment, and relay the authorities' <b>168</b> responses to clients. The symmetric three-layer structure enables the storage system's high degree of concurrency. Elasticity scales out efficiently and reliably in these embodiments. In addition, elasticity implements a unique scale-out technique that balances work evenly across all resources regardless of client access pattern, and maximizes concurrency by eliminating much of the need for inter-blade coordination that typically occurs with conventional distributed locking.</p><p id="p-0096" num="0095">Still referring to <figref idref="DRAWINGS">FIG. <b>2</b>F</figref>, authorities <b>168</b> running in the compute modules <b>270</b> of a blade <b>252</b> perform the internal operations required to fulfill client requests. One feature of elasticity is that authorities <b>168</b> are stateless, i.e., they cache active data and metadata in their own blades' <b>252</b> DRAMs for fast access, but the authorities store every update in their NVRAM <b>204</b> partitions on three separate blades <b>252</b> until the update has been written to flash <b>206</b>. All the storage system writes to NVRAM <b>204</b> are in triplicate to partitions on three separate blades <b>252</b> in some embodiments. With triple-mirrored NVRAM <b>204</b> and persistent storage protected by parity and Reed-Solomon RAID checksums, the storage system can survive concurrent failure of two blades <b>252</b> with no loss of data, metadata, or access to either.</p><p id="p-0097" num="0096">Because authorities <b>168</b> are stateless, they can migrate between blades <b>252</b>. Each authority <b>168</b> has a unique identifier. NVRAM <b>204</b> and flash <b>206</b> partitions are associated with authorities' <b>168</b> identifiers, not with the blades <b>252</b> on which they are running in some. Thus, when an authority <b>168</b> migrates, the authority <b>168</b> continues to manage the same storage partitions from its new location. When a new blade <b>252</b> is installed in an embodiment of the storage cluster, the system automatically rebalances load by: partitioning the new blade's <b>252</b> storage for use by the system's authorities <b>168</b>, migrating selected authorities <b>168</b> to the new blade <b>252</b>, starting endpoints <b>272</b> on the new blade <b>252</b> and including them in the switch fabric's <b>146</b> client connection distribution algorithm.</p><p id="p-0098" num="0097">From their new locations, migrated authorities <b>168</b> persist the contents of their NVRAM <b>204</b> partitions on flash <b>206</b>, process read and write requests from other authorities <b>168</b>, and fulfill the client requests that endpoints <b>272</b> direct to them. Similarly, if a blade <b>252</b> fails or is removed, the system redistributes its authorities <b>168</b> among the system's remaining blades <b>252</b>. The redistributed authorities <b>168</b> continue to perform their original functions from their new locations.</p><p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. <b>2</b>G</figref> depicts authorities <b>168</b> and storage resources in blades <b>252</b> of a storage cluster, in accordance with some embodiments. Each authority <b>168</b> is exclusively responsible for a partition of the flash <b>206</b> and NVRAM <b>204</b> on each blade <b>252</b>. The authority <b>168</b> manages the content and integrity of its partitions independently of other authorities <b>168</b>. Authorities <b>168</b> compress incoming data and preserve it temporarily in their NVRAM <b>204</b> partitions, and then consolidate, RAID-protect, and persist the data in segments of the storage in their flash <b>206</b> partitions. As the authorities <b>168</b> write data to flash <b>206</b>, storage managers <b>274</b> perform the necessary flash translation to optimize write performance and maximize media longevity. In the background, authorities <b>168</b> &#x201c;garbage collect,&#x201d; or reclaim space occupied by data that clients have made obsolete by overwriting the data. It should be appreciated that since authorities' <b>168</b> partitions are disjoint, there is no need for distributed locking to execute client and writes or to perform background functions.</p><p id="p-0100" num="0099">The embodiments described herein may utilize various software, communication and/or networking protocols. In addition, the configuration of the hardware and/or software may be adjusted to accommodate various protocols. For example, the embodiments may utilize Active Directory, which is a database based system that provides authentication, directory, policy, and other services in a WINDOWS&#x2122; environment. In these embodiments, LDAP (Lightweight Directory Access Protocol) is one example application protocol for querying and modifying items in directory service providers such as Active Directory. In some embodiments, a network lock manager (&#x2018;NLM&#x2019;) is utilized as a facility that works in cooperation with the Network File System (&#x2018;NFS&#x2019;) to provide a System V style of advisory file and record locking over a network. The Server Message Block (&#x2018;SMB&#x2019;) protocol, one version of which is also known as Common Internet File System (&#x2018;CIFS&#x2019;), may be integrated with the storage systems discussed herein. SMP operates as an application-layer network protocol typically used for providing shared access to files, printers, and serial ports and miscellaneous communications between nodes on a network. SMB also provides an authenticated inter-process communication mechanism. AMAZON&#x2122; S3 (Simple Storage Service) is a web service offered by Amazon Web Services, and the systems described herein may interface with Amazon S3 through web services interfaces (REST (representational state transfer), SOAP (simple object access protocol), and BitTorrent). A RESTful API (application programming interface) breaks down a transaction to create a series of small modules. Each module addresses a particular underlying part of the transaction. The control or permissions provided with these embodiments, especially for object data, may include utilization of an access control list (&#x2018;ACL&#x2019;). The ACL is a list of permissions attached to an object and the ACL specifies which users or system processes are granted access to objects, as well as what operations are allowed on given objects. The systems may utilize Internet Protocol version 6 (&#x2018;IPv6&#x2019;), as well as IPv4, for the communications protocol that provides an identification and location system for computers on networks and routes traffic across the Internet. The routing of packets between networked systems may include Equal-cost multi-path routing (&#x2032;ECMP&#x2032;), which is a routing strategy where next-hop packet forwarding to a single destination can occur over multiple &#x201c;best paths&#x201d; which tie for top place in routing metric calculations. Multi-path routing can be used in conjunction with most routing protocols because it is a per-hop decision limited to a single router. The software may support Multi-tenancy, which is an architecture in which a single instance of a software application serves multiple customers. Each customer may be referred to as a tenant. Tenants may be given the ability to customize some parts of the application, but may not customize the application's code, in some embodiments. The embodiments may maintain audit logs. An audit log is a document that records an event in a computing system. In addition to documenting what resources were accessed, audit log entries typically include destination and source addresses, a timestamp, and user login information for compliance with various regulations. The embodiments may support various key management policies, such as encryption key rotation. In addition, the system may support dynamic root passwords or some variation dynamically changing passwords.</p><p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> sets forth a diagram of a storage system <b>306</b> that is coupled for data communications with a cloud services provider <b>302</b> in accordance with some embodiments of the present disclosure. Although depicted in less detail, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> and <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref>. In some embodiments, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied as a storage system that includes imbalanced active/active controllers, as a storage system that includes balanced active/active controllers, as a storage system that includes active/active controllers where less than all of each controller's resources are utilized such that each controller has reserve resources that may be used to support failover, as a storage system that includes fully active/active controllers, as a storage system that includes dataset-segregated controllers, as a storage system that includes dual-layer architectures with front-end controllers and back-end integrated storage controllers, as a storage system that includes scale-out clusters of dual-controller arrays, as well as combinations of such embodiments.</p><p id="p-0102" num="0101">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the storage system <b>306</b> is coupled to the cloud services provider <b>302</b> via a data communications link <b>304</b>. The data communications link <b>304</b> may be embodied as a dedicated data communications link, as a data communications pathway that is provided through the use of one or data communications networks such as a wide area network (WAN&#x2032;) or LAN, or as some other mechanism capable of transporting digital information between the storage system <b>306</b> and the cloud services provider <b>302</b>. Such a data communications link <b>304</b> may be fully wired, fully wireless, or some aggregation of wired and wireless data communications pathways. In such an example, digital information may be exchanged between the storage system <b>306</b> and the cloud services provider <b>302</b> via the data communications link <b>304</b> using one or more data communications protocols. For example, digital information may be exchanged between the storage system <b>306</b> and the cloud services provider <b>302</b> via the data communications link <b>304</b> using the handheld device transfer protocol (&#x2018;HDTP&#x2019;), hypertext transfer protocol (&#x2018;HTTP&#x2019;), internet protocol (&#x2018;IP&#x2019;), real-time transfer protocol (&#x2018;RTP&#x2019;), transmission control protocol (&#x2018;TCP&#x2019;), user datagram protocol (&#x2018;UDP&#x2019;), wireless application protocol (&#x2018;WAP&#x2019;), or other protocol.</p><p id="p-0103" num="0102">The cloud services provider <b>302</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied, for example, as a system and computing environment that provides a vast array of services to users of the cloud services provider <b>302</b> through the sharing of computing resources via the data communications link <b>304</b>. The cloud services provider <b>302</b> may provide on-demand access to a shared pool of configurable computing resources such as computer networks, servers, storage, applications, and services, and so on. The shared pool of configurable resources may be rapidly provisioned and released to a user of the cloud services provider <b>302</b> with minimal management effort. Generally, the user of the cloud services provider <b>302</b> is unaware of the exact computing resources utilized by the cloud services provider <b>302</b> to provide the services. Although in many cases such a cloud services provider <b>302</b> may be accessible via the Internet, readers of skill in the art will recognize that any system that abstracts the use of shared resources to provide services to a user through any data communications link may be considered a cloud services provider <b>302</b>.</p><p id="p-0104" num="0103">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the cloud services provider <b>302</b> may be configured to provide a variety of services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of various service models. For example, the cloud services provider <b>302</b> may be configured to provide services through the implementation of an infrastructure as a service (&#x2018;IaaS&#x2019;) service model, through the implementation of a platform as a service (&#x2018;PaaS&#x2019;) service model, through the implementation of a software as a service (&#x2018;SaaS&#x2019;) service model, through the implementation of an authentication as a service (&#x2018;AaaS&#x2019;) service model, through the implementation of a storage as a service model where the cloud services provider <b>302</b> offers access to its storage infrastructure for use by the storage system <b>306</b> and users of the storage system <b>306</b>, and so on. Readers will appreciate that the cloud services provider <b>302</b> may be configured to provide additional services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of additional service models, as the service models described above are included only for explanatory purposes and in no way represent a limitation of the services that may be offered by the cloud services provider <b>302</b> or a limitation as to the service models that may be implemented by the cloud services provider <b>302</b>.</p><p id="p-0105" num="0104">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the cloud services provider <b>302</b> may be embodied, for example, as a private cloud, as a public cloud, or as a combination of a private cloud and public cloud. In an embodiment in which the cloud services provider <b>302</b> is embodied as a private cloud, the cloud services provider <b>302</b> may be dedicated to providing services to a single organization rather than providing services to multiple organizations. In an embodiment where the cloud services provider <b>302</b> is embodied as a public cloud, the cloud services provider <b>302</b> may provide services to multiple organizations. In still alternative embodiments, the cloud services provider <b>302</b> may be embodied as a mix of a private and public cloud services with a hybrid cloud deployment.</p><p id="p-0106" num="0105">Although not explicitly depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, readers will appreciate that a vast amount of additional hardware components and additional software components may be necessary to facilitate the delivery of cloud services to the storage system <b>306</b> and users of the storage system <b>306</b>. For example, the storage system <b>306</b> may be coupled to (or even include) a cloud storage gateway. Such a cloud storage gateway may be embodied, for example, as hardware-based or software-based appliance that is located on premise with the storage system <b>306</b>. Such a cloud storage gateway may operate as a bridge between local applications that are executing on the storage array <b>306</b> and remote, cloud-based storage that is utilized by the storage array <b>306</b>. Through the use of a cloud storage gateway, organizations may move primary iSCSI or NAS to the cloud services provider <b>302</b>, thereby enabling the organization to save space on their on-premises storage systems. Such a cloud storage gateway may be configured to emulate a disk array, a block-based device, a file server, or other storage system that can translate the SCSI commands, file server commands, or other appropriate command into REST-space protocols that facilitate communications with the cloud services provider <b>302</b>.</p><p id="p-0107" num="0106">In order to enable the storage system <b>306</b> and users of the storage system <b>306</b> to make use of the services provided by the cloud services provider <b>302</b>, a cloud migration process may take place during which data, applications, or other elements from an organization's local systems (or even from another cloud environment) are moved to the cloud services provider <b>302</b>. In order to successfully migrate data, applications, or other elements to the cloud services provider's <b>302</b> environment, middleware such as a cloud migration tool may be utilized to bridge gaps between the cloud services provider's <b>302</b> environment and an organization's environment. Such cloud migration tools may also be configured to address potentially high network costs and long transfer times associated with migrating large volumes of data to the cloud services provider <b>302</b>, as well as addressing security concerns associated with sensitive data to the cloud services provider <b>302</b> over data communications networks. In order to further enable the storage system <b>306</b> and users of the storage system <b>306</b> to make use of the services provided by the cloud services provider <b>302</b>, a cloud orchestrator may also be used to arrange and coordinate automated tasks in pursuit of creating a consolidated process or workflow. Such a cloud orchestrator may perform tasks such as configuring various components, whether those components are cloud components or on-premises components, as well as managing the interconnections between such components. The cloud orchestrator can simplify the inter-component communication and connections to ensure that links are correctly configured and maintained.</p><p id="p-0108" num="0107">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, and as described briefly above, the cloud services provider <b>302</b> may be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the usage of a SaaS service model, eliminating the need to install and run the application on local computers, which may simplify maintenance and support of the application. Such applications may take many forms in accordance with various embodiments of the present disclosure. For example, the cloud services provider <b>302</b> may be configured to provide access to data analytics applications to the storage system <b>306</b> and users of the storage system <b>306</b>. Such data analytics applications may be configured, for example, to receive vast amounts of telemetry data phoned home by the storage system <b>306</b>. Such telemetry data may describe various operating characteristics of the storage system <b>306</b> and may be analyzed for a vast array of purposes including, for example, to determine the health of the storage system <b>306</b>, to identify workloads that are executing on the storage system <b>306</b>, to predict when the storage system <b>306</b> will run out of various resources, to recommend configuration changes, hardware or software upgrades, workflow migrations, or other actions that may improve the operation of the storage system <b>306</b>.</p><p id="p-0109" num="0108">The cloud services provider <b>302</b> may also be configured to provide access to virtualized computing environments to the storage system <b>306</b> and users of the storage system <b>306</b>. Such virtualized computing environments may be embodied, for example, as a virtual machine or other virtualized computer hardware platforms, virtual storage devices, virtualized computer network resources, and so on. Examples of such virtualized environments can include virtual machines that are created to emulate an actual computer, virtualized desktop environments that separate a logical desktop from a physical machine, virtualized file systems that allow uniform access to different types of concrete file systems, and many others.</p><p id="p-0110" num="0109">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> sets forth a diagram of a storage system <b>306</b> in accordance with some embodiments of the present disclosure. Although depicted in less detail, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> and <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref> as the storage system may include many of the components described above.</p><p id="p-0111" num="0110">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may include a vast amount of storage resources <b>308</b>, which may be embodied in many forms. For example, the storage resources <b>308</b> can include nano-RAM or another form of nonvolatile random access memory that utilizes carbon nanotubes deposited on a substrate, 3D crosspoint non-volatile memory, flash memory including single-level cell (&#x2018;SLC&#x2019;) NAND flash, multi-level cell (&#x2018;MLC&#x2019;) NAND flash, triple-level cell (&#x2018;TLC&#x2019;) NAND flash, quad-level cell (&#x2018;QLC&#x2019;) NAND flash, or others. Likewise, the storage resources <b>308</b> may include non-volatile magnetoresistive random-access memory (&#x2018;MRAM&#x2019;), including spin transfer torque (STY) MRAM. The example storage resources <b>308</b> may alternatively include non-volatile phase-change memory (&#x2018;PCM&#x2019;), quantum memory that allows for the storage and retrieval of photonic quantum information, resistive random-access memory (&#x2018;ReRAM&#x2019;), storage class memory (&#x2018;SCM&#x2019;), or other form of storage resources, including any combination of resources described herein. Readers will appreciate that other forms of computer memories and storage devices may be utilized by the storage systems described above, including DRAM, SRAM, EEPROM, universal memory, and many others. The storage resources <b>308</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied in a variety of form factors, including but not limited to, dual in-line memory modules (&#x2018;DIMMs&#x2019;), non-volatile dual in-line memory modules (&#x2018;NVDIMMs&#x2019;), M.2, U.2, and others.</p><p id="p-0112" num="0111">The storage resources <b>308</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may include various forms of SCM. SCM may effectively treat fast, non-volatile memory (e.g., NAND flash) as an extension of DRAM such that an entire dataset may be treated as an in-memory dataset that resides entirely in DRAM. SCM may include non-volatile media such as, for example, NAND flash. Such NAND flash may be accessed utilizing NVMe that can use the PCIe bus as its transport, providing for relatively low access latencies compared to older protocols. In fact, the network protocols used for SSDs in all-flash arrays can include NVMe using Ethernet (ROCE, NVME TCP), Fibre Channel (NVMe FC), InfiniBand (iWARP), and others that make it possible to treat fast, non-volatile memory as an extension of DRAM. In view of the fact that DRAM is often byte-addressable and fast, non-volatile memory such as NAND flash is block-addressable, a controller software/hardware stack may be needed to convert the block data to the bytes that are stored in the media. Examples of media and software that may be used as SCM can include, for example, 3D XPoint, Intel Memory Drive Technology, Samsung's Z-SSD, and others.</p><p id="p-0113" num="0112">The example storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may implement a variety of storage architectures. For example, storage systems in accordance with some embodiments of the present disclosure may utilize block storage where data is stored in blocks, and each block essentially acts as an individual hard drive. Storage systems in accordance with some embodiments of the present disclosure may utilize object storage, where data is managed as objects. Each object may include the data itself, a variable amount of metadata, and a globally unique identifier, where object storage can be implemented at multiple levels (e.g., device level, system level, interface level). Storage systems in accordance with some embodiments of the present disclosure utilize file storage in which data is stored in a hierarchical structure. Such data may be saved in files and folders, and presented to both the system storing it and the system retrieving it in the same format.</p><p id="p-0114" num="0113">The example storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be embodied as a storage system in which additional storage resources can be added through the use of a scale-up model, additional storage resources can be added through the use of a scale-out model, or through some combination thereof. In a scale-up model, additional storage may be added by adding additional storage devices. In a scale-out model, however, additional storage nodes may be added to a cluster of storage nodes, where such storage nodes can include additional processing resources, additional networking resources, and so on.</p><p id="p-0115" num="0114">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes communications resources <b>310</b> that may be useful in facilitating data communications between components within the storage system <b>306</b>, as well as data communications between the storage system <b>306</b> and computing devices that are outside of the storage system <b>306</b>, including embodiments where those resources are separated by a relatively vast expanse. The communications resources <b>310</b> may be configured to utilize a variety of different protocols and data communication fabrics to facilitate data communications between components within the storage systems as well as computing devices that are outside of the storage system. For example, the communications resources <b>310</b> can include fibre channel (&#x2018;FC&#x2019;) technologies such as FC fabrics and FC protocols that can transport SCSI commands over FC network, FC over ethernet (&#x2018;FCoE&#x2019;) technologies through which FC frames are encapsulated and transmitted over Ethernet networks, InfiniBand (&#x2018;IB&#x2019;) technologies in which a switched fabric topology is utilized to facilitate transmissions between channel adapters, NVM Express (&#x2018;NVMe&#x2019;) technologies and NVMe over fabrics (&#x2018;NVMeoF&#x2019;) technologies through which non-volatile storage media attached via a PCI express (&#x2018;PCIe&#x2019;) bus may be accessed, and others. In fact, the storage systems described above may, directly or indirectly, make use of neutrino communication technologies and devices through which information (including binary information) is transmitted using a beam of neutrinos.</p><p id="p-0116" num="0115">The communications resources <b>310</b> can also include mechanisms for accessing storage resources <b>308</b> within the storage system <b>306</b> utilizing serial attached SCSI (&#x2018;SAS&#x2019;), serial ATA (&#x2018;SATA&#x2019;) bus interfaces for connecting storage resources <b>308</b> within the storage system <b>306</b> to host bus adapters within the storage system <b>306</b>, internet small computer systems interface (&#x2018;iSCSI&#x2019;) technologies to provide block-level access to storage resources <b>308</b> within the storage system <b>306</b>, and other communications resources that that may be useful in facilitating data communications between components within the storage system <b>306</b>, as well as data communications between the storage system <b>306</b> and computing devices that are outside of the storage system <b>306</b>.</p><p id="p-0117" num="0116">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes processing resources <b>312</b> that may be useful in useful in executing computer program instructions and performing other computational tasks within the storage system <b>306</b>. The processing resources <b>312</b> may include one or more ASICs that are customized for some particular purpose as well as one or more CPUs. The processing resources <b>312</b> may also include one or more DSPs, one or more FPGAs, one or more systems on a chip (&#x2018;SoCs&#x2019;), or other form of processing resources <b>312</b>. The storage system <b>306</b> may utilize the storage resources <b>312</b> to perform a variety of tasks including, but not limited to, supporting the execution of software resources <b>314</b> that will be described in greater detail below.</p><p id="p-0118" num="0117">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes software resources <b>314</b> that, when executed by processing resources <b>312</b> within the storage system <b>306</b>, may perform a vast array of tasks. The software resources <b>314</b> may include, for example, one or more modules of computer program instructions that when executed by processing resources <b>312</b> within the storage system <b>306</b> are useful in carrying out various data protection techniques to preserve the integrity of data that is stored within the storage systems. Readers will appreciate that such data protection techniques may be carried out, for example, by system software executing on computer hardware within the storage system, by a cloud services provider, or in other ways. Such data protection techniques can include, for example, data archiving techniques that cause data that is no longer actively used to be moved to a separate storage device or separate storage system for long-term retention, data backup techniques through which data stored in the storage system may be copied and stored in a distinct location to avoid data loss in the event of equipment failure or some other form of catastrophe with the storage system, data replication techniques through which data stored in the storage system is replicated to another storage system such that the data may be accessible via multiple storage systems, data snapshotting techniques through which the state of data within the storage system is captured at various points in time, data and database cloning techniques through which duplicate copies of data and databases may be created, and other data protection techniques.</p><p id="p-0119" num="0118">The software resources <b>314</b> may also include software that is useful in implementing software-defined storage (&#x2018;SDS&#x2019;). In such an example, the software resources <b>314</b> may include one or more modules of computer program instructions that, when executed, are useful in policy-based provisioning and management of data storage that is independent of the underlying hardware. Such software resources <b>314</b> may be useful in implementing storage virtualization to separate the storage hardware from the software that manages the storage hardware.</p><p id="p-0120" num="0119">The software resources <b>314</b> may also include software that is useful in facilitating and optimizing I/O operations that are directed to the storage resources <b>308</b> in the storage system <b>306</b>. For example, the software resources <b>314</b> may include software modules that perform carry out various data reduction techniques such as, for example, data compression, data deduplication, and others. The software resources <b>314</b> may include software modules that intelligently group together I/O operations to facilitate better usage of the underlying storage resource <b>308</b>, software modules that perform data migration operations to migrate from within a storage system, as well as software modules that perform other functions. Such software resources <b>314</b> may be embodied as one or more software containers or in many other ways.</p><p id="p-0121" num="0120">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> sets forth an example of a cloud-based storage system <b>318</b> in accordance with some embodiments of the present disclosure. In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the cloud-based storage system <b>318</b> is created entirely in a cloud computing environment <b>316</b> such as, for example, Amazon Web Services (&#x2018;AWS&#x2019;), Microsoft Azure, Google Cloud Platform, IBM Cloud, Oracle Cloud, and others. The cloud-based storage system <b>318</b> may be used to provide services similar to the services that may be provided by the storage systems described above. For example, the cloud-based storage system <b>318</b> may be used to provide block storage services to users of the cloud-based storage system <b>318</b>, the cloud-based storage system <b>318</b> may be used to provide storage services to users of the cloud-based storage system <b>318</b> through the use of solid-state storage, and so on.</p><p id="p-0122" num="0121">The cloud-based storage system <b>318</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> includes two cloud computing instances <b>320</b>, <b>322</b> that each are used to support the execution of a storage controller application <b>324</b>, <b>326</b>. The cloud computing instances <b>320</b>, <b>322</b> may be embodied, for example, as instances of cloud computing resources (e.g., virtual machines) that may be provided by the cloud computing environment <b>316</b> to support the execution of software applications such as the storage controller application <b>324</b>, <b>326</b>. In one embodiment, the cloud computing instances <b>320</b>, <b>322</b> may be embodied as Amazon Elastic Compute Cloud (&#x2018;EC2&#x2019;) instances. In such an example, an Amazon Machine Image (&#x2018;AMI&#x2019;) that includes the storage controller application <b>324</b>, <b>326</b> may be booted to create and configure a virtual machine that may execute the storage controller application <b>324</b>, <b>326</b>.</p><p id="p-0123" num="0122">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the storage controller application <b>324</b>, <b>326</b> may be embodied as a module of computer program instructions that, when executed, carries out various storage tasks. For example, the storage controller application <b>324</b>, <b>326</b> may be embodied as a module of computer program instructions that, when executed, carries out the same tasks as the controllers <b>110</b>A, <b>110</b>B in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> described above such as writing data received from the users of the cloud-based storage system <b>318</b> to the cloud-based storage system <b>318</b>, erasing data from the cloud-based storage system <b>318</b>, retrieving data from the cloud-based storage system <b>318</b> and providing such data to users of the cloud-based storage system <b>318</b>, monitoring and reporting of disk utilization and performance, performing redundancy operations, such as RAID or RAID-like data redundancy operations, compressing data, encrypting data, deduplicating data, and so forth. Readers will appreciate that because there are two cloud computing instances <b>320</b>, <b>322</b> that each include the storage controller application <b>324</b>, <b>326</b>, in some embodiments one cloud computing instance <b>320</b> may operate as the primary controller as described above while the other cloud computing instance <b>322</b> may operate as the secondary controller as described above. Readers will appreciate that the storage controller application <b>324</b>, <b>326</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> may include identical source code that is executed within different cloud computing instances <b>320</b>, <b>322</b>.</p><p id="p-0124" num="0123">Consider an example in which the cloud computing environment <b>316</b> is embodied as AWS and the cloud computing instances are embodied as EC2 instances. In such an example, the cloud computing instance <b>320</b> that operates as the primary controller may be deployed on one of the instance types that has a relatively large amount of memory and processing power while the cloud computing instance <b>322</b> that operates as the secondary controller may be deployed on one of the instance types that has a relatively small amount of memory and processing power. In such an example, upon the occurrence of a failover event where the roles of primary and secondary are switched, a double failover may actually be carried out such that: 1) a first failover event where the cloud computing instance <b>322</b> that formerly operated as the secondary controller begins to operate as the primary controller, and 2) a third cloud computing instance (not shown) that is of an instance type that has a relatively large amount of memory and processing power is spun up with a copy of the storage controller application, where the third cloud computing instance begins operating as the primary controller while the cloud computing instance <b>322</b> that originally operated as the secondary controller begins operating as the secondary controller again. In such an example, the cloud computing instance <b>320</b> that formerly operated as the primary controller may be terminated. Readers will appreciate that in alternative embodiments, the cloud computing instance <b>320</b> that is operating as the secondary controller after the failover event may continue to operate as the secondary controller and the cloud computing instance <b>322</b> that operated as the primary controller after the occurrence of the failover event may be terminated once the primary role has been assumed by the third cloud computing instance (not shown).</p><p id="p-0125" num="0124">Readers will appreciate that while the embodiments described above relate to embodiments where one cloud computing instance <b>320</b> operates as the primary controller and the second cloud computing instance <b>322</b> operates as the secondary controller, other embodiments are within the scope of the present disclosure. For example, each cloud computing instance <b>320</b>, <b>322</b> may operate as a primary controller for some portion of the address space supported by the cloud-based storage system <b>318</b>, each cloud computing instance <b>320</b>, <b>322</b> may operate as a primary controller where the servicing of I/O operations directed to the cloud-based storage system <b>318</b> are divided in some other way, and so on. In fact, in other embodiments where costs savings may be prioritized over performance demands, only a single cloud computing instance may exist that contains the storage controller application.</p><p id="p-0126" num="0125">The cloud-based storage system <b>318</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> includes cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. The cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> may be embodied, for example, as instances of cloud computing resources that may be provided by the cloud computing environment <b>316</b> to support the execution of software applications. The cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>of <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> may differ from the cloud computing instances <b>320</b>, <b>322</b> described above as the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>of <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> have local storage <b>330</b>, <b>334</b>, <b>338</b> resources whereas the cloud computing instances <b>320</b>, <b>322</b> that support the execution of the storage controller application <b>324</b>, <b>326</b> need not have local storage resources. The cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may be embodied, for example, as EC2 M5 instances that include one or more SSDs, as EC2 R5 instances that include one or more SSDs, as EC2 I3 instances that include one or more SSDs, and so on. In some embodiments, the local storage <b>330</b>, <b>334</b>, <b>338</b> must be embodied as solid-state storage (e.g., SSDs) rather than storage that makes use of hard disk drives.</p><p id="p-0127" num="0126">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, each of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> can include a software daemon <b>328</b>, <b>332</b>, <b>336</b> that, when executed by a cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>can present itself to the storage controller applications <b>324</b>, <b>326</b> as if the cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>were a physical storage device (e.g., one or more SSDs). In such an example, the software daemon <b>328</b>, <b>332</b>, <b>336</b> may include computer program instructions similar to those that would normally be contained on a storage device such that the storage controller applications <b>324</b>, <b>326</b> can send and receive the same commands that a storage controller would send to storage devices. In such a way, the storage controller applications <b>324</b>, <b>326</b> may include code that is identical to (or substantially identical to) the code that would be executed by the controllers in the storage systems described above. In these and similar embodiments, communications between the storage controller applications <b>324</b>, <b>326</b> and the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may utilize iSCSI, NVMe over TCP, messaging, a custom protocol, or in some other mechanism.</p><p id="p-0128" num="0127">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, each of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may also be coupled to block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b>. The block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b> may be embodied, for example, as Amazon Elastic Block Store (&#x2018;EBS&#x2019;) volumes. For example, a first EBS volume may be coupled to a first cloud computing instance <b>340</b><i>a</i>, a second EBS volume may be coupled to a second cloud computing instance <b>340</b><i>b</i>, and a third EBS volume may be coupled to a third cloud computing instance <b>340</b><i>n</i>. In such an example, the block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b> may be utilized in a manner that is similar to how the NVRAM devices described above are utilized, as the software daemon <b>328</b>, <b>332</b>, <b>336</b> (or some other module) that is executing within a particular cloud comping instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may, upon receiving a request to write data, initiate a write of the data to its attached EBS volume as well as a write of the data to its local storage <b>330</b>, <b>334</b>, <b>338</b> resources. In some alternative embodiments, data may only be written to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources within a particular cloud comping instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In an alternative embodiment, rather than using the block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b> as NVRAM, actual RAM on each of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may be used as NVRAM, thereby decreasing network utilization costs that would be associated with using an EBS volume as the NVRAM.</p><p id="p-0129" num="0128">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may be utilized, by cloud computing instances <b>320</b>, <b>322</b> that support the execution of the storage controller application <b>324</b>, <b>326</b> to service I/O operations that are directed to the cloud-based storage system <b>318</b>. Consider an example in which a first cloud computing instance <b>320</b> that is executing the storage controller application <b>324</b> is operating as the primary controller. In such an example, the first cloud computing instance <b>320</b> that is executing the storage controller application <b>324</b> may receive (directly or indirectly via the secondary controller) requests to write data to the cloud-based storage system <b>318</b> from users of the cloud-based storage system <b>318</b>. In such an example, the first cloud computing instance <b>320</b> that is executing the storage controller application <b>324</b> may perform various tasks such as, for example, deduplicating the data contained in the request, compressing the data contained in the request, determining where to the write the data contained in the request, and so on, before ultimately sending a request to write a deduplicated, encrypted, or otherwise possibly updated version of the data to one or more of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. Either cloud computing instance <b>320</b>, <b>322</b>, in some embodiments, may receive a request to read data from the cloud-based storage system <b>318</b> and may ultimately send a request to read data to one or more of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>.</p><p id="p-0130" num="0129">Readers will appreciate that when a request to write data is received by a particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>, the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may be configured to not only write the data to its own local storage <b>330</b>, <b>334</b>, <b>338</b> resources and any appropriate block-storage <b>342</b>, <b>344</b>, <b>346</b> that are offered by the cloud computing environment <b>316</b>, but the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may also be configured to write the data to cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. The cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may be embodied, for example, as Amazon Simple Storage Service (&#x2018;S3&#x2019;) storage that is accessible by the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In other embodiments, the cloud computing instances <b>320</b>, <b>322</b> that each include the storage controller application <b>324</b>, <b>326</b> may initiate the storage of the data in the local storage <b>330</b>, <b>334</b>, <b>338</b> of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>and the cloud-based object storage <b>348</b>.</p><p id="p-0131" num="0130">Readers will appreciate that, as described above, the cloud-based storage system <b>318</b> may be used to provide block storage services to users of the cloud-based storage system <b>318</b>. While the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may support block-level access, the cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>supports only object-based access. In order to address this, the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may be configured to take blocks of data, package those blocks into objects, and write the objects to the cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n. </i></p><p id="p-0132" num="0131">Consider an example in which data is written to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>in 1 MB blocks. In such an example, assume that a user of the cloud-based storage system <b>318</b> issues a request to write data that, after being compressed and deduplicated by the storage controller application <b>324</b>, <b>326</b> results in the need to write 5 MB of data. In such an example, writing the data to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>is relatively straightforward as <b>5</b> blocks that are 1 MB in size are written to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In such an example, the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may be configured to: 1) create a first object that includes the first 1 MB of data and write the first object to the cloud-based object storage <b>348</b>, <b>2</b>) create a second object that includes the second 1 MB of data and write the second object to the cloud-based object storage <b>348</b>, <b>3</b>) create a third object that includes the third 1 MB of data and write the third object to the cloud-based object storage <b>348</b>, and so on. As such, in some embodiments, each object that is written to the cloud-based object storage <b>348</b> may be identical (or nearly identical) in size. Readers will appreciate that in such an example, metadata that is associated with the data itself may be included in each object (e.g., the first 1 MB of the object is data and the remaining portion is metadata associated with the data).</p><p id="p-0133" num="0132">Readers will appreciate that the cloud-based object storage <b>348</b> may be incorporated into the cloud-based storage system <b>318</b> to increase the durability of the cloud-based storage system <b>318</b>. Continuing with the example described above where the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>are EC2 instances, readers will understand that EC2 instances are only guaranteed to have a monthly uptime of 99.9% and data stored in the local instance store only persists during the lifetime of the EC2 instance. As such, relying on the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> as the only source of persistent data storage in the cloud-based storage system <b>318</b> may result in a relatively unreliable storage system. Likewise, EBS volumes are designed for 99.999% availability. As such, even relying on EBS as the persistent data store in the cloud-based storage system <b>318</b> may result in a storage system that is not sufficiently durable. Amazon S3, however, is designed to provide 99.999999999% durability, meaning that a cloud-based storage system <b>318</b> that can incorporate S3 into its pool of storage is substantially more durable than various other options.</p><p id="p-0134" num="0133">Readers will appreciate that while a cloud-based storage system <b>318</b> that can incorporate S3 into its pool of storage is substantially more durable than various other options, utilizing S3 as the primary pool of storage may result in storage system that has relatively slow response times and relatively long I/O latencies. As such, the cloud-based storage system <b>318</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> not only stores data in S3 but the cloud-based storage system <b>318</b> also stores data in local storage <b>330</b>, <b>334</b>, <b>338</b> resources and block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>, such that read operations can be serviced from local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>, thereby reducing read latency when users of the cloud-based storage system <b>318</b> attempt to read data from the cloud-based storage system <b>318</b>.</p><p id="p-0135" num="0134">In some embodiments, all data that is stored by the cloud-based storage system <b>318</b> may be stored in both: 1) the cloud-based object storage <b>348</b>, and 2) at least one of the local storage <b>330</b>, <b>334</b>, <b>338</b> resources or block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In such embodiments, the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may effectively operate as cache that generally includes all data that is also stored in S3, such that all reads of data may be serviced by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>without requiring the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>to access the cloud-based object storage <b>348</b>. Readers will appreciate that in other embodiments, however, all data that is stored by the cloud-based storage system <b>318</b> may be stored in the cloud-based object storage <b>348</b>, but less than all data that is stored by the cloud-based storage system <b>318</b> may be stored in at least one of the local storage <b>330</b>, <b>334</b>, <b>338</b> resources or block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In such an example, various policies may be utilized to determine which subset of the data that is stored by the cloud-based storage system <b>318</b> should reside in both: 1) the cloud-based object storage <b>348</b>, and 2) at least one of the local storage <b>330</b>, <b>334</b>, <b>338</b> resources or block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n. </i></p><p id="p-0136" num="0135">As described above, when the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> are embodied as EC2 instances, the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> are only guaranteed to have a monthly uptime of 99.9% and data stored in the local instance store only persists during the lifetime of each cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. As such, one or more modules of computer program instructions that are executing within the cloud-based storage system <b>318</b> (e.g., a monitoring module that is executing on its own EC2 instance) may be designed to handle the failure of one or more of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. In such an example, the monitoring module may handle the failure of one or more of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> by creating one or more new cloud computing instances with local storage, retrieving data that was stored on the failed cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>from the cloud-based object storage <b>348</b>, and storing the data retrieved from the cloud-based object storage <b>348</b> in local storage on the newly created cloud computing instances. Readers will appreciate that many variants of this process may be implemented.</p><p id="p-0137" num="0136">Consider an example in which all cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> failed. In such an example, the monitoring module may create new cloud computing instances with local storage, where high-bandwidth instances types are selected that allow for the maximum data transfer rates between the newly created high-bandwidth cloud computing instances with local storage and the cloud-based object storage <b>348</b>. Readers will appreciate that instances types are selected that allow for the maximum data transfer rates between the new cloud computing instances and the cloud-based object storage <b>348</b> such that the new high-bandwidth cloud computing instances can be rehydrated with data from the cloud-based object storage <b>348</b> as quickly as possible. Once the new high-bandwidth cloud computing instances are rehydrated with data from the cloud-based object storage <b>348</b>, less expensive lower-bandwidth cloud computing instances may be created, data may be migrated to the less expensive lower-bandwidth cloud computing instances, and the high-bandwidth cloud computing instances may be terminated.</p><p id="p-0138" num="0137">Readers will appreciate that in some embodiments, the number of new cloud computing instances that are created may substantially exceed the number of cloud computing instances that are needed to locally store all of the data stored by the cloud-based storage system <b>318</b>. The number of new cloud computing instances that are created may substantially exceed the number of cloud computing instances that are needed to locally store all of the data stored by the cloud-based storage system <b>318</b> in order to more rapidly pull data from the cloud-based object storage <b>348</b> and into the new cloud computing instances, as each new cloud computing instance can (in parallel) retrieve some portion of the data stored by the cloud-based storage system <b>318</b>. In such embodiments, once the data stored by the cloud-based storage system <b>318</b> has been pulled into the newly created cloud computing instances, the data may be consolidated within a subset of the newly created cloud computing instances and those newly created cloud computing instances that are excessive may be terminated.</p><p id="p-0139" num="0138">Consider an example in which 1000 cloud computing instances are needed in order to locally store all valid data that users of the cloud-based storage system <b>318</b> have written to the cloud-based storage system <b>318</b>. In such an example, assume that all 1,000 cloud computing instances fail. In such an example, the monitoring module may cause 100,000 cloud computing instances to be created, where each cloud computing instance is responsible for retrieving, from the cloud-based object storage <b>348</b>, distinct 1/100,000th chunks of the valid data that users of the cloud-based storage system <b>318</b> have written to the cloud-based storage system <b>318</b> and locally storing the distinct chunk of the dataset that it retrieved. In such an example, because each of the 100,000 cloud computing instances can retrieve data from the cloud-based object storage <b>348</b> in parallel, the caching layer may be restored 100 times faster as compared to an embodiment where the monitoring module only create 1000 replacement cloud computing instances. In such an example, over time the data that is stored locally in the 100,000 could be consolidated into 1,000 cloud computing instances and the remaining 99,000 cloud computing instances could be terminated.</p><p id="p-0140" num="0139">Readers will appreciate that various performance aspects of the cloud-based storage system <b>318</b> may be monitored (e.g., by a monitoring module that is executing in an EC2 instance) such that the cloud-based storage system <b>318</b> can be scaled-up or scaled-out as needed. Consider an example in which the monitoring module monitors the performance of the could-based storage system <b>318</b> via communications with one or more of the cloud computing instances <b>320</b>, <b>322</b> that each are used to support the execution of a storage controller application <b>324</b>, <b>326</b>, via monitoring communications between cloud computing instances <b>320</b>, <b>322</b>, <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>, via monitoring communications between cloud computing instances <b>320</b>, <b>322</b>, <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>and the cloud-based object storage <b>348</b>, or in some other way. In such an example, assume that the monitoring module determines that the cloud computing instances <b>320</b>, <b>322</b> that are used to support the execution of a storage controller application <b>324</b>, <b>326</b> are undersized and not sufficiently servicing the I/O requests that are issued by users of the cloud-based storage system <b>318</b>. In such an example, the monitoring module may create a new, more powerful cloud computing instance (e.g., a cloud computing instance of a type that includes more processing power, more memory, etc. . . . ) that includes the storage controller application such that the new, more powerful cloud computing instance can begin operating as the primary controller. Likewise, if the monitoring module determines that the cloud computing instances <b>320</b>, <b>322</b> that are used to support the execution of a storage controller application <b>324</b>, <b>326</b> are oversized and that cost savings could be gained by switching to a smaller, less powerful cloud computing instance, the monitoring module may create a new, less powerful (and less expensive) cloud computing instance that includes the storage controller application such that the new, less powerful cloud computing instance can begin operating as the primary controller.</p><p id="p-0141" num="0140">Consider, as an additional example of dynamically sizing the cloud-based storage system <b>318</b>, an example in which the monitoring module determines that the utilization of the local storage that is collectively provided by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>has reached a predetermined utilization threshold (e.g., 95%). In such an example, the monitoring module may create additional cloud computing instances with local storage to expand the pool of local storage that is offered by the cloud computing instances. Alternatively, the monitoring module may create one or more new cloud computing instances that have larger amounts of local storage than the already existing cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>, such that data stored in an already existing cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>can be migrated to the one or more new cloud computing instances and the already existing cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>can be terminated, thereby expanding the pool of local storage that is offered by the cloud computing instances. Likewise, if the pool of local storage that is offered by the cloud computing instances is unnecessarily large, data can be consolidated and some cloud computing instances can be terminated.</p><p id="p-0142" num="0141">Readers will appreciate that the cloud-based storage system <b>318</b> may be sized up and down automatically by a monitoring module applying a predetermined set of rules that may be relatively simple of relatively complicated. In fact, the monitoring module may not only take into account the current state of the cloud-based storage system <b>318</b>, but the monitoring module may also apply predictive policies that are based on, for example, observed behavior (e.g., every night from 10 PM until 6 AM usage of the storage system is relatively light), predetermined fingerprints (e.g., every time a virtual desktop infrastructure adds 100 virtual desktops, the number of IOPS directed to the storage system increase by X), and so on. In such an example, the dynamic scaling of the cloud-based storage system <b>318</b> may be based on current performance metrics, predicted workloads, and many other factors, including combinations thereof.</p><p id="p-0143" num="0142">Readers will further appreciate that because the cloud-based storage system <b>318</b> may be dynamically scaled, the cloud-based storage system <b>318</b> may even operate in a way that is more dynamic. Consider the example of garbage collection. In a traditional storage system, the amount of storage is fixed. As such, at some point the storage system may be forced to perform garbage collection as the amount of available storage has become so constrained that the storage system is on the verge of running out of storage. In contrast, the cloud-based storage system <b>318</b> described here can always &#x2018;add&#x2019; additional storage (e.g., by adding more cloud computing instances with local storage). Because the cloud-based storage system <b>318</b> described here can always &#x2018;add&#x2019; additional storage, the cloud-based storage system <b>318</b> can make more intelligent decisions regarding when to perform garbage collection. For example, the cloud-based storage system <b>318</b> may implement a policy that garbage collection only be performed when the number of IOPS being serviced by the cloud-based storage system <b>318</b> falls below a certain level. In some embodiments, other system-level functions (e.g., deduplication, compression) may also be turned off and on in response to system load, given that the size of the cloud-based storage system <b>318</b> is not constrained in the same way that traditional storage systems are constrained.</p><p id="p-0144" num="0143">Readers will appreciate that embodiments of the present disclosure resolve an issue with block-storage services offered by some cloud computing environments as some cloud computing environments only allow for one cloud computing instance to connect to a block-storage volume at a single time. For example, in Amazon AWS, only a single EC2 instance may be connected to an EBS volume. Through the use of EC2 instances with local storage, embodiments of the present disclosure can offer multi-connect capabilities where multiple EC2 instances can connect to another EC2 instance with local storage (&#x2018;a drive instance&#x2019;). In such embodiments, the drive instances may include software executing within the drive instance that allows the drive instance to support I/O directed to a particular volume from each connected EC2 instance. As such, some embodiments of the present disclosure may be embodied as multi-connect block storage services that may not include all of the components depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>.</p><p id="p-0145" num="0144">In some embodiments, especially in embodiments where the cloud-based object storage <b>348</b> resources are embodied as Amazon S3, the cloud-based storage system <b>318</b> may include one or more modules (e.g., a module of computer program instructions executing on an EC2 instance) that are configured to ensure that when the local storage of a particular cloud computing instance is rehydrated with data from S3, the appropriate data is actually in S3. This issue arises largely because S3 implements an eventual consistency model where, when overwriting an existing object, reads of the object will eventually (but not necessarily immediately) become consistent and will eventually (but not necessarily immediately) return the overwritten version of the object. To address this issue, in some embodiments of the present disclosure, objects in S3 are never overwritten. Instead, a traditional &#x2018;overwrite&#x2019; would result in the creation of the new object (that includes the updated version of the data) and the eventual deletion of the old object (that includes the previous version of the data).</p><p id="p-0146" num="0145">In some embodiments of the present disclosure, as part of an attempt to never (or almost never) overwrite an object, when data is written to S3 the resultant object may be tagged with a sequence number. In some embodiments, these sequence numbers may be persisted elsewhere (e.g., in a database) such that at any point in time, the sequence number associated with the most up-to-date version of some piece of data can be known. In such a way, a determination can be made as to whether S3 has the most recent version of some piece of data by merely reading the sequence number associated with an object&#x2014;and without actually reading the data from S3. The ability to make this determination may be particularly important when a cloud computing instance with local storage crashes, as it would be undesirable to rehydrate the local storage of a replacement cloud computing instance with out-of-date data. In fact, because the cloud-based storage system <b>318</b> does not need to access the data to verify its validity, the data can stay encrypted and access charges can be avoided.</p><p id="p-0147" num="0146">The storage systems described above may carry out intelligent data backup techniques through which data stored in the storage system may be copied and stored in a distinct location to avoid data loss in the event of equipment failure or some other form of catastrophe. For example, the storage systems described above may be configured to examine each backup to avoid restoring the storage system to an undesirable state. Consider an example in which malware infects the storage system. In such an example, the storage system may include software resources <b>314</b> that can scan each backup to identify backups that were captured before the malware infected the storage system and those backups that were captured after the malware infected the storage system. In such an example, the storage system may restore itself from a backup that does not include the malware&#x2014;or at least not restore the portions of a backup that contained the malware. In such an example, the storage system may include software resources <b>314</b> that can scan each backup to identify the presences of malware (or a virus, or some other undesirable), for example, by identifying write operations that were serviced by the storage system and originated from a network subnet that is suspected to have delivered the malware, by identifying write operations that were serviced by the storage system and originated from a user that is suspected to have delivered the malware, by identifying write operations that were serviced by the storage system and examining the content of the write operation against fingerprints of the malware, and in many other ways.</p><p id="p-0148" num="0147">Readers will further appreciate that the backups (often in the form of one or more snapshots) may also be utilized to perform rapid recovery of the storage system. Consider an example in which the storage system is infected with ransomware that locks users out of the storage system. In such an example, software resources <b>314</b> within the storage system may be configured to detect the presence of ransomware and may be further configured to restore the storage system to a point-in-time, using the retained backups, prior to the point-in-time at which the ransomware infected the storage system. In such an example, the presence of ransomware may be explicitly detected through the use of software tools utilized by the system, through the use of a key (e.g., a USB drive) that is inserted into the storage system, or in a similar way. Likewise, the presence of ransomware may be inferred in response to system activity meeting a predetermined fingerprint such as, for example, no reads or writes coming into the system for a predetermined period of time.</p><p id="p-0149" num="0148">Readers will appreciate that the various components described above may be grouped into one or more optimized computing packages as converged infrastructures. Such converged infrastructures may include pools of computers, storage and networking resources that can be shared by multiple applications and managed in a collective manner using policy-driven processes. Such converged infrastructures may be implemented with a converged infrastructure reference architecture, with standalone appliances, with a software driven hyper-converged approach (e.g., hyper-converged infrastructures), or in other ways.</p><p id="p-0150" num="0149">Readers will appreciate that the storage systems described above may be useful for supporting various types of software applications. For example, the storage system <b>306</b> may be useful in supporting artificial intelligence (&#x2018;AI&#x2019;) applications, database applications, DevOps projects, electronic design automation tools, event-driven software applications, high performance computing applications, simulation applications, high-speed data capture and analysis applications, machine learning applications, media production applications, media serving applications, picture archiving and communication systems (&#x2018;PACS&#x2019;) applications, software development applications, virtual reality applications, augmented reality applications, and many other types of applications by providing storage resources to such applications.</p><p id="p-0151" num="0150">The storage systems described above may operate to support a wide variety of applications. In view of the fact that the storage systems include compute resources, storage resources, and a wide variety of other resources, the storage systems may be well suited to support applications that are resource intensive such as, for example, AI applications. AI applications may be deployed in a variety of fields, including: predictive maintenance in manufacturing and related fields, healthcare applications such as patient data &#x26; risk analytics, retail and marketing deployments (e.g., search advertising, social media advertising), supply chains solutions, fintech solutions such as business analytics &#x26; reporting tools, operational deployments such as real-time analytics tools, application performance management tools, IT infrastructure management tools, and many others.</p><p id="p-0152" num="0151">Such AI applications may enable devices to perceive their environment and take actions that maximize their chance of success at some goal. Examples of such AI applications can include IBM Watson, Microsoft Oxford, Google DeepMind, Baidu Minwa, and others. The storage systems described above may also be well suited to support other types of applications that are resource intensive such as, for example, machine learning applications. Machine learning applications may perform various types of data analysis to automate analytical model building. Using algorithms that iteratively learn from data, machine learning applications can enable computers to learn without being explicitly programmed. One particular area of machine learning is referred to as reinforcement learning, which involves taking suitable actions to maximize reward in a particular situation. Reinforcement learning may be employed to find the best possible behavior or path that a particular software application or machine should take in a specific situation. Reinforcement learning differs from other areas of machine learning (e.g., supervised learning, unsupervised learning) in that correct input/output pairs need not be presented for reinforcement learning and sub-optimal actions need not be explicitly corrected.</p><p id="p-0153" num="0152">In addition to the resources already described, the storage systems described above may also include graphics processing units (GPUs&#x2032;), occasionally referred to as visual processing unit (&#x2018;VPUs&#x2019;). Such GPUs may be embodied as specialized electronic circuits that rapidly manipulate and alter memory to accelerate the creation of images in a frame buffer intended for output to a display device. Such GPUs may be included within any of the computing devices that are part of the storage systems described above, including as one of many individually scalable components of a storage system, where other examples of individually scalable components of such storage system can include storage components, memory components, compute components (e.g., CPUs, FPGAs, ASICs), networking components, software components, and others. In addition to GPUs, the storage systems described above may also include neural network processors (&#x2018;NNPs&#x2019;) for use in various aspects of neural network processing. Such NNPs may be used in place of (or in addition to) GPUs and may also be independently scalable.</p><p id="p-0154" num="0153">As described above, the storage systems described herein may be configured to support artificial intelligence applications, machine learning applications, big data analytics applications, and many other types of applications. The rapid growth in these sort of applications is being driven by three technologies: deep learning (DL), GPU processors, and Big Data. Deep learning is a computing model that makes use of massively parallel neural networks inspired by the human brain. Instead of experts handcrafting software, a deep learning model writes its own software by learning from lots of examples. Such GPUs may include thousands of cores that are well-suited to run algorithms that loosely represent the parallel nature of the human brain.</p><p id="p-0155" num="0154">Advances in deep neural networks have ignited a new wave of algorithms and tools for data scientists to tap into their data with artificial intelligence (AI). With improved algorithms, larger data sets, and various frameworks (including open-source software libraries for machine learning across a range of tasks), data scientists are tackling new use cases like autonomous driving vehicles, natural language processing and understanding, computer vision, machine reasoning, strong AI, and many others. Applications of such techniques may include: machine and vehicular object detection, identification and avoidance; visual recognition, classification and tagging; algorithmic financial trading strategy performance management; simultaneous localization and mapping; predictive maintenance of high-value machinery; prevention against cyber security threats, expertise automation; image recognition and classification; question answering; robotics; text analytics (extraction, classification) and text generation and translation; and many others. Applications of AI techniques has materialized in a wide array of products include, for example, Amazon Echo's speech recognition technology that allows users to talk to their machines, Google Translate&#x2122; which allows for machine-based language translation, Spotify's Discover Weekly that provides recommendations on new songs and artists that a user may like based on the user's usage and traffic analysis, Quill's text generation offering that takes structured data and turns it into narrative stories, Chatbots that provide real-time, contextually specific answers to questions in a dialog format, and many others.</p><p id="p-0156" num="0155">Data is the heart of modern AI and deep learning algorithms. Before training can begin, one problem that must be addressed revolves around collecting the labeled data that is crucial for training an accurate AI model. A full scale AI deployment may be required to continuously collect, clean, transform, label, and store large amounts of data. Adding additional high quality data points directly translates to more accurate models and better insights. Data samples may undergo a series of processing steps including, but not limited to: 1) ingesting the data from an external source into the training system and storing the data in raw form, 2) cleaning and transforming the data in a format convenient for training, including linking data samples to the appropriate label, 3) exploring parameters and models, quickly testing with a smaller dataset, and iterating to converge on the most promising models to push into the production cluster, 4) executing training phases to select random batches of input data, including both new and older samples, and feeding those into production GPU servers for computation to update model parameters, and 5) evaluating including using a holdback portion of the data not used in training in order to evaluate model accuracy on the holdout data. This lifecycle may apply for any type of parallelized machine learning, not just neural networks, or deep learning. For example, standard machine learning frameworks may rely on CPUs instead of GPUs but the data ingest and training workflows may be the same. Readers will appreciate that a single shared storage data hub creates a coordination point throughout the lifecycle without the need for extra data copies among the ingest, preprocessing, and training stages. Rarely is the ingested data used for only one purpose, and shared storage gives the flexibility to train multiple different models or apply traditional analytics to the data.</p><p id="p-0157" num="0156">Readers will appreciate that each stage in the AI data pipeline may have varying requirements from the data hub (e.g., the storage system or collection of storage systems). Scale-out storage systems must deliver uncompromising performance for all manner of access types and patterns&#x2014;from small, metadata-heavy to large files, from random to sequential access patterns, and from low to high concurrency. The storage systems described above may serve as an ideal AI data hub as the systems may service unstructured workloads. In the first stage, data is ideally ingested and stored on to the same data hub that following stages will use, in order to avoid excess data copying. The next two steps can be done on a standard compute server that optionally includes a GPU, and then in the fourth and last stage, full training production jobs are run on powerful GPU-accelerated servers. Often, there is a production pipeline alongside an experimental pipeline operating on the same dataset. Further, the GPU-accelerated servers can be used independently for different models or joined together to train on one larger model, even spanning multiple systems for distributed training. If the shared storage tier is slow, then data must be copied to local storage for each phase, resulting in wasted time staging data onto different servers. The ideal data hub for the AI training pipeline delivers performance similar to data stored locally on the server node while also having the simplicity and performance to enable all pipeline stages to operate concurrently.</p><p id="p-0158" num="0157">Although the preceding paragraphs discuss deep learning applications, readers will appreciate that the storage systems described herein may also be part of a distributed deep learning (&#x2018;DDL&#x2019;) platform to support the execution of DDL algorithms. The storage systems described above may also be paired with other technologies such as TensorFlow, an open-source software library for dataflow programming across a range of tasks that may be used for machine learning applications such as neural networks, to facilitate the development of such machine learning models, applications, and so on.</p><p id="p-0159" num="0158">The storage systems described above may also be used in a neuromorphic computing environment. Neuromorphic computing is a form of computing that mimics brain cells. To support neuromorphic computing, an architecture of interconnected &#x201c;neurons&#x201d; replace traditional computing models with low-powered signals that go directly between neurons for more efficient computation. Neuromorphic computing may make use of very-large-scale integration (VLSI) systems containing electronic analog circuits to mimic neuro-biological architectures present in the nervous system, as well as analog, digital, mixed-mode analog/digital VLSI, and software systems that implement models of neural systems for perception, motor control, or multisensory integration.</p><p id="p-0160" num="0159">Readers will appreciate that the storage systems described above may be configured to support the storage or use of (among other types of data) blockchains. In addition to supporting the storage and use of blockchain technologies, the storage systems described above may also support the storage and use of derivative items such as, for example, open source blockchains and related tools that are part of the IBM&#x2032; Hyperledger project, permissioned blockchains in which a certain number of trusted parties are allowed to access the block chain, blockchain products that enable developers to build their own distributed ledger projects, and others. Blockchains and the storage systems described herein may be leveraged to support on-chain storage of data as well as off-chain storage of data.</p><p id="p-0161" num="0160">Off-chain storage of data can be implemented in a variety of ways and can occur when the data itself is not stored within the blockchain. For example, in one embodiment, a hash function may be utilized and the data itself may be fed into the hash function to generate a hash value. In such an example, the hashes of large pieces of data may be embedded within transactions, instead of the data itself. Readers will appreciate that, in other embodiments, alternatives to blockchains may be used to facilitate the decentralized storage of information. For example, one alternative to a blockchain that may be used is a blockweave. While conventional blockchains store every transaction to achieve validation, a blockweave permits secure decentralization without the usage of the entire chain, thereby enabling low cost on-chain storage of data. Such blockweaves may utilize a consensus mechanism that is based on proof of access (PoA) and proof of work (PoW).</p><p id="p-0162" num="0161">The storage systems described above may, either alone or in combination with other computing devices, be used to support in-memory computing applications. In-memory computing involves the storage of information in RAM that is distributed across a cluster of computers. Readers will appreciate that the storage systems described above, especially those that are configurable with customizable amounts of processing resources, storage resources, and memory resources (e.g., those systems in which blades that contain configurable amounts of each type of resource), may be configured in a way so as to provide an infrastructure that can support in-memory computing. Likewise, the storage systems described above may include component parts (e.g., NVDIMMs, 3D crosspoint storage that provide fast random access memory that is persistent) that can actually provide for an improved in-memory computing environment as compared to in-memory computing environments that rely on RAM distributed across dedicated servers.</p><p id="p-0163" num="0162">In some embodiments, the storage systems described above may be configured to operate as a hybrid in-memory computing environment that includes a universal interface to all storage media (e.g., RAM, flash storage, 3D crosspoint storage). In such embodiments, users may have no knowledge regarding the details of where their data is stored but they can still use the same full, unified API to address data. In such embodiments, the storage system may (in the background) move data to the fastest layer available&#x2014;including intelligently placing the data in dependence upon various characteristics of the data or in dependence upon some other heuristic. In such an example, the storage systems may even make use of existing products such as Apache Ignite and GridGain to move data between the various storage layers, or the storage systems may make use of custom software to move data between the various storage layers. The storage systems described herein may implement various optimizations to improve the performance of in-memory computing such as, for example, having computations occur as close to the data as possible.</p><p id="p-0164" num="0163">Readers will further appreciate that in some embodiments, the storage systems described above may be paired with other resources to support the applications described above. For example, one infrastructure could include primary compute in the form of servers and workstations which specialize in using General-purpose computing on graphics processing units (&#x2018;GPGPU&#x2019;) to accelerate deep learning applications that are interconnected into a computation engine to train parameters for deep neural networks. Each system may have Ethernet external connectivity, InfiniBand external connectivity, some other form of external connectivity, or some combination thereof. In such an example, the GPUs can be grouped for a single large training or used independently to train multiple models. The infrastructure could also include a storage system such as those described above to provide, for example, a scale-out all-flash file or object store through which data can be accessed via high-performance protocols such as NFS, S3, and so on. The infrastructure can also include, for example, redundant top-of-rack Ethernet switches connected to storage and compute via ports in MLAG port channels for redundancy. The infrastructure could also include additional compute in the form of whitebox servers, optionally with GPUs, for data ingestion, pre-processing, and model debugging. Readers will appreciate that additional infrastructures are also be possible.</p><p id="p-0165" num="0164">Readers will appreciate that the storage systems described above, either alone or in coordination with other computing machinery may be configured to support other AI related tools. For example, the storage systems may make use of tools like ONXX or other open neural network exchange formats that make it easier to transfer models written in different AI frameworks. Likewise, the storage systems may be configured to support tools like Amazon's Gluon that allow developers to prototype, build, and train deep learning models. In fact, the storage systems described above may be part of a larger platform, such as IBM&#x2032; Cloud Private for Data, that includes integrated data science, data engineering and application building services.</p><p id="p-0166" num="0165">Readers will further appreciate that the storage systems described above may also be deployed as an edge solution. Such an edge solution may be in place to optimize cloud computing systems by performing data processing at the edge of the network, near the source of the data. Edge computing can push applications, data, and computing power (i.e., services) away from centralized points to the logical extremes of a network. Through the use of edge solutions such as the storage systems described above, computational tasks may be performed using the compute resources provided by such storage systems, data may be storage using the storage resources of the storage system, and cloud-based services may be accessed through the use of various resources of the storage system (including networking resources). By performing computational tasks on the edge solution, storing data on the edge solution, and generally making use of the edge solution, the consumption of expensive cloud-based resources may be avoided and, in fact, performance improvements may be experienced relative to a heavier reliance on cloud-based resources.</p><p id="p-0167" num="0166">While many tasks may benefit from the utilization of an edge solution, some particular uses may be especially suited for deployment in such an environment. For example, devices like drones, autonomous cars, robots, and others may require extremely rapid processing&#x2014;so fast, in fact, that sending data up to a cloud environment and back to receive data processing support may simply be too slow. As an additional example, some IoT devices such as connected video cameras may not be well-suited for the utilization of cloud-based resources as it may be impractical (not only from a privacy perspective, security perspective, or a financial perspective) to send the data to the cloud simply because of the pure volume of data that is involved. As such, many tasks that really on data processing, storage, or communications may be better suited by platforms that include edge solutions such as the storage systems described above.</p><p id="p-0168" num="0167">The storage systems described above may alone, or in combination with other computing resources, serves as a network edge platform that combines compute resources, storage resources, networking resources, cloud technologies and network virtualization technologies, and so on. As part of the network, the edge may take on characteristics similar to other network facilities, from the customer premise and backhaul aggregation facilities to Points of Presence (PoPs) and regional data centers. Readers will appreciate that network workloads, such as Virtual Network Functions (VNFs) and others, will reside on the network edge platform. Enabled by a combination of containers and virtual machines, the network edge platform may rely on controllers and schedulers that are no longer geographically co-located with the data processing resources. The functions, as microservices, may split into control planes, user, and data planes, or even state machines, allowing for independent optimization and scaling techniques to be applied. Such user and data planes may be enabled through increased accelerators, both those residing in server platforms, such as FPGAs and Smart NICs, and through SDN-enabled merchant silicon and programmable ASICs.</p><p id="p-0169" num="0168">The storage systems described above may also be optimized for use in big data analytics. Big data analytics may be generally described as the process of examining large and varied data sets to uncover hidden patterns, unknown correlations, market trends, customer preferences and other useful information that can help organizations make more-informed business decisions. As part of that process, semi-structured and unstructured data such as, for example, internet clickstream data, web server logs, social media content, text from customer emails and survey responses, mobile-phone call-detail records, IoT sensor data, and other data may be converted to a structured form.</p><p id="p-0170" num="0169">The storage systems described above may also support (including implementing as a system interface) applications that perform tasks in response to human speech. For example, the storage systems may support the execution intelligent personal assistant applications such as, for example, Amazon's Alexa, Apple Siri, Google Voice, Samsung Bixby, Microsoft Cortana, and others. While the examples described in the previous sentence make use of voice as input, the storage systems described above may also support chatbots, talkbots, chatterbots, or artificial conversational entities or other applications that are configured to conduct a conversation via auditory or textual methods. Likewise, the storage system may actually execute such an application to enable a user such as a system administrator to interact with the storage system via speech. Such applications are generally capable of voice interaction, music playback, making to-do lists, setting alarms, streaming podcasts, playing audiobooks, and providing weather, traffic, and other real time information, such as news, although in embodiments in accordance with the present disclosure, such applications may be utilized as interfaces to various system management operations.</p><p id="p-0171" num="0170">The storage systems described above may also implement AI platforms for delivering on the vision of self-driving storage. Such AI platforms may be configured to deliver global predictive intelligence by collecting and analyzing large amounts of storage system telemetry data points to enable effortless management, analytics, and support. In fact, such storage systems may be capable of predicting both capacity and performance, as well as generating intelligent advice on workload deployment, interaction, and optimization. Such AI platforms may be configured to scan all incoming storage system telemetry data against a library of issue fingerprints to predict and resolve incidents in real-time, before they impact customer environments, and captures hundreds of variables related to performance that are used to forecast performance load.</p><p id="p-0172" num="0171">The storage systems described above may support the serialized or simultaneous execution of artificial intelligence applications, machine learning applications, data analytics applications, data transformations, and other tasks that collectively may form an AI ladder. Such an AI ladder may effectively be formed by combining such elements to form a complete data science pipeline, where exist dependencies between elements of the AI ladder. For example, AI may require that some form of machine learning has taken place, machine learning may require that some form of analytics has taken place, analytics may require that some form of data and information architecting has taken place, and so on. As such, each element may be viewed as a rung in an AI ladder that collectively can form a complete and sophisticated AI solution.</p><p id="p-0173" num="0172">The storage systems described above may also, either alone or in combination with other computing environments, be used to deliver an AI everywhere experience where AI permeates wide and expansive aspects of business and life. For example, AI may play an important role in the delivery of deep learning solutions, deep reinforcement learning solutions, artificial general intelligence solutions, autonomous vehicles, cognitive computing solutions, commercial UAVs or drones, conversational user interfaces, enterprise taxonomies, ontology management solutions, machine learning solutions, smart dust, smart robots, smart workplaces, and many others.</p><p id="p-0174" num="0173">The storage systems described above may also, either alone or in combination with other computing environments, be used to deliver a wide range of transparently immersive experiences (including those that use digital twins of various &#x201c;things&#x201d; such as people, places, processes, systems, and so on) where technology can introduce transparency between people, businesses, and things. Such transparently immersive experiences may be delivered as augmented reality technologies, connected homes, virtual reality technologies, brain&#x2014;computer interfaces, human augmentation technologies, nanotube electronics, volumetric displays, 4D printing technologies, or others.</p><p id="p-0175" num="0174">The storage systems described above may also, either alone or in combination with other computing environments, be used to support a wide variety of digital platforms. Such digital platforms can include, for example, 5G wireless systems and platforms, digital twin platforms, edge computing platforms, IoT platforms, quantum computing platforms, serverless PaaS, software-defined security, neuromorphic computing platforms, and so on.</p><p id="p-0176" num="0175">The storage systems described above may also be part of a multi-cloud environment in which multiple cloud computing and storage services are deployed in a single heterogeneous architecture. In order to facilitate the operation of such a multi-cloud environment, DevOps tools may be deployed to enable orchestration across clouds. Likewise, continuous development and continuous integration tools may be deployed to standardize processes around continuous integration and delivery, new feature rollout and provisioning cloud workloads. By standardizing these processes, a multi-cloud strategy may be implemented that enables the utilization of the best provider for each workload.</p><p id="p-0177" num="0176">The storage systems described above may be used as a part of a platform to enable the use of crypto-anchors that may be used to authenticate a product's origins and contents to ensure that it matches a blockchain record associated with the product. Similarly, as part of a suite of tools to secure data stored on the storage system, the storage systems described above may implement various encryption technologies and schemes, including lattice cryptography. Lattice cryptography can involve constructions of cryptographic primitives that involve lattices, either in the construction itself or in the security proof. Unlike public-key schemes such as the RSA, Diffie-Hellman, or Elliptic-Curve cryptosystems, which are easily attacked by a quantum computer, some lattice-based constructions appear to be resistant to attack by both classical and quantum computers.</p><p id="p-0178" num="0177">A quantum computer is a device that performs quantum computing. Quantum computing is computing using quantum-mechanical phenomena, such as superposition and entanglement. Quantum computers differ from traditional computers that are based on transistors, as such traditional computers require that data be encoded into binary digits (bits), each of which is always in one of two definite states (0 or 1). In contrast to traditional computers, quantum computers use quantum bits, which can be in superpositions of states. A quantum computer maintains a sequence of qubits, where a single qubit can represent a one, a zero, or any quantum superposition of those two qubit states. A pair of qubits can be in any quantum superposition of 4 states, and three qubits in any superposition of 8 states. A quantum computer with n qubits can generally be in an arbitrary superposition of up to 2{circumflex over (&#x2003;)}n different states simultaneously, whereas a traditional computer can only be in one of these states at any one time. A quantum Turing machine is a theoretical model of such a computer.</p><p id="p-0179" num="0178">The storage systems described above may also be paired with FPGA-accelerated servers as part of a larger AI or ML infrastructure. Such FPGA-accelerated servers may reside near (e.g., in the same data center) the storage systems described above or even incorporated into an appliance that includes one or more storage systems, one or more FPGA-accelerated servers, networking infrastructure that supports communications between the one or more storage systems and the one or more FPGA-accelerated servers, as well as other hardware and software components. Alternatively, FPGA-accelerated servers may reside within a cloud computing environment that may be used to perform compute-related tasks for AI and ML jobs. Any of the embodiments described above may be used to collectively serve as a FPGA-based AI or ML platform. Readers will appreciate that, in some embodiments of the FPGA-based AI or ML platform, the FPGAs that are contained within the FPGA-accelerated servers may be reconfigured for different types of ML models (e.g., LSTMs, CNNs, GRUs). The ability to reconfigure the FPGAs that are contained within the FPGA-accelerated servers may enable the acceleration of a ML or AI application based on the most optimal numerical precision and memory model being used. Readers will appreciate that by treating the collection of FPGA-accelerated servers as a pool of FPGAs, any CPU in the data center may utilize the pool of FPGAs as a shared hardware microservice, rather than limiting a server to dedicated accelerators plugged into it.</p><p id="p-0180" num="0179">The FPGA-accelerated servers and the GPU-accelerated servers described above may implement a model of computing where, rather than keeping a small amount of data in a CPU and running a long stream of instructions over it as occurred in more traditional computing models, the machine learning model and parameters are pinned into the high-bandwidth on-chip memory with lots of data streaming though the high-bandwidth on-chip memory. FPGAs may even be more efficient than GPUs for this computing model, as the FPGAs can be programmed with only the instructions needed to run this kind of computing model.</p><p id="p-0181" num="0180">The storage systems described above may be configured to provide parallel storage, for example, through the use of a parallel file system such as BeeGFS. Such parallel files systems may include a distributed metadata architecture. For example, the parallel file system may include a plurality of metadata servers across which metadata is distributed, as well as components that include services for clients and storage servers.</p><p id="p-0182" num="0181">The systems described above can support the execution of a wide array of software applications. Such software applications can be deployed in a variety of ways, including container-based deployment models. Containerized applications may be managed using a variety of tools. For example, containerized applications may be managed using Docker Swarm, Kubernetes, and others. Containerized applications may be used to facilitate a serverless, cloud native computing deployment and management model for software applications. In support of a serverless, cloud native computing deployment and management model for software applications, containers may be used as part of an event handling mechanisms (e.g., AWS Lambdas) such that various events cause a containerized application to be spun up to operate as an event handler.</p><p id="p-0183" num="0182">The systems described above may be deployed in a variety of ways, including being deployed in ways that support fifth generation (&#x2018;5G&#x2019;) networks. 5G networks may support substantially faster data communications than previous generations of mobile communications networks and, as a consequence may lead to the disaggregation of data and computing resources as modern massive data centers may become less prominent and may be replaced, for example, by more-local, micro data centers that are close to the mobile-network towers. The systems described above may be included in such local, micro data centers and may be part of or paired to multi-access edge computing (&#x2018;MEC&#x2019;) systems. Such MEC systems may enable cloud computing capabilities and an IT service environment at the edge of the cellular network. By running applications and performing related processing tasks closer to the cellular customer, network congestion may be reduced and applications may perform better.</p><p id="p-0184" num="0183">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> illustrates an exemplary computing device <b>350</b> that may be specifically configured to perform one or more of the processes described herein. As shown in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, computing device <b>350</b> may include a communication interface <b>352</b>, a processor <b>354</b>, a storage device <b>356</b>, and an input/output (&#x201c;I/O&#x201d;) module <b>358</b> communicatively connected one to another via a communication infrastructure <b>360</b>. While an exemplary computing device <b>350</b> is shown in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, the components illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> are not intended to be limiting. Additional or alternative components may be used in other embodiments. Components of computing device <b>350</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> will now be described in additional detail.</p><p id="p-0185" num="0184">Communication interface <b>352</b> may be configured to communicate with one or more computing devices. Examples of communication interface <b>352</b> include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, an audio/video connection, and any other suitable interface.</p><p id="p-0186" num="0185">Processor <b>354</b> generally represents any type or form of processing unit capable of processing data and/or interpreting, executing, and/or directing execution of one or more of the instructions, processes, and/or operations described herein. Processor <b>354</b> may perform operations by executing computer-executable instructions <b>362</b> (e.g., an application, software, code, and/or other executable data instance) stored in storage device <b>356</b>.</p><p id="p-0187" num="0186">Storage device <b>356</b> may include one or more data storage media, devices, or configurations and may employ any type, form, and combination of data storage media and/or device. For example, storage device <b>356</b> may include, but is not limited to, any combination of the non-volatile media and/or volatile media described herein. Electronic data, including data described herein, may be temporarily and/or permanently stored in storage device <b>356</b>. For example, data representative of computer-executable instructions <b>362</b> configured to direct processor <b>354</b> to perform any of the operations described herein may be stored within storage device <b>356</b>. In some examples, data may be arranged in one or more databases residing within storage device <b>356</b>.</p><p id="p-0188" num="0187">I/O module <b>358</b> may include one or more I/O modules configured to receive user input and provide user output. I/O module <b>358</b> may include any hardware, firmware, software, or combination thereof supportive of input and output capabilities. For example, I/O module <b>358</b> may include hardware and/or software for capturing user input, including, but not limited to, a keyboard or keypad, a touchscreen component (e.g., touchscreen display), a receiver (e.g., an RF or infrared receiver), motion sensors, and/or one or more input buttons.</p><p id="p-0189" num="0188">I/O module <b>358</b> may include one or more devices for presenting output to a user, including, but not limited to, a graphics engine, a display (e.g., a display screen), one or more output drivers (e.g., display drivers), one or more audio speakers, and one or more audio drivers. In certain embodiments, I/O module <b>358</b> is configured to provide graphical data to a display for presentation to a user. The graphical data may be representative of one or more graphical user interfaces and/or any other graphical content as may serve a particular implementation. In some examples, any of the systems, computing devices, and/or other components described herein may be implemented by computing device <b>350</b>.</p><p id="p-0190" num="0189">For further explanation, <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> sets forth a block diagram illustrating a plurality of storage systems (<b>402</b>, <b>404</b>, <b>406</b>) that support a pod according to some embodiments of the present disclosure. Although depicted in less detail, the storage systems (<b>402</b>, <b>404</b>, <b>406</b>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref>, <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref>, <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>B</figref>, or any combination thereof. In fact, the storage systems (<b>402</b>, <b>404</b>, <b>406</b>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> may include the same, fewer, or additional components as the storage systems described above.</p><p id="p-0191" num="0190">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, each of the storage systems (<b>402</b>, <b>404</b>, <b>406</b>) is depicted as having at least one computer processor (<b>408</b>, <b>410</b>, <b>412</b>), computer memory (<b>414</b>, <b>416</b>, <b>418</b>), and computer storage (<b>420</b>, <b>422</b>, <b>424</b>). Although in some embodiments the computer memory (<b>414</b>, <b>416</b>, <b>418</b>) and the computer storage (<b>420</b>, <b>422</b>, <b>424</b>) may be part of the same hardware devices, in other embodiments the computer memory (<b>414</b>, <b>416</b>, <b>418</b>) and the computer storage (<b>420</b>, <b>422</b>, <b>424</b>) may be part of different hardware devices. The distinction between the computer memory (<b>414</b>, <b>416</b>, <b>418</b>) and the computer storage (<b>420</b>, <b>422</b>, <b>424</b>) in this particular example may be that the computer memory (<b>414</b>, <b>416</b>, <b>418</b>) is physically proximate to the computer processors (<b>408</b>, <b>410</b>, <b>412</b>) and may store computer program instructions that are executed by the computer processors (<b>408</b>, <b>410</b>, <b>412</b>), while the computer storage (<b>420</b>, <b>422</b>, <b>424</b>) is embodied as non-volatile storage for storing user data, metadata describing the user data, and so on. Referring to the example above in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, for example, the computer processors (<b>408</b>, <b>410</b>, <b>412</b>) and computer memory (<b>414</b>, <b>416</b>, <b>418</b>) for a particular storage system (<b>402</b>, <b>404</b>, <b>406</b>) may reside within one of more of the controllers (<b>110</b>A-<b>110</b>D) while the attached storage devices (<b>171</b>A-<b>171</b>F) may serve as the computer storage (<b>420</b>, <b>422</b>, <b>424</b>) within a particular storage system (<b>402</b>, <b>404</b>, <b>406</b>).</p><p id="p-0192" num="0191">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may attach to one or more pods (<b>430</b>, <b>432</b>) according to some embodiments of the present disclosure. Each of the pods (<b>430</b>, <b>432</b>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> can include a dataset (<b>426</b>, <b>428</b>). For example, a first pod (<b>430</b>) that three storage systems (<b>402</b>, <b>404</b>, <b>406</b>) have attached to includes a first dataset (<b>426</b>) while a second pod (<b>432</b>) that two storage systems (<b>404</b>, <b>406</b>) have attached to includes a second dataset (<b>428</b>). In such an example, when a particular storage system attaches to a pod, the pod's dataset is copied to the particular storage system and then kept up to date as the dataset is modified. Storage systems can be removed from a pod, resulting in the dataset being no longer kept up to date on the removed storage system. In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, any storage system which is active for a pod (it is an up-to-date, operating, non-faulted member of a non-faulted pod) can receive and process requests to modify or read the pod's dataset.</p><p id="p-0193" num="0192">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, each pod (<b>430</b>, <b>432</b>) may also include a set of managed objects and management operations, as well as a set of access operations to modify or read the dataset (<b>426</b>, <b>428</b>) that is associated with the particular pod (<b>430</b>, <b>432</b>). In such an example, the management operations may modify or query managed objects equivalently through any of the storage systems. Likewise, access operations to read or modify the dataset may operate equivalently through any of the storage systems. In such an example, while each storage system stores a separate copy of the dataset as a proper subset of the datasets stored and advertised for use by the storage system, the operations to modify managed objects or the dataset performed and completed through any one storage system are reflected in subsequent management objects to query the pod or subsequent access operations to read the dataset.</p><p id="p-0194" num="0193">Readers will appreciate that pods may implement more capabilities than just a clustered synchronously replicated dataset. For example, pods can be used to implement tenants, whereby datasets are in some way securely isolated from each other. Pods can also be used to implement virtual arrays or virtual storage systems where each pod is presented as a unique storage entity on a network (e.g., a Storage Area Network, or Internet Protocol network) with separate addresses. In the case of a multi-storage-system pod implementing a virtual storage system, all physical storage systems associated with the pod may present themselves as in some way the same storage system (e.g., as if the multiple physical storage systems were no different than multiple network ports into a single storage system).</p><p id="p-0195" num="0194">Readers will appreciate that pods may also be units of administration, representing a collection of volumes, file systems, object/analytic stores, snapshots, and other administrative entities, where making administrative changes (e.g., name changes, property changes, managing exports or permissions for some part of the pod's dataset), on any one storage system is automatically reflected to all active storage systems associated with the pod. In addition, pods could also be units of data collection and data analysis, where performance and capacity metrics are presented in ways that aggregate across all active storage systems for the pod, or that call out data collection and analysis separately for each pod, or perhaps presenting each attached storage system's contribution to the incoming content and performance for each a pod.</p><p id="p-0196" num="0195">One model for pod membership may be defined as a list of storage systems, and a subset of that list where storage systems are considered to be in-sync for the pod. A storage system may be considered to be in-sync for a pod if it is at least within a recovery of having identical idle content for the last written copy of the dataset associated with the pod. Idle content is the content after any in-progress modifications have completed with no processing of new modifications. Sometimes this is referred to as &#x201c;crash recoverable&#x201d; consistency. Recovery of a pod carries out the process of reconciling differences in applying concurrent updates to in-sync storage systems in the pod. Recovery can resolve any inconsistencies between storage systems in the completion of concurrent modifications that had been requested to various members of the pod but that were not signaled to any requestor as having completed successfully. Storage systems that are listed as pod members but that are not listed as in-sync for the pod can be described as &#x201c;detached&#x201d; from the pod. Storage systems that are listed as pod members, are in-sync for the pod, and are currently available for actively serving data for the pod are &#x201c;online&#x201d; for the pod.</p><p id="p-0197" num="0196">Each storage system member of a pod may have its own copy of the membership, including which storage systems it last knew were in-sync, and which storage systems it last knew comprised the entire set of pod members. To be online for a pod, a storage system must consider itself to be in-sync for the pod and must be communicating with all other storage systems it considers to be in-sync for the pod. If a storage system can't be certain that it is in-sync and communicating with all other storage systems that are in-sync, then it must stop processing new incoming requests for the pod (or must complete them with an error or exception) until it can be certain that it is in-sync and communicating with all other storage systems that are in-sync. A first storage system may conclude that a second paired storage system should be detached, which will allow the first storage system to continue since it is now in-sync with all storage systems now in the list. But, the second storage system must be prevented from concluding, alternatively, that the first storage system should be detached and with the second storage system continuing operation. This would result in a &#x201c;split brain&#x201d; condition that can lead to irreconcilable datasets, dataset corruption, or application corruption, among other dangers.</p><p id="p-0198" num="0197">The situation of needing to determine how to proceed when not communicating with paired storage systems can arise while a storage system is running normally and then notices lost communications, while it is currently recovering from some previous fault, while it is rebooting or resuming from a temporary power loss or recovered communication outage, while it is switching operations from one set of storage system controller to another set for whatever reason, or during or after any combination of these or other kinds of events. In fact, any time a storage system that is associated with a pod can't communicate with all known non-detached members, the storage system can either wait briefly until communications can be established, go offline and continue waiting, or it can determine through some means that it is safe to detach the non-communicating storage system without risk of incurring a split brain due to the non-communicating storage system concluding the alternative view, and then continue. If a safe detach can happen quickly enough, the storage system can remain online for the pod with little more than a short delay and with no resulting application outages for applications that can issue requests to the remaining online storage systems.</p><p id="p-0199" num="0198">One example of this situation is when a storage system may know that it is out-of-date. That can happen, for example, when a first storage system is first added to a pod that is already associated with one or more storage systems, or when a first storage system reconnects to another storage system and finds that the other storage system had already marked the first storage system as detached. In this case, this first storage system will simply wait until it connects to some other set of storage systems that are in-sync for the pod.</p><p id="p-0200" num="0199">This model demands some degree of consideration for how storage systems are added to or removed from pods or from the in-sync pod members list. Since each storage system will have its own copy of the list, and since two independent storage systems can't update their local copy at exactly the same time, and since the local copy is all that is available on a reboot or in various fault scenarios, care must be taken to ensure that transient inconsistencies don't cause problems. For example, if one storage systems is in-sync for a pod and a second storage system is added, then if the second storage system is updated to list both storage systems as in-sync first, then if there is a fault and a restart of both storage systems, the second might startup and wait to connect to the first storage system while the first might be unaware that it should or could wait for the second storage system. If the second storage system then responds to an inability to connect with the first storage system by going through a process to detach it, then it might succeed in completing a process that the first storage system is unaware of, resulting in a split brain. As such, it may be necessary to ensure that storage systems won't disagree inappropriately on whether they might opt to go through a detach process if they aren't communicating.</p><p id="p-0201" num="0200">One way to ensure that storage systems won't disagree inappropriately on whether they might opt to go through a detach process if they aren't communicating is to ensure that when adding a new storage system to the in-sync member list for a pod, the new storage system first stores that it is a detached member (and perhaps that it is being added as an in-sync member). Then, the existing in-sync storage systems can locally store that the new storage system is an in-sync pod member before the new storage system locally stores that same fact. If there is a set of reboots or network outages prior to the new storage system storing its in-sync status, then the original storage systems may detach the new storage system due to non-communication, but the new storage system will wait. A reverse version of this change might be needed for removing a communicating storage system from a pod: first the storage system being removed stores that it is no longer in-sync, then the storage systems that will remain store that the storage system being removed is no longer in-sync, then all storage systems delete the storage system being removed from their pod membership lists. Depending on the implementation, an intermediate persisted detached state may not be necessary. Whether or not care is required in local copies of membership lists may depend on the model storage systems use for monitoring each other or for validating their membership. If a consensus model is used for both, or if an external system (or an external distributed or clustered system) is used to store and validate pod membership, then inconsistencies in locally stored membership lists may not matter.</p><p id="p-0202" num="0201">When communications fail or one or several storage systems in a pod fail, or when a storage system starts up (or fails over to a secondary controller) and can't communicate with paired storage systems for a pod, and it is time for one or more storage systems to decide to detach one or more paired storage systems, some algorithm or mechanism must be employed to decide that it is safe to do so and to follow through on the detach. One means of resolving detaches is use a majority (or quorum) model for membership. With three storage systems, as long as two are communicating, they can agree to detach a third storage system that isn't communicating, but that third storage system cannot by itself choose to detach either of the other two. Confusion can arise when storage system communication is inconsistent. For example, storage system A might be communicating with storage system B but not C, while storage system B might be communicating with both A and C. So, A and B could detach C, or B and C could detach A, but more communication between pod members may be needed to figure this out.</p><p id="p-0203" num="0202">Care needs to be taken in a quorum membership model when adding and removing storage systems. For example, if a fourth storage system is added, then a &#x201c;majority&#x201d; of storage systems is at that point three. The transition from three storage systems (with two required for majority) to a pod including a fourth storage system (with three required for majority) may require something similar to the model described previously for carefully adding a storage system to the in-sync list. For example, the fourth storage system might start in an attaching state but not yet attached where it would never instigate a vote over quorum. Once in that state, the original three pod members could each be updated to be aware of the fourth member and the new requirement for a three storage system majority to detach a fourth. Removing a storage system from a pod might similarly move that storage system to a locally stored &#x201c;detaching&#x201d; state before updating other pod members. A variant scheme for this is to use a distributed consensus mechanism such as PAXOS or RAFT to implement any membership changes or to process detach requests.</p><p id="p-0204" num="0203">Another means of managing membership transitions is to use an external system that is outside of the storage systems themselves to handle pod membership. In order to become online for a pod, a storage system must first contact the external pod membership system to verify that it is in-sync for the pod. Any storage system that is online for a pod should then remain in communication with the pod membership system and should wait or go offline if it loses communication. An external pod membership manager could be implemented as a highly available cluster using various cluster tools, such as Oracle RAC, Linux HA, VERITAS Cluster Server, IBM's HACMP, or others. An external pod membership manager could also use distributed configuration tools such as Etcd or Zookeeper, or a reliable distributed database such as Amazon's DynamoDB.</p><p id="p-0205" num="0204">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may receive a request to read a portion of the dataset (<b>426</b>, <b>428</b>) and process the request to read the portion of the dataset locally according to some embodiments of the present disclosure. Readers will appreciate that although requests to modify (e.g., a write operation) the dataset (<b>426</b>, <b>428</b>) require coordination between the storage systems (<b>402</b>, <b>404</b>, <b>406</b>) in a pod, as the dataset (<b>426</b>, <b>428</b>) should be consistent across all storage systems (<b>402</b>, <b>404</b>, <b>406</b>) in a pod, responding to a request to read a portion of the dataset (<b>426</b>, <b>428</b>) does not require similar coordination between the storage systems (<b>402</b>, <b>404</b>, <b>406</b>). As such, a particular storage system that receives a read request may service the read request locally by reading a portion of the dataset (<b>426</b>, <b>428</b>) that is stored within the storage system's storage devices, with no synchronous communication with other storage systems in the pod. Read requests received by one storage system for a replicated dataset in a replicated cluster are expected to avoid any communication in the vast majority of cases, at least when received by a storage system that is running within a cluster that is also running nominally. Such reads should normally be processed simply by reading from the local copy of a clustered dataset with no further interaction required with other storage systems in the cluster</p><p id="p-0206" num="0205">Readers will appreciate that the storage systems may take steps to ensure read consistency such that a read request will return the same result regardless of which storage system processes the read request. For example, the resulting clustered dataset content for any set of updates received by any set of storage systems in the cluster should be consistent across the cluster, at least at any time updates are idle (all previous modifying operations have been indicated as complete and no new update requests have been received and processed in any way). More specifically, the instances of a clustered dataset across a set of storage systems can differ only as a result of updates that have not yet completed. This means, for example, that any two write requests which overlap in their volume block range, or any combination of a write request and an overlapping snapshot, compare-and-write, or virtual block range copy, must yield a consistent result on all copies of the dataset. Two operations should not yield a result as if they happened in one order on one storage system and a different order on another storage system in the replicated cluster.</p><p id="p-0207" num="0206">Furthermore, read requests can be made time order consistent. For example, if one read request is received on a replicated cluster and completed and that read is then followed by another read request to an overlapping address range which is received by the replicated cluster and where one or both reads in any way overlap in time and volume address range with a modification request received by the replicated cluster (whether any of the reads or the modification are received by the same storage system or a different storage system in the replicated cluster), then if the first read reflects the result of the update then the second read should also reflect the results of that update, rather than possibly returning data that preceded the update. If the first read does not reflect the update, then the second read can either reflect the update or not. This ensures that between two read requests &#x201c;time&#x201d; for a data segment cannot roll backward.</p><p id="p-0208" num="0207">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may also detect a disruption in data communications with one or more of the other storage systems and determine whether to the particular storage system should remain in the pod. A disruption in data communications with one or more of the other storage systems may occur for a variety of reasons. For example, a disruption in data communications with one or more of the other storage systems may occur because one of the storage systems has failed, because a network interconnect has failed, or for some other reason. An important aspect of synchronous replicated clustering is ensuring that any fault handling doesn't result in unrecoverable inconsistencies, or any inconsistency in responses. For example, if a network fails between two storage systems, at most one of the storage systems can continue processing newly incoming I/O requests for a pod. And, if one storage system continues processing, the other storage system can't process any new requests to completion, including read requests.</p><p id="p-0209" num="0208">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may also determine whether the particular storage system should remain in the pod in response to detecting a disruption in data communications with one or more of the other storage systems. As mentioned above, to be &#x2018;online&#x2019; as part of a pod, a storage system must consider itself to be in-sync for the pod and must be communicating with all other storage systems it considers to be in-sync for the pod. If a storage system can't be certain that it is in-sync and communicating with all other storage systems that are in-sync, then it may stop processing new incoming requests to access the dataset (<b>426</b>, <b>428</b>). As such, the storage system may determine whether to the particular storage system should remain online as part of the pod, for example, by determining whether it can communicate with all other storage systems it considers to be in-sync for the pod (e.g., via one or more test messages), by determining whether the all other storage systems it considers to be in-sync for the pod also consider the storage system to be attached to the pod, through a combination of both steps where the particular storage system must confirm that it can communicate with all other storage systems it considers to be in-sync for the pod and that all other storage systems it considers to be in-sync for the pod also consider the storage system to be attached to the pod, or through some other mechanism.</p><p id="p-0210" num="0209">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may also keep the dataset on the particular storage system accessible for management and dataset operations in response to determining that the particular storage system should remain in the pod. The storage system may keep the dataset (<b>426</b>, <b>428</b>) on the particular storage system accessible for management and dataset operations, for example, by accepting requests to access the version of the dataset (<b>426</b>, <b>428</b>) that is stored on the storage system and processing such requests, by accepting and processing management operations associated with the dataset (<b>426</b>, <b>428</b>) that are issued by a host or authorized administrator, by accepting and processing management operations associated with the dataset (<b>426</b>, <b>428</b>) that are issued by one of the other storage systems, or in some other way.</p><p id="p-0211" num="0210">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may, however, make the dataset on the particular storage system inaccessible for management and dataset operations in response to determining that the particular storage system should not remain in the pod. The storage system may make the dataset (<b>426</b>, <b>428</b>) on the particular storage system inaccessible for management and dataset operations, for example, by rejecting requests to access the version of the dataset (<b>426</b>, <b>428</b>) that is stored on the storage system, by rejecting management operations associated with the dataset (<b>426</b>, <b>428</b>) that are issued by a host or other authorized administrator, by rejecting management operations associated with the dataset (<b>426</b>, <b>428</b>) that are issued by one of the other storage systems in the pod, or in some other way.</p><p id="p-0212" num="0211">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may also detect that the disruption in data communications with one or more of the other storage systems has been repaired and make the dataset on the particular storage system accessible for management and dataset operations. The storage system may detect that the disruption in data communications with one or more of the other storage systems has been repaired, for example, by receiving a message from the one or more of the other storage systems. In response to detecting that the disruption in data communications with one or more of the other storage systems has been repaired, the storage system may make the dataset (<b>426</b>, <b>428</b>) on the particular storage system accessible for management and dataset operations once the previously detached storage system has been resynchronized with the storage systems that remained attached to the pod.</p><p id="p-0213" num="0212">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may also go offline from the pod such that the particular storage system no longer allows management and dataset operations. The depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may go offline from the pod such that the particular storage system no longer allows management and dataset operations for a variety of reasons. For example, the depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may also go offline from the pod due to some fault with the storage system itself, because an update or some other maintenance is occurring on the storage system, due to communications faults, or for many other reasons. In such an example, the depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may subsequently update the dataset on the particular storage system to include all updates to the dataset since the particular storage system went offline and go back online with the pod such that the particular storage system allows management and dataset operations, as will be described in greater detail in the resynchronization sections included below.</p><p id="p-0214" num="0213">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may also identifying a target storage system for asynchronously receiving the dataset, where the target storage system is not one of the plurality of storage systems across which the dataset is synchronously replicated. Such a target storage system may represent, for example, a backup storage system, as some storage system that makes use of the synchronously replicated dataset, and so on. In fact, synchronous replication can be leveraged to distribute copies of a dataset closer to some rack of servers, for better local read performance. One such case is smaller top-of-rack storage systems symmetrically replicated to larger storage systems that are centrally located in the data center or campus and where those larger storage systems are more carefully managed for reliability or are connected to external networks for asynchronous replication or backup services.</p><p id="p-0215" num="0214">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may also identify a portion of the dataset that is not being asynchronously replicated to the target storage system by any of the other storages systems and asynchronously replicate, to the target storage system, the portion of the dataset that is not being asynchronously replicated to the target storage system by any of the other storages systems, wherein the two or more storage systems collectively replicate the entire dataset to the target storage system. In such a way, the work associated with asynchronously replicating a particular dataset may be split amongst the members of a pod, such that each storage system in a pod is only responsible for asynchronously replicating a subset of a dataset to the target storage system.</p><p id="p-0216" num="0215">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the depicted storage systems (<b>402</b>, <b>404</b>, <b>406</b>) may also detach from the pod, such that the particular storage system that detaches from the pod is no longer included in the set of storage systems across which the dataset is synchronously replicated. For example, if storage system (<b>404</b>) in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> detached from the pod (<b>430</b>) illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the pod (<b>430</b>) would only include storage systems (<b>402</b>, <b>406</b>) as the storage systems across which the dataset (<b>426</b>) that is included in the pod (<b>430</b>) would be synchronously replicated across. In such an example, detaching the storage system from the pod could also include removing the dataset from the particular storage system that detached from the pod. Continuing with the example where the storage system (<b>404</b>) in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> detached from the pod (<b>430</b>) illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the dataset (<b>426</b>) that is included in the pod (<b>430</b>) could be deleted or otherwise removed from the storage system (<b>404</b>).</p><p id="p-0217" num="0216">Readers will appreciate that there are a number of unique administrative capabilities enabled by the pod model that can further be supported. Also, the pod model itself introduces some issues that can be addressed by an implementation. For example, when a storage system is offline for a pod, but is otherwise running, such as because an interconnect failed and another storage system for the pod won out in mediation, there may still be a desire or need to access the offline pod's dataset on the offline storage system. One solution may be simply to enable the pod in some detached mode and allow the dataset to be accessed. However, that solution can be dangerous and that solution can cause the pod's metadata and data to be much more difficult to reconcile when the storage systems do regain communication. Furthermore, there could still be a separate path for hosts to access the offline storage system as well as the still online storage systems. In that case, a host might issue I/O to both storage systems even though they are no longer being kept in sync, because the host sees target ports reporting volumes with the same identifiers and the host I/O drivers presume it sees additional paths to the same volume. This can result in fairly damaging data corruption as reads and writes issued to both storage systems are no longer consistent even though the host presumes they are. As a variant of this case, in a clustered application, such as a shared storage clustered database, the clustered application running on one host might be reading or writing to one storage system and the same clustered application running on another host might be reading or writing to the &#x201c;detached&#x201d; storage system, yet the two instances of the clustered application are communicating between each other on the presumption that the dataset they each see is entirely consistent for completed writes. Since they aren't consistent, that presumption is violated and the application's dataset (e.g., the database) can quickly end up being corrupted.</p><p id="p-0218" num="0217">One way to solve both of these problems is to allow for an offline pod, or perhaps a snapshot of an offline pod, to be copied to a new pod with new volumes that have sufficiently new identities that host I/O drivers and clustered applications won't confuse the copied volumes as being the same as the still online volumes on another storage system. Since each pod maintains a complete copy of the dataset, which is crash consistent but perhaps slightly different from the copy of the pod dataset on another storage system, and since each pod has an independent copy of all data and metadata needed to operate on the pod content, it is a straightforward problem to make a virtual copy of some or all volumes or snapshots in the pod to new volumes in a new pod. In a logical extent graph implementation, for example, all that is needed is to define new volumes in a new pod which reference logical extent graphs from the copied pod associated with the pod's volumes or snapshots, and with the logical extent graphs being marked as copy on write. The new volumes should be treated as new volumes, similarly to how volume snapshots copied to a new volume might be implemented. Volumes may have the same administrative name, though within a new pod namespace. But, they should have different underlying identifiers, and differing logical unit identifiers from the original volumes.</p><p id="p-0219" num="0218">In some cases it may be possible to use virtual network isolation techniques (for example, by creating a virtual LAN in the case of IP networks or a virtual SAN in the case of fiber channel networks) in such a way that isolation of volumes presented to some interfaces can be assured to be inaccessible from host network interfaces or host SCSI initiator ports that might also see the original volumes. In such cases, it may be safe to provide the copies of volumes with the same SCSI or other storage identifiers as the original volumes. This could be used, for example, in cases where the applications expect to see a particular set of storage identifiers in order to function without an undue burden in reconfiguration.</p><p id="p-0220" num="0219">Some of the techniques described herein could also be used outside of an active fault context to test readiness for handling faults. Readiness testing (sometimes referred to as &#x201c;fire drills&#x201d;) is commonly required for disaster recovery configurations, where frequent and repeated testing is considered a necessity to ensure that most or all aspects of a disaster recovery plan are correct and account for any recent changes to applications, datasets, or changes in equipment. Readiness testing should be non-disruptive to current production operations, including replication. In many cases the real operations can't actually be invoked on the active configuration, but a good way to get close is to use storage operations to make copies of production datasets, and then perhaps couple that with the use of virtual networking, to create an isolated environment containing all data that is believed necessary for the important applications that must be brought up successfully in cases of disasters. Making such a copy of a synchronously replicated (or even an asynchronously replicated) dataset available within a site (or collection of sites) that is expected to perform a disaster recovery readiness test procedure and then starting the important applications on that dataset to ensure that it can startup and function is a great tool, since it helps ensure that no important parts of the application datasets were left out in the disaster recovery plan. If necessary, and practical, this could be coupled with virtual isolated networks coupled perhaps with isolated collection of physical or virtual machines, to get as close as possible to a real world disaster recovery takeover scenario. Virtually copying a pod (or set of pods) to another pod as a point-in-time image of the pod datasets immediately creates an isolated dataset that contains all the copied elements and that can then be operated on essentially identically to the originally pods, as well as allowing isolation to a single site (or a few sites) separately from the original pod. Further, these are fast operations and they can be torn down and repeated easily allowing testing to repeated as often as is desired.</p><p id="p-0221" num="0220">Some enhancements could be made to get further toward perfect disaster recovery testing. For example, in conjunction with isolated networks, SCSI logical unit identities or other types of identities could be copied into the target pod so that the test servers, virtual machines, and applications see the same identities. Further, the administrative environment of the servers could be configured to respond to requests from a particular virtual set of virtual networks to respond to requests and operations on the original pod name so scripts don't require use of test-variants with alternate &#x201c;test&#x201d; versions of object names. A further enhancement can be used in cases where the host-side server infrastructure that will take over in the case of a disaster takeover can be used during a test. This includes cases where a disaster recovery data center is completely stocked with alternative server infrastructure that won't generally be used until directed to do so by a disaster. It also includes cases where that infrastructure might be used for non-critical operations (for example, running analytics on production data, or simply supporting application development or other functions which may be important but can be halted if needed for more critical functions). Specifically, host definitions and configurations and the server infrastructure that will use them can be set up as they will be for an actual disaster recovery takeover event and tested as part of disaster recovery takeover testing, with the tested volumes being connected to these host definitions from the virtual pod copy used to provide a snapshot of the dataset. From the standpoint of the storage systems involved, then, these host definitions and configurations used for testing, and the volume-to-host connection configurations used during testing, can be reused when an actual disaster takeover event is triggered, greatly minimizing the configuration differences between the test configuration and the real configuration that will be used in case of a disaster recovery takeover.</p><p id="p-0222" num="0221">In some cases it may make sense to move volumes out of a first pod and into a new second pod including just those volumes. The pod membership and high availability and recovery characteristics can then be adjusted separately, and administration of the two resulting pod datasets can then be isolated from each other. An operation that can be done in one direction should also be possible in the other direction. At some point, it may make sense to take two pods and merge them into one so that the volumes in each of the original two pods will now track each other for storage system membership and high availability and recovery characteristics and events. Both operations can be accomplished safely and with reasonably minimal or no disruption to running applications by relying on the characteristics suggested for changing mediation or quorum properties for a pod which were discussed in an earlier section. With mediation, for example, a mediator for a pod can be changed using a sequence consisting of a step where each storage system in a pod is changed to depend on both a first mediator and a second mediator and each is then changed to depend only on the second mediator. If a fault occurs in the middle of the sequence, some storage systems may depend on both the first mediator and the second mediator, but in no case will recovery and fault handling result in some storage systems depending only on the first mediator and other storage systems only depending on the second mediator. Quorum can be handled similarly by temporarily depending on winning against both a first quorum model and a second quorum model in order to proceed to recovery. This may result in a very short time period where availability of the pod in the face of faults depend on additional resources, thus reducing potential availability, but this time period is very short and the reduction in availability is often very little. With mediation, if the change in mediator parameters is nothing more than the change in the key used for mediation and the mediation service used is the same, then the potential reduction in availability is even less, since it now depends only on two calls to the same service versus one call to that service, and rather than separate calls to two separate services.</p><p id="p-0223" num="0222">Readers will note that changing the quorum model may be quite complex. An additional step may be necessary where storage systems will participate in the second quorum model but won't depend on winning in that second quorum model, which is then followed by the step of also depending on the second quorum model. This may be necessary to account for the fact that if only one system has processed the change to depend on the quorum model, then it will never win quorum since there will never be a majority. With this model in place for changing the high availability parameters (mediation relationship, quorum model, takeover preferences), we can create a safe procedure for these operations to split a pod into two or to join two pods into one. This may require adding one other capability: linking a second pod to a first pod for high availability such that if two pods include compatible high availability parameters the second pod linked to the first pod can depend on the first pod for determining and instigating detach-related processing and operations, offline and in-sync states, and recovery and resynchronization actions.</p><p id="p-0224" num="0223">To split a pod into two, which is an operation to move some volumes into a newly created pod, a distributed operation may be formed that can be described as: form a second pod into which we will move a set of volumes which were previously in a first pod, copy the high availability parameters from the first pod into the second pod to ensure they are compatible for linking, and link the second pod to the first pod for high availability. This operation may be encoded as messages and should be implemented by each storage system in the pod in such a way that the storage system ensures that the operation happens completely on that storage system or does not happen at all if processing is interrupted by a fault. Once all in-sync storage systems for the two pods have processed this operation, the storage systems can then process a subsequent operation which changes the second pod so that it is no longer linked to the first pod. As with other changes to high availability characteristics for a pod, this involves first having each in-sync storage system change to rely on both the previous model (that model being that high availability is linked to the first pod) and the new model (that model being its own now independent high availability). In the case of mediation or quorum, this means that storage systems which processed this change will first depend on mediation or quorum being achieved as appropriate for the first pod and will additionally depend on a new separate mediation (for example, a new mediation key) or quorum being achieved for the second pod before the second pod can proceed following a fault that required mediation or testing for quorum. As with the previous description of changing quorum models, an intermediate step may set storage systems to participate in quorum for the second pod before the step where storage systems participate in and depend on quorum for the second pod. Once all in-sync storage systems have processed the change to depend on the new parameters for mediation or quorum for both the first pod and the second pod, the split is complete.</p><p id="p-0225" num="0224">Joining a second pod into a first pod operates essentially in reverse. First, the second pod must be adjusted to be compatible with the first pod, by having an identical list of storage systems and by having a compatible high availability model. This may involve some set of steps such as those described elsewhere in this paper to add or remove storage systems or to change mediator and quorum models. Depending on implementation, it may be necessary only to reach an identical list of storage systems. Joining proceeds by processing an operation on each in-sync storage system to link the second pod to the first pod for high availability. Each storage system which processes that operation will then depend on the first pod for high availability and then the second pod for high availability. Once all in-sync storage systems for the second pod have processed that operation, the storage systems will then each process a subsequent operation to eliminate the link between the second pod and the first pod, migrate the volumes from the second pod into the first pod, and delete the second pod. Host or application dataset access can be preserved throughout these operations, as long as the implementation allows proper direction of host or application dataset modification or read operations to the volume by identity and as long as the identity is preserved as appropriate to the storage protocol or storage model (for example, as long as logical unit identifiers for volumes and use of target ports for accessing volumes are preserved in the case of SCSI).</p><p id="p-0226" num="0225">Migrating a volume between pods may present issues. If the pods have an identical set of in-sync membership storage systems, then it may be straightforward: temporarily suspend operations on the volumes being migrated, switch control over operations on those volumes to controlling software and structures for the new pod, and then resume operations. This allows for a seamless migration with continuous uptime for applications apart from the very brief operation suspension, provided network and ports migrate properly between pods. Depending on the implementation, suspending operations may not even be necessary, or may be so internal to the system that the suspension of operations has no impact. Copying volumes between pods with different in-sync membership sets is more of a problem. If the target pod for the copy has a subset of in-sync members from the source pod, this isn't much of a problem: a member storage system can be dropped safely enough without having to do more work. But, if the target pod adds in-sync member storage systems to the volume over the source pod, then the added storage systems must be synchronized to include the volume's content before they can be used. Until synchronized, this leaves the copied volumes distinctly different from the already synchronized volumes, in that fault handling differs and request handling from the not yet synced member storage systems either won't work or must be forwarded or won't be as fast because reads will have to traverse an interconnect. Also, the internal implementation will have to handle some volumes being in sync and ready for fault handling and others not being in sync.</p><p id="p-0227" num="0226">There are other problems relating to reliability of the operation in the face of faults. Coordinating a migration of volumes between multi-storage-system pods is a distributed operation. If pods are the unit of fault handling and recovery, and if mediation or quorum or whatever means are used to avoid split-brain situations, then a switch in volumes from one pod with a particular set of state and configurations and relationships for fault handling, recovery, mediation and quorum to another then storage systems in a pod have to be careful about coordinating changes related to that handling for any volumes. Operations can't be atomically distributed between storage systems, but must be staged in some way. Mediation and quorum models essentially provide pods with the tools for implementing distributed transactional atomicity, but this may not extend to inter-pod operations without adding to the implementation.</p><p id="p-0228" num="0227">Consider even a simple migration of a volume from a first pod to a second pod even for two pods that share the same first and second storage systems. At some point the storage systems will coordinate to define that the volume is now in the second pod and is no longer in the first pod. If there is no inherent mechanism for transactional atomicity across the storage systems for the two pods, then a naive implementation could leave the volume in the first pod on the first storage system and the second pod on the second storage system at the time of a network fault that results in fault handling to detach storage systems from the two pods. If pods separately determine which storage system succeeds in detaching the other, then the result could be that the same storage system detaches the other storage system for both pods, in which case the result of the volume migration recovery should be consistent, or it could result in a different storage system detaching the other for the two pods. If the first storage system detaches the second storage system for the first pod and the second storage system detaches the first storage system for the second pod, then recovery might result in the volume being recovered to the first pod on the first storage system and into the second pod on the second storage system, with the volume then running and exported to hosts and storage applications on both storage systems. If instead the second storage system detaches the first storage system for the first pod and first storage detaches the second storage system for the second pod, then recovery might result in the volume being discarded from the second pod by the first storage system and the volume being discarded from the first pod by the second storage system, resulting in the volume disappearing entirely. If the pods a volume is being migrated between are on differing sets of storage systems, then things can get even more complicated.</p><p id="p-0229" num="0228">A solution to these problems may be to use an intermediate pod along with the techniques described previously for splitting and joining pods. This intermediate pod may never be presented as visible managed objects associated with the storage systems. In this model, volumes to be moved from a first pod to a second pod are first split from the first pod into a new intermediate pod using the split operation described previously. The storage system members for the intermediate pod can then be adjusted to match the membership of storage systems by adding or removing storage systems from the pod, as necessary. Subsequently, the intermediate pod can be joined with the second pod.</p><p id="p-0230" num="0229">For further explanation, <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> sets forth diagrams of metadata representations that may be implemented as a structured collection of metadata objects that, together, may represent a logical volume of storage data, or a portion of a logical volume, in accordance with some embodiments of the present disclosure. Metadata representations <b>451</b>-<b>50</b>, <b>451</b>-<b>54</b>, and <b>451</b>-<b>60</b> may be stored within a storage system (<b>451</b>-<b>06</b>), and one or more metadata representations may be generated and maintained for each of multiple storage objects, such as volumes, or portions of volumes, stored within a storage system (<b>451</b>-<b>06</b>).</p><p id="p-0231" num="0230">While other types of structured collections of the metadata objects are possible, in this example, metadata representations may be structured as a directed acyclic graph (DAG) of nodes, where, to maintain efficient access to any given node, the DAG may be structured and balanced according to various methods. For example, a DAG for a metadata representation may be defined as a type of B-tree, and balanced accordingly in response to changes to the structure of the metadata representation, where changes to the metadata representation may occur in response to changes to, or additions to, underlying data represented by the metadata representation. While in this example, there are only two levels for the sake of simplicity, in other examples, metadata representations may span across multiple levels and may include hundreds or thousands of nodes, where each node may include any number of links to other nodes.</p><p id="p-0232" num="0231">Further, in this example, the leaves of a metadata representation may include pointers to the stored data for a volume, or portion of a volume, where a logical address, or a volume and offset, may be used to identify and navigate through the metadata representation to reach one or more leaf nodes that reference stored data corresponding to the logical address. For example, a volume (<b>451</b>-<b>52</b>) may be represented by a metadata representation (<b>451</b>-<b>50</b>), which includes multiple metadata object nodes (<b>451</b>-<b>52</b>, <b>451</b>-<b>52</b>A-<b>451</b>-<b>52</b>N), where leaf nodes (<b>451</b>-<b>52</b>A-<b>451</b>-<b>52</b>N) include pointers to respective data objects (<b>451</b>-<b>53</b>A-<b>451</b>-<b>53</b>N, <b>451</b>-<b>57</b>). Data objects may be any size unit of data within a storage system (<b>451</b>-<b>06</b>). For example, data objects (<b>451</b>-<b>53</b>A-<b>451</b>-<b>53</b>N, <b>451</b>-<b>57</b>) may each be a logical extent, where logical extents may be some specified size, such as 1 MB, 4 MB, or some other size.</p><p id="p-0233" num="0232">In this example, a snapshot (<b>451</b>-<b>56</b>) may be created as a snapshot of a storage object, in this case, a volume (<b>451</b>-<b>52</b>), where at the point in time when the snapshot (<b>451</b>-<b>56</b>) is created, the metadata representation (<b>451</b>-<b>54</b>) for the snapshot (<b>451</b>-<b>56</b>) includes all of the metadata objects for the metadata representation (<b>451</b>-<b>50</b>) for the volume (<b>451</b>-<b>52</b>). Further, in response to creation of the snapshot (<b>451</b>-<b>56</b>), the metadata representation (<b>451</b>-<b>54</b>) may be designated to be read only. However, the volume (<b>451</b>-<b>52</b>) sharing the metadata representation may continue to be modified, and while at the moment the snapshot is created, the metadata representations for the volume (<b>451</b>-<b>52</b>) and the snapshot (<b>451</b>-<b>56</b>) are identical, as modifications are made to data corresponding to the volume (<b>451</b>-<b>52</b>), and in response to the modifications, the metadata representations for the volume (<b>451</b>-<b>52</b>) and the snapshot (<b>451</b>-<b>56</b>) may diverge and become different.</p><p id="p-0234" num="0233">For example, given a metadata representation (<b>451</b>-<b>50</b>) to represent a volume (<b>451</b>-<b>52</b>) and a metadata representation (<b>451</b>-<b>54</b>) to represent a snapshot (<b>451</b>-<b>56</b>), the storage system (<b>451</b>-<b>06</b>) may receive an I/O operation that writes to data that is ultimately stored within a particular data object (<b>451</b>-<b>53</b>B), where the data object (<b>451</b>-<b>53</b>B) is pointed to by a leaf node pointer (<b>451</b>-<b>52</b>B), and where the leaf node pointer (<b>451</b>-<b>52</b>B) is part of both metadata representations (<b>451</b>-<b>50</b>, <b>451</b>-<b>54</b>). In response to the write operation, the read only data objects (<b>451</b>-<b>53</b>A-<b>451</b>-<b>53</b>N) referred to by the metadata representation (<b>451</b>-<b>54</b>) remain unchanged, and the pointer (<b>451</b>-<b>52</b>B) may also remain unchanged. However, the metadata representation (<b>451</b>-<b>50</b>), which represents the current volume (<b>451</b>-<b>52</b>), is modified to include a new data object to hold the data written by the write operation, where the modified metadata representation is depicted as the metadata representation (<b>451</b>-<b>60</b>). Further, the write operation may be directed to only a portion of the data object (<b>451</b>-<b>53</b>B), and consequently, the new data object (<b>451</b>-<b>57</b>) may include a copy of previous contents of the data object (<b>451</b>-<b>53</b>B) in addition to the payload for the write operation.</p><p id="p-0235" num="0234">In this example, as part of processing the write operation, the metadata representation (<b>451</b>-<b>60</b>) for the volume (<b>451</b>-<b>52</b>) is modified to remove an existing metadata object pointer (<b>451</b>-<b>52</b>B) and to include a new metadata object pointer (<b>451</b>-<b>58</b>), where the new metadata object pointer (<b>451</b>-<b>58</b>) is configured to point to a new data object (<b>451</b>-<b>57</b>), where the new data object (<b>451</b>-<b>57</b>) stores the data written by the write operation. Further, the metadata representation (<b>451</b>-<b>60</b>) for the volume (<b>451</b>-<b>52</b>) continues to include all metadata objects included within the previous metadata representation (<b>451</b>-<b>50</b>)&#x2014;with the exclusion of the metadata object pointer (<b>451</b>-<b>52</b>B) that referenced the target data object, where the metadata object pointer (<b>451</b>-<b>52</b>B) continues to reference the read only data object (<b>451</b>-<b>53</b>B) that would have been overwritten.</p><p id="p-0236" num="0235">In this way, using metadata representations, a volume or a portion of a volume may be considered to be snapshotted, or considered to be copied, by creating metadata objects, and without actual duplication of data objects&#x2014;where the duplication of data objects may be deferred until a write operation is directed at one of the read only data objects referred to by the metadata representations.</p><p id="p-0237" num="0236">In other words, an advantage of using a metadata representation to represent a volume is that a snapshot or a copy of a volume may be created and be accessible in constant order time, and specifically, in the time it takes to create a metadata object for the snapshot or copy, and to create a reference for the snapshot or copy metadata object to the existing metadata representation for the volume being snapshotted or copied.</p><p id="p-0238" num="0237">As an example use, a virtualized copy-by-reference may make use of a metadata representation in a manner that is similar to the use of a metadata representation in creating a snapshot of a volume&#x2014;where a metadata representation for a virtualized copy-by-reference may often correspond to a portion of a metadata representation for an entire volume. An example implementation of virtualized copy-by-reference may be within the context of a virtualized storage system, where multiple block ranges within and between volumes may reference a unified copy of stored data. In such virtualized storage system, the metadata described above may be used to handle the relationship between virtual, or logical, addresses and physical, or real, addresses&#x2014;in other words, the metadata representation of stored data enables a virtualized storage system that may be considered flash-friendly in that it reduces, or minimizes, wear on flash memory.</p><p id="p-0239" num="0238">In some examples, logical extents may be combined in various ways, including as simple collections or as logically related address ranges within some larger-scale logical extent that is formed as a set of logical extent references. These larger combinations could also be given logical extent identities of various kinds, and could be further combined into still larger logical extents or collections. A copy-on-write status could apply to various layers, and in various ways depending on the implementation. For example, a copy on write status applied to a logical collection of logical collections of extents might result in a copied collection retaining references to unchanged logical extents and the creation of copied-on-write logical extents (through copying references to any unchanged stored data blocks as needed) when only part of the copy-on-write logical collection is changed.</p><p id="p-0240" num="0239">Deduplication, volume snapshots, or block range snapshots may be implemented in this model through combinations of referencing stored data blocks, or referencing logical extents, or marking logical extents (or identified collections of logical extents) as copy-on-write.</p><p id="p-0241" num="0240">Further, with flash storage systems, stored data blocks may be organized and grouped together in various ways as collections are written out into pages that are part of larger erase blocks. Eventual garbage collection of deleted or replaced stored data blocks may involve moving content stored in some number of pages elsewhere so that an entire erase block can be erased and prepared for reuse. This process of selecting physical flash pages, eventually migrating and garbage collecting them, and then erasing flash erase blocks for reuse may or may not be coordinated, driven by, or performed by the aspect of a storage system that is also handling logical extents, deduplication, compression, snapshots, virtual copying, or other storage system functions. A coordinated or driven process for selecting pages, migrating pages, garbage collecting and erasing erase blocks may further take into account various characteristics of the flash memory device cells, pages, and erase blocks such as number of uses, aging predictions, adjustments to voltage levels or numbers of retries needed in the past to recover stored data. They may also take into account analysis and predictions across all flash memory devices within the storage system.</p><p id="p-0242" num="0241">To continue with this example, where a storage system may be implemented based on directed acyclic graphs comprising logical extents, logical extents can be categorized into two types: leaf logical extents, which reference some amount of stored data in some way, and composite logical extents, which reference other leaf or composite logical extents.</p><p id="p-0243" num="0242">A leaf extent can reference data in a variety of ways. It can point directly to a single range of stored data (e.g., 64 kilobytes of data), or it can be a collection of references to stored data (e.g., a 1 megabyte &#x201c;range&#x201d; of content that maps some number of virtual blocks associated with the range to physically stored blocks). In the latter case, these blocks may be referenced using some identity, and some blocks within the range of the extent may not be mapped to anything. Also, in that latter case, these block references need not be unique, allowing multiple mappings from virtual blocks within some number of logical extents within and across some number of volumes to map to the same physically stored blocks. Instead of stored block references, a logical extent could encode simple patterns: for example, a block which is a string of identical bytes could simply encode that the block is a repeated pattern of identical bytes.</p><p id="p-0244" num="0243">A composite logical extent can be a logical range of content with some virtual size, which comprises a plurality of maps that each map from a subrange of the composite logical extent logical range of content to an underlying leaf or composite logical extent. Transforming a request related to content for a composite logical extent, then, involves taking the content range for the request within the context of the composite logical extent, determining which underlying leaf or composite logical extents that request maps to, and transforming the request to apply to an appropriate range of content within those underlying leaf or composite logical extents.</p><p id="p-0245" num="0244">Volumes, or files or other types of storage objects, can be described as composite logical extents. Thus, these presented storage objects can be organized using this extent model.</p><p id="p-0246" num="0245">Depending on implementation, leaf or composite logical extents could be referenced from a plurality of other composite logical extents, effectively allowing inexpensive duplication of larger collections of content within and across volumes. Thus, logical extents can be arranged essentially within an acyclic graph of references, each ending in leaf logical extents. This can be used to make copies of volumes, to make snapshots of volumes, or as part of supporting virtual range copies within and between volumes as part of EXTENDED COPY or similar types of operations.</p><p id="p-0247" num="0246">An implementation may provide each logical extent with an identity which can be used to name it. This simplifies referencing, since the references within composite logical extents become lists comprising logical extent identities and a logical subrange corresponding to each such logical extent identity. Within logical extents, each stored data block reference may also be based on some identity used to name it.</p><p id="p-0248" num="0247">To support these duplicated uses of extents, we can add a further capability: copy-on-write logical extents. When a modifying operation affects a copy-on-write leaf or composite logical extent the logical extent is copied, with the copy being a new reference and possibly having a new identity (depending on implementation). The copy retains all references or identities related to underlying leaf or composite logical extents, but with whatever modifications result from the modifying operation. For example, a WRITE, WRITE SAME, XDWRITEREAD, XPWRITE, or COMPARE AND WRITE request may store new blocks in the storage system (or use deduplication techniques to identify existing stored blocks), resulting in modifying the corresponding leaf logical extents to reference or store identities to a new set of blocks, possibly replacing references and stored identities for a previous set of blocks. Alternately, an UNMAP request may modify a leaf logical extent to remove one or more block references. In both types of cases, a leaf logical extent is modified. If the leaf logical extent is copy-on-write, then a new leaf logical extent will be created that is formed by copying unaffected block references from the old extent and then replacing or removing block references based on the modifying operation.</p><p id="p-0249" num="0248">A composite logical extent that was used to locate the leaf logical extent may then be modified to store the new leaf logical extent reference or identity associated with the copied and modified leaf logical extent as a replacement for the previous leaf logical extent. If that composite logical extent is copy-on-write, then a new composite logical extent is created as a new reference or with a new identity, and any unaffected references or identities to its underlying logical extents are copied to that new composite logical extent, with the previous leaf logical extent reference or identity being replaced with the new leaf logical extent reference or identity.</p><p id="p-0250" num="0249">This process continues further backward from referenced extent to referencing composite extent, based on the search path through the acyclic graph used to process the modifying operation, with all copy-on-write logical extents being copied, modified, and replaced.</p><p id="p-0251" num="0250">These copied leaf and composite logical extents can then drop the characteristic of being copy on write, so that further modifications do not result in an additional copy. For example, the first time some underlying logical extent within a copy-on-write &#x201c;parent&#x201d; composite extent is modified, that underlying logical extent may be copied and modified, with the copy having a new identity which is then written into a copied and replaced instance of the parent composite logical extent. However, a second time some other underlying logical extent is copied and modified and with that other underlying logical extent copy's new identity being written to the parent composite logical extent, the parent can then be modified in place with no further copy and replace necessary on behalf of references to the parent composite logical extent.</p><p id="p-0252" num="0251">Modifying operations to new regions of a volume or of a composite logical extent for which there is no current leaf logical extent may create a new leaf logical extent to store the results of those modifications. If that new logical extent is to be referenced from an existing copy-on-write composite logical extent, then that existing copy-on-write composite logical extent will be modified to reference the new logical extent, resulting in another copy, modify, and replace sequence of operations similar to the sequence for modifying an existing leaf logical extent.</p><p id="p-0253" num="0252">If a parent composite logical extent cannot be grown large enough (based on implementation) to cover an address range associated that includes new leaf logical extents to create for a new modifying operation, then the parent composite logical extent may be copied into two or more new composite logical extents which are then referenced from a single &#x201c;grandparent&#x201d; composite logical extent which yet again is a new reference or a new identity. If that grandparent logical extent is itself found through another composite logical extent that is copy-on-write, then that another composite logical extent will be copied and modified and replaced in a similar way as described in previous paragraphs. This copy-on-write model can be used as part of implementing snapshots, volume copies, and virtual volume address range copies within a storage system implementation based on these directed acyclic graphs of logical extents. To make a snapshot as a read-only copy of an otherwise writable volume, a graph of logical extents associated with the volume is marked copy-on-write and a reference to the original composite logical extents are retained by the snapshot. Modifying operations to the volume will then make logical extent copies as needed, resulting in the volume storing the results of those modifying operations and the snapshots retaining the original content. Volume copies are similar, except that both the original volume and the copied volume can modify content resulting in their own copied logical extent graphs and subgraphs.</p><p id="p-0254" num="0253">Virtual volume address range copies can operate either by copying block references within and between leaf logical extents (which does not itself involve using copy-on-write techniques unless changes to block references modifies copy-on-write leaf logical extents). Alternately, virtual volume address range copies can duplicate references to leaf or composite logical extents, which works well for volume address range copies of larger address ranges. Further, this allows graphs to become directed acyclic graphs of references rather than merely reference trees. Copy-on-write techniques associated with duplicated logical extent references can be used to ensure that modifying operations to the source or target of a virtual address range copy will result in the creation of new logical extents to store those modifications without affecting the target or the source that share the same logical extent immediately after the volume address range copy operation.</p><p id="p-0255" num="0254">Input/output operations for pods may also be implemented based on replicating directed acyclic graphs of logical extents. For example, each storage system within a pod could implement private graphs of logical extents, such that the graphs on one storage system for a pod have no particular relationship to the graphs on any second storage system for the pod. However, there is value in synchronizing the graphs between storage systems in a pod. This can be useful for resynchronization and for coordinating features such as asynchronous or snapshot based replication to remote storage systems. Further, it may be useful for reducing some overhead for handling the distribution of snapshot and copy related processing. In such a model, keeping the content of a pod in sync across all in-sync storage systems for a pod is essentially the same as keeping graphs of leaf and composite logical extents in sync for all volumes across all in-sync storage systems for the pod, and ensuring that the content of all logical extents is in-sync. To be in sync, matching leaf and composite logical extents should either have the same identity or should have mappable identities. Mapping could involve some set of intermediate mapping tables or could involve some other type of identity translation. In some cases, identities of blocks mapped by leaf logical extents could also be kept in sync.</p><p id="p-0256" num="0255">In a pod implementation based on a leader and followers, with a single leader for each pod, the leader can be in charge of determining any changes to the logical extent graphs. If a new leaf or composite logical extent is to be created, it can be given an identity. If an existing leaf or composite logical extent is to be copied to form a new logical extent with modifications, the new logical extent can be described as a copy of a previous logical extent with some set of modifications. If an existing logical extent is to be split, the split can be described along with the new resulting identities. If a logical extent is to be referenced as an underlying logical extent from some additional composite logical extent, that reference can be described as a change to the composite logical extent to reference that underlying logical extent.</p><p id="p-0257" num="0256">Modifying operations in a pod thus comprises distributing descriptions of modifications to logical extent graphs (where new logical extents are created to extend content or where logical extents are copied, modified, and replaced to handle copy-on-write states related to snapshots, volume copies, and volume address range copies) and distributing descriptions and content for modifications to the content of leaf logical extents. An additional benefit that comes from using metadata in the form of directed acyclic graphs, as described above, is that I/O operations that modify stored data in physical storage may be given effect at a user level through the modification of metadata corresponding to the stored data in physical storage&#x2014;without modifying the stored data in physical storage. In the disclosed embodiments of storage systems, where the physical storage may be a solid state drive, the wear that accompanies modifications to flash memory may be avoided or reduced due to I/O operations being given effect through the modifications of the metadata representing the data targeted by the I/O operations instead of through the reading, erasing, or writing of flash memory. Further, as noted above, in such a virtualized storage system, the metadata described above may be used to handle the relationship between virtual, or logical, addresses and physical, or real, addresses&#x2014;in other words, the metadata representation of stored data enables a virtualized storage system that may be considered flash-friendly in that it reduces, or minimizes, wear on flash memory.</p><p id="p-0258" num="0257">Leader storage systems may perform their own local operations to implement these descriptions in the context of their local copy of the pod dataset and the local storage system's metadata. Further, the in-sync followers perform their own separate local operations to implement these descriptions in the context of their separate local copy of the pod dataset and their separate local storage system's metadata. When both leader and follower operations are complete, the result is compatible graphs of logical extents with compatible leaf logical extent content. These graphs of logical extents then become a type of &#x201c;common metadata&#x201d; as described in previous examples. This common metadata can be described as dependencies between modifying operations and required common metadata. Transformations to graphs can be described as separate operations within a set of or more predicates that may describe relationships, such as dependencies, with one or more other operations. In other words, interdependencies between operations may be described as a set of precursors that one operation depends on in some way, where the set of precursors may be considered predicates that must be true for an operation to complete. A fuller description of predicates may be found within application Reference No. 15/696,418, which is included herein by reference in its entirety. Alternately, each modifying operation that relies on a particular same graph transformation that has not yet been known to complete across the pod can include the parts of any graph transformation that it relies on. Processing an operation description that identifies a &#x201c;new&#x201d; leaf or composite logical extent that already exists can avoid creating the new logical extent since that part was already handled in the processing of some earlier operation, and can instead implement only the parts of the operation processing that change the content of leaf or composite logical extents. It is a role of the leader to ensure that transformations are compatible with each other. For example, we can start with two writes come that come in for a pod. A first write replaces a composite logical extent A with a copy of formed as composite logical extent B, replaces a leaf logical extent C with a copy as leaf logical extent D and with modifications to store the content for the second write, and further writes leaf logical extent D into composite logical extent B. Meanwhile, a second write implies the same copy and replacement of composite logical extent A with composite logical extent B but copies and replaces a different leaf logical extent E with a logical extent F which is modified to store the content of the second write, and further writes logical extent F into logical extent B. In that case, the description for the first write can include the replacement of A with B and C with D and the writing of D into composite logical extent B and the writing of the content of the first write into leaf extend B; and, the description of the second write can include the replacement of A with B and E with F and the writing of F into composite logical extent B, along with the content of the second write which will be written to leaf extent F. A leader or any follower can then separately process the first write or the second write in any order, and the end result is B copying and replacing A, D copying and replacing C, F copying replacing E, and D and F being written into composite logical extent B. A second copy of A to form B can be avoided by recognizing that B already exists. In this way, a leader can ensure that the pod maintains compatible common metadata for a logical extent graph across in-sync storage systems for a pod.</p><p id="p-0259" num="0258">Given an implementation of storage systems using directed acyclic graphs of logical extents, recovery of pods based on replicated directed acyclic graphs of logical extents may be implemented. Specifically, in this example, recovery in pods may be based on replicated extent graphs then involves recovering consistency of these graphs as well as recovering content of leaf logical extents. In this implementation of recovery, operations may include querying for graph transformations that are not known to have completed on all in-sync storage systems for a pod, as well as all leaf logical extent content modifications that are not known to have completed across all storage systems for the pod. Such querying could be based on operations since some coordinated checkpoint, or could simply be operations not known to have completed where each storage system keeps a list of operations during normal operation that have not yet been signaled as completed. In this example, graph transformations are straightforward: a graph transformation may create new things, copy old things to new things, and copy old things into two or more split new things, or they modify composite extents to modify their references to other extents. Any stored operation description found on any in-sync storage system that creates or replaces any logical extent can be copied and performed on any other storage system that does not yet have that logical extent. Operations that describe modifications to leaf or composite logical extents can apply those modifications to any in-sync storage system that had not yet applied them, as long as the involved leaf or composite logical extents have been recovered properly.</p><p id="p-0260" num="0259">In another example, as an alternative to using a logical extent graph, storage may be implemented based on a replicated content-addressable store. In a content-addressable store, for each block of data (for example, every 512 bytes, 4096 bytes, 8192 bytes or even 16384 bytes) a unique hash value (sometimes also called a fingerprint) is calculated, based on the block content, so that a volume or an extent range of a volume can be described as a list of references to blocks that have a particular hash value. In a synchronously replicated storage system implementation based on references to blocks with the same hash value, replication could involve a first storage system receiving blocks, calculating fingerprints for those blocks, identifying block references for those fingerprints, and delivering changes to one or a plurality of additional storage systems as updates to the mapping of volume blocks to referenced blocks. If a block is found to have already been stored by the first storage system, that storage system can use its reference to name the reference in each of the additional storage systems (either because the reference uses the same hash value or because an identifier for the reference is either identical or can be mapped readily). Alternately, if a block is not found by the first storage system, then content of the first storage system may be delivered to other storage systems as part of the operation description along with the hash value or identity associated with that block content. Further, each in-sync storage system's volume descriptions are then updated with the new block references. Recovery in such a store may then include comparing recently updated block references for a volume. If block references differ between different in-sync storage systems for a pod, then one version of each reference can be copied to other storage systems to make them consistent. If the block reference on one system does not exist, then it be copied from some storage system that does store a block for that reference. Virtual copy operations can be supported in such a block or hash reference store by copying the references as part of implementing the virtual copy operation.</p><p id="p-0261" num="0260">For further explanation, <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> sets forth a flow chart illustrating steps that may be performed by storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) that support a pod according to some embodiments of the present disclosure. Although depicted in less detail, the storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) depicted in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> may be similar to the storage systems described above, or any combination thereof. In fact, the storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) depicted in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> may include the same, fewer, additional components as the storage systems described above.</p><p id="p-0262" num="0261">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, a storage system (<b>5</b>-<b>402</b>) may attach (<b>5</b>-<b>508</b>) to a pod. The model for pod membership may include a list of storage systems and a subset of that list where storage systems are presumed to be in-sync for the pod. A storage system is in-sync for a pod if it is at least within a recovery of having identical idle content for the last written copy of the dataset associated with the pod. Idle content is the content after any in-progress modifications have completed with no processing of new modifications. Sometimes this is referred to as &#x201c;crash recoverable&#x201d; consistency. Storage systems that are listed as pod members but that are not listed as in-sync for the pod can be described as &#x201c;detached&#x201d; from the pod. Storage systems that are listed as pod members, are in-sync for the pod, and are currently available for actively serving data for the pod are &#x201c;online&#x201d; for the pod.</p><p id="p-0263" num="0262">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, the storage system (<b>5</b>-<b>402</b>) may attach (<b>5</b>-<b>508</b>) to a pod, for example, by synchronizing its locally stored version of the dataset (<b>5</b>-<b>426</b>) along with an up-to-date version of the dataset (<b>5</b>-<b>426</b>) that is stored on other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) in the pod that are online, as the term is described above. In such an example, in order for the storage system (<b>5</b>-<b>402</b>) to attach (<b>5</b>-<b>508</b>) to the pod, a pod definition stored locally within each of the storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) in the pod may need to be updated in order for the storage system (<b>5</b>-<b>402</b>) to attach (<b>5</b>-<b>508</b>) to the pod. In such an example, each storage system member of a pod may have its own copy of the membership, including which storage systems it last knew were in-sync, and which storage systems it last knew comprised the entire set of pod members.</p><p id="p-0264" num="0263">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, the storage system (<b>5</b>-<b>402</b>) may also receive (<b>5</b>-<b>510</b>) a request to read a portion of the dataset (<b>5</b>-<b>426</b>) and the storage system (<b>5</b>-<b>402</b>) may process (<b>5</b>-<b>512</b>) the request to read the portion of the dataset (<b>5</b>-<b>426</b>) locally. Readers will appreciate that although requests to modify (e.g., a write operation) the dataset (<b>5</b>-<b>426</b>) require coordination between the storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) in a pod, as the dataset (<b>5</b>-<b>426</b>) should be consistent across all storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) in a pod, responding to a request to read a portion of the dataset (<b>5</b>-<b>426</b>) does not require similar coordination between the storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>). As such, a particular storage system (<b>5</b>-<b>402</b>) that receives a read request may service the read request locally by reading a portion of the dataset (<b>5</b>-<b>426</b>) that is stored within the storage system's (<b>5</b>-<b>402</b>) storage devices, with no synchronous communication with other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) in the pod. Read requests received by one storage system for a replicated dataset in a replicated cluster are expected to avoid any communication in the vast majority of cases, at least when received by a storage system that is running within a cluster that is also running nominally. Such reads should normally be processed simply by reading from the local copy of a clustered dataset with no further interaction required with other storage systems in the cluster</p><p id="p-0265" num="0264">Readers will appreciate that the storage systems may take steps to ensure read consistency such that a read request will return the same result regardless of which storage system processes the read request. For example, the resulting clustered dataset content for any set of updates received by any set of storage systems in the cluster should be consistent across the cluster, at least at any time updates are idle (all previous modifying operations have been indicated as complete and no new update requests have been received and processed in any way). More specifically, the instances of a clustered dataset across a set of storage systems can differ only as a result of updates that have not yet completed. This means, for example, that any two write requests which overlap in their volume block range, or any combination of a write request and an overlapping snapshot, compare-and-write, or virtual block range copy, must yield a consistent result on all copies of the dataset. Two operations cannot yield a result as if they happened in one order on one storage system and a different order on another storage system in the replicated cluster.</p><p id="p-0266" num="0265">Furthermore, read requests may be time order consistent. For example, if one read request is received on a replicated cluster and completed and that read is then followed by another read request to an overlapping address range which is received by the replicated cluster and where one or both reads in any way overlap in time and volume address range with a modification request received by the replicated cluster (whether any of the reads or the modification are received by the same storage system or a different storage system in the replicated cluster), then if the first read reflects the result of the update then the second read should also reflect the results of that update, rather than possibly returning data that preceded the update. If the first read does not reflect the update, then the second read can either reflect the update or not. This ensures that between two read requests &#x201c;time&#x201d; for a data segment cannot roll backward.</p><p id="p-0267" num="0266">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, the storage system (<b>5</b>-<b>402</b>) may also detect (<b>5</b>-<b>514</b>) a disruption in data communications with one or more of the other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>). A disruption in data communications with one or more of the other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) may occur for a variety of reasons. For example, a disruption in data communications with one or more of the other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) may occur because one of the storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) has failed, because a network interconnect has failed, or for some other reason. An important aspect of synchronous replicated clustering is ensuring that any fault handling doesn't result in unrecoverable inconsistencies, or any inconsistency in responses. For example, if a network fails between two storage systems, at most one of the storage systems can continue processing newly incoming I/O requests for a pod. And, if one storage system continues processing, the other storage system can't process any new requests to completion, including read requests.</p><p id="p-0268" num="0267">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, the storage system (<b>5</b>-<b>402</b>) may also determine (<b>5</b>-<b>516</b>) whether to the particular storage system (<b>5</b>-<b>402</b>) should remain online as part of the pod. As mentioned above, to be &#x2018;online&#x2019; as part of a pod, a storage system must consider itself to be in-sync for the pod and must be communicating with all other storage systems it considers to be in-sync for the pod. If a storage system can't be certain that it is in-sync and communicating with all other storage systems that are in-sync, then it may stop processing new incoming requests to access the dataset (<b>5</b>-<b>426</b>). As such, the storage system (<b>5</b>-<b>402</b>) may determine (<b>5</b>-<b>516</b>) whether to the particular storage system (<b>5</b>-<b>402</b>) should remain online as part of the pod, for example, by determining whether it can communicate with all other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) it considers to be in-sync for the pod (e.g., via one or more test messages), by determining whether the all other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) it considers to be in-sync for the pod also consider the storage system (<b>5</b>-<b>402</b>) to be attached to the pod, through a combination of both steps where the particular storage system (<b>5</b>-<b>402</b>) must confirm that it can communicate with all other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) it considers to be in-sync for the pod and that all other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) it considers to be in-sync for the pod also consider the storage system (<b>5</b>-<b>402</b>) to be attached to the pod, or through some other mechanism.</p><p id="p-0269" num="0268">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, the storage system (<b>5</b>-<b>402</b>) may also, responsive to affirmatively (<b>5</b>-<b>518</b>) determining that the particular storage system (<b>5</b>-<b>402</b>) should remain online as part of the pod, keep (<b>5</b>-<b>522</b>) the dataset (<b>5</b>-<b>426</b>) on the particular storage system (<b>5</b>-<b>402</b>) accessible for management and dataset operations. The storage system (<b>5</b>-<b>402</b>) may keep (<b>5</b>-<b>522</b>) the dataset (<b>5</b>-<b>426</b>) on the particular storage system (<b>5</b>-<b>402</b>) accessible for management and dataset operations, for example, by accepting requests to access the version of the dataset (<b>5</b>-<b>426</b>) that is stored on the storage system (<b>5</b>-<b>402</b>) and processing such requests, by accepting and processing management operations associated with the dataset (<b>5</b>-<b>426</b>) that are issued by a host or authorized administrator, by accepting and processing management operations associated with the dataset (<b>5</b>-<b>426</b>) that are issued by one of the other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) in the pod, or in some other way.</p><p id="p-0270" num="0269">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, the storage system (<b>5</b>-<b>402</b>) may also, responsive to determining that the particular storage system should not (<b>5</b>-<b>520</b>) remain online as part of the pod, make (<b>5</b>-<b>524</b>) the dataset (<b>5</b>-<b>426</b>) on the particular storage system (<b>5</b>-<b>402</b>) inaccessible for management and dataset operations. The storage system (<b>5</b>-<b>402</b>) may make (<b>5</b>-<b>524</b>) the dataset (<b>5</b>-<b>426</b>) on the particular storage system (<b>5</b>-<b>402</b>) inaccessible for management and dataset operations, for example, by rejecting requests to access the version of the dataset (<b>5</b>-<b>426</b>) that is stored on the storage system (<b>5</b>-<b>402</b>), by rejecting management operations associated with the dataset (<b>5</b>-<b>426</b>) that are issued by a host or other authorized administrator, by rejecting management operations associated with the dataset (<b>5</b>-<b>426</b>) that are issued by one of the other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) in the pod, or in some other way.</p><p id="p-0271" num="0270">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, the storage system (<b>5</b>-<b>402</b>) may also detect (<b>5</b>-<b>526</b>) that the disruption in data communications with one or more of the other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) has been repaired. The storage system (<b>5</b>-<b>402</b>) may detect (<b>5</b>-<b>526</b>) that the disruption in data communications with one or more of the other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) has been repaired, for example, by receiving a message from the one or more of the other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>). In response to detecting (<b>5</b>-<b>526</b>) that the disruption in data communications with one or more of the other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) has been repaired, the storage system (<b>5</b>-<b>402</b>) may make (<b>5</b>-<b>528</b>) the dataset (<b>5</b>-<b>426</b>) on the particular storage system (<b>5</b>-<b>402</b>) accessible for management and dataset operations.</p><p id="p-0272" num="0271">Readers will appreciate that the example depicted in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> describes an embodiment in which various actions are depicted as occurring within some order, although no ordering is required. Furthermore, other embodiments may exist where the storage system (<b>5</b>-<b>402</b>) only carries out a subset of the described actions. For example, the storage system (<b>5</b>-<b>402</b>) may perform the steps of detecting (<b>5</b>-<b>514</b>) a disruption in data communications with one or more of the other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>), determining (<b>5</b>-<b>516</b>) whether to the particular storage system (<b>5</b>-<b>402</b>) should remain in the pod, keeping (<b>5</b>-<b>522</b>) the dataset (<b>5</b>-<b>426</b>) on the particular storage system (<b>5</b>-<b>402</b>) accessible for management and dataset operations or making (<b>5</b>-<b>524</b>) the dataset (<b>5</b>-<b>426</b>) on the particular storage system (<b>5</b>-<b>402</b>) inaccessible for management and dataset operations without first receiving (<b>5</b>-<b>510</b>) a request to read a portion of the dataset (<b>5</b>-<b>426</b>) and processing (<b>5</b>-<b>512</b>) the request to read the portion of the dataset (<b>5</b>-<b>426</b>) locally. Furthermore, the storage system (<b>5</b>-<b>402</b>) may detect (<b>5</b>-<b>526</b>) that the disruption in data communications with one or more of the other storage systems (<b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) has been repaired and make (<b>5</b>-<b>528</b>) the dataset (<b>5</b>-<b>426</b>) on the particular storage system (<b>5</b>-<b>402</b>) accessible for management and dataset operations without first receiving (<b>5</b>-<b>510</b>) a request to read a portion of the dataset (<b>5</b>-<b>426</b>) and processing (<b>5</b>-<b>512</b>) the request to read the portion of the dataset (<b>5</b>-<b>426</b>) locally. In fact, none of the steps described herein are explicitly required in all embodiments as prerequisites for performing other steps described herein.</p><p id="p-0273" num="0272">For further explanation, <figref idref="DRAWINGS">FIG. <b>5</b>B</figref> sets forth a flow chart illustrating steps that may be performed by storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) that support a pod according to some embodiments of the present disclosure. Although depicted in less detail, the storage systems (<b>5</b>-<b>402</b>. <b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) depicted in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref>, <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref>, <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>6</b>A or <b>6</b>B</figref>, or any combination thereof. In fact, the storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>, <b>5</b>-<b>406</b>) depicted in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref> may include the same, fewer, additional components as the storage systems described above.</p><p id="p-0274" num="0273">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, two or more of the storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>) may each identify (<b>5</b>-<b>608</b>) a target storage system (<b>5</b>-<b>618</b>) for asynchronously receiving the dataset (<b>5</b>-<b>426</b>). The target storage system (<b>5</b>-<b>618</b>) for asynchronously receiving the dataset (<b>5</b>-<b>426</b>) may be embodied, for example, as a backup storage system that is located in a different data center than either of the storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>) that are members of a particular pod, as cloud storage that is provided by a cloud services provider, or in many other ways. Readers will appreciate that the target storage system (<b>5</b>-<b>618</b>) is not one of the plurality of storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>) across which the dataset (<b>5</b>-<b>426</b>) is synchronously replicated, and as such, the target storage system (<b>5</b>-<b>618</b>) initially does not include an up-to-date local copy of the dataset (<b>5</b>-<b>426</b>).</p><p id="p-0275" num="0274">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, two or more of the storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>) may each also identify (<b>5</b>-<b>610</b>) a portion of the dataset (<b>5</b>-<b>426</b>) that is not being asynchronously replicated to the target storage (<b>5</b>-<b>618</b>) system by any of the other storages systems that are members of a pod that includes the dataset (<b>5</b>-<b>426</b>). In such an example, the storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>) may each asynchronously replicate (<b>5</b>-<b>612</b>), to the target storage system (<b>5</b>-<b>618</b>), the portion of the dataset (<b>5</b>-<b>426</b>) that is not being asynchronously replicated to the target storage system by any of the other storages systems. Consider an example in which a first storage system (<b>5</b>-<b>402</b>) is responsible for asynchronously replicating a first portion (e.g., a first half of an address space) of the dataset (<b>5</b>-<b>426</b>) to the target storage system (<b>5</b>-<b>618</b>). In such an example, the second storage system (<b>5</b>-<b>404</b>) would be responsible for asynchronously replicating a second portion (e.g., a second half of an address space) of the dataset (<b>5</b>-<b>426</b>) to the target storage system (<b>5</b>-<b>618</b>), such that the two or more storage systems (<b>5</b>-<b>402</b>, <b>5</b>-<b>404</b>) collectively replicate the entire dataset (<b>5</b>-<b>426</b>) to the target storage system (<b>5</b>-<b>618</b>).</p><p id="p-0276" num="0275">Readers will appreciate that through the use of pods, as described above, the replication relationship between two storage systems may be switched from a relationship where data is asynchronously replicated to a relationship where data is synchronously replicated. For example, if storage system A is configured to asynchronously replicate a dataset to storage system B, creating a pod that includes the dataset, storage system A as a member, and storage system B as a member can switch the relationship where data is asynchronously replicated to a relationship where data is synchronously replicated. Likewise, through the use of pods, the replication relationship between two storage systems may be switched from a relationship where data is synchronously replicated to a relationship where data is asynchronously replicated. For example, if a pod is created that includes the dataset, storage system A as a member, and storage system B as a member, by merely unstretching the pod (to remove storage system A as a member or to remove storage system B as a member), a relationship where data is synchronously replicated between the storage systems can immediately be switched to a relationship where data is asynchronously replicated. In such a way, storage systems may switch back-and-forth as needed between asynchronous replication and synchronous replication.</p><p id="p-0277" num="0276">This switching can be facilitated by the implementation relying on similar techniques for both synchronous and asynchronous replication. For example, if resynchronization for a synchronously replicated dataset relies on the same or a compatible mechanism as is used for asynchronous replication, then switching to asynchronous replication is conceptually identical to dropping the in-sync state and leaving a relationship in a state similar to a &#x201c;perpetual recovery&#x201d; mode. Likewise, switching from asynchronous replication to synchronous replication can operate conceptually by &#x201c;catching up&#x201d; and becoming in-sync just as is done when completing a resynchronization with the switching system becoming an in-sync pod member.</p><p id="p-0278" num="0277">Alternatively, or additionally, if both synchronous and asynchronous replication rely on similar or identical common metadata, or a common model for representing and identifying logical extents or stored block identities, or a common model for representing content-addressable stored blocks, then these aspects of commonality can be leveraged to dramatically reduce the content that may need to be transferred when switching to and from synchronous and asynchronous replication. Further, if a dataset is asynchronously replicated from a storage system A to a storage system B, and system B further asynchronously replicates that data set to a storage system C, then a common metadata model, common logical extent or block identities, or common representation of content-addressable stored blocks, can dramatically reduce the data transfers needed to enable synchronous replication between storage system A and storage system C.</p><p id="p-0279" num="0278">Readers will further appreciate that that through the use of pods, as described above, replication techniques may be used to perform tasks other than replicating data. In fact, because a pod may include a set of managed objects, tasks like migrating a virtual machine may be carried out using pods and the replication techniques described herein. For example, if virtual machine A is executing on storage system A, by creating a pod that includes virtual machine A as a managed object, storage system A as a member, and storage system B as a member, virtual machine A and any associated images and definitions may be migrated to storage system B, at which time the pod could simply be destroyed, membership could be updated, or other actions may be taken as necessary.</p><p id="p-0280" num="0279">For further explanation <figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a configurable replication system that provides continuous replication with minimal batching and an adjustable recovery point objective. In contrast to the example storage systems described above, which describes use of pods in implementing synchronous replication, in this example, pods are used for asynchronous, or near-synchronous replication.</p><p id="p-0281" num="0280">However, as described further below, while replication may be asynchronous, efficient use of lightweight journals, also referred to as metadata logs, allows for a short, typical recovery point (the time difference between last update on a source data repository and the clock value of the source data repository associated with the latest consistent dataset available at a target data repository) that can be on the order of a few to 50 or 100 milliseconds, or a short intrinsic or configured recovery point objective (RPO), where in some cases, the RPO may be on the order of a few tens of milliseconds up to some specified number of minutes. In some examples, the RPO limit may be more of a function of a typical maximum transfer time. As an illustrative scenario, the earth's moon is a little over one light-second away from the earth, so with sufficient bandwidth to avoid queue delay, an RPO to the moon of 1.2 seconds is possible with a lightweight journal implementation (receiving an acknowledgement from the moon for the primary to confirm the recovery point will take at least another 1.2 seconds).</p><p id="p-0282" num="0281">In some implementations, the configurable replication system provides for disaster recovery from a failure at a source data repository based on a target data repository being able to provide read and write access with a consistent version of the source data repository in response to the failure of the source data repository. As an example, consider a set of clock values associated with an original dataset that is being updated, where a source time represents a clock value for the source dataset, and includes all updates which were signaled as completed on the original dataset prior to that time and excludes all updates which were received to be processed against the dataset after that time. In this example, any updates which were received to be processed against the dataset at the source time but had not yet been signaled as completed can in general be arbitrarily included or excluded barring any transactional interdependencies.</p><p id="p-0283" num="0282">Further, a snapshot may represent one such source time for a dataset, and where rolling lightweight checkpoints may represent a sequence of dataset source times. In near-sync replication, checkpoints may be applied as they come in or when they are completely ready to be applied. As a result, in some examples, a tracking dataset always represents some replicated source time clock value which is generally some amount behind the live dataset's source time clock value. In this example, the difference between the replicated dataset source time clock value and the live dataset source time clock value may be reported as the current available &#x201c;recovery point&#x201d;&#x2014;the distance between the replicated dataset source time clock value and the live dataset source time clock (though propagation delays likely mean that neither source nor target know exactly what this time distance is).</p><p id="p-0284" num="0283">In some implementations, the lightweight journals may be a basis for implementing continuous data protection&#x2014;with or without any implementation of data replication. In some examples, continuous data protection provides relatively fine-grained versioning of a dataset for extended periods of time, to allow roll-back or other access to any of those fine-grained versions. For example, these versions can be examined to determine when some update or corruption occurred, allowing a roll-back or other access (such as the formation of a usable snapshot or clone) to the version immediately prior to that update. In some cases, it makes sense to provide access to both the pre-change/pre-corruption dataset as well as the more recent data (or even a set of points-in-time of the dataset before or since the time of the update/corruption) so that other changes can be copied or otherwise reconciled, or for diagnostic purposes.</p><p id="p-0285" num="0284">Further, continuing with this example, in continuous data protection, checkpoints of a dataset may be replayed up to some limit in order to construct a consistent image. In some cases, such checkpoints may be transformed into a read-only snapshot, or the dataset may also be cloned (or the read-only snapshot may be cloned) to form a read-write volume that may be used for various purposes. In this example, an implementation of continuous data protection may clone a volume to match some point in time, test it to determine whether the volume includes or excludes some data or some corruption, and then if needed re-clone the volume to match some other point in time and test the volume again. In this example, when a point-in-time is determined, that point-in-time may be used as a basis to generate a primary volume or simply copy data out of the volume at that point-in-time.</p><p id="p-0286" num="0285">Further still, in some implementations, continuous data protection may provide more granular access to these named source time clock values from the source dataset, with granularity limited to the granularity of checkpoints. In some cases, continuous data protection could be either local (the checkpoints are retained on a local storage system and are available for local access), or they can be on a replication target (the checkpoints are retained on a replication target), or both, with each possibly having different retention periods and models for merging checkpoints or converting them to long-duration snapshots.</p><p id="p-0287" num="0286">In some implementations, a &#x2018;pod&#x2019;, as the term is used here and throughout the present application, may be embodied as a management entity that represents a dataset, a set of managed objects and management operations, a set of access operations to modify or read the dataset, and a plurality of storage systems. Such management operations may modify or query managed objects through a storage system with proper access. Each storage system may store a separate copy of the dataset as a proper subset of the datasets stored and advertised for use by the storage system, where operations to modify managed objects or the dataset performed and completed through any one storage system are reflected in subsequent management objects to query the pod or subsequent access operations to read the dataset.</p><p id="p-0288" num="0287">In some implementations, a replication relationship is formed as a set of storage systems <b>602</b>, <b>624</b> that replicate some dataset <b>612</b> between independent stores, where each storage system <b>602</b>, <b>624</b> may have its own copy and its own separate internal management of relevant data structures for defining storage objects, for mapping objects to physical storage, for deduplication, for defining the mapping of content to snapshots, and so on. In this way, a replication system may use a common management model that is a same, or similar, management model, and use a same, or similar, implementation model and persistent data structures for both synchronous replication and asynchronous replication.</p><p id="p-0289" num="0288">As illustrated, a source data repository <b>602</b> receives storage system operations <b>652</b> and may communicate with a target data repository <b>624</b> to generate replica data. In this example, the source data repository <b>602</b> may be similar to computing device <b>350</b> or similar to a storage system <b>100</b>, <b>306</b>, <b>318</b>, as described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>3</b>D</figref>. While exemplary systems are depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the components illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref> are not intended to be exhaustive or limiting.</p><p id="p-0290" num="0289">As noted above, incoming data storage operations <b>652</b> may be received and handled by the source data repository <b>602</b>, and the data storage operations that update or modify a volume <b>658</b>, or more generally, modify one or more datasets, may be streamed or transmitted to the target data repository <b>624</b> as the data storage operations arrive. In other words, the source data repository <b>602</b> may be considered &#x2018;active&#x2019; in that the source data repository <b>602</b> accepts write operations and other operations that may modify the stored data, where the target data repository <b>624</b> may be considered &#x2018;passive&#x2019; in that the target data repository <b>624</b> may accept read operations, but not storage operations that may modify the stored data.</p><p id="p-0291" num="0290">In this example, the source data repository <b>602</b> maintains a metadata log <b>604</b>, which may be referred to as a journal of modifying data storage operations ordered by checkpoint. In some cases, a journal may equivalently be referred to as a lightweight journal due to the journal including only metadata information, but little or no storage data provided by a user to be stored. In some examples, the metadata log <b>604</b> may be generated or updated during a flush of storage data from NVRAM to a backend bulk storage&#x2014;where a storage system architecture with NVRAM, and example backend bulk storage, are described above with reference to <figref idref="DRAWINGS">FIG. <b>2</b>D</figref>. In some examples, the metadata, such as checkpoints <b>604</b>, may be stored in the source data repository <b>602</b> as metadata, without being included within a journal, or metadata log structure, where the journal, or metadata log <b>604</b> may be constructed on demand, such as in response to one or more checkpoints being ready for transmission to a target data repository <b>624</b>.</p><p id="p-0292" num="0291">In some implementations, a checkpoint may also be referred to as an ordered &#x201c;lightweight checkpoint&#x201d; of a dataset. In some examples, as described elsewhere, a checkpoint may include metadata describing a set of updates, but where the checkpoints only reference the actual data associated with a corresponding set of updates by holding references to where the data for a given checkpoint is stored in the normal course of operations for the storage system. A given set of updates may begin to be staged in NVRAM, or a first tier of a storage system's storage, before the set of updates, or at least a portion of these of updates is flushed to backing storage, or a second tier of the storage system.</p><p id="p-0293" num="0292">However, in this example, the data referenced by a set of updates within a given checkpoint may survive logical (or address range) overwrites and garbage collection and is not duplicated into a separate metadata journal. Further, lightweight checkpoints may be ordered in that to arrive at a complete and consistent point-in-time image of some point in time of the original dataset, each set of updates described in each lightweight checkpoint between some prior consistent image and the point in time corresponding to a particular lightweight checkpoint should either be applied to form that point-in-time image or the update could be determined to be unnecessary, for example, being due to an overwrite or deletion. In some examples, lightweight checkpoints may be merged, which can be beneficial because merging may release some backing store data that has been overwritten or deleted, for example by having been written in an earlier checkpoint and overwritten in a later one that is merged with the earlier one (in which case the data for the earlier write may no longer be needed), thereby allowing some otherwise held data to be garbage collected.</p><p id="p-0294" num="0293">Continuing with this example, such lightweight checkpoints are intended to represent very fine-grained consistency point moments in time as consistency points, with each lightweight checkpoint including a set of updates that have been signaled as completed, excluding a set of updates whose processing has not yet started, and potentially including or excluding updates that are concurrent with the moment in time the checkpoint represents. In some example, formation of a new lightweight checkpoint or a duration, or period, between two checkpoints may be based on time slices, such as every few milliseconds, or operation count slices, such as every 50 to 500 update operations, or based on transfer size or some more complex relationship to update operations, such as counting a few megabytes of modifications or some number of logical extent updates, or they can relate to some explicit operation, such as an operation to explicitly tag or name a particular point-in-time so it can be referenced later such as by a program noticing or being notified when it is received and applied by to replication target, any combination of these and other triggers. Such tags or names could also be searched for within a continuous data protection implementation.</p><p id="p-0295" num="0294">In some implementations, lightweight checkpoints may differ from snapshots in that they do not affect the durable structure of the storage system beyond whatever side structure is used to store them, apart from the garbage collection or overwrite holds, and lightweight checkpoints may be discarded with minimal effect, other than the release of those garbage collection or overwrite holds. Further, in some cases, lightweight checkpoints may also lack individual administrative handles, perhaps apart from lightweight checkpoints that are explicitly tagged or named. In some example, lightweight checkpoints exist almost exclusively as an ordered list of metadata bundles describing updates, where the ordered list of metadata may be stored in a log-style structure. Further, lightweight checkpoints may be persistent or not persistent, in dependence at least upon an intended use of the lightweight checkpoint. In particular, near-sync replication may have crash or resynchronization recovery mechanisms that may operate independently of lightweight checkpoints and that may then not require persisting of lightweight checkpoint logs, while the target of replication might separately benefit from persisting checkpoints on the target storage system for fault recovery purposes, such as part of making application of lightweight checkpoints atomic.</p><p id="p-0296" num="0295">In some implementations, if the metadata for a lightweight checkpoint represents logical composite and leaf extents, as described in prior patents, then a lightweight checkpoint may be a set of descriptions for updating these logical composite and leaf extents which are themselves metadata descriptions that reference stored data by content identifier references In some cases, use of content identifiers irrespective of the use of an extent model may also be beneficial in that such use preserves information about duplicates and may be used as part of a strategy to avoid transfer of content that a target storage system may already be known to store. For further clarification, these prior patents include, U.S. patent Ser. Nos. 16/050,385, 62/598,989, and 15/842,850, which are incorporated herein for all purposes.</p><p id="p-0297" num="0296">Continuing with this example, the structure of a metadata representation of a dataset may be particularly effective in a Flash storage system because Flash does not allow overwrite in place at the chip level and may generally be driven, at some level, by garbage collection algorithms that can readily account for a wide variety of references that have holds on written data. In some cases, some details may account for the NVRAM aspects which do not have to follow the same write-elsewhere-with-garbage-collection model, but at least the bulk data writes for lightweight checkpoints are not separate writes that require separate storage.</p><p id="p-0298" num="0297">In some implementations, and as described in other sections of this reference, some applications of lightweight checkpoints may include normal operation of near-sync replication (in contrast to initialization or resynchronization), which may also be referred to as asynchronous replication. In this example, lightweight checkpoints may be transferred over a network link to some target repository that may then apply the lightweight checkpoints to a tracking copy of the original dataset, with lightweight checkpoints (and their referenced data) being held at least until the tracking copy has been updated.</p><p id="p-0299" num="0298">In some cases, if checkpoints may be received or applied out-of-order, then all intermediate checkpoints may need to be received and applied before the lightweight checkpoint on the source system can be released. Generally, lightweight checkpoints should be applied atomically, such as by using some transaction mechanism. One transaction mechanism is to receive the metadata for a lightweight checkpoint, receive all the data content for a lightweight checkpoint and storing it locally on the target, and then roll forward the tracking copy to incorporate the metadata updates in the lightweight checkpoint with its data references updated to reference the data content stored locally on the target.</p><p id="p-0300" num="0299">Further, other applications of lightweight checkpoints may include:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0300">In some examples, a tracking copy may be converted into a snapshot or a clone to provide a stable image at some point in time, thereby allowing use of a point-in-time image for testing purposes or failover purposes;</li>        <li id="ul0002-0002" num="0301">In some examples, if a source-to-target interconnect and the target storage repository are not roughly keeping up with the rate that the source storage system itself is receiving data, storing it, and forming and transferring lightweight checkpoints, then these lightweight checkpoints can start building up. In this scenario, there are several reactions to this that can be used: lightweight checkpoints could be merged to reduce their cost (the source dataset points-in-time associated with named or tagged checkpoints might be preferentially retained); back pressure could be put on the source storage system to reduce the rate at which it receives, processes, or completes updates; a subset of checkpoints could be converted to more durable snapshots; or lightweight checkpoint-based replication could be discarded in favor of replication based on periodic snapshots. In some cases, some number of periodic snapshots might already be kept for resync or connection loss/reconnect purposes so switching to snapshot replication may already be fully ready to go&#x2014;meaning that lightweight checkpoints since the last snapshot may simply be discarded if replication is not keeping up sufficiently for the lightweight snapshots to be useful (further clarification may be found within U.S. patent Ser. No. 15/842,850, which is incorporated herein for all purposes);</li>        <li id="ul0002-0003" num="0302">In some examples, connection loss or other kinds of interruptions to replication may generally be handled by switching to some other scheme, such as snapshot based replication, or by using a resync model similar to what is described for synchronous replication recovery, though without the need to catch all the way up at the very end;</li>        <li id="ul0002-0004" num="0303">In some examples, the transfer of data can be initiated by the sender side by simply sending the referenced data to the target storage system along with sending the lightweight checkpoint metadata updates. Further, the transfer of data may instead be initiated by the target storage system: if the lightweight checkpoint metadata lists content identifiers, then the target storage system can reuse references to content it already stores but can then request retrieval of content it does not current store. This can reduce total bandwidth required, though if the network link has to be sized for the update rate, the benefit may be low; and</li>        <li id="ul0002-0005" num="0304">In some examples, if the source storage system itself stores content compressed as some kind of compressed blocks, then the compressed blocks may in many cases be transferred directly rather than being uncompressed and then possibly recompressed before being transmitted over the network.</li>    </ul>    </li></ul></p><p id="p-0301" num="0305">In some implementations, lightweight checkpoints may be used to implement continuous data protection either on the original storage system&#x2014;with or without replication being involved&#x2014;or on a replication target system by storing the lightweight checkpoints on the target storage system rather than simply applying and then discarding them. In continuous data protection, various point-in-time images of a dataset can be accessed by rolling forward a copy of a dataset to include all lightweight checkpoints up to the lightweight checkpoint corresponding to some source dataset point-in-time of interest.</p><p id="p-0302" num="0306">For example, if the storage system also implements durable snapshots, then only lightweight checkpoints since the point-in-time of the most immediately prior snapshot may need to be applied. Generally, higher granularity is more interesting for more recent history of a dataset and less granularity is needed farther back, allowing for the possibility of ever more aggressive lightweight checkpoint merging as points-in-time recede, or eventually discarding them in favor of less frequent snapshots.</p><p id="p-0303" num="0307">Further, if continuous data protection is used to locate a point in time just before where an unwanted change or corruption was introduced, then relatively fine grained lightweight checkpoints (milliseconds to a few seconds to every few minutes) might only need to be kept until plenty of time has elapsed to ensure that corruption will have been noticed and recovery procedures started. After that, 30 minute or hourly or even daily snapshots might be preferable (or such rollbacks may be considered unnecessary). Any specific lightweight checkpoint can be converted into a durable snapshots if snapshots hadn't been created explicitly. If lightweight checkpoints can be named or tagged, continuous data protection could support locating and accessing those named lightweight checkpoints.</p><p id="p-0304" num="0308">In some implementations, as noted below, under some storage system conditions, or in response to a user-specified configuration, near-synchronous replication may be transitioned to different type of replication, including periodic replication or synchronous replication. Further, in some implementations, a source data storage system may implement synchronous replication that is pod-based among a cluster of storage systems, but where one or more of the source data storage systems also implement lightweight checkpoints for near-synchronous replication with a target storage system that may be initiated in the event of a communication fault with the other storage system in the cluster of storage systems&#x2014;thereby allowing the source storage system to maintain both synchronous data replication over near distances and to maintain data resiliency over longer distances. Further, in some examples, RPO may be configurable, where the time or operation size of lightweight checkpoints may be configured or adjusted based on, at least, available network bandwidth or supporting flow-control (as discussed above). In some cases, if a set of synchronously replicating storage systems exchange checkpoint information between them as part of their operation, then near-synchronous replication can operate and continue from any of the storage systems that synchronously replicate the checkpoint information, including continuing after the failure of one such storage system, including parallel transfer of data and metadata from multiple of the synchronously replicating storage systems. Such parallel data transfer could, for example, involve the target of near-synchronous replication requesting data for referenced composite or logical extents or content identifiers from any set or subset of the synchronously replicating storage systems.</p><p id="p-0305" num="0309">Further, in some implementations, an addition to near-synchronous replication is short-distance synchronous replication of metadata and data updates, combined with longer-distance non-synchronous replication of lightweight checkpoints. In such an example, this may provide what is sometimes called &#x201c;bunker&#x201d; replication where a storage system within synchronous replication distance is sized to store enough for in-transit data and metadata but is not sized to store a complete dataset. In this example, if the primary (complete) copy fails but the intermediate &#x201c;bunker&#x201d; storage survives, then the further distant non-synchronous target can be caught up by applying the updates that were stored synchronously on the bunker storage. Further, in this example, if both primary and bunker storage fail, then at least the longer-distance storage is consistent and within the longer distance RPO. Continuing with this example, the lightweight checkpoints may be formed and transferred by either the bunker storage system or by the primary storage system, or can be formed and transferred by a combination of the primary storage system and the bunker storage system.</p><p id="p-0306" num="0310">In some implementations, a metadata log <b>604</b> schema may be sorted by (pod, checkpoint), which allows for traversal in a correct order, where a same schema may be used on both a source data repository <b>602</b> and a target data repository <b>624</b>. In this example, a write operation may be encoded in a metadata log <b>604</b> by indicating both a physical extent identification along with address information of all writes for a given checkpoint. Further, in some cases, a metadata log <b>604</b> may contain operations to modify a metadata representation <b>614</b> of the dataset that correspond to system operations, such as copy-on-write (CoW). For example, modifications to a metadata representation <b>614</b> may include modifications due to an XCOPY, WSAME, snapshots, CoW, among others. An example of such operation-style metadata may include a sequence of updates to logical and composite extents, with any written content tied to a checkpoint being retained at least until the checkpoint is no longer needed for replication or other purposes. In this case, the metadata log may contain the logical and composite logical extent updates including references to any stored data, with the stored data being a held reference to the content stored in the storage system for its regular use but with any garbage collection or overwrite held off as long as the checkpoint is retained. Further, in some cases, content overwrites within a checkpoint (including within merged checkpoints if checkpoint merging is supported) may discard the hold on the earlier content replaced by later content described by the checkpoint. In some examples, a metadata log <b>604</b> may include metadata representation <b>614</b> identifier allocations on a source data repository <b>602</b>, which allows the target data repository <b>624</b> to avoid trying to look up content identifiers that do not exist on the target data repository <b>624</b>.</p><p id="p-0307" num="0311">In different embodiments, the lifetime of checkpoint entries <b>606</b><i>a</i>, <b>606</b><i>b </i>may be configurable to allow for different options for data recovery, including a lifetime extending for an ongoing length of storage services that allows for continuous data protection. In this example, the configurable replication system may provide continuous replication, whereas data storage operations that modify a volume or dataset arrive, the storage operations are grouped into checkpoints, and where a given checkpoint may include varying numbers of storage operations. In some examples, a given checkpoint may include metadata for up to 100 storage operations. As noted herein, because a garbage collection process may keep stored data based on references to the stored data location being referenced by either general storage system references within the storage system's general metadata or by a metadata log that includes checkpoints, then the length of the lifetime of the checkpoints corresponds to a length of time for a recovery window for continuous data protection.</p><p id="p-0308" num="0312">In this example, a checkpoint may be considered a smallest unit of data consistency, where if the metadata log <b>626</b> received at the target data repository <b>624</b> includes a particular checkpoint, then a replica dataset <b>634</b> that is generated by replaying the storage operations in the particular checkpoint will include all storage operations from all checkpoints that were generated prior to the particular checkpoint&#x2014;and such a policy provides for a crash consistent recovery point for the replica dataset <b>634</b>. Further, if there is a snapshot that is from a point-in-time earlier than the desired replay point, then only replay checkpoints since that snapshot may be needed during a recovery. In this example, checkpoints may be merged to allow garbage collection of overwritten data, and checkpoints may also be periodically converted to snapshots if that results in a cleaner format or a better or simpler relationship with garbage collection.</p><p id="p-0309" num="0313">In some implementations, snapshots may be used to coordinate a point in time in the update stream. For example, an application can make some update then issue a snapshot request, and if snapshots are a type of update that is replicated, then when the snapshot appears on the target storage system, that point in time for the application is present. In this example, this could be generalized to some kind of tag, such that a snapshot is not necessarily needed. Further in this example, if some metadata tag is set on a dataset, or on some component within a dataset, and that tag is handled as a type of update within the log/checkpoint model, then a monitoring program on the target storage system could detect when that point in time of the source dataset has been reached on the target by noticing the appearance of the tag. The storage system could further support a means of notifying programs waiting for such snapshots or named or tagged checkpoints being received and processed on a target storage system. Yet further, when the target storage system has received and processed such snapshots or named or tagged checkpoints, it could send a notification back to the source storage system, which could then, in turn, notify interested programs that the snapshot or named or tagged checkpoint is known to have been received and processed on the target system. Continuing with this example, such a process could be used, for example, by a program running against the source storage system that updates some data, tags a checkpoint, and then takes some action when notified by the source storage system that the tagged checkpoint (and thus the update) is known to have been replicated. For example, a high level task could perform a set of updates which are replicated, and where the action taken is that aspects of the continue only after receiving that notification. In some cases, this in turn allows higher level tasks to be replicated effectively synchronously across long distances even when performing many smaller operations that are not themselves replicated synchronously. For example, a web application might use this to ensure that some requested update to, for example, a user profile is durable across distances before a web page shows the durable change to the user profile.</p><p id="p-0310" num="0314">While in this example, replication is described in the context of replicating a &#x201c;volume&#x201d;, in general, the described replication techniques may be applied to any generalized dataset. In other words, in the general case, replication applies to a dataset, which may include one or more volumes, and/or one or more other types of data or collections of data, at a given point in time. In some cases, a dataset may be a dataset specified by a pod, where in a pod the actual set of volumes may change as volumes are added to and removed from the pod, and tracking will reflect that by adding and removing volumes. Further, in some examples, continuous data protection of a pod may result in volumes existing or not existing based on which checkpoint we roll backward to or forward to, and on the volume membership at the pod's source time for that checkpoint.</p><p id="p-0311" num="0315">Continuing with this example, each incoming write operation may be persisted as described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>3</b>D</figref>, where in addition to the source volume <b>658</b> being updated, a reference to the storage location of the data corresponding to the write operation is added to the metadata log <b>604</b>. In this way, the metadata log <b>604</b> may serve as a buffer that allows recovery after a network outage and support bursts of write operations without impeding the reception or handling of storage operations by the source data repository <b>602</b>. In this example, as checkpoints <b>606</b><i>a</i>, <b>606</b><i>b </i>are completed and created within the metadata log <b>604</b>, the checkpoints <b>606</b><i>a</i>, <b>606</b><i>b </i>may be replicated to the target data repository <b>624</b> by, for example, transmission of one or more messages that include metadata log <b>608</b> using a standard communication protocol over one or more networks <b>659</b>. In this example, independent of the transmission of the metadata log <b>604</b>, the source data repository <b>602</b> may also transmit data <b>610</b> corresponding to the checkpoints <b>606</b> within the metadata log <b>604</b>.</p><p id="p-0312" num="0316">In some implementations, as checkpoints are created within the source data repository <b>602</b>, a monitoring service may monitor which checkpoints are complete, and determine where the checkpoints may be read. In some examples, a checkpoint may be created as a checkpoint is written into NVRAM, or a first tier of fast data storage. In some cases, the monitoring service may provide an interface for accessing checkpoint data from NVRAM or from a given storage location.</p><p id="p-0313" num="0317">Continuing with this example, a target data repository <b>624</b> may open one or more forwarding streams from the source data repository <b>602</b>, where on the source data repository <b>602</b>, each forwarding stream may claim a number of checkpoints from the monitoring service. In this example, a given forwarding stream may fetch metadata log <b>614</b> information for one or more checkpoints <b>606</b>. Similarly, in this example, a given forwarding stream may fetch corresponding storage data for the one or more checkpoints <b>606</b>. In this way, one or more communication channels may be opened, in some cases in parallel, between the source data repository <b>602</b> and the target data repository <b>624</b>, where the one or more communication channels operate to transfer the metadata log <b>614</b> and corresponding data <b>612</b> between the source data repository <b>602</b> and the target data repository <b>624</b>.</p><p id="p-0314" num="0318">In this example, in response to receiving the metadata log <b>608</b>, the target data repository <b>624</b> may persist the checkpoints <b>628</b><i>a</i>, <b>628</b><i>b </i>into a local metadata log <b>626</b>. Based on a successful write of the checkpoints <b>628</b> into the local metadata log <b>626</b>, the target data repository <b>624</b> may respond to the source data repository <b>602</b> with an acknowledgment, where in response to the acknowledgment, the source data repository <b>602</b> may&#x2014;in dependence upon a configuration setting&#x2014;delete or maintain the checkpoints <b>606</b><i>a</i>, <b>606</b><i>b. </i></p><p id="p-0315" num="0319">In some examples, the target data repository <b>624</b> may periodically, or in response to receiving metadata log <b>626</b> information from the source data repository <b>602</b>, replay the storage operations within the checkpoints <b>628</b> to generate and update a tracking volume <b>632</b>. In some examples, replaying the storage operations may include converting metadata log <b>626</b> information into regular formatted metadata for the storage system and converting global content identifiers into local content identifiers; for example, such converting may include mapping content identifiers between the source data repository <b>602</b> and the target data repository <b>624</b>. In this example, a metadata representation <b>630</b> may be implemented similarly to metadata representation <b>614</b> on the source data repository <b>602</b>, where the physical location information may be different based on use of physical storage on the target data repository. In some examples, a tracking volume may also be referred to as a &#x201c;shadow&#x201d; volume.</p><p id="p-0316" num="0320">In some implementations, content identifiers may be used to mark written content, including content that the source has already determined was a duplicate of other content that the source knows of (for example, through tracking the source write history, source snapshot history, source virtual copy history, and/or any local duplicate detection). In some examples, the content identifiers may be leveraged when doing recovery, such as after an extended outage, or when converting from near-sync replication to periodic or asynchronous replication.</p><p id="p-0317" num="0321">In some implementations, delivery of a checkpoint as a set of metadata updates and content identifiers may result in the target storage system noticing which content identifiers the target storage system is already aware of and already stores&#x2014;the target storage system may then request from the source storage system any content whose content identifiers the target storage system does not already store or is not already aware of. In some cases, except at moon-level distances, checkpoint delivery may still result in sub-second RPOs, and may also reduce data transfer bandwidth if duplicates are common. Further, in this example, until all missing content has been requested and received by the target storage system, the checkpoint may not be considered completed so the checkpoint may not be deleted to allow garbage collection.</p><p id="p-0318" num="0322">In some examples, the tracking volume <b>632</b> is generated in response to a promotion event, where a promotion event may be based on a detected failure, detected impending failure, or detected degradation of responsiveness beyond a compliance policy threshold of the source data repository. In some cases, the promotion event may be automatically generated based on such a detection of a promotion event, and in other cases, the promotion event may be responsive to a user specifying that the replica data on the target data repository <b>624</b> be promoted.</p><p id="p-0319" num="0323">In some implementations, a user may promote a tracking volume <b>632</b> in order to use a replica of the source data for different uses, such as for testing&#x2014;where testing may include modification of the replica data in the tracking volume <b>632</b>. However, based on a promotion event generating a replica volume <b>634</b>, any modifications or corruption to the tracking volume that may occur during testing may be undone or reversed by referencing the replica volume <b>634</b>. In this example, promotion of the tracking volume <b>632</b> also includes configuration filtering and/or reconciliation as part of making the tracking volume <b>632</b> a new volume available for use by a computational process, a computing device, or a compute node. Further, demotion or deletion of a volume may cause a host to reconfigure a connection to continue to access replica data on the target data repository <b>624</b>.</p><p id="p-0320" num="0324">While in some implementations, received metadata log <b>608</b> information may be played to generate the tracking volume <b>632</b> without storing the metadata log <b>608</b>, or keeping a stored metadata log <b>626</b>, the stored metadata log <b>626</b> may serve as a basis for providing data consistency guarantees described above with regard to the storage operations in a checkpoint.</p><p id="p-0321" num="0325">Further, separating the generation of the tracking volume from dependence upon checkpoints as they are received, and instead generating the tracking volume from stored checkpoints supports receiving checkpoints out of order and the option to order the checkpoints prior to building the tracking volume <b>632</b>. In other words, checkpoints may be transmitted and received out of order, but in general, checkpoint may not be applied out of order, so in some cases applying the checkpoints to a tracking dataset or volume may be delayed until intervening checkpoints are received. This example may be generalized as requiring that all intermediate checkpoints be received before the tracking dataset or volume may be advanced to the time associated a received dataset (irrespective of how checkpoint updates are actually applied).</p><p id="p-0322" num="0326">Further, in this example, if for some reason, such as a recovery event on the source data repository <b>602</b> based on data loss or based on a user or application requesting access to the replica volume or based on a failover request to begin using the replica volume <b>634</b> as a primary or user-accessible volume, then the target data repository <b>624</b> may promote, or activate, the replica volume <b>634</b>. In response, the existing checkpoints in the metadata log <b>626</b> may be replayed to generate a version of the tracking volume <b>632</b> consistent with a most recent checkpoint received, and the tracking volume <b>632</b> may be used to create a version of the source volume <b>658</b>.</p><p id="p-0323" num="0327">In some examples, in response to a recovery event&#x2014;such as a source data repository <b>602</b> losing a connection with a host computer (not depicted) or applications sending storage operations, performance degradation beyond a threshold value, storage capacity exceeding a threshold value, or a degradation in response times&#x2014;the target data repository <b>624</b> may be promoted to handle all further storage operations from the host computer, and another data repository may be selected. In this example, the replica link from the original source data repository <b>602</b> to the target data repository <b>624</b> may be reconfigured to flip directions, where the target data repository <b>624</b> becomes a new source data repository and another data repository becomes a new target data repository, and where other replica link characteristics stay the same.</p><p id="p-0324" num="0328">The continuous replication from the source data repository <b>602</b> to the target data repository <b>624</b> may also be described in terms of pods, where pods and pod characteristics are described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>. As noted above, where <figref idref="DRAWINGS">FIG. <b>5</b></figref> describes use of pods in implementing synchronous replication, in this example, pods are used for asynchronous, or near-synchronous replication. In other words, in this example, source volume <b>658</b> may be included within a pod <b>640</b>, and the replica volume <b>634</b> may be included within pod <b>642</b>. In this way, in response to an indication that a user or application intends to use the replica data, and the tracking volume <b>632</b> being promoted, the replica pod <b>642</b> is updated with the most current contents from the tracking volume <b>632</b>. While in this example a pod is depicted as include a single volume, in other examples, a pod may generally hold any type and quantity of data, including multiple volumes and/or multiple structured or unstructured datasets.</p><p id="p-0325" num="0329">Further, in some implementations, as discussed above, there may be a dynamic relationship of volumes to pods, where the dynamic collection of volumes within a pod may be related to a clock value within the update stream on a source storage system. For example, a checkpoint may introduce volumes to a pod, change volume characteristics (name, size, etc.) and may remove volumes. In this example, if there are protection groups or some similar organizational concept within a pod, then these protection groups may also change with those changes being propagated through checkpoints. In this way, a near-sync target storage system may actually take over relatively seamlessly as a periodic replication source with all relationships intact, minus whatever time difference the last processed checkpoint is from the previous active source. In short, in some cases, it is the unified nature of the metadata model between synchronous replication, near synchronous replication (near-sync), and periodic replication (or asynchronous) replication, coupled with the local-to-global-to-local content identifier and logical and composite extent identifier transformations that provides improvements to various aspects of a storage system and of a storage system replication process.</p><p id="p-0326" num="0330">As depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, a data repository <b>602</b> stores both data <b>612</b> from incoming storage operations <b>652</b>, and a metadata representation <b>614</b> of the data <b>612</b>. In this example, a metadata representation <b>614</b> may be implemented as a structured collection of metadata objects that, together, may represent a logical volume of storage data, or a portion of a logical volume, in accordance with some embodiments of the present disclosure. Metadata representation <b>614</b> may be stored within the source data repository <b>602</b>, and one or more metadata representations may be generated and maintained for each of multiple storage objects, such as volumes, or portions of volumes, stored within the data repository <b>602</b>.</p><p id="p-0327" num="0331">In other examples, other types of structured collections of the metadata objects are possible; however, in this example, metadata representations may be structured as a directed acyclic graph (DAG) of nodes, where, to maintain efficient access to any given node, the DAG may be structured and balanced according to various methods. For example, a DAG for a metadata representation may be defined as a type of B-tree, and balanced accordingly in response to changes to the structure of the metadata representation, where changes to the metadata representation may occur in response to changes to, or additions to, underlying data represented by the metadata representation. Generally, metadata representations may span across multiple levels and may include hundreds or thousands of nodes, where each node may include any number of links to other nodes.</p><p id="p-0328" num="0332">Further, in this example, the leaves of a metadata representation may include pointers to the stored data for a volume, or portion of a volume, where a logical address, or a volume and offset, may be used to identify and navigate through the metadata representation to reach one or more leaf nodes that reference stored data corresponding to the logical address. Data objects may be any size unit of data within the data repository <b>602</b>. For example, data objects may each be a logical extent, where logical extents may be some specified size, such as 1 MB, 4 MB, or some other size, such as a system-specified block size.</p><p id="p-0329" num="0333">In some implementations, as described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>3</b>D</figref>, the data repository <b>602</b> may include multiple types of data storage, including NVRAM and Flash storage, where NVRAM may be used as a staging area for incoming storage operations, and where Flash storage may provide long-term, durable storage. In this example, the source volume <b>658</b>, or portions of the source volume <b>658</b>, may be stored in NVRAM, and the entire source volume may be stored within Flash memory, or as depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, data store <b>660</b>.</p><p id="p-0330" num="0334">In some implementations, the metadata log <b>604</b> is ordered according to checkpoints, and is a journal, or log, describing all changes to stored data, and where checkpoints within the metadata log <b>604</b> that have not already been transmitted to the target data repository <b>624</b> are transmitted in response to generation or completion of a single checkpoint, or a set of checkpoints, in dependence upon a target RPO. For example, depending on a size of a checkpoint, or a quantity of data-modifying operations described by the checkpoint, more frequent transmission may be may in dependence upon a lower target RPO.</p><p id="p-0331" num="0335">Further, as described above, checkpoints <b>606</b> within the metadata log <b>604</b> may include references to stored content such as blocks within data store <b>660</b> where that stored content consists of what the storage system would have stored were it not for the replicated checkpoint. In this way, the storage required for the metadata log and checkpoints is reduced considerably versus what would be required for a complete log of all updates that includes both metadata and a duplicate copy of data that was being written to the source storage system. In some examples, a service, or process, or controller, operating on the source data repository <b>602</b> may monitor creation of checkpoints, and forward or transmit the checkpoint, or set of checkpoints, to the target data repository <b>624</b>.</p><p id="p-0332" num="0336">In some implementations, references within checkpoints, and as a consequence, references within a metadata log, may refer to objects or data stored on the source data repository <b>602</b> that have been modified by subsequent storage operations, but where the data stored on the source data repository <b>602</b> has not yet been transferred to the target data repository <b>624</b>. In such a scenario, if a garbage collection process on the source data repository <b>602</b> relies only on a reference table maintained by a storage controller managing data within the source data repository <b>602</b>, then the garbage collection process may delete data or reallocate or otherwise overwrite a storage location that results in data referenced by a metadata log becoming unavailable or no longer valid as a source of content for a replicated checkpoint, thereby compromising the replication. To overcome such a scenario, in some examples, a garbage collection process on the source data repository <b>602</b> may reference both a reference table maintained by a storage controller or source data repository <b>602</b> process and also a list of references held by lightweight checkpoints, and specifically, a list of references within one or more checkpoints within a metadata log. Over time, checkpoints can be merged together to allow some overwritten content to be released for garbage collection.</p><p id="p-0333" num="0337">In this way, based at least on both sources of data references&#x2014;system references and metadata log references&#x2014;a garbage collection process may preserve data that has not yet been replicated, but would otherwise be modified or deleted by subsequent storage operations. Such data preservation during garbage collection also holds true for continuous data protection, when checkpoints are retained on a source storage system for some period of time in order to allow for flexible rollback, where the period of time may be configurable to an arbitrary quantity of time. In other words, a garbage collection process may determine that content at a storage location is not needed, and may be reclaimed or garbage collected, based on the content at the storage location not being referenced by any checkpoints in a metadata log or referenced by a storage system reference table.</p><p id="p-0334" num="0338">In some implementations, as noted above, each checkpoint is exclusive of every other checkpoint, and based on the checkpoints being ordered, the checkpoints may be transmitted in any order to the target data repository <b>624</b>. In this example, on the target data repository <b>624</b>, the checkpoints are applied, or replayed, in order to create a consistent version of the data stored on the source data repository <b>602</b>. In some cases, the data transmitted from the source data repository <b>602</b> to the target data repository <b>624</b> may be read from data storage within data store <b>660</b>, for example if the data has been flushed from the NVRAM to Flash, or from the NVRAM, for example if the data continues to be stored in the NVRAM.</p><p id="p-0335" num="0339">In some implementations, depending on configuration settings with respect to RPO, data may remain on the source data repository <b>602</b> for more or less time. In some cases, the longer that data remains on the source data repository <b>602</b>, the greater the opportunity to perform transformations that may reduce the quantity of data transferred to the target data repository <b>624</b>. For example, incoming data may be deduplicated, or overwrite previously written data, or may be deleted, among other operations or transformations, which may reduce the quantity of data that is transferred from the source data repository <b>602</b> to the target data repository <b>624</b>.</p><p id="p-0336" num="0340">In some implementations, the messaging mechanisms may be implemented similarly to the messaging mechanisms described above for synchronous data replication, with reference to <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>.</p><p id="p-0337" num="0341">For further explanation <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a configurable replication system that provides continuous replication with minimal batching and an adjustable recovery point objective. In this example, a management object that specifies a replication policy between a source pod and a replica pod may be referred to as a &#x201c;replica link&#x201d;.</p><p id="p-0338" num="0342">A replica link specification may include a specification for a source of data for replication and a target for replica data, including storage data, checkpoints, metadata representations, or metadata logs (or journals). In some cases, the source of data may be a volume, a structured or unstructured dataset, a bucket, a file within a file system, an entire file system directory, or a combination of sources&#x2014;where the data sources are stored within a source data repository <b>602</b>.</p><p id="p-0339" num="0343">In some cases, there may be one or more replication data targets, where, for example, a source data repository <b>602</b> includes multiple pods <b>640</b>, <b>682</b> and multiple, respective replication data targets, illustrated as target data repositories <b>688</b>, <b>694</b>. In this example, source pod <b>640</b> includes a volume <b>658</b>, source pod <b>682</b> includes a volume <b>680</b>, replica pod <b>690</b> includes replica volume <b>692</b>, and replica pod <b>696</b> includes replica volume <b>698</b>. Further, as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, there may be one or more replica links <b>684</b>, <b>686</b> that manage replication from the source data repository to one or more target data repositories <b>688</b>, <b>694</b>.</p><p id="p-0340" num="0344">In some implementations, in an example where replication includes the use of snapshots of the source data, a replica link may specify a snapshot policy, which may specify conditions under which a snapshot may be taken. For example, if asynchronous replication, as described above with reference to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, becomes backed up&#x2014;such as where the quantity of backed up data and/or metadata pending transfer would result in an RPO that is beyond a threshold RPO value&#x2014;then a snapshot may be taken. In other examples, the snapshot policy may specify that snapshots are to be taken at a specified schedule, and may specify a length of time for keeping snapshots available.</p><p id="p-0341" num="0345">Further, in some examples, instead of or in addition to generating snapshots for a source data repository to reduce a backlog of metadata and/or data transmissions to a target data repository, a source data repository may perform one or more transformations or optimizations on the data and/or metadata to be transmitted. For example, if a source data repository determines that data pending transfer is identical to data already transferred, then the source data repository may avoid sending the duplicate data that is pending transfer. As another example, checkpoints within a metadata log may be folded together, where if there is an overwrite between two checkpoints, then the source data repository may avoid sending data that has been overwritten, as reflected by the folded checkpoints.</p><p id="p-0342" num="0346">Further, a replica link may also specify a replica policy, where the replica policy may include or be exclusively snapshots, specify continuous, but not synchronous replication, or specify synchronous replication. In all cases, a user may be provided with a single user interface, with a single workflow, for a replica link specification allowing for specification of one or more characteristics for data replication.</p><p id="p-0343" num="0347">In some implementations, a replica link may also specify a compliance policy. For example, a compliance policy may specify that for a particular type of replication policy&#x2014;for example, continuous, synchronous, asynchronous, snapshot&#x2014;the replication should adhere to specified parameters. As one example, for a snapshot replication policy, the compliance policy may specify that if a frequency, or schedule, according to which snapshots are taken fails to meet a threshold level of compliance, then a system warning may be generated. Similarly, if data and/or metadata is not being transferred quickly enough to satisfy a specified RPO, or other performance metric, then a system warning or alert may also be generated. Alternately, updates on the source storage system can be slowed down in order to avoid exceeding the RPO.</p><p id="p-0344" num="0348">However, in other cases, in response to failing to satisfy a threshold level of compliance, other corrective actions may be taken, for example, of a target data repository is a cause of a backup, or has had a drop in performance, or is nearing capacity, then a diagnostic may be initiated to identify correctable issues or an alternate target data repository may be identified for transferring the target replica data to the new target data repository. In some implementations, the replica link may also store attributes of the replication history, such as identifying a point at which a source data repository became frozen or unavailable.</p><p id="p-0345" num="0349">Generally, a replica link may be used to specify a replication relationship, and depending on whether a pod is active or passive, determines a direction of the replication, where replication occurs in the direction of an active (or activated or promoted) pod to a passive (or deactivated or demoted) pod. In this example, a replication direction may also be changed if all pods connected to the replica link are in communication and reach consensus on a change in replication direction. In this way, a source pod may be protected by creating a replica link to another, deactivated, pod on another data repository, where hosts or host groups may be connected to the deactivated pod on the target data repository to read&#x2014;nearly synchronous&#x2014;data from the source pod.</p><p id="p-0346" num="0350">For further explanation, <figref idref="DRAWINGS">FIGS. <b>7</b> and <b>8</b></figref> illustrate aspects of selective communication protocol layering for synchronous replication between one or more storage systems according to some embodiments of the present disclosure. More specifically, as part of an example embodiment of selective communication protocol layering, <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example method of a listen control flow, <figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example method of a connect/accept control flow, and <figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates an example method of a send/read control flow.</p><p id="p-0347" num="0351"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates aspects of selective communication protocol layering for synchronous replication between one or more storage systems according to some embodiments of the present disclosure. More specifically, as part of an example embodiment of selective communication protocol layering, <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates example method of a connect/accept control flow that may be implemented on storage systems similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref>, <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref>, <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>C</figref>, <figref idref="DRAWINGS">FIGS. <b>4</b>A and <b>4</b>B</figref>, <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>6</b>C</figref>, or any combination thereof.</p><p id="p-0348" num="0352">In some implementations, a replication protocol or replication scheme may be specified to provide bidirectional communication paths established between storage systems using selective features of one or multiple standard communication protocols&#x2014;where the underlying standard communication protocols are traditionally designed for data transmission in a single direction, from a computer system providing storage content to a storage system providing storage services.</p><p id="p-0349" num="0353">Further, in some implementations, storage systems may then implement synchronous replication based on the replication protocol or replication scheme providing bidirectional communication between storage systems. In this way, the synchronous replication protocols or schemes described above with reference to <figref idref="DRAWINGS">FIGS. <b>6</b>A-<b>6</b>B</figref> may be carried out by using the replication protocol or scheme providing bidirectional communication.</p><p id="p-0350" num="0354">In the following examples, a group of multiple storage systems that are configured to synchronously replicate one or more datasets among each and every storage system within the group may be referred to as a cluster of storage systems, or may be equivalently referred to as an active cluster or active cluster of storage systems. As noted above, example implementations of an active cluster of storage systems synchronously replicating datasets and managing pods are described above with reference to <figref idref="DRAWINGS">FIGS. <b>6</b>A-<b>6</b>B</figref>, and further described within the parent applications of the present disclosure.</p><p id="p-0351" num="0355">In some implementation, as explained in greater detail below, some portions, but not all portions of multiple communication protocols are used to implement bidirectional data replication in a manner that is outside of the design scope of the underlying multiple communication protocols.</p><p id="p-0352" num="0356">Further, in some implementations, by using selected aspects of the underlying communication protocols, in addition to reconfiguring aspects of the underlying communication protocols, various embodiments of a replication protocol or scheme provide for bidirectional replication of data that more efficiently&#x2014;by, for example, using fewer messages as compared to a standard deployment of the underlying communication protocols&#x2014;provides support for the synchronous replication protocols or schemes described above with reference to <figref idref="DRAWINGS">FIGS. <b>6</b>A-<b>6</b>B</figref>, in addition to providing support for other types of replication services.</p><p id="p-0353" num="0357">In some implementations, in addition to the replication protocols or schemes described above with reference to <figref idref="DRAWINGS">FIG. <b>6</b></figref> implementing synchronous replication, the bidirectional features of the replication protocol or scheme may also be used to implement other types of data replication protocols or schemes, including asynchronous replication, or more generally, any protocol or scheme based on bidirectional transfer of data between computer systems and/or storage systems.</p><p id="p-0354" num="0358">In some implementations, the communication protocols used may be: Fibre Channel, NVMe, NVMe over Fabrics (NVME-oF), TCP/IP, RoCE, or combinations of these communication protocols.</p><p id="p-0355" num="0359">As one example of modifications to underlying protocols, during a discovery process for a Fibre Channel protocol layer, a given storage system may receive a log of other target storage systems. Further, in this example, at the NVMe protocol layer, the given storage system may receive a list of identifiers for the other target storage systems, where the list of identifiers may be a list of NVMe qualified names (NQNs).</p><p id="p-0356" num="0360">However, in this example, in accordance with the replication protocol or scheme, a format of an NQN may be modified to include an identifier usable by the replication protocol or scheme, where the replication protocol identifier is usable by the storage system to identify a list of storage systems that may be included within a data replication configuration. More specifically, in this example, the list of storage systems may be a list of storage systems that may be included within an active cluster of storage systems that are synchronously replicating a dataset.</p><p id="p-0357" num="0361">Further, in some implementations, as noted above, Fibre Channel and NVMe are designed for a host computer or server to store data on a storage system, but are not designed for a connected storage system to reciprocally store storage content on the host computer, much less where the host computer and storage system are configured to synchronously replicate data.</p><p id="p-0358" num="0362">By contrast, in some implementations, the replication protocol or scheme specifies logic that establishes bidirectional communication that is carried out by an initiator storage system establishing a communication channel in one direction with a given target storage system, and the target storage system&#x2014;in response to establishing a communication channel from the initiator storage system to the target storage system and determining that there is no communication channel from the target storage system back to the initiator storage system establishes a communication channel back to the initiator storage system.</p><p id="p-0359" num="0363">In this way, in some examples, bidirectional communication channels may be established to support the bidirectional data links described above with reference to the synchronous replication protocols or schemes described above with reference to <figref idref="DRAWINGS">FIGS. <b>6</b>A-<b>6</b>B</figref>, where multiple storage systems within an active cluster provide synchronously replicated data services. In other words, the disclosed replication protocol or scheme specifies a distinct networking stack and communication protocol that is different from a deployment of standard implementations, either alone or combined, of the underlying Fibre Channel, NVMe, and IP protocols.</p><p id="p-0360" num="0364">In some implementations, the replication protocol or scheme may provide multiple types of functionality to implement aspects of establishing connections between storage systems, listening for new storage systems coming online, and reading and sending as part of bidirectional communication between computer systems and/or storage systems.</p><p id="p-0361" num="0365">More specifically, in some implementations that include one or more aspects of Fibre Channel, NVMe, and TCP/IP communication protocols, the replication protocol or scheme may include: (I) a replication protocol layer for active cluster (in this example, the highest layer); (II) a replication transport layer; (III) an NVMe-oF layer; and (IV) an NVMe transport layer, where, in some examples, the NVMe transport layer may be Fibre Channel.</p><p id="p-0362" num="0366">For example, with regard to (I) above, the synchronous replication protocol layer, the replication protocol or scheme may include: (a) discovery functionality; (b) remote client connector functionality; (c) send functionality; (d) receive functionality; and (e) disconnect functionality, among others.</p><p id="p-0363" num="0367">Discovery functionality, listed as (I)(a) above, may include:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0368">(i) listening for remote storage system identifiers that may be interested in being included within a configuration for establishing synchronous replication&#x2014;where the storage system identifier is used by the replication protocol or scheme, but not used or necessary for the underlying communication protocols;</li>        <li id="ul0004-0002" num="0369">(ii) listening to a replication transport service for new storage system identifiers or for new paths for existing storage system identifiers&#x2014;where a given storage system may query other storage systems for path information, where the query may be based on respective storage system identifiers for the other storage systems in the active cluster; and</li>        <li id="ul0004-0003" num="0370">(iii) determining whether to connect using a particular one or more new paths to a given storage system in the active cluster or whether to keep using existing paths to the given storage system.</li>    </ul>    </li></ul></p><p id="p-0364" num="0371">Remote client connector functionality, listed as (I)(b) above, may include:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0372">(i) using a list or vector of paths to connect to remote storage systems;</li>        <li id="ul0006-0002" num="0373">(ii) controlling a quantity of connections to establish, and tracking if the connections are successful; and</li>        <li id="ul0006-0003" num="0374">(iii) maintaining a list of paths accessible to the replication protocol layer.</li>    </ul>    </li></ul></p><p id="p-0365" num="0375">Send, receive, and disconnect functionality, listed as (I)(c)-(e) above, may include: sending data to other storage systems by using Fibre Channel; receiving data from other storage systems by using Fibre Channel; and disconnecting from other storage systems by initiating disposal of a transport layer endpoint or by detecting and responding to errors on a send. Further, disconnect functionality may be driven by the Fibre Channel detecting a disconnection of a target from a transport fabric.</p><p id="p-0366" num="0376">Continuing with this example, with regard to (II) above, the replication transport layer, this layer may include: (a) messaging transport functionality; and (b) transport endpoint functionality.</p><p id="p-0367" num="0377">Messaging transport functionality at a replication transport layer, listed as (II)(a) above, may include:<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0378">(i) listening, as an initiator and in accordance with the NVMe discovery protocol to get new NVMe qualified names (NQN) identifiers based on Fibre Channel world wide port names (WWPNs), and/or remote Fibre Channel WWPN identifiers, where in response to discovering a new storage system, the replication protocol layer listener, described above at (I)(a)(i), may be notified;</li>        <li id="ul0008-0002" num="0379">(ii) receiving connect/transport endpoint creation requests, which may include configuring or setting up a transport endpoint object that may: allocate buffers or trackers on the initiator side of a connection, allocate buffers or trackers on a target side of a connection, issue connect commands in accordance with an NVMe transport layer, wait for target connection in accordance with an NVMe transport layer;</li>        <li id="ul0008-0003" num="0380">(iii) tracking pending initiator-side connections waiting for target-side connects; and</li>        <li id="ul0008-0004" num="0381">(iv) listening to NVMe transport for target connects in order to complete an initiator connection, which may include setting up a transport endpoint object, as above, where the transport endpoint object may allocate data buffers and/or trackers for the initiator side of a connection, allocate data buffers and/or trackers for a target-side of a connection, send success messages over NVMe over Fibre Channel (FC-NVMe), and issue connect commands via an NVMe transport layer.</li>    </ul>    </li></ul></p><p id="p-0368" num="0382">Transport endpoint functionality at a replication transport layer, listed as (II)(b) above, may include functionality for:<ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0000">    <ul id="ul0010" list-style="none">        <li id="ul0010-0001" num="0383">(i) receiving data as a Fibre Channel endpoint, where receiving data may also include allocating a buffer list, and further include sending a read for every allocated data buffer, where reading data is described in greater detail above with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>;</li>        <li id="ul0010-0002" num="0384">(ii) sending data, where sending data may include receiving a buffer list from the replication protocol layer that interfaces with storage systems in an active cluster, and command messages to allocate target and connection specific data buffers, and may include initiating copying contents into respective NVMe read buffers;</li>        <li id="ul0010-0003" num="0385">(iii) receiving data at the replication transport layer corresponding to NVMe initiator and read completion protocols, where receiving data at the replication transport layer may also include providing a read task that may handle parsing header information, verification, allocating buffers, and copying in data;</li>        <li id="ul0010-0004" num="0386">(iv) error handling; and</li>        <li id="ul0010-0005" num="0387">(v) disconnecting from one or more storage systems in the active cluster, which may include disposing of connections at the replication transport layer and the NVMe layer.</li>    </ul>    </li></ul></p><p id="p-0369" num="0388">Continuing with this example, with regard to (III) above, the NVMe-oF protocol layer, this layer may include: (a) polling; (b) initiator discovery; (c) initiator control; (d) initiator connections; (e) target control; and (f) target connections.</p><p id="p-0370" num="0389">Polling functionality at the NVMe-oF protocol layer, listed as (III)(a) above, may determine whether an NVMe initiator connection has been successfully established, whether a target connection received a read request, whether a target control received a connection request, whether an initiator connection received a read completion, among other functions.</p><p id="p-0371" num="0390">Initiator discovery functionality at the NVMe-oF protocol layer, listed as (III)(b) above, may get notification for new local WWPN/remote WWPN pairs, initiate NVMe discovery to obtain NVMe qualified names (NQNs), and also provide remote and local WWPNs and NQNs to the messaging transport functionality at the replication transport layer, listed as (II)(a) above.</p><p id="p-0372" num="0391">Initiator control functionality at the NVMe-oF protocol layer, listed as (III)(c) above, may provide keep-alive services to an initiator, which may include sending keep-alive messages, terminating connections on timeouts, track keep-alive latencies, and, if no admin connections are established when a connection is requested, admin connections may be established.</p><p id="p-0373" num="0392">Initiator connection functionality at the NVMe-oF protocol layer, listed as (III)(d) above, may maintain queue identifiers, send NVMe read commands, or answer read requests.</p><p id="p-0374" num="0393">Target control functionality at the NVMe-oF protocol layer, listed as (III)(e) above, may determine whether a connection is accepted based on specified NQNs, and may provide callbacks to a target storage system in response to new connections.</p><p id="p-0375" num="0394">Target connection functionality at the NVMe-oF protocol layer, listed as (III)(f) above, may provide external disconnect services or answer read requests.</p><p id="p-0376" num="0395">Continuing with this example, with regard to (IV) above, the NVMe transport layer, this layer may include: (a) initiator functionality that may listen for local WWPNs and/or remote WWPNs, may connect to local WWPNs and/or remote WWPNs, and may send commands or data, receive data, requests for data, and responses, and disconnect; and (b) target functionality.</p><p id="p-0377" num="0396">Turning toward <figref idref="DRAWINGS">FIG. <b>7</b></figref>, as noted above, <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates aspects of selective communication protocol layering for synchronous replication between one or more storage systems according to some embodiments of the present disclosure. More specifically, as part of an example embodiment of selective communication protocol layering, or a replication protocol or scheme, <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example method of a listen/get path control flow as part of a discovery process.</p><p id="p-0378" num="0397">In some implementations, a storage system may listen for any path changes to a remote storage system, where if replication services are added, a notification may be received for each impacted storage system within the active cluster of storage systems.</p><p id="p-0379" num="0398">Further, in some implementations, if any Fibre Channel switch configuration change impacts connectivity from a given storage system in an active cluster to any other storage system in the active cluster, a corresponding notification may be received for each impacted other storage system.</p><p id="p-0380" num="0399">As illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, establishing paths between storage systems to support bidirectional communication, where the bidirectional communication may support replication, including synchronous replication among an active cluster of storage systems, may include: replication <b>702</b>, replication transport <b>704</b>, NVMe discovery <b>706</b>, and NVMe transport <b>708</b>.</p><p id="p-0381" num="0400">In some implementations, given one or more new replication protocol identifiers at the replication layer <b>702</b>, where the replication protocol identifier is depicted as remote identifier <b>712</b>, the remote identifier <b>712</b> is added <b>713</b> to a set of remote identifiers corresponding to a set of storage systems that may be included within an active cluster of storage systems replicating data among each other.</p><p id="p-0382" num="0401">Continuing with this example, and as noted above with regard to (I)(a)(i) and (I)(a)(ii), the replication transport layer may listen for new replication protocol identifiers, and given one or more replication protocol identifiers, the replication transport <b>704</b> may be queried <b>716</b> to get paths for each of the one or more replication protocol identifiers. Further, in this example, for each of the one or more paths <b>717</b>, a host, initiator, or storage system may connect <b>719</b> to each respective one or more storage system corresponding to each of the respective one or more replication protocol identifiers.</p><p id="p-0383" num="0402">In some implementations, a host, storage system, or more generally, an initiator computing device, may register <b>710</b> a host replication NQN with a discovery service. Further, a host, or storage system, may, as part of a discovery process, receive new local/remote WWPNs for Fibre Channel addressing <b>714</b>. Similarly, as depicted, a listening or discovery process for both NVMe and Fibre Channel may include connect requests <b>720</b> and corresponding responses <b>721</b>, fabric connect <b>722</b>, host replication NQN, discovery NQN and corresponding responses <b>727</b>, and get log page requests <b>724</b> for NVMe discovery and corresponding responses <b>725</b> with the requested log pages with NVMe addressing information. However, in some examples, a discovery process may proceed without receiving log page requests.</p><p id="p-0384" num="0403">Further, continuing with this example, in response to receiving new NQN and WWPN information <b>726</b>, an update to mapping information <b>727</b> may be made, and given a new remote protocol identifier <b>728</b> obtained from parsing the new NQN, a new round of connecting may be performed&#x2014;including, getting path information <b>730</b>, checking mapping information <b>731</b>, and, connecting for each of the new paths <b>732</b>. However, in some examples, a discovery process may proceed without receiving new NQN and WWPN information. Further, in some examples, even if a protocol identifier <b>728</b> is not new, a corresponding notification is processed because a path may have changed.</p><p id="p-0385" num="0404">In short, a listening process on a host or initiator storage system may obtain NVMe and Fibre Channel addressing information for storage systems that may become part of an active cluster of storage systems replicating a dataset among themselves, and where the host or initiator storage system may continually listen for and update path and connection information.</p><p id="p-0386" num="0405">For further explanation, <figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates aspects of selective communication protocol layering for synchronous replication between one or more storage systems according to some embodiments of the present disclosure. More specifically, as part of an example embodiment of selective communication protocol layering, or a replication protocol or scheme, <figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example method of a connect/accept control flow.</p><p id="p-0387" num="0406">As explained above with reference to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, as storage systems come online or otherwise become available for storage use, a listen/get path process may establish paths between the storage systems, where available storage systems may be presented for configuration or use. For example, a user at a storage system management console may be presented with one or more storage options among the multiple storage systems, where a user may specify objects, datasets, volumes, or other storage data for replication among selected storage systems. In this example, given a set of storage systems, replication, or synchronous replication may be implemented as described above with reference to <figref idref="DRAWINGS">FIGS. <b>6</b>A-<b>6</b>B</figref>, and also within the applications to which the present application draws priority.</p><p id="p-0388" num="0407">In this example, given a path, where a path is obtained as described above with reference to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, a storage system <b>803</b> may initiate a connection <b>820</b> with another storage system <b>805</b>. Further, in this example, the responding storage system <b>805</b> may respond <b>880</b> by preparing the replication transport layer <b>814</b> to accept an incoming connect request&#x2014; where selected steps of the replication protocol or scheme establishing a connection are depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> and described below.</p><p id="p-0389" num="0408">Continuing with this example, as described above with reference to the replication protocol layer and remote client connector functionality, listed as (I)(b)(i)-(iii), given a list of paths, a storage system may initiate connections to one or more remote storage systems.</p><p id="p-0390" num="0409">As described above, each storage system within an active cluster, or each storage system that may join an active cluster, may implement a replication protocol or scheme that includes a replication layer, a replication transport layer, an NVMe initiator layer, and an NVMe target layer. In this example, storage systems (<b>803</b>, <b>805</b>) include these layers, respectively depicted as replication (<b>802</b>, <b>816</b>), replication transport (<b>804</b>, <b>814</b>), NVMe init (<b>806</b>, <b>812</b>), and NVMe target (<b>808</b>, <b>810</b>).</p><p id="p-0391" num="0410">Overall, depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> are replication protocol exchanges for establishing&#x2014;for each of one or more paths to one or more storage systems&#x2014;bidirectional communication channels between storage systems based on selected aspects of underlying protocols. In this example, a result of establishing bidirectional communication between the storage systems <b>803</b>, <b>805</b> is that each respective storage system <b>803</b>, <b>805</b> will have a respective endpoint object <b>821</b>, <b>881</b> usable for replication of data between the storage systems <b>803</b>, <b>805</b>, including synchronous replication of data.</p><p id="p-0392" num="0411">More specifically, in this example, a storage system may initiate a discovery process and receive a list of NVMe qualified names (NQNs), where each NQN may be formatted to include both standard NVMe addressing information and a replication protocol identifier. As noted above, a replication protocol identifier may be independent of the underlying protocols, including NVMe and Fibre Channel, where the replication protocol identifier may be used to identify storage systems that may be included within an active cluster.</p><p id="p-0393" num="0412">While storage systems, in some examples, may initiate a Fibre Channel discovery process upon storage system startup, or a reboot, where the Fibre Channel discovery process may make the storage system aware of other storage systems in a network, replication protocol identifiers may be used to identify other storage systems and storage pools for replication between the storage systems.</p><p id="p-0394" num="0413">In some examples, a user may specify a set of storage systems that may be included within a set of storage systems in an active cluster, or more generally a user may specify storage systems that may be configured to bidirectionally replication data. For example, a user may specify a first storage system to be in a replication relationship with a second storage system, and in response, the first storage system may make a request over an IP network to the second storage system requesting the replication protocol identifier for the second storage system.</p><p id="p-0395" num="0414">In this way, in this example, a given storage system may use replication protocol identifiers to determine which one or more other storage systems may be configured as part of a replication relationship, or which other one or more storage system may be configured to synchronously replicate data. Further, as described above, based on the replication protocol identifier, a corresponding storage system may be addressed without use of world wide port names (WWPNs) at the Fibre Channel layer.</p><p id="p-0396" num="0415">In this example, a storage system <b>803</b> that initiates a connection may be referred to as an active side storage system, and a storage system <b>805</b> that responds to the connection request may be referred to as a passive side storage system. In this example, storage system <b>803</b>, the active side storage system may issue an initial connect request to establish communication from storage system <b>803</b> to storage system <b>805</b>.</p><p id="p-0397" num="0416">Further, in this example, in response to the connect request from storage system <b>803</b>, storage system <b>805</b> may connect to storage system <b>803</b>&#x2014;where bidirectional communication may be established based on successfully establishing communication channels from storage system <b>803</b> to storage system <b>805</b> and from storage system <b>805</b> to storage system <b>803</b>. Given establishment of bidirectional communication between storage system <b>803</b> and storage system <b>805</b>, the storage systems <b>803</b>, <b>805</b> are configured to replicate data, including synchronously replicate data.</p><p id="p-0398" num="0417">In general, active storage systems may listen for paths to storage systems with replication protocol identifiers that may be included in a replication relationship or active cluster, and initiate establishing bidirectional communication channels to support data replication. Further, in some examples, active storage system may also specify data to be replicated in the replication relationship, including specifying one or more datasets, volumes, objects, or other specified forms of storage content.</p><p id="p-0399" num="0418">Continuing with this example, in response to, at the replication layer, discovering a new path <b>820</b>, or an updated path, storage system <b>803</b> may initiate establishing a connection to connect <b>822</b> to the storage system corresponding to the new or updated path <b>820</b>, which in this example is storage system <b>805</b>. In this example, in response to the connect <b>822</b> request, a determination <b>823</b> is made as to whether an administrative queue is currently established for storage system <b>805</b>, where if there is no current administrative queue for storage system <b>805</b>, then an administrative connect request <b>824</b> is sent to storage system <b>805</b>. Further, in this example, in response to the administrative connect request <b>824</b>, storage system <b>805</b> may set <b>827</b> storage system <b>803</b> as a host system for providing data for storage.</p><p id="p-0400" num="0419">Continuing with this example, in response to storage system <b>805</b> receiving the administrative connect request <b>824</b>, storage system <b>805</b> may respond <b>826</b> to storage system <b>803</b> to establish the administrative queue.</p><p id="p-0401" num="0420">Further, in addition to establishing an administrative queue, storage system <b>803</b> also sends an I/O connect request <b>828</b> to storage system <b>805</b> to establish I/O queues to hold data to be transferred from storage system <b>805</b> to storage system <b>803</b>. Continuing with this example, in response to storage system <b>805</b> receiving the I/O connect request <b>828</b>, storage system <b>805</b> may respond <b>830</b> to storage system <b>803</b> to establish one or more I/O queues on storage system <b>803</b>. Further, in this example, in response to storage system <b>805</b> receiving the I/O connect request <b>828</b>, storage system <b>805</b> may determine that the connection <b>829</b> on the target side, storage system <b>805</b>, in this case, is complete. As discussed above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>5</b></figref>, read operations may be made more efficient by pre-allocating buffer space to reduce a number of messages needed to transfer data between storage system <b>803</b> and storage system <b>805</b>.</p><p id="p-0402" num="0421">In this example, based on establishing the administrative queue and the one or more I/O queues on storage system <b>803</b>, data may be transferred from storage system <b>805</b> to storage system <b>803</b>, and a connection <b>831</b> from the direction of storage system <b>805</b> to storage system <b>803</b> may be considered established.</p><p id="p-0403" num="0422">Continuing with this example, in accordance with the replication protocol or scheme, in response to the connection <b>822</b> request from storage system <b>803</b>, and as part of the operations performed in response to storage system <b>805</b> preparing to send data to storage system <b>803</b>, and in response to a connection being formed based on the connection complete <b>829</b> notification, storage system <b>805</b> may initiate a connection <b>832</b> from the direction of storage system <b>805</b> to storage system <b>803</b>.</p><p id="p-0404" num="0423">In this example, in response to the connect <b>832</b> request, a determination <b>833</b> is made as to whether an administrative queue is currently established for storage system <b>805</b>, where if there is no current administrative queue for storage system <b>803</b>, then an administrative connect request <b>834</b> is sent to storage system <b>803</b>.</p><p id="p-0405" num="0424">Continuing with this example, in response to storage system <b>803</b> receiving the administrative connect request <b>834</b>, storage system <b>803</b> may respond <b>836</b> to storage system <b>805</b> to establish the administrative queue. Further, in this example, in response to the administrative connect request <b>834</b>, storage system <b>803</b> may set <b>835</b> storage system <b>805</b> as a host system for providing data for storage.</p><p id="p-0406" num="0425">Further, in addition to establishing an administrative queue, storage system <b>805</b> also sends an I/O connect request <b>838</b> to storage system <b>803</b> to establish I/O queues to hold data to be transferred from storage system <b>805</b> to storage system <b>803</b>. Continuing with this example, in response to storage system <b>803</b> receiving the I/O connect request <b>838</b>, storage system <b>803</b> may respond <b>840</b> to storage system <b>805</b> to establish one or more I/O queues on storage system <b>805</b>. Further, in this example, in response to storage system <b>803</b> receiving the I/O connect request <b>838</b>, storage system <b>803</b> may determine that the connection <b>839</b> on the target side, storage system <b>803</b>, in this case, is complete.</p><p id="p-0407" num="0426">In this example, based on establishing the administrative queue and the one or more I/O queues on storage system <b>805</b>, data may be transferred from storage system <b>803</b> to storage system <b>805</b>, and a connection <b>841</b> from the direction of storage system <b>803</b> to storage system <b>805</b> may be considered established.</p><p id="p-0408" num="0427">In this way, given establishment of communication in both directions between storage system <b>803</b> and storage system <b>805</b>, respective endpoints <b>821</b>, <b>881</b> may be considered established, as described above with reference to the replication transport layer, described above with reference to (II)(b)(i)-(v).</p><p id="p-0409" num="0428">For further explanation, <figref idref="DRAWINGS">FIG. <b>9</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure. Also depicted in this example are an additional storage system (<b>950</b>) and a computer system (<b>952</b>). The storage systems (<b>900</b>, <b>950</b>) may implement data storage features described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D, <b>2</b>A-<b>2</b>G, <b>3</b>A, <b>3</b>B, and <b>4</b>A-<b>8</b></figref>, as the storage systems (<b>900</b>, <b>950</b>) may include some or all of the components described in the above Figures.</p><p id="p-0410" num="0429">In some implementations, storage systems may implement multiple different replication schemes between themselves, where the different replication schemes are based on a common management model for implementing the replication scheme and the replication transport. In some implementations, the common management model is also a basis that allows the storage systems to switch from one type of replication scheme or replication transport to a different type of replication scheme or replication transport because a same common management model is used to support the different allowed combinations of replication schemes and replication transports.</p><p id="p-0411" num="0430">Further, in some implementations, communication links between storage systems over which replication data and administrative data is communicated between storage systems may be established over different types of underlying physical media layers. For example, a given storage system may include multiple different types of network ports that support different types of networking protocols, such as Fibre Channel, TCP/IP, NVMe over Fabrics, InfiniBand, among any other standard networking protocols.</p><p id="p-0412" num="0431">In this way, in some implementations, a cluster of storage systems may establish one or more different replication schemes among themselves, and responsive to various conditions, the storage systems may switch between different replication schemes without any interruption in a replication relationship among the storage systems&#x2014;where the continuous operation may be based on the different replication schemes using a common management model for data replication. In some implementations, a replication relationship between two storage systems may include simultaneous operation of several replication transports over multiple communication links operating on multiple, different underlying physical media layers.</p><p id="p-0413" num="0432">Further, in some implementations, a common management model may specify communication operations that are encapsulated from the transport mechanisms of a particular network messaging layer. For example, the common management model may provide communication operations that are used by a given replication scheme, where the communication operations do not require specification of details regarding operations of a messaging layer such as a network transport layer. However, in other examples, a common management model may specify communication operations, or network operations, that have more or less visibility into the transport mechanisms of a given network transport layer.</p><p id="p-0414" num="0433">Continuing with this example implementation, based on the common management model not specifying communications between storage systems at a protocol stack layer that is lower than a network transport layer, storage systems may&#x2014;in addition to switching between different replication schemes or instead of switching between different replication schemes switch between different network ports implementing different types of network transport protocols for different types of underlying physical networks.</p><p id="p-0415" num="0434">In other words, in some implementations, because multiple network protocol stacks for a replication scheme are concurrently supported by the common management model, the common management model may continue with an existing replication scheme or switch to a different replication scheme without any awareness of the physical transport mechanisms used to communicate the replication data or administrative data.</p><p id="p-0416" num="0435">In short, in some implementations, the common management model may provide a consistent, and uniform interface to disparate, or different, underlying network messaging mechanisms. For example, among multiple network ports of a given storage system, one network port may be connected to a TCP/IP network, and another network port may be connected to a Fibre Channel network. Similarly, additional network ports may provide support for additional communication links in accordance with one or more underlying network messaging mechanisms.</p><p id="p-0417" num="0436">In some implementations, based on having a storage system configured to establish multiple communication links over different underlying physical networks, a storage system may continue to operate a given replication scheme over a first network while simultaneously performing other storage system functions without disrupting the data replication.</p><p id="p-0418" num="0437">For example, a first storage system may be implementing a first replication scheme to establish a replication relationship with a second storage system over a first network port and first network, and simultaneously implement a second replication scheme to establish a replication relationship with a third storage system (or in some cases with the same second storage system) over a second port and second network.</p><p id="p-0419" num="0438">Continuing with this example, a storage system management service may issue a storage system management command that is received by the first storage system, where the storage system management command indicates initiation of a storage system upgrade. In this example, the first storage system, in response to the upgrade command, may suspend data replication for a network port to be used for the storage system upgrade.</p><p id="p-0420" num="0439">In this way, in this example, a storage system may continue data replication using one or more replication schemes with another storage system while simultaneously performing a storage system upgrade&#x2014;where the data replication between the storage systems continues without disruption from the storage system upgrade.</p><p id="p-0421" num="0440">In some implementations, a storage system may upgrade from components designed for one mechanism for replication communications to components designed for a different mechanism for replication communications. As one example, a storage system may transition or upgrade from being configured for multiple ethernet ports for replication communications to also including ports for using Fibre Channel for replication, where in some cases, the Fibre Channel port may replace an existing network port, such as an ethernet port. Continuing with this example, responsive to an upgrade or addition of the Fibre Channel port, a replication scheme may switch from using replication transport mechanisms reliant on ethernet to replication transport mechanisms reliant on Fibre Channel&#x2014;where the replication scheme may transition from using one replication transport mechanism to using a different replication transport mechanism without disrupting replication of a dataset that is being replicated using a same replication scheme. In this way, in this example, an upgrade or addition may be tested prior to use, and where switching the replication scheme over to using the upgraded or added network mechanism does not disrupt the operation of the replication scheme.</p><p id="p-0422" num="0441">As part of such a transition from one network port or network transport mechanism to another network port or network transport mechanism, a second, new, network link (such as a new port or a new network transport mechanism) can be configured to run in parallel with a first, prior, network link (such as a prior port or a new network transport mechanism) that preceded the transition. Use of the second network link can then be tested by sending messages over the second link as well as over the first link. Messages sent over the second link could be some fraction of the total messages associated with replication, or they could be test messages, or they could be duplicates of messages sent over the first link. Measurements of these messages can then determine that the new network link is adequate to ensure that replication can complete the transition, such as by determining that a combination of network bandwidth, latency, packet loss, CPU overhead, or other factors is adequate for replication to continue without the presence of the first, prior, network link. Once that second network link is proved out, use of the first network link can be discontinued.</p><p id="p-0423" num="0442">It should be noted that these transitions may have to happen in parallel on a first and a second storage system that have a replication relationship. As a result, two storage systems with such a replication relationship may need to coordinate upgrade of components, configuring of new network links, testing of new network links, and finalizing the transition from a first, prior, network link to a second, new, network link.</p><p id="p-0424" num="0443">In some implementations, the depicted computer system (<b>952</b>) may be implemented by a storage system, as described in the above <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>8</b></figref>. However, in other examples, the computer system (<b>952</b>) may be implemented by any computing device, including mobile devices, desktop computers, or servers.</p><p id="p-0425" num="0444">Further still, in other implementations, the depicted computer system (<b>952</b>) may be a virtual computing instance, such as a compute node, or compute instance within a cloud computing environment. For example, the computer system (<b>952</b>) may be a virtual computer system implemented within a cloud computing environment, such as the cloud computing environment escribed with reference to <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref>.</p><p id="p-0426" num="0445">Continuing with this example, the virtual computer system (<b>952</b>) may be implemented as part of a storage system management service within a cloud storage system management service. In this example, the cloud storage system management service may manage one or more of the storage systems (<b>900</b>, <b>950</b>), including monitoring the status and health of the storage systems (<b>900</b>, <b>950</b>) and providing updates or configuration changes to the storage systems (<b>900</b>, <b>950</b>).</p><p id="p-0427" num="0446">In some implementations, each storage system (<b>900</b>, <b>950</b>) may support respective implementations of multiple, distinct types of replication. In some examples, distinct replication schemes may include, among others not listed, synchronous replication, nearly synchronous replication, asynchronous replication, configurable asynchronous replication, snapshot-based replication, continuous data replication, periodic replication, or a combination of configurable asynchronous data replication and dynamically determined snapshot updates. Examples of various ones of these replication schemes are described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>8</b></figref>.</p><p id="p-0428" num="0447">In some implementations, the above-listed replication schemes may be implemented based on a common or uniform management model, where the common management model includes a same or similar metadata model for representing stored data, such as the metadata representation described above with reference to <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>. For example, in some implementations, a given storage system may use each of the above-listed replication schemes to establish a replication relationship among one or more other storage systems, where implementation of a replication schemes is based on a management model that is common to all storage systems participating in a replication relationship, where the common management model may be used to implement each of the above-listed replication schemes.</p><p id="p-0429" num="0448">In some implementations, while each storage system may implement a common management model, in some examples, each storage system participating in the replication relationship may have its own copy of a dataset being replicated, and a respective management model specification of internal management of a metadata model and relevant data structures for defining storage objects, for mapping objects to physical storage, for deduplication, for defining the mapping of content to snapshots, and so on.</p><p id="p-0430" num="0449">In some implementations, each of the different replication schemes, with each respective different manner in which replication is achieved, at some point communicate data or administrative information across a network or communication fabric from one storage system to another one or more storage systems.</p><p id="p-0431" num="0450">In other words, in some implementations, a given replication scheme among the above-listed replication schemes may specify networking or communication operations that specify communications between different storage systems. However, continuing with this example implementation, the given replication scheme may not specify any implementation details regarding physical media layers of a network stack, such as a network layer, a data link layer, or a physical layer. In some examples, such encapsulation disentangles any given replication scheme from being aware of network transport mechanisms, which serves as a basis for switching between replication transport mechanisms without any disruption to replication schemes. However, some replication transport mechanisms may only support some replication schemes; for example, synchronous replication may be supported by a low-latency, low-overhead communication mechanism, such as NVMe over fabric, NVMe over FC, or SCSI over FC.</p><p id="p-0432" num="0451">In this way, continuing with this example implementation, for any of the above-listed replication schemes, sending or receiving data between a first storage system (<b>900</b>) and a second storage system (<b>950</b>) is implemented similarly whether the media layer beneath the network messaging layer is a Fibre Channel network, a TCP/IP network, or any other type of physical network, including wireless networks.</p><p id="p-0433" num="0452">Consequently, in some implementations of replication handling among distinct networks, whether a storage system is implementing asynchronous replication, synchronous replication, or some other replication scheme, the replication scheme specifications are the same for communication with another storage system.</p><p id="p-0434" num="0453">In some implementations, one or more storage controllers may manage each of multiple replication relationships, from a given storage system to one or more other storage systems, where each replication relationship may be implemented over a respective network and corresponding network protocol layer. Example storage system controllers are described in greater detail above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>3</b>D</figref>.</p><p id="p-0435" num="0454">In some implementations, behavior of a replication relationship between storage system may be specified by a replication policy. For example, a replication policy may be considered a management object that specifies behaviors, rules, and/or characteristics between storage systems. Further, in some examples, a replication policy may specify a source storage system as a source for data and one or more target storage systems as a target for replication data.</p><p id="p-0436" num="0455">Further still, in some examples, a replication policy may specify storage data to be replicated, checkpoint information, a metadata representation for the storage data to be replicated, and/or metadata logs or metadata journals. In some examples, a source of data may be specified as a volume, a structured or unstructured dataset, a bucket, a file within a file system, an entire file system directory, or as a combination of sources of data.</p><p id="p-0437" num="0456">Further, in some implementations, a replication policy may specify conditions or rules that determine each condition or rule for modifying the behavior of a replication scheme, switching between replication schemes, both modifying behavior or a replication scheme and switching between different networks, or both switching between replication schemes and switching between different networks.</p><p id="p-0438" num="0457">In some implementations, for example, a replication policy may specify that if a Fibre Channel network is available between storage systems, then an initial replication scheme to use between the storage systems may be a synchronous replication scheme. Further, in this example, the replication policy may specify that the synchronous replication scheme continues unless there are changes to the health of the network or changes to available bandwidth.</p><p id="p-0439" num="0458">However, in other examples, the replication policy may specify that in response to synchronizing a dataset with a synchronous replication scheme, that the replication scheme switch to a different replication scheme, such as asynchronous replication, snapshot-based replication, or any of the other above-listed replication schemes.</p><p id="p-0440" num="0459">In some implementations, as another example, a replication policy may specify that if a TCP/IP network is available, then an initial replication scheme to use between storage systems may be an asynchronous replication scheme or a near synchronous replication scheme. Further, in this example, the replication policy may specify that if a Fibre Channel network becomes available, then the replication policy switch to a synchronous replication policy and also switch to using the Fibre Channel network.</p><p id="p-0441" num="0460">In some implementations, a replication policy may specify replication balancing among different networks to different storage systems. For example, if a first storage system is connected to a second storage system over both Fibre Channel and IP, and if the first storage system is connected to a third storage system only over IP, then the replication policy may specify that a network balancing that includes distributing, if possible, replication relationships among multiple different storage systems among multiple different networks.</p><p id="p-0442" num="0461">In this example, the replication policy, to avoid replicating data to both the second storage system and the third storage system over a same IP network, the replication policy may specify that the replication scheme between the first storage system and the third storage system use IP, and specify that the replication scheme between the first storage system and the second storage system use a different network, if available, which in this case, a Fibre Channel network is available, so the replication scheme between the first storage system and the second storage system is specified to use the Fibre Channel network.</p><p id="p-0443" num="0462">Continuing with this example, in addition to determining how to distribute which replication scheme among the available networks to different storage systems, the replication policy may further specify, given a selection of networks to use between storage systems, which of the replication schemes to use among the selection of networks to the other storage systems. In this example, the selection of replication scheme may be carried out similarly to the above-listed examples.</p><p id="p-0444" num="0463">In some implementations, a replication policy may specify conditions or rules based on underlying network health or underlying bandwidth characteristics. For examples, if network behavior changes, or if there are indications of a degradation of network health, or indications of a possible network outage, then the replication policy may switch from a current replication scheme to a lower bandwidth intensive replication scheme.</p><p id="p-0445" num="0464">In other examples, a replication policy may specify that in response to indications of a degradation of network health, or indications of a possible network outage, then the replication policy may switch from using a current network for a current replication scheme to using a different network for a same replication scheme or to using a different network and switching to a different replication scheme.</p><p id="p-0446" num="0465">In some implementations, in addition to or instead of responding to network health by switching networks, a replication policy may specify responses to changes in network loads or network bandwidth availability. For example, a replication policy may specify that in response to network bandwidth availability that drops below a specified threshold, a replication scheme without switching networks or switching between messaging layers&#x2014;switch from a current replication scheme to a replication scheme that uses less network bandwidth. For example, the replication policy may specify a switch from using synchronous replication to snapshot-based replication, or some other type of lower bandwidth consumption replication scheme.</p><p id="p-0447" num="0466">In some implementations, in addition to or instead of responding to network health by switching networks, a replication policy may specify responses to changes in network loads or network bandwidth availability. For example, a replication policy may specify that in response to network bandwidth availability that drops below a specified threshold, to switch from a current network for a current replication scheme to a different network, where the switch to the different network may continue with a same replication scheme or also include switching to a different replication scheme. In this example, if the switch includes switching replication schemes, the selection of a different replication scheme may be carried out as described above.</p><p id="p-0448" num="0467">Further, in some implementations, each storage system participating in a replication relationship according to any of the above replication schemes may implement a shared, or common management model that specifies a metadata representations, implementation model, or persistent data structures for implementing each of the above replication schemes.</p><p id="p-0449" num="0468">As one example implementation of switching between replication schemes that use pods, a replication relationship between two storage systems (<b>900</b>, <b>950</b>) may be switched from a relationship where data is asynchronously replicated to a relationship where data is synchronously replicated. For example, if a first storage system (<b>900</b>) is configured to asynchronously replicate a dataset to a second storage system (<b>950</b>), then creating a pod that includes the dataset, the first storage system (<b>900</b>) as a member, and the second storage system (<b>950</b>) as a member can switch the relationship where data is asynchronously replicated to a relationship where data is synchronously replicated.</p><p id="p-0450" num="0469">Similarly, continuing with this example, through the use of pods, the replication relationship between two storage systems may be switched from a relationship where data is synchronously replicated to a relationship where data is asynchronously replicated. For example, if a pod is created that includes the dataset, where the pod includes the first storage system (<b>900</b>) as a member and includes the second storage system (<b>950</b>) as a member, then by unstretching the pod (to remove the first storage system (<b>900</b>) as a member or to remove the second storage system (<b>950</b>) as a member), a relationship where data is synchronously replicated between the storage systems can immediately be switched to a relationship where data is asynchronously replicated. In this way, in some implementations, storage systems (<b>900</b>, <b>950</b>) may switch back and forth as needed between asynchronous replication and synchronous replication.</p><p id="p-0451" num="0470">Further, in this example, switching may be facilitated by the implementation relying on similar techniques for both synchronous and asynchronous replication. For example, if resynchronization for a synchronously replicated dataset relies on the same or a compatible mechanism as is used for asynchronous replication, then switching to asynchronous replication is conceptually identical to dropping the in-sync state and leaving a relationship in a state similar to a &#x201c;perpetual recovery&#x201d; mode. Likewise, switching from asynchronous replication to synchronous replication can operate conceptually by &#x201c;catching up&#x201d; and becoming in-sync just as is done when completing a resynchronization with the switching system becoming an in-sync pod member.</p><p id="p-0452" num="0471">In some implementations, alternatively, or additionally, given that both synchronous and asynchronous replication rely on similar or identical common metadata (or a common model for representing and identifying logical extents or stored block identities, or a common model for representing content-addressable stored blocks) these aspects of commonality can be leveraged to dramatically reduce the content that may need to be transferred when switching to and from synchronous and asynchronous replication.</p><p id="p-0453" num="0472">Further, in some implementations, if a dataset is asynchronously replicated from a first storage system (<b>900</b>) to a second storage system (<b>950</b>), and the second storage system (<b>950</b>) further asynchronously replicates that data set to a third storage system (not depicted), then a common metadata model, common logical extent or block identities, or common representation of content-addressable stored blocks, may dramatically reduce the data transfers needed to enable synchronous replication between the first storage system (<b>900</b>) and the third storage system.</p><p id="p-0454" num="0473">Turning toward <figref idref="DRAWINGS">FIG. <b>9</b></figref>, the flowchart illustrates a method for replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0455" num="0474">The example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> includes: establishing (<b>902</b>), over a first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>); initiating (<b>904</b>), over a second type of network messaging layer, a configuration change to one or more aspects of the first storage system (<b>900</b>); and replicating (<b>906</b>), without disrupting the configuration change to the one or more aspects of the first storage system (<b>900</b>), data (<b>970</b>) from the first storage system to the second storage system.</p><p id="p-0456" num="0475">Establishing (<b>902</b>), over the first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>) may be carried out using multiple techniques. For example, as described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>8</b></figref>, a communication link may be established using a network messaging layer from a standard network protocol, such as Fibre Channel, TCP/IP, NVMe over Fabrics, among others. In other examples, a communication link may be established based on selective protocol layering, such as described above with reference to <figref idref="DRAWINGS">FIGS. <b>7</b> and <b>8</b></figref>. As discussed above, the network messaging layer may be a network transport layer.</p><p id="p-0457" num="0476">Further, in this example, and as described above, a replication policy may specify conditions, rules, and/or criteria on which to base a selection of an available network type and corresponding network port to use. Further still, in this example, a replication policy may specify conditions or criteria on which to base a selection of the replication scheme to use. In some examples, a replication policy may be associated with a respective dataset to be replicated, where the dataset may be any type of organization of data, as described above.</p><p id="p-0458" num="0477">Initiating (<b>904</b>), over a second type of network messaging layer (<b>964</b>), a configuration change to one or more aspects of the first storage system (<b>900</b>) may be carried out using multiple techniques. For example, a remote computer system (<b>952</b>) may have automated configuration management software, or provide an administrator with a storage system management console, where the administrator or the configuration management software may issue an update that carries out a configuration change to one or more aspects of the storage system (<b>900</b>) software, or firmware, or both. In other examples, configuration management software may be implemented within a cloud computing environment, or where an administrator accesses a storage system management console via a cloud services provider.</p><p id="p-0459" num="0478">Further, in this example, the second type of network messaging layer (<b>964</b>) may be implemented as part of a network protocol that operates over a network accessible by a network port that is distinct from a network port that provides access to a different network over which the first type of networking messaging layer (<b>960</b>) operates.</p><p id="p-0460" num="0479">Replicating (<b>906</b>), without disrupting the configuration change to the one or more aspects of the first storage system (<b>900</b>), data (<b>970</b>) from the first storage system to the second storage system may be carried out as described above. For example, the first storage system (<b>900</b>) may, given an established communication link over which a replication scheme may operate, replicate data (<b>970</b>) to the other storage system (<b>950</b>) in accordance with the replication scheme using a messaging layer (<b>960</b>) that is independent and distinct from the messaging layer (<b>964</b>) over which the configuration change is transmitted from the computer system (<b>952</b>) to the storage system (<b>900</b>).</p><p id="p-0461" num="0480">For further explanation, <figref idref="DRAWINGS">FIG. <b>10</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0462" num="0481">The example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref> includes: establishing (<b>902</b>), over a first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>); initiating (<b>904</b>), over a second type of network messaging layer, a configuration change to one or more aspects of the first storage system (<b>900</b>); and replicating (<b>906</b>), without disrupting the configuration change to the one or more aspects of the first storage system (<b>900</b>), data (<b>970</b>) from the first storage system to the second storage system.</p><p id="p-0463" num="0482">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref> further specifies that initiating (<b>904</b>), over a second type of network messaging layer, a configuration change to one or more aspects of the first storage system (<b>900</b>) includes upgrading (<b>1006</b>) one or more software components on the first storage system (<b>900</b>). Further, the example method in <figref idref="DRAWINGS">FIG. <b>10</b></figref> also includes: replicating (<b>1002</b>), over a second communication link between the first storage system (<b>900</b>) and the second storage system (<b>950</b>), a portion (<b>1052</b>) of a dataset, where the communication link over the first type of network messaging layer is a first communication link; interrupting (<b>1004</b>) replication over the second communication link to initiate the configuration change; establishing (<b>1008</b>), based on the updated one or more software or hardware components, a third communication link between the first storage system (<b>900</b>) and the second storage system (<b>950</b>); and replicating (<b>1010</b>), over the third communication link, additional portions (<b>1054</b>) of the dataset, where replication over the third communication link uses a type of network messaging layer (<b>1060</b>) that is different from the first type of network messaging layer.</p><p id="p-0464" num="0483">In this example, a dataset (<b>1050</b>) being replicated among the storage system (<b>900</b>, <b>950</b>), may include multiple portions of data (<b>970</b>, <b>1052</b>, <b>1054</b>), where the multiple portions of data may be transmitted along multiple communication links and corresponding messaging layers. Further, in this example, as described in greater detail below, replication along one of the communication links may be interrupted to upgrade the storage system (<b>900</b>) to be able to use a different type of network messaging layer, where replication of the dataset (<b>1050</b>) may continue after the upgrade via a communication link that uses the new type of messaging layer.</p><p id="p-0465" num="0484">Replicating (<b>1002</b>), over a second communication link between the first storage system (<b>900</b>) and the second storage system (<b>950</b>), a portion (<b>1052</b>) of the dataset, where the communication link over the first type of network messaging layer is a first communication link may be carried out similarly as described above with reference to replicating (<b>906</b>), data (<b>970</b>) from the first storage system (<b>950</b>) to the second storage system. In some examples, the second communication link&#x2014;prior to upgrading (<b>1006</b>)&#x2014;may be over a same type of network messaging layer (<b>960</b>) as the first communication link. As one example, the network messaging layer (<b>960</b>) used by both the first and second communication links may be Ethernet, where the upgraded network messaging layer may be Fibre Channel; however, any messaging layer protocols described above may correspond to the initial and/or upgraded components for establishing a network communication protocol and network messaging layer. In this example, replicating (<b>1002</b>) may be performed prior to initiating (<b>904</b>) the configuration change.</p><p id="p-0466" num="0485">Interrupting (<b>1004</b>) replication (<b>1002</b>) over the second communication link to initiate (<b>904</b>) the configuration change may be carried out by the replication scheme responding to a command from a storage controller to suspend replication.</p><p id="p-0467" num="0486">Upgrading (<b>1006</b>) one or more software components on the first storage system (<b>900</b>) may be performed by the storage system (<b>900</b>) receiving, over a communication link that uses a particular network protocol and a corresponding network messaging service (<b>964</b>), a command or instruction that specifies an update or upgrade to storage system (<b>900</b>) software, firmware, or both software and firmware. As noted above, the communication link between the storage system (<b>900</b>) and the computer system (<b>952</b>) operates over a network, and corresponding protocol stack including the messaging layer (<b>964</b>), that is distinct and independent of the communication link over a different network, and corresponding protocol stack that includes the messaging layer (<b>960</b>).</p><p id="p-0468" num="0487">Continuing with this example, and given the independence of the networks and communication links between the first storage system (<b>900</b>) and the second storage system (<b>950</b>) and between the first storage system (<b>900</b>) and the computer system (<b>952</b>), the upgrade (<b>1002</b>) issued by the computer system (<b>952</b>) to the first storage system (<b>900</b>) may occur simultaneously with replication of data (<b>970</b>) between the first storage system (<b>900</b>) and the second storage system. Further, based on this independence, the upgrade (<b>1002</b>) may occur without disrupting the replication relationship and the replication of data between the first storage system (<b>900</b>) and the second storage system (<b>950</b>).</p><p id="p-0469" num="0488">Establishing (<b>1008</b>), based on the updated one or more software or hardware components, a third communication link between the first storage system (<b>900</b>) and the second storage system (<b>950</b>) may be carried out similarly to establishing (<b>902</b>) the first communication link between the first storage system (<b>900</b>) and the second storage system (<b>950</b>), where the difference is in the type of network communication protocol and network messaging layer established, and where details of the network communication protocols and network messaging layers are described above. In this example, establishing (<b>1008</b>) the third communication link may be performed subsequent to initiating (<b>904</b>) the configuration change.</p><p id="p-0470" num="0489">Replicating (<b>1010</b>), over the third communication link, additional portions (<b>1054</b>) of the dataset, where replication (<b>1010</b>) over the third communication link uses a type of network messaging layer that is different from the first type of network messaging layer may be carried out similarly to replicating (<b>906</b>) data from the first storage system (<b>900</b>) to the second storage system (<b>950</b>), where the difference is in the type of network communication protocol and network messaging layer used for the third communication link. In this example, replicating (<b>1010</b>) the additional portions (<b>1054</b>) of the dataset may be performed subsequent to initiating (<b>904</b>) the configuration change.</p><p id="p-0471" num="0490">In this way, in this example, replication between the first and second storage systems (<b>900</b>, <b>950</b>) may continue without disruption over multiple, distinct communication links, and corresponding network communication layers, even as some of the communication links among the multiple communication links may be interrupted for upgrades&#x2014;and where replication may continue among all communication links subsequent to the upgrades.</p><p id="p-0472" num="0491">For further explanation, <figref idref="DRAWINGS">FIG. <b>11</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0473" num="0492">The example method depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref> includes: establishing (<b>902</b>), over a first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>); initiating (<b>904</b>), over a second type of network messaging layer, a configuration change to one or more aspects of the first storage system (<b>900</b>); and replicating (<b>906</b>), without disrupting the configuration change to the one or more aspects of the first storage system (<b>900</b>), data (<b>970</b>) from the first storage system to the second storage system.</p><p id="p-0474" num="0493">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref> further includes: determining (<b>1102</b>) whether requirements for a replication scheme are satisfied by network characteristics of a first network providing the first type of network messaging layer (<b>960</b>); determining (<b>1104</b>) whether requirements for the replication scheme are satisfied by network characteristics of a second network providing the second type of network messaging layer (<b>964</b>); and selecting (<b>1106</b>), based on the requirements for the replication scheme begin satisfied by the network characteristics of the first network, the replication scheme between the first storage system (<b>900</b>) and the second storage system (<b>950</b>) to be a first replication scheme among a plurality of replication schemes.</p><p id="p-0475" num="0494">Determining (<b>1102</b>) whether requirements for a replication scheme are satisfied by network characteristics of a first network providing the first type of network messaging layer (<b>960</b>) may be carried out by referencing a replication policy for the data (<b>970</b>) or dataset being replicated and identifying one or more requirements for supporting the replication scheme and comparing to the network characteristics. For example, the replication policy may specify that for the replication scheme, say synchronous replication, that round trip travel time for communication to the second storage system (<b>950</b>) be under a specified number of microseconds, or that a specified quantity of bandwidth needs to be available, or that a specified level of network reliability must be provided, or other characteristics of metrics of an underlying network. For example, different networks, such as Fibre Channel or other listed above, may specify metrics for network messaging and supported network bandwidths.</p><p id="p-0476" num="0495">Continuing with this example, given the replication scheme requirements, and given the network characteristics, a determination may be made as to whether each of the replication scheme requirements are satisfied by the network characteristics of the first network.</p><p id="p-0477" num="0496">Determining (<b>1104</b>) whether requirements for the replication scheme are satisfied by network characteristics of a second network providing the second type of network messaging layer (<b>964</b>) may be carried out by referencing the replication policy for the data (<b>970</b>) or dataset being replicated and identifying one or more requirements for supporting the replication scheme and comparing to the network characteristics. For example, as noted above, the replication policy may specify that for the replication scheme, say synchronous replication, that round trip travel time for communication to the second storage system (<b>950</b>) be under a specified number of microseconds, or that a specified quantity of bandwidth needs to be available, or that a specified level of network reliability must be provided, or other characteristics of metrics of an underlying network. Given the replication scheme requirements and given the network characteristics, a determination may be made as to whether each of the replication scheme requirements are satisfied by the network characteristics of the second network.</p><p id="p-0478" num="0497">Selecting (<b>1106</b>), based on the requirements for the replication scheme begin satisfied by the network characteristics of the first network, the replication scheme between the first storage system (<b>900</b>) and the second storage system (<b>950</b>) to be a first replication scheme among a plurality of replication schemes may be carried out by using the determinations (<b>1102</b>, <b>1104</b>) of whether the replication scheme is satisfied by the first network or the second network&#x2014;where the network that satisfies, or best satisfies, the replication scheme requirements may be selected as the network for the replication scheme.</p><p id="p-0479" num="0498">For further explanation, <figref idref="DRAWINGS">FIG. <b>12</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0480" num="0499">The example method depicted in <figref idref="DRAWINGS">FIG. <b>12</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>12</b></figref> includes: determining (<b>1102</b>) whether requirements for a replication scheme are satisfied by network characteristics of a first network providing the first type of network messaging layer (<b>960</b>); determining (<b>1104</b>) whether requirements for the replication scheme are satisfied by network characteristics of a second network providing the second type of network messaging layer (<b>964</b>); establishing (<b>902</b>), over a first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>); initiating (<b>904</b>), over a second type of network messaging layer, a configuration change to one or more aspects of the first storage system (<b>900</b>); and replicating (<b>906</b>), without disrupting the configuration change to the one or more aspects of the first storage system (<b>900</b>), data (<b>970</b>) from the first storage system to the second storage system.</p><p id="p-0481" num="0500">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>12</b></figref>, in contrast to the example method depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, which includes selecting (<b>1106</b>) the replication scheme among a plurality of replication schemes, the example method in <figref idref="DRAWINGS">FIG. <b>12</b></figref> includes: selecting (<b>1202</b>), based on requirements for a second replication scheme being satisfied by the network characteristics of the second network, a second replication scheme between the first storage system (<b>900</b>) and a third storage system (<b>1250</b>), where the second replication scheme is among a plurality of replication schemes.</p><p id="p-0482" num="0501">Selecting (<b>1202</b>), based on requirements for a second replication scheme being satisfied by the network characteristics of the second network, a second replication scheme between the first storage system (<b>900</b>) and a third storage system (<b>1250</b>) may be carried out similarly to selecting (<b>1106</b>) the replication scheme between the first storage system (<b>900</b>) and the second storage system (<b>950</b>).</p><p id="p-0483" num="0502">For further explanation, <figref idref="DRAWINGS">FIG. <b>13</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0484" num="0503">The example method depicted in <figref idref="DRAWINGS">FIG. <b>13</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>12</b></figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>13</b></figref> includes: selecting (<b>1202</b>), based on requirements for a second replication scheme being satisfied by the network characteristics of the second network, a second replication scheme between the first storage system (<b>900</b>) and a third storage system (<b>1250</b>); establishing (<b>902</b>), over a first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>); initiating (<b>904</b>), over a second type of network messaging layer, a configuration change to one or more aspects of the first storage system (<b>900</b>); and replicating (<b>906</b>), without disrupting the configuration change to the one or more aspects of the first storage system (<b>900</b>), data (<b>970</b>) from the first storage system to the second storage system.</p><p id="p-0485" num="0504">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>13</b></figref> further includes: establishing (<b>1302</b>), over the second type of messaging layer (<b>964</b>), a communication link for the second replication scheme between the first storage system (<b>900</b>) and a third storage system (<b>1250</b>); and simultaneously replicating (<b>1304</b>), over respective network messaging layers (<b>960</b>, <b>964</b>), data (<b>970</b>) from the first storage system (<b>900</b>) to both the second storage system (<b>950</b>) and the third storage system (<b>1250</b>).</p><p id="p-0486" num="0505">Establishing (<b>1302</b>), over the second type of messaging layer (<b>964</b>), a communication link for the second replication scheme between the first storage system (<b>900</b>) and a third storage system (<b>1250</b>) may be carried out similarly to establishing (<b>902</b>), over a first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>), described above with reference to <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0487" num="0506">Simultaneously replicating (<b>1304</b>), over respective network messaging layers (<b>960</b>, <b>964</b>), data (<b>970</b>) from the first storage system (<b>900</b>) to both the second storage system (<b>950</b>) and the third storage system (<b>1250</b>) may be carried out as described above.</p><p id="p-0488" num="0507">For example, based on having the first storage system (<b>900</b>) configured to establish multiple communication links over different underlying physical networks, such as different networks to the second storage system (<b>950</b>) and the third storage system (<b>1250</b>), the first storage system (<b>900</b>) may continue to replication data (<b>970</b>) to the second storage system (<b>950</b>) over a first network and a first type of messaging layer (<b>960</b>) while simultaneously replicating data (<b>970</b>) from first storage system (<b>900</b>) to the third storage system (<b>1250</b>) over a second network and a second type of messaging layer (<b>964</b>).</p><p id="p-0489" num="0508">For further explanation, <figref idref="DRAWINGS">FIG. <b>14</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0490" num="0509">The example method depicted in <figref idref="DRAWINGS">FIG. <b>14</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>13</b></figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>14</b></figref> includes: establishing (<b>1302</b>), over the second type of messaging layer (<b>964</b>), a communication link for the second replication scheme between the first storage system (<b>900</b>) and a third storage system (<b>1250</b>); establishing (<b>902</b>), over a first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>); simultaneously replicating (<b>1304</b>), over respective network messaging layers (<b>960</b>, <b>964</b>), data (<b>970</b>) from the first storage system (<b>900</b>) to both the second storage system (<b>950</b>) and the third storage system (<b>1250</b>); initiating (<b>904</b>), over a second type of network messaging layer, a configuration change to one or more aspects of the first storage system (<b>900</b>); and replicating (<b>906</b>), without disrupting the configuration change to the one or more aspects of the first storage system (<b>900</b>), data (<b>970</b>) from the first storage system to the second storage system.</p><p id="p-0491" num="0510">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>14</b></figref> includes interrupting (<b>1402</b>) replication between the first storage system (<b>900</b>) and the third storage system (<b>1250</b>) to begin a configuration change.</p><p id="p-0492" num="0511">Interrupting (<b>1402</b>) replication between the first storage system (<b>900</b>) and the third storage system (<b>1250</b>) to begin a configuration change may be carried out by a storage controller, in response to receiving a message indicating an update, suspending or interrupting replication that is occurring over the communication link between the first storage system (<b>900</b>) and the third storage system (<b>1250</b>). Further, in this example, after suspending the replication between the first storage system (<b>900</b>) and the third storage system (<b>1250</b>), the storage controller may apply the configuration change specified in the update message.</p><p id="p-0493" num="0512">For further explanation, <figref idref="DRAWINGS">FIG. <b>15</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0494" num="0513">The example method depicted in <figref idref="DRAWINGS">FIG. <b>15</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>15</b></figref> includes: establishing (<b>902</b>), over a first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>); initiating (<b>904</b>), over a second type of network messaging layer, a configuration change to one or more aspects of the first storage system (<b>900</b>); and replicating (<b>906</b>), without disrupting the configuration change to the one or more aspects of the first storage system (<b>900</b>), data (<b>970</b>) from the first storage system to the second storage system.</p><p id="p-0495" num="0514">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>15</b></figref> further includes: establishing (<b>1502</b>), over the second type of network messaging layer (<b>964</b>), a communication link for a second replication scheme between the first storage system (<b>900</b>) and the second storage system (<b>950</b>); and simultaneously replicating (<b>1504</b>), over different network messaging layers (<b>960</b>, <b>964</b>), data (<b>970</b>) from the first storage system (<b>900</b>) to the second storage system (<b>950</b>) over the first type of network messaging layer (<b>960</b>) and data (<b>1570</b>) from the first storage system (<b>900</b>) to the second storage system (<b>950</b>) over the second type of network messaging layer (<b>964</b>).</p><p id="p-0496" num="0515">Establishing (<b>1502</b>), over the second type of network messaging layer (<b>964</b>), a communication link for a second replication scheme between the first storage system (<b>900</b>) and the second storage system (<b>950</b>) may be carried out similarly to establishing (<b>902</b>) a communication link for the replication scheme between the first storage system (<b>900</b>) and the second storage system (<b>950</b>)&#x2014;where a difference is that the communication link is established over a different messaging layer.</p><p id="p-0497" num="0516">Simultaneously replicating (<b>1504</b>), over different network messaging layers (<b>960</b>, <b>964</b>), data (<b>970</b>) from the first storage system (<b>900</b>) to the second storage system (<b>950</b>) over the first type of network messaging layer (<b>960</b>) and data (<b>1570</b>) from the first storage system (<b>900</b>) to the second storage system (<b>950</b>) over the second type of network messaging layer (<b>964</b>) may be carried out based on having the first storage system (<b>900</b>) configured to establish multiple communication links over different underlying physical networks, such as different networks to the same second storage system (<b>950</b>)&#x2014;where the first storage system (<b>900</b>) may continue to replication data (<b>970</b>) to the second storage system (<b>950</b>) over a first network and a first type of messaging layer (<b>960</b>) while simultaneously replicating data (<b>1570</b>) from first storage system (<b>900</b>) to the second storage system (<b>950</b>) over a second network and a second type of messaging layer (<b>964</b>).</p><p id="p-0498" num="0517">For further explanation, <figref idref="DRAWINGS">FIG. <b>16</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0499" num="0518">The example method depicted in <figref idref="DRAWINGS">FIG. <b>16</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>16</b></figref> includes: establishing (<b>902</b>), over a first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>); initiating (<b>904</b>), over a second type of network messaging layer, a configuration change to one or more aspects of the first storage system (<b>900</b>); and replicating (<b>906</b>), without disrupting the configuration change to the one or more aspects of the first storage system (<b>900</b>), data (<b>970</b>) from the first storage system to the second storage system.</p><p id="p-0500" num="0519">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>16</b></figref>, in contrast to the example method of <figref idref="DRAWINGS">FIG. <b>9</b></figref>, further includes: detecting (<b>1602</b>) a change in network characteristics of the first network supporting the first communication link to the second storage system (<b>950</b>); and determining (<b>1604</b>) that the change in network characteristics fails to satisfy one or more replication scheme requirements of the replication scheme.</p><p id="p-0501" num="0520">Detecting (<b>1602</b>) a change in network characteristics of the first network supporting the first communication link to the second storage system (<b>950</b>) may be carried out by a diagnostic or monitoring process that periodically, or in response to network events, gathers metrics and status information for a given network, such as the first network in this example.</p><p id="p-0502" num="0521">Determining (<b>1604</b>) that the change in network characteristics fails to satisfy one or more replication scheme requirements of the replication scheme may be carried out by comparing current network characteristics&#x2014;based on the changes detected (<b>1602</b>) above&#x2014;and referencing a replication policy for the data (<b>970</b>) or dataset being replicated and identifying one or more requirements for supporting the replication scheme and comparing to the current network characteristics. For example, the replication policy may specify that for the replication scheme, say synchronous replication, that a specified network speed, or that a specified quantity of bandwidth needs to be available, or that a specified level of network reliability must be provided, or other characteristics of metrics of an underlying network.</p><p id="p-0503" num="0522">For further explanation, <figref idref="DRAWINGS">FIG. <b>17</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0504" num="0523">The example method depicted in <figref idref="DRAWINGS">FIG. <b>17</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>16</b></figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>17</b></figref> includes: establishing (<b>902</b>), over a first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>); initiating (<b>904</b>), over a second type of network messaging layer, a configuration change to one or more aspects of the first storage system (<b>900</b>); replicating (<b>906</b>), without disrupting the configuration change to the one or more aspects of the first storage system (<b>900</b>), data (<b>970</b>) from the first storage system to the second storage system; detecting (<b>1602</b>) a change in network characteristics of the first network supporting the first communication link to the second storage system (<b>950</b>); and determining (<b>1604</b>) that the change in network characteristics fails to satisfy one or more replication scheme requirements of the replication scheme.</p><p id="p-0505" num="0524">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>17</b></figref> further specifies that responsive to determining (<b>1604</b>) the change in network characteristics fails to satisfy the one or more replication scheme requirements of the replication scheme: selecting (<b>1702</b>), based on current network characteristics after the change in network conditions and based on the current network conditions satisfying requirements of a replacement replication scheme, the replacement replication scheme from among a plurality of replication schemes.</p><p id="p-0506" num="0525">Selecting (<b>1702</b>), based on current network characteristics after the change in network conditions and based on the current network conditions satisfying requirements of a replacement replication scheme, the replacement replication scheme from among a plurality of replication schemes may be carried out similarly to selecting (<b>1202</b>), based on requirements for a second replication scheme being satisfied by the network characteristics of the second network, a second replication scheme between the first storage system (<b>900</b>) and a third storage system (<b>1250</b>), where the second replication scheme is among a plurality of replication schemes, described in <figref idref="DRAWINGS">FIG. <b>12</b></figref>.</p><p id="p-0507" num="0526">For further explanation, <figref idref="DRAWINGS">FIG. <b>18</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0508" num="0527">The example method depicted in <figref idref="DRAWINGS">FIG. <b>18</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>17</b></figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>18</b></figref> includes: establishing (<b>902</b>), over a first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>); initiating (<b>904</b>), over a second type of network messaging layer, a configuration change to one or more aspects of the first storage system (<b>900</b>); replicating (<b>906</b>), without disrupting the configuration change to the one or more aspects of the first storage system (<b>900</b>), data (<b>970</b>) from the first storage system to the second storage system; detecting (<b>1602</b>) a change in network characteristics of the first network supporting the first communication link to the second storage system (<b>950</b>); determining (<b>1604</b>) that the change in network characteristics fails to satisfy one or more replication scheme requirements of the replication scheme; and responsive to determining (<b>1604</b>) the change in network characteristics fails to satisfy the one or more replication scheme requirements of the replication scheme: selecting (<b>1702</b>), based on current network characteristics after the change in network conditions and based on the current network conditions satisfying requirements of a replacement replication scheme, the replacement replication scheme from among a plurality of replication schemes.</p><p id="p-0509" num="0528">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>18</b></figref> further includes: establishing (<b>1802</b>), over a third type of network messaging layer (<b>1850</b>), a third communication link for the replacement replication scheme between the first storage system (<b>900</b>) and the second storage system (<b>950</b>).</p><p id="p-0510" num="0529">Establishing (<b>1802</b>), over a third type of network messaging layer (<b>1850</b>), a third communication link for the replacement replication scheme between the first storage system (<b>900</b>) and the second storage system (<b>950</b>) may be carried out similarly to establishing (<b>902</b>), over a first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>), described above with reference to <figref idref="DRAWINGS">FIG. <b>9</b></figref>. As noted above, the first storage system (<b>900</b>) may include multiple network ports, where each network port may support one or more networking protocols over one or more communication networks or fabrics, and where each networking protocol may correspond to a network protocol stack that includes a messaging layer.</p><p id="p-0511" num="0530">For further explanation, <figref idref="DRAWINGS">FIG. <b>19</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0512" num="0531">The example method depicted in <figref idref="DRAWINGS">FIG. <b>19</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>19</b></figref> includes: establishing (<b>902</b>), over a first type of network messaging layer (<b>960</b>), a communication link for a replication scheme between a first storage system (<b>900</b>) and a second storage system (<b>950</b>); initiating (<b>904</b>), over a second type of network messaging layer, a configuration change to one or more aspects of the first storage system (<b>900</b>); and replicating (<b>906</b>), without disrupting the configuration change to the one or more aspects of the first storage system (<b>900</b>), data (<b>970</b>) from the first storage system to the second storage system.</p><p id="p-0513" num="0532">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>19</b></figref>, in contrast to the example method of <figref idref="DRAWINGS">FIG. <b>9</b></figref>, further includes: determining (<b>1902</b>) that a dataset being replicated from the first storage system (<b>900</b>) to the second storage system (<b>950</b>) is synchronized; and responsive to the dataset being synchronized (<b>1904</b>): switching (<b>1904</b>A) from the first network messaging layer to a third network messaging layer (<b>1950</b>), and switching (<b>1904</b>B) from the replication scheme being a synchronous replication scheme to the replication scheme being a near synchronous replication scheme.</p><p id="p-0514" num="0533">In this example, a replication policy associated with a dataset may specify conditions under which replication schemes may be switched to a different replication scheme. For example, initial synchronization of a dataset may be network bandwidth intensive, and so a replication policy may select a Fibre Channel network for initially synchronizing the dataset. Further, in this example, the replication policy for the dataset may specify that in response to initially synchronizing the dataset, to switch to a different replication scheme and/or a different type of network transport mechanism.</p><p id="p-0515" num="0534">Continuing with this example, in response to synchronizing the dataset&#x2014;for example, in order to provide the Fibre Channel network to other bandwidth intensive replication scheme use&#x2014;may switch the replication scheme to a different network based on a replication policy specifying balancing of network usage that includes specifying use of lower bandwidth networks or lower traffic replication schemes subsequent to the initial dataset being synchronized. Further, in some examples, in addition to switching to a different network, and corresponding different messaging layer, the replication scheme may also be switched to a different replication scheme.</p><p id="p-0516" num="0535">Determining (<b>1902</b>) that a dataset being replicated from the first storage system (<b>900</b>) to the second storage system (<b>950</b>) is synchronized may be carried out using various techniques in accordance with a particular replication scheme being used. For example, as described above with reference to a synchronous replication scheme synchronizing a dataset (<b>426</b>) between multiple storage system (<b>402</b>, <b>404</b>, <b>406</b>) may use acknowledgement messages between storage system to indicate a synchronized dataset. In other examples, different replication schemes may have respective mechanisms for determining when a dataset is synchronized, as described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>8</b></figref>.</p><p id="p-0517" num="0536">Switching (<b>1904</b>A), in response to the dataset being synchronized (<b>1904</b>), from the first network messaging layer to a third network messaging layer (<b>1950</b>) may be carried out by a storage controller suspending replication operations from the first storage system to the second storage system on a current network using a current first network messaging layer (<b>960</b>), and then establishing a communication link with the second storage system (<b>950</b>) using a different network and a third network messaging layer (<b>1950</b>). In this example, establishing the communication link may be carried out to establishing (<b>902</b>) a communication link as described above with reference to <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0518" num="0537">Switching (<b>1904</b>B) from the replication scheme being a synchronous replication scheme to the replication scheme being a near synchronous replication scheme may be carried out by the storage controller suspending the current synchronous replication scheme by completing any outstanding operations for the current synchronous replication scheme without initiating new replication operations. In response to completing any current outstanding replication operations, the storage controller may then initiate the asynchronous replication scheme over the established communication link described above with reference to switching (<b>1904</b>A) between network messaging layers.</p><p id="p-0519" num="0538">For further explanation, <figref idref="DRAWINGS">FIG. <b>20</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0520" num="0539">In this example, two storage systems (<b>2000</b>, <b>2050</b>) may establish a replication relationship in accordance with a given replication scheme, where the storage systems may use multiple different networks and correspondingly different network messaging mechanisms to simultaneously replicate data.</p><p id="p-0521" num="0540">Specifically, in the example method depicted in <figref idref="DRAWINGS">FIG. <b>20</b></figref> includes a storage system (<b>2000</b>): establishing (<b>2002</b>), over a first type of network messaging layer (<b>2062</b>), a communication link for a first replication scheme between a first storage system (<b>2000</b>) and a second storage system (<b>2050</b>); establishing (<b>2004</b>), over a second type of messaging layer (<b>2060</b>), a second communication link for a second replication scheme between the first storage system and the second storage system (<b>2050</b>); and simultaneously replicating, over both the first type of network messaging layer (<b>2062</b>) and the second type of network messaging layer (<b>2060</b>), respective portions of a dataset (<b>2052</b>) from the first storage system (<b>2000</b>) to the second storage system (<b>2050</b>).</p><p id="p-0522" num="0541">Establishing (<b>2002</b>), over a first type of network messaging layer (<b>2062</b>), a communication link for a first replication scheme between a first storage system (<b>2000</b>) and a second storage system (<b>2050</b>) may be carried out similarly to establishing (<b>902</b>) a communication link between storage systems described above with reference to <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0523" num="0542">Establishing (<b>2004</b>), over a second type of messaging layer (<b>2060</b>), a second communication link for a second replication scheme between the first storage system and the second storage system (<b>2050</b>) may be carried out similarly to establishing (<b>902</b>) a communication link between storage systems described above with reference to <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0524" num="0543">Simultaneously replicating (<b>2006</b>), over both the first type of network messaging layer (<b>2062</b>) and the second type of network messaging layer (<b>2060</b>), respective portions of a dataset (<b>2052</b>) from the first storage system (<b>2000</b>) to the second storage system (<b>2050</b>) may be carried out similarly to simultaneously replicating (<b>1304</b>) data between a first storage system and a second and third storage system. However, in this example, by contrast to simultaneous replication (<b>1304</b>) in <figref idref="DRAWINGS">FIG. <b>13</b></figref> to different storage systems, the first storage system simultaneously replicates data (<b>2070</b>, <b>2072</b>) portions of the dataset (<b>2052</b>) to the same second storage system (<b>2050</b>) over different networks using different network messaging layers (<b>2060</b>, <b>2062</b>).</p><p id="p-0525" num="0544">For further explanation, <figref idref="DRAWINGS">FIG. <b>21</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0526" num="0545">In this example, as described in <figref idref="DRAWINGS">FIG. <b>20</b></figref>, the two storage systems (<b>2000</b>, <b>2050</b>) have an established replication relationship in accordance with a given replication scheme, where the storage systems may use multiple different networks and correspondingly different network messaging mechanisms to simultaneously replicate data.</p><p id="p-0527" num="0546">However, in the example method of <figref idref="DRAWINGS">FIG. <b>20</b></figref>, a replication policy may specify responses to changes in network availability, where the responses may include switching replication schemes and/or switching to a different network and corresponding network messaging mechanism.</p><p id="p-0528" num="0547">Specifically, in the example method depicted in <figref idref="DRAWINGS">FIG. <b>21</b></figref>, similar to the example method of <figref idref="DRAWINGS">FIG. <b>20</b></figref>, includes a storage system (<b>2000</b>): establishing (<b>2002</b>), over a first type of network messaging layer (<b>2062</b>), a communication link for a first replication scheme between a first storage system (<b>2000</b>) and a second storage system (<b>2050</b>); establishing (<b>2004</b>), over a second type of messaging layer (<b>2060</b>), a second communication link for a second replication scheme between the first storage system and the second storage system (<b>2050</b>); and simultaneously replicating, over both the first type of network messaging layer (<b>2062</b>) and the second type of network messaging layer (<b>2060</b>), respective portions of a dataset (<b>2052</b>) from the first storage system (<b>2000</b>) to the second storage system (<b>2050</b>).</p><p id="p-0529" num="0548">However, the example method in <figref idref="DRAWINGS">FIG. <b>21</b></figref> further includes: responsive to determining available network bandwidth over the first communication link and determining a lack of network bandwidth over the second communication link, switching (<b>2102</b>) one or more portions of data scheduled to be replicated over the second communication link to instead be replicated over the first communication link.</p><p id="p-0530" num="0549">Switching (<b>2102</b>), responsive to determining available network bandwidth over the first communication link and determining a lack of network bandwidth over the second communication link, one or more portions of data scheduled to be replicated over the second communication link to instead be replicated over the first communication link may be carried out similarly to switching (<b>1904</b>A) from one type of network messaging layer (<b>1950</b>) to another type of network messaging layer (<b>964</b>), as described above with reference to <figref idref="DRAWINGS">FIG. <b>19</b></figref>. Further, in this example, determining available network bandwidth and lack of network bandwidth may be carried out by a storage controller communicating with a network monitoring process to determine status information for various networks available to the storage system (<b>2000</b>).</p><p id="p-0531" num="0550">For further explanation, <figref idref="DRAWINGS">FIG. <b>22</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0532" num="0551">In this example, as described in <figref idref="DRAWINGS">FIG. <b>20</b></figref>, the two storage systems (<b>2000</b>, <b>2050</b>) have an established replication relationship in accordance with a given replication scheme, where the storage systems may use multiple different networks and correspondingly different network messaging mechanisms to simultaneously replicate data.</p><p id="p-0533" num="0552">However, in the example method of <figref idref="DRAWINGS">FIG. <b>22</b></figref>, a replication policy may specify responses to changes or disruptions in network health, where the responses may include switching replication schemes and/or switching to a different network and corresponding network messaging mechanism.</p><p id="p-0534" num="0553">Specifically, in the example method depicted in <figref idref="DRAWINGS">FIG. <b>22</b></figref>, similar to the example method of <figref idref="DRAWINGS">FIG. <b>20</b></figref>, includes a storage system (<b>2000</b>): establishing (<b>2002</b>), over a first type of network messaging layer (<b>2062</b>), a communication link for a first replication scheme between a first storage system (<b>2000</b>) and a second storage system (<b>2050</b>); establishing (<b>2004</b>), over a second type of messaging layer (<b>2060</b>), a second communication link for a second replication scheme between the first storage system and the second storage system (<b>2050</b>); and simultaneously replicating, over both the first type of network messaging layer (<b>2062</b>) and the second type of network messaging layer (<b>2060</b>), respective portions of a dataset (<b>2052</b>) from the first storage system (<b>2000</b>) to the second storage system (<b>2050</b>).</p><p id="p-0535" num="0554">However, the example method in <figref idref="DRAWINGS">FIG. <b>22</b></figref> further includes: responsive to determining a network failure on the first communication link supporting the first type of network messaging layer (<b>2062</b>), switching (<b>2202</b>) one or more portions of data scheduled to be replicated over the first communication link to instead be replicated over the second communication link.</p><p id="p-0536" num="0555">Switching (<b>2202</b>), responsive to determining a network failure on the first communication link supporting the first type of network messaging layer (<b>2062</b>), one or more portions of data scheduled to be replicated over the first communication link to instead be replicated over the second communication link may be carried out similarly to switching (<b>1904</b>A) from one type of network messaging layer (<b>1950</b>) to another type of network messaging layer (<b>964</b>), as described above with reference to <figref idref="DRAWINGS">FIG. <b>19</b></figref>. Further, in this example, determining network health status or network failures may be carried out by a storage controller communicating with a network monitoring process to determine status information for various networks available to the storage system (<b>2000</b>).</p><p id="p-0537" num="0556">For further explanation, <figref idref="DRAWINGS">FIG. <b>23</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0538" num="0557">In this example, as described in <figref idref="DRAWINGS">FIG. <b>20</b></figref>, the two storage systems (<b>2000</b>, <b>2050</b>) have an established replication relationship in accordance with a given replication scheme, where the storage systems may use multiple different networks and correspondingly different network messaging mechanisms to simultaneously replicate data.</p><p id="p-0539" num="0558">However, in the example method of <figref idref="DRAWINGS">FIG. <b>23</b></figref>, a replication policy may specify responses to changes or disruptions in network health, where the responses may include switching replication schemes and switching network messaging mechanism.</p><p id="p-0540" num="0559">Specifically, in the example method depicted in <figref idref="DRAWINGS">FIG. <b>23</b></figref>, similar to the example method of <figref idref="DRAWINGS">FIG. <b>22</b></figref>, includes a storage system (<b>2000</b>): establishing (<b>2002</b>), over a first type of network messaging layer (<b>2062</b>), a communication link for a first replication scheme between a first storage system (<b>2000</b>) and a second storage system (<b>2050</b>); establishing (<b>2004</b>), over a second type of messaging layer (<b>2060</b>), a second communication link for a second replication scheme between the first storage system and the second storage system (<b>2050</b>); simultaneously replicating, over both the first type of network messaging layer (<b>2062</b>) and the second type of network messaging layer (<b>2060</b>), respective portions of a dataset (<b>2052</b>) from the first storage system (<b>2000</b>) to the second storage system (<b>2050</b>); and responsive to determining a network failure on the first communication link supporting the first type of network messaging layer (<b>2062</b>), switching (<b>2202</b>) one or more portions of data scheduled to be replicated over the first communication link to instead be replicated over the second communication link.</p><p id="p-0541" num="0560">However, the example method in <figref idref="DRAWINGS">FIG. <b>23</b></figref> further specifies that switching (<b>2202</b>) data scheduled to be replicated over the first communication link to instead be replicated over the second communication link further includes switching (<b>2302</b>) from using the first replication scheme over the first type of network messaging layer (<b>2062</b>) to instead use the second replication scheme over the second type of network messaging layer.</p><p id="p-0542" num="0561">Switching (<b>2302</b>) from using the first replication scheme over the first type of network messaging layer (<b>2062</b>) to instead use the second replication scheme over the second type of network messaging layer may be carried out similarly to switching (<b>1904</b>B) between different replication schemes described above with reference to <figref idref="DRAWINGS">FIG. <b>19</b></figref>.</p><p id="p-0543" num="0562">For further explanation, <figref idref="DRAWINGS">FIG. <b>24</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0544" num="0563">In this example, a replication policy may specify, for a corresponding dataset, one or more bases on which to select a first replication scheme to replicate the dataset, including using network characteristics as a basis.</p><p id="p-0545" num="0564">Specifically, in the example method depicted in <figref idref="DRAWINGS">FIG. <b>24</b></figref>, similar to the example method of <figref idref="DRAWINGS">FIG. <b>20</b></figref>, includes a storage system (<b>2000</b>): establishing (<b>2002</b>), over a first type of network messaging layer (<b>2062</b>), a communication link for a first replication scheme between a first storage system (<b>2000</b>) and a second storage system (<b>2050</b>); establishing (<b>2004</b>), over a second type of messaging layer (<b>2060</b>), a second communication link for a second replication scheme between the first storage system and the second storage system (<b>2050</b>); and simultaneously replicating, over both the first type of network messaging layer (<b>2062</b>) and the second type of network messaging layer (<b>2060</b>), respective portions of a dataset (<b>2052</b>) from the first storage system (<b>2000</b>) to the second storage system (<b>2050</b>).</p><p id="p-0546" num="0565">However, the example method in <figref idref="DRAWINGS">FIG. <b>24</b></figref> further includes: selecting (<b>2402</b>), based on network characteristics for a first network, a first replication scheme to replicate data (<b>2072</b>) using a first type of network messaging layer (<b>2062</b>).</p><p id="p-0547" num="0566">Selecting (<b>2402</b>), based on network characteristics for a first network, a first replication scheme to replicate data (<b>2072</b>) using a first type of network messaging layer (<b>2462</b>) may be carried out similarly to selecting (<b>1202</b>) a replication scheme based on network characteristics of a network, as described above with reference to <figref idref="DRAWINGS">FIG. <b>12</b></figref>. In this example, as described above, a replication policy may specify network requirements for different replication schemes, where a replication scheme may be selected based on given network characteristics satisfying the replication scheme.</p><p id="p-0548" num="0567">For further explanation, <figref idref="DRAWINGS">FIG. <b>25</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling among distinct networks in accordance with some embodiments of the present disclosure.</p><p id="p-0549" num="0568">In this example, similar to the example of <figref idref="DRAWINGS">FIG. <b>24</b></figref>, where a replication policy is selected for a first network, in this example, a replication policy may specify, for a corresponding dataset, one or more bases on which to select a second replication scheme to replicate the dataset, including using network characteristics as a basis.</p><p id="p-0550" num="0569">Specifically, in the example method depicted in <figref idref="DRAWINGS">FIG. <b>25</b></figref>, similar to the example method of <figref idref="DRAWINGS">FIG. <b>20</b></figref>, includes a storage system (<b>2000</b>): establishing (<b>2002</b>), over a first type of network messaging layer (<b>2062</b>), a communication link for a first replication scheme between a first storage system (<b>2000</b>) and a second storage system (<b>2050</b>); establishing (<b>2004</b>), over a second type of messaging layer (<b>2060</b>), a second communication link for a second replication scheme between the first storage system and the second storage system (<b>2050</b>); and simultaneously replicating, over both the first type of network messaging layer (<b>2062</b>) and the second type of network messaging layer (<b>2060</b>), respective portions of a dataset (<b>2052</b>) from the first storage system (<b>2000</b>) to the second storage system (<b>2050</b>).</p><p id="p-0551" num="0570">However, the example method in <figref idref="DRAWINGS">FIG. <b>25</b></figref> further includes: selecting (<b>2502</b>), based on network characteristics for a second network, a second replication scheme to replicate data (<b>2070</b>) using a second type of network messaging layer (<b>2460</b>).</p><p id="p-0552" num="0571">Selecting (<b>2502</b>), based on network characteristics for a second network, a second replication scheme to replicate data (<b>2070</b>) using a second type of network messaging layer (<b>2460</b>) may be carried out similarly to selecting (<b>2502</b>) a replication scheme based on network characteristics of a network, as described above with reference to <figref idref="DRAWINGS">FIG. <b>24</b></figref>.</p><p id="p-0553" num="0572">For further explanation, <figref idref="DRAWINGS">FIG. <b>26</b>A</figref> sets forth a flowchart that illustrates an example method for implementing replication handling during storage system transportation in accordance with some embodiments of the present disclosure.</p><p id="p-0554" num="0573">In some situations, a dataset may be replicated from a first location to a second location, and an effective way to replicate the dataset from the first location to the second location is to physically move or transport a copy of the dataset. In other words, physical transport of a dataset may be more practical than a network transfer of the dataset because after a dataset grows past a certain point, for example larger than several terabytes, replicating the dataset over a computer network to a remote location may be cost prohibitive, time prohibitive, or otherwise disadvantageous relative to physically transporting the dataset or a copy of a dataset as part of replicating the dataset.</p><p id="p-0555" num="0574">In some examples, a storage system may be transported via shipping containers, package delivery services, by a vehicle, or in other ways. In some cases, the storage system may have its own power supply, or the storage system may, during transport, have access, and sometimes limited or intermittent access, to an external power supply. Further, the storage system may have radios, or be connected to radios, such as for connecting to cellphone or other types of wireless data networks, or may, continuously or intermittently, be connected through some other means to external networks, during transport. Additional features for a storage system carrying out continued replication of a dataset during transport are described below.</p><p id="p-0556" num="0575">In cases where a storage system is being transported from one physical location to another physical location, and where the storage system stores a dataset that is being replicated among multiple storage systems, if the dataset is updated during the transport of the storage system without replication efforts by the storage system, then upon arrival, the dataset on the storage system may be significantly out-of-sync with the dataset on the other storage systems, due to losing updates for the duration of travel. Therefore, as described below, various implementations of replication handling during storage system transportation are described that provide for continued replication of a dataset stored on a storage system as the storage system is physically transported between different physical locations. Such continued replication of the dataset on the storage system during transport may, upon arrival at a destination physical location, reduce the time and resources required to bring the dataset on the storage system up-to-date with other storage systems that are replicating the dataset and that had been processing updates to the dataset at their locations while the one copy of the dataset was being transported.</p><p id="p-0557" num="0576">As one example, a storage system may be physically located at a first location along with one or more storage systems, such as a first location that is a data center or an on-premises site, where for the purpose of distinction, but not necessarily an ordinal distinction, the storage system to be transported is referred to as a &#x201c;first&#x201d; storage system. In this example, the one or more storage systems may be part of a pod, where a dataset is being replicated among the members of the pod. A full description of pods and different types of replication schemes is provided above, with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>6</b>B</figref>. In this example, the pod may be stretched to include the storage system to be transported, or the first storage system, and as a result of stretching the pod to include the first storage system, the dataset may begin to be replicated onto the first storage system&#x2014;where this replication of the dataset onto the first storage system begins and ends prior to the first storage system being physically moved to the second location. As noted above, in some cases, a dataset on the first storage system may be physically transported from a first physical location to a second physical location more quickly than if the dataset were transferred over a computer network between the first physical location and the second physical location, due to limitations of wide area network bandwidth versus the time to physically transport a large data set on physical media. In other examples, the pod expansion may only begin, but not complete, prior to movement of the first storage system. In these examples, during transport of the first storage system, the dataset on the first storage system may become out-of-sync with respect to the dataset on the other storage systems replicating the dataset within the pod.</p><p id="p-0558" num="0577">As discussed in greater detail below, methods are provided for replication handling in the first storage system during transport that include overcoming such an out-of-sync state of the dataset on the first storage system, or continuing replication of the dataset on the first storage system. In this way, the first storage system, and a dataset, may be transported from a first location to a second location, resulting in the dataset being available at a second location faster due to physical transport of the first storage system than if the dataset were transferred over a computer network. Further, because synchronization efforts are made during transport of the first storage system, upon arrival of the first storage system at the second location, the dataset on the first storage system may be synchronized faster than if no synchronization of the dataset were performed during transport.</p><p id="p-0559" num="0578">As noted above, in some examples, if a dataset is being replicated among a set of storage systems and a first storage system, and if the dataset is not static, then during transport of the first storage system from a first physical location to a second physical location, and correspondingly, during transport of a copy of the dataset stored on the first storage system, the dataset may become out-of-sync during transport. Consequently, in implementations described below, synchronization of the dataset is continued during transport of the first storage system, where synchronization efforts are continued over different types of available communication networks that may be encountered during transport of the first storage system.</p><p id="p-0560" num="0579">Further, the communication networks available during transport of the first storage system may be different from the communication networks available at the first physical location of the first storage system, and there may be different types of communication networks available over the course of the transport of the first storage system. Further still, the communication networks available during transport may not be able to match the performance of communication networks at either a first physical location or a second physical location. In some examples, characteristics of available communication networks during transport of the first storage system may serve as a basis for switching from an initial replication scheme at the first physical location to a replication scheme that is more suited to the communication networks available during transport of the first storage system.</p><p id="p-0561" num="0580">In some implementations, movement of a dataset may be carried out by transporting a first storage system (<b>2600</b>) from the first physical location to the second physical location, where the first storage system (<b>2600</b>) stores a copy of the dataset within memory devices internal to the first storage system (<b>2600</b>), and further where the dataset is attempted to be kept synchronized, or as nearly synchronized as communication networks available during transport of the first storage system (<b>2600</b>) allow.</p><p id="p-0562" num="0581">Turning toward <figref idref="DRAWINGS">FIG. <b>26</b>A</figref>, the flowchart illustrates an example method for replication handling during storage system transportation in accordance with some embodiments of the present disclosure. In some implementations, a storage system to be transported can include one or more storage devices, one or more network ports, and one or more storage controllers. Such a storage system may be embodied as one or more of the storage systems described above, including combinations and variants of such storage systems. Such a storage system may be coupled to power supplies, networking resources, and other devices in various embodiments.</p><p id="p-0563" num="0582">The computing environment illustrated in <figref idref="DRAWINGS">FIG. <b>26</b>A</figref> includes a first storage system (<b>2600</b>) and a second storage system (<b>2650</b>). In this example, the first storage system (<b>2600</b>) and the second storage system (<b>2650</b>) establish a replication relationship that is based on the first storage system (<b>2600</b>) and the second storage system (<b>2650</b>) initiating a replication scheme among themselves, and among any other storage systems that may be included in the replication relationship. A replication scheme may be a synchronous replication scheme, an asynchronous replication scheme, a snapshot-based replication scheme, among any of the other replication schemes described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>25</b></figref>. In some examples, a replication scheme may replicate a dataset among stationary storage systems and storage systems configured to continue replicating during transportation, where the dataset may be any addressable quantity or type of storage content, such as one or more volumes, files, data objects, databases, among other examples described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>25</b></figref>.</p><p id="p-0564" num="0583">Further, in this example, upon initiation of a replication scheme, the first storage system (<b>2600</b>) and the second storage system (<b>2650</b>) may begin to coordinate&#x2014;consistent with properties and characteristics of the particular replication scheme being used&#x2014;such that updates to a version of a dataset on the first storage system (<b>2600</b>) and the second storage system (<b>2650</b>) are replicated to the other storage systems that are part of the replication scheme. In some examples, any of the storage systems that are part of a replication scheme may receive updates to a dataset being replicated.</p><p id="p-0565" num="0584">In this way, in some implementations, updates to a dataset&#x2014;from either users, applications, workloads, or other storage systems&#x2014;may be received at any of the storage systems and replicated to each other storage system&#x2014; where the process of replication includes replicating, at or by each respective storage system, a given update to a respective version of a locally stored dataset to be consistent with every other version of the dataset stored on every other storage system that is coordinating to implement the replication scheme.</p><p id="p-0566" num="0585">In other words, in some examples, replicating a dataset includes a given storage system updating a local version of a dataset to be consistent with other storage systems that are also updating respective local versions of the dataset to be consistent with one another&#x2014;whether an update to a dataset is being received from a user, application, workload, or a computing system outside of the storage systems replicating the dataset, or whether an update to the dataset is being received from another storage system. Additional details for carrying out replication of a dataset in accordance with various replication schemes may be found above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>25</b></figref>.</p><p id="p-0567" num="0586">The example method depicted in <figref idref="DRAWINGS">FIG. <b>26</b>A</figref> includes: replicating (<b>2602</b>), between a first storage system (<b>2600</b>) and a second storage system (<b>2650</b>) that are both located at a first physical location, a dataset (<b>2670</b>); connecting (<b>2604</b>), by the first storage system (<b>2600</b>) and responsive to movement of the first storage system (<b>2600</b>) to an intermediate physical location, to a communication network available at the intermediate physical location; and continuing (<b>2606</b>), between the first storage system at the intermediate physical location and the second storage system (<b>2650</b>) at the first physical location, replication of the dataset (<b>2670</b>) over the communication network available at the intermediate physical location.</p><p id="p-0568" num="0587">Replicating (<b>2602</b>), between a first storage system (<b>2600</b>) and a second storage system (<b>2650</b>) that are both located at a first physical location, a dataset (<b>2670</b>) may be carried out using various techniques. For example, a dataset (<b>2670</b>) may be stored on a second storage system (<b>2650</b>), and the first storage system (<b>2600</b>) may be identified as a backup storage system where replication (<b>2602</b>) includes the first storage system (<b>2600</b>) being identified as a target storage system for synchronously or asynchronously receiving the dataset (<b>2670</b>) and updates to the dataset (<b>2670</b>), and where replication (<b>2602</b>) initially includes copying an entire dataset (<b>2670</b>) from the second storage system (<b>2650</b>) to the first storage system (<b>2600</b>).</p><p id="p-0569" num="0588">In some examples, the first storage system (<b>2600</b>) may be identified as a target storage system via user interface selections of a dashboard, or control console that provides management options for one or more storage systems, including management options for identifying target storage systems for backups, specifying datasets, volumes, or application data to backup or replicate, among other storage management options. Replication of a dataset among storage systems is described in greater detail above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>8</b></figref>, where the first storage system (<b>2650</b>) may be considered to have all the functionality and features of the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>3</b>D</figref>.</p><p id="p-0570" num="0589">In other examples of replicating (<b>2602</b>) a dataset between the first storage system (<b>2600</b>) and a second storage system (<b>2650</b>), the second storage system (<b>2650</b>) and first storage system (<b>2600</b>) may be selected to be members of a pod, as described in the example above, where a dataset may be replicated among the members of the pod. Pods and replication among members of a pod, or a replicated cluster, are described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>8</b></figref>. Further, in this example, member storage systems in a pod may be selected via a user interface allowing for specification of a dataset to be replicated among pod members.</p><p id="p-0571" num="0590">In this example, replicating (<b>2602</b>) a dataset (<b>2670</b>, <b>2660</b>) may include a second storage system (<b>2650</b>) and a first storage system (<b>2600</b>) using any of the replication schemes described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>25</b></figref> to replicate a dataset, receive updates to a dataset, and ensure consistency of the dataset among the storage systems replicating the dataset. As illustrated in <figref idref="DRAWINGS">FIG. <b>26</b>A</figref>, a second storage system (<b>2650</b>) and a first storage system (<b>2600</b>) may each store a local version (<b>2660</b>, <b>2670</b>) of a dataset being replicated. While in this example, <figref idref="DRAWINGS">FIG. <b>26</b>A</figref> depicts updates (<b>2672</b>, <b>2662</b>) to the replicated dataset going from the second storage system (<b>2650</b>) to the first storage system (<b>2600</b>), in other examples, updates may also be sent from the first storage system (<b>2600</b>) to the second storage system (<b>2650</b>), in dependence upon which system receives an update to a dataset.</p><p id="p-0572" num="0591">Continuing with this example, and to provide context for a computational environment for the first storage system (<b>2600</b>) and the second storage system (<b>2650</b>), a first physical location for the first storage system (<b>2600</b>) may be within a traditional, geographically fixed data center. In this example, the first storage system (<b>2600</b>) may be physically connected, via one or more network ports, to one or more networks implemented within the fixed data center. For example, the first communication network may be a Fibre Chanel network. Further, in this example, the first storage system (<b>2600</b>) may be connected to an external power supply provided by the fixed data center. In this way, in this example, while the first storage system (<b>2600</b>) is located within the first physical location, the first storage system (<b>2600</b>) may have a synchronized copy of the dataset (<b>2670</b>) due to the first storage system (<b>2600</b>) and the second storage system (<b>2650</b>) establishing a replication relationship, and being members of a replication scheme prior to physical transport of the first storage system (<b>2600</b>).</p><p id="p-0573" num="0592">Connecting (<b>2604</b>), by the first storage system (<b>2600</b>) and responsive to movement of the first storage system (<b>2600</b>) to an intermediate physical location, to a communication network available at the intermediate physical location may be carried out in accordance with different techniques. For example, a network controller or storage controller on the first storage system (<b>2600</b>) may, responsive to the first storage system (<b>2650</b>) being disconnected from a current communication network and moved to an intermediate physical location, detect a loss of the communication network connection that is available at the first physical location, where the first storage system (<b>2600</b>) is physically located at the first physical location prior to movement. An intermediate physical location may be any physical location between the first physical location and a destination physical location for the first storage system (<b>2600</b>), including the intermediate physical location being on or within a land vehicle, aircraft, watercraft, shipping container, or some other vessel capable of physically transporting the first storage system (<b>2600</b>). Readers will appreciate that the intermediate physical locations, and all locations described herein, may include the location of a vehicle at a particular point in time as the storage system may be loaded on a vehicle and may be undergoing transport through a set of intermediate physical locations.</p><p id="p-0574" num="0593">Further, responsive to detecting the loss of the communication network connection available at the first physical location, a network controller or storage controller on the first storage system (<b>2600</b>) may begin to search for any communication networks available at the intermediate physical location, including wireless 802.11 networks, cellular networks, satellite links, and/or physical network connections, such as Ethernet, Fibre Channel, SCSI, among other physical or wireless networks. Continuing with this example, in response to finding an available communication network at the intermediate physical location, the first storage system (<b>2600</b>) may connect (<b>2604</b>) to the available communication network using a communication protocol that corresponds to the communication network, including communication protocols corresponding to wireless 802.11 networks, cellular networks, satellite links, and/or physical network connections, such as Ethernet, Fibre Channel, SCSI, among other physical or wireless networks.</p><p id="p-0575" num="0594">Continuing (<b>2606</b>), between the first storage system (<b>2600</b>) at the intermediate physical location and the second storage system (<b>2650</b>) at the first physical location, replication (<b>2602</b>) of the dataset (<b>2670</b>) over the communication network available at the intermediate physical location may be carried out using different techniques. For example, the first storage system (<b>2600</b>) may, given the connection to the communication network available at the intermediate physical location, communicate with the second storage system (<b>2650</b>) to determine a recovery point and begin a recovery and resynchronization process to bring the version of the dataset (<b>2660</b>) on the first storage system (<b>2600</b>) in-sync with the version of the dataset (<b>2670</b>) on the second storage system (<b>2650</b>). More specifically, as discussed above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>8</b></figref> in the context of this example, the respective datasets (<b>2660</b>, <b>2670</b>) on the mobile date center (<b>2600</b>) and the second storage system (<b>2650</b>) may be in-sync and consistent prior to the movement of the first storage system (<b>2600</b>), where during a period after the first storage system (<b>2600</b>) is disconnected from a communication network available at the first physical location and prior to connection (<b>2604</b>) to a communication network available at the intermediate physical location, the datasets (<b>2660</b>, <b>2670</b>) may become out-of-sync because of updates received at the second storage system (<b>2650</b>) that were unable to be replicated to the first storage system (<b>2600</b>). Furthermore, even if the transported storage is not brought fully in-sync, transfer of some amount of data will reduce the total data to transfer when the transported storage system arrives at its destination and is connected for use.</p><p id="p-0576" num="0595">In this example, the out-of-sync dataset (<b>2660</b>) on the first storage system (<b>2600</b>) may be brought into an in-sync and consistent state relative to the dataset (<b>2670</b>) on the second storage system (<b>2650</b>) in accordance with the data recovery process described above, where recovery includes reconciling differences in applying updates. Further, in the context of a recovery process described above, the first storage system (<b>2600</b>) may be considered to have gone from a &#x201c;detached&#x201d; state when disconnected from the communication network available at the first physical location to a &#x201c;connected&#x201d; state when connected to the communication network available at the intermediate physical location.</p><p id="p-0577" num="0596">In this way, in this example, after establishing a communication link over the communication network available at the intermediate physical location, the first storage system (<b>2600</b>) may then continue (<b>2606</b>) to replicate data by continuing to use a replication scheme used at the first physical location. However, in other examples, the first storage system (<b>2600</b>) may select a different replication scheme to use while connected to the communication network available at the intermediate physical location, relative to the first physical location, where the different replication scheme selected may be based on characteristics of the communication network available at the intermediate physical location.</p><p id="p-0578" num="0597">More specifically, in some examples, based on new network capabilities at the intermediate physical location, the first storage system (<b>2600</b>) may select a replacement replication scheme to continue replication of the dataset (<b>2670</b>).</p><p id="p-0579" num="0598">For further explanation, <figref idref="DRAWINGS">FIG. <b>26</b>B</figref> sets forth a flowchart that illustrates a method for implementing replication handling in a first storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0580" num="0599">In this example, the replication relationship between the first storage system (<b>2600</b>) and the second storage system (<b>2650</b>) is established, where the replication relationship may be based on any of the replication schemes to carry out replicating the dataset as described above with reference to <figref idref="DRAWINGS">FIG. <b>26</b>A</figref>. While this replication relationship is described above with reference to <figref idref="DRAWINGS">FIG. <b>26</b>A</figref>, the focus of the flowchart and method described relative to <figref idref="DRAWINGS">FIG. <b>26</b>A</figref> is on movement of the first storage system (<b>2600</b>) from a first physical location to an intermediate physical location, connection by the first storage system (<b>2600</b>) to a communication network available during transport, and continuing to replicate the dataset between the first storage system (<b>2600</b>) at an intermediate location and the second storage system (<b>2650</b>) at a first physical location.</p><p id="p-0581" num="0600">The example method depicted in <figref idref="DRAWINGS">FIG. <b>26</b>A</figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>26</b>B</figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>26</b>B</figref> also includes: replicating (<b>2602</b>), between a first storage system (<b>2600</b>) and a second storage system (<b>2650</b>) that are both located at a first physical location, a dataset (<b>2670</b>); connecting (<b>2604</b>), by the first storage system (<b>2600</b>) and responsive to movement of the first storage system (<b>2600</b>) to an intermediate physical location, to a communication network available at the intermediate physical location; and continuing (<b>2606</b>), between the first storage system (<b>2600</b>) at the intermediate physical location and the second storage system (<b>2650</b>) at the first physical location, replication of the dataset (<b>2670</b>) over the communication network available at the intermediate physical location.</p><p id="p-0582" num="0601">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>26</b>B</figref> further specifies that replicating (<b>2602</b>), between a first storage system (<b>2600</b>) and a second storage system (<b>2650</b>) that are both located at a first physical location, a dataset (<b>2670</b>) includes: establishing (<b>2608</b>) a replication scheme between a first storage system (<b>2600</b>) and a second storage system (<b>2650</b>) that includes replicating (<b>2602</b>), between the first storage system (<b>2600</b>) and the second storage system (<b>2650</b>), updates to the dataset (<b>2660</b>, <b>2670</b>) that are received at either the first storage system (<b>2600</b>) or the second storage system (<b>2650</b>), where the replication scheme synchronously or asynchronously maintains consistency between a version of the dataset (<b>2660</b>) stored on the first storage system (<b>2600</b>) and a version of the dataset (<b>2670</b>) stored on the second storage system (<b>2650</b>).</p><p id="p-0583" num="0602">Establishing (<b>2608</b>) a replication scheme between a first storage system (<b>2600</b>) and a second storage system (<b>2650</b>) that includes replicating (<b>2602</b>), between the first storage system (<b>2600</b>) and the second storage system (<b>2650</b>), updates to the dataset (<b>2660</b>, <b>2670</b>) that are received at either the first storage system (<b>2600</b>) or the second storage system (<b>2650</b>) may be carried out using various techniques. For example, a user may select, via a user interface providing storage system management options for storage systems, the first storage system (<b>2600</b>) and the second storage system (<b>2650</b>) to begin replicating a specified dataset, where the user may specify any of the types of datasets described above, and where the user may also specify the type of replication scheme to use to replicate the dataset. As described above, in some examples, the user may specify a type of replication scheme and members of a pod and one or more datasets to be replicated among the members of the pod, where the members of the pod may be one or more storage systems.</p><p id="p-0584" num="0603">Example replication schemes are described above with reference to <figref idref="DRAWINGS">FIGS. <b>26</b>A</figref>, and include replication schemes that synchronously or asynchronously maintain consistency between respective versions of a replicated dataset stored on respective storage systems, including, with reference to <figref idref="DRAWINGS">FIG. <b>26</b>B</figref>, maintaining consistency between a version of a dataset (<b>2660</b>) stored on the first storage system (<b>2600</b>) and a version of the dataset (<b>2670</b>) stored on the second storage system (<b>2650</b>).</p><p id="p-0585" num="0604">For further explanation, <figref idref="DRAWINGS">FIG. <b>27</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling during storage system transportation in accordance with some embodiments of the present disclosure. Also depicted in this example is an additional storage system (<b>2650</b>).</p><p id="p-0586" num="0605">The first storage system (<b>2600</b>) and the second storage system (<b>2650</b>) may implement data storage features described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>26</b></figref>, as the first storage system (<b>2600</b>) and the second storage system (<b>2650</b>) may include some or all of the components described above. However, as described above, the first storage system (<b>2600</b>) may also implement additional features that support mobility of the first storage system (<b>2600</b>) and continued data replication during transport.</p><p id="p-0587" num="0606">In this example, the first storage system (<b>2600</b>), following the example of <figref idref="DRAWINGS">FIG. <b>26</b>A</figref> describing the first storage system (<b>2600</b>) moving to an intermediate physical location, determines that network capabilities, such as bandwidth capacity, are lower at a communication network available at the intermediate physical location&#x2014;where in a later example, described below with respect to <figref idref="DRAWINGS">FIG. <b>28</b></figref>, a selection is made for an appropriate replication scheme to use based on network characteristics of the communication network available at the intermediate physical location.</p><p id="p-0588" num="0607">The example method depicted in <figref idref="DRAWINGS">FIG. <b>27</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>26</b>A</figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>27</b></figref> also includes: replicating (<b>2602</b>), between a first storage system (<b>2600</b>) and a second storage system (<b>2650</b>) that are both located at a first physical location, a dataset (<b>2670</b>); connecting (<b>2604</b>), by the first storage system (<b>2600</b>) and responsive to movement of the first storage system (<b>2600</b>) to an intermediate physical location, to a communication network available at the intermediate physical location; and continuing (<b>2606</b>), between the first storage system (<b>2600</b>) at the intermediate physical location and the second storage system (<b>2650</b>) at the first physical location, replication of the dataset (<b>2670</b>) over the communication network available at the intermediate physical location.</p><p id="p-0589" num="0608">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>27</b></figref> further includes: determining (<b>2702</b>) network characteristics of the communication network available at the intermediate physical location; and determining (<b>2704</b>), based on the network characteristics of the communication network available at the intermediate physical location, that the communication network available at the intermediate physical location provides lower bandwidth than the communication network available at the first physical location.</p><p id="p-0590" num="0609">Determining (<b>2702</b>) network characteristics of the communication network available at the intermediate physical location may be carried out using traditional hardware and software techniques for a network controller scanning for and identifying physical or wireless networks that may be available at one or more network ports. Further, a network controller, may, given a determination that a communication network is available, determine network characteristics based on a type of the available communication network, where network characteristics include transmission rates and/or bandwidth capacity. For example, if the communication network available at the intermediate physical location is an Ethernet connection, then such a network connection has commonly associated features and network characteristics, such as transmission rates and/or bandwidth capacity. Similarly, network characteristics for the communication network available at the intermediate physical location may be based on whether a type of network connection is Fibre Channel, wireless 802.11, a satellite link, among other example communication networks described above.</p><p id="p-0591" num="0610">Determining (<b>2704</b>), based on the network characteristics (<b>2752</b>) of the communication network available at the intermediate physical location, that the communication network available at the intermediate physical location provides lower bandwidth than the communication network available at the first physical location may be carried out using different techniques. For example, the communication network available at the first physical location is a Fibre Channel network, and the storage controller may track metrics, including network characteristics, corresponding to communication networks used during the replication of the dataset, where the network characteristics corresponding to communication networks used during the replication of the dataset may be determined similarly to determining (<b>2702</b>) the network characteristics described above. Further, given network characteristics of the communication network available at the first physical location and network characteristics of the communication network available at the intermediate physical location, the storage controller may determine that network bandwidth available at the intermediate physical location is lower than the bandwidth that was available at the first physical location.</p><p id="p-0592" num="0611">For example, if the communication network available at the intermediate physical location is a wireless 802.11 network, and as noted above, the communication network available at the first physical location was Ethernet, then the bandwidth capabilities indicated by respective network characteristics of these networks may be compared to determine that the bandwidth available on the communication network at the intermediate physical location is lower than the bandwidth available on the communication network at the first physical location.</p><p id="p-0593" num="0612">As noted above, this determination (<b>2704</b>) of a lower bandwidth availability may be used to select a replacement replication scheme to used that is more appropriate to the lower bandwidth capacity of the communication network available at the intermediate physical location, where such a selection is described below with reference to <figref idref="DRAWINGS">FIG. <b>28</b></figref>.</p><p id="p-0594" num="0613">For further explanation, <figref idref="DRAWINGS">FIG. <b>28</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling during storage system transportation in accordance with some embodiments of the present disclosure. Also depicted in this example is an additional storage system (<b>2650</b>).</p><p id="p-0595" num="0614">In this example&#x2014;which continues the example above with reference to <figref idref="DRAWINGS">FIG. <b>27</b></figref>, which describes determining that network characteristics, such as network bandwidth capacity, are lower at a communication network available at the intermediate physical location&#x2014;a selection is made for a lower bandwidth replication scheme to use based on the network characteristics of the communication network available at the intermediate physical location.</p><p id="p-0596" num="0615">The example method depicted in <figref idref="DRAWINGS">FIG. <b>28</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>27</b></figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>28</b></figref> also includes: replicating (<b>2602</b>), between a first storage system (<b>2600</b>) and a second storage system (<b>2650</b>) that are both located at a first physical location, a dataset (<b>2670</b>); connecting (<b>2604</b>), by the first storage system (<b>2600</b>) and responsive to movement of the first storage system (<b>2600</b>) to an intermediate physical location, to a communication network available at the intermediate physical location; continuing (<b>2606</b>), between the first storage system (<b>2600</b>) at the intermediate physical location and the second storage system (<b>2650</b>) at the first physical location, replication of the dataset (<b>2670</b>) over the communication network available at the intermediate physical location; determining (<b>2702</b>) network characteristics of the communication network available at the intermediate physical location; and determining (<b>2704</b>), based on the network characteristics of the communication network available at the intermediate physical location, that the communication network available at the intermediate physical location provides lower bandwidth than the communication network available at the first physical location.</p><p id="p-0597" num="0616">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>28</b></figref> further includes: selecting (<b>2802</b>), responsive to the communication network available at the intermediate physical location providing lower bandwidth than the communication network available at the first physical location, a low-bandwidth replication scheme from among a plurality of replication schemes.</p><p id="p-0598" num="0617">Selecting (<b>2802</b>), responsive to the communication network available at the intermediate physical location providing lower bandwidth than the communication network available at the first physical location, a low-bandwidth replication scheme from among a plurality of replication schemes may be carried out using different techniques. For example, in response to determining (<b>2704</b>) that the communication network available at the intermediate physical location provides lower bandwidth than the communication network available at the first physical location, the storage controller may access a table that maps each of the plurality of supported replication schemes with preferred types of communication networks, and where each of the mapped preferred types of communication networks correspond to respective bandwidth capacity ranges. The plurality of replication schemes supported may include the replication schemes described above with reference to <figref idref="DRAWINGS">FIG. <b>26</b>A</figref>.</p><p id="p-0599" num="0618">Continuing with this example, the lower bandwidth provided by the communication network available at the intermediate physical location may be matched to a bandwidth capacity range for one or more replication schemes, where the selected low-bandwidth replication scheme may be based on an estimate of which of the matching one or more replication schemes will likely result in a greatest amount of synchronization of the dataset during transport of the first storage system (<b>2600</b>). In some examples, the low-bandwidth replication scheme may be an asynchronous replication scheme, such as a snapshot-based replication scheme, where the initial, higher bandwidth replication scheme may be a synchronous replication scheme.</p><p id="p-0600" num="0619">For further explanation, <figref idref="DRAWINGS">FIG. <b>29</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling during storage system transportation in accordance with some embodiments of the present disclosure. Also depicted in this example is an additional storage system (<b>2650</b>).</p><p id="p-0601" num="0620">In this example, which continues after the first storage system (<b>2600</b>) has selected (<b>2802</b>) a low-bandwidth replication scheme, now performs a transition from the previous replication scheme&#x2014;used when the first storage system (<b>2600</b>) was connected to a communication network at the first physical location&#x2014;to the selected (<b>2802</b>), low-bandwidth replication scheme.</p><p id="p-0602" num="0621">The example method depicted in <figref idref="DRAWINGS">FIG. <b>29</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>28</b></figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>29</b></figref> also includes: replicating (<b>2602</b>), between a first storage system (<b>2600</b>) and a second storage system (<b>2650</b>) that are both located at a first physical location, a dataset (<b>2670</b>); connecting (<b>2604</b>), by the first storage system (<b>2600</b>) and responsive to movement of the first storage system (<b>2600</b>) to an intermediate physical location, to a communication network available at the intermediate physical location; continuing (<b>2606</b>), between the first storage system (<b>2600</b>) at the intermediate physical location and the second storage system (<b>2650</b>) at the first physical location, replication of the dataset (<b>2670</b>) over the communication network available at the intermediate physical location; determining (<b>2702</b>) network characteristics of the communication network available at the intermediate physical location; determining (<b>2704</b>), based on the network characteristics of the communication network available at the intermediate physical location, that the communication network available at the intermediate physical location provides lower bandwidth than the communication network available at the first physical location; and selecting (<b>2802</b>), responsive to the communication network available at the intermediate physical location providing lower bandwidth than the communication network available at the first physical location, a low-bandwidth replication scheme from among a plurality of replication schemes.</p><p id="p-0603" num="0622">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>29</b></figref> further includes: transitioning (<b>2902</b>), without terminating replication of the dataset and responsive to selecting (<b>2802</b>) the low-bandwidth replication scheme, the first storage system (<b>2600</b>) from using a current replication scheme to using the low-bandwidth replication scheme.</p><p id="p-0604" num="0623">Transitioning (<b>2902</b>), without terminating replication of the dataset and responsive to selecting (<b>2802</b>) the low-bandwidth replication scheme, the first storage system (<b>2600</b>) from using a current replication scheme to using the low-bandwidth replication scheme may be carried out using various techniques. For example, as discussed above, responsive to movement of the first storage system (<b>2600</b>) to an intermediate physical location, the first storage system (<b>2600</b>) may lose connection to a current communication network that had been available at the first physical location, where continuation (<b>2606</b>) of the replication may include the first storage system (<b>2600</b>) undergoing a data recovery process responsive to connecting (<b>2604</b>) to the communication network available at the intermediate physical location.</p><p id="p-0605" num="0624">Given this context described above with reference to <figref idref="DRAWINGS">FIG. <b>26</b>A</figref>, the selection (<b>2802</b>) of the low-bandwidth replication scheme may be performed by a storage controller after connecting (<b>2604</b>) to the communication network available at the intermediate physical location and prior to continuing (<b>2606</b>) replication of the dataset. Additionally, prior to continuing (<b>2606</b>) replication of the dataset, the storage controller may transition (<b>2902</b>) to using the low-bandwidth replication scheme prior to the data recovery process. Further, as discussed above, the plurality of replication schemes, including the initial replication scheme and the low-bandwidth replication scheme, may be based on a common management model and use similar techniques for data recovery, communicating updates to the dataset included in the various type of replication, including synchronous replication and asynchronous replication.</p><p id="p-0606" num="0625">In some examples, the initial replication scheme may be a synchronous replication scheme and the low-bandwidth replication scheme may be an asynchronous replication scheme, where both replication schemes transfer identified blocks and identified segments. Further, in this example, given identifiers for the blocks and segments, the first storage system (<b>2600</b>) may transition from synchronous replication to asynchronous replication and continue replication because the first storage system (<b>2600</b>) is aware of the blocks and segments it has already received and how to incorporate additionally received blocks and segments as they continue arriving in accordance with the asynchronous replication scheme.</p><p id="p-0607" num="0626">Further, in this example, because synchronization and data replication are based on a common management model, the transitioning (<b>2902</b>) from the current replication scheme (synchronous replication) to the low-bandwidth replication scheme (asynchronous replication) may be carried out by dropping the in-sync state of the dataset (<b>2660</b>), and leaving the replication state in a state of recovery, which may be considered an indefinite state as long as asynchronous replication is enabled. Similarly, responsive to the first storage system (<b>2600</b>) arriving at a destination physical location, such as an on-prem site, or another geographically fixed data center, the first storage system (<b>2600</b>) may switch from asynchronous replication to synchronous replication by setting the in-sync state to synchronized in response to the first storage system (<b>2600</b>) catching up, or synchronizing the dataset (<b>2660</b>) with the other storage systems that are replicating the dataset (<b>2670</b>).</p><p id="p-0608" num="0627">For further explanation, <figref idref="DRAWINGS">FIG. <b>30</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling during storage system transportation in accordance with some embodiments of the present disclosure. Also depicted in this example is an additional storage system (<b>2650</b>).</p><p id="p-0609" num="0628">In this example, during transport, a first storage system (<b>2600</b>) may, over the course of traveling over a large distance, discover new wireless networks and lose connections with other wireless networks, or in some cases, connect and disconnect from wired communication networks. As described below, in this example, a first storage system (<b>2600</b>) that has already transitioned (<b>2902</b>) to a low-bandwidth replication scheme, determines that available networks have changed, and in response, the first storage system (<b>2600</b>) undergoes another transition to a different type of replication scheme.</p><p id="p-0610" num="0629">The example method depicted in <figref idref="DRAWINGS">FIG. <b>30</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>29</b></figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>30</b></figref> also includes: replicating (<b>2602</b>), between a first storage system (<b>2600</b>) and a second storage system (<b>2650</b>) that are both located at a first physical location, a dataset (<b>2670</b>); connecting (<b>2604</b>), by the first storage system (<b>2600</b>) and responsive to movement of the first storage system (<b>2600</b>) to an intermediate physical location, to a communication network available at the intermediate physical location; continuing (<b>2606</b>), between the first storage system (<b>2600</b>) at the intermediate physical location and the second storage system (<b>2650</b>) at the first physical location, replication of the dataset (<b>2670</b>) over the communication network available at the intermediate physical location; determining (<b>2702</b>) network characteristics of the communication network available at the intermediate physical location; determining (<b>2704</b>), based on the network characteristics of the communication network available at the intermediate physical location, that the communication network available at the intermediate physical location provides lower bandwidth than the communication network available at the first physical location; selecting (<b>2802</b>), responsive to the communication network available at the intermediate physical location providing lower bandwidth than the communication network available at the first physical location, a low-bandwidth replication scheme from among a plurality of replication schemes; transitioning (<b>2902</b>), without terminating replication of the dataset and responsive to selecting (<b>2802</b>) the low-bandwidth replication scheme, the first storage system (<b>2600</b>) from using a current replication scheme to using the low-bandwidth replication scheme.</p><p id="p-0611" num="0630">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>30</b></figref> further includes: selecting (<b>3002</b>), based on a change in network availability at the intermediate physical location and on expected performance improvement replicating the dataset, a replacement replication scheme; and transitioning (<b>3004</b>), responsive to selecting (<b>3002</b>) the replacement replication scheme, from the low-bandwidth replication scheme to the replacement replication scheme.</p><p id="p-0612" num="0631">Selecting (<b>3002</b>), based on a change in network availability at the intermediate physical location and on expected performance improvement replicating the dataset, the replacement replication scheme may be carried out using various techniques. For example, during transport, the first storage system (<b>2600</b>) may be moved from a physical location where only a cellular network is available into a physical location where a wireless 802.11 network is available. In this example, the intermediate physical location may change, however, in other examples, the intermediate physical location may remain the same while different communication networks become available. As noted above, based on periodic polling, or based on detecting a network event, a storage controller or network controller on the first storage system (<b>2600</b>) may determine changes in available networks. In this example, given the determined change in available networks, the storage controller may, similarly to selecting (<b>2802</b>) the low-bandwidth replication scheme, select (<b>3002</b>) a replacement replication scheme based on a type of available network and/or based on available bandwidth capacity for the newly available network.</p><p id="p-0613" num="0632">For example, based on an increase in network bandwidth, the first storage system (<b>2600</b>) may select a replacement replication scheme to improve the performance of replicating the dataset based on the replacement replication scheme being more capable than the current low-bandwidth replication scheme of making use of the increased network bandwidth. For example, the first storage system (<b>2600</b>) may transition from the asynchronous replication specified by the low-bandwidth replication scheme back to a synchronous replication scheme.</p><p id="p-0614" num="0633">Transitioning (<b>3004</b>), responsive to selecting the replacement replication scheme, from the low-bandwidth replication scheme to the replacement replication scheme may be carried out using different techniques. For example, transitioning (<b>3004</b>) from the low-bandwidth replication scheme to the replacement replication scheme may be performed similarly to the previous transition (<b>2902</b>) from the initial replication scheme to the low-bandwidth replication scheme described above with reference to <figref idref="DRAWINGS">FIG. <b>29</b></figref>.</p><p id="p-0615" num="0634">For further explanation, <figref idref="DRAWINGS">FIG. <b>31</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling during storage system transportation in accordance with some embodiments of the present disclosure. Also depicted in this example is an additional storage system (<b>2650</b>).</p><p id="p-0616" num="0635">In this example, a trigger for a first storage system (<b>2600</b>) switching between replication schemes&#x2014;in addition to switching based on available networks or instead of switching based on available networks&#x2014;may be a change in power sources. Specifically, in this example, in response to being unplugged from an external power source, the first storage system (<b>2600</b>) may switch to internal power, and correspondingly switch to a replication scheme that only operates intermittently, thereby conserving power, or that can operate with fewer powered-on components, or in lower power modes for the components that are powered on.</p><p id="p-0617" num="0636">The example method depicted in <figref idref="DRAWINGS">FIG. <b>31</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>26</b>A</figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>31</b></figref> also includes: replicating (<b>2602</b>), between a first storage system (<b>2600</b>) and a second storage system (<b>2650</b>) that are both located at a first physical location, a dataset (<b>2670</b>); connecting (<b>2604</b>), by the first storage system (<b>2600</b>) and responsive to movement of the first storage system (<b>2600</b>) to an intermediate physical location (e.g., during physical transport on a vehicle), to a communication network available at the intermediate physical location; and continuing (<b>2606</b>), between the first storage system (<b>2600</b>) at the intermediate physical location and the second storage system (<b>2650</b>) at the first physical location, replication of the dataset (<b>2670</b>) over the communication network available at the intermediate physical location.</p><p id="p-0618" num="0637">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>31</b></figref>, in contrast to the example method described with reference to <figref idref="DRAWINGS">FIG. <b>26</b>A</figref>, further includes: determining (<b>3102</b>), relative to the first physical location, lower power availability at the intermediate physical location; and transitioning (<b>3104</b>), based on the lower power availability at the intermediate physical location, the first storage system (<b>2600</b>) from using a current replication scheme to using a low-power replication scheme.</p><p id="p-0619" num="0638">Determining (<b>3102</b>) lower power availability at the second physical location may be carried out by, for example, detecting a transition from using an external power source, such as a power outlet, to using an internal power source such as a battery, where detection may include detecting loss of power from the external power source and handling a transition to battery power. For example, at the first physical location, which may be a geographically fixed data center, the first storage system (<b>2600</b>) may be plugged in to an external power supply, where prior to transport, the first storage system (<b>2600</b>) may be unplugged from the external power supply, which may trigger an automatic switch to using an internal power source. In some embodiments, the storage system may be able to run in a lower power mode when running from batteries or other limited power sources associated with the transport. In fact, the storage system may be configured to detect that the available power is lower by measuring lowered voltage levels or less available current, thereby causing the storage system to enter the lower power mode.</p><p id="p-0620" num="0639">Transitioning (<b>3104</b>), based on the lower power availability at the intermediate physical location, the first storage system (<b>2600</b>) from using a current replication scheme to using a low-power replication scheme may be carried out using different techniques. For example, transitioning (<b>3104</b>) from using a current replication scheme to using a low-power replication scheme may be carried out similarly to transitioning (<b>2902</b>) the first storage system (<b>2600</b>) from using a current replication scheme to using a low-bandwidth replication scheme, as described above with reference to <figref idref="DRAWINGS">FIG. <b>29</b></figref>. For example, in response to determining (<b>3102</b>) the lower power availability, the storage controller may access a table that corresponds each of the plurality of replication schemes with an indication of whether or not the respective replication scheme is a low-power replication scheme or not. For example, each asynchronous replication scheme may be mapped to indicate a low-power replication scheme, and each synchronous replication scheme may be mapped to indicate a high-power replication scheme. In this way, the storage controller may identify and select a low-power replication scheme to serve as the replacement replication scheme to transition (<b>3104</b>) into.</p><p id="p-0621" num="0640">For further explanation, <figref idref="DRAWINGS">FIG. <b>32</b></figref> sets forth a flowchart that illustrates a method for implementing replication handling during storage system transportation in accordance with some embodiments of the present disclosure. Also depicted in this example is an additional storage system (<b>2650</b>).</p><p id="p-0622" num="0641">In this example, a trigger for a first storage system (<b>2600</b>) transitioning between replication schemes may be arrival at a physical destination location. Specifically, in this example, in response to arriving at a physical destination location, the first storage system (<b>2600</b>) identifies available networks and switches to one of the available networks.</p><p id="p-0623" num="0642">The example method depicted in <figref idref="DRAWINGS">FIG. <b>32</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>26</b>A</figref> in that the example method depicted in <figref idref="DRAWINGS">FIG. <b>32</b></figref> also includes: replicating (<b>2602</b>), between a first storage system (<b>2600</b>) and a second storage system (<b>2650</b>) that are both located at a first physical location, a dataset (<b>2670</b>); connecting (<b>2604</b>), by the first storage system (<b>2600</b>) and responsive to movement of the first storage system (<b>2600</b>) to an intermediate physical location, to a communication network available at the intermediate physical location; and continuing (<b>2606</b>), between the first storage system (<b>2600</b>) at the intermediate physical location and the second storage system (<b>2650</b>) at the first physical location, replication of the dataset (<b>2670</b>) over the communication network available at the intermediate physical location.</p><p id="p-0624" num="0643">However, the example method depicted in <figref idref="DRAWINGS">FIG. <b>32</b></figref> further includes: responsive to arrival of the first storage system (<b>2600</b>) to a physical destination location: synchronizing (<b>3202</b>), with the second storage system (<b>2650</b>) to overcome any lags in synchronization of the dataset (<b>2660</b>) on the first storage system (<b>2600</b>) during transport between the first physical location and the physical destination location.</p><p id="p-0625" num="0644">Synchronizing (<b>3202</b>), with the second storage system (<b>2650</b>) to overcome any lags in synchronization of the dataset (<b>2660</b>) on the first storage system (<b>2600</b>) during transport between the first physical location and the physical destination location, where synchronizing (<b>3202</b>) is responsive to arrival of the first storage system (<b>2600</b>) to the physical destination location may be carried out using various techniques.</p><p id="p-0626" num="0645">For example, the first storage system (<b>2600</b>) may, in response to arriving at the physical destination location, determine availability of a communication network as described above with reference to <figref idref="DRAWINGS">FIG. <b>27</b></figref>. Specifically, a storage controller or network controller may periodically scan for available networks or respond to network events, such as physical connections to a port or detection of a wireless network. Further, given determination of an available communication network at the physical destination location and establishing a communication link, the first storage system (<b>2600</b>) may synchronize (<b>3202</b>) the local dataset (<b>2660</b>) with the version of the dataset (<b>2670</b>) on the second storage system (<b>2650</b>).</p><p id="p-0627" num="0646">Specifically, in this example, synchronization may be carried out similarly to how the first storage system (<b>2600</b>) continues (<b>2606</b>) replication of the dataset during transport, where the first storage system (<b>2600</b>) may communicate with the second storage system (<b>2650</b>) to determine a recovery point and begin a recovery and resynchronization process to bring the version of the dataset (<b>2660</b>) on the first storage system (<b>2600</b>) in-sync with the version of the dataset (<b>2670</b>) on the second storage system (<b>2650</b>). As discussed above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>8</b></figref> in the context of this example, the respective datasets (<b>2660</b>, <b>2670</b>) on the mobile date center (<b>2600</b>) and the second storage system (<b>2650</b>) may be in-sync and consistent prior to the movement of the first storage system (<b>2600</b>), where during a period after the first storage system (<b>2600</b>) is disconnected from a communication network available at the first physical location and prior to connection (<b>2604</b>) to a communication network available at the intermediate physical location, the datasets (<b>2660</b>, <b>2670</b>) may become out-of-sync because of updates received at the second storage system (<b>2650</b>) that were unable to be replicated to the first storage system (<b>2600</b>). In this example, the out-of-sync dataset (<b>2660</b>) on the first storage system (<b>2600</b>) may be brought into an in-sync and consistent state relative to the dataset (<b>2670</b>) on the second storage system (<b>2650</b>) in accordance with the data recovery process described above, where recovery includes reconciling differences in applying updates. In this example, the communication network available at the physical destination location may become visible to the first storage system (<b>2600</b>) in response to plugging in one or more network cables for available networks into one or more corresponding network ports on the first storage system (<b>2600</b>), or by the first storage system (<b>2600</b>) logging in to one or more wireless networks available at the third physical location.</p><p id="p-0628" num="0647">While the above implementations provide explanations that closely track the example flowcharts of <figref idref="DRAWINGS">FIGS. <b>26</b>A-<b>32</b></figref>, what follows are additional considerations with regard to implementations of a first storage system (<b>2600</b>).</p><p id="p-0629" num="0648">As discussed above, in some implementations, a first storage system (<b>2600</b>) may be a member of a cluster of storage systems that are replicating a dataset (<b>2660</b>). In such an example, the first storage system (<b>2600</b>) may&#x2014;during a relocation of the first storage system (<b>2600</b>) from a first physical location to a physical destination location&#x2014;continue replicating the dataset (<b>2660</b>) as the dataset (<b>2660</b>) is being modified, by either the second storage system (<b>2650</b>) or the first storage system (<b>2600</b>). In this way, in this example, the first storage system (<b>2600</b>), upon arrival to the physical destination location, may arrive with a dataset (<b>2660</b>) that is at least partially synchronized with a dataset (<b>2670</b>) being replicated by the cluster of storage systems in the first physical location.</p><p id="p-0630" num="0649">Continuing with this example, in some cases, the first storage system (<b>2600</b>) may be unable to maintain a dataset (<b>2660</b>) synchronized with other members of the cluster of storage systems. For example, available bandwidth for available communication links during transport may be insufficient to maintain the dataset (<b>2660</b>) on the first storage system (<b>2600</b>) synchronized with the other members of the cluster of storage systems.</p><p id="p-0631" num="0650">In such an example, the first storage system (<b>2600</b>), upon arrival at a physical destination location, may synchronize its dataset (<b>2660</b>) within a timeframe that depends on a quantity of changes to the dataset that were unable to be transferred within bandwidth limitations over one or more communication links that were available during transport. In other words, in some examples, during transport, communication links that may be available to the first storage system (<b>2600</b>) may be wireless communication links that operate at lower bandwidths and at higher latency times as compared to communication links available at transport endpoints, including the first physical location and the physical destination location</p><p id="p-0632" num="0651">In some implementations, responsive to changes in available communication networks, and corresponding changes to network capacity, changes in network response times, or changes in other network characteristics, a first storage system (<b>2600</b>) may also switch between replication schemes. For example, a first storage system (<b>2600</b>) may switch from a current replication scheme that had been selected based on network characteristics or conditions that have changed to a replacement replication scheme that may have network transport requirements, such as bandwidth or latency requirements, that may be satisfied by the changed, or new network conditions or network characteristics.</p><p id="p-0633" num="0652">Further, the first storage system (<b>2600</b>) may implement multiple different replication schemes, where the different replication schemes are based on a common management model for implementing the replication schemes. In some implementations, the common management model may be a basis that enables the first storage system (<b>2600</b>) to switch from one type of replication scheme to a different type of replication scheme&#x2014;where switching between replication schemes may be based on a common management model used to support the different types of replication schemes. Further, the first storage system (<b>2600</b>) may be a member of a cluster of storage systems replicating data, where each member also implements multiple replication schemes that are based on a same common management model.</p><p id="p-0634" num="0653">As one particular example, with reference to <figref idref="DRAWINGS">FIG. <b>26</b>A</figref>, in some implementations, prior to transport, a first storage system (<b>2600</b>) may be synchronously replicating a dataset among the cluster of storage systems at the first physical location. For the sake of clarity, a single storage system (<b>2650</b>) is depicted in <figref idref="DRAWINGS">FIG. <b>26</b>A</figref>; however, in other examples, and as described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>6</b>B</figref>, a cluster may include an arbitrary number of storage systems replicating datafirst storage system.</p><p id="p-0635" num="0654">As noted above, the communication networks available to a first storage system (<b>2600</b>) during transport may be unable to support latency requirements or data bandwidth rates that are sufficient to maintain the dataset on the first storage system (<b>2600</b>) synchronized with the rest of the storage systems in the cluster of storage systems.</p><p id="p-0636" num="0655">In this case of a degradation in network bandwidth availability, such a change in network performance or network characteristics may serve as a basis for the first storage system (<b>2600</b>) switching to a different replication scheme. Further, in some instances, such a change in network performance or network characteristics may or may not be related to transport or movement of the first storage system (<b>2600</b>).</p><p id="p-0637" num="0656">In some implementations, with regard to switching replication schemes responsive to changing networks, a given replication scheme may have an associated network profile of communication requirements. For example, a network profile for a given replication scheme may specify, among other criteria, minimum bandwidth requirements, security levels, resiliency specifications, or minimum and/or maximum network latency values. In this example, a respective network profile corresponding to each respective replication scheme may be used in selecting a replacement replication scheme in response to changes in network performance or network characteristics.</p><p id="p-0638" num="0657">Continuing with this example implementation, the first storage system (<b>2600</b>) may, responsive to detecting that available communication links are unable to support, or consistently support, synchronous replication, switch to a different replication scheme, such as periodic replication, or some other data replication scheme that may be supportable given the bandwidth on the available communication networks.</p><p id="p-0639" num="0658">In this way, in some examples, some level of data replication may continue during transport of the first storage system (<b>2600</b>) from a first physical location to a physical destination location. In other words, some quantity of dataset (<b>2660</b>) updates may continue to be applied to the dataset (<b>2660</b>) on the first storage system (<b>2600</b>), but not all dataset (<b>2660</b>) updates may be made that are being made on the synchronously replicated dataset (<b>2760</b>) among the cluster of storage systems at the first physical location.</p><p id="p-0640" num="0659">Further, in this example, upon arrival, because some quantity of dataset (<b>2660</b>) updates continued at the first storage system (<b>2600</b>) during transport, synchronizing the dataset (<b>2660</b>) after the first storage system (<b>2600</b>) arrives at the physical destination location will take less time than if all updates to the dataset (<b>2660</b>) had to be made.</p><p id="p-0641" num="0660">Further still, after arrival of the first storage system (<b>2600</b>) at the physical destination location, and after the first storage system (<b>2600</b>) is physically connected to one or more physical networks at the second physical location, the first storage system (<b>2600</b>) may detect availability of the available networks. In this example, in response to detecting availability of the available networks at the second physical location, the first storage system (<b>2600</b>) may switch to a different replication scheme, which in this example may be synchronous replication.</p><p id="p-0642" num="0661">In this way, in this example, after the first storage system (<b>2600</b>), over the higher-bandwidth network, synchronizes the local dataset (<b>2660</b>) with the dataset (<b>2670</b>) being synchronously replicated among the cluster of storage systems, the first storage system (<b>2600</b>) may continue synchronization of the dataset (<b>2660</b>) on the first storage system (<b>2600</b>).</p><p id="p-0643" num="0662">In some implementations, a first storage system (<b>2600</b>) may be a storage system, such as storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>25</b></figref>. For example, a first storage system (<b>2600</b>) may include the same, fewer, or additional components as the storage systems described above.</p><p id="p-0644" num="0663">In some implementations, a first storage system (<b>2600</b>) may be configured such that it may continue operation in response to be physically disconnected from a physical location. For example, a first storage system (<b>2600</b>), in addition to including components for implementing a storage system, such as storage systems described above, may also include a power supply. In some examples, the power supply may be a battery, and in other examples, a power supply may be based on generating power by capturing and converting kinetic energy, or based on generating power from the use of solar cells. Further, in some examples, the first storage system (<b>2600</b>) may have an external power source available during transport. This external power source associated with transport may also provide for less than the full power demands of the storage system, so the storage system may operate in a low power mode, even if the amount of power is greater than might be the case from running purely on internal batteries.</p><p id="p-0645" num="0664">In some implementations, the first storage system (<b>2600</b>) may include multiple network ports for physical network connections in accordance with the multiple physical networks described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>25</b></figref>. Further, the first storage system (<b>2600</b>) may include network ports for establishing wireless communication links over a cellular network or mobile network, such as 4G, 5G, or LTE, provided by telecommunication providers.</p><p id="p-0646" num="0665">In other examples, the first storage system (<b>2600</b>) may include network ports for establishing wireless communication links over a wireless network, such as an Institute of Electrical and Electronics Engineers (IEEE) 802.11 wireless network, among others. In some examples, as a first storage system (<b>2600</b>) moves from one location to another location, different wireless networks may become available, and the first storage system (<b>2600</b>) may switch between network transport layers as described above with reference to <figref idref="DRAWINGS">FIGS. <b>9</b>-<b>25</b></figref>. In some embodiments, the first storage system (<b>2600</b>) may only include LAN/SAN ports and may be connected to a local switch that enables wireless communications, as the first storage system (<b>2600</b>) may be connected to the local switch that is configured for wireless communications, such that the local switch effectively translates wired communications exchanged between the first storage system (<b>2600</b>) and the local switch to wireless communications exchanged between the local switch and other devices.</p><p id="p-0647" num="0666">Continuing with this example, in some implementations, the first storage system (<b>2600</b>) may use the common management model to provide different replication schemes a consistent, and uniform interface to disparate, or different, underlying network messaging mechanisms. For example, among multiple network ports of the first storage system (<b>2600</b>), one network port may be connected to a TCP/IP network, and another network port may be connected to a Fibre Channel network. Similarly, the first storage system (<b>2600</b>) may include additional network ports may provide support for additional physical or wireless communication links in accordance with one or more underlying network messaging mechanisms.</p><p id="p-0648" num="0667">In some implementations, a first storage system (<b>2600</b>) may implement multiple, distinct types of replication schemes. In some examples, distinct replication schemes may include, among others not listed, synchronous replication, nearly synchronous replication, asynchronous replication, configurable asynchronous replication, snapshot-based replication, continuous data replication, periodic replication, or a combination of configurable asynchronous data replication and dynamically determined snapshot updates. Examples of various ones of these replication schemes are described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>8</b></figref>.</p><p id="p-0649" num="0668">In some implementations, the above-listed replication schemes may be implemented based on a common or uniform management model, where the common management model includes a same or similar metadata model for representing stored data, such as the metadata representation described above with reference to <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>. For example, in some implementations, a first storage system (<b>2600</b>) may use each of the above-listed replication schemes to establish a replication relationship among one or more other storage systems, where implementation of a given replication scheme is based on a management model that is common to all storage systems participating in a replication relationship, where the common management model may be used to implement each of the above-listed replication schemes.</p><p id="p-0650" num="0669">Further, in some implementations, based on the common management model for the different replication schemes, whether a first storage system (<b>2600</b>) is implementing asynchronous replication, synchronous replication, or some other replication scheme listed above, the replication scheme specifications are the same for network communication with another storage system. For example, as discussed above, a given replication scheme may not be aware of network communication details below a network transport mechanism, and consequently, whether the underlying media layer is different kinds of wireless networks or different kinds of physical networks, the given replication scheme handles communication commands to implement a given replication scheme similarly.</p><p id="p-0651" num="0670">In some implementations, a replication relationship is established when a first storage system (<b>2600</b>) begins replicating data with another storage system, where the first storage system (<b>2600</b>) may have its own internal management of data structures for defining storage objects, mapping objects to physical storage, deduplication, for defining mapping of content to snapshots, and other management tasks related to replicating data. In this way, while a common management model is used by all members of a replication relationship, individual members maintain management of local management information that uses the common management model.</p><p id="p-0652" num="0671">In some implementations, a replication relationship may be specified by a replication policy. In some examples, a replication policy may be considered a management object that specifies how a first storage system (<b>2600</b>) handles data replication in response to changes or in response to anticipated changes in network conditions, such as network bandwidth, network health, network latencies, types of networks.</p><p id="p-0653" num="0672">For example, a first storage system (<b>2600</b>) may use a replication policy to specify conditions or rules that determine modifications to the behavior of a replication scheme, that determine switching between replication schemes, both modifying behavior of a replication scheme and switching between different networks, or both switching between replication schemes and switching between different networks.</p><p id="p-0654" num="0673">In some implementations, a first storage system (<b>2600</b>) may, based on a replication policy, determine that if a Fibre Channel network is available, then a replication scheme to use with another storage system may be a synchronous replication scheme. Further, in this example, the replication policy may specify that the first storage system (<b>2600</b>) continue synchronous replication scheme unless there are changes to the health of the network, changes to available bandwidth, or changes to network latency.</p><p id="p-0655" num="0674">Further, in some implementations, a first storage system (<b>2600</b>) may, based on a replication policy, responsive to synchronizing a dataset (<b>2660</b>) with a synchronous replication scheme, that the replication scheme switch to a different replication scheme, such as asynchronous replication, snapshot-based replication, or any of the other above-listed replication schemes.</p><p id="p-0656" num="0675">In some implementations, based on replication policy, a first storage system (<b>2600</b>) may, in addition to or instead of responding to network conditions by switching networks, respond to changes in network loads or network traffic patterns. For example, a replication policy may specify that in response to network bandwidth availability that drops below a specified threshold, a replication scheme&#x2014;without switching networks or switching between messaging layers switch from a current replication scheme to a replication scheme that uses less network bandwidth. For example, the replication policy may specify a switch from using synchronous replication to snapshot-based replication, or some other type of lower bandwidth consumption replication scheme.</p><p id="p-0657" num="0676">In some implementations, a first storage system (<b>2600</b>) may, based on a replication policy, determine that responsive to switching from an external power supply to an internal power supply, switch replication schemes from a current replication scheme to a replication scheme that uses less power. For example, a first storage system (<b>2600</b>) may, responsive to switching to an internal battery power supply, switch from synchronous replication to periodic snapshot replication, or some other low-power replication scheme.</p><p id="p-0658" num="0677">Readers will appreciate that the storage systems described above may be similar to any of the storage systems described with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>3</b>C</figref>, including variations of such systems that include additional or fewer components, including combinations thereof. Likewise, the storage systems described above can even be implemented as an Amazon S3 target or other replication target in a cloud environment.</p><p id="p-0659" num="0678">Advantages and features of the present disclosure can be further described by the following statements:<ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0679">1. A method comprising: replicating, between a first storage system and a second storage system that are both located at a first physical location, a dataset; connecting, by the first storage system and responsive to movement of the first storage system to an intermediate physical location, to a communication network available at the intermediate physical location; and continuing, between the first storage system at the intermediate physical location and the second storage system at the first physical location, replication of the dataset over the communication network available at the intermediate physical location.</li>    <li id="ul0011-0002" num="0680">2. The method of statement 1, further comprising: establishing a replication scheme between the first storage system and the second storage system that includes replicating, between the first storage system and the second storage system, updates to the dataset that are received at either the first storage system or the second storage system; wherein the replication scheme synchronously or asynchronously maintains consistency between a version of the dataset stored on the first storage system and a version of the dataset stored on the second storage system.</li>    <li id="ul0011-0003" num="0681">3. The method of statement 2 or statement 1, further comprising: determining network characteristics of the communication network available at the intermediate physical location; and determining, based on the network characteristics of the communication network available at the intermediate physical location, that the communication network available at the intermediate physical location provides lower bandwidth than the communication network available at the first physical location.</li>    <li id="ul0011-0004" num="0682">4. The method of statement 3, statement 2, or statement 1, further comprising: selecting, responsive to the communication network available at the intermediate physical location relative providing lower bandwidth than the communication network available at the first physical location, a low-bandwidth replication scheme from among a plurality of replication schemes.</li>    <li id="ul0011-0005" num="0683">5. The method of statement 4, statement 3, statement 2, or statement 1, further comprising: transitioning, without terminating replication of the dataset and responsive to selecting the low-bandwidth replication scheme, the first storage system from using a current replication scheme to using the low-bandwidth replication scheme.</li>    <li id="ul0011-0006" num="0684">6. The method of statement 5, statement 4, statement 3, statement 2, or statement 1, further comprising: selecting, based on a change in network availability at the intermediate physical location and on expected performance improvement replicating the dataset, a replacement replication scheme; and transitioning, responsive to selecting the replacement replication scheme, from the low-bandwidth replication scheme to the replacement replication scheme.</li>    <li id="ul0011-0007" num="0685">7. The method of statement 6, statement 5, statement 4, statement 3, statement 2, or statement 1, further comprising: determining, relative to the first physical location, lower power availability at the intermediate physical location; and transitioning, based on the lower power availability at the intermediate physical location, the first storage system from using a current replication scheme to using a low-power replication scheme.</li>    <li id="ul0011-0008" num="0686">8. The method of statement 7, statement 6, statement 5, statement 4, statement 3, statement 2, or statement 1, wherein the current replication scheme and the low-power replication scheme are based on a common management model.</li>    <li id="ul0011-0009" num="0687">9. The method of statement 8, statement 7, statement 6, statement 5, statement 4, statement 3, statement 2, or statement 1, wherein the first physical location of the first storage system is within a geographically fixed data center, and wherein the intermediate physical location of the first storage system is a vehicle or a shipping container.</li>    <li id="ul0011-0010" num="0688">10. The method of statement 9, statement 8, statement 7, statement 6, statement 5, statement 4, statement 3, statement 2, or statement 1, further comprising: responsive to arrival of the first storage system to a destination physical location: synchronizing, with the second storage system replicating the dataset, the dataset with the second storage system to overcome any lags in synchronization of the dataset on the first storage system during transport between the first physical location and the physical destination location.</li>    <li id="ul0011-0011" num="0689">11. The method of statement 10, statement 9, statement 8, statement 7, statement 6, statement 5, statement 4, statement 3, statement 2, or statement 1, wherein the third physical location is a local, on-premises data center.</li>    <li id="ul0011-0012" num="0690">12. A first storage system comprising one or more storage devices; one or more network ports; and a storage controller, wherein the storage controller is configured to: replicate, between the first storage system and a second storage system that are both located at a first physical location, a dataset; connect, by the first storage system and responsive to movement of the first storage system to an intermediate physical location, to a communication network available at the intermediate physical location; and continue, between the first storage system at the intermediate physical location and the second storage system at the first physical location, replication of the dataset over the communication network available at the intermediate physical location.</li></ul></p><p id="p-0660" num="0691">One or more embodiments may be described herein with the aid of method steps illustrating the performance of specified functions and relationships thereof. The boundaries and sequence of these functional building blocks and method steps have been arbitrarily defined herein for convenience of description. Alternate boundaries and sequences can be defined so long as the specified functions and relationships are appropriately performed. Any such alternate boundaries or sequences are thus within the scope and spirit of the claims. Further, the boundaries of these functional building blocks have been arbitrarily defined for convenience of description. Alternate boundaries could be defined as long as the certain significant functions are appropriately performed. Similarly, flow diagram blocks may also have been arbitrarily defined herein to illustrate certain significant functionality.</p><p id="p-0661" num="0692">To the extent used, the flow diagram block boundaries and sequence could have been defined otherwise and still perform the certain significant functionality. Such alternate definitions of both functional building blocks and flow diagram blocks and sequences are thus within the scope and spirit of the claims. One of average skill in the art will also recognize that the functional building blocks, and other illustrative blocks, modules, and components herein, can be implemented as illustrated or by discrete components, application specific integrated circuits, processors executing appropriate software and the like or any combination thereof.</p><p id="p-0662" num="0693">While particular combinations of various functions and features of the one or more embodiments are expressly described herein, other combinations of these features and functions are likewise possible. The present disclosure is not limited by the particular examples disclosed herein and expressly incorporates these other combinations.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>replicating, between a first storage system and a second storage system, a dataset;</claim-text><claim-text>connecting, by the first storage system during movement of the first storage system to a new physical location, to a communication network available at one or more intermediate physical locations; and</claim-text><claim-text>continuing the replicating of the dataset between the first storage system at one or more of the intermediate physical locations and the second storage system over the communication network available at one or more of the intermediate physical locations.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein replicating the dataset comprises:<claim-text>establishing a replication scheme between the first storage system and the second storage system that includes replicating, between the first storage system and the second storage system, updates to the dataset that are received at either the first storage system or the second storage system;</claim-text><claim-text>wherein the replication scheme synchronously or asynchronously maintains consistency between a version of the dataset stored on the first storage system and a version of the dataset stored on the second storage system.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining network characteristics of the communication network available at one or more of the intermediate physical locations; and</claim-text><claim-text>determining, based on the network characteristics of the communication network available at one or more of the intermediate physical locations, that the communication network available at one or more of the intermediate physical locations provides lower bandwidth than one or more networks previously used for data replication.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:<claim-text>selecting, responsive to the communication network available at one or more of the intermediate physical locations providing lower bandwidth than the one or more networks previously used for data replication, a low-bandwidth replication scheme from among a plurality of replication schemes.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:<claim-text>transitioning, without terminating replication of the dataset and responsive to selecting the low-bandwidth replication scheme, the first storage system from using a current replication scheme to using the low-bandwidth replication scheme.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising:<claim-text>selecting, based on a change in network availability at one or more of the intermediate physical locations and on expected performance improvement replicating the dataset, a replacement replication scheme; and</claim-text><claim-text>transitioning, responsive to selecting the replacement replication scheme, from the low-bandwidth replication scheme to the replacement replication scheme.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining, relative to a first physical location, lower power availability at one or more of the intermediate physical locations; and</claim-text><claim-text>transitioning, based on the lower power availability at one or more of the intermediate physical locations, the first storage system from using a current replication scheme to using a low-power replication scheme.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the current replication scheme and the low-power replication scheme are based on a common management model.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a first physical location of the first storage system is within a geographically fixed data center, and wherein the one or more intermediate physical locations of the first storage system is within a vehicle or a shipping container.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>responsive to arrival of the first storage system to a physical destination location:<claim-text>synchronizing, with the second storage system replicating the dataset, the dataset with the second storage system to overcome any lags in synchronization of the dataset on the first storage system during transport to the physical destination location.</claim-text></claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A storage system comprising:<claim-text>one or more storage devices;</claim-text><claim-text>one or more network ports; and</claim-text><claim-text>a storage controller, wherein the storage controller is configured to:<claim-text>replicate, between a first storage system and a second storage system, a dataset;</claim-text><claim-text>connect, by the first storage system during movement of the first storage system to a new physical location, to a communication network available at one or more intermediate physical locations; and</claim-text><claim-text>continue the replicating of the dataset between the first storage system at one or more of the intermediate physical locations and the second storage system over the communication network available at one or more of the intermediate physical locations.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A computer program product disposed upon a computer readable medium, the computer program product comprising computer program instructions that, when executed, cause a computer to carry out the steps of:<claim-text>replicating, between a first storage system and a second storage system that are both located at a first physical location, a dataset;</claim-text><claim-text>connecting, by the first storage system and responsive to movement of the first storage system through an intermediate physical location, to a communication network available at the intermediate physical location; and</claim-text><claim-text>continuing, between the first storage system at the intermediate physical location and the second storage system at the first physical location, replication of the dataset over the communication network available at the intermediate physical location.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising computer program instructions that, when executed, cause the computer to carry out the steps of:<claim-text>determining network characteristics of the communication network available at the intermediate physical location; and</claim-text><claim-text>determining, based on the network characteristics of the communication network available at the intermediate physical location, that the communication network available at the intermediate physical location provides lower bandwidth than the communication network available at the first physical location.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising computer program instructions that, when executed, cause the computer to carry out the steps of:<claim-text>selecting, responsive to the communication network available at the intermediate physical location relative providing lower bandwidth than the communication network available at the first physical location, a low-bandwidth replication scheme from among a plurality of replication schemes.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The computer program product of <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising computer program instructions that, when executed, cause the computer to carry out the steps of:<claim-text>transitioning, without terminating replication of the dataset and responsive to selecting the low-bandwidth replication scheme, the first storage system from using a current replication scheme to using the low-bandwidth replication scheme.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising computer program instructions that, when executed, cause the computer to carry out the steps of:<claim-text>selecting, based on a change in network availability at the intermediate physical location and on expected performance improvement replicating the dataset, a replacement replication scheme; and</claim-text><claim-text>transitioning, responsive to selecting the replacement replication scheme, from the low-bandwidth replication scheme to the replacement replication scheme.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising computer program instructions that, when executed, cause the computer to carry out the steps of:<claim-text>determining, relative to a first physical location, lower power availability at the intermediate physical location; and</claim-text><claim-text>transitioning, based on the lower power availability at the intermediate physical location, the first storage system from using a current replication scheme to using a low-power replication scheme.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer program product of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the current replication scheme and the low-power replication scheme are based on a common management model.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein a first physical location of the first storage system is within a geographically fixed data center, and wherein the intermediate physical location of the first storage system is a vehicle or a shipping container.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer program product of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising computer program instructions that, when executed, cause the computer to carry out the steps of:<claim-text>responsive to arrival of the first storage system to a physical destination location:<claim-text>synchronizing, with the second storage system replicating the dataset, the dataset with the second storage system to overcome any lags in synchronization of the dataset on the first storage system during transport to the physical destination location.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>